     1                                  ;Installs DOS onto a target Disk. Copies system files and a command interpreter
     2                                  ;Also sets the byte in the VBR to bootable once everything is copied over.
     3                                  
     4                                  ;1) Check Root Dir has no entries in it (ignoring Volume Labels)
     5                                  ;2) Search for the boot files in the root dir of current drive.
     6                                  ;3) If the boot files are found, read them both into memory.
     7                                  ;4) Write them onto the target medium root dir and close the handles.
     8                                  ;5) Enter a critical section and direct IO read sector 0 of the volume
     9                                  ;6) Set the bootable flag to on and fix the SCP/BIOS struct data for 
    10                                  ;    SCP/BIOS.SYS and SCP/DOS.SYS.
    11                                  ;7) Write back to disk, Exit critical section and exit.
    12                                  
    13                                  ;SYS needs to set the startSector (QWORD) and numberOfSectors (WORD) as 
    14                                  ; well as the transfer packet.
    15                                  ;The first is to locate a copy of SCPBIOS somewhere on the disk (can be
    16                                  ; in another volume).
    17                                  ;The second is tho locate SCPDOS to load after SCPBIOS is complete and 
    18                                  ; resident.
    19                                  
    20                                  ;startSector and numberOfSectors are always placed in that order
    21                                  ; directly AFTER the BPB (or BPB32, please check which FAT type we are).
    22                                  ;The transfer packet is always located before the boot switch byte.
    23                                  ;The boot switch byte is always located before the boot signature.
    24                                  
    25                                  ;Called with SYS X: where X is the drive we want to install System files on
    26                                  
    27                                  [map all ./Source/Utils/SYS/Listings/sys.map]
    28                                  [DEFAULT REL]
    29                                  BITS 64
    30                                  %include "./Source/Include/dosMacro.mac"
    31                              <1> 
    32                              <1> ;-------------------------------------------------------------------------------
    33                              <1> ;Generic Macros file
    34                              <1> ;The following instruction extensions allow to conditionally return
    35                              <1> ;The idea was borrowed from the DOS Source Code
    36                              <1> ;
    37                              <1> ;-------------------------------------------------------------------------------
    38                              <1> 
    39                              <1> ;-------------------------------------------------------------------------------
    40                              <1> ;These macros are live and must not be touched
    41                              <1> ;-------------------------------------------------------------------------------
    42                              <1> %macro return 0
    43                              <1> %%_ret:
    44                              <1>     ret
    45                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro cret 1
    49                              <1> %%_base:
    50                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    51                              <1>     %ifdef retOff
    52                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    53                              <1>     %ifdef currSegVBase
    54                              <1>     j%+1 short (retOff+currSegVBase)
    55                              <1>     %else
    56                              <1>     j%+1 short retOff
    57                              <1>     %endif  ;End ifdef currSegVBase
    58                              <1>     %else 
    59                              <1>     j%-1 short %%a
    60                              <1>     return
    61                              <1> %%a:
    62                              <1>     %endif  ;End the distance measurement if
    63                              <1>     %else   
    64                              <1>     j%-1 short %%a
    65                              <1>     return
    66                              <1> %%a:
    67                              <1>     %endif  ;End ifdef retoff
    68                              <1> %endmacro
    69                              <1> 
    70                              <1> %macro retz 0
    71                              <1> cret z
    72                              <1> %endmacro
    73                              <1> 
    74                              <1> %macro retnz 0
    75                              <1> cret nz
    76                              <1> %endmacro
    77                              <1> 
    78                              <1> %macro rete 0
    79                              <1> cret e
    80                              <1> %endmacro
    81                              <1> 
    82                              <1> %macro retne 0
    83                              <1> cret ne
    84                              <1> %endmacro
    85                              <1> 
    86                              <1> %macro retc 0
    87                              <1> cret c
    88                              <1> %endmacro
    89                              <1> 
    90                              <1> %macro retnc 0
    91                              <1> cret nc
    92                              <1> %endmacro
    93                              <1> 
    94                              <1> %macro retb 0
    95                              <1> cret b
    96                              <1> %endmacro
    97                              <1> 
    98                              <1> %macro retnb 0
    99                              <1> cret nb
   100                              <1> %endmacro
   101                              <1> 
   102                              <1> %macro reta 0
   103                              <1> cret a
   104                              <1> %endmacro
   105                              <1> 
   106                              <1> %macro retna 0
   107                              <1> cret na
   108                              <1> %endmacro
   109                              <1> 
   110                              <1> %macro breakpoint 0
   111                              <1> xchg bx, bx
   112                              <1> %endmacro
    31                                  %include "./Source/Include/dosStruc.inc"
    32                              <1> 
    33                              <1> ;-------------------------------------------------------;
    34                              <1> ; This include file contains miscellaneous internal     ;
    35                              <1> ; SCP/DOS structures.                                   ;
    36                              <1> ;-------------------------------------------------------;
    37                              <1> 
    38                              <1> ;------------------------------------------------------------------------;
    39                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    40                              <1> ; its file system structure. This is used to locate files and structures
    41                              <1> ; on the device itself and to translate file requests to cluster chains
    42                              <1> ; to LBAs to pass to the disk driver..
    43                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    44                              <1> ; drivers Initialise routine has been called.
    45                              <1> ;------------------------------------------------------------------------;
    46                              <1> struc dpb        ;Drive Parameter Block
    47                              <1> 
    48 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    49 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    50 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    51 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    52 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    53 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    54 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    55 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    56 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    57 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    58 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    59 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    60                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    61 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    62 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    63 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    64 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    65 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    66 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    67                              <1> 
    68                              <1> endstruc
    69                              <1> 
    70                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    71                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    72                              <1> ;------------------------------------------------------------------------;
    73                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    74                              <1> ; All disk pathing requests go via the CDS for that drive.
    75                              <1> ; The default drive is the last accessed drive, this number is stored
    76                              <1> ; in the DOS data area.
    77                              <1> ; The CDS is stored as an array with the offset into the array being 
    78                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    79                              <1> ;
    80                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    81                              <1> ;------------------------------------------------------------------------;
    82                              <1> struc cds       ;Current Directory structure
    83 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    84 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    85 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    86 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    87 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    88 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    89                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    90                              <1> ; another, we save the number of chars to skip to that deep level).
    91                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    92                              <1> ; Only affects for SUBST drives, not JOIN
    93                              <1> ; Flags: Bit 15 set = Network drive
    94                              <1> ;        Bit 14 set = Physical drive
    95                              <1> ;        Bit 13 set = JOIN'ed drive
    96                              <1> ;        Bit 12 set = SUBST'ed drive
    97                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    98                              <1> endstruc
    99                              <1> ;CDS equates
   100                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
   101                              <1> cdsValidDrive   equ 4000h   ;CDS valid
   102                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
   103                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
   104                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
   105                              <1> ;------------------------------------------------------------------------;
   106                              <1> ; The SFT is a way to allow applications to open file handles to files 
   107                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
   108                              <1> ; under the first header, and then a second header will be linked to the 
   109                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
   110                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
   111                              <1> ; using the FCBS= command. Default FCBS=5.
   112                              <1> ;
   113                              <1> ; A file handle describes the file, and the location within the file that
   114                              <1> ; we are reading. The file handle can be manipulated without the file
   115                              <1> ; being in memory, thus allowing the user to access data without needing 
   116                              <1> ; to take up large portions of memory. Similarly, file handles allow for
   117                              <1> ; accessing devices, by treating them as files with their drivers 
   118                              <1> ; responding and translating the manipulations of the file handle itself.
   119                              <1> ; Neither the driver nor the application should see or use the SFT for
   120                              <1> ; the handle, as it is subject to change (and will change when file 
   121                              <1> ; sharing provisions are included). The DOS will make requests to the 
   122                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
   123                              <1> ; track of the information in the SFT entry for that handle. 
   124                              <1> ;
   125                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   126                              <1> ; can point to the same file. It all depends on what the applications 
   127                              <1> ; want to do with the File.
   128                              <1> ;
   129                              <1> ; !!!!IMPORTANT!!!!
   130                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   131                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   132                              <1> ;
   133                              <1> ;Each SFT may look like this:
   134                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   135                              <1> ;            |                |
   136                              <1> ;       wNumFiles*sft    wNumFiles*sft
   137                              <1> ;
   138                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   139                              <1> ; System FCBs.
   140                              <1> ;
   141                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   142                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   143                              <1> ;
   144                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   145                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   146                              <1> ;------------------------------------------------------------------------;
   147                              <1> struc sfth   ;System file table header
   148                              <1> ; This is the SFT header.
   149                              <1> ; This structure comes before the start of the first file in the array/table.
   150 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   151 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   152                              <1> endstruc
   153                              <1> 
   154                              <1> struc sft
   155                              <1> ;This is the file struc itself
   156 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   157 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   158 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   159 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   160 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   161 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   162 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   163 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   164 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   165 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   166 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   167 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   168 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   169 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   170 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   171 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   172 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   173 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   174 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   175                              <1> ;                           0 means no record
   176                              <1> endstruc
   177                              <1> ;Open Mode equates
   178                              <1> ;Access modes   Bits[2:0]
   179                              <1> ReadAccess      equ 0h
   180                              <1> WriteAccess     equ 1h
   181                              <1> RWAccess        equ 2h
   182                              <1> ;Bit 3 reserved 0
   183                              <1> ;Sharing modes  Bits[6:4]
   184                              <1> CompatShare     equ 0h
   185                              <1> denyRWShare     equ 10h
   186                              <1> denyWriteShare  equ 20h
   187                              <1> denyReadShare   equ 30h
   188                              <1> denyNoneShare   equ 40h
   189                              <1> netFCBShare     equ 70h
   190                              <1> noInherit       equ 80h
   191                              <1> ;Bits 8-12 reserved 0
   192                              <1> 
   193                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   194                              <1> ;Buffering on writes
   195                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   196                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   197                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   198                              <1> ;Attribute Byte
   199                              <1> readOnlyFile    equ 1h
   200                              <1> hiddenFile      equ 2h
   201                              <1> systemFile      equ 4h
   202                              <1> volumeLabel     equ 8h
   203                              <1> directoryFile   equ 10h ;Directory entry
   204                              <1> archiveFile     equ 20h
   205                              <1> ;Device Info equates
   206                              <1> ;For a block device, bits [5:0] contain the drive number
   207                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   208                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   209                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   210                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   211                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   212                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   213                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   214                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   215                              <1> devCharDev      equ 80h ;If set, it is a char device!
   216                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   217                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   218                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   219                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   220                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   221                              <1>  
   222                              <1> ;------------------------------------------------------------------------;
   223                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   224                              <1> ; to an internal buffer, and then copying it to the specified location
   225                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   226                              <1> ; another request for the same sector from the same device is made, so 
   227                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   228                              <1> ; size, selected according to the largest detected sector size during 
   229                              <1> ; the initial loadup.
   230                              <1> ;
   231                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   232                              <1> ;
   233                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   234                              <1> ;------------------------------------------------------------------------;
   235                              <1> 
   236                              <1> struc bufferHdr
   237 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   238 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   239 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   240 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   241 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   242 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   243 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   244 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   245 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   246                              <1>     .dataarea:             ;Points to the start of the data area
   247                              <1> endstruc
   248                              <1> ;Buffer Flag equates
   249                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   250                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   251                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   252                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   253                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   254                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   255                              <1> ;Note! A buffer is marked as referenced only when the application 
   256                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   257                              <1> ;------------------------------------------------------------------------;
   258                              <1> ; Memory control block for each memory arena
   259                              <1> ;------------------------------------------------------------------------;
   260                              <1> struc mcb
   261 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   262 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   263 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   264 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   265                              <1>     .program:
   266                              <1> endstruc
   267                              <1> ;MCB equates
   268                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   269                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   270                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   271                              <1> mcbMarkCtn      equ "M"
   272                              <1> mcbMarkEnd      equ "Z"
   273                              <1> 
   274                              <1> memFirstFit     equ 0   ;First free block goes to application
   275                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   276                              <1> memLastFit      equ 2   ;Last free block goes to application
   277                              <1> 
   278                              <1> ;Owner = Para aligned address => Owning application PSP
   279                              <1> ;...To consider...
   280                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   281                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   282                              <1> ;------------------------------------------------------------------------;
   283                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   284                              <1> ; following order, thus allowing for return values to be placed in the 
   285                              <1> ; registers by accessing the caller register stack frame.
   286                              <1> ;------------------------------------------------------------------------;
   287                              <1> struc callerFrame
   288 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   289 00000008 ????????????????    <1>     .rbx    resq 1    
   290 00000010 ????????????????    <1>     .rcx    resq 1
   291 00000018 ????????????????    <1>     .rdx    resq 1
   292 00000020 ????????????????    <1>     .rsi    resq 1
   293 00000028 ????????????????    <1>     .rdi    resq 1
   294 00000030 ????????????????    <1>     .rbp    resq 1
   295 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   296 00000040 ????????????????    <1>     .r9     resq 1
   297                              <1> ;Pushed by Processor when invoked via Interrupt
   298 00000048 ????????????????    <1>     .rip    resq 1
   299 00000050 ????????????????    <1>     .cs     resq 1
   300 00000058 ????????????????    <1>     .flags  resq 1
   301                              <1> endstruc
   302                              <1> 
   303                              <1> struc dpl
   304                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   305                              <1> ; server calls
   306 00000000 ????????????????    <1>     .rax    resq 1
   307 00000008 ????????????????    <1>     .rbx    resq 1
   308 00000010 ????????????????    <1>     .rcx    resq 1
   309 00000018 ????????????????    <1>     .rdx    resq 1
   310 00000020 ????????????????    <1>     .rsi    resq 1
   311 00000028 ????????????????    <1>     .rdi    resq 1
   312 00000030 ????????????????    <1>     .r8     resq 1
   313 00000038 ????????????????    <1>     .r9     resq 1
   314 00000040 ????????????????    <1>     .align  resq 1
   315 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   316 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   317                              <1> endstruc
   318                              <1> 
   319                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   320 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   321 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   322 00000010 ????????????????    <1>     .newSFTVal      resq 1
   323 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   324 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   325 00000028 ????????????????    <1>     .newLastdrive   resq 1
   326 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   327 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   328 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   329 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   330 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   331 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   332 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   333                              <1> endstruc
   334                              <1> 
   335                              <1> struc filename
   336                              <1> ;8.3 File name struct
   337 00000000 ????????????????    <1>     .fName  resb 8
   338 00000008 ??????              <1>     .fExt   resb 3
   339                              <1> endstruc
   340                              <1> 
   341                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   342 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   343 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   344 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   345 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   346 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   347 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   348 00000016 ????                <1>     .fileTime   resw 1  ;File time
   349 00000018 ????                <1>     .fileDate   resw 1  ;File date
   350 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   351 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   352                              <1> endstruc
   353                              <1> 
   354                              <1> struc psp
   355 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   356 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   357 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   358 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   359 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   360 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   361 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   362 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   363 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   364 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   365 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   366 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   367 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   368 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   369                              <1> ;Extra handle arrays are grouped into a linked list
   370                              <1> ;The below are in the same place as in DOS
   371 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   372 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   373                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   374 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   375 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   376                              <1> endstruc
   377                              <1> 
   378                              <1> struc clkStruc
   379 00000000 ????                <1>     .dateWord   resw 1
   380 00000002 ??                  <1>     .minutes    resb 1
   381 00000003 ??                  <1>     .hours      resb 1
   382 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   383 00000005 ??                  <1>     .seconds    resb 1
   384                              <1> endstruc
   385                              <1> 
   386                              <1> struc countryStruc
   387 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   388                              <1>                         ;0 = month day year hh:mm:ss
   389                              <1>                         ;1 = day month year hh:mm:ss
   390                              <1>                         ;2 = year month day hh:mm:ss
   391 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   392 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   393 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   394 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   395 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   396 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   397                              <1>                         ;0 = Symbol leads, without space
   398                              <1>                         ;1 = Symbol follows, without space
   399                              <1>                         ;2 = Symbol leads, one space
   400                              <1>                         ;3 = Symbol follows, one space
   401                              <1>                         ;4 = Symbol replace decimal separator
   402 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   403 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   404 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   405 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   406 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   407                              <1> endstruc
   408                              <1> 
   409                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   410                              <1> ;for a space of 64Gb
   411                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   412                              <1> dosLowBase  equ 600h    ;Low load address
   413                              <1> 
   414                              <1> ;Critical Error AH bitfield equates
   415                              <1> critRead    equ 0h
   416                              <1> critWrite   equ 1h
   417                              <1> critDOS     equ 0h
   418                              <1> critFAT     equ 2h
   419                              <1> critDir     equ 4h
   420                              <1> critData    equ 6h
   421                              <1> critFailOK  equ 8h
   422                              <1> critRetryOK equ 10h
   423                              <1> critIgnorOK equ 20h
   424                              <1> critCharDev equ 80h
   425                              <1> 
   426                              <1> critIgnore  equ 0
   427                              <1> critRetry   equ 1
   428                              <1> critAbort   equ 2
   429                              <1> critFail    equ 3
   430                              <1> 
   431                              <1> ;MISC ASCII control chars
   432                              <1> NUL equ 00h ;^@         | ASCII Null
   433                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   434                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   435                              <1> BEL equ 07h ;^G         | ASCII Bell
   436                              <1> BSP equ 08h ;^H         | ASCII Backspace
   437                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   438                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   439                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   440                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   441                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   442                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   443                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   444                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   445                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   446                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   447                              <1> SPC equ 20h ;Printable  | ASCII Space
   448                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   449                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   450                              <1> 
   451                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   452                              <1> ;Extended Ascii Codes
   453                              <1> eF1     equ 3Bh ;F1 second byte
   454                              <1> eF2     equ 3Ch ;F2 second byte
   455                              <1> eF3     equ 3Dh ;F3 second byte
   456                              <1> eF4     equ 3Eh ;F4 second byte
   457                              <1> eF5     equ 3Fh ;F5 second byte
   458                              <1> eF6     equ 40h ;F6 second byte
   459                              <1> eF7     equ 41h ;F7 second byte
   460                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   461                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   462                              <1> eIns    equ 52h ;Insert second byte
   463                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   464                              <1> 
   465                              <1> ;Default Configuration for the system
   466                              <1> 
   467                              <1> buffersDefault  equ 30
   468                              <1> filesDefault    equ 20
   469                              <1> fcbsDefault     equ 4
   470                              <1> safeFcbsDeflt   equ 0
   471                              <1> lastDriveDeflt  equ 5   
    32                                  %include "./Source/Include/fatStruc.inc"
    33                              <1> 
    34                              <1> ;-------------------------------------------------------;
    35                              <1> ; This include file contains miscellaneous FAT driver   ;
    36                              <1> ; structures. exFAT will have it's own files at a later ;
    37                              <1> ; stage.                                                ;
    38                              <1> ;-------------------------------------------------------;
    39                              <1> ;-------------------------------------------------------;
    40                              <1> ;-------------------------------------------------------;
    41                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    42                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    43                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    44                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    45                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    46                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    47                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    48                              <1> ;-------------------------------------------------------;
    49                              <1> 
    50                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    51                              <1> 
    52 00000000 ??????              <1>     .jmpBoot    resb 3 
    53 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    54 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    55 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    56 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    57 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    58 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    59 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    60 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    61 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    62 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    63 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    64 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    65 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    66                              <1> 
    67 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    68 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    69 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    70 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    71 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    72 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    73                              <1> 
    74                              <1> endstruc
    75                              <1> 
    76                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    77                              <1> 
    78 00000000 ??????              <1>     .jmpBoot    resb 3
    79 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    80 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    81 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    82 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    83 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    84 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    85 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    86 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    87 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    88 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    89 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    90 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    91 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    92                              <1> 
    93 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    94 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    95 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    96 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    97 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    98 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    99 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
   100                              <1> 
   101 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
   102 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
   103 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
   104 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
   105 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
   106 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
   107                              <1> 
   108                              <1> endstruc
   109                              <1> 
   110                              <1> struc mbr
   111 00000000 <res 1B8h>          <1>     .bsCode     resb 440
   112 000001B8 ????????            <1>     .diskID     resb 4
   113 000001BC ????                <1>     .reserved   resb 2
   114 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
   115 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
   116 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
   117 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
   118 000001FE ????                <1>     .mbrSig     resb 2
   119                              <1> endstruc
   120                              <1> 
   121                              <1> struc mbrEntry
   122 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
   123 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
   124 00000004 ??                  <1>     .ptnType    resb 1
   125 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   126 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   127 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   128                              <1> endstruc
   129                              <1> 
   130                              <1> struc ebr
   131 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   132 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   133 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   134 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   135 000001FE ????                <1>     .mbrSig     resb 2
   136                              <1> endstruc
   137                              <1> 
   138                              <1> 
   139                              <1> struc fatDirEntry
   140                              <1> 
   141 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name w/o fullstop
   142 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   143 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   144 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   145 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   146 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   147 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   148 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   149 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   150 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   151 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   152 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   153                              <1> 
   154                              <1> endstruc
   155                              <1> ;Directory attribute equates
   156                              <1>     dirReadOnly     equ 01h
   157                              <1>     dirHidden       equ 02h
   158                              <1>     dirSystem       equ 04h
   159                              <1>     dirVolumeID     equ 08h
   160                              <1>     dirDirectory    equ 10h
   161                              <1>     dirArchive      equ 20h
   162                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   163                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   164                              <1>     ;If any of the three bits are set, then ALL three bits are set
   165                              <1>     ; in addition to whatever the user passed to search for.
   166                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   167                              <1>     dirIncFiles     equ dirHidden | dirSystem
   168                              <1> 
   169                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   170                              <1> 
   171 00000000 ??????              <1>     .jmpBoot                resb 3 
   172 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   173 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   174 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   175 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   176 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   177 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   178 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   179 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   180 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   181 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   182 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   183 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   184 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   185 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   186 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   187 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   188 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   189 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   190                              <1> 
   191                              <1> endstruc
   192                              <1> 
   193                              <1> struc FSInfo
   194                              <1> 
   195 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   196 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   197 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   198 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   199 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   200 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   201 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   202                              <1> 
   203                              <1> endstruc
   204                              <1> 
   205                              <1> %macro defaultBPB 0
   206                              <1>     db 0E9h
   207                              <1>     db 00h
   208                              <1>     db 90h
   209                              <1>     db 'SCPDOSv1'
   210                              <1>     dw 0200h                       
   211                              <1>     db 01h                         
   212                              <1>     dw 0001h                           
   213                              <1>     db 02h                              
   214                              <1>     dw 00E0h            
   215                              <1>     dw 0B40h   
   216                              <1>     db 0F0h                   
   217                              <1>     dw 0009h                   
   218                              <1>     dw 0012h                     
   219                              <1>     dw 0002h                  
   220                              <1>     dd 0                 
   221                              <1>     dd 0 
   222                              <1>     db 00h
   223                              <1>     db 00h
   224                              <1>     db 29h
   225                              <1>     dd 0
   226                              <1>     db 'NO NAME    '
   227                              <1>     db 'FAT12   '
   228                              <1>     db 58 dup 0 ;Size padding for a FAT12/16 BPB to make it 120 bytes long
   229                              <1> %endmacro
    33                                  %include "./Source/Include/dosError.inc"
    34                              <1> ;DOS Error codes
    35                              <1> 
    36                              <1> ;Extended Error Codes
    37                              <1> errInvFnc   equ 1   ;Invalid function number
    38                              <1> errFnf      equ 2   ;File not found
    39                              <1> errPnf      equ 3   ;Path not found
    40                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    41                              <1> errAccDen   equ 5   ;Access denied (to resource)
    42                              <1> errBadHdl   equ 6   ;Invalid handle
    43                              <1> errMCBbad   equ 7   ;MCB's destroyed
    44                              <1> errNoMem    equ 8   ;Insufficient memory
    45                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    46                              <1> errBadEnv   equ 10  ;Invalid environment
    47                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    48                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    49                              <1> errInvDat   equ 13  ;Invalid data
    50                              <1> ;           equ 14  ;Reserved
    51                              <1> errBadDrv   equ 15  ;Invalid drive specified
    52                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    53                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    54                              <1> errNoFil    equ 18  ;No more files, no match found
    55                              <1> ;The following are Driver error codes + 19
    56                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    57                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    58                              <1> errUnkUnt   equ 20  ;Unknown Unit
    59                              <1> errDrvNR    equ 21  ;Drive not ready
    60                              <1> errUnkCmd   equ 22  ;Unknown Command
    61                              <1> errCRCerr   equ 23  ;Data (CRC) error
    62                              <1> errBadRLn   equ 24  ;Bad request structure length
    63                              <1> errSekErr   equ 25  ;Seek error
    64                              <1> errUnkMed   equ 26  ;Unknown media type
    65                              <1> errSecNF    equ 27  ;Sector not Found
    66                              <1> errNoPap    equ 28  ;Printer out of paper
    67                              <1> errWF       equ 29  ;Write fault
    68                              <1> errRF       equ 30  ;Read fault
    69                              <1> errGF       equ 31  ;General fault
    70                              <1> ;----------------------------------------------
    71                              <1> ;The following two go inbetween the Disk errors
    72                              <1> errShrVio   equ 32  ;Sharing violations
    73                              <1> errLokVio   equ 33  ;File Lock violation
    74                              <1> ;----------------------------------------------
    75                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    76                              <1> errNoFCB    equ 35  ;FCB unavailable
    77                              <1> errShrFul   equ 36  ;Sharing buffer full
    78                              <1> 
    79                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    80                              <1> 
    81                              <1> errFilExist equ 80  ;File already exists
    82                              <1> errDirExist equ 82  ;Directory already exists
    83                              <1> errFI44     equ 83  ;Fail on INT 44h
    84                              <1> errRedir    equ 84  ;Too many levels of redirection
    85                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    86                              <1> errBadPass  equ 86  ;Bad password
    87                              <1> errBadParam equ 87  ;Bad parameter passed to request
    88                              <1> errNetWrite equ 88  ;Network Write Fault
    89                              <1> ;-----------------------------------------------------------------------------
    90                              <1> ;Error Loci
    91                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    92                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    93                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    94                              <1> eLocChr     equ 4   ;Serial/Character Device error
    95                              <1> eLocMem     equ 5   ;Related to RAM
    96                              <1> ;-----------------------------------------------------------------------------
    97                              <1> ;Error Actions
    98                              <1> eActRet     equ 1   ;Retry
    99                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
   100                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
   101                              <1> eActAbt     equ 4   ;Abort with cleanup
   102                              <1> eActKil     equ 5   ;Abort without cleanup
   103                              <1> eActIgn     equ 6   ;Ignore error
   104                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
   105                              <1> ;-----------------------------------------------------------------------------
   106                              <1> ;Error classes
   107                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
   108                              <1> eClsTS      equ 2   ;Temp sitch, should go away
   109                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
   110                              <1> eClsInt     equ 4   ;Internal DOS error or bug
   111                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
   112                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
   113                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
   114                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
   115                              <1> eClsBadFmt  equ 9   ;Bad format for resource
   116                              <1> eClsLocked  equ 10  ;Resource Locked
   117                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
   118                              <1> eClsClash   equ 12  ;Resource already exists!
   119                              <1> eClsUnk     equ 13  ;Unknown class
    34                                  
    35                                  struc sysInitTableStruc
    36 00000000 ??                          .length     resb 1
    37 00000001 ??                          .numSec     resb 1
    38 00000002 ????                        .resWord    resb 2
    39 00000004 ????????????????            .firstLba   resb 8
    40                                  ;---------The below is added for convenience----------
    41 0000000C ??                          .bootable   resb 1  ;Flag to indicate bootable
    42                                  endstruc
    43                                  
    44                                  %include "./Source/Utils/SYS/Source/sysMain.asm"
    45                              <1> startSys:
    46 00000000 EB03                <1>     jmp short .cVersion
    47 00000002 01                  <1> .vNum:          db 1
    48 00000003 0002                <1> .sectorSize:    dw 200h
    49                              <1> .cVersion:
    50 00000005 50                  <1>     push rax
    51 00000006 B430                <1>     mov ah, 30h
    52 00000008 CD41                <1>     int 41h
    53 0000000A 3A05F2FFFFFF        <1>     cmp al, byte [.vNum] ;Version 1
    54 00000010 760D                <1>     jbe .okVersion
    55 00000012 58                  <1>     pop rax
    56 00000013 488D153B050000      <1>     lea rdx, badVerStr
    57 0000001A E9C9020000          <1>     jmp badPrint ;Exit to caller or DOS to print bad command interpreter line
    58                              <1> .okVersion:
    59                              <1> ;Check the passed argument is ok (flag in al)
    60 0000001F 58                  <1>     pop rax
    61 00000020 3CFF                <1>     cmp al, -1
    62 00000022 750C                <1>     jnz .driveOk
    63                              <1> .badDrive:
    64 00000024 488D1540050000      <1>     lea rdx, badDrvLtr
    65 0000002B E9B8020000          <1>     jmp badPrint
    66                              <1> .driveOk:
    67                              <1> ;Now fetch the drive we are working on
    68 00000030 418A505C            <1>     mov dl, byte [r8 + psp.fcb1] ;Get the fcb 1 based drvNum
    69 00000034 FECA                <1>     dec dl  ;Turn it into a 0 based number
    70 00000036 88159D040000        <1>     mov byte [sysDrive], dl
    71 0000003C 80C241              <1>     add dl, "A"
    72 0000003F 881509050000        <1>     mov byte [rootDir], dl
    73 00000045 8815C6040000        <1>     mov byte [biosDest], dl
    74 0000004B 8815DD040000        <1>     mov byte [dosDest], dl
    75                              <1>     ;Now get current drive
    76 00000051 B800190000          <1>     mov eax, 1900h  ;Get current drive as the source of the copy
    77 00000056 CD41                <1>     int 41h
    78 00000058 0441                <1>     add al, "A" ;Convert to an ASCII char
    79 0000005A 8805A2040000        <1>     mov byte [biosFile], al
    80 00000060 8805BA040000        <1>     mov byte [dosFile], al
    81                              <1> ;Now we check that the drive specified is a physical device
    82 00000066 B452                <1>     mov ah, 52h
    83 00000068 CD41                <1>     int 41h ;Get in rbx a ptr to list of lists
    84 0000006A 4881C32A000000      <1>     add rbx, 2Ah    ;Point rbx to cdsHeadPtr
    85 00000071 488B33              <1>     mov rsi, qword [rbx]    ;Get the ptr to the CDS array
    86 00000074 0FB60D5E040000      <1>     movzx ecx, byte [sysDrive]
    87 0000007B 67E30B              <1>     jecxz .atCurrentCDS
    88                              <1> .walkCDSArray:
    89 0000007E 4881C65B000000      <1>     add rsi, cds_size
    90 00000085 FFC9                <1>     dec ecx
    91 00000087 75F5                <1>     jnz .walkCDSArray
    92                              <1> .atCurrentCDS: 
    93 00000089 66F7464300B0        <1>     test word [rsi + cds.wFlags], cdsJoinDrive | cdsSubstDrive | cdsRedirDrive
    94 0000008F 7593                <1>     jnz .badDrive
    95 00000091 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]  ;Get the DPB ptr 
    96 00000095 4889354E040000      <1>     mov qword [dpbPtr], rsi ;Save the DPB ptr
    97                              <1> ;Now step 1, search root dir, if a file is found
    98 0000009C 488D15AB040000      <1>     lea rdx, rootDir
    99 000000A3 B916000000          <1>     mov ecx, dirInclusive
   100 000000A8 B8004E0000          <1>     mov eax, 4E00h
   101 000000AD CD41                <1>     int 41h
   102 000000AF 7310                <1>     jnc .fileFound
   103 000000B1 3C02                <1>     cmp al, errFnf
   104 000000B3 7426                <1>     je .rootDirOk
   105                              <1> .badRoot:
   106 000000B5 488D15C9040000      <1>     lea rdx, badRootDir
   107 000000BC E927020000          <1>     jmp badPrint
   108                              <1> .fileFound:
   109                              <1> ;A File was found, if it is a Volume Label, do a find next
   110 000000C1 498DB880000000      <1>     lea rdi, qword [r8 + psp.dta]   ;Get ptr to the find first block
   111 000000C8 807F0C08            <1>     cmp byte [rdi + ffBlock.attrib], dirVolumeID
   112 000000CC 75E7                <1>     jne .badRoot
   113 000000CE B8004F0000          <1>     mov eax, 4F00h  ;Find Next
   114 000000D3 CD41                <1>     int 41h
   115 000000D5 73DE                <1>     jnc .badRoot    ;Another file found, exit bad
   116 000000D7 3C12                <1>     cmp al, errNoFil
   117 000000D9 75DA                <1>     jne .badRoot
   118                              <1> .rootDirOk:
   119 000000DB F8                  <1>     clc ;Clear CF
   120 000000DC B8001C0000          <1>     mov eax, 1C00h  ;Get FAT information
   121 000000E1 8A15F2030000        <1>     mov dl, byte [sysDrive]
   122 000000E7 FEC2                <1>     inc dl  ;Convert to 1 based number
   123 000000E9 CD41                <1>     int 41h
   124 000000EB 66890DF1030000      <1>     mov word [sectorSize], cx   ;Move the sector size in, use for buffer size
   125 000000F2 8805ED030000        <1>     mov byte [secPerClus], al   ;Save the number of sectors per cluster too
   126 000000F8 8915E8030000        <1>     mov dword [clustCnt], edx   ;Save the count of clusters
   127 000000FE 488D1541050000      <1>     lea rdx, badSecSize
   128 00000105 663B0DF7FEFFFF      <1>     cmp cx, word [startSys.sectorSize]    ;Temporary restriction for DOS 1.0.
   129 0000010C 0F85D6010000        <1>     jne badPrint
   130                              <1> ;Now open two handles to the two files
   131 00000112 E8A0030000          <1>     call dosCrit1Enter
   132                              <1> 
   133 00000117 488D35E4030000      <1>     lea rsi, biosNamePair
   134 0000011E 488D3DD5030000      <1>     lea rdi, biosPair
   135 00000125 B90F000000          <1>     mov ecx, biosNameL
   136 0000012A E841020000          <1>     call openFiles
   137 0000012F 0F829F010000        <1>     jc badHandle
   138                              <1> 
   139 00000135 488D35E4030000      <1>     lea rsi, dosNamePair
   140 0000013C 488D3DBB030000      <1>     lea rdi, dosPair
   141 00000143 B90E000000          <1>     mov ecx, dosNameL
   142 00000148 E823020000          <1>     call openFiles
   143 0000014D 0F8281010000        <1>     jc badHandle
   144                              <1> 
   145 00000153 488D35A0030000      <1>     lea rsi, biosPair
   146 0000015A E83B020000          <1>     call copyFile
   147 0000015F 0F8255010000        <1>     jc badXfer
   148                              <1> 
   149 00000165 488D3592030000      <1>     lea rsi, dosPair
   150 0000016C E829020000          <1>     call copyFile
   151 00000171 0F8243010000        <1>     jc badXfer
   152                              <1> 
   153                              <1> ;We close these handles here to update the DIR entries
   154 00000177 B8003E0000          <1>     mov eax, 3E00h
   155 0000017C 668B1D79030000      <1>     mov bx, word [biosHdlDst]
   156 00000183 CD41                <1>     int 41h
   157 00000185 B8003E0000          <1>     mov eax, 3E00h
   158 0000018A 668B1D6F030000      <1>     mov bx, word [dosHdlDst]
   159 00000191 CD41                <1>     int 41h
   160                              <1> 
   161                              <1> ;Now we must do the fun part, setting the Boot Sector details
   162                              <1> ;Start by searching sysDrive for new files. 
   163                              <1> ;FOR SCPBIOS.SYS, need the start sector of the file and the number of sectors
   164                              <1> ; it is.
   165                              <1> ;FOR SCPDOS.SYS, need only the start sector of the file.
   166                              <1> 
   167                              <1> ;We do this by:
   168                              <1> ; - Reading the DPB, getting the first sector of the Root Directory
   169                              <1> ; - Read the necessary data from the Root Directory Copy
   170                              <1> ; - Read the BPB again
   171                              <1> ; - Set the variables in the BPB.
   172                              <1> ; - Set the bootable flag in the BPB
   173                              <1> ; - Write it back out to disk.
   174                              <1> ;
   175                              <1> ;3 Direct IO's needed. 
   176                              <1> ;   1) Read Sector 1 of Root Dir
   177                              <1> ;   2) Read BPB
   178                              <1> ;   3) Write back BPB 
   179 00000193 488B2D50030000      <1>     mov rbp, qword [dpbPtr]
   180 0000019A 31C0                <1>     xor eax, eax    ;Request first sector of root directory
   181 0000019C E87B020000          <1>     call getStartSectorOfCluster    ;Thanks DOS!!
   182 000001A1 4889054A030000      <1>     mov qword [xfrSector], rax
   183                              <1>     ;rax has the first sector of the root directory, read it in
   184 000001A8 E89C020000          <1>     call readWrapper
   185 000001AD 0F8235010000        <1>     jc badPrint
   186                              <1>     ;First entry could be volume id so double check
   187 000001B3 488B3520030000      <1>     mov rsi, qword [memoryBlock]
   188 000001BA F6460B08            <1>     test byte [rsi + fatDirEntry.attribute], dirVolumeID
   189 000001BE 7407                <1>     jz .notVolID
   190 000001C0 4881C620000000      <1>     add rsi, fatDirEntry_size   ;Goto next entry. This must be it
   191                              <1> .notVolID:
   192 000001C7 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]   ;Get hi bits of cluster num
   193 000001CB 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]
   194 000001CF C1E210              <1>     shl edx, 10h    ;Move into high word
   195 000001D2 09D0                <1>     or eax, edx     ;eax has the first cluster
   196 000001D4 E843020000          <1>     call getStartSectorOfCluster    ;Get the first sector to read
   197 000001D9 4889055C030000      <1>     mov qword [biosSector], rax
   198 000001E0 31D2                <1>     xor edx, edx
   199 000001E2 8B461C              <1>     mov eax, dword [rsi + fatDirEntry.fileSize] ;Get file size in bytes
   200                              <1>     ;Divide by sector size
   201 000001E5 0FB71DF7020000      <1>     movzx ebx, word [sectorSize]    ;Get the sector size
   202 000001EC F7F3                <1>     div ebx
   203 000001EE 85D2                <1>     test edx, edx   ;If no remainder, eax has number of sectors for file
   204 000001F0 7502                <1>     jnz .skipPlusSector1
   205 000001F2 FFC0                <1>     inc eax
   206                              <1> .skipPlusSector1:
   207 000001F4 66890549030000      <1>     mov word [biosSize], ax
   208 000001FB 4881C620000000      <1>     add rsi, fatDirEntry_size   ;Goto next entry
   209 00000202 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]   ;Get hi bits of cluster num
   210 00000206 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]
   211 0000020A C1E210              <1>     shl edx, 10h    ;Move into high word
   212 0000020D 09D0                <1>     or eax, edx     ;eax has the first cluster
   213 0000020F E808020000          <1>     call getStartSectorOfCluster    ;Get the first sector to read
   214 00000214 4889052B030000      <1>     mov qword [dosSector], rax
   215                              <1> 
   216                              <1>     ;Now we read the BPB in
   217 0000021B 31C0                <1>     xor eax, eax
   218 0000021D 488905CE020000      <1>     mov qword [xfrSector], rax  ;Read sector 0
   219 00000224 E820020000          <1>     call readWrapper
   220 00000229 0F82B9000000        <1>     jc badPrint
   221                              <1>     ;Now we have the BPB in, set the variables and we are done.
   222                              <1>     ;First set the variables that are past the end of the Boot Sector
   223                              <1>     ;Then set the bootable flag and write back
   224 0000022F 488B2DB4020000      <1>     mov rbp, qword [dpbPtr]
   225 00000236 E8C2010000          <1>     call getFATtype ;If ecx = 2, we have a 90 byte BPB, else 62 bytes
   226 0000023B B83E000000          <1>     mov eax, 62
   227 00000240 BB5A000000          <1>     mov ebx, 90
   228 00000245 81F902000000        <1>     cmp ecx, 2
   229 0000024B 0F44C3              <1>     cmove eax, ebx 
   230                              <1>     ;eax has the number of bytes the BIOS file vars are
   231 0000024E 488B1D85020000      <1>     mov rbx, qword [memoryBlock]
   232 00000255 488D3403            <1>     lea rsi, qword [rbx + rax]
   233 00000259 488B05DC020000      <1>     mov rax, qword [biosSector]
   234 00000260 8B4B1C              <1>     mov ecx, dword [rbx + bpb.hiddSec]  ;Must add hidden sectors too
   235 00000263 4801C8              <1>     add rax, rcx
   236 00000266 488906              <1>     mov qword [rsi], rax
   237 00000269 0FB705D4020000      <1>     movzx eax, word [biosSize]
   238 00000270 66894608            <1>     mov word [rsi + 8], ax
   239                              <1>     ;Now to the table at the end of the boot sector
   240 00000274 0FB70568020000      <1>     movzx eax, word [sectorSize]
   241 0000027B FFC8                <1>     dec eax ;Last byte in the sector is byte sectorSize-1
   242 0000027D 488D7403F2          <1>     lea rsi, qword [rbx + rax - 14] ;Point to the start of the packet
   243 00000282 488B05BD020000      <1>     mov rax, qword [dosSector]
   244 00000289 4801C8              <1>     add rax, rcx
   245 0000028C 48894604            <1>     mov qword [rsi + sysInitTableStruc.firstLba], rax
   246 00000290 C6460CFF            <1>     mov byte [rsi + sysInitTableStruc.bootable], -1
   247 00000294 E8D6010000          <1>     call writeWrapper
   248 00000299 724D                <1>     jc badPrint
   249                              <1> exit:
   250 0000029B E828020000          <1>     call dosCrit1Exit
   251 000002A0 E856000000          <1>     call freeResources
   252 000002A5 488D15E4030000      <1>     lea rdx, okMsg
   253 000002AC B800090000          <1>     mov eax, 0900h
   254 000002B1 CD41                <1>     int 41h
   255 000002B3 B8004C0000          <1>     mov eax, 4C00h
   256 000002B8 CD41                <1>     int 41h
   257                              <1> 
   258                              <1> badXfer:
   259 000002BA 488D1D58030000      <1>     lea rbx, badMem
   260 000002C1 488D152F030000      <1>     lea rdx, badCopy
   261 000002C8 81F9FFFFFFFF        <1>     cmp ecx, -1 ;Little flag to indicate memory issue
   262 000002CE 480F44D3            <1>     cmove rdx, rbx
   263 000002D2 EB14                <1>     jmp short badPrint
   264                              <1> badHandle:
   265 000002D4 488D1DFE020000      <1>     lea rbx, badCreate
   266 000002DB 488D15DB020000      <1>     lea rdx, badOpen
   267 000002E2 85F6                <1>     test esi, esi
   268 000002E4 480F44D3            <1>     cmovz rdx, rbx
   269                              <1> badPrint:
   270                              <1> ;Generic Print entry point
   271 000002E8 B800090000          <1>     mov eax, 0900h
   272 000002ED CD41                <1>     int 41h
   273                              <1> badExit:
   274                              <1> ;DOS will close the handles for us if needed
   275 000002EF E807000000          <1>     call freeResources
   276 000002F4 B8FF4C0000          <1>     mov eax, 4CFFh
   277 000002F9 CD41                <1>     int 41h
   278                              <1> 
   279                              <1> ;Utility functions
   280                              <1> freeResources:
   281 000002FB F605E0010000FF      <1>     test byte [inCrit], -1
   282 00000302 7405                <1>     jz .noCrit
   283 00000304 E8BF010000          <1>     call dosCrit1Exit   ;Exit critical section
   284                              <1> .noCrit:
   285 00000309 0FBF1DEA010000      <1>     movsx ebx, word [biosHdlSrc]
   286 00000310 81FBFFFFFFFF        <1>     cmp ebx, -1
   287 00000316 E84B000000          <1>     call freeHandle
   288 0000031B 0FBF1DDA010000      <1>     movsx ebx, word [biosHdlDst]
   289 00000322 81FBFFFFFFFF        <1>     cmp ebx, -1
   290 00000328 E839000000          <1>     call freeHandle
   291 0000032D 0FBF1DCA010000      <1>     movsx ebx, word [dosHdlSrc]
   292 00000334 81FBFFFFFFFF        <1>     cmp ebx, -1
   293 0000033A E827000000          <1>     call freeHandle
   294 0000033F 0FBF1DBA010000      <1>     movsx ebx, word [dosHdlDst]
   295 00000346 81FBFFFFFFFF        <1>     cmp ebx, -1
   296 0000034C E815000000          <1>     call freeHandle
   297 00000351 4C8B0582010000      <1>     mov r8, qword [memoryBlock]
   298 00000358 4D85C0              <1>     test r8, r8
   299                              <1>     retz
    71                              <2> cret z
    49                              <3> %%_base:
    50                              <3> %assign baseVar %%_base-$$
    51                              <3>  %ifdef retOff
    52                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    53                              <3>  %ifdef currSegVBase
    54                              <3>  j%+1 short (retOff+currSegVBase)
    55                              <3>  %else
    56                              <3>  j%+1 short retOff
    57                              <3>  %endif
    58                              <3>  %else
    59                              <3>  j%-1 short %%a
    60                              <3>  return
    61                              <3> %%a:
    62                              <3>  %endif
    63                              <3>  %else
    64 0000035B 7501                <3>  j%-1 short %%a
    65                              <3>  return
    43                              <4> %%_ret:
    44 0000035D C3                  <4>  ret
    45                              <4> %assign retOff %%_ret-$$
    66                              <3> %%a:
    67                              <3>  %endif
   300 0000035E B800490000          <1>     mov eax, 4900h  ;Free block
   301 00000363 CD41                <1>     int 41h
   302                              <1>     return
    43                              <2> %%_ret:
    44 00000365 C3                  <2>  ret
    45                              <2> %assign retOff %%_ret-$$
   303                              <1> freeHandle:
   304                              <1>     retz    ;Return if equal
    71                              <2> cret z
    49                              <3> %%_base:
    50                              <3> %assign baseVar %%_base-$$
    51                              <3>  %ifdef retOff
    52                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    53                              <3>  %ifdef currSegVBase
    54                              <3>  j%+1 short (retOff+currSegVBase)
    55                              <3>  %else
    56 00000366 74(65)              <3>  j%+1 short retOff
    57                              <3>  %endif
    58                              <3>  %else
    59                              <3>  j%-1 short %%a
    60                              <3>  return
    61                              <3> %%a:
    62                              <3>  %endif
    63                              <3>  %else
    64                              <3>  j%-1 short %%a
    65                              <3>  return
    66                              <3> %%a:
    67                              <3>  %endif
   305 00000368 B8003E0000          <1>     mov eax, 3E00h
   306 0000036D CD41                <1>     int 41h
   307                              <1>     return
    43                              <2> %%_ret:
    44 0000036F C3                  <2>  ret
    45                              <2> %assign retOff %%_ret-$$
   308                              <1> 
   309                              <1> openFiles:
   310                              <1> ;Input: rsi = Name Pair ptr
   311                              <1> ;       rcx = Name Pair length
   312                              <1> ;       rdi = Handle pair ptr
   313                              <1> ;Return:
   314                              <1> ;   If CF=CY and esi = 0, error on create, else error on open
   315 00000370 4889F2              <1>     mov rdx, rsi
   316 00000373 B8003D0000          <1>     mov eax, 3D00h  ;Open in Read-Only mode
   317 00000378 CD41                <1>     int 41h
   318                              <1>     retc
    87                              <2> cret c
    49                              <3> %%_base:
    50                              <3> %assign baseVar %%_base-$$
    51                              <3>  %ifdef retOff
    52                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    53                              <3>  %ifdef currSegVBase
    54                              <3>  j%+1 short (retOff+currSegVBase)
    55                              <3>  %else
    56 0000037A 72(6F)              <3>  j%+1 short retOff
    57                              <3>  %endif
    58                              <3>  %else
    59                              <3>  j%-1 short %%a
    60                              <3>  return
    61                              <3> %%a:
    62                              <3>  %endif
    63                              <3>  %else
    64                              <3>  j%-1 short %%a
    65                              <3>  return
    66                              <3> %%a:
    67                              <3>  %endif
   319 0000037C 668907              <1>     mov word [rdi], ax  ;Place it in the source handle
   320                              <1> 
   321 0000037F 4801CE              <1>     add rsi, rcx    ;Move the name forwards by its length
   322 00000382 4889F2              <1>     mov rdx, rsi
   323 00000385 31F6                <1>     xor esi, esi    ;Indicate we are in the create phase now
   324 00000387 B907000000          <1>     mov ecx, dirReadOnly | dirHidden | dirSystem    ;Attribute
   325 0000038C B8003C0000          <1>     mov eax, 3C00h
   326 00000391 CD41                <1>     int 41h
   327                              <1>     retc
    87                              <2> cret c
    49                              <3> %%_base:
    50                              <3> %assign baseVar %%_base-$$
    51                              <3>  %ifdef retOff
    52                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    53                              <3>  %ifdef currSegVBase
    54                              <3>  j%+1 short (retOff+currSegVBase)
    55                              <3>  %else
    56 00000393 72(6F)              <3>  j%+1 short retOff
    57                              <3>  %endif
    58                              <3>  %else
    59                              <3>  j%-1 short %%a
    60                              <3>  return
    61                              <3> %%a:
    62                              <3>  %endif
    63                              <3>  %else
    64                              <3>  j%-1 short %%a
    65                              <3>  return
    66                              <3> %%a:
    67                              <3>  %endif
   328 00000395 66894702            <1>     mov word [rdi + 2], ax  ;Place it in the destination handle
   329                              <1>     return
    43                              <2> %%_ret:
    44 00000399 C3                  <2>  ret
    45                              <2> %assign retOff %%_ret-$$
   330                              <1> 
   331                              <1> copyFile:
   332                              <1> ;Copies in sector sized chunks
   333                              <1> ;Input: 
   334                              <1> ;rsi points to the word pair to use for handles
   335                              <1> ;Exit:
   336                              <1> ;If a CF=CY error is returned, something bad happened. If ecx = -1, error
   337                              <1> ; happened in the memory allocation portion of the copy
   338 0000039A 488B1539010000      <1>     mov rdx, qword [memoryBlock]
   339 000003A1 4885D2              <1>     test rdx, rdx
   340 000003A4 7522                <1>     jnz .skipRealloc    ;If there is a block, dont allocate one again
   341 000003A6 0FB71D36010000      <1>     movzx ebx, word [sectorSize]
   342 000003AD C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
   343 000003B0 B800480000          <1>     mov eax, 4800h
   344 000003B5 CD41                <1>     int 41h
   345 000003B7 B9FFFFFFFF          <1>     mov ecx, -1
   346                              <1>     retc    ;Return if error
    87                              <2> cret c
    49                              <3> %%_base:
    50                              <3> %assign baseVar %%_base-$$
    51                              <3>  %ifdef retOff
    52                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    53                              <3>  %ifdef currSegVBase
    54                              <3>  j%+1 short (retOff+currSegVBase)
    55                              <3>  %else
    56 000003BC 72(99)              <3>  j%+1 short retOff
    57                              <3>  %endif
    58                              <3>  %else
    59                              <3>  j%-1 short %%a
    60                              <3>  return
    61                              <3> %%a:
    62                              <3>  %endif
    63                              <3>  %else
    64                              <3>  j%-1 short %%a
    65                              <3>  return
    66                              <3> %%a:
    67                              <3>  %endif
   347 000003BE 48890515010000      <1>     mov qword [memoryBlock], rax    ;Save the ptr here
   348 000003C5 4889C2              <1>     mov rdx, rax
   349                              <1> .skipRealloc:
   350                              <1> ;rdx points to buffer to do IO through
   351 000003C8 668B1E              <1>     mov bx, word [rsi]  ;Get source file read
   352 000003CB 0FB70D11010000      <1>     movzx ecx, word [sectorSize]   
   353 000003D2 B8003F0000          <1>     mov eax, 3F00h  ;Read handle
   354 000003D7 CD41                <1>     int 41h
   355                              <1>     retc    ;Return if error
    87                              <2> cret c
    49                              <3> %%_base:
    50                              <3> %assign baseVar %%_base-$$
    51                              <3>  %ifdef retOff
    52                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    53                              <3>  %ifdef currSegVBase
    54                              <3>  j%+1 short (retOff+currSegVBase)
    55                              <3>  %else
    56 000003D9 72(99)              <3>  j%+1 short retOff
    57                              <3>  %endif
    58                              <3>  %else
    59                              <3>  j%-1 short %%a
    60                              <3>  return
    61                              <3> %%a:
    62                              <3>  %endif
    63                              <3>  %else
    64                              <3>  j%-1 short %%a
    65                              <3>  return
    66                              <3> %%a:
    67                              <3>  %endif
   356 000003DB 668B5E02            <1>     mov bx, word [rsi + 2]
   357 000003DF 89C1                <1>     mov ecx, eax    ;Move the number of bytes to write into ecx
   358 000003E1 89C7                <1>     mov edi, eax    ;Keep a copy for later
   359 000003E3 B800400000          <1>     mov eax, 4000h  ;Write handle
   360 000003E8 CD41                <1>     int 41h
   361                              <1>     retc
    87                              <2> cret c
    49                              <3> %%_base:
    50                              <3> %assign baseVar %%_base-$$
    51                              <3>  %ifdef retOff
    52                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    53                              <3>  %ifdef currSegVBase
    54                              <3>  j%+1 short (retOff+currSegVBase)
    55                              <3>  %else
    56 000003EA 72(99)              <3>  j%+1 short retOff
    57                              <3>  %endif
    58                              <3>  %else
    59                              <3>  j%-1 short %%a
    60                              <3>  return
    61                              <3> %%a:
    62                              <3>  %endif
    63                              <3>  %else
    64                              <3>  j%-1 short %%a
    65                              <3>  return
    66                              <3> %%a:
    67                              <3>  %endif
   362 000003EC 39F9                <1>     cmp ecx, edi    ;Did we write the same as we read?
   363 000003EE 750B                <1>     jne .badExit
   364 000003F0 663B3DEC000000      <1>     cmp di, word [sectorSize]   ;Did we read less than sector size?
   365 000003F7 74CF                <1>     je .skipRealloc
   366 000003F9 F8                  <1>     clc
   367                              <1>     return  ;If not equal, exit
    43                              <2> %%_ret:
    44 000003FA C3                  <2>  ret
    45                              <2> %assign retOff %%_ret-$$
   368                              <1> .badExit:
   369 000003FB F9                  <1>     stc
   370                              <1>     return
    43                              <2> %%_ret:
    44 000003FC C3                  <2>  ret
    45                              <2> %assign retOff %%_ret-$$
   371                              <1> 
   372                              <1> getFATtype:
   373                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
   374                              <1> ;Entry: rbp = DPB to ascertain FAT
   375                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
   376 000003FD 53                  <1>     push rbx
   377 000003FE 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
   378 00000401 B902000000          <1>     mov ecx, 2  ;FAT 32 marker
   379 00000406 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
   380 0000040C 730C                <1>     jae .exit
   381 0000040E FFC9                <1>     dec ecx     ;FAT 16 marker
   382 00000410 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
   383 00000416 7302                <1>     jae .exit
   384 00000418 FFC9                <1>     dec ecx     ;FAT 12 marker
   385                              <1> .exit:
   386 0000041A 5B                  <1>     pop rbx
   387                              <1>     return
    43                              <2> %%_ret:
    44 0000041B C3                  <2>  ret
    45                              <2> %assign retOff %%_ret-$$
   388                              <1> 
   389                              <1> getStartSectorOfCluster:
   390                              <1> ;Input: eax = Cluster Number
   391                              <1> ;       rbp = dpb pointer
   392                              <1> ;Output: rax = Starting Sector number for cluster
   393                              <1> ;Gives the data sector we are at in the current cluster
   394                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
   395 0000041C 51                  <1>     push rcx
   396 0000041D 09C0                <1>     or eax, eax ;Zero upper dword
   397 0000041F 7416                <1>     jz .rootDir ;If eax is zero, that is an alias for Root Directory
   398                              <1> .fat32Root:
   399 00000421 482D02000000        <1>     sub rax, 2
   400 00000427 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   401 0000042A 48D3E0              <1>     shl rax, cl
   402 0000042D 31C9                <1>     xor ecx, ecx
   403 0000042F 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
   404 00000432 4801C8              <1>     add rax, rcx
   405                              <1>     ;rax now has the first sector of the current cluster
   406 00000435 59                  <1>     pop rcx
   407                              <1>     return
    43                              <2> %%_ret:
    44 00000436 C3                  <2>  ret
    45                              <2> %assign retOff %%_ret-$$
   408                              <1> .rootDir:
   409 00000437 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]
   410 0000043A E8BEFFFFFF          <1>     call getFATtype
   411 0000043F 81F902000000        <1>     cmp ecx, 2
   412 00000445 74DA                <1>     je .fat32Root   ;If FAT32, eax now has zero extended 1st cluster of Root Dir
   413                              <1>     ;Else rax has the first sector of the Root Dir
   414 00000447 59                  <1>     pop rcx
   415                              <1>     return
    43                              <2> %%_ret:
    44 00000448 C3                  <2>  ret
    45                              <2> %assign retOff %%_ret-$$
   416                              <1> 
   417                              <1> readWrapper:
   418                              <1> ;Reads the sector specified in xfrSector
   419                              <1> ;If returned with CF=CY, exit to badPrint
   420 00000449 BE03000000          <1>     mov esi, 3
   421                              <1> .lp:
   422 0000044E 488B159D000000      <1>     mov rdx, qword [xfrSector]
   423 00000455 B901000000          <1>     mov ecx, 1
   424 0000045A 56                  <1>     push rsi
   425 0000045B E835000000          <1>     call readSector ;Read the sector into the buffer
   426 00000460 5E                  <1>     pop rsi
   427                              <1>     retnc
    91                              <2> cret nc
    49                              <3> %%_base:
    50                              <3> %assign baseVar %%_base-$$
    51                              <3>  %ifdef retOff
    52                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    53                              <3>  %ifdef currSegVBase
    54                              <3>  j%+1 short (retOff+currSegVBase)
    55                              <3>  %else
    56 00000461 73(48)              <3>  j%+1 short retOff
    57                              <3>  %endif
    58                              <3>  %else
    59                              <3>  j%-1 short %%a
    60                              <3>  return
    61                              <3> %%a:
    62                              <3>  %endif
    63                              <3>  %else
    64                              <3>  j%-1 short %%a
    65                              <3>  return
    66                              <3> %%a:
    67                              <3>  %endif
   428 00000463 FFCE                <1>     dec esi
   429 00000465 75E7                <1>     jnz .lp
   430 00000467 488D15F5010000      <1>     lea rdx, badDirectI
   431                              <1>     return
    43                              <2> %%_ret:
    44 0000046E C3                  <2>  ret
    45                              <2> %assign retOff %%_ret-$$
   432                              <1> 
   433                              <1> writeWrapper:
   434                              <1> ;Writes to the sector specified in xfrSector
   435                              <1> ;If returned with CF=CY, exit to badPrint
   436 0000046F BE03000000          <1>     mov esi, 3
   437                              <1> .lp:
   438 00000474 488B1577000000      <1>     mov rdx, qword [xfrSector]
   439 0000047B B901000000          <1>     mov ecx, 1
   440 00000480 56                  <1>     push rsi
   441 00000481 E820000000          <1>     call writeSector ;Write the sector from the buffer
   442 00000486 5E                  <1>     pop rsi
   443                              <1>     retnc
    91                              <2> cret nc
    49                              <3> %%_base:
    50                              <3> %assign baseVar %%_base-$$
    51                              <3>  %ifdef retOff
    52                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    53                              <3>  %ifdef currSegVBase
    54                              <3>  j%+1 short (retOff+currSegVBase)
    55                              <3>  %else
    56 00000487 73(6E)              <3>  j%+1 short retOff
    57                              <3>  %endif
    58                              <3>  %else
    59                              <3>  j%-1 short %%a
    60                              <3>  return
    61                              <3> %%a:
    62                              <3>  %endif
    63                              <3>  %else
    64                              <3>  j%-1 short %%a
    65                              <3>  return
    66                              <3> %%a:
    67                              <3>  %endif
   444 00000489 FFCE                <1>     dec esi
   445 0000048B 75E7                <1>     jnz .lp
   446 0000048D 488D15CF010000      <1>     lea rdx, badDirectI
   447                              <1>     return
    43                              <2> %%_ret:
    44 00000494 C3                  <2>  ret
    45                              <2> %assign retOff %%_ret-$$
   448                              <1> 
   449                              <1> readSector:
   450                              <1> ;Input:
   451                              <1> ;ecx = Number of sectors to read
   452                              <1> ;rdx = Start LBA to read from
   453 00000495 8A053E000000        <1>     mov al, byte [sysDrive]     ; Always read from sysDrive
   454 0000049B 488B1D38000000      <1>     mov rbx, qword [memoryBlock] ; Memory Buffer address to read from
   455 000004A2 CD45                <1>     int 45h
   456 000004A4 58                  <1>     pop rax ;Pop old flags into rax
   457                              <1>     return
    43                              <2> %%_ret:
    44 000004A5 C3                  <2>  ret
    45                              <2> %assign retOff %%_ret-$$
   458                              <1> writeSector:
   459                              <1> ;Input:
   460                              <1> ;al = Drive number
   461                              <1> ;ecx = Number of sectors to write
   462                              <1> ;rdx = Start LBA to write to
   463 000004A6 8A052D000000        <1>     mov al, byte [sysDrive]     ; Always write to sysDrive
   464 000004AC 488B1D27000000      <1>     mov rbx, qword [memoryBlock] ; Memory Buffer address to read from
   465 000004B3 CD46                <1>     int 46h
   466 000004B5 58                  <1>     pop rax ;Pop old flags into rax
   467                              <1>     return
    43                              <2> %%_ret:
    44 000004B6 C3                  <2>  ret
    45                              <2> %assign retOff %%_ret-$$
   468                              <1> 
   469                              <1> dosCrit1Enter:
   470 000004B7 C60524000000FF      <1>     mov byte [inCrit], -1
   471 000004BE 50                  <1>     push rax 
   472 000004BF B801800000          <1>     mov eax, 8001h
   473 000004C4 CD4A                <1>     int 4ah
   474 000004C6 58                  <1>     pop rax
   475                              <1>     return
    43                              <2> %%_ret:
    44 000004C7 C3                  <2>  ret
    45                              <2> %assign retOff %%_ret-$$
   476                              <1> 
   477                              <1> dosCrit1Exit:
   478 000004C8 50                  <1>     push rax 
   479 000004C9 B801810000          <1>     mov eax, 8101h
   480 000004CE CD4A                <1>     int 4ah
   481 000004D0 58                  <1>     pop rax
   482 000004D1 C6050A00000000      <1>     mov byte [inCrit], 0
   483                              <1>     return
    43                              <2> %%_ret:
    44 000004D8 C3                  <2>  ret
    45                              <2> %assign retOff %%_ret-$$
    45                                  %include "./Source/Utils/SYS/Data/sysData.asm"
    46 000004D9 FF                  <1> sysDrive    db -1   ;Drive we want to install the system files on
    47 000004DA 0000000000000000    <1> memoryBlock dq 0    ;Null ptr is unused
    48 000004E2 00                  <1> inCrit      db 0    ;If -1, in critical section
    49 000004E3 0000                <1> sectorSize  dw 0
    50 000004E5 00                  <1> secPerClus  db 0
    51 000004E6 00000000            <1> clustCnt    dd 0    ;Used for figuring out the FAT type
    52 000004EA 0000000000000000    <1> dpbPtr      dq 0    ;Used for finding the first sector of the Root Dir
    53 000004F2 0000000000000000    <1> xfrSector   dq 0    ;Used to temporarily store the sector number
    54                              <1> 
    55                              <1> biosPair:
    56 000004FA FFFF                <1> biosHdlSrc  dw -1   ;File handles
    57 000004FC FFFF                <1> biosHdlDst  dw -1
    58                              <1> 
    59                              <1> dosPair:
    60 000004FE FFFF                <1> dosHdlSrc   dw -1
    61 00000500 FFFF                <1> dosHdlDst   dw -1
    62                              <1> 
    63                              <1> biosNamePair:
    64 00000502 413A5C53435042494F- <1> biosFile    db "A:\SCPBIOS.SYS",0   ;A should be overwritten with current drive
    64 0000050B 532E53595300        <1>
    65                              <1> biosNameL   equ $ - biosFile
    66 00000511 413A5C53435042494F- <1> biosDest    db "A:\SCPBIOS.SYS",0
    66 0000051A 532E53595300        <1>
    67                              <1> dosNamePair:
    68 00000520 413A5C534350444F53- <1> dosFile     db "A:\SCPDOS.SYS",0
    68 00000529 2E53595300          <1>
    69                              <1> dosNameL   equ $ - dosFile
    70 0000052E 413A5C534350444F53- <1> dosDest     db "A:\SCPDOS.SYS",0
    70 00000537 2E53595300          <1>
    71                              <1> 
    72                              <1> ;Data for Boot Sector
    73 0000053C 0000000000000000    <1> biosSector  dq 0
    74 00000544 0000                <1> biosSize    dw 0
    75 00000546 0000000000000000    <1> dosSector   dq 0
    76                              <1> 
    77 0000054E 413A5C2A2E2A00      <1> rootDir  db "A:\*.*",0  ;A should be overwritten with the letter given
    78                              <1> 
    79                              <1> ;Messages
    80 00000555 496E76616C69642044- <1> badVerStr   db "Invalid DOS Version",0Ah,0Dh,"$"
    80 0000055E 4F532056657273696F- <1>
    80 00000567 6E0A0D24            <1>
    81 0000056B 496E76616C69642044- <1> badDrvLtr   db "Invalid Drive Specified",0Ah,0Dh,"$"
    81 00000574 726976652053706563- <1>
    81 0000057D 69666965640A0D24    <1>
    82 00000585 526F6F742044697265- <1> badRootDir  db "Root Directory Not Empty", 0Ah, 0Dh,"$"
    82 0000058E 63746F7279204E6F74- <1>
    82 00000597 20456D7074790A0D24  <1>
    83 000005A0 4572726F722046696E- <1> badSearch   db "Error Finding System Files",0Ah,0Dh,"$"
    83 000005A9 64696E672053797374- <1>
    83 000005B2 656D2046696C65730A- <1>
    83 000005BB 0D24                <1>
    84 000005BD 43616E6E6F74204F70- <1> badOpen     db "Cannot Open System Files.",0Ah,0Dh,"$"
    84 000005C6 656E2053797374656D- <1>
    84 000005CF 2046696C65732E0A0D- <1>
    84 000005D8 24                  <1>
    85 000005D9 43616E6E6F74204372- <1> badCreate   db "Cannot Create System Files.",0Ah,0Dh,"$"
    85 000005E2 656174652053797374- <1>
    85 000005EB 656D2046696C65732E- <1>
    85 000005F4 0A0D24              <1>
    86 000005F7 4572726F7220547261- <1> badCopy     db "Error Transferring System Files",0Ah,0Dh,"$"
    86 00000600 6E7366657272696E67- <1>
    86 00000609 2053797374656D2046- <1>
    86 00000612 696C65730A0D24      <1>
    87 00000619 4E6F7420456E6F7567- <1> badMem      db "Not Enough Memory to Transfer System Files",0Ah,0Dh,"$"
    87 00000622 68204D656D6F727920- <1>
    87 0000062B 746F205472616E7366- <1>
    87 00000634 65722053797374656D- <1>
    87 0000063D 2046696C65730A0D24  <1>
    88 00000646 496E76616C6964204D- <1> badSecSize  db "Invalid Medium Sector Size",0Ah,0Dh,"$"
    88 0000064F 656469756D20536563- <1>
    88 00000658 746F722053697A650A- <1>
    88 00000661 0D24                <1>
    89 00000663 556E61626C6520746F- <1> badDirectI  db "Unable to Read File",0Ah,0Dh,"$"
    89 0000066C 20526561642046696C- <1>
    89 00000675 650A0D24            <1>
    90 00000679 556E61626C6520746F- <1> badDirectO  db "Unable to Write File",0Ah,0Dh,"$"
    90 00000682 205772697465204669- <1>
    90 0000068B 6C650A0D24          <1>
    91 00000690 53797374656D205472- <1> okMsg       db "System Transfer Complete",0Ah,0Dh,"$"
    91 00000699 616E7366657220436F- <1>
    91 000006A2 6D706C6574650A0D24  <1>
    91          ------------------  <1>  info: assembly required 1+2+2 passes

