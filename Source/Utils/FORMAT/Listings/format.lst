     1                                  ;This is the disk formatting utility for SCP/DOS 1.0
     2                                  ;Uses the undocumented LBA based Generic IO interface
     3                                  
     4                                  ;Supports exactly one command line argument, the drive letter.
     5                                  ;Invoked as so: FORMAT x: where the colon is necessary.
     6                                  
     7                                  ;>>> 7 Steps to Disk Domination <<<
     8                                  ;1) Format begins by turning the drive offline by cleaning the 
     9                                  ;    cdsValidDrive bit in the device CDS. 
    10                                  ;2) Format begins by ascertaining how large the volume/device is.
    11                                  ;    -If the device is removable, format will get the device parameters to 
    12                                  ;      ascertain the size of the volume.
    13                                  ;    -If the device fixed, format will use the VBR to ascertain the size of the 
    14                                  ;      volume and gets device parameters to get the sector size.
    15                                  ;3) Format will then choose which FAT to use and build the BPB accordingly
    16                                  ;    and write it to disk.
    17                                  ;4) Format will then rebuild the disk DPB from the new BPB.
    18                                  ;5) Format will then create two fresh FAT tables.
    19                                  ;6) Format will then clean the root directory (FAT12/16) or allocate a 
    20                                  ;    cluster and sanitise it (FAT32)
    21                                  ;7) Finally, format re-enables cdsValidDrive and exits.
    22                                  
    23                                  ;If a ^C is invoked during the format procedure, we prompt the user 
    24                                  ; for the "are you sure you wish to abandon the format" and that "this may
    25                                  ; result in an unusable volume that will need reformatting" message.
    26                                  ;If they respond with Y, we re-enable the CDS and return to DOS to exit.
    27                                  
    28                                  ;Note Format does not format the full medium and uses Int 45h to read 
    29                                  ; sectors from the old format and Int 46h to write new sectors to the 
    30                                  ; volume. 
    31                                  ;Format also doesnt depend on any old BPB's or anything like so.
    32                                  ;Any old FAT (or other FS) data structures are considered nukable.
    33                                  
    34                                  [map all ./Source/Utils/FORMAT/Listings/format.map]
    35                                  [DEFAULT REL]
    36                                  BITS 64
    37                                  %include "./Source/Include/dosMacro.mac"
    38                              <1> 
    39                              <1> ;-------------------------------------------------------------------------------
    40                              <1> ;Generic Macros file
    41                              <1> ;The following instruction extensions allow to conditionally return
    42                              <1> ;The idea was borrowed from the DOS Source Code
    43                              <1> ;
    44                              <1> ;-------------------------------------------------------------------------------
    45                              <1> 
    46                              <1> ;-------------------------------------------------------------------------------
    47                              <1> ;These macros are live and must not be touched
    48                              <1> ;-------------------------------------------------------------------------------
    49                              <1> %macro return 0
    50                              <1> %%_ret:
    51                              <1>     ret
    52                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    53                              <1> %endmacro
    54                              <1> 
    55                              <1> %macro cret 1
    56                              <1> %%_base:
    57                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    58                              <1>     %ifdef retOff
    59                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    60                              <1>     %ifdef currSegVBase
    61                              <1>     j%+1 short (retOff+currSegVBase)
    62                              <1>     %else
    63                              <1>     j%+1 short retOff
    64                              <1>     %endif  ;End ifdef currSegVBase
    65                              <1>     %else 
    66                              <1>     j%-1 short %%a
    67                              <1>     return
    68                              <1> %%a:
    69                              <1>     %endif  ;End the distance measurement if
    70                              <1>     %else   
    71                              <1>     j%-1 short %%a
    72                              <1>     return
    73                              <1> %%a:
    74                              <1>     %endif  ;End ifdef retoff
    75                              <1> %endmacro
    76                              <1> 
    77                              <1> %macro retz 0
    78                              <1> cret z
    79                              <1> %endmacro
    80                              <1> 
    81                              <1> %macro retnz 0
    82                              <1> cret nz
    83                              <1> %endmacro
    84                              <1> 
    85                              <1> %macro rete 0
    86                              <1> cret e
    87                              <1> %endmacro
    88                              <1> 
    89                              <1> %macro retne 0
    90                              <1> cret ne
    91                              <1> %endmacro
    92                              <1> 
    93                              <1> %macro retc 0
    94                              <1> cret c
    95                              <1> %endmacro
    96                              <1> 
    97                              <1> %macro retnc 0
    98                              <1> cret nc
    99                              <1> %endmacro
   100                              <1> 
   101                              <1> %macro retb 0
   102                              <1> cret b
   103                              <1> %endmacro
   104                              <1> 
   105                              <1> %macro retnb 0
   106                              <1> cret nb
   107                              <1> %endmacro
   108                              <1> 
   109                              <1> %macro reta 0
   110                              <1> cret a
   111                              <1> %endmacro
   112                              <1> 
   113                              <1> %macro retna 0
   114                              <1> cret na
   115                              <1> %endmacro
   116                              <1> 
   117                              <1> %macro breakpoint 0
   118                              <1> xchg bx, bx
   119                              <1> %endmacro
    38                                  %include "./Source/Include/dosStruc.inc"
    39                              <1> 
    40                              <1> ;-------------------------------------------------------;
    41                              <1> ; This include file contains miscellaneous internal     ;
    42                              <1> ; SCP/DOS structures.                                   ;
    43                              <1> ;-------------------------------------------------------;
    44                              <1> 
    45                              <1> ;------------------------------------------------------------------------;
    46                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    47                              <1> ; its file system structure. This is used to locate files and structures
    48                              <1> ; on the device itself and to translate file requests to cluster chains
    49                              <1> ; to LBAs to pass to the disk driver..
    50                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    51                              <1> ; drivers Initialise routine has been called.
    52                              <1> ;------------------------------------------------------------------------;
    53                              <1> struc dpb        ;Drive Parameter Block
    54                              <1> 
    55 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    56 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    57 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    58 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    59 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    60 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    61 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    62 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    63 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    64 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    65 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    66 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    67                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    68 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    69 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    70 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    71 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    72 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    73 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    74                              <1> 
    75                              <1> endstruc
    76                              <1> 
    77                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    78                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    79                              <1> ;------------------------------------------------------------------------;
    80                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    81                              <1> ; All disk pathing requests go via the CDS for that drive.
    82                              <1> ; The default drive is the last accessed drive, this number is stored
    83                              <1> ; in the DOS data area.
    84                              <1> ; The CDS is stored as an array with the offset into the array being 
    85                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    86                              <1> ;
    87                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    88                              <1> ;------------------------------------------------------------------------;
    89                              <1> struc cds       ;Current Directory structure
    90 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    91 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    92 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    93 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    94 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    95 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    96                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    97                              <1> ; another, we save the number of chars to skip to that deep level).
    98                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    99                              <1> ; Only affects for SUBST drives, not JOIN
   100                              <1> ; Flags: Bit 15 set = Network drive
   101                              <1> ;        Bit 14 set = Physical drive
   102                              <1> ;        Bit 13 set = JOIN'ed drive
   103                              <1> ;        Bit 12 set = SUBST'ed drive
   104                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
   105                              <1> endstruc
   106                              <1> ;CDS equates
   107                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
   108                              <1> cdsValidDrive   equ 4000h   ;CDS valid
   109                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
   110                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
   111                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
   112                              <1> ;------------------------------------------------------------------------;
   113                              <1> ; The SFT is a way to allow applications to open file handles to files 
   114                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
   115                              <1> ; under the first header, and then a second header will be linked to the 
   116                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
   117                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
   118                              <1> ; using the FCBS= command. Default FCBS=5.
   119                              <1> ;
   120                              <1> ; A file handle describes the file, and the location within the file that
   121                              <1> ; we are reading. The file handle can be manipulated without the file
   122                              <1> ; being in memory, thus allowing the user to access data without needing 
   123                              <1> ; to take up large portions of memory. Similarly, file handles allow for
   124                              <1> ; accessing devices, by treating them as files with their drivers 
   125                              <1> ; responding and translating the manipulations of the file handle itself.
   126                              <1> ; Neither the driver nor the application should see or use the SFT for
   127                              <1> ; the handle, as it is subject to change (and will change when file 
   128                              <1> ; sharing provisions are included). The DOS will make requests to the 
   129                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
   130                              <1> ; track of the information in the SFT entry for that handle. 
   131                              <1> ;
   132                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   133                              <1> ; can point to the same file. It all depends on what the applications 
   134                              <1> ; want to do with the File.
   135                              <1> ;
   136                              <1> ; !!!!IMPORTANT!!!!
   137                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   138                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   139                              <1> ;
   140                              <1> ;Each SFT may look like this:
   141                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   142                              <1> ;            |                |
   143                              <1> ;       wNumFiles*sft    wNumFiles*sft
   144                              <1> ;
   145                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   146                              <1> ; System FCBs.
   147                              <1> ;
   148                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   149                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   150                              <1> ;
   151                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   152                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   153                              <1> ;------------------------------------------------------------------------;
   154                              <1> struc sfth   ;System file table header
   155                              <1> ; This is the SFT header.
   156                              <1> ; This structure comes before the start of the first file in the array/table.
   157 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   158 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   159                              <1> endstruc
   160                              <1> 
   161                              <1> struc sft
   162                              <1> ;This is the file struc itself
   163 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   164 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   165 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   166 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   167 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   168 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   169 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   170 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   171 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   172 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   173 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   174 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   175 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   176 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   177 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   178 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   179 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   180 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   181 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   182                              <1> ;                           0 means no record
   183                              <1> endstruc
   184                              <1> ;Open Mode equates
   185                              <1> ;Access modes   Bits[2:0]
   186                              <1> ReadAccess      equ 0h
   187                              <1> WriteAccess     equ 1h
   188                              <1> RWAccess        equ 2h
   189                              <1> ;Bit 3 reserved 0
   190                              <1> ;Sharing modes  Bits[6:4]
   191                              <1> CompatShare     equ 0h
   192                              <1> denyRWShare     equ 10h
   193                              <1> denyWriteShare  equ 20h
   194                              <1> denyReadShare   equ 30h
   195                              <1> denyNoneShare   equ 40h
   196                              <1> netFCBShare     equ 70h
   197                              <1> noInherit       equ 80h
   198                              <1> ;Bits 8-12 reserved 0
   199                              <1> 
   200                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   201                              <1> ;Buffering on writes
   202                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   203                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   204                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   205                              <1> ;Attribute Byte
   206                              <1> readOnlyFile    equ 1h
   207                              <1> hiddenFile      equ 2h
   208                              <1> systemFile      equ 4h
   209                              <1> volumeLabel     equ 8h
   210                              <1> directoryFile   equ 10h ;Directory entry
   211                              <1> archiveFile     equ 20h
   212                              <1> ;Device Info equates
   213                              <1> ;For a block device, bits [5:0] contain the drive number
   214                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   215                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   216                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   217                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   218                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   219                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   220                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   221                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   222                              <1> devCharDev      equ 80h ;If set, it is a char device!
   223                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   224                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   225                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   226                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   227                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   228                              <1>  
   229                              <1> ;------------------------------------------------------------------------;
   230                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   231                              <1> ; to an internal buffer, and then copying it to the specified location
   232                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   233                              <1> ; another request for the same sector from the same device is made, so 
   234                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   235                              <1> ; size, selected according to the largest detected sector size during 
   236                              <1> ; the initial loadup.
   237                              <1> ;
   238                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   239                              <1> ;
   240                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   241                              <1> ;------------------------------------------------------------------------;
   242                              <1> 
   243                              <1> struc bufferHdr
   244 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   245 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   246 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   247 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   248 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   249 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   250 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   251 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   252 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   253                              <1>     .dataarea:             ;Points to the start of the data area
   254                              <1> endstruc
   255                              <1> ;Buffer Flag equates
   256                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   257                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   258                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   259                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   260                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   261                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   262                              <1> ;Note! A buffer is marked as referenced only when the application 
   263                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   264                              <1> ;------------------------------------------------------------------------;
   265                              <1> ; Memory control block for each memory arena
   266                              <1> ;------------------------------------------------------------------------;
   267                              <1> struc mcb
   268 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   269 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   270 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   271 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   272                              <1>     .program:
   273                              <1> endstruc
   274                              <1> ;MCB equates
   275                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   276                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   277                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   278                              <1> mcbMarkCtn      equ "M"
   279                              <1> mcbMarkEnd      equ "Z"
   280                              <1> 
   281                              <1> memFirstFit     equ 0   ;First free block goes to application
   282                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   283                              <1> memLastFit      equ 2   ;Last free block goes to application
   284                              <1> 
   285                              <1> ;Owner = Para aligned address => Owning application PSP
   286                              <1> ;...To consider...
   287                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   288                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   289                              <1> ;------------------------------------------------------------------------;
   290                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   291                              <1> ; following order, thus allowing for return values to be placed in the 
   292                              <1> ; registers by accessing the caller register stack frame.
   293                              <1> ;------------------------------------------------------------------------;
   294                              <1> struc callerFrame
   295 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   296 00000008 ????????????????    <1>     .rbx    resq 1    
   297 00000010 ????????????????    <1>     .rcx    resq 1
   298 00000018 ????????????????    <1>     .rdx    resq 1
   299 00000020 ????????????????    <1>     .rsi    resq 1
   300 00000028 ????????????????    <1>     .rdi    resq 1
   301 00000030 ????????????????    <1>     .rbp    resq 1
   302 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   303 00000040 ????????????????    <1>     .r9     resq 1
   304                              <1> ;Pushed by Processor when invoked via Interrupt
   305 00000048 ????????????????    <1>     .rip    resq 1
   306 00000050 ????????????????    <1>     .cs     resq 1
   307 00000058 ????????????????    <1>     .flags  resq 1
   308                              <1> endstruc
   309                              <1> 
   310                              <1> struc dpl
   311                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   312                              <1> ; server calls
   313 00000000 ????????????????    <1>     .rax    resq 1
   314 00000008 ????????????????    <1>     .rbx    resq 1
   315 00000010 ????????????????    <1>     .rcx    resq 1
   316 00000018 ????????????????    <1>     .rdx    resq 1
   317 00000020 ????????????????    <1>     .rsi    resq 1
   318 00000028 ????????????????    <1>     .rdi    resq 1
   319 00000030 ????????????????    <1>     .r8     resq 1
   320 00000038 ????????????????    <1>     .r9     resq 1
   321 00000040 ????????????????    <1>     .align  resq 1
   322 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   323 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   324                              <1> endstruc
   325                              <1> 
   326                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   327 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   328 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   329 00000010 ????????????????    <1>     .newSFTVal      resq 1
   330 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   331 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   332 00000028 ????????????????    <1>     .newLastdrive   resq 1
   333 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   334 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   335 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   336 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   337 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   338 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   339 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   340                              <1> endstruc
   341                              <1> 
   342                              <1> struc filename
   343                              <1> ;8.3 File name struct
   344 00000000 ????????????????    <1>     .fName  resb 8
   345 00000008 ??????              <1>     .fExt   resb 3
   346                              <1> endstruc
   347                              <1> 
   348                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   349 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   350 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   351 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   352 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   353 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   354 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   355 00000016 ????                <1>     .fileTime   resw 1  ;File time
   356 00000018 ????                <1>     .fileDate   resw 1  ;File date
   357 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   358 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   359                              <1> endstruc
   360                              <1> 
   361                              <1> struc psp
   362 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   363 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   364 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   365 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   366 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   367 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   368 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   369 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   370 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   371 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   372 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   373 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   374 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   375 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   376                              <1> ;Extra handle arrays are grouped into a linked list
   377                              <1> ;The below are in the same place as in DOS
   378 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   379 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   380                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   381 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   382 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   383                              <1> endstruc
   384                              <1> 
   385                              <1> struc clkStruc
   386 00000000 ????                <1>     .dateWord   resw 1
   387 00000002 ??                  <1>     .minutes    resb 1
   388 00000003 ??                  <1>     .hours      resb 1
   389 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   390 00000005 ??                  <1>     .seconds    resb 1
   391                              <1> endstruc
   392                              <1> 
   393                              <1> struc countryStruc
   394 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   395                              <1>                         ;0 = month day year hh:mm:ss
   396                              <1>                         ;1 = day month year hh:mm:ss
   397                              <1>                         ;2 = year month day hh:mm:ss
   398 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   399 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   400 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   401 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   402 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   403 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   404                              <1>                         ;0 = Symbol leads, without space
   405                              <1>                         ;1 = Symbol follows, without space
   406                              <1>                         ;2 = Symbol leads, one space
   407                              <1>                         ;3 = Symbol follows, one space
   408                              <1>                         ;4 = Symbol replace decimal separator
   409 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   410 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   411 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   412 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   413 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   414                              <1> endstruc
   415                              <1> 
   416                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   417                              <1> ;for a space of 64Gb
   418                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   419                              <1> dosLowBase  equ 600h    ;Low load address
   420                              <1> 
   421                              <1> ;Critical Error AH bitfield equates
   422                              <1> critRead    equ 0h
   423                              <1> critWrite   equ 1h
   424                              <1> critDOS     equ 0h
   425                              <1> critFAT     equ 2h
   426                              <1> critDir     equ 4h
   427                              <1> critData    equ 6h
   428                              <1> critFailOK  equ 8h
   429                              <1> critRetryOK equ 10h
   430                              <1> critIgnorOK equ 20h
   431                              <1> critCharDev equ 80h
   432                              <1> 
   433                              <1> critIgnore  equ 0
   434                              <1> critRetry   equ 1
   435                              <1> critAbort   equ 2
   436                              <1> critFail    equ 3
   437                              <1> 
   438                              <1> ;MISC ASCII control chars
   439                              <1> NUL equ 00h ;^@         | ASCII Null
   440                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   441                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   442                              <1> BEL equ 07h ;^G         | ASCII Bell
   443                              <1> BSP equ 08h ;^H         | ASCII Backspace
   444                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   445                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   446                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   447                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   448                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   449                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   450                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   451                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   452                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   453                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   454                              <1> SPC equ 20h ;Printable  | ASCII Space
   455                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   456                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   457                              <1> 
   458                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   459                              <1> ;Extended Ascii Codes
   460                              <1> eF1     equ 3Bh ;F1 second byte
   461                              <1> eF2     equ 3Ch ;F2 second byte
   462                              <1> eF3     equ 3Dh ;F3 second byte
   463                              <1> eF4     equ 3Eh ;F4 second byte
   464                              <1> eF5     equ 3Fh ;F5 second byte
   465                              <1> eF6     equ 40h ;F6 second byte
   466                              <1> eF7     equ 41h ;F7 second byte
   467                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   468                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   469                              <1> eIns    equ 52h ;Insert second byte
   470                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   471                              <1> 
   472                              <1> ;Default Configuration for the system
   473                              <1> 
   474                              <1> buffersDefault  equ 30
   475                              <1> filesDefault    equ 20
   476                              <1> fcbsDefault     equ 4
   477                              <1> safeFcbsDeflt   equ 0
   478                              <1> lastDriveDeflt  equ 5   
    39                                  %include "./Source/Include/fatStruc.inc"
    40                              <1> 
    41                              <1> ;-------------------------------------------------------;
    42                              <1> ; This include file contains miscellaneous FAT driver   ;
    43                              <1> ; structures. exFAT will have it's own files at a later ;
    44                              <1> ; stage.                                                ;
    45                              <1> ;-------------------------------------------------------;
    46                              <1> ;-------------------------------------------------------;
    47                              <1> ;-------------------------------------------------------;
    48                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    49                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    50                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    51                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    52                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    53                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    54                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    55                              <1> ;-------------------------------------------------------;
    56                              <1> 
    57                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    58                              <1> 
    59 00000000 ??????              <1>     .jmpBoot    resb 3 
    60 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    61 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    62 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    63 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    64 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    65 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    66 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    67 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    68 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    69 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    70 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    71 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    72 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    73                              <1> 
    74 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    75 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    76 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    77 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    78 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    79 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    80                              <1> 
    81                              <1> endstruc
    82                              <1> 
    83                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    84                              <1> 
    85 00000000 ??????              <1>     .jmpBoot    resb 3
    86 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    87 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    88 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    89 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    90 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    91 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    92 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    93 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    94 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    95 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    96 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    97 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    98 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    99                              <1> 
   100 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
   101 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
   102 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
   103 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
   104 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
   105 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
   106 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
   107                              <1> 
   108 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
   109 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
   110 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
   111 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
   112 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
   113 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
   114                              <1> 
   115                              <1> endstruc
   116                              <1> 
   117                              <1> struc mbr
   118 00000000 <res 1B8h>          <1>     .bsCode     resb 440
   119 000001B8 ????????            <1>     .diskID     resb 4
   120 000001BC ????                <1>     .reserved   resb 2
   121 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
   122 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
   123 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
   124 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
   125 000001FE ????                <1>     .mbrSig     resb 2
   126                              <1> endstruc
   127                              <1> 
   128                              <1> struc mbrEntry
   129 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
   130 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
   131 00000004 ??                  <1>     .ptnType    resb 1
   132 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   133 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   134 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   135                              <1> endstruc
   136                              <1> 
   137                              <1> struc ebr
   138 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   139 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   140 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   141 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   142 000001FE ????                <1>     .mbrSig     resb 2
   143                              <1> endstruc
   144                              <1> 
   145                              <1> 
   146                              <1> struc fatDirEntry
   147                              <1> 
   148 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name w/o fullstop
   149 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   150 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   151 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   152 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   153 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   154 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   155 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   156 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   157 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   158 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   159 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   160                              <1> 
   161                              <1> endstruc
   162                              <1> ;Directory attribute equates
   163                              <1>     dirReadOnly     equ 01h
   164                              <1>     dirHidden       equ 02h
   165                              <1>     dirSystem       equ 04h
   166                              <1>     dirVolumeID     equ 08h
   167                              <1>     dirDirectory    equ 10h
   168                              <1>     dirArchive      equ 20h
   169                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   170                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   171                              <1>     ;If any of the three bits are set, then ALL three bits are set
   172                              <1>     ; in addition to whatever the user passed to search for.
   173                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   174                              <1>     dirIncFiles     equ dirHidden | dirSystem
   175                              <1> 
   176                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   177                              <1> 
   178 00000000 ??????              <1>     .jmpBoot                resb 3 
   179 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   180 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   181 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   182 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   183 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   184 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   185 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   186 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   187 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   188 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   189 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   190 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   191 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   192 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   193 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   194 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   195 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   196 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   197                              <1> 
   198                              <1> endstruc
   199                              <1> 
   200                              <1> struc FSInfo
   201                              <1> 
   202 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   203 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   204 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   205 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   206 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   207 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   208 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   209                              <1> 
   210                              <1> endstruc
   211                              <1> 
   212                              <1> %macro defaultBPB 0
   213                              <1>     db 0E9h
   214                              <1>     db 00h
   215                              <1>     db 90h
   216                              <1>     db 'SCPDOSv1'
   217                              <1>     dw 0200h                       
   218                              <1>     db 01h                         
   219                              <1>     dw 0001h                           
   220                              <1>     db 02h                              
   221                              <1>     dw 00E0h            
   222                              <1>     dw 0B40h   
   223                              <1>     db 0F0h                   
   224                              <1>     dw 0009h                   
   225                              <1>     dw 0012h                     
   226                              <1>     dw 0002h                  
   227                              <1>     dd 0                 
   228                              <1>     dd 0 
   229                              <1>     db 00h
   230                              <1>     db 00h
   231                              <1>     db 29h
   232                              <1>     dd 0
   233                              <1>     db 'NO NAME    '
   234                              <1>     db 'FAT12   '
   235                              <1>     db 58 dup 0 ;Size padding for a FAT12/16 BPB to make it 120 bytes long
   236                              <1> %endmacro
    40                                  
    41                                  struc genioctlGetParamsTable
    42 00000000 ??                          .size           resb 1
    43 00000001 ??????????????              .res            resb 7
    44 00000008 ????????????????            .sectorSize     resb 8  ;Only the lower dword is valid here
    45 00000010 ????????????????            .numSectors     resb 8
    46                                  endstruc
    47                                  
    48                                  %include "./Source/Utils/FORMAT/Source/fmtMain.asm"
    49                              <1> 
    50                              <1> 
    51                              <1> ;We start by checking that the version number is OK
    52                              <1> ;al has flag if the passed argument is ok
    53                              <1> ;r8 points to the PSP
    54                              <1> startFormat:
    55 00000000 EB01                <1>     jmp short .cVersion
    56 00000002 01                  <1> .vNum:    db 1
    57                              <1> .cVersion:
    58 00000003 50                  <1>     push rax
    59 00000004 B430                <1>     mov ah, 30h
    60 00000006 CD41                <1>     int 41h
    61 00000008 3A05F4FFFFFF        <1>     cmp al, byte [.vNum] ;Version 1
    62 0000000E 760E                <1>     jbe .okVersion
    63 00000010 58                  <1>     pop rax
    64 00000011 488D15CD040000      <1>     lea rdx, badVerStr
    65                              <1> .printExit:
    66 00000018 B409                <1>     mov ah, 09h
    67 0000001A CD41                <1>     int 41h
    68 0000001C CD40                <1>     int 40h ;Exit to caller or DOS to print bad command interpreter line
    69                              <1> .okVersion:
    70                              <1> ;Check the passed argument is ok (flag in al)
    71 0000001E 58                  <1>     pop rax
    72 0000001F 3CFF                <1>     cmp al, -1
    73 00000021 7509                <1>     jnz .driveOk
    74                              <1> .badDrive:
    75 00000023 488D15D3040000      <1>     lea rdx, badDrvLtr
    76 0000002A EBEC                <1>     jmp short .printExit
    77                              <1> .driveOk:
    78                              <1> ;Now save the old default drive, and set our drive to default.
    79                              <1> ;On exit this must be restored
    80 0000002C B419                <1>     mov ah, 19h ;Get Current Default Drive in al
    81 0000002E CD41                <1>     int 41h
    82 00000030 880584030000        <1>     mov byte [oldDrive], al
    83 00000036 0441                <1>     add al, "A"
    84 00000038 880553050000        <1>     mov byte [driveLetter], al  ;Store for error message
    85                              <1> 
    86                              <1> ; Here we now hook ^C so that if the user calls ^C we restore DOS state
    87                              <1> ; (i.e. default drive and reactivate the drive if it is deactivated)
    88 0000003E 488D1530030000      <1>     lea rdx, breakRoutine
    89 00000045 B843250000          <1>     mov eax, 2543h
    90 0000004A CD41                <1>     int 41h
    91                              <1> ;Now fetch the drive we are working on
    92 0000004C 418A505C            <1>     mov dl, byte [r8 + psp.fcb1] ;Get the fcb 0 based drvNum
    93 00000050 881565030000        <1>     mov byte [fmtDrive], dl
    94 00000056 B40E                <1>     mov ah, 0Eh ;Select Drive
    95 00000058 CD41                <1>     int 41h
    96 0000005A 730C                <1>     jnc .driveSelected
    97 0000005C 488D15B6040000      <1>     lea rdx, badRedir
    98 00000063 E9A6020000          <1>     jmp badExit
    99                              <1> .driveSelected:
   100                              <1> ;Now we check that the associate drive is not a network, subst or join.
   101                              <1> ; If it is, fail. Else, we deactivate
   102 00000068 B452                <1>     mov ah, 52h
   103 0000006A CD41                <1>     int 41h ;Get in rbx a ptr to list of lists
   104 0000006C 4881C32A000000      <1>     add rbx, 2Ah  ;Point rbx to cdsHeadPtr
   105 00000073 488B33              <1>     mov rsi, qword [rbx]    ;Get the ptr to the CDS array
   106 00000076 0FB60D3E030000      <1>     movzx ecx, byte [fmtDrive]
   107 0000007D 67E30B              <1>     jecxz .atCurrentCDS
   108                              <1> .walkCDSArray:
   109 00000080 4881C65B000000      <1>     add rsi, cds_size
   110 00000087 FFC9                <1>     dec ecx
   111 00000089 75F5                <1>     jnz .walkCDSArray
   112                              <1> .atCurrentCDS: 
   113 0000008B 4889352B030000      <1>     mov qword [cdsPtr], rsi ;Save a ptr to the current CDS
   114 00000092 66F7464300B0        <1>     test word [rsi + cds.wFlags], cdsJoinDrive | cdsSubstDrive | cdsRedirDrive
   115 00000098 7589                <1>     jnz .badDrive   ;Cannot format a Join/Subst/Redir drive
   116                              <1> 
   117 0000009A E8C2020000          <1>     call dosCrit1Enter
   118 0000009F 66816643FFBF        <1>     and word [rsi + cds.wFlags], ~cdsValidDrive ;Clear the validDrive bit
   119 000000A5 C60510030000FF      <1>     mov byte [fmtDrvInv], -1    ;Set flag to indicate we need to reactivate CDS
   120 000000AC E8BA020000          <1>     call dosCrit1Exit
   121                              <1>     ;CDS deactivated, now we can format disk.
   122                              <1>     ;First attempt to ascertain if removable or not.
   123 000000B1 31DB                <1>     xor ebx, ebx    ;Default Drive
   124 000000B3 B808440000          <1>     mov eax, 4408h  ;IOCTL, Get if removable or not
   125 000000B8 CD41                <1>     int 41h
   126 000000BA 7305                <1>     jnc .gotRemStatus
   127 000000BC E944020000          <1>     jmp badExitGenericString
   128                              <1> .gotRemStatus:
   129 000000C1 84C0                <1>     test al, al
   130 000000C3 7529                <1>     jnz .fixedDisk
   131                              <1>     ;Now request IOCTL to give medium parameters
   132 000000C5 B508                <1>     mov ch, 08h ;Disk drive type IOCTL
   133 000000C7 B1E0                <1>     mov cl, 80h | 60h   ;Use undocumented LBA get parameters
   134 000000C9 B80D440000          <1>     mov eax, 440Dh  ;Generic IOCTL 
   135 000000CE 488D15CD020000      <1>     lea rdx, reqTable   ;Point to the table to fill in
   136 000000D5 CD41                <1>     int 41h
   137 000000D7 0F822F020000        <1>     jc badExitNoString
   138 000000DD 488B4208            <1>     mov rax, qword [rdx + genioctlGetParamsTable.sectorSize]    ;Get sector size
   139 000000E1 668905E7020000      <1>     mov word [sectorSize], ax
   140 000000E8 488B4210            <1>     mov rax, qword [rdx + genioctlGetParamsTable.numSectors]    ;Get num sectors
   141 000000EC EB71                <1>     jmp short selectFATtype
   142                              <1> .fixedDisk:
   143 000000EE C605D8020000FF      <1>     mov byte [remDev], -1   ;Set flag for fixed disk
   144                              <1>     ;Read VBR for volume, request a buffer of 1000h bytes (max sector size 4k)
   145 000000F5 BB00010000          <1>     mov ebx, 100h   ;Request 100 paragraphs
   146 000000FA B800480000          <1>     mov eax, 4800h
   147 000000FF CD41                <1>     int 41h
   148 00000101 0F82FE010000        <1>     jc badExitGenericString
   149 00000107 488905B7020000      <1>     mov qword [bufferArea], rax ;Use this as the buffer
   150 0000010E 4889C3              <1>     mov rbx, rax
   151 00000111 8A05A4020000        <1>     mov al, byte [fmtDrive] ;Get the format drive
   152 00000117 B901000000          <1>     mov ecx, 1
   153 0000011C 31D2                <1>     xor edx, edx    ;Read sector 0 of the volume
   154 0000011E E8DA010000          <1>     call readSector
   155 00000123 0F82DC010000        <1>     jc badExitGenericString
   156 00000129 0FB7430B            <1>     movzx eax, word [rbx + bpb.bytsPerSec]  ;Get sector size
   157 0000012D 6689059B020000      <1>     mov word [sectorSize], ax
   158 00000134 0FB74B13            <1>     movzx ecx, word [rbx + bpb.totSec16]
   159 00000138 8B4320              <1>     mov eax, dword [rbx + bpb.totSec32]
   160 0000013B 39C8                <1>     cmp eax, ecx
   161 0000013D 0F42C1              <1>     cmovb eax, ecx
   162 00000140 50                  <1>     push rax
   163 00000141 4150                <1>     push r8
   164 00000143 4C8B057B020000      <1>     mov r8, qword [bufferArea]
   165 0000014A B800490000          <1>     mov eax, 4900h  ;Free the block now
   166 0000014F CD41                <1>     int 41h
   167 00000151 4158                <1>     pop r8
   168 00000153 58                  <1>     pop rax
   169 00000154 48C705660200000000- <1>     mov qword [bufferArea], 0   ;Clear the ptr
   169 0000015D 0000                <1>
   170                              <1> selectFATtype:
   171                              <1> ;Arrive here with rax = Number of sectors in volume
   172 0000015F 482D02000000        <1>     sub rax, 2 ;Always sub 2 to ensure no edge issues and round clusters down
   173 00000165 48890565020000      <1>     mov qword [numSectors], rax
   174                              <1>     ;Now we select the FAT based on the size of the volume
   175 0000016C 0FB71D5C020000      <1>     movzx ebx, word [sectorSize]    ;Get the sector size
   176 00000173 48F7E3              <1>     mul rbx ;Multiply rax with rbx
   177                              <1>     ;rax has the number of bytes on the volume
   178 00000176 48BB00FEFFFFFF0100- <1>     mov rbx, 1FFFFFFFE00h ;If our volume is above 2Tb in size, abort
   178 0000017F 00                  <1>
   179 00000180 4839D8              <1>     cmp rax, rbx
   180 00000183 720C                <1>     jb .okSize
   181                              <1> .badSize:
   182 00000185 488D153C040000      <1>     lea rdx, badVolBig
   183 0000018C E97D010000          <1>     jmp badExit
   184                              <1> .okSize:
   185 00000191 C6053602000000      <1>     mov byte [fatType], 0   ;Start by saying it must be FAT12
   186 00000198 B904000000          <1>     mov ecx, 4  ;4 entries in the fat16table without the first entry
   187 0000019D 488D353E020000      <1>     lea rsi, fat16ClusterTable
   188 000001A4 3B06                <1>     cmp eax, dword [rsi]
   189 000001A6 7631                <1>     jbe .medFound   ;Here we need to build a custom BPB for this device. 
   190 000001A8 FE0520020000        <1>     inc byte [fatType]  ;Make now FAT 16
   191 000001AE 4881C605000000      <1>     add rsi, 5  ;Goto next entry    
   192                              <1> .fat16Lp:
   193 000001B5 3B06                <1>     cmp eax, dword [rsi]
   194 000001B7 7620                <1>     jbe .medFound
   195 000001B9 4881C605000000      <1>     add rsi, 5
   196 000001C0 FFC9                <1>     dec ecx
   197 000001C2 75F1                <1>     jnz .fat16Lp
   198 000001C4 FE0504020000        <1>     inc byte [fatType]
   199 000001CA B904000000          <1>     mov ecx, 4
   200                              <1> .fat32Lp:
   201 000001CF 3B06                <1>     cmp eax, dword [rsi]
   202 000001D1 7606                <1>     jbe .medFound
   203 000001D3 FFC9                <1>     dec ecx
   204 000001D5 75F8                <1>     jnz .fat32Lp
   205 000001D7 EBAC                <1>     jmp short .badSize
   206                              <1> .medFound:
   207                              <1> ;Called with rsi pointing to the table entry
   208 000001D9 8A4604              <1>     mov al, byte [rsi + 4]  ;Get the sector per cluster value in al
   209 000001DC 8805F7010000        <1>     mov byte [secPerClust], al
   210 000001E2 803DE501000002      <1>     cmp byte [fatType], 2
   211 000001E9 7456                <1>     je .fat32
   212 000001EB 488D3D1D020000      <1>     lea rdi, genericBPB12
   213 000001F2 488D3554020000      <1>     lea rsi, genericBPB16
   214 000001F9 803DCE01000001      <1>     cmp byte [fatType], 1
   215 00000200 480F44FE            <1>     cmove rdi, rsi  ;Use FAT16 BPB if FAT16 volume
   216 00000204 668B05C4010000      <1>     mov ax, word [sectorSize]
   217 0000020B 6689470B            <1>     mov word [rdi + bpb.bytsPerSec], ax
   218 0000020F 8A05C4010000        <1>     mov al, byte [secPerClust]
   219 00000215 88470D              <1>     mov byte [rdi + bpb.secPerClus], al
   220 00000218 668B05B2010000      <1>     mov ax, word [numSectors]
   221 0000021F 66894713            <1>     mov word [rdi + bpb.totSec16], ax
   222 00000223 E87F000000          <1>     call computeFATSize
   223 00000228 66894716            <1>     mov word [rdi + bpb.FATsz16], ax
   224 0000022C 8A059B010000        <1>     mov al, byte [remDev]
   225 00000232 2480                <1>     and al, 80h ;Save only bit 7
   226 00000234 884724              <1>     mov byte [rdi + bpb.drvNum], al
   227 00000237 E858000000          <1>     call getVolumeID
   228 0000023C 894727              <1>     mov dword [rdi + bpb.volID], eax
   229 0000023F EB4C                <1>     jmp short .bpbReady
   230                              <1> .fat32:
   231 00000241 488D3D43020000      <1>     lea rdi, genericBPB32
   232 00000248 668B0580010000      <1>     mov ax, word [sectorSize]
   233 0000024F 6689470B            <1>     mov word [rdi + bpb32.bytsPerSec], ax
   234 00000253 8A0580010000        <1>     mov al, byte [secPerClust]
   235 00000259 88470D              <1>     mov byte [rdi + bpb32.secPerClus], al
   236 0000025C 8B056F010000        <1>     mov eax, dword [numSectors]
   237 00000262 894720              <1>     mov dword [rdi + bpb32.totSec32], eax
   238 00000265 E83D000000          <1>     call computeFATSize
   239 0000026A 894724              <1>     mov dword [rdi + bpb32.FATsz32], eax
   240 0000026D 8A055A010000        <1>     mov al, byte [remDev]
   241 00000273 2480                <1>     and al, 80h ;Save only bit 7
   242 00000275 884740              <1>     mov byte [rdi + bpb32.drvNum], al
   243 00000278 66C747280000        <1>     mov word [rdi + bpb32.extFlags], 0  ;FAT mirroring active
   244                              <1>     ;Here we need to assign cluster 2 to be root dir. Later we
   245                              <1>     ; check to see if we can actually use cluster 2. If yes, 
   246                              <1>     ; we allocate it on the FAT. If not, we reassign the root 
   247                              <1>     ; dir location
   248 0000027E C7472C02000000      <1>     mov dword [rdi + bpb32.RootClus], 2
   249 00000285 E80A000000          <1>     call getVolumeID
   250 0000028A 894743              <1>     mov dword [rdi + bpb32.volID], eax
   251                              <1> .bpbReady:
   252                              <1> ;Now the BPB is ready, save the pointer and now overwrite 
   253 0000028D 48893D46010000      <1>     mov qword [bpbPointer], rdi
   254                              <1> 
   255                              <1> ;Utility functions below
   256                              <1> getVolumeID:
   257                              <1> ;Uses the time to set a volume ID
   258                              <1> ;Output: eax = VolumeID
   259 00000294 B8002C0000          <1>     mov eax, 2C00h     ;Get Time in cx:dx
   260 00000299 CD41                <1>     int 41h
   261 0000029B 0FB7DA              <1>     movzx ebx, dx
   262 0000029E 0FB7C1              <1>     movzx eax, cx
   263 000002A1 C1E310              <1>     shl ebx, 10h
   264 000002A4 09D8                <1>     or eax, ebx
   265                              <1>     return
    50                              <2> %%_ret:
    51 000002A6 C3                  <2>  ret
    52                              <2> %assign retOff %%_ret-$$
   266                              <1> computeFATSize:
   267                              <1> ; ;Works on the genericBPB in memory. Applies the following algorithm
   268                              <1> ; RootDirSectors = ((BPB_RootEntCnt * 32) + (BPB_BytsPerSec – 1)) / BPB_BytsPerSec;
   269                              <1> ; TmpVal1 = DskSize – (BPB_ResvdSecCnt + RootDirSectors);
   270                              <1> ; TmpVal2 = (256 * BPB_SecPerClus) + BPB_NumFATs;
   271                              <1> ; If(FATType == FAT32)
   272                              <1> ;   TmpVal2 = TmpVal2 / 2;
   273                              <1> ; FATSz = (TMPVal1 + (TmpVal2 – 1)) / TmpVal2;
   274                              <1> ;Input:
   275                              <1> ;   rdi = Pointer to the head of the BPB we are using
   276                              <1> ;Returns: 
   277                              <1> ;   eax = Number of sectors per FAT needed. Low word only valid for FAT12/16
   278 000002A7 53                  <1>     push rbx
   279 000002A8 51                  <1>     push rcx
   280 000002A9 52                  <1>     push rdx
   281 000002AA 57                  <1>     push rdi
   282                              <1>     
   283 000002AB 0FB74711            <1>     movzx eax, word [rdi + bpb.rootEntCnt]
   284 000002AF C1E005              <1>     shl eax, 5  ;Multiply by 32
   285 000002B2 0FB75F0B            <1>     movzx ebx, word [rdi + bpb.bytsPerSec]
   286 000002B6 FFCB                <1>     dec ebx
   287 000002B8 01D8                <1>     add eax, ebx
   288 000002BA FFC3                <1>     inc ebx
   289 000002BC F7F3                <1>     div ebx
   290 000002BE 89C2                <1>     mov edx, eax    ;edx = RootDirSectors
   291                              <1> 
   292 000002C0 0FB74713            <1>     movzx eax, word [rdi + bpb.totSec16]
   293 000002C4 8B5F20              <1>     mov ebx, dword [rdi + bpb.totSec32]
   294 000002C7 85C0                <1>     test eax, eax   ;If totSec16 is 0, move totSec32 into eax
   295 000002C9 0F44C3              <1>     cmovz eax, ebx
   296 000002CC 0FB75F0E            <1>     movzx ebx, word [rdi + bpb.revdSecCnt]
   297 000002D0 01D3                <1>     add ebx, edx    ;Add RootDirSectors
   298 000002D2 29D8                <1>     sub eax, ebx
   299 000002D4 89C1                <1>     mov ecx, eax    ;ecx = TmpVal1
   300                              <1> 
   301 000002D6 0FB6470D            <1>     movzx eax, byte [rdi + bpb.secPerClus]
   302 000002DA C1E008              <1>     shl eax, 8  ;multiply by 256
   303 000002DD 0FB65F10            <1>     movzx ebx, byte [rdi + bpb.numFATs]
   304 000002E1 01C3                <1>     add ebx, eax    ;ebx = TmpVal2
   305                              <1> 
   306 000002E3 803DE400000002      <1>     cmp byte [fatType], 2
   307 000002EA 7502                <1>     jne .notFat32
   308 000002EC D1EB                <1>     shr ebx, 1  ;Divide by 2
   309                              <1> .notFat32: 
   310 000002EE 89C8                <1>     mov eax, ecx    ;TmpVal1
   311 000002F0 FFCB                <1>     dec ebx
   312 000002F2 01D8                <1>     add eax, ebx    ;TmpVal1 + (TmpVal2 - 1)
   313 000002F4 FFC3                <1>     inc ebx
   314 000002F6 F7F3                <1>     div ebx ;Exit with eax = number of sectors needed per FAT
   315                              <1> .exit:
   316 000002F8 5F                  <1>     pop rdi
   317 000002F9 5A                  <1>     pop rdx
   318 000002FA 59                  <1>     pop rcx
   319 000002FB 5B                  <1>     pop rbx
   320                              <1>     return
    50                              <2> %%_ret:
    51 000002FC C3                  <2>  ret
    52                              <2> %assign retOff %%_ret-$$
   321                              <1> 
   322                              <1> readSector:
   323                              <1> ;Input:
   324                              <1> ;al = Drive number
   325                              <1> ;rbx = Memory Buffer address to write to
   326                              <1> ;ecx = Number of sectors to read
   327                              <1> ;rdx = Start LBA to read from
   328 000002FD CD45                <1>     int 45h
   329 000002FF 58                  <1>     pop rax ;Pop old flags into rax
   330                              <1>     return
    50                              <2> %%_ret:
    51 00000300 C3                  <2>  ret
    52                              <2> %assign retOff %%_ret-$$
   331                              <1> writeSector:
   332                              <1> ;Input:
   333                              <1> ;al = Drive number
   334                              <1> ;rbx = Memory Buffer address to read from
   335                              <1> ;ecx = Number of sectors to write
   336                              <1> ;rdx = Start LBA to write to
   337 00000301 CD46                <1>     int 46h
   338 00000303 58                  <1>     pop rax ;Pop old flags into rax
   339                              <1>     return
    50                              <2> %%_ret:
    51 00000304 C3                  <2>  ret
    52                              <2> %assign retOff %%_ret-$$
   340                              <1> badExitGenericString:
   341 00000305 488D153B020000      <1>     lea rdx, badGeneric
   342                              <1> badExitNoString:
   343 0000030C EB09                <1>     jmp short badExit.noPrint
   344                              <1> badExit:
   345                              <1> ;Jumped to with rdx = Error message or 0 if no message
   346 0000030E 4885D2              <1>     test rdx, rdx
   347 00000311 7404                <1>     jz .noPrint
   348 00000313 B409                <1>     mov ah, 09h
   349 00000315 CD41                <1>     int 41h
   350                              <1> .noPrint:
   351 00000317 E807000000          <1>     call reset
   352 0000031C B8FF4C0000          <1>     mov eax, 4CFFh  ;Return with -1 as error code
   353 00000321 CD41                <1>     int 41h
   354                              <1> 
   355                              <1> reset:
   356 00000323 E811000000          <1>     call reactivateCDS
   357 00000328 E801000000          <1>     call resetDriveForExit
   358                              <1>     return
    50                              <2> %%_ret:
    51 0000032D C3                  <2>  ret
    52                              <2> %assign retOff %%_ret-$$
   359                              <1> resetDriveForExit:
   360 0000032E 8A1587000000        <1>     mov dl, byte [fmtDrive]
   361 00000334 B40E                <1>     mov ah, 0Eh ;Select Drive
   362 00000336 CD41                <1>     int 41h
   363                              <1>     return
    50                              <2> %%_ret:
    51 00000338 C3                  <2>  ret
    52                              <2> %assign retOff %%_ret-$$
   364                              <1> reactivateCDS:
   365 00000339 F6057C000000FF      <1>     test byte [fmtDrvInv], -1   ;If no bits set, drive is active
   366                              <1>     retz
    78                              <2> cret z
    56                              <3> %%_base:
    57                              <3> %assign baseVar %%_base-$$
    58                              <3>  %ifdef retOff
    59                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    60                              <3>  %ifdef currSegVBase
    61                              <3>  j%+1 short (retOff+currSegVBase)
    62                              <3>  %else
    63 00000340 74(38)              <3>  j%+1 short retOff
    64                              <3>  %endif
    65                              <3>  %else
    66                              <3>  j%-1 short %%a
    67                              <3>  return
    68                              <3> %%a:
    69                              <3>  %endif
    70                              <3>  %else
    71                              <3>  j%-1 short %%a
    72                              <3>  return
    73                              <3> %%a:
    74                              <3>  %endif
   367 00000342 488B3574000000      <1>     mov rsi, qword [cdsPtr]
   368 00000349 E813000000          <1>     call dosCrit1Enter
   369 0000034E C6056700000000      <1>     mov byte [fmtDrvInv], 0    ;Clear flag
   370 00000355 66814E430040        <1>     or word [rsi + cds.wFlags], cdsValidDrive
   371 0000035B E80B000000          <1>     call dosCrit1Exit
   372                              <1>     return
    50                              <2> %%_ret:
    51 00000360 C3                  <2>  ret
    52                              <2> %assign retOff %%_ret-$$
   373                              <1> 
   374                              <1> dosCrit1Enter:
   375 00000361 50                  <1>     push rax 
   376 00000362 B801800000          <1>     mov eax, 8001h
   377 00000367 CD4A                <1>     int 4ah
   378 00000369 58                  <1>     pop rax
   379                              <1>     return
    50                              <2> %%_ret:
    51 0000036A C3                  <2>  ret
    52                              <2> %assign retOff %%_ret-$$
   380                              <1> dosCrit1Exit:
   381 0000036B 50                  <1>     push rax 
   382 0000036C B801810000          <1>     mov eax, 8101h
   383 00000371 CD4A                <1>     int 4ah
   384 00000373 58                  <1>     pop rax
   385                              <1>     return
    50                              <2> %%_ret:
    51 00000374 C3                  <2>  ret
    52                              <2> %assign retOff %%_ret-$$
   386                              <1> 
   387                              <1> breakRoutine:
   388                              <1> ;This subroutine is called by ^C
   389                              <1> ;Prompts the user for what they want to do.
   390 00000375 488D15E3010000      <1>     lea rdx, cancel
   391 0000037C B409                <1>     mov ah, 09h
   392 0000037E CD41                <1>     int 41h
   393 00000380 B401                <1>     mov ah, 01h ;Get a char
   394 00000382 CD41                <1>     int 41h
   395 00000384 3C79                <1>     cmp al, "y"
   396 00000386 7416                <1>     je short .breakReturnExit
   397 00000388 3C59                <1>     cmp al, "Y"
   398 0000038A 7412                <1>     je short .breakReturnExit
   399 0000038C 3C6E                <1>     cmp al, "n"
   400 0000038E 7404                <1>     je short .breakReturnNoExit
   401 00000390 3C4E                <1>     cmp al, "N"
   402 00000392 EBE1                <1>     jmp short breakRoutine 
   403                              <1> .breakReturnNoExit:
   404 00000394 FA                  <1>     cli
   405 00000395 4881C418000000      <1>     add rsp, 8*3    ;Skip returning to DOS and just return to task
   406 0000039C 48CF                <1>     iretq
   407                              <1> .breakReturnExit:
   408                              <1> ;Set Default Drive back, reactivate the CDS if it is deactivated
   409 0000039E F9                  <1>     stc
   410 0000039F C20800              <1>     ret 8 
    49                                  %include "./Source/Utils/FORMAT/Data/fmtData.asm"
    50                              <1> ;IOCTL request header
    51 000003A2 000000000000000000- <1> reqTable    db genioctlGetParamsTable_size dup (0)
    51 000003AB 000000000000000000- <1>
    51 000003B4 000000000000        <1>
    52                              <1> 
    53                              <1> ;Data area here
    54 000003BA FF                  <1> oldDrive    db -1       ;Old default drive (0 based)
    55 000003BB FF                  <1> fmtDrive    db -1       ;Drive we are operating on (0 based)
    56 000003BC 00                  <1> fmtDrvInv   db 0        ;If set to -1, the drive needs to be reactivated
    57 000003BD 0000000000000000    <1> cdsPtr      dq 0        ;CDS ptr here
    58 000003C5 0000000000000000    <1> bufferArea  dq 0        ;Ptr to the buffer area
    59                              <1> ;Format Data here
    60 000003CD 00                  <1> remDev      db 0        ;0 = Removable, -1 = Fixed
    61 000003CE FF                  <1> fatType     db -1       ;0 = FAT12, 1 = FAT16, 2 = FAT32, -1 = No FAT
    62 000003CF 0000                <1> sectorSize  dw 0        ;Sector size in bytes
    63 000003D1 0000000000000000    <1> numSectors  dq 0        ;Number of sectors in volume
    64 000003D9 00                  <1> secPerClust db 0        ;Copy the sectors per cluster over
    65 000003DA 0000000000000000    <1> bpbPointer  dq 0        ;Pointer to the BPB we will use
    66                              <1> 
    67                              <1> ;Tables
    68                              <1> ;Each row is 5 bytes, {DWORD, BYTE} with DWORD = diskSize, BYTE=secPerClusVal
    69                              <1> fat16ClusterTable:
    70 000003E2 D0200000            <1>     dd 8400 ;Disks up to 4.1MB, must use FAT12 with 0.5 K clusters
    71 000003E6 01                  <1>     db 1    ;ALL FAT12 uses 1, unless it is a preexisting meddesc type medium
    72 000003E7 A87F0000            <1>     dd 32680    ; Disk up to 16MB, 1K clusters
    73 000003EB 02                  <1>     db 2
    74 000003EC 00000400            <1>     dd 262144   ; Disk up to 128MB, 2K clusters
    75 000003F0 04                  <1>     db 4
    76 000003F1 00000800            <1>     dd 524288   ; Disk up to 256MB, 4K clusters
    77 000003F5 08                  <1>     db 8
    78 000003F6 00001000            <1>     dd 1048576  ; Disk up to 512Mb, 8K clusters
    79 000003FA 10                  <1>     db 16
    80                              <1> 
    81                              <1> fat32ClusterTable:
    82 000003FB 00000001            <1>     dd 16777216 ; Disk up to 8GB, 4K clusters
    83 000003FF 08                  <1>     db 8        
    84 00000400 00000002            <1>     dd 33554432 ; Disk up to 16GB, 8K clusters
    85 00000404 10                  <1>     db 16
    86 00000405 00000004            <1>     dd 67108864 ; Disk up to 32Gb, 16K clusters
    87 00000409 20                  <1>     db 32
    88 0000040A FFFFFFFF            <1>     dd -1       ; Disk up to 2TB, 32K clusters
    89 0000040E 40                  <1>     db 64
    90                              <1> 
    91                              <1> ;Static BPBs here, fields set to -1 must be edited.
    92                              <1> ;Fields with a preset value should NOT be touched.
    93                              <1> genericBPB12:
    94                              <1>     istruc bpb
    95 0000040F E93C90              <1>     at bpb.jmpBoot,     db 0E9h, 3Ch, 90h   ;60 bytes, jump forward by that 
    96 00000412 534350444F537631    <1>     at bpb.oemName,     db 'SCPDOSv1'
    97 0000041A FFFF                <1>     at bpb.bytsPerSec,  dw -1           ;512 bytes per sector, normally
    98 0000041C FF                  <1>     at bpb.secPerClus,  db -1           ;1 sector per cluster, normally
    99 0000041D 0100                <1>     at bpb.revdSecCnt,  dw 0001h        ;1 Reserved Sector
   100 0000041F 02                  <1>     at bpb.numFATs,     db 02h          ;2 FAT tables
   101 00000420 E000                <1>     at bpb.rootEntCnt,  dw 00E0h        ;224 root entries
   102 00000422 FFFF                <1>     at bpb.totSec16,    dw -1           ;Total number of sectors on disk
   103 00000424 F0                  <1>     at bpb.media,       db 0F0h         ;Media byte
   104 00000425 FFFF                <1>     at bpb.FATsz16,     dw -1           ;9 FAT sectors, normally
   105 00000427 1200                <1>     at bpb.secPerTrk,   dw 0012h        ;18 Sectors per track
   106 00000429 0200                <1>     at bpb.numHeads,    dw 0002h        ;2 Heads
   107 0000042B 00000000            <1>     at bpb.hiddSec,     dd 0            ;No hidden sectors
   108 0000042F 00000000            <1>     at bpb.totSec32,    dd 0            ;Not a FAT32 BPB
   109 00000433 FF                  <1>     at bpb.drvNum,      db -1           ;Set to 80h if fixed
   110 00000434 00                  <1>     at bpb.reserved1,   db 00h
   111 00000435 29                  <1>     at bpb.bootSig,     db 29h          ;Extended BPB
   112 00000436 FFFFFFFF            <1>     at bpb.volID,       dd -1           ;Set volume ID to time
   113 0000043A 4E4F204E414D452020- <1>     at bpb.volLab,      db 'NO NAME    '
   113 00000443 2020                <1>
   114 00000445 4641543132202020    <1>     at bpb.filSysType,  db 'FAT12   '
   115                              <1>     iend
   116                              <1> 
   117                              <1> genericBPB16:
   118                              <1>     istruc bpb
   119 0000044D E93C90              <1>     at bpb.jmpBoot,     db 0E9h, 3Ch, 90h   ;Jump forward by 60 bytes
   120 00000450 534350444F537631    <1>     at bpb.oemName,     db 'SCPDOSv1'
   121 00000458 FFFF                <1>     at bpb.bytsPerSec,  dw -1           ;512 bytes per sector, normally
   122 0000045A FF                  <1>     at bpb.secPerClus,  db -1           ;Sectors per cluster
   123 0000045B 0100                <1>     at bpb.revdSecCnt,  dw 0001h        ;1 Reserved Sector
   124 0000045D 02                  <1>     at bpb.numFATs,     db 02h          ;2 FAT tables
   125 0000045E 0002                <1>     at bpb.rootEntCnt,  dw 0200h        ;512 root entries
   126 00000460 FFFF                <1>     at bpb.totSec16,    dw -1           ;Total number of sectors on disk
   127 00000462 F0                  <1>     at bpb.media,       db 0F0h         ;Media byte
   128 00000463 FFFF                <1>     at bpb.FATsz16,     dw -1           ;Number of sectors per FAT
   129 00000465 1200                <1>     at bpb.secPerTrk,   dw 0012h        ;18 Sectors per track
   130 00000467 0200                <1>     at bpb.numHeads,    dw 0002h        ;2 Heads
   131 00000469 00000000            <1>     at bpb.hiddSec,     dd 0            ;No hidden sectors
   132 0000046D 00000000            <1>     at bpb.totSec32,    dd 0            ;Not a FAT32 BPB
   133 00000471 FF                  <1>     at bpb.drvNum,      db -1           ;Set to 80h if fixed
   134 00000472 00                  <1>     at bpb.reserved1,   db 00h
   135 00000473 29                  <1>     at bpb.bootSig,     db 29h          ;Extended BPB
   136 00000474 FFFFFFFF            <1>     at bpb.volID,       dd -1           ;Set volume ID to time
   137 00000478 4E4F204E414D452020- <1>     at bpb.volLab,      db 'NO NAME    '
   137 00000481 2020                <1>
   138 00000483 4641543136202020    <1>     at bpb.filSysType,  db 'FAT16   '
   139                              <1>     iend
   140                              <1> 
   141                              <1> genericBPB32:
   142                              <1>     istruc bpb32
   143 0000048B E95890              <1>     at bpb32.jmpBoot,     db 0E9h, 58h, 90h   ;Jump forward by 88 bytes
   144 0000048E 534350444F537631    <1>     at bpb32.oemName,     db 'SCPDOSv1'
   145 00000496 FFFF                <1>     at bpb32.bytsPerSec,  dw -1           ;512 bytes per sector, normally
   146 00000498 FF                  <1>     at bpb32.secPerClus,  db -1           ;Sectors per cluster
   147 00000499 0100                <1>     at bpb32.revdSecCnt,  dw 0001h        ;1 Reserved Sector
   148 0000049B 02                  <1>     at bpb32.numFATs,     db 02h          ;2 FAT tables
   149 0000049C 0002                <1>     at bpb32.rootEntCnt,  dw 0200h        ;512 root entries
   150 0000049E 0000                <1>     at bpb32.totSec16,    dw 0            ;Not a FAT 12/16 BPB
   151 000004A0 F0                  <1>     at bpb32.media,       db 0F0h         ;Media byte
   152 000004A1 0000                <1>     at bpb32.FATsz16,     dw 0            ;Not a FAT 12/16 BPB
   153 000004A3 1200                <1>     at bpb32.secPerTrk,   dw 0012h        ;18 Sectors per track
   154 000004A5 0200                <1>     at bpb32.numHeads,    dw 0002h        ;2 Heads
   155 000004A7 00000000            <1>     at bpb32.hiddSec,     dd 0            ;No hidden sectors
   156 000004AB FFFFFFFF            <1>     at bpb32.totSec32,    dd -1           ;Total number of sectors on disk
   157                              <1> 
   158 000004AF FFFFFFFF            <1>     at bpb32.FATsz32,     dd -1  ;Number of sectors per FAT
   159 000004B3 FFFF                <1>     at bpb32.extFlags,    dw -1  ;Extended Flags word
   160 000004B5 0000                <1>     at bpb32.FSver,       dw 0   ;File system version word, must be 0
   161 000004B7 FFFFFFFF            <1>     at bpb32.RootClus,    dd -1  ;First Cluster of Root Directory
   162 000004BB 0100                <1>     at bpb32.FSinfo,      dw 1   ;Sector number of FSINFO structure, usually 1
   163 000004BD 0600                <1>     at bpb32.BkBootSec,   dw 6   ;Backup Boot sector, either 0 or 6
   164 000004BF 000000000000000000- <1>     at bpb32.reserved,    db 12 dup (0) ;Reserved 12 bytes
   164 000004C8 000000              <1>
   165                              <1> 
   166 000004CB FF                  <1>     at bpb32.drvNum,      db -1           ;Set to 80h if fixed
   167 000004CC 00                  <1>     at bpb32.reserved1,   db 00h
   168 000004CD 29                  <1>     at bpb32.bootSig,     db 29h          ;Extended BPB
   169 000004CE FFFFFFFF            <1>     at bpb32.volID,       dd -1           ;Set volume ID to time
   170 000004D2 4E4F204E414D452020- <1>     at bpb32.volLab,      db 'NO NAME    '
   170 000004DB 2020                <1>
   171 000004DD 4641543332202020    <1>     at bpb32.filSysType,  db 'FAT32   '
   172                              <1>     iend    
    50                                  %include "./Source/Utils/FORMAT/Data/fmtMsg.asm"
    51                              <1> ;Messages go here
    52 000004E5 0A0D496E76616C6964- <1> badVerStr   db 0Ah,0Dh,"Invalid DOS Version",0Ah,0Dh,"$"
    52 000004EE 20444F532056657273- <1>
    52 000004F7 696F6E0A0D24        <1>
    53 000004FD 0A0D496E76616C6964- <1> badDrvLtr   db 0Ah,0Dh,"Invalid Drive Specified",0Ah,0Dh,"$"
    53 00000506 204472697665205370- <1>
    53 0000050F 656369666965640A0D- <1>
    53 00000518 24                  <1>
    54 00000519 0A0D43616E6E6F7420- <1> badRedir    db 0Ah,0Dh,"Cannot Format Redir, Subst or Join Drives",0Ah,0Dh,"$"
    54 00000522 466F726D6174205265- <1>
    54 0000052B 6469722C2053756273- <1>
    54 00000534 74206F72204A6F696E- <1>
    54 0000053D 204472697665730A0D- <1>
    54 00000546 24                  <1>
    55 00000547 0A0D43616E6E6F7420- <1> badGeneric  db 0Ah,0Dh,"Cannot Format Drive",0Ah,0Dh,"$"
    55 00000550 466F726D6174204472- <1>
    55 00000559 6976650A0D24        <1>
    56 0000055F 0A0D41726520796F75- <1> cancel      db 0Ah,0Dh,"Are you sure you wish to abort formatting drive "
    56 00000568 207375726520796F75- <1>
    56 00000571 207769736820746F20- <1>
    56 0000057A 61626F727420666F72- <1>
    56 00000583 6D617474696E672064- <1>
    56 0000058C 7269766520          <1>
    57 00000591 413F0A0D            <1> driveLetter db "A?", 0Ah,0Dh
    58 00000595 446F696E6720736F20- <1>             db "Doing so will result in an unusable volume. Y/N?",0Ah,0Dh,"$"
    58 0000059E 77696C6C2072657375- <1>
    58 000005A7 6C7420696E20616E20- <1>
    58 000005B0 756E757361626C6520- <1>
    58 000005B9 766F6C756D652E2059- <1>
    58 000005C2 2F4E3F0A0D24        <1>
    59 000005C8 0A0D566F6C756D6520- <1> badVolBig   db 0Ah,0Dh,"Volume too large to format",0Ah,0Dh,"$"
    59 000005D1 746F6F206C61726765- <1>
    59 000005DA 20746F20666F726D61- <1>
    59 000005E3 740A0D24            <1>
    51                                  bootloader:
    52                                  ;Symbol pointing to the bootloader
    53                                  ;When building the COM for format, we append the loader binary here
    53          ------------------       info: assembly required 1+2+2 passes

