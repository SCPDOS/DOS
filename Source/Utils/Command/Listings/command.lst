     1                                  ;COMMAND.COM main file
     2                                  [map all ./Source/Utils/COMMAND/Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Source/Include/dosMacro.mac"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------------------------------
     9                              <1> ;Generic Macros file
    10                              <1> ;The following instruction extensions allow to conditionally return
    11                              <1> ;The idea was borrowed from the DOS Source Code
    12                              <1> ;
    13                              <1> ;-------------------------------------------------------------------------------
    14                              <1> 
    15                              <1> ;-------------------------------------------------------------------------------
    16                              <1> ;These macros are live and must not be touched
    17                              <1> ;-------------------------------------------------------------------------------
    18                              <1> %macro return 0
    19                              <1> %%_ret:
    20                              <1>     ret
    21                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    22                              <1> %endmacro
    23                              <1> 
    24                              <1> %macro cret 1
    25                              <1> %%_base:
    26                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    27                              <1>     %ifdef retOff
    28                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <1>     %ifdef currSegVBase
    30                              <1>     j%+1 short (retOff+currSegVBase)
    31                              <1>     %else
    32                              <1>     j%+1 short retOff
    33                              <1>     %endif  ;End ifdef currSegVBase
    34                              <1>     %else 
    35                              <1>     j%-1 short %%a
    36                              <1>     return
    37                              <1> %%a:
    38                              <1>     %endif  ;End the distance measurement if
    39                              <1>     %else   
    40                              <1>     j%-1 short %%a
    41                              <1>     return
    42                              <1> %%a:
    43                              <1>     %endif  ;End ifdef retoff
    44                              <1> %endmacro
    45                              <1> 
    46                              <1> %macro retz 0
    47                              <1> cret z
    48                              <1> %endmacro
    49                              <1> 
    50                              <1> %macro retnz 0
    51                              <1> cret nz
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> %macro rete 0
    55                              <1> cret e
    56                              <1> %endmacro
    57                              <1> 
    58                              <1> %macro retne 0
    59                              <1> cret ne
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> %macro retc 0
    63                              <1> cret c
    64                              <1> %endmacro
    65                              <1> 
    66                              <1> %macro retnc 0
    67                              <1> cret nc
    68                              <1> %endmacro
    69                              <1> 
    70                              <1> %macro retb 0
    71                              <1> cret b
    72                              <1> %endmacro
    73                              <1> 
    74                              <1> %macro retnb 0
    75                              <1> cret nb
    76                              <1> %endmacro
    77                              <1> 
    78                              <1> %macro breakpoint 0
    79                              <1> xchg bx, bx
    80                              <1> %endmacro
     7                                  %include "./Source/Include/dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    27 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    32 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Only affects for SUBST drives, not JOIN
    69                              <1> ; Flags: Bit 15 set = Network drive
    70                              <1> ;        Bit 14 set = Physical drive
    71                              <1> ;        Bit 13 set = JOIN'ed drive
    72                              <1> ;        Bit 12 set = SUBST'ed drive
    73                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    74                              <1> endstruc
    75                              <1> ;CDS equates
    76                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    77                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    78                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    79                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    80                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    81                              <1> ;------------------------------------------------------------------------;
    82                              <1> ; The SFT is a way to allow applications to open file handles to files 
    83                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    84                              <1> ; under the first header, and then a second header will be linked to the 
    85                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    86                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    87                              <1> ; using the FCBS= command. Default FCBS=5.
    88                              <1> ;
    89                              <1> ; A file handle describes the file, and the location within the file that
    90                              <1> ; we are reading. The file handle can be manipulated without the file
    91                              <1> ; being in memory, thus allowing the user to access data without needing 
    92                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    93                              <1> ; accessing devices, by treating them as files with their drivers 
    94                              <1> ; responding and translating the manipulations of the file handle itself.
    95                              <1> ; Neither the driver nor the application should see or use the SFT for
    96                              <1> ; the handle, as it is subject to change (and will change when file 
    97                              <1> ; sharing provisions are included). The DOS will make requests to the 
    98                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    99                              <1> ; track of the information in the SFT entry for that handle. 
   100                              <1> ;
   101                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   102                              <1> ; can point to the same file. It all depends on what the applications 
   103                              <1> ; want to do with the File.
   104                              <1> ;
   105                              <1> ; !!!!IMPORTANT!!!!
   106                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   107                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   108                              <1> ;
   109                              <1> ;Each SFT may look like this:
   110                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   111                              <1> ;            |                |
   112                              <1> ;       wNumFiles*sft    wNumFiles*sft
   113                              <1> ;
   114                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   115                              <1> ; System FCBs.
   116                              <1> ;
   117                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   118                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   119                              <1> ;
   120                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   121                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   122                              <1> ;------------------------------------------------------------------------;
   123                              <1> struc sfth   ;System file table header
   124                              <1> ; This is the SFT header.
   125                              <1> ; This structure comes before the start of the first file in the array/table.
   126 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   127 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   128                              <1> endstruc
   129                              <1> 
   130                              <1> struc sft
   131                              <1> ;This is the file struc itself
   132 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   133 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   134 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   135 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   136 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   137 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   138 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   139 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   140 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   141 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   142 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   143 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   144 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   145 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   146 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   147 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   148 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   149 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   150 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   151                              <1> ;                           0 means no record
   152                              <1> endstruc
   153                              <1> ;Open Mode equates
   154                              <1> ;Access modes   Bits[2:0]
   155                              <1> ReadAccess      equ 0h
   156                              <1> WriteAccess     equ 1h
   157                              <1> RWAccess        equ 2h
   158                              <1> ;Bit 3 reserved 0
   159                              <1> ;Sharing modes  Bits[6:4]
   160                              <1> CompatShare     equ 0h
   161                              <1> denyRWShare     equ 10h
   162                              <1> denyWriteShare  equ 20h
   163                              <1> denyReadShare   equ 30h
   164                              <1> denyNoneShare   equ 40h
   165                              <1> netFCBShare     equ 70h
   166                              <1> ;Bit 7 reserved 0
   167                              <1> ;Bits 8-12 reserved 0
   168                              <1> 
   169                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   170                              <1> ;Buffering on writes
   171                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   172                              <1> ;FCB opened file?
   173                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   174                              <1> ;Attribute Byte
   175                              <1> readOnlyFile    equ 1h
   176                              <1> hiddenFile      equ 2h
   177                              <1> systemFile      equ 4h
   178                              <1> volumeLabel     equ 8h
   179                              <1> directoryFile   equ 10h ;Directory entry
   180                              <1> archiveFile     equ 20h
   181                              <1> ;Device Info equates
   182                              <1> ;For a block device, bits [5:0] contain the drive number
   183                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   184                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   185                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   186                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   187                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   188                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   189                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   190                              <1> blokFileToFlush equ 40h ;Set if ANY writes are made to this handle!
   191                              <1> devCharDev      equ 80h ;If set, it is a char device!
   192                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   193                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   194                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   195                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   196                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   197                              <1> 
   198                              <1> ;openAddress   equ DOSSEG:367Ah   
   199                              <1> ;createAddress equ DOSSEG:35E3h   
   200                              <1> ;------------------------------------------------------------------------;
   201                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   202                              <1> ; to an internal buffer, and then copying it to the specified location
   203                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   204                              <1> ; another request for the same sector from the same device is made, so 
   205                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   206                              <1> ; size, selected according to the largest detected sector size during 
   207                              <1> ; the initial loadup.
   208                              <1> ;
   209                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   210                              <1> ;
   211                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   212                              <1> ;------------------------------------------------------------------------;
   213                              <1> 
   214                              <1> struc bufferHdr
   215 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   216 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   217 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   218 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   219 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   220 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   221 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   222 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   223 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   224                              <1>     .dataarea:             ;Points to the start of the data area
   225                              <1> endstruc
   226                              <1> ;Buffer Flag equates
   227                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   228                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   229                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   230                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   231                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   232                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   233                              <1> ;Note! A buffer is marked as referenced only when the application 
   234                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   235                              <1> ;------------------------------------------------------------------------;
   236                              <1> ; Memory control block for each memory arena
   237                              <1> ;------------------------------------------------------------------------;
   238                              <1> struc mcb
   239 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   240 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   241 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   242 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   243                              <1>     .program:
   244                              <1> endstruc
   245                              <1> ;MCB equates
   246                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   247                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   248                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   249                              <1> mcbMarkCtn      equ "M"
   250                              <1> mcbMarkEnd      equ "Z"
   251                              <1> 
   252                              <1> memFirstFit     equ 0   ;First free block goes to application
   253                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   254                              <1> memLastFit      equ 2   ;Last free block goes to application
   255                              <1> 
   256                              <1> ;Owner = Para aligned address => Owning application PSP
   257                              <1> ;...To consider...
   258                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   259                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   260                              <1> ;------------------------------------------------------------------------;
   261                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   262                              <1> ; following order, thus allowing for return values to be placed in the 
   263                              <1> ; registers by accessing the caller register stack frame.
   264                              <1> ;------------------------------------------------------------------------;
   265                              <1> struc callerFrame
   266 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   267 00000008 ????????????????    <1>     .rbx    resq 1    
   268 00000010 ????????????????    <1>     .rcx    resq 1
   269 00000018 ????????????????    <1>     .rdx    resq 1
   270 00000020 ????????????????    <1>     .rsi    resq 1
   271 00000028 ????????????????    <1>     .rdi    resq 1
   272 00000030 ????????????????    <1>     .rbp    resq 1
   273 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   274 00000040 ????????????????    <1>     .r9     resq 1
   275                              <1> ;Pushed by Processor when invoked via Interrupt
   276 00000048 ????????????????    <1>     .rip    resq 1
   277 00000050 ????????????????    <1>     .cs     resq 1
   278 00000058 ????????????????    <1>     .flags  resq 1
   279                              <1> endstruc
   280                              <1> 
   281                              <1> struc dpl
   282                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   283                              <1> ; server calls
   284 00000000 ????????????????    <1>     .rax    resq 1
   285 00000008 ????????????????    <1>     .rbx    resq 1
   286 00000010 ????????????????    <1>     .rcx    resq 1
   287 00000018 ????????????????    <1>     .rdx    resq 1
   288 00000020 ????????????????    <1>     .rsi    resq 1
   289 00000028 ????????????????    <1>     .rdi    resq 1
   290 00000030 ????????????????    <1>     .r8     resq 1
   291 00000038 ????????????????    <1>     .r9     resq 1
   292 00000040 ????????????????    <1>     .align  resq 1
   293 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   294 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   295                              <1> endstruc
   296                              <1> 
   297                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   298 00000000 ????????????????    <1>     .oldRBP         resq 1  
   299 00000008 ??                  <1>     .newBuffers     resb 1  ;New buffers value
   300 00000009 ??                  <1>     .newSFTVal      resb 1
   301 0000000A ??                  <1>     .newFCBSVal     resb 1
   302 0000000B ??                  <1>     .newProtFCBSVal resb 1  ;Number of protected FCBS
   303 0000000C ??                  <1>     .newLastdrive   resb 1
   304 0000000D ??                  <1>     .newStacks      resb 1  ;Ignored for now
   305 0000000E ????                <1>     .newStackSize   resb 2  ;Ignored for now
   306 00000010 ????????            <1>     .newAllocSize   resd 1  ;Used to keep track of reallocation size
   307 00000014 ????????            <1>                     resd 1  ;Alignment byte
   308 00000018 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc fcb
   312                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   313 00000000 ??                  <1>     .driveNum   resb 1
   314 00000001 ????????????????    <1>     .filename   resb 8
   315 00000009 ??????              <1>     .fileext    resb 3
   316 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   317                              <1> ;One block consists of 128 records, of size denoted in the below
   318 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   319 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   320 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   321 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   322 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   323 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   324 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   325 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   326 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   327                              <1>     ;If record size > 64, high byte is ignored.
   328                              <1>     ;Used for random read and write operations to find the right record
   329                              <1> endstruc
   330                              <1> 
   331                              <1> struc filename
   332                              <1> ;8.3 File name struct
   333 00000000 ????????????????    <1>     .fName  resb 8
   334 00000008 ??????              <1>     .fExt   resb 3
   335                              <1> endstruc
   336                              <1> 
   337                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   338 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   339 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   340 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   341 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   342 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   343 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   344 00000016 ????                <1>     .fileTime   resw 1  ;File time
   345 00000018 ????                <1>     .fileDate   resw 1  ;File date
   346 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   347 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   348                              <1> endstruc
   349                              <1> 
   350                              <1> struc psp
   351 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   352 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   353 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   354 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   355 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   356 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   357 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   358 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   359 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   360 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   361 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   362 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   363 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   364 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   365                              <1> ;Extra handle arrays are grouped into a linked list
   366                              <1> ;The below are in the same place as in DOS
   367 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   368 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   369                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   370 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   371 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   372                              <1> endstruc
   373                              <1> 
   374                              <1> struc clkStruc
   375 00000000 ????                <1>     .dateWord   resw 1
   376 00000002 ??                  <1>     .minutes    resb 1
   377 00000003 ??                  <1>     .hours      resb 1
   378 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   379 00000005 ??                  <1>     .seconds    resb 1
   380                              <1> endstruc
   381                              <1> 
   382                              <1> struc countryStruc
   383 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   384                              <1>                         ;0 = month day year hh:mm:ss
   385                              <1>                         ;1 = day month year hh:mm:ss
   386                              <1>                         ;2 = year month day hh:mm:ss
   387 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   388 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   389 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   390 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   391 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   392 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   393                              <1>                         ;0 = Symbol leads, without space
   394                              <1>                         ;1 = Symbol follows, without space
   395                              <1>                         ;2 = Symbol leads, one space
   396                              <1>                         ;3 = Symbol follows, one space
   397                              <1>                         ;4 = Symbol replace decimal separator
   398 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   399 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   400 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   401 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   402 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   403                              <1> endstruc
   404                              <1> 
   405                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   406                              <1> ;for a space of 64Gb
   407                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   408                              <1> dosLowBase  equ 600h    ;Low load address
   409                              <1> 
   410                              <1> ;Critical Error AH bitfield equates
   411                              <1> critRead    equ 0h
   412                              <1> critWrite   equ 1h
   413                              <1> critDOS     equ 0h
   414                              <1> critFAT     equ 2h
   415                              <1> critDir     equ 4h
   416                              <1> critData    equ 6h
   417                              <1> critFailOK  equ 8h
   418                              <1> critRetryOK equ 10h
   419                              <1> critIgnorOK equ 20h
   420                              <1> critCharDev equ 80h
   421                              <1> 
   422                              <1> critIgnore  equ 0
   423                              <1> critRetry   equ 1
   424                              <1> critAbort   equ 2
   425                              <1> critFail    equ 3
   426                              <1> 
   427                              <1> ;MISC ASCII control chars
   428                              <1> NUL equ 00h ;^@         | ASCII Null
   429                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   430                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   431                              <1> BEL equ 07h ;^G         | ASCII Bell
   432                              <1> BSP equ 08h ;^H         | ASCII Backspace
   433                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   434                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   435                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   436                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   437                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   438                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   439                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   440                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   441                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   442                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   443                              <1> SPC equ 20h ;Printable  | ASCII Space
   444                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   445                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   446                              <1> 
   447                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   448                              <1> ;Extended Ascii Codes
   449                              <1> eF1     equ 3Bh ;F1 second byte
   450                              <1> eF2     equ 3Ch ;F2 second byte
   451                              <1> eF3     equ 3Dh ;F3 second byte
   452                              <1> eF4     equ 3Eh ;F4 second byte
   453                              <1> eF5     equ 3Fh ;F5 second byte
   454                              <1> eF6     equ 40h ;F6 second byte
   455                              <1> eF7     equ 41h ;F7 second byte
   456                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   457                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   458                              <1> eIns    equ 52h ;Insert second byte
   459                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   460                              <1> 
   461                              <1> ;Default Configuration for the system
   462                              <1> 
   463                              <1> buffersDefault  equ 30
   464                              <1> filesDefault    equ 20
   465                              <1> fcbsDefault     equ 4
   466                              <1> safeFcbsDeflt   equ 0
   467                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Source/Include/dosError.inc"
     9                              <1> ;DOS Error codes
    10                              <1> 
    11                              <1> ;Extended Error Codes
    12                              <1> errInvFnc   equ 1   ;Invalid function number
    13                              <1> errFnf      equ 2   ;File not found
    14                              <1> errPnf      equ 3   ;Path not found
    15                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    16                              <1> errAccDen   equ 5   ;Access denied (to resource)
    17                              <1> errBadHdl   equ 6   ;Invalid handle
    18                              <1> errMCBbad   equ 7   ;MCB's destroyed
    19                              <1> errNoMem    equ 8   ;Insufficient memory
    20                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    21                              <1> errBadEnv   equ 10  ;Invalid environment
    22                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    23                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    24                              <1> errInvDat   equ 13  ;Invalid data
    25                              <1> ;           equ 14  ;Reserved
    26                              <1> errBadDrv   equ 15  ;Invalid drive specified
    27                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    28                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    29                              <1> errNoFil    equ 18  ;No more files
    30                              <1> ;The following are Driver error codes + 19
    31                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    32                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    33                              <1> errUnkUnt   equ 20  ;Unknown Unit
    34                              <1> errDrvNR    equ 21  ;Drive not ready
    35                              <1> errUnkCmd   equ 22  ;Unknown Command
    36                              <1> errCRCerr   equ 23  ;Data (CRC) error
    37                              <1> errBadRLn   equ 24  ;Bad request structure length
    38                              <1> errSekErr   equ 25  ;Seek error
    39                              <1> errUnkMed   equ 26  ;Unknown media type
    40                              <1> errSecNF    equ 27  ;Sector not Found
    41                              <1> errNoPap    equ 28  ;Printer out of paper
    42                              <1> errWF       equ 29  ;Write fault
    43                              <1> errRF       equ 30  ;Read fault
    44                              <1> errGF       equ 31  ;General fault
    45                              <1> ;----------------------------------------------
    46                              <1> ;The following two go inbetween the Disk errors
    47                              <1> errShrVio   equ 32  ;Sharing violations
    48                              <1> errLokVio   equ 33  ;File Lock violation
    49                              <1> ;----------------------------------------------
    50                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    51                              <1> errNoFCB    equ 35  ;FCB unavailable
    52                              <1> errShrFul   equ 36  ;Sharing buffer full
    53                              <1> 
    54                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    55                              <1> 
    56                              <1> errFilExist equ 80  ;File already exists
    57                              <1> errDirExist equ 82  ;Directory already exists
    58                              <1> errFI44     equ 83  ;Fail on INT 44h
    59                              <1> errRedir    equ 84  ;Too many levels of redirection
    60                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    61                              <1> errBadPass  equ 86  ;Bad password
    62                              <1> errBadParam equ 87  ;Bad parameter passed to request
    63                              <1> errNetWrite equ 88  ;Network Write Fault
    64                              <1> ;-----------------------------------------------------------------------------
    65                              <1> ;Error Loci
    66                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    67                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    68                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    69                              <1> eLocChr     equ 4   ;Serial/Character Device error
    70                              <1> eLocMem     equ 5   ;Related to RAM
    71                              <1> ;-----------------------------------------------------------------------------
    72                              <1> ;Error Actions
    73                              <1> eActRet     equ 1   ;Retry
    74                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    75                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    76                              <1> eActAbt     equ 4   ;Abort with cleanup
    77                              <1> eActKil     equ 5   ;Abort without cleanup
    78                              <1> eActIgn     equ 6   ;Ignore error
    79                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    80                              <1> ;-----------------------------------------------------------------------------
    81                              <1> ;Error classes
    82                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    83                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    84                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    85                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    86                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    87                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    88                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    89                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    90                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    91                              <1> eClsLocked  equ 10  ;Resource Locked
    92                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    93                              <1> eClsClash   equ 12  ;Resource already exists!
    94                              <1> eClsUnk     equ 13  ;Unknown class
     9                                  %include "./Source/Utils/COMMAND/Data/cmdEqu.asm"
    10                              <1> ;Data equates and struct declarations
    11                              <1> 
    12                              <1> cmdBufferL  equ 128 ;Length of a command line buffer
    13                              <1> driveSpecL  equ 2   ;Space for X:
    14                              <1> dirPathL    equ 64  ;Length of a directory path
    15                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
    16                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
    17                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
    18                              <1> fullDirPathL equ driveSpecL + dirPathL
    19                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    20                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    21                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    22                              <1> 
    23                              <1> ;Use PSP FCB's for switch buffers
    24                              <1> fcb1        equ psp.fcb1
    25                              <1> fcb2        equ psp.fcb2
    26                              <1> ;Use the dta as the built command line buffer.
    27                              <1> cmdLineCnt  equ psp.parmList
    28                              <1> cmdLine     equ psp.progTail
    29                              <1> 
    30                              <1> 
    31                              <1> ;Struct Declarations
    32                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    33 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    34 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    35 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    36 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    37 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    38                              <1> endstruc
    39                              <1> 
    40                              <1> struc execProg  ;For use with EXEC-ing a child task
    41 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    42 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    43 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    44 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    45                              <1> endstruc
    46                              <1> 
    47                              <1> ;Directory attribute equates
    48                              <1>     dirReadOnly     equ 01h
    49                              <1>     dirHidden       equ 02h
    50                              <1>     dirSystem       equ 04h
    51                              <1>     dirVolumeID     equ 08h
    52                              <1>     dirDirectory    equ 10h
    53                              <1>     dirArchive      equ 20h
    54                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    55                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    56                              <1>     ;If any of the three bits are set, then ALL three bits are set
    57                              <1>     ; in addition to whatever the user passed to search for.
    58                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    59                              <1>     dirIncFiles     equ dirHidden | dirSystem
    10                                  Segment .data align=1 
    11                                  %include "./Source/Utils/COMMAND/Data/cmdData.asm"
    12                              <1> ;Static Data Area for COMMAND.COM    
    13                              <1> startLbl:   ;Start symbol, this is the entry point
    14 00000000 E99E1C0000          <1>     jmp cmdLdr
    15 00000005 0000000000000000    <1> stackBottom dq 0    ;Pointer to the top of the stack as allocated by DOS
    16 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
    17 0000000F FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
    18 00000017 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
    19 0000001F 1400                <1> numHdls     dw 20   ;Get number of handles permitted, hardcoded in this version
    20 00000021 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    21 00000023 5C                  <1> pathSep     db "\"  ;Default path sep
    22 00000024 2F                  <1> switchChar  db "/"  ;Default switch char
    23                              <1> ;Static strings, not used in command line parsing
    24 00000025 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    24 0000002E 000000000000000000- <1>
    24 00000037 000000000000000000- <1>
    24 00000040 000000000000000000- <1>
    24 00000049 0000                <1>
    25 0000004B 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    25 00000054 000000000000000000- <1>
    25 0000005D 000000000000000000- <1>
    25 00000066 000000000000000000- <1>
    25 0000006F 000000000000000000- <1>
    25 00000078 000000000000000000- <1>
    25 00000081 000000000000000000- <1>
    25 0000008A 00000000            <1>
    26                              <1> 
    27                              <1> 
    28                              <1> cmdLineStatePtr:
    29 0000008E 00                  <1> cmdStartOff db 0    ;Offset to the first char for this command (may be a space)
    30 0000008F 00                  <1> cmdEndOff   db 0    ;Offset to the terminating char for this command (0Dh or |)
    31 00000090 00                  <1> pipeFlag    db 0    ;If set, we are piping across a command
    32 00000091 0000                <1> pipeHndl    dw 0    ;If pipeFlag set, this var has the handle to the pipe file
    33 00000093 202020202020202020- <1> pipeName    db 11 dup (" ") ;Name of the pipe file we created
    33 0000009C 2020                <1>
    34                              <1> 
    35                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    36                              <1> ;These variables are valid for a SINGLE command in a command line
    37 0000009E 0000                <1> cmdDrvSpec  dw 0    ;Read the first word in to see if the pathspec has drivespec
    38 000000A0 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    39 000000A1 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    40                              <1> ;                    If 2, we are redirecting output to a file, by appending
    41                              <1> ;FLG and SWCH are read as a word when checking if argX is a switch
    42 000000A2 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    43 000000A3 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    44 000000A4 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    45                              <1> 
    46 000000A5 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    47 000000A6 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    48 000000A7 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    49                              <1> 
    50                              <1> cmdStateL equ $ - cmdStatePtr
    51                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    52                              <1> 
    53                              <1> ;Structs and strings
    54                              <1> 
    55 000000A8 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    55 000000B1 00000000000000      <1>
    56 000000B8 2B                  <1> cmdFFBlock  db ffBlock_size ;Internal Find First Block to use as default DTA
    57                              <1> 
    58 000000B9 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    58 000000C2 000000000000000000- <1>
    58 000000CB 000000000000000000- <1>
    58 000000D4 000000000000000000- <1>
    58 000000DD 000000000000000000- <1>
    58 000000E6 000000000000000000- <1>
    58 000000EF 000000000000000000- <1>
    58 000000F8 000000000000000000- <1>
    58 00000101 000000000000000000- <1>
    58 0000010A 000000000000000000- <1>
    58 00000113 000000000000000000- <1>
    58 0000011C 000000000000000000- <1>
    58 00000125 000000000000000000- <1>
    58 0000012E 000000000000000000- <1>
    58 00000137 0000                <1>
    59 00000139 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    59 00000142 000000000000000000- <1>
    59 0000014B 000000000000000000- <1>
    59 00000154 000000000000000000- <1>
    59 0000015D 000000000000000000- <1>
    59 00000166 000000000000000000- <1>
    59 0000016F 000000000000000000- <1>
    59 00000178 000000000000000000- <1>
    59 00000181 000000000000000000- <1>
    59 0000018A 000000000000000000- <1>
    59 00000193 000000000000000000- <1>
    59 0000019C 000000000000000000- <1>
    59 000001A5 000000000000000000- <1>
    59 000001AE 000000000000000000- <1>
    59 000001B7 0000                <1>
    60 000001B9 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)  ;Space for full path to a external command
    60 000001C2 000000000000000000- <1>
    60 000001CB 000000000000000000- <1>
    60 000001D4 000000000000000000- <1>
    60 000001DD 000000000000000000- <1>
    60 000001E6 000000000000000000- <1>
    60 000001EF 000000000000000000- <1>
    60 000001F8 000000000000000000- <1>
    60 00000201 00000000000000      <1>
    61                              <1> 
    62 00000208 000000000000000000- <1> fcbCmdSpec  db fcbNameL dup (0) ;Used to make a FCB style name for the file
    62 00000211 0000                <1>
    63 00000213 000000000000000000- <1> cmdSpec     db fileNameZL dup (0)   ;ASCIIZ command spec for the command name
    63 0000021C 00000000            <1>
    64 00000220 000000000000000000- <1> cmdName     db cmdNameL dup (0) ;Command name string prefixed by length of word
    64 00000229 0000000000          <1>
    65                              <1> 
    66 0000022E 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    66 00000237 000000000000000000- <1>
    66 00000240 000000000000000000- <1>
    66 00000249 000000000000000000- <1>
    66 00000252 000000000000000000- <1>
    66 0000025B 000000000000000000- <1>
    66 00000264 000000000000000000- <1>
    66 0000026D 000000000000000000- <1>
    66 00000276 00000000000000      <1>
    67 0000027D 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    67 00000286 000000000000000000- <1>
    67 0000028F 000000000000000000- <1>
    67 00000298 000000000000000000- <1>
    67 000002A1 000000000000000000- <1>
    67 000002AA 000000000000000000- <1>
    67 000002B3 000000000000000000- <1>
    67 000002BC 000000000000000000- <1>
    67 000002C5 00000000000000      <1>
    68                              <1> 
    69 000002CC 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Contains the pathspec for the search file
    69 000002D5 000000000000000000- <1>
    69 000002DE 000000000000000000- <1>
    69 000002E7 000000000000000000- <1>
    69 000002F0 000000000000000000- <1>
    69 000002F9 000000000000000000- <1>
    69 00000302 000000000000000000- <1>
    69 0000030B 000000000000000000- <1>
    69 00000314 000000000000000000- <1>
    69 0000031D 000000000000000000- <1>
    69 00000326 000000000000000000- <1>
    69 0000032F 000000000000000000- <1>
    69 00000338 000000000000000000- <1>
    69 00000341 000000000000000000- <1>
    69 0000034A 0000                <1>
    70                              <1> ;The above is larger than is needed/supported by DOS to allow for 
    71                              <1> ; users overtyping
    72                              <1> 
    73                              <1> ;Internal Function vars
    74 0000034C 00                  <1> dirPrnType  db 0    ;Print type.    Bit[0] set => /W or /w specified
    75                              <1> ;                                   Bit[1] set => /P or /p specified
    76 0000034D 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    77 0000034E 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    78 0000034F 00                  <1> dirPathOff  db 0
    79 00000350 000000000000000000- <1> dirVolLbl   db 13 dup (0)
    79 00000359 00000000            <1>
    80 0000035D 0000000000000000    <1> dirVolPathBuf db 8 dup (0)  ;Used to build X:\*.*,0 for volume label search
    81 00000365 00                  <1> dirDrv      db 0    ;0 based drive number to use
    12                                  %include "./Source/Utils/COMMAND/Data/cmdTable.asm"
    13                              <1> ;Function dispatch table
    14                              <1> functionTable:
    15                              <1> ;Use Pascal strings with each row of hte table having three columns:
    16                              <1> ; Col 1, BYTE, Length of command
    17                              <1> ; Col 2, String, String representing the user input
    18                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
    19 00000366 03444952            <1>     db 3, "DIR"
    20 0000036A 3D0D                <1>     dw dir - startLbl
    21                              <1> 
    22 0000036C 024344              <1>     db 2, "CD"
    23 0000036F 2D11                <1>     dw chdir - startLbl
    24                              <1> 
    25 00000371 054348444952        <1>     db 5, "CHDIR"
    26 00000377 2D11                <1>     dw chdir - startLbl
    27                              <1> 
    28 00000379 024D44              <1>     db 2, "MD"
    29 0000037C E711                <1>     dw mkdir - startLbl
    30                              <1> 
    31 0000037E 054D4B444952        <1>     db 5, "MKDIR"
    32 00000384 E711                <1>     dw mkdir - startLbl
    33                              <1> 
    34 00000386 025244              <1>     db 2, "RD"
    35 00000389 4C12                <1>     dw rmdir - startLbl
    36                              <1> 
    37 0000038B 05524D444952        <1>     db 5, "RMDIR"
    38 00000391 4C12                <1>     dw rmdir - startLbl
    39                              <1> 
    40 00000393 0344454C            <1>     db 3, "DEL"
    41 00000397 B212                <1>     dw erase - startLbl
    42                              <1> 
    43 00000399 054552415345        <1>     db 5, "ERASE"
    44 0000039F B212                <1>     dw erase - startLbl
    45                              <1> 
    46 000003A1 0444415445          <1>     db 4, "DATE"
    47 000003A6 B312                <1>     dw date - startLbl
    48                              <1> 
    49 000003A8 0454494D45          <1>     db 4, "TIME"
    50 000003AD B412                <1>     dw time - startLbl
    51                              <1> 
    52 000003AF 04434F5059          <1>     db 4, "COPY"
    53 000003B4 B112                <1>     dw copy - startLbl
    54                              <1> 
    55 000003B6 0443545459          <1>     db 4, "CTTY"
    56 000003BB B512                <1>     dw ctty - startLbl
    57                              <1> 
    58 000003BD 03434C53            <1>     db 3, "CLS"
    59 000003C1 B612                <1>     dw cls - startLbl
    60                              <1> 
    61 000003C3 05425245414B        <1>     db 5, "BREAK"
    62 000003C9 2813                <1>     dw break - startLbl
    63                              <1> 
    64 000003CB 06564552494659      <1>     db 6, "VERIFY"
    65 000003D2 A913                <1>     dw verify - startLbl
    66                              <1> 
    67 000003D4 0652454E414D45      <1>     db 6, "RENAME"
    68 000003DB 2614                <1>     dw rename - startLbl
    69                              <1> 
    70 000003DD 08545255454E414D45  <1>     db 8, "TRUENAME"
    71 000003E6 2714                <1>     dw truename - startLbl
    72                              <1> 
    73 000003E8 03564552            <1>     db 3, "VER"
    74 000003EC 6514                <1>     dw version - startLbl
    75                              <1> 
    76 000003EE FF                  <1>     db -1   ;End of table
    13                                  %include "./Source/Utils/COMMAND/Data/cmdMsg.asm"
    14                              <1> ;COMMAND.COM Messages and strings
    15 000003EF 0D0A24              <1> crlf    db  CR,LF,"$"
    16 000003F2 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
    16 000003FB 696C65206D69737369- <1>
    16 00000404 6E670D0A24          <1>
    17 00000409 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
    17 00000412 6469736B2077697468- <1>
    17 0000041B 206261746368206669- <1>
    17 00000424 6C65                <1>
    18 00000426 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
    18 0000042F 737320616E79206B65- <1>
    18 00000438 79207768656E207265- <1>
    18 00000441 6164790D0A24        <1>
    19 00000447 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
    19 00000450 6E64206F722066696C- <1>
    19 00000459 65206E616D650D0A24  <1>
    20 00000462 4475706C6963617465- <1> dupName db  "Duplicate file name or "
    20 0000046B 2066696C65206E616D- <1>
    20 00000474 65206F7220          <1>
    21 00000479 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    21 00000482 666F756E640D0A24    <1>
    22 0000048A 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    22 00000493 656E74206469736B20- <1>
    22 0000049C 73706163650D0A24    <1>
    23 000004A4 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    23 000004AD 7669726F6E6D656E74- <1>
    23 000004B6 2073706163650D0A24  <1>
    24 000004BF 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    24 000004C8 74696F6E206572726F- <1>
    24 000004D1 720D0A24            <1>
    25 000004D5 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    25 000004DE 6F7420626520636F70- <1>
    25 000004E7 696564206F6E746F20- <1>
    25 000004F0 697473656C660D0A24  <1>
    26 000004F9 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    26 00000502 662064657374696E61- <1>
    26 0000050B 74696F6E206C6F7374- <1>
    26 00000514 206265666F72652063- <1>
    26 0000051D 6F70790D0A24        <1>
    27                              <1> ;Copy end message. First write # files copied then this message 
    28 00000523 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    28 0000052C 636F706965640D0A24  <1>
    29                              <1> ;Dir end1 msg. First write # files in dir then this
    30 00000535 2046696C6528732920- <1> dirOk   db  " File(s) $"
    30 0000053E 24                  <1>
    31                              <1> ;Dir end2 msg. First write # bytes free then this message
    32 0000053F 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    32 00000548 65650D0A24          <1>
    33 0000054D 203C4449523E202020- <1> dirLbl  db  " <DIR>   $"
    33 00000556 24                  <1>
    34                              <1> 
    35 00000557 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    35 00000560 726976652073706563- <1>
    35 00000569 696669636174696F6E- <1>
    35 00000572 0D0A24              <1>
    36 00000575 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    36 0000057E 6B6579207768656E20- <1>
    36 00000587 7265616479202E202E- <1>
    36 00000590 202E2024            <1>
    37 00000594 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    37 0000059D 6172616D657465720D- <1>
    37 000005A6 0A24                <1>
    38                              <1> 
    39 000005A8 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    39 000005B1 576564546875467269- <1>
    39 000005BA 536174              <1>
    40 000005BD 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    40 000005C6 206461746524        <1>
    41 000005CC 43757272656E742064- <1> curDate db  "Current date is $"
    41 000005D5 6174652069732024    <1>
    42 000005DD 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date: $"
    42 000005E6 657720646174653A20- <1>
    42 000005EF 24                  <1>
    43 000005F0 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    43 000005F9 2074696D6524        <1>
    44 000005FF 43757272656E742074- <1> curTime db  "Current time is $"
    44 00000608 696D652069732024    <1>
    45 00000610 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    45 00000619 65772074696D653A20- <1>
    45 00000622 24                  <1>
    46                              <1> 
    47 00000623 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    47 0000062C 7572652028592F4E29- <1>
    47 00000635 3F2024              <1>
    48                              <1> 
    49 00000638 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    49 00000641 56657273696F6E2024  <1>
    50                              <1> 
    51 0000064A 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    51 00000653 6E2064726976652024  <1>
    52 0000065C 2069732024          <1> volOk   db " is $"
    53 00000661 20686173206E6F206C- <1> volNo   db " has no label$"
    53 0000066A 6162656C24          <1>
    54                              <1> 
    55 0000066F 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    55 00000678 69726563746F72790D- <1>
    55 00000681 0A24                <1>
    56 00000683 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    56 0000068C 206372656174652064- <1>
    56 00000695 69726563746F72790D- <1>
    56 0000069E 0A24                <1>
    57 000006A0 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    57 000006A9 6174682C206E6F7420- <1>
    57 000006B2 6469726563746F7279- <1>
    57 000006BB 2C0D0A              <1>
    58 000006BE 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    58 000006C7 6F7279206E6F742065- <1>
    58 000006D0 6D7074790D0A24      <1>
    59 000006D7 204469726563746F72- <1> dirMain db " Directory of  $"
    59 000006E0 79206F66202024      <1>
    60 000006E7 4E6F20506174682024  <1> noPath  db "No Path $"
    61 000006F0 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    61 000006F9 7269766520696E2073- <1>
    61 00000702 656172636820706174- <1>
    61 0000070B 680D0A24            <1>
    62 0000070F 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    62 00000718 65766963650D0A24    <1>
    63 00000720 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    63 00000729 20666F756E640D0A24  <1>
    64 00000732 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    64 0000073B 726F720D0A24        <1>
    65 00000741 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    65 0000074A 6F74206265206E6573- <1>
    65 00000753 7465640D0A24        <1>
    66 00000759 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    66 00000762 6174652066696C6520- <1>
    66 0000076B 6572726F7220647572- <1>
    66 00000774 696E6720706970650D- <1>
    66 0000077D 0A24                <1>
    67 0000077F 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    67 00000788 2062696E6172792072- <1>
    67 00000791 656164732066726F6D- <1>
    67 0000079A 206120646576696365- <1>
    67 000007A3 0D0A24              <1>
    68 000007A6 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    69 000007AC 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    70 000007B1 425245414B20697320- <1> breakIs db "BREAK is $"
    70 000007BA 24                  <1>
    71 000007BB 564552494659206973- <1> verifyIs    db "VERIFY is $"
    71 000007C4 2024                <1>
    72 000007C6 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    73 000007CF 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    73 000007D8 617468206F72206669- <1>
    73 000007E1 6C65206E616D650D0A- <1>
    73 000007EA 24                  <1>
    74 000007EB 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    74 000007F4 756D626572206F6620- <1>
    74 000007FD 706172616D65746572- <1>
    74 00000806 730D0A24            <1>
    75 0000080A 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    75 00000813 74696E6720746F2064- <1>
    75 0000081C 6576696365          <1>
    76 00000821 08200800            <1> backSpace   db BSP," ",BSP,NUL
    77                              <1> 
    78 00000825 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    79 00000829 2020202024          <1> fourSpc  db "    $"
    80 0000082E 20202024            <1> threeSpc db "   $"
    81 00000832 202024              <1> twoSpc   db "  $"
    82                              <1> 
    83 00000835 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    83 0000083E 696679204F4E206F72- <1>
    83 00000847 204F46460D0A24      <1>
    84 0000084E 504154483D          <1> pathEVar db "PATH="
    85 00000853 50524F4D50543D      <1> promptEVar  db "PROMPT="
    14                                  %include "./Source/Utils/COMMAND/Source/cmdMain.asm"
    15                              <1> commandStart:
    16                              <1>     ;Resize Allocation, jump here with endpointer in rbx
    17                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
    18                              <1>     ; that the jump to safety won't be gobbled up when multitasking
    19 0000085A 49F7D8              <1>     neg r8  ;Convert r8 to -r8
    20 0000085D 4A8D5C0311          <1>     lea rbx, qword [rbx + r8 + 11h]    ;Get # of bytes for COMMAND.COM
    21 00000862 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
    22 00000865 B44A                <1>     mov ah, 4Ah ;Realloc
    23 00000867 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    24 0000086A CD41                <1>     int 41h
    25 0000086C EB5A                <1>     jmp short commandMain
    26                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    27 0000086E B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    28 00000873 CD41                <1>     int 41h
    29 00000875 66890591F7FFFF      <1>     mov word [returnCode], ax
    30                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    31 0000087C 488D1562110000      <1>     lea rdx, critErrorHandler
    32 00000883 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    33 00000887 B844250000          <1>     mov eax, 2544h
    34 0000088C CD41                <1>     int 41h
    35 0000088E 488D15E0130000      <1>     lea rdx, int43h
    36 00000895 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    37 00000899 B843250000          <1>     mov eax, 2543h
    38 0000089E CD41                <1>     int 41h
    39 000008A0 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    40 000008A7 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    41 000008AB B842250000          <1>     mov eax, 2542h
    42 000008B0 CD41                <1>     int 41h
    43                              <1> ;Close all handles from 5->MAX
    44 000008B2 0FB70D66F7FFFF      <1>     movzx ecx, word [numHdls]
    45 000008B9 BB05000000          <1>     mov ebx, 5
    46                              <1> .handleClose:
    47 000008BE B43E                <1>     mov ah, 3Eh ;File close
    48 000008C0 CD41                <1>     int 41h
    49 000008C2 FFC3                <1>     inc ebx ;Goto next file
    50 000008C4 39CB                <1>     cmp ebx, ecx
    51 000008C6 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    52                              <1> commandMain:
    53                              <1> ;Setup Commandline
    54 000008C8 FA                  <1>     cli
    55 000008C9 488B2535F7FFFF      <1>     mov rsp, qword [stackBottom]    ;Reset internal stack pointer pos
    56 000008D0 FB                  <1>     sti
    57 000008D1 FC                  <1>     cld ;Ensure stringops are done the right way
    58 000008D2 C605E0F7FFFF80      <1>     mov byte [inBuffer], 80h    ;Reset the buffer length
    59                              <1> .inputMain:
    60 000008D9 E8F50E0000          <1>     call clearCommandLineState
    61 000008DE E8C10B0000          <1>     call printCRLF
    62 000008E3 E8C30E0000          <1>     call printPrompt
    63                              <1> 
    64 000008E8 488D15CAF7FFFF      <1>     lea rdx, inBuffer
    65 000008EF B80A0C0000          <1>     mov eax, 0C0Ah  ;Do Buffered input
    66 000008F4 CD41                <1>     int 41h
    67 000008F6 E8A90B0000          <1>     call printCRLF  ;Note we have accepted input
    68                              <1> 
    69                              <1> ;First check we had something typed in of length greater than 1
    70                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    71 000008FB 803DB8F7FFFF01      <1>     cmp byte [inBuffer + 1], 1  ;Check input length valid
    72 00000902 762A                <1>     jbe .dfltErrExit
    73                              <1>     ;Copy over the input text
    74 00000904 488D35AEF7FFFF      <1>     lea rsi, inBuffer
    75 0000090B 488D3D27F8FFFF      <1>     lea rdi, cmdBuffer
    76 00000912 B980000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    77 00000917 F3A4                <1>     rep movsb
    78 00000919 31C0                <1>     xor eax, eax
    79 0000091B 6689056CF7FFFF      <1>     mov word [cmdStartOff], ax  ;Clear start and end Off positions
    80 00000922 E814000000          <1>     call parseInput
    81 00000927 E8AD010000          <1>     call doCommandLine
    82 0000092C EBAB                <1>     jmp short .inputMain
    83                              <1> .dfltErrExit:
    84 0000092E 488D1512FBFFFF      <1>     lea rdx, badCmd
    85 00000935 B409                <1>     mov ah, 09h
    86 00000937 CD41                <1>     int 41h
    87 00000939 EB9E                <1>     jmp short .inputMain
    88                              <1> 
    89                              <1> parseInput:
    90                              <1> ;EndOff is set up before entering this part
    91                              <1> ;Copies a nicely formatted version of the input command line
    92                              <1> ; without any redirections to psp.dta
    93 0000093B 488D35F9F7FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
    94 00000942 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
    95 00000949 0FB61D3FF7FFFF      <1>     movzx ebx, byte [cmdEndOff] ;Get the old end offset
    96 00000950 4801DE              <1>     add rsi, rbx    ;Move rsi to the start of this new command
    97 00000953 E8440E0000          <1>     call skipSpaces ;Skip any preceeding spaces
    98 00000958 66AD                <1>     lodsw   ;Get the first two chars into ax
    99 0000095A 6689053DF7FFFF      <1>     mov word [cmdDrvSpec], ax ;Store these chars as if they are the drvspec
   100 00000961 4881EE02000000      <1>     sub rsi, 2  ;Go back to the start of the command
   101 00000968 56                  <1>     push rsi
   102 00000969 57                  <1>     push rdi
   103 0000096A 488D3D48F8FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   104 00000971 57                  <1>     push rdi
   105 00000972 E868030000          <1>     call copyCommandTailItem
   106 00000977 5F                  <1>     pop rdi
   107 00000978 9C                  <1>     pushfq  ;Save the CF state
   108 00000979 E8A60D0000          <1>     call strlen
   109 0000097E FFC9                <1>     dec ecx ;Drop the terminating char from the count
   110 00000980 58                  <1>     pop rax ;Get the CF state in al
   111 00000981 5F                  <1>     pop rdi
   112 00000982 5E                  <1>     pop rsi
   113 00000983 F3A4                <1>     rep movsb   ;Now we copy the command into the psp command line
   114 00000985 A801                <1>     test al, 1  ;Was CF set?
   115 00000987 0F8586000000        <1>     jnz .exit   ;If an embedded CR was found in the filename, exit!
   116                              <1> .cmdLineProcess:
   117 0000098D E80A0E0000          <1>     call skipSpaces ;Go to the next char in the input line
   118                              <1> .redirFound:
   119 00000992 AC                  <1>     lodsb   ;Get first non-space char (setupRedir skips spaces before ret)
   120 00000993 3C0D                <1>     cmp al, CR  ;If this was a CR, we stop processing
   121 00000995 747C                <1>     je .exit
   122 00000997 E8D6020000          <1>     call checkAndSetupRedir ;If not, check if we have a redir element
   123 0000099C 7275                <1>     jc .exit    ;CF=CY only if pipe, which is equivalent to CR when processing
   124 0000099E 74F2                <1>     jz .redirFound  ;If we had a < > or >>, proceed to check if next char CR
   125 000009A0 B020                <1>     mov al, " "
   126 000009A2 AA                  <1>     stosb   ;Store a space to make space for the command file parameter
   127 000009A3 48FFCE              <1>     dec rsi ;Move rsi back to the first char
   128 000009A6 F605F5F6FFFFFF      <1>     test byte [arg1Flg], -1
   129 000009AD 7521                <1>     jnz .arg2
   130                              <1> .arg1:
   131 000009AF C605ECF6FFFFFF      <1>     mov byte [arg1Flg], -1
   132 000009B6 E8E10D0000          <1>     call skipSpaces
   133 000009BB 4889F0              <1>     mov rax, rsi
   134 000009BE 488D1D74F7FFFF      <1>     lea rbx, cmdBuffer
   135 000009C5 4829D8              <1>     sub rax, rbx
   136 000009C8 8805D5F6FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   137 000009CE EB2A                <1>     jmp short .argCommon
   138                              <1> .arg2:
   139 000009D0 F605CEF6FFFFFF      <1>     test byte [arg2Flg], -1
   140 000009D7 7521                <1>     jnz .argCommon
   141 000009D9 C605C5F6FFFFFF      <1>     mov byte [arg2Flg], -1
   142 000009E0 E8B70D0000          <1>     call skipSpaces
   143 000009E5 4889F0              <1>     mov rax, rsi
   144 000009E8 488D1D4AF7FFFF      <1>     lea rbx, cmdBuffer
   145 000009EF 4829D8              <1>     sub rax, rbx
   146 000009F2 8805AEF6FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   147 000009F8 EB00                <1>     jmp short .argCommon
   148                              <1> .argCommon:
   149                              <1>     ;More than two arguments? Do nothing more than just copy it
   150                              <1>     ; over. If we encounter an embedded CR, exit there too
   151 000009FA E89D0D0000          <1>     call skipSpaces
   152 000009FF 803E0D              <1>     cmp byte [rsi], CR  ;Are we at the end of the commandline?
   153 00000A02 740F                <1>     je .exit
   154                              <1>     ;If not, we copy it over
   155 00000A04 E8D6020000          <1>     call copyCommandTailItem    ;Stores a terminating null we dont want
   156 00000A09 488D7FFF            <1>     lea rdi, qword [rdi - 1]    ;Point back at the inserted terminating null
   157 00000A0D 0F837AFFFFFF        <1>     jnc .cmdLineProcess
   158                              <1> .exit:
   159 00000A13 488D1D1FF7FFFF      <1>     lea rbx, cmdBuffer
   160 00000A1A 48FFCE              <1>     dec rsi
   161 00000A1D 4829DE              <1>     sub rsi, rbx    ;Get the offset into the command line
   162 00000A20 89F3                <1>     mov ebx, esi
   163 00000A22 881D67F6FFFF        <1>     mov byte [cmdEndOff], bl    ;Store the offset to the terminating char
   164 00000A28 B00D                <1>     mov al, CR
   165 00000A2A AA                  <1>     stosb   ;Store the terminating CR in the psp command line
   166                              <1>     ;Now compute the command line length 
   167 00000A2B 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine] 
   168 00000A32 B00D                <1>     mov al, CR
   169 00000A34 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   170 00000A36 FFC9                <1>     dec ecx ;rcx = -1
   171 00000A38 F2AE                <1>     repne scasb
   172 00000A3A F7D1                <1>     not ecx
   173 00000A3C FEC9                <1>     dec cl  ;Dont include terminating CR
   174 00000A3E 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   175 00000A45 880F                <1>     mov byte [rdi], cl
   176                              <1>     ;Before returning, we copy the command name to cmdName
   177 00000A47 488D3D6BF7FFFF      <1>     lea rdi, cmdPathSpec
   178 00000A4E 4889FB              <1>     mov rbx, rdi    ;Use rbx as the ptr to the first char in the commandspec
   179 00000A51 30C0                <1>     xor al, al  ;Search for the terminating null
   180 00000A53 B94F000000          <1>     mov ecx, fileSpecZL ;Max number of chars the length could be
   181 00000A58 F2AE                <1>     repne scasb
   182 00000A5A 48FFCF              <1>     dec rdi ;Go to the last char in the command
   183 00000A5D 4889FE              <1>     mov rsi, rdi
   184 00000A60 FD                  <1>     std ;Now we go backwards to where rsi = rbx OR byte [rsi] = pathSep
   185                              <1> .keepSearching:
   186 00000A61 AC                  <1>     lodsb
   187 00000A62 3A05BBF5FFFF        <1>     cmp al, byte [pathSep]
   188 00000A68 740B                <1>     je .cmdStartFnd
   189 00000A6A 4839DE              <1>     cmp rsi, rbx
   190 00000A6D 75F2                <1>     jne .keepSearching
   191 00000A6F 48FFCE              <1>     dec rsi ;Go back two to go forwards again
   192 00000A72 48FFCE              <1>     dec rsi
   193                              <1> .cmdStartFnd:
   194 00000A75 48FFC6              <1>     inc rsi
   195 00000A78 48FFC6              <1>     inc rsi ;Go past the pathsep
   196 00000A7B FC                  <1>     cld ;Go the sane way again
   197 00000A7C 488D3D9EF7FFFF      <1>     lea rdi, qword [cmdName + 1]    ;First byte is for the length of the name
   198 00000A83 57                  <1>     push rdi    ;Cleanse the field before usage (not strictly necessary)
   199 00000A84 B90E000000          <1>     mov ecx, cmdNameL
   200 00000A89 30C0                <1>     xor al, al
   201 00000A8B F3AA                <1>     rep stosb
   202 00000A8D 5F                  <1>     pop rdi
   203 00000A8E 31C9                <1>     xor ecx, ecx
   204 00000A90 56                  <1>     push rsi    ;Save the location of the start byte of the command name
   205                              <1> .cmdGetChar:
   206 00000A91 AC                  <1>     lodsb
   207 00000A92 84C0                <1>     test al, al ;Did we find the terminating null?
   208 00000A94 7411                <1>     jz .nameLenFnd
   209 00000A96 3C2E                <1>     cmp al, "." ;Extension sep also terminates
   210 00000A98 740D                <1>     je .nameLenFnd
   211 00000A9A 24DF                <1>     and al, 0DFh    ;Else uppercase the char
   212 00000A9C AA                  <1>     stosb   ;and store it
   213 00000A9D FFC1                <1>     inc ecx
   214 00000A9F 81F90B000000        <1>     cmp ecx, 11 ;Max command length is 11
   215 00000AA5 72EA                <1>     jb .cmdGetChar
   216                              <1> .nameLenFnd:
   217 00000AA7 880D73F7FFFF        <1>     mov byte [cmdName], cl  ;Store the name length now
   218                              <1>     ;Now finally, create a FCB filespec
   219 00000AAD 488D3D54F7FFFF      <1>     lea rdi, fcbCmdSpec
   220 00000AB4 57                  <1>     push rdi
   221 00000AB5 B90B000000          <1>     mov ecx, fcbNameL
   222 00000ABA B020                <1>     mov al, " " ;Fill with spaces
   223 00000ABC F3AA                <1>     rep stosb
   224 00000ABE 5F                  <1>     pop rdi
   225 00000ABF 5E                  <1>     pop rsi ;Get back the location of the start byte of the command name
   226 00000AC0 E81F0D0000          <1>     call asciiToFCB
   227 00000AC5 488D353CF7FFFF      <1>     lea rsi, fcbCmdSpec
   228 00000ACC 488D3D40F7FFFF      <1>     lea rdi, cmdSpec
   229 00000AD3 E8670D0000          <1>     call FCBToAsciiz
   230                              <1>     return
    19                              <2> %%_ret:
    20 00000AD8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   231                              <1> 
   232                              <1> doCommandLine:
   233 00000AD9 488D355BF6FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
   234 00000AE0 488D3DC1F5FFFF      <1>     lea rdi, cmdFcb
   235 00000AE7 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks
   236 00000AEC CD41                <1>     int 41h
   237 00000AEE 0FB71DA9F5FFFF      <1>     movzx ebx, word [cmdDrvSpec]    ;Get the drive specifier
   238 00000AF5 80FF3A              <1>     cmp bh, ":"
   239 00000AF8 752E                <1>     jne .noDriveSpecified
   240 00000AFA 88DA                <1>     mov dl, bl      ;Move the drive letter in dl
   241 00000AFC 80E2DF              <1>     and dl, 0DFh    ;Make the drive letter upper case
   242 00000AFF 80EA41              <1>     sub dl, "A"     ;And make it a 0 based drive letter
   243 00000B02 3CFF                <1>     cmp al, -1  ;Int 41h returns AL = -1 if bad drive specified
   244 00000B04 7415                <1>     je .badDrive
   245                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   246 00000B06 803D13F7FFFF02      <1>     cmp byte [cmdName], 2
   247 00000B0D 7519                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   248 00000B0F B40E                <1>     mov ah, 0Eh ;Set drive to dl
   249 00000B11 CD41                <1>     int 41h 
   250 00000B13 B419                <1>     mov ah, 19h
   251 00000B15 CD41                <1>     int 41h     ;Get current drive
   252 00000B17 38D0                <1>     cmp al, dl  ;If the drive was set, all is well
   253                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000B19 74(D8)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   254                              <1> .badDrive:
   255 00000B1B 488D1535FAFFFF      <1>     lea rdx, badDrv
   256 00000B22 B409                <1>     mov ah, 09h
   257 00000B24 CD41                <1>     int 41h
   258 00000B26 F9                  <1>     stc
   259                              <1>     return
    19                              <2> %%_ret:
    20 00000B27 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   260                              <1> .noDriveSpecified:
   261                              <1> ;Now we set the two FCB's in the command line
   262 00000B28 F60573F5FFFFFF      <1>     test byte [arg1Flg], -1
   263 00000B2F 744D                <1>     jz .fcbArgsDone
   264 00000B31 0FB6056BF5FFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   265 00000B38 488D35FAF5FFFF      <1>     lea rsi, cmdBuffer
   266 00000B3F 4801C6              <1>     add rsi, rax    ;Point to first argument
   267 00000B42 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   268 00000B46 B801290000          <1>     mov eax, 2901h
   269 00000B4B CD41                <1>     int 41h
   270 00000B4D 880551F5FFFF        <1>     mov byte [arg1FCBret], al
   271 00000B53 F6054BF5FFFFFF      <1>     test byte [arg2Flg], -1
   272 00000B5A 7422                <1>     jz .fcbArgsDone
   273 00000B5C 0FB60543F5FFFF      <1>     movzx eax, byte [arg2Off]
   274 00000B63 488D35CFF5FFFF      <1>     lea rsi, cmdBuffer
   275 00000B6A 4801C6              <1>     add rsi, rax    ;Point to first argument
   276 00000B6D 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   277 00000B71 B801290000          <1>     mov eax, 2901h
   278 00000B76 CD41                <1>     int 41h
   279 00000B78 880529F5FFFF        <1>     mov byte [arg2FCBret], al
   280                              <1> .fcbArgsDone:
   281 00000B7E 488D35B4F5FFFF      <1>     lea rsi, cmdBuffer
   282 00000B85 488D1D94F6FFFF      <1>     lea rbx, cmdName
   283 00000B8C B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   284 00000B91 BAFFFF0000          <1>     mov edx, 0FFFFh
   285 00000B96 B5FF                <1>     mov ch, -1
   286 00000B98 CD4F                <1>     int 4Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   287                              <1>             ;        al = 0  if the command should be executed as usual
   288 00000B9A B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   289 00000B9F BAFFFF0000          <1>     mov edx, 0FFFFh
   290 00000BA4 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   291 00000BA6 CD4F                <1>     int 4Fh
   292 00000BA8 741D                <1>     jz .executeInternal
   293                              <1>     ;Here we execute externally and return to the prompt
   294                              <1>     ; as if it was an internal execution
   295 00000BAA 488D3508F5FFFF      <1>     lea rsi, inBuffer ;Point to this built buffer
   296 00000BB1 488D1DF0F4FFFF      <1>     lea rbx, cmdFcb
   297 00000BB8 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   298 00000BBD BAFFFF0000          <1>     mov edx, 0FFFFh
   299 00000BC2 B5FF                <1>     mov ch, -1
   300 00000BC4 CD4F                <1>     int 4Fh 
   301                              <1>     return
    19                              <2> %%_ret:
    20 00000BC6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   302                              <1> .executeInternal:
   303                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   304                              <1> ;rsi points after the command terminator in the command tail
   305 00000BC7 488D1D98F7FFFF      <1>     lea rbx, functionTable
   306                              <1> .nextEntry:
   307 00000BCE 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   308 00000BD1 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   309 00000BD4 743D                <1>     je .external      ;If so, check externally now
   310 00000BD6 380D44F6FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   311 00000BDC 7529                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   312                              <1>     ;Here they have the same length so lets see if the name is the same
   313 00000BDE 56                  <1>     push rsi
   314                              <1>     ;ecx has the length to compare
   315 00000BDF 51                  <1>     push rcx
   316 00000BE0 488D7301            <1>     lea rsi, qword [rbx + 1]
   317 00000BE4 488D3D36F6FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   318 00000BEB F3A6                <1>     rep cmpsb   ;Check the strings are equal
   319 00000BED 59                  <1>     pop rcx
   320 00000BEE 5E                  <1>     pop rsi
   321 00000BEF 7516                <1>     jne .gotoNextEntry
   322                              <1>     ;Here it was found both strings are equal
   323 00000BF1 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   324 00000BF6 480FB71F            <1>     movzx rbx, word [rdi]
   325 00000BFA 488D3DFFF3FFFF      <1>     lea rdi, startLbl
   326 00000C01 4801FB              <1>     add rbx, rdi
   327 00000C04 FFD3                <1>     call rbx    ;Call this function...
   328                              <1>     return  ;... and return
    19                              <2> %%_ret:
    20 00000C06 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   329                              <1> .gotoNextEntry:
   330 00000C07 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   331 00000C0E 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   332 00000C11 EBBB                <1>     jmp short .nextEntry
   333                              <1> 
   334                              <1> .external:
   335                              <1> ;Here we must search the CWD or all path componants before failing
   336                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
   337 00000C13 E925000000          <1>     jmp .dfltErrExit    ;Catch all for now
   338 00000C18 8B0593F4FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   339 00000C1E 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   340 00000C23 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   341 00000C28 3D20202020          <1>     cmp eax, "    " ;Only if we have four spaces do we proceed here
   342 00000C2D 741A                <1>     je .noExt
   343 00000C2F E817000000          <1>     call checkExtensionExec ;ZF=ZE => Executable
   344 00000C34 7507                <1>     jnz .dfltErrExit
   345                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
   346 00000C36 7205                <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
   347                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
   348                              <1>     ;So it is a com or exe that we are searching for for now
   349                              <1>     
   350 00000C38 E900000000          <1>     jmp .dfltErrExit
   351                              <1> .dfltErrExit:
   352 00000C3D 488D1503F8FFFF      <1>     lea rdx, badCmd
   353 00000C44 B409                <1>     mov ah, 09h
   354 00000C46 CD41                <1>     int 41h
   355                              <1>     return
    19                              <2> %%_ret:
    20 00000C48 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   356                              <1> .noExt:
   357                              <1>     ;Here we must search for the first file with a valid extension.
   358                              <1>     ;Use bl as flags. bl[0] => COM found, bl[1] => EXE found, bl[2] => BAT found
   359 00000C49 31DB                <1>     xor ebx, ebx
   360                              <1>     ;If relative path, search CWD. If absolute path, search absolute path.
   361                              <1>     ;If nothing, only then loop through each dir in the path for provided
   362                              <1>     ; pathspec (relative case), or filename (absolute case)
   363                              <1> 
   364                              <1> 
   365                              <1> 
   366                              <1> checkExtensionExec:
   367                              <1> ;Checks the extension field of cmdFcb is .COM, .EXE, .BAT in that order
   368                              <1> ;Returns: ZF=ZE if executable. ZF=NZ if not executable.
   369                              <1> ;         If ZF=ZE and CF=CY => Batch file
   370 00000C4B 8B0560F4FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   371 00000C51 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   372 00000C56 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   373 00000C5B 3D434F4D20          <1>     cmp eax, "COM "
   374                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000C60 74(48)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   375 00000C62 3D45584520          <1>     cmp eax, "EXE "
   376                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000C67 74(48)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   377 00000C69 3D42415420          <1>     cmp eax, "BAT "
   378                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000C6E 75(48)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   379 00000C70 F9                  <1>     stc
   380                              <1>     return
    19                              <2> %%_ret:
    20 00000C71 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   381                              <1> 
   382                              <1> checkAndSetupRedir:
   383                              <1> ;Checks and sets up redir as appropriate
   384                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   385                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   386                              <1> ;Output: ZF=NZ => No redir
   387                              <1> ;        ZF=ZY => Redir
   388                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   389                              <1> ;CF=CY if pipe set or an embedded CR found
   390 00000C72 57                  <1>     push rdi
   391 00000C73 3C3C                <1>     cmp al, "<"
   392 00000C75 740B                <1>     je .inputRedir
   393 00000C77 3C3E                <1>     cmp al, ">"
   394 00000C79 742A                <1>     je .outputRedir
   395 00000C7B 3C7C                <1>     cmp al, "|"
   396 00000C7D 7454                <1>     je .pipeSetup
   397 00000C7F F8                  <1>     clc
   398                              <1> .redirExit:
   399 00000C80 5F                  <1>     pop rdi
   400                              <1>     return
    19                              <2> %%_ret:
    20 00000C81 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   401                              <1> .inputRedir:
   402 00000C82 C60517F4FFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   403 00000C89 488D3D9EF5FFFF      <1>     lea rdi, rdrInFilespec
   404 00000C90 E8070B0000          <1>     call skipSpaces ;Skip spaces between < and the filespec
   405 00000C95 E845000000          <1>     call copyCommandTailItem
   406 00000C9A 72E4                <1>     jc .redirExit
   407 00000C9C E8FB0A0000          <1>     call skipSpaces
   408 00000CA1 30C0                <1>     xor al, al
   409 00000CA3 EBDB                <1>     jmp short .redirExit
   410                              <1> .outputRedir:
   411 00000CA5 C605F5F3FFFF01      <1>     mov byte [redirOut], 1
   412 00000CAC 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   413 00000CAF 7506                <1>     jne .notDouble
   414 00000CB1 FE05EAF3FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   415                              <1> .notDouble:
   416 00000CB7 488D3DBFF5FFFF      <1>     lea rdi, rdrOutFilespec
   417 00000CBE E8D90A0000          <1>     call skipSpaces
   418 00000CC3 E817000000          <1>     call copyCommandTailItem
   419 00000CC8 72B6                <1>     jc .redirExit
   420 00000CCA E8CD0A0000          <1>     call skipSpaces
   421 00000CCF 30C0                <1>     xor al, al
   422 00000CD1 EBAD                <1>     jmp short .redirExit
   423                              <1> .pipeSetup:
   424 00000CD3 C605B6F3FFFFFF      <1>     mov byte [pipeFlag], -1
   425 00000CDA 30C0                <1>     xor al, al
   426 00000CDC F9                  <1>     stc
   427 00000CDD 5F                  <1>     pop rdi
   428                              <1>     return
    19                              <2> %%_ret:
    20 00000CDE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   429                              <1> 
   430                              <1> copyCommandTailItem:
   431                              <1> ;Copies a sentence from the command tail until a terminator is found.
   432                              <1> ;Stores a terminating null in the destination
   433                              <1> ;Input: rsi = Start of the item to copy
   434                              <1> ;       rdi = Location for copy
   435                              <1> ;Output: Sentence copied with a null terminator inserted.
   436                              <1> ; If CF=CY, embedded CR encountered
   437 00000CDF AC                  <1>     lodsb
   438 00000CE0 3C0D                <1>     cmp al, CR
   439 00000CE2 741A                <1>     je .endOfInput
   440 00000CE4 E87F0A0000          <1>     call isALterminator
   441 00000CE9 741A                <1>     jz .exit
   442 00000CEB 3A0532F3FFFF        <1>     cmp al, byte [pathSep]
   443 00000CF1 7412                <1>     je .exit
   444 00000CF3 3A052BF3FFFF        <1>     cmp al, byte [switchChar]
   445 00000CF9 740A                <1>     je .exit
   446 00000CFB AA                  <1>     stosb
   447 00000CFC EBE1                <1>     jmp short copyCommandTailItem
   448                              <1> .endOfInput:
   449 00000CFE E802000000          <1>     call .exit
   450 00000D03 F9                  <1>     stc 
   451                              <1>     return
    19                              <2> %%_ret:
    20 00000D04 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   452                              <1> .exit:
   453 00000D05 30C0                <1>     xor al, al
   454 00000D07 AA                  <1>     stosb
   455                              <1>     return
    19                              <2> %%_ret:
    20 00000D08 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   456                              <1> 
   457                              <1> 
   458                              <1> int4Eh:   ;Interrupt interface for parsing and executing command lines
   459                              <1> ;Input: rsi points to the count byte of a command line
   460 00000D09 4150                <1>     push r8
   461 00000D0B 4151                <1>     push r9
   462 00000D0D B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   463 00000D0F CD41                <1>     int 41h
   464 00000D11 52                  <1>     push rdx    ;Save on the stack
   465 00000D12 488D1DE7F1FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   466 00000D19 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   467 00000D1B CD41                <1>     int 41h
   468 00000D1D 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   469 00000D20 4989D9              <1>     mov r9, rbx
   470 00000D23 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   471 00000D2A B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   472 00000D2F F348A5              <1>     rep movsq   ;Copy command line over
   473                              <1>     ;call doCommandLine
   474 00000D32 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   475 00000D33 B450                <1>     mov ah, 50h ;Set Current PSP
   476 00000D35 CD41                <1>     int 41h
   477 00000D37 4159                <1>     pop r9
   478 00000D39 4158                <1>     pop r8
   479 00000D3B 48CF                <1>     iretq
    15                                  %include "./Source/Utils/COMMAND/Source/cmdFunc.asm"
    16                              <1> dir:
    17 00000D3D C60508F6FFFF00      <1>     mov byte [dirPrnType], 0    ;Clear DIR flags
    18 00000D44 C60502F6FFFF00      <1>     mov byte [dirLineCtr], 0
    19 00000D4B C605FCF5FFFF00      <1>     mov byte [dirFileCtr], 0
    20 00000D52 C605F6F5FFFF00      <1>     mov byte [dirPathOff], 0    
    21 00000D59 C605F0F5FFFFFF      <1>     mov byte [dirVolLbl], -1    ;Mark as no label
    22                              <1>     ;Start by scanning for the switches
    23 00000D60 488D3DD3F3FFFF      <1>     lea rdi, cmdBuffer + 1  ;Goto command line input chars count
    24 00000D67 0FB60F              <1>     movzx ecx, byte [rdi]   ;Get number of chars typed
    25 00000D6A 48FFC7              <1>     inc rdi ;Goto first char typed in
    26 00000D6D 4889FE              <1>     mov rsi, rdi    ;Use rsi as start of buffer counter
    27 00000D70 8A05AEF2FFFF        <1>     mov al, byte [switchChar]   ;Scan for switchchars
    28                              <1> .switchScan:
    29 00000D76 F2AE                <1>     repne scasb ;Scan for a switchchar
    30 00000D78 67E322              <1>     jecxz .switchScanDone
    31 00000D7B 8A07                <1>     mov al, byte [rdi]  ;Get the byte pointed to by rdi
    32 00000D7D 24DF                <1>     and al, 0DFh    ;UC it
    33 00000D7F 3C57                <1>     cmp al, "W" ;Wide print mode?
    34 00000D81 7509                <1>     jne .notWideSw
    35 00000D83 800DC2F5FFFF01      <1>     or byte [dirPrnType], 1 ;Set the correct bit
    36 00000D8A EBEA                <1>     jmp short .switchScan
    37                              <1> .notWideSw:
    38 00000D8C 3C50                <1>     cmp al, "P" ;Pause mode?
    39 00000D8E 0F858D030000        <1>     jne .badParam   ;If a switch other than /P or /W, fail
    40 00000D94 800DB1F5FFFF02      <1>     or byte [dirPrnType], 2 ;Set correct bit
    41 00000D9B EBD9                <1>     jmp short .switchScan
    42                              <1> .switchScanDone:
    43                              <1> ;If no args, only switches, we search CWD
    44                              <1> ;If one arg, search that 
    45                              <1> ;If more than one, fail
    46 00000D9D 488D3D97F3FFFF      <1>     lea rdi, cmdBuffer + 2
    47 00000DA4 4889FE              <1>     mov rsi, rdi
    48 00000DA7 E8F0090000          <1>     call skipSpaces ;Skip leading spaces
    49 00000DAC 4881C603000000      <1>     add rsi, 3  ;Go past the DIR (always three chars)
    50 00000DB3 803E0D              <1>     cmp byte [rsi], CR
    51 00000DB6 7436                <1>     je .eocReached
    52                              <1> .pathSearch:
    53 00000DB8 E8DF090000          <1>     call skipSpaces ;Now skip intermediate spaces to next non-space
    54 00000DBD 8A0561F2FFFF        <1>     mov al, byte [switchChar]   ;Is this a switch?
    55 00000DC3 3806                <1>     cmp byte [rsi], al
    56 00000DC5 741B                <1>     je .pathSearchSwitch    ;If a switch, skip it, find switch terminator
    57 00000DC7 803D81F5FFFF00      <1>     cmp byte [dirPathOff], 0    ;Did we previously get an argument?
    58 00000DCE 0F854D030000        <1>     jne .badParam ;If so, error
    59 00000DD4 4889F0              <1>     mov rax, rsi    ;Else, compute the offset in the cmdBuffer
    60 00000DD7 4829F8              <1>     sub rax, rdi    ;Offset from the cmdBuffer + 2
    61 00000DDA 0402                <1>     add al, 2       ;Make it an offset from cmdBuffer
    62 00000DDC 88056DF5FFFF        <1>     mov byte [dirPathOff], al   ;And save it!
    63                              <1> .pathSearchSwitch:
    64 00000DE2 E84C090000          <1>     call findTerminatorOrEOC
    65 00000DE7 7205                <1>     jc .eocReached
    66 00000DE9 48FFC6              <1>     inc rsi ;Go to next char
    67 00000DEC EBCA                <1>     jmp short .pathSearch
    68                              <1> .eocReached:
    69 00000DEE 803D5AF5FFFF00      <1>     cmp byte [dirPathOff], 0
    70 00000DF5 7405                <1>     je .dirCWD
    71 00000DF7 E925030000          <1>     jmp .badParam   ;Temp measure
    72                              <1> .dirCWD:
    73                              <1>     ;Build current working dir and append a \*.* to it 
    74                              <1>     ;First we search the root for a label
    75 00000DFC 488D3D5AF5FFFF      <1>     lea rdi, dirVolPathBuf
    76 00000E03 488D35C2F4FFFF      <1>     lea rsi, searchSpec ;Will need to create the same X:\ here too
    77 00000E0A E810090000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
    78 00000E0F 880550F5FFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
    79 00000E15 0441                <1>     add al, "A"
    80 00000E17 B43A                <1>     mov ah, ":" ;ax has X: now to store 
    81 00000E19 66AB                <1>     stosw
    82 00000E1B 668906              <1>     mov word [rsi], ax
    83 00000E1E 4881C602000000      <1>     add rsi, 2
    84 00000E25 8A05F8F1FFFF        <1>     mov al, byte [pathSep]
    85 00000E2B AA                  <1>     stosb
    86 00000E2C 8806                <1>     mov byte [rsi], al
    87 00000E2E B82A2E2A00          <1>     mov eax, 002A2E2Ah  ;*.*,0
    88 00000E33 AB                  <1>     stosd
    89 00000E34 B42F                <1>     mov ah, 2Fh ;Get current DTA in rbx
    90 00000E36 CD41                <1>     int 41h 
    91 00000E38 53                  <1>     push rbx    ;Preserve it on the stack
    92 00000E39 488D1578F2FFFF      <1>     lea rdx, cmdFFBlock
    93 00000E40 B41A                <1>     mov ah, 1Ah ;Set DTA to internal ffblock
    94 00000E42 CD41                <1>     int 41h
    95 00000E44 488D1512F5FFFF      <1>     lea rdx, dirVolPathBuf
    96 00000E4B 66B90800            <1>     mov cx, dirVolumeID
    97 00000E4F B44E                <1>     mov ah, 4Eh ;Find first
    98 00000E51 CD41                <1>     int 41h
    99 00000E53 7221                <1>     jc .skipVolLbl
   100 00000E55 488D357AF2FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   101 00000E5C 488D3DEDF4FFFF      <1>     lea rdi, dirVolLbl
   102 00000E63 B90B000000          <1>     mov ecx, 11 ;Get the 11 chars of the volume label
   103                              <1> .dirLblCopy:
   104 00000E68 AC                  <1>     lodsb   ;Get the first char
   105 00000E69 3C00                <1>     cmp al, 0
   106 00000E6B 7409                <1>     je .skipVolLbl
   107 00000E6D 3C2E                <1>     cmp al, "."
   108 00000E6F 7401                <1>     je .dirLblSkipStore
   109 00000E71 AA                  <1>     stosb
   110                              <1> .dirLblSkipStore:
   111 00000E72 FFC9                <1>     dec ecx
   112 00000E74 75F2                <1>     jnz .dirLblCopy
   113                              <1> .skipVolLbl:
   114                              <1> ;Print volume label information now
   115 00000E76 E8F7000000          <1>     call .dirPrintVolInfo
   116 00000E7B 488D3D4DF4FFFF      <1>     lea rdi, searchSpec + 3 ;Go to the fourth char in the field
   117 00000E82 B447                <1>     mov ah, 47h ;Get Current Working Directory
   118 00000E84 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   119 00000E87 8A153FF4FFFF        <1>     mov dl, byte [searchSpec]
   120 00000E8D 80EA40              <1>     sub dl, "@" ;Get 1 based drive letter
   121 00000E90 CD41                <1>     int 41h ;Overrwrite it with the current directory
   122 00000E92 488D3D33F4FFFF      <1>     lea rdi, searchSpec
   123 00000E99 E886080000          <1>     call strlen
   124 00000E9E FFC9                <1>     dec ecx
   125 00000EA0 C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   126 00000EA4 488D152CF8FFFF      <1>     lea rdx, dirMain
   127 00000EAB B409                <1>     mov ah, 09h
   128 00000EAD CD41                <1>     int 41h
   129 00000EAF 4889FA              <1>     mov rdx, rdi    ;Print the current directory we are working on
   130 00000EB2 B409                <1>     mov ah, 09h
   131 00000EB4 CD41                <1>     int 41h
   132 00000EB6 488D1532F5FFFF      <1>     lea rdx, crlf
   133 00000EBD B409                <1>     mov ah, 09h
   134 00000EBF CD41                <1>     int 41h
   135 00000EC1 488D1527F5FFFF      <1>     lea rdx, crlf   ;Add an extra free line
   136 00000EC8 B409                <1>     mov ah, 09h
   137 00000ECA CD41                <1>     int 41h
   138                              <1>     ;Now we search for the files
   139 00000ECC 8A0551F1FFFF        <1>     mov al, byte [pathSep]
   140 00000ED2 38440FFF            <1>     cmp byte [rdi + rcx - 1], al
   141 00000ED6 7405                <1>     je .noAddSlash  ;Deals with special case of root dir
   142 00000ED8 88040F              <1>     mov byte [rdi + rcx], al
   143 00000EDB FFC1                <1>     inc ecx
   144                              <1> .noAddSlash:
   145 00000EDD C7040F2A2E2A00      <1>     mov dword [rdi + rcx], 002A2E2Ah ;and add a *.*,0
   146 00000EE4 4889FA              <1>     mov rdx, rdi    ;Ptr to search for in rdx
   147 00000EE7 B911000000          <1>     mov ecx, dirReadOnly | dirDirectory
   148 00000EEC B44E                <1>     mov ah, 4Eh ;Find first
   149 00000EEE CD41                <1>     int 41h
   150 00000EF0 720B                <1>     jc .dirNoMoreFiles
   151                              <1> .findNext:
   152 00000EF2 E8EF000000          <1>     call .dirPrintFileData  ;Print the file information
   153 00000EF7 B44F                <1>     mov ah, 4Fh
   154 00000EF9 CD41                <1>     int 41h
   155 00000EFB 73F5                <1>     jnc .findNext 
   156                              <1> .dirNoMoreFiles:
   157 00000EFD 5A                  <1>     pop rdx 
   158 00000EFE B41A                <1>     mov ah, 1Ah ;Return back the original DTA
   159 00000F00 CD41                <1>     int 41h
   160 00000F02 F60543F4FFFF01      <1>     test byte [dirPrnType], 1
   161 00000F09 740B                <1>     jz .dirNoEndNewLine
   162 00000F0B 488D15DDF4FFFF      <1>     lea rdx, crlf   ;Only need this for /W
   163 00000F12 B409                <1>     mov ah, 09h
   164 00000F14 CD41                <1>     int 41h
   165                              <1> .dirNoEndNewLine:
   166                              <1>     ;Now we print the number of files and the number of bytes on the disk
   167 00000F16 B908000000          <1>     mov ecx, 8  ;Print 8 spaces
   168 00000F1B B220                <1>     mov dl, " "
   169                              <1> .dirNumOffSpc:
   170 00000F1D B402                <1>     mov ah, 02h
   171 00000F1F CD41                <1>     int 41h
   172 00000F21 FFC9                <1>     dec ecx
   173 00000F23 75F8                <1>     jnz .dirNumOffSpc
   174 00000F25 0FB60522F4FFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   175 00000F2C E81C0A0000          <1>     call printDecimalWord
   176 00000F31 488D15FDF5FFFF      <1>     lea rdx, dirOk
   177 00000F38 B409                <1>     mov ah, 09h
   178 00000F3A CD41                <1>     int 41h
   179 00000F3C 488D15EBF8FFFF      <1>     lea rdx, threeSpc
   180 00000F43 B409                <1>     mov ah, 09h
   181 00000F45 CD41                <1>     int 41h
   182 00000F47 B800360000          <1>     mov eax, 3600h ;Get disk info
   183 00000F4C 8A1513F4FFFF        <1>     mov dl, byte [dirDrv]
   184 00000F52 CD41                <1>     int 41h ;Get disk free space info
   185 00000F54 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   186 00000F57 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   187 00000F5A 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   188 00000F5C F7E1                <1>     mul ecx ;Get bytes per cluster
   189 00000F5E 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   190                              <1>     ;rax now has the number of free bytes on the disk
   191 00000F61 E8E7090000          <1>     call printDecimalWord
   192 00000F66 488D15D2F5FFFF      <1>     lea rdx, bytesOk
   193 00000F6D B409                <1>     mov ah, 09h
   194 00000F6F CD41                <1>     int 41h
   195                              <1>     return
    19                              <2> %%_ret:
    20 00000F71 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   196                              <1> 
   197                              <1> .dirPrintVolInfo:
   198 00000F72 488D1576F4FFFF      <1>     lea rdx, crlf
   199 00000F79 B409                <1>     mov ah, 09h
   200 00000F7B CD41                <1>     int 41h
   201 00000F7D 488D15C6F6FFFF      <1>     lea rdx, volMes
   202 00000F84 B409                <1>     mov ah, 09h
   203 00000F86 CD41                <1>     int 41h
   204 00000F88 8A15CFF3FFFF        <1>     mov dl, byte [dirVolPathBuf]   ;Print the drive letter out
   205 00000F8E B402                <1>     mov ah, 02h
   206 00000F90 CD41                <1>     int 41h
   207 00000F92 803DB6F3FFFFFF      <1>     cmp byte [dirPathOff], -1   ;No volume ID marker
   208 00000F99 7517                <1>     jne .dirVolIDOk
   209 00000F9B 488D15BFF6FFFF      <1>     lea rdx, volNo
   210 00000FA2 B409                <1>     mov ah, 09h
   211 00000FA4 CD41                <1>     int 41h
   212 00000FA6 488D1542F4FFFF      <1>     lea rdx, crlf
   213 00000FAD B409                <1>     mov ah, 09h
   214 00000FAF CD41                <1>     int 41h
   215                              <1>     return
    19                              <2> %%_ret:
    20 00000FB1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   216                              <1> .dirVolIDOk:
   217 00000FB2 488D15A3F6FFFF      <1>     lea rdx, volOk
   218 00000FB9 B409                <1>     mov ah, 09h
   219 00000FBB CD41                <1>     int 41h
   220 00000FBD 488D3D8CF3FFFF      <1>     lea rdi, dirVolLbl
   221 00000FC4 E85B070000          <1>     call strlen
   222 00000FC9 FFC9                <1>     dec ecx
   223 00000FCB C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   224 00000FCF 488D157AF3FFFF      <1>     lea rdx, dirVolLbl
   225 00000FD6 B409                <1>     mov ah, 09h
   226 00000FD8 CD41                <1>     int 41h
   227 00000FDA 488D150EF4FFFF      <1>     lea rdx, crlf
   228 00000FE1 B409                <1>     mov ah, 09h
   229 00000FE3 CD41                <1>     int 41h
   230                              <1>     return
    19                              <2> %%_ret:
    20 00000FE5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   231                              <1> 
   232                              <1> .dirPrintFileData:
   233                              <1> ;Use fcbCmdSpec to build the file name with space
   234                              <1> ;Start by print the name (same for both cases)
   235 00000FE6 488D35E9F0FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   236 00000FED 488D3D14F2FFFF      <1>     lea rdi, fcbCmdSpec
   237 00000FF4 E8FC070000          <1>     call asciiFilenameToFCB
   238 00000FF9 488D1508F2FFFF      <1>     lea rdx, fcbCmdSpec
   239 00001000 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   240 00001005 BB01000000          <1>     mov ebx, 1  ;STDOUT
   241 0000100A B440                <1>     mov ah, 40h ;Write handle
   242 0000100C CD41                <1>     int 41h
   243 0000100E 52                  <1>     push rdx
   244 0000100F B220                <1>     mov dl, " "
   245 00001011 B402                <1>     mov ah, 02h ;Print char
   246 00001013 CD41                <1>     int 41h
   247 00001015 5A                  <1>     pop rdx
   248 00001016 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   249 0000101D B903000000          <1>     mov ecx, 3  ;Print three chars
   250 00001022 BB01000000          <1>     mov ebx, 1  ;STDOUT
   251 00001027 B440                <1>     mov ah, 40h ;Write handle
   252 00001029 CD41                <1>     int 41h
   253 0000102B F6051AF3FFFF01      <1>     test byte [dirPrnType], 1
   254 00001032 0F85A6000000        <1>     jnz .widePrint
   255                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   256                              <1>     ;Now check if a DIR
   257 00001038 F6058EF0FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   258 0000103F 7418                <1>     jz .dirPrintNotDir
   259 00001041 488D1505F5FFFF      <1>     lea rdx, dirLbl
   260 00001048 B409                <1>     mov ah, 09h
   261 0000104A CD41                <1>     int 41h
   262 0000104C 488D15DBF7FFFF      <1>     lea rdx, threeSpc
   263 00001053 B409                <1>     mov ah, 09h
   264 00001055 CD41                <1>     int 41h
   265 00001057 EB4F                <1>     jmp short .dirPrintFileDT
   266                              <1> .dirPrintNotDir:
   267                              <1> ;Here we print the file size
   268 00001059 B220                <1>     mov dl, " "
   269 0000105B B402                <1>     mov ah, 02h
   270 0000105D CD41                <1>     int 41h
   271 0000105F 8B056DF0FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   272 00001065 E854090000          <1>     call getDecimalWord
   273 0000106A 4889CB              <1>     mov rbx, rcx
   274 0000106D 51                  <1>     push rcx
   275 0000106E 480FCB              <1>     bswap rbx
   276 00001071 B908000000          <1>     mov ecx, 8
   277                              <1> .dirPrintFileSizePrep:
   278 00001076 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   279 00001078 7514                <1>     jne .dirPrintFileSize
   280 0000107A B402                <1>     mov ah, 02h
   281 0000107C B220                <1>     mov dl, " "
   282 0000107E CD41                <1>     int 41h
   283 00001080 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   284 00001084 FFC9                <1>     dec ecx
   285 00001086 81F901000000        <1>     cmp ecx, 1
   286 0000108C 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   287                              <1> .dirPrintFileSize:
   288 0000108E 5B                  <1>     pop rbx
   289                              <1> .dirPrintFileSizeLoop:
   290 0000108F 88DA                <1>     mov dl, bl
   291 00001091 B402                <1>     mov ah, 02h
   292 00001093 CD41                <1>     int 41h
   293 00001095 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   294 00001099 FFC9                <1>     dec ecx
   295 0000109B 75F2                <1>     jnz .dirPrintFileSizeLoop
   296 0000109D 488D158AF7FFFF      <1>     lea rdx, threeSpc
   297 000010A4 B409                <1>     mov ah, 09h
   298 000010A6 CD41                <1>     int 41h
   299                              <1> .dirPrintFileDT:
   300 000010A8 B220                <1>     mov dl, " "
   301 000010AA B402                <1>     mov ah, 02h
   302 000010AC CD41                <1>     int 41h
   303 000010AE 0FB7051BF0FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   304 000010B5 E800040000          <1>     call printDate
   305 000010BA 488D1571F7FFFF      <1>     lea rdx, twoSpc
   306 000010C1 B409                <1>     mov ah, 09h
   307 000010C3 CD41                <1>     int 41h
   308 000010C5 0FB70502F0FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   309 000010CC E8FC040000          <1>     call printTime
   310 000010D1 488D1517F3FFFF      <1>     lea rdx, crlf
   311 000010D8 B409                <1>     mov ah, 09h
   312 000010DA CD41                <1>     int 41h
   313 000010DC EB0B                <1>     jmp short .dirPrintNameExit
   314                              <1> .widePrint:
   315                              <1> ;If /W, print name space ext space space space space
   316 000010DE 488D1544F7FFFF      <1>     lea rdx, fourSpc
   317 000010E5 B409                <1>     mov ah, 09h ;Print string
   318 000010E7 CD41                <1>     int 41h
   319                              <1> .dirPrintNameExit:
   320 000010E9 FE055FF2FFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   321 000010EF FE0558F2FFFF        <1>     inc byte [dirLineCtr]
   322 000010F5 803D51F2FFFF17      <1>     cmp byte [dirLineCtr], 23
   323                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 000010FC 7401                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 000010FE C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   324 000010FF 488D156FF4FFFF      <1>     lea rdx, pauseMes
   325 00001106 B409                <1>     mov ah, 09h
   326 00001108 CD41                <1>     int 41h
   327 0000110A B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   328 0000110C CD41                <1>     int 41h
   329 0000110E C60538F2FFFF00      <1>     mov byte [dirLineCtr], 0
   330 00001115 488D15D3F2FFFF      <1>     lea rdx, crlf   ;Force new line
   331 0000111C B409                <1>     mov ah, 09h
   332 0000111E CD41                <1>     int 41h
   333                              <1>     return
    19                              <2> %%_ret:
    20 00001120 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   334                              <1>     
   335                              <1> .badParam:
   336 00001121 488D156CF4FFFF      <1>     lea rdx, badParm
   337 00001128 B409                <1>     mov ah, 09h
   338 0000112A CD41                <1>     int 41h
   339                              <1>     return
    19                              <2> %%_ret:
    20 0000112C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   340                              <1> 
   341                              <1> chdir:
   342 0000112D F6056EEFFFFFFF      <1>     test byte [arg1Flg], -1
   343 00001134 754D                <1>     jnz .changeDir
   344                              <1>     ;Print CWD
   345                              <1> .printCWD:
   346 00001136 E83D050000          <1>     call putCWDInPrompt ;Exactly the same procedure
   347 0000113B E864030000          <1>     call printCRLF
   348                              <1>     return
    19                              <2> %%_ret:
    20 00001140 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   349                              <1> .printDiskCWD:
   350                              <1> ;Print CWD for a specified drive
   351 00001141 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   352 00001145 88D0                <1>     mov al, dl
   353 00001147 0440                <1>     add al, "@" ;Get the UC letter
   354 00001149 B43A                <1>     mov ah, ":"
   355 0000114B 488D3D7AF1FFFF      <1>     lea rdi, searchSpec
   356 00001152 66AB                <1>     stosw   ;Store X:, rdi+=2
   357 00001154 8A05C9EEFFFF        <1>     mov al, byte [pathSep]
   358 0000115A AA                  <1>     stosb   ;Store pathSep, inc rdi
   359 0000115B B447                <1>     mov ah, 47h ;Get Current Working Directory
   360 0000115D 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   361 00001160 CD41                <1>     int 41h
   362 00001162 E8BD050000          <1>     call strlen
   363 00001167 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   364 0000116D B440                <1>     mov ah, 40h ;Write to handle
   365 0000116F BB01000000          <1>     mov ebx, 1  ;STDOUT
   366 00001174 488D1551F1FFFF      <1>     lea rdx, searchSpec
   367 0000117B CD41                <1>     int 41h
   368 0000117D E822030000          <1>     call printCRLF
   369                              <1>     return
    19                              <2> %%_ret:
    20 00001182 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   370                              <1> .changeDir:
   371 00001183 8A051BEFFFFF        <1>     mov al, byte [arg1FCBret]
   372 00001189 3CFF                <1>     cmp al, -1 
   373 0000118B 743C                <1>     je .badDrv  ;IF the drive is good, but FCB name blank, either X: or \ 
   374 0000118D 4180785D20          <1>     cmp byte [r8 + fcb1 + fcb.filename], " "
   375 00001192 7520                <1>     jne .getFQPath
   376                              <1>     ;Now we double check that on the command line we have . or ..
   377 00001194 0FB60508EFFFFF      <1>     movzx eax, byte [arg1Off]
   378 0000119B 488D3597EFFFFF      <1>     lea rsi, cmdBuffer
   379 000011A2 4801C6              <1>     add rsi, rax
   380 000011A5 8A0578EEFFFF        <1>     mov al, byte [pathSep]
   381 000011AB 3806                <1>     cmp byte [rsi], al  ;Is the first char a pathsep?
   382 000011AD 7405                <1>     je .getFQPath
   383 000011AF 803E2E              <1>     cmp byte [rsi], "."
   384 000011B2 758D                <1>     jne .printDiskCWD
   385                              <1>     ;If the path is . or .., its acceptable, else fail
   386                              <1> .getFQPath:
   387 000011B4 E8C6060000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   388 000011B9 721D                <1>     jc .badDir  ;If this returns CF=CY, its a badDir
   389 000011BB 488D150AF1FFFF      <1>     lea rdx, searchSpec
   390 000011C2 B43B                <1>     mov ah, 3Bh ;CHDIR
   391 000011C4 CD41                <1>     int 41h
   392 000011C6 7210                <1>     jc .badDir
   393                              <1>     return
    19                              <2> %%_ret:
    20 000011C8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   394                              <1> 
   395                              <1> .badDrv:
   396 000011C9 488D1587F3FFFF      <1>     lea rdx, badDrv
   397 000011D0 B800090000          <1>     mov eax, 0900h
   398 000011D5 CD41                <1>     int 41h
   399                              <1>     return
    19                              <2> %%_ret:
    20 000011D7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   400                              <1> .badDir:
   401 000011D8 488D1590F4FFFF      <1>     lea rdx, badDir
   402 000011DF B800090000          <1>     mov eax, 0900h
   403 000011E4 CD41                <1>     int 41h
   404                              <1>     return
    19                              <2> %%_ret:
    20 000011E6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   405                              <1> 
   406                              <1> 
   407                              <1> mkdir:
   408 000011E7 F605B4EEFFFFFF      <1>     test byte [arg1Flg], -1
   409 000011EE 744D                <1>     jz .badParams
   410 000011F0 F605AEEEFFFFFF      <1>     test byte [arg2Flg], -1
   411 000011F7 7544                <1>     jnz .badParams
   412                              <1>     ;We have exactly one argument
   413 000011F9 8A05A5EEFFFF        <1>     mov al, byte [arg1FCBret]
   414 000011FF 3CFF                <1>     cmp al, -1 
   415 00001201 742B                <1>     je .badDrv  ;If a drive was specified and was bad, jump
   416 00001203 E877060000          <1>     call buildCommandPath
   417 00001208 7215                <1>     jc .badMake
   418 0000120A 488D15BBF0FFFF      <1>     lea rdx, searchSpec
   419 00001211 B800390000          <1>     mov eax, 3900h  ;MKDIR
   420 00001216 CD41                <1>     int 41h
   421 00001218 7205                <1>     jc .badMake   ;Return if not carry
   422 0000121A B40D                <1>     mov ah, 0Dh
   423 0000121C CD41                <1>     int 41h ;Flush to disk
   424                              <1>     return
    19                              <2> %%_ret:
    20 0000121E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   425                              <1> .badMake:   ;Else, bad make
   426 0000121F 488D155DF4FFFF      <1>     lea rdx, badMD
   427 00001226 B800090000          <1>     mov eax, 0900h
   428 0000122B CD41                <1>     int 41h
   429                              <1>     return
    19                              <2> %%_ret:
    20 0000122D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   430                              <1> .badDrv:
   431 0000122E 488D1522F3FFFF      <1>     lea rdx, badDrv
   432 00001235 B800090000          <1>     mov eax, 0900h
   433 0000123A CD41                <1>     int 41h
   434                              <1>     return
    19                              <2> %%_ret:
    20 0000123C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   435                              <1> .badParams:
   436 0000123D 488D15A7F5FFFF      <1>     lea rdx, badArgs
   437 00001244 B800090000          <1>     mov eax, 0900h
   438 00001249 CD41                <1>     int 41h
   439                              <1>     return
    19                              <2> %%_ret:
    20 0000124B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   440                              <1> 
   441                              <1> rmdir:
   442 0000124C F6054FEEFFFFFF      <1>     test byte [arg1Flg], -1
   443 00001253 744D                <1>     jz .badParams
   444 00001255 F60549EEFFFFFF      <1>     test byte [arg2Flg], -1
   445 0000125C 7544                <1>     jnz .badParams
   446                              <1>     ;We have exactly one argument
   447 0000125E 8A0540EEFFFF        <1>     mov al, byte [arg1FCBret]
   448 00001264 3CFF                <1>     cmp al, -1 
   449 00001266 742B                <1>     je .badDrv  ;If a drive was specified and was bad, jump
   450 00001268 E812060000          <1>     call buildCommandPath
   451 0000126D 7215                <1>     jc .badRemove
   452 0000126F 488D1556F0FFFF      <1>     lea rdx, searchSpec
   453 00001276 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   454 0000127B CD41                <1>     int 41h
   455 0000127D 7205                <1>     jc .badRemove   ;Return if not carry
   456 0000127F B40D                <1>     mov ah, 0Dh
   457 00001281 CD41                <1>     int 41h ;Flush to disk
   458                              <1>     return
    19                              <2> %%_ret:
    20 00001283 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   459                              <1> .badRemove:   ;Else, bad make
   460 00001284 488D1515F4FFFF      <1>     lea rdx, badRD
   461 0000128B B800090000          <1>     mov eax, 0900h
   462 00001290 CD41                <1>     int 41h
   463                              <1>     return
    19                              <2> %%_ret:
    20 00001292 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   464                              <1> .badDrv:
   465 00001293 488D15BDF2FFFF      <1>     lea rdx, badDrv
   466 0000129A B800090000          <1>     mov eax, 0900h
   467 0000129F CD41                <1>     int 41h
   468                              <1>     return
    19                              <2> %%_ret:
    20 000012A1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   469                              <1> .badParams:
   470 000012A2 488D1542F5FFFF      <1>     lea rdx, badArgs
   471 000012A9 B800090000          <1>     mov eax, 0900h
   472 000012AE CD41                <1>     int 41h
   473                              <1>     return
    19                              <2> %%_ret:
    20 000012B0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   474                              <1> copy:
   475                              <1>     return
    19                              <2> %%_ret:
    20 000012B1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   476                              <1> erase:
   477                              <1>     return
    19                              <2> %%_ret:
    20 000012B2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   478                              <1> date:
   479                              <1>     return
    19                              <2> %%_ret:
    20 000012B3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   480                              <1> time:
   481                              <1>     return
    19                              <2> %%_ret:
    20 000012B4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   482                              <1> ctty:
   483                              <1>     return
    19                              <2> %%_ret:
    20 000012B5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   484                              <1> cls:  
   485 000012B6 B800440000          <1>     mov eax, 4400h  ;Get device info
   486 000012BB BB01000000          <1>     mov ebx, 1      ;for handle 1
   487 000012C0 CD41                <1>     int 41h         ;in dx
   488 000012C2 F7C280000000        <1>     test edx, devCharDev
   489 000012C8 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   490 000012CA F7C210000000        <1>     test edx, charDevFastOut
   491 000012D0 743E                <1>     jz .doAnsi
   492                              <1>     ;Test if Int 49h uses Int 30h
   493                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   494                              <1>     ;Int 49h MUST be terminated with a IRETQ, within 1024 bytes
   495 000012D2 B849350000          <1>     mov eax, 3549h  ;Get the vector for interrupt 49h
   496 000012D7 CD41                <1>     int 41h
   497                              <1> .biosCheck:
   498 000012D9 66813BCD30          <1>     cmp word [rbx], 30CDh
   499 000012DE 740C                <1>     je .biosConfirmed
   500 000012E0 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   501 000012E5 7429                <1>     je .doAnsi
   502 000012E7 48FFC3              <1>     inc rbx
   503 000012EA EBED                <1>     jmp short .biosCheck
   504                              <1> .biosConfirmed:
   505                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   506 000012EC B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   507 000012EE 31DB                <1>     xor ebx, ebx
   508 000012F0 CD30                <1>     int 30h
   509 000012F2 B40F                <1>     mov ah, 0Fh ;Get screen mode
   510 000012F4 CD30                <1>     int 30h
   511 000012F6 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   512 000012F9 FECA                <1>     dec dl
   513 000012FB B619                <1>     mov dh, 25  ;Number of rows is standard
   514 000012FD 31C0                <1>     xor eax, eax
   515 000012FF 89C1                <1>     mov ecx, eax
   516 00001301 B707                <1>     mov bh, 7   ;Screen attributes
   517 00001303 B406                <1>     mov ah, 6   ;Scroll
   518 00001305 CD30                <1>     int 30h
   519 00001307 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   520 00001309 B700                <1>     mov bh, 0   ;Page 0
   521 0000130B B402                <1>     mov ah, 2
   522 0000130D CD30                <1>     int 30h
   523                              <1>     return
    19                              <2> %%_ret:
    20 0000130F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   524                              <1> .doAnsi:
   525                              <1> ;If an ANSI driver is not installed, this will simply insert blank lines
   526                              <1> ;4 chars in the ansi routine
   527                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   528                              <1> ; understand ANSI codes
   529 00001310 488D350EF5FFFF      <1>     lea rsi, ansiCls
   530 00001317 B904000000          <1>     mov ecx, 4
   531 0000131C B406                <1>     mov ah, 06h ;Raw char output
   532                              <1> .ansiLp:
   533 0000131E AC                  <1>     lodsb   ;Get the char in 
   534 0000131F 88C2                <1>     mov dl, al
   535 00001321 CD41                <1>     int 41h
   536 00001323 FFC9                <1>     dec ecx
   537 00001325 75F7                <1>     jnz .ansiLp
   538                              <1>     return
    19                              <2> %%_ret:
    20 00001327 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   539                              <1> 
   540                              <1> break:
   541 00001328 F60573EDFFFFFF      <1>     test byte [arg1Flg], -1
   542 0000132F 752D                <1>     jnz .argumentProvided
   543                              <1>     ;Here we just get the status of break
   544 00001331 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   545 00001336 CD41                <1>     int 41h
   546 00001338 88D3                <1>     mov bl, dl
   547 0000133A 488D1570F4FFFF      <1>     lea rdx, breakIs
   548 00001341 B409                <1>     mov ah, 09h
   549 00001343 CD41                <1>     int 41h
   550 00001345 488D1560F4FFFF      <1>     lea rdx, onMes
   551 0000134C 488D0D53F4FFFF      <1>     lea rcx, offMes
   552 00001353 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   553 00001355 480F44D1            <1>     cmovz rdx, rcx
   554 00001359 B409                <1>     mov ah, 09h
   555 0000135B CD41                <1>     int 41h
   556                              <1>     return
    19                              <2> %%_ret:
    20 0000135D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   557                              <1> .argumentProvided:
   558 0000135E 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   559 00001362 AD                  <1>     lodsd   ;Read the word
   560 00001363 89C3                <1>     mov ebx, eax
   561 00001365 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   562 0000136A C1EB10              <1>     shr ebx, 10h     ;Get high word low
   563 0000136D 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   564 00001372 7416                <1>     je .maybeOn
   565 00001374 663D4F46            <1>     cmp ax, "OF"
   566 00001378 7523                <1>     jne .badArgument
   567 0000137A 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   568 0000137F 6681FB4620          <1>     cmp bx, "F "
   569 00001384 7517                <1>     jne .badArgument
   570                              <1>     ;Set off
   571 00001386 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   572 00001388 EB0B                <1>     jmp short .setBreak
   573                              <1> .maybeOn:
   574 0000138A 663D4F4E            <1>     cmp ax, "ON"
   575 0000138E 750D                <1>     jne .badArgument
   576                              <1>     ;Set on
   577 00001390 BA01000000          <1>     mov edx, 1
   578                              <1> .setBreak:
   579 00001395 B801330000          <1>     mov eax, 3301h  ;Set break
   580 0000139A CD41                <1>     int 41h
   581                              <1>     return
    19                              <2> %%_ret:
    20 0000139C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   582                              <1> .badArgument:
   583 0000139D 488D1591F4FFFF      <1>     lea rdx, badOnOff
   584 000013A4 B409                <1>     mov ah, 09h
   585 000013A6 CD41                <1>     int 41h
   586                              <1>     return
    19                              <2> %%_ret:
    20 000013A8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   587                              <1> 
   588                              <1> verify:
   589 000013A9 F605F2ECFFFFFF      <1>     test byte [arg1Flg], -1
   590 000013B0 752D                <1>     jnz .argumentProvided
   591                              <1>     ;Here we just get the status of break
   592 000013B2 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
   593 000013B7 CD41                <1>     int 41h
   594 000013B9 88C3                <1>     mov bl, al
   595 000013BB 488D15F9F3FFFF      <1>     lea rdx, verifyIs
   596 000013C2 B409                <1>     mov ah, 09h
   597 000013C4 CD41                <1>     int 41h
   598 000013C6 488D15DFF3FFFF      <1>     lea rdx, onMes
   599 000013CD 488D0DD2F3FFFF      <1>     lea rcx, offMes
   600 000013D4 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   601 000013D6 480F44D1            <1>     cmovz rdx, rcx
   602 000013DA B409                <1>     mov ah, 09h
   603 000013DC CD41                <1>     int 41h
   604                              <1>     return
    19                              <2> %%_ret:
    20 000013DE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   605                              <1> .argumentProvided:
   606 000013DF 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   607 000013E3 AD                  <1>     lodsd   ;Read the word
   608 000013E4 89C3                <1>     mov ebx, eax
   609 000013E6 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   610 000013EB C1EB10              <1>     shr ebx, 10h     ;Get high word low
   611 000013EE 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   612 000013F3 7416                <1>     je .maybeOn
   613 000013F5 663D4F46            <1>     cmp ax, "OF"
   614 000013F9 751F                <1>     jne .badArgument
   615 000013FB 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   616 00001400 6681FB4620          <1>     cmp bx, "F "
   617 00001405 7513                <1>     jne .badArgument
   618                              <1>     ;Set off
   619 00001407 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
   620 00001409 EB0A                <1>     jmp short .setVerify
   621                              <1> .maybeOn:
   622 0000140B 663D4F4E            <1>     cmp ax, "ON"
   623 0000140F 7509                <1>     jne .badArgument
   624                              <1>     ;Set on
   625 00001411 31C0                <1>     xor eax, eax
   626 00001413 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
   627                              <1> .setVerify:
   628 00001415 B42E                <1>     mov ah, 2Eh  ;Set Verify
   629 00001417 CD41                <1>     int 41h
   630                              <1>     return
    19                              <2> %%_ret:
    20 00001419 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   631                              <1> .badArgument:
   632 0000141A 488D1514F4FFFF      <1>     lea rdx, badOnOff
   633 00001421 B409                <1>     mov ah, 09h
   634 00001423 CD41                <1>     int 41h
   635                              <1>     return
    19                              <2> %%_ret:
    20 00001425 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   636                              <1> 
   637                              <1> rename:
   638                              <1>     return
    19                              <2> %%_ret:
    20 00001426 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   639                              <1> truename:
   640 00001427 F60574ECFFFFFF      <1>     test byte [arg1Flg], -1
   641 0000142E 750C                <1>     jnz .argumentProvided
   642 00001430 488D15B4F3FFFF      <1>     lea rdx, badArgs
   643 00001437 B409                <1>     mov ah, 09h
   644 00001439 CD41                <1>     int 41h
   645                              <1>     return
    19                              <2> %%_ret:
    20 0000143B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   646                              <1> .argumentProvided:
   647 0000143C E83E040000          <1>     call buildCommandPath
   648                              <1>     ;Explicitly call Truename if we remove truename from this function
   649 00001441 488D3D84EEFFFF      <1>     lea rdi, searchSpec
   650 00001448 E8D7020000          <1>     call strlen
   651 0000144D FFC9                <1>     dec ecx ;Don't print terminating null
   652 0000144F 488D1576EEFFFF      <1>     lea rdx, searchSpec
   653 00001456 BB01000000          <1>     mov ebx, 01
   654 0000145B B440                <1>     mov ah, 40h
   655 0000145D CD41                <1>     int 41h
   656 0000145F E840000000          <1>     call printCRLF
   657                              <1>     return
    19                              <2> %%_ret:
    20 00001464 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   658                              <1> 
   659                              <1> 
   660                              <1> version:
   661 00001465 488D1583EFFFFF      <1>     lea rdx, crlf
   662 0000146C B409                <1>     mov ah, 09h
   663 0000146E CD41                <1>     int 41h
   664 00001470 488D15C1F1FFFF      <1>     lea rdx, dosVer
   665 00001477 B409                <1>     mov ah, 09h
   666 00001479 CD41                <1>     int 41h
   667 0000147B B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
   668 0000147D CD41                <1>     int 41h
   669 0000147F 50                  <1>     push rax
   670 00001480 0FB6C0              <1>     movzx eax, al
   671 00001483 E8C5040000          <1>     call printDecimalWord
   672 00001488 B22E                <1>     mov dl, "."
   673 0000148A B402                <1>     mov ah, 02h
   674 0000148C CD41                <1>     int 41h
   675 0000148E 58                  <1>     pop rax
   676 0000148F 0FB6C4              <1>     movzx eax, ah
   677 00001492 E8B6040000          <1>     call printDecimalWord
   678 00001497 488D1551EFFFFF      <1>     lea rdx, crlf
   679 0000149E B409                <1>     mov ah, 09h
   680 000014A0 CD41                <1>     int 41h
   681                              <1>     return
    19                              <2> %%_ret:
    20 000014A2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   682                              <1> 
   683                              <1> launchChild:
   684                              <1> ;We run EXEC on this and the child task will return via applicationReturn
   685                              <1>     return
    19                              <2> %%_ret:
    20 000014A3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   686                              <1> 
    16                                  %include "./Source/Utils/COMMAND/Source/cmdUtils.asm"
    17                              <1> ;Misc functions and subroutines for command.com
    18                              <1> 
    19                              <1> printCRLF:
    20 000014A4 488D1544EFFFFF      <1>     lea rdx, crlf
    21 000014AB BB02000000          <1>     mov ebx, 2
    22 000014B0 B440                <1>     mov ah, 40h ;Print a new line
    23 000014B2 B902000000          <1>     mov ecx, 2  ;Two chars to write
    24 000014B7 CD41                <1>     int 41h
    25                              <1>     return
    19                              <2> %%_ret:
    20 000014B9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    26                              <1> printDate:
    27                              <1> ;Input: eax = Packed Date
    28                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
    29                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
    30                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
    31 000014BA 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    32 000014BC 803D62EBFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    33 000014C3 724A                <1>     jb .usDate
    34 000014C5 0F8781000000        <1>     ja .jpnDate
    35                              <1> ;European: DD/MM/YY
    36 000014CB 251F000000          <1>     and eax, 1Fh    ;Save day bits
    37 000014D0 E8B4000000          <1>     call .printDay
    38                              <1>     breakpoint
    79 000014D5 6687DB              <2> xchg bx, bx
    39 000014D8 488D3546EBFFFF      <1>     lea rsi, ctryData
    40 000014DF 8A560B              <1>     mov dl, byte [rsi + countryStruc.dateSep]
    41 000014E2 B402                <1>     mov ah, 02h
    42 000014E4 CD41                <1>     int 41h
    43                              <1> 
    44 000014E6 89C8                <1>     mov eax, ecx
    45 000014E8 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    46 000014ED C1E805              <1>     shr eax, 5
    47 000014F0 E8AE000000          <1>     call .printMonth
    48                              <1> 
    49 000014F5 8A1535EBFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    50 000014FB B402                <1>     mov ah, 02h
    51 000014FD CD41                <1>     int 41h
    52                              <1> 
    53 000014FF 89C8                <1>     mov eax, ecx
    54 00001501 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    55 00001506 C1E809              <1>     shr eax, 9
    56 00001509 E8A3000000          <1>     call .printYear
    57                              <1>     return
    19                              <2> %%_ret:
    20 0000150E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    58                              <1> .usDate:
    59                              <1> ;US: MM/DD/YY
    60 0000150F 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    61 00001514 C1E805              <1>     shr eax, 5
    62 00001517 E887000000          <1>     call .printMonth
    63                              <1> 
    64 0000151C 8A150EEBFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    65 00001522 B402                <1>     mov ah, 02h
    66 00001524 CD41                <1>     int 41h
    67                              <1> 
    68 00001526 89C8                <1>     mov eax, ecx
    69 00001528 251F000000          <1>     and eax, 1Fh    ;Save day bits
    70 0000152D E857000000          <1>     call .printDay
    71                              <1> 
    72 00001532 8A15F8EAFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    73 00001538 B402                <1>     mov ah, 02h
    74 0000153A CD41                <1>     int 41h
    75                              <1> 
    76 0000153C 89C8                <1>     mov eax, ecx
    77 0000153E 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    78 00001543 C1E809              <1>     shr eax, 9
    79 00001546 E866000000          <1>     call .printYear
    80                              <1>     return
    19                              <2> %%_ret:
    20 0000154B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    81                              <1> .jpnDate:
    82                              <1> ;Japan: YY/MM/DD
    83 0000154C 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    84 00001551 C1E809              <1>     shr eax, 9
    85 00001554 E858000000          <1>     call .printYear
    86                              <1> 
    87 00001559 8A15D1EAFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    88 0000155F B402                <1>     mov ah, 02h
    89 00001561 CD41                <1>     int 41h
    90                              <1> 
    91 00001563 89C8                <1>     mov eax, ecx
    92 00001565 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    93 0000156A C1E805              <1>     shr eax, 5
    94 0000156D E831000000          <1>     call .printMonth
    95                              <1> 
    96 00001572 8A15B8EAFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    97 00001578 B402                <1>     mov ah, 02h
    98 0000157A CD41                <1>     int 41h
    99                              <1> 
   100 0000157C 89C8                <1>     mov eax, ecx
   101 0000157E 251F000000          <1>     and eax, 1Fh    ;Save day bits
   102 00001583 E801000000          <1>     call .printDay
   103                              <1>     return
    19                              <2> %%_ret:
    20 00001588 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   104                              <1> 
   105                              <1> ;Each of these require eax setup correctly
   106                              <1> .printDay:
   107 00001589 51                  <1>     push rcx
   108 0000158A E82F040000          <1>     call getDecimalWord
   109 0000158F 84ED                <1>     test ch, ch ;Do we have an upper digit?
   110 00001591 7502                <1>     jnz .skipSpace
   111 00001593 B120                <1>     mov cl, " "
   112                              <1> .skipSpace:
   113 00001595 88CA                <1>     mov dl, cl
   114 00001597 B402                <1>     mov ah, 02h
   115 00001599 CD41                <1>     int 41h
   116 0000159B 88EA                <1>     mov dl, ch
   117 0000159D B402                <1>     mov ah, 02h
   118 0000159F CD41                <1>     int 41h
   119 000015A1 59                  <1>     pop rcx
   120                              <1>     return
    19                              <2> %%_ret:
    20 000015A2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   121                              <1> .printMonth:
   122 000015A3 51                  <1>     push rcx
   123 000015A4 E815040000          <1>     call getDecimalWord
   124 000015A9 84ED                <1>     test ch, ch ;Do we have an upper digit?
   125 000015AB 75E8                <1>     jnz .skipSpace
   126 000015AD B130                <1>     mov cl, "0"
   127 000015AF EBE4                <1>     jmp short .skipSpace
   128                              <1> .printYear:
   129 000015B1 05BC070000          <1>     add eax, 1980
   130 000015B6 51                  <1>     push rcx
   131 000015B7 E802040000          <1>     call getDecimalWord ;Get unpacked in rcx
   132 000015BC C1E910              <1>     shr ecx, 10h    ;Get high word low
   133 000015BF 88CA                <1>     mov dl, cl  ;Print the upper digit
   134 000015C1 B402                <1>     mov ah, 02h
   135 000015C3 CD41                <1>     int 41h
   136 000015C5 88EA                <1>     mov dl, ch  ;Print the lower digit
   137 000015C7 B402                <1>     mov ah, 02h
   138 000015C9 CD41                <1>     int 41h
   139 000015CB 59                  <1>     pop rcx
   140                              <1>     return
    19                              <2> %%_ret:
    20 000015CC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   141                              <1> 
   142                              <1> 
   143                              <1> 
   144                              <1> printTime:
   145                              <1> ;Input: eax = Packed Time
   146                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   147                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   148                              <1> 
   149 000015CD 89C8                <1>     mov eax, ecx
   150 000015CF 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   151 000015D4 C1E805              <1>     shr eax, 5
   152 000015D7 51                  <1>     push rcx
   153 000015D8 E870030000          <1>     call printDecimalWord
   154 000015DD 59                  <1>     pop rcx
   155                              <1> 
   156 000015DE 8A154EEAFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   157 000015E4 B402                <1>     mov ah, 02h
   158 000015E6 CD41                <1>     int 41h
   159                              <1> 
   160 000015E8 89C8                <1>     mov eax, ecx
   161 000015EA 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   162 000015EF C1E80B              <1>     shr eax, 11
   163 000015F2 803D3DEAFFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   164 000015F9 7406                <1>     jz .ampm
   165 000015FB E84D030000          <1>     call printDecimalWord   ;Just print the hours
   166                              <1>     return
    19                              <2> %%_ret:
    20 00001600 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   167                              <1> .ampm:
   168 00001601 3D0C000000          <1>     cmp eax, 12
   169 00001606 770C                <1>     ja .pm
   170 00001608 E840030000          <1>     call printDecimalWord
   171 0000160D B261                <1>     mov dl, "a"
   172 0000160F B402                <1>     mov ah, 02h
   173 00001611 CD41                <1>     int 41h
   174                              <1>     return
    19                              <2> %%_ret:
    20 00001613 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   175                              <1> .pm:
   176 00001614 2D0C000000          <1>     sub eax, 12
   177 00001619 E82F030000          <1>     call printDecimalWord
   178 0000161E B270                <1>     mov dl, "p"
   179 00001620 B402                <1>     mov ah, 02h
   180 00001622 CD41                <1>     int 41h
   181                              <1>     return
    19                              <2> %%_ret:
    20 00001624 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   182                              <1> 
   183                              <1> putVersionInPrompt:
   184 00001625 488D150CF0FFFF      <1>     lea rdx, dosVer
   185 0000162C B409                <1>     mov ah, 09h ;Print String
   186 0000162E CD41                <1>     int 41h
   187 00001630 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   188 00001632 CD41                <1>     int 41h
   189 00001634 50                  <1>     push rax    ;Save minor version
   190 00001635 E89C000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   191 0000163A E8B4000000          <1>     call printPackedBCD ;Print al
   192 0000163F B22E                <1>     mov dl, "."
   193 00001641 B402                <1>     mov ah, 02h
   194 00001643 CD41                <1>     int 41h
   195 00001645 58                  <1>     pop rax
   196 00001646 88E0                <1>     mov al, ah  ;Get the minor version low
   197 00001648 E889000000          <1>     call hexToBCD
   198 0000164D E8A1000000          <1>     call printPackedBCD
   199                              <1>     return
    19                              <2> %%_ret:
    20 00001652 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   200                              <1> putEscInPrompt:
   201 00001653 B21B                <1>     mov dl, ESC
   202 00001655 EB1C                <1>     jmp short outChar
   203                              <1> 
   204                              <1> putMoneyInPrompt:
   205 00001657 B224                <1>     mov dl, "$"
   206 00001659 EB18                <1>     jmp short outChar
   207                              <1> 
   208                              <1> putEquInPrompt:
   209 0000165B B23D                <1>     mov dl, "="
   210 0000165D EB14                <1>     jmp short outChar
   211                              <1> 
   212                              <1> putPipeInPrompt:
   213 0000165F B27C                <1>     mov dl, "|"
   214 00001661 EB10                <1>     jmp short outChar
   215                              <1> 
   216                              <1> putGTinPrompt:
   217 00001663 B23E                <1>     mov dl, ">"
   218 00001665 EB0C                <1>     jmp short outChar
   219                              <1> 
   220                              <1> putLTinPrompt:
   221 00001667 B23C                <1>     mov dl, "<"
   222 00001669 EB08                <1>     jmp short outChar
   223                              <1> 
   224                              <1> putDriveInPrompt:
   225 0000166B B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   226 0000166D CD41                <1>     int 41h
   227 0000166F 0441                <1>     add al, "A" ;Convert to letter
   228 00001671 88C2                <1>     mov dl, al
   229                              <1> outChar:
   230 00001673 B402                <1>     mov ah, 02h ;Echo to STDOUT
   231 00001675 CD41                <1>     int 41h
   232                              <1>     return
    19                              <2> %%_ret:
    20 00001677 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   233                              <1> putCWDInPrompt:
   234 00001678 488D3DCCE9FFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   235 0000167F B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   236 00001681 CD41                <1>     int 41h
   237 00001683 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   238 00001685 FEC2                <1>     inc dl
   239 00001687 0441                <1>     add al, "A" ;Convert to letter
   240 00001689 B43A                <1>     mov ah, ":"
   241 0000168B 66AB                <1>     stosw   ;Store X:, rdi+=2
   242 0000168D 8A0590E9FFFF        <1>     mov al, byte [pathSep]
   243 00001693 AA                  <1>     stosb   ;Store pathSep, inc rdi
   244 00001694 B447                <1>     mov ah, 47h ;Get Current Working Directory
   245 00001696 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   246 00001699 CD41                <1>     int 41h
   247 0000169B E884000000          <1>     call strlen
   248 000016A0 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   249                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   250 000016A6 B440                <1>     mov ah, 40h ;Write to handle
   251 000016A8 BB01000000          <1>     mov ebx, 1  ;STDOUT
   252 000016AD 488D1597E9FFFF      <1>     lea rdx, currDirStr
   253 000016B4 CD41                <1>     int 41h
   254                              <1>     return
    19                              <2> %%_ret:
    20 000016B6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   255                              <1> 
   256                              <1> BCDtoHex:
   257                              <1> ;Converts a BCD value to a Hex byte
   258                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   259 000016B7 51                  <1>     push rcx
   260 000016B8 0FB6C0              <1>     movzx eax, al   ;Zero extend
   261 000016BB 89C1                <1>     mov ecx, eax    ;Save al in ecx
   262 000016BD 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   263 000016C2 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   264 000016C8 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   265                              <1> .bth:
   266 000016CB 050A000000          <1>     add eax, 10
   267 000016D0 FFC9                <1>     dec ecx
   268 000016D2 75F7                <1>     jnz .bth
   269 000016D4 59                  <1>     pop rcx
   270 000016D5 C3                  <1>     ret
   271                              <1> 
   272                              <1> hexToBCD:
   273                              <1> ;Converts a Hex byte into two BCD digits
   274                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   275 000016D6 51                  <1>     push rcx
   276 000016D7 0FB6C0              <1>     movzx eax, al   ;Zero extend
   277 000016DA 31C9                <1>     xor ecx, ecx
   278                              <1> .htb0:
   279 000016DC 3D0A000000          <1>     cmp eax, 10
   280 000016E1 7209                <1>     jb .htb1
   281 000016E3 2D0A000000          <1>     sub eax, 10
   282 000016E8 FFC1                <1>     inc ecx
   283 000016EA EBF0                <1>     jmp short .htb0
   284                              <1> .htb1:
   285 000016EC C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   286 000016EF 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   287 000016F1 59                  <1>     pop rcx
   288 000016F2 C3                  <1>     ret
   289                              <1> 
   290                              <1> printPackedBCD:
   291                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   292                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   293                              <1> ;Preserves all registers
   294 000016F3 50                  <1>     push rax
   295 000016F4 52                  <1>     push rdx
   296 000016F5 88C4                <1>     mov ah, al
   297 000016F7 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   298 000016F9 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   299 000016FC 7508                <1>     jnz .upperNybble
   300 000016FE B220                <1>     mov dl, " "
   301 00001700 B402                <1>     mov ah, 02h
   302 00001702 CD41                <1>     int 41h
   303 00001704 EB0E                <1>     jmp short .lowerNybble
   304                              <1> .upperNybble:
   305 00001706 50                  <1>     push rax
   306 00001707 C0EC04              <1>     shr ah, 4
   307 0000170A 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   308 0000170D 88E2                <1>     mov dl, ah
   309 0000170F B402                <1>     mov ah, 02h ;Print DL
   310 00001711 CD41                <1>     int 41h
   311 00001713 58                  <1>     pop rax
   312                              <1> .lowerNybble:
   313 00001714 0430                <1>     add al, "0"
   314 00001716 88C2                <1>     mov dl, al
   315 00001718 B402                <1>     mov ah, 02h ;Print DL
   316 0000171A CD41                <1>     int 41h
   317 0000171C 5A                  <1>     pop rdx
   318 0000171D 58                  <1>     pop rax
   319                              <1>     return
    19                              <2> %%_ret:
    20 0000171E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   320                              <1> 
   321                              <1> getCurrentDrive:
   322                              <1> ;Returns the current drive in al
   323 0000171F B419                <1>     mov ah, 19h
   324 00001721 CD41                <1>     int 41h
   325                              <1>     return
    19                              <2> %%_ret:
    20 00001723 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   326                              <1> 
   327                              <1> strlen:
   328                              <1> ;Gets the length of a ASCIIZ string
   329                              <1> ;Input: rdi = Source buffer
   330                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   331 00001724 50                  <1>     push rax
   332 00001725 57                  <1>     push rdi
   333 00001726 30C0                <1>     xor al, al
   334 00001728 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   335 0000172A FFC9                <1>     dec ecx ;rcx = -1
   336 0000172C F2AE                <1>     repne scasb
   337 0000172E F7D1                <1>     not ecx
   338 00001730 5F                  <1>     pop rdi
   339 00001731 58                  <1>     pop rax
   340                              <1>     return
    19                              <2> %%_ret:
    20 00001732 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   341                              <1> 
   342                              <1> findTerminatorOrEOC:
   343                              <1> ;Advances rsi to the next string terminator char or the next End of command
   344                              <1> ; char
   345                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   346                              <1> ;If a end of command char found, also sets CF
   347 00001733 AC                  <1>     lodsb
   348 00001734 3C0D                <1>     cmp al, CR
   349 00001736 7419                <1>     je .endOfInput
   350 00001738 E82B000000          <1>     call isALterminator
   351 0000173D 7419                <1>     jz .exit
   352 0000173F 3A05DEE8FFFF        <1>     cmp al, byte [pathSep]
   353 00001745 7411                <1>     je .exit
   354 00001747 3A05D7E8FFFF        <1>     cmp al, byte [switchChar]
   355 0000174D 7409                <1>     je .exit
   356 0000174F EBE2                <1>     jmp short findTerminatorOrEOC
   357                              <1> .endOfInput:
   358 00001751 E802000000          <1>     call .exit
   359 00001756 F9                  <1>     stc 
   360                              <1>     return
    19                              <2> %%_ret:
    20 00001757 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   361                              <1> .exit:
   362 00001758 48FFCE              <1>     dec rsi ;Point to the terminating char
   363                              <1>     return
    19                              <2> %%_ret:
    20 0000175B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   364                              <1> 
   365                              <1> findTerminator:
   366                              <1> ;Advances rsi to the next string terminator char
   367                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   368 0000175C AC                  <1>     lodsb
   369 0000175D E806000000          <1>     call isALterminator
   370 00001762 75F8                <1>     jnz findTerminator
   371 00001764 48FFCE              <1>     dec rsi
   372                              <1>     return
    19                              <2> %%_ret:
    20 00001767 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   373                              <1> isALterminator:
   374                              <1> ;Returns: ZF=NZ if al is not a terminator (Not including CR)
   375                              <1> ;         ZF=ZY if al is a terminator
   376 00001768 3C20                <1>     cmp al, " "
   377                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000176A 74(67)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   378 0000176C 3C3B                <1>     cmp al, ";"
   379                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000176E 74(67)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   380 00001770 3C3D                <1>     cmp al, "="
   381                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001772 74(67)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   382 00001774 3C2C                <1>     cmp al, ","
   383                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001776 74(67)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   384 00001778 3C09                <1>     cmp al, TAB
   385                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000177A 74(67)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   386 0000177C 3C0A                <1>     cmp al, LF
   387                              <1>     return
    19                              <2> %%_ret:
    20 0000177E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   388                              <1> 
   389                              <1> findEndOfCommand:
   390                              <1> ;Moves rsi to the | or CR that terminates this command
   391 0000177F AC                  <1>     lodsb
   392 00001780 E806000000          <1>     call isALEndOfCommand
   393 00001785 75F8                <1>     jnz findEndOfCommand
   394 00001787 48FFCE              <1>     dec rsi
   395                              <1>     return
    19                              <2> %%_ret:
    20 0000178A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   396                              <1> isALEndOfCommand:
   397 0000178B 3C7C                <1>     cmp al, "|"
   398                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000178D 74(8A)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   399 0000178F 3C0D                <1>     cmp al, CR
   400                              <1>     return
    19                              <2> %%_ret:
    20 00001791 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   401                              <1> 
   402                              <1> scanForRedir:
   403                              <1> ;Returns: AL = 0 => No redirection, terminate with CR
   404                              <1> ;         AL = 1 => Redirection, type <
   405                              <1> ;         AL = 10 => Redir, type >
   406                              <1> ;         AL = 20 => Redir, type >>
   407                              <1> ;If multiple redirs found, the last one of that type counts.
   408 00001792 56                  <1>     push rsi
   409 00001793 55                  <1>     push rbp
   410 00001794 30E4                <1>     xor ah, ah
   411                              <1> .lp:
   412 00001796 AC                  <1>     lodsb
   413 00001797 3C3E                <1>     cmp al, ">"
   414                              <1> .exit:
   415 00001799 5D                  <1>     pop rbp
   416 0000179A 5E                  <1>     pop rsi
   417                              <1>     return
    19                              <2> %%_ret:
    20 0000179B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   418                              <1> 
   419                              <1> 
   420                              <1> skipSpaces:
   421                              <1> ;Also skips tabs
   422                              <1> ;Input: rsi must point to the start of the data string
   423                              <1> ;Output: rsi points to the first non-space char
   424 0000179C 803E20              <1>     cmp byte [rsi], " "
   425 0000179F 7405                <1>     je .skip    ;If equal to a space, skip it
   426 000017A1 803E09              <1>     cmp byte [rsi], TAB
   427                              <1>     retne   ;If not equal to a tab or space, return
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000017A4 75(9B)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   428                              <1> .skip:
   429 000017A6 48FFC6              <1>     inc rsi
   430 000017A9 EBF1                <1>     jmp short skipSpaces
   431                              <1> 
   432                              <1> printPrompt:
   433 000017AB 66813D6DE8FFFFFFFF  <1>     cmp word [promptPtr], -1
   434 000017B4 750B                <1>     jne .validPrompt
   435                              <1>     ;Here we print the default prompt
   436 000017B6 E8BDFEFFFF          <1>     call putCWDInPrompt
   437 000017BB E8A3FEFFFF          <1>     call putGTinPrompt
   438                              <1>     return
    19                              <2> %%_ret:
    20 000017C0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   439                              <1> .validPrompt:
   440                              <1>     return
    19                              <2> %%_ret:
    20 000017C1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   441                              <1> 
   442                              <1> clearCommandState:
   443                              <1> ;Clears the command state
   444 000017C2 488D3DD5E8FFFF      <1>     lea rdi, cmdStatePtr
   445 000017C9 B90A000000          <1>     mov ecx, cmdStateL
   446 000017CE 31C0                <1>     xor eax, eax
   447 000017D0 F3AA                <1>     rep stosb
   448                              <1>     return
    19                              <2> %%_ret:
    20 000017D2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   449                              <1> 
   450                              <1> clearCommandLineState:
   451                              <1> ;Clears the command line state after a 0Dh encountered
   452 000017D3 488D3DB4E8FFFF      <1>     lea rdi, cmdLineStatePtr
   453 000017DA B91A000000          <1>     mov ecx, cmdLineStateL
   454 000017DF 31C0                <1>     xor eax, eax
   455 000017E1 F3AA                <1>     rep stosb
   456                              <1>     return
    19                              <2> %%_ret:
    20 000017E3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   457                              <1> 
   458                              <1> asciiToFCB:
   459                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   460                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   461                              <1> ;Also doesn't check if chars are valid
   462                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   463                              <1> ;Name is space padded.
   464                              <1> ;Input: rsi = ASCII string buffer
   465                              <1> ;       rdi = FCB name buffer
   466                              <1> ;Output: al = Char that terminated the source string 
   467 000017E4 53                  <1>     push rbx    
   468 000017E5 57                  <1>     push rdi
   469 000017E6 B90B000000          <1>     mov ecx, 11
   470 000017EB B020                <1>     mov al, " "
   471 000017ED F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   472 000017EF 5F                  <1>     pop rdi
   473 000017F0 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   474 000017F3 EB1D                <1>     jmp short asciiFilenameToFCB.processName
   475                              <1> asciiFilenameToFCB:
   476                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   477                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   478                              <1> ;Also doesn't check if chars are valid
   479                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   480                              <1> ;Name is space padded.
   481                              <1> ;Input: rsi = ASCII string buffer
   482                              <1> ;       rdi = FCB name buffer
   483                              <1> ;Output: al = Char that terminated the source string 
   484 000017F5 53                  <1>     push rbx    
   485 000017F6 57                  <1>     push rdi
   486 000017F7 B90B000000          <1>     mov ecx, 11
   487 000017FC B020                <1>     mov al, " "
   488 000017FE F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   489 00001800 5F                  <1>     pop rdi
   490 00001801 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   491                              <1>     ;Preprocess for Dir Searches
   492 00001804 803E2E              <1>     cmp byte [rsi], "."
   493 00001807 7509                <1>     jne .processName
   494 00001809 A4                  <1>     movsb   ;Store the first dot
   495 0000180A 803E2E              <1>     cmp byte [rsi], "."
   496 0000180D 752C                <1>     jne .exitBadChar
   497 0000180F A4                  <1>     movsb
   498 00001810 EB29                <1>     jmp short .exitBadChar
   499                              <1> .processName:
   500 00001812 AC                  <1>     lodsb   ;Get the char in al
   501 00001813 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   502 00001815 7426                <1>     jz .exit
   503 00001817 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   504 00001819 7407                <1>     je .extSpace
   505 0000181B 3C2E                <1>     cmp al, "."
   506 0000181D 740C                <1>     je .ext
   507 0000181F AA                  <1>     stosb   ;Store the char
   508 00001820 EBF0                <1>     jmp short .processName
   509                              <1> .extSpace:
   510                              <1> ;Now we scan for a period in the name
   511 00001822 AC                  <1>     lodsb   ;Get a char and increase rsi
   512 00001823 84C0                <1>     test al, al
   513 00001825 7416                <1>     jz .exit
   514 00001827 3C2E                <1>     cmp al, "."     ;If al is not a period...
   515 00001829 75F7                <1>     jne .extSpace   ; keep searching
   516                              <1> .ext:
   517 0000182B 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   518                              <1> .processExt:
   519 0000182F AC                  <1>     lodsb
   520 00001830 84C0                <1>     test al, al
   521 00001832 7409                <1>     jz .exit
   522 00001834 3C20                <1>     cmp al, " "
   523 00001836 7405                <1>     je .exit
   524 00001838 AA                  <1>     stosb
   525 00001839 EBF4                <1>     jmp short .processExt
   526                              <1> .exitBadChar:
   527 0000183B 30C0                <1>     xor al, al  ;Return a null terminator
   528                              <1> .exit:
   529 0000183D 5B                  <1>     pop rbx
   530                              <1>     return
    19                              <2> %%_ret:
    20 0000183E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   531                              <1> 
   532                              <1> FCBToAsciiz:
   533                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   534                              <1> ;Name is space padded too
   535                              <1> ;Input: rsi = FCB name buffer
   536                              <1> ;       rdi = ASCIIZ string buffer
   537 0000183F B908000000          <1>     mov ecx, 8
   538 00001844 F3A4                <1>     rep movsb   ;Move the name over
   539                              <1> .scanNameSpace:
   540 00001846 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   541 0000184A 750D                <1>     jne .ext
   542 0000184C 48FFCF              <1>     dec rdi
   543 0000184F FFC1                <1>     inc ecx
   544 00001851 81F908000000        <1>     cmp ecx, 8
   545 00001857 72ED                <1>     jb .scanNameSpace
   546                              <1> .ext:
   547 00001859 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   548 0000185E 7506                <1>     jne .validExt
   549 00001860 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   550 00001864 7415                <1>     je .exit
   551                              <1> .validExt:
   552 00001866 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   553 00001868 AA                  <1>     stosb
   554 00001869 B903000000          <1>     mov ecx, 3
   555 0000186E F3A4                <1>     rep movsb   ;Move the three extension chars over
   556                              <1> .scanExtSpace:
   557 00001870 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   558 00001874 7505                <1>     jne .exit
   559 00001876 48FFCF              <1>     dec rdi
   560 00001879 EBF5                <1>     jmp short .scanExtSpace
   561                              <1> .exit:
   562 0000187B 31C0                <1>     xor eax, eax
   563 0000187D AA                  <1>     stosb   ;Store a null at the end
   564                              <1>     return
    19                              <2> %%_ret:
    20 0000187E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   565                              <1> 
   566                              <1> buildCommandPath:
   567                              <1> ;Based on the first argument on the command line
   568                              <1> ; will build a full ASCIIZ path in searchSpec to the file/dir specified
   569                              <1>     ;If this is a relative path, will handle correctly (tho unnecessary)
   570 0000187F 0FB6051DE8FFFF      <1>     movzx eax, byte [arg1Off]
   571 00001886 488D35ACE8FFFF      <1>     lea rsi, cmdBuffer
   572 0000188D 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   573 00001890 8A3D8DE7FFFF        <1>     mov bh, byte [pathSep]
   574 00001896 B33A                <1>     mov bl, ":"
   575 00001898 383E                <1>     cmp byte [rsi], bh  ;Is the first char relative to root?
   576 0000189A 7458                <1>     je .absoluteCurrent
   577 0000189C 66395E01            <1>     cmp word [rsi + 1], bx    ;This checks if absolute or relative
   578 000018A0 746D                <1>     je .absolutePath
   579 000018A2 385E01              <1>     cmp byte [rsi + 1], bl  ;Check if a drive separator
   580 000018A5 7409                <1>     je .relativeGiven
   581                              <1> ;No drive letter given, must get Current Drive
   582 000018A7 E873FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   583 000018AC 0441                <1>     add al, "A"
   584 000018AE EB0B                <1>     jmp short .relativeCommon
   585                              <1> .relativeGiven:
   586                              <1> ;Drive letter pointed to by AL
   587 000018B0 8A06                <1>     mov al, byte [rsi]  ;Get drive letter in al
   588 000018B2 24DF                <1>     and al, 0DFh    ;Convert to UC
   589 000018B4 4881C602000000      <1>     add rsi, 2  ;Skip the given drive letter and the colon
   590                              <1> .relativeCommon:
   591                              <1>     ;al has drive letter
   592 000018BB 88C2                <1>     mov dl, al  ;Save drive letter in dl
   593 000018BD 80EA40              <1>     sub dl, "@" ;Get 1 based drive number in dl
   594 000018C0 B43A                <1>     mov ah, ":" ;Get the colon in too
   595 000018C2 488D3D03EAFFFF      <1>     lea rdi, searchSpec ;Start building our search path here
   596 000018C9 66AB                <1>     stosw   ;Store X:
   597 000018CB 8A0552E7FFFF        <1>     mov al, byte [pathSep]
   598 000018D1 AA                  <1>     stosb   ;Store pathSep
   599 000018D2 56                  <1>     push rsi    ;Save user input string
   600 000018D3 4889FE              <1>     mov rsi, rdi    ;Put the current directory here for this drive
   601 000018D6 B447                <1>     mov ah, 47h ;Get Current Working Directory, dl has drive number
   602 000018D8 CD41                <1>     int 41h ;Won't fail as drive letter in dl confirmed ok
   603 000018DA 5E                  <1>     pop rsi
   604                              <1>     ;Now want to find terminating null
   605 000018DB 30C0                <1>     xor al, al
   606 000018DD 31C9                <1>     xor ecx, ecx
   607 000018DF FFC9                <1>     dec ecx
   608 000018E1 F2AE                <1>     repne scasb ;Search for the terminating null
   609 000018E3 48FFCF              <1>     dec rdi ;Go back one once found
   610 000018E6 8A0537E7FFFF        <1>     mov al, byte [pathSep]
   611 000018EC 3847FF              <1>     cmp byte [rdi - 1], al
   612 000018EF 7425                <1>     je .buildPath ;If the previous char is a pathsep, skip storing another
   613 000018F1 AA                  <1>     stosb   ;Store the pathsep
   614 000018F2 EB22                <1>     jmp short .buildPath  ;Now we copy the user string over and good to go
   615                              <1> .absoluteCurrent:
   616 000018F4 E826FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   617 000018F9 0441                <1>     add al, "A"
   618 000018FB B43A                <1>     mov ah, ":" ;ax has X: now to store 
   619 000018FD 488D3DC8E9FFFF      <1>     lea rdi, searchSpec
   620 00001904 66AB                <1>     stosw
   621 00001906 8A0517E7FFFF        <1>     mov al, byte [pathSep]
   622 0000190C AA                  <1>     stosb
   623 0000190D EB07                <1>     jmp short .buildPath
   624                              <1> .absolutePath:
   625 0000190F 488D3DB6E9FFFF      <1>     lea rdi, searchSpec
   626                              <1> .buildPath:
   627 00001916 E8C4F3FFFF          <1>     call copyCommandTailItem    ;Terminates with a 0 for free
   628 0000191B 488D35AAE9FFFF      <1>     lea rsi, searchSpec
   629 00001922 488D3DA3E9FFFF      <1>     lea rdi, searchSpec
   630 00001929 B460                <1>     mov ah, 60h ;Truename it to avoid issues
   631 0000192B CD41                <1>     int 41h
   632                              <1>     retc    ;Return if an error with CF=CY
    63                              <2> cret c
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 0000192D 7301                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 0000192F C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   633                              <1>     ;Here we do one final check to ensure we dont end up with a A: but A:"\"
   634 00001930 30C0                <1>     xor al, al
   635 00001932 31C9                <1>     xor ecx, ecx
   636 00001934 FFC9                <1>     dec ecx
   637 00001936 F2AE                <1>     repne scasb
   638 00001938 48FFCF              <1>     dec rdi ;Go back to the final non-null char
   639 0000193B 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is the final non-null char a colon?
   640 0000193F 750A                <1>     jne .okExit   ;Return if not
   641 00001941 31C0                <1>     xor eax, eax
   642 00001943 8A05DAE6FFFF        <1>     mov al, byte [pathSep]  ;IF it is, insert a pathsep
   643 00001949 66AB                <1>     stosw   ;Store the terminating 0 after the pathsep
   644                              <1> .okExit:
   645 0000194B F8                  <1>     clc
   646                              <1>     return
    19                              <2> %%_ret:
    20 0000194C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   647                              <1> printDecimalWord:
   648                              <1> ;Takes qword in rax and print it's decimal representation
   649                              <1> ;Takes the qword in eax and prints its decimal representation
   650 0000194D 31C9                <1>     xor ecx, ecx
   651 0000194F 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   652 00001951 85C0                <1>     test eax, eax
   653 00001953 750C                <1>     jnz .notZero
   654 00001955 B930000000          <1>     mov ecx, "0"
   655 0000195A BD01000000          <1>     mov ebp, 1  ;Print one digit
   656 0000195F EB3E                <1>     jmp short .dpfb2
   657                              <1> .notZero:
   658 00001961 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   659 00001963 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   660                              <1> .dpfb0:
   661 00001968 FFC5                <1>     inc ebp
   662 0000196A 81FD08000000        <1>     cmp ebp, 8
   663 00001970 7206                <1>     jb .dpfb00
   664 00001972 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   665 00001976 EB04                <1>     jmp short .dpfb01
   666                              <1> .dpfb00:
   667 00001978 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   668                              <1> .dpfb01:
   669 0000197C 31D2                <1>     xor edx, edx
   670 0000197E 48F7F6              <1>     div rsi
   671 00001981 80C230              <1>     add dl, '0'
   672 00001984 80FA39              <1>     cmp dl, '9'
   673 00001987 7603                <1>     jbe .dpfb1
   674 00001989 80C207              <1>     add dl, 'A'-'0'-10
   675                              <1> .dpfb1:
   676 0000198C 81FD08000000        <1>     cmp ebp, 8
   677 00001992 7204                <1>     jb .dpfb10
   678 00001994 88D3                <1>     mov bl, dl ;Add the bottom bits
   679 00001996 EB02                <1>     jmp short .dpfb11
   680                              <1> .dpfb10:
   681 00001998 88D1                <1>     mov cl, dl    ;Save remainder byte
   682                              <1> .dpfb11:
   683 0000199A 4885C0              <1>     test rax, rax
   684 0000199D 75C9                <1>     jnz .dpfb0
   685                              <1> .dpfb2:
   686 0000199F 81FD08000000        <1>     cmp ebp, 8
   687 000019A5 7208                <1>     jb .dpfb20
   688 000019A7 88DA                <1>     mov dl, bl
   689 000019A9 48C1EB08            <1>     shr rbx, 8
   690 000019AD EB06                <1>     jmp short .dpfb21
   691                              <1> .dpfb20:
   692 000019AF 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   693 000019B1 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   694                              <1> .dpfb21:
   695 000019B5 B402                <1>     mov ah, 02h
   696 000019B7 CD41                <1>     int 41h
   697 000019B9 FFCD                <1>     dec ebp
   698 000019BB 75E2                <1>     jnz .dpfb2
   699                              <1>     return
    19                              <2> %%_ret:
    20 000019BD C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   700                              <1> 
   701                              <1> getDecimalWord:
   702                              <1> ;Works on MAX A dword in eax
   703                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   704 000019BE 31C9                <1>     xor ecx, ecx
   705 000019C0 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   706 000019C2 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   707                              <1> .dpfb0:
   708 000019C7 FFC5                <1>     inc ebp
   709 000019C9 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   710 000019CD 31D2                <1>     xor edx, edx
   711 000019CF 48F7F3              <1>     div rbx
   712 000019D2 80C230              <1>     add dl, '0'
   713 000019D5 80FA39              <1>     cmp dl, '9'
   714 000019D8 7603                <1>     jbe .dpfb1
   715 000019DA 80C207              <1>     add dl, 'A'-'0'-10
   716                              <1> .dpfb1:
   717 000019DD 88D1                <1>     mov cl, dl    ;Save remainder byte
   718 000019DF 4885C0              <1>     test rax, rax
   719 000019E2 75E3                <1>     jnz .dpfb0
   720                              <1>     return
    19                              <2> %%_ret:
    20 000019E4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    17                                  %include "./Source/Utils/COMMAND/Source/int44h.asm"
    18                              <1> critErrorHandler:   ;Int 44h
    19                              <1> ;User Stack in usage here, must be swapped to before this is called
    20                              <1> ;Entered with:  
    21                              <1> ;               AH = Critical Error Bitfield
    22                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    23                              <1> ;               Bit 6 - Reserved
    24                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    25                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    26                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    27                              <1> ;               Bits [2-1] = Affected Disk Error
    28                              <1> ;                     0 0   DOS area
    29                              <1> ;                     0 1   FAT area
    30                              <1> ;                     1 0   Directory area
    31                              <1> ;                     1 1   Data area
    32                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    33                              <1> ;               AL  = Failing drive number if AH[7] = 0
    34                              <1> ;               DIL = Error code for errorMsg
    35                              <1> ;               RSI = EA of Device Header for which device the error occured
    36                              <1> ;Return:
    37                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    38                              <1> ;                  = 1 - Retry the Operation    (Retry)
    39                              <1> ;                  = 2 - Terminate the Program  (Abort)
    40                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    41 000019E5 53                  <1>     push rbx
    42 000019E6 51                  <1>     push rcx
    43 000019E7 52                  <1>     push rdx
    44 000019E8 57                  <1>     push rdi
    45 000019E9 56                  <1>     push rsi
    46 000019EA FC                  <1>     cld         ;Make String ops go forward
    47                              <1> 
    48 000019EB 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    49 000019EE 488D15FAE9FFFF      <1>     lea rdx, crlf
    50 000019F5 B409                <1>     mov ah, 09h ;Print String
    51 000019F7 CD41                <1>     int 41h
    52                              <1> 
    53 000019F9 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    54 000019FF B90C000000          <1>     mov ecx, 0Ch
    55 00001A04 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    56 00001A06 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    57 00001A09 480FB7FF            <1>     movzx rdi, di
    58 00001A0D 4889FA              <1>     mov rdx, rdi    ;Copy error code
    59 00001A10 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    60 00001A14 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    61 00001A17 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    62 00001A1A 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    63 00001A21 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    64 00001A25 B409                <1>     mov ah, 09h ;Print String
    65 00001A27 CD41                <1>     int 41h     ;Call DOS to print first part of message
    66                              <1> 
    67 00001A29 488D1505020000      <1>     lea rdx, qword [.readmsg]
    68 00001A30 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    69 00001A37 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    70 00001A3A 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    71 00001A3E B409                <1>     mov ah, 09h ;Print String
    72 00001A40 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    73                              <1> 
    74 00001A42 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    75 00001A45 0F85DF000000        <1>     jnz .charError
    76                              <1> ;Disk error continues here
    77 00001A4B 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    78 00001A52 B409                <1>     mov ah, 09h
    79 00001A54 CD41                <1>     int 41h
    80 00001A56 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    81 00001A58 80C241              <1>     add dl, "A" ;Add ASCII code
    82 00001A5B B402                <1>     mov ah, 02h ;Print char in dl
    83 00001A5D CD41                <1>     int 41h
    84                              <1> .userInput:
    85 00001A5F 488D1589E9FFFF      <1>     lea rdx, crlf  ;Print new line
    86 00001A66 B409                <1>     mov ah, 09h
    87 00001A68 CD41                <1>     int 41h
    88                              <1> ;Abort, Retry, Ignore, Fail is word order
    89                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    90                              <1> .userAbort:
    91                              <1> ;Abort is always an option
    92 00001A6A 488D15E2010000      <1>     lea rdx, qword [.abortmsg]
    93 00001A71 B409                <1>     mov ah, 09h
    94 00001A73 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
    95                              <1> .userRetry:
    96 00001A75 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    97 00001A78 7416                <1>     jz .userIgnore    ;If clear, dont print message
    98 00001A7A 488D15EA010000      <1>     lea rdx, qword [.betweenMsg]
    99 00001A81 B409                <1>     mov ah, 09h
   100 00001A83 CD41                <1>     int 41h
   101 00001A85 488D15D4010000      <1>     lea rdx, qword [.retrymsg]
   102 00001A8C B409                <1>     mov ah, 09h
   103 00001A8E CD41                <1>     int 41h
   104                              <1> .userIgnore:
   105 00001A90 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   106 00001A93 7416                <1>     jz .userFail
   107 00001A95 488D15CF010000      <1>     lea rdx, qword [.betweenMsg]
   108 00001A9C B409                <1>     mov ah, 09h
   109 00001A9E CD41                <1>     int 41h
   110 00001AA0 488D15B2010000      <1>     lea rdx, qword [.ignoremsg]
   111 00001AA7 B409                <1>     mov ah, 09h
   112 00001AA9 CD41                <1>     int 41h
   113                              <1> .userFail:
   114 00001AAB F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   115 00001AAE 7416                <1>     jz .userMsgEnd
   116 00001AB0 488D15B4010000      <1>     lea rdx, qword [.betweenMsg]
   117 00001AB7 B409                <1>     mov ah, 09h
   118 00001AB9 CD41                <1>     int 41h
   119 00001ABB 488D15A4010000      <1>     lea rdx, qword [.failmsg]
   120 00001AC2 B409                <1>     mov ah, 09h
   121 00001AC4 CD41                <1>     int 41h
   122                              <1> .userMsgEnd:
   123 00001AC6 488D15A1010000      <1>     lea rdx, qword [.endMsg]
   124 00001ACD B409                <1>     mov ah, 09h
   125 00001ACF CD41                <1>     int 41h
   126                              <1> ;Get user input now 
   127 00001AD1 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   128 00001AD3 488D3D97010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   129 00001ADA B401                <1>     mov ah, 01h ;STDIN without Console Echo
   130 00001ADC CD41                <1>     int 41h ;Get char in al
   131 00001ADE 3C61                <1>     cmp al, "a" ;Chack if lowercase
   132 00001AE0 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   133 00001AE2 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   134                              <1> .uip1:
   135 00001AE4 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   136 00001AE5 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   137 00001AE7 FFC1                <1>     inc ecx
   138 00001AE9 81F904000000        <1>     cmp ecx, 4
   139 00001AEF 75F3                <1>     jne .uip1
   140 00001AF1 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   141                              <1> .validInput:
   142 00001AF6 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   143                              <1> ;Now check if the input is permitted
   144 00001AF8 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   145 00001AFA 7427                <1>     je .cehExit
   146 00001AFC 84C0                <1>     test al, al ;Check if 0 => Ignore
   147 00001AFE 740F                <1>     je .viIgnore
   148 00001B00 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   149 00001B02 7416                <1>     je .viRetry
   150                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   151 00001B04 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   152 00001B07 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   153 00001B0D EB14                <1>     jmp short .cehExit
   154                              <1> .viIgnore:
   155 00001B0F F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   156 00001B12 0F8447FFFFFF        <1>     jz .userInput
   157 00001B18 EB09                <1>     jmp short .cehExit
   158                              <1> .viRetry:
   159 00001B1A F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   160 00001B1D 0F843CFFFFFF        <1>     jz .userInput
   161                              <1> .cehExit:
   162 00001B23 5E                  <1>     pop rsi
   163 00001B24 5F                  <1>     pop rdi
   164 00001B25 5A                  <1>     pop rdx
   165 00001B26 59                  <1>     pop rcx
   166 00001B27 5B                  <1>     pop rbx
   167 00001B28 48CF                <1>     iretq
   168                              <1> .charError:
   169 00001B2A B908000000          <1>     mov ecx, 8  ;8 chars in device name
   170 00001B2F 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   171                              <1> .ce1:
   172 00001B36 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   173 00001B37 88C2                <1>     mov dl, al  ;Move char into dl
   174 00001B39 B402                <1>     mov ah, 02h
   175 00001B3B CD41                <1>     int 41h ;Print char
   176 00001B3D E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   177 00001B3F E91BFFFFFF          <1>     jmp .userInput
   178                              <1> 
   179                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   180 00001B44 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   180 00001B4D 746563742024202020  <1>
   181 00001B56 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   181 00001B5F 6E6974202420202020  <1>
   182 00001B68 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   182 00001B71 202420202020202020  <1>
   183 00001B7A 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   183 00001B83 6F6D6D616E64202420  <1>
   184 00001B8C 446174612024202020- <1>             db "Data $            "       ;Error 4
   184 00001B95 202020202020202020  <1>
   185 00001B9E 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   185 00001BA7 737420242020202020  <1>
   186 00001BB0 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   186 00001BB9 202020202020202020  <1>
   187 00001BC2 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   187 00001BCB 656469612024202020  <1>
   188 00001BD4 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   188 00001BDD 7420466F756E642024  <1>
   189 00001BE6 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   189 00001BEF 706572202420202020  <1>
   190 00001BF8 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   190 00001C01 6C7420242020202020  <1>
   191 00001C0A 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   191 00001C13 742024202020202020  <1>
   192 00001C1C 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   192 00001C25 61696C757265202420  <1>
   193                              <1> 
   194 00001C2E 64726976652024      <1> .drive      db "drive $"
   195 00001C35 6572726F7220726561- <1> .readmsg    db "error reading $"
   195 00001C3E 64696E672024        <1>
   196 00001C44 6572726F7220777269- <1> .writemsg   db "error writing $"
   196 00001C4D 74696E672024        <1>
   197 00001C53 41626F727424        <1> .abortmsg   db "Abort$" 
   198 00001C59 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   199 00001C60 526574727924        <1> .retrymsg   db "Retry$"
   200 00001C66 4661696C24          <1> .failmsg    db "Fail$"
   201 00001C6B 2C2024              <1> .betweenMsg db ", $"
   202 00001C6E 3F2024              <1> .endMsg     db "? $"
   203 00001C71 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   204                              <1> 
   205                              <1> int43h:
   206 00001C75 F9                  <1>     stc     ;Set CF to kill the task
   207 00001C76 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    18                                  %include "./Source/Utils/COMMAND/Data/cmdEnv.asm"
    19                              <1>     
    20                              <1> masterEnv:  ;Yeet this is this is a child command processor
    21 00001C79 5F3A434F4D4D414E44- <1>     db "_:COMMAND.COM",0
    21 00001C82 2E434F4D00          <1>
    22 00001C87 504154483D0000      <1>     db "PATH=",0,0
    23 00001C8E 202020202020202020- <1>     db ($ - masterEnv) dup (" ")    ;Pad the environment with spaces
    23 00001C97 202020202020202020- <1>
    23 00001CA0 202020              <1>
    24                              <1> endOfAlloc: ;Symbol to find the start of where I can yeet 
    19                                  %include "./Source/Utils/COMMAND/Source/cmdLdr.asm"
    20                              <1> cmdLdr:
    21                              <1> ;First check if the version is ok. If not, return.
    22 00001CA3 B430                <1>     mov ah, 30h
    23 00001CA5 CD41                <1>     int 41h
    24 00001CA7 3C01                <1>     cmp al, 01h ;Version 1
    25 00001CA9 760D                <1>     jbe .okVersion
    26 00001CAB 488D1560010000      <1>     lea rdx, badVerStr
    27 00001CB2 B409                <1>     mov ah, 09h
    28 00001CB4 CD41                <1>     int 41h
    29 00001CB6 CD40                <1>     int 40h ;Exit to caller or DOS to print bad command interpreter line
    30                              <1> .okVersion:
    31                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    32 00001CB8 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    33 00001CBC 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    34 00001CC0 48890548E3FFFF      <1>     mov qword [realParent], rax ;Preserve the real parent address
    35                              <1> ;Setup Int 43h and Int 44h
    36 00001CC7 488D1517FDFFFF      <1>     lea rdx, critErrorHandler
    37 00001CCE 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    38 00001CD2 B844250000          <1>     mov eax, 2544h
    39 00001CD7 CD41                <1>     int 41h
    40 00001CD9 488D1595FFFFFF      <1>     lea rdx, int43h
    41 00001CE0 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    42 00001CE4 B843250000          <1>     mov eax, 2543h
    43 00001CE9 CD41                <1>     int 41h
    44 00001CEB 488D157CEBFFFF      <1>     lea rdx, applicationReturn
    45 00001CF2 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    46 00001CF6 B842250000          <1>     mov eax, 2542h
    47 00001CFB CD41                <1>     int 41h
    48                              <1> ;Get a pointer to DOS Sysvars
    49 00001CFD B452                <1>     mov ah, 52h ;Get sysvars
    50 00001CFF CD41                <1>     int 41h
    51 00001D01 48891D0FE3FFFF      <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    52                              <1> ;Call for simple internationalisation data
    53 00001D08 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    54 00001D0D CD41                <1>     int 41h
    55 00001D0F 3CFF                <1>     cmp al, -1
    56 00001D11 7412                <1>     je .skipSwitch
    57 00001D13 88150BE3FFFF        <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    58 00001D19 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    59 00001D1C 7507                <1>     jne .skipSwitch
    60 00001D1E C605FEE2FFFF2F      <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    61                              <1> .skipSwitch:
    62 00001D25 B800380000          <1>     mov eax, 3800h  ;Get current country data
    63 00001D2A 488D15F4E2FFFF      <1>     lea rdx, ctryData
    64 00001D31 CD41                <1>     int 41h ;Write the data to the internal country table
    65                              <1> ;Now determine if this is the master copy of COMMAND.COM
    66                              <1> ;Check if Int 4Eh has the same address as Int 4Dh. If so, we are master.
    67 00001D33 B84E350000          <1>     mov eax, 354Eh  ;Get int 4Eh address
    68 00001D38 CD41                <1>     int 41h
    69 00001D3A 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    70 00001D3D B84D350000          <1>     mov eax, 354Dh  ;Get int 4Dh address
    71 00001D42 CD41                <1>     int 41h
    72 00001D44 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    73 00001D47 7535                <1>     jne .skipMaster
    74                              <1> ;Ok so we are master command.com
    75                              <1> ;Now make myself the real parent
    76 00001D49 4C8905BFE2FFFF      <1>     mov qword [realParent], r8
    77                              <1> ;Set master environment as mine
    78 00001D50 488D0522FFFFFF      <1>     lea rax, masterEnv
    79 00001D57 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    80                              <1> ;Set current Drive in COMSPEC
    81 00001D5B B019                <1>     mov al, 19h ;Get current Drive
    82 00001D5D CD41                <1>     int 41h
    83 00001D5F 0441                <1>     add al, "A"
    84 00001D61 880512FFFFFF        <1>     mov byte [masterEnv], al
    85                              <1> ;Set Int 4Eh up
    86 00001D67 488D159BEFFFFF      <1>     lea rdx, int4Eh
    87 00001D6E B84E250000          <1>     mov eax, 254Eh ;Set this as Int 4Eh
    88 00001D73 CD41                <1>     int 41h
    89                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    90                              <1>     
    91 00001D75 488D1D27FFFFFF      <1>     lea rbx, endOfAlloc ;Save the Master Environment
    92 00001D7C EB07                <1>     jmp short .printInit
    93                              <1> .skipMaster:
    94 00001D7E 488D1DF4FEFFFF      <1>     lea rbx, masterEnv  ;This is the base address to jettison
    95                              <1> .printInit:
    96                              <1> ;Finish by printing INIT string.
    97 00001D85 488D1510000000      <1>     lea rdx, initString
    98 00001D8C B409                <1>     mov ah, 09h
    99 00001D8E CD41                <1>     int 41h ;Print init string
   100 00001D90 4889256EE2FFFF      <1>     mov qword [stackBottom], rsp    ;Use this to save where to reset rsp to
   101 00001D97 E9BEEAFFFF          <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   102                              <1> ;Loader Data here
   103                              <1> initString: 
   104 00001D9C 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version 1.0",CR,LF
   104 00001DA5 66696320436F6D7075- <1>
   104 00001DAE 746572205265736561- <1>
   104 00001DB7 726368285229205343- <1>
   104 00001DC0 502F444F5328522920- <1>
   104 00001DC9 56657273696F6E2031- <1>
   104 00001DD2 2E300D0A            <1>
   105 00001DD6 202020202020202020- <1>     db       "          (C)Copyright Scientific Computer Reserach 2022.",CR,LF,"$"
   105 00001DDF 20284329436F707972- <1>
   105 00001DE8 696768742053636965- <1>
   105 00001DF1 6E746966696320436F- <1>
   105 00001DFA 6D7075746572205265- <1>
   105 00001E03 736572616368203230- <1>
   105 00001E0C 32322E0D0A24        <1>
   106 00001E12 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   106 00001E1B 20444F532076657273- <1>
   106 00001E24 696F6E0D0A24        <1>
   106          ------------------  <1>  info: assembly required 1+3+2 passes

