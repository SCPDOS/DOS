     1                                  ;COMMAND.COM main file
     2                                  [map all ./Source/Utils/COMMAND/Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Source/Include/dosMacro.mac"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------------------------------
     9                              <1> ;Generic Macros file
    10                              <1> ;The following instruction extensions allow to conditionally return
    11                              <1> ;The idea was borrowed from the DOS Source Code
    12                              <1> ;
    13                              <1> ;-------------------------------------------------------------------------------
    14                              <1> 
    15                              <1> ;-------------------------------------------------------------------------------
    16                              <1> ;These macros are live and must not be touched
    17                              <1> ;-------------------------------------------------------------------------------
    18                              <1> %macro return 0
    19                              <1> %%_ret:
    20                              <1>     ret
    21                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    22                              <1> %endmacro
    23                              <1> 
    24                              <1> %macro cret 1
    25                              <1> %%_base:
    26                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    27                              <1>     %ifdef retOff
    28                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <1>     %ifdef currSegVBase
    30                              <1>     j%+1 short (retOff+currSegVBase)
    31                              <1>     %else
    32                              <1>     j%+1 short retOff
    33                              <1>     %endif  ;End ifdef currSegVBase
    34                              <1>     %else 
    35                              <1>     j%-1 short %%a
    36                              <1>     return
    37                              <1> %%a:
    38                              <1>     %endif  ;End the distance measurement if
    39                              <1>     %else   
    40                              <1>     j%-1 short %%a
    41                              <1>     return
    42                              <1> %%a:
    43                              <1>     %endif  ;End ifdef retoff
    44                              <1> %endmacro
    45                              <1> 
    46                              <1> %macro retz 0
    47                              <1> cret z
    48                              <1> %endmacro
    49                              <1> 
    50                              <1> %macro retnz 0
    51                              <1> cret nz
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> %macro rete 0
    55                              <1> cret e
    56                              <1> %endmacro
    57                              <1> 
    58                              <1> %macro retne 0
    59                              <1> cret ne
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> %macro retc 0
    63                              <1> cret c
    64                              <1> %endmacro
    65                              <1> 
    66                              <1> %macro retnc 0
    67                              <1> cret nc
    68                              <1> %endmacro
    69                              <1> 
    70                              <1> %macro retb 0
    71                              <1> cret b
    72                              <1> %endmacro
    73                              <1> 
    74                              <1> %macro retnb 0
    75                              <1> cret nb
    76                              <1> %endmacro
    77                              <1> 
    78                              <1> %macro breakpoint 0
    79                              <1> xchg bx, bx
    80                              <1> %endmacro
     7                                  %include "./Source/Include/dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    27 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    32 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Only affects for SUBST drives, not JOIN
    69                              <1> ; Flags: Bit 15 set = Network drive
    70                              <1> ;        Bit 14 set = Physical drive
    71                              <1> ;        Bit 13 set = JOIN'ed drive
    72                              <1> ;        Bit 12 set = SUBST'ed drive
    73                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    74                              <1> endstruc
    75                              <1> ;CDS equates
    76                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    77                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    78                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    79                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    80                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    81                              <1> ;------------------------------------------------------------------------;
    82                              <1> ; The SFT is a way to allow applications to open file handles to files 
    83                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    84                              <1> ; under the first header, and then a second header will be linked to the 
    85                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    86                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    87                              <1> ; using the FCBS= command. Default FCBS=5.
    88                              <1> ;
    89                              <1> ; A file handle describes the file, and the location within the file that
    90                              <1> ; we are reading. The file handle can be manipulated without the file
    91                              <1> ; being in memory, thus allowing the user to access data without needing 
    92                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    93                              <1> ; accessing devices, by treating them as files with their drivers 
    94                              <1> ; responding and translating the manipulations of the file handle itself.
    95                              <1> ; Neither the driver nor the application should see or use the SFT for
    96                              <1> ; the handle, as it is subject to change (and will change when file 
    97                              <1> ; sharing provisions are included). The DOS will make requests to the 
    98                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    99                              <1> ; track of the information in the SFT entry for that handle. 
   100                              <1> ;
   101                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   102                              <1> ; can point to the same file. It all depends on what the applications 
   103                              <1> ; want to do with the File.
   104                              <1> ;
   105                              <1> ; !!!!IMPORTANT!!!!
   106                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   107                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   108                              <1> ;
   109                              <1> ;Each SFT may look like this:
   110                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   111                              <1> ;            |                |
   112                              <1> ;       wNumFiles*sft    wNumFiles*sft
   113                              <1> ;
   114                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   115                              <1> ; System FCBs.
   116                              <1> ;
   117                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   118                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   119                              <1> ;
   120                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   121                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   122                              <1> ;------------------------------------------------------------------------;
   123                              <1> struc sfth   ;System file table header
   124                              <1> ; This is the SFT header.
   125                              <1> ; This structure comes before the start of the first file in the array/table.
   126 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   127 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   128                              <1> endstruc
   129                              <1> 
   130                              <1> struc sft
   131                              <1> ;This is the file struc itself
   132 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   133 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   134 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   135 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   136 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   137 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   138 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   139 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   140 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   141 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   142 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   143 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   144 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   145 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   146 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   147 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   148 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   149 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   150 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   151                              <1> ;                           0 means no record
   152                              <1> endstruc
   153                              <1> ;Open Mode equates
   154                              <1> ;Access modes   Bits[2:0]
   155                              <1> ReadAccess      equ 0h
   156                              <1> WriteAccess     equ 1h
   157                              <1> RWAccess        equ 2h
   158                              <1> ;Bit 3 reserved 0
   159                              <1> ;Sharing modes  Bits[6:4]
   160                              <1> CompatShare     equ 0h
   161                              <1> denyRWShare     equ 10h
   162                              <1> denyWriteShare  equ 20h
   163                              <1> denyReadShare   equ 30h
   164                              <1> denyNoneShare   equ 40h
   165                              <1> netFCBShare     equ 70h
   166                              <1> ;Bit 7 reserved 0
   167                              <1> ;Bits 8-12 reserved 0
   168                              <1> 
   169                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   170                              <1> ;Buffering on writes
   171                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   172                              <1> ;FCB opened file?
   173                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   174                              <1> ;Attribute Byte
   175                              <1> readOnlyFile    equ 1h
   176                              <1> hiddenFile      equ 2h
   177                              <1> systemFile      equ 4h
   178                              <1> volumeLabel     equ 8h
   179                              <1> directoryFile   equ 10h ;Directory entry
   180                              <1> archiveFile     equ 20h
   181                              <1> ;Device Info equates
   182                              <1> ;For a block device, bits [5:0] contain the drive number
   183                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   184                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   185                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   186                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   187                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   188                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   189                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   190                              <1> blokFileToFlush equ 40h ;Set if ANY writes are made to this handle!
   191                              <1> devCharDev      equ 80h ;If set, it is a char device!
   192                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   193                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   194                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   195                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   196                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   197                              <1> 
   198                              <1> ;openAddress   equ DOSSEG:367Ah   
   199                              <1> ;createAddress equ DOSSEG:35E3h   
   200                              <1> ;------------------------------------------------------------------------;
   201                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   202                              <1> ; to an internal buffer, and then copying it to the specified location
   203                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   204                              <1> ; another request for the same sector from the same device is made, so 
   205                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   206                              <1> ; size, selected according to the largest detected sector size during 
   207                              <1> ; the initial loadup.
   208                              <1> ;
   209                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   210                              <1> ;
   211                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   212                              <1> ;------------------------------------------------------------------------;
   213                              <1> 
   214                              <1> struc bufferHdr
   215 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   216 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   217 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   218 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   219 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   220 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   221 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   222 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   223 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   224                              <1>     .dataarea:             ;Points to the start of the data area
   225                              <1> endstruc
   226                              <1> ;Buffer Flag equates
   227                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   228                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   229                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   230                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   231                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   232                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   233                              <1> ;Note! A buffer is marked as referenced only when the application 
   234                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   235                              <1> ;------------------------------------------------------------------------;
   236                              <1> ; Memory control block for each memory arena
   237                              <1> ;------------------------------------------------------------------------;
   238                              <1> struc mcb
   239 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   240 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   241 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   242 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   243                              <1>     .program:
   244                              <1> endstruc
   245                              <1> ;MCB equates
   246                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   247                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   248                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   249                              <1> mcbMarkCtn      equ "M"
   250                              <1> mcbMarkEnd      equ "Z"
   251                              <1> 
   252                              <1> memFirstFit     equ 0   ;First free block goes to application
   253                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   254                              <1> memLastFit      equ 2   ;Last free block goes to application
   255                              <1> 
   256                              <1> ;Owner = Para aligned address => Owning application PSP
   257                              <1> ;...To consider...
   258                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   259                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   260                              <1> ;------------------------------------------------------------------------;
   261                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   262                              <1> ; following order, thus allowing for return values to be placed in the 
   263                              <1> ; registers by accessing the caller register stack frame.
   264                              <1> ;------------------------------------------------------------------------;
   265                              <1> struc callerFrame
   266 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   267 00000008 ????????????????    <1>     .rbx    resq 1    
   268 00000010 ????????????????    <1>     .rcx    resq 1
   269 00000018 ????????????????    <1>     .rdx    resq 1
   270 00000020 ????????????????    <1>     .rsi    resq 1
   271 00000028 ????????????????    <1>     .rdi    resq 1
   272 00000030 ????????????????    <1>     .rbp    resq 1
   273 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   274 00000040 ????????????????    <1>     .r9     resq 1
   275                              <1> ;Pushed by Processor when invoked via Interrupt
   276 00000048 ????????????????    <1>     .rip    resq 1
   277 00000050 ????????????????    <1>     .cs     resq 1
   278 00000058 ????????????????    <1>     .flags  resq 1
   279                              <1> endstruc
   280                              <1> 
   281                              <1> struc dpl
   282                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   283                              <1> ; server calls
   284 00000000 ????????????????    <1>     .rax    resq 1
   285 00000008 ????????????????    <1>     .rbx    resq 1
   286 00000010 ????????????????    <1>     .rcx    resq 1
   287 00000018 ????????????????    <1>     .rdx    resq 1
   288 00000020 ????????????????    <1>     .rsi    resq 1
   289 00000028 ????????????????    <1>     .rdi    resq 1
   290 00000030 ????????????????    <1>     .r8     resq 1
   291 00000038 ????????????????    <1>     .r9     resq 1
   292 00000040 ????????????????    <1>     .align  resq 1
   293 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   294 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   295                              <1> endstruc
   296                              <1> 
   297                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   298 00000000 ????????????????    <1>     .oldRBP         resq 1  
   299 00000008 ??                  <1>     .newBuffers     resb 1  ;New buffers value
   300 00000009 ??                  <1>     .newSFTVal      resb 1
   301 0000000A ??                  <1>     .newFCBSVal     resb 1
   302 0000000B ??                  <1>     .newProtFCBSVal resb 1  ;Number of protected FCBS
   303 0000000C ??                  <1>     .newLastdrive   resb 1
   304 0000000D ??                  <1>     .newStacks      resb 1  ;Ignored for now
   305 0000000E ????                <1>     .newStackSize   resb 2  ;Ignored for now
   306 00000010 ????????            <1>     .newAllocSize   resd 1  ;Used to keep track of reallocation size
   307 00000014 ????????            <1>                     resd 1  ;Alignment byte
   308 00000018 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc fcb
   312                              <1> ;Similar to a DOS 2.0 FCB.
   313 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
   314 00000001 ????????????????    <1>     .filename   resb 8
   315 00000009 ??????              <1>     .fileext    resb 3
   316 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   317                              <1> ;One block consists of 128 records, of size denoted in the below
   318 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   319 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   320 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   321 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   322 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   323 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   324 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   325 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   326 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   327                              <1>     ;If record size > 64, high byte is ignored.
   328                              <1>     ;Used for random read and write operations to find the right record
   329                              <1> endstruc
   330                              <1> 
   331                              <1> struc filename
   332                              <1> ;8.3 File name struct
   333 00000000 ????????????????    <1>     .fName  resb 8
   334 00000008 ??????              <1>     .fExt   resb 3
   335                              <1> endstruc
   336                              <1> 
   337                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   338 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   339 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   340 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   341 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   342 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   343 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   344 00000016 ????                <1>     .fileTime   resw 1  ;File time
   345 00000018 ????                <1>     .fileDate   resw 1  ;File date
   346 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   347 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   348                              <1> endstruc
   349                              <1> 
   350                              <1> struc psp
   351 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   352 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   353 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   354 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   355 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   356 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   357 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   358 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   359 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   360 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   361 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   362 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   363 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   364 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   365                              <1> ;Extra handle arrays are grouped into a linked list
   366                              <1> ;The below are in the same place as in DOS
   367 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   368 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   369                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   370 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   371 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   372                              <1> endstruc
   373                              <1> 
   374                              <1> struc clkStruc
   375 00000000 ????                <1>     .dateWord   resw 1
   376 00000002 ??                  <1>     .minutes    resb 1
   377 00000003 ??                  <1>     .hours      resb 1
   378 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   379 00000005 ??                  <1>     .seconds    resb 1
   380                              <1> endstruc
   381                              <1> 
   382                              <1> struc countryStruc
   383 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   384                              <1>                         ;0 = month day year hh:mm:ss
   385                              <1>                         ;1 = day month year hh:mm:ss
   386                              <1>                         ;2 = year month day hh:mm:ss
   387 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   388 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   389 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   390 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   391 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   392 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   393                              <1>                         ;0 = Symbol leads, without space
   394                              <1>                         ;1 = Symbol follows, without space
   395                              <1>                         ;2 = Symbol leads, one space
   396                              <1>                         ;3 = Symbol follows, one space
   397                              <1>                         ;4 = Symbol replace decimal separator
   398 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   399 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   400 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   401 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   402 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   403                              <1> endstruc
   404                              <1> 
   405                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   406                              <1> ;for a space of 64Gb
   407                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   408                              <1> dosLowBase  equ 600h    ;Low load address
   409                              <1> 
   410                              <1> ;Critical Error AH bitfield equates
   411                              <1> critRead    equ 0h
   412                              <1> critWrite   equ 1h
   413                              <1> critDOS     equ 0h
   414                              <1> critFAT     equ 2h
   415                              <1> critDir     equ 4h
   416                              <1> critData    equ 6h
   417                              <1> critFailOK  equ 8h
   418                              <1> critRetryOK equ 10h
   419                              <1> critIgnorOK equ 20h
   420                              <1> critCharDev equ 80h
   421                              <1> 
   422                              <1> critIgnore  equ 0
   423                              <1> critRetry   equ 1
   424                              <1> critAbort   equ 2
   425                              <1> critFail    equ 3
   426                              <1> 
   427                              <1> ;MISC ASCII control chars
   428                              <1> NUL equ 00h ;^@         | ASCII Null
   429                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   430                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   431                              <1> BEL equ 07h ;^G         | ASCII Bell
   432                              <1> BSP equ 08h ;^H         | ASCII Backspace
   433                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   434                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   435                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   436                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   437                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   438                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   439                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   440                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   441                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   442                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   443                              <1> SPC equ 20h ;Printable  | ASCII Space
   444                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   445                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   446                              <1> 
   447                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   448                              <1> ;Extended Ascii Codes
   449                              <1> eF1     equ 3Bh ;F1 second byte
   450                              <1> eF2     equ 3Ch ;F2 second byte
   451                              <1> eF3     equ 3Dh ;F3 second byte
   452                              <1> eF4     equ 3Eh ;F4 second byte
   453                              <1> eF5     equ 3Fh ;F5 second byte
   454                              <1> eF6     equ 40h ;F6 second byte
   455                              <1> eF7     equ 41h ;F7 second byte
   456                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   457                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   458                              <1> eIns    equ 52h ;Insert second byte
   459                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   460                              <1> 
   461                              <1> ;Default Configuration for the system
   462                              <1> 
   463                              <1> buffersDefault  equ 30
   464                              <1> filesDefault    equ 20
   465                              <1> fcbsDefault     equ 4
   466                              <1> safeFcbsDeflt   equ 0
   467                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Source/Include/dosError.inc"
     9                              <1> ;DOS Error codes
    10                              <1> 
    11                              <1> ;Extended Error Codes
    12                              <1> errInvFnc   equ 1   ;Invalid function number
    13                              <1> errFnf      equ 2   ;File not found
    14                              <1> errPnf      equ 3   ;Path not found
    15                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    16                              <1> errAccDen   equ 5   ;Access denied (to resource)
    17                              <1> errBadHdl   equ 6   ;Invalid handle
    18                              <1> errMCBbad   equ 7   ;MCB's destroyed
    19                              <1> errNoMem    equ 8   ;Insufficient memory
    20                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    21                              <1> errBadEnv   equ 10  ;Invalid environment
    22                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    23                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    24                              <1> errInvDat   equ 13  ;Invalid data
    25                              <1> ;           equ 14  ;Reserved
    26                              <1> errBadDrv   equ 15  ;Invalid drive specified
    27                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    28                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    29                              <1> errNoFil    equ 18  ;No more files
    30                              <1> ;The following are Driver error codes + 19
    31                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    32                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    33                              <1> errUnkUnt   equ 20  ;Unknown Unit
    34                              <1> errDrvNR    equ 21  ;Drive not ready
    35                              <1> errUnkCmd   equ 22  ;Unknown Command
    36                              <1> errCRCerr   equ 23  ;Data (CRC) error
    37                              <1> errBadRLn   equ 24  ;Bad request structure length
    38                              <1> errSekErr   equ 25  ;Seek error
    39                              <1> errUnkMed   equ 26  ;Unknown media type
    40                              <1> errSecNF    equ 27  ;Sector not Found
    41                              <1> errNoPap    equ 28  ;Printer out of paper
    42                              <1> errWF       equ 29  ;Write fault
    43                              <1> errRF       equ 30  ;Read fault
    44                              <1> errGF       equ 31  ;General fault
    45                              <1> ;----------------------------------------------
    46                              <1> ;The following two go inbetween the Disk errors
    47                              <1> errShrVio   equ 32  ;Sharing violations
    48                              <1> errLokVio   equ 33  ;File Lock violation
    49                              <1> ;----------------------------------------------
    50                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    51                              <1> errNoFCB    equ 35  ;FCB unavailable
    52                              <1> errShrFul   equ 36  ;Sharing buffer full
    53                              <1> 
    54                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    55                              <1> 
    56                              <1> errFilExist equ 80  ;File already exists
    57                              <1> errDirExist equ 82  ;Directory already exists
    58                              <1> errFI44     equ 83  ;Fail on INT 44h
    59                              <1> errRedir    equ 84  ;Too many levels of redirection
    60                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    61                              <1> errBadPass  equ 86  ;Bad password
    62                              <1> errBadParam equ 87  ;Bad parameter passed to request
    63                              <1> errNetWrite equ 88  ;Network Write Fault
    64                              <1> ;-----------------------------------------------------------------------------
    65                              <1> ;Error Loci
    66                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    67                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    68                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    69                              <1> eLocChr     equ 4   ;Serial/Character Device error
    70                              <1> eLocMem     equ 5   ;Related to RAM
    71                              <1> ;-----------------------------------------------------------------------------
    72                              <1> ;Error Actions
    73                              <1> eActRet     equ 1   ;Retry
    74                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    75                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    76                              <1> eActAbt     equ 4   ;Abort with cleanup
    77                              <1> eActKil     equ 5   ;Abort without cleanup
    78                              <1> eActIgn     equ 6   ;Ignore error
    79                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    80                              <1> ;-----------------------------------------------------------------------------
    81                              <1> ;Error classes
    82                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    83                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    84                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    85                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    86                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    87                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    88                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    89                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    90                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    91                              <1> eClsLocked  equ 10  ;Resource Locked
    92                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    93                              <1> eClsClash   equ 12  ;Resource already exists!
    94                              <1> eClsUnk     equ 13  ;Unknown class
     9                                  %include "./Source/Utils/COMMAND/Data/cmdEqu.asm"
    10                              <1> ;Data equates and struct declarations
    11                              <1> 
    12                              <1> cmdBufferL  equ 128 ;Length of a command line buffer
    13                              <1> driveSpecL  equ 2   ;Space for X:
    14                              <1> dirPathL    equ 64  ;Length of a directory path
    15                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
    16                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
    17                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
    18                              <1> fullDirPathL equ driveSpecL + dirPathL
    19                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    20                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    21                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    22                              <1> 
    23                              <1> ;Use PSP FCB's for switch buffers
    24                              <1> fcb1        equ psp.fcb1
    25                              <1> fcb2        equ psp.fcb2
    26                              <1> ;Use the dta as the built command line buffer.
    27                              <1> cmdLineCnt  equ psp.parmList
    28                              <1> cmdLine     equ psp.progTail
    29                              <1> 
    30                              <1> 
    31                              <1> ;Struct Declarations
    32                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    33 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    34 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    35 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    36 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    37 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    38                              <1> endstruc
    39                              <1> 
    40                              <1> struc execProg  ;For use with EXEC-ing a child task
    41 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    42 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    43 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    44 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    45                              <1> endstruc
    46                              <1> 
    47                              <1> ;Directory attribute equates
    48                              <1>     dirReadOnly     equ 01h
    49                              <1>     dirHidden       equ 02h
    50                              <1>     dirSystem       equ 04h
    51                              <1>     dirVolumeID     equ 08h
    52                              <1>     dirDirectory    equ 10h
    53                              <1>     dirArchive      equ 20h
    54                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    55                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    56                              <1>     ;If any of the three bits are set, then ALL three bits are set
    57                              <1>     ; in addition to whatever the user passed to search for.
    58                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    59                              <1>     dirIncFiles     equ dirHidden | dirSystem
    10                                  Segment .data align=1 
    11                                  %include "./Source/Utils/COMMAND/Data/cmdData.asm"
    12                              <1> ;Static Data Area for COMMAND.COM    
    13                              <1> startLbl:   ;Start symbol, this is the entry point
    14 00000000 E960250000          <1>     jmp cmdLdr
    15 00000005 0000000000000000    <1> stackBottom dq 0    ;Pointer to the top of the stack as allocated by DOS
    16 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
    17 0000000F FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
    18 00000017 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
    19 0000001F 1400                <1> numHdls     dw 20   ;Get number of handles permitted, hardcoded in this version
    20 00000021 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    21 00000023 5C                  <1> pathSep     db "\"  ;Default path sep
    22 00000024 2F                  <1> switchChar  db "/"  ;Default switch char
    23 00000025 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    24 00000026 0000000000000000    <1> parentInt42 dq 0    ;Stores the parent values to restore upon exiting if it can
    25                              <1> ;Static strings, not used in command line parsing
    26 0000002E 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    26 00000037 000000000000000000- <1>
    26 00000040 000000000000000000- <1>
    26 00000049 000000000000000000- <1>
    26 00000052 0000                <1>
    27 00000054 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    27 0000005D 000000000000000000- <1>
    27 00000066 000000000000000000- <1>
    27 0000006F 000000000000000000- <1>
    27 00000078 000000000000000000- <1>
    27 00000081 000000000000000000- <1>
    27 0000008A 000000000000000000- <1>
    27 00000093 00000000            <1>
    28                              <1> 
    29                              <1> 
    30                              <1> cmdLineStatePtr:
    31 00000097 00                  <1> cmdStartOff db 0    ;Offset to the first char for this command (may be a space)
    32 00000098 00                  <1> cmdEndOff   db 0    ;Offset to the terminating char for this command (0Dh or |)
    33 00000099 00                  <1> pipeFlag    db 0    ;If set, we are piping across a command
    34 0000009A 0000                <1> pipeHndl    dw 0    ;If pipeFlag set, this var has the handle to the pipe file
    35 0000009C 202020202020202020- <1> pipeName    db 11 dup (" ") ;Name of the pipe file we created
    35 000000A5 2020                <1>
    36                              <1> 
    37                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    38                              <1> ;These variables are valid for a SINGLE command in a command line
    39 000000A7 0000                <1> cmdDrvSpec  dw 0    ;Read the first word in to see if the pathspec has drivespec
    40 000000A9 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    41 000000AA 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    42                              <1> ;                    If 2, we are redirecting output to a file, by appending
    43                              <1> ;FLG and SWCH are read as a word when checking if argX is a switch
    44 000000AB 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    45 000000AC 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    46 000000AD 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    47                              <1> 
    48 000000AE 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    49 000000AF 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    50 000000B0 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    51                              <1> 
    52                              <1> cmdStateL equ $ - cmdStatePtr
    53                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    54                              <1> 
    55                              <1> ;Structs and strings
    56                              <1> 
    57 000000B1 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    57 000000BA 00000000000000      <1>
    58 000000C1 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    58 000000CA 000000000000000000- <1>
    58 000000D3 000000000000000000- <1>
    58 000000DC 000000000000000000- <1>
    58 000000E5 00000000000000      <1>
    59                              <1> 
    60 000000EC 000000000000000000- <1> launchBlock db execProg_size dup (0)
    60 000000F5 000000000000000000- <1>
    60 000000FE 000000000000000000- <1>
    60 00000107 0000000000          <1>
    61                              <1> 
    62 0000010C 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    62 00000115 000000000000000000- <1>
    62 0000011E 000000000000000000- <1>
    62 00000127 000000000000000000- <1>
    62 00000130 000000000000000000- <1>
    62 00000139 000000000000000000- <1>
    62 00000142 000000000000000000- <1>
    62 0000014B 000000000000000000- <1>
    62 00000154 000000000000000000- <1>
    62 0000015D 000000000000000000- <1>
    62 00000166 000000000000000000- <1>
    62 0000016F 000000000000000000- <1>
    62 00000178 000000000000000000- <1>
    62 00000181 000000000000000000- <1>
    62 0000018A 0000                <1>
    63 0000018C 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    63 00000195 000000000000000000- <1>
    63 0000019E 000000000000000000- <1>
    63 000001A7 000000000000000000- <1>
    63 000001B0 000000000000000000- <1>
    63 000001B9 000000000000000000- <1>
    63 000001C2 000000000000000000- <1>
    63 000001CB 000000000000000000- <1>
    63 000001D4 000000000000000000- <1>
    63 000001DD 000000000000000000- <1>
    63 000001E6 000000000000000000- <1>
    63 000001EF 000000000000000000- <1>
    63 000001F8 000000000000000000- <1>
    63 00000201 000000000000000000- <1>
    63 0000020A 0000                <1>
    64 0000020C 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)  ;Space for full path to a external command
    64 00000215 000000000000000000- <1>
    64 0000021E 000000000000000000- <1>
    64 00000227 000000000000000000- <1>
    64 00000230 000000000000000000- <1>
    64 00000239 000000000000000000- <1>
    64 00000242 000000000000000000- <1>
    64 0000024B 000000000000000000- <1>
    64 00000254 00000000000000      <1>
    65                              <1> 
    66 0000025B 000000000000000000- <1> fcbCmdSpec  db fcbNameL dup (0) ;Used to make a FCB style name for the file
    66 00000264 0000                <1>
    67 00000266 000000000000000000- <1> cmdSpec     db fileNameZL dup (0)   ;ASCIIZ command spec for the command name
    67 0000026F 00000000            <1>
    68 00000273 000000000000000000- <1> cmdName     db cmdNameL dup (0) ;Command name string prefixed by length of word
    68 0000027C 0000000000          <1>
    69                              <1> 
    70 00000281 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    70 0000028A 000000000000000000- <1>
    70 00000293 000000000000000000- <1>
    70 0000029C 000000000000000000- <1>
    70 000002A5 000000000000000000- <1>
    70 000002AE 000000000000000000- <1>
    70 000002B7 000000000000000000- <1>
    70 000002C0 000000000000000000- <1>
    70 000002C9 00000000000000      <1>
    71 000002D0 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    71 000002D9 000000000000000000- <1>
    71 000002E2 000000000000000000- <1>
    71 000002EB 000000000000000000- <1>
    71 000002F4 000000000000000000- <1>
    71 000002FD 000000000000000000- <1>
    71 00000306 000000000000000000- <1>
    71 0000030F 000000000000000000- <1>
    71 00000318 00000000000000      <1>
    72                              <1> 
    73 0000031F 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Contains the pathspec for the search file
    73 00000328 000000000000000000- <1>
    73 00000331 000000000000000000- <1>
    73 0000033A 000000000000000000- <1>
    73 00000343 000000000000000000- <1>
    73 0000034C 000000000000000000- <1>
    73 00000355 000000000000000000- <1>
    73 0000035E 000000000000000000- <1>
    73 00000367 000000000000000000- <1>
    73 00000370 000000000000000000- <1>
    73 00000379 000000000000000000- <1>
    73 00000382 000000000000000000- <1>
    73 0000038B 000000000000000000- <1>
    73 00000394 000000000000000000- <1>
    73 0000039D 0000                <1>
    74                              <1> ;The above is larger than is needed/supported by DOS to allow for 
    75                              <1> ; users overtyping
    76                              <1> 
    77                              <1> ;Internal Function vars
    78                              <1> ;Dir Vars
    79 0000039F 00                  <1> dirPrnType  db 0    ;Print type.    Bit[0] set => /W or /w specified
    80                              <1> ;                                   Bit[1] set => /P or /p specified
    81 000003A0 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    82 000003A1 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    83 000003A2 00                  <1> dirDrv      db 0    ;0 based drive number to use
    84 000003A3 000000000000000000- <1> dirOldCWD   db cmdBufferL dup (0)   ;Space for CWD and any overspill 
    84 000003AC 000000000000000000- <1>
    84 000003B5 000000000000000000- <1>
    84 000003BE 000000000000000000- <1>
    84 000003C7 000000000000000000- <1>
    84 000003D0 000000000000000000- <1>
    84 000003D9 000000000000000000- <1>
    84 000003E2 000000000000000000- <1>
    84 000003EB 000000000000000000- <1>
    84 000003F4 000000000000000000- <1>
    84 000003FD 000000000000000000- <1>
    84 00000406 000000000000000000- <1>
    84 0000040F 000000000000000000- <1>
    84 00000418 000000000000000000- <1>
    84 00000421 0000                <1>
    85 00000423 000000000000000000- <1> dirPathArg  db cmdBufferL dup (0)   ;Copy the pathspec argument here if any
    85 0000042C 000000000000000000- <1>
    85 00000435 000000000000000000- <1>
    85 0000043E 000000000000000000- <1>
    85 00000447 000000000000000000- <1>
    85 00000450 000000000000000000- <1>
    85 00000459 000000000000000000- <1>
    85 00000462 000000000000000000- <1>
    85 0000046B 000000000000000000- <1>
    85 00000474 000000000000000000- <1>
    85 0000047D 000000000000000000- <1>
    85 00000486 000000000000000000- <1>
    85 0000048F 000000000000000000- <1>
    85 00000498 000000000000000000- <1>
    85 000004A1 0000                <1>
    86 000004A3 3F3F3F3F3F3F3F3F    <1> dirSrchPat  db 8 dup ("?")    ;We copy the search pattern here
    87 000004AB 2E                  <1> dirSPExt    db "."
    88 000004AC 3F3F3F              <1>             db 3 dup ("?")
    89                              <1> 
    90                              <1> ;Volume Vars
    91 000004AF 000000000000000000- <1> volLblSpc   db 13 dup (0)
    91 000004B8 00000000            <1>
    92 000004BC 00                  <1> volPathBuf  db 0 ;Drive LETTER goes here
    93 000004BD 3A5C2A2E2A00        <1>             db ":\*.*",0  ;This remains to build X:\*.*,0 for vol label search
    94                              <1> 
    95                              <1> ;Time/Date vars
    96 000004C3 00                  <1> td1 db 0    ;Minutes/Year
    97 000004C4 00                  <1> td2 db 0    ;Hours/Zero
    98 000004C5 00                  <1> td3 db 0    ;Hundredths/Day
    99 000004C6 00                  <1> td4 db 0    ;Seconds/Month
    12                                  %include "./Source/Utils/COMMAND/Data/cmdTable.asm"
    13                              <1> ;Function dispatch table
    14                              <1> functionTable:
    15                              <1> ;Use Pascal strings with each row of hte table having three columns:
    16                              <1> ; Col 1, BYTE, Length of command
    17                              <1> ; Col 2, String, String representing the user input
    18                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
    19 000004C7 03444952            <1>     db 3, "DIR"
    20 000004CB 1910                <1>     dw dir - startLbl
    21                              <1> 
    22 000004CD 024344              <1>     db 2, "CD"
    23 000004D0 AF13                <1>     dw chdir - startLbl
    24                              <1> 
    25 000004D2 054348444952        <1>     db 5, "CHDIR"
    26 000004D8 AF13                <1>     dw chdir - startLbl
    27                              <1> 
    28 000004DA 024D44              <1>     db 2, "MD"
    29 000004DD 5714                <1>     dw mkdir - startLbl
    30                              <1> 
    31 000004DF 054D4B444952        <1>     db 5, "MKDIR"
    32 000004E5 5714                <1>     dw mkdir - startLbl
    33                              <1> 
    34 000004E7 025244              <1>     db 2, "RD"
    35 000004EA AA14                <1>     dw rmdir - startLbl
    36                              <1> 
    37 000004EC 05524D444952        <1>     db 5, "RMDIR"
    38 000004F2 AA14                <1>     dw rmdir - startLbl
    39                              <1> 
    40 000004F4 0344454C            <1>     db 3, "DEL"
    41 000004F8 FE14                <1>     dw erase - startLbl
    42                              <1> 
    43 000004FA 054552415345        <1>     db 5, "ERASE"
    44 00000500 FE14                <1>     dw erase - startLbl
    45                              <1> 
    46 00000502 0444415445          <1>     db 4, "DATE"
    47 00000507 FF14                <1>     dw date - startLbl
    48                              <1> 
    49 00000509 0454494D45          <1>     db 4, "TIME"
    50 0000050E C515                <1>     dw time - startLbl
    51                              <1> 
    52 00000510 04434F5059          <1>     db 4, "COPY"
    53 00000515 FD14                <1>     dw copy - startLbl
    54                              <1> 
    55 00000517 0443545459          <1>     db 4, "CTTY"
    56 0000051C 5D16                <1>     dw ctty - startLbl
    57                              <1> 
    58 0000051E 03434C53            <1>     db 3, "CLS"
    59 00000522 5E16                <1>     dw cls - startLbl
    60                              <1> 
    61 00000524 05425245414B        <1>     db 5, "BREAK"
    62 0000052A D016                <1>     dw break - startLbl
    63                              <1> 
    64 0000052C 06564552494659      <1>     db 6, "VERIFY"
    65 00000533 5117                <1>     dw verify - startLbl
    66                              <1> 
    67 00000535 0652454E414D45      <1>     db 6, "RENAME"
    68 0000053C CE17                <1>     dw rename - startLbl
    69                              <1> 
    70 0000053E 08545255454E414D45  <1>     db 8, "TRUENAME"
    71 00000547 CF17                <1>     dw truename - startLbl
    72                              <1> 
    73 00000549 03564552            <1>     db 3, "VER"
    74 0000054D 1819                <1>     dw version - startLbl
    75                              <1> 
    76 0000054F 03564F4C            <1>     db 3, "VOL"
    77 00000553 0518                <1>     dw volume - startLbl
    78                              <1> 
    79 00000555 034D454D            <1>     db 3, "MEM"
    80 00000559 5C19                <1>     dw memory - startLbl
    81                              <1> 
    82 0000055B 0445584954          <1>     db 4, "EXIT"
    83 00000560 551B                <1>     dw exit - startLbl
    84                              <1> 
    85 00000562 0454595045          <1>     db 4, "TYPE"
    86 00000567 A61A                <1>     dw type - startLbl
    87                              <1> 
    88 00000569 FF                  <1>     db -1   ;End of table
    13                                  %include "./Source/Utils/COMMAND/Data/cmdMsg.asm"
    14                              <1> ;COMMAND.COM Messages and strings
    15 0000056A 0D0A24              <1> crlf    db  CR,LF,"$"
    16 0000056D 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
    17 00000572 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
    17 0000057B 696C65206D69737369- <1>
    17 00000584 6E670D0A24          <1>
    18 00000589 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
    18 00000592 6469736B2077697468- <1>
    18 0000059B 206261746368206669- <1>
    18 000005A4 6C65                <1>
    19 000005A6 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
    19 000005AF 737320616E79206B65- <1>
    19 000005B8 79207768656E207265- <1>
    19 000005C1 6164790D0A24        <1>
    20 000005C7 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
    20 000005D0 6E64206F722066696C- <1>
    20 000005D9 65206E616D650D0A24  <1>
    21 000005E2 4475706C6963617465- <1> dupName db  "Duplicate file name or "
    21 000005EB 2066696C65206E616D- <1>
    21 000005F4 65206F7220          <1>
    22 000005F9 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    22 00000602 666F756E640D0A24    <1>
    23 0000060A 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    23 00000613 656E74206469736B20- <1>
    23 0000061C 73706163650D0A24    <1>
    24 00000624 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    24 0000062D 7669726F6E6D656E74- <1>
    24 00000636 2073706163650D0A24  <1>
    25 0000063F 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    25 00000648 74696F6E206572726F- <1>
    25 00000651 720D0A24            <1>
    26 00000655 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    26 0000065E 6F7420626520636F70- <1>
    26 00000667 696564206F6E746F20- <1>
    26 00000670 697473656C660D0A24  <1>
    27 00000679 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    27 00000682 662064657374696E61- <1>
    27 0000068B 74696F6E206C6F7374- <1>
    27 00000694 206265666F72652063- <1>
    27 0000069D 6F70790D0A24        <1>
    28                              <1> ;Copy end message. First write # files copied then this message 
    29 000006A3 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    29 000006AC 636F706965640D0A24  <1>
    30                              <1> ;Dir end1 msg. First write # files in dir then this
    31 000006B5 2046696C6528732920- <1> dirOk   db  " File(s) $"
    31 000006BE 24                  <1>
    32                              <1> ;Dir end2 msg. First write # bytes free then this message
    33 000006BF 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    33 000006C8 65650D0A24          <1>
    34 000006CD 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    35                              <1> 
    36 000006D6 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    36 000006DF 726976652073706563- <1>
    36 000006E8 696669636174696F6E- <1>
    36 000006F1 0D0A24              <1>
    37 000006F4 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    37 000006FD 6B6579207768656E20- <1>
    37 00000706 7265616479202E202E- <1>
    37 0000070F 202E2024            <1>
    38 00000713 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    38 0000071C 6172616D657465720D- <1>
    38 00000725 0A24                <1>
    39                              <1> 
    40 00000727 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    40 00000730 576564546875467269- <1>
    40 00000739 536174              <1>
    41 0000073C 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    41 00000745 206461746524        <1>
    42 0000074B 43757272656E742064- <1> curDate db  "Current date is $"
    42 00000754 6174652069732024    <1>
    43 0000075C 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    43 00000765 657720646174652024  <1>
    44 0000076E 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    44 00000777 293A2024            <1>
    45 0000077B 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    45 00000784 293A2024            <1>
    46 00000788 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    46 00000791 293A2024            <1>
    47 00000795 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    47 0000079E 2074696D6524        <1>
    48 000007A4 43757272656E742074- <1> curTime db  "Current time is $"
    48 000007AD 696D652069732024    <1>
    49 000007B5 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    49 000007BE 65772074696D653A20- <1>
    49 000007C7 24                  <1>
    50                              <1> 
    51 000007C8 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    51 000007D1 7572652028592F4E29- <1>
    51 000007DA 3F2024              <1>
    52                              <1> 
    53 000007DD 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    53 000007E6 56657273696F6E2024  <1>
    54                              <1> 
    55 000007EF 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    55 000007F8 6E2064726976652024  <1>
    56 00000801 2069732024          <1> volOk   db " is $"
    57 00000806 20686173206E6F206C- <1> volNo   db " has no label$"
    57 0000080F 6162656C24          <1>
    58                              <1> 
    59 00000814 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    59 0000081D 69726563746F72790D- <1>
    59 00000826 0A24                <1>
    60 00000828 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    60 00000831 206372656174652064- <1>
    60 0000083A 69726563746F72790D- <1>
    60 00000843 0A24                <1>
    61 00000845 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    61 0000084E 6174682C206E6F7420- <1>
    61 00000857 6469726563746F7279- <1>
    61 00000860 2C0D0A              <1>
    62 00000863 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    62 0000086C 6F7279206E6F742065- <1>
    62 00000875 6D7074790D0A24      <1>
    63 0000087C 204469726563746F72- <1> dirMain db " Directory of  $"
    63 00000885 79206F66202024      <1>
    64 0000088C 4E6F20506174682024  <1> noPath  db "No Path $"
    65 00000895 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    65 0000089E 7269766520696E2073- <1>
    65 000008A7 656172636820706174- <1>
    65 000008B0 680D0A24            <1>
    66 000008B4 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    66 000008BD 65766963650D0A24    <1>
    67 000008C5 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    67 000008CE 20666F756E640D0A24  <1>
    68 000008D7 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    68 000008E0 726F720D0A24        <1>
    69 000008E6 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    69 000008EF 6F74206265206E6573- <1>
    69 000008F8 7465640D0A24        <1>
    70 000008FE 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    70 00000907 6174652066696C6520- <1>
    70 00000910 6572726F7220647572- <1>
    70 00000919 696E6720706970650D- <1>
    70 00000922 0A24                <1>
    71 00000924 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    71 0000092D 2062696E6172792072- <1>
    71 00000936 656164732066726F6D- <1>
    71 0000093F 206120646576696365- <1>
    71 00000948 0D0A24              <1>
    72 0000094B 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    73 00000951 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    74 00000956 425245414B20697320- <1> breakIs db "BREAK is $"
    74 0000095F 24                  <1>
    75 00000960 564552494659206973- <1> verifyIs    db "VERIFY is $"
    75 00000969 2024                <1>
    76 0000096B 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    77 00000974 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    77 0000097D 617468206F72206669- <1>
    77 00000986 6C65206E616D650D0A- <1>
    77 0000098F 24                  <1>
    78 00000990 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    78 00000999 756D626572206F6620- <1>
    78 000009A2 706172616D65746572- <1>
    78 000009AB 730D0A24            <1>
    79 000009AF 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    79 000009B8 74696E6720746F2064- <1>
    79 000009C1 6576696365          <1>
    80 000009C6 08200800            <1> backSpace   db BSP," ",BSP,NUL
    81                              <1> 
    82 000009CA 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    82 000009D3 20202020202020546F- <1>
    82 000009DC 74616C207379737465- <1>
    82 000009E5 6D206D656D6F72793A- <1>
    82 000009EE 2024                <1>
    83 000009F0 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    83 000009F9 20202020202020204D- <1>
    83 00000A02 656D6F727920757365- <1>
    83 00000A0B 6420627920444F533A- <1>
    83 00000A14 2024                <1>
    84 00000A16 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    84 00000A1F 656D6F727920757365- <1>
    84 00000A28 64206279206170706C- <1>
    84 00000A31 69636174696F6E733A- <1>
    84 00000A3A 2024                <1>
    85 00000A3C 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    85 00000A45 656D6F727920726573- <1>
    85 00000A4E 657276656420627920- <1>
    85 00000A57 68617264776172653A- <1>
    85 00000A60 2024                <1>
    86 00000A62 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    86 00000A6B 202020202020202020- <1>
    86 00000A74 2020202020204D656D- <1>
    86 00000A7D 6F727920667265653A- <1>
    86 00000A86 2024                <1>
    87 00000A88 20627974657324      <1> memByte db " bytes$"
    88 00000A8F 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    88 00000A98 6F7420417373657274- <1>
    88 00000AA1 61696E20444F532045- <1>
    88 00000AAA 6E74727920506F696E- <1>
    88 00000AB3 7424                <1>
    89 00000AB5 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    89 00000ABE 416C6C6F636174696F- <1>
    89 00000AC7 6E204572726F7224    <1>
    90 00000ACF 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    90 00000AD8 4572726F7224        <1>
    91 00000ADE 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    91 00000AE7 68616C74656424      <1>
    92                              <1> 
    93                              <1> 
    94 00000AEE 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    95 00000AF2 2020202024          <1> fourSpc  db "    $"
    96 00000AF7 20202024            <1> threeSpc db "   $"
    97 00000AFB 202024              <1> twoSpc   db "  $"
    98                              <1> 
    99 00000AFE 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    99 00000B07 696679204F4E206F72- <1>
    99 00000B10 204F46460D0A24      <1>
   100 00000B17 504154483D          <1> pathEVar db "PATH="
   101 00000B1C 50524F4D50543D      <1> promptEVar  db "PROMPT="
    14                                  %include "./Source/Utils/COMMAND/Source/cmdMain.asm"
    15                              <1> commandStart:
    16                              <1>     ;Resize Allocation, jump here with endpointer in rbx
    17                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
    18                              <1>     ; that the jump to safety won't be gobbled up when multitasking
    19 00000B23 49F7D8              <1>     neg r8  ;Convert r8 to -r8
    20 00000B26 4A8D5C0311          <1>     lea rbx, qword [rbx + r8 + 11h]    ;Get # of bytes for COMMAND.COM
    21 00000B2B C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
    22 00000B2E B44A                <1>     mov ah, 4Ah ;Realloc
    23 00000B30 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    24 00000B33 CD41                <1>     int 41h
    25 00000B35 EB5A                <1>     jmp short commandMain
    26                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    27 00000B37 B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    28 00000B3C CD41                <1>     int 41h
    29 00000B3E 668905C8F4FFFF      <1>     mov word [returnCode], ax
    30                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    31 00000B45 488D155B170000      <1>     lea rdx, critErrorHandler
    32 00000B4C 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    33 00000B50 B844250000          <1>     mov eax, 2544h
    34 00000B55 CD41                <1>     int 41h
    35 00000B57 488D15D9190000      <1>     lea rdx, int43h
    36 00000B5E 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    37 00000B62 B843250000          <1>     mov eax, 2543h
    38 00000B67 CD41                <1>     int 41h
    39 00000B69 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    40 00000B70 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    41 00000B74 B842250000          <1>     mov eax, 2542h
    42 00000B79 CD41                <1>     int 41h
    43                              <1> ;Close all handles from 5->MAX
    44 00000B7B 0FB70D9DF4FFFF      <1>     movzx ecx, word [numHdls]
    45 00000B82 BB05000000          <1>     mov ebx, 5
    46                              <1> .handleClose:
    47 00000B87 B43E                <1>     mov ah, 3Eh ;File close
    48 00000B89 CD41                <1>     int 41h
    49 00000B8B FFC3                <1>     inc ebx ;Goto next file
    50 00000B8D 39CB                <1>     cmp ebx, ecx
    51 00000B8F 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    52                              <1> commandMain:
    53                              <1> ;Setup Commandline
    54 00000B91 FA                  <1>     cli
    55 00000B92 488B256CF4FFFF      <1>     mov rsp, qword [stackBottom]    ;Reset internal stack pointer pos
    56 00000B99 FB                  <1>     sti
    57 00000B9A FC                  <1>     cld ;Ensure stringops are done the right way
    58 00000B9B C6056AF5FFFF80      <1>     mov byte [inBuffer], 80h    ;Reset the buffer length
    59                              <1> .inputMain:
    60 00000BA2 E8A1140000          <1>     call clearCommandLineState
    61 00000BA7 E828110000          <1>     call printCRLF
    62 00000BAC E86F140000          <1>     call printPrompt
    63                              <1> 
    64 00000BB1 488D1554F5FFFF      <1>     lea rdx, inBuffer
    65 00000BB8 B80A0C0000          <1>     mov eax, 0C0Ah  ;Do Buffered input
    66 00000BBD CD41                <1>     int 41h
    67 00000BBF E810110000          <1>     call printCRLF  ;Note we have accepted input
    68                              <1> 
    69                              <1> ;First check we had something typed in of length greater than 1
    70                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    71 00000BC4 803D42F5FFFF01      <1>     cmp byte [inBuffer + 1], 1  ;Check input length valid
    72 00000BCB 742C                <1>     je .dfltErrExit
    73 00000BCD 72D3                <1>     jb .inputMain
    74                              <1>     ;Copy over the input text
    75 00000BCF 488D3536F5FFFF      <1>     lea rsi, inBuffer
    76 00000BD6 488D3DAFF5FFFF      <1>     lea rdi, cmdBuffer
    77 00000BDD B980000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    78 00000BE2 F3A4                <1>     rep movsb
    79 00000BE4 31C0                <1>     xor eax, eax
    80 00000BE6 668905AAF4FFFF      <1>     mov word [cmdStartOff], ax  ;Clear start and end Off positions
    81 00000BED E814000000          <1>     call parseInput
    82 00000BF2 E8AD010000          <1>     call doCommandLine
    83 00000BF7 EBA9                <1>     jmp short .inputMain
    84                              <1> .dfltErrExit:
    85 00000BF9 488D15C7F9FFFF      <1>     lea rdx, badCmd
    86 00000C00 B409                <1>     mov ah, 09h
    87 00000C02 CD41                <1>     int 41h
    88 00000C04 EB9C                <1>     jmp short .inputMain
    89                              <1> 
    90                              <1> parseInput:
    91                              <1> ;EndOff is set up before entering this part
    92                              <1> ;Copies a nicely formatted version of the input command line
    93                              <1> ; without any redirections to psp.dta
    94 00000C06 488D3581F5FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
    95 00000C0D 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
    96 00000C14 0FB61D7DF4FFFF      <1>     movzx ebx, byte [cmdEndOff] ;Get the old end offset
    97 00000C1B 4801DE              <1>     add rsi, rbx    ;Move rsi to the start of this new command
    98 00000C1E E8EE130000          <1>     call skipSpaces ;Skip any preceeding spaces
    99 00000C23 66AD                <1>     lodsw   ;Get the first two chars into ax
   100 00000C25 6689057BF4FFFF      <1>     mov word [cmdDrvSpec], ax ;Store these chars as if they are the drvspec
   101 00000C2C 4881EE02000000      <1>     sub rsi, 2  ;Go back to the start of the command
   102 00000C33 56                  <1>     push rsi
   103 00000C34 57                  <1>     push rdi
   104 00000C35 488D3DD0F5FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   105 00000C3C 57                  <1>     push rdi
   106 00000C3D E845030000          <1>     call copyCommandTailItem
   107 00000C42 5F                  <1>     pop rdi
   108 00000C43 9C                  <1>     pushfq  ;Save the CF state
   109 00000C44 E850130000          <1>     call strlen
   110 00000C49 FFC9                <1>     dec ecx ;Drop the terminating char from the count
   111 00000C4B 58                  <1>     pop rax ;Get the CF state in al
   112 00000C4C 5F                  <1>     pop rdi
   113 00000C4D 5E                  <1>     pop rsi
   114 00000C4E F3A4                <1>     rep movsb   ;Now we copy the command into the psp command line
   115 00000C50 A801                <1>     test al, 1  ;Was CF set?
   116 00000C52 0F8586000000        <1>     jnz .exit   ;If an embedded CR was found in the filename, exit!
   117                              <1> .cmdLineProcess:
   118 00000C58 E8B4130000          <1>     call skipSpaces ;Go to the next char in the input line
   119                              <1> .redirFound:
   120 00000C5D AC                  <1>     lodsb   ;Get first non-space char (setupRedir skips spaces before ret)
   121 00000C5E 3C0D                <1>     cmp al, CR  ;If this was a CR, we stop processing
   122 00000C60 747C                <1>     je .exit
   123 00000C62 E8B3020000          <1>     call checkAndSetupRedir ;If not, check if we have a redir element
   124 00000C67 7275                <1>     jc .exit    ;CF=CY only if pipe, which is equivalent to CR when processing
   125 00000C69 74F2                <1>     jz .redirFound  ;If we had a < > or >>, proceed to check if next char CR
   126 00000C6B B020                <1>     mov al, " "
   127 00000C6D AA                  <1>     stosb   ;Store a space to make space for the command file parameter
   128 00000C6E 48FFCE              <1>     dec rsi ;Move rsi back to the first char
   129 00000C71 F60533F4FFFFFF      <1>     test byte [arg1Flg], -1
   130 00000C78 7521                <1>     jnz .arg2
   131                              <1> .arg1:
   132 00000C7A C6052AF4FFFFFF      <1>     mov byte [arg1Flg], -1
   133 00000C81 E88B130000          <1>     call skipSpaces
   134 00000C86 4889F0              <1>     mov rax, rsi
   135 00000C89 488D1DFCF4FFFF      <1>     lea rbx, cmdBuffer
   136 00000C90 4829D8              <1>     sub rax, rbx
   137 00000C93 880513F4FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   138 00000C99 EB2A                <1>     jmp short .argCommon
   139                              <1> .arg2:
   140 00000C9B F6050CF4FFFFFF      <1>     test byte [arg2Flg], -1
   141 00000CA2 7521                <1>     jnz .argCommon
   142 00000CA4 C60503F4FFFFFF      <1>     mov byte [arg2Flg], -1
   143 00000CAB E861130000          <1>     call skipSpaces
   144 00000CB0 4889F0              <1>     mov rax, rsi
   145 00000CB3 488D1DD2F4FFFF      <1>     lea rbx, cmdBuffer
   146 00000CBA 4829D8              <1>     sub rax, rbx
   147 00000CBD 8805ECF3FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   148 00000CC3 EB00                <1>     jmp short .argCommon
   149                              <1> .argCommon:
   150                              <1>     ;More than two arguments? Do nothing more than just copy it
   151                              <1>     ; over. If we encounter an embedded CR, exit there too
   152 00000CC5 E847130000          <1>     call skipSpaces
   153 00000CCA 803E0D              <1>     cmp byte [rsi], CR  ;Are we at the end of the commandline?
   154 00000CCD 740F                <1>     je .exit
   155                              <1>     ;If not, we copy it over
   156 00000CCF E8B3020000          <1>     call copyCommandTailItem    ;Stores a terminating null we dont want
   157 00000CD4 488D7FFF            <1>     lea rdi, qword [rdi - 1]    ;Point back at the inserted terminating null
   158 00000CD8 0F837AFFFFFF        <1>     jnc .cmdLineProcess
   159                              <1> .exit:
   160 00000CDE 488D1DA7F4FFFF      <1>     lea rbx, cmdBuffer
   161 00000CE5 48FFCE              <1>     dec rsi
   162 00000CE8 4829DE              <1>     sub rsi, rbx    ;Get the offset into the command line
   163 00000CEB 89F3                <1>     mov ebx, esi
   164 00000CED 881DA5F3FFFF        <1>     mov byte [cmdEndOff], bl    ;Store the offset to the terminating char
   165 00000CF3 B00D                <1>     mov al, CR
   166 00000CF5 AA                  <1>     stosb   ;Store the terminating CR in the psp command line
   167                              <1>     ;Now compute the command line length 
   168 00000CF6 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine] 
   169 00000CFD B00D                <1>     mov al, CR
   170 00000CFF 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   171 00000D01 FFC9                <1>     dec ecx ;rcx = -1
   172 00000D03 F2AE                <1>     repne scasb
   173 00000D05 F7D1                <1>     not ecx
   174 00000D07 FEC9                <1>     dec cl  ;Dont include terminating CR
   175 00000D09 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   176 00000D10 880F                <1>     mov byte [rdi], cl
   177                              <1>     ;Before returning, we copy the command name to cmdName
   178 00000D12 488D3DF3F4FFFF      <1>     lea rdi, cmdPathSpec
   179 00000D19 4889FB              <1>     mov rbx, rdi    ;Use rbx as the ptr to the first char in the commandspec
   180 00000D1C 30C0                <1>     xor al, al  ;Search for the terminating null
   181 00000D1E B94F000000          <1>     mov ecx, fileSpecZL ;Max number of chars the length could be
   182 00000D23 F2AE                <1>     repne scasb
   183 00000D25 48FFCF              <1>     dec rdi ;Go to the last char in the command
   184 00000D28 4889FE              <1>     mov rsi, rdi
   185 00000D2B FD                  <1>     std ;Now we go backwards to where rsi = rbx OR byte [rsi] = pathSep
   186                              <1> .keepSearching:
   187 00000D2C AC                  <1>     lodsb
   188 00000D2D 3A05F0F2FFFF        <1>     cmp al, byte [pathSep]
   189 00000D33 740B                <1>     je .cmdStartFnd
   190 00000D35 4839DE              <1>     cmp rsi, rbx
   191 00000D38 75F2                <1>     jne .keepSearching
   192 00000D3A 48FFCE              <1>     dec rsi ;Go back two to go forwards again
   193 00000D3D 48FFCE              <1>     dec rsi
   194                              <1> .cmdStartFnd:
   195 00000D40 48FFC6              <1>     inc rsi
   196 00000D43 48FFC6              <1>     inc rsi ;Go past the pathsep
   197 00000D46 FC                  <1>     cld ;Go the sane way again
   198 00000D47 488D3D26F5FFFF      <1>     lea rdi, qword [cmdName + 1]    ;First byte is for the length of the name
   199 00000D4E 57                  <1>     push rdi    ;Cleanse the field before usage (not strictly necessary)
   200 00000D4F B90E000000          <1>     mov ecx, cmdNameL
   201 00000D54 30C0                <1>     xor al, al
   202 00000D56 F3AA                <1>     rep stosb
   203 00000D58 5F                  <1>     pop rdi
   204 00000D59 31C9                <1>     xor ecx, ecx
   205 00000D5B 56                  <1>     push rsi    ;Save the location of the start byte of the command name
   206                              <1> .cmdGetChar:
   207 00000D5C AC                  <1>     lodsb
   208 00000D5D 84C0                <1>     test al, al ;Did we find the terminating null?
   209 00000D5F 7411                <1>     jz .nameLenFnd
   210 00000D61 3C2E                <1>     cmp al, "." ;Extension sep also terminates
   211 00000D63 740D                <1>     je .nameLenFnd
   212 00000D65 24DF                <1>     and al, 0DFh    ;Else uppercase the char
   213 00000D67 AA                  <1>     stosb   ;and store it
   214 00000D68 FFC1                <1>     inc ecx
   215 00000D6A 81F90B000000        <1>     cmp ecx, 11 ;Max command length is 11
   216 00000D70 72EA                <1>     jb .cmdGetChar
   217                              <1> .nameLenFnd:
   218 00000D72 880DFBF4FFFF        <1>     mov byte [cmdName], cl  ;Store the name length now
   219                              <1>     ;Now finally, create a FCB filespec
   220 00000D78 488D3DDCF4FFFF      <1>     lea rdi, fcbCmdSpec
   221 00000D7F 57                  <1>     push rdi
   222 00000D80 B90B000000          <1>     mov ecx, fcbNameL
   223 00000D85 B020                <1>     mov al, " " ;Fill with spaces
   224 00000D87 F3AA                <1>     rep stosb
   225 00000D89 5F                  <1>     pop rdi
   226 00000D8A 5E                  <1>     pop rsi ;Get back the location of the start byte of the command name
   227 00000D8B E8C9120000          <1>     call asciiToFCB
   228 00000D90 488D35C4F4FFFF      <1>     lea rsi, fcbCmdSpec
   229 00000D97 488D3DC8F4FFFF      <1>     lea rdi, cmdSpec
   230 00000D9E E811130000          <1>     call FCBToAsciiz
   231                              <1>     return
    19                              <2> %%_ret:
    20 00000DA3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   232                              <1> 
   233                              <1> doCommandLine:
   234 00000DA4 488D35E3F3FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
   235 00000DAB 488D3DFFF2FFFF      <1>     lea rdi, cmdFcb
   236 00000DB2 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks
   237 00000DB7 CD41                <1>     int 41h
   238 00000DB9 0FB71DE7F2FFFF      <1>     movzx ebx, word [cmdDrvSpec]    ;Get the drive specifier
   239 00000DC0 80FF3A              <1>     cmp bh, ":"
   240 00000DC3 752E                <1>     jne .noDriveSpecified
   241 00000DC5 88DA                <1>     mov dl, bl      ;Move the drive letter in dl
   242 00000DC7 80E2DF              <1>     and dl, 0DFh    ;Make the drive letter upper case
   243 00000DCA 80EA41              <1>     sub dl, "A"     ;And make it a 0 based drive letter
   244 00000DCD 3CFF                <1>     cmp al, -1  ;Int 41h returns AL = -1 if bad drive specified
   245 00000DCF 7415                <1>     je .badDrive
   246                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   247 00000DD1 803D9BF4FFFF02      <1>     cmp byte [cmdName], 2
   248 00000DD8 7519                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   249 00000DDA B40E                <1>     mov ah, 0Eh ;Set drive to dl
   250 00000DDC CD41                <1>     int 41h 
   251 00000DDE B419                <1>     mov ah, 19h
   252 00000DE0 CD41                <1>     int 41h     ;Get current drive
   253 00000DE2 38D0                <1>     cmp al, dl  ;If the drive was set, all is well
   254                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000DE4 74(A3)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   255                              <1> .badDrive:
   256 00000DE6 488D15E9F8FFFF      <1>     lea rdx, badDrv
   257 00000DED B409                <1>     mov ah, 09h
   258 00000DEF CD41                <1>     int 41h
   259 00000DF1 F9                  <1>     stc
   260                              <1>     return
    19                              <2> %%_ret:
    20 00000DF2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   261                              <1> .noDriveSpecified:
   262                              <1> ;Now we set the two FCB's in the command line
   263 00000DF3 F605B1F2FFFFFF      <1>     test byte [arg1Flg], -1
   264 00000DFA 744D                <1>     jz .fcbArgsDone
   265 00000DFC 0FB605A9F2FFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   266 00000E03 488D3582F3FFFF      <1>     lea rsi, cmdBuffer
   267 00000E0A 4801C6              <1>     add rsi, rax    ;Point to first argument
   268 00000E0D 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   269 00000E11 B801290000          <1>     mov eax, 2901h
   270 00000E16 CD41                <1>     int 41h
   271 00000E18 88058FF2FFFF        <1>     mov byte [arg1FCBret], al
   272 00000E1E F60589F2FFFFFF      <1>     test byte [arg2Flg], -1
   273 00000E25 7422                <1>     jz .fcbArgsDone
   274 00000E27 0FB60581F2FFFF      <1>     movzx eax, byte [arg2Off]
   275 00000E2E 488D3557F3FFFF      <1>     lea rsi, cmdBuffer
   276 00000E35 4801C6              <1>     add rsi, rax    ;Point to first argument
   277 00000E38 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   278 00000E3C B801290000          <1>     mov eax, 2901h
   279 00000E41 CD41                <1>     int 41h
   280 00000E43 880567F2FFFF        <1>     mov byte [arg2FCBret], al
   281                              <1> .fcbArgsDone:
   282 00000E49 488D353CF3FFFF      <1>     lea rsi, cmdBuffer
   283 00000E50 488D1D1CF4FFFF      <1>     lea rbx, cmdName
   284 00000E57 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   285 00000E5C BAFFFF0000          <1>     mov edx, 0FFFFh
   286 00000E61 B5FF                <1>     mov ch, -1
   287 00000E63 CD4F                <1>     int 4Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   288                              <1>             ;        al = 0  if the command should be executed as usual
   289 00000E65 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   290 00000E6A BAFFFF0000          <1>     mov edx, 0FFFFh
   291 00000E6F 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   292 00000E71 CD4F                <1>     int 4Fh
   293 00000E73 741D                <1>     jz .executeInternal
   294                              <1>     ;Here we execute externally and return to the prompt
   295                              <1>     ; as if it was an internal execution
   296 00000E75 488D3590F2FFFF      <1>     lea rsi, inBuffer ;Point to this built buffer
   297 00000E7C 488D1D2EF2FFFF      <1>     lea rbx, cmdFcb
   298 00000E83 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   299 00000E88 BAFFFF0000          <1>     mov edx, 0FFFFh
   300 00000E8D B5FF                <1>     mov ch, -1
   301 00000E8F CD4F                <1>     int 4Fh 
   302                              <1>     return
    19                              <2> %%_ret:
    20 00000E91 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   303                              <1> .executeInternal:
   304                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   305                              <1> ;rsi points after the command terminator in the command tail
   306 00000E92 488D1D2EF6FFFF      <1>     lea rbx, functionTable
   307                              <1> .nextEntry:
   308 00000E99 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   309 00000E9C 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   310 00000E9F 0F84E60C0000        <1>     je launchChild      ;If so, check externally now
   311 00000EA5 380DC8F3FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   312 00000EAB 7529                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   313                              <1>     ;Here they have the same length so lets see if the name is the same
   314 00000EAD 56                  <1>     push rsi
   315                              <1>     ;ecx has the length to compare
   316 00000EAE 51                  <1>     push rcx
   317 00000EAF 488D7301            <1>     lea rsi, qword [rbx + 1]
   318 00000EB3 488D3DBAF3FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   319 00000EBA F3A6                <1>     rep cmpsb   ;Check the strings are equal
   320 00000EBC 59                  <1>     pop rcx
   321 00000EBD 5E                  <1>     pop rsi
   322 00000EBE 7516                <1>     jne .gotoNextEntry
   323                              <1>     ;Here it was found both strings are equal
   324 00000EC0 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   325 00000EC5 480FB71F            <1>     movzx rbx, word [rdi]
   326 00000EC9 488D3D30F1FFFF      <1>     lea rdi, startLbl
   327 00000ED0 4801FB              <1>     add rbx, rdi
   328 00000ED3 FFD3                <1>     call rbx    ;Call this function...
   329                              <1>     return  ;... and return
    19                              <2> %%_ret:
    20 00000ED5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   330                              <1> .gotoNextEntry:
   331 00000ED6 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   332 00000EDD 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   333 00000EE0 EBB7                <1>     jmp short .nextEntry
   334                              <1> .dfltErrExit:
   335 00000EE2 488D15DEF6FFFF      <1>     lea rdx, badCmd
   336 00000EE9 B409                <1>     mov ah, 09h
   337 00000EEB CD41                <1>     int 41h
   338                              <1>     return
    19                              <2> %%_ret:
    20 00000EED C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   339                              <1> 
   340                              <1> 
   341                              <1> checkExtensionExec:
   342                              <1> ;Checks the extension field of cmdFcb is .COM, .EXE, .BAT in that order
   343                              <1> ;Returns: ZF=ZE if executable. ZF=NZ if not executable.
   344                              <1> ;         If ZF=ZE and CF=CY => Batch file
   345 00000EEE 8B05C6F1FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   346 00000EF4 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   347 00000EF9 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   348 00000EFE 25DFDFDFFF          <1>     and eax, 0FFDFDFDFh ;Uppercase the three letters
   349 00000F03 3D434F4D20          <1>     cmp eax, "COM "
   350                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000F08 74(ED)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   351 00000F0A 3D45584520          <1>     cmp eax, "EXE "
   352                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000F0F 74(ED)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   353 00000F11 3D42415420          <1>     cmp eax, "BAT "
   354                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000F16 75(ED)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   355 00000F18 F9                  <1>     stc
   356                              <1>     return
    19                              <2> %%_ret:
    20 00000F19 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   357                              <1> 
   358                              <1> checkAndSetupRedir:
   359                              <1> ;Checks and sets up redir as appropriate
   360                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   361                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   362                              <1> ;Output: ZF=NZ => No redir
   363                              <1> ;        ZF=ZY => Redir
   364                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   365                              <1> ;CF=CY if pipe set or an embedded CR found
   366 00000F1A 57                  <1>     push rdi
   367 00000F1B 3C3C                <1>     cmp al, "<"
   368 00000F1D 740B                <1>     je .inputRedir
   369 00000F1F 3C3E                <1>     cmp al, ">"
   370 00000F21 742A                <1>     je .outputRedir
   371 00000F23 3C7C                <1>     cmp al, "|"
   372 00000F25 7454                <1>     je .pipeSetup
   373 00000F27 F8                  <1>     clc
   374                              <1> .redirExit:
   375 00000F28 5F                  <1>     pop rdi
   376                              <1>     return
    19                              <2> %%_ret:
    20 00000F29 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   377                              <1> .inputRedir:
   378 00000F2A C60578F1FFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   379 00000F31 488D3D49F3FFFF      <1>     lea rdi, rdrInFilespec
   380 00000F38 E8D4100000          <1>     call skipSpaces ;Skip spaces between < and the filespec
   381 00000F3D E845000000          <1>     call copyCommandTailItem
   382 00000F42 72E4                <1>     jc .redirExit
   383 00000F44 E8C8100000          <1>     call skipSpaces
   384 00000F49 30C0                <1>     xor al, al
   385 00000F4B EBDB                <1>     jmp short .redirExit
   386                              <1> .outputRedir:
   387 00000F4D C60556F1FFFF01      <1>     mov byte [redirOut], 1
   388 00000F54 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   389 00000F57 7506                <1>     jne .notDouble
   390 00000F59 FE054BF1FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   391                              <1> .notDouble:
   392 00000F5F 488D3D6AF3FFFF      <1>     lea rdi, rdrOutFilespec
   393 00000F66 E8A6100000          <1>     call skipSpaces
   394 00000F6B E817000000          <1>     call copyCommandTailItem
   395 00000F70 72B6                <1>     jc .redirExit
   396 00000F72 E89A100000          <1>     call skipSpaces
   397 00000F77 30C0                <1>     xor al, al
   398 00000F79 EBAD                <1>     jmp short .redirExit
   399                              <1> .pipeSetup:
   400 00000F7B C60517F1FFFFFF      <1>     mov byte [pipeFlag], -1
   401 00000F82 30C0                <1>     xor al, al
   402 00000F84 F9                  <1>     stc
   403 00000F85 5F                  <1>     pop rdi
   404                              <1>     return
    19                              <2> %%_ret:
    20 00000F86 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   405                              <1> 
   406                              <1> copyCommandTailItem:
   407                              <1> ;Copies a sentence from the command tail until a terminator is found.
   408                              <1> ;Stores a terminating null in the destination
   409                              <1> ;Input: rsi = Start of the item to copy
   410                              <1> ;       rdi = Location for copy
   411                              <1> ;Output: Sentence copied with a null terminator inserted.
   412                              <1> ; If CF=CY, embedded CR encountered
   413 00000F87 AC                  <1>     lodsb
   414 00000F88 3C0D                <1>     cmp al, CR
   415 00000F8A 741A                <1>     je .endOfInput
   416 00000F8C E84C100000          <1>     call isALterminator
   417 00000F91 741A                <1>     jz .exit
   418 00000F93 3A058AF0FFFF        <1>     cmp al, byte [pathSep]
   419 00000F99 7412                <1>     je .exit
   420 00000F9B 3A0583F0FFFF        <1>     cmp al, byte [switchChar]
   421 00000FA1 740A                <1>     je .exit
   422 00000FA3 AA                  <1>     stosb
   423 00000FA4 EBE1                <1>     jmp short copyCommandTailItem
   424                              <1> .endOfInput:
   425 00000FA6 E802000000          <1>     call .exit
   426 00000FAB F9                  <1>     stc 
   427                              <1>     return
    19                              <2> %%_ret:
    20 00000FAC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   428                              <1> .exit:
   429 00000FAD 30C0                <1>     xor al, al
   430 00000FAF AA                  <1>     stosb
   431                              <1>     return
    19                              <2> %%_ret:
    20 00000FB0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   432                              <1> 
   433                              <1> 
   434                              <1> int4Eh:   ;Interrupt interface for parsing and executing command lines
   435                              <1> ;Input: rsi points to the count byte of a command line
   436 00000FB1 4150                <1>     push r8
   437 00000FB3 4151                <1>     push r9
   438 00000FB5 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   439 00000FB7 CD41                <1>     int 41h
   440 00000FB9 52                  <1>     push rdx    ;Save on the stack
   441 00000FBA 488D1D3FEFFFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   442 00000FC1 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   443 00000FC3 CD41                <1>     int 41h
   444 00000FC5 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   445 00000FC8 4989D9              <1>     mov r9, rbx
   446 00000FCB 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   447 00000FD2 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   448 00000FD7 F348A5              <1>     rep movsq   ;Copy command line over
   449                              <1>     ;call doCommandLine
   450 00000FDA 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   451 00000FDB B450                <1>     mov ah, 50h ;Set Current PSP
   452 00000FDD CD41                <1>     int 41h
   453 00000FDF 4159                <1>     pop r9
   454 00000FE1 4158                <1>     pop r8
   455 00000FE3 48CF                <1>     iretq
    15                                  %include "./Source/Utils/COMMAND/Source/cmdFunc.asm"
    16                              <1> ;Note! Each function must setup the DTA to use for itself.
    17                              <1> ;There is no requirement to preserve the DTA across a call.
    18                              <1> ;Only the Int 4Eh entry point will preserve the callers DTA.
    19                              <1> 
    20                              <1> ;Common Error Messages, jumped to to return from
    21                              <1> badParamError:
    22 00000FE5 488D1527F7FFFF      <1>     lea rdx, badParm
    23 00000FEC EB22                <1>     jmp short badCmn
    24                              <1> badDriveError:
    25 00000FEE 488D15E1F6FFFF      <1>     lea rdx, badDrv
    26 00000FF5 EB19                <1>     jmp short badCmn
    27                              <1> badArgError:
    28 00000FF7 488D1592F9FFFF      <1>     lea rdx, badArgs
    29 00000FFE EB10                <1>     jmp short badCmn
    30                              <1> badFileError:
    31 00001000 488D156DF9FFFF      <1>     lea rdx, badSpec
    32 00001007 EB07                <1>     jmp short badCmn
    33                              <1> badDirError:
    34 00001009 488D1504F8FFFF      <1>     lea rdx, badDir
    35                              <1> badCmn:
    36 00001010 B800090000          <1>     mov eax, 0900h
    37 00001015 CD41                <1>     int 41h
    38 00001017 F9                  <1>     stc ;Return with CY => Error occured
    39                              <1>     return
    19                              <2> %%_ret:
    20 00001018 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    40                              <1> 
    41                              <1> dir:
    42 00001019 C6057FF3FFFF00      <1>     mov byte [dirPrnType], 0    ;Clear DIR flags
    43 00001020 C60579F3FFFF00      <1>     mov byte [dirLineCtr], 0
    44 00001027 C60573F3FFFF00      <1>     mov byte [dirFileCtr], 0
    45 0000102E C605EEF3FFFF00      <1>     mov byte [dirPathArg], 0    ;Null terminate the start of the buffer
    46 00001035 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    46 0000103E 3F                  <1>
    47 0000103F 488D3D5DF4FFFF      <1>     lea rdi, dirSrchPat ;Start also by initialising the search pattern
    48 00001046 48AB                <1>     stosq
    49 00001048 48FFC7              <1>     inc rdi ;Go past dot
    50 0000104B 668907              <1>     mov word [rdi], ax
    51 0000104E 884702              <1>     mov byte [rdi + 2], al
    52                              <1>     ;Start by scanning for the switches
    53 00001051 488D3D35F1FFFF      <1>     lea rdi, cmdBuffer + 1  ;Goto command line input chars count
    54 00001058 0FB60F              <1>     movzx ecx, byte [rdi]   ;Get number of chars typed
    55 0000105B 48FFC7              <1>     inc rdi ;Goto first char typed in
    56 0000105E 4889FE              <1>     mov rsi, rdi    ;Use rsi as start of buffer counter
    57 00001061 8A05BDEFFFFF        <1>     mov al, byte [switchChar]   ;Scan for switchchars
    58                              <1> .switchScan:
    59 00001067 F2AE                <1>     repne scasb ;Scan for a switchchar
    60 00001069 67E322              <1>     jecxz .switchScanDone
    61 0000106C 8A07                <1>     mov al, byte [rdi]  ;Get the byte pointed to by rdi
    62 0000106E 24DF                <1>     and al, 0DFh    ;UC it
    63 00001070 3C57                <1>     cmp al, "W" ;Wide print mode?
    64 00001072 7509                <1>     jne .notWideSw
    65 00001074 800D24F3FFFF01      <1>     or byte [dirPrnType], 1 ;Set the correct bit
    66 0000107B EBEA                <1>     jmp short .switchScan
    67                              <1> .notWideSw:
    68 0000107D 3C50                <1>     cmp al, "P" ;Pause mode?
    69 0000107F 0F8560FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    70 00001085 800D13F3FFFF02      <1>     or byte [dirPrnType], 2 ;Set correct bit
    71 0000108C EBD9                <1>     jmp short .switchScan
    72                              <1> .switchScanDone:
    73                              <1> ;If no args, only switches, we search CWD
    74                              <1> ;If one arg, search that 
    75                              <1> ;If more than one, fail
    76 0000108E 488D35F9F0FFFF      <1>     lea rsi, cmdBuffer + 2
    77 00001095 E8770F0000          <1>     call skipSpaces ;Skip leading spaces
    78 0000109A 4881C603000000      <1>     add rsi, 3  ;Go past the DIR (always three chars)
    79                              <1> .loop:
    80 000010A1 E86B0F0000          <1>     call skipSpaces ;Skip spaces after
    81 000010A6 AC                  <1>     lodsb   ;Get first non space char
    82 000010A7 E8540F0000          <1>     call isALEndOfCommand   ;If this is the end char CR or "|", exit
    83 000010AC 7442                <1>     jz .eocNoNull
    84 000010AE 3A0570EFFFFF        <1>     cmp al, byte [switchChar]  ;Is al a switch char?
    85 000010B4 7509                <1>     jne .notSwitch
    86                              <1>     ;Now we skip the switch if it was a switch
    87 000010B6 E8ED0E0000          <1>     call findTerminatorOrEOC    ;Go past the switch
    88 000010BB 7233                <1>     jc .eocNoNull  ;If we reach the EOC, exit,
    89 000010BD EBE2                <1>     jmp short .loop
    90                              <1> .notSwitch:
    91                              <1>     ;If not a switch, should be a path. Copy to buffer and keep searching
    92 000010BF 803D5DF3FFFF00      <1>     cmp byte [dirPathArg], 0    ;If a second path provided, error
    93 000010C6 0F852BFFFFFF        <1>     jne badArgError
    94 000010CC 488D3D50F3FFFF      <1>     lea rdi, dirPathArg ;Store the path to search here AS WRITTEN BY USER
    95 000010D3 48FFCE              <1>     dec rsi ;Go back to the start of the string
    96                              <1> .nameCopy:
    97 000010D6 AC                  <1>     lodsb
    98 000010D7 E8240F0000          <1>     call isALEndOfCommand
    99 000010DC 740F                <1>     jz .eocReached
   100 000010DE E8FA0E0000          <1>     call isALterminator
   101 000010E3 7403                <1>     jz .terminateCopy
   102 000010E5 AA                  <1>     stosb
   103 000010E6 EBEE                <1>     jmp short .nameCopy
   104                              <1> .terminateCopy:
   105 000010E8 31C0                <1>     xor eax, eax
   106 000010EA AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   107 000010EB EBB4                <1>     jmp short .loop ;Now search if another 
   108                              <1> .eocReached:
   109 000010ED 31C0                <1>     xor eax, eax
   110 000010EF AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   111                              <1> .eocNoNull:
   112 000010F0 803D2CF3FFFF00      <1>     cmp byte [dirPathArg], 0    ;If no path provided, use CWD for current drive
   113 000010F7 7434                <1>     je .currentDrv
   114                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   115 000010F9 488D3523F3FFFF      <1>     lea rsi, dirPathArg
   116 00001100 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   117 00001104 7527                <1>     jne .currentDrv
   118                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   119 00001106 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   120 0000110B 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   121 0000110F B801290000          <1>     mov eax, 2901h   ;Parse filename
   122 00001114 CD41                <1>     int 41h
   123 00001116 3CFF                <1>     cmp al, -1
   124 00001118 0F84D0FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   125                              <1>     ;Else the drive in the fcb is valid
   126 0000111E 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   127 00001123 FEC8                <1>     dec al  ;Convert to 0 based drive number
   128 00001125 880577F2FFFF        <1>     mov byte [dirDrv], al
   129 0000112B EB0B                <1>     jmp short .dirPrintVol
   130                              <1> .currentDrv:
   131 0000112D E8620E0000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   132 00001132 88056AF2FFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   133                              <1> .dirPrintVol:
   134 00001138 0FB60563F2FFFF      <1>     movzx eax, byte [dirDrv] 
   135 0000113F E81D070000          <1>     call volume.dirEP
   136 00001144 803DD8F2FFFF00      <1>     cmp byte [dirPathArg], 0    ;Null path here, 
   137 0000114B 7409                <1>     je .printCWD
   138 0000114D 803DD2F2FFFF00      <1>     cmp byte [dirPathArg + 3], 0    ;Was this X:,0?
   139 00001154 7400                <1>     je .printCWD
   140                              <1>     ;Here we have a path
   141                              <1>     ;Temp measure, we just fall through ignoring the path provided
   142                              <1> .printCWD:
   143 00001156 8A1546F2FFFF        <1>     mov dl, byte [dirDrv]
   144 0000115C 88D0                <1>     mov al, dl
   145 0000115E 0441                <1>     add al, "A"
   146 00001160 B43A                <1>     mov ah, ":"
   147 00001162 668905B6F1FFFF      <1>     mov word [searchSpec], ax
   148 00001169 8A05B4EEFFFF        <1>     mov al, byte [pathSep]
   149 0000116F 8805ACF1FFFF        <1>     mov byte [searchSpec + 2], al
   150 00001175 488D35A6F1FFFF      <1>     lea rsi, searchSpec + 3  ;Make space for a X:"\"
   151 0000117C B447                <1>     mov ah, 47h ;Get Current Working Directory
   152 0000117E FEC2                <1>     inc dl  ;Convert to 1 based number
   153 00001180 CD41                <1>     int 41h
   154 00001182 488D3D96F1FFFF      <1>     lea rdi, searchSpec
   155 00001189 E80B0E0000          <1>     call strlen
   156 0000118E FFC9                <1>     dec ecx
   157 00001190 C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   158 00001194 488D15E1F6FFFF      <1>     lea rdx, dirMain
   159 0000119B B409                <1>     mov ah, 09h
   160 0000119D CD41                <1>     int 41h
   161 0000119F 4889FA              <1>     mov rdx, rdi    ;Print the current directory we are working on
   162 000011A2 B409                <1>     mov ah, 09h
   163 000011A4 CD41                <1>     int 41h
   164 000011A6 488D15C0F3FFFF      <1>     lea rdx, crlf2
   165 000011AD B409                <1>     mov ah, 09h
   166 000011AF CD41                <1>     int 41h
   167 000011B1 E801000000          <1>     call .searchForFile
   168                              <1>     return
    19                              <2> %%_ret:
    20 000011B6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   169                              <1>     ;If we get no path spec or just a X: path spec then we 
   170                              <1>     ; search the current working directory for that pathspec
   171                              <1>     ;If we get an actual pathspec, we first save the CWD for that drive
   172                              <1>     ; and then we try to make the pathspec the CWD. 
   173                              <1>     ;   If it works, we then search *.* in that folder and return the og CWD.
   174                              <1>     ;   If it fails, we then search one level up, for the search pattern
   175                              <1>     ;    that we compute.
   176                              <1> 
   177                              <1>     
   178                              <1>     ;Now we need to print the path to the folder we will be searching in
   179                              <1> .searchForFile:
   180                              <1>     ;Now we search for the files
   181                              <1>     ;RCX must have the number of chars to the end of the pathspec
   182 000011B7 488D3D61F1FFFF      <1>     lea rdi, searchSpec
   183 000011BE 8A055FEEFFFF        <1>     mov al, byte [pathSep]
   184 000011C4 38440FFF            <1>     cmp byte [rdi + rcx - 1], al
   185 000011C8 7405                <1>     je .noAddSlash  ;Deals with special case of root dir
   186 000011CA 88040F              <1>     mov byte [rdi + rcx], al
   187 000011CD FFC1                <1>     inc ecx
   188                              <1> .noAddSlash:
   189 000011CF 488D3C0F            <1>     lea rdi, qword [rdi + rcx]
   190 000011D3 488D35C9F2FFFF      <1>     lea rsi, dirSrchPat
   191 000011DA 4889FA              <1>     mov rdx, rdi    ;Ptr to search for in rdx
   192 000011DD 48A5                <1>     movsq
   193 000011DF A5                  <1>     movsd
   194 000011E0 30C0                <1>     xor al, al
   195 000011E2 AA                  <1>     stosb   ;Store the terminating null
   196 000011E3 B911000000          <1>     mov ecx, dirReadOnly | dirDirectory
   197 000011E8 B44E                <1>     mov ah, 4Eh ;Find first
   198 000011EA CD41                <1>     int 41h
   199 000011EC 720B                <1>     jc .dirNoMoreFiles
   200                              <1> .findNext:
   201 000011EE E876000000          <1>     call .dirPrintFileData  ;Print the file information
   202 000011F3 B44F                <1>     mov ah, 4Fh
   203 000011F5 CD41                <1>     int 41h
   204 000011F7 73F5                <1>     jnc .findNext 
   205                              <1> .dirNoMoreFiles:
   206 000011F9 F6059FF1FFFF01      <1>     test byte [dirPrnType], 1
   207 00001200 740B                <1>     jz .dirNoEndNewLine
   208 00001202 488D1561F3FFFF      <1>     lea rdx, crlf   ;Only need this for /W
   209 00001209 B409                <1>     mov ah, 09h
   210 0000120B CD41                <1>     int 41h
   211                              <1> .dirNoEndNewLine:
   212                              <1>     ;Now we print the number of files and the number of bytes on the disk
   213 0000120D 488D15DEF8FFFF      <1>     lea rdx, fourSpc
   214 00001214 B409                <1>     mov ah, 09h
   215 00001216 CD41                <1>     int 41h
   216 00001218 B409                <1>     mov ah, 09h ;Print four Spaces twice
   217 0000121A CD41                <1>     int 41h
   218 0000121C 0FB6057EF1FFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   219 00001223 E89A0F0000          <1>     call printDecimalWord
   220 00001228 488D1586F4FFFF      <1>     lea rdx, dirOk
   221 0000122F B409                <1>     mov ah, 09h
   222 00001231 CD41                <1>     int 41h
   223 00001233 488D15BDF8FFFF      <1>     lea rdx, threeSpc
   224 0000123A B409                <1>     mov ah, 09h
   225 0000123C CD41                <1>     int 41h
   226 0000123E B800360000          <1>     mov eax, 3600h ;Get disk info
   227 00001243 8A1559F1FFFF        <1>     mov dl, byte [dirDrv]
   228 00001249 CD41                <1>     int 41h ;Get disk free space info
   229 0000124B 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   230 0000124E 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   231 00001251 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   232 00001253 F7E1                <1>     mul ecx ;Get bytes per cluster
   233 00001255 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   234                              <1>     ;rax now has the number of free bytes on the disk
   235 00001258 E8650F0000          <1>     call printDecimalWord
   236 0000125D 488D155BF4FFFF      <1>     lea rdx, bytesOk
   237 00001264 B409                <1>     mov ah, 09h
   238 00001266 CD41                <1>     int 41h
   239                              <1>     return
    19                              <2> %%_ret:
    20 00001268 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   240                              <1> 
   241                              <1> .dirPrintFileData:
   242                              <1> ;Use fcbCmdSpec to build the file name with space
   243                              <1> ;Start by print the name (same for both cases)
   244                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   245 00001269 F60566EEFFFF06      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles
   246                              <1>     retnz   ;Simply return if either bit is set
    51                              <2> cret nz
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001270 75(68)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   247 00001272 488D3566EEFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   248 00001279 488D3DDBEFFFFF      <1>     lea rdi, fcbCmdSpec
   249 00001280 E8E50D0000          <1>     call asciiFilenameToFCB
   250 00001285 488D15CFEFFFFF      <1>     lea rdx, fcbCmdSpec
   251 0000128C B908000000          <1>     mov ecx, 8  ;Print 8 chars
   252 00001291 BB01000000          <1>     mov ebx, 1  ;STDOUT
   253 00001296 B440                <1>     mov ah, 40h ;Write handle
   254 00001298 CD41                <1>     int 41h
   255 0000129A 52                  <1>     push rdx
   256 0000129B B220                <1>     mov dl, " "
   257 0000129D B402                <1>     mov ah, 02h ;Print char
   258 0000129F CD41                <1>     int 41h
   259 000012A1 5A                  <1>     pop rdx
   260 000012A2 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   261 000012A9 B903000000          <1>     mov ecx, 3  ;Print three chars
   262 000012AE BB01000000          <1>     mov ebx, 1  ;STDOUT
   263 000012B3 B440                <1>     mov ah, 40h ;Write handle
   264 000012B5 CD41                <1>     int 41h
   265 000012B7 F605E1F0FFFF01      <1>     test byte [dirPrnType], 1
   266 000012BE 0F85A8000000        <1>     jnz .widePrint
   267                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   268                              <1>     ;Now check if a DIR
   269 000012C4 F6050BEEFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   270 000012CB 7418                <1>     jz .dirPrintNotDir
   271 000012CD 488D15F9F3FFFF      <1>     lea rdx, dirLbl
   272 000012D4 B409                <1>     mov ah, 09h
   273 000012D6 CD41                <1>     int 41h
   274 000012D8 488D1518F8FFFF      <1>     lea rdx, threeSpc
   275 000012DF B409                <1>     mov ah, 09h
   276 000012E1 CD41                <1>     int 41h
   277 000012E3 EB4F                <1>     jmp short .dirPrintFileDT
   278                              <1> .dirPrintNotDir:
   279                              <1> ;Here we print the file size
   280 000012E5 B220                <1>     mov dl, " "
   281 000012E7 B402                <1>     mov ah, 02h
   282 000012E9 CD41                <1>     int 41h
   283 000012EB 8B05EAEDFFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   284 000012F1 E83D0F0000          <1>     call getDecimalWord
   285 000012F6 4889CB              <1>     mov rbx, rcx
   286 000012F9 51                  <1>     push rcx
   287 000012FA 480FCB              <1>     bswap rbx
   288 000012FD B908000000          <1>     mov ecx, 8
   289                              <1> .dirPrintFileSizePrep:
   290 00001302 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   291 00001304 7514                <1>     jne .dirPrintFileSize
   292 00001306 B402                <1>     mov ah, 02h
   293 00001308 B220                <1>     mov dl, " "
   294 0000130A CD41                <1>     int 41h
   295 0000130C 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   296 00001310 FFC9                <1>     dec ecx
   297 00001312 81F901000000        <1>     cmp ecx, 1
   298 00001318 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   299                              <1> .dirPrintFileSize:
   300 0000131A 5B                  <1>     pop rbx
   301                              <1> .dirPrintFileSizeLoop:
   302 0000131B 88DA                <1>     mov dl, bl
   303 0000131D B402                <1>     mov ah, 02h
   304 0000131F CD41                <1>     int 41h
   305 00001321 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   306 00001325 FFC9                <1>     dec ecx
   307 00001327 75F2                <1>     jnz .dirPrintFileSizeLoop
   308 00001329 488D15CBF7FFFF      <1>     lea rdx, twoSpc
   309 00001330 B409                <1>     mov ah, 09h
   310 00001332 CD41                <1>     int 41h
   311                              <1> .dirPrintFileDT:
   312 00001334 B220                <1>     mov dl, " "
   313 00001336 B402                <1>     mov ah, 02h
   314 00001338 CD41                <1>     int 41h
   315 0000133A 0FB70598EDFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   316 00001341 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   317 00001343 E8A2090000          <1>     call printDate
   318 00001348 488D15ACF7FFFF      <1>     lea rdx, twoSpc
   319 0000134F B409                <1>     mov ah, 09h
   320 00001351 CD41                <1>     int 41h
   321 00001353 0FB7057DEDFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   322 0000135A E8AD0A0000          <1>     call printTime
   323 0000135F 488D1504F2FFFF      <1>     lea rdx, crlf
   324 00001366 B409                <1>     mov ah, 09h
   325 00001368 CD41                <1>     int 41h
   326 0000136A EB0B                <1>     jmp short .dirPrintNameExit
   327                              <1> .widePrint:
   328                              <1> ;If /W, print name space ext space space space space
   329 0000136C 488D157FF7FFFF      <1>     lea rdx, fourSpc
   330 00001373 B409                <1>     mov ah, 09h ;Print string
   331 00001375 CD41                <1>     int 41h
   332                              <1> .dirPrintNameExit:
   333 00001377 FE0524F0FFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   334 0000137D FE051DF0FFFF        <1>     inc byte [dirLineCtr]
   335 00001383 803D16F0FFFF17      <1>     cmp byte [dirLineCtr], 23
   336                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 0000138A 7401                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 0000138C C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   337 0000138D 488D1560F3FFFF      <1>     lea rdx, pauseMes
   338 00001394 B409                <1>     mov ah, 09h
   339 00001396 CD41                <1>     int 41h
   340 00001398 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   341 0000139A CD41                <1>     int 41h
   342 0000139C C605FDEFFFFF00      <1>     mov byte [dirLineCtr], 0
   343 000013A3 488D15C0F1FFFF      <1>     lea rdx, crlf   ;Force new line
   344 000013AA B409                <1>     mov ah, 09h
   345 000013AC CD41                <1>     int 41h
   346                              <1>     return
    19                              <2> %%_ret:
    20 000013AE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   347                              <1> 
   348                              <1> chdir:
   349 000013AF F605F5ECFFFFFF      <1>     test byte [arg1Flg], -1
   350 000013B6 754D                <1>     jnz .changeDir
   351                              <1>     ;Print CWD
   352                              <1> .printCWD:
   353 000013B8 E8300B0000          <1>     call putCWDInPrompt ;Exactly the same procedure
   354 000013BD E812090000          <1>     call printCRLF
   355                              <1>     return
    19                              <2> %%_ret:
    20 000013C2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   356                              <1> .printDiskCWD:
   357                              <1> ;Print CWD for a specified drive
   358 000013C3 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   359 000013C7 88D0                <1>     mov al, dl
   360 000013C9 0440                <1>     add al, "@" ;Get the UC letter
   361 000013CB B43A                <1>     mov ah, ":"
   362 000013CD 488D3D4BEFFFFF      <1>     lea rdi, searchSpec
   363 000013D4 66AB                <1>     stosw   ;Store X:, rdi+=2
   364 000013D6 8A0547ECFFFF        <1>     mov al, byte [pathSep]
   365 000013DC AA                  <1>     stosb   ;Store pathSep, inc rdi
   366 000013DD B447                <1>     mov ah, 47h ;Get Current Working Directory
   367 000013DF 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   368 000013E2 CD41                <1>     int 41h
   369 000013E4 E8B00B0000          <1>     call strlen
   370 000013E9 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   371 000013EF B440                <1>     mov ah, 40h ;Write to handle
   372 000013F1 BB01000000          <1>     mov ebx, 1  ;STDOUT
   373 000013F6 488D1522EFFFFF      <1>     lea rdx, searchSpec
   374 000013FD CD41                <1>     int 41h
   375 000013FF E8D0080000          <1>     call printCRLF
   376                              <1>     return
    19                              <2> %%_ret:
    20 00001404 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   377                              <1> .changeDir:
   378 00001405 8A05A2ECFFFF        <1>     mov al, byte [arg1FCBret]
   379 0000140B 3CFF                <1>     cmp al, -1 
   380 0000140D 0F84DBFBFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   381 00001413 4180785D20          <1>     cmp byte [r8 + fcb1 + fcb.filename], " "
   382 00001418 7520                <1>     jne .getFQPath
   383                              <1>     ;Now we double check that on the command line we have . or ..
   384 0000141A 0FB6058BECFFFF      <1>     movzx eax, byte [arg1Off]
   385 00001421 488D3564EDFFFF      <1>     lea rsi, cmdBuffer
   386 00001428 4801C6              <1>     add rsi, rax
   387 0000142B 8A05F2EBFFFF        <1>     mov al, byte [pathSep]
   388 00001431 3806                <1>     cmp byte [rsi], al  ;Is the first char a pathsep?
   389 00001433 7405                <1>     je .getFQPath
   390 00001435 803E2E              <1>     cmp byte [rsi], "."
   391 00001438 7589                <1>     jne .printDiskCWD
   392                              <1>     ;If the path is . or .., its acceptable, else fail
   393                              <1> .getFQPath:
   394 0000143A E8B50C0000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   395 0000143F 0F82C4FBFFFF        <1>     jc badDirError  ;If this returns CF=CY, its a badDir
   396 00001445 488D15D3EEFFFF      <1>     lea rdx, searchSpec
   397 0000144C B43B                <1>     mov ah, 3Bh ;CHDIR
   398 0000144E CD41                <1>     int 41h
   399 00001450 0F82B3FBFFFF        <1>     jc badDirError
   400                              <1>     return
    19                              <2> %%_ret:
    20 00001456 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   401                              <1> 
   402                              <1> mkdir:
   403 00001457 F6054DECFFFFFF      <1>     test byte [arg1Flg], -1
   404 0000145E 0F8493FBFFFF        <1>     jz badArgError
   405 00001464 F60543ECFFFFFF      <1>     test byte [arg2Flg], -1
   406 0000146B 0F8586FBFFFF        <1>     jnz badArgError
   407                              <1>     ;We have exactly one argument
   408 00001471 8A0536ECFFFF        <1>     mov al, byte [arg1FCBret]
   409 00001477 3CFF                <1>     cmp al, -1 
   410 00001479 0F846FFBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   411 0000147F E8700C0000          <1>     call buildCommandPath
   412 00001484 7215                <1>     jc .badMake
   413 00001486 488D1592EEFFFF      <1>     lea rdx, searchSpec
   414 0000148D B800390000          <1>     mov eax, 3900h  ;MKDIR
   415 00001492 CD41                <1>     int 41h
   416 00001494 7205                <1>     jc .badMake   ;Return if not carry
   417 00001496 B40D                <1>     mov ah, 0Dh
   418 00001498 CD41                <1>     int 41h ;Flush to disk
   419                              <1>     return
    19                              <2> %%_ret:
    20 0000149A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   420                              <1> .badMake:   ;Else, bad make
   421 0000149B 488D1586F3FFFF      <1>     lea rdx, badMD
   422 000014A2 B800090000          <1>     mov eax, 0900h
   423 000014A7 CD41                <1>     int 41h
   424                              <1>     return
    19                              <2> %%_ret:
    20 000014A9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   425                              <1> 
   426                              <1> rmdir:
   427 000014AA F605FAEBFFFFFF      <1>     test byte [arg1Flg], -1
   428 000014B1 0F8440FBFFFF        <1>     jz badArgError
   429 000014B7 F605F0EBFFFFFF      <1>     test byte [arg2Flg], -1
   430 000014BE 0F8533FBFFFF        <1>     jnz badArgError
   431                              <1>     ;We have exactly one argument
   432 000014C4 8A05E3EBFFFF        <1>     mov al, byte [arg1FCBret]
   433 000014CA 3CFF                <1>     cmp al, -1 
   434 000014CC 0F841CFBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   435 000014D2 E81D0C0000          <1>     call buildCommandPath
   436 000014D7 7215                <1>     jc .badRemove
   437 000014D9 488D153FEEFFFF      <1>     lea rdx, searchSpec
   438 000014E0 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   439 000014E5 CD41                <1>     int 41h
   440 000014E7 7205                <1>     jc .badRemove   ;Return if not carry
   441 000014E9 B40D                <1>     mov ah, 0Dh
   442 000014EB CD41                <1>     int 41h ;Flush to disk
   443                              <1>     return
    19                              <2> %%_ret:
    20 000014ED C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   444                              <1> .badRemove:   ;Else, bad make
   445 000014EE 488D1550F3FFFF      <1>     lea rdx, badRD
   446 000014F5 B800090000          <1>     mov eax, 0900h
   447 000014FA CD41                <1>     int 41h
   448                              <1>     return
    19                              <2> %%_ret:
    20 000014FC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   449                              <1> 
   450                              <1> copy:
   451                              <1>     return
    19                              <2> %%_ret:
    20 000014FD C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   452                              <1> erase:
   453                              <1>     return
    19                              <2> %%_ret:
    20 000014FE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   454                              <1> date:
   455 000014FF 488D1545F2FFFF      <1>     lea rdx, curDate
   456 00001506 B409                <1>     mov ah, 09h
   457 00001508 CD41                <1>     int 41h
   458 0000150A B42A                <1>     mov ah, 2Ah ;DOS get date
   459 0000150C CD41                <1>     int 41h
   460                              <1> 	;AL = day of the week (0=Sunday)
   461                              <1> 	;CX = year (1980-2099)
   462                              <1> 	;DH = month (1-12)
   463                              <1> 	;DL = day (1-31)
   464 0000150E 66890DAEEFFFFF      <1>     mov word [td1], cx
   465 00001515 8815AAEFFFFF        <1>     mov byte [td3], dl
   466 0000151B 8835A5EFFFFF        <1>     mov byte [td4], dh
   467 00001521 0FB6C0              <1>     movzx eax, al
   468 00001524 89C3                <1>     mov ebx, eax
   469 00001526 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   470 00001528 01D8                <1>     add eax, ebx ;Make it 3 times 
   471 0000152A 488D15F6F1FFFF      <1>     lea rdx, dayName
   472 00001531 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   473 00001535 B903000000          <1>     mov ecx, 3  ;Print three chars
   474 0000153A BB01000000          <1>     mov ebx, 1  ;STDOUT
   475 0000153F B440                <1>     mov ah, 40h ;Write to handle
   476 00001541 CD41                <1>     int 41h
   477 00001543 B220                <1>     mov dl, " "
   478 00001545 B402                <1>     mov ah, 02h
   479 00001547 CD41                <1>     int 41h
   480                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   481                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   482                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   483 00001549 0FB70573EFFFFF      <1>     movzx eax, word [td1]   ;Get this word
   484 00001550 C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   485 00001553 0FB61D6CEFFFFF      <1>     movzx ebx, byte [td4]
   486 0000155A C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   487 0000155D 09D8                <1>     or eax, ebx ;Add this date to eax
   488 0000155F 0FB61D5FEFFFFF      <1>     movzx ebx, byte [td3]
   489 00001566 09D8                <1>     or eax, ebx
   490 00001568 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   491 0000156D E878070000          <1>     call printDate
   492                              <1> 
   493 00001572 488D15E3F1FFFF      <1>     lea rdx, newDate
   494 00001579 B409                <1>     mov ah, 09h
   495 0000157B CD41                <1>     int 41h
   496 0000157D 488D15F7F1FFFF      <1>     lea rdx, ukDate
   497 00001584 488D05E3F1FFFF      <1>     lea rax, usDate
   498 0000158B 488D1DF6F1FFFF      <1>     lea rbx, jpDate
   499 00001592 803D95EAFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   500 00001599 480F47D3            <1>     cmova rdx, rbx
   501 0000159D 480F42D0            <1>     cmovb rdx, rax
   502 000015A1 B409                <1>     mov ah, 09h
   503 000015A3 CD41                <1>     int 41h
   504                              <1> 
   505 000015A5 498D9080000000      <1>     lea rdx, qword [r8 + cmdLineCnt]
   506 000015AC B40A                <1>     mov ah, 0Ah
   507 000015AE CD41                <1>     int 41h
   508 000015B0 52                  <1>     push rdx
   509 000015B1 488D15B2EFFFFF      <1>     lea rdx, crlf
   510 000015B8 B409                <1>     mov ah, 09h
   511 000015BA CD41                <1>     int 41h
   512 000015BC 5A                  <1>     pop rdx
   513 000015BD 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   514                              <1>     rete    ;Exit!
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 000015C1 7501                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 000015C3 C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   515                              <1>     return
    19                              <2> %%_ret:
    20 000015C4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   516                              <1> 
   517                              <1> time:
   518 000015C5 488D15D8F1FFFF      <1>     lea rdx, curTime
   519 000015CC B409                <1>     mov ah, 09h
   520 000015CE CD41                <1>     int 41h
   521 000015D0 B42C                <1>     mov ah, 2Ch ;DOS get time
   522 000015D2 CD41                <1>     int 41h
   523                              <1>     ;CH = hour (0-23)
   524                              <1> 	;CL = minutes (0-59)
   525                              <1> 	;DH = seconds (0-59)
   526                              <1> 	;DL = hundredths (0-99)
   527 000015D4 880DE9EEFFFF        <1>     mov byte [td1], cl
   528 000015DA 882DE4EEFFFF        <1>     mov byte [td2], ch
   529 000015E0 8815DFEEFFFF        <1>     mov byte [td3], dl
   530 000015E6 8835DAEEFFFF        <1>     mov byte [td4], dh
   531 000015EC 0FB6C5              <1>     movzx eax, ch
   532 000015EF E88A080000          <1>     call printTime.printHours
   533                              <1> 
   534 000015F4 8A1541EAFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   535 000015FA B402                <1>     mov ah, 02h
   536 000015FC CD41                <1>     int 41h
   537                              <1> 
   538 000015FE 0FB605BEEEFFFF      <1>     movzx eax, byte [td1]   ;Minutes
   539 00001605 E864080000          <1>     call printTime.printMinutesAlt
   540                              <1> 
   541 0000160A 8A152BEAFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   542 00001610 B402                <1>     mov ah, 02h
   543 00001612 CD41                <1>     int 41h
   544                              <1> 
   545 00001614 0FB605ABEEFFFF      <1>     movzx eax, byte [td4]   ;Seconds
   546 0000161B E84E080000          <1>     call printTime.printMinutesAlt
   547                              <1> 
   548 00001620 B22E                <1>     mov dl, "."
   549 00001622 B402                <1>     mov ah, 02h
   550 00001624 CD41                <1>     int 41h
   551                              <1> 
   552 00001626 0FB60598EEFFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   553 0000162D E83C080000          <1>     call printTime.printMinutesAlt
   554                              <1> 
   555 00001632 488D157CF1FFFF      <1>     lea rdx, newTime
   556 00001639 B409                <1>     mov ah, 09h
   557 0000163B CD41                <1>     int 41h
   558                              <1> 
   559 0000163D 498D9080000000      <1>     lea rdx, qword [r8 + cmdLineCnt]
   560 00001644 B40A                <1>     mov ah, 0Ah
   561 00001646 CD41                <1>     int 41h
   562 00001648 52                  <1>     push rdx
   563 00001649 488D151AEFFFFF      <1>     lea rdx, crlf
   564 00001650 B409                <1>     mov ah, 09h
   565 00001652 CD41                <1>     int 41h
   566 00001654 5A                  <1>     pop rdx
   567 00001655 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   568                              <1>     rete    ;Exit!
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 00001659 7501                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 0000165B C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   569                              <1>     return
    19                              <2> %%_ret:
    20 0000165C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   570                              <1> ctty:
   571                              <1>     return
    19                              <2> %%_ret:
    20 0000165D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   572                              <1> cls:  
   573 0000165E B800440000          <1>     mov eax, 4400h  ;Get device info
   574 00001663 BB01000000          <1>     mov ebx, 1      ;for handle 1
   575 00001668 CD41                <1>     int 41h         ;in dx
   576 0000166A F7C280000000        <1>     test edx, devCharDev
   577 00001670 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   578 00001672 F7C210000000        <1>     test edx, charDevFastOut
   579 00001678 743E                <1>     jz .doAnsi
   580                              <1>     ;Test if Int 49h uses Int 30h
   581                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   582                              <1>     ;Int 49h MUST be terminated with a IRETQ, within 1024 bytes
   583 0000167A B849350000          <1>     mov eax, 3549h  ;Get the vector for interrupt 49h
   584 0000167F CD41                <1>     int 41h
   585                              <1> .biosCheck:
   586 00001681 66813BCD30          <1>     cmp word [rbx], 30CDh
   587 00001686 740C                <1>     je .biosConfirmed
   588 00001688 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   589 0000168D 7429                <1>     je .doAnsi
   590 0000168F 48FFC3              <1>     inc rbx
   591 00001692 EBED                <1>     jmp short .biosCheck
   592                              <1> .biosConfirmed:
   593                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   594 00001694 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   595 00001696 31DB                <1>     xor ebx, ebx
   596 00001698 CD30                <1>     int 30h
   597 0000169A B40F                <1>     mov ah, 0Fh ;Get screen mode
   598 0000169C CD30                <1>     int 30h
   599 0000169E 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   600 000016A1 FECA                <1>     dec dl
   601 000016A3 B619                <1>     mov dh, 25  ;Number of rows is standard
   602 000016A5 31C0                <1>     xor eax, eax
   603 000016A7 89C1                <1>     mov ecx, eax
   604 000016A9 B707                <1>     mov bh, 7   ;Screen attributes
   605 000016AB B406                <1>     mov ah, 6   ;Scroll
   606 000016AD CD30                <1>     int 30h
   607 000016AF 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   608 000016B1 B700                <1>     mov bh, 0   ;Page 0
   609 000016B3 B402                <1>     mov ah, 2
   610 000016B5 CD30                <1>     int 30h
   611                              <1>     return
    19                              <2> %%_ret:
    20 000016B7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   612                              <1> .doAnsi:
   613                              <1> ;If an ANSI driver is not installed, this will simply insert blank lines
   614                              <1> ;4 chars in the ansi routine
   615                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   616                              <1> ; understand ANSI codes
   617 000016B8 488D352FF4FFFF      <1>     lea rsi, ansiCls
   618 000016BF B904000000          <1>     mov ecx, 4
   619 000016C4 B406                <1>     mov ah, 06h ;Raw char output
   620                              <1> .ansiLp:
   621 000016C6 AC                  <1>     lodsb   ;Get the char in 
   622 000016C7 88C2                <1>     mov dl, al
   623 000016C9 CD41                <1>     int 41h
   624 000016CB FFC9                <1>     dec ecx
   625 000016CD 75F7                <1>     jnz .ansiLp
   626                              <1>     return
    19                              <2> %%_ret:
    20 000016CF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   627                              <1> 
   628                              <1> break:
   629 000016D0 F605D4E9FFFFFF      <1>     test byte [arg1Flg], -1
   630 000016D7 752D                <1>     jnz .argumentProvided
   631                              <1>     ;Here we just get the status of break
   632 000016D9 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   633 000016DE CD41                <1>     int 41h
   634 000016E0 88D3                <1>     mov bl, dl
   635 000016E2 488D156DF2FFFF      <1>     lea rdx, breakIs
   636 000016E9 B409                <1>     mov ah, 09h
   637 000016EB CD41                <1>     int 41h
   638 000016ED 488D155DF2FFFF      <1>     lea rdx, onMes
   639 000016F4 488D0D50F2FFFF      <1>     lea rcx, offMes
   640 000016FB 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   641 000016FD 480F44D1            <1>     cmovz rdx, rcx
   642 00001701 B409                <1>     mov ah, 09h
   643 00001703 CD41                <1>     int 41h
   644                              <1>     return
    19                              <2> %%_ret:
    20 00001705 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   645                              <1> .argumentProvided:
   646 00001706 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   647 0000170A AD                  <1>     lodsd   ;Read the word
   648 0000170B 89C3                <1>     mov ebx, eax
   649 0000170D 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   650 00001712 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   651 00001715 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   652 0000171A 7416                <1>     je .maybeOn
   653 0000171C 663D4F46            <1>     cmp ax, "OF"
   654 00001720 7523                <1>     jne .badOnOff
   655 00001722 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   656 00001727 6681FB4620          <1>     cmp bx, "F "
   657 0000172C 7517                <1>     jne .badOnOff
   658                              <1>     ;Set off
   659 0000172E 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   660 00001730 EB0B                <1>     jmp short .setBreak
   661                              <1> .maybeOn:
   662 00001732 663D4F4E            <1>     cmp ax, "ON"
   663 00001736 750D                <1>     jne .badOnOff
   664                              <1>     ;Set on
   665 00001738 BA01000000          <1>     mov edx, 1
   666                              <1> .setBreak:
   667 0000173D B801330000          <1>     mov eax, 3301h  ;Set break
   668 00001742 CD41                <1>     int 41h
   669                              <1>     return
    19                              <2> %%_ret:
    20 00001744 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   670                              <1> .badOnOff:
   671 00001745 488D15B2F3FFFF      <1>     lea rdx, badOnOff
   672 0000174C B409                <1>     mov ah, 09h
   673 0000174E CD41                <1>     int 41h
   674                              <1>     return
    19                              <2> %%_ret:
    20 00001750 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   675                              <1> 
   676                              <1> verify:
   677 00001751 F60553E9FFFFFF      <1>     test byte [arg1Flg], -1
   678 00001758 752D                <1>     jnz .argumentProvided
   679                              <1>     ;Here we just get the status of break
   680 0000175A B800540000          <1>     mov eax, 5400h  ;Get verify status in al
   681 0000175F CD41                <1>     int 41h
   682 00001761 88C3                <1>     mov bl, al
   683 00001763 488D15F6F1FFFF      <1>     lea rdx, verifyIs
   684 0000176A B409                <1>     mov ah, 09h
   685 0000176C CD41                <1>     int 41h
   686 0000176E 488D15DCF1FFFF      <1>     lea rdx, onMes
   687 00001775 488D0DCFF1FFFF      <1>     lea rcx, offMes
   688 0000177C 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   689 0000177E 480F44D1            <1>     cmovz rdx, rcx
   690 00001782 B409                <1>     mov ah, 09h
   691 00001784 CD41                <1>     int 41h
   692                              <1>     return
    19                              <2> %%_ret:
    20 00001786 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   693                              <1> .argumentProvided:
   694 00001787 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   695 0000178B AD                  <1>     lodsd   ;Read the word
   696 0000178C 89C3                <1>     mov ebx, eax
   697 0000178E 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   698 00001793 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   699 00001796 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   700 0000179B 7416                <1>     je .maybeOn
   701 0000179D 663D4F46            <1>     cmp ax, "OF"
   702 000017A1 751F                <1>     jne .badOnOff
   703 000017A3 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   704 000017A8 6681FB4620          <1>     cmp bx, "F "
   705 000017AD 7513                <1>     jne .badOnOff
   706                              <1>     ;Set off
   707 000017AF 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
   708 000017B1 EB0A                <1>     jmp short .setVerify
   709                              <1> .maybeOn:
   710 000017B3 663D4F4E            <1>     cmp ax, "ON"
   711 000017B7 7509                <1>     jne .badOnOff
   712                              <1>     ;Set on
   713 000017B9 31C0                <1>     xor eax, eax
   714 000017BB FFC0                <1>     inc eax ;AL=1 => VERIFY is on
   715                              <1> .setVerify:
   716 000017BD B42E                <1>     mov ah, 2Eh  ;Set Verify
   717 000017BF CD41                <1>     int 41h
   718                              <1>     return
    19                              <2> %%_ret:
    20 000017C1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   719                              <1> .badOnOff:
   720 000017C2 488D1535F3FFFF      <1>     lea rdx, badOnOff
   721 000017C9 B409                <1>     mov ah, 09h
   722 000017CB CD41                <1>     int 41h
   723                              <1>     return
    19                              <2> %%_ret:
    20 000017CD C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   724                              <1> 
   725                              <1> rename:
   726                              <1>     return
    19                              <2> %%_ret:
    20 000017CE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   727                              <1> truename:
   728 000017CF F605D5E8FFFFFF      <1>     test byte [arg1Flg], -1
   729 000017D6 0F841BF8FFFF        <1>     jz badArgError
   730 000017DC E813090000          <1>     call buildCommandPath
   731                              <1>     ;Explicitly call Truename if we remove truename from this function
   732 000017E1 488D3D37EBFFFF      <1>     lea rdi, searchSpec
   733 000017E8 E8AC070000          <1>     call strlen
   734 000017ED FFC9                <1>     dec ecx ;Don't print terminating null
   735 000017EF 488D1529EBFFFF      <1>     lea rdx, searchSpec
   736 000017F6 BB01000000          <1>     mov ebx, 01
   737 000017FB B440                <1>     mov ah, 40h
   738 000017FD CD41                <1>     int 41h
   739 000017FF E8D0040000          <1>     call printCRLF
   740                              <1>     return
    19                              <2> %%_ret:
    20 00001804 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   741                              <1> 
   742                              <1> volume:
   743 00001805 488D3582E9FFFF      <1>     lea rsi, cmdBuffer + 2  ;Get the command buffer
   744 0000180C E800080000          <1>     call skipSpaces
   745 00001811 4881C603000000      <1>     add rsi, 3  ;Go past the VOL command
   746 00001818 E8F4070000          <1>     call skipSpaces
   747 0000181D AC                  <1>     lodsb   ;Get the first char, and point rsi to next char
   748 0000181E E8DD070000          <1>     call isALEndOfCommand   ;If this char is end of command, use current drive
   749 00001823 7507                <1>     jnz .checkDriveLetter
   750 00001825 E86A070000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
   751 0000182A EB35                <1>     jmp short .dirEP
   752                              <1> .checkDriveLetter:
   753 0000182C 803E3A              <1>     cmp byte [rsi], ":" ;If this is not a :, fail
   754 0000182F 0F85B9F7FFFF        <1>     jne badDriveError
   755 00001835 4889F7              <1>     mov rdi, rsi    ;Save start of drive spec in rsi
   756 00001838 48FFC6              <1>     inc rsi  ;Go past the X: spec
   757 0000183B E8D1070000          <1>     call skipSpaces
   758 00001840 AC                  <1>     lodsb   ;Get the non-space char in al
   759 00001841 E8BA070000          <1>     call isALEndOfCommand   ;The next non-space char must be terminator
   760 00001846 0F85A2F7FFFF        <1>     jne badDriveError
   761                              <1> ;This argument should've been parsed into FCB1 so use that result
   762 0000184C 8A055BE8FFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
   763 00001852 A8FF                <1>     test al, -1
   764 00001854 0F8594F7FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
   765 0000185A 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
   766 0000185F FFC8                <1>     dec eax ;Convert to 0 based number
   767                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al
   768 00001861 0541000000          <1>     add eax, "A" ;Get ASCII representation of 0 based number
   769 00001866 880550ECFFFF        <1>     mov byte [volPathBuf], al   ;Store ASCII letter here
   770 0000186C 488D154EE8FFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   771 00001873 B41A                <1>     mov ah, 1Ah
   772 00001875 CD41                <1>     int 41h
   773 00001877 488D153EECFFFF      <1>     lea rdx, volPathBuf
   774 0000187E 66B90800            <1>     mov cx, dirVolumeID
   775 00001882 B44E                <1>     mov ah, 4Eh ;Find first
   776 00001884 CD41                <1>     int 41h
   777 00001886 7221                <1>     jc .skipVolLbl
   778 00001888 488D3550E8FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   779 0000188F 488D3D19ECFFFF      <1>     lea rdi, volLblSpc
   780 00001896 B90B000000          <1>     mov ecx, 11 ;Get the 11 chars of the volume label
   781                              <1> .dirLblCopy:
   782 0000189B AC                  <1>     lodsb   ;Get the first char
   783 0000189C 3C00                <1>     cmp al, 0
   784 0000189E 7409                <1>     je .skipVolLbl  ;Jump with CF=NC
   785 000018A0 3C2E                <1>     cmp al, "."
   786 000018A2 7401                <1>     je .dirLblSkipStore
   787 000018A4 AA                  <1>     stosb
   788                              <1> .dirLblSkipStore:
   789 000018A5 FFC9                <1>     dec ecx
   790 000018A7 75F2                <1>     jnz .dirLblCopy
   791                              <1>     ;Fallthru with CF=NC
   792                              <1> .skipVolLbl:
   793                              <1> ;Print volume label information now
   794                              <1> ;Propagates the CF if CF was set    
   795 000018A9 9C                  <1>     pushfq
   796 000018AA 488D15B9ECFFFF      <1>     lea rdx, crlf
   797 000018B1 B409                <1>     mov ah, 09h
   798 000018B3 CD41                <1>     int 41h
   799 000018B5 488D1533EFFFFF      <1>     lea rdx, volMes
   800 000018BC B409                <1>     mov ah, 09h
   801 000018BE CD41                <1>     int 41h
   802 000018C0 8A15F6EBFFFF        <1>     mov dl, byte [volPathBuf]   ;Print the drive letter out
   803 000018C6 B402                <1>     mov ah, 02h
   804 000018C8 CD41                <1>     int 41h
   805 000018CA 9D                  <1>     popfq
   806 000018CB 7317                <1>     jnc .volIDOk
   807 000018CD 488D1532EFFFFF      <1>     lea rdx, volNo
   808 000018D4 B409                <1>     mov ah, 09h
   809 000018D6 CD41                <1>     int 41h
   810 000018D8 488D158BECFFFF      <1>     lea rdx, crlf
   811 000018DF B409                <1>     mov ah, 09h
   812 000018E1 CD41                <1>     int 41h
   813                              <1>     return
    19                              <2> %%_ret:
    20 000018E3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   814                              <1> .volIDOk:
   815 000018E4 488D1516EFFFFF      <1>     lea rdx, volOk
   816 000018EB B409                <1>     mov ah, 09h
   817 000018ED CD41                <1>     int 41h
   818 000018EF 488D3DB9EBFFFF      <1>     lea rdi, volLblSpc
   819 000018F6 E89E060000          <1>     call strlen
   820 000018FB FFC9                <1>     dec ecx
   821 000018FD C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   822 00001901 488D15A7EBFFFF      <1>     lea rdx, volLblSpc
   823 00001908 B409                <1>     mov ah, 09h
   824 0000190A CD41                <1>     int 41h
   825 0000190C 488D1557ECFFFF      <1>     lea rdx, crlf
   826 00001913 B409                <1>     mov ah, 09h
   827 00001915 CD41                <1>     int 41h
   828                              <1>     return
    19                              <2> %%_ret:
    20 00001917 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   829                              <1> 
   830                              <1> version:
   831 00001918 488D154BECFFFF      <1>     lea rdx, crlf
   832 0000191F B409                <1>     mov ah, 09h
   833 00001921 CD41                <1>     int 41h
   834 00001923 488D15B3EEFFFF      <1>     lea rdx, dosVer
   835 0000192A B409                <1>     mov ah, 09h
   836 0000192C CD41                <1>     int 41h
   837 0000192E E80C000000          <1>     call .printVersionNumber
   838 00001933 488D1530ECFFFF      <1>     lea rdx, crlf
   839 0000193A B409                <1>     mov ah, 09h
   840 0000193C CD41                <1>     int 41h
   841                              <1>     return
    19                              <2> %%_ret:
    20 0000193E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   842                              <1> .printVersionNumber:
   843 0000193F B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
   844 00001941 CD41                <1>     int 41h
   845 00001943 50                  <1>     push rax
   846 00001944 0FB6C0              <1>     movzx eax, al
   847 00001947 E876080000          <1>     call printDecimalWord
   848 0000194C B22E                <1>     mov dl, "."
   849 0000194E B402                <1>     mov ah, 02h
   850 00001950 CD41                <1>     int 41h
   851 00001952 58                  <1>     pop rax
   852 00001953 0FB6C4              <1>     movzx eax, ah
   853 00001956 E867080000          <1>     call printDecimalWord
   854                              <1>     return
    19                              <2> %%_ret:
    20 0000195B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   855                              <1> 
   856                              <1> 
   857                              <1> memory:
   858 0000195C 488B1DB4E6FFFF      <1>     mov rbx, qword [sysVars]
   859 00001963 4885DB              <1>     test rbx, rbx
   860 00001966 7510                <1>     jnz .sysvarsOK
   861 00001968 488D1520F1FFFF      <1>     lea rdx, memBad0
   862 0000196F B409                <1>     mov ah, 09h
   863 00001971 CD41                <1>     int 41h
   864 00001973 E9ED080000          <1>     jmp freezePC.altEP
   865                              <1> .sysvarsOK:
   866                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
   867                              <1>     ; and rcx to store Application memory
   868 00001978 31F6                <1>     xor esi, esi
   869 0000197A 31FF                <1>     xor edi, edi
   870 0000197C 31ED                <1>     xor ebp, ebp
   871 0000197E 31C9                <1>     xor ecx, ecx
   872 00001980 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
   873 00001984 488B1B              <1>     mov rbx, qword [rbx]
   874                              <1> .memLp:
   875 00001987 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
   876 0000198A 7409                <1>     je .validMCB
   877 0000198C 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
   878 0000198F 0F8501010000        <1>     jne .badMCBFound
   879                              <1> .validMCB:
   880 00001995 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
   881 00001998 48C1E004            <1>     shl rax, 4  ;Convert to bytes
   882 0000199C 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
   883 000019A4 7505                <1>     jne .notDOS
   884 000019A6 4801C6              <1>     add rsi, rax    ;Add to DOS count
   885 000019A9 EB21                <1>     jmp short .gotoNext
   886                              <1> .notDOS:
   887 000019AB 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
   888 000019B3 7505                <1>     jne .notFree
   889 000019B5 4801C7              <1>     add rdi, rax    ;Add to Free space count
   890 000019B8 EB12                <1>     jmp short .gotoNext
   891                              <1> .notFree:
   892 000019BA 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
   893 000019C2 7505                <1>     jne .notHole
   894 000019C4 4801C5              <1>     add rbp, rax    ;Add to Hole count
   895 000019C7 EB03                <1>     jmp short .gotoNext
   896                              <1> .notHole:
   897 000019C9 4801C1              <1>     add rcx, rax    ;Add to Application count
   898                              <1> .gotoNext:
   899 000019CC 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
   900 000019CF 7407                <1>     je .endOfWalk
   901 000019D1 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
   902 000019D6 EBAF                <1>     jmp short .memLp
   903                              <1> .endOfWalk:
   904                              <1>     
   905 000019D8 488D1511F0FFFF      <1>     lea rdx, memDOS
   906 000019DF B409                <1>     mov ah, 09h
   907 000019E1 CD41                <1>     int 41h
   908 000019E3 4889F0              <1>     mov rax, rsi
   909 000019E6 E89D000000          <1>     call .mcbPrintAmount
   910 000019EB 488D1596F0FFFF      <1>     lea rdx, memByte
   911 000019F2 B409                <1>     mov ah, 09h
   912 000019F4 CD41                <1>     int 41h
   913                              <1> 
   914 000019F6 4885ED              <1>     test rbp, rbp
   915 000019F9 741E                <1>     jz .skipHole
   916 000019FB 488D153AF0FFFF      <1>     lea rdx, memHole
   917 00001A02 B409                <1>     mov ah, 09h
   918 00001A04 CD41                <1>     int 41h
   919 00001A06 4889E8              <1>     mov rax, rbp
   920 00001A09 E87A000000          <1>     call .mcbPrintAmount
   921 00001A0E 488D1573F0FFFF      <1>     lea rdx, memByte
   922 00001A15 B409                <1>     mov ah, 09h
   923 00001A17 CD41                <1>     int 41h
   924                              <1> .skipHole:
   925                              <1> 
   926 00001A19 488D15F6EFFFFF      <1>     lea rdx, memApp
   927 00001A20 B409                <1>     mov ah, 09h
   928 00001A22 CD41                <1>     int 41h
   929 00001A24 4889C8              <1>     mov rax, rcx
   930 00001A27 E85C000000          <1>     call .mcbPrintAmount
   931 00001A2C 488D1555F0FFFF      <1>     lea rdx, memByte
   932 00001A33 B409                <1>     mov ah, 09h
   933 00001A35 CD41                <1>     int 41h
   934                              <1> 
   935 00001A37 488D1524F0FFFF      <1>     lea rdx, memFree
   936 00001A3E B409                <1>     mov ah, 09h
   937 00001A40 CD41                <1>     int 41h
   938 00001A42 4889F8              <1>     mov rax, rdi
   939 00001A45 E83E000000          <1>     call .mcbPrintAmount
   940 00001A4A 488D1537F0FFFF      <1>     lea rdx, memByte
   941 00001A51 B409                <1>     mov ah, 09h
   942 00001A53 CD41                <1>     int 41h
   943                              <1> 
   944 00001A55 488D156EEFFFFF      <1>     lea rdx, memSys
   945 00001A5C B409                <1>     mov ah, 09h
   946 00001A5E CD41                <1>     int 41h
   947 00001A60 4889F0              <1>     mov rax, rsi
   948 00001A63 4801F8              <1>     add rax, rdi
   949 00001A66 4801C8              <1>     add rax, rcx
   950 00001A69 4801E8              <1>     add rax, rbp
   951 00001A6C E817000000          <1>     call .mcbPrintAmount
   952 00001A71 488D1510F0FFFF      <1>     lea rdx, memByte
   953 00001A78 B409                <1>     mov ah, 09h
   954 00001A7A CD41                <1>     int 41h
   955                              <1> 
   956 00001A7C 488D15E7EAFFFF      <1>     lea rdx, crlf
   957 00001A83 B409                <1>     mov ah, 09h
   958 00001A85 CD41                <1>     int 41h
   959                              <1>     return
    19                              <2> %%_ret:
    20 00001A87 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   960                              <1> 
   961                              <1> .mcbPrintAmount:
   962 00001A88 51                  <1>     push rcx
   963 00001A89 56                  <1>     push rsi
   964 00001A8A 57                  <1>     push rdi
   965 00001A8B 55                  <1>     push rbp
   966 00001A8C E831070000          <1>     call printDecimalWord
   967 00001A91 5D                  <1>     pop rbp
   968 00001A92 5F                  <1>     pop rdi
   969 00001A93 5E                  <1>     pop rsi
   970 00001A94 59                  <1>     pop rcx
   971                              <1>     return
    19                              <2> %%_ret:
    20 00001A95 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   972                              <1> .badMCBFound:
   973 00001A96 488D1532F0FFFF      <1>     lea rdx, memBad2
   974 00001A9D B409                <1>     mov ah, 09h
   975 00001A9F CD41                <1>     int 41h
   976 00001AA1 E9BF070000          <1>     jmp freezePC.altEP
   977                              <1> 
   978                              <1> type:
   979 00001AA6 F605FEE5FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
   980 00001AAD 0F8444F5FFFF        <1>     jz badArgError
   981 00001AB3 F605F4E5FFFFFF      <1>     test byte [arg2Flg], -1
   982 00001ABA 0F8537F5FFFF        <1>     jnz badArgError         ;If this set, error
   983 00001AC0 488D35C5E6FFFF      <1>     lea rsi, cmdBuffer
   984 00001AC7 0FB605DEE5FFFF      <1>     movzx eax, byte [arg1Off]
   985 00001ACE 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
   986 00001AD1 803E0D              <1>     cmp byte [rsi], CR
   987 00001AD4 0F841DF5FFFF        <1>     je badArgError
   988 00001ADA 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
   989 00001ADE 750F                <1>     jne .noDrive
   990 00001AE0 0FB605C6E5FFFF      <1>     movzx eax, byte [arg1FCBret]
   991 00001AE7 3CFF                <1>     cmp al, -1
   992 00001AE9 0F84FFF4FFFF        <1>     je badDriveError
   993                              <1> .noDrive:
   994                              <1>     ;Now we open the provided file
   995 00001AEF 488D3D29E8FFFF      <1>     lea rdi, searchSpec
   996                              <1> .copyPath:
   997 00001AF6 AC                  <1>     lodsb
   998 00001AF7 E804050000          <1>     call isALEndOfCommand
   999 00001AFC 740A                <1>     jz .finishCopy
  1000 00001AFE E8DA040000          <1>     call isALterminator
  1001 00001B03 7403                <1>     jz .finishCopy
  1002 00001B05 AA                  <1>     stosb
  1003 00001B06 EBEE                <1>     jmp short .copyPath
  1004                              <1> .finishCopy:
  1005 00001B08 31C0                <1>     xor eax, eax
  1006 00001B0A AA                  <1>     stosb
  1007 00001B0B 488D150DE8FFFF      <1>     lea rdx, searchSpec
  1008 00001B12 B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1009 00001B17 CD41                <1>     int 41h
  1010 00001B19 0F82E1F4FFFF        <1>     jc badFileError
  1011                              <1> .diskFile:
  1012 00001B1F 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1013 00001B26 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1014                              <1> .lp:
  1015 00001B29 B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1016 00001B2E B43F                <1>     mov ah, 3Fh ;Read handle
  1017 00001B30 CD41                <1>     int 41h
  1018 00001B32 89C1                <1>     mov ecx, eax
  1019 00001B34 67E317              <1>     jecxz .exit
  1020 00001B37 53                  <1>     push rbx    ;Save the original in handle
  1021 00001B38 BB01000000          <1>     mov ebx, 1  ;STDOUT
  1022 00001B3D B440                <1>     mov ah, 40h
  1023 00001B3F CD41                <1>     int 41h
  1024 00001B41 5B                  <1>     pop rbx ;Get back the original read handle
  1025 00001B42 720F                <1>     jc .exitBad
  1026 00001B44 39C8                <1>     cmp eax, ecx
  1027 00001B46 74E1                <1>     je .lp
  1028 00001B48 FFC9                <1>     dec ecx ;One less for a ^Z
  1029 00001B4A 39C8                <1>     cmp eax, ecx
  1030 00001B4C 7505                <1>     jne .exitBad
  1031                              <1> .exit:
  1032 00001B4E B43E                <1>     mov ah, 3Eh ;Close handle
  1033 00001B50 CD41                <1>     int 41h
  1034                              <1>     return
    19                              <2> %%_ret:
    20 00001B52 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1035                              <1> .exitBad:
  1036                              <1>     ;Print a disk error message... use a table to build the message but for
  1037                              <1>     ; now, just exit
  1038                              <1>     ;If it is a char device, don't print a error
  1039 00001B53 EBF9                <1>     jmp short .exit
  1040                              <1> 
  1041                              <1> exit:
  1042 00001B55 F605C9E4FFFFFF      <1>     test byte [permaSwitch], -1
  1043                              <1>     retnz   ;Return if the flag is set
    51                              <2> cret nz
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001B5C 75(52)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
  1044 00001B5E 488B05AAE4FFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1045 00001B65 483DFFFFFFFF        <1>     cmp rax, -1
  1046                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001B6B 74(52)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
  1047 00001B6D 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1048                              <1> 
  1049 00001B71 488B15AEE4FFFF      <1>     mov rdx, qword [parentInt42]
  1050 00001B78 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
  1051 00001B7C B842250000          <1>     mov eax, 2542h
  1052 00001B81 CD41                <1>     int 41h
  1053                              <1> 
  1054 00001B83 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1055 00001B88 CD41                <1>     int 41h
  1056                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    19                              <2> %%_ret:
    20 00001B8A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1057                              <1> 
  1058                              <1> launchChild:
  1059                              <1> ;We run EXEC on this and the child task will return via applicationReturn
  1060                              <1> ;Here we must search the CWD or all path componants before failing
  1061                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
  1062 00001B8B 488D152FE5FFFF      <1>     lea rdx, cmdFFBlock
  1063 00001B92 B41A                <1>     mov ah, 1Ah     ;Set DTA for task
  1064 00001B94 CD41                <1>     int 41h
  1065                              <1> 
  1066 00001B96 8B051EE5FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
  1067 00001B9C 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1068 00001BA1 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1069 00001BA6 3D20202020          <1>     cmp eax, "    " ;Only if we have four spaces do we proceed here
  1070 00001BAB 741D                <1>     je .noExt
  1071 00001BAD E83CF3FFFF          <1>     call checkExtensionExec ;ZF=ZE => Executable
  1072 00001BB2 0F8510010000        <1>     jnz .dfltErrExit
  1073                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1074 00001BB8 0F820A010000        <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
  1075                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1076                              <1>     ;So it is a com or exe that we are searching for for now
  1077 00001BBE 488D3D47E6FFFF      <1>     lea rdi, cmdPathSpec
  1078 00001BC5 4889FA              <1>     mov rdx, rdi
  1079 00001BC8 EB24                <1>     jmp short .search
  1080                              <1> .noExt:
  1081                              <1>     ;If the filename has no extension, append a .*
  1082                              <1>     ;Use bl as flags. bl[0] => COM found, bl[1] => EXE found, bl[2] => BAT found
  1083 00001BCA 31DB                <1>     xor ebx, ebx
  1084 00001BCC 488D3D39E6FFFF      <1>     lea rdi, cmdPathSpec
  1085 00001BD3 4889FA              <1>     mov rdx, rdi
  1086 00001BD6 31C0                <1>     xor eax, eax
  1087 00001BD8 B9FFFFFFFF          <1>     mov ecx, -1
  1088 00001BDD F2AE                <1>     repne scasb
  1089 00001BDF 48FFCF              <1>     dec rdi ;Point to the terminating null
  1090 00001BE2 4889FD              <1>     mov rbp, rdi    ;Temporarily store the ptr to the . in rbp
  1091 00001BE5 66B82E2A            <1>     mov ax, ".*"
  1092 00001BE9 66AB                <1>     stosw
  1093 00001BEB 30C0                <1>     xor al, al  ;Store terminating null
  1094 00001BED AA                  <1>     stosb
  1095                              <1> .search:
  1096 00001BEE B906000000          <1>     mov ecx, dirIncFiles
  1097 00001BF3 B44E                <1>     mov ah, 4Eh ;Find First File
  1098 00001BF5 CD41                <1>     int 41h
  1099 00001BF7 0F82CB000000        <1>     jc .dfltErrExit
  1100 00001BFD E879000000          <1>     call .noExtCheckExt
  1101                              <1> .moreSearch:
  1102 00001C02 B44F                <1>     mov ah, 4Fh
  1103 00001C04 CD41                <1>     int 41h
  1104 00001C06 7207                <1>     jc .noMoreFiles
  1105 00001C08 E86E000000          <1>     call .noExtCheckExt
  1106 00001C0D EBF3                <1>     jmp short .moreSearch
  1107                              <1> .noMoreFiles:
  1108 00001C0F 85DB                <1>     test ebx, ebx
  1109 00001C11 0F84B1000000        <1>     jz .dfltErrExit
  1110                              <1> ;So we have a valid executable
  1111 00001C17 4889EF              <1>     mov rdi, rbp    ;Get back ptr to the .*,0
  1112 00001C1A F7C301000000        <1>     test ebx, 1
  1113 00001C20 7407                <1>     jz .launchexebat
  1114 00001C22 B82E434F4D          <1>     mov eax, ".COM"
  1115 00001C27 EB14                <1>     jmp short .launch
  1116                              <1> .launchexebat:
  1117 00001C29 F7C302000000        <1>     test ebx, 2
  1118 00001C2F 7407                <1>     jz .launchbat
  1119 00001C31 B82E455845          <1>     mov eax, ".EXE"
  1120 00001C36 EB05                <1>     jmp short .launch
  1121                              <1> .launchbat:
  1122                              <1> ;Temporary For BAT
  1123 00001C38 E98B000000          <1>     jmp .dfltErrExit
  1124                              <1> .launch:
  1125 00001C3D AB                  <1>     stosd
  1126 00001C3E 30C0                <1>     xor al, al
  1127 00001C40 AA                  <1>     stosb   ;Store the terminating null
  1128 00001C41 488D1DA4E4FFFF      <1>     lea rbx, launchBlock
  1129 00001C48 31C0                <1>     xor eax, eax
  1130 00001C4A 488903              <1>     mov qword [rbx + execProg.pEnv], rax    ;Tell DOS to copy my current Env
  1131 00001C4D 498D8080000000      <1>     lea rax, qword [r8 + cmdLineCnt]
  1132 00001C54 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1133 00001C58 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1134 00001C5C 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1135 00001C60 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1136 00001C64 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1137 00001C68 488D159DE5FFFF      <1>     lea rdx, cmdPathSpec
  1138 00001C6F B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1139 00001C74 CD41                <1>     int 41h
  1140 00001C76 E94D000000          <1>     jmp .dfltErrExit    ;If something goes wrong, error out
  1141                              <1> .noExtCheckExt:
  1142                              <1>     ;mov eax, dword [cmdFFBlock + ffBlock.asciizName + filename.fExt]
  1143 00001C7B 488D355DE4FFFF      <1>     lea rsi, dword [cmdFFBlock + ffBlock.asciizName]
  1144 00001C82 488D3DD2E5FFFF      <1>     lea rdi, fcbCmdSpec
  1145 00001C89 E8DC030000          <1>     call asciiFilenameToFCB
  1146 00001C8E 8B05CFE5FFFF        <1>     mov eax, dword [fcbCmdSpec + filename.fExt]
  1147 00001C94 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1148 00001C99 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1149 00001C9E 3D434F4D20          <1>     cmp eax, "COM "
  1150 00001CA3 7507                <1>     jne .neceexe
  1151 00001CA5 81CB01000000        <1>     or ebx, 1
  1152                              <1>     return
    19                              <2> %%_ret:
    20 00001CAB C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1153                              <1> .neceexe:
  1154 00001CAC 3D45584520          <1>     cmp eax, "EXE "
  1155 00001CB1 7507                <1>     jne .necebat
  1156 00001CB3 81CB02000000        <1>     or ebx, 2
  1157                              <1>     return
    19                              <2> %%_ret:
    20 00001CB9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1158                              <1> .necebat:
  1159 00001CBA 3D42415420          <1>     cmp eax, "BAT "
  1160                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001CBF 75(B9)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
  1161 00001CC1 81CB04000000        <1>     or ebx, 4
  1162                              <1>     return
    19                              <2> %%_ret:
    20 00001CC7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1163                              <1> 
  1164                              <1> .dfltErrExit:
  1165 00001CC8 488D15F8E8FFFF      <1>     lea rdx, badCmd
  1166 00001CCF B409                <1>     mov ah, 09h
  1167 00001CD1 CD41                <1>     int 41h
  1168                              <1>     return
    19                              <2> %%_ret:
    20 00001CD3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    16                                  %include "./Source/Utils/COMMAND/Source/cmdUtils.asm"
    17                              <1> ;Misc functions and subroutines for command.com
    18                              <1> 
    19                              <1> printCRLF:
    20 00001CD4 488D158FE8FFFF      <1>     lea rdx, crlf
    21 00001CDB BB02000000          <1>     mov ebx, 2
    22 00001CE0 B440                <1>     mov ah, 40h ;Print a new line
    23 00001CE2 B902000000          <1>     mov ecx, 2  ;Two chars to write
    24 00001CE7 CD41                <1>     int 41h
    25                              <1>     return
    19                              <2> %%_ret:
    20 00001CE9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    26                              <1> printDate:
    27                              <1> ;Input: eax = Packed Date
    28                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
    29                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
    30                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
    31                              <1> ;       ebx = 0 => Print two digit year
    32                              <1> ;       ebx = 1 => Print four digit year
    33 00001CEA 53                  <1>     push rbx
    34 00001CEB 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    35 00001CED 803D3AE3FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    36 00001CF4 7240                <1>     jb .usDate
    37 00001CF6 777C                <1>     ja .jpnDate
    38                              <1> ;European: DD/MM/YY
    39 00001CF8 251F000000          <1>     and eax, 1Fh    ;Save day bits
    40 00001CFD E8B0000000          <1>     call .printFirst
    41 00001D02 8A1531E3FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    42 00001D08 B402                <1>     mov ah, 02h
    43 00001D0A CD41                <1>     int 41h
    44                              <1> 
    45 00001D0C 89C8                <1>     mov eax, ecx
    46 00001D0E 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    47 00001D13 C1E805              <1>     shr eax, 5
    48 00001D16 E8B3000000          <1>     call .printSecond
    49                              <1> 
    50 00001D1B 8A1518E3FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    51 00001D21 B402                <1>     mov ah, 02h
    52 00001D23 CD41                <1>     int 41h
    53                              <1> 
    54 00001D25 89C8                <1>     mov eax, ecx
    55 00001D27 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    56 00001D2C C1E809              <1>     shr eax, 9
    57 00001D2F 5B                  <1>     pop rbx ;Get the year signature back
    58 00001D30 E8A9000000          <1>     call .printYear
    59                              <1>     return
    19                              <2> %%_ret:
    20 00001D35 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    60                              <1> .usDate:
    61                              <1> ;US: MM/DD/YY
    62 00001D36 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    63 00001D3B C1E805              <1>     shr eax, 5
    64 00001D3E E86F000000          <1>     call .printFirst
    65                              <1> 
    66 00001D43 8A15F0E2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    67 00001D49 B402                <1>     mov ah, 02h
    68 00001D4B CD41                <1>     int 41h
    69                              <1> 
    70 00001D4D 89C8                <1>     mov eax, ecx
    71 00001D4F 251F000000          <1>     and eax, 1Fh    ;Save day bits
    72 00001D54 E875000000          <1>     call .printSecond
    73                              <1> 
    74 00001D59 8A15DAE2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    75 00001D5F B402                <1>     mov ah, 02h
    76 00001D61 CD41                <1>     int 41h
    77                              <1> 
    78 00001D63 89C8                <1>     mov eax, ecx
    79 00001D65 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    80 00001D6A C1E809              <1>     shr eax, 9
    81 00001D6D 5B                  <1>     pop rbx ;Get the year signature back
    82 00001D6E E86B000000          <1>     call .printYear
    83                              <1>     return
    19                              <2> %%_ret:
    20 00001D73 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    84                              <1> .jpnDate:
    85                              <1> ;Japan: YY/MM/DD
    86 00001D74 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    87 00001D79 C1E809              <1>     shr eax, 9
    88 00001D7C 5B                  <1>     pop rbx ;Get the year signature back
    89 00001D7D E85C000000          <1>     call .printYear
    90                              <1> 
    91 00001D82 8A15B1E2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    92 00001D88 B402                <1>     mov ah, 02h
    93 00001D8A CD41                <1>     int 41h
    94                              <1> 
    95 00001D8C 89C8                <1>     mov eax, ecx
    96 00001D8E 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    97 00001D93 C1E805              <1>     shr eax, 5
    98 00001D96 E833000000          <1>     call .printSecond
    99                              <1> 
   100 00001D9B 8A1598E2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
   101 00001DA1 B402                <1>     mov ah, 02h
   102 00001DA3 CD41                <1>     int 41h
   103                              <1> 
   104 00001DA5 89C8                <1>     mov eax, ecx
   105 00001DA7 251F000000          <1>     and eax, 1Fh    ;Save day bits
   106 00001DAC E81D000000          <1>     call .printSecond
   107                              <1>     return
    19                              <2> %%_ret:
    20 00001DB1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   108                              <1> 
   109                              <1> ;Each of these require eax setup correctly
   110                              <1> .printFirst:
   111 00001DB2 51                  <1>     push rcx
   112 00001DB3 E87B040000          <1>     call getDecimalWord
   113 00001DB8 84ED                <1>     test ch, ch ;Do we have an upper digit?
   114 00001DBA 7504                <1>     jnz .skipSpace
   115 00001DBC 88CD                <1>     mov ch, cl
   116 00001DBE B120                <1>     mov cl, " "
   117                              <1> .skipSpace:
   118 00001DC0 88CA                <1>     mov dl, cl
   119 00001DC2 B402                <1>     mov ah, 02h
   120 00001DC4 CD41                <1>     int 41h
   121 00001DC6 88EA                <1>     mov dl, ch
   122 00001DC8 B402                <1>     mov ah, 02h
   123 00001DCA CD41                <1>     int 41h
   124 00001DCC 59                  <1>     pop rcx
   125                              <1>     return
    19                              <2> %%_ret:
    20 00001DCD C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   126                              <1> .printSecond:
   127 00001DCE 51                  <1>     push rcx
   128 00001DCF E85F040000          <1>     call getDecimalWord
   129 00001DD4 84ED                <1>     test ch, ch ;Do we have an upper digit?
   130 00001DD6 75E8                <1>     jnz .skipSpace
   131 00001DD8 88CD                <1>     mov ch, cl
   132 00001DDA B130                <1>     mov cl, "0"
   133 00001DDC EBE2                <1>     jmp short .skipSpace
   134                              <1> .printYear:
   135 00001DDE 05BC070000          <1>     add eax, 1980
   136 00001DE3 51                  <1>     push rcx
   137 00001DE4 53                  <1>     push rbx
   138 00001DE5 E849040000          <1>     call getDecimalWord ;Get unpacked in rcx
   139 00001DEA 5B                  <1>     pop rbx
   140 00001DEB 84DB                <1>     test bl, bl
   141 00001DED 740C                <1>     jz .twoDigitYear
   142 00001DEF 88CA                <1>     mov dl, cl  ;Print the first digit
   143 00001DF1 B402                <1>     mov ah, 02h
   144 00001DF3 CD41                <1>     int 41h
   145 00001DF5 88EA                <1>     mov dl, ch  ;Print the second digit
   146 00001DF7 B402                <1>     mov ah, 02h
   147 00001DF9 CD41                <1>     int 41h
   148                              <1> .twoDigitYear:
   149 00001DFB C1E910              <1>     shr ecx, 10h    ;Get high word low
   150 00001DFE 88CA                <1>     mov dl, cl  ;Print the upper digit
   151 00001E00 B402                <1>     mov ah, 02h
   152 00001E02 CD41                <1>     int 41h
   153 00001E04 88EA                <1>     mov dl, ch  ;Print the lower digit
   154 00001E06 B402                <1>     mov ah, 02h
   155 00001E08 CD41                <1>     int 41h
   156 00001E0A 59                  <1>     pop rcx
   157                              <1>     return
    19                              <2> %%_ret:
    20 00001E0B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   158                              <1> 
   159                              <1> 
   160                              <1> printTime:
   161                              <1> ;Input: eax = Packed Time
   162                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   163                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   164 00001E0C 89C1                <1>     mov ecx, eax
   165 00001E0E 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   166 00001E13 C1E80B              <1>     shr eax, 11
   167 00001E16 803D22E2FFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   168 00001E1D 750B                <1>     jne .ampm
   169 00001E1F E85A000000          <1>     call .printHours
   170 00001E24 E831000000          <1>     call .printMinutes
   171                              <1>     return
    19                              <2> %%_ret:
    20 00001E29 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   172                              <1> .ampm:
   173 00001E2A 3D0C000000          <1>     cmp eax, 12
   174 00001E2F 7713                <1>     ja .pm
   175 00001E31 7416                <1>     je .pm2
   176 00001E33 E846000000          <1>     call .printHours
   177 00001E38 E81D000000          <1>     call .printMinutes
   178 00001E3D B261                <1>     mov dl, "a"
   179 00001E3F B402                <1>     mov ah, 02h
   180 00001E41 CD41                <1>     int 41h
   181                              <1>     return
    19                              <2> %%_ret:
    20 00001E43 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   182                              <1> .pm:
   183 00001E44 2D0C000000          <1>     sub eax, 12
   184                              <1> .pm2:
   185 00001E49 E830000000          <1>     call .printHours
   186 00001E4E E807000000          <1>     call .printMinutes
   187 00001E53 B270                <1>     mov dl, "p"
   188 00001E55 B402                <1>     mov ah, 02h
   189 00001E57 CD41                <1>     int 41h
   190                              <1>     return
    19                              <2> %%_ret:
    20 00001E59 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   191                              <1> .printMinutes:
   192 00001E5A 8A15DBE1FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   193 00001E60 B402                <1>     mov ah, 02h
   194 00001E62 CD41                <1>     int 41h
   195                              <1> 
   196 00001E64 89C8                <1>     mov eax, ecx
   197 00001E66 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   198 00001E6B C1E805              <1>     shr eax, 5
   199                              <1> .printMinutesAlt:
   200 00001E6E 51                  <1>     push rcx
   201 00001E6F E8BF030000          <1>     call getDecimalWord
   202 00001E74 84ED                <1>     test ch, ch ;Do we have an upper digit?
   203 00001E76 7514                <1>     jnz .skipSpace
   204 00001E78 88CD                <1>     mov ch, cl
   205 00001E7A B130                <1>     mov cl, "0"
   206 00001E7C EB0E                <1>     jmp short .skipSpace
   207                              <1> .printHours:
   208 00001E7E 51                  <1>     push rcx
   209 00001E7F E8AF030000          <1>     call getDecimalWord
   210 00001E84 84ED                <1>     test ch, ch ;Do we have an upper digit?
   211 00001E86 7504                <1>     jnz .skipSpace
   212 00001E88 88CD                <1>     mov ch, cl
   213 00001E8A B120                <1>     mov cl, " "
   214                              <1> .skipSpace:
   215 00001E8C 88CA                <1>     mov dl, cl
   216 00001E8E B402                <1>     mov ah, 02h
   217 00001E90 CD41                <1>     int 41h
   218 00001E92 88EA                <1>     mov dl, ch
   219 00001E94 B402                <1>     mov ah, 02h
   220 00001E96 CD41                <1>     int 41h
   221 00001E98 59                  <1>     pop rcx
   222                              <1>     return
    19                              <2> %%_ret:
    20 00001E99 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   223                              <1> 
   224                              <1> 
   225                              <1> putVersionInPrompt:
   226 00001E9A 488D153CE9FFFF      <1>     lea rdx, dosVer
   227 00001EA1 B409                <1>     mov ah, 09h ;Print String
   228 00001EA3 CD41                <1>     int 41h
   229 00001EA5 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   230 00001EA7 CD41                <1>     int 41h
   231 00001EA9 50                  <1>     push rax    ;Save minor version
   232 00001EAA E89C000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   233 00001EAF E8B4000000          <1>     call printPackedBCD ;Print al
   234 00001EB4 B22E                <1>     mov dl, "."
   235 00001EB6 B402                <1>     mov ah, 02h
   236 00001EB8 CD41                <1>     int 41h
   237 00001EBA 58                  <1>     pop rax
   238 00001EBB 88E0                <1>     mov al, ah  ;Get the minor version low
   239 00001EBD E889000000          <1>     call hexToBCD
   240 00001EC2 E8A1000000          <1>     call printPackedBCD
   241                              <1>     return
    19                              <2> %%_ret:
    20 00001EC7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   242                              <1> putEscInPrompt:
   243 00001EC8 B21B                <1>     mov dl, ESC
   244 00001ECA EB1C                <1>     jmp short outChar
   245                              <1> 
   246                              <1> putMoneyInPrompt:
   247 00001ECC B224                <1>     mov dl, "$"
   248 00001ECE EB18                <1>     jmp short outChar
   249                              <1> 
   250                              <1> putEquInPrompt:
   251 00001ED0 B23D                <1>     mov dl, "="
   252 00001ED2 EB14                <1>     jmp short outChar
   253                              <1> 
   254                              <1> putPipeInPrompt:
   255 00001ED4 B27C                <1>     mov dl, "|"
   256 00001ED6 EB10                <1>     jmp short outChar
   257                              <1> 
   258                              <1> putGTinPrompt:
   259 00001ED8 B23E                <1>     mov dl, ">"
   260 00001EDA EB0C                <1>     jmp short outChar
   261                              <1> 
   262                              <1> putLTinPrompt:
   263 00001EDC B23C                <1>     mov dl, "<"
   264 00001EDE EB08                <1>     jmp short outChar
   265                              <1> 
   266                              <1> putDriveInPrompt:
   267 00001EE0 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   268 00001EE2 CD41                <1>     int 41h
   269 00001EE4 0441                <1>     add al, "A" ;Convert to letter
   270 00001EE6 88C2                <1>     mov dl, al
   271                              <1> outChar:
   272 00001EE8 B402                <1>     mov ah, 02h ;Echo to STDOUT
   273 00001EEA CD41                <1>     int 41h
   274                              <1>     return
    19                              <2> %%_ret:
    20 00001EEC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   275                              <1> putCWDInPrompt:
   276 00001EED 488D3D60E1FFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   277 00001EF4 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   278 00001EF6 CD41                <1>     int 41h
   279 00001EF8 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   280 00001EFA FEC2                <1>     inc dl
   281 00001EFC 0441                <1>     add al, "A" ;Convert to letter
   282 00001EFE B43A                <1>     mov ah, ":"
   283 00001F00 66AB                <1>     stosw   ;Store X:, rdi+=2
   284 00001F02 8A051BE1FFFF        <1>     mov al, byte [pathSep]
   285 00001F08 AA                  <1>     stosb   ;Store pathSep, inc rdi
   286 00001F09 B447                <1>     mov ah, 47h ;Get Current Working Directory
   287 00001F0B 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   288 00001F0E CD41                <1>     int 41h
   289 00001F10 E884000000          <1>     call strlen
   290 00001F15 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   291                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   292 00001F1B B440                <1>     mov ah, 40h ;Write to handle
   293 00001F1D BB01000000          <1>     mov ebx, 1  ;STDOUT
   294 00001F22 488D152BE1FFFF      <1>     lea rdx, currDirStr
   295 00001F29 CD41                <1>     int 41h
   296                              <1>     return
    19                              <2> %%_ret:
    20 00001F2B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   297                              <1> 
   298                              <1> BCDtoHex:
   299                              <1> ;Converts a BCD value to a Hex byte
   300                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   301 00001F2C 51                  <1>     push rcx
   302 00001F2D 0FB6C0              <1>     movzx eax, al   ;Zero extend
   303 00001F30 89C1                <1>     mov ecx, eax    ;Save al in ecx
   304 00001F32 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   305 00001F37 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   306 00001F3D C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   307                              <1> .bth:
   308 00001F40 050A000000          <1>     add eax, 10
   309 00001F45 FFC9                <1>     dec ecx
   310 00001F47 75F7                <1>     jnz .bth
   311 00001F49 59                  <1>     pop rcx
   312 00001F4A C3                  <1>     ret
   313                              <1> 
   314                              <1> hexToBCD:
   315                              <1> ;Converts a Hex byte into two BCD digits
   316                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   317 00001F4B 51                  <1>     push rcx
   318 00001F4C 0FB6C0              <1>     movzx eax, al   ;Zero extend
   319 00001F4F 31C9                <1>     xor ecx, ecx
   320                              <1> .htb0:
   321 00001F51 3D0A000000          <1>     cmp eax, 10
   322 00001F56 7209                <1>     jb .htb1
   323 00001F58 2D0A000000          <1>     sub eax, 10
   324 00001F5D FFC1                <1>     inc ecx
   325 00001F5F EBF0                <1>     jmp short .htb0
   326                              <1> .htb1:
   327 00001F61 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   328 00001F64 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   329 00001F66 59                  <1>     pop rcx
   330 00001F67 C3                  <1>     ret
   331                              <1> 
   332                              <1> printPackedBCD:
   333                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   334                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   335                              <1> ;Preserves all registers
   336 00001F68 50                  <1>     push rax
   337 00001F69 52                  <1>     push rdx
   338 00001F6A 88C4                <1>     mov ah, al
   339 00001F6C 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   340 00001F6E 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   341 00001F71 7508                <1>     jnz .upperNybble
   342 00001F73 B220                <1>     mov dl, " "
   343 00001F75 B402                <1>     mov ah, 02h
   344 00001F77 CD41                <1>     int 41h
   345 00001F79 EB0E                <1>     jmp short .lowerNybble
   346                              <1> .upperNybble:
   347 00001F7B 50                  <1>     push rax
   348 00001F7C C0EC04              <1>     shr ah, 4
   349 00001F7F 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   350 00001F82 88E2                <1>     mov dl, ah
   351 00001F84 B402                <1>     mov ah, 02h ;Print DL
   352 00001F86 CD41                <1>     int 41h
   353 00001F88 58                  <1>     pop rax
   354                              <1> .lowerNybble:
   355 00001F89 0430                <1>     add al, "0"
   356 00001F8B 88C2                <1>     mov dl, al
   357 00001F8D B402                <1>     mov ah, 02h ;Print DL
   358 00001F8F CD41                <1>     int 41h
   359 00001F91 5A                  <1>     pop rdx
   360 00001F92 58                  <1>     pop rax
   361                              <1>     return
    19                              <2> %%_ret:
    20 00001F93 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   362                              <1> 
   363                              <1> getCurrentDrive:
   364                              <1> ;Returns the 0 based current drive in al
   365 00001F94 B419                <1>     mov ah, 19h
   366 00001F96 CD41                <1>     int 41h
   367                              <1>     return
    19                              <2> %%_ret:
    20 00001F98 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   368                              <1> 
   369                              <1> strlen:
   370                              <1> ;Gets the length of a ASCIIZ string
   371                              <1> ;Input: rdi = Source buffer
   372                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   373 00001F99 50                  <1>     push rax
   374 00001F9A 57                  <1>     push rdi
   375 00001F9B 30C0                <1>     xor al, al
   376 00001F9D 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   377 00001F9F FFC9                <1>     dec ecx ;rcx = -1
   378 00001FA1 F2AE                <1>     repne scasb
   379 00001FA3 F7D1                <1>     not ecx
   380 00001FA5 5F                  <1>     pop rdi
   381 00001FA6 58                  <1>     pop rax
   382                              <1>     return
    19                              <2> %%_ret:
    20 00001FA7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   383                              <1> 
   384                              <1> findTerminatorOrEOC:
   385                              <1> ;Advances rsi to the next string terminator char or the next End of command
   386                              <1> ; char
   387                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   388                              <1> ;If a end of command char found, also sets CF
   389 00001FA8 AC                  <1>     lodsb
   390 00001FA9 3C0D                <1>     cmp al, CR
   391 00001FAB 7419                <1>     je .endOfInput
   392 00001FAD E82B000000          <1>     call isALterminator
   393 00001FB2 7419                <1>     jz .exit
   394 00001FB4 3A0569E0FFFF        <1>     cmp al, byte [pathSep]
   395 00001FBA 7411                <1>     je .exit
   396 00001FBC 3A0562E0FFFF        <1>     cmp al, byte [switchChar]
   397 00001FC2 7409                <1>     je .exit
   398 00001FC4 EBE2                <1>     jmp short findTerminatorOrEOC
   399                              <1> .endOfInput:
   400 00001FC6 E802000000          <1>     call .exit
   401 00001FCB F9                  <1>     stc 
   402                              <1>     return
    19                              <2> %%_ret:
    20 00001FCC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   403                              <1> .exit:
   404 00001FCD 48FFCE              <1>     dec rsi ;Point to the terminating char
   405                              <1>     return
    19                              <2> %%_ret:
    20 00001FD0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   406                              <1> 
   407                              <1> findTerminator:
   408                              <1> ;Advances rsi to the next string terminator char
   409                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   410 00001FD1 AC                  <1>     lodsb
   411 00001FD2 E806000000          <1>     call isALterminator
   412 00001FD7 75F8                <1>     jnz findTerminator
   413 00001FD9 48FFCE              <1>     dec rsi
   414                              <1>     return
    19                              <2> %%_ret:
    20 00001FDC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   415                              <1> isALterminator:
   416                              <1> ;Returns: ZF=NZ if al is not a terminator (Not including CR)
   417                              <1> ;         ZF=ZY if al is a terminator
   418 00001FDD 3C20                <1>     cmp al, " "
   419                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001FDF 74(DC)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   420 00001FE1 3C3B                <1>     cmp al, ";"
   421                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001FE3 74(DC)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   422 00001FE5 3C3D                <1>     cmp al, "="
   423                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001FE7 74(DC)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   424 00001FE9 3C2C                <1>     cmp al, ","
   425                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001FEB 74(DC)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   426 00001FED 3C09                <1>     cmp al, TAB
   427                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001FEF 74(DC)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   428 00001FF1 3C0A                <1>     cmp al, LF
   429                              <1>     return
    19                              <2> %%_ret:
    20 00001FF3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   430                              <1> 
   431                              <1> findEndOfCommand:
   432                              <1> ;Moves rsi to the | or CR that terminates this command
   433 00001FF4 AC                  <1>     lodsb
   434 00001FF5 E806000000          <1>     call isALEndOfCommand
   435 00001FFA 75F8                <1>     jnz findEndOfCommand
   436 00001FFC 48FFCE              <1>     dec rsi
   437                              <1>     return
    19                              <2> %%_ret:
    20 00001FFF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   438                              <1> isALEndOfCommand:
   439 00002000 3C7C                <1>     cmp al, "|"
   440                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002002 74(FF)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   441 00002004 3C0D                <1>     cmp al, CR
   442                              <1>     return
    19                              <2> %%_ret:
    20 00002006 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   443                              <1> 
   444                              <1> scanForRedir:
   445                              <1> ;Returns: AL = 0 => No redirection, terminate with CR
   446                              <1> ;         AL = 1 => Redirection, type <
   447                              <1> ;         AL = 10 => Redir, type >
   448                              <1> ;         AL = 20 => Redir, type >>
   449                              <1> ;If multiple redirs found, the last one of that type counts.
   450 00002007 56                  <1>     push rsi
   451 00002008 55                  <1>     push rbp
   452 00002009 30E4                <1>     xor ah, ah
   453                              <1> .lp:
   454 0000200B AC                  <1>     lodsb
   455 0000200C 3C3E                <1>     cmp al, ">"
   456                              <1> .exit:
   457 0000200E 5D                  <1>     pop rbp
   458 0000200F 5E                  <1>     pop rsi
   459                              <1>     return
    19                              <2> %%_ret:
    20 00002010 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   460                              <1> 
   461                              <1> 
   462                              <1> skipSpaces:
   463                              <1> ;Also skips tabs
   464                              <1> ;Input: rsi must point to the start of the data string
   465                              <1> ;Output: rsi points to the first non-space char
   466 00002011 803E20              <1>     cmp byte [rsi], " "
   467 00002014 7405                <1>     je .skip    ;If equal to a space, skip it
   468 00002016 803E09              <1>     cmp byte [rsi], TAB
   469                              <1>     retne   ;If not equal to a tab or space, return
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002019 75(10)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   470                              <1> .skip:
   471 0000201B 48FFC6              <1>     inc rsi
   472 0000201E EBF1                <1>     jmp short skipSpaces
   473                              <1> 
   474                              <1> printPrompt:
   475 00002020 66813DF8DFFFFFFFFF  <1>     cmp word [promptPtr], -1
   476 00002029 750B                <1>     jne .validPrompt
   477                              <1>     ;Here we print the default prompt
   478 0000202B E8BDFEFFFF          <1>     call putCWDInPrompt
   479 00002030 E8A3FEFFFF          <1>     call putGTinPrompt
   480                              <1>     return
    19                              <2> %%_ret:
    20 00002035 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   481                              <1> .validPrompt:
   482                              <1>     return
    19                              <2> %%_ret:
    20 00002036 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   483                              <1> 
   484                              <1> clearCommandState:
   485                              <1> ;Clears the command state
   486 00002037 488D3D69E0FFFF      <1>     lea rdi, cmdStatePtr
   487 0000203E B90A000000          <1>     mov ecx, cmdStateL
   488 00002043 31C0                <1>     xor eax, eax
   489 00002045 F3AA                <1>     rep stosb
   490                              <1>     return
    19                              <2> %%_ret:
    20 00002047 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   491                              <1> 
   492                              <1> clearCommandLineState:
   493                              <1> ;Clears the command line state after a 0Dh encountered
   494 00002048 488D3D48E0FFFF      <1>     lea rdi, cmdLineStatePtr
   495 0000204F B91A000000          <1>     mov ecx, cmdLineStateL
   496 00002054 31C0                <1>     xor eax, eax
   497 00002056 F3AA                <1>     rep stosb
   498                              <1>     return
    19                              <2> %%_ret:
    20 00002058 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   499                              <1> 
   500                              <1> asciiToFCB:
   501                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   502                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   503                              <1> ;Also doesn't check if chars are valid
   504                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   505                              <1> ;Name is space padded.
   506                              <1> ;Input: rsi = ASCII string buffer
   507                              <1> ;       rdi = FCB name buffer
   508                              <1> ;Output: al = Char that terminated the source string 
   509 00002059 53                  <1>     push rbx    
   510 0000205A 57                  <1>     push rdi
   511 0000205B B90B000000          <1>     mov ecx, 11
   512 00002060 B020                <1>     mov al, " "
   513 00002062 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   514 00002064 5F                  <1>     pop rdi
   515 00002065 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   516 00002068 EB1D                <1>     jmp short asciiFilenameToFCB.processName
   517                              <1> asciiFilenameToFCB:
   518                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   519                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   520                              <1> ;Also doesn't check if chars are valid
   521                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   522                              <1> ;Name is space padded.
   523                              <1> ;Input: rsi = ASCII string buffer
   524                              <1> ;       rdi = FCB name buffer
   525                              <1> ;Output: al = Char that terminated the source string 
   526 0000206A 53                  <1>     push rbx    
   527 0000206B 57                  <1>     push rdi
   528 0000206C B90B000000          <1>     mov ecx, 11
   529 00002071 B020                <1>     mov al, " "
   530 00002073 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   531 00002075 5F                  <1>     pop rdi
   532 00002076 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   533                              <1>     ;Preprocess for Dir Searches
   534 00002079 803E2E              <1>     cmp byte [rsi], "."
   535 0000207C 7509                <1>     jne .processName
   536 0000207E A4                  <1>     movsb   ;Store the first dot
   537 0000207F 803E2E              <1>     cmp byte [rsi], "."
   538 00002082 752C                <1>     jne .exitBadChar
   539 00002084 A4                  <1>     movsb
   540 00002085 EB29                <1>     jmp short .exitBadChar
   541                              <1> .processName:
   542 00002087 AC                  <1>     lodsb   ;Get the char in al
   543 00002088 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   544 0000208A 7426                <1>     jz .exit
   545 0000208C 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   546 0000208E 7407                <1>     je .extSpace
   547 00002090 3C2E                <1>     cmp al, "."
   548 00002092 740C                <1>     je .ext
   549 00002094 AA                  <1>     stosb   ;Store the char
   550 00002095 EBF0                <1>     jmp short .processName
   551                              <1> .extSpace:
   552                              <1> ;Now we scan for a period in the name
   553 00002097 AC                  <1>     lodsb   ;Get a char and increase rsi
   554 00002098 84C0                <1>     test al, al
   555 0000209A 7416                <1>     jz .exit
   556 0000209C 3C2E                <1>     cmp al, "."     ;If al is not a period...
   557 0000209E 75F7                <1>     jne .extSpace   ; keep searching
   558                              <1> .ext:
   559 000020A0 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   560                              <1> .processExt:
   561 000020A4 AC                  <1>     lodsb
   562 000020A5 84C0                <1>     test al, al
   563 000020A7 7409                <1>     jz .exit
   564 000020A9 3C20                <1>     cmp al, " "
   565 000020AB 7405                <1>     je .exit
   566 000020AD AA                  <1>     stosb
   567 000020AE EBF4                <1>     jmp short .processExt
   568                              <1> .exitBadChar:
   569 000020B0 30C0                <1>     xor al, al  ;Return a null terminator
   570                              <1> .exit:
   571 000020B2 5B                  <1>     pop rbx
   572                              <1>     return
    19                              <2> %%_ret:
    20 000020B3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   573                              <1> 
   574                              <1> FCBToAsciiz:
   575                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   576                              <1> ;Name is space padded too
   577                              <1> ;Input: rsi = FCB name buffer
   578                              <1> ;       rdi = ASCIIZ string buffer
   579 000020B4 B908000000          <1>     mov ecx, 8
   580 000020B9 F3A4                <1>     rep movsb   ;Move the name over
   581                              <1> .scanNameSpace:
   582 000020BB 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   583 000020BF 750D                <1>     jne .ext
   584 000020C1 48FFCF              <1>     dec rdi
   585 000020C4 FFC1                <1>     inc ecx
   586 000020C6 81F908000000        <1>     cmp ecx, 8
   587 000020CC 72ED                <1>     jb .scanNameSpace
   588                              <1> .ext:
   589 000020CE 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   590 000020D3 7506                <1>     jne .validExt
   591 000020D5 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   592 000020D9 7415                <1>     je .exit
   593                              <1> .validExt:
   594 000020DB B02E                <1>     mov al, "." ;We have a valid extension, store a period
   595 000020DD AA                  <1>     stosb
   596 000020DE B903000000          <1>     mov ecx, 3
   597 000020E3 F3A4                <1>     rep movsb   ;Move the three extension chars over
   598                              <1> .scanExtSpace:
   599 000020E5 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   600 000020E9 7505                <1>     jne .exit
   601 000020EB 48FFCF              <1>     dec rdi
   602 000020EE EBF5                <1>     jmp short .scanExtSpace
   603                              <1> .exit:
   604 000020F0 31C0                <1>     xor eax, eax
   605 000020F2 AA                  <1>     stosb   ;Store a null at the end
   606                              <1>     return
    19                              <2> %%_ret:
    20 000020F3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   607                              <1> 
   608                              <1> buildCommandPath:
   609                              <1> ;Based on the first argument on the command line
   610                              <1> ; will build a full ASCIIZ path in searchSpec to the file/dir specified
   611                              <1>     ;If this is a relative path, will handle correctly (tho unnecessary)
   612 000020F4 0FB605B1DFFFFF      <1>     movzx eax, byte [arg1Off]
   613 000020FB 488D358AE0FFFF      <1>     lea rsi, cmdBuffer
   614 00002102 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   615 00002105 8A3D18DFFFFF        <1>     mov bh, byte [pathSep]
   616 0000210B B33A                <1>     mov bl, ":"
   617 0000210D 383E                <1>     cmp byte [rsi], bh  ;Is the first char relative to root?
   618 0000210F 7458                <1>     je .absoluteCurrent
   619 00002111 66395E01            <1>     cmp word [rsi + 1], bx    ;This checks if absolute or relative
   620 00002115 746D                <1>     je .absolutePath
   621 00002117 385E01              <1>     cmp byte [rsi + 1], bl  ;Check if a drive separator
   622 0000211A 7409                <1>     je .relativeGiven
   623                              <1> ;No drive letter given, must get Current Drive
   624 0000211C E873FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   625 00002121 0441                <1>     add al, "A"
   626 00002123 EB0B                <1>     jmp short .relativeCommon
   627                              <1> .relativeGiven:
   628                              <1> ;Drive letter pointed to by AL
   629 00002125 8A06                <1>     mov al, byte [rsi]  ;Get drive letter in al
   630 00002127 24DF                <1>     and al, 0DFh    ;Convert to UC
   631 00002129 4881C602000000      <1>     add rsi, 2  ;Skip the given drive letter and the colon
   632                              <1> .relativeCommon:
   633                              <1>     ;al has drive letter
   634 00002130 88C2                <1>     mov dl, al  ;Save drive letter in dl
   635 00002132 80EA40              <1>     sub dl, "@" ;Get 1 based drive number in dl
   636 00002135 B43A                <1>     mov ah, ":" ;Get the colon in too
   637 00002137 488D3DE1E1FFFF      <1>     lea rdi, searchSpec ;Start building our search path here
   638 0000213E 66AB                <1>     stosw   ;Store X:
   639 00002140 8A05DDDEFFFF        <1>     mov al, byte [pathSep]
   640 00002146 AA                  <1>     stosb   ;Store pathSep
   641 00002147 56                  <1>     push rsi    ;Save user input string
   642 00002148 4889FE              <1>     mov rsi, rdi    ;Put the current directory here for this drive
   643 0000214B B447                <1>     mov ah, 47h ;Get Current Working Directory, dl has drive number
   644 0000214D CD41                <1>     int 41h ;Won't fail as drive letter in dl confirmed ok
   645 0000214F 5E                  <1>     pop rsi
   646                              <1>     ;Now want to find terminating null
   647 00002150 30C0                <1>     xor al, al
   648 00002152 31C9                <1>     xor ecx, ecx
   649 00002154 FFC9                <1>     dec ecx
   650 00002156 F2AE                <1>     repne scasb ;Search for the terminating null
   651 00002158 48FFCF              <1>     dec rdi ;Go back one once found
   652 0000215B 8A05C2DEFFFF        <1>     mov al, byte [pathSep]
   653 00002161 3847FF              <1>     cmp byte [rdi - 1], al
   654 00002164 7425                <1>     je .buildPath ;If the previous char is a pathsep, skip storing another
   655 00002166 AA                  <1>     stosb   ;Store the pathsep
   656 00002167 EB22                <1>     jmp short .buildPath  ;Now we copy the user string over and good to go
   657                              <1> .absoluteCurrent:
   658 00002169 E826FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   659 0000216E 0441                <1>     add al, "A"
   660 00002170 B43A                <1>     mov ah, ":" ;ax has X: now to store 
   661 00002172 488D3DA6E1FFFF      <1>     lea rdi, searchSpec
   662 00002179 66AB                <1>     stosw
   663 0000217B 8A05A2DEFFFF        <1>     mov al, byte [pathSep]
   664 00002181 AA                  <1>     stosb
   665 00002182 EB07                <1>     jmp short .buildPath
   666                              <1> .absolutePath:
   667 00002184 488D3D94E1FFFF      <1>     lea rdi, searchSpec
   668                              <1> .buildPath:
   669 0000218B E8F7EDFFFF          <1>     call copyCommandTailItem    ;Terminates with a 0 for free
   670 00002190 488D3588E1FFFF      <1>     lea rsi, searchSpec
   671 00002197 488D3D81E1FFFF      <1>     lea rdi, searchSpec
   672 0000219E B460                <1>     mov ah, 60h ;Truename it to avoid issues
   673 000021A0 CD41                <1>     int 41h
   674                              <1>     retc    ;Return if an error with CF=CY
    63                              <2> cret c
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 000021A2 7301                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 000021A4 C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   675                              <1>     ;Here we do one final check to ensure we dont end up with a A: but A:"\"
   676 000021A5 30C0                <1>     xor al, al
   677 000021A7 31C9                <1>     xor ecx, ecx
   678 000021A9 FFC9                <1>     dec ecx
   679 000021AB F2AE                <1>     repne scasb
   680 000021AD 48FFCF              <1>     dec rdi ;Go back to the final non-null char
   681 000021B0 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is the final non-null char a colon?
   682 000021B4 750A                <1>     jne .okExit   ;Return if not
   683 000021B6 31C0                <1>     xor eax, eax
   684 000021B8 8A0565DEFFFF        <1>     mov al, byte [pathSep]  ;IF it is, insert a pathsep
   685 000021BE 66AB                <1>     stosw   ;Store the terminating 0 after the pathsep
   686                              <1> .okExit:
   687 000021C0 F8                  <1>     clc
   688                              <1>     return
    19                              <2> %%_ret:
    20 000021C1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   689                              <1> 
   690                              <1> 
   691                              <1>     
   692                              <1> printDecimalWord:
   693                              <1> ;Takes qword in rax and print it's decimal representation
   694                              <1> ;Takes the qword in eax and prints its decimal representation
   695 000021C2 31C9                <1>     xor ecx, ecx
   696 000021C4 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   697 000021C6 85C0                <1>     test eax, eax
   698 000021C8 750C                <1>     jnz .notZero
   699 000021CA B930000000          <1>     mov ecx, "0"
   700 000021CF BD01000000          <1>     mov ebp, 1  ;Print one digit
   701 000021D4 EB3E                <1>     jmp short .dpfb2
   702                              <1> .notZero:
   703 000021D6 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   704 000021D8 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   705                              <1> .dpfb0:
   706 000021DD FFC5                <1>     inc ebp
   707 000021DF 81FD08000000        <1>     cmp ebp, 8
   708 000021E5 7206                <1>     jb .dpfb00
   709 000021E7 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   710 000021EB EB04                <1>     jmp short .dpfb01
   711                              <1> .dpfb00:
   712 000021ED 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   713                              <1> .dpfb01:
   714 000021F1 31D2                <1>     xor edx, edx
   715 000021F3 48F7F6              <1>     div rsi
   716 000021F6 80C230              <1>     add dl, '0'
   717 000021F9 80FA39              <1>     cmp dl, '9'
   718 000021FC 7603                <1>     jbe .dpfb1
   719 000021FE 80C207              <1>     add dl, 'A'-'0'-10
   720                              <1> .dpfb1:
   721 00002201 81FD08000000        <1>     cmp ebp, 8
   722 00002207 7204                <1>     jb .dpfb10
   723 00002209 88D3                <1>     mov bl, dl ;Add the bottom bits
   724 0000220B EB02                <1>     jmp short .dpfb11
   725                              <1> .dpfb10:
   726 0000220D 88D1                <1>     mov cl, dl    ;Save remainder byte
   727                              <1> .dpfb11:
   728 0000220F 4885C0              <1>     test rax, rax
   729 00002212 75C9                <1>     jnz .dpfb0
   730                              <1> .dpfb2:
   731 00002214 81FD08000000        <1>     cmp ebp, 8
   732 0000221A 7208                <1>     jb .dpfb20
   733 0000221C 88DA                <1>     mov dl, bl
   734 0000221E 48C1EB08            <1>     shr rbx, 8
   735 00002222 EB06                <1>     jmp short .dpfb21
   736                              <1> .dpfb20:
   737 00002224 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   738 00002226 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   739                              <1> .dpfb21:
   740 0000222A B402                <1>     mov ah, 02h
   741 0000222C CD41                <1>     int 41h
   742 0000222E FFCD                <1>     dec ebp
   743 00002230 75E2                <1>     jnz .dpfb2
   744                              <1>     return
    19                              <2> %%_ret:
    20 00002232 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   745                              <1> 
   746                              <1> getDecimalWord:
   747                              <1> ;Works on MAX A dword in eax
   748                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   749 00002233 31C9                <1>     xor ecx, ecx
   750 00002235 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   751 00002237 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   752                              <1> .dpfb0:
   753 0000223C FFC5                <1>     inc ebp
   754 0000223E 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   755 00002242 31D2                <1>     xor edx, edx
   756 00002244 48F7F3              <1>     div rbx
   757 00002247 80C230              <1>     add dl, '0'
   758 0000224A 80FA39              <1>     cmp dl, '9'
   759 0000224D 7603                <1>     jbe .dpfb1
   760 0000224F 80C207              <1>     add dl, 'A'-'0'-10
   761                              <1> .dpfb1:
   762 00002252 88D1                <1>     mov cl, dl    ;Save remainder byte
   763 00002254 4885C0              <1>     test rax, rax
   764 00002257 75E3                <1>     jnz .dpfb0
   765                              <1>     return
    19                              <2> %%_ret:
    20 00002259 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   766                              <1> 
   767                              <1> freezePC:
   768 0000225A 488D1554E8FFFF      <1>     lea rdx, memBad1
   769 00002261 B409                <1>     mov ah, 09h
   770 00002263 CD41                <1>     int 41h
   771                              <1> .altEP:
   772 00002265 488D1572E8FFFF      <1>     lea rdx, memBad3
   773 0000226C B409                <1>     mov ah, 09h
   774 0000226E CD41                <1>     int 41h
   775                              <1> .lp:
   776 00002270 F390                <1>     pause
   777 00002272 F4                  <1>     hlt
   778 00002273 EBFB                <1>     jmp short .lp
   779                              <1> 
   780                              <1> getFilenamePtrFromFilespec:
   781                              <1> ;Gets a pointer to the first char of a filename from a asciiz pathspec
   782                              <1> ;Input: rsi = Pathspec to search
   783                              <1> ;Output: rsi = Points to the first char of the filename
   784 00002275 4889F3              <1>     mov rbx, rsi
   785 00002278 31C0                <1>     xor eax, eax
   786 0000227A 4889F7              <1>     mov rdi, rsi    ;Go to the source string 
   787 0000227D E817FDFFFF          <1>     call strlen     ;Get it's length
   788 00002282 FFC9                <1>     dec ecx ;Dont include terminating null
   789 00002284 741F                <1>     jz .exitBad ;Was the string of length zero? Exit bad if so
   790 00002286 4801CE              <1>     add rsi, rcx    ;Goto last char in path (not null)
   791                              <1> .lp:
   792 00002289 4839F3              <1>     cmp rbx, rsi    ;Is rdi pointing to the start of the string?
   793                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000228C 74(59)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   794 0000228E 8A06                <1>     mov al, byte [rsi]  ;Get the char we currently are at
   795 00002290 3C3A                <1>     cmp al, ":" ;X: ?
   796 00002292 740D                <1>     je .pointFilename
   797 00002294 3A0589DDFFFF        <1>     cmp al, byte [pathSep]  ;Is al pathSep?
   798 0000229A 7405                <1>     je .pointFilename
   799 0000229C 48FFCE              <1>     dec rsi ;Not a terminator, go back a char
   800 0000229F EBE8                <1>     jmp short .lp
   801                              <1> .pointFilename:
   802 000022A1 48FFC6              <1>     inc rsi ;Now point to the first char of the pathname
   803                              <1>     return
    19                              <2> %%_ret:
    20 000022A4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   804                              <1> .exitBad:
   805 000022A5 F9                  <1>     stc
   806                              <1> .exit:
   807                              <1>     return
    19                              <2> %%_ret:
    20 000022A6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    17                                  %include "./Source/Utils/COMMAND/Source/int44h.asm"
    18                              <1> critErrorHandler:   ;Int 44h
    19                              <1> ;User Stack in usage here, must be swapped to before this is called
    20                              <1> ;Entered with:  
    21                              <1> ;               AH = Critical Error Bitfield
    22                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    23                              <1> ;               Bit 6 - Reserved
    24                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    25                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    26                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    27                              <1> ;               Bits [2-1] = Affected Disk Error
    28                              <1> ;                     0 0   DOS area
    29                              <1> ;                     0 1   FAT area
    30                              <1> ;                     1 0   Directory area
    31                              <1> ;                     1 1   Data area
    32                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    33                              <1> ;               AL  = Failing drive number if AH[7] = 0
    34                              <1> ;               DIL = Error code for errorMsg
    35                              <1> ;               RSI = EA of Device Header for which device the error occured
    36                              <1> ;Return:
    37                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    38                              <1> ;                  = 1 - Retry the Operation    (Retry)
    39                              <1> ;                  = 2 - Terminate the Program  (Abort)
    40                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    41 000022A7 53                  <1>     push rbx
    42 000022A8 51                  <1>     push rcx
    43 000022A9 52                  <1>     push rdx
    44 000022AA 57                  <1>     push rdi
    45 000022AB 56                  <1>     push rsi
    46 000022AC FC                  <1>     cld         ;Make String ops go forward
    47                              <1> 
    48 000022AD 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    49 000022B0 488D15B3E2FFFF      <1>     lea rdx, crlf
    50 000022B7 B409                <1>     mov ah, 09h ;Print String
    51 000022B9 CD41                <1>     int 41h
    52                              <1> 
    53 000022BB 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    54 000022C1 B90C000000          <1>     mov ecx, 0Ch
    55 000022C6 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    56 000022C8 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    57 000022CB 480FB7FF            <1>     movzx rdi, di
    58 000022CF 4889FA              <1>     mov rdx, rdi    ;Copy error code
    59 000022D2 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    60 000022D6 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    61 000022D9 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    62 000022DC 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    63 000022E3 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    64 000022E7 B409                <1>     mov ah, 09h ;Print String
    65 000022E9 CD41                <1>     int 41h     ;Call DOS to print first part of message
    66                              <1> 
    67 000022EB 488D1505020000      <1>     lea rdx, qword [.readmsg]
    68 000022F2 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    69 000022F9 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    70 000022FC 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    71 00002300 B409                <1>     mov ah, 09h ;Print String
    72 00002302 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    73                              <1> 
    74 00002304 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    75 00002307 0F85DF000000        <1>     jnz .charError
    76                              <1> ;Disk error continues here
    77 0000230D 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    78 00002314 B409                <1>     mov ah, 09h
    79 00002316 CD41                <1>     int 41h
    80 00002318 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    81 0000231A 80C241              <1>     add dl, "A" ;Add ASCII code
    82 0000231D B402                <1>     mov ah, 02h ;Print char in dl
    83 0000231F CD41                <1>     int 41h
    84                              <1> .userInput:
    85 00002321 488D1542E2FFFF      <1>     lea rdx, crlf  ;Print new line
    86 00002328 B409                <1>     mov ah, 09h
    87 0000232A CD41                <1>     int 41h
    88                              <1> ;Abort, Retry, Ignore, Fail is word order
    89                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    90                              <1> .userAbort:
    91                              <1> ;Abort is always an option
    92 0000232C 488D15E2010000      <1>     lea rdx, qword [.abortmsg]
    93 00002333 B409                <1>     mov ah, 09h
    94 00002335 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
    95                              <1> .userRetry:
    96 00002337 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    97 0000233A 7416                <1>     jz .userIgnore    ;If clear, dont print message
    98 0000233C 488D15EA010000      <1>     lea rdx, qword [.betweenMsg]
    99 00002343 B409                <1>     mov ah, 09h
   100 00002345 CD41                <1>     int 41h
   101 00002347 488D15D4010000      <1>     lea rdx, qword [.retrymsg]
   102 0000234E B409                <1>     mov ah, 09h
   103 00002350 CD41                <1>     int 41h
   104                              <1> .userIgnore:
   105 00002352 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   106 00002355 7416                <1>     jz .userFail
   107 00002357 488D15CF010000      <1>     lea rdx, qword [.betweenMsg]
   108 0000235E B409                <1>     mov ah, 09h
   109 00002360 CD41                <1>     int 41h
   110 00002362 488D15B2010000      <1>     lea rdx, qword [.ignoremsg]
   111 00002369 B409                <1>     mov ah, 09h
   112 0000236B CD41                <1>     int 41h
   113                              <1> .userFail:
   114 0000236D F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   115 00002370 7416                <1>     jz .userMsgEnd
   116 00002372 488D15B4010000      <1>     lea rdx, qword [.betweenMsg]
   117 00002379 B409                <1>     mov ah, 09h
   118 0000237B CD41                <1>     int 41h
   119 0000237D 488D15A4010000      <1>     lea rdx, qword [.failmsg]
   120 00002384 B409                <1>     mov ah, 09h
   121 00002386 CD41                <1>     int 41h
   122                              <1> .userMsgEnd:
   123 00002388 488D15A1010000      <1>     lea rdx, qword [.endMsg]
   124 0000238F B409                <1>     mov ah, 09h
   125 00002391 CD41                <1>     int 41h
   126                              <1> ;Get user input now 
   127 00002393 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   128 00002395 488D3D97010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   129 0000239C B401                <1>     mov ah, 01h ;STDIN without Console Echo
   130 0000239E CD41                <1>     int 41h ;Get char in al
   131 000023A0 3C61                <1>     cmp al, "a" ;Chack if lowercase
   132 000023A2 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   133 000023A4 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   134                              <1> .uip1:
   135 000023A6 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   136 000023A7 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   137 000023A9 FFC1                <1>     inc ecx
   138 000023AB 81F904000000        <1>     cmp ecx, 4
   139 000023B1 75F3                <1>     jne .uip1
   140 000023B3 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   141                              <1> .validInput:
   142 000023B8 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   143                              <1> ;Now check if the input is permitted
   144 000023BA 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   145 000023BC 7427                <1>     je .cehExit
   146 000023BE 84C0                <1>     test al, al ;Check if 0 => Ignore
   147 000023C0 740F                <1>     je .viIgnore
   148 000023C2 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   149 000023C4 7416                <1>     je .viRetry
   150                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   151 000023C6 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   152 000023C9 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   153 000023CF EB14                <1>     jmp short .cehExit
   154                              <1> .viIgnore:
   155 000023D1 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   156 000023D4 0F8447FFFFFF        <1>     jz .userInput
   157 000023DA EB09                <1>     jmp short .cehExit
   158                              <1> .viRetry:
   159 000023DC F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   160 000023DF 0F843CFFFFFF        <1>     jz .userInput
   161                              <1> .cehExit:
   162 000023E5 5E                  <1>     pop rsi
   163 000023E6 5F                  <1>     pop rdi
   164 000023E7 5A                  <1>     pop rdx
   165 000023E8 59                  <1>     pop rcx
   166 000023E9 5B                  <1>     pop rbx
   167 000023EA 48CF                <1>     iretq
   168                              <1> .charError:
   169 000023EC B908000000          <1>     mov ecx, 8  ;8 chars in device name
   170 000023F1 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   171                              <1> .ce1:
   172 000023F8 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   173 000023F9 88C2                <1>     mov dl, al  ;Move char into dl
   174 000023FB B402                <1>     mov ah, 02h
   175 000023FD CD41                <1>     int 41h ;Print char
   176 000023FF E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   177 00002401 E91BFFFFFF          <1>     jmp .userInput
   178                              <1> 
   179                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   180 00002406 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   180 0000240F 746563742024202020  <1>
   181 00002418 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   181 00002421 6E6974202420202020  <1>
   182 0000242A 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   182 00002433 202420202020202020  <1>
   183 0000243C 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   183 00002445 6F6D6D616E64202420  <1>
   184 0000244E 446174612024202020- <1>             db "Data $            "       ;Error 4
   184 00002457 202020202020202020  <1>
   185 00002460 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   185 00002469 737420242020202020  <1>
   186 00002472 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   186 0000247B 202020202020202020  <1>
   187 00002484 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   187 0000248D 656469612024202020  <1>
   188 00002496 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   188 0000249F 7420466F756E642024  <1>
   189 000024A8 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   189 000024B1 706572202420202020  <1>
   190 000024BA 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   190 000024C3 6C7420242020202020  <1>
   191 000024CC 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   191 000024D5 742024202020202020  <1>
   192 000024DE 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   192 000024E7 61696C757265202420  <1>
   193                              <1> 
   194 000024F0 64726976652024      <1> .drive      db "drive $"
   195 000024F7 6572726F7220726561- <1> .readmsg    db "error reading $"
   195 00002500 64696E672024        <1>
   196 00002506 6572726F7220777269- <1> .writemsg   db "error writing $"
   196 0000250F 74696E672024        <1>
   197 00002515 41626F727424        <1> .abortmsg   db "Abort$" 
   198 0000251B 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   199 00002522 526574727924        <1> .retrymsg   db "Retry$"
   200 00002528 4661696C24          <1> .failmsg    db "Fail$"
   201 0000252D 2C2024              <1> .betweenMsg db ", $"
   202 00002530 3F2024              <1> .endMsg     db "? $"
   203 00002533 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   204                              <1> 
   205                              <1> int43h:
   206 00002537 F9                  <1>     stc     ;Set CF to kill the task
   207 00002538 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    18                                  %include "./Source/Utils/COMMAND/Data/cmdEnv.asm"
    19                              <1>     
    20                              <1> masterEnv:  ;Yeet this is this is a child command processor
    21 0000253B 5F3A434F4D4D414E44- <1>     db "_:COMMAND.COM",0
    21 00002544 2E434F4D00          <1>
    22 00002549 504154483D0000      <1>     db "PATH=",0,0  ;Terminate with two null bytes
    23 00002550 202020202020202020- <1>     db ($ - masterEnv) dup (" ")    ;Pad the environment with spaces
    23 00002559 202020202020202020- <1>
    23 00002562 202020              <1>
    24                              <1> endOfAlloc: ;Symbol to find the start of where I can yeet 
    19                                  %include "./Source/Utils/COMMAND/Source/cmdLdr.asm"
    20                              <1> cmdLdr:
    21                              <1> ;First check if the version is ok. If not, return.
    22 00002565 B430                <1>     mov ah, 30h
    23 00002567 CD41                <1>     int 41h
    24 00002569 3C01                <1>     cmp al, 01h ;Version 1
    25 0000256B 760D                <1>     jbe .okVersion
    26 0000256D 488D15CD010000      <1>     lea rdx, badVerStr
    27 00002574 B409                <1>     mov ah, 09h
    28 00002576 CD41                <1>     int 41h
    29 00002578 CD40                <1>     int 40h ;Exit to caller or DOS to print bad command interpreter line
    30                              <1> .okVersion:
    31                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    32 0000257A 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    33 0000257E 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    34 00002582 48890586DAFFFF      <1>     mov qword [realParent], rax ;Preserve the real parent address
    35                              <1> ;Setup Int 42h, Int 43h and Int 44h
    36 00002589 498B400A            <1>     mov rax, qword [r8 + psp.oldInt42h] ;Preserve the original addresses
    37 0000258D 48890592DAFFFF      <1>     mov qword [parentInt42], rax
    38                              <1> 
    39 00002594 488D150CFDFFFF      <1>     lea rdx, critErrorHandler
    40 0000259B 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    41 0000259F B844250000          <1>     mov eax, 2544h
    42 000025A4 CD41                <1>     int 41h
    43 000025A6 488D158AFFFFFF      <1>     lea rdx, int43h
    44 000025AD 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    45 000025B1 B843250000          <1>     mov eax, 2543h
    46 000025B6 CD41                <1>     int 41h
    47 000025B8 488D1578E5FFFF      <1>     lea rdx, applicationReturn
    48 000025BF 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    49 000025C3 B842250000          <1>     mov eax, 2542h
    50 000025C8 CD41                <1>     int 41h
    51                              <1> ;Get a pointer to DOS Sysvars
    52 000025CA B452                <1>     mov ah, 52h ;Get sysvars
    53 000025CC CD41                <1>     int 41h
    54 000025CE 48891D42DAFFFF      <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    55                              <1> ;Call for simple internationalisation data
    56 000025D5 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    57 000025DA CD41                <1>     int 41h
    58 000025DC 3CFF                <1>     cmp al, -1
    59 000025DE 7412                <1>     je .skipSwitch
    60 000025E0 88153EDAFFFF        <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    61 000025E6 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    62 000025E9 7507                <1>     jne .skipSwitch
    63 000025EB C60531DAFFFF2F      <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    64                              <1> .skipSwitch:
    65 000025F2 B800380000          <1>     mov eax, 3800h  ;Get current country data
    66 000025F7 488D1530DAFFFF      <1>     lea rdx, ctryData
    67 000025FE CD41                <1>     int 41h ;Write the data to the internal country table
    68                              <1> ;Now determine if this is the master copy of COMMAND.COM
    69                              <1> ;Check if Int 4Eh has the same address as Int 4Dh. If so, we are master.
    70 00002600 B84E350000          <1>     mov eax, 354Eh  ;Get int 4Eh address
    71 00002605 CD41                <1>     int 41h
    72 00002607 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    73 0000260A B84D350000          <1>     mov eax, 354Dh  ;Get int 4Dh address
    74 0000260F CD41                <1>     int 41h
    75 00002611 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    76 00002614 755C                <1>     jne .skipMaster
    77                              <1> ;Ok so we are master command.com
    78                              <1> ;Now make myself the real parent
    79 00002616 C60508DAFFFFFF      <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    80 0000261D 4C8905EBD9FFFF      <1>     mov qword [realParent], r8
    81                              <1> ;Set master environment as mine
    82 00002624 488D0510FFFFFF      <1>     lea rax, masterEnv
    83 0000262B 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    84                              <1> ;Set current Drive in COMSPEC
    85 0000262F B019                <1>     mov al, 19h ;Get current Drive
    86 00002631 CD41                <1>     int 41h
    87 00002633 0441                <1>     add al, "A"
    88 00002635 880500FFFFFF        <1>     mov byte [masterEnv], al
    89                              <1> ;Set Int 4Eh up
    90 0000263B 488D156FE9FFFF      <1>     lea rdx, int4Eh
    91 00002642 B84E250000          <1>     mov eax, 254Eh ;Set this as Int 4Eh
    92 00002647 CD41                <1>     int 41h
    93                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    94                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    95 00002649 488D151ADFFFFF      <1>     lea rdx, crlf
    96 00002650 B409                <1>     mov ah, 09h
    97 00002652 CD41                <1>     int 41h
    98 00002654 E86CEFFFFF          <1>     call time
    99 00002659 E8A1EEFFFF          <1>     call date
   100 0000265E 488D1505DFFFFF      <1>     lea rdx, crlf
   101 00002665 B409                <1>     mov ah, 09h
   102 00002667 CD41                <1>     int 41h
   103 00002669 488D1DF5FEFFFF      <1>     lea rbx, endOfAlloc ;Save the Master Environment
   104 00002670 EB32                <1>     jmp short .printInit
   105                              <1> .skipMaster:
   106 00002672 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
   107 00002679 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
   108 00002681 0FB6059CD9FFFF      <1>     movzx eax, byte [switchChar]
   109 00002688 F2AE                <1>     repne scasb
   110 0000268A 67E310              <1>     jecxz .noSwitches
   111 0000268D 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
   112 00002690 24DF                <1>     and al, 0DFh    ;Convert to UC
   113 00002692 3C50                <1>     cmp al, "P" ;Is it permanent switch?
   114 00002694 7507                <1>     jne .noSwitches
   115 00002696 C60588D9FFFFFF      <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
   116                              <1> .noSwitches:
   117 0000269D 488D1D97FEFFFF      <1>     lea rbx, masterEnv  ;This is the base address to jettison
   118                              <1> .printInit:
   119                              <1> ;Finish by printing INIT string.
   120 000026A4 53                  <1>     push rbx
   121 000026A5 488D1521000000      <1>     lea rdx, initString
   122 000026AC B409                <1>     mov ah, 09h
   123 000026AE CD41                <1>     int 41h ;Print init string
   124 000026B0 E88AF2FFFF          <1>     call version.printVersionNumber
   125 000026B5 488D1547000000      <1>     lea rdx, initString2
   126 000026BC B409                <1>     mov ah, 09h
   127 000026BE CD41                <1>     int 41h ;Print init string
   128 000026C0 5B                  <1>     pop rbx
   129 000026C1 4889253DD9FFFF      <1>     mov qword [stackBottom], rsp    ;Use this to save where to reset rsp to
   130 000026C8 E956E4FFFF          <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   131                              <1> ;Loader Data here
   132                              <1> initString: 
   133 000026CD 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   133 000026D6 66696320436F6D7075- <1>
   133 000026DF 746572205265736561- <1>
   133 000026E8 726368285229205343- <1>
   133 000026F1 502F444F5328522920- <1>
   133 000026FA 56657273696F6E2024  <1>
   134                              <1> initString2:
   135 00002703 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Reserach 2022.",CR,LF,"$"
   135 0000270C 202020284329436F70- <1>
   135 00002715 797269676874205363- <1>
   135 0000271E 69656E746966696320- <1>
   135 00002727 436F6D707574657220- <1>
   135 00002730 526573657261636820- <1>
   135 00002739 323032322E0D0A24    <1>
   136 00002741 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   136 0000274A 20444F532076657273- <1>
   136 00002753 696F6E0D0A24        <1>
   136          ------------------  <1>  info: assembly required 1+2+2 passes

