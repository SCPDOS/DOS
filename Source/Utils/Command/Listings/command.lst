     1                                  ;COMMAND.COM main file
     2                                  [map all ./Source/Utils/COMMAND/Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Source/Include/dosMacro.mac"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------------------------------
     9                              <1> ;Generic Macros file
    10                              <1> ;The following instruction extensions allow to conditionally return
    11                              <1> ;The idea was borrowed from the DOS Source Code
    12                              <1> ;
    13                              <1> ;-------------------------------------------------------------------------------
    14                              <1> 
    15                              <1> ;-------------------------------------------------------------------------------
    16                              <1> ;These macros are live and must not be touched
    17                              <1> ;-------------------------------------------------------------------------------
    18                              <1> %macro return 0
    19                              <1> %%_ret:
    20                              <1>     ret
    21                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    22                              <1> %endmacro
    23                              <1> 
    24                              <1> %macro cret 1
    25                              <1> %%_base:
    26                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    27                              <1>     %ifdef retOff
    28                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <1>     %ifdef currSegVBase
    30                              <1>     j%+1 short (retOff+currSegVBase)
    31                              <1>     %else
    32                              <1>     j%+1 short retOff
    33                              <1>     %endif  ;End ifdef currSegVBase
    34                              <1>     %else 
    35                              <1>     j%-1 short %%a
    36                              <1>     return
    37                              <1> %%a:
    38                              <1>     %endif  ;End the distance measurement if
    39                              <1>     %else   
    40                              <1>     j%-1 short %%a
    41                              <1>     return
    42                              <1> %%a:
    43                              <1>     %endif  ;End ifdef retoff
    44                              <1> %endmacro
    45                              <1> 
    46                              <1> %macro retz 0
    47                              <1> cret z
    48                              <1> %endmacro
    49                              <1> 
    50                              <1> %macro retnz 0
    51                              <1> cret nz
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> %macro rete 0
    55                              <1> cret e
    56                              <1> %endmacro
    57                              <1> 
    58                              <1> %macro retne 0
    59                              <1> cret ne
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> %macro retc 0
    63                              <1> cret c
    64                              <1> %endmacro
    65                              <1> 
    66                              <1> %macro retnc 0
    67                              <1> cret nc
    68                              <1> %endmacro
    69                              <1> 
    70                              <1> %macro retb 0
    71                              <1> cret b
    72                              <1> %endmacro
    73                              <1> 
    74                              <1> %macro retnb 0
    75                              <1> cret nb
    76                              <1> %endmacro
    77                              <1> 
    78                              <1> %macro breakpoint 0
    79                              <1> xchg bx, bx
    80                              <1> %endmacro
     7                                  %include "./Source/Include/dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    27 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    32 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Only affects for SUBST drives, not JOIN
    69                              <1> ; Flags: Bit 15 set = Network drive
    70                              <1> ;        Bit 14 set = Physical drive
    71                              <1> ;        Bit 13 set = JOIN'ed drive
    72                              <1> ;        Bit 12 set = SUBST'ed drive
    73                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    74                              <1> endstruc
    75                              <1> ;CDS equates
    76                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    77                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    78                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    79                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    80                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    81                              <1> ;------------------------------------------------------------------------;
    82                              <1> ; The SFT is a way to allow applications to open file handles to files 
    83                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    84                              <1> ; under the first header, and then a second header will be linked to the 
    85                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    86                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    87                              <1> ; using the FCBS= command. Default FCBS=5.
    88                              <1> ;
    89                              <1> ; A file handle describes the file, and the location within the file that
    90                              <1> ; we are reading. The file handle can be manipulated without the file
    91                              <1> ; being in memory, thus allowing the user to access data without needing 
    92                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    93                              <1> ; accessing devices, by treating them as files with their drivers 
    94                              <1> ; responding and translating the manipulations of the file handle itself.
    95                              <1> ; Neither the driver nor the application should see or use the SFT for
    96                              <1> ; the handle, as it is subject to change (and will change when file 
    97                              <1> ; sharing provisions are included). The DOS will make requests to the 
    98                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    99                              <1> ; track of the information in the SFT entry for that handle. 
   100                              <1> ;
   101                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   102                              <1> ; can point to the same file. It all depends on what the applications 
   103                              <1> ; want to do with the File.
   104                              <1> ;
   105                              <1> ; !!!!IMPORTANT!!!!
   106                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   107                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   108                              <1> ;
   109                              <1> ;Each SFT may look like this:
   110                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   111                              <1> ;            |                |
   112                              <1> ;       wNumFiles*sft    wNumFiles*sft
   113                              <1> ;
   114                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   115                              <1> ; System FCBs.
   116                              <1> ;
   117                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   118                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   119                              <1> ;
   120                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   121                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   122                              <1> ;------------------------------------------------------------------------;
   123                              <1> struc sfth   ;System file table header
   124                              <1> ; This is the SFT header.
   125                              <1> ; This structure comes before the start of the first file in the array/table.
   126 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   127 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   128                              <1> endstruc
   129                              <1> 
   130                              <1> struc sft
   131                              <1> ;This is the file struc itself
   132 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   133 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   134 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   135 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   136 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   137 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   138 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   139 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   140 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   141 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   142 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   143 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   144 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   145 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   146 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   147 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   148 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   149 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   150 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   151                              <1> ;                           0 means no record
   152                              <1> endstruc
   153                              <1> ;Open Mode equates
   154                              <1> ;Access modes   Bits[2:0]
   155                              <1> ReadAccess      equ 0h
   156                              <1> WriteAccess     equ 1h
   157                              <1> RWAccess        equ 2h
   158                              <1> ;Bit 3 reserved 0
   159                              <1> ;Sharing modes  Bits[6:4]
   160                              <1> CompatShare     equ 0h
   161                              <1> denyRWShare     equ 10h
   162                              <1> denyWriteShare  equ 20h
   163                              <1> denyReadShare   equ 30h
   164                              <1> denyNoneShare   equ 40h
   165                              <1> netFCBShare     equ 70h
   166                              <1> ;Bit 7 reserved 0
   167                              <1> ;Bits 8-12 reserved 0
   168                              <1> 
   169                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   170                              <1> ;Buffering on writes
   171                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   172                              <1> ;FCB opened file?
   173                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   174                              <1> ;Attribute Byte
   175                              <1> readOnlyFile    equ 1h
   176                              <1> hiddenFile      equ 2h
   177                              <1> systemFile      equ 4h
   178                              <1> volumeLabel     equ 8h
   179                              <1> directoryFile   equ 10h ;Directory entry
   180                              <1> archiveFile     equ 20h
   181                              <1> ;Device Info equates
   182                              <1> ;For a block device, bits [5:0] contain the drive number
   183                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   184                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   185                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   186                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   187                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   188                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   189                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   190                              <1> blokFileToFlush equ 40h ;Set if ANY writes are made to this handle!
   191                              <1> devCharDev      equ 80h ;If set, it is a char device!
   192                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   193                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   194                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   195                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   196                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   197                              <1> 
   198                              <1> ;openAddress   equ DOSSEG:367Ah   
   199                              <1> ;createAddress equ DOSSEG:35E3h   
   200                              <1> ;------------------------------------------------------------------------;
   201                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   202                              <1> ; to an internal buffer, and then copying it to the specified location
   203                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   204                              <1> ; another request for the same sector from the same device is made, so 
   205                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   206                              <1> ; size, selected according to the largest detected sector size during 
   207                              <1> ; the initial loadup.
   208                              <1> ;
   209                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   210                              <1> ;
   211                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   212                              <1> ;------------------------------------------------------------------------;
   213                              <1> 
   214                              <1> struc bufferHdr
   215 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   216 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   217 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   218 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   219 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   220 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   221 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   222 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   223 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   224                              <1>     .dataarea:             ;Points to the start of the data area
   225                              <1> endstruc
   226                              <1> ;Buffer Flag equates
   227                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   228                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   229                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   230                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   231                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   232                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   233                              <1> ;Note! A buffer is marked as referenced only when the application 
   234                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   235                              <1> ;------------------------------------------------------------------------;
   236                              <1> ; Memory control block for each memory arena
   237                              <1> ;------------------------------------------------------------------------;
   238                              <1> struc mcb
   239 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   240 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   241 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   242 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   243                              <1>     .program:
   244                              <1> endstruc
   245                              <1> ;MCB equates
   246                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   247                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   248                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   249                              <1> mcbMarkCtn      equ "M"
   250                              <1> mcbMarkEnd      equ "Z"
   251                              <1> 
   252                              <1> memFirstFit     equ 0   ;First free block goes to application
   253                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   254                              <1> memLastFit      equ 2   ;Last free block goes to application
   255                              <1> 
   256                              <1> ;Owner = Para aligned address => Owning application PSP
   257                              <1> ;...To consider...
   258                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   259                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   260                              <1> ;------------------------------------------------------------------------;
   261                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   262                              <1> ; following order, thus allowing for return values to be placed in the 
   263                              <1> ; registers by accessing the caller register stack frame.
   264                              <1> ;------------------------------------------------------------------------;
   265                              <1> struc callerFrame
   266 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   267 00000008 ????????????????    <1>     .rbx    resq 1    
   268 00000010 ????????????????    <1>     .rcx    resq 1
   269 00000018 ????????????????    <1>     .rdx    resq 1
   270 00000020 ????????????????    <1>     .rsi    resq 1
   271 00000028 ????????????????    <1>     .rdi    resq 1
   272 00000030 ????????????????    <1>     .rbp    resq 1
   273 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   274 00000040 ????????????????    <1>     .r9     resq 1
   275                              <1> ;Pushed by Processor when invoked via Interrupt
   276 00000048 ????????????????    <1>     .rip    resq 1
   277 00000050 ????????????????    <1>     .cs     resq 1
   278 00000058 ????????????????    <1>     .flags  resq 1
   279                              <1> endstruc
   280                              <1> 
   281                              <1> struc dpl
   282                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   283                              <1> ; server calls
   284 00000000 ????????????????    <1>     .rax    resq 1
   285 00000008 ????????????????    <1>     .rbx    resq 1
   286 00000010 ????????????????    <1>     .rcx    resq 1
   287 00000018 ????????????????    <1>     .rdx    resq 1
   288 00000020 ????????????????    <1>     .rsi    resq 1
   289 00000028 ????????????????    <1>     .rdi    resq 1
   290 00000030 ????????????????    <1>     .r8     resq 1
   291 00000038 ????????????????    <1>     .r9     resq 1
   292 00000040 ????????????????    <1>     .align  resq 1
   293 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   294 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   295                              <1> endstruc
   296                              <1> 
   297                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   298 00000000 ????????????????    <1>     .oldRBP         resq 1  
   299 00000008 ??                  <1>     .newBuffers     resb 1  ;New buffers value
   300 00000009 ??                  <1>     .newSFTVal      resb 1
   301 0000000A ??                  <1>     .newFCBSVal     resb 1
   302 0000000B ??                  <1>     .newProtFCBSVal resb 1  ;Number of protected FCBS
   303 0000000C ??                  <1>     .newLastdrive   resb 1
   304 0000000D ??                  <1>     .newStacks      resb 1  ;Ignored for now
   305 0000000E ????                <1>     .newStackSize   resb 2  ;Ignored for now
   306 00000010 ????????            <1>     .newAllocSize   resd 1  ;Used to keep track of reallocation size
   307 00000014 ????????            <1>                     resd 1  ;Alignment byte
   308 00000018 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc fcb
   312                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   313 00000000 ??                  <1>     .driveNum   resb 1
   314 00000001 ????????????????    <1>     .filename   resb 8
   315 00000009 ??????              <1>     .fileext    resb 3
   316 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   317                              <1> ;One block consists of 128 records, of size denoted in the below
   318 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   319 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   320 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   321 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   322 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   323 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   324 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   325 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   326 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   327                              <1>     ;If record size > 64, high byte is ignored.
   328                              <1>     ;Used for random read and write operations to find the right record
   329                              <1> endstruc
   330                              <1> 
   331                              <1> struc filename
   332                              <1> ;8.3 File name struct
   333 00000000 ????????????????    <1>     .fName  resb 8
   334 00000008 ??????              <1>     .fExt   resb 3
   335                              <1> endstruc
   336                              <1> 
   337                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   338 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   339 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   340 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   341 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   342 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   343 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   344 00000016 ????                <1>     .fileTime   resw 1  ;File time
   345 00000018 ????                <1>     .fileDate   resw 1  ;File date
   346 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   347 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   348                              <1> endstruc
   349                              <1> 
   350                              <1> struc psp
   351 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   352 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   353 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   354 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   355 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   356 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   357 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   358 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   359 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   360 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   361 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   362 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   363 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   364 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   365                              <1> ;Extra handle arrays are grouped into a linked list
   366                              <1> ;The below are in the same place as in DOS
   367 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   368 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   369                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   370 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   371 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   372                              <1> endstruc
   373                              <1> 
   374                              <1> struc clkStruc
   375 00000000 ????                <1>     .dateWord   resw 1
   376 00000002 ??                  <1>     .minutes    resb 1
   377 00000003 ??                  <1>     .hours      resb 1
   378 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   379 00000005 ??                  <1>     .seconds    resb 1
   380                              <1> endstruc
   381                              <1> 
   382                              <1> struc countryStruc
   383 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   384                              <1>                         ;0 = month day year hh:mm:ss
   385                              <1>                         ;1 = day month year hh:mm:ss
   386                              <1>                         ;2 = year month day hh:mm:ss
   387 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   388 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   389 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   390 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   391 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   392 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   393                              <1>                         ;0 = Symbol leads, without space
   394                              <1>                         ;1 = Symbol follows, without space
   395                              <1>                         ;2 = Symbol leads, one space
   396                              <1>                         ;3 = Symbol follows, one space
   397                              <1>                         ;4 = Symbol replace decimal separator
   398 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   399 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   400 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   401 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   402 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   403                              <1> endstruc
   404                              <1> 
   405                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   406                              <1> ;for a space of 64Gb
   407                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   408                              <1> dosLowBase  equ 600h    ;Low load address
   409                              <1> 
   410                              <1> ;Critical Error AH bitfield equates
   411                              <1> critRead    equ 0h
   412                              <1> critWrite   equ 1h
   413                              <1> critDOS     equ 0h
   414                              <1> critFAT     equ 2h
   415                              <1> critDir     equ 4h
   416                              <1> critData    equ 6h
   417                              <1> critFailOK  equ 8h
   418                              <1> critRetryOK equ 10h
   419                              <1> critIgnorOK equ 20h
   420                              <1> critCharDev equ 80h
   421                              <1> 
   422                              <1> critIgnore  equ 0
   423                              <1> critRetry   equ 1
   424                              <1> critAbort   equ 2
   425                              <1> critFail    equ 3
   426                              <1> 
   427                              <1> ;MISC ASCII control chars
   428                              <1> NUL equ 00h ;^@         | ASCII Null
   429                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   430                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   431                              <1> BEL equ 07h ;^G         | ASCII Bell
   432                              <1> BSP equ 08h ;^H         | ASCII Backspace
   433                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   434                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   435                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   436                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   437                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   438                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   439                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   440                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   441                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   442                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   443                              <1> SPC equ 20h ;Printable  | ASCII Space
   444                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   445                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   446                              <1> 
   447                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   448                              <1> ;Extended Ascii Codes
   449                              <1> eF1     equ 3Bh ;F1 second byte
   450                              <1> eF2     equ 3Ch ;F2 second byte
   451                              <1> eF3     equ 3Dh ;F3 second byte
   452                              <1> eF4     equ 3Eh ;F4 second byte
   453                              <1> eF5     equ 3Fh ;F5 second byte
   454                              <1> eF6     equ 40h ;F6 second byte
   455                              <1> eF7     equ 41h ;F7 second byte
   456                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   457                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   458                              <1> eIns    equ 52h ;Insert second byte
   459                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   460                              <1> 
   461                              <1> ;Default Configuration for the system
   462                              <1> 
   463                              <1> buffersDefault  equ 30
   464                              <1> filesDefault    equ 20
   465                              <1> fcbsDefault     equ 4
   466                              <1> safeFcbsDeflt   equ 0
   467                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Source/Include/dosError.inc"
     9                              <1> ;DOS Error codes
    10                              <1> 
    11                              <1> ;Extended Error Codes
    12                              <1> errInvFnc   equ 1   ;Invalid function number
    13                              <1> errFnf      equ 2   ;File not found
    14                              <1> errPnf      equ 3   ;Path not found
    15                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    16                              <1> errAccDen   equ 5   ;Access denied (to resource)
    17                              <1> errBadHdl   equ 6   ;Invalid handle
    18                              <1> errMCBbad   equ 7   ;MCB's destroyed
    19                              <1> errNoMem    equ 8   ;Insufficient memory
    20                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    21                              <1> errBadEnv   equ 10  ;Invalid environment
    22                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    23                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    24                              <1> errInvDat   equ 13  ;Invalid data
    25                              <1> ;           equ 14  ;Reserved
    26                              <1> errBadDrv   equ 15  ;Invalid drive specified
    27                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    28                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    29                              <1> errNoFil    equ 18  ;No more files
    30                              <1> ;The following are Driver error codes + 19
    31                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    32                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    33                              <1> errUnkUnt   equ 20  ;Unknown Unit
    34                              <1> errDrvNR    equ 21  ;Drive not ready
    35                              <1> errUnkCmd   equ 22  ;Unknown Command
    36                              <1> errCRCerr   equ 23  ;Data (CRC) error
    37                              <1> errBadRLn   equ 24  ;Bad request structure length
    38                              <1> errSekErr   equ 25  ;Seek error
    39                              <1> errUnkMed   equ 26  ;Unknown media type
    40                              <1> errSecNF    equ 27  ;Sector not Found
    41                              <1> errNoPap    equ 28  ;Printer out of paper
    42                              <1> errWF       equ 29  ;Write fault
    43                              <1> errRF       equ 30  ;Read fault
    44                              <1> errGF       equ 31  ;General fault
    45                              <1> ;----------------------------------------------
    46                              <1> ;The following two go inbetween the Disk errors
    47                              <1> errShrVio   equ 32  ;Sharing violations
    48                              <1> errLokVio   equ 33  ;File Lock violation
    49                              <1> ;----------------------------------------------
    50                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    51                              <1> errNoFCB    equ 35  ;FCB unavailable
    52                              <1> errShrFul   equ 36  ;Sharing buffer full
    53                              <1> 
    54                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    55                              <1> 
    56                              <1> errFilExist equ 80  ;File already exists
    57                              <1> errDirExist equ 82  ;Directory already exists
    58                              <1> errFI44     equ 83  ;Fail on INT 44h
    59                              <1> errRedir    equ 84  ;Too many levels of redirection
    60                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    61                              <1> errBadPass  equ 86  ;Bad password
    62                              <1> errBadParam equ 87  ;Bad parameter passed to request
    63                              <1> errNetWrite equ 88  ;Network Write Fault
    64                              <1> ;-----------------------------------------------------------------------------
    65                              <1> ;Error Loci
    66                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    67                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    68                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    69                              <1> eLocChr     equ 4   ;Serial/Character Device error
    70                              <1> eLocMem     equ 5   ;Related to RAM
    71                              <1> ;-----------------------------------------------------------------------------
    72                              <1> ;Error Actions
    73                              <1> eActRet     equ 1   ;Retry
    74                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    75                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    76                              <1> eActAbt     equ 4   ;Abort with cleanup
    77                              <1> eActKil     equ 5   ;Abort without cleanup
    78                              <1> eActIgn     equ 6   ;Ignore error
    79                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    80                              <1> ;-----------------------------------------------------------------------------
    81                              <1> ;Error classes
    82                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    83                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    84                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    85                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    86                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    87                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    88                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    89                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    90                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    91                              <1> eClsLocked  equ 10  ;Resource Locked
    92                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    93                              <1> eClsClash   equ 12  ;Resource already exists!
    94                              <1> eClsUnk     equ 13  ;Unknown class
     9                                  %include "./Source/Utils/COMMAND/Data/cmdEqu.asm"
    10                              <1> ;Data equates and struct declarations
    11                              <1> 
    12                              <1> cmdBufferL  equ 128 ;Length of a command line buffer
    13                              <1> driveSpecL  equ 2   ;Space for X:
    14                              <1> dirPathL    equ 64  ;Length of a directory path
    15                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
    16                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
    17                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
    18                              <1> fullDirPathL equ driveSpecL + dirPathL
    19                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    20                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    21                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    22                              <1> 
    23                              <1> ;Use PSP FCB's for switch buffers
    24                              <1> fcb1        equ psp.fcb1
    25                              <1> fcb2        equ psp.fcb2
    26                              <1> ;Use the dta as the built command line buffer.
    27                              <1> cmdLineCnt  equ psp.parmList
    28                              <1> cmdLine     equ psp.progTail
    29                              <1> 
    30                              <1> 
    31                              <1> ;Struct Declarations
    32                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    33 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    34 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    35 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    36 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    37 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    38                              <1> endstruc
    39                              <1> 
    40                              <1> struc execProg  ;For use with EXEC-ing a child task
    41 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    42 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    43 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    44 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    45                              <1> endstruc
    10                                  Segment .data align=1 
    11                                  %include "./Source/Utils/COMMAND/Data/cmdData.asm"
    12                              <1> ;Static Data Area for COMMAND.COM    
    13                              <1> startLbl:   ;Start symbol, this is the entry point
    14 00000000 E904150000          <1>     jmp cmdLdr
    15 00000005 0000000000000000    <1> stackBottom dq 0    ;Pointer to the top of the stack as allocated by DOS
    16 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
    17 0000000F FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
    18 00000017 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
    19 0000001F 1400                <1> numHdls     dw 20   ;Get number of handles permitted, hardcoded in this version
    20 00000021 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    21 00000023 5C                  <1> pathSep     db "\"  ;Default path sep
    22 00000024 2F                  <1> switchChar  db "/"  ;Default switch char
    23                              <1> ;Static strings, not used in command line parsing
    24 00000025 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    24 0000002E 000000000000000000- <1>
    24 00000037 000000000000000000- <1>
    24 00000040 000000000000000000- <1>
    24 00000049 0000                <1>
    25 0000004B 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    25 00000054 000000000000000000- <1>
    25 0000005D 000000000000000000- <1>
    25 00000066 000000000000000000- <1>
    25 0000006F 000000000000000000- <1>
    25 00000078 000000000000000000- <1>
    25 00000081 000000000000000000- <1>
    25 0000008A 00000000            <1>
    26                              <1> 
    27                              <1> 
    28                              <1> cmdLineStatePtr:
    29 0000008E 00                  <1> cmdStartOff db 0    ;Offset to the first char for this command (may be a space)
    30 0000008F 00                  <1> cmdEndOff   db 0    ;Offset to the terminating char for this command (0Dh or |)
    31 00000090 00                  <1> pipeFlag    db 0    ;If set, we are piping across a command
    32 00000091 0000                <1> pipeHndl    dw 0    ;If pipeFlag set, this var has the handle to the pipe file
    33 00000093 202020202020202020- <1> pipeName    db 11 dup (" ") ;Name of the pipe file we created
    33 0000009C 2020                <1>
    34                              <1> 
    35                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    36                              <1> ;These variables are valid for a SINGLE command in a command line
    37 0000009E 0000                <1> cmdDrvSpec  dw 0    ;Read the first word in to see if the pathspec has drivespec
    38 000000A0 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    39 000000A1 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    40                              <1> ;                    If 2, we are redirecting output to a file, by appending
    41                              <1> ;FLG and SWCH are read as a word when checking if argX is a switch
    42 000000A2 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    43 000000A3 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    44 000000A4 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    45                              <1> 
    46 000000A5 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    47 000000A6 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    48 000000A7 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    49                              <1> 
    50                              <1> cmdStateL equ $ - cmdStatePtr
    51                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    52                              <1> 
    53                              <1> ;Structs and strings
    54                              <1> 
    55 000000A8 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    55 000000B1 00000000000000      <1>
    56 000000B8 2B                  <1> cmdFFBlock  db ffBlock_size ;Internal Find First Block to use as default DTA
    57                              <1> 
    58 000000B9 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    58 000000C2 000000000000000000- <1>
    58 000000CB 000000000000000000- <1>
    58 000000D4 000000000000000000- <1>
    58 000000DD 000000000000000000- <1>
    58 000000E6 000000000000000000- <1>
    58 000000EF 000000000000000000- <1>
    58 000000F8 000000000000000000- <1>
    58 00000101 000000000000000000- <1>
    58 0000010A 000000000000000000- <1>
    58 00000113 000000000000000000- <1>
    58 0000011C 000000000000000000- <1>
    58 00000125 000000000000000000- <1>
    58 0000012E 000000000000000000- <1>
    58 00000137 0000                <1>
    59 00000139 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    59 00000142 000000000000000000- <1>
    59 0000014B 000000000000000000- <1>
    59 00000154 000000000000000000- <1>
    59 0000015D 000000000000000000- <1>
    59 00000166 000000000000000000- <1>
    59 0000016F 000000000000000000- <1>
    59 00000178 000000000000000000- <1>
    59 00000181 000000000000000000- <1>
    59 0000018A 000000000000000000- <1>
    59 00000193 000000000000000000- <1>
    59 0000019C 000000000000000000- <1>
    59 000001A5 000000000000000000- <1>
    59 000001AE 000000000000000000- <1>
    59 000001B7 0000                <1>
    60 000001B9 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)  ;Space for full path to a external command
    60 000001C2 000000000000000000- <1>
    60 000001CB 000000000000000000- <1>
    60 000001D4 000000000000000000- <1>
    60 000001DD 000000000000000000- <1>
    60 000001E6 000000000000000000- <1>
    60 000001EF 000000000000000000- <1>
    60 000001F8 000000000000000000- <1>
    60 00000201 00000000000000      <1>
    61                              <1> 
    62 00000208 000000000000000000- <1> fcbCmdSpec  db fcbNameL dup (0) ;Used to make a FCB style name for the file
    62 00000211 0000                <1>
    63 00000213 000000000000000000- <1> cmdSpec     db fileNameZL dup (0)   ;ASCIIZ command spec for the command name
    63 0000021C 00000000            <1>
    64 00000220 000000000000000000- <1> cmdName     db cmdNameL dup (0) ;Command name string prefixed by length of word
    64 00000229 0000000000          <1>
    65                              <1> 
    66 0000022E 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    66 00000237 000000000000000000- <1>
    66 00000240 000000000000000000- <1>
    66 00000249 000000000000000000- <1>
    66 00000252 000000000000000000- <1>
    66 0000025B 000000000000000000- <1>
    66 00000264 000000000000000000- <1>
    66 0000026D 000000000000000000- <1>
    66 00000276 00000000000000      <1>
    67 0000027D 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    67 00000286 000000000000000000- <1>
    67 0000028F 000000000000000000- <1>
    67 00000298 000000000000000000- <1>
    67 000002A1 000000000000000000- <1>
    67 000002AA 000000000000000000- <1>
    67 000002B3 000000000000000000- <1>
    67 000002BC 000000000000000000- <1>
    67 000002C5 00000000000000      <1>
    68                              <1> 
    69 000002CC 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Contains the pathspec for the search file
    69 000002D5 000000000000000000- <1>
    69 000002DE 000000000000000000- <1>
    69 000002E7 000000000000000000- <1>
    69 000002F0 000000000000000000- <1>
    69 000002F9 000000000000000000- <1>
    69 00000302 000000000000000000- <1>
    69 0000030B 000000000000000000- <1>
    69 00000314 000000000000000000- <1>
    69 0000031D 000000000000000000- <1>
    69 00000326 000000000000000000- <1>
    69 0000032F 000000000000000000- <1>
    69 00000338 000000000000000000- <1>
    69 00000341 000000000000000000- <1>
    69 0000034A 0000                <1>
    70                              <1> ;The above is larger than is needed/supported by DOS to allow for 
    71                              <1> ; users overtyping
    12                                  %include "./Source/Utils/COMMAND/Data/cmdTable.asm"
    13                              <1> ;Function dispatch table
    14                              <1> functionTable:
    15                              <1> ;Use Pascal strings with each row of hte table having three columns:
    16                              <1> ; Col 1, BYTE, Length of command
    17                              <1> ; Col 2, String, String representing the user input
    18                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
    19 0000034C 03444952            <1>     db 3, "DIR"
    20 00000350 070D                <1>     dw dir - startLbl
    21                              <1> 
    22 00000352 024344              <1>     db 2, "CD"
    23 00000355 0D0D                <1>     dw chdir - startLbl
    24                              <1> 
    25 00000357 054348444952        <1>     db 5, "CHDIR"
    26 0000035D 0D0D                <1>     dw chdir - startLbl
    27                              <1> 
    28 0000035F 024D44              <1>     db 2, "MD"
    29 00000362 C70D                <1>     dw mkdir - startLbl
    30                              <1> 
    31 00000364 054D4B444952        <1>     db 5, "MKDIR"
    32 0000036A C70D                <1>     dw mkdir - startLbl
    33                              <1> 
    34 0000036C 025244              <1>     db 2, "RD"
    35 0000036F 2C0E                <1>     dw rmdir - startLbl
    36                              <1> 
    37 00000371 05524D444952        <1>     db 5, "RMDIR"
    38 00000377 2C0E                <1>     dw rmdir - startLbl
    39                              <1> 
    40 00000379 0344454C            <1>     db 3, "DEL"
    41 0000037D 2C0E                <1>     dw erase - startLbl
    42                              <1> 
    43 0000037F 054552415345        <1>     db 5, "ERASE"
    44 00000385 2C0E                <1>     dw erase - startLbl
    45                              <1> 
    46 00000387 0444415445          <1>     db 4, "DATE"
    47 0000038C 2C0E                <1>     dw date - startLbl
    48                              <1> 
    49 0000038E 0454494D45          <1>     db 4, "TIME"
    50 00000393 2C0E                <1>     dw time - startLbl
    51                              <1> 
    52 00000395 04434F5059          <1>     db 4, "COPY"
    53 0000039A 2C0E                <1>     dw copy - startLbl
    54                              <1> 
    55 0000039C 0443545459          <1>     db 4, "CTTY"
    56 000003A1 2C0E                <1>     dw ctty - startLbl
    57                              <1> 
    58 000003A3 03434C53            <1>     db 3, "CLS"
    59 000003A7 2D0E                <1>     dw cls - startLbl
    60                              <1> 
    61 000003A9 05425245414B        <1>     db 5, "BREAK"
    62 000003AF 9F0E                <1>     dw break - startLbl
    63                              <1> 
    64 000003B1 0652454E414D45      <1>     db 6, "RENAME"
    65 000003B8 200F                <1>     dw rename - startLbl
    66                              <1> 
    67 000003BA 08545255454E414D45  <1>     db 8, "TRUENAME"
    68 000003C3 210F                <1>     dw truename - startLbl
    69                              <1> 
    70 000003C5 FF                  <1>     db -1   ;End of table
    13                                  %include "./Source/Utils/COMMAND/Data/cmdMsg.asm"
    14                              <1> ;COMMAND.COM Messages and strings
    15 000003C6 0D0A24              <1> crlf    db  CR,LF,"$"
    16 000003C9 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
    16 000003D2 696C65206D69737369- <1>
    16 000003DB 6E670D0A24          <1>
    17 000003E0 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
    17 000003E9 6469736B2077697468- <1>
    17 000003F2 206261746368206669- <1>
    17 000003FB 6C65                <1>
    18 000003FD 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
    18 00000406 737320616E79206B65- <1>
    18 0000040F 79207768656E207265- <1>
    18 00000418 6164790D0A24        <1>
    19 0000041E 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
    19 00000427 6E64206F722066696C- <1>
    19 00000430 65206E616D650D0A24  <1>
    20 00000439 4475706C6963617465- <1> dupName db  "Duplicate file name or "
    20 00000442 2066696C65206E616D- <1>
    20 0000044B 65206F7220          <1>
    21 00000450 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    21 00000459 666F756E640D0A24    <1>
    22 00000461 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    22 0000046A 656E74206469736B20- <1>
    22 00000473 73706163650D0A24    <1>
    23 0000047B 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    23 00000484 7669726F6E6D656E74- <1>
    23 0000048D 2073706163650D0A24  <1>
    24 00000496 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    24 0000049F 74696F6E206572726F- <1>
    24 000004A8 720D0A24            <1>
    25 000004AC 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    25 000004B5 6F7420626520636F70- <1>
    25 000004BE 696564206F6E746F20- <1>
    25 000004C7 697473656C660D0A24  <1>
    26 000004D0 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    26 000004D9 662064657374696E61- <1>
    26 000004E2 74696F6E206C6F7374- <1>
    26 000004EB 206265666F72652063- <1>
    26 000004F4 6F70790D0A24        <1>
    27                              <1> ;Copy end message. First write # files copied then this message 
    28 000004FA 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    28 00000503 636F706965640D0A24  <1>
    29                              <1> ;Dir end1 msg. First write # files in dir then this
    30 0000050C 2046696C6528732920- <1> dirOk   db  " File(s) ", "$"
    30 00000515 24                  <1>
    31                              <1> ;Dir end2 msg. First write # bytes free then this message
    32 00000516 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    32 0000051F 65650D0A24          <1>
    33 00000524 203C4449523E202020- <1> dirLbl  db  " <DIR>   $"
    33 0000052D 24                  <1>
    34                              <1> 
    35 0000052E 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    35 00000537 726976652073706563- <1>
    35 00000540 696669636174696F6E- <1>
    35 00000549 0D0A24              <1>
    36 0000054C 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    36 00000555 6B6579207768656E20- <1>
    36 0000055E 7265616479202E202E- <1>
    36 00000567 202E2024            <1>
    37 0000056B 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    37 00000574 6172616D657465720D- <1>
    37 0000057D 0A24                <1>
    38                              <1> 
    39 0000057F 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    39 00000588 576564546875467269- <1>
    39 00000591 536174              <1>
    40 00000594 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    40 0000059D 206461746524        <1>
    41 000005A3 43757272656E742064- <1> curDate db  "Current date is $"
    41 000005AC 6174652069732024    <1>
    42 000005B4 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date: $"
    42 000005BD 657720646174653A20- <1>
    42 000005C6 24                  <1>
    43 000005C7 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    43 000005D0 2074696D6524        <1>
    44 000005D6 43757272656E742074- <1> curTime db  "Current time is $"
    44 000005DF 696D652069732024    <1>
    45 000005E7 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    45 000005F0 65772074696D653A20- <1>
    45 000005F9 24                  <1>
    46                              <1> 
    47 000005FA 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    47 00000603 7572652028592F4E29- <1>
    47 0000060C 3F2024              <1>
    48                              <1> 
    49 0000060F 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    49 00000618 56657273696F6E2024  <1>
    50                              <1> dosVerL equ $ - dosVer
    51                              <1> 
    52 00000621 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    52 0000062A 6E2064726976652024  <1>
    53 00000633 2069732024          <1> volOk   db " is $"
    54 00000638 20686173206E6F206C- <1> volNo   db " has no label$"
    54 00000641 6162656C24          <1>
    55                              <1> 
    56 00000646 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    56 0000064F 69726563746F72790D- <1>
    56 00000658 0A24                <1>
    57 0000065A 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    57 00000663 206372656174652064- <1>
    57 0000066C 69726563746F72790D- <1>
    57 00000675 0A24                <1>
    58 00000677 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    58 00000680 6174682C206E6F7420- <1>
    58 00000689 6469726563746F7279- <1>
    58 00000692 2C0D0A              <1>
    59 00000695 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    59 0000069E 6F7279206E6F742065- <1>
    59 000006A7 6D7074790D0A24      <1>
    60 000006AE 204469726563746F72- <1> dirMain db " Directory of $"
    60 000006B7 79206F662024        <1>
    61 000006BD 4E6F20506174682024  <1> noPath  db "No Path $"
    62 000006C6 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    62 000006CF 7269766520696E2073- <1>
    62 000006D8 656172636820706174- <1>
    62 000006E1 680D0A24            <1>
    63 000006E5 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    63 000006EE 65766963650D0A24    <1>
    64 000006F6 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    64 000006FF 20666F756E640D0A24  <1>
    65 00000708 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    65 00000711 726F720D0A24        <1>
    66 00000717 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    66 00000720 6F74206265206E6573- <1>
    66 00000729 7465640D0A24        <1>
    67 0000072F 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    67 00000738 6174652066696C6520- <1>
    67 00000741 6572726F7220647572- <1>
    67 0000074A 696E6720706970650D- <1>
    67 00000753 0A24                <1>
    68 00000755 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    68 0000075E 2062696E6172792072- <1>
    68 00000767 656164732066726F6D- <1>
    68 00000770 206120646576696365- <1>
    68 00000779 0D0A24              <1>
    69 0000077C 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    70 00000782 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    71 00000787 425245414B20697320- <1> breakIs db "BREAK is $"
    71 00000790 24                  <1>
    72 00000791 564552494659206973- <1> verifyIs    db "VERIFY is $"
    72 0000079A 2024                <1>
    73 0000079C 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    74 000007A5 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    74 000007AE 617468206F72206669- <1>
    74 000007B7 6C65206E616D650D0A- <1>
    74 000007C0 24                  <1>
    75 000007C1 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    75 000007CA 756D626572206F6620- <1>
    75 000007D3 706172616D65746572- <1>
    75 000007DC 730D0A24            <1>
    76 000007E0 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    76 000007E9 74696E6720746F2064- <1>
    76 000007F2 6576696365          <1>
    77 000007F7 08200800            <1> backSpace   db BSP," ",BSP,NUL
    78                              <1> 
    79 000007FB 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    80                              <1> 
    81 000007FF 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    81 00000808 696679204F4E206F72- <1>
    81 00000811 204F46460D0A24      <1>
    82 00000818 504154483D          <1> pathEVar db "PATH="
    83 0000081D 50524F4D50543D      <1> promptEVar  db "PROMPT="
    14                                  %include "./Source/Utils/COMMAND/Source/cmdMain.asm"
    15                              <1> commandStart:
    16                              <1>     ;Resize Allocation, jump here with endpointer in rbx
    17                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
    18                              <1>     ; that the jump to safety won't be gobbled up when multitasking
    19 00000824 49F7D8              <1>     neg r8  ;Convert r8 to -r8
    20 00000827 4A8D5C0311          <1>     lea rbx, qword [rbx + r8 + 11h]    ;Get # of bytes for COMMAND.COM
    21 0000082C C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
    22 0000082F B44A                <1>     mov ah, 4Ah ;Realloc
    23 00000831 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    24 00000834 CD41                <1>     int 41h
    25 00000836 EB5A                <1>     jmp short commandMain
    26                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    27 00000838 B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    28 0000083D CD41                <1>     int 41h
    29 0000083F 668905C7F7FFFF      <1>     mov word [returnCode], ax
    30                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    31 00000846 488D15FE090000      <1>     lea rdx, critErrorHandler
    32 0000084D 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    33 00000851 B844250000          <1>     mov eax, 2544h
    34 00000856 CD41                <1>     int 41h
    35 00000858 488D157C0C0000      <1>     lea rdx, int43h
    36 0000085F 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    37 00000863 B843250000          <1>     mov eax, 2543h
    38 00000868 CD41                <1>     int 41h
    39 0000086A 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    40 00000871 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    41 00000875 B842250000          <1>     mov eax, 2542h
    42 0000087A CD41                <1>     int 41h
    43                              <1> ;Close all handles from 5->MAX
    44 0000087C 0FB70D9CF7FFFF      <1>     movzx ecx, word [numHdls]
    45 00000883 BB05000000          <1>     mov ebx, 5
    46                              <1> .handleClose:
    47 00000888 B43E                <1>     mov ah, 3Eh ;File close
    48 0000088A CD41                <1>     int 41h
    49 0000088C FFC3                <1>     inc ebx ;Goto next file
    50 0000088E 39CB                <1>     cmp ebx, ecx
    51 00000890 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    52                              <1> commandMain:
    53                              <1> ;Setup Commandline
    54 00000892 FA                  <1>     cli
    55 00000893 488B256BF7FFFF      <1>     mov rsp, qword [stackBottom]    ;Reset internal stack pointer pos
    56 0000089A FB                  <1>     sti
    57 0000089B FC                  <1>     cld ;Ensure stringops are done the right way
    58 0000089C C60516F8FFFF80      <1>     mov byte [inBuffer], 80h    ;Reset the buffer length
    59                              <1> .inputMain:
    60 000008A3 E849080000          <1>     call clearCommandLineState
    61 000008A8 E8B3060000          <1>     call printCRLF
    62 000008AD E817080000          <1>     call printPrompt
    63                              <1> 
    64 000008B2 488D1500F8FFFF      <1>     lea rdx, inBuffer
    65 000008B9 B80A0C0000          <1>     mov eax, 0C0Ah  ;Do Buffered input
    66 000008BE CD41                <1>     int 41h
    67 000008C0 E89B060000          <1>     call printCRLF  ;Note we have accepted input
    68                              <1> 
    69                              <1> ;First check we had something typed in of length greater than 1
    70                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    71 000008C5 803DEEF7FFFF01      <1>     cmp byte [inBuffer + 1], 1  ;Check input length valid
    72 000008CC 762A                <1>     jbe .dfltErrExit
    73                              <1>     ;Copy over the input text
    74 000008CE 488D35E4F7FFFF      <1>     lea rsi, inBuffer
    75 000008D5 488D3D5DF8FFFF      <1>     lea rdi, cmdBuffer
    76 000008DC B980000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    77 000008E1 F3A4                <1>     rep movsb
    78 000008E3 31C0                <1>     xor eax, eax
    79 000008E5 668905A2F7FFFF      <1>     mov word [cmdStartOff], ax  ;Clear start and end Off positions
    80 000008EC E814000000          <1>     call parseInput
    81 000008F1 E8AD010000          <1>     call doCommandLine
    82 000008F6 EBAB                <1>     jmp short .inputMain
    83                              <1> .dfltErrExit:
    84 000008F8 488D151FFBFFFF      <1>     lea rdx, badCmd
    85 000008FF B409                <1>     mov ah, 09h
    86 00000901 CD41                <1>     int 41h
    87 00000903 EB9E                <1>     jmp short .inputMain
    88                              <1> 
    89                              <1> parseInput:
    90                              <1> ;EndOff is set up before entering this part
    91                              <1> ;Copies a nicely formatted version of the input command line
    92                              <1> ; without any redirections to psp.dta
    93 00000905 488D352FF8FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
    94 0000090C 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
    95 00000913 0FB61D75F7FFFF      <1>     movzx ebx, byte [cmdEndOff] ;Get the old end offset
    96 0000091A 4801DE              <1>     add rsi, rbx    ;Move rsi to the start of this new command
    97 0000091D E898070000          <1>     call skipSpaces ;Skip any preceeding spaces
    98 00000922 66AD                <1>     lodsw   ;Get the first two chars into ax
    99 00000924 66890573F7FFFF      <1>     mov word [cmdDrvSpec], ax ;Store these chars as if they are the drvspec
   100 0000092B 4881EE02000000      <1>     sub rsi, 2  ;Go back to the start of the command
   101 00000932 56                  <1>     push rsi
   102 00000933 57                  <1>     push rdi
   103 00000934 488D3D7EF8FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   104 0000093B 57                  <1>     push rdi
   105 0000093C E868030000          <1>     call copyCommandTailItem
   106 00000941 5F                  <1>     pop rdi
   107 00000942 9C                  <1>     pushfq  ;Save the CF state
   108 00000943 E823070000          <1>     call strlen
   109 00000948 FFC9                <1>     dec ecx ;Drop the terminating char from the count
   110 0000094A 58                  <1>     pop rax ;Get the CF state in al
   111 0000094B 5F                  <1>     pop rdi
   112 0000094C 5E                  <1>     pop rsi
   113 0000094D F3A4                <1>     rep movsb   ;Now we copy the command into the psp command line
   114 0000094F A801                <1>     test al, 1  ;Was CF set?
   115 00000951 0F8586000000        <1>     jnz .exit   ;If an embedded CR was found in the filename, exit!
   116                              <1> .cmdLineProcess:
   117 00000957 E85E070000          <1>     call skipSpaces ;Go to the next char in the input line
   118                              <1> .redirFound:
   119 0000095C AC                  <1>     lodsb   ;Get first non-space char (setupRedir skips spaces before ret)
   120 0000095D 3C0D                <1>     cmp al, CR  ;If this was a CR, we stop processing
   121 0000095F 747C                <1>     je .exit
   122 00000961 E8D6020000          <1>     call checkAndSetupRedir ;If not, check if we have a redir element
   123 00000966 7275                <1>     jc .exit    ;CF=CY only if pipe, which is equivalent to CR when processing
   124 00000968 74F2                <1>     jz .redirFound  ;If we had a < > or >>, proceed to check if next char CR
   125                              <1>     ;Else we process the first two switches and copy any arguments
   126 0000096A B020                <1>     mov al, " "
   127 0000096C AA                  <1>     stosb   ;Store a space to make space for the command file parameter
   128 0000096D 48FFCE              <1>     dec rsi ;Move rsi back to the first char
   129 00000970 F6052BF7FFFFFF      <1>     test byte [arg1Flg], -1
   130 00000977 7521                <1>     jnz .arg2
   131                              <1> .arg1:
   132 00000979 C60522F7FFFFFF      <1>     mov byte [arg1Flg], -1
   133 00000980 E835070000          <1>     call skipSpaces
   134 00000985 4889F0              <1>     mov rax, rsi
   135 00000988 488D1DAAF7FFFF      <1>     lea rbx, cmdBuffer
   136 0000098F 4829D8              <1>     sub rax, rbx
   137 00000992 88050BF7FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   138 00000998 EB2A                <1>     jmp short .argCommon
   139                              <1> .arg2:
   140 0000099A F60504F7FFFFFF      <1>     test byte [arg2Flg], -1
   141 000009A1 7521                <1>     jnz .argCommon
   142 000009A3 C605FBF6FFFFFF      <1>     mov byte [arg2Flg], -1
   143 000009AA E80B070000          <1>     call skipSpaces
   144 000009AF 4889F0              <1>     mov rax, rsi
   145 000009B2 488D1D80F7FFFF      <1>     lea rbx, cmdBuffer
   146 000009B9 4829D8              <1>     sub rax, rbx
   147 000009BC 8805E4F6FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   148 000009C2 EB00                <1>     jmp short .argCommon
   149                              <1> .argCommon:
   150                              <1>     ;More than two arguments, we do nothing more than just copy the command
   151                              <1>     ; over. If we encounter an embedded CR, exit there too
   152 000009C4 E8F1060000          <1>     call skipSpaces
   153 000009C9 803E0D              <1>     cmp byte [rsi], CR  ;Are we at the end of the commandline?
   154 000009CC 740F                <1>     je .exit
   155                              <1>     ;If not, we copy it over
   156 000009CE E8D6020000          <1>     call copyCommandTailItem    ;Stores a terminating null we dont want
   157 000009D3 488D7FFF            <1>     lea rdi, qword [rdi - 1]    ;Point back at the inserted terminating null
   158 000009D7 0F837AFFFFFF        <1>     jnc .cmdLineProcess
   159                              <1> .exit:
   160 000009DD 488D1D55F7FFFF      <1>     lea rbx, cmdBuffer
   161 000009E4 48FFCE              <1>     dec rsi
   162 000009E7 4829DE              <1>     sub rsi, rbx    ;Get the offset into the command line
   163 000009EA 89F3                <1>     mov ebx, esi
   164 000009EC 881D9DF6FFFF        <1>     mov byte [cmdEndOff], bl    ;Store the offset to the terminating char
   165 000009F2 B00D                <1>     mov al, CR
   166 000009F4 AA                  <1>     stosb   ;Store the terminating CR in the psp command line
   167                              <1>     ;Now compute the command line length 
   168 000009F5 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine] 
   169 000009FC B00D                <1>     mov al, CR
   170 000009FE 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   171 00000A00 FFC9                <1>     dec ecx ;rcx = -1
   172 00000A02 F2AE                <1>     repne scasb
   173 00000A04 F7D1                <1>     not ecx
   174 00000A06 FEC9                <1>     dec cl  ;Dont include terminating CR
   175 00000A08 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   176 00000A0F 880F                <1>     mov byte [rdi], cl
   177                              <1>     ;Before returning, we copy the command name to cmdName
   178 00000A11 488D3DA1F7FFFF      <1>     lea rdi, cmdPathSpec
   179 00000A18 4889FB              <1>     mov rbx, rdi    ;Use rbx as the ptr to the first char in the commandspec
   180 00000A1B 30C0                <1>     xor al, al  ;Search for the terminating null
   181 00000A1D B94F000000          <1>     mov ecx, fileSpecZL ;Max number of chars the length could be
   182 00000A22 F2AE                <1>     repne scasb
   183 00000A24 48FFCF              <1>     dec rdi ;Go to the last char in the command
   184 00000A27 4889FE              <1>     mov rsi, rdi
   185 00000A2A FD                  <1>     std ;Now we go backwards to where rsi = rbx OR byte [rsi] = pathSep
   186                              <1> .keepSearching:
   187 00000A2B AC                  <1>     lodsb
   188 00000A2C 3A05F1F5FFFF        <1>     cmp al, byte [pathSep]
   189 00000A32 740B                <1>     je .cmdStartFnd
   190 00000A34 4839DE              <1>     cmp rsi, rbx
   191 00000A37 75F2                <1>     jne .keepSearching
   192 00000A39 48FFCE              <1>     dec rsi ;Go back two to go forwards again
   193 00000A3C 48FFCE              <1>     dec rsi
   194                              <1> .cmdStartFnd:
   195 00000A3F 48FFC6              <1>     inc rsi
   196 00000A42 48FFC6              <1>     inc rsi ;Go past the pathsep
   197 00000A45 FC                  <1>     cld ;Go the sane way again
   198 00000A46 488D3DD4F7FFFF      <1>     lea rdi, qword [cmdName + 1]    ;First byte is for the length of the name
   199 00000A4D 57                  <1>     push rdi    ;Cleanse the field before usage (not strictly necessary)
   200 00000A4E B90E000000          <1>     mov ecx, cmdNameL
   201 00000A53 30C0                <1>     xor al, al
   202 00000A55 F3AA                <1>     rep stosb
   203 00000A57 5F                  <1>     pop rdi
   204 00000A58 31C9                <1>     xor ecx, ecx
   205 00000A5A 56                  <1>     push rsi    ;Save the location of the start byte of the command name
   206                              <1> .cmdGetChar:
   207 00000A5B AC                  <1>     lodsb
   208 00000A5C 84C0                <1>     test al, al ;Did we find the terminating null?
   209 00000A5E 7411                <1>     jz .nameLenFnd
   210 00000A60 3C2E                <1>     cmp al, "." ;Extension sep also terminates
   211 00000A62 740D                <1>     je .nameLenFnd
   212 00000A64 24DF                <1>     and al, 0DFh    ;Else uppercase the char
   213 00000A66 AA                  <1>     stosb   ;and store it
   214 00000A67 FFC1                <1>     inc ecx
   215 00000A69 81F90B000000        <1>     cmp ecx, 11 ;Max command length is 11
   216 00000A6F 72EA                <1>     jb .cmdGetChar
   217                              <1> .nameLenFnd:
   218 00000A71 880DA9F7FFFF        <1>     mov byte [cmdName], cl  ;Store the name length now
   219                              <1>     ;Now finally, create a FCB filespec
   220 00000A77 488D3D8AF7FFFF      <1>     lea rdi, fcbCmdSpec
   221 00000A7E 57                  <1>     push rdi
   222 00000A7F B90B000000          <1>     mov ecx, fcbNameL
   223 00000A84 B020                <1>     mov al, " " ;Fill with spaces
   224 00000A86 F3AA                <1>     rep stosb
   225 00000A88 5F                  <1>     pop rdi
   226 00000A89 5E                  <1>     pop rsi ;Get back the location of the start byte of the command name
   227 00000A8A E873060000          <1>     call asciiToFCB
   228 00000A8F 488D3572F7FFFF      <1>     lea rsi, fcbCmdSpec
   229 00000A96 488D3D76F7FFFF      <1>     lea rdi, cmdSpec
   230 00000A9D E89C060000          <1>     call FCBToAsciiz
   231                              <1>     return
    19                              <2> %%_ret:
    20 00000AA2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   232                              <1> 
   233                              <1> doCommandLine:
   234 00000AA3 488D3591F6FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
   235 00000AAA 488D3DF7F5FFFF      <1>     lea rdi, cmdFcb
   236 00000AB1 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks
   237 00000AB6 CD41                <1>     int 41h
   238 00000AB8 0FB71DDFF5FFFF      <1>     movzx ebx, word [cmdDrvSpec]    ;Get the drive specifier
   239 00000ABF 80FF3A              <1>     cmp bh, ":"
   240 00000AC2 752E                <1>     jne .noDriveSpecified
   241 00000AC4 88DA                <1>     mov dl, bl      ;Move the drive letter in dl
   242 00000AC6 80E2DF              <1>     and dl, 0DFh    ;Make the drive letter upper case
   243 00000AC9 80EA41              <1>     sub dl, "A"     ;And make it a 0 based drive letter
   244 00000ACC 3CFF                <1>     cmp al, -1  ;Int 41h returns AL = -1 if bad drive specified
   245 00000ACE 7415                <1>     je .badDrive
   246                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   247 00000AD0 803D49F7FFFF02      <1>     cmp byte [cmdName], 2
   248 00000AD7 7519                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   249 00000AD9 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   250 00000ADB CD41                <1>     int 41h 
   251 00000ADD B419                <1>     mov ah, 19h
   252 00000ADF CD41                <1>     int 41h     ;Get current drive
   253 00000AE1 38D0                <1>     cmp al, dl  ;If the drive was set, all is well
   254                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000AE3 74(A2)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   255                              <1> .badDrive:
   256 00000AE5 488D1542FAFFFF      <1>     lea rdx, badDrv
   257 00000AEC B409                <1>     mov ah, 09h
   258 00000AEE CD41                <1>     int 41h
   259 00000AF0 F9                  <1>     stc
   260                              <1>     return
    19                              <2> %%_ret:
    20 00000AF1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   261                              <1> .noDriveSpecified:
   262                              <1> ;Now we set the two FCB's in the command line
   263 00000AF2 F605A9F5FFFFFF      <1>     test byte [arg1Flg], -1
   264 00000AF9 744D                <1>     jz .fcbArgsDone
   265 00000AFB 0FB605A1F5FFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   266 00000B02 488D3530F6FFFF      <1>     lea rsi, cmdBuffer
   267 00000B09 4801C6              <1>     add rsi, rax    ;Point to first argument
   268 00000B0C 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   269 00000B10 B801290000          <1>     mov eax, 2901h
   270 00000B15 CD41                <1>     int 41h
   271 00000B17 880587F5FFFF        <1>     mov byte [arg1FCBret], al
   272 00000B1D F60581F5FFFFFF      <1>     test byte [arg2Flg], -1
   273 00000B24 7422                <1>     jz .fcbArgsDone
   274 00000B26 0FB60579F5FFFF      <1>     movzx eax, byte [arg2Off]
   275 00000B2D 488D3505F6FFFF      <1>     lea rsi, cmdBuffer
   276 00000B34 4801C6              <1>     add rsi, rax    ;Point to first argument
   277 00000B37 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   278 00000B3B B801290000          <1>     mov eax, 2901h
   279 00000B40 CD41                <1>     int 41h
   280 00000B42 88055FF5FFFF        <1>     mov byte [arg2FCBret], al
   281                              <1> .fcbArgsDone:
   282 00000B48 488D35EAF5FFFF      <1>     lea rsi, cmdBuffer
   283 00000B4F 488D1DCAF6FFFF      <1>     lea rbx, cmdName
   284 00000B56 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   285 00000B5B BAFFFF0000          <1>     mov edx, 0FFFFh
   286 00000B60 B5FF                <1>     mov ch, -1
   287 00000B62 CD4F                <1>     int 4Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   288                              <1>             ;        al = 0  if the command should be executed as usual
   289 00000B64 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   290 00000B69 BAFFFF0000          <1>     mov edx, 0FFFFh
   291 00000B6E 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   292 00000B70 CD4F                <1>     int 4Fh
   293 00000B72 741D                <1>     jz .executeInternal
   294                              <1>     ;Here we execute externally and return to the prompt
   295                              <1>     ; as if it was an internal execution
   296 00000B74 488D353EF5FFFF      <1>     lea rsi, inBuffer ;Point to this built buffer
   297 00000B7B 488D1D26F5FFFF      <1>     lea rbx, cmdFcb
   298 00000B82 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   299 00000B87 BAFFFF0000          <1>     mov edx, 0FFFFh
   300 00000B8C B5FF                <1>     mov ch, -1
   301 00000B8E CD4F                <1>     int 4Fh 
   302                              <1>     return
    19                              <2> %%_ret:
    20 00000B90 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   303                              <1> .executeInternal:
   304                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   305                              <1> ;rsi points after the command terminator in the command tail
   306 00000B91 488D1DB4F7FFFF      <1>     lea rbx, functionTable
   307                              <1> .nextEntry:
   308 00000B98 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   309 00000B9B 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   310 00000B9E 743D                <1>     je .external      ;If so, check externally now
   311 00000BA0 380D7AF6FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   312 00000BA6 7529                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   313                              <1>     ;Here they have the same length so lets see if the name is the same
   314 00000BA8 56                  <1>     push rsi
   315                              <1>     ;ecx has the length to compare
   316 00000BA9 51                  <1>     push rcx
   317 00000BAA 488D7301            <1>     lea rsi, qword [rbx + 1]
   318 00000BAE 488D3D6CF6FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   319 00000BB5 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   320 00000BB7 59                  <1>     pop rcx
   321 00000BB8 5E                  <1>     pop rsi
   322 00000BB9 7516                <1>     jne .gotoNextEntry
   323                              <1>     ;Here it was found both strings are equal
   324 00000BBB 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   325 00000BC0 480FB71F            <1>     movzx rbx, word [rdi]
   326 00000BC4 488D3D35F4FFFF      <1>     lea rdi, startLbl
   327 00000BCB 4801FB              <1>     add rbx, rdi
   328 00000BCE FFD3                <1>     call rbx    ;Call this function...
   329                              <1>     return  ;... and return
    19                              <2> %%_ret:
    20 00000BD0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   330                              <1> .gotoNextEntry:
   331 00000BD1 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   332 00000BD8 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   333 00000BDB EBBB                <1>     jmp short .nextEntry
   334                              <1> 
   335                              <1> .external:
   336                              <1> ;Here we must search the CWD or all path componants before failing
   337                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
   338 00000BDD E925000000          <1>     jmp .dfltErrExit    ;Catch all for now
   339 00000BE2 8B05C9F4FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   340 00000BE8 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   341 00000BED 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   342 00000BF2 3D20202020          <1>     cmp eax, "    " ;Only if we have four spaces do we proceed here
   343 00000BF7 741A                <1>     je .noExt
   344 00000BF9 E817000000          <1>     call checkExtensionExec ;ZF=ZE => Executable
   345 00000BFE 7507                <1>     jnz .dfltErrExit
   346                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
   347 00000C00 7205                <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
   348                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
   349                              <1>     ;So it is a com or exe that we are searching for for now
   350                              <1>     
   351 00000C02 E900000000          <1>     jmp .dfltErrExit
   352                              <1> .dfltErrExit:
   353 00000C07 488D1510F8FFFF      <1>     lea rdx, badCmd
   354 00000C0E B409                <1>     mov ah, 09h
   355 00000C10 CD41                <1>     int 41h
   356                              <1>     return
    19                              <2> %%_ret:
    20 00000C12 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   357                              <1> .noExt:
   358                              <1>     ;Here we must search for the first file with a valid extension.
   359                              <1>     ;Use bl as flags. bl[0] => COM found, bl[1] => EXE found, bl[2] => BAT found
   360 00000C13 31DB                <1>     xor ebx, ebx
   361                              <1>     ;If relative path, search CWD. If absolute path, search absolute path.
   362                              <1>     ;If nothing, only then loop through each dir in the path for provided
   363                              <1>     ; pathspec (relative case), or filename (absolute case)
   364                              <1> 
   365                              <1> 
   366                              <1> 
   367                              <1> checkExtensionExec:
   368                              <1> ;Checks the extension field of cmdFcb is .COM, .EXE, .BAT in that order
   369                              <1> ;Returns: ZF=ZE if executable. ZF=NZ if not executable.
   370                              <1> ;         If ZF=ZE and CF=CY => Batch file
   371 00000C15 8B0596F4FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   372 00000C1B 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   373 00000C20 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   374 00000C25 3D434F4D20          <1>     cmp eax, "COM "
   375                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000C2A 74(12)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   376 00000C2C 3D45584520          <1>     cmp eax, "EXE "
   377                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000C31 74(12)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   378 00000C33 3D42415420          <1>     cmp eax, "BAT "
   379                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000C38 75(12)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   380 00000C3A F9                  <1>     stc
   381                              <1>     return
    19                              <2> %%_ret:
    20 00000C3B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   382                              <1> 
   383                              <1> checkAndSetupRedir:
   384                              <1> ;Checks and sets up redir as appropriate
   385                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   386                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   387                              <1> ;Output: ZF=NZ => No redir
   388                              <1> ;        ZF=ZY => Redir
   389                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   390                              <1> ;CF=CY if pipe set or an embedded CR found
   391 00000C3C 57                  <1>     push rdi
   392 00000C3D 3C3C                <1>     cmp al, "<"
   393 00000C3F 740B                <1>     je .inputRedir
   394 00000C41 3C3E                <1>     cmp al, ">"
   395 00000C43 742A                <1>     je .outputRedir
   396 00000C45 3C7C                <1>     cmp al, "|"
   397 00000C47 7454                <1>     je .pipeSetup
   398 00000C49 F8                  <1>     clc
   399                              <1> .redirExit:
   400 00000C4A 5F                  <1>     pop rdi
   401                              <1>     return
    19                              <2> %%_ret:
    20 00000C4B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   402                              <1> .inputRedir:
   403 00000C4C C6054DF4FFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   404 00000C53 488D3DD4F5FFFF      <1>     lea rdi, rdrInFilespec
   405 00000C5A E85B040000          <1>     call skipSpaces ;Skip spaces between < and the filespec
   406 00000C5F E845000000          <1>     call copyCommandTailItem
   407 00000C64 72E4                <1>     jc .redirExit
   408 00000C66 E84F040000          <1>     call skipSpaces
   409 00000C6B 30C0                <1>     xor al, al
   410 00000C6D EBDB                <1>     jmp short .redirExit
   411                              <1> .outputRedir:
   412 00000C6F C6052BF4FFFF01      <1>     mov byte [redirOut], 1
   413 00000C76 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   414 00000C79 7506                <1>     jne .notDouble
   415 00000C7B FE0520F4FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   416                              <1> .notDouble:
   417 00000C81 488D3DF5F5FFFF      <1>     lea rdi, rdrOutFilespec
   418 00000C88 E82D040000          <1>     call skipSpaces
   419 00000C8D E817000000          <1>     call copyCommandTailItem
   420 00000C92 72B6                <1>     jc .redirExit
   421 00000C94 E821040000          <1>     call skipSpaces
   422 00000C99 30C0                <1>     xor al, al
   423 00000C9B EBAD                <1>     jmp short .redirExit
   424                              <1> .pipeSetup:
   425 00000C9D C605ECF3FFFFFF      <1>     mov byte [pipeFlag], -1
   426 00000CA4 30C0                <1>     xor al, al
   427 00000CA6 F9                  <1>     stc
   428 00000CA7 5F                  <1>     pop rdi
   429                              <1>     return
    19                              <2> %%_ret:
    20 00000CA8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   430                              <1> 
   431                              <1> copyCommandTailItem:
   432                              <1> ;Copies a sentence from the command tail until a terminator is found.
   433                              <1> ;Stores a terminating null in the destination
   434                              <1> ;Input: rsi = Start of the item to copy
   435                              <1> ;       rdi = Location for copy
   436                              <1> ;Output: Sentence copied with a null terminator inserted.
   437                              <1> ; If CF=CY, embedded CR encountered
   438 00000CA9 AC                  <1>     lodsb
   439 00000CAA 3C0D                <1>     cmp al, CR
   440 00000CAC 741A                <1>     je .endOfInput
   441 00000CAE E8D3030000          <1>     call isALterminator
   442 00000CB3 741A                <1>     jz .exit
   443 00000CB5 3A0568F3FFFF        <1>     cmp al, byte [pathSep]
   444 00000CBB 7412                <1>     je .exit
   445 00000CBD 3A0561F3FFFF        <1>     cmp al, byte [switchChar]
   446 00000CC3 740A                <1>     je .exit
   447 00000CC5 AA                  <1>     stosb
   448 00000CC6 EBE1                <1>     jmp short copyCommandTailItem
   449                              <1> .endOfInput:
   450 00000CC8 E802000000          <1>     call .exit
   451 00000CCD F9                  <1>     stc 
   452                              <1>     return
    19                              <2> %%_ret:
    20 00000CCE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   453                              <1> .exit:
   454 00000CCF 30C0                <1>     xor al, al
   455 00000CD1 AA                  <1>     stosb
   456                              <1>     return
    19                              <2> %%_ret:
    20 00000CD2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   457                              <1> 
   458                              <1> 
   459                              <1> int4Eh:   ;Interrupt interface for parsing and executing command lines
   460                              <1> ;Input: rsi points to the count byte of a command line
   461 00000CD3 4150                <1>     push r8
   462 00000CD5 4151                <1>     push r9
   463 00000CD7 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   464 00000CD9 CD41                <1>     int 41h
   465 00000CDB 52                  <1>     push rdx    ;Save on the stack
   466 00000CDC 488D1D1DF2FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   467 00000CE3 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   468 00000CE5 CD41                <1>     int 41h
   469 00000CE7 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   470 00000CEA 4989D9              <1>     mov r9, rbx
   471 00000CED 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   472 00000CF4 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   473 00000CF9 F348A5              <1>     rep movsq   ;Copy command line over
   474                              <1>     ;call doCommandLine
   475 00000CFC 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   476 00000CFD B450                <1>     mov ah, 50h ;Set Current PSP
   477 00000CFF CD41                <1>     int 41h
   478 00000D01 4159                <1>     pop r9
   479 00000D03 4158                <1>     pop r8
   480 00000D05 48CF                <1>     iretq
    15                                  %include "./Source/Utils/COMMAND/Source/cmdFunc.asm"
    16                              <1> dir:
    17                              <1>     ;If a particular path is given, we search for it.
    18                              <1>     ;Else, if rsi is pointing at CR, . or " " we search in CWD for *.*
    19 00000D07 803E0D              <1>     cmp byte [rsi], CR
    20 00000D0A 7400                <1>     je .searchCWD
    21                              <1> 
    22                              <1> .searchCWD:
    23                              <1>     return
    19                              <2> %%_ret:
    20 00000D0C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    24                              <1> chdir:
    25 00000D0D F6058EF3FFFFFF      <1>     test byte [arg1Flg], -1
    26 00000D14 754D                <1>     jnz .changeDir
    27                              <1>     ;Print CWD
    28                              <1> .printCWD:
    29 00000D16 E8AF020000          <1>     call putCWDInPrompt ;Exactly the same procedure
    30 00000D1B E840020000          <1>     call printCRLF
    31                              <1>     return
    19                              <2> %%_ret:
    20 00000D20 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    32                              <1> .printDiskCWD:
    33                              <1> ;Print CWD for a specified drive
    34 00000D21 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
    35 00000D25 88D0                <1>     mov al, dl
    36 00000D27 0440                <1>     add al, "@" ;Get the UC letter
    37 00000D29 B43A                <1>     mov ah, ":"
    38 00000D2B 488D3D9AF5FFFF      <1>     lea rdi, searchSpec
    39 00000D32 66AB                <1>     stosw   ;Store X:, rdi+=2
    40 00000D34 8A05E9F2FFFF        <1>     mov al, byte [pathSep]
    41 00000D3A AA                  <1>     stosb   ;Store pathSep, inc rdi
    42 00000D3B B447                <1>     mov ah, 47h ;Get Current Working Directory
    43 00000D3D 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
    44 00000D40 CD41                <1>     int 41h
    45 00000D42 E824030000          <1>     call strlen
    46 00000D47 81C102000000        <1>     add ecx, 2 ;Add two for the X:
    47 00000D4D B440                <1>     mov ah, 40h ;Write to handle
    48 00000D4F BB01000000          <1>     mov ebx, 1  ;STDOUT
    49 00000D54 488D1571F5FFFF      <1>     lea rdx, searchSpec
    50 00000D5B CD41                <1>     int 41h
    51 00000D5D E8FE010000          <1>     call printCRLF
    52                              <1>     return
    19                              <2> %%_ret:
    20 00000D62 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    53                              <1> .changeDir:
    54 00000D63 8A053BF3FFFF        <1>     mov al, byte [arg1FCBret]
    55 00000D69 3CFF                <1>     cmp al, -1 
    56 00000D6B 743C                <1>     je .badDrv  ;IF the drive is good, but FCB name blank, either X: or \ 
    57 00000D6D 4180785D20          <1>     cmp byte [r8 + fcb1 + fcb.filename], " "
    58 00000D72 7520                <1>     jne .getFQPath
    59                              <1>     ;Now we double check that on the command line we have . or ..
    60 00000D74 0FB60528F3FFFF      <1>     movzx eax, byte [arg1Off]
    61 00000D7B 488D35B7F3FFFF      <1>     lea rsi, cmdBuffer
    62 00000D82 4801C6              <1>     add rsi, rax
    63 00000D85 8A0598F2FFFF        <1>     mov al, byte [pathSep]
    64 00000D8B 3806                <1>     cmp byte [rsi], al  ;Is the first char a pathsep?
    65 00000D8D 7405                <1>     je .getFQPath
    66 00000D8F 803E2E              <1>     cmp byte [rsi], "."
    67 00000D92 758D                <1>     jne .printDiskCWD
    68                              <1>     ;If the path is . or .., its acceptable, else fail
    69                              <1> .getFQPath:
    70 00000D94 E8E5030000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
    71 00000D99 721D                <1>     jc .badDir  ;If this returns CF=CY, its a badDir
    72 00000D9B 488D152AF5FFFF      <1>     lea rdx, searchSpec
    73 00000DA2 B43B                <1>     mov ah, 3Bh ;CHDIR
    74 00000DA4 CD41                <1>     int 41h
    75 00000DA6 7210                <1>     jc .badDir
    76                              <1>     return
    19                              <2> %%_ret:
    20 00000DA8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    77                              <1> 
    78                              <1> .badDrv:
    79 00000DA9 488D157EF7FFFF      <1>     lea rdx, badDrv
    80 00000DB0 B800090000          <1>     mov eax, 0900h
    81 00000DB5 CD41                <1>     int 41h
    82                              <1>     return
    19                              <2> %%_ret:
    20 00000DB7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    83                              <1> .badDir:
    84 00000DB8 488D1587F8FFFF      <1>     lea rdx, badDir
    85 00000DBF B800090000          <1>     mov eax, 0900h
    86 00000DC4 CD41                <1>     int 41h
    87                              <1>     return
    19                              <2> %%_ret:
    20 00000DC6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    89                              <1> 
    90                              <1> mkdir:
    91 00000DC7 F605D4F2FFFFFF      <1>     test byte [arg1Flg], -1
    92 00000DCE 744D                <1>     jz .badParams
    93 00000DD0 F605CEF2FFFFFF      <1>     test byte [arg2Flg], -1
    94 00000DD7 7544                <1>     jnz .badParams
    95                              <1>     ;We have exactly one argument
    96 00000DD9 8A05C5F2FFFF        <1>     mov al, byte [arg1FCBret]
    97 00000DDF 3CFF                <1>     cmp al, -1 
    98 00000DE1 742B                <1>     je .badDrv  ;If a drive was specified and was bad, jump
    99 00000DE3 E896030000          <1>     call buildCommandPath
   100 00000DE8 7215                <1>     jc .badMake
   101 00000DEA 488D15DBF4FFFF      <1>     lea rdx, searchSpec
   102 00000DF1 B800390000          <1>     mov eax, 3900h  ;MKDIR
   103 00000DF6 CD41                <1>     int 41h
   104 00000DF8 7205                <1>     jc .badMake   ;Return if not carry
   105 00000DFA B40D                <1>     mov ah, 0Dh
   106 00000DFC CD41                <1>     int 41h ;Flush to disk
   107                              <1>     return
    19                              <2> %%_ret:
    20 00000DFE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   108                              <1> .badMake:   ;Else, bad make
   109 00000DFF 488D1554F8FFFF      <1>     lea rdx, badMD
   110 00000E06 B800090000          <1>     mov eax, 0900h
   111 00000E0B CD41                <1>     int 41h
   112                              <1>     return
    19                              <2> %%_ret:
    20 00000E0D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   113                              <1> .badDrv:
   114 00000E0E 488D1519F7FFFF      <1>     lea rdx, badDrv
   115 00000E15 B800090000          <1>     mov eax, 0900h
   116 00000E1A CD41                <1>     int 41h
   117                              <1>     return
    19                              <2> %%_ret:
    20 00000E1C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   118                              <1> .badParams:
   119 00000E1D 488D159DF9FFFF      <1>     lea rdx, badArgs
   120 00000E24 B800090000          <1>     mov eax, 0900h
   121 00000E29 CD41                <1>     int 41h
   122                              <1>     return
    19                              <2> %%_ret:
    20 00000E2B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   123                              <1> 
   124                              <1> rmdir:
   125                              <1> erase:
   126                              <1> date:
   127                              <1> time:
   128                              <1> copy:
   129                              <1> ctty:
   130                              <1>     return
    19                              <2> %%_ret:
    20 00000E2C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   131                              <1> cls:  
   132 00000E2D B800440000          <1>     mov eax, 4400h  ;Get device info
   133 00000E32 BB01000000          <1>     mov ebx, 1      ;for handle 1
   134 00000E37 CD41                <1>     int 41h         ;in dx
   135 00000E39 F7C280000000        <1>     test edx, devCharDev
   136 00000E3F 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   137 00000E41 F7C210000000        <1>     test edx, charDevFastOut
   138 00000E47 743E                <1>     jz .doAnsi
   139                              <1>     ;Test if Int 49h uses Int 30h
   140                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   141                              <1>     ;Int 49h MUST be terminated with a IRETQ, within 1024 bytes
   142 00000E49 B849350000          <1>     mov eax, 3549h  ;Get the vector for interrupt 49h
   143 00000E4E CD41                <1>     int 41h
   144                              <1> .biosCheck:
   145 00000E50 66813BCD30          <1>     cmp word [rbx], 30CDh
   146 00000E55 740C                <1>     je .biosConfirmed
   147 00000E57 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   148 00000E5C 7429                <1>     je .doAnsi
   149 00000E5E 48FFC3              <1>     inc rbx
   150 00000E61 EBED                <1>     jmp short .biosCheck
   151                              <1> .biosConfirmed:
   152                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   153 00000E63 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   154 00000E65 31DB                <1>     xor ebx, ebx
   155 00000E67 CD30                <1>     int 30h
   156 00000E69 B40F                <1>     mov ah, 0Fh ;Get screen mode
   157 00000E6B CD30                <1>     int 30h
   158 00000E6D 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   159 00000E70 FECA                <1>     dec dl
   160 00000E72 B619                <1>     mov dh, 25  ;Number of rows is standard
   161 00000E74 31C0                <1>     xor eax, eax
   162 00000E76 89C1                <1>     mov ecx, eax
   163 00000E78 B707                <1>     mov bh, 7   ;Screen attributes
   164 00000E7A B406                <1>     mov ah, 6   ;Scroll
   165 00000E7C CD30                <1>     int 30h
   166 00000E7E 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   167 00000E80 B700                <1>     mov bh, 0   ;Page 0
   168 00000E82 B402                <1>     mov ah, 2
   169 00000E84 CD30                <1>     int 30h
   170                              <1>     return
    19                              <2> %%_ret:
    20 00000E86 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   171                              <1> .doAnsi:
   172                              <1> ;If an ANSI driver is not installed, this will simply insert blank lines
   173                              <1> ;4 chars in the ansi routine
   174                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   175                              <1> ; understand ANSI codes
   176 00000E87 488D356DF9FFFF      <1>     lea rsi, ansiCls
   177 00000E8E B904000000          <1>     mov ecx, 4
   178 00000E93 B406                <1>     mov ah, 06h ;Raw char output
   179                              <1> .ansiLp:
   180 00000E95 AC                  <1>     lodsb   ;Get the char in 
   181 00000E96 88C2                <1>     mov dl, al
   182 00000E98 CD41                <1>     int 41h
   183 00000E9A FFC9                <1>     dec ecx
   184 00000E9C 75F7                <1>     jnz .ansiLp
   185                              <1>     return
    19                              <2> %%_ret:
    20 00000E9E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   186                              <1> 
   187                              <1> break:
   188 00000E9F F605FCF1FFFFFF      <1>     test byte [arg1Flg], -1
   189 00000EA6 752D                <1>     jnz .argumentProvided
   190                              <1>     ;Here we just get the status of break
   191 00000EA8 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   192 00000EAD CD41                <1>     int 41h
   193 00000EAF 88D3                <1>     mov bl, dl
   194 00000EB1 488D15CFF8FFFF      <1>     lea rdx, breakIs
   195 00000EB8 B409                <1>     mov ah, 09h
   196 00000EBA CD41                <1>     int 41h
   197 00000EBC 488D15BFF8FFFF      <1>     lea rdx, onMes
   198 00000EC3 488D0DB2F8FFFF      <1>     lea rcx, offMes
   199 00000ECA 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   200 00000ECC 480F44D1            <1>     cmovz rdx, rcx
   201 00000ED0 B409                <1>     mov ah, 09h
   202 00000ED2 CD41                <1>     int 41h
   203                              <1>     return
    19                              <2> %%_ret:
    20 00000ED4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   204                              <1> .argumentProvided:
   205 00000ED5 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   206 00000ED9 AD                  <1>     lodsd   ;Read the word
   207 00000EDA 89C3                <1>     mov ebx, eax
   208 00000EDC 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   209 00000EE1 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   210 00000EE4 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   211 00000EE9 7416                <1>     je .maybeOn
   212 00000EEB 663D4F46            <1>     cmp ax, "OF"
   213 00000EEF 7523                <1>     jne .badArgument
   214 00000EF1 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   215 00000EF6 6681FB4620          <1>     cmp bx, "F "
   216 00000EFB 7517                <1>     jne .badArgument
   217                              <1>     ;Set off
   218 00000EFD 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   219 00000EFF EB0B                <1>     jmp short .setBreak
   220                              <1> .maybeOn:
   221 00000F01 663D4F4E            <1>     cmp ax, "ON"
   222 00000F05 750D                <1>     jne .badArgument
   223                              <1>     ;Set on
   224 00000F07 BA01000000          <1>     mov edx, 1
   225                              <1> .setBreak:
   226 00000F0C B801330000          <1>     mov eax, 3301h  ;Set break
   227 00000F11 CD41                <1>     int 41h
   228                              <1>     return
    19                              <2> %%_ret:
    20 00000F13 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   229                              <1> .badArgument:
   230 00000F14 488D15E4F8FFFF      <1>     lea rdx, badOnOff
   231 00000F1B B409                <1>     mov ah, 09h
   232 00000F1D CD41                <1>     int 41h
   233                              <1>     return
    19                              <2> %%_ret:
    20 00000F1F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   234                              <1> 
   235                              <1> rename:
   236                              <1>     return
    19                              <2> %%_ret:
    20 00000F20 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   237                              <1> truename:
   238 00000F21 F6057AF1FFFFFF      <1>     test byte [arg1Flg], -1
   239 00000F28 750C                <1>     jnz .argumentProvided
   240 00000F2A 488D1590F8FFFF      <1>     lea rdx, badArgs
   241 00000F31 B409                <1>     mov ah, 09h
   242 00000F33 CD41                <1>     int 41h
   243                              <1>     return
    19                              <2> %%_ret:
    20 00000F35 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   244                              <1> .argumentProvided:
   245 00000F36 E843020000          <1>     call buildCommandPath
   246                              <1>     ;Explicitly call Truename if we remove truename from this function
   247 00000F3B 488D3D8AF3FFFF      <1>     lea rdi, searchSpec
   248 00000F42 E824010000          <1>     call strlen
   249 00000F47 FFC9                <1>     dec ecx ;Don't print terminating null
   250 00000F49 488D157CF3FFFF      <1>     lea rdx, searchSpec
   251 00000F50 BB01000000          <1>     mov ebx, 01
   252 00000F55 B440                <1>     mov ah, 40h
   253 00000F57 CD41                <1>     int 41h
   254 00000F59 E802000000          <1>     call printCRLF
   255                              <1>     return
    19                              <2> %%_ret:
    20 00000F5E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   256                              <1> 
   257                              <1> 
   258                              <1> launchChild:
   259                              <1> ;We run EXEC on this and the child task will return via applicationReturn
   260                              <1>     return
    19                              <2> %%_ret:
    20 00000F5F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    16                                  %include "./Source/Utils/COMMAND/Source/cmdUtils.asm"
    17                              <1> ;Misc functions and subroutines for command.com
    18                              <1> 
    19                              <1> printCRLF:
    20 00000F60 488D155FF4FFFF      <1>     lea rdx, crlf
    21 00000F67 BB02000000          <1>     mov ebx, 2
    22 00000F6C B440                <1>     mov ah, 40h ;Print a new line
    23 00000F6E B902000000          <1>     mov ecx, 2  ;Two chars to write
    24 00000F73 CD41                <1>     int 41h
    25                              <1>     return
    19                              <2> %%_ret:
    20 00000F75 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    26                              <1> 
    27                              <1> putDateInPrompt:
    28                              <1> putTimeInPrompt:
    29                              <1>     return
    19                              <2> %%_ret:
    20 00000F76 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    30                              <1> 
    31                              <1> putVersionInPrompt:
    32 00000F77 488D1591F6FFFF      <1>     lea rdx, dosVer
    33 00000F7E B409                <1>     mov ah, 09h ;Print String
    34 00000F80 CD41                <1>     int 41h
    35 00000F82 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
    36 00000F84 CD41                <1>     int 41h
    37 00000F86 50                  <1>     push rax    ;Save minor version
    38 00000F87 E89C000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
    39 00000F8C E8B4000000          <1>     call printPackedBCD ;Print al
    40 00000F91 B22E                <1>     mov dl, "."
    41 00000F93 B402                <1>     mov ah, 02h
    42 00000F95 CD41                <1>     int 41h
    43 00000F97 58                  <1>     pop rax
    44 00000F98 88E0                <1>     mov al, ah  ;Get the minor version low
    45 00000F9A E889000000          <1>     call hexToBCD
    46 00000F9F E8A1000000          <1>     call printPackedBCD
    47                              <1>     return
    19                              <2> %%_ret:
    20 00000FA4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    48                              <1> putEscInPrompt:
    49 00000FA5 B21B                <1>     mov dl, ESC
    50 00000FA7 EB1C                <1>     jmp short outChar
    51                              <1> 
    52                              <1> putMoneyInPrompt:
    53 00000FA9 B224                <1>     mov dl, "$"
    54 00000FAB EB18                <1>     jmp short outChar
    55                              <1> 
    56                              <1> putEquInPrompt:
    57 00000FAD B23D                <1>     mov dl, "="
    58 00000FAF EB14                <1>     jmp short outChar
    59                              <1> 
    60                              <1> putPipeInPrompt:
    61 00000FB1 B27C                <1>     mov dl, "|"
    62 00000FB3 EB10                <1>     jmp short outChar
    63                              <1> 
    64                              <1> putGTinPrompt:
    65 00000FB5 B23E                <1>     mov dl, ">"
    66 00000FB7 EB0C                <1>     jmp short outChar
    67                              <1> 
    68                              <1> putLTinPrompt:
    69 00000FB9 B23C                <1>     mov dl, "<"
    70 00000FBB EB08                <1>     jmp short outChar
    71                              <1> 
    72                              <1> putDriveInPrompt:
    73 00000FBD B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
    74 00000FBF CD41                <1>     int 41h
    75 00000FC1 0441                <1>     add al, "A" ;Convert to letter
    76 00000FC3 88C2                <1>     mov dl, al
    77                              <1> outChar:
    78 00000FC5 B402                <1>     mov ah, 02h ;Echo to STDOUT
    79 00000FC7 CD41                <1>     int 41h
    80                              <1>     return
    19                              <2> %%_ret:
    20 00000FC9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    81                              <1> putCWDInPrompt:
    82 00000FCA 488D3D7AF0FFFF      <1>     lea rdi, currDirStr ;Update the current directory string
    83 00000FD1 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
    84 00000FD3 CD41                <1>     int 41h
    85 00000FD5 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
    86 00000FD7 FEC2                <1>     inc dl
    87 00000FD9 0441                <1>     add al, "A" ;Convert to letter
    88 00000FDB B43A                <1>     mov ah, ":"
    89 00000FDD 66AB                <1>     stosw   ;Store X:, rdi+=2
    90 00000FDF 8A053EF0FFFF        <1>     mov al, byte [pathSep]
    91 00000FE5 AA                  <1>     stosb   ;Store pathSep, inc rdi
    92 00000FE6 B447                <1>     mov ah, 47h ;Get Current Working Directory
    93 00000FE8 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
    94 00000FEB CD41                <1>     int 41h
    95 00000FED E879000000          <1>     call strlen
    96 00000FF2 81C102000000        <1>     add ecx, 2 ;Add two for the X:
    97                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
    98 00000FF8 B440                <1>     mov ah, 40h ;Write to handle
    99 00000FFA BB01000000          <1>     mov ebx, 1  ;STDOUT
   100 00000FFF 488D1545F0FFFF      <1>     lea rdx, currDirStr
   101 00001006 CD41                <1>     int 41h
   102                              <1>     return
    19                              <2> %%_ret:
    20 00001008 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   103                              <1> 
   104                              <1> BCDtoHex:
   105                              <1> ;Converts a BCD value to a Hex byte
   106                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   107 00001009 51                  <1>     push rcx
   108 0000100A 0FB6C0              <1>     movzx eax, al   ;Zero extend
   109 0000100D 89C1                <1>     mov ecx, eax    ;Save al in ecx
   110 0000100F 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   111 00001014 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   112 0000101A C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   113                              <1> .bth:
   114 0000101D 050A000000          <1>     add eax, 10
   115 00001022 FFC9                <1>     dec ecx
   116 00001024 75F7                <1>     jnz .bth
   117 00001026 59                  <1>     pop rcx
   118 00001027 C3                  <1>     ret
   119                              <1> 
   120                              <1> hexToBCD:
   121                              <1> ;Converts a Hex byte into two BCD digits
   122                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   123 00001028 51                  <1>     push rcx
   124 00001029 0FB6C0              <1>     movzx eax, al   ;Zero extend
   125 0000102C 31C9                <1>     xor ecx, ecx
   126                              <1> .htb0:
   127 0000102E 3D0A000000          <1>     cmp eax, 10
   128 00001033 7209                <1>     jb .htb1
   129 00001035 2D0A000000          <1>     sub eax, 10
   130 0000103A FFC1                <1>     inc ecx
   131 0000103C EBF0                <1>     jmp short .htb0
   132                              <1> .htb1:
   133 0000103E C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   134 00001041 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   135 00001043 59                  <1>     pop rcx
   136 00001044 C3                  <1>     ret
   137                              <1> printPackedBCD:
   138                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   139                              <1> ; then prints al[3:0]
   140                              <1> ;Preserves all registers
   141 00001045 50                  <1>     push rax
   142 00001046 52                  <1>     push rdx
   143 00001047 88C4                <1>     mov ah, al
   144 00001049 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   145 0000104B 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   146 0000104E 740B                <1>     jz .skipUpperNybble
   147 00001050 50                  <1>     push rax
   148 00001051 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   149 00001054 88E2                <1>     mov dl, ah
   150 00001056 B402                <1>     mov ah, 02h ;Print DL
   151 00001058 CD41                <1>     int 41h
   152 0000105A 58                  <1>     pop rax
   153                              <1> .skipUpperNybble:
   154 0000105B 0430                <1>     add al, "0"
   155 0000105D 88C2                <1>     mov dl, al
   156 0000105F B402                <1>     mov ah, 02h ;Print DL
   157 00001061 CD41                <1>     int 41h
   158 00001063 5A                  <1>     pop rdx
   159 00001064 58                  <1>     pop rax
   160                              <1>     return
    19                              <2> %%_ret:
    20 00001065 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   161                              <1> 
   162                              <1> getCurrentDrive:
   163                              <1> ;Returns the current drive in al
   164 00001066 B419                <1>     mov ah, 19h
   165 00001068 CD41                <1>     int 41h
   166                              <1>     return
    19                              <2> %%_ret:
    20 0000106A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   167                              <1> 
   168                              <1> strlen:
   169                              <1> ;Gets the length of a ASCIIZ string
   170                              <1> ;Input: rdi = Source buffer
   171                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   172 0000106B 50                  <1>     push rax
   173 0000106C 57                  <1>     push rdi
   174 0000106D 30C0                <1>     xor al, al
   175 0000106F 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   176 00001071 FFC9                <1>     dec ecx ;rcx = -1
   177 00001073 F2AE                <1>     repne scasb
   178 00001075 F7D1                <1>     not ecx
   179 00001077 5F                  <1>     pop rdi
   180 00001078 58                  <1>     pop rax
   181                              <1>     return
    19                              <2> %%_ret:
    20 00001079 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   182                              <1> 
   183                              <1> 
   184                              <1> findTerminator:
   185                              <1> ;Advances rsi to the next string terminator char
   186                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   187 0000107A AC                  <1>     lodsb
   188 0000107B E806000000          <1>     call isALterminator
   189 00001080 75F8                <1>     jnz findTerminator
   190 00001082 48FFCE              <1>     dec rsi
   191                              <1>     return
    19                              <2> %%_ret:
    20 00001085 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   192                              <1> isALterminator:
   193                              <1> ;Returns: ZF=NZ if al is not a terminator (Not including CR)
   194                              <1> ;         ZF=ZY if al is a terminator
   195 00001086 3C20                <1>     cmp al, " "
   196                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001088 74(85)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   197 0000108A 3C3B                <1>     cmp al, ";"
   198                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000108C 74(85)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   199 0000108E 3C3D                <1>     cmp al, "="
   200                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001090 74(85)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   201 00001092 3C2C                <1>     cmp al, ","
   202                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001094 74(85)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   203 00001096 3C09                <1>     cmp al, TAB
   204                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001098 74(85)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   205 0000109A 3C0A                <1>     cmp al, LF
   206                              <1>     return
    19                              <2> %%_ret:
    20 0000109C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   207                              <1> 
   208                              <1> findEndOfCommand:
   209                              <1> ;Moves rsi to the | or CR that terminates this command
   210 0000109D AC                  <1>     lodsb
   211 0000109E E806000000          <1>     call isALEndOfCommand
   212 000010A3 75F8                <1>     jnz findEndOfCommand
   213 000010A5 48FFCE              <1>     dec rsi
   214                              <1>     return
    19                              <2> %%_ret:
    20 000010A8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   215                              <1> isALEndOfCommand:
   216 000010A9 3C7C                <1>     cmp al, "|"
   217                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000010AB 74(A8)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   218 000010AD 3C0D                <1>     cmp al, CR
   219                              <1>     return
    19                              <2> %%_ret:
    20 000010AF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   220                              <1> 
   221                              <1> scanForRedir:
   222                              <1> ;Returns: AL = 0 => No redirection, terminate with CR
   223                              <1> ;         AL = 1 => Redirection, type <
   224                              <1> ;         AL = 10 => Redir, type >
   225                              <1> ;         AL = 20 => Redir, type >>
   226                              <1> ;If multiple redirs found, the last one of that type counts.
   227 000010B0 56                  <1>     push rsi
   228 000010B1 55                  <1>     push rbp
   229 000010B2 30E4                <1>     xor ah, ah
   230                              <1> .lp:
   231 000010B4 AC                  <1>     lodsb
   232 000010B5 3C3E                <1>     cmp al, ">"
   233                              <1> .exit:
   234 000010B7 5D                  <1>     pop rbp
   235 000010B8 5E                  <1>     pop rsi
   236                              <1>     return
    19                              <2> %%_ret:
    20 000010B9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   237                              <1> 
   238                              <1> 
   239                              <1> skipSpaces:
   240                              <1> ;Also skips tabs
   241                              <1> ;Input: rsi must point to the start of the data string
   242                              <1> ;Output: rsi points to the first non-space char
   243 000010BA 803E20              <1>     cmp byte [rsi], " "
   244 000010BD 7405                <1>     je .skip    ;If equal to a space, skip it
   245 000010BF 803E09              <1>     cmp byte [rsi], TAB
   246                              <1>     retne   ;If not equal to a tab or space, return
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000010C2 75(B9)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   247                              <1> .skip:
   248 000010C4 48FFC6              <1>     inc rsi
   249 000010C7 EBF1                <1>     jmp short skipSpaces
   250                              <1> 
   251                              <1> printPrompt:
   252 000010C9 66813D4FEFFFFFFFFF  <1>     cmp word [promptPtr], -1
   253 000010D2 750B                <1>     jne .validPrompt
   254                              <1>     ;Here we print the default prompt
   255 000010D4 E8F1FEFFFF          <1>     call putCWDInPrompt
   256 000010D9 E8D7FEFFFF          <1>     call putGTinPrompt
   257                              <1>     return
    19                              <2> %%_ret:
    20 000010DE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   258                              <1> .validPrompt:
   259                              <1>     return
    19                              <2> %%_ret:
    20 000010DF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   260                              <1> 
   261                              <1> clearCommandState:
   262                              <1> ;Clears the command state
   263 000010E0 488D3DB7EFFFFF      <1>     lea rdi, cmdStatePtr
   264 000010E7 B90A000000          <1>     mov ecx, cmdStateL
   265 000010EC 31C0                <1>     xor eax, eax
   266 000010EE F3AA                <1>     rep stosb
   267                              <1>     return
    19                              <2> %%_ret:
    20 000010F0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   268                              <1> 
   269                              <1> clearCommandLineState:
   270                              <1> ;Clears the command line state after a 0Dh encountered
   271 000010F1 488D3D96EFFFFF      <1>     lea rdi, cmdLineStatePtr
   272 000010F8 B91A000000          <1>     mov ecx, cmdLineStateL
   273 000010FD 31C0                <1>     xor eax, eax
   274 000010FF F3AA                <1>     rep stosb
   275                              <1>     return
    19                              <2> %%_ret:
    20 00001101 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   276                              <1> 
   277                              <1> asciiToFCB:
   278                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   279                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   280                              <1> ;Also doesn't check if chars are valid
   281                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   282                              <1> ;Name is space padded.
   283                              <1> ;Input: rsi = ASCII string buffer
   284                              <1> ;       rdi = FCB name buffer
   285                              <1> ;Output: al = Char that terminated the source string 
   286 00001102 53                  <1>     push rbx    
   287 00001103 57                  <1>     push rdi
   288 00001104 B90B000000          <1>     mov ecx, 11
   289 00001109 B020                <1>     mov al, " "
   290 0000110B F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   291 0000110D 5F                  <1>     pop rdi
   292 0000110E 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   293                              <1> .processName:
   294 00001111 AC                  <1>     lodsb   ;Get the char in al
   295 00001112 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   296 00001114 7426                <1>     jz .exit
   297 00001116 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   298 00001118 7407                <1>     je .extSpace
   299 0000111A 3C2E                <1>     cmp al, "."
   300 0000111C 740C                <1>     je .ext
   301 0000111E AA                  <1>     stosb   ;Store the char
   302 0000111F EBF0                <1>     jmp short .processName
   303                              <1> .extSpace:
   304                              <1> ;Now we scan for a period in the name
   305 00001121 AC                  <1>     lodsb   ;Get a char and increase rsi
   306 00001122 84C0                <1>     test al, al
   307 00001124 7416                <1>     jz .exit
   308 00001126 3C2E                <1>     cmp al, "."     ;If al is not a period...
   309 00001128 75F7                <1>     jne .extSpace   ; keep searching
   310                              <1> .ext:
   311 0000112A 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   312                              <1> .processExt:
   313 0000112E AC                  <1>     lodsb
   314 0000112F 84C0                <1>     test al, al
   315 00001131 7409                <1>     jz .exit
   316 00001133 3C20                <1>     cmp al, " "
   317 00001135 7405                <1>     je .exit
   318 00001137 AA                  <1>     stosb
   319 00001138 EBF4                <1>     jmp short .processExt
   320                              <1> .exitBadChar:
   321 0000113A 30C0                <1>     xor al, al  ;Return a null terminator
   322                              <1> .exit:
   323 0000113C 5B                  <1>     pop rbx
   324                              <1>     return
    19                              <2> %%_ret:
    20 0000113D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   325                              <1> 
   326                              <1> FCBToAsciiz:
   327                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   328                              <1> ;Name is space padded too
   329                              <1> ;Input: rsi = FCB name buffer
   330                              <1> ;       rdi = ASCIIZ string buffer
   331 0000113E B908000000          <1>     mov ecx, 8
   332 00001143 F3A4                <1>     rep movsb   ;Move the name over
   333                              <1> .scanNameSpace:
   334 00001145 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   335 00001149 750D                <1>     jne .ext
   336 0000114B 48FFCF              <1>     dec rdi
   337 0000114E FFC1                <1>     inc ecx
   338 00001150 81F908000000        <1>     cmp ecx, 8
   339 00001156 72ED                <1>     jb .scanNameSpace
   340                              <1> .ext:
   341 00001158 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   342 0000115D 7506                <1>     jne .validExt
   343 0000115F 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   344 00001163 7415                <1>     je .exit
   345                              <1> .validExt:
   346 00001165 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   347 00001167 AA                  <1>     stosb
   348 00001168 B903000000          <1>     mov ecx, 3
   349 0000116D F3A4                <1>     rep movsb   ;Move the three extension chars over
   350                              <1> .scanExtSpace:
   351 0000116F 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   352 00001173 7505                <1>     jne .exit
   353 00001175 48FFCF              <1>     dec rdi
   354 00001178 EBF5                <1>     jmp short .scanExtSpace
   355                              <1> .exit:
   356 0000117A 31C0                <1>     xor eax, eax
   357 0000117C AA                  <1>     stosb   ;Store a null at the end
   358                              <1>     return
    19                              <2> %%_ret:
    20 0000117D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   359                              <1> 
   360                              <1> buildCommandPath:
   361                              <1> ;Based on the first argument on the command line
   362                              <1> ; will build a full ASCIIZ path in searchSpec to the file/dir specified
   363                              <1>     ;If this is a relative path, must handle correctly
   364 0000117E 0FB6051EEFFFFF      <1>     movzx eax, byte [arg1Off]
   365 00001185 488D35ADEFFFFF      <1>     lea rsi, cmdBuffer
   366 0000118C 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   367 0000118F 8A3D8EEEFFFF        <1>     mov bh, byte [pathSep]
   368 00001195 B33A                <1>     mov bl, ":"
   369 00001197 383E                <1>     cmp byte [rsi], bh  ;Is the first char relative to root?
   370 00001199 7458                <1>     je .absoluteCurrent
   371 0000119B 66395E01            <1>     cmp word [rsi + 1], bx    ;This checks if absolute or relative
   372 0000119F 746D                <1>     je .absolutePath
   373 000011A1 385E01              <1>     cmp byte [rsi + 1], bl  ;Check if a drive separator
   374 000011A4 7409                <1>     je .relativeGiven
   375                              <1> ;No drive letter given, must get Current Drive
   376 000011A6 E8BBFEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   377 000011AB 0441                <1>     add al, "A"
   378 000011AD EB0B                <1>     jmp short .relativeCommon
   379                              <1> .relativeGiven:
   380                              <1> ;Drive letter pointed to by AL
   381 000011AF 8A06                <1>     mov al, byte [rsi]  ;Get drive letter in al
   382 000011B1 24DF                <1>     and al, 0DFh    ;Convert to UC
   383 000011B3 4881C602000000      <1>     add rsi, 2  ;Skip the given drive letter and the colon
   384                              <1> .relativeCommon:
   385                              <1>     ;al has drive letter
   386 000011BA 88C2                <1>     mov dl, al  ;Save drive letter in dl
   387 000011BC 80EA40              <1>     sub dl, "@" ;Get 1 based drive number in dl
   388 000011BF B43A                <1>     mov ah, ":" ;Get the colon in too
   389 000011C1 488D3D04F1FFFF      <1>     lea rdi, searchSpec ;Start building our search path here
   390 000011C8 66AB                <1>     stosw   ;Store X:
   391 000011CA 8A0553EEFFFF        <1>     mov al, byte [pathSep]
   392 000011D0 AA                  <1>     stosb   ;Store pathSep
   393 000011D1 56                  <1>     push rsi    ;Save user input string
   394 000011D2 4889FE              <1>     mov rsi, rdi    ;Put the current directory here for this drive
   395 000011D5 B447                <1>     mov ah, 47h ;Get Current Working Directory, dl has drive number
   396 000011D7 CD41                <1>     int 41h ;Won't fail as drive letter in dl confirmed ok
   397 000011D9 5E                  <1>     pop rsi
   398                              <1>     ;Now want to find terminating null
   399 000011DA 30C0                <1>     xor al, al
   400 000011DC 31C9                <1>     xor ecx, ecx
   401 000011DE FFC9                <1>     dec ecx
   402 000011E0 F2AE                <1>     repne scasb ;Search for the terminating null
   403 000011E2 48FFCF              <1>     dec rdi ;Go back one once found
   404 000011E5 8A0538EEFFFF        <1>     mov al, byte [pathSep]
   405 000011EB 3847FF              <1>     cmp byte [rdi - 1], al
   406 000011EE 7425                <1>     je .buildPath ;If the previous char is a pathsep, skip storing another
   407 000011F0 AA                  <1>     stosb   ;Store the pathsep
   408 000011F1 EB22                <1>     jmp short .buildPath  ;Now we copy the user string over and good to go
   409                              <1> .absoluteCurrent:
   410 000011F3 E86EFEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   411 000011F8 0441                <1>     add al, "A"
   412 000011FA B43A                <1>     mov ah, ":" ;ax has X: now to store 
   413 000011FC 488D3DC9F0FFFF      <1>     lea rdi, searchSpec
   414 00001203 66AB                <1>     stosw
   415 00001205 8A0518EEFFFF        <1>     mov al, byte [pathSep]
   416 0000120B AA                  <1>     stosb
   417 0000120C EB07                <1>     jmp short .buildPath
   418                              <1> .absolutePath:
   419 0000120E 488D3DB7F0FFFF      <1>     lea rdi, searchSpec
   420                              <1> .buildPath:
   421 00001215 E88FFAFFFF          <1>     call copyCommandTailItem    ;Terminates with a 0 for free
   422 0000121A 488D35ABF0FFFF      <1>     lea rsi, searchSpec
   423 00001221 488D3DA4F0FFFF      <1>     lea rdi, searchSpec
   424 00001228 B460                <1>     mov ah, 60h ;Truename it to avoid issues
   425 0000122A CD41                <1>     int 41h
   426                              <1>     retc    ;Return if an error with CF=CY
    63                              <2> cret c
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 0000122C 7301                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 0000122E C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   427                              <1>     ;Here we do one final check to ensure we dont end up with a A: but A:"\"
   428 0000122F 30C0                <1>     xor al, al
   429 00001231 31C9                <1>     xor ecx, ecx
   430 00001233 FFC9                <1>     dec ecx
   431 00001235 F2AE                <1>     repne scasb
   432 00001237 48FFCF              <1>     dec rdi ;Go back to the final non-null char
   433 0000123A 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is the final non-null char a colon?
   434                              <1>     retne   ;Return if not
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000123E 75(2E)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   435 00001240 31C0                <1>     xor eax, eax
   436 00001242 8A05DBEDFFFF        <1>     mov al, byte [pathSep]  ;IF it is, insert a pathsep
   437 00001248 66AB                <1>     stosw   ;Store the terminating 0 after the pathsep
   438                              <1>     return
    19                              <2> %%_ret:
    20 0000124A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    17                                  %include "./Source/Utils/COMMAND/Source/int44h.asm"
    18                              <1> critErrorHandler:   ;Int 44h
    19                              <1> ;User Stack in usage here, must be swapped to before this is called
    20                              <1> ;Entered with:  
    21                              <1> ;               AH = Critical Error Bitfield
    22                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    23                              <1> ;               Bit 6 - Reserved
    24                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    25                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    26                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    27                              <1> ;               Bits [2-1] = Affected Disk Error
    28                              <1> ;                     0 0   DOS area
    29                              <1> ;                     0 1   FAT area
    30                              <1> ;                     1 0   Directory area
    31                              <1> ;                     1 1   Data area
    32                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    33                              <1> ;               AL  = Failing drive number if AH[7] = 0
    34                              <1> ;               DIL = Error code for errorMsg
    35                              <1> ;               RSI = EA of Device Header for which device the error occured
    36                              <1> ;Return:
    37                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    38                              <1> ;                  = 1 - Retry the Operation    (Retry)
    39                              <1> ;                  = 2 - Terminate the Program  (Abort)
    40                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    41 0000124B 53                  <1>     push rbx
    42 0000124C 51                  <1>     push rcx
    43 0000124D 52                  <1>     push rdx
    44 0000124E 57                  <1>     push rdi
    45 0000124F 56                  <1>     push rsi
    46 00001250 FC                  <1>     cld         ;Make String ops go forward
    47                              <1> 
    48 00001251 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    49 00001254 488D156BF1FFFF      <1>     lea rdx, crlf
    50 0000125B B409                <1>     mov ah, 09h ;Print String
    51 0000125D CD41                <1>     int 41h
    52                              <1> 
    53 0000125F 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    54 00001265 B90C000000          <1>     mov ecx, 0Ch
    55 0000126A 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    56 0000126C 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    57 0000126F 480FB7FF            <1>     movzx rdi, di
    58 00001273 4889FA              <1>     mov rdx, rdi    ;Copy error code
    59 00001276 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    60 0000127A 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    61 0000127D 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    62 00001280 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    63 00001287 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    64 0000128B B409                <1>     mov ah, 09h ;Print String
    65 0000128D CD41                <1>     int 41h     ;Call DOS to print first part of message
    66                              <1> 
    67 0000128F 488D1505020000      <1>     lea rdx, qword [.readmsg]
    68 00001296 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    69 0000129D F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    70 000012A0 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    71 000012A4 B409                <1>     mov ah, 09h ;Print String
    72 000012A6 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    73                              <1> 
    74 000012A8 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    75 000012AB 0F85DF000000        <1>     jnz .charError
    76                              <1> ;Disk error continues here
    77 000012B1 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    78 000012B8 B409                <1>     mov ah, 09h
    79 000012BA CD41                <1>     int 41h
    80 000012BC 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    81 000012BE 80C241              <1>     add dl, "A" ;Add ASCII code
    82 000012C1 B402                <1>     mov ah, 02h ;Print char in dl
    83 000012C3 CD41                <1>     int 41h
    84                              <1> .userInput:
    85 000012C5 488D15FAF0FFFF      <1>     lea rdx, crlf  ;Print new line
    86 000012CC B409                <1>     mov ah, 09h
    87 000012CE CD41                <1>     int 41h
    88                              <1> ;Abort, Retry, Ignore, Fail is word order
    89                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    90                              <1> .userAbort:
    91                              <1> ;Abort is always an option
    92 000012D0 488D15E2010000      <1>     lea rdx, qword [.abortmsg]
    93 000012D7 B409                <1>     mov ah, 09h
    94 000012D9 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
    95                              <1> .userRetry:
    96 000012DB F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    97 000012DE 7416                <1>     jz .userIgnore    ;If clear, dont print message
    98 000012E0 488D15EA010000      <1>     lea rdx, qword [.betweenMsg]
    99 000012E7 B409                <1>     mov ah, 09h
   100 000012E9 CD41                <1>     int 41h
   101 000012EB 488D15D4010000      <1>     lea rdx, qword [.retrymsg]
   102 000012F2 B409                <1>     mov ah, 09h
   103 000012F4 CD41                <1>     int 41h
   104                              <1> .userIgnore:
   105 000012F6 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   106 000012F9 7416                <1>     jz .userFail
   107 000012FB 488D15CF010000      <1>     lea rdx, qword [.betweenMsg]
   108 00001302 B409                <1>     mov ah, 09h
   109 00001304 CD41                <1>     int 41h
   110 00001306 488D15B2010000      <1>     lea rdx, qword [.ignoremsg]
   111 0000130D B409                <1>     mov ah, 09h
   112 0000130F CD41                <1>     int 41h
   113                              <1> .userFail:
   114 00001311 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   115 00001314 7416                <1>     jz .userMsgEnd
   116 00001316 488D15B4010000      <1>     lea rdx, qword [.betweenMsg]
   117 0000131D B409                <1>     mov ah, 09h
   118 0000131F CD41                <1>     int 41h
   119 00001321 488D15A4010000      <1>     lea rdx, qword [.failmsg]
   120 00001328 B409                <1>     mov ah, 09h
   121 0000132A CD41                <1>     int 41h
   122                              <1> .userMsgEnd:
   123 0000132C 488D15A1010000      <1>     lea rdx, qword [.endMsg]
   124 00001333 B409                <1>     mov ah, 09h
   125 00001335 CD41                <1>     int 41h
   126                              <1> ;Get user input now 
   127 00001337 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   128 00001339 488D3D97010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   129 00001340 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   130 00001342 CD41                <1>     int 41h ;Get char in al
   131 00001344 3C61                <1>     cmp al, "a" ;Chack if lowercase
   132 00001346 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   133 00001348 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   134                              <1> .uip1:
   135 0000134A AE                  <1>     scasb   ;Compare char to list, offset gives return code
   136 0000134B 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   137 0000134D FFC1                <1>     inc ecx
   138 0000134F 81F904000000        <1>     cmp ecx, 4
   139 00001355 75F3                <1>     jne .uip1
   140 00001357 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   141                              <1> .validInput:
   142 0000135C 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   143                              <1> ;Now check if the input is permitted
   144 0000135E 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   145 00001360 7427                <1>     je .cehExit
   146 00001362 84C0                <1>     test al, al ;Check if 0 => Ignore
   147 00001364 740F                <1>     je .viIgnore
   148 00001366 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   149 00001368 7416                <1>     je .viRetry
   150                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   151 0000136A F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   152 0000136D 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   153 00001373 EB14                <1>     jmp short .cehExit
   154                              <1> .viIgnore:
   155 00001375 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   156 00001378 0F8447FFFFFF        <1>     jz .userInput
   157 0000137E EB09                <1>     jmp short .cehExit
   158                              <1> .viRetry:
   159 00001380 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   160 00001383 0F843CFFFFFF        <1>     jz .userInput
   161                              <1> .cehExit:
   162 00001389 5E                  <1>     pop rsi
   163 0000138A 5F                  <1>     pop rdi
   164 0000138B 5A                  <1>     pop rdx
   165 0000138C 59                  <1>     pop rcx
   166 0000138D 5B                  <1>     pop rbx
   167 0000138E 48CF                <1>     iretq
   168                              <1> .charError:
   169 00001390 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   170 00001395 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   171                              <1> .ce1:
   172 0000139C AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   173 0000139D 88C2                <1>     mov dl, al  ;Move char into dl
   174 0000139F B402                <1>     mov ah, 02h
   175 000013A1 CD41                <1>     int 41h ;Print char
   176 000013A3 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   177 000013A5 E91BFFFFFF          <1>     jmp .userInput
   178                              <1> 
   179                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   180 000013AA 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   180 000013B3 746563742024202020  <1>
   181 000013BC 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   181 000013C5 6E6974202420202020  <1>
   182 000013CE 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   182 000013D7 202420202020202020  <1>
   183 000013E0 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   183 000013E9 6F6D6D616E64202420  <1>
   184 000013F2 446174612024202020- <1>             db "Data $            "       ;Error 4
   184 000013FB 202020202020202020  <1>
   185 00001404 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   185 0000140D 737420242020202020  <1>
   186 00001416 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   186 0000141F 202020202020202020  <1>
   187 00001428 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   187 00001431 656469612024202020  <1>
   188 0000143A 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   188 00001443 7420466F756E642024  <1>
   189 0000144C 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   189 00001455 706572202420202020  <1>
   190 0000145E 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   190 00001467 6C7420242020202020  <1>
   191 00001470 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   191 00001479 742024202020202020  <1>
   192 00001482 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   192 0000148B 61696C757265202420  <1>
   193                              <1> 
   194 00001494 64726976652024      <1> .drive      db "drive $"
   195 0000149B 6572726F7220726561- <1> .readmsg    db "error reading $"
   195 000014A4 64696E672024        <1>
   196 000014AA 6572726F7220777269- <1> .writemsg   db "error writing $"
   196 000014B3 74696E672024        <1>
   197 000014B9 41626F727424        <1> .abortmsg   db "Abort$" 
   198 000014BF 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   199 000014C6 526574727924        <1> .retrymsg   db "Retry$"
   200 000014CC 4661696C24          <1> .failmsg    db "Fail$"
   201 000014D1 2C2024              <1> .betweenMsg db ", $"
   202 000014D4 3F2024              <1> .endMsg     db "? $"
   203 000014D7 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   204                              <1> 
   205                              <1> int43h:
   206 000014DB F9                  <1>     stc     ;Set CF to kill the task
   207 000014DC C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    18                                  %include "./Source/Utils/COMMAND/Data/cmdEnv.asm"
    19                              <1>     
    20                              <1> masterEnv:  ;Yeet this is this is a child command processor
    21 000014DF 5F3A434F4D4D414E44- <1>     db "_:COMMAND.COM",0
    21 000014E8 2E434F4D00          <1>
    22 000014ED 504154483D0000      <1>     db "PATH=",0,0
    23 000014F4 202020202020202020- <1>     db ($ - masterEnv) dup (" ")    ;Pad the environment with spaces
    23 000014FD 202020202020202020- <1>
    23 00001506 202020              <1>
    24                              <1> endOfAlloc: ;Symbol to find the start of where I can yeet 
    19                                  %include "./Source/Utils/COMMAND/Source/cmdLdr.asm"
    20                              <1> cmdLdr:
    21                              <1> ;First check if the version is ok. If not, return.
    22 00001509 B430                <1>     mov ah, 30h
    23 0000150B CD41                <1>     int 41h
    24 0000150D 3C01                <1>     cmp al, 01h ;Version 1
    25 0000150F 760D                <1>     jbe .okVersion
    26 00001511 488D1560010000      <1>     lea rdx, badVerStr
    27 00001518 B409                <1>     mov ah, 09h
    28 0000151A CD41                <1>     int 41h
    29 0000151C CD40                <1>     int 40h ;Exit to caller or DOS to print bad command interpreter line
    30                              <1> .okVersion:
    31                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    32 0000151E 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    33 00001522 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    34 00001526 488905E2EAFFFF      <1>     mov qword [realParent], rax ;Preserve the real parent address
    35                              <1> ;Setup Int 43h and Int 44h
    36 0000152D 488D1517FDFFFF      <1>     lea rdx, critErrorHandler
    37 00001534 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    38 00001538 B844250000          <1>     mov eax, 2544h
    39 0000153D CD41                <1>     int 41h
    40 0000153F 488D1595FFFFFF      <1>     lea rdx, int43h
    41 00001546 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    42 0000154A B843250000          <1>     mov eax, 2543h
    43 0000154F CD41                <1>     int 41h
    44 00001551 488D15E0F2FFFF      <1>     lea rdx, applicationReturn
    45 00001558 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    46 0000155C B842250000          <1>     mov eax, 2542h
    47 00001561 CD41                <1>     int 41h
    48                              <1> ;Get a pointer to DOS Sysvars
    49 00001563 B452                <1>     mov ah, 52h ;Get sysvars
    50 00001565 CD41                <1>     int 41h
    51 00001567 48891DA9EAFFFF      <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    52                              <1> ;Call for simple internationalisation data
    53 0000156E B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    54 00001573 CD41                <1>     int 41h
    55 00001575 3CFF                <1>     cmp al, -1
    56 00001577 7412                <1>     je .skipSwitch
    57 00001579 8815A5EAFFFF        <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    58 0000157F 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    59 00001582 7507                <1>     jne .skipSwitch
    60 00001584 C60598EAFFFF2F      <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    61                              <1> .skipSwitch:
    62 0000158B B800380000          <1>     mov eax, 3800h  ;Get current country data
    63 00001590 488D158EEAFFFF      <1>     lea rdx, ctryData
    64 00001597 CD41                <1>     int 41h ;Write the data to the internal country table
    65                              <1> ;Now determine if this is the master copy of COMMAND.COM
    66                              <1> ;Check if Int 4Eh has the same address as Int 4Dh. If so, we are master.
    67 00001599 B84E350000          <1>     mov eax, 354Eh  ;Get int 4Eh address
    68 0000159E CD41                <1>     int 41h
    69 000015A0 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    70 000015A3 B84D350000          <1>     mov eax, 354Dh  ;Get int 4Dh address
    71 000015A8 CD41                <1>     int 41h
    72 000015AA 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    73 000015AD 7535                <1>     jne .skipMaster
    74                              <1> ;Ok so we are master command.com
    75                              <1> ;Now make myself the real parent
    76 000015AF 4C890559EAFFFF      <1>     mov qword [realParent], r8
    77                              <1> ;Set master environment as mine
    78 000015B6 488D0522FFFFFF      <1>     lea rax, masterEnv
    79 000015BD 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    80                              <1> ;Set current Drive in COMSPEC
    81 000015C1 B019                <1>     mov al, 19h ;Get current Drive
    82 000015C3 CD41                <1>     int 41h
    83 000015C5 0441                <1>     add al, "A"
    84 000015C7 880512FFFFFF        <1>     mov byte [masterEnv], al
    85                              <1> ;Set Int 4Eh up
    86 000015CD 488D15FFF6FFFF      <1>     lea rdx, int4Eh
    87 000015D4 B84E250000          <1>     mov eax, 254Eh ;Set this as Int 4Eh
    88 000015D9 CD41                <1>     int 41h
    89                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    90                              <1>     
    91 000015DB 488D1D27FFFFFF      <1>     lea rbx, endOfAlloc ;Save the Master Environment
    92 000015E2 EB07                <1>     jmp short .printInit
    93                              <1> .skipMaster:
    94 000015E4 488D1DF4FEFFFF      <1>     lea rbx, masterEnv  ;This is the base address to jettison
    95                              <1> .printInit:
    96                              <1> ;Finish by printing INIT string.
    97 000015EB 488D1510000000      <1>     lea rdx, initString
    98 000015F2 B409                <1>     mov ah, 09h
    99 000015F4 CD41                <1>     int 41h ;Print init string
   100 000015F6 48892508EAFFFF      <1>     mov qword [stackBottom], rsp    ;Use this to save where to reset rsp to
   101 000015FD E922F2FFFF          <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   102                              <1> ;Loader Data here
   103                              <1> initString: 
   104 00001602 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version 1.0",CR,LF
   104 0000160B 66696320436F6D7075- <1>
   104 00001614 746572205265736561- <1>
   104 0000161D 726368285229205343- <1>
   104 00001626 502F444F5328522920- <1>
   104 0000162F 56657273696F6E2031- <1>
   104 00001638 2E300D0A            <1>
   105 0000163C 202020202020202020- <1>     db       "          (C)Copyright Scientific Computer Reserach 2022.",CR,LF,"$"
   105 00001645 20284329436F707972- <1>
   105 0000164E 696768742053636965- <1>
   105 00001657 6E746966696320436F- <1>
   105 00001660 6D7075746572205265- <1>
   105 00001669 736572616368203230- <1>
   105 00001672 32322E0D0A24        <1>
   106 00001678 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   106 00001681 20444F532076657273- <1>
   106 0000168A 696F6E0D0A24        <1>
   106          ------------------  <1>  info: assembly required 1+2+2 passes

