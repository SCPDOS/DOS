     1                                  ;COMMAND.COM main file
     2                                  [map all ./Source/Utils/COMMAND/Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Source/Include/dosMacro.mac"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------------------------------
     9                              <1> ;Generic Macros file
    10                              <1> ;The following instruction extensions allow to conditionally return
    11                              <1> ;The idea was borrowed from the DOS Source Code
    12                              <1> ;
    13                              <1> ;-------------------------------------------------------------------------------
    14                              <1> 
    15                              <1> ;-------------------------------------------------------------------------------
    16                              <1> ;These macros are live and must not be touched
    17                              <1> ;-------------------------------------------------------------------------------
    18                              <1> %macro return 0
    19                              <1> %%_ret:
    20                              <1>     ret
    21                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    22                              <1> %endmacro
    23                              <1> 
    24                              <1> %macro cret 1
    25                              <1> %%_base:
    26                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    27                              <1>     %ifdef retOff
    28                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <1>     %ifdef currSegVBase
    30                              <1>     j%+1 short (retOff+currSegVBase)
    31                              <1>     %else
    32                              <1>     j%+1 short retOff
    33                              <1>     %endif  ;End ifdef currSegVBase
    34                              <1>     %else 
    35                              <1>     j%-1 short %%a
    36                              <1>     return
    37                              <1> %%a:
    38                              <1>     %endif  ;End the distance measurement if
    39                              <1>     %else   
    40                              <1>     j%-1 short %%a
    41                              <1>     return
    42                              <1> %%a:
    43                              <1>     %endif  ;End ifdef retoff
    44                              <1> %endmacro
    45                              <1> 
    46                              <1> %macro retz 0
    47                              <1> cret z
    48                              <1> %endmacro
    49                              <1> 
    50                              <1> %macro retnz 0
    51                              <1> cret nz
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> %macro rete 0
    55                              <1> cret e
    56                              <1> %endmacro
    57                              <1> 
    58                              <1> %macro retne 0
    59                              <1> cret ne
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> %macro retc 0
    63                              <1> cret c
    64                              <1> %endmacro
    65                              <1> 
    66                              <1> %macro retnc 0
    67                              <1> cret nc
    68                              <1> %endmacro
    69                              <1> 
    70                              <1> %macro retb 0
    71                              <1> cret b
    72                              <1> %endmacro
    73                              <1> 
    74                              <1> %macro retnb 0
    75                              <1> cret nb
    76                              <1> %endmacro
    77                              <1> 
    78                              <1> %macro breakpoint 0
    79                              <1> xchg bx, bx
    80                              <1> %endmacro
     7                                  %include "./Source/Include/dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    27 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    32 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Only affects for SUBST drives, not JOIN
    69                              <1> ; Flags: Bit 15 set = Network drive
    70                              <1> ;        Bit 14 set = Physical drive
    71                              <1> ;        Bit 13 set = JOIN'ed drive
    72                              <1> ;        Bit 12 set = SUBST'ed drive
    73                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    74                              <1> endstruc
    75                              <1> ;CDS equates
    76                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    77                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    78                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    79                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    80                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    81                              <1> ;------------------------------------------------------------------------;
    82                              <1> ; The SFT is a way to allow applications to open file handles to files 
    83                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    84                              <1> ; under the first header, and then a second header will be linked to the 
    85                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    86                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    87                              <1> ; using the FCBS= command. Default FCBS=5.
    88                              <1> ;
    89                              <1> ; A file handle describes the file, and the location within the file that
    90                              <1> ; we are reading. The file handle can be manipulated without the file
    91                              <1> ; being in memory, thus allowing the user to access data without needing 
    92                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    93                              <1> ; accessing devices, by treating them as files with their drivers 
    94                              <1> ; responding and translating the manipulations of the file handle itself.
    95                              <1> ; Neither the driver nor the application should see or use the SFT for
    96                              <1> ; the handle, as it is subject to change (and will change when file 
    97                              <1> ; sharing provisions are included). The DOS will make requests to the 
    98                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    99                              <1> ; track of the information in the SFT entry for that handle. 
   100                              <1> ;
   101                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   102                              <1> ; can point to the same file. It all depends on what the applications 
   103                              <1> ; want to do with the File.
   104                              <1> ;
   105                              <1> ; !!!!IMPORTANT!!!!
   106                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   107                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   108                              <1> ;
   109                              <1> ;Each SFT may look like this:
   110                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   111                              <1> ;            |                |
   112                              <1> ;       wNumFiles*sft    wNumFiles*sft
   113                              <1> ;
   114                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   115                              <1> ; System FCBs.
   116                              <1> ;
   117                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   118                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   119                              <1> ;
   120                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   121                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   122                              <1> ;------------------------------------------------------------------------;
   123                              <1> struc sfth   ;System file table header
   124                              <1> ; This is the SFT header.
   125                              <1> ; This structure comes before the start of the first file in the array/table.
   126 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   127 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   128                              <1> endstruc
   129                              <1> 
   130                              <1> struc sft
   131                              <1> ;This is the file struc itself
   132 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   133 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   134 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   135 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   136 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   137 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   138 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   139 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   140 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   141 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   142 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   143 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   144 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   145 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   146 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   147 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   148 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   149 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   150 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   151                              <1> ;                           0 means no record
   152                              <1> endstruc
   153                              <1> ;Open Mode equates
   154                              <1> ;Access modes   Bits[2:0]
   155                              <1> ReadAccess      equ 0h
   156                              <1> WriteAccess     equ 1h
   157                              <1> RWAccess        equ 2h
   158                              <1> ;Bit 3 reserved 0
   159                              <1> ;Sharing modes  Bits[6:4]
   160                              <1> CompatShare     equ 0h
   161                              <1> denyRWShare     equ 10h
   162                              <1> denyWriteShare  equ 20h
   163                              <1> denyReadShare   equ 30h
   164                              <1> denyNoneShare   equ 40h
   165                              <1> netFCBShare     equ 70h
   166                              <1> ;Bit 7 reserved 0
   167                              <1> ;Bits 8-12 reserved 0
   168                              <1> 
   169                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   170                              <1> ;Buffering on writes
   171                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   172                              <1> ;FCB opened file?
   173                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   174                              <1> ;Attribute Byte
   175                              <1> readOnlyFile    equ 1h
   176                              <1> hiddenFile      equ 2h
   177                              <1> systemFile      equ 4h
   178                              <1> volumeLabel     equ 8h
   179                              <1> directoryFile   equ 10h ;Directory entry
   180                              <1> archiveFile     equ 20h
   181                              <1> ;Device Info equates
   182                              <1> ;For a block device, bits [5:0] contain the drive number
   183                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   184                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   185                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   186                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   187                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   188                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   189                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   190                              <1> blokFileToFlush equ 40h ;Set if ANY writes are made to this handle!
   191                              <1> devCharDev      equ 80h ;If set, it is a char device!
   192                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   193                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   194                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   195                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   196                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   197                              <1> 
   198                              <1> ;openAddress   equ DOSSEG:367Ah   
   199                              <1> ;createAddress equ DOSSEG:35E3h   
   200                              <1> ;------------------------------------------------------------------------;
   201                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   202                              <1> ; to an internal buffer, and then copying it to the specified location
   203                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   204                              <1> ; another request for the same sector from the same device is made, so 
   205                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   206                              <1> ; size, selected according to the largest detected sector size during 
   207                              <1> ; the initial loadup.
   208                              <1> ;
   209                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   210                              <1> ;
   211                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   212                              <1> ;------------------------------------------------------------------------;
   213                              <1> 
   214                              <1> struc bufferHdr
   215 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   216 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   217 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   218 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   219 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   220 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   221 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   222 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   223 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   224                              <1>     .dataarea:             ;Points to the start of the data area
   225                              <1> endstruc
   226                              <1> ;Buffer Flag equates
   227                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   228                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   229                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   230                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   231                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   232                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   233                              <1> ;Note! A buffer is marked as referenced only when the application 
   234                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   235                              <1> ;------------------------------------------------------------------------;
   236                              <1> ; Memory control block for each memory arena
   237                              <1> ;------------------------------------------------------------------------;
   238                              <1> struc mcb
   239 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   240 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   241 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   242 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   243                              <1>     .program:
   244                              <1> endstruc
   245                              <1> ;MCB equates
   246                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   247                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   248                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   249                              <1> mcbMarkCtn      equ "M"
   250                              <1> mcbMarkEnd      equ "Z"
   251                              <1> 
   252                              <1> memFirstFit     equ 0   ;First free block goes to application
   253                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   254                              <1> memLastFit      equ 2   ;Last free block goes to application
   255                              <1> 
   256                              <1> ;Owner = Para aligned address => Owning application PSP
   257                              <1> ;...To consider...
   258                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   259                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   260                              <1> ;------------------------------------------------------------------------;
   261                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   262                              <1> ; following order, thus allowing for return values to be placed in the 
   263                              <1> ; registers by accessing the caller register stack frame.
   264                              <1> ;------------------------------------------------------------------------;
   265                              <1> struc callerFrame
   266 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   267 00000008 ????????????????    <1>     .rbx    resq 1    
   268 00000010 ????????????????    <1>     .rcx    resq 1
   269 00000018 ????????????????    <1>     .rdx    resq 1
   270 00000020 ????????????????    <1>     .rsi    resq 1
   271 00000028 ????????????????    <1>     .rdi    resq 1
   272 00000030 ????????????????    <1>     .rbp    resq 1
   273 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   274 00000040 ????????????????    <1>     .r9     resq 1
   275                              <1> ;Pushed by Processor when invoked via Interrupt
   276 00000048 ????????????????    <1>     .rip    resq 1
   277 00000050 ????????????????    <1>     .cs     resq 1
   278 00000058 ????????????????    <1>     .flags  resq 1
   279                              <1> endstruc
   280                              <1> 
   281                              <1> struc dpl
   282                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   283                              <1> ; server calls
   284 00000000 ????????????????    <1>     .rax    resq 1
   285 00000008 ????????????????    <1>     .rbx    resq 1
   286 00000010 ????????????????    <1>     .rcx    resq 1
   287 00000018 ????????????????    <1>     .rdx    resq 1
   288 00000020 ????????????????    <1>     .rsi    resq 1
   289 00000028 ????????????????    <1>     .rdi    resq 1
   290 00000030 ????????????????    <1>     .r8     resq 1
   291 00000038 ????????????????    <1>     .r9     resq 1
   292 00000040 ????????????????    <1>     .align  resq 1
   293 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   294 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   295                              <1> endstruc
   296                              <1> 
   297                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   298 00000000 ????????????????    <1>     .oldRBP         resq 1  
   299 00000008 ??                  <1>     .newBuffers     resb 1  ;New buffers value
   300 00000009 ??                  <1>     .newSFTVal      resb 1
   301 0000000A ??                  <1>     .newFCBSVal     resb 1
   302 0000000B ??                  <1>     .newProtFCBSVal resb 1  ;Number of protected FCBS
   303 0000000C ??                  <1>     .newLastdrive   resb 1
   304 0000000D ??                  <1>     .newStacks      resb 1  ;Ignored for now
   305 0000000E ????                <1>     .newStackSize   resb 2  ;Ignored for now
   306 00000010 ????????            <1>     .newAllocSize   resd 1  ;Used to keep track of reallocation size
   307 00000014 ????????            <1>                     resd 1  ;Alignment byte
   308 00000018 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc fcb
   312                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   313 00000000 ??                  <1>     .driveNum   resb 1
   314 00000001 ????????????????    <1>     .filename   resb 8
   315 00000009 ??????              <1>     .fileext    resb 3
   316 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   317                              <1> ;One block consists of 128 records, of size denoted in the below
   318 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   319 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   320 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   321 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   322 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   323 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   324 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   325 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   326 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   327                              <1>     ;If record size > 64, high byte is ignored.
   328                              <1>     ;Used for random read and write operations to find the right record
   329                              <1> endstruc
   330                              <1> 
   331                              <1> struc filename
   332                              <1> ;8.3 File name struct
   333 00000000 ????????????????    <1>     .fName  resb 8
   334 00000008 ??????              <1>     .fExt   resb 3
   335                              <1> endstruc
   336                              <1> 
   337                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   338 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   339 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   340 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   341 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   342 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   343 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   344 00000016 ????                <1>     .fileTime   resw 1  ;File time
   345 00000018 ????                <1>     .fileDate   resw 1  ;File date
   346 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   347 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   348                              <1> endstruc
   349                              <1> 
   350                              <1> struc psp
   351 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   352 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   353 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   354 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   355 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   356 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   357 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   358 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   359 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   360 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   361 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   362 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   363 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   364 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   365                              <1> ;Extra handle arrays are grouped into a linked list
   366                              <1> ;The below are in the same place as in DOS
   367 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   368 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   369                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   370 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   371 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   372                              <1> endstruc
   373                              <1> 
   374                              <1> struc clkStruc
   375 00000000 ????                <1>     .dateWord   resw 1
   376 00000002 ??                  <1>     .minutes    resb 1
   377 00000003 ??                  <1>     .hours      resb 1
   378 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   379 00000005 ??                  <1>     .seconds    resb 1
   380                              <1> endstruc
   381                              <1> 
   382                              <1> struc countryStruc
   383 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   384                              <1>                         ;0 = month day year hh:mm:ss
   385                              <1>                         ;1 = day month year hh:mm:ss
   386                              <1>                         ;2 = year month day hh:mm:ss
   387 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   388 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   389 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   390 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   391 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   392 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   393                              <1>                         ;0 = Symbol leads, without space
   394                              <1>                         ;1 = Symbol follows, without space
   395                              <1>                         ;2 = Symbol leads, one space
   396                              <1>                         ;3 = Symbol follows, one space
   397                              <1>                         ;4 = Symbol replace decimal separator
   398 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   399 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   400 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   401 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   402 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   403                              <1> endstruc
   404                              <1> 
   405                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   406                              <1> ;for a space of 64Gb
   407                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   408                              <1> dosLowBase  equ 600h    ;Low load address
   409                              <1> 
   410                              <1> ;Critical Error AH bitfield equates
   411                              <1> critRead    equ 0h
   412                              <1> critWrite   equ 1h
   413                              <1> critDOS     equ 0h
   414                              <1> critFAT     equ 2h
   415                              <1> critDir     equ 4h
   416                              <1> critData    equ 6h
   417                              <1> critFailOK  equ 8h
   418                              <1> critRetryOK equ 10h
   419                              <1> critIgnorOK equ 20h
   420                              <1> critCharDev equ 80h
   421                              <1> 
   422                              <1> critIgnore  equ 0
   423                              <1> critRetry   equ 1
   424                              <1> critAbort   equ 2
   425                              <1> critFail    equ 3
   426                              <1> 
   427                              <1> ;MISC ASCII control chars
   428                              <1> NUL equ 00h ;^@         | ASCII Null
   429                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   430                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   431                              <1> BEL equ 07h ;^G         | ASCII Bell
   432                              <1> BSP equ 08h ;^H         | ASCII Backspace
   433                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   434                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   435                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   436                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   437                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   438                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   439                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   440                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   441                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   442                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   443                              <1> SPC equ 20h ;Printable  | ASCII Space
   444                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   445                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   446                              <1> 
   447                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   448                              <1> ;Extended Ascii Codes
   449                              <1> eF1     equ 3Bh ;F1 second byte
   450                              <1> eF2     equ 3Ch ;F2 second byte
   451                              <1> eF3     equ 3Dh ;F3 second byte
   452                              <1> eF4     equ 3Eh ;F4 second byte
   453                              <1> eF5     equ 3Fh ;F5 second byte
   454                              <1> eF6     equ 40h ;F6 second byte
   455                              <1> eF7     equ 41h ;F7 second byte
   456                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   457                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   458                              <1> eIns    equ 52h ;Insert second byte
   459                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   460                              <1> 
   461                              <1> ;Default Configuration for the system
   462                              <1> 
   463                              <1> buffersDefault  equ 30
   464                              <1> filesDefault    equ 20
   465                              <1> fcbsDefault     equ 4
   466                              <1> safeFcbsDeflt   equ 0
   467                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Source/Include/dosError.inc"
     9                              <1> ;DOS Error codes
    10                              <1> 
    11                              <1> ;Extended Error Codes
    12                              <1> errInvFnc   equ 1   ;Invalid function number
    13                              <1> errFnf      equ 2   ;File not found
    14                              <1> errPnf      equ 3   ;Path not found
    15                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    16                              <1> errAccDen   equ 5   ;Access denied (to resource)
    17                              <1> errBadHdl   equ 6   ;Invalid handle
    18                              <1> errMCBbad   equ 7   ;MCB's destroyed
    19                              <1> errNoMem    equ 8   ;Insufficient memory
    20                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    21                              <1> errBadEnv   equ 10  ;Invalid environment
    22                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    23                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    24                              <1> errInvDat   equ 13  ;Invalid data
    25                              <1> ;           equ 14  ;Reserved
    26                              <1> errBadDrv   equ 15  ;Invalid drive specified
    27                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    28                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    29                              <1> errNoFil    equ 18  ;No more files
    30                              <1> ;The following are Driver error codes + 19
    31                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    32                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    33                              <1> errUnkUnt   equ 20  ;Unknown Unit
    34                              <1> errDrvNR    equ 21  ;Drive not ready
    35                              <1> errUnkCmd   equ 22  ;Unknown Command
    36                              <1> errCRCerr   equ 23  ;Data (CRC) error
    37                              <1> errBadRLn   equ 24  ;Bad request structure length
    38                              <1> errSekErr   equ 25  ;Seek error
    39                              <1> errUnkMed   equ 26  ;Unknown media type
    40                              <1> errSecNF    equ 27  ;Sector not Found
    41                              <1> errNoPap    equ 28  ;Printer out of paper
    42                              <1> errWF       equ 29  ;Write fault
    43                              <1> errRF       equ 30  ;Read fault
    44                              <1> errGF       equ 31  ;General fault
    45                              <1> ;----------------------------------------------
    46                              <1> ;The following two go inbetween the Disk errors
    47                              <1> errShrVio   equ 32  ;Sharing violations
    48                              <1> errLokVio   equ 33  ;File Lock violation
    49                              <1> ;----------------------------------------------
    50                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    51                              <1> errNoFCB    equ 35  ;FCB unavailable
    52                              <1> errShrFul   equ 36  ;Sharing buffer full
    53                              <1> 
    54                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    55                              <1> 
    56                              <1> errFilExist equ 80  ;File already exists
    57                              <1> errDirExist equ 82  ;Directory already exists
    58                              <1> errFI44     equ 83  ;Fail on INT 44h
    59                              <1> errRedir    equ 84  ;Too many levels of redirection
    60                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    61                              <1> errBadPass  equ 86  ;Bad password
    62                              <1> errBadParam equ 87  ;Bad parameter passed to request
    63                              <1> errNetWrite equ 88  ;Network Write Fault
    64                              <1> ;-----------------------------------------------------------------------------
    65                              <1> ;Error Loci
    66                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    67                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    68                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    69                              <1> eLocChr     equ 4   ;Serial/Character Device error
    70                              <1> eLocMem     equ 5   ;Related to RAM
    71                              <1> ;-----------------------------------------------------------------------------
    72                              <1> ;Error Actions
    73                              <1> eActRet     equ 1   ;Retry
    74                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    75                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    76                              <1> eActAbt     equ 4   ;Abort with cleanup
    77                              <1> eActKil     equ 5   ;Abort without cleanup
    78                              <1> eActIgn     equ 6   ;Ignore error
    79                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    80                              <1> ;-----------------------------------------------------------------------------
    81                              <1> ;Error classes
    82                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    83                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    84                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    85                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    86                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    87                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    88                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    89                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    90                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    91                              <1> eClsLocked  equ 10  ;Resource Locked
    92                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    93                              <1> eClsClash   equ 12  ;Resource already exists!
    94                              <1> eClsUnk     equ 13  ;Unknown class
     9                                  %include "./Source/Utils/COMMAND/Data/cmdEqu.asm"
    10                              <1> ;Data equates and struct declarations
    11                              <1> 
    12                              <1> cmdBufferL  equ 128 ;Length of a command line buffer
    13                              <1> driveSpecL  equ 2   ;Space for X:
    14                              <1> dirPathL    equ 64  ;Length of a directory path
    15                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
    16                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
    17                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
    18                              <1> fullDirPathL equ driveSpecL + dirPathL
    19                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    20                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    21                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    22                              <1> 
    23                              <1> ;Use PSP FCB's for switch buffers
    24                              <1> fcb1        equ psp.fcb1
    25                              <1> fcb2        equ psp.fcb2
    26                              <1> ;Use the dta as the built command line buffer.
    27                              <1> cmdLineCnt  equ psp.parmList
    28                              <1> cmdLine     equ psp.progTail
    29                              <1> 
    30                              <1> 
    31                              <1> ;Struct Declarations
    32                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    33 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    34 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    35 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    36 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    37 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    38                              <1> endstruc
    39                              <1> 
    40                              <1> struc execProg  ;For use with EXEC-ing a child task
    41 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    42 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    43 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    44 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    45                              <1> endstruc
    46                              <1> 
    47                              <1> ;Directory attribute equates
    48                              <1>     dirReadOnly     equ 01h
    49                              <1>     dirHidden       equ 02h
    50                              <1>     dirSystem       equ 04h
    51                              <1>     dirVolumeID     equ 08h
    52                              <1>     dirDirectory    equ 10h
    53                              <1>     dirArchive      equ 20h
    54                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    55                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    56                              <1>     ;If any of the three bits are set, then ALL three bits are set
    57                              <1>     ; in addition to whatever the user passed to search for.
    58                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    59                              <1>     dirIncFiles     equ dirHidden | dirSystem
    10                                  Segment .data align=1 
    11                                  %include "./Source/Utils/COMMAND/Data/cmdData.asm"
    12                              <1> ;Static Data Area for COMMAND.COM    
    13                              <1> startLbl:   ;Start symbol, this is the entry point
    14 00000000 E96D1E0000          <1>     jmp cmdLdr
    15 00000005 0000000000000000    <1> stackBottom dq 0    ;Pointer to the top of the stack as allocated by DOS
    16 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
    17 0000000F FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
    18 00000017 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
    19 0000001F 1400                <1> numHdls     dw 20   ;Get number of handles permitted, hardcoded in this version
    20 00000021 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    21 00000023 5C                  <1> pathSep     db "\"  ;Default path sep
    22 00000024 2F                  <1> switchChar  db "/"  ;Default switch char
    23                              <1> ;Static strings, not used in command line parsing
    24 00000025 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    24 0000002E 000000000000000000- <1>
    24 00000037 000000000000000000- <1>
    24 00000040 000000000000000000- <1>
    24 00000049 0000                <1>
    25 0000004B 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    25 00000054 000000000000000000- <1>
    25 0000005D 000000000000000000- <1>
    25 00000066 000000000000000000- <1>
    25 0000006F 000000000000000000- <1>
    25 00000078 000000000000000000- <1>
    25 00000081 000000000000000000- <1>
    25 0000008A 00000000            <1>
    26                              <1> 
    27                              <1> 
    28                              <1> cmdLineStatePtr:
    29 0000008E 00                  <1> cmdStartOff db 0    ;Offset to the first char for this command (may be a space)
    30 0000008F 00                  <1> cmdEndOff   db 0    ;Offset to the terminating char for this command (0Dh or |)
    31 00000090 00                  <1> pipeFlag    db 0    ;If set, we are piping across a command
    32 00000091 0000                <1> pipeHndl    dw 0    ;If pipeFlag set, this var has the handle to the pipe file
    33 00000093 202020202020202020- <1> pipeName    db 11 dup (" ") ;Name of the pipe file we created
    33 0000009C 2020                <1>
    34                              <1> 
    35                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    36                              <1> ;These variables are valid for a SINGLE command in a command line
    37 0000009E 0000                <1> cmdDrvSpec  dw 0    ;Read the first word in to see if the pathspec has drivespec
    38 000000A0 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    39 000000A1 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    40                              <1> ;                    If 2, we are redirecting output to a file, by appending
    41                              <1> ;FLG and SWCH are read as a word when checking if argX is a switch
    42 000000A2 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    43 000000A3 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    44 000000A4 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    45                              <1> 
    46 000000A5 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    47 000000A6 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    48 000000A7 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    49                              <1> 
    50                              <1> cmdStateL equ $ - cmdStatePtr
    51                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    52                              <1> 
    53                              <1> ;Structs and strings
    54                              <1> 
    55 000000A8 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    55 000000B1 00000000000000      <1>
    56 000000B8 2B                  <1> cmdFFBlock  db ffBlock_size ;Internal Find First Block to use as default DTA
    57                              <1> 
    58 000000B9 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    58 000000C2 000000000000000000- <1>
    58 000000CB 000000000000000000- <1>
    58 000000D4 000000000000000000- <1>
    58 000000DD 000000000000000000- <1>
    58 000000E6 000000000000000000- <1>
    58 000000EF 000000000000000000- <1>
    58 000000F8 000000000000000000- <1>
    58 00000101 000000000000000000- <1>
    58 0000010A 000000000000000000- <1>
    58 00000113 000000000000000000- <1>
    58 0000011C 000000000000000000- <1>
    58 00000125 000000000000000000- <1>
    58 0000012E 000000000000000000- <1>
    58 00000137 0000                <1>
    59 00000139 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    59 00000142 000000000000000000- <1>
    59 0000014B 000000000000000000- <1>
    59 00000154 000000000000000000- <1>
    59 0000015D 000000000000000000- <1>
    59 00000166 000000000000000000- <1>
    59 0000016F 000000000000000000- <1>
    59 00000178 000000000000000000- <1>
    59 00000181 000000000000000000- <1>
    59 0000018A 000000000000000000- <1>
    59 00000193 000000000000000000- <1>
    59 0000019C 000000000000000000- <1>
    59 000001A5 000000000000000000- <1>
    59 000001AE 000000000000000000- <1>
    59 000001B7 0000                <1>
    60 000001B9 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)  ;Space for full path to a external command
    60 000001C2 000000000000000000- <1>
    60 000001CB 000000000000000000- <1>
    60 000001D4 000000000000000000- <1>
    60 000001DD 000000000000000000- <1>
    60 000001E6 000000000000000000- <1>
    60 000001EF 000000000000000000- <1>
    60 000001F8 000000000000000000- <1>
    60 00000201 00000000000000      <1>
    61                              <1> 
    62 00000208 000000000000000000- <1> fcbCmdSpec  db fcbNameL dup (0) ;Used to make a FCB style name for the file
    62 00000211 0000                <1>
    63 00000213 000000000000000000- <1> cmdSpec     db fileNameZL dup (0)   ;ASCIIZ command spec for the command name
    63 0000021C 00000000            <1>
    64 00000220 000000000000000000- <1> cmdName     db cmdNameL dup (0) ;Command name string prefixed by length of word
    64 00000229 0000000000          <1>
    65                              <1> 
    66 0000022E 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    66 00000237 000000000000000000- <1>
    66 00000240 000000000000000000- <1>
    66 00000249 000000000000000000- <1>
    66 00000252 000000000000000000- <1>
    66 0000025B 000000000000000000- <1>
    66 00000264 000000000000000000- <1>
    66 0000026D 000000000000000000- <1>
    66 00000276 00000000000000      <1>
    67 0000027D 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    67 00000286 000000000000000000- <1>
    67 0000028F 000000000000000000- <1>
    67 00000298 000000000000000000- <1>
    67 000002A1 000000000000000000- <1>
    67 000002AA 000000000000000000- <1>
    67 000002B3 000000000000000000- <1>
    67 000002BC 000000000000000000- <1>
    67 000002C5 00000000000000      <1>
    68                              <1> 
    69 000002CC 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Contains the pathspec for the search file
    69 000002D5 000000000000000000- <1>
    69 000002DE 000000000000000000- <1>
    69 000002E7 000000000000000000- <1>
    69 000002F0 000000000000000000- <1>
    69 000002F9 000000000000000000- <1>
    69 00000302 000000000000000000- <1>
    69 0000030B 000000000000000000- <1>
    69 00000314 000000000000000000- <1>
    69 0000031D 000000000000000000- <1>
    69 00000326 000000000000000000- <1>
    69 0000032F 000000000000000000- <1>
    69 00000338 000000000000000000- <1>
    69 00000341 000000000000000000- <1>
    69 0000034A 0000                <1>
    70                              <1> ;The above is larger than is needed/supported by DOS to allow for 
    71                              <1> ; users overtyping
    72                              <1> 
    73                              <1> ;Internal Function vars
    74 0000034C 00                  <1> dirPrnType  db 0    ;Print type.    Bit[0] set => /W or /w specified
    75                              <1> ;                                   Bit[1] set => /P or /p specified
    76 0000034D 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    77 0000034E 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    78 0000034F 00                  <1> dirPathOff  db 0
    79 00000350 000000000000000000- <1> dirVolLbl   db 13 dup (0)
    79 00000359 00000000            <1>
    80 0000035D 0000000000000000    <1> dirVolPathBuf db 8 dup (0)  ;Used to build X:\*.*,0 for volume label search
    81 00000365 00                  <1> dirDrv      db 0    ;0 based drive number to use
    82                              <1> 
    83 00000366 00                  <1> td1 db 0    ;Minutes/Year
    84 00000367 00                  <1> td2 db 0    ;Hours/Zero
    85 00000368 00                  <1> td3 db 0    ;Hundredths/Day
    86 00000369 00                  <1> td4 db 0    ;Seconds/Month
    12                                  %include "./Source/Utils/COMMAND/Data/cmdTable.asm"
    13                              <1> ;Function dispatch table
    14                              <1> functionTable:
    15                              <1> ;Use Pascal strings with each row of hte table having three columns:
    16                              <1> ; Col 1, BYTE, Length of command
    17                              <1> ; Col 2, String, String representing the user input
    18                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
    19 0000036A 03444952            <1>     db 3, "DIR"
    20 0000036E 660D                <1>     dw dir - startLbl
    21                              <1> 
    22 00000370 024344              <1>     db 2, "CD"
    23 00000373 5811                <1>     dw chdir - startLbl
    24                              <1> 
    25 00000375 054348444952        <1>     db 5, "CHDIR"
    26 0000037B 5811                <1>     dw chdir - startLbl
    27                              <1> 
    28 0000037D 024D44              <1>     db 2, "MD"
    29 00000380 1212                <1>     dw mkdir - startLbl
    30                              <1> 
    31 00000382 054D4B444952        <1>     db 5, "MKDIR"
    32 00000388 1212                <1>     dw mkdir - startLbl
    33                              <1> 
    34 0000038A 025244              <1>     db 2, "RD"
    35 0000038D 7712                <1>     dw rmdir - startLbl
    36                              <1> 
    37 0000038F 05524D444952        <1>     db 5, "RMDIR"
    38 00000395 7712                <1>     dw rmdir - startLbl
    39                              <1> 
    40 00000397 0344454C            <1>     db 3, "DEL"
    41 0000039B DD12                <1>     dw erase - startLbl
    42                              <1> 
    43 0000039D 054552415345        <1>     db 5, "ERASE"
    44 000003A3 DD12                <1>     dw erase - startLbl
    45                              <1> 
    46 000003A5 0444415445          <1>     db 4, "DATE"
    47 000003AA DE12                <1>     dw date - startLbl
    48                              <1> 
    49 000003AC 0454494D45          <1>     db 4, "TIME"
    50 000003B1 A413                <1>     dw time - startLbl
    51                              <1> 
    52 000003B3 04434F5059          <1>     db 4, "COPY"
    53 000003B8 DC12                <1>     dw copy - startLbl
    54                              <1> 
    55 000003BA 0443545459          <1>     db 4, "CTTY"
    56 000003BF 3F14                <1>     dw ctty - startLbl
    57                              <1> 
    58 000003C1 03434C53            <1>     db 3, "CLS"
    59 000003C5 4014                <1>     dw cls - startLbl
    60                              <1> 
    61 000003C7 05425245414B        <1>     db 5, "BREAK"
    62 000003CD B214                <1>     dw break - startLbl
    63                              <1> 
    64 000003CF 06564552494659      <1>     db 6, "VERIFY"
    65 000003D6 3315                <1>     dw verify - startLbl
    66                              <1> 
    67 000003D8 0652454E414D45      <1>     db 6, "RENAME"
    68 000003DF B015                <1>     dw rename - startLbl
    69                              <1> 
    70 000003E1 08545255454E414D45  <1>     db 8, "TRUENAME"
    71 000003EA B115                <1>     dw truename - startLbl
    72                              <1> 
    73 000003EC 03564552            <1>     db 3, "VER"
    74 000003F0 EF15                <1>     dw version - startLbl
    75                              <1> 
    76 000003F2 FF                  <1>     db -1   ;End of table
    13                                  %include "./Source/Utils/COMMAND/Data/cmdMsg.asm"
    14                              <1> ;COMMAND.COM Messages and strings
    15 000003F3 0D0A24              <1> crlf    db  CR,LF,"$"
    16 000003F6 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
    16 000003FF 696C65206D69737369- <1>
    16 00000408 6E670D0A24          <1>
    17 0000040D 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
    17 00000416 6469736B2077697468- <1>
    17 0000041F 206261746368206669- <1>
    17 00000428 6C65                <1>
    18 0000042A 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
    18 00000433 737320616E79206B65- <1>
    18 0000043C 79207768656E207265- <1>
    18 00000445 6164790D0A24        <1>
    19 0000044B 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
    19 00000454 6E64206F722066696C- <1>
    19 0000045D 65206E616D650D0A24  <1>
    20 00000466 4475706C6963617465- <1> dupName db  "Duplicate file name or "
    20 0000046F 2066696C65206E616D- <1>
    20 00000478 65206F7220          <1>
    21 0000047D 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    21 00000486 666F756E640D0A24    <1>
    22 0000048E 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    22 00000497 656E74206469736B20- <1>
    22 000004A0 73706163650D0A24    <1>
    23 000004A8 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    23 000004B1 7669726F6E6D656E74- <1>
    23 000004BA 2073706163650D0A24  <1>
    24 000004C3 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    24 000004CC 74696F6E206572726F- <1>
    24 000004D5 720D0A24            <1>
    25 000004D9 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    25 000004E2 6F7420626520636F70- <1>
    25 000004EB 696564206F6E746F20- <1>
    25 000004F4 697473656C660D0A24  <1>
    26 000004FD 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    26 00000506 662064657374696E61- <1>
    26 0000050F 74696F6E206C6F7374- <1>
    26 00000518 206265666F72652063- <1>
    26 00000521 6F70790D0A24        <1>
    27                              <1> ;Copy end message. First write # files copied then this message 
    28 00000527 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    28 00000530 636F706965640D0A24  <1>
    29                              <1> ;Dir end1 msg. First write # files in dir then this
    30 00000539 2046696C6528732920- <1> dirOk   db  " File(s) $"
    30 00000542 24                  <1>
    31                              <1> ;Dir end2 msg. First write # bytes free then this message
    32 00000543 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    32 0000054C 65650D0A24          <1>
    33 00000551 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    34                              <1> 
    35 0000055A 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    35 00000563 726976652073706563- <1>
    35 0000056C 696669636174696F6E- <1>
    35 00000575 0D0A24              <1>
    36 00000578 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    36 00000581 6B6579207768656E20- <1>
    36 0000058A 7265616479202E202E- <1>
    36 00000593 202E2024            <1>
    37 00000597 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    37 000005A0 6172616D657465720D- <1>
    37 000005A9 0A24                <1>
    38                              <1> 
    39 000005AB 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    39 000005B4 576564546875467269- <1>
    39 000005BD 536174              <1>
    40 000005C0 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    40 000005C9 206461746524        <1>
    41 000005CF 43757272656E742064- <1> curDate db  "Current date is $"
    41 000005D8 6174652069732024    <1>
    42 000005E0 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    42 000005E9 657720646174652024  <1>
    43 000005F2 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    43 000005FB 293A2024            <1>
    44 000005FF 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    44 00000608 293A2024            <1>
    45 0000060C 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    45 00000615 293A2024            <1>
    46 00000619 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    46 00000622 2074696D6524        <1>
    47 00000628 43757272656E742074- <1> curTime db  "Current time is $"
    47 00000631 696D652069732024    <1>
    48 00000639 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    48 00000642 65772074696D653A20- <1>
    48 0000064B 24                  <1>
    49                              <1> 
    50 0000064C 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    50 00000655 7572652028592F4E29- <1>
    50 0000065E 3F2024              <1>
    51                              <1> 
    52 00000661 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    52 0000066A 56657273696F6E2024  <1>
    53                              <1> 
    54 00000673 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    54 0000067C 6E2064726976652024  <1>
    55 00000685 2069732024          <1> volOk   db " is $"
    56 0000068A 20686173206E6F206C- <1> volNo   db " has no label$"
    56 00000693 6162656C24          <1>
    57                              <1> 
    58 00000698 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    58 000006A1 69726563746F72790D- <1>
    58 000006AA 0A24                <1>
    59 000006AC 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    59 000006B5 206372656174652064- <1>
    59 000006BE 69726563746F72790D- <1>
    59 000006C7 0A24                <1>
    60 000006C9 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    60 000006D2 6174682C206E6F7420- <1>
    60 000006DB 6469726563746F7279- <1>
    60 000006E4 2C0D0A              <1>
    61 000006E7 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    61 000006F0 6F7279206E6F742065- <1>
    61 000006F9 6D7074790D0A24      <1>
    62 00000700 204469726563746F72- <1> dirMain db " Directory of  $"
    62 00000709 79206F66202024      <1>
    63 00000710 4E6F20506174682024  <1> noPath  db "No Path $"
    64 00000719 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    64 00000722 7269766520696E2073- <1>
    64 0000072B 656172636820706174- <1>
    64 00000734 680D0A24            <1>
    65 00000738 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    65 00000741 65766963650D0A24    <1>
    66 00000749 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    66 00000752 20666F756E640D0A24  <1>
    67 0000075B 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    67 00000764 726F720D0A24        <1>
    68 0000076A 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    68 00000773 6F74206265206E6573- <1>
    68 0000077C 7465640D0A24        <1>
    69 00000782 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    69 0000078B 6174652066696C6520- <1>
    69 00000794 6572726F7220647572- <1>
    69 0000079D 696E6720706970650D- <1>
    69 000007A6 0A24                <1>
    70 000007A8 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    70 000007B1 2062696E6172792072- <1>
    70 000007BA 656164732066726F6D- <1>
    70 000007C3 206120646576696365- <1>
    70 000007CC 0D0A24              <1>
    71 000007CF 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    72 000007D5 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    73 000007DA 425245414B20697320- <1> breakIs db "BREAK is $"
    73 000007E3 24                  <1>
    74 000007E4 564552494659206973- <1> verifyIs    db "VERIFY is $"
    74 000007ED 2024                <1>
    75 000007EF 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    76 000007F8 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    76 00000801 617468206F72206669- <1>
    76 0000080A 6C65206E616D650D0A- <1>
    76 00000813 24                  <1>
    77 00000814 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    77 0000081D 756D626572206F6620- <1>
    77 00000826 706172616D65746572- <1>
    77 0000082F 730D0A24            <1>
    78 00000833 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    78 0000083C 74696E6720746F2064- <1>
    78 00000845 6576696365          <1>
    79 0000084A 08200800            <1> backSpace   db BSP," ",BSP,NUL
    80                              <1> 
    81 0000084E 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    82 00000852 2020202024          <1> fourSpc  db "    $"
    83 00000857 20202024            <1> threeSpc db "   $"
    84 0000085B 202024              <1> twoSpc   db "  $"
    85                              <1> 
    86 0000085E 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    86 00000867 696679204F4E206F72- <1>
    86 00000870 204F46460D0A24      <1>
    87 00000877 504154483D          <1> pathEVar db "PATH="
    88 0000087C 50524F4D50543D      <1> promptEVar  db "PROMPT="
    14                                  %include "./Source/Utils/COMMAND/Source/cmdMain.asm"
    15                              <1> commandStart:
    16                              <1>     ;Resize Allocation, jump here with endpointer in rbx
    17                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
    18                              <1>     ; that the jump to safety won't be gobbled up when multitasking
    19 00000883 49F7D8              <1>     neg r8  ;Convert r8 to -r8
    20 00000886 4A8D5C0311          <1>     lea rbx, qword [rbx + r8 + 11h]    ;Get # of bytes for COMMAND.COM
    21 0000088B C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
    22 0000088E B44A                <1>     mov ah, 4Ah ;Realloc
    23 00000890 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    24 00000893 CD41                <1>     int 41h
    25 00000895 EB5A                <1>     jmp short commandMain
    26                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    27 00000897 B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    28 0000089C CD41                <1>     int 41h
    29 0000089E 66890568F7FFFF      <1>     mov word [returnCode], ax
    30                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    31 000008A5 488D1508130000      <1>     lea rdx, critErrorHandler
    32 000008AC 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    33 000008B0 B844250000          <1>     mov eax, 2544h
    34 000008B5 CD41                <1>     int 41h
    35 000008B7 488D1586150000      <1>     lea rdx, int43h
    36 000008BE 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    37 000008C2 B843250000          <1>     mov eax, 2543h
    38 000008C7 CD41                <1>     int 41h
    39 000008C9 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    40 000008D0 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    41 000008D4 B842250000          <1>     mov eax, 2542h
    42 000008D9 CD41                <1>     int 41h
    43                              <1> ;Close all handles from 5->MAX
    44 000008DB 0FB70D3DF7FFFF      <1>     movzx ecx, word [numHdls]
    45 000008E2 BB05000000          <1>     mov ebx, 5
    46                              <1> .handleClose:
    47 000008E7 B43E                <1>     mov ah, 3Eh ;File close
    48 000008E9 CD41                <1>     int 41h
    49 000008EB FFC3                <1>     inc ebx ;Goto next file
    50 000008ED 39CB                <1>     cmp ebx, ecx
    51 000008EF 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    52                              <1> commandMain:
    53                              <1> ;Setup Commandline
    54 000008F1 FA                  <1>     cli
    55 000008F2 488B250CF7FFFF      <1>     mov rsp, qword [stackBottom]    ;Reset internal stack pointer pos
    56 000008F9 FB                  <1>     sti
    57 000008FA FC                  <1>     cld ;Ensure stringops are done the right way
    58 000008FB C605B7F7FFFF80      <1>     mov byte [inBuffer], 80h    ;Reset the buffer length
    59                              <1> .inputMain:
    60 00000902 E89B100000          <1>     call clearCommandLineState
    61 00000907 E8220D0000          <1>     call printCRLF
    62 0000090C E869100000          <1>     call printPrompt
    63                              <1> 
    64 00000911 488D15A1F7FFFF      <1>     lea rdx, inBuffer
    65 00000918 B80A0C0000          <1>     mov eax, 0C0Ah  ;Do Buffered input
    66 0000091D CD41                <1>     int 41h
    67 0000091F E80A0D0000          <1>     call printCRLF  ;Note we have accepted input
    68                              <1> 
    69                              <1> ;First check we had something typed in of length greater than 1
    70                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    71 00000924 803D8FF7FFFF01      <1>     cmp byte [inBuffer + 1], 1  ;Check input length valid
    72 0000092B 762A                <1>     jbe .dfltErrExit
    73                              <1>     ;Copy over the input text
    74 0000092D 488D3585F7FFFF      <1>     lea rsi, inBuffer
    75 00000934 488D3DFEF7FFFF      <1>     lea rdi, cmdBuffer
    76 0000093B B980000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    77 00000940 F3A4                <1>     rep movsb
    78 00000942 31C0                <1>     xor eax, eax
    79 00000944 66890543F7FFFF      <1>     mov word [cmdStartOff], ax  ;Clear start and end Off positions
    80 0000094B E814000000          <1>     call parseInput
    81 00000950 E8AD010000          <1>     call doCommandLine
    82 00000955 EBAB                <1>     jmp short .inputMain
    83                              <1> .dfltErrExit:
    84 00000957 488D15EDFAFFFF      <1>     lea rdx, badCmd
    85 0000095E B409                <1>     mov ah, 09h
    86 00000960 CD41                <1>     int 41h
    87 00000962 EB9E                <1>     jmp short .inputMain
    88                              <1> 
    89                              <1> parseInput:
    90                              <1> ;EndOff is set up before entering this part
    91                              <1> ;Copies a nicely formatted version of the input command line
    92                              <1> ; without any redirections to psp.dta
    93 00000964 488D35D0F7FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
    94 0000096B 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
    95 00000972 0FB61D16F7FFFF      <1>     movzx ebx, byte [cmdEndOff] ;Get the old end offset
    96 00000979 4801DE              <1>     add rsi, rbx    ;Move rsi to the start of this new command
    97 0000097C E8EA0F0000          <1>     call skipSpaces ;Skip any preceeding spaces
    98 00000981 66AD                <1>     lodsw   ;Get the first two chars into ax
    99 00000983 66890514F7FFFF      <1>     mov word [cmdDrvSpec], ax ;Store these chars as if they are the drvspec
   100 0000098A 4881EE02000000      <1>     sub rsi, 2  ;Go back to the start of the command
   101 00000991 56                  <1>     push rsi
   102 00000992 57                  <1>     push rdi
   103 00000993 488D3D1FF8FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   104 0000099A 57                  <1>     push rdi
   105 0000099B E868030000          <1>     call copyCommandTailItem
   106 000009A0 5F                  <1>     pop rdi
   107 000009A1 9C                  <1>     pushfq  ;Save the CF state
   108 000009A2 E84C0F0000          <1>     call strlen
   109 000009A7 FFC9                <1>     dec ecx ;Drop the terminating char from the count
   110 000009A9 58                  <1>     pop rax ;Get the CF state in al
   111 000009AA 5F                  <1>     pop rdi
   112 000009AB 5E                  <1>     pop rsi
   113 000009AC F3A4                <1>     rep movsb   ;Now we copy the command into the psp command line
   114 000009AE A801                <1>     test al, 1  ;Was CF set?
   115 000009B0 0F8586000000        <1>     jnz .exit   ;If an embedded CR was found in the filename, exit!
   116                              <1> .cmdLineProcess:
   117 000009B6 E8B00F0000          <1>     call skipSpaces ;Go to the next char in the input line
   118                              <1> .redirFound:
   119 000009BB AC                  <1>     lodsb   ;Get first non-space char (setupRedir skips spaces before ret)
   120 000009BC 3C0D                <1>     cmp al, CR  ;If this was a CR, we stop processing
   121 000009BE 747C                <1>     je .exit
   122 000009C0 E8D6020000          <1>     call checkAndSetupRedir ;If not, check if we have a redir element
   123 000009C5 7275                <1>     jc .exit    ;CF=CY only if pipe, which is equivalent to CR when processing
   124 000009C7 74F2                <1>     jz .redirFound  ;If we had a < > or >>, proceed to check if next char CR
   125 000009C9 B020                <1>     mov al, " "
   126 000009CB AA                  <1>     stosb   ;Store a space to make space for the command file parameter
   127 000009CC 48FFCE              <1>     dec rsi ;Move rsi back to the first char
   128 000009CF F605CCF6FFFFFF      <1>     test byte [arg1Flg], -1
   129 000009D6 7521                <1>     jnz .arg2
   130                              <1> .arg1:
   131 000009D8 C605C3F6FFFFFF      <1>     mov byte [arg1Flg], -1
   132 000009DF E8870F0000          <1>     call skipSpaces
   133 000009E4 4889F0              <1>     mov rax, rsi
   134 000009E7 488D1D4BF7FFFF      <1>     lea rbx, cmdBuffer
   135 000009EE 4829D8              <1>     sub rax, rbx
   136 000009F1 8805ACF6FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   137 000009F7 EB2A                <1>     jmp short .argCommon
   138                              <1> .arg2:
   139 000009F9 F605A5F6FFFFFF      <1>     test byte [arg2Flg], -1
   140 00000A00 7521                <1>     jnz .argCommon
   141 00000A02 C6059CF6FFFFFF      <1>     mov byte [arg2Flg], -1
   142 00000A09 E85D0F0000          <1>     call skipSpaces
   143 00000A0E 4889F0              <1>     mov rax, rsi
   144 00000A11 488D1D21F7FFFF      <1>     lea rbx, cmdBuffer
   145 00000A18 4829D8              <1>     sub rax, rbx
   146 00000A1B 880585F6FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   147 00000A21 EB00                <1>     jmp short .argCommon
   148                              <1> .argCommon:
   149                              <1>     ;More than two arguments? Do nothing more than just copy it
   150                              <1>     ; over. If we encounter an embedded CR, exit there too
   151 00000A23 E8430F0000          <1>     call skipSpaces
   152 00000A28 803E0D              <1>     cmp byte [rsi], CR  ;Are we at the end of the commandline?
   153 00000A2B 740F                <1>     je .exit
   154                              <1>     ;If not, we copy it over
   155 00000A2D E8D6020000          <1>     call copyCommandTailItem    ;Stores a terminating null we dont want
   156 00000A32 488D7FFF            <1>     lea rdi, qword [rdi - 1]    ;Point back at the inserted terminating null
   157 00000A36 0F837AFFFFFF        <1>     jnc .cmdLineProcess
   158                              <1> .exit:
   159 00000A3C 488D1DF6F6FFFF      <1>     lea rbx, cmdBuffer
   160 00000A43 48FFCE              <1>     dec rsi
   161 00000A46 4829DE              <1>     sub rsi, rbx    ;Get the offset into the command line
   162 00000A49 89F3                <1>     mov ebx, esi
   163 00000A4B 881D3EF6FFFF        <1>     mov byte [cmdEndOff], bl    ;Store the offset to the terminating char
   164 00000A51 B00D                <1>     mov al, CR
   165 00000A53 AA                  <1>     stosb   ;Store the terminating CR in the psp command line
   166                              <1>     ;Now compute the command line length 
   167 00000A54 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine] 
   168 00000A5B B00D                <1>     mov al, CR
   169 00000A5D 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   170 00000A5F FFC9                <1>     dec ecx ;rcx = -1
   171 00000A61 F2AE                <1>     repne scasb
   172 00000A63 F7D1                <1>     not ecx
   173 00000A65 FEC9                <1>     dec cl  ;Dont include terminating CR
   174 00000A67 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   175 00000A6E 880F                <1>     mov byte [rdi], cl
   176                              <1>     ;Before returning, we copy the command name to cmdName
   177 00000A70 488D3D42F7FFFF      <1>     lea rdi, cmdPathSpec
   178 00000A77 4889FB              <1>     mov rbx, rdi    ;Use rbx as the ptr to the first char in the commandspec
   179 00000A7A 30C0                <1>     xor al, al  ;Search for the terminating null
   180 00000A7C B94F000000          <1>     mov ecx, fileSpecZL ;Max number of chars the length could be
   181 00000A81 F2AE                <1>     repne scasb
   182 00000A83 48FFCF              <1>     dec rdi ;Go to the last char in the command
   183 00000A86 4889FE              <1>     mov rsi, rdi
   184 00000A89 FD                  <1>     std ;Now we go backwards to where rsi = rbx OR byte [rsi] = pathSep
   185                              <1> .keepSearching:
   186 00000A8A AC                  <1>     lodsb
   187 00000A8B 3A0592F5FFFF        <1>     cmp al, byte [pathSep]
   188 00000A91 740B                <1>     je .cmdStartFnd
   189 00000A93 4839DE              <1>     cmp rsi, rbx
   190 00000A96 75F2                <1>     jne .keepSearching
   191 00000A98 48FFCE              <1>     dec rsi ;Go back two to go forwards again
   192 00000A9B 48FFCE              <1>     dec rsi
   193                              <1> .cmdStartFnd:
   194 00000A9E 48FFC6              <1>     inc rsi
   195 00000AA1 48FFC6              <1>     inc rsi ;Go past the pathsep
   196 00000AA4 FC                  <1>     cld ;Go the sane way again
   197 00000AA5 488D3D75F7FFFF      <1>     lea rdi, qword [cmdName + 1]    ;First byte is for the length of the name
   198 00000AAC 57                  <1>     push rdi    ;Cleanse the field before usage (not strictly necessary)
   199 00000AAD B90E000000          <1>     mov ecx, cmdNameL
   200 00000AB2 30C0                <1>     xor al, al
   201 00000AB4 F3AA                <1>     rep stosb
   202 00000AB6 5F                  <1>     pop rdi
   203 00000AB7 31C9                <1>     xor ecx, ecx
   204 00000AB9 56                  <1>     push rsi    ;Save the location of the start byte of the command name
   205                              <1> .cmdGetChar:
   206 00000ABA AC                  <1>     lodsb
   207 00000ABB 84C0                <1>     test al, al ;Did we find the terminating null?
   208 00000ABD 7411                <1>     jz .nameLenFnd
   209 00000ABF 3C2E                <1>     cmp al, "." ;Extension sep also terminates
   210 00000AC1 740D                <1>     je .nameLenFnd
   211 00000AC3 24DF                <1>     and al, 0DFh    ;Else uppercase the char
   212 00000AC5 AA                  <1>     stosb   ;and store it
   213 00000AC6 FFC1                <1>     inc ecx
   214 00000AC8 81F90B000000        <1>     cmp ecx, 11 ;Max command length is 11
   215 00000ACE 72EA                <1>     jb .cmdGetChar
   216                              <1> .nameLenFnd:
   217 00000AD0 880D4AF7FFFF        <1>     mov byte [cmdName], cl  ;Store the name length now
   218                              <1>     ;Now finally, create a FCB filespec
   219 00000AD6 488D3D2BF7FFFF      <1>     lea rdi, fcbCmdSpec
   220 00000ADD 57                  <1>     push rdi
   221 00000ADE B90B000000          <1>     mov ecx, fcbNameL
   222 00000AE3 B020                <1>     mov al, " " ;Fill with spaces
   223 00000AE5 F3AA                <1>     rep stosb
   224 00000AE7 5F                  <1>     pop rdi
   225 00000AE8 5E                  <1>     pop rsi ;Get back the location of the start byte of the command name
   226 00000AE9 E8C50E0000          <1>     call asciiToFCB
   227 00000AEE 488D3513F7FFFF      <1>     lea rsi, fcbCmdSpec
   228 00000AF5 488D3D17F7FFFF      <1>     lea rdi, cmdSpec
   229 00000AFC E80D0F0000          <1>     call FCBToAsciiz
   230                              <1>     return
    19                              <2> %%_ret:
    20 00000B01 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   231                              <1> 
   232                              <1> doCommandLine:
   233 00000B02 488D3532F6FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
   234 00000B09 488D3D98F5FFFF      <1>     lea rdi, cmdFcb
   235 00000B10 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks
   236 00000B15 CD41                <1>     int 41h
   237 00000B17 0FB71D80F5FFFF      <1>     movzx ebx, word [cmdDrvSpec]    ;Get the drive specifier
   238 00000B1E 80FF3A              <1>     cmp bh, ":"
   239 00000B21 752E                <1>     jne .noDriveSpecified
   240 00000B23 88DA                <1>     mov dl, bl      ;Move the drive letter in dl
   241 00000B25 80E2DF              <1>     and dl, 0DFh    ;Make the drive letter upper case
   242 00000B28 80EA41              <1>     sub dl, "A"     ;And make it a 0 based drive letter
   243 00000B2B 3CFF                <1>     cmp al, -1  ;Int 41h returns AL = -1 if bad drive specified
   244 00000B2D 7415                <1>     je .badDrive
   245                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   246 00000B2F 803DEAF6FFFF02      <1>     cmp byte [cmdName], 2
   247 00000B36 7519                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   248 00000B38 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   249 00000B3A CD41                <1>     int 41h 
   250 00000B3C B419                <1>     mov ah, 19h
   251 00000B3E CD41                <1>     int 41h     ;Get current drive
   252 00000B40 38D0                <1>     cmp al, dl  ;If the drive was set, all is well
   253                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000B42 74(01)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   254                              <1> .badDrive:
   255 00000B44 488D150FFAFFFF      <1>     lea rdx, badDrv
   256 00000B4B B409                <1>     mov ah, 09h
   257 00000B4D CD41                <1>     int 41h
   258 00000B4F F9                  <1>     stc
   259                              <1>     return
    19                              <2> %%_ret:
    20 00000B50 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   260                              <1> .noDriveSpecified:
   261                              <1> ;Now we set the two FCB's in the command line
   262 00000B51 F6054AF5FFFFFF      <1>     test byte [arg1Flg], -1
   263 00000B58 744D                <1>     jz .fcbArgsDone
   264 00000B5A 0FB60542F5FFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   265 00000B61 488D35D1F5FFFF      <1>     lea rsi, cmdBuffer
   266 00000B68 4801C6              <1>     add rsi, rax    ;Point to first argument
   267 00000B6B 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   268 00000B6F B801290000          <1>     mov eax, 2901h
   269 00000B74 CD41                <1>     int 41h
   270 00000B76 880528F5FFFF        <1>     mov byte [arg1FCBret], al
   271 00000B7C F60522F5FFFFFF      <1>     test byte [arg2Flg], -1
   272 00000B83 7422                <1>     jz .fcbArgsDone
   273 00000B85 0FB6051AF5FFFF      <1>     movzx eax, byte [arg2Off]
   274 00000B8C 488D35A6F5FFFF      <1>     lea rsi, cmdBuffer
   275 00000B93 4801C6              <1>     add rsi, rax    ;Point to first argument
   276 00000B96 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   277 00000B9A B801290000          <1>     mov eax, 2901h
   278 00000B9F CD41                <1>     int 41h
   279 00000BA1 880500F5FFFF        <1>     mov byte [arg2FCBret], al
   280                              <1> .fcbArgsDone:
   281 00000BA7 488D358BF5FFFF      <1>     lea rsi, cmdBuffer
   282 00000BAE 488D1D6BF6FFFF      <1>     lea rbx, cmdName
   283 00000BB5 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   284 00000BBA BAFFFF0000          <1>     mov edx, 0FFFFh
   285 00000BBF B5FF                <1>     mov ch, -1
   286 00000BC1 CD4F                <1>     int 4Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   287                              <1>             ;        al = 0  if the command should be executed as usual
   288 00000BC3 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   289 00000BC8 BAFFFF0000          <1>     mov edx, 0FFFFh
   290 00000BCD 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   291 00000BCF CD4F                <1>     int 4Fh
   292 00000BD1 741D                <1>     jz .executeInternal
   293                              <1>     ;Here we execute externally and return to the prompt
   294                              <1>     ; as if it was an internal execution
   295 00000BD3 488D35DFF4FFFF      <1>     lea rsi, inBuffer ;Point to this built buffer
   296 00000BDA 488D1DC7F4FFFF      <1>     lea rbx, cmdFcb
   297 00000BE1 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   298 00000BE6 BAFFFF0000          <1>     mov edx, 0FFFFh
   299 00000BEB B5FF                <1>     mov ch, -1
   300 00000BED CD4F                <1>     int 4Fh 
   301                              <1>     return
    19                              <2> %%_ret:
    20 00000BEF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   302                              <1> .executeInternal:
   303                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   304                              <1> ;rsi points after the command terminator in the command tail
   305 00000BF0 488D1D73F7FFFF      <1>     lea rbx, functionTable
   306                              <1> .nextEntry:
   307 00000BF7 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   308 00000BFA 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   309 00000BFD 743D                <1>     je .external      ;If so, check externally now
   310 00000BFF 380D1BF6FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   311 00000C05 7529                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   312                              <1>     ;Here they have the same length so lets see if the name is the same
   313 00000C07 56                  <1>     push rsi
   314                              <1>     ;ecx has the length to compare
   315 00000C08 51                  <1>     push rcx
   316 00000C09 488D7301            <1>     lea rsi, qword [rbx + 1]
   317 00000C0D 488D3D0DF6FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   318 00000C14 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   319 00000C16 59                  <1>     pop rcx
   320 00000C17 5E                  <1>     pop rsi
   321 00000C18 7516                <1>     jne .gotoNextEntry
   322                              <1>     ;Here it was found both strings are equal
   323 00000C1A 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   324 00000C1F 480FB71F            <1>     movzx rbx, word [rdi]
   325 00000C23 488D3DD6F3FFFF      <1>     lea rdi, startLbl
   326 00000C2A 4801FB              <1>     add rbx, rdi
   327 00000C2D FFD3                <1>     call rbx    ;Call this function...
   328                              <1>     return  ;... and return
    19                              <2> %%_ret:
    20 00000C2F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   329                              <1> .gotoNextEntry:
   330 00000C30 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   331 00000C37 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   332 00000C3A EBBB                <1>     jmp short .nextEntry
   333                              <1> 
   334                              <1> .external:
   335                              <1> ;Here we must search the CWD or all path componants before failing
   336                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
   337 00000C3C E925000000          <1>     jmp .dfltErrExit    ;Catch all for now
   338 00000C41 8B056AF4FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   339 00000C47 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   340 00000C4C 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   341 00000C51 3D20202020          <1>     cmp eax, "    " ;Only if we have four spaces do we proceed here
   342 00000C56 741A                <1>     je .noExt
   343 00000C58 E817000000          <1>     call checkExtensionExec ;ZF=ZE => Executable
   344 00000C5D 7507                <1>     jnz .dfltErrExit
   345                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
   346 00000C5F 7205                <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
   347                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
   348                              <1>     ;So it is a com or exe that we are searching for for now
   349                              <1>     
   350 00000C61 E900000000          <1>     jmp .dfltErrExit
   351                              <1> .dfltErrExit:
   352 00000C66 488D15DEF7FFFF      <1>     lea rdx, badCmd
   353 00000C6D B409                <1>     mov ah, 09h
   354 00000C6F CD41                <1>     int 41h
   355                              <1>     return
    19                              <2> %%_ret:
    20 00000C71 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   356                              <1> .noExt:
   357                              <1>     ;Here we must search for the first file with a valid extension.
   358                              <1>     ;Use bl as flags. bl[0] => COM found, bl[1] => EXE found, bl[2] => BAT found
   359 00000C72 31DB                <1>     xor ebx, ebx
   360                              <1>     ;If relative path, search CWD. If absolute path, search absolute path.
   361                              <1>     ;If nothing, only then loop through each dir in the path for provided
   362                              <1>     ; pathspec (relative case), or filename (absolute case)
   363                              <1> 
   364                              <1> 
   365                              <1> 
   366                              <1> checkExtensionExec:
   367                              <1> ;Checks the extension field of cmdFcb is .COM, .EXE, .BAT in that order
   368                              <1> ;Returns: ZF=ZE if executable. ZF=NZ if not executable.
   369                              <1> ;         If ZF=ZE and CF=CY => Batch file
   370 00000C74 8B0537F4FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   371 00000C7A 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   372 00000C7F 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   373 00000C84 3D434F4D20          <1>     cmp eax, "COM "
   374                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000C89 74(71)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   375 00000C8B 3D45584520          <1>     cmp eax, "EXE "
   376                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000C90 74(71)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   377 00000C92 3D42415420          <1>     cmp eax, "BAT "
   378                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000C97 75(71)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   379 00000C99 F9                  <1>     stc
   380                              <1>     return
    19                              <2> %%_ret:
    20 00000C9A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   381                              <1> 
   382                              <1> checkAndSetupRedir:
   383                              <1> ;Checks and sets up redir as appropriate
   384                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   385                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   386                              <1> ;Output: ZF=NZ => No redir
   387                              <1> ;        ZF=ZY => Redir
   388                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   389                              <1> ;CF=CY if pipe set or an embedded CR found
   390 00000C9B 57                  <1>     push rdi
   391 00000C9C 3C3C                <1>     cmp al, "<"
   392 00000C9E 740B                <1>     je .inputRedir
   393 00000CA0 3C3E                <1>     cmp al, ">"
   394 00000CA2 742A                <1>     je .outputRedir
   395 00000CA4 3C7C                <1>     cmp al, "|"
   396 00000CA6 7454                <1>     je .pipeSetup
   397 00000CA8 F8                  <1>     clc
   398                              <1> .redirExit:
   399 00000CA9 5F                  <1>     pop rdi
   400                              <1>     return
    19                              <2> %%_ret:
    20 00000CAA C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   401                              <1> .inputRedir:
   402 00000CAB C605EEF3FFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   403 00000CB2 488D3D75F5FFFF      <1>     lea rdi, rdrInFilespec
   404 00000CB9 E8AD0C0000          <1>     call skipSpaces ;Skip spaces between < and the filespec
   405 00000CBE E845000000          <1>     call copyCommandTailItem
   406 00000CC3 72E4                <1>     jc .redirExit
   407 00000CC5 E8A10C0000          <1>     call skipSpaces
   408 00000CCA 30C0                <1>     xor al, al
   409 00000CCC EBDB                <1>     jmp short .redirExit
   410                              <1> .outputRedir:
   411 00000CCE C605CCF3FFFF01      <1>     mov byte [redirOut], 1
   412 00000CD5 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   413 00000CD8 7506                <1>     jne .notDouble
   414 00000CDA FE05C1F3FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   415                              <1> .notDouble:
   416 00000CE0 488D3D96F5FFFF      <1>     lea rdi, rdrOutFilespec
   417 00000CE7 E87F0C0000          <1>     call skipSpaces
   418 00000CEC E817000000          <1>     call copyCommandTailItem
   419 00000CF1 72B6                <1>     jc .redirExit
   420 00000CF3 E8730C0000          <1>     call skipSpaces
   421 00000CF8 30C0                <1>     xor al, al
   422 00000CFA EBAD                <1>     jmp short .redirExit
   423                              <1> .pipeSetup:
   424 00000CFC C6058DF3FFFFFF      <1>     mov byte [pipeFlag], -1
   425 00000D03 30C0                <1>     xor al, al
   426 00000D05 F9                  <1>     stc
   427 00000D06 5F                  <1>     pop rdi
   428                              <1>     return
    19                              <2> %%_ret:
    20 00000D07 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   429                              <1> 
   430                              <1> copyCommandTailItem:
   431                              <1> ;Copies a sentence from the command tail until a terminator is found.
   432                              <1> ;Stores a terminating null in the destination
   433                              <1> ;Input: rsi = Start of the item to copy
   434                              <1> ;       rdi = Location for copy
   435                              <1> ;Output: Sentence copied with a null terminator inserted.
   436                              <1> ; If CF=CY, embedded CR encountered
   437 00000D08 AC                  <1>     lodsb
   438 00000D09 3C0D                <1>     cmp al, CR
   439 00000D0B 741A                <1>     je .endOfInput
   440 00000D0D E8250C0000          <1>     call isALterminator
   441 00000D12 741A                <1>     jz .exit
   442 00000D14 3A0509F3FFFF        <1>     cmp al, byte [pathSep]
   443 00000D1A 7412                <1>     je .exit
   444 00000D1C 3A0502F3FFFF        <1>     cmp al, byte [switchChar]
   445 00000D22 740A                <1>     je .exit
   446 00000D24 AA                  <1>     stosb
   447 00000D25 EBE1                <1>     jmp short copyCommandTailItem
   448                              <1> .endOfInput:
   449 00000D27 E802000000          <1>     call .exit
   450 00000D2C F9                  <1>     stc 
   451                              <1>     return
    19                              <2> %%_ret:
    20 00000D2D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   452                              <1> .exit:
   453 00000D2E 30C0                <1>     xor al, al
   454 00000D30 AA                  <1>     stosb
   455                              <1>     return
    19                              <2> %%_ret:
    20 00000D31 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   456                              <1> 
   457                              <1> 
   458                              <1> int4Eh:   ;Interrupt interface for parsing and executing command lines
   459                              <1> ;Input: rsi points to the count byte of a command line
   460 00000D32 4150                <1>     push r8
   461 00000D34 4151                <1>     push r9
   462 00000D36 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   463 00000D38 CD41                <1>     int 41h
   464 00000D3A 52                  <1>     push rdx    ;Save on the stack
   465 00000D3B 488D1DBEF1FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   466 00000D42 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   467 00000D44 CD41                <1>     int 41h
   468 00000D46 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   469 00000D49 4989D9              <1>     mov r9, rbx
   470 00000D4C 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   471 00000D53 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   472 00000D58 F348A5              <1>     rep movsq   ;Copy command line over
   473                              <1>     ;call doCommandLine
   474 00000D5B 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   475 00000D5C B450                <1>     mov ah, 50h ;Set Current PSP
   476 00000D5E CD41                <1>     int 41h
   477 00000D60 4159                <1>     pop r9
   478 00000D62 4158                <1>     pop r8
   479 00000D64 48CF                <1>     iretq
    15                                  %include "./Source/Utils/COMMAND/Source/cmdFunc.asm"
    16                              <1> dir:
    17 00000D66 C605DFF5FFFF00      <1>     mov byte [dirPrnType], 0    ;Clear DIR flags
    18 00000D6D C605D9F5FFFF00      <1>     mov byte [dirLineCtr], 0
    19 00000D74 C605D3F5FFFF00      <1>     mov byte [dirFileCtr], 0
    20 00000D7B C605CDF5FFFF00      <1>     mov byte [dirPathOff], 0    
    21 00000D82 C605C7F5FFFFFF      <1>     mov byte [dirVolLbl], -1    ;Mark as no label
    22                              <1>     ;Start by scanning for the switches
    23 00000D89 488D3DAAF3FFFF      <1>     lea rdi, cmdBuffer + 1  ;Goto command line input chars count
    24 00000D90 0FB60F              <1>     movzx ecx, byte [rdi]   ;Get number of chars typed
    25 00000D93 48FFC7              <1>     inc rdi ;Goto first char typed in
    26 00000D96 4889FE              <1>     mov rsi, rdi    ;Use rsi as start of buffer counter
    27 00000D99 8A0585F2FFFF        <1>     mov al, byte [switchChar]   ;Scan for switchchars
    28                              <1> .switchScan:
    29 00000D9F F2AE                <1>     repne scasb ;Scan for a switchchar
    30 00000DA1 67E322              <1>     jecxz .switchScanDone
    31 00000DA4 8A07                <1>     mov al, byte [rdi]  ;Get the byte pointed to by rdi
    32 00000DA6 24DF                <1>     and al, 0DFh    ;UC it
    33 00000DA8 3C57                <1>     cmp al, "W" ;Wide print mode?
    34 00000DAA 7509                <1>     jne .notWideSw
    35 00000DAC 800D99F5FFFF01      <1>     or byte [dirPrnType], 1 ;Set the correct bit
    36 00000DB3 EBEA                <1>     jmp short .switchScan
    37                              <1> .notWideSw:
    38 00000DB5 3C50                <1>     cmp al, "P" ;Pause mode?
    39 00000DB7 0F858F030000        <1>     jne .badParam   ;If a switch other than /P or /W, fail
    40 00000DBD 800D88F5FFFF02      <1>     or byte [dirPrnType], 2 ;Set correct bit
    41 00000DC4 EBD9                <1>     jmp short .switchScan
    42                              <1> .switchScanDone:
    43                              <1> ;If no args, only switches, we search CWD
    44                              <1> ;If one arg, search that 
    45                              <1> ;If more than one, fail
    46 00000DC6 488D3D6EF3FFFF      <1>     lea rdi, cmdBuffer + 2
    47 00000DCD 4889FE              <1>     mov rsi, rdi
    48 00000DD0 E8960B0000          <1>     call skipSpaces ;Skip leading spaces
    49 00000DD5 4881C603000000      <1>     add rsi, 3  ;Go past the DIR (always three chars)
    50 00000DDC 803E0D              <1>     cmp byte [rsi], CR
    51 00000DDF 7436                <1>     je .eocReached
    52                              <1> .pathSearch:
    53 00000DE1 E8850B0000          <1>     call skipSpaces ;Now skip intermediate spaces to next non-space
    54 00000DE6 8A0538F2FFFF        <1>     mov al, byte [switchChar]   ;Is this a switch?
    55 00000DEC 3806                <1>     cmp byte [rsi], al
    56 00000DEE 741B                <1>     je .pathSearchSwitch    ;If a switch, skip it, find switch terminator
    57 00000DF0 803D58F5FFFF00      <1>     cmp byte [dirPathOff], 0    ;Did we previously get an argument?
    58 00000DF7 0F854F030000        <1>     jne .badParam ;If so, error
    59 00000DFD 4889F0              <1>     mov rax, rsi    ;Else, compute the offset in the cmdBuffer
    60 00000E00 4829F8              <1>     sub rax, rdi    ;Offset from the cmdBuffer + 2
    61 00000E03 0402                <1>     add al, 2       ;Make it an offset from cmdBuffer
    62 00000E05 880544F5FFFF        <1>     mov byte [dirPathOff], al   ;And save it!
    63                              <1> .pathSearchSwitch:
    64 00000E0B E8F20A0000          <1>     call findTerminatorOrEOC
    65 00000E10 7205                <1>     jc .eocReached
    66 00000E12 48FFC6              <1>     inc rsi ;Go to next char
    67 00000E15 EBCA                <1>     jmp short .pathSearch
    68                              <1> .eocReached:
    69 00000E17 803D31F5FFFF00      <1>     cmp byte [dirPathOff], 0
    70 00000E1E 7405                <1>     je .dirCWD
    71 00000E20 E927030000          <1>     jmp .badParam   ;Temp measure
    72                              <1> .dirCWD:
    73                              <1>     ;Build current working dir and append a \*.* to it 
    74                              <1>     ;First we search the root for a label
    75 00000E25 488D3D31F5FFFF      <1>     lea rdi, dirVolPathBuf
    76 00000E2C 488D3599F4FFFF      <1>     lea rsi, searchSpec ;Will need to create the same X:\ here too
    77 00000E33 E8B60A0000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
    78 00000E38 880527F5FFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
    79 00000E3E 0441                <1>     add al, "A"
    80 00000E40 B43A                <1>     mov ah, ":" ;ax has X: now to store 
    81 00000E42 66AB                <1>     stosw
    82 00000E44 668906              <1>     mov word [rsi], ax
    83 00000E47 4881C602000000      <1>     add rsi, 2
    84 00000E4E 8A05CFF1FFFF        <1>     mov al, byte [pathSep]
    85 00000E54 AA                  <1>     stosb
    86 00000E55 8806                <1>     mov byte [rsi], al
    87 00000E57 B82A2E2A00          <1>     mov eax, 002A2E2Ah  ;*.*,0
    88 00000E5C AB                  <1>     stosd
    89 00000E5D B42F                <1>     mov ah, 2Fh ;Get current DTA in rbx
    90 00000E5F CD41                <1>     int 41h 
    91 00000E61 53                  <1>     push rbx    ;Preserve it on the stack
    92 00000E62 488D154FF2FFFF      <1>     lea rdx, cmdFFBlock
    93 00000E69 B41A                <1>     mov ah, 1Ah ;Set DTA to internal ffblock
    94 00000E6B CD41                <1>     int 41h
    95 00000E6D 488D15E9F4FFFF      <1>     lea rdx, dirVolPathBuf
    96 00000E74 66B90800            <1>     mov cx, dirVolumeID
    97 00000E78 B44E                <1>     mov ah, 4Eh ;Find first
    98 00000E7A CD41                <1>     int 41h
    99 00000E7C 7221                <1>     jc .skipVolLbl
   100 00000E7E 488D3551F2FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   101 00000E85 488D3DC4F4FFFF      <1>     lea rdi, dirVolLbl
   102 00000E8C B90B000000          <1>     mov ecx, 11 ;Get the 11 chars of the volume label
   103                              <1> .dirLblCopy:
   104 00000E91 AC                  <1>     lodsb   ;Get the first char
   105 00000E92 3C00                <1>     cmp al, 0
   106 00000E94 7409                <1>     je .skipVolLbl
   107 00000E96 3C2E                <1>     cmp al, "."
   108 00000E98 7401                <1>     je .dirLblSkipStore
   109 00000E9A AA                  <1>     stosb
   110                              <1> .dirLblSkipStore:
   111 00000E9B FFC9                <1>     dec ecx
   112 00000E9D 75F2                <1>     jnz .dirLblCopy
   113                              <1> .skipVolLbl:
   114                              <1> ;Print volume label information now
   115 00000E9F E8F7000000          <1>     call .dirPrintVolInfo
   116 00000EA4 488D3D24F4FFFF      <1>     lea rdi, searchSpec + 3 ;Go to the fourth char in the field
   117 00000EAB B447                <1>     mov ah, 47h ;Get Current Working Directory
   118 00000EAD 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   119 00000EB0 8A1516F4FFFF        <1>     mov dl, byte [searchSpec]
   120 00000EB6 80EA40              <1>     sub dl, "@" ;Get 1 based drive letter
   121 00000EB9 CD41                <1>     int 41h ;Overrwrite it with the current directory
   122 00000EBB 488D3D0AF4FFFF      <1>     lea rdi, searchSpec
   123 00000EC2 E82C0A0000          <1>     call strlen
   124 00000EC7 FFC9                <1>     dec ecx
   125 00000EC9 C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   126 00000ECD 488D152CF8FFFF      <1>     lea rdx, dirMain
   127 00000ED4 B409                <1>     mov ah, 09h
   128 00000ED6 CD41                <1>     int 41h
   129 00000ED8 4889FA              <1>     mov rdx, rdi    ;Print the current directory we are working on
   130 00000EDB B409                <1>     mov ah, 09h
   131 00000EDD CD41                <1>     int 41h
   132 00000EDF 488D150DF5FFFF      <1>     lea rdx, crlf
   133 00000EE6 B409                <1>     mov ah, 09h
   134 00000EE8 CD41                <1>     int 41h
   135 00000EEA 488D1502F5FFFF      <1>     lea rdx, crlf   ;Add an extra free line
   136 00000EF1 B409                <1>     mov ah, 09h
   137 00000EF3 CD41                <1>     int 41h
   138                              <1>     ;Now we search for the files
   139 00000EF5 8A0528F1FFFF        <1>     mov al, byte [pathSep]
   140 00000EFB 38440FFF            <1>     cmp byte [rdi + rcx - 1], al
   141 00000EFF 7405                <1>     je .noAddSlash  ;Deals with special case of root dir
   142 00000F01 88040F              <1>     mov byte [rdi + rcx], al
   143 00000F04 FFC1                <1>     inc ecx
   144                              <1> .noAddSlash:
   145 00000F06 C7040F2A2E2A00      <1>     mov dword [rdi + rcx], 002A2E2Ah ;and add a *.*,0
   146 00000F0D 4889FA              <1>     mov rdx, rdi    ;Ptr to search for in rdx
   147 00000F10 B911000000          <1>     mov ecx, dirReadOnly | dirDirectory
   148 00000F15 B44E                <1>     mov ah, 4Eh ;Find first
   149 00000F17 CD41                <1>     int 41h
   150 00000F19 720B                <1>     jc .dirNoMoreFiles
   151                              <1> .findNext:
   152 00000F1B E8EF000000          <1>     call .dirPrintFileData  ;Print the file information
   153 00000F20 B44F                <1>     mov ah, 4Fh
   154 00000F22 CD41                <1>     int 41h
   155 00000F24 73F5                <1>     jnc .findNext 
   156                              <1> .dirNoMoreFiles:
   157 00000F26 5A                  <1>     pop rdx 
   158 00000F27 B41A                <1>     mov ah, 1Ah ;Return back the original DTA
   159 00000F29 CD41                <1>     int 41h
   160 00000F2B F6051AF4FFFF01      <1>     test byte [dirPrnType], 1
   161 00000F32 740B                <1>     jz .dirNoEndNewLine
   162 00000F34 488D15B8F4FFFF      <1>     lea rdx, crlf   ;Only need this for /W
   163 00000F3B B409                <1>     mov ah, 09h
   164 00000F3D CD41                <1>     int 41h
   165                              <1> .dirNoEndNewLine:
   166                              <1>     ;Now we print the number of files and the number of bytes on the disk
   167 00000F3F B908000000          <1>     mov ecx, 8  ;Print 8 spaces
   168 00000F44 B220                <1>     mov dl, " "
   169                              <1> .dirNumOffSpc:
   170 00000F46 B402                <1>     mov ah, 02h
   171 00000F48 CD41                <1>     int 41h
   172 00000F4A FFC9                <1>     dec ecx
   173 00000F4C 75F8                <1>     jnz .dirNumOffSpc
   174 00000F4E 0FB605F9F3FFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   175 00000F55 E8C20B0000          <1>     call printDecimalWord
   176 00000F5A 488D15D8F5FFFF      <1>     lea rdx, dirOk
   177 00000F61 B409                <1>     mov ah, 09h
   178 00000F63 CD41                <1>     int 41h
   179 00000F65 488D15EBF8FFFF      <1>     lea rdx, threeSpc
   180 00000F6C B409                <1>     mov ah, 09h
   181 00000F6E CD41                <1>     int 41h
   182 00000F70 B800360000          <1>     mov eax, 3600h ;Get disk info
   183 00000F75 8A15EAF3FFFF        <1>     mov dl, byte [dirDrv]
   184 00000F7B CD41                <1>     int 41h ;Get disk free space info
   185 00000F7D 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   186 00000F80 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   187 00000F83 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   188 00000F85 F7E1                <1>     mul ecx ;Get bytes per cluster
   189 00000F87 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   190                              <1>     ;rax now has the number of free bytes on the disk
   191 00000F8A E88D0B0000          <1>     call printDecimalWord
   192 00000F8F 488D15ADF5FFFF      <1>     lea rdx, bytesOk
   193 00000F96 B409                <1>     mov ah, 09h
   194 00000F98 CD41                <1>     int 41h
   195                              <1>     return
    19                              <2> %%_ret:
    20 00000F9A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   196                              <1> 
   197                              <1> .dirPrintVolInfo:
   198 00000F9B 488D1551F4FFFF      <1>     lea rdx, crlf
   199 00000FA2 B409                <1>     mov ah, 09h
   200 00000FA4 CD41                <1>     int 41h
   201 00000FA6 488D15C6F6FFFF      <1>     lea rdx, volMes
   202 00000FAD B409                <1>     mov ah, 09h
   203 00000FAF CD41                <1>     int 41h
   204 00000FB1 8A15A6F3FFFF        <1>     mov dl, byte [dirVolPathBuf]   ;Print the drive letter out
   205 00000FB7 B402                <1>     mov ah, 02h
   206 00000FB9 CD41                <1>     int 41h
   207 00000FBB 803D8DF3FFFFFF      <1>     cmp byte [dirPathOff], -1   ;No volume ID marker
   208 00000FC2 7517                <1>     jne .dirVolIDOk
   209 00000FC4 488D15BFF6FFFF      <1>     lea rdx, volNo
   210 00000FCB B409                <1>     mov ah, 09h
   211 00000FCD CD41                <1>     int 41h
   212 00000FCF 488D151DF4FFFF      <1>     lea rdx, crlf
   213 00000FD6 B409                <1>     mov ah, 09h
   214 00000FD8 CD41                <1>     int 41h
   215                              <1>     return
    19                              <2> %%_ret:
    20 00000FDA C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   216                              <1> .dirVolIDOk:
   217 00000FDB 488D15A3F6FFFF      <1>     lea rdx, volOk
   218 00000FE2 B409                <1>     mov ah, 09h
   219 00000FE4 CD41                <1>     int 41h
   220 00000FE6 488D3D63F3FFFF      <1>     lea rdi, dirVolLbl
   221 00000FED E801090000          <1>     call strlen
   222 00000FF2 FFC9                <1>     dec ecx
   223 00000FF4 C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   224 00000FF8 488D1551F3FFFF      <1>     lea rdx, dirVolLbl
   225 00000FFF B409                <1>     mov ah, 09h
   226 00001001 CD41                <1>     int 41h
   227 00001003 488D15E9F3FFFF      <1>     lea rdx, crlf
   228 0000100A B409                <1>     mov ah, 09h
   229 0000100C CD41                <1>     int 41h
   230                              <1>     return
    19                              <2> %%_ret:
    20 0000100E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   231                              <1> 
   232                              <1> .dirPrintFileData:
   233                              <1> ;Use fcbCmdSpec to build the file name with space
   234                              <1> ;Start by print the name (same for both cases)
   235 0000100F 488D35C0F0FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   236 00001016 488D3DEBF1FFFF      <1>     lea rdi, fcbCmdSpec
   237 0000101D E8A2090000          <1>     call asciiFilenameToFCB
   238 00001022 488D15DFF1FFFF      <1>     lea rdx, fcbCmdSpec
   239 00001029 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   240 0000102E BB01000000          <1>     mov ebx, 1  ;STDOUT
   241 00001033 B440                <1>     mov ah, 40h ;Write handle
   242 00001035 CD41                <1>     int 41h
   243 00001037 52                  <1>     push rdx
   244 00001038 B220                <1>     mov dl, " "
   245 0000103A B402                <1>     mov ah, 02h ;Print char
   246 0000103C CD41                <1>     int 41h
   247 0000103E 5A                  <1>     pop rdx
   248 0000103F 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   249 00001046 B903000000          <1>     mov ecx, 3  ;Print three chars
   250 0000104B BB01000000          <1>     mov ebx, 1  ;STDOUT
   251 00001050 B440                <1>     mov ah, 40h ;Write handle
   252 00001052 CD41                <1>     int 41h
   253 00001054 F605F1F2FFFF01      <1>     test byte [dirPrnType], 1
   254 0000105B 0F85A8000000        <1>     jnz .widePrint
   255                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   256                              <1>     ;Now check if a DIR
   257 00001061 F60565F0FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   258 00001068 7418                <1>     jz .dirPrintNotDir
   259 0000106A 488D15E0F4FFFF      <1>     lea rdx, dirLbl
   260 00001071 B409                <1>     mov ah, 09h
   261 00001073 CD41                <1>     int 41h
   262 00001075 488D15DBF7FFFF      <1>     lea rdx, threeSpc
   263 0000107C B409                <1>     mov ah, 09h
   264 0000107E CD41                <1>     int 41h
   265 00001080 EB4F                <1>     jmp short .dirPrintFileDT
   266                              <1> .dirPrintNotDir:
   267                              <1> ;Here we print the file size
   268 00001082 B220                <1>     mov dl, " "
   269 00001084 B402                <1>     mov ah, 02h
   270 00001086 CD41                <1>     int 41h
   271 00001088 8B0544F0FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   272 0000108E E8FA0A0000          <1>     call getDecimalWord
   273 00001093 4889CB              <1>     mov rbx, rcx
   274 00001096 51                  <1>     push rcx
   275 00001097 480FCB              <1>     bswap rbx
   276 0000109A B908000000          <1>     mov ecx, 8
   277                              <1> .dirPrintFileSizePrep:
   278 0000109F 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   279 000010A1 7514                <1>     jne .dirPrintFileSize
   280 000010A3 B402                <1>     mov ah, 02h
   281 000010A5 B220                <1>     mov dl, " "
   282 000010A7 CD41                <1>     int 41h
   283 000010A9 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   284 000010AD FFC9                <1>     dec ecx
   285 000010AF 81F901000000        <1>     cmp ecx, 1
   286 000010B5 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   287                              <1> .dirPrintFileSize:
   288 000010B7 5B                  <1>     pop rbx
   289                              <1> .dirPrintFileSizeLoop:
   290 000010B8 88DA                <1>     mov dl, bl
   291 000010BA B402                <1>     mov ah, 02h
   292 000010BC CD41                <1>     int 41h
   293 000010BE 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   294 000010C2 FFC9                <1>     dec ecx
   295 000010C4 75F2                <1>     jnz .dirPrintFileSizeLoop
   296 000010C6 488D158EF7FFFF      <1>     lea rdx, twoSpc
   297 000010CD B409                <1>     mov ah, 09h
   298 000010CF CD41                <1>     int 41h
   299                              <1> .dirPrintFileDT:
   300 000010D1 B220                <1>     mov dl, " "
   301 000010D3 B402                <1>     mov ah, 02h
   302 000010D5 CD41                <1>     int 41h
   303 000010D7 0FB705F2EFFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   304 000010DE 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   305 000010E0 E85F050000          <1>     call printDate
   306 000010E5 488D156FF7FFFF      <1>     lea rdx, twoSpc
   307 000010EC B409                <1>     mov ah, 09h
   308 000010EE CD41                <1>     int 41h
   309 000010F0 0FB705D7EFFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   310 000010F7 E86A060000          <1>     call printTime
   311 000010FC 488D15F0F2FFFF      <1>     lea rdx, crlf
   312 00001103 B409                <1>     mov ah, 09h
   313 00001105 CD41                <1>     int 41h
   314 00001107 EB0B                <1>     jmp short .dirPrintNameExit
   315                              <1> .widePrint:
   316                              <1> ;If /W, print name space ext space space space space
   317 00001109 488D1542F7FFFF      <1>     lea rdx, fourSpc
   318 00001110 B409                <1>     mov ah, 09h ;Print string
   319 00001112 CD41                <1>     int 41h
   320                              <1> .dirPrintNameExit:
   321 00001114 FE0534F2FFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   322 0000111A FE052DF2FFFF        <1>     inc byte [dirLineCtr]
   323 00001120 803D26F2FFFF17      <1>     cmp byte [dirLineCtr], 23
   324                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 00001127 7401                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 00001129 C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   325 0000112A 488D1547F4FFFF      <1>     lea rdx, pauseMes
   326 00001131 B409                <1>     mov ah, 09h
   327 00001133 CD41                <1>     int 41h
   328 00001135 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   329 00001137 CD41                <1>     int 41h
   330 00001139 C6050DF2FFFF00      <1>     mov byte [dirLineCtr], 0
   331 00001140 488D15ACF2FFFF      <1>     lea rdx, crlf   ;Force new line
   332 00001147 B409                <1>     mov ah, 09h
   333 00001149 CD41                <1>     int 41h
   334                              <1>     return
    19                              <2> %%_ret:
    20 0000114B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   335                              <1>     
   336                              <1> .badParam:
   337 0000114C 488D1544F4FFFF      <1>     lea rdx, badParm
   338 00001153 B409                <1>     mov ah, 09h
   339 00001155 CD41                <1>     int 41h
   340                              <1>     return
    19                              <2> %%_ret:
    20 00001157 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   341                              <1> 
   342                              <1> chdir:
   343 00001158 F60543EFFFFFFF      <1>     test byte [arg1Flg], -1
   344 0000115F 754D                <1>     jnz .changeDir
   345                              <1>     ;Print CWD
   346                              <1> .printCWD:
   347 00001161 E8E1060000          <1>     call putCWDInPrompt ;Exactly the same procedure
   348 00001166 E8C3040000          <1>     call printCRLF
   349                              <1>     return
    19                              <2> %%_ret:
    20 0000116B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   350                              <1> .printDiskCWD:
   351                              <1> ;Print CWD for a specified drive
   352 0000116C 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   353 00001170 88D0                <1>     mov al, dl
   354 00001172 0440                <1>     add al, "@" ;Get the UC letter
   355 00001174 B43A                <1>     mov ah, ":"
   356 00001176 488D3D4FF1FFFF      <1>     lea rdi, searchSpec
   357 0000117D 66AB                <1>     stosw   ;Store X:, rdi+=2
   358 0000117F 8A059EEEFFFF        <1>     mov al, byte [pathSep]
   359 00001185 AA                  <1>     stosb   ;Store pathSep, inc rdi
   360 00001186 B447                <1>     mov ah, 47h ;Get Current Working Directory
   361 00001188 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   362 0000118B CD41                <1>     int 41h
   363 0000118D E861070000          <1>     call strlen
   364 00001192 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   365 00001198 B440                <1>     mov ah, 40h ;Write to handle
   366 0000119A BB01000000          <1>     mov ebx, 1  ;STDOUT
   367 0000119F 488D1526F1FFFF      <1>     lea rdx, searchSpec
   368 000011A6 CD41                <1>     int 41h
   369 000011A8 E881040000          <1>     call printCRLF
   370                              <1>     return
    19                              <2> %%_ret:
    20 000011AD C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   371                              <1> .changeDir:
   372 000011AE 8A05F0EEFFFF        <1>     mov al, byte [arg1FCBret]
   373 000011B4 3CFF                <1>     cmp al, -1 
   374 000011B6 743C                <1>     je .badDrv  ;IF the drive is good, but FCB name blank, either X: or \ 
   375 000011B8 4180785D20          <1>     cmp byte [r8 + fcb1 + fcb.filename], " "
   376 000011BD 7520                <1>     jne .getFQPath
   377                              <1>     ;Now we double check that on the command line we have . or ..
   378 000011BF 0FB605DDEEFFFF      <1>     movzx eax, byte [arg1Off]
   379 000011C6 488D356CEFFFFF      <1>     lea rsi, cmdBuffer
   380 000011CD 4801C6              <1>     add rsi, rax
   381 000011D0 8A054DEEFFFF        <1>     mov al, byte [pathSep]
   382 000011D6 3806                <1>     cmp byte [rsi], al  ;Is the first char a pathsep?
   383 000011D8 7405                <1>     je .getFQPath
   384 000011DA 803E2E              <1>     cmp byte [rsi], "."
   385 000011DD 758D                <1>     jne .printDiskCWD
   386                              <1>     ;If the path is . or .., its acceptable, else fail
   387                              <1> .getFQPath:
   388 000011DF E86A080000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   389 000011E4 721D                <1>     jc .badDir  ;If this returns CF=CY, its a badDir
   390 000011E6 488D15DFF0FFFF      <1>     lea rdx, searchSpec
   391 000011ED B43B                <1>     mov ah, 3Bh ;CHDIR
   392 000011EF CD41                <1>     int 41h
   393 000011F1 7210                <1>     jc .badDir
   394                              <1>     return
    19                              <2> %%_ret:
    20 000011F3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   395                              <1> 
   396                              <1> .badDrv:
   397 000011F4 488D155FF3FFFF      <1>     lea rdx, badDrv
   398 000011FB B800090000          <1>     mov eax, 0900h
   399 00001200 CD41                <1>     int 41h
   400                              <1>     return
    19                              <2> %%_ret:
    20 00001202 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   401                              <1> .badDir:
   402 00001203 488D158EF4FFFF      <1>     lea rdx, badDir
   403 0000120A B800090000          <1>     mov eax, 0900h
   404 0000120F CD41                <1>     int 41h
   405                              <1>     return
    19                              <2> %%_ret:
    20 00001211 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   406                              <1> 
   407                              <1> 
   408                              <1> mkdir:
   409 00001212 F60589EEFFFFFF      <1>     test byte [arg1Flg], -1
   410 00001219 744D                <1>     jz .badParams
   411 0000121B F60583EEFFFFFF      <1>     test byte [arg2Flg], -1
   412 00001222 7544                <1>     jnz .badParams
   413                              <1>     ;We have exactly one argument
   414 00001224 8A057AEEFFFF        <1>     mov al, byte [arg1FCBret]
   415 0000122A 3CFF                <1>     cmp al, -1 
   416 0000122C 742B                <1>     je .badDrv  ;If a drive was specified and was bad, jump
   417 0000122E E81B080000          <1>     call buildCommandPath
   418 00001233 7215                <1>     jc .badMake
   419 00001235 488D1590F0FFFF      <1>     lea rdx, searchSpec
   420 0000123C B800390000          <1>     mov eax, 3900h  ;MKDIR
   421 00001241 CD41                <1>     int 41h
   422 00001243 7205                <1>     jc .badMake   ;Return if not carry
   423 00001245 B40D                <1>     mov ah, 0Dh
   424 00001247 CD41                <1>     int 41h ;Flush to disk
   425                              <1>     return
    19                              <2> %%_ret:
    20 00001249 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   426                              <1> .badMake:   ;Else, bad make
   427 0000124A 488D155BF4FFFF      <1>     lea rdx, badMD
   428 00001251 B800090000          <1>     mov eax, 0900h
   429 00001256 CD41                <1>     int 41h
   430                              <1>     return
    19                              <2> %%_ret:
    20 00001258 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   431                              <1> .badDrv:
   432 00001259 488D15FAF2FFFF      <1>     lea rdx, badDrv
   433 00001260 B800090000          <1>     mov eax, 0900h
   434 00001265 CD41                <1>     int 41h
   435                              <1>     return
    19                              <2> %%_ret:
    20 00001267 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   436                              <1> .badParams:
   437 00001268 488D15A5F5FFFF      <1>     lea rdx, badArgs
   438 0000126F B800090000          <1>     mov eax, 0900h
   439 00001274 CD41                <1>     int 41h
   440                              <1>     return
    19                              <2> %%_ret:
    20 00001276 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   441                              <1> 
   442                              <1> rmdir:
   443 00001277 F60524EEFFFFFF      <1>     test byte [arg1Flg], -1
   444 0000127E 744D                <1>     jz .badParams
   445 00001280 F6051EEEFFFFFF      <1>     test byte [arg2Flg], -1
   446 00001287 7544                <1>     jnz .badParams
   447                              <1>     ;We have exactly one argument
   448 00001289 8A0515EEFFFF        <1>     mov al, byte [arg1FCBret]
   449 0000128F 3CFF                <1>     cmp al, -1 
   450 00001291 742B                <1>     je .badDrv  ;If a drive was specified and was bad, jump
   451 00001293 E8B6070000          <1>     call buildCommandPath
   452 00001298 7215                <1>     jc .badRemove
   453 0000129A 488D152BF0FFFF      <1>     lea rdx, searchSpec
   454 000012A1 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   455 000012A6 CD41                <1>     int 41h
   456 000012A8 7205                <1>     jc .badRemove   ;Return if not carry
   457 000012AA B40D                <1>     mov ah, 0Dh
   458 000012AC CD41                <1>     int 41h ;Flush to disk
   459                              <1>     return
    19                              <2> %%_ret:
    20 000012AE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   460                              <1> .badRemove:   ;Else, bad make
   461 000012AF 488D1513F4FFFF      <1>     lea rdx, badRD
   462 000012B6 B800090000          <1>     mov eax, 0900h
   463 000012BB CD41                <1>     int 41h
   464                              <1>     return
    19                              <2> %%_ret:
    20 000012BD C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   465                              <1> .badDrv:
   466 000012BE 488D1595F2FFFF      <1>     lea rdx, badDrv
   467 000012C5 B800090000          <1>     mov eax, 0900h
   468 000012CA CD41                <1>     int 41h
   469                              <1>     return
    19                              <2> %%_ret:
    20 000012CC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   470                              <1> .badParams:
   471 000012CD 488D1540F5FFFF      <1>     lea rdx, badArgs
   472 000012D4 B800090000          <1>     mov eax, 0900h
   473 000012D9 CD41                <1>     int 41h
   474                              <1>     return
    19                              <2> %%_ret:
    20 000012DB C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   475                              <1> copy:
   476                              <1>     return
    19                              <2> %%_ret:
    20 000012DC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   477                              <1> erase:
   478                              <1>     return
    19                              <2> %%_ret:
    20 000012DD C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   479                              <1> date:
   480 000012DE 488D15EAF2FFFF      <1>     lea rdx, curDate
   481 000012E5 B409                <1>     mov ah, 09h
   482 000012E7 CD41                <1>     int 41h
   483 000012E9 B42A                <1>     mov ah, 2Ah ;DOS get date
   484 000012EB CD41                <1>     int 41h
   485                              <1> 	;AL = day of the week (0=Sunday)
   486                              <1> 	;CX = year (1980-2099)
   487                              <1> 	;DH = month (1-12)
   488                              <1> 	;DL = day (1-31)
   489 000012ED 66890D72F0FFFF      <1>     mov word [td1], cx
   490 000012F4 88156EF0FFFF        <1>     mov byte [td3], dl
   491 000012FA 883569F0FFFF        <1>     mov byte [td4], dh
   492 00001300 0FB6C0              <1>     movzx eax, al
   493 00001303 89C3                <1>     mov ebx, eax
   494 00001305 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   495 00001307 01D8                <1>     add eax, ebx ;Make it 3 times 
   496 00001309 488D159BF2FFFF      <1>     lea rdx, dayName
   497 00001310 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   498 00001314 B903000000          <1>     mov ecx, 3  ;Print three chars
   499 00001319 BB01000000          <1>     mov ebx, 1  ;STDOUT
   500 0000131E B440                <1>     mov ah, 40h ;Write to handle
   501 00001320 CD41                <1>     int 41h
   502 00001322 B220                <1>     mov dl, " "
   503 00001324 B402                <1>     mov ah, 02h
   504 00001326 CD41                <1>     int 41h
   505                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   506                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   507                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   508 00001328 0FB70537F0FFFF      <1>     movzx eax, word [td1]   ;Get this word
   509 0000132F C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   510 00001332 0FB61D30F0FFFF      <1>     movzx ebx, byte [td4]
   511 00001339 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   512 0000133C 09D8                <1>     or eax, ebx ;Add this date to eax
   513 0000133E 0FB61D23F0FFFF      <1>     movzx ebx, byte [td3]
   514 00001345 09D8                <1>     or eax, ebx
   515 00001347 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   516 0000134C E8F3020000          <1>     call printDate
   517                              <1> 
   518 00001351 488D1588F2FFFF      <1>     lea rdx, newDate
   519 00001358 B409                <1>     mov ah, 09h
   520 0000135A CD41                <1>     int 41h
   521 0000135C 488D159CF2FFFF      <1>     lea rdx, ukDate
   522 00001363 488D0588F2FFFF      <1>     lea rax, usDate
   523 0000136A 488D1D9BF2FFFF      <1>     lea rbx, jpDate
   524 00001371 803DADECFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   525 00001378 480F47D3            <1>     cmova rdx, rbx
   526 0000137C 480F42D0            <1>     cmovb rdx, rax
   527 00001380 B409                <1>     mov ah, 09h
   528 00001382 CD41                <1>     int 41h
   529                              <1> 
   530 00001384 498D9080000000      <1>     lea rdx, qword [r8 + cmdLineCnt]
   531 0000138B B40A                <1>     mov ah, 0Ah
   532 0000138D CD41                <1>     int 41h
   533 0000138F 52                  <1>     push rdx
   534 00001390 488D155CF0FFFF      <1>     lea rdx, crlf
   535 00001397 B409                <1>     mov ah, 09h
   536 00001399 CD41                <1>     int 41h
   537 0000139B 5A                  <1>     pop rdx
   538 0000139C 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   539                              <1>     rete    ;Exit!
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 000013A0 7501                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 000013A2 C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   540                              <1>     return
    19                              <2> %%_ret:
    20 000013A3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   541                              <1> 
   542                              <1> time:
   543 000013A4 488D157DF2FFFF      <1>     lea rdx, curTime
   544 000013AB B409                <1>     mov ah, 09h
   545 000013AD CD41                <1>     int 41h
   546                              <1>     breakpoint
    79 000013AF 6687DB              <2> xchg bx, bx
   547 000013B2 B42C                <1>     mov ah, 2Ch ;DOS get time
   548 000013B4 CD41                <1>     int 41h
   549                              <1>     ;CH = hour (0-23)
   550                              <1> 	;CL = minutes (0-59)
   551                              <1> 	;DH = seconds (0-59)
   552                              <1> 	;DL = hundredths (0-99)
   553 000013B6 880DAAEFFFFF        <1>     mov byte [td1], cl
   554 000013BC 882DA5EFFFFF        <1>     mov byte [td2], ch
   555 000013C2 8815A0EFFFFF        <1>     mov byte [td3], dl
   556 000013C8 88359BEFFFFF        <1>     mov byte [td4], dh
   557 000013CE 0FB6C5              <1>     movzx eax, ch
   558 000013D1 E802040000          <1>     call printTime.printHours
   559                              <1> 
   560 000013D6 8A1556ECFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   561 000013DC B402                <1>     mov ah, 02h
   562 000013DE CD41                <1>     int 41h
   563                              <1> 
   564 000013E0 0FB6057FEFFFFF      <1>     movzx eax, byte [td1]   ;Minutes
   565 000013E7 E8DC030000          <1>     call printTime.printMinutesAlt
   566                              <1> 
   567 000013EC 8A1540ECFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   568 000013F2 B402                <1>     mov ah, 02h
   569 000013F4 CD41                <1>     int 41h
   570                              <1> 
   571 000013F6 0FB6056CEFFFFF      <1>     movzx eax, byte [td4]   ;Seconds
   572 000013FD E8C6030000          <1>     call printTime.printMinutesAlt
   573                              <1> 
   574 00001402 B22E                <1>     mov dl, "."
   575 00001404 B402                <1>     mov ah, 02h
   576 00001406 CD41                <1>     int 41h
   577                              <1> 
   578 00001408 0FB60559EFFFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   579 0000140F E8B4030000          <1>     call printTime.printMinutesAlt
   580                              <1> 
   581 00001414 488D151EF2FFFF      <1>     lea rdx, newTime
   582 0000141B B409                <1>     mov ah, 09h
   583 0000141D CD41                <1>     int 41h
   584                              <1> 
   585 0000141F 498D9080000000      <1>     lea rdx, qword [r8 + cmdLineCnt]
   586 00001426 B40A                <1>     mov ah, 0Ah
   587 00001428 CD41                <1>     int 41h
   588 0000142A 52                  <1>     push rdx
   589 0000142B 488D15C1EFFFFF      <1>     lea rdx, crlf
   590 00001432 B409                <1>     mov ah, 09h
   591 00001434 CD41                <1>     int 41h
   592 00001436 5A                  <1>     pop rdx
   593 00001437 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   594                              <1>     rete    ;Exit!
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 0000143B 7501                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 0000143D C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   595                              <1>     return
    19                              <2> %%_ret:
    20 0000143E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   596                              <1> ctty:
   597                              <1>     return
    19                              <2> %%_ret:
    20 0000143F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   598                              <1> cls:  
   599 00001440 B800440000          <1>     mov eax, 4400h  ;Get device info
   600 00001445 BB01000000          <1>     mov ebx, 1      ;for handle 1
   601 0000144A CD41                <1>     int 41h         ;in dx
   602 0000144C F7C280000000        <1>     test edx, devCharDev
   603 00001452 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   604 00001454 F7C210000000        <1>     test edx, charDevFastOut
   605 0000145A 743E                <1>     jz .doAnsi
   606                              <1>     ;Test if Int 49h uses Int 30h
   607                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   608                              <1>     ;Int 49h MUST be terminated with a IRETQ, within 1024 bytes
   609 0000145C B849350000          <1>     mov eax, 3549h  ;Get the vector for interrupt 49h
   610 00001461 CD41                <1>     int 41h
   611                              <1> .biosCheck:
   612 00001463 66813BCD30          <1>     cmp word [rbx], 30CDh
   613 00001468 740C                <1>     je .biosConfirmed
   614 0000146A 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   615 0000146F 7429                <1>     je .doAnsi
   616 00001471 48FFC3              <1>     inc rbx
   617 00001474 EBED                <1>     jmp short .biosCheck
   618                              <1> .biosConfirmed:
   619                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   620 00001476 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   621 00001478 31DB                <1>     xor ebx, ebx
   622 0000147A CD30                <1>     int 30h
   623 0000147C B40F                <1>     mov ah, 0Fh ;Get screen mode
   624 0000147E CD30                <1>     int 30h
   625 00001480 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   626 00001483 FECA                <1>     dec dl
   627 00001485 B619                <1>     mov dh, 25  ;Number of rows is standard
   628 00001487 31C0                <1>     xor eax, eax
   629 00001489 89C1                <1>     mov ecx, eax
   630 0000148B B707                <1>     mov bh, 7   ;Screen attributes
   631 0000148D B406                <1>     mov ah, 6   ;Scroll
   632 0000148F CD30                <1>     int 30h
   633 00001491 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   634 00001493 B700                <1>     mov bh, 0   ;Page 0
   635 00001495 B402                <1>     mov ah, 2
   636 00001497 CD30                <1>     int 30h
   637                              <1>     return
    19                              <2> %%_ret:
    20 00001499 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   638                              <1> .doAnsi:
   639                              <1> ;If an ANSI driver is not installed, this will simply insert blank lines
   640                              <1> ;4 chars in the ansi routine
   641                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   642                              <1> ; understand ANSI codes
   643 0000149A 488D35ADF3FFFF      <1>     lea rsi, ansiCls
   644 000014A1 B904000000          <1>     mov ecx, 4
   645 000014A6 B406                <1>     mov ah, 06h ;Raw char output
   646                              <1> .ansiLp:
   647 000014A8 AC                  <1>     lodsb   ;Get the char in 
   648 000014A9 88C2                <1>     mov dl, al
   649 000014AB CD41                <1>     int 41h
   650 000014AD FFC9                <1>     dec ecx
   651 000014AF 75F7                <1>     jnz .ansiLp
   652                              <1>     return
    19                              <2> %%_ret:
    20 000014B1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   653                              <1> 
   654                              <1> break:
   655 000014B2 F605E9EBFFFFFF      <1>     test byte [arg1Flg], -1
   656 000014B9 752D                <1>     jnz .argumentProvided
   657                              <1>     ;Here we just get the status of break
   658 000014BB B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   659 000014C0 CD41                <1>     int 41h
   660 000014C2 88D3                <1>     mov bl, dl
   661 000014C4 488D150FF3FFFF      <1>     lea rdx, breakIs
   662 000014CB B409                <1>     mov ah, 09h
   663 000014CD CD41                <1>     int 41h
   664 000014CF 488D15FFF2FFFF      <1>     lea rdx, onMes
   665 000014D6 488D0DF2F2FFFF      <1>     lea rcx, offMes
   666 000014DD 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   667 000014DF 480F44D1            <1>     cmovz rdx, rcx
   668 000014E3 B409                <1>     mov ah, 09h
   669 000014E5 CD41                <1>     int 41h
   670                              <1>     return
    19                              <2> %%_ret:
    20 000014E7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   671                              <1> .argumentProvided:
   672 000014E8 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   673 000014EC AD                  <1>     lodsd   ;Read the word
   674 000014ED 89C3                <1>     mov ebx, eax
   675 000014EF 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   676 000014F4 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   677 000014F7 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   678 000014FC 7416                <1>     je .maybeOn
   679 000014FE 663D4F46            <1>     cmp ax, "OF"
   680 00001502 7523                <1>     jne .badArgument
   681 00001504 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   682 00001509 6681FB4620          <1>     cmp bx, "F "
   683 0000150E 7517                <1>     jne .badArgument
   684                              <1>     ;Set off
   685 00001510 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   686 00001512 EB0B                <1>     jmp short .setBreak
   687                              <1> .maybeOn:
   688 00001514 663D4F4E            <1>     cmp ax, "ON"
   689 00001518 750D                <1>     jne .badArgument
   690                              <1>     ;Set on
   691 0000151A BA01000000          <1>     mov edx, 1
   692                              <1> .setBreak:
   693 0000151F B801330000          <1>     mov eax, 3301h  ;Set break
   694 00001524 CD41                <1>     int 41h
   695                              <1>     return
    19                              <2> %%_ret:
    20 00001526 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   696                              <1> .badArgument:
   697 00001527 488D1530F3FFFF      <1>     lea rdx, badOnOff
   698 0000152E B409                <1>     mov ah, 09h
   699 00001530 CD41                <1>     int 41h
   700                              <1>     return
    19                              <2> %%_ret:
    20 00001532 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   701                              <1> 
   702                              <1> verify:
   703 00001533 F60568EBFFFFFF      <1>     test byte [arg1Flg], -1
   704 0000153A 752D                <1>     jnz .argumentProvided
   705                              <1>     ;Here we just get the status of break
   706 0000153C B800540000          <1>     mov eax, 5400h  ;Get verify status in al
   707 00001541 CD41                <1>     int 41h
   708 00001543 88C3                <1>     mov bl, al
   709 00001545 488D1598F2FFFF      <1>     lea rdx, verifyIs
   710 0000154C B409                <1>     mov ah, 09h
   711 0000154E CD41                <1>     int 41h
   712 00001550 488D157EF2FFFF      <1>     lea rdx, onMes
   713 00001557 488D0D71F2FFFF      <1>     lea rcx, offMes
   714 0000155E 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   715 00001560 480F44D1            <1>     cmovz rdx, rcx
   716 00001564 B409                <1>     mov ah, 09h
   717 00001566 CD41                <1>     int 41h
   718                              <1>     return
    19                              <2> %%_ret:
    20 00001568 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   719                              <1> .argumentProvided:
   720 00001569 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   721 0000156D AD                  <1>     lodsd   ;Read the word
   722 0000156E 89C3                <1>     mov ebx, eax
   723 00001570 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   724 00001575 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   725 00001578 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   726 0000157D 7416                <1>     je .maybeOn
   727 0000157F 663D4F46            <1>     cmp ax, "OF"
   728 00001583 751F                <1>     jne .badArgument
   729 00001585 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   730 0000158A 6681FB4620          <1>     cmp bx, "F "
   731 0000158F 7513                <1>     jne .badArgument
   732                              <1>     ;Set off
   733 00001591 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
   734 00001593 EB0A                <1>     jmp short .setVerify
   735                              <1> .maybeOn:
   736 00001595 663D4F4E            <1>     cmp ax, "ON"
   737 00001599 7509                <1>     jne .badArgument
   738                              <1>     ;Set on
   739 0000159B 31C0                <1>     xor eax, eax
   740 0000159D FFC0                <1>     inc eax ;AL=1 => VERIFY is on
   741                              <1> .setVerify:
   742 0000159F B42E                <1>     mov ah, 2Eh  ;Set Verify
   743 000015A1 CD41                <1>     int 41h
   744                              <1>     return
    19                              <2> %%_ret:
    20 000015A3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   745                              <1> .badArgument:
   746 000015A4 488D15B3F2FFFF      <1>     lea rdx, badOnOff
   747 000015AB B409                <1>     mov ah, 09h
   748 000015AD CD41                <1>     int 41h
   749                              <1>     return
    19                              <2> %%_ret:
    20 000015AF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   750                              <1> 
   751                              <1> rename:
   752                              <1>     return
    19                              <2> %%_ret:
    20 000015B0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   753                              <1> truename:
   754 000015B1 F605EAEAFFFFFF      <1>     test byte [arg1Flg], -1
   755 000015B8 750C                <1>     jnz .argumentProvided
   756 000015BA 488D1553F2FFFF      <1>     lea rdx, badArgs
   757 000015C1 B409                <1>     mov ah, 09h
   758 000015C3 CD41                <1>     int 41h
   759                              <1>     return
    19                              <2> %%_ret:
    20 000015C5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   760                              <1> .argumentProvided:
   761 000015C6 E883040000          <1>     call buildCommandPath
   762                              <1>     ;Explicitly call Truename if we remove truename from this function
   763 000015CB 488D3DFAECFFFF      <1>     lea rdi, searchSpec
   764 000015D2 E81C030000          <1>     call strlen
   765 000015D7 FFC9                <1>     dec ecx ;Don't print terminating null
   766 000015D9 488D15ECECFFFF      <1>     lea rdx, searchSpec
   767 000015E0 BB01000000          <1>     mov ebx, 01
   768 000015E5 B440                <1>     mov ah, 40h
   769 000015E7 CD41                <1>     int 41h
   770 000015E9 E840000000          <1>     call printCRLF
   771                              <1>     return
    19                              <2> %%_ret:
    20 000015EE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   772                              <1> 
   773                              <1> 
   774                              <1> version:
   775 000015EF 488D15FDEDFFFF      <1>     lea rdx, crlf
   776 000015F6 B409                <1>     mov ah, 09h
   777 000015F8 CD41                <1>     int 41h
   778 000015FA 488D1560F0FFFF      <1>     lea rdx, dosVer
   779 00001601 B409                <1>     mov ah, 09h
   780 00001603 CD41                <1>     int 41h
   781 00001605 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
   782 00001607 CD41                <1>     int 41h
   783 00001609 50                  <1>     push rax
   784 0000160A 0FB6C0              <1>     movzx eax, al
   785 0000160D E80A050000          <1>     call printDecimalWord
   786 00001612 B22E                <1>     mov dl, "."
   787 00001614 B402                <1>     mov ah, 02h
   788 00001616 CD41                <1>     int 41h
   789 00001618 58                  <1>     pop rax
   790 00001619 0FB6C4              <1>     movzx eax, ah
   791 0000161C E8FB040000          <1>     call printDecimalWord
   792 00001621 488D15CBEDFFFF      <1>     lea rdx, crlf
   793 00001628 B409                <1>     mov ah, 09h
   794 0000162A CD41                <1>     int 41h
   795                              <1>     return
    19                              <2> %%_ret:
    20 0000162C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   796                              <1> 
   797                              <1> launchChild:
   798                              <1> ;We run EXEC on this and the child task will return via applicationReturn
   799                              <1>     return
    19                              <2> %%_ret:
    20 0000162D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   800                              <1> 
    16                                  %include "./Source/Utils/COMMAND/Source/cmdUtils.asm"
    17                              <1> ;Misc functions and subroutines for command.com
    18                              <1> 
    19                              <1> printCRLF:
    20 0000162E 488D15BEEDFFFF      <1>     lea rdx, crlf
    21 00001635 BB02000000          <1>     mov ebx, 2
    22 0000163A B440                <1>     mov ah, 40h ;Print a new line
    23 0000163C B902000000          <1>     mov ecx, 2  ;Two chars to write
    24 00001641 CD41                <1>     int 41h
    25                              <1>     return
    19                              <2> %%_ret:
    20 00001643 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    26                              <1> printDate:
    27                              <1> ;Input: eax = Packed Date
    28                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
    29                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
    30                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
    31                              <1> ;       ebx = 0 => Print two digit year
    32                              <1> ;       ebx = 1 => Print four digit year
    33 00001644 53                  <1>     push rbx
    34 00001645 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    35 00001647 803DD7E9FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    36 0000164E 7240                <1>     jb .usDate
    37 00001650 777C                <1>     ja .jpnDate
    38                              <1> ;European: DD/MM/YY
    39 00001652 251F000000          <1>     and eax, 1Fh    ;Save day bits
    40 00001657 E8B0000000          <1>     call .printFirst
    41 0000165C 8A15CEE9FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    42 00001662 B402                <1>     mov ah, 02h
    43 00001664 CD41                <1>     int 41h
    44                              <1> 
    45 00001666 89C8                <1>     mov eax, ecx
    46 00001668 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    47 0000166D C1E805              <1>     shr eax, 5
    48 00001670 E8B3000000          <1>     call .printSecond
    49                              <1> 
    50 00001675 8A15B5E9FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    51 0000167B B402                <1>     mov ah, 02h
    52 0000167D CD41                <1>     int 41h
    53                              <1> 
    54 0000167F 89C8                <1>     mov eax, ecx
    55 00001681 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    56 00001686 C1E809              <1>     shr eax, 9
    57 00001689 5B                  <1>     pop rbx ;Get the year signature back
    58 0000168A E8A9000000          <1>     call .printYear
    59                              <1>     return
    19                              <2> %%_ret:
    20 0000168F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    60                              <1> .usDate:
    61                              <1> ;US: MM/DD/YY
    62 00001690 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    63 00001695 C1E805              <1>     shr eax, 5
    64 00001698 E86F000000          <1>     call .printFirst
    65                              <1> 
    66 0000169D 8A158DE9FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    67 000016A3 B402                <1>     mov ah, 02h
    68 000016A5 CD41                <1>     int 41h
    69                              <1> 
    70 000016A7 89C8                <1>     mov eax, ecx
    71 000016A9 251F000000          <1>     and eax, 1Fh    ;Save day bits
    72 000016AE E875000000          <1>     call .printSecond
    73                              <1> 
    74 000016B3 8A1577E9FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    75 000016B9 B402                <1>     mov ah, 02h
    76 000016BB CD41                <1>     int 41h
    77                              <1> 
    78 000016BD 89C8                <1>     mov eax, ecx
    79 000016BF 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    80 000016C4 C1E809              <1>     shr eax, 9
    81 000016C7 5B                  <1>     pop rbx ;Get the year signature back
    82 000016C8 E86B000000          <1>     call .printYear
    83                              <1>     return
    19                              <2> %%_ret:
    20 000016CD C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    84                              <1> .jpnDate:
    85                              <1> ;Japan: YY/MM/DD
    86 000016CE 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    87 000016D3 C1E809              <1>     shr eax, 9
    88 000016D6 5B                  <1>     pop rbx ;Get the year signature back
    89 000016D7 E85C000000          <1>     call .printYear
    90                              <1> 
    91 000016DC 8A154EE9FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    92 000016E2 B402                <1>     mov ah, 02h
    93 000016E4 CD41                <1>     int 41h
    94                              <1> 
    95 000016E6 89C8                <1>     mov eax, ecx
    96 000016E8 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    97 000016ED C1E805              <1>     shr eax, 5
    98 000016F0 E833000000          <1>     call .printSecond
    99                              <1> 
   100 000016F5 8A1535E9FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
   101 000016FB B402                <1>     mov ah, 02h
   102 000016FD CD41                <1>     int 41h
   103                              <1> 
   104 000016FF 89C8                <1>     mov eax, ecx
   105 00001701 251F000000          <1>     and eax, 1Fh    ;Save day bits
   106 00001706 E81D000000          <1>     call .printSecond
   107                              <1>     return
    19                              <2> %%_ret:
    20 0000170B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   108                              <1> 
   109                              <1> ;Each of these require eax setup correctly
   110                              <1> .printFirst:
   111 0000170C 51                  <1>     push rcx
   112 0000170D E87B040000          <1>     call getDecimalWord
   113 00001712 84ED                <1>     test ch, ch ;Do we have an upper digit?
   114 00001714 7504                <1>     jnz .skipSpace
   115 00001716 88CD                <1>     mov ch, cl
   116 00001718 B120                <1>     mov cl, " "
   117                              <1> .skipSpace:
   118 0000171A 88CA                <1>     mov dl, cl
   119 0000171C B402                <1>     mov ah, 02h
   120 0000171E CD41                <1>     int 41h
   121 00001720 88EA                <1>     mov dl, ch
   122 00001722 B402                <1>     mov ah, 02h
   123 00001724 CD41                <1>     int 41h
   124 00001726 59                  <1>     pop rcx
   125                              <1>     return
    19                              <2> %%_ret:
    20 00001727 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   126                              <1> .printSecond:
   127 00001728 51                  <1>     push rcx
   128 00001729 E85F040000          <1>     call getDecimalWord
   129 0000172E 84ED                <1>     test ch, ch ;Do we have an upper digit?
   130 00001730 75E8                <1>     jnz .skipSpace
   131 00001732 88CD                <1>     mov ch, cl
   132 00001734 B130                <1>     mov cl, "0"
   133 00001736 EBE2                <1>     jmp short .skipSpace
   134                              <1> .printYear:
   135 00001738 05BC070000          <1>     add eax, 1980
   136 0000173D 51                  <1>     push rcx
   137 0000173E 53                  <1>     push rbx
   138 0000173F E849040000          <1>     call getDecimalWord ;Get unpacked in rcx
   139 00001744 5B                  <1>     pop rbx
   140 00001745 84DB                <1>     test bl, bl
   141 00001747 740C                <1>     jz .twoDigitYear
   142 00001749 88CA                <1>     mov dl, cl  ;Print the first digit
   143 0000174B B402                <1>     mov ah, 02h
   144 0000174D CD41                <1>     int 41h
   145 0000174F 88EA                <1>     mov dl, ch  ;Print the second digit
   146 00001751 B402                <1>     mov ah, 02h
   147 00001753 CD41                <1>     int 41h
   148                              <1> .twoDigitYear:
   149 00001755 C1E910              <1>     shr ecx, 10h    ;Get high word low
   150 00001758 88CA                <1>     mov dl, cl  ;Print the upper digit
   151 0000175A B402                <1>     mov ah, 02h
   152 0000175C CD41                <1>     int 41h
   153 0000175E 88EA                <1>     mov dl, ch  ;Print the lower digit
   154 00001760 B402                <1>     mov ah, 02h
   155 00001762 CD41                <1>     int 41h
   156 00001764 59                  <1>     pop rcx
   157                              <1>     return
    19                              <2> %%_ret:
    20 00001765 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   158                              <1> 
   159                              <1> 
   160                              <1> 
   161                              <1> printTime:
   162                              <1> ;Input: eax = Packed Time
   163                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   164                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   165 00001766 89C1                <1>     mov ecx, eax
   166 00001768 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   167 0000176D C1E80B              <1>     shr eax, 11
   168 00001770 803DBFE8FFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   169 00001777 750B                <1>     jne .ampm
   170 00001779 E85A000000          <1>     call .printHours
   171 0000177E E831000000          <1>     call .printMinutes
   172                              <1>     return
    19                              <2> %%_ret:
    20 00001783 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   173                              <1> .ampm:
   174 00001784 3D0C000000          <1>     cmp eax, 12
   175 00001789 7713                <1>     ja .pm
   176 0000178B 7416                <1>     je .pm2
   177 0000178D E846000000          <1>     call .printHours
   178 00001792 E81D000000          <1>     call .printMinutes
   179 00001797 B261                <1>     mov dl, "a"
   180 00001799 B402                <1>     mov ah, 02h
   181 0000179B CD41                <1>     int 41h
   182                              <1>     return
    19                              <2> %%_ret:
    20 0000179D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   183                              <1> .pm:
   184 0000179E 2D0C000000          <1>     sub eax, 12
   185                              <1> .pm2:
   186 000017A3 E830000000          <1>     call .printHours
   187 000017A8 E807000000          <1>     call .printMinutes
   188 000017AD B270                <1>     mov dl, "p"
   189 000017AF B402                <1>     mov ah, 02h
   190 000017B1 CD41                <1>     int 41h
   191                              <1>     return
    19                              <2> %%_ret:
    20 000017B3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   192                              <1> .printMinutes:
   193 000017B4 8A1578E8FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   194 000017BA B402                <1>     mov ah, 02h
   195 000017BC CD41                <1>     int 41h
   196                              <1> 
   197 000017BE 89C8                <1>     mov eax, ecx
   198 000017C0 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   199 000017C5 C1E805              <1>     shr eax, 5
   200                              <1> .printMinutesAlt:
   201 000017C8 51                  <1>     push rcx
   202 000017C9 E8BF030000          <1>     call getDecimalWord
   203 000017CE 84ED                <1>     test ch, ch ;Do we have an upper digit?
   204 000017D0 7514                <1>     jnz .skipSpace
   205 000017D2 88CD                <1>     mov ch, cl
   206 000017D4 B130                <1>     mov cl, "0"
   207 000017D6 EB0E                <1>     jmp short .skipSpace
   208                              <1> .printHours:
   209 000017D8 51                  <1>     push rcx
   210 000017D9 E8AF030000          <1>     call getDecimalWord
   211 000017DE 84ED                <1>     test ch, ch ;Do we have an upper digit?
   212 000017E0 7504                <1>     jnz .skipSpace
   213 000017E2 88CD                <1>     mov ch, cl
   214 000017E4 B120                <1>     mov cl, " "
   215                              <1> .skipSpace:
   216 000017E6 88CA                <1>     mov dl, cl
   217 000017E8 B402                <1>     mov ah, 02h
   218 000017EA CD41                <1>     int 41h
   219 000017EC 88EA                <1>     mov dl, ch
   220 000017EE B402                <1>     mov ah, 02h
   221 000017F0 CD41                <1>     int 41h
   222 000017F2 59                  <1>     pop rcx
   223                              <1>     return
    19                              <2> %%_ret:
    20 000017F3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   224                              <1> 
   225                              <1> 
   226                              <1> putVersionInPrompt:
   227 000017F4 488D1566EEFFFF      <1>     lea rdx, dosVer
   228 000017FB B409                <1>     mov ah, 09h ;Print String
   229 000017FD CD41                <1>     int 41h
   230 000017FF B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   231 00001801 CD41                <1>     int 41h
   232 00001803 50                  <1>     push rax    ;Save minor version
   233 00001804 E89C000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   234 00001809 E8B4000000          <1>     call printPackedBCD ;Print al
   235 0000180E B22E                <1>     mov dl, "."
   236 00001810 B402                <1>     mov ah, 02h
   237 00001812 CD41                <1>     int 41h
   238 00001814 58                  <1>     pop rax
   239 00001815 88E0                <1>     mov al, ah  ;Get the minor version low
   240 00001817 E889000000          <1>     call hexToBCD
   241 0000181C E8A1000000          <1>     call printPackedBCD
   242                              <1>     return
    19                              <2> %%_ret:
    20 00001821 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   243                              <1> putEscInPrompt:
   244 00001822 B21B                <1>     mov dl, ESC
   245 00001824 EB1C                <1>     jmp short outChar
   246                              <1> 
   247                              <1> putMoneyInPrompt:
   248 00001826 B224                <1>     mov dl, "$"
   249 00001828 EB18                <1>     jmp short outChar
   250                              <1> 
   251                              <1> putEquInPrompt:
   252 0000182A B23D                <1>     mov dl, "="
   253 0000182C EB14                <1>     jmp short outChar
   254                              <1> 
   255                              <1> putPipeInPrompt:
   256 0000182E B27C                <1>     mov dl, "|"
   257 00001830 EB10                <1>     jmp short outChar
   258                              <1> 
   259                              <1> putGTinPrompt:
   260 00001832 B23E                <1>     mov dl, ">"
   261 00001834 EB0C                <1>     jmp short outChar
   262                              <1> 
   263                              <1> putLTinPrompt:
   264 00001836 B23C                <1>     mov dl, "<"
   265 00001838 EB08                <1>     jmp short outChar
   266                              <1> 
   267                              <1> putDriveInPrompt:
   268 0000183A B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   269 0000183C CD41                <1>     int 41h
   270 0000183E 0441                <1>     add al, "A" ;Convert to letter
   271 00001840 88C2                <1>     mov dl, al
   272                              <1> outChar:
   273 00001842 B402                <1>     mov ah, 02h ;Echo to STDOUT
   274 00001844 CD41                <1>     int 41h
   275                              <1>     return
    19                              <2> %%_ret:
    20 00001846 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   276                              <1> putCWDInPrompt:
   277 00001847 488D3DFDE7FFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   278 0000184E B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   279 00001850 CD41                <1>     int 41h
   280 00001852 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   281 00001854 FEC2                <1>     inc dl
   282 00001856 0441                <1>     add al, "A" ;Convert to letter
   283 00001858 B43A                <1>     mov ah, ":"
   284 0000185A 66AB                <1>     stosw   ;Store X:, rdi+=2
   285 0000185C 8A05C1E7FFFF        <1>     mov al, byte [pathSep]
   286 00001862 AA                  <1>     stosb   ;Store pathSep, inc rdi
   287 00001863 B447                <1>     mov ah, 47h ;Get Current Working Directory
   288 00001865 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   289 00001868 CD41                <1>     int 41h
   290 0000186A E884000000          <1>     call strlen
   291 0000186F 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   292                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   293 00001875 B440                <1>     mov ah, 40h ;Write to handle
   294 00001877 BB01000000          <1>     mov ebx, 1  ;STDOUT
   295 0000187C 488D15C8E7FFFF      <1>     lea rdx, currDirStr
   296 00001883 CD41                <1>     int 41h
   297                              <1>     return
    19                              <2> %%_ret:
    20 00001885 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   298                              <1> 
   299                              <1> BCDtoHex:
   300                              <1> ;Converts a BCD value to a Hex byte
   301                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   302 00001886 51                  <1>     push rcx
   303 00001887 0FB6C0              <1>     movzx eax, al   ;Zero extend
   304 0000188A 89C1                <1>     mov ecx, eax    ;Save al in ecx
   305 0000188C 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   306 00001891 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   307 00001897 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   308                              <1> .bth:
   309 0000189A 050A000000          <1>     add eax, 10
   310 0000189F FFC9                <1>     dec ecx
   311 000018A1 75F7                <1>     jnz .bth
   312 000018A3 59                  <1>     pop rcx
   313 000018A4 C3                  <1>     ret
   314                              <1> 
   315                              <1> hexToBCD:
   316                              <1> ;Converts a Hex byte into two BCD digits
   317                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   318 000018A5 51                  <1>     push rcx
   319 000018A6 0FB6C0              <1>     movzx eax, al   ;Zero extend
   320 000018A9 31C9                <1>     xor ecx, ecx
   321                              <1> .htb0:
   322 000018AB 3D0A000000          <1>     cmp eax, 10
   323 000018B0 7209                <1>     jb .htb1
   324 000018B2 2D0A000000          <1>     sub eax, 10
   325 000018B7 FFC1                <1>     inc ecx
   326 000018B9 EBF0                <1>     jmp short .htb0
   327                              <1> .htb1:
   328 000018BB C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   329 000018BE 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   330 000018C0 59                  <1>     pop rcx
   331 000018C1 C3                  <1>     ret
   332                              <1> 
   333                              <1> printPackedBCD:
   334                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   335                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   336                              <1> ;Preserves all registers
   337 000018C2 50                  <1>     push rax
   338 000018C3 52                  <1>     push rdx
   339 000018C4 88C4                <1>     mov ah, al
   340 000018C6 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   341 000018C8 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   342 000018CB 7508                <1>     jnz .upperNybble
   343 000018CD B220                <1>     mov dl, " "
   344 000018CF B402                <1>     mov ah, 02h
   345 000018D1 CD41                <1>     int 41h
   346 000018D3 EB0E                <1>     jmp short .lowerNybble
   347                              <1> .upperNybble:
   348 000018D5 50                  <1>     push rax
   349 000018D6 C0EC04              <1>     shr ah, 4
   350 000018D9 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   351 000018DC 88E2                <1>     mov dl, ah
   352 000018DE B402                <1>     mov ah, 02h ;Print DL
   353 000018E0 CD41                <1>     int 41h
   354 000018E2 58                  <1>     pop rax
   355                              <1> .lowerNybble:
   356 000018E3 0430                <1>     add al, "0"
   357 000018E5 88C2                <1>     mov dl, al
   358 000018E7 B402                <1>     mov ah, 02h ;Print DL
   359 000018E9 CD41                <1>     int 41h
   360 000018EB 5A                  <1>     pop rdx
   361 000018EC 58                  <1>     pop rax
   362                              <1>     return
    19                              <2> %%_ret:
    20 000018ED C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   363                              <1> 
   364                              <1> getCurrentDrive:
   365                              <1> ;Returns the current drive in al
   366 000018EE B419                <1>     mov ah, 19h
   367 000018F0 CD41                <1>     int 41h
   368                              <1>     return
    19                              <2> %%_ret:
    20 000018F2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   369                              <1> 
   370                              <1> strlen:
   371                              <1> ;Gets the length of a ASCIIZ string
   372                              <1> ;Input: rdi = Source buffer
   373                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   374 000018F3 50                  <1>     push rax
   375 000018F4 57                  <1>     push rdi
   376 000018F5 30C0                <1>     xor al, al
   377 000018F7 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   378 000018F9 FFC9                <1>     dec ecx ;rcx = -1
   379 000018FB F2AE                <1>     repne scasb
   380 000018FD F7D1                <1>     not ecx
   381 000018FF 5F                  <1>     pop rdi
   382 00001900 58                  <1>     pop rax
   383                              <1>     return
    19                              <2> %%_ret:
    20 00001901 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   384                              <1> 
   385                              <1> findTerminatorOrEOC:
   386                              <1> ;Advances rsi to the next string terminator char or the next End of command
   387                              <1> ; char
   388                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   389                              <1> ;If a end of command char found, also sets CF
   390 00001902 AC                  <1>     lodsb
   391 00001903 3C0D                <1>     cmp al, CR
   392 00001905 7419                <1>     je .endOfInput
   393 00001907 E82B000000          <1>     call isALterminator
   394 0000190C 7419                <1>     jz .exit
   395 0000190E 3A050FE7FFFF        <1>     cmp al, byte [pathSep]
   396 00001914 7411                <1>     je .exit
   397 00001916 3A0508E7FFFF        <1>     cmp al, byte [switchChar]
   398 0000191C 7409                <1>     je .exit
   399 0000191E EBE2                <1>     jmp short findTerminatorOrEOC
   400                              <1> .endOfInput:
   401 00001920 E802000000          <1>     call .exit
   402 00001925 F9                  <1>     stc 
   403                              <1>     return
    19                              <2> %%_ret:
    20 00001926 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   404                              <1> .exit:
   405 00001927 48FFCE              <1>     dec rsi ;Point to the terminating char
   406                              <1>     return
    19                              <2> %%_ret:
    20 0000192A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   407                              <1> 
   408                              <1> findTerminator:
   409                              <1> ;Advances rsi to the next string terminator char
   410                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   411 0000192B AC                  <1>     lodsb
   412 0000192C E806000000          <1>     call isALterminator
   413 00001931 75F8                <1>     jnz findTerminator
   414 00001933 48FFCE              <1>     dec rsi
   415                              <1>     return
    19                              <2> %%_ret:
    20 00001936 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   416                              <1> isALterminator:
   417                              <1> ;Returns: ZF=NZ if al is not a terminator (Not including CR)
   418                              <1> ;         ZF=ZY if al is a terminator
   419 00001937 3C20                <1>     cmp al, " "
   420                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001939 74(36)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   421 0000193B 3C3B                <1>     cmp al, ";"
   422                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000193D 74(36)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   423 0000193F 3C3D                <1>     cmp al, "="
   424                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001941 74(36)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   425 00001943 3C2C                <1>     cmp al, ","
   426                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001945 74(36)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   427 00001947 3C09                <1>     cmp al, TAB
   428                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001949 74(36)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   429 0000194B 3C0A                <1>     cmp al, LF
   430                              <1>     return
    19                              <2> %%_ret:
    20 0000194D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   431                              <1> 
   432                              <1> findEndOfCommand:
   433                              <1> ;Moves rsi to the | or CR that terminates this command
   434 0000194E AC                  <1>     lodsb
   435 0000194F E806000000          <1>     call isALEndOfCommand
   436 00001954 75F8                <1>     jnz findEndOfCommand
   437 00001956 48FFCE              <1>     dec rsi
   438                              <1>     return
    19                              <2> %%_ret:
    20 00001959 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   439                              <1> isALEndOfCommand:
   440 0000195A 3C7C                <1>     cmp al, "|"
   441                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000195C 74(59)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   442 0000195E 3C0D                <1>     cmp al, CR
   443                              <1>     return
    19                              <2> %%_ret:
    20 00001960 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   444                              <1> 
   445                              <1> scanForRedir:
   446                              <1> ;Returns: AL = 0 => No redirection, terminate with CR
   447                              <1> ;         AL = 1 => Redirection, type <
   448                              <1> ;         AL = 10 => Redir, type >
   449                              <1> ;         AL = 20 => Redir, type >>
   450                              <1> ;If multiple redirs found, the last one of that type counts.
   451 00001961 56                  <1>     push rsi
   452 00001962 55                  <1>     push rbp
   453 00001963 30E4                <1>     xor ah, ah
   454                              <1> .lp:
   455 00001965 AC                  <1>     lodsb
   456 00001966 3C3E                <1>     cmp al, ">"
   457                              <1> .exit:
   458 00001968 5D                  <1>     pop rbp
   459 00001969 5E                  <1>     pop rsi
   460                              <1>     return
    19                              <2> %%_ret:
    20 0000196A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   461                              <1> 
   462                              <1> 
   463                              <1> skipSpaces:
   464                              <1> ;Also skips tabs
   465                              <1> ;Input: rsi must point to the start of the data string
   466                              <1> ;Output: rsi points to the first non-space char
   467 0000196B 803E20              <1>     cmp byte [rsi], " "
   468 0000196E 7405                <1>     je .skip    ;If equal to a space, skip it
   469 00001970 803E09              <1>     cmp byte [rsi], TAB
   470                              <1>     retne   ;If not equal to a tab or space, return
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001973 75(6A)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   471                              <1> .skip:
   472 00001975 48FFC6              <1>     inc rsi
   473 00001978 EBF1                <1>     jmp short skipSpaces
   474                              <1> 
   475                              <1> printPrompt:
   476 0000197A 66813D9EE6FFFFFFFF  <1>     cmp word [promptPtr], -1
   477 00001983 750B                <1>     jne .validPrompt
   478                              <1>     ;Here we print the default prompt
   479 00001985 E8BDFEFFFF          <1>     call putCWDInPrompt
   480 0000198A E8A3FEFFFF          <1>     call putGTinPrompt
   481                              <1>     return
    19                              <2> %%_ret:
    20 0000198F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   482                              <1> .validPrompt:
   483                              <1>     return
    19                              <2> %%_ret:
    20 00001990 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   484                              <1> 
   485                              <1> clearCommandState:
   486                              <1> ;Clears the command state
   487 00001991 488D3D06E7FFFF      <1>     lea rdi, cmdStatePtr
   488 00001998 B90A000000          <1>     mov ecx, cmdStateL
   489 0000199D 31C0                <1>     xor eax, eax
   490 0000199F F3AA                <1>     rep stosb
   491                              <1>     return
    19                              <2> %%_ret:
    20 000019A1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   492                              <1> 
   493                              <1> clearCommandLineState:
   494                              <1> ;Clears the command line state after a 0Dh encountered
   495 000019A2 488D3DE5E6FFFF      <1>     lea rdi, cmdLineStatePtr
   496 000019A9 B91A000000          <1>     mov ecx, cmdLineStateL
   497 000019AE 31C0                <1>     xor eax, eax
   498 000019B0 F3AA                <1>     rep stosb
   499                              <1>     return
    19                              <2> %%_ret:
    20 000019B2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   500                              <1> 
   501                              <1> asciiToFCB:
   502                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   503                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   504                              <1> ;Also doesn't check if chars are valid
   505                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   506                              <1> ;Name is space padded.
   507                              <1> ;Input: rsi = ASCII string buffer
   508                              <1> ;       rdi = FCB name buffer
   509                              <1> ;Output: al = Char that terminated the source string 
   510 000019B3 53                  <1>     push rbx    
   511 000019B4 57                  <1>     push rdi
   512 000019B5 B90B000000          <1>     mov ecx, 11
   513 000019BA B020                <1>     mov al, " "
   514 000019BC F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   515 000019BE 5F                  <1>     pop rdi
   516 000019BF 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   517 000019C2 EB1D                <1>     jmp short asciiFilenameToFCB.processName
   518                              <1> asciiFilenameToFCB:
   519                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   520                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   521                              <1> ;Also doesn't check if chars are valid
   522                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   523                              <1> ;Name is space padded.
   524                              <1> ;Input: rsi = ASCII string buffer
   525                              <1> ;       rdi = FCB name buffer
   526                              <1> ;Output: al = Char that terminated the source string 
   527 000019C4 53                  <1>     push rbx    
   528 000019C5 57                  <1>     push rdi
   529 000019C6 B90B000000          <1>     mov ecx, 11
   530 000019CB B020                <1>     mov al, " "
   531 000019CD F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   532 000019CF 5F                  <1>     pop rdi
   533 000019D0 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   534                              <1>     ;Preprocess for Dir Searches
   535 000019D3 803E2E              <1>     cmp byte [rsi], "."
   536 000019D6 7509                <1>     jne .processName
   537 000019D8 A4                  <1>     movsb   ;Store the first dot
   538 000019D9 803E2E              <1>     cmp byte [rsi], "."
   539 000019DC 752C                <1>     jne .exitBadChar
   540 000019DE A4                  <1>     movsb
   541 000019DF EB29                <1>     jmp short .exitBadChar
   542                              <1> .processName:
   543 000019E1 AC                  <1>     lodsb   ;Get the char in al
   544 000019E2 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   545 000019E4 7426                <1>     jz .exit
   546 000019E6 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   547 000019E8 7407                <1>     je .extSpace
   548 000019EA 3C2E                <1>     cmp al, "."
   549 000019EC 740C                <1>     je .ext
   550 000019EE AA                  <1>     stosb   ;Store the char
   551 000019EF EBF0                <1>     jmp short .processName
   552                              <1> .extSpace:
   553                              <1> ;Now we scan for a period in the name
   554 000019F1 AC                  <1>     lodsb   ;Get a char and increase rsi
   555 000019F2 84C0                <1>     test al, al
   556 000019F4 7416                <1>     jz .exit
   557 000019F6 3C2E                <1>     cmp al, "."     ;If al is not a period...
   558 000019F8 75F7                <1>     jne .extSpace   ; keep searching
   559                              <1> .ext:
   560 000019FA 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   561                              <1> .processExt:
   562 000019FE AC                  <1>     lodsb
   563 000019FF 84C0                <1>     test al, al
   564 00001A01 7409                <1>     jz .exit
   565 00001A03 3C20                <1>     cmp al, " "
   566 00001A05 7405                <1>     je .exit
   567 00001A07 AA                  <1>     stosb
   568 00001A08 EBF4                <1>     jmp short .processExt
   569                              <1> .exitBadChar:
   570 00001A0A 30C0                <1>     xor al, al  ;Return a null terminator
   571                              <1> .exit:
   572 00001A0C 5B                  <1>     pop rbx
   573                              <1>     return
    19                              <2> %%_ret:
    20 00001A0D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   574                              <1> 
   575                              <1> FCBToAsciiz:
   576                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   577                              <1> ;Name is space padded too
   578                              <1> ;Input: rsi = FCB name buffer
   579                              <1> ;       rdi = ASCIIZ string buffer
   580 00001A0E B908000000          <1>     mov ecx, 8
   581 00001A13 F3A4                <1>     rep movsb   ;Move the name over
   582                              <1> .scanNameSpace:
   583 00001A15 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   584 00001A19 750D                <1>     jne .ext
   585 00001A1B 48FFCF              <1>     dec rdi
   586 00001A1E FFC1                <1>     inc ecx
   587 00001A20 81F908000000        <1>     cmp ecx, 8
   588 00001A26 72ED                <1>     jb .scanNameSpace
   589                              <1> .ext:
   590 00001A28 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   591 00001A2D 7506                <1>     jne .validExt
   592 00001A2F 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   593 00001A33 7415                <1>     je .exit
   594                              <1> .validExt:
   595 00001A35 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   596 00001A37 AA                  <1>     stosb
   597 00001A38 B903000000          <1>     mov ecx, 3
   598 00001A3D F3A4                <1>     rep movsb   ;Move the three extension chars over
   599                              <1> .scanExtSpace:
   600 00001A3F 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   601 00001A43 7505                <1>     jne .exit
   602 00001A45 48FFCF              <1>     dec rdi
   603 00001A48 EBF5                <1>     jmp short .scanExtSpace
   604                              <1> .exit:
   605 00001A4A 31C0                <1>     xor eax, eax
   606 00001A4C AA                  <1>     stosb   ;Store a null at the end
   607                              <1>     return
    19                              <2> %%_ret:
    20 00001A4D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   608                              <1> 
   609                              <1> buildCommandPath:
   610                              <1> ;Based on the first argument on the command line
   611                              <1> ; will build a full ASCIIZ path in searchSpec to the file/dir specified
   612                              <1>     ;If this is a relative path, will handle correctly (tho unnecessary)
   613 00001A4E 0FB6054EE6FFFF      <1>     movzx eax, byte [arg1Off]
   614 00001A55 488D35DDE6FFFF      <1>     lea rsi, cmdBuffer
   615 00001A5C 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   616 00001A5F 8A3DBEE5FFFF        <1>     mov bh, byte [pathSep]
   617 00001A65 B33A                <1>     mov bl, ":"
   618 00001A67 383E                <1>     cmp byte [rsi], bh  ;Is the first char relative to root?
   619 00001A69 7458                <1>     je .absoluteCurrent
   620 00001A6B 66395E01            <1>     cmp word [rsi + 1], bx    ;This checks if absolute or relative
   621 00001A6F 746D                <1>     je .absolutePath
   622 00001A71 385E01              <1>     cmp byte [rsi + 1], bl  ;Check if a drive separator
   623 00001A74 7409                <1>     je .relativeGiven
   624                              <1> ;No drive letter given, must get Current Drive
   625 00001A76 E873FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   626 00001A7B 0441                <1>     add al, "A"
   627 00001A7D EB0B                <1>     jmp short .relativeCommon
   628                              <1> .relativeGiven:
   629                              <1> ;Drive letter pointed to by AL
   630 00001A7F 8A06                <1>     mov al, byte [rsi]  ;Get drive letter in al
   631 00001A81 24DF                <1>     and al, 0DFh    ;Convert to UC
   632 00001A83 4881C602000000      <1>     add rsi, 2  ;Skip the given drive letter and the colon
   633                              <1> .relativeCommon:
   634                              <1>     ;al has drive letter
   635 00001A8A 88C2                <1>     mov dl, al  ;Save drive letter in dl
   636 00001A8C 80EA40              <1>     sub dl, "@" ;Get 1 based drive number in dl
   637 00001A8F B43A                <1>     mov ah, ":" ;Get the colon in too
   638 00001A91 488D3D34E8FFFF      <1>     lea rdi, searchSpec ;Start building our search path here
   639 00001A98 66AB                <1>     stosw   ;Store X:
   640 00001A9A 8A0583E5FFFF        <1>     mov al, byte [pathSep]
   641 00001AA0 AA                  <1>     stosb   ;Store pathSep
   642 00001AA1 56                  <1>     push rsi    ;Save user input string
   643 00001AA2 4889FE              <1>     mov rsi, rdi    ;Put the current directory here for this drive
   644 00001AA5 B447                <1>     mov ah, 47h ;Get Current Working Directory, dl has drive number
   645 00001AA7 CD41                <1>     int 41h ;Won't fail as drive letter in dl confirmed ok
   646 00001AA9 5E                  <1>     pop rsi
   647                              <1>     ;Now want to find terminating null
   648 00001AAA 30C0                <1>     xor al, al
   649 00001AAC 31C9                <1>     xor ecx, ecx
   650 00001AAE FFC9                <1>     dec ecx
   651 00001AB0 F2AE                <1>     repne scasb ;Search for the terminating null
   652 00001AB2 48FFCF              <1>     dec rdi ;Go back one once found
   653 00001AB5 8A0568E5FFFF        <1>     mov al, byte [pathSep]
   654 00001ABB 3847FF              <1>     cmp byte [rdi - 1], al
   655 00001ABE 7425                <1>     je .buildPath ;If the previous char is a pathsep, skip storing another
   656 00001AC0 AA                  <1>     stosb   ;Store the pathsep
   657 00001AC1 EB22                <1>     jmp short .buildPath  ;Now we copy the user string over and good to go
   658                              <1> .absoluteCurrent:
   659 00001AC3 E826FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   660 00001AC8 0441                <1>     add al, "A"
   661 00001ACA B43A                <1>     mov ah, ":" ;ax has X: now to store 
   662 00001ACC 488D3DF9E7FFFF      <1>     lea rdi, searchSpec
   663 00001AD3 66AB                <1>     stosw
   664 00001AD5 8A0548E5FFFF        <1>     mov al, byte [pathSep]
   665 00001ADB AA                  <1>     stosb
   666 00001ADC EB07                <1>     jmp short .buildPath
   667                              <1> .absolutePath:
   668 00001ADE 488D3DE7E7FFFF      <1>     lea rdi, searchSpec
   669                              <1> .buildPath:
   670 00001AE5 E81EF2FFFF          <1>     call copyCommandTailItem    ;Terminates with a 0 for free
   671 00001AEA 488D35DBE7FFFF      <1>     lea rsi, searchSpec
   672 00001AF1 488D3DD4E7FFFF      <1>     lea rdi, searchSpec
   673 00001AF8 B460                <1>     mov ah, 60h ;Truename it to avoid issues
   674 00001AFA CD41                <1>     int 41h
   675                              <1>     retc    ;Return if an error with CF=CY
    63                              <2> cret c
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 00001AFC 7301                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 00001AFE C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   676                              <1>     ;Here we do one final check to ensure we dont end up with a A: but A:"\"
   677 00001AFF 30C0                <1>     xor al, al
   678 00001B01 31C9                <1>     xor ecx, ecx
   679 00001B03 FFC9                <1>     dec ecx
   680 00001B05 F2AE                <1>     repne scasb
   681 00001B07 48FFCF              <1>     dec rdi ;Go back to the final non-null char
   682 00001B0A 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is the final non-null char a colon?
   683 00001B0E 750A                <1>     jne .okExit   ;Return if not
   684 00001B10 31C0                <1>     xor eax, eax
   685 00001B12 8A050BE5FFFF        <1>     mov al, byte [pathSep]  ;IF it is, insert a pathsep
   686 00001B18 66AB                <1>     stosw   ;Store the terminating 0 after the pathsep
   687                              <1> .okExit:
   688 00001B1A F8                  <1>     clc
   689                              <1>     return
    19                              <2> %%_ret:
    20 00001B1B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   690                              <1> printDecimalWord:
   691                              <1> ;Takes qword in rax and print it's decimal representation
   692                              <1> ;Takes the qword in eax and prints its decimal representation
   693 00001B1C 31C9                <1>     xor ecx, ecx
   694 00001B1E 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   695 00001B20 85C0                <1>     test eax, eax
   696 00001B22 750C                <1>     jnz .notZero
   697 00001B24 B930000000          <1>     mov ecx, "0"
   698 00001B29 BD01000000          <1>     mov ebp, 1  ;Print one digit
   699 00001B2E EB3E                <1>     jmp short .dpfb2
   700                              <1> .notZero:
   701 00001B30 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   702 00001B32 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   703                              <1> .dpfb0:
   704 00001B37 FFC5                <1>     inc ebp
   705 00001B39 81FD08000000        <1>     cmp ebp, 8
   706 00001B3F 7206                <1>     jb .dpfb00
   707 00001B41 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   708 00001B45 EB04                <1>     jmp short .dpfb01
   709                              <1> .dpfb00:
   710 00001B47 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   711                              <1> .dpfb01:
   712 00001B4B 31D2                <1>     xor edx, edx
   713 00001B4D 48F7F6              <1>     div rsi
   714 00001B50 80C230              <1>     add dl, '0'
   715 00001B53 80FA39              <1>     cmp dl, '9'
   716 00001B56 7603                <1>     jbe .dpfb1
   717 00001B58 80C207              <1>     add dl, 'A'-'0'-10
   718                              <1> .dpfb1:
   719 00001B5B 81FD08000000        <1>     cmp ebp, 8
   720 00001B61 7204                <1>     jb .dpfb10
   721 00001B63 88D3                <1>     mov bl, dl ;Add the bottom bits
   722 00001B65 EB02                <1>     jmp short .dpfb11
   723                              <1> .dpfb10:
   724 00001B67 88D1                <1>     mov cl, dl    ;Save remainder byte
   725                              <1> .dpfb11:
   726 00001B69 4885C0              <1>     test rax, rax
   727 00001B6C 75C9                <1>     jnz .dpfb0
   728                              <1> .dpfb2:
   729 00001B6E 81FD08000000        <1>     cmp ebp, 8
   730 00001B74 7208                <1>     jb .dpfb20
   731 00001B76 88DA                <1>     mov dl, bl
   732 00001B78 48C1EB08            <1>     shr rbx, 8
   733 00001B7C EB06                <1>     jmp short .dpfb21
   734                              <1> .dpfb20:
   735 00001B7E 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   736 00001B80 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   737                              <1> .dpfb21:
   738 00001B84 B402                <1>     mov ah, 02h
   739 00001B86 CD41                <1>     int 41h
   740 00001B88 FFCD                <1>     dec ebp
   741 00001B8A 75E2                <1>     jnz .dpfb2
   742                              <1>     return
    19                              <2> %%_ret:
    20 00001B8C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   743                              <1> 
   744                              <1> getDecimalWord:
   745                              <1> ;Works on MAX A dword in eax
   746                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   747 00001B8D 31C9                <1>     xor ecx, ecx
   748 00001B8F 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   749 00001B91 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   750                              <1> .dpfb0:
   751 00001B96 FFC5                <1>     inc ebp
   752 00001B98 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   753 00001B9C 31D2                <1>     xor edx, edx
   754 00001B9E 48F7F3              <1>     div rbx
   755 00001BA1 80C230              <1>     add dl, '0'
   756 00001BA4 80FA39              <1>     cmp dl, '9'
   757 00001BA7 7603                <1>     jbe .dpfb1
   758 00001BA9 80C207              <1>     add dl, 'A'-'0'-10
   759                              <1> .dpfb1:
   760 00001BAC 88D1                <1>     mov cl, dl    ;Save remainder byte
   761 00001BAE 4885C0              <1>     test rax, rax
   762 00001BB1 75E3                <1>     jnz .dpfb0
   763                              <1>     return
    19                              <2> %%_ret:
    20 00001BB3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    17                                  %include "./Source/Utils/COMMAND/Source/int44h.asm"
    18                              <1> critErrorHandler:   ;Int 44h
    19                              <1> ;User Stack in usage here, must be swapped to before this is called
    20                              <1> ;Entered with:  
    21                              <1> ;               AH = Critical Error Bitfield
    22                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    23                              <1> ;               Bit 6 - Reserved
    24                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    25                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    26                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    27                              <1> ;               Bits [2-1] = Affected Disk Error
    28                              <1> ;                     0 0   DOS area
    29                              <1> ;                     0 1   FAT area
    30                              <1> ;                     1 0   Directory area
    31                              <1> ;                     1 1   Data area
    32                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    33                              <1> ;               AL  = Failing drive number if AH[7] = 0
    34                              <1> ;               DIL = Error code for errorMsg
    35                              <1> ;               RSI = EA of Device Header for which device the error occured
    36                              <1> ;Return:
    37                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    38                              <1> ;                  = 1 - Retry the Operation    (Retry)
    39                              <1> ;                  = 2 - Terminate the Program  (Abort)
    40                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    41 00001BB4 53                  <1>     push rbx
    42 00001BB5 51                  <1>     push rcx
    43 00001BB6 52                  <1>     push rdx
    44 00001BB7 57                  <1>     push rdi
    45 00001BB8 56                  <1>     push rsi
    46 00001BB9 FC                  <1>     cld         ;Make String ops go forward
    47                              <1> 
    48 00001BBA 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    49 00001BBD 488D152FE8FFFF      <1>     lea rdx, crlf
    50 00001BC4 B409                <1>     mov ah, 09h ;Print String
    51 00001BC6 CD41                <1>     int 41h
    52                              <1> 
    53 00001BC8 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    54 00001BCE B90C000000          <1>     mov ecx, 0Ch
    55 00001BD3 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    56 00001BD5 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    57 00001BD8 480FB7FF            <1>     movzx rdi, di
    58 00001BDC 4889FA              <1>     mov rdx, rdi    ;Copy error code
    59 00001BDF 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    60 00001BE3 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    61 00001BE6 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    62 00001BE9 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    63 00001BF0 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    64 00001BF4 B409                <1>     mov ah, 09h ;Print String
    65 00001BF6 CD41                <1>     int 41h     ;Call DOS to print first part of message
    66                              <1> 
    67 00001BF8 488D1505020000      <1>     lea rdx, qword [.readmsg]
    68 00001BFF 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    69 00001C06 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    70 00001C09 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    71 00001C0D B409                <1>     mov ah, 09h ;Print String
    72 00001C0F CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    73                              <1> 
    74 00001C11 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    75 00001C14 0F85DF000000        <1>     jnz .charError
    76                              <1> ;Disk error continues here
    77 00001C1A 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    78 00001C21 B409                <1>     mov ah, 09h
    79 00001C23 CD41                <1>     int 41h
    80 00001C25 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    81 00001C27 80C241              <1>     add dl, "A" ;Add ASCII code
    82 00001C2A B402                <1>     mov ah, 02h ;Print char in dl
    83 00001C2C CD41                <1>     int 41h
    84                              <1> .userInput:
    85 00001C2E 488D15BEE7FFFF      <1>     lea rdx, crlf  ;Print new line
    86 00001C35 B409                <1>     mov ah, 09h
    87 00001C37 CD41                <1>     int 41h
    88                              <1> ;Abort, Retry, Ignore, Fail is word order
    89                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    90                              <1> .userAbort:
    91                              <1> ;Abort is always an option
    92 00001C39 488D15E2010000      <1>     lea rdx, qword [.abortmsg]
    93 00001C40 B409                <1>     mov ah, 09h
    94 00001C42 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
    95                              <1> .userRetry:
    96 00001C44 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    97 00001C47 7416                <1>     jz .userIgnore    ;If clear, dont print message
    98 00001C49 488D15EA010000      <1>     lea rdx, qword [.betweenMsg]
    99 00001C50 B409                <1>     mov ah, 09h
   100 00001C52 CD41                <1>     int 41h
   101 00001C54 488D15D4010000      <1>     lea rdx, qword [.retrymsg]
   102 00001C5B B409                <1>     mov ah, 09h
   103 00001C5D CD41                <1>     int 41h
   104                              <1> .userIgnore:
   105 00001C5F F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   106 00001C62 7416                <1>     jz .userFail
   107 00001C64 488D15CF010000      <1>     lea rdx, qword [.betweenMsg]
   108 00001C6B B409                <1>     mov ah, 09h
   109 00001C6D CD41                <1>     int 41h
   110 00001C6F 488D15B2010000      <1>     lea rdx, qword [.ignoremsg]
   111 00001C76 B409                <1>     mov ah, 09h
   112 00001C78 CD41                <1>     int 41h
   113                              <1> .userFail:
   114 00001C7A F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   115 00001C7D 7416                <1>     jz .userMsgEnd
   116 00001C7F 488D15B4010000      <1>     lea rdx, qword [.betweenMsg]
   117 00001C86 B409                <1>     mov ah, 09h
   118 00001C88 CD41                <1>     int 41h
   119 00001C8A 488D15A4010000      <1>     lea rdx, qword [.failmsg]
   120 00001C91 B409                <1>     mov ah, 09h
   121 00001C93 CD41                <1>     int 41h
   122                              <1> .userMsgEnd:
   123 00001C95 488D15A1010000      <1>     lea rdx, qword [.endMsg]
   124 00001C9C B409                <1>     mov ah, 09h
   125 00001C9E CD41                <1>     int 41h
   126                              <1> ;Get user input now 
   127 00001CA0 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   128 00001CA2 488D3D97010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   129 00001CA9 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   130 00001CAB CD41                <1>     int 41h ;Get char in al
   131 00001CAD 3C61                <1>     cmp al, "a" ;Chack if lowercase
   132 00001CAF 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   133 00001CB1 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   134                              <1> .uip1:
   135 00001CB3 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   136 00001CB4 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   137 00001CB6 FFC1                <1>     inc ecx
   138 00001CB8 81F904000000        <1>     cmp ecx, 4
   139 00001CBE 75F3                <1>     jne .uip1
   140 00001CC0 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   141                              <1> .validInput:
   142 00001CC5 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   143                              <1> ;Now check if the input is permitted
   144 00001CC7 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   145 00001CC9 7427                <1>     je .cehExit
   146 00001CCB 84C0                <1>     test al, al ;Check if 0 => Ignore
   147 00001CCD 740F                <1>     je .viIgnore
   148 00001CCF 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   149 00001CD1 7416                <1>     je .viRetry
   150                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   151 00001CD3 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   152 00001CD6 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   153 00001CDC EB14                <1>     jmp short .cehExit
   154                              <1> .viIgnore:
   155 00001CDE F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   156 00001CE1 0F8447FFFFFF        <1>     jz .userInput
   157 00001CE7 EB09                <1>     jmp short .cehExit
   158                              <1> .viRetry:
   159 00001CE9 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   160 00001CEC 0F843CFFFFFF        <1>     jz .userInput
   161                              <1> .cehExit:
   162 00001CF2 5E                  <1>     pop rsi
   163 00001CF3 5F                  <1>     pop rdi
   164 00001CF4 5A                  <1>     pop rdx
   165 00001CF5 59                  <1>     pop rcx
   166 00001CF6 5B                  <1>     pop rbx
   167 00001CF7 48CF                <1>     iretq
   168                              <1> .charError:
   169 00001CF9 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   170 00001CFE 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   171                              <1> .ce1:
   172 00001D05 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   173 00001D06 88C2                <1>     mov dl, al  ;Move char into dl
   174 00001D08 B402                <1>     mov ah, 02h
   175 00001D0A CD41                <1>     int 41h ;Print char
   176 00001D0C E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   177 00001D0E E91BFFFFFF          <1>     jmp .userInput
   178                              <1> 
   179                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   180 00001D13 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   180 00001D1C 746563742024202020  <1>
   181 00001D25 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   181 00001D2E 6E6974202420202020  <1>
   182 00001D37 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   182 00001D40 202420202020202020  <1>
   183 00001D49 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   183 00001D52 6F6D6D616E64202420  <1>
   184 00001D5B 446174612024202020- <1>             db "Data $            "       ;Error 4
   184 00001D64 202020202020202020  <1>
   185 00001D6D 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   185 00001D76 737420242020202020  <1>
   186 00001D7F 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   186 00001D88 202020202020202020  <1>
   187 00001D91 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   187 00001D9A 656469612024202020  <1>
   188 00001DA3 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   188 00001DAC 7420466F756E642024  <1>
   189 00001DB5 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   189 00001DBE 706572202420202020  <1>
   190 00001DC7 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   190 00001DD0 6C7420242020202020  <1>
   191 00001DD9 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   191 00001DE2 742024202020202020  <1>
   192 00001DEB 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   192 00001DF4 61696C757265202420  <1>
   193                              <1> 
   194 00001DFD 64726976652024      <1> .drive      db "drive $"
   195 00001E04 6572726F7220726561- <1> .readmsg    db "error reading $"
   195 00001E0D 64696E672024        <1>
   196 00001E13 6572726F7220777269- <1> .writemsg   db "error writing $"
   196 00001E1C 74696E672024        <1>
   197 00001E22 41626F727424        <1> .abortmsg   db "Abort$" 
   198 00001E28 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   199 00001E2F 526574727924        <1> .retrymsg   db "Retry$"
   200 00001E35 4661696C24          <1> .failmsg    db "Fail$"
   201 00001E3A 2C2024              <1> .betweenMsg db ", $"
   202 00001E3D 3F2024              <1> .endMsg     db "? $"
   203 00001E40 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   204                              <1> 
   205                              <1> int43h:
   206 00001E44 F9                  <1>     stc     ;Set CF to kill the task
   207 00001E45 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    18                                  %include "./Source/Utils/COMMAND/Data/cmdEnv.asm"
    19                              <1>     
    20                              <1> masterEnv:  ;Yeet this is this is a child command processor
    21 00001E48 5F3A434F4D4D414E44- <1>     db "_:COMMAND.COM",0
    21 00001E51 2E434F4D00          <1>
    22 00001E56 504154483D0000      <1>     db "PATH=",0,0
    23 00001E5D 202020202020202020- <1>     db ($ - masterEnv) dup (" ")    ;Pad the environment with spaces
    23 00001E66 202020202020202020- <1>
    23 00001E6F 202020              <1>
    24                              <1> endOfAlloc: ;Symbol to find the start of where I can yeet 
    19                                  %include "./Source/Utils/COMMAND/Source/cmdLdr.asm"
    20                              <1> cmdLdr:
    21                              <1> ;First check if the version is ok. If not, return.
    22 00001E72 B430                <1>     mov ah, 30h
    23 00001E74 CD41                <1>     int 41h
    24 00001E76 3C01                <1>     cmp al, 01h ;Version 1
    25 00001E78 760D                <1>     jbe .okVersion
    26 00001E7A 488D1560010000      <1>     lea rdx, badVerStr
    27 00001E81 B409                <1>     mov ah, 09h
    28 00001E83 CD41                <1>     int 41h
    29 00001E85 CD40                <1>     int 40h ;Exit to caller or DOS to print bad command interpreter line
    30                              <1> .okVersion:
    31                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    32 00001E87 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    33 00001E8B 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    34 00001E8F 48890579E1FFFF      <1>     mov qword [realParent], rax ;Preserve the real parent address
    35                              <1> ;Setup Int 43h and Int 44h
    36 00001E96 488D1517FDFFFF      <1>     lea rdx, critErrorHandler
    37 00001E9D 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    38 00001EA1 B844250000          <1>     mov eax, 2544h
    39 00001EA6 CD41                <1>     int 41h
    40 00001EA8 488D1595FFFFFF      <1>     lea rdx, int43h
    41 00001EAF 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    42 00001EB3 B843250000          <1>     mov eax, 2543h
    43 00001EB8 CD41                <1>     int 41h
    44 00001EBA 488D15D6E9FFFF      <1>     lea rdx, applicationReturn
    45 00001EC1 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    46 00001EC5 B842250000          <1>     mov eax, 2542h
    47 00001ECA CD41                <1>     int 41h
    48                              <1> ;Get a pointer to DOS Sysvars
    49 00001ECC B452                <1>     mov ah, 52h ;Get sysvars
    50 00001ECE CD41                <1>     int 41h
    51 00001ED0 48891D40E1FFFF      <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    52                              <1> ;Call for simple internationalisation data
    53 00001ED7 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    54 00001EDC CD41                <1>     int 41h
    55 00001EDE 3CFF                <1>     cmp al, -1
    56 00001EE0 7412                <1>     je .skipSwitch
    57 00001EE2 88153CE1FFFF        <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    58 00001EE8 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    59 00001EEB 7507                <1>     jne .skipSwitch
    60 00001EED C6052FE1FFFF2F      <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    61                              <1> .skipSwitch:
    62 00001EF4 B800380000          <1>     mov eax, 3800h  ;Get current country data
    63 00001EF9 488D1525E1FFFF      <1>     lea rdx, ctryData
    64 00001F00 CD41                <1>     int 41h ;Write the data to the internal country table
    65                              <1> ;Now determine if this is the master copy of COMMAND.COM
    66                              <1> ;Check if Int 4Eh has the same address as Int 4Dh. If so, we are master.
    67 00001F02 B84E350000          <1>     mov eax, 354Eh  ;Get int 4Eh address
    68 00001F07 CD41                <1>     int 41h
    69 00001F09 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    70 00001F0C B84D350000          <1>     mov eax, 354Dh  ;Get int 4Dh address
    71 00001F11 CD41                <1>     int 41h
    72 00001F13 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    73 00001F16 7535                <1>     jne .skipMaster
    74                              <1> ;Ok so we are master command.com
    75                              <1> ;Now make myself the real parent
    76 00001F18 4C8905F0E0FFFF      <1>     mov qword [realParent], r8
    77                              <1> ;Set master environment as mine
    78 00001F1F 488D0522FFFFFF      <1>     lea rax, masterEnv
    79 00001F26 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    80                              <1> ;Set current Drive in COMSPEC
    81 00001F2A B019                <1>     mov al, 19h ;Get current Drive
    82 00001F2C CD41                <1>     int 41h
    83 00001F2E 0441                <1>     add al, "A"
    84 00001F30 880512FFFFFF        <1>     mov byte [masterEnv], al
    85                              <1> ;Set Int 4Eh up
    86 00001F36 488D15F5EDFFFF      <1>     lea rdx, int4Eh
    87 00001F3D B84E250000          <1>     mov eax, 254Eh ;Set this as Int 4Eh
    88 00001F42 CD41                <1>     int 41h
    89                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    90                              <1>     
    91 00001F44 488D1D27FFFFFF      <1>     lea rbx, endOfAlloc ;Save the Master Environment
    92 00001F4B EB07                <1>     jmp short .printInit
    93                              <1> .skipMaster:
    94 00001F4D 488D1DF4FEFFFF      <1>     lea rbx, masterEnv  ;This is the base address to jettison
    95                              <1> .printInit:
    96                              <1> ;Finish by printing INIT string.
    97 00001F54 488D1510000000      <1>     lea rdx, initString
    98 00001F5B B409                <1>     mov ah, 09h
    99 00001F5D CD41                <1>     int 41h ;Print init string
   100 00001F5F 4889259FE0FFFF      <1>     mov qword [stackBottom], rsp    ;Use this to save where to reset rsp to
   101 00001F66 E918E9FFFF          <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   102                              <1> ;Loader Data here
   103                              <1> initString: 
   104 00001F6B 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version 1.0",CR,LF
   104 00001F74 66696320436F6D7075- <1>
   104 00001F7D 746572205265736561- <1>
   104 00001F86 726368285229205343- <1>
   104 00001F8F 502F444F5328522920- <1>
   104 00001F98 56657273696F6E2031- <1>
   104 00001FA1 2E300D0A            <1>
   105 00001FA5 202020202020202020- <1>     db       "          (C)Copyright Scientific Computer Reserach 2022.",CR,LF,"$"
   105 00001FAE 20284329436F707972- <1>
   105 00001FB7 696768742053636965- <1>
   105 00001FC0 6E746966696320436F- <1>
   105 00001FC9 6D7075746572205265- <1>
   105 00001FD2 736572616368203230- <1>
   105 00001FDB 32322E0D0A24        <1>
   106 00001FE1 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   106 00001FEA 20444F532076657273- <1>
   106 00001FF3 696F6E0D0A24        <1>
   106          ------------------  <1>  info: assembly required 1+2+2 passes

