     1                                  ;COMMAND.COM main file
     2                                  [map all ./Source/Utils/COMMAND/Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Source/Include/dosMacro.mac"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------------------------------
     9                              <1> ;Generic Macros file
    10                              <1> ;The following instruction extensions allow to conditionally return
    11                              <1> ;The idea was borrowed from the DOS Source Code
    12                              <1> ;
    13                              <1> ;-------------------------------------------------------------------------------
    14                              <1> 
    15                              <1> ;-------------------------------------------------------------------------------
    16                              <1> ;These macros are live and must not be touched
    17                              <1> ;-------------------------------------------------------------------------------
    18                              <1> %macro return 0
    19                              <1> %%_ret:
    20                              <1>     ret
    21                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    22                              <1> %endmacro
    23                              <1> 
    24                              <1> %macro cret 1
    25                              <1> %%_base:
    26                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    27                              <1>     %ifdef retOff
    28                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <1>     %ifdef currSegVBase
    30                              <1>     j%+1 short (retOff+currSegVBase)
    31                              <1>     %else
    32                              <1>     j%+1 short retOff
    33                              <1>     %endif  ;End ifdef currSegVBase
    34                              <1>     %else 
    35                              <1>     j%-1 short %%a
    36                              <1>     return
    37                              <1> %%a:
    38                              <1>     %endif  ;End the distance measurement if
    39                              <1>     %else   
    40                              <1>     j%-1 short %%a
    41                              <1>     return
    42                              <1> %%a:
    43                              <1>     %endif  ;End ifdef retoff
    44                              <1> %endmacro
    45                              <1> 
    46                              <1> %macro retz 0
    47                              <1> cret z
    48                              <1> %endmacro
    49                              <1> 
    50                              <1> %macro retnz 0
    51                              <1> cret nz
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> %macro rete 0
    55                              <1> cret e
    56                              <1> %endmacro
    57                              <1> 
    58                              <1> %macro retne 0
    59                              <1> cret ne
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> %macro retc 0
    63                              <1> cret c
    64                              <1> %endmacro
    65                              <1> 
    66                              <1> %macro retnc 0
    67                              <1> cret nc
    68                              <1> %endmacro
    69                              <1> 
    70                              <1> %macro retb 0
    71                              <1> cret b
    72                              <1> %endmacro
    73                              <1> 
    74                              <1> %macro retnb 0
    75                              <1> cret nb
    76                              <1> %endmacro
    77                              <1> 
    78                              <1> %macro breakpoint 0
    79                              <1> xchg bx, bx
    80                              <1> %endmacro
     7                                  %include "./Source/Include/dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    27 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    32 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Only affects for SUBST drives, not JOIN
    69                              <1> ; Flags: Bit 15 set = Network drive
    70                              <1> ;        Bit 14 set = Physical drive
    71                              <1> ;        Bit 13 set = JOIN'ed drive
    72                              <1> ;        Bit 12 set = SUBST'ed drive
    73                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    74                              <1> endstruc
    75                              <1> ;CDS equates
    76                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    77                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    78                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    79                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    80                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    81                              <1> ;------------------------------------------------------------------------;
    82                              <1> ; The SFT is a way to allow applications to open file handles to files 
    83                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    84                              <1> ; under the first header, and then a second header will be linked to the 
    85                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    86                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    87                              <1> ; using the FCBS= command. Default FCBS=5.
    88                              <1> ;
    89                              <1> ; A file handle describes the file, and the location within the file that
    90                              <1> ; we are reading. The file handle can be manipulated without the file
    91                              <1> ; being in memory, thus allowing the user to access data without needing 
    92                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    93                              <1> ; accessing devices, by treating them as files with their drivers 
    94                              <1> ; responding and translating the manipulations of the file handle itself.
    95                              <1> ; Neither the driver nor the application should see or use the SFT for
    96                              <1> ; the handle, as it is subject to change (and will change when file 
    97                              <1> ; sharing provisions are included). The DOS will make requests to the 
    98                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    99                              <1> ; track of the information in the SFT entry for that handle. 
   100                              <1> ;
   101                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   102                              <1> ; can point to the same file. It all depends on what the applications 
   103                              <1> ; want to do with the File.
   104                              <1> ;
   105                              <1> ; !!!!IMPORTANT!!!!
   106                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   107                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   108                              <1> ;
   109                              <1> ;Each SFT may look like this:
   110                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   111                              <1> ;            |                |
   112                              <1> ;       wNumFiles*sft    wNumFiles*sft
   113                              <1> ;
   114                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   115                              <1> ; System FCBs.
   116                              <1> ;
   117                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   118                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   119                              <1> ;
   120                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   121                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   122                              <1> ;------------------------------------------------------------------------;
   123                              <1> struc sfth   ;System file table header
   124                              <1> ; This is the SFT header.
   125                              <1> ; This structure comes before the start of the first file in the array/table.
   126 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   127 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   128                              <1> endstruc
   129                              <1> 
   130                              <1> struc sft
   131                              <1> ;This is the file struc itself
   132 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   133 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   134 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   135 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   136 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   137 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   138 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   139 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   140 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   141 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   142 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   143 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   144 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   145 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   146 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   147 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   148 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   149 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   150 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   151                              <1> ;                           0 means no record
   152                              <1> endstruc
   153                              <1> ;Open Mode equates
   154                              <1> ;Access modes   Bits[2:0]
   155                              <1> ReadAccess      equ 0h
   156                              <1> WriteAccess     equ 1h
   157                              <1> RWAccess        equ 2h
   158                              <1> ;Bit 3 reserved 0
   159                              <1> ;Sharing modes  Bits[6:4]
   160                              <1> CompatShare     equ 0h
   161                              <1> denyRWShare     equ 10h
   162                              <1> denyWriteShare  equ 20h
   163                              <1> denyReadShare   equ 30h
   164                              <1> denyNoneShare   equ 40h
   165                              <1> netFCBShare     equ 70h
   166                              <1> ;Bit 7 reserved 0
   167                              <1> ;Bits 8-12 reserved 0
   168                              <1> 
   169                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   170                              <1> ;Buffering on writes
   171                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   172                              <1> ;FCB opened file?
   173                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   174                              <1> ;Attribute Byte
   175                              <1> readOnlyFile    equ 1h
   176                              <1> hiddenFile      equ 2h
   177                              <1> systemFile      equ 4h
   178                              <1> volumeLabel     equ 8h
   179                              <1> directoryFile   equ 10h ;Directory entry
   180                              <1> archiveFile     equ 20h
   181                              <1> ;Device Info equates
   182                              <1> ;For a block device, bits [5:0] contain the drive number
   183                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   184                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   185                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   186                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   187                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   188                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   189                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   190                              <1> blokFileToFlush equ 40h ;Set if ANY writes are made to this handle!
   191                              <1> devCharDev      equ 80h ;If set, it is a char device!
   192                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   193                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   194                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   195                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   196                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   197                              <1>  
   198                              <1> ;------------------------------------------------------------------------;
   199                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   200                              <1> ; to an internal buffer, and then copying it to the specified location
   201                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   202                              <1> ; another request for the same sector from the same device is made, so 
   203                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   204                              <1> ; size, selected according to the largest detected sector size during 
   205                              <1> ; the initial loadup.
   206                              <1> ;
   207                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   208                              <1> ;
   209                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   210                              <1> ;------------------------------------------------------------------------;
   211                              <1> 
   212                              <1> struc bufferHdr
   213 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   214 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   215 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   216 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   217 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   218 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   219 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   220 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   221 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   222                              <1>     .dataarea:             ;Points to the start of the data area
   223                              <1> endstruc
   224                              <1> ;Buffer Flag equates
   225                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   226                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   227                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   228                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   229                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   230                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   231                              <1> ;Note! A buffer is marked as referenced only when the application 
   232                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> ; Memory control block for each memory arena
   235                              <1> ;------------------------------------------------------------------------;
   236                              <1> struc mcb
   237 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   238 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   239 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   240 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbMarkCtn      equ "M"
   248                              <1> mcbMarkEnd      equ "Z"
   249                              <1> 
   250                              <1> memFirstFit     equ 0   ;First free block goes to application
   251                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   252                              <1> memLastFit      equ 2   ;Last free block goes to application
   253                              <1> 
   254                              <1> ;Owner = Para aligned address => Owning application PSP
   255                              <1> ;...To consider...
   256                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   257                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   258                              <1> ;------------------------------------------------------------------------;
   259                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   260                              <1> ; following order, thus allowing for return values to be placed in the 
   261                              <1> ; registers by accessing the caller register stack frame.
   262                              <1> ;------------------------------------------------------------------------;
   263                              <1> struc callerFrame
   264 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   265 00000008 ????????????????    <1>     .rbx    resq 1    
   266 00000010 ????????????????    <1>     .rcx    resq 1
   267 00000018 ????????????????    <1>     .rdx    resq 1
   268 00000020 ????????????????    <1>     .rsi    resq 1
   269 00000028 ????????????????    <1>     .rdi    resq 1
   270 00000030 ????????????????    <1>     .rbp    resq 1
   271 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   272 00000040 ????????????????    <1>     .r9     resq 1
   273                              <1> ;Pushed by Processor when invoked via Interrupt
   274 00000048 ????????????????    <1>     .rip    resq 1
   275 00000050 ????????????????    <1>     .cs     resq 1
   276 00000058 ????????????????    <1>     .flags  resq 1
   277                              <1> endstruc
   278                              <1> 
   279                              <1> struc dpl
   280                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   281                              <1> ; server calls
   282 00000000 ????????????????    <1>     .rax    resq 1
   283 00000008 ????????????????    <1>     .rbx    resq 1
   284 00000010 ????????????????    <1>     .rcx    resq 1
   285 00000018 ????????????????    <1>     .rdx    resq 1
   286 00000020 ????????????????    <1>     .rsi    resq 1
   287 00000028 ????????????????    <1>     .rdi    resq 1
   288 00000030 ????????????????    <1>     .r8     resq 1
   289 00000038 ????????????????    <1>     .r9     resq 1
   290 00000040 ????????????????    <1>     .align  resq 1
   291 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   292 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   293                              <1> endstruc
   294                              <1> 
   295                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   296 00000000 ????????????????    <1>     .oldRBP         resq 1  
   297 00000008 ??                  <1>     .newBuffers     resb 1  ;New buffers value
   298 00000009 ??                  <1>     .newSFTVal      resb 1
   299 0000000A ??                  <1>     .newFCBSVal     resb 1
   300 0000000B ??                  <1>     .newProtFCBSVal resb 1  ;Number of protected FCBS
   301 0000000C ??                  <1>     .newLastdrive   resb 1
   302 0000000D ??                  <1>     .newStacks      resb 1  ;Ignored for now
   303 0000000E ????                <1>     .newStackSize   resb 2  ;Ignored for now
   304 00000010 ????????            <1>     .newAllocSize   resd 1  ;Used to keep track of reallocation size
   305 00000014 ????????            <1>                     resd 1  ;Alignment byte
   306 00000018 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   307                              <1> endstruc
   308                              <1> 
   309                              <1> struc fcb
   310                              <1> ;Similar to a DOS 2.0 FCB.
   311 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
   312 00000001 ????????????????    <1>     .filename   resb 8
   313 00000009 ??????              <1>     .fileext    resb 3
   314 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   315                              <1> ;One block consists of 128 records, of size denoted in the below
   316 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   317 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   318 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   319 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   320 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   321 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   322 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   323 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   324 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   325                              <1>     ;If record size > 64, high byte is ignored.
   326                              <1>     ;Used for random read and write operations to find the right record
   327                              <1> endstruc
   328                              <1> 
   329                              <1> struc filename
   330                              <1> ;8.3 File name struct
   331 00000000 ????????????????    <1>     .fName  resb 8
   332 00000008 ??????              <1>     .fExt   resb 3
   333                              <1> endstruc
   334                              <1> 
   335                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   336 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   337 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   338 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   339 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   340 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   341 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   342 00000016 ????                <1>     .fileTime   resw 1  ;File time
   343 00000018 ????                <1>     .fileDate   resw 1  ;File date
   344 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   345 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   346                              <1> endstruc
   347                              <1> 
   348                              <1> struc psp
   349 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   350 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   351 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   352 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   353 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   354 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   355 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   356 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   357 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   358 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   359 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   360 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   361 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   362 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   363                              <1> ;Extra handle arrays are grouped into a linked list
   364                              <1> ;The below are in the same place as in DOS
   365 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   366 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   367                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   368 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   369 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   370                              <1> endstruc
   371                              <1> 
   372                              <1> struc clkStruc
   373 00000000 ????                <1>     .dateWord   resw 1
   374 00000002 ??                  <1>     .minutes    resb 1
   375 00000003 ??                  <1>     .hours      resb 1
   376 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   377 00000005 ??                  <1>     .seconds    resb 1
   378                              <1> endstruc
   379                              <1> 
   380                              <1> struc countryStruc
   381 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   382                              <1>                         ;0 = month day year hh:mm:ss
   383                              <1>                         ;1 = day month year hh:mm:ss
   384                              <1>                         ;2 = year month day hh:mm:ss
   385 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   386 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   387 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   388 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   389 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   390 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   391                              <1>                         ;0 = Symbol leads, without space
   392                              <1>                         ;1 = Symbol follows, without space
   393                              <1>                         ;2 = Symbol leads, one space
   394                              <1>                         ;3 = Symbol follows, one space
   395                              <1>                         ;4 = Symbol replace decimal separator
   396 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   397 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   398 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   399 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   400 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   401                              <1> endstruc
   402                              <1> 
   403                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   404                              <1> ;for a space of 64Gb
   405                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   406                              <1> dosLowBase  equ 600h    ;Low load address
   407                              <1> 
   408                              <1> ;Critical Error AH bitfield equates
   409                              <1> critRead    equ 0h
   410                              <1> critWrite   equ 1h
   411                              <1> critDOS     equ 0h
   412                              <1> critFAT     equ 2h
   413                              <1> critDir     equ 4h
   414                              <1> critData    equ 6h
   415                              <1> critFailOK  equ 8h
   416                              <1> critRetryOK equ 10h
   417                              <1> critIgnorOK equ 20h
   418                              <1> critCharDev equ 80h
   419                              <1> 
   420                              <1> critIgnore  equ 0
   421                              <1> critRetry   equ 1
   422                              <1> critAbort   equ 2
   423                              <1> critFail    equ 3
   424                              <1> 
   425                              <1> ;MISC ASCII control chars
   426                              <1> NUL equ 00h ;^@         | ASCII Null
   427                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   428                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   429                              <1> BEL equ 07h ;^G         | ASCII Bell
   430                              <1> BSP equ 08h ;^H         | ASCII Backspace
   431                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   432                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   433                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   434                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   435                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   436                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   437                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   438                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   439                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   440                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   441                              <1> SPC equ 20h ;Printable  | ASCII Space
   442                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   443                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   444                              <1> 
   445                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   446                              <1> ;Extended Ascii Codes
   447                              <1> eF1     equ 3Bh ;F1 second byte
   448                              <1> eF2     equ 3Ch ;F2 second byte
   449                              <1> eF3     equ 3Dh ;F3 second byte
   450                              <1> eF4     equ 3Eh ;F4 second byte
   451                              <1> eF5     equ 3Fh ;F5 second byte
   452                              <1> eF6     equ 40h ;F6 second byte
   453                              <1> eF7     equ 41h ;F7 second byte
   454                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   455                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   456                              <1> eIns    equ 52h ;Insert second byte
   457                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   458                              <1> 
   459                              <1> ;Default Configuration for the system
   460                              <1> 
   461                              <1> buffersDefault  equ 30
   462                              <1> filesDefault    equ 20
   463                              <1> fcbsDefault     equ 4
   464                              <1> safeFcbsDeflt   equ 0
   465                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Source/Include/dosError.inc"
     9                              <1> ;DOS Error codes
    10                              <1> 
    11                              <1> ;Extended Error Codes
    12                              <1> errInvFnc   equ 1   ;Invalid function number
    13                              <1> errFnf      equ 2   ;File not found
    14                              <1> errPnf      equ 3   ;Path not found
    15                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    16                              <1> errAccDen   equ 5   ;Access denied (to resource)
    17                              <1> errBadHdl   equ 6   ;Invalid handle
    18                              <1> errMCBbad   equ 7   ;MCB's destroyed
    19                              <1> errNoMem    equ 8   ;Insufficient memory
    20                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    21                              <1> errBadEnv   equ 10  ;Invalid environment
    22                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    23                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    24                              <1> errInvDat   equ 13  ;Invalid data
    25                              <1> ;           equ 14  ;Reserved
    26                              <1> errBadDrv   equ 15  ;Invalid drive specified
    27                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    28                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    29                              <1> errNoFil    equ 18  ;No more files
    30                              <1> ;The following are Driver error codes + 19
    31                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    32                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    33                              <1> errUnkUnt   equ 20  ;Unknown Unit
    34                              <1> errDrvNR    equ 21  ;Drive not ready
    35                              <1> errUnkCmd   equ 22  ;Unknown Command
    36                              <1> errCRCerr   equ 23  ;Data (CRC) error
    37                              <1> errBadRLn   equ 24  ;Bad request structure length
    38                              <1> errSekErr   equ 25  ;Seek error
    39                              <1> errUnkMed   equ 26  ;Unknown media type
    40                              <1> errSecNF    equ 27  ;Sector not Found
    41                              <1> errNoPap    equ 28  ;Printer out of paper
    42                              <1> errWF       equ 29  ;Write fault
    43                              <1> errRF       equ 30  ;Read fault
    44                              <1> errGF       equ 31  ;General fault
    45                              <1> ;----------------------------------------------
    46                              <1> ;The following two go inbetween the Disk errors
    47                              <1> errShrVio   equ 32  ;Sharing violations
    48                              <1> errLokVio   equ 33  ;File Lock violation
    49                              <1> ;----------------------------------------------
    50                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    51                              <1> errNoFCB    equ 35  ;FCB unavailable
    52                              <1> errShrFul   equ 36  ;Sharing buffer full
    53                              <1> 
    54                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    55                              <1> 
    56                              <1> errFilExist equ 80  ;File already exists
    57                              <1> errDirExist equ 82  ;Directory already exists
    58                              <1> errFI44     equ 83  ;Fail on INT 44h
    59                              <1> errRedir    equ 84  ;Too many levels of redirection
    60                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    61                              <1> errBadPass  equ 86  ;Bad password
    62                              <1> errBadParam equ 87  ;Bad parameter passed to request
    63                              <1> errNetWrite equ 88  ;Network Write Fault
    64                              <1> ;-----------------------------------------------------------------------------
    65                              <1> ;Error Loci
    66                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    67                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    68                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    69                              <1> eLocChr     equ 4   ;Serial/Character Device error
    70                              <1> eLocMem     equ 5   ;Related to RAM
    71                              <1> ;-----------------------------------------------------------------------------
    72                              <1> ;Error Actions
    73                              <1> eActRet     equ 1   ;Retry
    74                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    75                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    76                              <1> eActAbt     equ 4   ;Abort with cleanup
    77                              <1> eActKil     equ 5   ;Abort without cleanup
    78                              <1> eActIgn     equ 6   ;Ignore error
    79                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    80                              <1> ;-----------------------------------------------------------------------------
    81                              <1> ;Error classes
    82                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    83                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    84                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    85                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    86                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    87                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    88                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    89                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    90                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    91                              <1> eClsLocked  equ 10  ;Resource Locked
    92                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    93                              <1> eClsClash   equ 12  ;Resource already exists!
    94                              <1> eClsUnk     equ 13  ;Unknown class
     9                                  %include "./Source/Utils/COMMAND/Data/cmdEqu.asm"
    10                              <1> ;Data equates and struct declarations
    11                              <1> 
    12                              <1> cmdBufferL  equ 128 ;Length of a command line buffer
    13                              <1> driveSpecL  equ 2   ;Space for X:
    14                              <1> dirPathL    equ 64  ;Length of a directory path
    15                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
    16                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
    17                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
    18                              <1> fullDirPathL equ driveSpecL + dirPathL
    19                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    20                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    21                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    22                              <1> 
    23                              <1> ;Use PSP FCB's for switch buffers
    24                              <1> fcb1        equ psp.fcb1
    25                              <1> fcb2        equ psp.fcb2
    26                              <1> ;Use the dta as the built command line buffer.
    27                              <1> cmdLineCnt  equ psp.parmList
    28                              <1> cmdLine     equ psp.progTail
    29                              <1> 
    30                              <1> 
    31                              <1> ;Struct Declarations
    32                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    33 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    34 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    35 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    36 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    37 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    38                              <1> endstruc
    39                              <1> 
    40                              <1> struc execProg  ;For use with EXEC-ing a child task
    41 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    42 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    43 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    44 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    45                              <1> endstruc
    46                              <1> 
    47                              <1> ;Directory attribute equates
    48                              <1>     dirReadOnly     equ 01h
    49                              <1>     dirHidden       equ 02h
    50                              <1>     dirSystem       equ 04h
    51                              <1>     dirVolumeID     equ 08h
    52                              <1>     dirDirectory    equ 10h
    53                              <1>     dirArchive      equ 20h
    54                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    55                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    56                              <1>     ;If any of the three bits are set, then ALL three bits are set
    57                              <1>     ; in addition to whatever the user passed to search for.
    58                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    59                              <1>     dirIncFiles     equ dirHidden | dirSystem
    10                                  Segment .data align=1 
    11                                  %include "./Source/Utils/COMMAND/Data/cmdData.asm"
    12                              <1> ;Static Data Area for COMMAND.COM    
    13                              <1> startLbl:   ;Start symbol, this is the entry point
    14 00000000 E94C260000          <1>     jmp cmdLdr
    15 00000005 0000000000000000    <1> stackBottom dq 0    ;Pointer to the top of the stack as allocated by DOS
    16 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
    17 0000000F FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
    18 00000017 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
    19 0000001F 1400                <1> numHdls     dw 20   ;Get number of handles permitted, hardcoded in this version
    20 00000021 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    21 00000023 5C                  <1> pathSep     db "\"  ;Default path sep
    22 00000024 2F                  <1> switchChar  db "/"  ;Default switch char
    23 00000025 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    24 00000026 0000000000000000    <1> parentInt42 dq 0    ;Stores the parent values to restore upon exiting if it can
    25                              <1> ;Static strings, not used in command line parsing
    26 0000002E 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    26 00000037 000000000000000000- <1>
    26 00000040 000000000000000000- <1>
    26 00000049 000000000000000000- <1>
    26 00000052 0000                <1>
    27 00000054 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    27 0000005D 000000000000000000- <1>
    27 00000066 000000000000000000- <1>
    27 0000006F 000000000000000000- <1>
    27 00000078 000000000000000000- <1>
    27 00000081 000000000000000000- <1>
    27 0000008A 000000000000000000- <1>
    27 00000093 00000000            <1>
    28                              <1> 
    29                              <1> 
    30                              <1> cmdLineStatePtr:
    31 00000097 00                  <1> cmdStartOff db 0    ;Offset to the first char for this command (may be a space)
    32 00000098 00                  <1> cmdEndOff   db 0    ;Offset to the terminating char for this command (0Dh or |)
    33 00000099 00                  <1> pipeFlag    db 0    ;If set, we are piping across a command
    34 0000009A 0000                <1> pipeHndl    dw 0    ;If pipeFlag set, this var has the handle to the pipe file
    35 0000009C 000000000000000000- <1> pipeName    db 13 dup 0, ;Space for name of the pipe file we created.
    35 000000A5 00000000            <1>
    36                              <1> 
    37                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    38                              <1> ;These variables are valid for a SINGLE command in a command line
    39 000000A9 0000                <1> cmdDrvSpec  dw 0    ;Read the first word in to see if the pathspec has drivespec
    40 000000AB 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    41 000000AC 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    42                              <1> ;                    If 2, we are redirecting output to a file, by appending
    43                              <1> ;FLG and SWCH are read as a word when checking if argX is a switch
    44 000000AD 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    45 000000AE 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    46 000000AF 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    47                              <1> 
    48 000000B0 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    49 000000B1 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    50 000000B2 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    51                              <1> 
    52                              <1> cmdStateL equ $ - cmdStatePtr
    53                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    54                              <1> 
    55                              <1> ;Structs and strings
    56                              <1> 
    57 000000B3 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    57 000000BC 00000000000000      <1>
    58 000000C3 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    58 000000CC 000000000000000000- <1>
    58 000000D5 000000000000000000- <1>
    58 000000DE 000000000000000000- <1>
    58 000000E7 00000000000000      <1>
    59                              <1> 
    60 000000EE 000000000000000000- <1> launchBlock db execProg_size dup (0)
    60 000000F7 000000000000000000- <1>
    60 00000100 000000000000000000- <1>
    60 00000109 0000000000          <1>
    61                              <1> 
    62 0000010E 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    62 00000117 000000000000000000- <1>
    62 00000120 000000000000000000- <1>
    62 00000129 000000000000000000- <1>
    62 00000132 000000000000000000- <1>
    62 0000013B 000000000000000000- <1>
    62 00000144 000000000000000000- <1>
    62 0000014D 000000000000000000- <1>
    62 00000156 000000000000000000- <1>
    62 0000015F 000000000000000000- <1>
    62 00000168 000000000000000000- <1>
    62 00000171 000000000000000000- <1>
    62 0000017A 000000000000000000- <1>
    62 00000183 000000000000000000- <1>
    62 0000018C 0000                <1>
    63 0000018E 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    63 00000197 000000000000000000- <1>
    63 000001A0 000000000000000000- <1>
    63 000001A9 000000000000000000- <1>
    63 000001B2 000000000000000000- <1>
    63 000001BB 000000000000000000- <1>
    63 000001C4 000000000000000000- <1>
    63 000001CD 000000000000000000- <1>
    63 000001D6 000000000000000000- <1>
    63 000001DF 000000000000000000- <1>
    63 000001E8 000000000000000000- <1>
    63 000001F1 000000000000000000- <1>
    63 000001FA 000000000000000000- <1>
    63 00000203 000000000000000000- <1>
    63 0000020C 0000                <1>
    64 0000020E 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)  ;Space for full path to a external command
    64 00000217 000000000000000000- <1>
    64 00000220 000000000000000000- <1>
    64 00000229 000000000000000000- <1>
    64 00000232 000000000000000000- <1>
    64 0000023B 000000000000000000- <1>
    64 00000244 000000000000000000- <1>
    64 0000024D 000000000000000000- <1>
    64 00000256 00000000000000      <1>
    65                              <1> 
    66 0000025D 000000000000000000- <1> fcbCmdSpec  db fcbNameL dup (0) ;Used to make a FCB style name for the file
    66 00000266 0000                <1>
    67 00000268 000000000000000000- <1> cmdSpec     db fileNameZL dup (0)   ;ASCIIZ command spec for the command name
    67 00000271 00000000            <1>
    68 00000275 000000000000000000- <1> cmdName     db cmdNameL dup (0) ;Command name string prefixed by length of word
    68 0000027E 0000000000          <1>
    69                              <1> 
    70 00000283 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    70 0000028C 000000000000000000- <1>
    70 00000295 000000000000000000- <1>
    70 0000029E 000000000000000000- <1>
    70 000002A7 000000000000000000- <1>
    70 000002B0 000000000000000000- <1>
    70 000002B9 000000000000000000- <1>
    70 000002C2 000000000000000000- <1>
    70 000002CB 00000000000000      <1>
    71 000002D2 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    71 000002DB 000000000000000000- <1>
    71 000002E4 000000000000000000- <1>
    71 000002ED 000000000000000000- <1>
    71 000002F6 000000000000000000- <1>
    71 000002FF 000000000000000000- <1>
    71 00000308 000000000000000000- <1>
    71 00000311 000000000000000000- <1>
    71 0000031A 00000000000000      <1>
    72                              <1> 
    73 00000321 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Contains the pathspec for the search file
    73 0000032A 000000000000000000- <1>
    73 00000333 000000000000000000- <1>
    73 0000033C 000000000000000000- <1>
    73 00000345 000000000000000000- <1>
    73 0000034E 000000000000000000- <1>
    73 00000357 000000000000000000- <1>
    73 00000360 000000000000000000- <1>
    73 00000369 000000000000000000- <1>
    73 00000372 000000000000000000- <1>
    73 0000037B 000000000000000000- <1>
    73 00000384 000000000000000000- <1>
    73 0000038D 000000000000000000- <1>
    73 00000396 000000000000000000- <1>
    73 0000039F 0000                <1>
    74                              <1> ;The above is larger than is needed/supported by DOS to allow for 
    75                              <1> ; users overtyping
    76                              <1> 
    77                              <1> ;Internal Function vars
    78                              <1> ;Dir Vars
    79 000003A1 00                  <1> dirPrnType  db 0    ;Print type.    Bit[0] set => /W or /w specified
    80                              <1> ;                                   Bit[1] set => /P or /p specified
    81 000003A2 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    82 000003A3 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    83 000003A4 00                  <1> dirDrv      db 0    ;0 based drive number to use
    84 000003A5 000000000000000000- <1> dirOldCWD   db cmdBufferL dup (0)   ;Space for CWD and any overspill 
    84 000003AE 000000000000000000- <1>
    84 000003B7 000000000000000000- <1>
    84 000003C0 000000000000000000- <1>
    84 000003C9 000000000000000000- <1>
    84 000003D2 000000000000000000- <1>
    84 000003DB 000000000000000000- <1>
    84 000003E4 000000000000000000- <1>
    84 000003ED 000000000000000000- <1>
    84 000003F6 000000000000000000- <1>
    84 000003FF 000000000000000000- <1>
    84 00000408 000000000000000000- <1>
    84 00000411 000000000000000000- <1>
    84 0000041A 000000000000000000- <1>
    84 00000423 0000                <1>
    85 00000425 000000000000000000- <1> dirPathArg  db cmdBufferL dup (0)   ;Copy the pathspec argument here if any
    85 0000042E 000000000000000000- <1>
    85 00000437 000000000000000000- <1>
    85 00000440 000000000000000000- <1>
    85 00000449 000000000000000000- <1>
    85 00000452 000000000000000000- <1>
    85 0000045B 000000000000000000- <1>
    85 00000464 000000000000000000- <1>
    85 0000046D 000000000000000000- <1>
    85 00000476 000000000000000000- <1>
    85 0000047F 000000000000000000- <1>
    85 00000488 000000000000000000- <1>
    85 00000491 000000000000000000- <1>
    85 0000049A 000000000000000000- <1>
    85 000004A3 0000                <1>
    86 000004A5 3F3F3F3F3F3F3F3F    <1> dirSrchPat  db 8 dup ("?")    ;We copy the search pattern here
    87 000004AD 2E                  <1> dirSPExt    db "."
    88 000004AE 3F3F3F              <1>             db 3 dup ("?")
    89                              <1> 
    90                              <1> ;Volume Vars
    91 000004B1 000000000000000000- <1> volLblSpc   db 13 dup (0)
    91 000004BA 00000000            <1>
    92 000004BE 00                  <1> volPathBuf  db 0 ;Drive LETTER goes here
    93 000004BF 3A5C2A2E2A00        <1>             db ":\*.*",0  ;This remains to build X:\*.*,0 for vol label search
    94                              <1> 
    95                              <1> ;Time/Date vars
    96 000004C5 00                  <1> td1 db 0    ;Minutes/Year
    97 000004C6 00                  <1> td2 db 0    ;Hours/Zero
    98 000004C7 00                  <1> td3 db 0    ;Hundredths/Day
    99 000004C8 00                  <1> td4 db 0    ;Seconds/Month
    12                                  %include "./Source/Utils/COMMAND/Data/cmdTable.asm"
    13                              <1> ;Function dispatch table
    14                              <1> functionTable:
    15                              <1> ;Use Pascal strings with each row of hte table having three columns:
    16                              <1> ; Col 1, BYTE, Length of command
    17                              <1> ; Col 2, String, String representing the user input
    18                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
    19 000004C9 03444952            <1>     db 3, "DIR"
    20 000004CD 6510                <1>     dw dir - startLbl
    21                              <1> 
    22 000004CF 024344              <1>     db 2, "CD"
    23 000004D2 FB13                <1>     dw chdir - startLbl
    24                              <1> 
    25 000004D4 054348444952        <1>     db 5, "CHDIR"
    26 000004DA FB13                <1>     dw chdir - startLbl
    27                              <1> 
    28 000004DC 024D44              <1>     db 2, "MD"
    29 000004DF A314                <1>     dw mkdir - startLbl
    30                              <1> 
    31 000004E1 054D4B444952        <1>     db 5, "MKDIR"
    32 000004E7 A314                <1>     dw mkdir - startLbl
    33                              <1> 
    34 000004E9 025244              <1>     db 2, "RD"
    35 000004EC F614                <1>     dw rmdir - startLbl
    36                              <1> 
    37 000004EE 05524D444952        <1>     db 5, "RMDIR"
    38 000004F4 F614                <1>     dw rmdir - startLbl
    39                              <1> 
    40 000004F6 0344454C            <1>     db 3, "DEL"
    41 000004FA 4A15                <1>     dw erase - startLbl
    42                              <1> 
    43 000004FC 054552415345        <1>     db 5, "ERASE"
    44 00000502 4A15                <1>     dw erase - startLbl
    45                              <1> 
    46 00000504 0444415445          <1>     db 4, "DATE"
    47 00000509 4B15                <1>     dw date - startLbl
    48                              <1> 
    49 0000050B 0454494D45          <1>     db 4, "TIME"
    50 00000510 1116                <1>     dw time - startLbl
    51                              <1> 
    52 00000512 04434F5059          <1>     db 4, "COPY"
    53 00000517 4915                <1>     dw copy - startLbl
    54                              <1> 
    55 00000519 0443545459          <1>     db 4, "CTTY"
    56 0000051E A916                <1>     dw ctty - startLbl
    57                              <1> 
    58 00000520 03434C53            <1>     db 3, "CLS"
    59 00000524 4417                <1>     dw cls - startLbl
    60                              <1> 
    61 00000526 05425245414B        <1>     db 5, "BREAK"
    62 0000052C B617                <1>     dw break - startLbl
    63                              <1> 
    64 0000052E 06564552494659      <1>     db 6, "VERIFY"
    65 00000535 3718                <1>     dw verify - startLbl
    66                              <1> 
    67 00000537 0652454E414D45      <1>     db 6, "RENAME"
    68 0000053E B418                <1>     dw rename - startLbl
    69                              <1> 
    70 00000540 08545255454E414D45  <1>     db 8, "TRUENAME"
    71 00000549 B518                <1>     dw truename - startLbl
    72                              <1> 
    73 0000054B 03564552            <1>     db 3, "VER"
    74 0000054F FE19                <1>     dw version - startLbl
    75                              <1> 
    76 00000551 03564F4C            <1>     db 3, "VOL"
    77 00000555 EB18                <1>     dw volume - startLbl
    78                              <1> 
    79 00000557 034D454D            <1>     db 3, "MEM"
    80 0000055B 421A                <1>     dw memory - startLbl
    81                              <1> 
    82 0000055D 0445584954          <1>     db 4, "EXIT"
    83 00000562 241C                <1>     dw exit - startLbl
    84                              <1> 
    85 00000564 0454595045          <1>     db 4, "TYPE"
    86 00000569 8C1B                <1>     dw type - startLbl
    87                              <1> 
    88 0000056B FF                  <1>     db -1   ;End of table
    13                                  %include "./Source/Utils/COMMAND/Data/cmdMsg.asm"
    14                              <1> ;COMMAND.COM Messages and strings
    15 0000056C 0D0A24              <1> crlf    db  CR,LF,"$"
    16 0000056F 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
    17 00000574 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
    17 0000057D 696C65206D69737369- <1>
    17 00000586 6E670D0A24          <1>
    18 0000058B 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
    18 00000594 6469736B2077697468- <1>
    18 0000059D 206261746368206669- <1>
    18 000005A6 6C65                <1>
    19 000005A8 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
    19 000005B1 737320616E79206B65- <1>
    19 000005BA 79207768656E207265- <1>
    19 000005C3 6164790D0A24        <1>
    20 000005C9 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
    20 000005D2 6E64206F722066696C- <1>
    20 000005DB 65206E616D650D0A24  <1>
    21 000005E4 4475706C6963617465- <1> dupName db  "Duplicate file name or "
    21 000005ED 2066696C65206E616D- <1>
    21 000005F6 65206F7220          <1>
    22 000005FB 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    22 00000604 666F756E640D0A24    <1>
    23 0000060C 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    23 00000615 656E74206469736B20- <1>
    23 0000061E 73706163650D0A24    <1>
    24 00000626 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    24 0000062F 7669726F6E6D656E74- <1>
    24 00000638 2073706163650D0A24  <1>
    25 00000641 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    25 0000064A 74696F6E206572726F- <1>
    25 00000653 720D0A24            <1>
    26 00000657 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    26 00000660 6F7420626520636F70- <1>
    26 00000669 696564206F6E746F20- <1>
    26 00000672 697473656C660D0A24  <1>
    27 0000067B 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    27 00000684 662064657374696E61- <1>
    27 0000068D 74696F6E206C6F7374- <1>
    27 00000696 206265666F72652063- <1>
    27 0000069F 6F70790D0A24        <1>
    28                              <1> ;Copy end message. First write # files copied then this message 
    29 000006A5 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    29 000006AE 636F706965640D0A24  <1>
    30                              <1> ;Dir end1 msg. First write # files in dir then this
    31 000006B7 2046696C6528732920- <1> dirOk   db  " File(s) $"
    31 000006C0 24                  <1>
    32                              <1> ;Dir end2 msg. First write # bytes free then this message
    33 000006C1 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    33 000006CA 65650D0A24          <1>
    34 000006CF 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    35                              <1> 
    36 000006D8 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    36 000006E1 726976652073706563- <1>
    36 000006EA 696669636174696F6E- <1>
    36 000006F3 0D0A24              <1>
    37 000006F6 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    37 000006FF 6B6579207768656E20- <1>
    37 00000708 7265616479202E202E- <1>
    37 00000711 202E2024            <1>
    38 00000715 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    38 0000071E 6172616D657465720D- <1>
    38 00000727 0A24                <1>
    39                              <1> 
    40 00000729 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    40 00000732 576564546875467269- <1>
    40 0000073B 536174              <1>
    41 0000073E 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    41 00000747 206461746524        <1>
    42 0000074D 43757272656E742064- <1> curDate db  "Current date is $"
    42 00000756 6174652069732024    <1>
    43 0000075E 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    43 00000767 657720646174652024  <1>
    44 00000770 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    44 00000779 293A2024            <1>
    45 0000077D 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    45 00000786 293A2024            <1>
    46 0000078A 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    46 00000793 293A2024            <1>
    47 00000797 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    47 000007A0 2074696D6524        <1>
    48 000007A6 43757272656E742074- <1> curTime db  "Current time is $"
    48 000007AF 696D652069732024    <1>
    49 000007B7 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    49 000007C0 65772074696D653A20- <1>
    49 000007C9 24                  <1>
    50                              <1> 
    51 000007CA 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    51 000007D3 7572652028592F4E29- <1>
    51 000007DC 3F2024              <1>
    52                              <1> 
    53 000007DF 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    53 000007E8 56657273696F6E2024  <1>
    54                              <1> 
    55 000007F1 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    55 000007FA 6E2064726976652024  <1>
    56 00000803 2069732024          <1> volOk   db " is $"
    57 00000808 20686173206E6F206C- <1> volNo   db " has no label$"
    57 00000811 6162656C24          <1>
    58                              <1> 
    59 00000816 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    59 0000081F 69726563746F72790D- <1>
    59 00000828 0A24                <1>
    60 0000082A 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    60 00000833 206372656174652064- <1>
    60 0000083C 69726563746F72790D- <1>
    60 00000845 0A24                <1>
    61 00000847 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    61 00000850 6174682C206E6F7420- <1>
    61 00000859 6469726563746F7279- <1>
    61 00000862 2C0D0A              <1>
    62 00000865 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    62 0000086E 6F7279206E6F742065- <1>
    62 00000877 6D7074790D0A24      <1>
    63 0000087E 204469726563746F72- <1> dirMain db " Directory of  $"
    63 00000887 79206F66202024      <1>
    64 0000088E 4E6F20506174682024  <1> noPath  db "No Path $"
    65 00000897 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    65 000008A0 7269766520696E2073- <1>
    65 000008A9 656172636820706174- <1>
    65 000008B2 680D0A24            <1>
    66 000008B6 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    66 000008BF 65766963650D0A24    <1>
    67 000008C7 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    67 000008D0 20666F756E640D0A24  <1>
    68 000008D9 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    68 000008E2 726F720D0A24        <1>
    69 000008E8 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    69 000008F1 6F74206265206E6573- <1>
    69 000008FA 7465640D0A24        <1>
    70 00000900 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    70 00000909 6174652066696C6520- <1>
    70 00000912 6572726F7220647572- <1>
    70 0000091B 696E6720706970650D- <1>
    70 00000924 0A24                <1>
    71 00000926 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    71 0000092F 2062696E6172792072- <1>
    71 00000938 656164732066726F6D- <1>
    71 00000941 206120646576696365- <1>
    71 0000094A 0D0A24              <1>
    72 0000094D 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    73 00000953 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    74 00000958 425245414B20697320- <1> breakIs db "BREAK is $"
    74 00000961 24                  <1>
    75 00000962 564552494659206973- <1> verifyIs    db "VERIFY is $"
    75 0000096B 2024                <1>
    76 0000096D 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    77 00000976 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    77 0000097F 617468206F72206669- <1>
    77 00000988 6C65206E616D650D0A- <1>
    77 00000991 24                  <1>
    78 00000992 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    78 0000099B 756D626572206F6620- <1>
    78 000009A4 706172616D65746572- <1>
    78 000009AD 730D0A24            <1>
    79 000009B1 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    79 000009BA 74696E6720746F2064- <1>
    79 000009C3 6576696365          <1>
    80 000009C8 08200800            <1> backSpace   db BSP," ",BSP,NUL
    81                              <1> 
    82 000009CC 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    82 000009D5 20202020202020546F- <1>
    82 000009DE 74616C207379737465- <1>
    82 000009E7 6D206D656D6F72793A- <1>
    82 000009F0 2024                <1>
    83 000009F2 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    83 000009FB 20202020202020204D- <1>
    83 00000A04 656D6F727920757365- <1>
    83 00000A0D 6420627920444F533A- <1>
    83 00000A16 2024                <1>
    84 00000A18 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    84 00000A21 656D6F727920757365- <1>
    84 00000A2A 64206279206170706C- <1>
    84 00000A33 69636174696F6E733A- <1>
    84 00000A3C 2024                <1>
    85 00000A3E 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    85 00000A47 656D6F727920726573- <1>
    85 00000A50 657276656420627920- <1>
    85 00000A59 68617264776172653A- <1>
    85 00000A62 2024                <1>
    86 00000A64 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    86 00000A6D 202020202020202020- <1>
    86 00000A76 2020202020204D656D- <1>
    86 00000A7F 6F727920667265653A- <1>
    86 00000A88 2024                <1>
    87 00000A8A 20627974657324      <1> memByte db " bytes$"
    88 00000A91 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    88 00000A9A 6F7420417373657274- <1>
    88 00000AA3 61696E20444F532045- <1>
    88 00000AAC 6E74727920506F696E- <1>
    88 00000AB5 7424                <1>
    89 00000AB7 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    89 00000AC0 416C6C6F636174696F- <1>
    89 00000AC9 6E204572726F7224    <1>
    90 00000AD1 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    90 00000ADA 4572726F7224        <1>
    91 00000AE0 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    91 00000AE9 68616C74656424      <1>
    92                              <1> 
    93                              <1> 
    94 00000AF0 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    95 00000AF4 2020202024          <1> fourSpc  db "    $"
    96 00000AF9 20202024            <1> threeSpc db "   $"
    97 00000AFD 202024              <1> twoSpc   db "  $"
    98                              <1> 
    99 00000B00 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    99 00000B09 696679204F4E206F72- <1>
    99 00000B12 204F46460D0A24      <1>
   100 00000B19 504154483D          <1> pathEVar db "PATH="
   101 00000B1E 50524F4D50543D      <1> promptEVar  db "PROMPT="
    14                                  %include "./Source/Utils/COMMAND/Source/cmdMain.asm"
    15                              <1> commandStart:
    16                              <1>     ;Resize Allocation, jump here with endpointer in rbx
    17                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
    18                              <1>     ; that the jump to safety won't be gobbled up when multitasking
    19 00000B25 49F7D8              <1>     neg r8  ;Convert r8 to -r8
    20 00000B28 4A8D5C0311          <1>     lea rbx, qword [rbx + r8 + 11h]    ;Get # of bytes for COMMAND.COM
    21 00000B2D C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
    22 00000B30 B44A                <1>     mov ah, 4Ah ;Realloc
    23 00000B32 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    24 00000B35 CD41                <1>     int 41h
    25 00000B37 EB5A                <1>     jmp short commandMain
    26                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    27 00000B39 B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    28 00000B3E CD41                <1>     int 41h
    29 00000B40 668905C6F4FFFF      <1>     mov word [returnCode], ax
    30                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    31 00000B47 488D1545180000      <1>     lea rdx, critErrorHandler
    32 00000B4E 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    33 00000B52 B844250000          <1>     mov eax, 2544h
    34 00000B57 CD41                <1>     int 41h
    35 00000B59 488D15C31A0000      <1>     lea rdx, int43h
    36 00000B60 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    37 00000B64 B843250000          <1>     mov eax, 2543h
    38 00000B69 CD41                <1>     int 41h
    39 00000B6B 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    40 00000B72 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    41 00000B76 B842250000          <1>     mov eax, 2542h
    42 00000B7B CD41                <1>     int 41h
    43                              <1> ;Close all handles from 5->MAX
    44 00000B7D 0FB70D9BF4FFFF      <1>     movzx ecx, word [numHdls]
    45 00000B84 BB05000000          <1>     mov ebx, 5
    46                              <1> .handleClose:
    47 00000B89 B43E                <1>     mov ah, 3Eh ;File close
    48 00000B8B CD41                <1>     int 41h
    49 00000B8D FFC3                <1>     inc ebx ;Goto next file
    50 00000B8F 39CB                <1>     cmp ebx, ecx
    51 00000B91 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    52                              <1> commandMain:
    53                              <1> ;Setup Commandline
    54 00000B93 FA                  <1>     cli
    55 00000B94 488B256AF4FFFF      <1>     mov rsp, qword [stackBottom]    ;Reset internal stack pointer pos
    56 00000B9B FB                  <1>     sti
    57 00000B9C FC                  <1>     cld ;Ensure stringops are done the right way
    58 00000B9D C6056AF5FFFF80      <1>     mov byte [inBuffer], 80h    ;Reset the buffer length
    59                              <1> .inputMain:
    60 00000BA4 E86E150000          <1>     call clearCommandLineState
    61 00000BA9 E8F5110000          <1>     call printCRLF
    62 00000BAE E83C150000          <1>     call printPrompt
    63                              <1> 
    64 00000BB3 488D1554F5FFFF      <1>     lea rdx, inBuffer
    65 00000BBA B80A0C0000          <1>     mov eax, 0C0Ah  ;Do Buffered input
    66 00000BBF CD41                <1>     int 41h
    67 00000BC1 E8DD110000          <1>     call printCRLF  ;Note we have accepted input
    68                              <1> 
    69                              <1> ;First check we had something typed in of length greater than 1
    70                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    71 00000BC6 803D42F5FFFF01      <1>     cmp byte [inBuffer + 1], 1  ;Check input length valid
    72 00000BCD 742C                <1>     je .dfltErrExit
    73 00000BCF 72D3                <1>     jb .inputMain
    74                              <1>     ;Copy over the input text
    75 00000BD1 488D3536F5FFFF      <1>     lea rsi, inBuffer
    76 00000BD8 488D3DAFF5FFFF      <1>     lea rdi, cmdBuffer
    77 00000BDF B980000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    78 00000BE4 F3A4                <1>     rep movsb
    79 00000BE6 31C0                <1>     xor eax, eax
    80 00000BE8 668905A8F4FFFF      <1>     mov word [cmdStartOff], ax  ;Clear start and end Off positions
    81 00000BEF E814000000          <1>     call parseInput
    82 00000BF4 E8AD010000          <1>     call doCommandLine
    83 00000BF9 EBA9                <1>     jmp short .inputMain
    84                              <1> .dfltErrExit:
    85 00000BFB 488D15C7F9FFFF      <1>     lea rdx, badCmd
    86 00000C02 B409                <1>     mov ah, 09h
    87 00000C04 CD41                <1>     int 41h
    88 00000C06 EB9C                <1>     jmp short .inputMain
    89                              <1> 
    90                              <1> parseInput:
    91                              <1> ;EndOff is set up before entering this part
    92                              <1> ;Copies a nicely formatted version of the input command line
    93                              <1> ; without any redirections to psp.dta
    94 00000C08 488D3581F5FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
    95 00000C0F 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
    96 00000C16 0FB61D7BF4FFFF      <1>     movzx ebx, byte [cmdEndOff] ;Get the old end offset
    97 00000C1D 4801DE              <1>     add rsi, rbx    ;Move rsi to the start of this new command
    98 00000C20 E8BB140000          <1>     call skipSpaces ;Skip any preceeding spaces
    99 00000C25 66AD                <1>     lodsw   ;Get the first two chars into ax
   100 00000C27 6689057BF4FFFF      <1>     mov word [cmdDrvSpec], ax ;Store these chars as if they are the drvspec
   101 00000C2E 4881EE02000000      <1>     sub rsi, 2  ;Go back to the start of the command
   102 00000C35 56                  <1>     push rsi
   103 00000C36 57                  <1>     push rdi
   104 00000C37 488D3DD0F5FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   105 00000C3E 57                  <1>     push rdi
   106 00000C3F E845030000          <1>     call copyCommandTailItemProgram
   107 00000C44 5F                  <1>     pop rdi
   108 00000C45 9C                  <1>     pushfq  ;Save the CF state
   109 00000C46 E81D140000          <1>     call strlen
   110 00000C4B FFC9                <1>     dec ecx ;Drop the terminating char from the count
   111 00000C4D 58                  <1>     pop rax ;Get the CF state in al
   112 00000C4E 5F                  <1>     pop rdi
   113 00000C4F 5E                  <1>     pop rsi
   114 00000C50 F3A4                <1>     rep movsb   ;Now we copy the command into the psp command line
   115 00000C52 A801                <1>     test al, 1  ;Was CF set?
   116 00000C54 0F8586000000        <1>     jnz .exit   ;If an embedded CR was found in the filename, exit!
   117                              <1> .cmdLineProcess:
   118 00000C5A E881140000          <1>     call skipSpaces ;Go to the next char in the input line
   119                              <1> .redirFound:
   120 00000C5F AC                  <1>     lodsb   ;Get first non-space char (setupRedir skips spaces before ret)
   121 00000C60 3C0D                <1>     cmp al, CR  ;If this was a CR, we stop processing
   122 00000C62 747C                <1>     je .exit
   123 00000C64 E8B3020000          <1>     call checkAndSetupRedir ;If not, check if we have a redir element
   124 00000C69 7275                <1>     jc .exit    ;CF=CY only if pipe, which is equivalent to CR when processing
   125 00000C6B 74F2                <1>     jz .redirFound  ;If we had a < > or >>, proceed to check if next char CR
   126 00000C6D B020                <1>     mov al, " "
   127 00000C6F AA                  <1>     stosb   ;Store a space to make space for the command file parameter
   128 00000C70 48FFCE              <1>     dec rsi ;Move rsi back to the first char
   129 00000C73 F60533F4FFFFFF      <1>     test byte [arg1Flg], -1
   130 00000C7A 7521                <1>     jnz .arg2
   131                              <1> .arg1:
   132 00000C7C C6052AF4FFFFFF      <1>     mov byte [arg1Flg], -1
   133 00000C83 E858140000          <1>     call skipSpaces
   134 00000C88 4889F0              <1>     mov rax, rsi
   135 00000C8B 488D1DFCF4FFFF      <1>     lea rbx, cmdBuffer
   136 00000C92 4829D8              <1>     sub rax, rbx
   137 00000C95 880513F4FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   138 00000C9B EB2A                <1>     jmp short .argCommon
   139                              <1> .arg2:
   140 00000C9D F6050CF4FFFFFF      <1>     test byte [arg2Flg], -1
   141 00000CA4 7521                <1>     jnz .argCommon
   142 00000CA6 C60503F4FFFFFF      <1>     mov byte [arg2Flg], -1
   143 00000CAD E82E140000          <1>     call skipSpaces
   144 00000CB2 4889F0              <1>     mov rax, rsi
   145 00000CB5 488D1DD2F4FFFF      <1>     lea rbx, cmdBuffer
   146 00000CBC 4829D8              <1>     sub rax, rbx
   147 00000CBF 8805ECF3FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   148 00000CC5 EB00                <1>     jmp short .argCommon
   149                              <1> .argCommon:
   150                              <1>     ;More than two arguments? Do nothing more than just copy it
   151                              <1>     ; over. If we encounter an embedded CR, exit there too
   152 00000CC7 E814140000          <1>     call skipSpaces
   153 00000CCC 803E0D              <1>     cmp byte [rsi], CR  ;Are we at the end of the commandline?
   154 00000CCF 740F                <1>     je .exit
   155                              <1>     ;If not, we copy it over
   156 00000CD1 E8DD020000          <1>     call copyCommandTailItem    ;Stores a terminating null we dont want
   157 00000CD6 488D7FFF            <1>     lea rdi, qword [rdi - 1]    ;Point back at the inserted terminating null
   158 00000CDA 0F837AFFFFFF        <1>     jnc .cmdLineProcess
   159                              <1> .exit:
   160 00000CE0 488D1DA7F4FFFF      <1>     lea rbx, cmdBuffer
   161 00000CE7 48FFCE              <1>     dec rsi
   162 00000CEA 4829DE              <1>     sub rsi, rbx    ;Get the offset into the command line
   163 00000CED 89F3                <1>     mov ebx, esi
   164 00000CEF 881DA3F3FFFF        <1>     mov byte [cmdEndOff], bl    ;Store the offset to the terminating char
   165 00000CF5 B00D                <1>     mov al, CR
   166 00000CF7 AA                  <1>     stosb   ;Store the terminating CR in the psp command line
   167                              <1>     ;Now compute the command line length 
   168 00000CF8 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine] 
   169 00000CFF B00D                <1>     mov al, CR
   170 00000D01 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   171 00000D03 FFC9                <1>     dec ecx ;rcx = -1
   172 00000D05 F2AE                <1>     repne scasb
   173 00000D07 F7D1                <1>     not ecx
   174 00000D09 FEC9                <1>     dec cl  ;Dont include terminating CR
   175 00000D0B 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   176 00000D12 880F                <1>     mov byte [rdi], cl
   177                              <1>     ;Before returning, we copy the command name to cmdName
   178 00000D14 488D3DF3F4FFFF      <1>     lea rdi, cmdPathSpec
   179 00000D1B 4889FB              <1>     mov rbx, rdi    ;Use rbx as the ptr to the first char in the commandspec
   180 00000D1E 30C0                <1>     xor al, al  ;Search for the terminating null
   181 00000D20 B94F000000          <1>     mov ecx, fileSpecZL ;Max number of chars the length could be
   182 00000D25 F2AE                <1>     repne scasb
   183 00000D27 48FFCF              <1>     dec rdi ;Go to the last char in the command
   184 00000D2A 4889FE              <1>     mov rsi, rdi
   185 00000D2D FD                  <1>     std ;Now we go backwards to where rsi = rbx OR byte [rsi] = pathSep
   186                              <1> .keepSearching:
   187 00000D2E AC                  <1>     lodsb
   188 00000D2F 3A05EEF2FFFF        <1>     cmp al, byte [pathSep]
   189 00000D35 740B                <1>     je .cmdStartFnd
   190 00000D37 4839DE              <1>     cmp rsi, rbx
   191 00000D3A 75F2                <1>     jne .keepSearching
   192 00000D3C 48FFCE              <1>     dec rsi ;Go back two to go forwards again
   193 00000D3F 48FFCE              <1>     dec rsi
   194                              <1> .cmdStartFnd:
   195 00000D42 48FFC6              <1>     inc rsi
   196 00000D45 48FFC6              <1>     inc rsi ;Go past the pathsep
   197 00000D48 FC                  <1>     cld ;Go the sane way again
   198 00000D49 488D3D26F5FFFF      <1>     lea rdi, qword [cmdName + 1]    ;First byte is for the length of the name
   199 00000D50 57                  <1>     push rdi    ;Cleanse the field before usage (not strictly necessary)
   200 00000D51 B90E000000          <1>     mov ecx, cmdNameL
   201 00000D56 30C0                <1>     xor al, al
   202 00000D58 F3AA                <1>     rep stosb
   203 00000D5A 5F                  <1>     pop rdi
   204 00000D5B 31C9                <1>     xor ecx, ecx
   205 00000D5D 56                  <1>     push rsi    ;Save the location of the start byte of the command name
   206                              <1> .cmdGetChar:
   207 00000D5E AC                  <1>     lodsb
   208 00000D5F 84C0                <1>     test al, al ;Did we find the terminating null?
   209 00000D61 7411                <1>     jz .nameLenFnd
   210 00000D63 3C2E                <1>     cmp al, "." ;Extension sep also terminates
   211 00000D65 740D                <1>     je .nameLenFnd
   212 00000D67 24DF                <1>     and al, 0DFh    ;Else uppercase the char
   213 00000D69 AA                  <1>     stosb   ;and store it
   214 00000D6A FFC1                <1>     inc ecx
   215 00000D6C 81F90B000000        <1>     cmp ecx, 11 ;Max command length is 11
   216 00000D72 72EA                <1>     jb .cmdGetChar
   217                              <1> .nameLenFnd:
   218 00000D74 880DFBF4FFFF        <1>     mov byte [cmdName], cl  ;Store the name length now
   219                              <1>     ;Now finally, create a FCB filespec
   220 00000D7A 488D3DDCF4FFFF      <1>     lea rdi, fcbCmdSpec
   221 00000D81 57                  <1>     push rdi
   222 00000D82 B90B000000          <1>     mov ecx, fcbNameL
   223 00000D87 B020                <1>     mov al, " " ;Fill with spaces
   224 00000D89 F3AA                <1>     rep stosb
   225 00000D8B 5F                  <1>     pop rdi
   226 00000D8C 5E                  <1>     pop rsi ;Get back the location of the start byte of the command name
   227 00000D8D E896130000          <1>     call asciiToFCB
   228 00000D92 488D35C4F4FFFF      <1>     lea rsi, fcbCmdSpec
   229 00000D99 488D3DC8F4FFFF      <1>     lea rdi, cmdSpec
   230 00000DA0 E8DE130000          <1>     call FCBToAsciiz
   231                              <1>     return
    19                              <2> %%_ret:
    20 00000DA5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   232                              <1> 
   233                              <1> doCommandLine:
   234 00000DA6 488D35E3F3FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
   235 00000DAD 488D3DFFF2FFFF      <1>     lea rdi, cmdFcb
   236 00000DB4 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks
   237 00000DB9 CD41                <1>     int 41h
   238 00000DBB 0FB71DE7F2FFFF      <1>     movzx ebx, word [cmdDrvSpec]    ;Get the drive specifier
   239 00000DC2 80FF3A              <1>     cmp bh, ":"
   240 00000DC5 752E                <1>     jne .noDriveSpecified
   241 00000DC7 88DA                <1>     mov dl, bl      ;Move the drive letter in dl
   242 00000DC9 80E2DF              <1>     and dl, 0DFh    ;Make the drive letter upper case
   243 00000DCC 80EA41              <1>     sub dl, "A"     ;And make it a 0 based drive letter
   244 00000DCF 3CFF                <1>     cmp al, -1  ;Int 41h returns AL = -1 if bad drive specified
   245 00000DD1 7415                <1>     je .badDrive
   246                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   247 00000DD3 803D9BF4FFFF02      <1>     cmp byte [cmdName], 2
   248 00000DDA 7519                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   249 00000DDC B40E                <1>     mov ah, 0Eh ;Set drive to dl
   250 00000DDE CD41                <1>     int 41h 
   251 00000DE0 B419                <1>     mov ah, 19h
   252 00000DE2 CD41                <1>     int 41h     ;Get current drive
   253 00000DE4 38D0                <1>     cmp al, dl  ;If the drive was set, all is well
   254                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000DE6 74(A5)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   255                              <1> .badDrive:
   256 00000DE8 488D15E9F8FFFF      <1>     lea rdx, badDrv
   257 00000DEF B409                <1>     mov ah, 09h
   258 00000DF1 CD41                <1>     int 41h
   259 00000DF3 F9                  <1>     stc
   260                              <1>     return
    19                              <2> %%_ret:
    20 00000DF4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   261                              <1> .noDriveSpecified:
   262                              <1> ;Now we set the two FCB's in the command line
   263 00000DF5 F605B1F2FFFFFF      <1>     test byte [arg1Flg], -1
   264 00000DFC 744D                <1>     jz .fcbArgsDone
   265 00000DFE 0FB605A9F2FFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   266 00000E05 488D3582F3FFFF      <1>     lea rsi, cmdBuffer
   267 00000E0C 4801C6              <1>     add rsi, rax    ;Point to first argument
   268 00000E0F 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   269 00000E13 B801290000          <1>     mov eax, 2901h
   270 00000E18 CD41                <1>     int 41h
   271 00000E1A 88058FF2FFFF        <1>     mov byte [arg1FCBret], al
   272 00000E20 F60589F2FFFFFF      <1>     test byte [arg2Flg], -1
   273 00000E27 7422                <1>     jz .fcbArgsDone
   274 00000E29 0FB60581F2FFFF      <1>     movzx eax, byte [arg2Off]
   275 00000E30 488D3557F3FFFF      <1>     lea rsi, cmdBuffer
   276 00000E37 4801C6              <1>     add rsi, rax    ;Point to first argument
   277 00000E3A 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   278 00000E3E B801290000          <1>     mov eax, 2901h
   279 00000E43 CD41                <1>     int 41h
   280 00000E45 880567F2FFFF        <1>     mov byte [arg2FCBret], al
   281                              <1> .fcbArgsDone:
   282 00000E4B 488D353CF3FFFF      <1>     lea rsi, cmdBuffer
   283 00000E52 488D1D1CF4FFFF      <1>     lea rbx, cmdName
   284 00000E59 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   285 00000E5E BAFFFF0000          <1>     mov edx, 0FFFFh
   286 00000E63 B5FF                <1>     mov ch, -1
   287 00000E65 CD4F                <1>     int 4Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   288                              <1>             ;        al = 0  if the command should be executed as usual
   289 00000E67 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   290 00000E6C BAFFFF0000          <1>     mov edx, 0FFFFh
   291 00000E71 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   292 00000E73 CD4F                <1>     int 4Fh
   293 00000E75 741D                <1>     jz .executeInternal
   294                              <1>     ;Here we execute externally and return to the prompt
   295                              <1>     ; as if it was an internal execution
   296 00000E77 488D3590F2FFFF      <1>     lea rsi, inBuffer ;Point to this built buffer
   297 00000E7E 488D1D2EF2FFFF      <1>     lea rbx, cmdFcb
   298 00000E85 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   299 00000E8A BAFFFF0000          <1>     mov edx, 0FFFFh
   300 00000E8F B5FF                <1>     mov ch, -1
   301 00000E91 CD4F                <1>     int 4Fh 
   302                              <1>     return
    19                              <2> %%_ret:
    20 00000E93 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   303                              <1> .executeInternal:
   304                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   305                              <1> ;rsi points after the command terminator in the command tail
   306 00000E94 488D1D2EF6FFFF      <1>     lea rbx, functionTable
   307                              <1> .nextEntry:
   308 00000E9B 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   309 00000E9E 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   310 00000EA1 0F84B30D0000        <1>     je launchChild      ;If so, check externally now
   311 00000EA7 380DC8F3FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   312 00000EAD 7529                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   313                              <1>     ;Here they have the same length so lets see if the name is the same
   314 00000EAF 56                  <1>     push rsi
   315                              <1>     ;ecx has the length to compare
   316 00000EB0 51                  <1>     push rcx
   317 00000EB1 488D7301            <1>     lea rsi, qword [rbx + 1]
   318 00000EB5 488D3DBAF3FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   319 00000EBC F3A6                <1>     rep cmpsb   ;Check the strings are equal
   320 00000EBE 59                  <1>     pop rcx
   321 00000EBF 5E                  <1>     pop rsi
   322 00000EC0 7516                <1>     jne .gotoNextEntry
   323                              <1>     ;Here it was found both strings are equal
   324 00000EC2 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   325 00000EC7 480FB71F            <1>     movzx rbx, word [rdi]
   326 00000ECB 488D3D2EF1FFFF      <1>     lea rdi, startLbl
   327 00000ED2 4801FB              <1>     add rbx, rdi
   328 00000ED5 FFD3                <1>     call rbx    ;Call this function...
   329                              <1>     return  ;... and return
    19                              <2> %%_ret:
    20 00000ED7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   330                              <1> .gotoNextEntry:
   331 00000ED8 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   332 00000EDF 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   333 00000EE2 EBB7                <1>     jmp short .nextEntry
   334                              <1> .dfltErrExit:
   335 00000EE4 488D15DEF6FFFF      <1>     lea rdx, badCmd
   336 00000EEB B409                <1>     mov ah, 09h
   337 00000EED CD41                <1>     int 41h
   338                              <1>     return
    19                              <2> %%_ret:
    20 00000EEF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   339                              <1> 
   340                              <1> 
   341                              <1> checkExtensionExec:
   342                              <1> ;Checks the extension field of cmdFcb is .COM, .EXE, .BAT in that order
   343                              <1> ;Returns: ZF=ZE if executable. ZF=NZ if not executable.
   344                              <1> ;         If ZF=ZE and CF=CY => Batch file
   345 00000EF0 8B05C6F1FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   346 00000EF6 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   347 00000EFB 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   348 00000F00 25DFDFDFFF          <1>     and eax, 0FFDFDFDFh ;Uppercase the three letters
   349 00000F05 3D434F4D20          <1>     cmp eax, "COM "
   350                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000F0A 74(EF)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   351 00000F0C 3D45584520          <1>     cmp eax, "EXE "
   352                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000F11 74(EF)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   353 00000F13 3D42415420          <1>     cmp eax, "BAT "
   354                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000F18 75(EF)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   355 00000F1A F9                  <1>     stc
   356                              <1>     return
    19                              <2> %%_ret:
    20 00000F1B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   357                              <1> 
   358                              <1> checkAndSetupRedir:
   359                              <1> ;Checks and sets up redir as appropriate
   360                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   361                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   362                              <1> ;Output: ZF=NZ => No redir
   363                              <1> ;        ZF=ZY => Redir
   364                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   365                              <1> ;CF=CY if pipe set or an embedded CR found
   366 00000F1C 57                  <1>     push rdi
   367 00000F1D 3C3C                <1>     cmp al, "<"
   368 00000F1F 740B                <1>     je .inputRedir
   369 00000F21 3C3E                <1>     cmp al, ">"
   370 00000F23 742A                <1>     je .outputRedir
   371 00000F25 3C7C                <1>     cmp al, "|"
   372 00000F27 7454                <1>     je .pipeSetup
   373 00000F29 F8                  <1>     clc
   374                              <1> .redirExit:
   375 00000F2A 5F                  <1>     pop rdi
   376                              <1>     return
    19                              <2> %%_ret:
    20 00000F2B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   377                              <1> .inputRedir:
   378 00000F2C C60578F1FFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   379 00000F33 488D3D49F3FFFF      <1>     lea rdi, rdrInFilespec
   380 00000F3A E8A1110000          <1>     call skipSpaces ;Skip spaces between < and the filespec
   381 00000F3F E86F000000          <1>     call copyCommandTailItem
   382 00000F44 72E4                <1>     jc .redirExit
   383 00000F46 E895110000          <1>     call skipSpaces
   384 00000F4B 30C0                <1>     xor al, al
   385 00000F4D EBDB                <1>     jmp short .redirExit
   386                              <1> .outputRedir:
   387 00000F4F C60556F1FFFF01      <1>     mov byte [redirOut], 1
   388 00000F56 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   389 00000F59 7506                <1>     jne .notDouble
   390 00000F5B FE054BF1FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   391                              <1> .notDouble:
   392 00000F61 488D3D6AF3FFFF      <1>     lea rdi, rdrOutFilespec
   393 00000F68 E873110000          <1>     call skipSpaces
   394 00000F6D E841000000          <1>     call copyCommandTailItem
   395 00000F72 72B6                <1>     jc .redirExit
   396 00000F74 E867110000          <1>     call skipSpaces
   397 00000F79 30C0                <1>     xor al, al
   398 00000F7B EBAD                <1>     jmp short .redirExit
   399                              <1> .pipeSetup:
   400 00000F7D C60515F1FFFFFF      <1>     mov byte [pipeFlag], -1
   401 00000F84 30C0                <1>     xor al, al
   402 00000F86 F9                  <1>     stc
   403 00000F87 5F                  <1>     pop rdi
   404                              <1>     return
    19                              <2> %%_ret:
    20 00000F88 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   405                              <1> 
   406                              <1> copyCommandTailItemProgram:
   407                              <1> ;Copies a program name from the command tail until a terminator is found.
   408                              <1> ;Stores a terminating null in the destination
   409                              <1> ;Input: rsi = Start of the item to copy
   410                              <1> ;       rdi = Location for copy
   411                              <1> ;Output: Sentence copied with a null terminator inserted.
   412                              <1> ; If CF=CY, embedded CR encountered
   413 00000F89 AC                  <1>     lodsb
   414 00000F8A 3C0D                <1>     cmp al, CR
   415 00000F8C 741A                <1>     je .endOfInput
   416 00000F8E E819110000          <1>     call isALterminator
   417 00000F93 741A                <1>     jz .exit
   418 00000F95 3A0588F0FFFF        <1>     cmp al, byte [pathSep]
   419 00000F9B 7412                <1>     je .exit
   420 00000F9D 3A0581F0FFFF        <1>     cmp al, byte [switchChar]
   421 00000FA3 740A                <1>     je .exit
   422 00000FA5 AA                  <1>     stosb
   423 00000FA6 EBE1                <1>     jmp short copyCommandTailItemProgram
   424                              <1> .endOfInput:
   425 00000FA8 E802000000          <1>     call .exit
   426 00000FAD F9                  <1>     stc 
   427                              <1>     return
    19                              <2> %%_ret:
    20 00000FAE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   428                              <1> .exit:
   429 00000FAF 30C0                <1>     xor al, al
   430 00000FB1 AA                  <1>     stosb
   431                              <1>     return
    19                              <2> %%_ret:
    20 00000FB2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   432                              <1> 
   433                              <1> copyCommandTailItem:
   434                              <1> ;Copies a sentence from the command tail until a terminator is found.
   435                              <1> ;Stores a terminating null in the destination
   436                              <1> ;Input: rsi = Start of the item to copy
   437                              <1> ;       rdi = Location for copy
   438                              <1> ;Output: Sentence copied with a null terminator inserted.
   439                              <1> ; If CF=CY, embedded CR encountered
   440 00000FB3 AC                  <1>     lodsb
   441 00000FB4 3C0D                <1>     cmp al, CR
   442 00000FB6 743A                <1>     je .endOfInput
   443 00000FB8 E8EF100000          <1>     call isALterminator
   444 00000FBD 743A                <1>     jz .exit
   445 00000FBF 3A055EF0FFFF        <1>     cmp al, byte [pathSep]
   446 00000FC5 740B                <1>     je .pathSep
   447 00000FC7 3A0557F0FFFF        <1>     cmp al, byte [switchChar]
   448 00000FCD 742A                <1>     je .exit
   449 00000FCF AA                  <1>     stosb
   450 00000FD0 EBE1                <1>     jmp short copyCommandTailItem
   451                              <1> .pathSep:
   452                              <1> ;We look ahead, if the last char is a pathsep, we ignore it
   453 00000FD2 AC                  <1>     lodsb   ;Get the next char, increment rsi by one
   454 00000FD3 E8D4100000          <1>     call isALterminator
   455 00000FD8 741F                <1>     jz .exit
   456 00000FDA 3C0D                <1>     cmp al, CR
   457 00000FDC 7414                <1>     je .endOfInput
   458 00000FDE 3A0540F0FFFF        <1>     cmp al, byte [switchChar]
   459 00000FE4 7413                <1>     je .exit
   460 00000FE6 8A0537F0FFFF        <1>     mov al, byte [pathSep]
   461 00000FEC AA                  <1>     stosb   ;Else store the pathsep
   462 00000FED 48FFCE              <1>     dec rsi ;Move rsi back a piece
   463 00000FF0 EBC1                <1>     jmp short copyCommandTailItem
   464                              <1> .endOfInput:
   465 00000FF2 E802000000          <1>     call .exit
   466 00000FF7 F9                  <1>     stc 
   467                              <1>     return
    19                              <2> %%_ret:
    20 00000FF8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   468                              <1> .exit:
   469 00000FF9 30C0                <1>     xor al, al
   470 00000FFB AA                  <1>     stosb
   471                              <1>     return
    19                              <2> %%_ret:
    20 00000FFC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   472                              <1> 
   473                              <1> 
   474                              <1> int4Eh:   ;Interrupt interface for parsing and executing command lines
   475                              <1> ;Input: rsi points to the count byte of a command line
   476 00000FFD 4150                <1>     push r8
   477 00000FFF 4151                <1>     push r9
   478 00001001 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   479 00001003 CD41                <1>     int 41h
   480 00001005 52                  <1>     push rdx    ;Save on the stack
   481 00001006 488D1DF3EEFFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   482 0000100D B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   483 0000100F CD41                <1>     int 41h
   484 00001011 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   485 00001014 4989D9              <1>     mov r9, rbx
   486 00001017 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   487 0000101E B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   488 00001023 F348A5              <1>     rep movsq   ;Copy command line over
   489                              <1>     ;call doCommandLine
   490 00001026 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   491 00001027 B450                <1>     mov ah, 50h ;Set Current PSP
   492 00001029 CD41                <1>     int 41h
   493 0000102B 4159                <1>     pop r9
   494 0000102D 4158                <1>     pop r8
   495 0000102F 48CF                <1>     iretq
    15                                  %include "./Source/Utils/COMMAND/Source/cmdFunc.asm"
    16                              <1> ;Note! Each function must setup the DTA to use for itself.
    17                              <1> ;There is no requirement to preserve the DTA across a call.
    18                              <1> ;Only the Int 4Eh entry point will preserve the callers DTA.
    19                              <1> 
    20                              <1> ;Common Error Messages, jumped to to return from
    21                              <1> badParamError:
    22 00001031 488D15DDF6FFFF      <1>     lea rdx, badParm
    23 00001038 EB22                <1>     jmp short badCmn
    24                              <1> badDriveError:
    25 0000103A 488D1597F6FFFF      <1>     lea rdx, badDrv
    26 00001041 EB19                <1>     jmp short badCmn
    27                              <1> badArgError:
    28 00001043 488D1548F9FFFF      <1>     lea rdx, badArgs
    29 0000104A EB10                <1>     jmp short badCmn
    30                              <1> badFileError:
    31 0000104C 488D1523F9FFFF      <1>     lea rdx, badSpec
    32 00001053 EB07                <1>     jmp short badCmn
    33                              <1> badDirError:
    34 00001055 488D15BAF7FFFF      <1>     lea rdx, badDir
    35                              <1> badCmn:
    36 0000105C B800090000          <1>     mov eax, 0900h
    37 00001061 CD41                <1>     int 41h
    38 00001063 F9                  <1>     stc ;Return with CY => Error occured
    39                              <1>     return
    19                              <2> %%_ret:
    20 00001064 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    40                              <1> 
    41                              <1> dir:
    42 00001065 C60535F3FFFF00      <1>     mov byte [dirPrnType], 0    ;Clear DIR flags
    43 0000106C C6052FF3FFFF00      <1>     mov byte [dirLineCtr], 0
    44 00001073 C60529F3FFFF00      <1>     mov byte [dirFileCtr], 0
    45 0000107A C605A4F3FFFF00      <1>     mov byte [dirPathArg], 0    ;Null terminate the start of the buffer
    46 00001081 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    46 0000108A 3F                  <1>
    47 0000108B 488D3D13F4FFFF      <1>     lea rdi, dirSrchPat ;Start also by initialising the search pattern
    48 00001092 48AB                <1>     stosq
    49 00001094 48FFC7              <1>     inc rdi ;Go past dot
    50 00001097 668907              <1>     mov word [rdi], ax
    51 0000109A 884702              <1>     mov byte [rdi + 2], al
    52                              <1>     ;Start by scanning for the switches
    53 0000109D 488D3DEBF0FFFF      <1>     lea rdi, cmdBuffer + 1  ;Goto command line input chars count
    54 000010A4 0FB60F              <1>     movzx ecx, byte [rdi]   ;Get number of chars typed
    55 000010A7 48FFC7              <1>     inc rdi ;Goto first char typed in
    56 000010AA 4889FE              <1>     mov rsi, rdi    ;Use rsi as start of buffer counter
    57 000010AD 8A0571EFFFFF        <1>     mov al, byte [switchChar]   ;Scan for switchchars
    58                              <1> .switchScan:
    59 000010B3 F2AE                <1>     repne scasb ;Scan for a switchchar
    60 000010B5 67E322              <1>     jecxz .switchScanDone
    61 000010B8 8A07                <1>     mov al, byte [rdi]  ;Get the byte pointed to by rdi
    62 000010BA 24DF                <1>     and al, 0DFh    ;UC it
    63 000010BC 3C57                <1>     cmp al, "W" ;Wide print mode?
    64 000010BE 7509                <1>     jne .notWideSw
    65 000010C0 800DDAF2FFFF01      <1>     or byte [dirPrnType], 1 ;Set the correct bit
    66 000010C7 EBEA                <1>     jmp short .switchScan
    67                              <1> .notWideSw:
    68 000010C9 3C50                <1>     cmp al, "P" ;Pause mode?
    69 000010CB 0F8560FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    70 000010D1 800DC9F2FFFF02      <1>     or byte [dirPrnType], 2 ;Set correct bit
    71 000010D8 EBD9                <1>     jmp short .switchScan
    72                              <1> .switchScanDone:
    73                              <1> ;If no args, only switches, we search CWD
    74                              <1> ;If one arg, search that 
    75                              <1> ;If more than one, fail
    76 000010DA 488D35AFF0FFFF      <1>     lea rsi, cmdBuffer + 2
    77 000010E1 E8FA0F0000          <1>     call skipSpaces ;Skip leading spaces
    78 000010E6 4881C603000000      <1>     add rsi, 3  ;Go past the DIR (always three chars)
    79                              <1> .loop:
    80 000010ED E8EE0F0000          <1>     call skipSpaces ;Skip spaces after
    81 000010F2 AC                  <1>     lodsb   ;Get first non space char
    82 000010F3 E8D70F0000          <1>     call isALEndOfCommand   ;If this is the end char CR or "|", exit
    83 000010F8 7442                <1>     jz .eocNoNull
    84 000010FA 3A0524EFFFFF        <1>     cmp al, byte [switchChar]  ;Is al a switch char?
    85 00001100 7509                <1>     jne .notSwitch
    86                              <1>     ;Now we skip the switch if it was a switch
    87 00001102 E8700F0000          <1>     call findTerminatorOrEOC    ;Go past the switch
    88 00001107 7233                <1>     jc .eocNoNull  ;If we reach the EOC, exit,
    89 00001109 EBE2                <1>     jmp short .loop
    90                              <1> .notSwitch:
    91                              <1>     ;If not a switch, should be a path. Copy to buffer and keep searching
    92 0000110B 803D13F3FFFF00      <1>     cmp byte [dirPathArg], 0    ;If a second path provided, error
    93 00001112 0F852BFFFFFF        <1>     jne badArgError
    94 00001118 488D3D06F3FFFF      <1>     lea rdi, dirPathArg ;Store the path to search here AS WRITTEN BY USER
    95 0000111F 48FFCE              <1>     dec rsi ;Go back to the start of the string
    96                              <1> .nameCopy:
    97 00001122 AC                  <1>     lodsb
    98 00001123 E8A70F0000          <1>     call isALEndOfCommand
    99 00001128 740F                <1>     jz .eocReached
   100 0000112A E87D0F0000          <1>     call isALterminator
   101 0000112F 7403                <1>     jz .terminateCopy
   102 00001131 AA                  <1>     stosb
   103 00001132 EBEE                <1>     jmp short .nameCopy
   104                              <1> .terminateCopy:
   105 00001134 31C0                <1>     xor eax, eax
   106 00001136 AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   107 00001137 EBB4                <1>     jmp short .loop ;Now search if another 
   108                              <1> .eocReached:
   109 00001139 31C0                <1>     xor eax, eax
   110 0000113B AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   111                              <1> .eocNoNull:
   112 0000113C 803DE2F2FFFF00      <1>     cmp byte [dirPathArg], 0    ;If no path provided, use CWD for current drive
   113 00001143 7434                <1>     je .currentDrv
   114                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   115 00001145 488D35D9F2FFFF      <1>     lea rsi, dirPathArg
   116 0000114C 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   117 00001150 7527                <1>     jne .currentDrv
   118                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   119 00001152 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   120 00001157 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   121 0000115B B801290000          <1>     mov eax, 2901h   ;Parse filename
   122 00001160 CD41                <1>     int 41h
   123 00001162 3CFF                <1>     cmp al, -1
   124 00001164 0F84D0FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   125                              <1>     ;Else the drive in the fcb is valid
   126 0000116A 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   127 0000116F FEC8                <1>     dec al  ;Convert to 0 based drive number
   128 00001171 88052DF2FFFF        <1>     mov byte [dirDrv], al
   129 00001177 EB0B                <1>     jmp short .dirPrintVol
   130                              <1> .currentDrv:
   131 00001179 E8E50E0000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   132 0000117E 880520F2FFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   133                              <1> .dirPrintVol:
   134 00001184 0FB60519F2FFFF      <1>     movzx eax, byte [dirDrv] 
   135 0000118B E8B7070000          <1>     call volume.dirEP
   136 00001190 803D8EF2FFFF00      <1>     cmp byte [dirPathArg], 0    ;Null path here, 
   137 00001197 7409                <1>     je .printCWD
   138 00001199 803D88F2FFFF00      <1>     cmp byte [dirPathArg + 3], 0    ;Was this X:,0?
   139 000011A0 7400                <1>     je .printCWD
   140                              <1>     ;Here we have a path
   141                              <1>     ;Temp measure, we just fall through ignoring the path provided
   142                              <1> .printCWD:
   143 000011A2 8A15FCF1FFFF        <1>     mov dl, byte [dirDrv]
   144 000011A8 88D0                <1>     mov al, dl
   145 000011AA 0441                <1>     add al, "A"
   146 000011AC B43A                <1>     mov ah, ":"
   147 000011AE 6689056CF1FFFF      <1>     mov word [searchSpec], ax
   148 000011B5 8A0568EEFFFF        <1>     mov al, byte [pathSep]
   149 000011BB 880562F1FFFF        <1>     mov byte [searchSpec + 2], al
   150 000011C1 488D355CF1FFFF      <1>     lea rsi, searchSpec + 3  ;Make space for a X:"\"
   151 000011C8 B447                <1>     mov ah, 47h ;Get Current Working Directory
   152 000011CA FEC2                <1>     inc dl  ;Convert to 1 based number
   153 000011CC CD41                <1>     int 41h
   154 000011CE 488D3D4CF1FFFF      <1>     lea rdi, searchSpec
   155 000011D5 E88E0E0000          <1>     call strlen
   156 000011DA FFC9                <1>     dec ecx
   157 000011DC C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   158 000011E0 488D1597F6FFFF      <1>     lea rdx, dirMain
   159 000011E7 B409                <1>     mov ah, 09h
   160 000011E9 CD41                <1>     int 41h
   161 000011EB 4889FA              <1>     mov rdx, rdi    ;Print the current directory we are working on
   162 000011EE B409                <1>     mov ah, 09h
   163 000011F0 CD41                <1>     int 41h
   164 000011F2 488D1576F3FFFF      <1>     lea rdx, crlf2
   165 000011F9 B409                <1>     mov ah, 09h
   166 000011FB CD41                <1>     int 41h
   167 000011FD E801000000          <1>     call .searchForFile
   168                              <1>     return
    19                              <2> %%_ret:
    20 00001202 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   169                              <1>     ;If we get no path spec or just a X: path spec then we 
   170                              <1>     ; search the current working directory for that pathspec
   171                              <1>     ;If we get an actual pathspec, we first save the CWD for that drive
   172                              <1>     ; and then we try to make the pathspec the CWD. 
   173                              <1>     ;   If it works, we then search *.* in that folder and return the og CWD.
   174                              <1>     ;   If it fails, we then search one level up, for the search pattern
   175                              <1>     ;    that we compute.
   176                              <1> 
   177                              <1>     
   178                              <1>     ;Now we need to print the path to the folder we will be searching in
   179                              <1> .searchForFile:
   180                              <1>     ;Now we search for the files
   181                              <1>     ;RCX must have the number of chars to the end of the pathspec
   182 00001203 488D3D17F1FFFF      <1>     lea rdi, searchSpec
   183 0000120A 8A0513EEFFFF        <1>     mov al, byte [pathSep]
   184 00001210 38440FFF            <1>     cmp byte [rdi + rcx - 1], al
   185 00001214 7405                <1>     je .noAddSlash  ;Deals with special case of root dir
   186 00001216 88040F              <1>     mov byte [rdi + rcx], al
   187 00001219 FFC1                <1>     inc ecx
   188                              <1> .noAddSlash:
   189 0000121B 488D3C0F            <1>     lea rdi, qword [rdi + rcx]
   190 0000121F 488D357FF2FFFF      <1>     lea rsi, dirSrchPat
   191 00001226 4889FA              <1>     mov rdx, rdi    ;Ptr to search for in rdx
   192 00001229 48A5                <1>     movsq
   193 0000122B A5                  <1>     movsd
   194 0000122C 30C0                <1>     xor al, al
   195 0000122E AA                  <1>     stosb   ;Store the terminating null
   196 0000122F B911000000          <1>     mov ecx, dirReadOnly | dirDirectory
   197 00001234 B44E                <1>     mov ah, 4Eh ;Find first
   198 00001236 CD41                <1>     int 41h
   199 00001238 720B                <1>     jc .dirNoMoreFiles
   200                              <1> .findNext:
   201 0000123A E876000000          <1>     call .dirPrintFileData  ;Print the file information
   202 0000123F B44F                <1>     mov ah, 4Fh
   203 00001241 CD41                <1>     int 41h
   204 00001243 73F5                <1>     jnc .findNext 
   205                              <1> .dirNoMoreFiles:
   206 00001245 F60555F1FFFF01      <1>     test byte [dirPrnType], 1
   207 0000124C 740B                <1>     jz .dirNoEndNewLine
   208 0000124E 488D1517F3FFFF      <1>     lea rdx, crlf   ;Only need this for /W
   209 00001255 B409                <1>     mov ah, 09h
   210 00001257 CD41                <1>     int 41h
   211                              <1> .dirNoEndNewLine:
   212                              <1>     ;Now we print the number of files and the number of bytes on the disk
   213 00001259 488D1594F8FFFF      <1>     lea rdx, fourSpc
   214 00001260 B409                <1>     mov ah, 09h
   215 00001262 CD41                <1>     int 41h
   216 00001264 B409                <1>     mov ah, 09h ;Print four Spaces twice
   217 00001266 CD41                <1>     int 41h
   218 00001268 0FB60534F1FFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   219 0000126F E81D100000          <1>     call printDecimalWord
   220 00001274 488D153CF4FFFF      <1>     lea rdx, dirOk
   221 0000127B B409                <1>     mov ah, 09h
   222 0000127D CD41                <1>     int 41h
   223 0000127F 488D1573F8FFFF      <1>     lea rdx, threeSpc
   224 00001286 B409                <1>     mov ah, 09h
   225 00001288 CD41                <1>     int 41h
   226 0000128A B800360000          <1>     mov eax, 3600h ;Get disk info
   227 0000128F 8A150FF1FFFF        <1>     mov dl, byte [dirDrv]
   228 00001295 CD41                <1>     int 41h ;Get disk free space info
   229 00001297 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   230 0000129A 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   231 0000129D 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   232 0000129F F7E1                <1>     mul ecx ;Get bytes per cluster
   233 000012A1 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   234                              <1>     ;rax now has the number of free bytes on the disk
   235 000012A4 E8E80F0000          <1>     call printDecimalWord
   236 000012A9 488D1511F4FFFF      <1>     lea rdx, bytesOk
   237 000012B0 B409                <1>     mov ah, 09h
   238 000012B2 CD41                <1>     int 41h
   239                              <1>     return
    19                              <2> %%_ret:
    20 000012B4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   240                              <1> 
   241                              <1> .dirPrintFileData:
   242                              <1> ;Use fcbCmdSpec to build the file name with space
   243                              <1> ;Start by print the name (same for both cases)
   244                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   245 000012B5 F6051CEEFFFF06      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles
   246                              <1>     retnz   ;Simply return if either bit is set
    51                              <2> cret nz
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000012BC 75(B4)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   247 000012BE 488D351CEEFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   248 000012C5 488D3D91EFFFFF      <1>     lea rdi, fcbCmdSpec
   249 000012CC E8680E0000          <1>     call asciiFilenameToFCB
   250 000012D1 488D1585EFFFFF      <1>     lea rdx, fcbCmdSpec
   251 000012D8 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   252 000012DD BB01000000          <1>     mov ebx, 1  ;STDOUT
   253 000012E2 B440                <1>     mov ah, 40h ;Write handle
   254 000012E4 CD41                <1>     int 41h
   255 000012E6 52                  <1>     push rdx
   256 000012E7 B220                <1>     mov dl, " "
   257 000012E9 B402                <1>     mov ah, 02h ;Print char
   258 000012EB CD41                <1>     int 41h
   259 000012ED 5A                  <1>     pop rdx
   260 000012EE 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   261 000012F5 B903000000          <1>     mov ecx, 3  ;Print three chars
   262 000012FA BB01000000          <1>     mov ebx, 1  ;STDOUT
   263 000012FF B440                <1>     mov ah, 40h ;Write handle
   264 00001301 CD41                <1>     int 41h
   265 00001303 F60597F0FFFF01      <1>     test byte [dirPrnType], 1
   266 0000130A 0F85A8000000        <1>     jnz .widePrint
   267                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   268                              <1>     ;Now check if a DIR
   269 00001310 F605C1EDFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   270 00001317 7418                <1>     jz .dirPrintNotDir
   271 00001319 488D15AFF3FFFF      <1>     lea rdx, dirLbl
   272 00001320 B409                <1>     mov ah, 09h
   273 00001322 CD41                <1>     int 41h
   274 00001324 488D15CEF7FFFF      <1>     lea rdx, threeSpc
   275 0000132B B409                <1>     mov ah, 09h
   276 0000132D CD41                <1>     int 41h
   277 0000132F EB4F                <1>     jmp short .dirPrintFileDT
   278                              <1> .dirPrintNotDir:
   279                              <1> ;Here we print the file size
   280 00001331 B220                <1>     mov dl, " "
   281 00001333 B402                <1>     mov ah, 02h
   282 00001335 CD41                <1>     int 41h
   283 00001337 8B05A0EDFFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   284 0000133D E8C00F0000          <1>     call getDecimalWord
   285 00001342 4889CB              <1>     mov rbx, rcx
   286 00001345 51                  <1>     push rcx
   287 00001346 480FCB              <1>     bswap rbx
   288 00001349 B908000000          <1>     mov ecx, 8
   289                              <1> .dirPrintFileSizePrep:
   290 0000134E 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   291 00001350 7514                <1>     jne .dirPrintFileSize
   292 00001352 B402                <1>     mov ah, 02h
   293 00001354 B220                <1>     mov dl, " "
   294 00001356 CD41                <1>     int 41h
   295 00001358 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   296 0000135C FFC9                <1>     dec ecx
   297 0000135E 81F901000000        <1>     cmp ecx, 1
   298 00001364 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   299                              <1> .dirPrintFileSize:
   300 00001366 5B                  <1>     pop rbx
   301                              <1> .dirPrintFileSizeLoop:
   302 00001367 88DA                <1>     mov dl, bl
   303 00001369 B402                <1>     mov ah, 02h
   304 0000136B CD41                <1>     int 41h
   305 0000136D 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   306 00001371 FFC9                <1>     dec ecx
   307 00001373 75F2                <1>     jnz .dirPrintFileSizeLoop
   308 00001375 488D1581F7FFFF      <1>     lea rdx, twoSpc
   309 0000137C B409                <1>     mov ah, 09h
   310 0000137E CD41                <1>     int 41h
   311                              <1> .dirPrintFileDT:
   312 00001380 B220                <1>     mov dl, " "
   313 00001382 B402                <1>     mov ah, 02h
   314 00001384 CD41                <1>     int 41h
   315 00001386 0FB7054EEDFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   316 0000138D 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   317 0000138F E8250A0000          <1>     call printDate
   318 00001394 488D1562F7FFFF      <1>     lea rdx, twoSpc
   319 0000139B B409                <1>     mov ah, 09h
   320 0000139D CD41                <1>     int 41h
   321 0000139F 0FB70533EDFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   322 000013A6 E8300B0000          <1>     call printTime
   323 000013AB 488D15BAF1FFFF      <1>     lea rdx, crlf
   324 000013B2 B409                <1>     mov ah, 09h
   325 000013B4 CD41                <1>     int 41h
   326 000013B6 EB0B                <1>     jmp short .dirPrintNameExit
   327                              <1> .widePrint:
   328                              <1> ;If /W, print name space ext space space space space
   329 000013B8 488D1535F7FFFF      <1>     lea rdx, fourSpc
   330 000013BF B409                <1>     mov ah, 09h ;Print string
   331 000013C1 CD41                <1>     int 41h
   332                              <1> .dirPrintNameExit:
   333 000013C3 FE05DAEFFFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   334 000013C9 FE05D3EFFFFF        <1>     inc byte [dirLineCtr]
   335 000013CF 803DCCEFFFFF17      <1>     cmp byte [dirLineCtr], 23
   336                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 000013D6 7401                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 000013D8 C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   337 000013D9 488D1516F3FFFF      <1>     lea rdx, pauseMes
   338 000013E0 B409                <1>     mov ah, 09h
   339 000013E2 CD41                <1>     int 41h
   340 000013E4 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   341 000013E6 CD41                <1>     int 41h
   342 000013E8 C605B3EFFFFF00      <1>     mov byte [dirLineCtr], 0
   343 000013EF 488D1576F1FFFF      <1>     lea rdx, crlf   ;Force new line
   344 000013F6 B409                <1>     mov ah, 09h
   345 000013F8 CD41                <1>     int 41h
   346                              <1>     return
    19                              <2> %%_ret:
    20 000013FA C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   347                              <1> 
   348                              <1> chdir:
   349 000013FB F605ABECFFFFFF      <1>     test byte [arg1Flg], -1
   350 00001402 754D                <1>     jnz .changeDir
   351                              <1>     ;Print CWD
   352                              <1> .printCWD:
   353 00001404 E8B30B0000          <1>     call putCWDInPrompt ;Exactly the same procedure
   354 00001409 E895090000          <1>     call printCRLF
   355                              <1>     return
    19                              <2> %%_ret:
    20 0000140E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   356                              <1> .printDiskCWD:
   357                              <1> ;Print CWD for a specified drive
   358 0000140F 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   359 00001413 88D0                <1>     mov al, dl
   360 00001415 0440                <1>     add al, "@" ;Get the UC letter
   361 00001417 B43A                <1>     mov ah, ":"
   362 00001419 488D3D01EFFFFF      <1>     lea rdi, searchSpec
   363 00001420 66AB                <1>     stosw   ;Store X:, rdi+=2
   364 00001422 8A05FBEBFFFF        <1>     mov al, byte [pathSep]
   365 00001428 AA                  <1>     stosb   ;Store pathSep, inc rdi
   366 00001429 B447                <1>     mov ah, 47h ;Get Current Working Directory
   367 0000142B 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   368 0000142E CD41                <1>     int 41h
   369 00001430 E8330C0000          <1>     call strlen
   370 00001435 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   371 0000143B B440                <1>     mov ah, 40h ;Write to handle
   372 0000143D BB01000000          <1>     mov ebx, 1  ;STDOUT
   373 00001442 488D15D8EEFFFF      <1>     lea rdx, searchSpec
   374 00001449 CD41                <1>     int 41h
   375 0000144B E853090000          <1>     call printCRLF
   376                              <1>     return
    19                              <2> %%_ret:
    20 00001450 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   377                              <1> .changeDir:
   378 00001451 8A0558ECFFFF        <1>     mov al, byte [arg1FCBret]
   379 00001457 3CFF                <1>     cmp al, -1 
   380 00001459 0F84DBFBFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   381 0000145F 4180785D20          <1>     cmp byte [r8 + fcb1 + fcb.filename], " "
   382 00001464 7520                <1>     jne .getFQPath
   383                              <1>     ;Now we double check that on the command line we have . or ..
   384 00001466 0FB60541ECFFFF      <1>     movzx eax, byte [arg1Off]
   385 0000146D 488D351AEDFFFF      <1>     lea rsi, cmdBuffer
   386 00001474 4801C6              <1>     add rsi, rax
   387 00001477 8A05A6EBFFFF        <1>     mov al, byte [pathSep]
   388 0000147D 3806                <1>     cmp byte [rsi], al  ;Is the first char a pathsep?
   389 0000147F 7405                <1>     je .getFQPath
   390 00001481 803E2E              <1>     cmp byte [rsi], "."
   391 00001484 7589                <1>     jne .printDiskCWD
   392                              <1>     ;If the path is . or .., its acceptable, else fail
   393                              <1> .getFQPath:
   394 00001486 E8380D0000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   395 0000148B 0F82C4FBFFFF        <1>     jc badDirError  ;If this returns CF=CY, its a badDir
   396 00001491 488D1589EEFFFF      <1>     lea rdx, searchSpec
   397 00001498 B43B                <1>     mov ah, 3Bh ;CHDIR
   398 0000149A CD41                <1>     int 41h
   399 0000149C 0F82B3FBFFFF        <1>     jc badDirError
   400                              <1>     return
    19                              <2> %%_ret:
    20 000014A2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   401                              <1> 
   402                              <1> mkdir:
   403 000014A3 F60503ECFFFFFF      <1>     test byte [arg1Flg], -1
   404 000014AA 0F8493FBFFFF        <1>     jz badArgError
   405 000014B0 F605F9EBFFFFFF      <1>     test byte [arg2Flg], -1
   406 000014B7 0F8586FBFFFF        <1>     jnz badArgError
   407                              <1>     ;We have exactly one argument
   408 000014BD 8A05ECEBFFFF        <1>     mov al, byte [arg1FCBret]
   409 000014C3 3CFF                <1>     cmp al, -1 
   410 000014C5 0F846FFBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   411 000014CB E8F30C0000          <1>     call buildCommandPath
   412 000014D0 7215                <1>     jc .badMake
   413 000014D2 488D1548EEFFFF      <1>     lea rdx, searchSpec
   414 000014D9 B800390000          <1>     mov eax, 3900h  ;MKDIR
   415 000014DE CD41                <1>     int 41h
   416 000014E0 7205                <1>     jc .badMake   ;Return if not carry
   417 000014E2 B40D                <1>     mov ah, 0Dh
   418 000014E4 CD41                <1>     int 41h ;Flush to disk
   419                              <1>     return
    19                              <2> %%_ret:
    20 000014E6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   420                              <1> .badMake:   ;Else, bad make
   421 000014E7 488D153CF3FFFF      <1>     lea rdx, badMD
   422 000014EE B800090000          <1>     mov eax, 0900h
   423 000014F3 CD41                <1>     int 41h
   424                              <1>     return
    19                              <2> %%_ret:
    20 000014F5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   425                              <1> 
   426                              <1> rmdir:
   427 000014F6 F605B0EBFFFFFF      <1>     test byte [arg1Flg], -1
   428 000014FD 0F8440FBFFFF        <1>     jz badArgError
   429 00001503 F605A6EBFFFFFF      <1>     test byte [arg2Flg], -1
   430 0000150A 0F8533FBFFFF        <1>     jnz badArgError
   431                              <1>     ;We have exactly one argument
   432 00001510 8A0599EBFFFF        <1>     mov al, byte [arg1FCBret]
   433 00001516 3CFF                <1>     cmp al, -1 
   434 00001518 0F841CFBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   435 0000151E E8A00C0000          <1>     call buildCommandPath
   436 00001523 7215                <1>     jc .badRemove
   437 00001525 488D15F5EDFFFF      <1>     lea rdx, searchSpec
   438 0000152C B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   439 00001531 CD41                <1>     int 41h
   440 00001533 7205                <1>     jc .badRemove   ;Return if not carry
   441 00001535 B40D                <1>     mov ah, 0Dh
   442 00001537 CD41                <1>     int 41h ;Flush to disk
   443                              <1>     return
    19                              <2> %%_ret:
    20 00001539 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   444                              <1> .badRemove:   ;Else, bad make
   445 0000153A 488D1506F3FFFF      <1>     lea rdx, badRD
   446 00001541 B800090000          <1>     mov eax, 0900h
   447 00001546 CD41                <1>     int 41h
   448                              <1>     return
    19                              <2> %%_ret:
    20 00001548 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   449                              <1> 
   450                              <1> copy:
   451                              <1>     return
    19                              <2> %%_ret:
    20 00001549 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   452                              <1> erase:
   453                              <1>     return
    19                              <2> %%_ret:
    20 0000154A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   454                              <1> date:
   455 0000154B 488D15FBF1FFFF      <1>     lea rdx, curDate
   456 00001552 B409                <1>     mov ah, 09h
   457 00001554 CD41                <1>     int 41h
   458 00001556 B42A                <1>     mov ah, 2Ah ;DOS get date
   459 00001558 CD41                <1>     int 41h
   460                              <1> 	;AL = day of the week (0=Sunday)
   461                              <1> 	;CX = year (1980-2099)
   462                              <1> 	;DH = month (1-12)
   463                              <1> 	;DL = day (1-31)
   464 0000155A 66890D64EFFFFF      <1>     mov word [td1], cx
   465 00001561 881560EFFFFF        <1>     mov byte [td3], dl
   466 00001567 88355BEFFFFF        <1>     mov byte [td4], dh
   467 0000156D 0FB6C0              <1>     movzx eax, al
   468 00001570 89C3                <1>     mov ebx, eax
   469 00001572 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   470 00001574 01D8                <1>     add eax, ebx ;Make it 3 times 
   471 00001576 488D15ACF1FFFF      <1>     lea rdx, dayName
   472 0000157D 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   473 00001581 B903000000          <1>     mov ecx, 3  ;Print three chars
   474 00001586 BB01000000          <1>     mov ebx, 1  ;STDOUT
   475 0000158B B440                <1>     mov ah, 40h ;Write to handle
   476 0000158D CD41                <1>     int 41h
   477 0000158F B220                <1>     mov dl, " "
   478 00001591 B402                <1>     mov ah, 02h
   479 00001593 CD41                <1>     int 41h
   480                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   481                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   482                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   483 00001595 0FB70529EFFFFF      <1>     movzx eax, word [td1]   ;Get this word
   484 0000159C C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   485 0000159F 0FB61D22EFFFFF      <1>     movzx ebx, byte [td4]
   486 000015A6 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   487 000015A9 09D8                <1>     or eax, ebx ;Add this date to eax
   488 000015AB 0FB61D15EFFFFF      <1>     movzx ebx, byte [td3]
   489 000015B2 09D8                <1>     or eax, ebx
   490 000015B4 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   491 000015B9 E8FB070000          <1>     call printDate
   492                              <1> 
   493 000015BE 488D1599F1FFFF      <1>     lea rdx, newDate
   494 000015C5 B409                <1>     mov ah, 09h
   495 000015C7 CD41                <1>     int 41h
   496 000015C9 488D15ADF1FFFF      <1>     lea rdx, ukDate
   497 000015D0 488D0599F1FFFF      <1>     lea rax, usDate
   498 000015D7 488D1DACF1FFFF      <1>     lea rbx, jpDate
   499 000015DE 803D49EAFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   500 000015E5 480F47D3            <1>     cmova rdx, rbx
   501 000015E9 480F42D0            <1>     cmovb rdx, rax
   502 000015ED B409                <1>     mov ah, 09h
   503 000015EF CD41                <1>     int 41h
   504                              <1> 
   505 000015F1 498D9080000000      <1>     lea rdx, qword [r8 + cmdLineCnt]
   506 000015F8 B40A                <1>     mov ah, 0Ah
   507 000015FA CD41                <1>     int 41h
   508 000015FC 52                  <1>     push rdx
   509 000015FD 488D1568EFFFFF      <1>     lea rdx, crlf
   510 00001604 B409                <1>     mov ah, 09h
   511 00001606 CD41                <1>     int 41h
   512 00001608 5A                  <1>     pop rdx
   513 00001609 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   514                              <1>     rete    ;Exit!
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 0000160D 7501                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 0000160F C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   515                              <1>     return
    19                              <2> %%_ret:
    20 00001610 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   516                              <1> 
   517                              <1> time:
   518 00001611 488D158EF1FFFF      <1>     lea rdx, curTime
   519 00001618 B409                <1>     mov ah, 09h
   520 0000161A CD41                <1>     int 41h
   521 0000161C B42C                <1>     mov ah, 2Ch ;DOS get time
   522 0000161E CD41                <1>     int 41h
   523                              <1>     ;CH = hour (0-23)
   524                              <1> 	;CL = minutes (0-59)
   525                              <1> 	;DH = seconds (0-59)
   526                              <1> 	;DL = hundredths (0-99)
   527 00001620 880D9FEEFFFF        <1>     mov byte [td1], cl
   528 00001626 882D9AEEFFFF        <1>     mov byte [td2], ch
   529 0000162C 881595EEFFFF        <1>     mov byte [td3], dl
   530 00001632 883590EEFFFF        <1>     mov byte [td4], dh
   531 00001638 0FB6C5              <1>     movzx eax, ch
   532 0000163B E80D090000          <1>     call printTime.printHours
   533                              <1> 
   534 00001640 8A15F5E9FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   535 00001646 B402                <1>     mov ah, 02h
   536 00001648 CD41                <1>     int 41h
   537                              <1> 
   538 0000164A 0FB60574EEFFFF      <1>     movzx eax, byte [td1]   ;Minutes
   539 00001651 E8E7080000          <1>     call printTime.printMinutesAlt
   540                              <1> 
   541 00001656 8A15DFE9FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   542 0000165C B402                <1>     mov ah, 02h
   543 0000165E CD41                <1>     int 41h
   544                              <1> 
   545 00001660 0FB60561EEFFFF      <1>     movzx eax, byte [td4]   ;Seconds
   546 00001667 E8D1080000          <1>     call printTime.printMinutesAlt
   547                              <1> 
   548 0000166C B22E                <1>     mov dl, "."
   549 0000166E B402                <1>     mov ah, 02h
   550 00001670 CD41                <1>     int 41h
   551                              <1> 
   552 00001672 0FB6054EEEFFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   553 00001679 E8BF080000          <1>     call printTime.printMinutesAlt
   554                              <1> 
   555 0000167E 488D1532F1FFFF      <1>     lea rdx, newTime
   556 00001685 B409                <1>     mov ah, 09h
   557 00001687 CD41                <1>     int 41h
   558                              <1> 
   559 00001689 498D9080000000      <1>     lea rdx, qword [r8 + cmdLineCnt]
   560 00001690 B40A                <1>     mov ah, 0Ah
   561 00001692 CD41                <1>     int 41h
   562 00001694 52                  <1>     push rdx
   563 00001695 488D15D0EEFFFF      <1>     lea rdx, crlf
   564 0000169C B409                <1>     mov ah, 09h
   565 0000169E CD41                <1>     int 41h
   566 000016A0 5A                  <1>     pop rdx
   567 000016A1 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   568                              <1>     rete    ;Exit!
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 000016A5 7501                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 000016A7 C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   569                              <1>     return
    19                              <2> %%_ret:
    20 000016A8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   570                              <1> ctty:
   571 000016A9 F605FDE9FFFFFF      <1>     test byte [arg1Flg], -1
   572 000016B0 0F848DF9FFFF        <1>     jz badArgError
   573 000016B6 F605F3E9FFFFFF      <1>     test byte [arg2Flg], -1
   574 000016BD 0F8580F9FFFF        <1>     jnz badArgError
   575 000016C3 488D35C4EAFFFF      <1>     lea rsi, cmdBuffer
   576 000016CA 0FB605DDE9FFFF      <1>     movzx eax, byte [arg1Off]
   577 000016D1 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
   578 000016D4 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
   579 000016D8 750F                <1>     jne .noDrive
   580 000016DA 0FB605CEE9FFFF      <1>     movzx eax, byte [arg1FCBret]
   581 000016E1 3CFF                <1>     cmp al, -1
   582 000016E3 0F8451F9FFFF        <1>     je badDriveError
   583                              <1> .noDrive:
   584                              <1>     ;Now we open the provided file
   585 000016E9 E8880C0000          <1>     call copyArgumentToSearchSpec
   586 000016EE 488D152CECFFFF      <1>     lea rdx, searchSpec
   587 000016F5 B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
   588 000016FA CD41                <1>     int 41h
   589 000016FC 0F824AF9FFFF        <1>     jc badFileError
   590 00001702 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
   591 00001705 B800440000          <1>     mov eax, 4400h  ;Get device word
   592 0000170A CD41                <1>     int 41h
   593 0000170C F6C280              <1>     test dl, 80h    ;Test if this device is a char device
   594 0000170F 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
   595                              <1>     ;Now we set this handle to be STDIO
   596 00001711 80CA03              <1>     or dl, 3    ;Set STDIO bits
   597 00001714 30F6                <1>     xor dh, dh
   598 00001716 B801440000          <1>     mov eax, 4401h  ;Now we set the device word
   599 0000171B CD41                <1>     int 41h
   600                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
   601 0000171D 31C9                <1>     xor ecx, ecx    ;STDIN
   602 0000171F B446                <1>     mov ah, 46h
   603 00001721 CD41                <1>     int 41h
   604 00001723 FFC1                <1>     inc ecx         ;STDOUT
   605 00001725 B446                <1>     mov ah, 46h
   606 00001727 CD41                <1>     int 41h
   607 00001729 FFC1                <1>     inc ecx         ;STDERR
   608 0000172B B446                <1>     mov ah, 46h
   609 0000172D CD41                <1>     int 41h
   610 0000172F B43E                <1>     mov ah, 3Eh ;Now we close the original handle
   611 00001731 CD41                <1>     int 41h
   612                              <1>     return
    19                              <2> %%_ret:
    20 00001733 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   613                              <1> .badCharDev:
   614 00001734 488D157BF1FFFF      <1>     lea rdx, badDev
   615 0000173B B409                <1>     mov ah, 09h
   616 0000173D CD41                <1>     int 41h
   617 0000173F B43E                <1>     mov ah, 3Eh ;Close opened handle
   618 00001741 CD41                <1>     int 41h
   619                              <1>     return
    19                              <2> %%_ret:
    20 00001743 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   620                              <1> 
   621                              <1> cls:  
   622 00001744 B800440000          <1>     mov eax, 4400h  ;Get device info
   623 00001749 BB01000000          <1>     mov ebx, 1      ;for handle 1
   624 0000174E CD41                <1>     int 41h         ;in dx
   625 00001750 F7C280000000        <1>     test edx, devCharDev
   626 00001756 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   627 00001758 F7C210000000        <1>     test edx, charDevFastOut
   628 0000175E 743E                <1>     jz .doAnsi
   629                              <1>     ;Test if Int 49h uses Int 30h
   630                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   631                              <1>     ;Int 49h MUST be terminated with a IRETQ, within 1024 bytes
   632 00001760 B849350000          <1>     mov eax, 3549h  ;Get the vector for interrupt 49h
   633 00001765 CD41                <1>     int 41h
   634                              <1> .biosCheck:
   635 00001767 66813BCD30          <1>     cmp word [rbx], 30CDh
   636 0000176C 740C                <1>     je .biosConfirmed
   637 0000176E 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   638 00001773 7429                <1>     je .doAnsi
   639 00001775 48FFC3              <1>     inc rbx
   640 00001778 EBED                <1>     jmp short .biosCheck
   641                              <1> .biosConfirmed:
   642                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   643 0000177A B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   644 0000177C 31DB                <1>     xor ebx, ebx
   645 0000177E CD30                <1>     int 30h
   646 00001780 B40F                <1>     mov ah, 0Fh ;Get screen mode
   647 00001782 CD30                <1>     int 30h
   648 00001784 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   649 00001787 FECA                <1>     dec dl
   650 00001789 B619                <1>     mov dh, 25  ;Number of rows is standard
   651 0000178B 31C0                <1>     xor eax, eax
   652 0000178D 89C1                <1>     mov ecx, eax
   653 0000178F B707                <1>     mov bh, 7   ;Screen attributes
   654 00001791 B406                <1>     mov ah, 6   ;Scroll
   655 00001793 CD30                <1>     int 30h
   656 00001795 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   657 00001797 B700                <1>     mov bh, 0   ;Page 0
   658 00001799 B402                <1>     mov ah, 2
   659 0000179B CD30                <1>     int 30h
   660                              <1>     return
    19                              <2> %%_ret:
    20 0000179D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   661                              <1> .doAnsi:
   662                              <1> ;If an ANSI driver is not installed, this will simply insert blank lines
   663                              <1> ;4 chars in the ansi routine
   664                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   665                              <1> ; understand ANSI codes
   666 0000179E 488D354BF3FFFF      <1>     lea rsi, ansiCls
   667 000017A5 B904000000          <1>     mov ecx, 4
   668 000017AA B406                <1>     mov ah, 06h ;Raw char output
   669                              <1> .ansiLp:
   670 000017AC AC                  <1>     lodsb   ;Get the char in 
   671 000017AD 88C2                <1>     mov dl, al
   672 000017AF CD41                <1>     int 41h
   673 000017B1 FFC9                <1>     dec ecx
   674 000017B3 75F7                <1>     jnz .ansiLp
   675                              <1>     return
    19                              <2> %%_ret:
    20 000017B5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   676                              <1> 
   677                              <1> break:
   678 000017B6 F605F0E8FFFFFF      <1>     test byte [arg1Flg], -1
   679 000017BD 752D                <1>     jnz .argumentProvided
   680                              <1>     ;Here we just get the status of break
   681 000017BF B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   682 000017C4 CD41                <1>     int 41h
   683 000017C6 88D3                <1>     mov bl, dl
   684 000017C8 488D1589F1FFFF      <1>     lea rdx, breakIs
   685 000017CF B409                <1>     mov ah, 09h
   686 000017D1 CD41                <1>     int 41h
   687 000017D3 488D1579F1FFFF      <1>     lea rdx, onMes
   688 000017DA 488D0D6CF1FFFF      <1>     lea rcx, offMes
   689 000017E1 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   690 000017E3 480F44D1            <1>     cmovz rdx, rcx
   691 000017E7 B409                <1>     mov ah, 09h
   692 000017E9 CD41                <1>     int 41h
   693                              <1>     return
    19                              <2> %%_ret:
    20 000017EB C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   694                              <1> .argumentProvided:
   695 000017EC 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   696 000017F0 AD                  <1>     lodsd   ;Read the word
   697 000017F1 89C3                <1>     mov ebx, eax
   698 000017F3 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   699 000017F8 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   700 000017FB 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   701 00001800 7416                <1>     je .maybeOn
   702 00001802 663D4F46            <1>     cmp ax, "OF"
   703 00001806 7523                <1>     jne .badOnOff
   704 00001808 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   705 0000180D 6681FB4620          <1>     cmp bx, "F "
   706 00001812 7517                <1>     jne .badOnOff
   707                              <1>     ;Set off
   708 00001814 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   709 00001816 EB0B                <1>     jmp short .setBreak
   710                              <1> .maybeOn:
   711 00001818 663D4F4E            <1>     cmp ax, "ON"
   712 0000181C 750D                <1>     jne .badOnOff
   713                              <1>     ;Set on
   714 0000181E BA01000000          <1>     mov edx, 1
   715                              <1> .setBreak:
   716 00001823 B801330000          <1>     mov eax, 3301h  ;Set break
   717 00001828 CD41                <1>     int 41h
   718                              <1>     return
    19                              <2> %%_ret:
    20 0000182A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   719                              <1> .badOnOff:
   720 0000182B 488D15CEF2FFFF      <1>     lea rdx, badOnOff
   721 00001832 B409                <1>     mov ah, 09h
   722 00001834 CD41                <1>     int 41h
   723                              <1>     return
    19                              <2> %%_ret:
    20 00001836 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   724                              <1> 
   725                              <1> verify:
   726 00001837 F6056FE8FFFFFF      <1>     test byte [arg1Flg], -1
   727 0000183E 752D                <1>     jnz .argumentProvided
   728                              <1>     ;Here we just get the status of break
   729 00001840 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
   730 00001845 CD41                <1>     int 41h
   731 00001847 88C3                <1>     mov bl, al
   732 00001849 488D1512F1FFFF      <1>     lea rdx, verifyIs
   733 00001850 B409                <1>     mov ah, 09h
   734 00001852 CD41                <1>     int 41h
   735 00001854 488D15F8F0FFFF      <1>     lea rdx, onMes
   736 0000185B 488D0DEBF0FFFF      <1>     lea rcx, offMes
   737 00001862 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   738 00001864 480F44D1            <1>     cmovz rdx, rcx
   739 00001868 B409                <1>     mov ah, 09h
   740 0000186A CD41                <1>     int 41h
   741                              <1>     return
    19                              <2> %%_ret:
    20 0000186C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   742                              <1> .argumentProvided:
   743 0000186D 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   744 00001871 AD                  <1>     lodsd   ;Read the word
   745 00001872 89C3                <1>     mov ebx, eax
   746 00001874 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   747 00001879 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   748 0000187C 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   749 00001881 7416                <1>     je .maybeOn
   750 00001883 663D4F46            <1>     cmp ax, "OF"
   751 00001887 751F                <1>     jne .badOnOff
   752 00001889 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   753 0000188E 6681FB4620          <1>     cmp bx, "F "
   754 00001893 7513                <1>     jne .badOnOff
   755                              <1>     ;Set off
   756 00001895 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
   757 00001897 EB0A                <1>     jmp short .setVerify
   758                              <1> .maybeOn:
   759 00001899 663D4F4E            <1>     cmp ax, "ON"
   760 0000189D 7509                <1>     jne .badOnOff
   761                              <1>     ;Set on
   762 0000189F 31C0                <1>     xor eax, eax
   763 000018A1 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
   764                              <1> .setVerify:
   765 000018A3 B42E                <1>     mov ah, 2Eh  ;Set Verify
   766 000018A5 CD41                <1>     int 41h
   767                              <1>     return
    19                              <2> %%_ret:
    20 000018A7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   768                              <1> .badOnOff:
   769 000018A8 488D1551F2FFFF      <1>     lea rdx, badOnOff
   770 000018AF B409                <1>     mov ah, 09h
   771 000018B1 CD41                <1>     int 41h
   772                              <1>     return
    19                              <2> %%_ret:
    20 000018B3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   773                              <1> 
   774                              <1> rename:
   775                              <1>     return
    19                              <2> %%_ret:
    20 000018B4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   776                              <1> truename:
   777 000018B5 F605F1E7FFFFFF      <1>     test byte [arg1Flg], -1
   778 000018BC 0F8481F7FFFF        <1>     jz badArgError
   779 000018C2 E8FC080000          <1>     call buildCommandPath
   780                              <1>     ;Explicitly call Truename if we remove truename from this function
   781 000018C7 488D3D53EAFFFF      <1>     lea rdi, searchSpec
   782 000018CE E895070000          <1>     call strlen
   783 000018D3 FFC9                <1>     dec ecx ;Don't print terminating null
   784 000018D5 488D1545EAFFFF      <1>     lea rdx, searchSpec
   785 000018DC BB01000000          <1>     mov ebx, 01
   786 000018E1 B440                <1>     mov ah, 40h
   787 000018E3 CD41                <1>     int 41h
   788 000018E5 E8B9040000          <1>     call printCRLF
   789                              <1>     return
    19                              <2> %%_ret:
    20 000018EA C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   790                              <1> 
   791                              <1> volume:
   792 000018EB 488D359EE8FFFF      <1>     lea rsi, cmdBuffer + 2  ;Get the command buffer
   793 000018F2 E8E9070000          <1>     call skipSpaces
   794 000018F7 4881C603000000      <1>     add rsi, 3  ;Go past the VOL command
   795 000018FE E8DD070000          <1>     call skipSpaces
   796 00001903 AC                  <1>     lodsb   ;Get the first char, and point rsi to next char
   797 00001904 E8C6070000          <1>     call isALEndOfCommand   ;If this char is end of command, use current drive
   798 00001909 7507                <1>     jnz .checkDriveLetter
   799 0000190B E853070000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
   800 00001910 EB35                <1>     jmp short .dirEP
   801                              <1> .checkDriveLetter:
   802 00001912 803E3A              <1>     cmp byte [rsi], ":" ;If this is not a :, fail
   803 00001915 0F851FF7FFFF        <1>     jne badDriveError
   804 0000191B 4889F7              <1>     mov rdi, rsi    ;Save start of drive spec in rsi
   805 0000191E 48FFC6              <1>     inc rsi  ;Go past the X: spec
   806 00001921 E8BA070000          <1>     call skipSpaces
   807 00001926 AC                  <1>     lodsb   ;Get the non-space char in al
   808 00001927 E8A3070000          <1>     call isALEndOfCommand   ;The next non-space char must be terminator
   809 0000192C 0F8508F7FFFF        <1>     jne badDriveError
   810                              <1> ;This argument should've been parsed into FCB1 so use that result
   811 00001932 8A0577E7FFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
   812 00001938 A8FF                <1>     test al, -1
   813 0000193A 0F85FAF6FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
   814 00001940 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
   815 00001945 FFC8                <1>     dec eax ;Convert to 0 based number
   816                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al
   817 00001947 0541000000          <1>     add eax, "A" ;Get ASCII representation of 0 based number
   818 0000194C 88056CEBFFFF        <1>     mov byte [volPathBuf], al   ;Store ASCII letter here
   819 00001952 488D156AE7FFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   820 00001959 B41A                <1>     mov ah, 1Ah
   821 0000195B CD41                <1>     int 41h
   822 0000195D 488D155AEBFFFF      <1>     lea rdx, volPathBuf
   823 00001964 66B90800            <1>     mov cx, dirVolumeID
   824 00001968 B44E                <1>     mov ah, 4Eh ;Find first
   825 0000196A CD41                <1>     int 41h
   826 0000196C 7221                <1>     jc .skipVolLbl
   827 0000196E 488D356CE7FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   828 00001975 488D3D35EBFFFF      <1>     lea rdi, volLblSpc
   829 0000197C B90B000000          <1>     mov ecx, 11 ;Get the 11 chars of the volume label
   830                              <1> .dirLblCopy:
   831 00001981 AC                  <1>     lodsb   ;Get the first char
   832 00001982 3C00                <1>     cmp al, 0
   833 00001984 7409                <1>     je .skipVolLbl  ;Jump with CF=NC
   834 00001986 3C2E                <1>     cmp al, "."
   835 00001988 7401                <1>     je .dirLblSkipStore
   836 0000198A AA                  <1>     stosb
   837                              <1> .dirLblSkipStore:
   838 0000198B FFC9                <1>     dec ecx
   839 0000198D 75F2                <1>     jnz .dirLblCopy
   840                              <1>     ;Fallthru with CF=NC
   841                              <1> .skipVolLbl:
   842                              <1> ;Print volume label information now
   843                              <1> ;Propagates the CF if CF was set    
   844 0000198F 9C                  <1>     pushfq
   845 00001990 488D15D5EBFFFF      <1>     lea rdx, crlf
   846 00001997 B409                <1>     mov ah, 09h
   847 00001999 CD41                <1>     int 41h
   848 0000199B 488D154FEEFFFF      <1>     lea rdx, volMes
   849 000019A2 B409                <1>     mov ah, 09h
   850 000019A4 CD41                <1>     int 41h
   851 000019A6 8A1512EBFFFF        <1>     mov dl, byte [volPathBuf]   ;Print the drive letter out
   852 000019AC B402                <1>     mov ah, 02h
   853 000019AE CD41                <1>     int 41h
   854 000019B0 9D                  <1>     popfq
   855 000019B1 7317                <1>     jnc .volIDOk
   856 000019B3 488D154EEEFFFF      <1>     lea rdx, volNo
   857 000019BA B409                <1>     mov ah, 09h
   858 000019BC CD41                <1>     int 41h
   859 000019BE 488D15A7EBFFFF      <1>     lea rdx, crlf
   860 000019C5 B409                <1>     mov ah, 09h
   861 000019C7 CD41                <1>     int 41h
   862                              <1>     return
    19                              <2> %%_ret:
    20 000019C9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   863                              <1> .volIDOk:
   864 000019CA 488D1532EEFFFF      <1>     lea rdx, volOk
   865 000019D1 B409                <1>     mov ah, 09h
   866 000019D3 CD41                <1>     int 41h
   867 000019D5 488D3DD5EAFFFF      <1>     lea rdi, volLblSpc
   868 000019DC E887060000          <1>     call strlen
   869 000019E1 FFC9                <1>     dec ecx
   870 000019E3 C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   871 000019E7 488D15C3EAFFFF      <1>     lea rdx, volLblSpc
   872 000019EE B409                <1>     mov ah, 09h
   873 000019F0 CD41                <1>     int 41h
   874 000019F2 488D1573EBFFFF      <1>     lea rdx, crlf
   875 000019F9 B409                <1>     mov ah, 09h
   876 000019FB CD41                <1>     int 41h
   877                              <1>     return
    19                              <2> %%_ret:
    20 000019FD C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   878                              <1> 
   879                              <1> version:
   880 000019FE 488D1567EBFFFF      <1>     lea rdx, crlf
   881 00001A05 B409                <1>     mov ah, 09h
   882 00001A07 CD41                <1>     int 41h
   883 00001A09 488D15CFEDFFFF      <1>     lea rdx, dosVer
   884 00001A10 B409                <1>     mov ah, 09h
   885 00001A12 CD41                <1>     int 41h
   886 00001A14 E80C000000          <1>     call .printVersionNumber
   887 00001A19 488D154CEBFFFF      <1>     lea rdx, crlf
   888 00001A20 B409                <1>     mov ah, 09h
   889 00001A22 CD41                <1>     int 41h
   890                              <1>     return
    19                              <2> %%_ret:
    20 00001A24 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   891                              <1> .printVersionNumber:
   892 00001A25 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
   893 00001A27 CD41                <1>     int 41h
   894 00001A29 50                  <1>     push rax
   895 00001A2A 0FB6C0              <1>     movzx eax, al
   896 00001A2D E85F080000          <1>     call printDecimalWord
   897 00001A32 B22E                <1>     mov dl, "."
   898 00001A34 B402                <1>     mov ah, 02h
   899 00001A36 CD41                <1>     int 41h
   900 00001A38 58                  <1>     pop rax
   901 00001A39 0FB6C4              <1>     movzx eax, ah
   902 00001A3C E850080000          <1>     call printDecimalWord
   903                              <1>     return
    19                              <2> %%_ret:
    20 00001A41 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   904                              <1> 
   905                              <1> 
   906                              <1> memory:
   907 00001A42 488B1DCEE5FFFF      <1>     mov rbx, qword [sysVars]
   908 00001A49 4885DB              <1>     test rbx, rbx
   909 00001A4C 7510                <1>     jnz .sysvarsOK
   910 00001A4E 488D153CF0FFFF      <1>     lea rdx, memBad0
   911 00001A55 B409                <1>     mov ah, 09h
   912 00001A57 CD41                <1>     int 41h
   913 00001A59 E9D6080000          <1>     jmp freezePC.altEP
   914                              <1> .sysvarsOK:
   915                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
   916                              <1>     ; and rcx to store Application memory
   917 00001A5E 31F6                <1>     xor esi, esi
   918 00001A60 31FF                <1>     xor edi, edi
   919 00001A62 31ED                <1>     xor ebp, ebp
   920 00001A64 31C9                <1>     xor ecx, ecx
   921 00001A66 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
   922 00001A6A 488B1B              <1>     mov rbx, qword [rbx]
   923                              <1> .memLp:
   924 00001A6D 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
   925 00001A70 7409                <1>     je .validMCB
   926 00001A72 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
   927 00001A75 0F8501010000        <1>     jne .badMCBFound
   928                              <1> .validMCB:
   929 00001A7B 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
   930 00001A7E 48C1E004            <1>     shl rax, 4  ;Convert to bytes
   931 00001A82 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
   932 00001A8A 7505                <1>     jne .notDOS
   933 00001A8C 4801C6              <1>     add rsi, rax    ;Add to DOS count
   934 00001A8F EB21                <1>     jmp short .gotoNext
   935                              <1> .notDOS:
   936 00001A91 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
   937 00001A99 7505                <1>     jne .notFree
   938 00001A9B 4801C7              <1>     add rdi, rax    ;Add to Free space count
   939 00001A9E EB12                <1>     jmp short .gotoNext
   940                              <1> .notFree:
   941 00001AA0 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
   942 00001AA8 7505                <1>     jne .notHole
   943 00001AAA 4801C5              <1>     add rbp, rax    ;Add to Hole count
   944 00001AAD EB03                <1>     jmp short .gotoNext
   945                              <1> .notHole:
   946 00001AAF 4801C1              <1>     add rcx, rax    ;Add to Application count
   947                              <1> .gotoNext:
   948 00001AB2 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
   949 00001AB5 7407                <1>     je .endOfWalk
   950 00001AB7 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
   951 00001ABC EBAF                <1>     jmp short .memLp
   952                              <1> .endOfWalk:
   953                              <1>     
   954 00001ABE 488D152DEFFFFF      <1>     lea rdx, memDOS
   955 00001AC5 B409                <1>     mov ah, 09h
   956 00001AC7 CD41                <1>     int 41h
   957 00001AC9 4889F0              <1>     mov rax, rsi
   958 00001ACC E89D000000          <1>     call .mcbPrintAmount
   959 00001AD1 488D15B2EFFFFF      <1>     lea rdx, memByte
   960 00001AD8 B409                <1>     mov ah, 09h
   961 00001ADA CD41                <1>     int 41h
   962                              <1> 
   963 00001ADC 4885ED              <1>     test rbp, rbp
   964 00001ADF 741E                <1>     jz .skipHole
   965 00001AE1 488D1556EFFFFF      <1>     lea rdx, memHole
   966 00001AE8 B409                <1>     mov ah, 09h
   967 00001AEA CD41                <1>     int 41h
   968 00001AEC 4889E8              <1>     mov rax, rbp
   969 00001AEF E87A000000          <1>     call .mcbPrintAmount
   970 00001AF4 488D158FEFFFFF      <1>     lea rdx, memByte
   971 00001AFB B409                <1>     mov ah, 09h
   972 00001AFD CD41                <1>     int 41h
   973                              <1> .skipHole:
   974                              <1> 
   975 00001AFF 488D1512EFFFFF      <1>     lea rdx, memApp
   976 00001B06 B409                <1>     mov ah, 09h
   977 00001B08 CD41                <1>     int 41h
   978 00001B0A 4889C8              <1>     mov rax, rcx
   979 00001B0D E85C000000          <1>     call .mcbPrintAmount
   980 00001B12 488D1571EFFFFF      <1>     lea rdx, memByte
   981 00001B19 B409                <1>     mov ah, 09h
   982 00001B1B CD41                <1>     int 41h
   983                              <1> 
   984 00001B1D 488D1540EFFFFF      <1>     lea rdx, memFree
   985 00001B24 B409                <1>     mov ah, 09h
   986 00001B26 CD41                <1>     int 41h
   987 00001B28 4889F8              <1>     mov rax, rdi
   988 00001B2B E83E000000          <1>     call .mcbPrintAmount
   989 00001B30 488D1553EFFFFF      <1>     lea rdx, memByte
   990 00001B37 B409                <1>     mov ah, 09h
   991 00001B39 CD41                <1>     int 41h
   992                              <1> 
   993 00001B3B 488D158AEEFFFF      <1>     lea rdx, memSys
   994 00001B42 B409                <1>     mov ah, 09h
   995 00001B44 CD41                <1>     int 41h
   996 00001B46 4889F0              <1>     mov rax, rsi
   997 00001B49 4801F8              <1>     add rax, rdi
   998 00001B4C 4801C8              <1>     add rax, rcx
   999 00001B4F 4801E8              <1>     add rax, rbp
  1000 00001B52 E817000000          <1>     call .mcbPrintAmount
  1001 00001B57 488D152CEFFFFF      <1>     lea rdx, memByte
  1002 00001B5E B409                <1>     mov ah, 09h
  1003 00001B60 CD41                <1>     int 41h
  1004                              <1> 
  1005 00001B62 488D1503EAFFFF      <1>     lea rdx, crlf
  1006 00001B69 B409                <1>     mov ah, 09h
  1007 00001B6B CD41                <1>     int 41h
  1008                              <1>     return
    19                              <2> %%_ret:
    20 00001B6D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1009                              <1> 
  1010                              <1> .mcbPrintAmount:
  1011 00001B6E 51                  <1>     push rcx
  1012 00001B6F 56                  <1>     push rsi
  1013 00001B70 57                  <1>     push rdi
  1014 00001B71 55                  <1>     push rbp
  1015 00001B72 E81A070000          <1>     call printDecimalWord
  1016 00001B77 5D                  <1>     pop rbp
  1017 00001B78 5F                  <1>     pop rdi
  1018 00001B79 5E                  <1>     pop rsi
  1019 00001B7A 59                  <1>     pop rcx
  1020                              <1>     return
    19                              <2> %%_ret:
    20 00001B7B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1021                              <1> .badMCBFound:
  1022 00001B7C 488D154EEFFFFF      <1>     lea rdx, memBad2
  1023 00001B83 B409                <1>     mov ah, 09h
  1024 00001B85 CD41                <1>     int 41h
  1025 00001B87 E9A8070000          <1>     jmp freezePC.altEP
  1026                              <1> 
  1027                              <1> type:
  1028 00001B8C F6051AE5FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1029 00001B93 0F84AAF4FFFF        <1>     jz badArgError
  1030 00001B99 F60510E5FFFFFF      <1>     test byte [arg2Flg], -1
  1031 00001BA0 0F859DF4FFFF        <1>     jnz badArgError         ;If this set, error
  1032 00001BA6 488D35E1E5FFFF      <1>     lea rsi, cmdBuffer
  1033 00001BAD 0FB605FAE4FFFF      <1>     movzx eax, byte [arg1Off]
  1034 00001BB4 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1035 00001BB7 803E0D              <1>     cmp byte [rsi], CR
  1036 00001BBA 0F8483F4FFFF        <1>     je badArgError
  1037 00001BC0 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1038 00001BC4 750F                <1>     jne .noDrive
  1039 00001BC6 0FB605E2E4FFFF      <1>     movzx eax, byte [arg1FCBret]
  1040 00001BCD 3CFF                <1>     cmp al, -1
  1041 00001BCF 0F8465F4FFFF        <1>     je badDriveError
  1042                              <1> .noDrive:
  1043                              <1>     ;Now we open the provided file
  1044 00001BD5 E89C070000          <1>     call copyArgumentToSearchSpec
  1045 00001BDA 488D1540E7FFFF      <1>     lea rdx, searchSpec
  1046 00001BE1 B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1047 00001BE6 CD41                <1>     int 41h
  1048 00001BE8 0F825EF4FFFF        <1>     jc badFileError
  1049 00001BEE 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1050 00001BF5 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1051                              <1> .lp:
  1052 00001BF8 B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1053 00001BFD B43F                <1>     mov ah, 3Fh ;Read handle
  1054 00001BFF CD41                <1>     int 41h
  1055 00001C01 89C1                <1>     mov ecx, eax
  1056 00001C03 67E317              <1>     jecxz .exit
  1057 00001C06 53                  <1>     push rbx    ;Save the original in handle
  1058 00001C07 BB01000000          <1>     mov ebx, 1  ;STDOUT
  1059 00001C0C B440                <1>     mov ah, 40h
  1060 00001C0E CD41                <1>     int 41h
  1061 00001C10 5B                  <1>     pop rbx ;Get back the original read handle
  1062 00001C11 720F                <1>     jc .exitBad
  1063 00001C13 39C8                <1>     cmp eax, ecx
  1064 00001C15 74E1                <1>     je .lp
  1065 00001C17 FFC9                <1>     dec ecx ;One less for a ^Z
  1066 00001C19 39C8                <1>     cmp eax, ecx
  1067 00001C1B 7505                <1>     jne .exitBad
  1068                              <1> .exit:
  1069 00001C1D B43E                <1>     mov ah, 3Eh ;Close handle
  1070 00001C1F CD41                <1>     int 41h
  1071                              <1>     return
    19                              <2> %%_ret:
    20 00001C21 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1072                              <1> .exitBad:
  1073                              <1>     ;Print a disk error message... use a table to build the message but for
  1074                              <1>     ; now, just exit
  1075                              <1>     ;If it is a char device, don't print a error
  1076 00001C22 EBF9                <1>     jmp short .exit
  1077                              <1> 
  1078                              <1> exit:
  1079 00001C24 F605FAE3FFFFFF      <1>     test byte [permaSwitch], -1
  1080                              <1>     retnz   ;Return if the flag is set
    51                              <2> cret nz
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001C2B 75(21)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
  1081 00001C2D 488B05DBE3FFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1082 00001C34 483DFFFFFFFF        <1>     cmp rax, -1
  1083                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001C3A 74(21)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
  1084 00001C3C 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1085                              <1> 
  1086 00001C40 488B15DFE3FFFF      <1>     mov rdx, qword [parentInt42]
  1087 00001C47 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
  1088 00001C4B B842250000          <1>     mov eax, 2542h
  1089 00001C50 CD41                <1>     int 41h
  1090                              <1> 
  1091 00001C52 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1092 00001C57 CD41                <1>     int 41h
  1093                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    19                              <2> %%_ret:
    20 00001C59 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1094                              <1> 
  1095                              <1> launchChild:
  1096                              <1> ;We run EXEC on this and the child task will return via applicationReturn
  1097                              <1> ;Here we must search the CWD or all path componants before failing
  1098                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
  1099 00001C5A 488D1562E4FFFF      <1>     lea rdx, cmdFFBlock
  1100 00001C61 B41A                <1>     mov ah, 1Ah     ;Set DTA for task
  1101 00001C63 CD41                <1>     int 41h
  1102                              <1> 
  1103 00001C65 8B0551E4FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
  1104 00001C6B 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1105 00001C70 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1106 00001C75 3D20202020          <1>     cmp eax, "    " ;Only if we have four spaces do we proceed here
  1107 00001C7A 741D                <1>     je .noExt
  1108 00001C7C E86FF2FFFF          <1>     call checkExtensionExec ;ZF=ZE => Executable
  1109 00001C81 0F8510010000        <1>     jnz .dfltErrExit
  1110                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1111 00001C87 0F820A010000        <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
  1112                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1113                              <1>     ;So it is a com or exe that we are searching for for now
  1114 00001C8D 488D3D7AE5FFFF      <1>     lea rdi, cmdPathSpec
  1115 00001C94 4889FA              <1>     mov rdx, rdi
  1116 00001C97 EB24                <1>     jmp short .search
  1117                              <1> .noExt:
  1118                              <1>     ;If the filename has no extension, append a .*
  1119                              <1>     ;Use bl as flags. bl[0] => COM found, bl[1] => EXE found, bl[2] => BAT found
  1120 00001C99 31DB                <1>     xor ebx, ebx
  1121 00001C9B 488D3D6CE5FFFF      <1>     lea rdi, cmdPathSpec
  1122 00001CA2 4889FA              <1>     mov rdx, rdi
  1123 00001CA5 31C0                <1>     xor eax, eax
  1124 00001CA7 B9FFFFFFFF          <1>     mov ecx, -1
  1125 00001CAC F2AE                <1>     repne scasb
  1126 00001CAE 48FFCF              <1>     dec rdi ;Point to the terminating null
  1127 00001CB1 4889FD              <1>     mov rbp, rdi    ;Temporarily store the ptr to the . in rbp
  1128 00001CB4 66B82E2A            <1>     mov ax, ".*"
  1129 00001CB8 66AB                <1>     stosw
  1130 00001CBA 30C0                <1>     xor al, al  ;Store terminating null
  1131 00001CBC AA                  <1>     stosb
  1132                              <1> .search:
  1133 00001CBD B906000000          <1>     mov ecx, dirIncFiles
  1134 00001CC2 B44E                <1>     mov ah, 4Eh ;Find First File
  1135 00001CC4 CD41                <1>     int 41h
  1136 00001CC6 0F82CB000000        <1>     jc .dfltErrExit
  1137 00001CCC E879000000          <1>     call .noExtCheckExt
  1138                              <1> .moreSearch:
  1139 00001CD1 B44F                <1>     mov ah, 4Fh
  1140 00001CD3 CD41                <1>     int 41h
  1141 00001CD5 7207                <1>     jc .noMoreFiles
  1142 00001CD7 E86E000000          <1>     call .noExtCheckExt
  1143 00001CDC EBF3                <1>     jmp short .moreSearch
  1144                              <1> .noMoreFiles:
  1145 00001CDE 85DB                <1>     test ebx, ebx
  1146 00001CE0 0F84B1000000        <1>     jz .dfltErrExit
  1147                              <1> ;So we have a valid executable
  1148 00001CE6 4889EF              <1>     mov rdi, rbp    ;Get back ptr to the .*,0
  1149 00001CE9 F7C301000000        <1>     test ebx, 1
  1150 00001CEF 7407                <1>     jz .launchexebat
  1151 00001CF1 B82E434F4D          <1>     mov eax, ".COM"
  1152 00001CF6 EB14                <1>     jmp short .launch
  1153                              <1> .launchexebat:
  1154 00001CF8 F7C302000000        <1>     test ebx, 2
  1155 00001CFE 7407                <1>     jz .launchbat
  1156 00001D00 B82E455845          <1>     mov eax, ".EXE"
  1157 00001D05 EB05                <1>     jmp short .launch
  1158                              <1> .launchbat:
  1159                              <1> ;Temporary For BAT
  1160 00001D07 E98B000000          <1>     jmp .dfltErrExit
  1161                              <1> .launch:
  1162 00001D0C AB                  <1>     stosd
  1163 00001D0D 30C0                <1>     xor al, al
  1164 00001D0F AA                  <1>     stosb   ;Store the terminating null
  1165 00001D10 488D1DD7E3FFFF      <1>     lea rbx, launchBlock
  1166 00001D17 31C0                <1>     xor eax, eax
  1167 00001D19 488903              <1>     mov qword [rbx + execProg.pEnv], rax    ;Tell DOS to copy my current Env
  1168 00001D1C 498D8080000000      <1>     lea rax, qword [r8 + cmdLineCnt]
  1169 00001D23 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1170 00001D27 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1171 00001D2B 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1172 00001D2F 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1173 00001D33 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1174 00001D37 488D15D0E4FFFF      <1>     lea rdx, cmdPathSpec
  1175 00001D3E B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1176 00001D43 CD41                <1>     int 41h
  1177 00001D45 E94D000000          <1>     jmp .dfltErrExit    ;If something goes wrong, error out
  1178                              <1> .noExtCheckExt:
  1179                              <1>     ;mov eax, dword [cmdFFBlock + ffBlock.asciizName + filename.fExt]
  1180 00001D4A 488D3590E3FFFF      <1>     lea rsi, dword [cmdFFBlock + ffBlock.asciizName]
  1181 00001D51 488D3D05E5FFFF      <1>     lea rdi, fcbCmdSpec
  1182 00001D58 E8DC030000          <1>     call asciiFilenameToFCB
  1183 00001D5D 8B0502E5FFFF        <1>     mov eax, dword [fcbCmdSpec + filename.fExt]
  1184 00001D63 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1185 00001D68 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1186 00001D6D 3D434F4D20          <1>     cmp eax, "COM "
  1187 00001D72 7507                <1>     jne .neceexe
  1188 00001D74 81CB01000000        <1>     or ebx, 1
  1189                              <1>     return
    19                              <2> %%_ret:
    20 00001D7A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1190                              <1> .neceexe:
  1191 00001D7B 3D45584520          <1>     cmp eax, "EXE "
  1192 00001D80 7507                <1>     jne .necebat
  1193 00001D82 81CB02000000        <1>     or ebx, 2
  1194                              <1>     return
    19                              <2> %%_ret:
    20 00001D88 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1195                              <1> .necebat:
  1196 00001D89 3D42415420          <1>     cmp eax, "BAT "
  1197                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001D8E 75(88)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
  1198 00001D90 81CB04000000        <1>     or ebx, 4
  1199                              <1>     return
    19                              <2> %%_ret:
    20 00001D96 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1200                              <1> 
  1201                              <1> .dfltErrExit:
  1202 00001D97 488D152BE8FFFF      <1>     lea rdx, badCmd
  1203 00001D9E B409                <1>     mov ah, 09h
  1204 00001DA0 CD41                <1>     int 41h
  1205                              <1>     return
    19                              <2> %%_ret:
    20 00001DA2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    16                                  %include "./Source/Utils/COMMAND/Source/cmdUtils.asm"
    17                              <1> ;Misc functions and subroutines for command.com
    18                              <1> 
    19                              <1> printCRLF:
    20 00001DA3 488D15C2E7FFFF      <1>     lea rdx, crlf
    21 00001DAA BB02000000          <1>     mov ebx, 2
    22 00001DAF B440                <1>     mov ah, 40h ;Print a new line
    23 00001DB1 B902000000          <1>     mov ecx, 2  ;Two chars to write
    24 00001DB6 CD41                <1>     int 41h
    25                              <1>     return
    19                              <2> %%_ret:
    20 00001DB8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    26                              <1> printDate:
    27                              <1> ;Input: eax = Packed Date
    28                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
    29                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
    30                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
    31                              <1> ;       ebx = 0 => Print two digit year
    32                              <1> ;       ebx = 1 => Print four digit year
    33 00001DB9 53                  <1>     push rbx
    34 00001DBA 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    35 00001DBC 803D6BE2FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    36 00001DC3 7240                <1>     jb .usDate
    37 00001DC5 777C                <1>     ja .jpnDate
    38                              <1> ;European: DD/MM/YY
    39 00001DC7 251F000000          <1>     and eax, 1Fh    ;Save day bits
    40 00001DCC E8B0000000          <1>     call .printFirst
    41 00001DD1 8A1562E2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    42 00001DD7 B402                <1>     mov ah, 02h
    43 00001DD9 CD41                <1>     int 41h
    44                              <1> 
    45 00001DDB 89C8                <1>     mov eax, ecx
    46 00001DDD 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    47 00001DE2 C1E805              <1>     shr eax, 5
    48 00001DE5 E8B3000000          <1>     call .printSecond
    49                              <1> 
    50 00001DEA 8A1549E2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    51 00001DF0 B402                <1>     mov ah, 02h
    52 00001DF2 CD41                <1>     int 41h
    53                              <1> 
    54 00001DF4 89C8                <1>     mov eax, ecx
    55 00001DF6 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    56 00001DFB C1E809              <1>     shr eax, 9
    57 00001DFE 5B                  <1>     pop rbx ;Get the year signature back
    58 00001DFF E8A9000000          <1>     call .printYear
    59                              <1>     return
    19                              <2> %%_ret:
    20 00001E04 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    60                              <1> .usDate:
    61                              <1> ;US: MM/DD/YY
    62 00001E05 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    63 00001E0A C1E805              <1>     shr eax, 5
    64 00001E0D E86F000000          <1>     call .printFirst
    65                              <1> 
    66 00001E12 8A1521E2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    67 00001E18 B402                <1>     mov ah, 02h
    68 00001E1A CD41                <1>     int 41h
    69                              <1> 
    70 00001E1C 89C8                <1>     mov eax, ecx
    71 00001E1E 251F000000          <1>     and eax, 1Fh    ;Save day bits
    72 00001E23 E875000000          <1>     call .printSecond
    73                              <1> 
    74 00001E28 8A150BE2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    75 00001E2E B402                <1>     mov ah, 02h
    76 00001E30 CD41                <1>     int 41h
    77                              <1> 
    78 00001E32 89C8                <1>     mov eax, ecx
    79 00001E34 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    80 00001E39 C1E809              <1>     shr eax, 9
    81 00001E3C 5B                  <1>     pop rbx ;Get the year signature back
    82 00001E3D E86B000000          <1>     call .printYear
    83                              <1>     return
    19                              <2> %%_ret:
    20 00001E42 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    84                              <1> .jpnDate:
    85                              <1> ;Japan: YY/MM/DD
    86 00001E43 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    87 00001E48 C1E809              <1>     shr eax, 9
    88 00001E4B 5B                  <1>     pop rbx ;Get the year signature back
    89 00001E4C E85C000000          <1>     call .printYear
    90                              <1> 
    91 00001E51 8A15E2E1FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    92 00001E57 B402                <1>     mov ah, 02h
    93 00001E59 CD41                <1>     int 41h
    94                              <1> 
    95 00001E5B 89C8                <1>     mov eax, ecx
    96 00001E5D 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    97 00001E62 C1E805              <1>     shr eax, 5
    98 00001E65 E833000000          <1>     call .printSecond
    99                              <1> 
   100 00001E6A 8A15C9E1FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
   101 00001E70 B402                <1>     mov ah, 02h
   102 00001E72 CD41                <1>     int 41h
   103                              <1> 
   104 00001E74 89C8                <1>     mov eax, ecx
   105 00001E76 251F000000          <1>     and eax, 1Fh    ;Save day bits
   106 00001E7B E81D000000          <1>     call .printSecond
   107                              <1>     return
    19                              <2> %%_ret:
    20 00001E80 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   108                              <1> 
   109                              <1> ;Each of these require eax setup correctly
   110                              <1> .printFirst:
   111 00001E81 51                  <1>     push rcx
   112 00001E82 E87B040000          <1>     call getDecimalWord
   113 00001E87 84ED                <1>     test ch, ch ;Do we have an upper digit?
   114 00001E89 7504                <1>     jnz .skipSpace
   115 00001E8B 88CD                <1>     mov ch, cl
   116 00001E8D B120                <1>     mov cl, " "
   117                              <1> .skipSpace:
   118 00001E8F 88CA                <1>     mov dl, cl
   119 00001E91 B402                <1>     mov ah, 02h
   120 00001E93 CD41                <1>     int 41h
   121 00001E95 88EA                <1>     mov dl, ch
   122 00001E97 B402                <1>     mov ah, 02h
   123 00001E99 CD41                <1>     int 41h
   124 00001E9B 59                  <1>     pop rcx
   125                              <1>     return
    19                              <2> %%_ret:
    20 00001E9C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   126                              <1> .printSecond:
   127 00001E9D 51                  <1>     push rcx
   128 00001E9E E85F040000          <1>     call getDecimalWord
   129 00001EA3 84ED                <1>     test ch, ch ;Do we have an upper digit?
   130 00001EA5 75E8                <1>     jnz .skipSpace
   131 00001EA7 88CD                <1>     mov ch, cl
   132 00001EA9 B130                <1>     mov cl, "0"
   133 00001EAB EBE2                <1>     jmp short .skipSpace
   134                              <1> .printYear:
   135 00001EAD 05BC070000          <1>     add eax, 1980
   136 00001EB2 51                  <1>     push rcx
   137 00001EB3 53                  <1>     push rbx
   138 00001EB4 E849040000          <1>     call getDecimalWord ;Get unpacked in rcx
   139 00001EB9 5B                  <1>     pop rbx
   140 00001EBA 84DB                <1>     test bl, bl
   141 00001EBC 740C                <1>     jz .twoDigitYear
   142 00001EBE 88CA                <1>     mov dl, cl  ;Print the first digit
   143 00001EC0 B402                <1>     mov ah, 02h
   144 00001EC2 CD41                <1>     int 41h
   145 00001EC4 88EA                <1>     mov dl, ch  ;Print the second digit
   146 00001EC6 B402                <1>     mov ah, 02h
   147 00001EC8 CD41                <1>     int 41h
   148                              <1> .twoDigitYear:
   149 00001ECA C1E910              <1>     shr ecx, 10h    ;Get high word low
   150 00001ECD 88CA                <1>     mov dl, cl  ;Print the upper digit
   151 00001ECF B402                <1>     mov ah, 02h
   152 00001ED1 CD41                <1>     int 41h
   153 00001ED3 88EA                <1>     mov dl, ch  ;Print the lower digit
   154 00001ED5 B402                <1>     mov ah, 02h
   155 00001ED7 CD41                <1>     int 41h
   156 00001ED9 59                  <1>     pop rcx
   157                              <1>     return
    19                              <2> %%_ret:
    20 00001EDA C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   158                              <1> 
   159                              <1> 
   160                              <1> printTime:
   161                              <1> ;Input: eax = Packed Time
   162                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   163                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   164 00001EDB 89C1                <1>     mov ecx, eax
   165 00001EDD 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   166 00001EE2 C1E80B              <1>     shr eax, 11
   167 00001EE5 803D53E1FFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   168 00001EEC 750B                <1>     jne .ampm
   169 00001EEE E85A000000          <1>     call .printHours
   170 00001EF3 E831000000          <1>     call .printMinutes
   171                              <1>     return
    19                              <2> %%_ret:
    20 00001EF8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   172                              <1> .ampm:
   173 00001EF9 3D0C000000          <1>     cmp eax, 12
   174 00001EFE 7713                <1>     ja .pm
   175 00001F00 7416                <1>     je .pm2
   176 00001F02 E846000000          <1>     call .printHours
   177 00001F07 E81D000000          <1>     call .printMinutes
   178 00001F0C B261                <1>     mov dl, "a"
   179 00001F0E B402                <1>     mov ah, 02h
   180 00001F10 CD41                <1>     int 41h
   181                              <1>     return
    19                              <2> %%_ret:
    20 00001F12 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   182                              <1> .pm:
   183 00001F13 2D0C000000          <1>     sub eax, 12
   184                              <1> .pm2:
   185 00001F18 E830000000          <1>     call .printHours
   186 00001F1D E807000000          <1>     call .printMinutes
   187 00001F22 B270                <1>     mov dl, "p"
   188 00001F24 B402                <1>     mov ah, 02h
   189 00001F26 CD41                <1>     int 41h
   190                              <1>     return
    19                              <2> %%_ret:
    20 00001F28 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   191                              <1> .printMinutes:
   192 00001F29 8A150CE1FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   193 00001F2F B402                <1>     mov ah, 02h
   194 00001F31 CD41                <1>     int 41h
   195                              <1> 
   196 00001F33 89C8                <1>     mov eax, ecx
   197 00001F35 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   198 00001F3A C1E805              <1>     shr eax, 5
   199                              <1> .printMinutesAlt:
   200 00001F3D 51                  <1>     push rcx
   201 00001F3E E8BF030000          <1>     call getDecimalWord
   202 00001F43 84ED                <1>     test ch, ch ;Do we have an upper digit?
   203 00001F45 7514                <1>     jnz .skipSpace
   204 00001F47 88CD                <1>     mov ch, cl
   205 00001F49 B130                <1>     mov cl, "0"
   206 00001F4B EB0E                <1>     jmp short .skipSpace
   207                              <1> .printHours:
   208 00001F4D 51                  <1>     push rcx
   209 00001F4E E8AF030000          <1>     call getDecimalWord
   210 00001F53 84ED                <1>     test ch, ch ;Do we have an upper digit?
   211 00001F55 7504                <1>     jnz .skipSpace
   212 00001F57 88CD                <1>     mov ch, cl
   213 00001F59 B120                <1>     mov cl, " "
   214                              <1> .skipSpace:
   215 00001F5B 88CA                <1>     mov dl, cl
   216 00001F5D B402                <1>     mov ah, 02h
   217 00001F5F CD41                <1>     int 41h
   218 00001F61 88EA                <1>     mov dl, ch
   219 00001F63 B402                <1>     mov ah, 02h
   220 00001F65 CD41                <1>     int 41h
   221 00001F67 59                  <1>     pop rcx
   222                              <1>     return
    19                              <2> %%_ret:
    20 00001F68 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   223                              <1> 
   224                              <1> 
   225                              <1> putVersionInPrompt:
   226 00001F69 488D156FE8FFFF      <1>     lea rdx, dosVer
   227 00001F70 B409                <1>     mov ah, 09h ;Print String
   228 00001F72 CD41                <1>     int 41h
   229 00001F74 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   230 00001F76 CD41                <1>     int 41h
   231 00001F78 50                  <1>     push rax    ;Save minor version
   232 00001F79 E89C000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   233 00001F7E E8B4000000          <1>     call printPackedBCD ;Print al
   234 00001F83 B22E                <1>     mov dl, "."
   235 00001F85 B402                <1>     mov ah, 02h
   236 00001F87 CD41                <1>     int 41h
   237 00001F89 58                  <1>     pop rax
   238 00001F8A 88E0                <1>     mov al, ah  ;Get the minor version low
   239 00001F8C E889000000          <1>     call hexToBCD
   240 00001F91 E8A1000000          <1>     call printPackedBCD
   241                              <1>     return
    19                              <2> %%_ret:
    20 00001F96 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   242                              <1> putEscInPrompt:
   243 00001F97 B21B                <1>     mov dl, ESC
   244 00001F99 EB1C                <1>     jmp short outChar
   245                              <1> 
   246                              <1> putMoneyInPrompt:
   247 00001F9B B224                <1>     mov dl, "$"
   248 00001F9D EB18                <1>     jmp short outChar
   249                              <1> 
   250                              <1> putEquInPrompt:
   251 00001F9F B23D                <1>     mov dl, "="
   252 00001FA1 EB14                <1>     jmp short outChar
   253                              <1> 
   254                              <1> putPipeInPrompt:
   255 00001FA3 B27C                <1>     mov dl, "|"
   256 00001FA5 EB10                <1>     jmp short outChar
   257                              <1> 
   258                              <1> putGTinPrompt:
   259 00001FA7 B23E                <1>     mov dl, ">"
   260 00001FA9 EB0C                <1>     jmp short outChar
   261                              <1> 
   262                              <1> putLTinPrompt:
   263 00001FAB B23C                <1>     mov dl, "<"
   264 00001FAD EB08                <1>     jmp short outChar
   265                              <1> 
   266                              <1> putDriveInPrompt:
   267 00001FAF B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   268 00001FB1 CD41                <1>     int 41h
   269 00001FB3 0441                <1>     add al, "A" ;Convert to letter
   270 00001FB5 88C2                <1>     mov dl, al
   271                              <1> outChar:
   272 00001FB7 B402                <1>     mov ah, 02h ;Echo to STDOUT
   273 00001FB9 CD41                <1>     int 41h
   274                              <1>     return
    19                              <2> %%_ret:
    20 00001FBB C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   275                              <1> putCWDInPrompt:
   276 00001FBC 488D3D91E0FFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   277 00001FC3 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   278 00001FC5 CD41                <1>     int 41h
   279 00001FC7 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   280 00001FC9 FEC2                <1>     inc dl
   281 00001FCB 0441                <1>     add al, "A" ;Convert to letter
   282 00001FCD B43A                <1>     mov ah, ":"
   283 00001FCF 66AB                <1>     stosw   ;Store X:, rdi+=2
   284 00001FD1 8A054CE0FFFF        <1>     mov al, byte [pathSep]
   285 00001FD7 AA                  <1>     stosb   ;Store pathSep, inc rdi
   286 00001FD8 B447                <1>     mov ah, 47h ;Get Current Working Directory
   287 00001FDA 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   288 00001FDD CD41                <1>     int 41h
   289 00001FDF E884000000          <1>     call strlen
   290 00001FE4 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   291                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   292 00001FEA B440                <1>     mov ah, 40h ;Write to handle
   293 00001FEC BB01000000          <1>     mov ebx, 1  ;STDOUT
   294 00001FF1 488D155CE0FFFF      <1>     lea rdx, currDirStr
   295 00001FF8 CD41                <1>     int 41h
   296                              <1>     return
    19                              <2> %%_ret:
    20 00001FFA C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   297                              <1> 
   298                              <1> BCDtoHex:
   299                              <1> ;Converts a BCD value to a Hex byte
   300                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   301 00001FFB 51                  <1>     push rcx
   302 00001FFC 0FB6C0              <1>     movzx eax, al   ;Zero extend
   303 00001FFF 89C1                <1>     mov ecx, eax    ;Save al in ecx
   304 00002001 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   305 00002006 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   306 0000200C C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   307                              <1> .bth:
   308 0000200F 050A000000          <1>     add eax, 10
   309 00002014 FFC9                <1>     dec ecx
   310 00002016 75F7                <1>     jnz .bth
   311 00002018 59                  <1>     pop rcx
   312 00002019 C3                  <1>     ret
   313                              <1> 
   314                              <1> hexToBCD:
   315                              <1> ;Converts a Hex byte into two BCD digits
   316                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   317 0000201A 51                  <1>     push rcx
   318 0000201B 0FB6C0              <1>     movzx eax, al   ;Zero extend
   319 0000201E 31C9                <1>     xor ecx, ecx
   320                              <1> .htb0:
   321 00002020 3D0A000000          <1>     cmp eax, 10
   322 00002025 7209                <1>     jb .htb1
   323 00002027 2D0A000000          <1>     sub eax, 10
   324 0000202C FFC1                <1>     inc ecx
   325 0000202E EBF0                <1>     jmp short .htb0
   326                              <1> .htb1:
   327 00002030 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   328 00002033 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   329 00002035 59                  <1>     pop rcx
   330 00002036 C3                  <1>     ret
   331                              <1> 
   332                              <1> printPackedBCD:
   333                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   334                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   335                              <1> ;Preserves all registers
   336 00002037 50                  <1>     push rax
   337 00002038 52                  <1>     push rdx
   338 00002039 88C4                <1>     mov ah, al
   339 0000203B 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   340 0000203D 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   341 00002040 7508                <1>     jnz .upperNybble
   342 00002042 B220                <1>     mov dl, " "
   343 00002044 B402                <1>     mov ah, 02h
   344 00002046 CD41                <1>     int 41h
   345 00002048 EB0E                <1>     jmp short .lowerNybble
   346                              <1> .upperNybble:
   347 0000204A 50                  <1>     push rax
   348 0000204B C0EC04              <1>     shr ah, 4
   349 0000204E 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   350 00002051 88E2                <1>     mov dl, ah
   351 00002053 B402                <1>     mov ah, 02h ;Print DL
   352 00002055 CD41                <1>     int 41h
   353 00002057 58                  <1>     pop rax
   354                              <1> .lowerNybble:
   355 00002058 0430                <1>     add al, "0"
   356 0000205A 88C2                <1>     mov dl, al
   357 0000205C B402                <1>     mov ah, 02h ;Print DL
   358 0000205E CD41                <1>     int 41h
   359 00002060 5A                  <1>     pop rdx
   360 00002061 58                  <1>     pop rax
   361                              <1>     return
    19                              <2> %%_ret:
    20 00002062 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   362                              <1> 
   363                              <1> getCurrentDrive:
   364                              <1> ;Returns the 0 based current drive in al
   365 00002063 B419                <1>     mov ah, 19h
   366 00002065 CD41                <1>     int 41h
   367                              <1>     return
    19                              <2> %%_ret:
    20 00002067 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   368                              <1> 
   369                              <1> strlen:
   370                              <1> ;Gets the length of a ASCIIZ string
   371                              <1> ;Input: rdi = Source buffer
   372                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   373 00002068 50                  <1>     push rax
   374 00002069 57                  <1>     push rdi
   375 0000206A 30C0                <1>     xor al, al
   376 0000206C 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   377 0000206E FFC9                <1>     dec ecx ;rcx = -1
   378 00002070 F2AE                <1>     repne scasb
   379 00002072 F7D1                <1>     not ecx
   380 00002074 5F                  <1>     pop rdi
   381 00002075 58                  <1>     pop rax
   382                              <1>     return
    19                              <2> %%_ret:
    20 00002076 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   383                              <1> 
   384                              <1> findTerminatorOrEOC:
   385                              <1> ;Advances rsi to the next string terminator char or the next End of command
   386                              <1> ; char
   387                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   388                              <1> ;If a end of command char found, also sets CF
   389 00002077 AC                  <1>     lodsb
   390 00002078 3C0D                <1>     cmp al, CR
   391 0000207A 7419                <1>     je .endOfInput
   392 0000207C E82B000000          <1>     call isALterminator
   393 00002081 7419                <1>     jz .exit
   394 00002083 3A059ADFFFFF        <1>     cmp al, byte [pathSep]
   395 00002089 7411                <1>     je .exit
   396 0000208B 3A0593DFFFFF        <1>     cmp al, byte [switchChar]
   397 00002091 7409                <1>     je .exit
   398 00002093 EBE2                <1>     jmp short findTerminatorOrEOC
   399                              <1> .endOfInput:
   400 00002095 E802000000          <1>     call .exit
   401 0000209A F9                  <1>     stc 
   402                              <1>     return
    19                              <2> %%_ret:
    20 0000209B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   403                              <1> .exit:
   404 0000209C 48FFCE              <1>     dec rsi ;Point to the terminating char
   405                              <1>     return
    19                              <2> %%_ret:
    20 0000209F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   406                              <1> 
   407                              <1> findTerminator:
   408                              <1> ;Advances rsi to the next string terminator char
   409                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   410 000020A0 AC                  <1>     lodsb
   411 000020A1 E806000000          <1>     call isALterminator
   412 000020A6 75F8                <1>     jnz findTerminator
   413 000020A8 48FFCE              <1>     dec rsi
   414                              <1>     return
    19                              <2> %%_ret:
    20 000020AB C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   415                              <1> isALterminator:
   416                              <1> ;Returns: ZF=NZ if al is not a terminator (Not including CR)
   417                              <1> ;         ZF=ZY if al is a terminator
   418 000020AC 3C20                <1>     cmp al, " "
   419                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000020AE 74(AB)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   420 000020B0 3C3B                <1>     cmp al, ";"
   421                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000020B2 74(AB)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   422 000020B4 3C3D                <1>     cmp al, "="
   423                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000020B6 74(AB)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   424 000020B8 3C2C                <1>     cmp al, ","
   425                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000020BA 74(AB)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   426 000020BC 3C09                <1>     cmp al, TAB
   427                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000020BE 74(AB)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   428 000020C0 3C0A                <1>     cmp al, LF
   429                              <1>     return
    19                              <2> %%_ret:
    20 000020C2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   430                              <1> 
   431                              <1> findEndOfCommand:
   432                              <1> ;Moves rsi to the | or CR that terminates this command
   433 000020C3 AC                  <1>     lodsb
   434 000020C4 E806000000          <1>     call isALEndOfCommand
   435 000020C9 75F8                <1>     jnz findEndOfCommand
   436 000020CB 48FFCE              <1>     dec rsi
   437                              <1>     return
    19                              <2> %%_ret:
    20 000020CE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   438                              <1> isALEndOfCommand:
   439 000020CF 3C7C                <1>     cmp al, "|"
   440                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000020D1 74(CE)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   441 000020D3 3C0D                <1>     cmp al, CR
   442                              <1>     return
    19                              <2> %%_ret:
    20 000020D5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   443                              <1> 
   444                              <1> scanForRedir:
   445                              <1> ;Returns: AL = 0 => No redirection, terminate with CR
   446                              <1> ;         AL = 1 => Redirection, type <
   447                              <1> ;         AL = 10 => Redir, type >
   448                              <1> ;         AL = 20 => Redir, type >>
   449                              <1> ;If multiple redirs found, the last one of that type counts.
   450 000020D6 56                  <1>     push rsi
   451 000020D7 55                  <1>     push rbp
   452 000020D8 30E4                <1>     xor ah, ah
   453                              <1> .lp:
   454 000020DA AC                  <1>     lodsb
   455 000020DB 3C3E                <1>     cmp al, ">"
   456                              <1> .exit:
   457 000020DD 5D                  <1>     pop rbp
   458 000020DE 5E                  <1>     pop rsi
   459                              <1>     return
    19                              <2> %%_ret:
    20 000020DF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   460                              <1> 
   461                              <1> 
   462                              <1> skipSpaces:
   463                              <1> ;Also skips tabs
   464                              <1> ;Input: rsi must point to the start of the data string
   465                              <1> ;Output: rsi points to the first non-space char
   466 000020E0 803E20              <1>     cmp byte [rsi], " "
   467 000020E3 7405                <1>     je .skip    ;If equal to a space, skip it
   468 000020E5 803E09              <1>     cmp byte [rsi], TAB
   469                              <1>     retne   ;If not equal to a tab or space, return
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000020E8 75(DF)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   470                              <1> .skip:
   471 000020EA 48FFC6              <1>     inc rsi
   472 000020ED EBF1                <1>     jmp short skipSpaces
   473                              <1> 
   474                              <1> printPrompt:
   475 000020EF 66813D29DFFFFFFFFF  <1>     cmp word [promptPtr], -1
   476 000020F8 750B                <1>     jne .validPrompt
   477                              <1>     ;Here we print the default prompt
   478 000020FA E8BDFEFFFF          <1>     call putCWDInPrompt
   479 000020FF E8A3FEFFFF          <1>     call putGTinPrompt
   480                              <1>     return
    19                              <2> %%_ret:
    20 00002104 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   481                              <1> .validPrompt:
   482                              <1>     return
    19                              <2> %%_ret:
    20 00002105 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   483                              <1> 
   484                              <1> clearCommandState:
   485                              <1> ;Clears the command state
   486 00002106 488D3D9CDFFFFF      <1>     lea rdi, cmdStatePtr
   487 0000210D B90A000000          <1>     mov ecx, cmdStateL
   488 00002112 31C0                <1>     xor eax, eax
   489 00002114 F3AA                <1>     rep stosb
   490                              <1>     return
    19                              <2> %%_ret:
    20 00002116 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   491                              <1> 
   492                              <1> clearCommandLineState:
   493                              <1> ;Clears the command line state after a 0Dh encountered
   494 00002117 488D3D79DFFFFF      <1>     lea rdi, cmdLineStatePtr
   495 0000211E B91C000000          <1>     mov ecx, cmdLineStateL
   496 00002123 31C0                <1>     xor eax, eax
   497 00002125 F3AA                <1>     rep stosb
   498                              <1>     return
    19                              <2> %%_ret:
    20 00002127 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   499                              <1> 
   500                              <1> asciiToFCB:
   501                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   502                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   503                              <1> ;Also doesn't check if chars are valid
   504                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   505                              <1> ;Name is space padded.
   506                              <1> ;Input: rsi = ASCII string buffer
   507                              <1> ;       rdi = FCB name buffer
   508                              <1> ;Output: al = Char that terminated the source string 
   509 00002128 53                  <1>     push rbx    
   510 00002129 57                  <1>     push rdi
   511 0000212A B90B000000          <1>     mov ecx, 11
   512 0000212F B020                <1>     mov al, " "
   513 00002131 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   514 00002133 5F                  <1>     pop rdi
   515 00002134 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   516 00002137 EB1D                <1>     jmp short asciiFilenameToFCB.processName
   517                              <1> asciiFilenameToFCB:
   518                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   519                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   520                              <1> ;Also doesn't check if chars are valid
   521                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   522                              <1> ;Name is space padded.
   523                              <1> ;Input: rsi = ASCII string buffer
   524                              <1> ;       rdi = FCB name buffer
   525                              <1> ;Output: al = Char that terminated the source string 
   526 00002139 53                  <1>     push rbx    
   527 0000213A 57                  <1>     push rdi
   528 0000213B B90B000000          <1>     mov ecx, 11
   529 00002140 B020                <1>     mov al, " "
   530 00002142 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   531 00002144 5F                  <1>     pop rdi
   532 00002145 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   533                              <1>     ;Preprocess for Dir Searches
   534 00002148 803E2E              <1>     cmp byte [rsi], "."
   535 0000214B 7509                <1>     jne .processName
   536 0000214D A4                  <1>     movsb   ;Store the first dot
   537 0000214E 803E2E              <1>     cmp byte [rsi], "."
   538 00002151 752C                <1>     jne .exitBadChar
   539 00002153 A4                  <1>     movsb
   540 00002154 EB29                <1>     jmp short .exitBadChar
   541                              <1> .processName:
   542 00002156 AC                  <1>     lodsb   ;Get the char in al
   543 00002157 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   544 00002159 7426                <1>     jz .exit
   545 0000215B 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   546 0000215D 7407                <1>     je .extSpace
   547 0000215F 3C2E                <1>     cmp al, "."
   548 00002161 740C                <1>     je .ext
   549 00002163 AA                  <1>     stosb   ;Store the char
   550 00002164 EBF0                <1>     jmp short .processName
   551                              <1> .extSpace:
   552                              <1> ;Now we scan for a period in the name
   553 00002166 AC                  <1>     lodsb   ;Get a char and increase rsi
   554 00002167 84C0                <1>     test al, al
   555 00002169 7416                <1>     jz .exit
   556 0000216B 3C2E                <1>     cmp al, "."     ;If al is not a period...
   557 0000216D 75F7                <1>     jne .extSpace   ; keep searching
   558                              <1> .ext:
   559 0000216F 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   560                              <1> .processExt:
   561 00002173 AC                  <1>     lodsb
   562 00002174 84C0                <1>     test al, al
   563 00002176 7409                <1>     jz .exit
   564 00002178 3C20                <1>     cmp al, " "
   565 0000217A 7405                <1>     je .exit
   566 0000217C AA                  <1>     stosb
   567 0000217D EBF4                <1>     jmp short .processExt
   568                              <1> .exitBadChar:
   569 0000217F 30C0                <1>     xor al, al  ;Return a null terminator
   570                              <1> .exit:
   571 00002181 5B                  <1>     pop rbx
   572                              <1>     return
    19                              <2> %%_ret:
    20 00002182 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   573                              <1> 
   574                              <1> FCBToAsciiz:
   575                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   576                              <1> ;Name is space padded too
   577                              <1> ;Input: rsi = FCB name buffer
   578                              <1> ;       rdi = ASCIIZ string buffer
   579 00002183 B908000000          <1>     mov ecx, 8
   580 00002188 F3A4                <1>     rep movsb   ;Move the name over
   581                              <1> .scanNameSpace:
   582 0000218A 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   583 0000218E 750D                <1>     jne .ext
   584 00002190 48FFCF              <1>     dec rdi
   585 00002193 FFC1                <1>     inc ecx
   586 00002195 81F908000000        <1>     cmp ecx, 8
   587 0000219B 72ED                <1>     jb .scanNameSpace
   588                              <1> .ext:
   589 0000219D 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   590 000021A2 7506                <1>     jne .validExt
   591 000021A4 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   592 000021A8 7415                <1>     je .exit
   593                              <1> .validExt:
   594 000021AA B02E                <1>     mov al, "." ;We have a valid extension, store a period
   595 000021AC AA                  <1>     stosb
   596 000021AD B903000000          <1>     mov ecx, 3
   597 000021B2 F3A4                <1>     rep movsb   ;Move the three extension chars over
   598                              <1> .scanExtSpace:
   599 000021B4 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   600 000021B8 7505                <1>     jne .exit
   601 000021BA 48FFCF              <1>     dec rdi
   602 000021BD EBF5                <1>     jmp short .scanExtSpace
   603                              <1> .exit:
   604 000021BF 31C0                <1>     xor eax, eax
   605 000021C1 AA                  <1>     stosb   ;Store a null at the end
   606                              <1>     return
    19                              <2> %%_ret:
    20 000021C2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   607                              <1> 
   608                              <1> buildCommandPath:
   609                              <1> ;Based on the first argument on the command line
   610                              <1> ; will build a full ASCIIZ path in searchSpec to the file/dir specified
   611                              <1>     ;If this is a relative path, will handle correctly (tho unnecessary)
   612 000021C3 0FB605E4DEFFFF      <1>     movzx eax, byte [arg1Off]
   613 000021CA 488D35BDDFFFFF      <1>     lea rsi, cmdBuffer
   614 000021D1 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   615 000021D4 8A3D49DEFFFF        <1>     mov bh, byte [pathSep]
   616 000021DA B33A                <1>     mov bl, ":"
   617 000021DC 383E                <1>     cmp byte [rsi], bh  ;Is the first char relative to root?
   618 000021DE 7458                <1>     je .absoluteCurrent
   619 000021E0 66395E01            <1>     cmp word [rsi + 1], bx    ;This checks if absolute or relative
   620 000021E4 746D                <1>     je .absolutePath
   621 000021E6 385E01              <1>     cmp byte [rsi + 1], bl  ;Check if a drive separator
   622 000021E9 7409                <1>     je .relativeGiven
   623                              <1> ;No drive letter given, must get Current Drive
   624 000021EB E873FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   625 000021F0 0441                <1>     add al, "A"
   626 000021F2 EB0B                <1>     jmp short .relativeCommon
   627                              <1> .relativeGiven:
   628                              <1> ;Drive letter pointed to by AL
   629 000021F4 8A06                <1>     mov al, byte [rsi]  ;Get drive letter in al
   630 000021F6 24DF                <1>     and al, 0DFh    ;Convert to UC
   631 000021F8 4881C602000000      <1>     add rsi, 2  ;Skip the given drive letter and the colon
   632                              <1> .relativeCommon:
   633                              <1>     ;al has drive letter
   634 000021FF 88C2                <1>     mov dl, al  ;Save drive letter in dl
   635 00002201 80EA40              <1>     sub dl, "@" ;Get 1 based drive number in dl
   636 00002204 B43A                <1>     mov ah, ":" ;Get the colon in too
   637 00002206 488D3D14E1FFFF      <1>     lea rdi, searchSpec ;Start building our search path here
   638 0000220D 66AB                <1>     stosw   ;Store X:
   639 0000220F 8A050EDEFFFF        <1>     mov al, byte [pathSep]
   640 00002215 AA                  <1>     stosb   ;Store pathSep
   641 00002216 56                  <1>     push rsi    ;Save user input string
   642 00002217 4889FE              <1>     mov rsi, rdi    ;Put the current directory here for this drive
   643 0000221A B447                <1>     mov ah, 47h ;Get Current Working Directory, dl has drive number
   644 0000221C CD41                <1>     int 41h ;Won't fail as drive letter in dl confirmed ok
   645 0000221E 5E                  <1>     pop rsi
   646                              <1>     ;Now want to find terminating null
   647 0000221F 30C0                <1>     xor al, al
   648 00002221 31C9                <1>     xor ecx, ecx
   649 00002223 FFC9                <1>     dec ecx
   650 00002225 F2AE                <1>     repne scasb ;Search for the terminating null
   651 00002227 48FFCF              <1>     dec rdi ;Go back one once found
   652 0000222A 8A05F3DDFFFF        <1>     mov al, byte [pathSep]
   653 00002230 3847FF              <1>     cmp byte [rdi - 1], al
   654 00002233 7425                <1>     je .buildPath ;If the previous char is a pathsep, skip storing another
   655 00002235 AA                  <1>     stosb   ;Store the pathsep
   656 00002236 EB22                <1>     jmp short .buildPath  ;Now we copy the user string over and good to go
   657                              <1> .absoluteCurrent:
   658 00002238 E826FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   659 0000223D 0441                <1>     add al, "A"
   660 0000223F B43A                <1>     mov ah, ":" ;ax has X: now to store 
   661 00002241 488D3DD9E0FFFF      <1>     lea rdi, searchSpec
   662 00002248 66AB                <1>     stosw
   663 0000224A 8A05D3DDFFFF        <1>     mov al, byte [pathSep]
   664 00002250 AA                  <1>     stosb
   665 00002251 EB07                <1>     jmp short .buildPath
   666                              <1> .absolutePath:
   667 00002253 488D3DC7E0FFFF      <1>     lea rdi, searchSpec
   668                              <1> .buildPath:
   669 0000225A E854EDFFFF          <1>     call copyCommandTailItem    ;Terminates with a 0 for free
   670 0000225F 488D35BBE0FFFF      <1>     lea rsi, searchSpec
   671 00002266 488D3DB4E0FFFF      <1>     lea rdi, searchSpec
   672 0000226D B460                <1>     mov ah, 60h ;Truename it to avoid issues
   673 0000226F CD41                <1>     int 41h
   674                              <1>     retc    ;Return if an error with CF=CY
    63                              <2> cret c
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 00002271 7301                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 00002273 C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   675                              <1>     ;Here we do one final check to ensure we dont end up with a A: but A:"\"
   676 00002274 30C0                <1>     xor al, al
   677 00002276 31C9                <1>     xor ecx, ecx
   678 00002278 FFC9                <1>     dec ecx
   679 0000227A F2AE                <1>     repne scasb
   680 0000227C 48FFCF              <1>     dec rdi ;Go back to the final non-null char
   681 0000227F 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is the final non-null char a colon?
   682 00002283 750A                <1>     jne .okExit   ;Return if not
   683 00002285 31C0                <1>     xor eax, eax
   684 00002287 8A0596DDFFFF        <1>     mov al, byte [pathSep]  ;IF it is, insert a pathsep
   685 0000228D 66AB                <1>     stosw   ;Store the terminating 0 after the pathsep
   686                              <1> .okExit:
   687 0000228F F8                  <1>     clc
   688                              <1>     return
    19                              <2> %%_ret:
    20 00002290 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   689                              <1> 
   690                              <1> 
   691                              <1>     
   692                              <1> printDecimalWord:
   693                              <1> ;Takes qword in rax and print it's decimal representation
   694                              <1> ;Takes the qword in eax and prints its decimal representation
   695 00002291 31C9                <1>     xor ecx, ecx
   696 00002293 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   697 00002295 85C0                <1>     test eax, eax
   698 00002297 750C                <1>     jnz .notZero
   699 00002299 B930000000          <1>     mov ecx, "0"
   700 0000229E BD01000000          <1>     mov ebp, 1  ;Print one digit
   701 000022A3 EB3E                <1>     jmp short .dpfb2
   702                              <1> .notZero:
   703 000022A5 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   704 000022A7 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   705                              <1> .dpfb0:
   706 000022AC FFC5                <1>     inc ebp
   707 000022AE 81FD08000000        <1>     cmp ebp, 8
   708 000022B4 7206                <1>     jb .dpfb00
   709 000022B6 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   710 000022BA EB04                <1>     jmp short .dpfb01
   711                              <1> .dpfb00:
   712 000022BC 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   713                              <1> .dpfb01:
   714 000022C0 31D2                <1>     xor edx, edx
   715 000022C2 48F7F6              <1>     div rsi
   716 000022C5 80C230              <1>     add dl, '0'
   717 000022C8 80FA39              <1>     cmp dl, '9'
   718 000022CB 7603                <1>     jbe .dpfb1
   719 000022CD 80C207              <1>     add dl, 'A'-'0'-10
   720                              <1> .dpfb1:
   721 000022D0 81FD08000000        <1>     cmp ebp, 8
   722 000022D6 7204                <1>     jb .dpfb10
   723 000022D8 88D3                <1>     mov bl, dl ;Add the bottom bits
   724 000022DA EB02                <1>     jmp short .dpfb11
   725                              <1> .dpfb10:
   726 000022DC 88D1                <1>     mov cl, dl    ;Save remainder byte
   727                              <1> .dpfb11:
   728 000022DE 4885C0              <1>     test rax, rax
   729 000022E1 75C9                <1>     jnz .dpfb0
   730                              <1> .dpfb2:
   731 000022E3 81FD08000000        <1>     cmp ebp, 8
   732 000022E9 7208                <1>     jb .dpfb20
   733 000022EB 88DA                <1>     mov dl, bl
   734 000022ED 48C1EB08            <1>     shr rbx, 8
   735 000022F1 EB06                <1>     jmp short .dpfb21
   736                              <1> .dpfb20:
   737 000022F3 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   738 000022F5 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   739                              <1> .dpfb21:
   740 000022F9 B402                <1>     mov ah, 02h
   741 000022FB CD41                <1>     int 41h
   742 000022FD FFCD                <1>     dec ebp
   743 000022FF 75E2                <1>     jnz .dpfb2
   744                              <1>     return
    19                              <2> %%_ret:
    20 00002301 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   745                              <1> 
   746                              <1> getDecimalWord:
   747                              <1> ;Works on MAX A dword in eax
   748                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   749 00002302 31C9                <1>     xor ecx, ecx
   750 00002304 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   751 00002306 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   752                              <1> .dpfb0:
   753 0000230B FFC5                <1>     inc ebp
   754 0000230D 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   755 00002311 31D2                <1>     xor edx, edx
   756 00002313 48F7F3              <1>     div rbx
   757 00002316 80C230              <1>     add dl, '0'
   758 00002319 80FA39              <1>     cmp dl, '9'
   759 0000231C 7603                <1>     jbe .dpfb1
   760 0000231E 80C207              <1>     add dl, 'A'-'0'-10
   761                              <1> .dpfb1:
   762 00002321 88D1                <1>     mov cl, dl    ;Save remainder byte
   763 00002323 4885C0              <1>     test rax, rax
   764 00002326 75E3                <1>     jnz .dpfb0
   765                              <1>     return
    19                              <2> %%_ret:
    20 00002328 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   766                              <1> 
   767                              <1> freezePC:
   768 00002329 488D1587E7FFFF      <1>     lea rdx, memBad1
   769 00002330 B409                <1>     mov ah, 09h
   770 00002332 CD41                <1>     int 41h
   771                              <1> .altEP:
   772 00002334 488D15A5E7FFFF      <1>     lea rdx, memBad3
   773 0000233B B409                <1>     mov ah, 09h
   774 0000233D CD41                <1>     int 41h
   775                              <1> .lp:
   776 0000233F F390                <1>     pause
   777 00002341 F4                  <1>     hlt
   778 00002342 EBFB                <1>     jmp short .lp
   779                              <1> 
   780                              <1> getFilenamePtrFromFilespec:
   781                              <1> ;Gets a pointer to the first char of a filename from a asciiz pathspec
   782                              <1> ;Input: rsi = Pathspec to search
   783                              <1> ;Output: rsi = Points to the first char of the filename
   784 00002344 4889F3              <1>     mov rbx, rsi
   785 00002347 31C0                <1>     xor eax, eax
   786 00002349 4889F7              <1>     mov rdi, rsi    ;Go to the source string 
   787 0000234C E817FDFFFF          <1>     call strlen     ;Get it's length
   788 00002351 FFC9                <1>     dec ecx ;Dont include terminating null
   789 00002353 741F                <1>     jz .exitBad ;Was the string of length zero? Exit bad if so
   790 00002355 4801CE              <1>     add rsi, rcx    ;Goto last char in path (not null)
   791                              <1> .lp:
   792 00002358 4839F3              <1>     cmp rbx, rsi    ;Is rdi pointing to the start of the string?
   793                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000235B 74(28)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   794 0000235D 8A06                <1>     mov al, byte [rsi]  ;Get the char we currently are at
   795 0000235F 3C3A                <1>     cmp al, ":" ;X: ?
   796 00002361 740D                <1>     je .pointFilename
   797 00002363 3A05BADCFFFF        <1>     cmp al, byte [pathSep]  ;Is al pathSep?
   798 00002369 7405                <1>     je .pointFilename
   799 0000236B 48FFCE              <1>     dec rsi ;Not a terminator, go back a char
   800 0000236E EBE8                <1>     jmp short .lp
   801                              <1> .pointFilename:
   802 00002370 48FFC6              <1>     inc rsi ;Now point to the first char of the pathname
   803                              <1>     return
    19                              <2> %%_ret:
    20 00002373 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   804                              <1> .exitBad:
   805 00002374 F9                  <1>     stc
   806                              <1> .exit:
   807                              <1>     return
    19                              <2> %%_ret:
    20 00002375 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   808                              <1> 
   809                              <1> 
   810                              <1> copyArgumentToSearchSpec:
   811                              <1> ;Works similarly to the build searchpath but is simpler
   812                              <1> ;Null terminates
   813 00002376 488D3DA4DFFFFF      <1>     lea rdi, searchSpec
   814                              <1> .copyPath:
   815 0000237D AC                  <1>     lodsb
   816 0000237E E84CFDFFFF          <1>     call isALEndOfCommand
   817 00002383 740A                <1>     jz .finishCopy
   818 00002385 E822FDFFFF          <1>     call isALterminator
   819 0000238A 7403                <1>     jz .finishCopy
   820 0000238C AA                  <1>     stosb
   821 0000238D EBEE                <1>     jmp short .copyPath
   822                              <1> .finishCopy:
   823 0000238F 31C0                <1>     xor eax, eax
   824 00002391 AA                  <1>     stosb
   825                              <1>     return
    19                              <2> %%_ret:
    20 00002392 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    17                                  %include "./Source/Utils/COMMAND/Source/int44h.asm"
    18                              <1> critErrorHandler:   ;Int 44h
    19                              <1> ;User Stack in usage here, must be swapped to before this is called
    20                              <1> ;Entered with:  
    21                              <1> ;               AH = Critical Error Bitfield
    22                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    23                              <1> ;               Bit 6 - Reserved
    24                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    25                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    26                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    27                              <1> ;               Bits [2-1] = Affected Disk Error
    28                              <1> ;                     0 0   DOS area
    29                              <1> ;                     0 1   FAT area
    30                              <1> ;                     1 0   Directory area
    31                              <1> ;                     1 1   Data area
    32                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    33                              <1> ;               AL  = Failing drive number if AH[7] = 0
    34                              <1> ;               DIL = Error code for errorMsg
    35                              <1> ;               RSI = EA of Device Header for which device the error occured
    36                              <1> ;Return:
    37                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    38                              <1> ;                  = 1 - Retry the Operation    (Retry)
    39                              <1> ;                  = 2 - Terminate the Program  (Abort)
    40                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    41 00002393 53                  <1>     push rbx
    42 00002394 51                  <1>     push rcx
    43 00002395 52                  <1>     push rdx
    44 00002396 57                  <1>     push rdi
    45 00002397 56                  <1>     push rsi
    46 00002398 FC                  <1>     cld         ;Make String ops go forward
    47                              <1> 
    48 00002399 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    49 0000239C 488D15C9E1FFFF      <1>     lea rdx, crlf
    50 000023A3 B409                <1>     mov ah, 09h ;Print String
    51 000023A5 CD41                <1>     int 41h
    52                              <1> 
    53 000023A7 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    54 000023AD B90C000000          <1>     mov ecx, 0Ch
    55 000023B2 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    56 000023B4 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    57 000023B7 480FB7FF            <1>     movzx rdi, di
    58 000023BB 4889FA              <1>     mov rdx, rdi    ;Copy error code
    59 000023BE 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    60 000023C2 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    61 000023C5 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    62 000023C8 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    63 000023CF 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    64 000023D3 B409                <1>     mov ah, 09h ;Print String
    65 000023D5 CD41                <1>     int 41h     ;Call DOS to print first part of message
    66                              <1> 
    67 000023D7 488D1505020000      <1>     lea rdx, qword [.readmsg]
    68 000023DE 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    69 000023E5 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    70 000023E8 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    71 000023EC B409                <1>     mov ah, 09h ;Print String
    72 000023EE CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    73                              <1> 
    74 000023F0 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    75 000023F3 0F85DF000000        <1>     jnz .charError
    76                              <1> ;Disk error continues here
    77 000023F9 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    78 00002400 B409                <1>     mov ah, 09h
    79 00002402 CD41                <1>     int 41h
    80 00002404 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    81 00002406 80C241              <1>     add dl, "A" ;Add ASCII code
    82 00002409 B402                <1>     mov ah, 02h ;Print char in dl
    83 0000240B CD41                <1>     int 41h
    84                              <1> .userInput:
    85 0000240D 488D1558E1FFFF      <1>     lea rdx, crlf  ;Print new line
    86 00002414 B409                <1>     mov ah, 09h
    87 00002416 CD41                <1>     int 41h
    88                              <1> ;Abort, Retry, Ignore, Fail is word order
    89                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    90                              <1> .userAbort:
    91                              <1> ;Abort is always an option
    92 00002418 488D15E2010000      <1>     lea rdx, qword [.abortmsg]
    93 0000241F B409                <1>     mov ah, 09h
    94 00002421 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
    95                              <1> .userRetry:
    96 00002423 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    97 00002426 7416                <1>     jz .userIgnore    ;If clear, dont print message
    98 00002428 488D15EA010000      <1>     lea rdx, qword [.betweenMsg]
    99 0000242F B409                <1>     mov ah, 09h
   100 00002431 CD41                <1>     int 41h
   101 00002433 488D15D4010000      <1>     lea rdx, qword [.retrymsg]
   102 0000243A B409                <1>     mov ah, 09h
   103 0000243C CD41                <1>     int 41h
   104                              <1> .userIgnore:
   105 0000243E F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   106 00002441 7416                <1>     jz .userFail
   107 00002443 488D15CF010000      <1>     lea rdx, qword [.betweenMsg]
   108 0000244A B409                <1>     mov ah, 09h
   109 0000244C CD41                <1>     int 41h
   110 0000244E 488D15B2010000      <1>     lea rdx, qword [.ignoremsg]
   111 00002455 B409                <1>     mov ah, 09h
   112 00002457 CD41                <1>     int 41h
   113                              <1> .userFail:
   114 00002459 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   115 0000245C 7416                <1>     jz .userMsgEnd
   116 0000245E 488D15B4010000      <1>     lea rdx, qword [.betweenMsg]
   117 00002465 B409                <1>     mov ah, 09h
   118 00002467 CD41                <1>     int 41h
   119 00002469 488D15A4010000      <1>     lea rdx, qword [.failmsg]
   120 00002470 B409                <1>     mov ah, 09h
   121 00002472 CD41                <1>     int 41h
   122                              <1> .userMsgEnd:
   123 00002474 488D15A1010000      <1>     lea rdx, qword [.endMsg]
   124 0000247B B409                <1>     mov ah, 09h
   125 0000247D CD41                <1>     int 41h
   126                              <1> ;Get user input now 
   127 0000247F 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   128 00002481 488D3D97010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   129 00002488 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   130 0000248A CD41                <1>     int 41h ;Get char in al
   131 0000248C 3C61                <1>     cmp al, "a" ;Chack if lowercase
   132 0000248E 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   133 00002490 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   134                              <1> .uip1:
   135 00002492 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   136 00002493 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   137 00002495 FFC1                <1>     inc ecx
   138 00002497 81F904000000        <1>     cmp ecx, 4
   139 0000249D 75F3                <1>     jne .uip1
   140 0000249F E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   141                              <1> .validInput:
   142 000024A4 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   143                              <1> ;Now check if the input is permitted
   144 000024A6 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   145 000024A8 7427                <1>     je .cehExit
   146 000024AA 84C0                <1>     test al, al ;Check if 0 => Ignore
   147 000024AC 740F                <1>     je .viIgnore
   148 000024AE 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   149 000024B0 7416                <1>     je .viRetry
   150                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   151 000024B2 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   152 000024B5 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   153 000024BB EB14                <1>     jmp short .cehExit
   154                              <1> .viIgnore:
   155 000024BD F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   156 000024C0 0F8447FFFFFF        <1>     jz .userInput
   157 000024C6 EB09                <1>     jmp short .cehExit
   158                              <1> .viRetry:
   159 000024C8 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   160 000024CB 0F843CFFFFFF        <1>     jz .userInput
   161                              <1> .cehExit:
   162 000024D1 5E                  <1>     pop rsi
   163 000024D2 5F                  <1>     pop rdi
   164 000024D3 5A                  <1>     pop rdx
   165 000024D4 59                  <1>     pop rcx
   166 000024D5 5B                  <1>     pop rbx
   167 000024D6 48CF                <1>     iretq
   168                              <1> .charError:
   169 000024D8 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   170 000024DD 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   171                              <1> .ce1:
   172 000024E4 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   173 000024E5 88C2                <1>     mov dl, al  ;Move char into dl
   174 000024E7 B402                <1>     mov ah, 02h
   175 000024E9 CD41                <1>     int 41h ;Print char
   176 000024EB E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   177 000024ED E91BFFFFFF          <1>     jmp .userInput
   178                              <1> 
   179                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   180 000024F2 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   180 000024FB 746563742024202020  <1>
   181 00002504 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   181 0000250D 6E6974202420202020  <1>
   182 00002516 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   182 0000251F 202420202020202020  <1>
   183 00002528 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   183 00002531 6F6D6D616E64202420  <1>
   184 0000253A 446174612024202020- <1>             db "Data $            "       ;Error 4
   184 00002543 202020202020202020  <1>
   185 0000254C 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   185 00002555 737420242020202020  <1>
   186 0000255E 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   186 00002567 202020202020202020  <1>
   187 00002570 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   187 00002579 656469612024202020  <1>
   188 00002582 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   188 0000258B 7420466F756E642024  <1>
   189 00002594 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   189 0000259D 706572202420202020  <1>
   190 000025A6 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   190 000025AF 6C7420242020202020  <1>
   191 000025B8 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   191 000025C1 742024202020202020  <1>
   192 000025CA 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   192 000025D3 61696C757265202420  <1>
   193                              <1> 
   194 000025DC 64726976652024      <1> .drive      db "drive $"
   195 000025E3 6572726F7220726561- <1> .readmsg    db "error reading $"
   195 000025EC 64696E672024        <1>
   196 000025F2 6572726F7220777269- <1> .writemsg   db "error writing $"
   196 000025FB 74696E672024        <1>
   197 00002601 41626F727424        <1> .abortmsg   db "Abort$" 
   198 00002607 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   199 0000260E 526574727924        <1> .retrymsg   db "Retry$"
   200 00002614 4661696C24          <1> .failmsg    db "Fail$"
   201 00002619 2C2024              <1> .betweenMsg db ", $"
   202 0000261C 3F2024              <1> .endMsg     db "? $"
   203 0000261F 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   204                              <1> 
   205                              <1> int43h:
   206 00002623 F9                  <1>     stc     ;Set CF to kill the task
   207 00002624 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    18                                  %include "./Source/Utils/COMMAND/Data/cmdEnv.asm"
    19                              <1>     
    20                              <1> masterEnv:  ;Yeet this is this is a child command processor
    21 00002627 5F3A434F4D4D414E44- <1>     db "_:COMMAND.COM",0
    21 00002630 2E434F4D00          <1>
    22 00002635 504154483D0000      <1>     db "PATH=",0,0  ;Terminate with two null bytes
    23 0000263C 202020202020202020- <1>     db ($ - masterEnv) dup (" ")    ;Pad the environment with spaces
    23 00002645 202020202020202020- <1>
    23 0000264E 202020              <1>
    24                              <1> endOfAlloc: ;Symbol to find the start of where I can yeet 
    19                                  %include "./Source/Utils/COMMAND/Source/cmdLdr.asm"
    20                              <1> cmdLdr:
    21                              <1> ;First check if the version is ok. If not, return.
    22 00002651 B430                <1>     mov ah, 30h
    23 00002653 CD41                <1>     int 41h
    24 00002655 3C01                <1>     cmp al, 01h ;Version 1
    25 00002657 760D                <1>     jbe .okVersion
    26 00002659 488D15CD010000      <1>     lea rdx, badVerStr
    27 00002660 B409                <1>     mov ah, 09h
    28 00002662 CD41                <1>     int 41h
    29 00002664 CD40                <1>     int 40h ;Exit to caller or DOS to print bad command interpreter line
    30                              <1> .okVersion:
    31                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    32 00002666 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    33 0000266A 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    34 0000266E 4889059AD9FFFF      <1>     mov qword [realParent], rax ;Preserve the real parent address
    35                              <1> ;Setup Int 42h, Int 43h and Int 44h
    36 00002675 498B400A            <1>     mov rax, qword [r8 + psp.oldInt42h] ;Preserve the original addresses
    37 00002679 488905A6D9FFFF      <1>     mov qword [parentInt42], rax
    38                              <1> 
    39 00002680 488D150CFDFFFF      <1>     lea rdx, critErrorHandler
    40 00002687 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    41 0000268B B844250000          <1>     mov eax, 2544h
    42 00002690 CD41                <1>     int 41h
    43 00002692 488D158AFFFFFF      <1>     lea rdx, int43h
    44 00002699 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    45 0000269D B843250000          <1>     mov eax, 2543h
    46 000026A2 CD41                <1>     int 41h
    47 000026A4 488D158EE4FFFF      <1>     lea rdx, applicationReturn
    48 000026AB 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    49 000026AF B842250000          <1>     mov eax, 2542h
    50 000026B4 CD41                <1>     int 41h
    51                              <1> ;Get a pointer to DOS Sysvars
    52 000026B6 B452                <1>     mov ah, 52h ;Get sysvars
    53 000026B8 CD41                <1>     int 41h
    54 000026BA 48891D56D9FFFF      <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    55                              <1> ;Call for simple internationalisation data
    56 000026C1 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    57 000026C6 CD41                <1>     int 41h
    58 000026C8 3CFF                <1>     cmp al, -1
    59 000026CA 7412                <1>     je .skipSwitch
    60 000026CC 881552D9FFFF        <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    61 000026D2 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    62 000026D5 7507                <1>     jne .skipSwitch
    63 000026D7 C60545D9FFFF2F      <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    64                              <1> .skipSwitch:
    65 000026DE B800380000          <1>     mov eax, 3800h  ;Get current country data
    66 000026E3 488D1544D9FFFF      <1>     lea rdx, ctryData
    67 000026EA CD41                <1>     int 41h ;Write the data to the internal country table
    68                              <1> ;Now determine if this is the master copy of COMMAND.COM
    69                              <1> ;Check if Int 4Eh has the same address as Int 4Dh. If so, we are master.
    70 000026EC B84E350000          <1>     mov eax, 354Eh  ;Get int 4Eh address
    71 000026F1 CD41                <1>     int 41h
    72 000026F3 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    73 000026F6 B84D350000          <1>     mov eax, 354Dh  ;Get int 4Dh address
    74 000026FB CD41                <1>     int 41h
    75 000026FD 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    76 00002700 755C                <1>     jne .skipMaster
    77                              <1> ;Ok so we are master command.com
    78                              <1> ;Now make myself the real parent
    79 00002702 C6051CD9FFFFFF      <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    80 00002709 4C8905FFD8FFFF      <1>     mov qword [realParent], r8
    81                              <1> ;Set master environment as mine
    82 00002710 488D0510FFFFFF      <1>     lea rax, masterEnv
    83 00002717 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    84                              <1> ;Set current Drive in COMSPEC
    85 0000271B B019                <1>     mov al, 19h ;Get current Drive
    86 0000271D CD41                <1>     int 41h
    87 0000271F 0441                <1>     add al, "A"
    88 00002721 880500FFFFFF        <1>     mov byte [masterEnv], al
    89                              <1> ;Set Int 4Eh up
    90 00002727 488D15CFE8FFFF      <1>     lea rdx, int4Eh
    91 0000272E B84E250000          <1>     mov eax, 254Eh ;Set this as Int 4Eh
    92 00002733 CD41                <1>     int 41h
    93                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    94                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    95 00002735 488D1530DEFFFF      <1>     lea rdx, crlf
    96 0000273C B409                <1>     mov ah, 09h
    97 0000273E CD41                <1>     int 41h
    98 00002740 E8CCEEFFFF          <1>     call time
    99 00002745 E801EEFFFF          <1>     call date
   100 0000274A 488D151BDEFFFF      <1>     lea rdx, crlf
   101 00002751 B409                <1>     mov ah, 09h
   102 00002753 CD41                <1>     int 41h
   103 00002755 488D1DF5FEFFFF      <1>     lea rbx, endOfAlloc ;Save the Master Environment
   104 0000275C EB32                <1>     jmp short .printInit
   105                              <1> .skipMaster:
   106 0000275E 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
   107 00002765 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
   108 0000276D 0FB605B0D8FFFF      <1>     movzx eax, byte [switchChar]
   109 00002774 F2AE                <1>     repne scasb
   110 00002776 67E310              <1>     jecxz .noSwitches
   111 00002779 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
   112 0000277C 24DF                <1>     and al, 0DFh    ;Convert to UC
   113 0000277E 3C50                <1>     cmp al, "P" ;Is it permanent switch?
   114 00002780 7507                <1>     jne .noSwitches
   115 00002782 C6059CD8FFFFFF      <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
   116                              <1> .noSwitches:
   117 00002789 488D1D97FEFFFF      <1>     lea rbx, masterEnv  ;This is the base address to jettison
   118                              <1> .printInit:
   119                              <1> ;Finish by printing INIT string.
   120 00002790 53                  <1>     push rbx
   121 00002791 488D1521000000      <1>     lea rdx, initString
   122 00002798 B409                <1>     mov ah, 09h
   123 0000279A CD41                <1>     int 41h ;Print init string
   124 0000279C E884F2FFFF          <1>     call version.printVersionNumber
   125 000027A1 488D1547000000      <1>     lea rdx, initString2
   126 000027A8 B409                <1>     mov ah, 09h
   127 000027AA CD41                <1>     int 41h ;Print init string
   128 000027AC 5B                  <1>     pop rbx
   129 000027AD 48892551D8FFFF      <1>     mov qword [stackBottom], rsp    ;Use this to save where to reset rsp to
   130 000027B4 E96CE3FFFF          <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   131                              <1> ;Loader Data here
   132                              <1> initString: 
   133 000027B9 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   133 000027C2 66696320436F6D7075- <1>
   133 000027CB 746572205265736561- <1>
   133 000027D4 726368285229205343- <1>
   133 000027DD 502F444F5328522920- <1>
   133 000027E6 56657273696F6E2024  <1>
   134                              <1> initString2:
   135 000027EF 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Reserach 2022.",CR,LF,"$"
   135 000027F8 202020284329436F70- <1>
   135 00002801 797269676874205363- <1>
   135 0000280A 69656E746966696320- <1>
   135 00002813 436F6D707574657220- <1>
   135 0000281C 526573657261636820- <1>
   135 00002825 323032322E0D0A24    <1>
   136 0000282D 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   136 00002836 20444F532076657273- <1>
   136 0000283F 696F6E0D0A24        <1>
   136          ------------------  <1>  info: assembly required 1+2+2 passes

