     1                                  ;COMMAND.COM main file
     2                                  [map all ./Source/Utils/COMMAND/Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Source/Include/dosMacro.mac"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------------------------------
     9                              <1> ;Generic Macros file
    10                              <1> ;The following instruction extensions allow to conditionally return
    11                              <1> ;The idea was borrowed from the DOS Source Code
    12                              <1> ;
    13                              <1> ;-------------------------------------------------------------------------------
    14                              <1> 
    15                              <1> ;-------------------------------------------------------------------------------
    16                              <1> ;These macros are live and must not be touched
    17                              <1> ;-------------------------------------------------------------------------------
    18                              <1> %macro return 0
    19                              <1> %%_ret:
    20                              <1>     ret
    21                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    22                              <1> %endmacro
    23                              <1> 
    24                              <1> %macro cret 1
    25                              <1> %%_base:
    26                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    27                              <1>     %ifdef retOff
    28                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <1>     %ifdef currSegVBase
    30                              <1>     j%+1 short (retOff+currSegVBase)
    31                              <1>     %else
    32                              <1>     j%+1 short retOff
    33                              <1>     %endif  ;End ifdef currSegVBase
    34                              <1>     %else 
    35                              <1>     j%-1 short %%a
    36                              <1>     return
    37                              <1> %%a:
    38                              <1>     %endif  ;End the distance measurement if
    39                              <1>     %else   
    40                              <1>     j%-1 short %%a
    41                              <1>     return
    42                              <1> %%a:
    43                              <1>     %endif  ;End ifdef retoff
    44                              <1> %endmacro
    45                              <1> 
    46                              <1> %macro retz 0
    47                              <1> cret z
    48                              <1> %endmacro
    49                              <1> 
    50                              <1> %macro retnz 0
    51                              <1> cret nz
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> %macro rete 0
    55                              <1> cret e
    56                              <1> %endmacro
    57                              <1> 
    58                              <1> %macro retne 0
    59                              <1> cret ne
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> %macro retc 0
    63                              <1> cret c
    64                              <1> %endmacro
    65                              <1> 
    66                              <1> %macro retnc 0
    67                              <1> cret nc
    68                              <1> %endmacro
    69                              <1> 
    70                              <1> %macro retb 0
    71                              <1> cret b
    72                              <1> %endmacro
    73                              <1> 
    74                              <1> %macro retnb 0
    75                              <1> cret nb
    76                              <1> %endmacro
    77                              <1> 
    78                              <1> %macro breakpoint 0
    79                              <1> xchg bx, bx
    80                              <1> %endmacro
     7                                  %include "./Source/Include/dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    27 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    32 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Only affects for SUBST drives, not JOIN
    69                              <1> ; Flags: Bit 15 set = Network drive
    70                              <1> ;        Bit 14 set = Physical drive
    71                              <1> ;        Bit 13 set = JOIN'ed drive
    72                              <1> ;        Bit 12 set = SUBST'ed drive
    73                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    74                              <1> endstruc
    75                              <1> ;CDS equates
    76                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    77                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    78                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    79                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    80                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    81                              <1> ;------------------------------------------------------------------------;
    82                              <1> ; The SFT is a way to allow applications to open file handles to files 
    83                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    84                              <1> ; under the first header, and then a second header will be linked to the 
    85                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    86                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    87                              <1> ; using the FCBS= command. Default FCBS=5.
    88                              <1> ;
    89                              <1> ; A file handle describes the file, and the location within the file that
    90                              <1> ; we are reading. The file handle can be manipulated without the file
    91                              <1> ; being in memory, thus allowing the user to access data without needing 
    92                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    93                              <1> ; accessing devices, by treating them as files with their drivers 
    94                              <1> ; responding and translating the manipulations of the file handle itself.
    95                              <1> ; Neither the driver nor the application should see or use the SFT for
    96                              <1> ; the handle, as it is subject to change (and will change when file 
    97                              <1> ; sharing provisions are included). The DOS will make requests to the 
    98                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    99                              <1> ; track of the information in the SFT entry for that handle. 
   100                              <1> ;
   101                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   102                              <1> ; can point to the same file. It all depends on what the applications 
   103                              <1> ; want to do with the File.
   104                              <1> ;
   105                              <1> ; !!!!IMPORTANT!!!!
   106                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   107                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   108                              <1> ;
   109                              <1> ;Each SFT may look like this:
   110                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   111                              <1> ;            |                |
   112                              <1> ;       wNumFiles*sft    wNumFiles*sft
   113                              <1> ;
   114                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   115                              <1> ; System FCBs.
   116                              <1> ;
   117                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   118                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   119                              <1> ;
   120                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   121                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   122                              <1> ;------------------------------------------------------------------------;
   123                              <1> struc sfth   ;System file table header
   124                              <1> ; This is the SFT header.
   125                              <1> ; This structure comes before the start of the first file in the array/table.
   126 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   127 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   128                              <1> endstruc
   129                              <1> 
   130                              <1> struc sft
   131                              <1> ;This is the file struc itself
   132 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   133 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   134 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   135 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   136 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   137 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   138 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   139 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   140 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   141 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   142 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   143 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   144 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   145 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   146 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   147 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   148 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   149 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   150 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   151                              <1> ;                           0 means no record
   152                              <1> endstruc
   153                              <1> ;Open Mode equates
   154                              <1> ;Access modes   Bits[2:0]
   155                              <1> ReadAccess      equ 0h
   156                              <1> WriteAccess     equ 1h
   157                              <1> RWAccess        equ 2h
   158                              <1> ;Bit 3 reserved 0
   159                              <1> ;Sharing modes  Bits[6:4]
   160                              <1> CompatShare     equ 0h
   161                              <1> denyRWShare     equ 10h
   162                              <1> denyWriteShare  equ 20h
   163                              <1> denyReadShare   equ 30h
   164                              <1> denyNoneShare   equ 40h
   165                              <1> netFCBShare     equ 70h
   166                              <1> ;Bit 7 reserved 0
   167                              <1> ;Bits 8-12 reserved 0
   168                              <1> 
   169                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   170                              <1> ;Buffering on writes
   171                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   172                              <1> ;FCB opened file?
   173                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   174                              <1> ;Attribute Byte
   175                              <1> readOnlyFile    equ 1h
   176                              <1> hiddenFile      equ 2h
   177                              <1> systemFile      equ 4h
   178                              <1> volumeLabel     equ 8h
   179                              <1> directoryFile   equ 10h ;Directory entry
   180                              <1> archiveFile     equ 20h
   181                              <1> ;Device Info equates
   182                              <1> ;For a block device, bits [5:0] contain the drive number
   183                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   184                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   185                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   186                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   187                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   188                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   189                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   190                              <1> blokFileToFlush equ 40h ;Set if ANY writes are made to this handle!
   191                              <1> devCharDev      equ 80h ;If set, it is a char device!
   192                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   193                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   194                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   195                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   196                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   197                              <1> 
   198                              <1> ;openAddress   equ DOSSEG:367Ah   
   199                              <1> ;createAddress equ DOSSEG:35E3h   
   200                              <1> ;------------------------------------------------------------------------;
   201                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   202                              <1> ; to an internal buffer, and then copying it to the specified location
   203                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   204                              <1> ; another request for the same sector from the same device is made, so 
   205                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   206                              <1> ; size, selected according to the largest detected sector size during 
   207                              <1> ; the initial loadup.
   208                              <1> ;
   209                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   210                              <1> ;
   211                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   212                              <1> ;------------------------------------------------------------------------;
   213                              <1> 
   214                              <1> struc bufferHdr
   215 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   216 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   217 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   218 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   219 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   220 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   221 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   222 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   223 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   224                              <1>     .dataarea:             ;Points to the start of the data area
   225                              <1> endstruc
   226                              <1> ;Buffer Flag equates
   227                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   228                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   229                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   230                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   231                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   232                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   233                              <1> ;Note! A buffer is marked as referenced only when the application 
   234                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   235                              <1> ;------------------------------------------------------------------------;
   236                              <1> ; Memory control block for each memory arena
   237                              <1> ;------------------------------------------------------------------------;
   238                              <1> struc mcb
   239 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   240 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   241 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   242 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   243                              <1>     .program:
   244                              <1> endstruc
   245                              <1> ;MCB equates
   246                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   247                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   248                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   249                              <1> mcbMarkCtn      equ "M"
   250                              <1> mcbMarkEnd      equ "Z"
   251                              <1> 
   252                              <1> memFirstFit     equ 0   ;First free block goes to application
   253                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   254                              <1> memLastFit      equ 2   ;Last free block goes to application
   255                              <1> 
   256                              <1> ;Owner = Para aligned address => Owning application PSP
   257                              <1> ;...To consider...
   258                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   259                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   260                              <1> ;------------------------------------------------------------------------;
   261                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   262                              <1> ; following order, thus allowing for return values to be placed in the 
   263                              <1> ; registers by accessing the caller register stack frame.
   264                              <1> ;------------------------------------------------------------------------;
   265                              <1> struc callerFrame
   266 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   267 00000008 ????????????????    <1>     .rbx    resq 1    
   268 00000010 ????????????????    <1>     .rcx    resq 1
   269 00000018 ????????????????    <1>     .rdx    resq 1
   270 00000020 ????????????????    <1>     .rsi    resq 1
   271 00000028 ????????????????    <1>     .rdi    resq 1
   272 00000030 ????????????????    <1>     .rbp    resq 1
   273 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   274 00000040 ????????????????    <1>     .r9     resq 1
   275                              <1> ;Pushed by Processor when invoked via Interrupt
   276 00000048 ????????????????    <1>     .rip    resq 1
   277 00000050 ????????????????    <1>     .cs     resq 1
   278 00000058 ????????????????    <1>     .flags  resq 1
   279                              <1> endstruc
   280                              <1> 
   281                              <1> struc dpl
   282                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   283                              <1> ; server calls
   284 00000000 ????????????????    <1>     .rax    resq 1
   285 00000008 ????????????????    <1>     .rbx    resq 1
   286 00000010 ????????????????    <1>     .rcx    resq 1
   287 00000018 ????????????????    <1>     .rdx    resq 1
   288 00000020 ????????????????    <1>     .rsi    resq 1
   289 00000028 ????????????????    <1>     .rdi    resq 1
   290 00000030 ????????????????    <1>     .r8     resq 1
   291 00000038 ????????????????    <1>     .r9     resq 1
   292 00000040 ????????????????    <1>     .align  resq 1
   293 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   294 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   295                              <1> endstruc
   296                              <1> 
   297                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   298 00000000 ????????????????    <1>     .oldRBP         resq 1  
   299 00000008 ??                  <1>     .newBuffers     resb 1  ;New buffers value
   300 00000009 ??                  <1>     .newSFTVal      resb 1
   301 0000000A ??                  <1>     .newFCBSVal     resb 1
   302 0000000B ??                  <1>     .newProtFCBSVal resb 1  ;Number of protected FCBS
   303 0000000C ??                  <1>     .newLastdrive   resb 1
   304 0000000D ??                  <1>     .newStacks      resb 1  ;Ignored for now
   305 0000000E ????                <1>     .newStackSize   resb 2  ;Ignored for now
   306 00000010 ????????            <1>     .newAllocSize   resd 1  ;Used to keep track of reallocation size
   307 00000014 ????????            <1>                     resd 1  ;Alignment byte
   308 00000018 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc fcb
   312                              <1> ;Similar to a DOS 2.0 FCB.
   313 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
   314 00000001 ????????????????    <1>     .filename   resb 8
   315 00000009 ??????              <1>     .fileext    resb 3
   316 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   317                              <1> ;One block consists of 128 records, of size denoted in the below
   318 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   319 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   320 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   321 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   322 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   323 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   324 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   325 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   326 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   327                              <1>     ;If record size > 64, high byte is ignored.
   328                              <1>     ;Used for random read and write operations to find the right record
   329                              <1> endstruc
   330                              <1> 
   331                              <1> struc filename
   332                              <1> ;8.3 File name struct
   333 00000000 ????????????????    <1>     .fName  resb 8
   334 00000008 ??????              <1>     .fExt   resb 3
   335                              <1> endstruc
   336                              <1> 
   337                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   338 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   339 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   340 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   341 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   342 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   343 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   344 00000016 ????                <1>     .fileTime   resw 1  ;File time
   345 00000018 ????                <1>     .fileDate   resw 1  ;File date
   346 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   347 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   348                              <1> endstruc
   349                              <1> 
   350                              <1> struc psp
   351 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   352 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   353 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   354 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   355 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   356 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   357 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   358 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   359 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   360 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   361 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   362 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   363 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   364 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   365                              <1> ;Extra handle arrays are grouped into a linked list
   366                              <1> ;The below are in the same place as in DOS
   367 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   368 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   369                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   370 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   371 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   372                              <1> endstruc
   373                              <1> 
   374                              <1> struc clkStruc
   375 00000000 ????                <1>     .dateWord   resw 1
   376 00000002 ??                  <1>     .minutes    resb 1
   377 00000003 ??                  <1>     .hours      resb 1
   378 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   379 00000005 ??                  <1>     .seconds    resb 1
   380                              <1> endstruc
   381                              <1> 
   382                              <1> struc countryStruc
   383 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   384                              <1>                         ;0 = month day year hh:mm:ss
   385                              <1>                         ;1 = day month year hh:mm:ss
   386                              <1>                         ;2 = year month day hh:mm:ss
   387 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   388 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   389 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   390 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   391 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   392 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   393                              <1>                         ;0 = Symbol leads, without space
   394                              <1>                         ;1 = Symbol follows, without space
   395                              <1>                         ;2 = Symbol leads, one space
   396                              <1>                         ;3 = Symbol follows, one space
   397                              <1>                         ;4 = Symbol replace decimal separator
   398 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   399 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   400 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   401 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   402 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   403                              <1> endstruc
   404                              <1> 
   405                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   406                              <1> ;for a space of 64Gb
   407                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   408                              <1> dosLowBase  equ 600h    ;Low load address
   409                              <1> 
   410                              <1> ;Critical Error AH bitfield equates
   411                              <1> critRead    equ 0h
   412                              <1> critWrite   equ 1h
   413                              <1> critDOS     equ 0h
   414                              <1> critFAT     equ 2h
   415                              <1> critDir     equ 4h
   416                              <1> critData    equ 6h
   417                              <1> critFailOK  equ 8h
   418                              <1> critRetryOK equ 10h
   419                              <1> critIgnorOK equ 20h
   420                              <1> critCharDev equ 80h
   421                              <1> 
   422                              <1> critIgnore  equ 0
   423                              <1> critRetry   equ 1
   424                              <1> critAbort   equ 2
   425                              <1> critFail    equ 3
   426                              <1> 
   427                              <1> ;MISC ASCII control chars
   428                              <1> NUL equ 00h ;^@         | ASCII Null
   429                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   430                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   431                              <1> BEL equ 07h ;^G         | ASCII Bell
   432                              <1> BSP equ 08h ;^H         | ASCII Backspace
   433                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   434                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   435                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   436                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   437                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   438                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   439                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   440                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   441                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   442                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   443                              <1> SPC equ 20h ;Printable  | ASCII Space
   444                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   445                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   446                              <1> 
   447                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   448                              <1> ;Extended Ascii Codes
   449                              <1> eF1     equ 3Bh ;F1 second byte
   450                              <1> eF2     equ 3Ch ;F2 second byte
   451                              <1> eF3     equ 3Dh ;F3 second byte
   452                              <1> eF4     equ 3Eh ;F4 second byte
   453                              <1> eF5     equ 3Fh ;F5 second byte
   454                              <1> eF6     equ 40h ;F6 second byte
   455                              <1> eF7     equ 41h ;F7 second byte
   456                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   457                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   458                              <1> eIns    equ 52h ;Insert second byte
   459                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   460                              <1> 
   461                              <1> ;Default Configuration for the system
   462                              <1> 
   463                              <1> buffersDefault  equ 30
   464                              <1> filesDefault    equ 20
   465                              <1> fcbsDefault     equ 4
   466                              <1> safeFcbsDeflt   equ 0
   467                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Source/Include/dosError.inc"
     9                              <1> ;DOS Error codes
    10                              <1> 
    11                              <1> ;Extended Error Codes
    12                              <1> errInvFnc   equ 1   ;Invalid function number
    13                              <1> errFnf      equ 2   ;File not found
    14                              <1> errPnf      equ 3   ;Path not found
    15                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    16                              <1> errAccDen   equ 5   ;Access denied (to resource)
    17                              <1> errBadHdl   equ 6   ;Invalid handle
    18                              <1> errMCBbad   equ 7   ;MCB's destroyed
    19                              <1> errNoMem    equ 8   ;Insufficient memory
    20                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    21                              <1> errBadEnv   equ 10  ;Invalid environment
    22                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    23                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    24                              <1> errInvDat   equ 13  ;Invalid data
    25                              <1> ;           equ 14  ;Reserved
    26                              <1> errBadDrv   equ 15  ;Invalid drive specified
    27                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    28                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    29                              <1> errNoFil    equ 18  ;No more files
    30                              <1> ;The following are Driver error codes + 19
    31                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    32                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    33                              <1> errUnkUnt   equ 20  ;Unknown Unit
    34                              <1> errDrvNR    equ 21  ;Drive not ready
    35                              <1> errUnkCmd   equ 22  ;Unknown Command
    36                              <1> errCRCerr   equ 23  ;Data (CRC) error
    37                              <1> errBadRLn   equ 24  ;Bad request structure length
    38                              <1> errSekErr   equ 25  ;Seek error
    39                              <1> errUnkMed   equ 26  ;Unknown media type
    40                              <1> errSecNF    equ 27  ;Sector not Found
    41                              <1> errNoPap    equ 28  ;Printer out of paper
    42                              <1> errWF       equ 29  ;Write fault
    43                              <1> errRF       equ 30  ;Read fault
    44                              <1> errGF       equ 31  ;General fault
    45                              <1> ;----------------------------------------------
    46                              <1> ;The following two go inbetween the Disk errors
    47                              <1> errShrVio   equ 32  ;Sharing violations
    48                              <1> errLokVio   equ 33  ;File Lock violation
    49                              <1> ;----------------------------------------------
    50                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    51                              <1> errNoFCB    equ 35  ;FCB unavailable
    52                              <1> errShrFul   equ 36  ;Sharing buffer full
    53                              <1> 
    54                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    55                              <1> 
    56                              <1> errFilExist equ 80  ;File already exists
    57                              <1> errDirExist equ 82  ;Directory already exists
    58                              <1> errFI44     equ 83  ;Fail on INT 44h
    59                              <1> errRedir    equ 84  ;Too many levels of redirection
    60                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    61                              <1> errBadPass  equ 86  ;Bad password
    62                              <1> errBadParam equ 87  ;Bad parameter passed to request
    63                              <1> errNetWrite equ 88  ;Network Write Fault
    64                              <1> ;-----------------------------------------------------------------------------
    65                              <1> ;Error Loci
    66                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    67                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    68                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    69                              <1> eLocChr     equ 4   ;Serial/Character Device error
    70                              <1> eLocMem     equ 5   ;Related to RAM
    71                              <1> ;-----------------------------------------------------------------------------
    72                              <1> ;Error Actions
    73                              <1> eActRet     equ 1   ;Retry
    74                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    75                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    76                              <1> eActAbt     equ 4   ;Abort with cleanup
    77                              <1> eActKil     equ 5   ;Abort without cleanup
    78                              <1> eActIgn     equ 6   ;Ignore error
    79                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    80                              <1> ;-----------------------------------------------------------------------------
    81                              <1> ;Error classes
    82                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    83                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    84                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    85                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    86                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    87                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    88                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    89                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    90                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    91                              <1> eClsLocked  equ 10  ;Resource Locked
    92                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    93                              <1> eClsClash   equ 12  ;Resource already exists!
    94                              <1> eClsUnk     equ 13  ;Unknown class
     9                                  %include "./Source/Utils/COMMAND/Data/cmdEqu.asm"
    10                              <1> ;Data equates and struct declarations
    11                              <1> 
    12                              <1> cmdBufferL  equ 128 ;Length of a command line buffer
    13                              <1> driveSpecL  equ 2   ;Space for X:
    14                              <1> dirPathL    equ 64  ;Length of a directory path
    15                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
    16                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
    17                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
    18                              <1> fullDirPathL equ driveSpecL + dirPathL
    19                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    20                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    21                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    22                              <1> 
    23                              <1> ;Use PSP FCB's for switch buffers
    24                              <1> fcb1        equ psp.fcb1
    25                              <1> fcb2        equ psp.fcb2
    26                              <1> ;Use the dta as the built command line buffer.
    27                              <1> cmdLineCnt  equ psp.parmList
    28                              <1> cmdLine     equ psp.progTail
    29                              <1> 
    30                              <1> 
    31                              <1> ;Struct Declarations
    32                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    33 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    34 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    35 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    36 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    37 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    38                              <1> endstruc
    39                              <1> 
    40                              <1> struc execProg  ;For use with EXEC-ing a child task
    41 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    42 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    43 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    44 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    45                              <1> endstruc
    46                              <1> 
    47                              <1> ;Directory attribute equates
    48                              <1>     dirReadOnly     equ 01h
    49                              <1>     dirHidden       equ 02h
    50                              <1>     dirSystem       equ 04h
    51                              <1>     dirVolumeID     equ 08h
    52                              <1>     dirDirectory    equ 10h
    53                              <1>     dirArchive      equ 20h
    54                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    55                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    56                              <1>     ;If any of the three bits are set, then ALL three bits are set
    57                              <1>     ; in addition to whatever the user passed to search for.
    58                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    59                              <1>     dirIncFiles     equ dirHidden | dirSystem
    10                                  Segment .data align=1 
    11                                  %include "./Source/Utils/COMMAND/Data/cmdData.asm"
    12                              <1> ;Static Data Area for COMMAND.COM    
    13                              <1> startLbl:   ;Start symbol, this is the entry point
    14 00000000 E965250000          <1>     jmp cmdLdr
    15 00000005 0000000000000000    <1> stackBottom dq 0    ;Pointer to the top of the stack as allocated by DOS
    16 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
    17 0000000F FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
    18 00000017 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
    19 0000001F 1400                <1> numHdls     dw 20   ;Get number of handles permitted, hardcoded in this version
    20 00000021 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    21 00000023 5C                  <1> pathSep     db "\"  ;Default path sep
    22 00000024 2F                  <1> switchChar  db "/"  ;Default switch char
    23 00000025 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    24 00000026 0000000000000000    <1> parentInt42 dq 0    ;Stores the parent values to restore upon exiting if it can
    25                              <1> ;Static strings, not used in command line parsing
    26 0000002E 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    26 00000037 000000000000000000- <1>
    26 00000040 000000000000000000- <1>
    26 00000049 000000000000000000- <1>
    26 00000052 0000                <1>
    27 00000054 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    27 0000005D 000000000000000000- <1>
    27 00000066 000000000000000000- <1>
    27 0000006F 000000000000000000- <1>
    27 00000078 000000000000000000- <1>
    27 00000081 000000000000000000- <1>
    27 0000008A 000000000000000000- <1>
    27 00000093 00000000            <1>
    28                              <1> 
    29                              <1> 
    30                              <1> cmdLineStatePtr:
    31 00000097 00                  <1> cmdStartOff db 0    ;Offset to the first char for this command (may be a space)
    32 00000098 00                  <1> cmdEndOff   db 0    ;Offset to the terminating char for this command (0Dh or |)
    33 00000099 00                  <1> pipeFlag    db 0    ;If set, we are piping across a command
    34 0000009A 0000                <1> pipeHndl    dw 0    ;If pipeFlag set, this var has the handle to the pipe file
    35 0000009C 202020202020202020- <1> pipeName    db 11 dup (" ") ;Name of the pipe file we created
    35 000000A5 2020                <1>
    36                              <1> 
    37                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    38                              <1> ;These variables are valid for a SINGLE command in a command line
    39 000000A7 0000                <1> cmdDrvSpec  dw 0    ;Read the first word in to see if the pathspec has drivespec
    40 000000A9 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    41 000000AA 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    42                              <1> ;                    If 2, we are redirecting output to a file, by appending
    43                              <1> ;FLG and SWCH are read as a word when checking if argX is a switch
    44 000000AB 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    45 000000AC 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    46 000000AD 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    47                              <1> 
    48 000000AE 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    49 000000AF 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    50 000000B0 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    51                              <1> 
    52                              <1> cmdStateL equ $ - cmdStatePtr
    53                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    54                              <1> 
    55                              <1> ;Structs and strings
    56                              <1> 
    57 000000B1 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    57 000000BA 00000000000000      <1>
    58 000000C1 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    58 000000CA 000000000000000000- <1>
    58 000000D3 000000000000000000- <1>
    58 000000DC 000000000000000000- <1>
    58 000000E5 00000000000000      <1>
    59                              <1> 
    60 000000EC 000000000000000000- <1> launchBlock db execProg_size dup (0)
    60 000000F5 000000000000000000- <1>
    60 000000FE 000000000000000000- <1>
    60 00000107 0000000000          <1>
    61                              <1> 
    62 0000010C 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    62 00000115 000000000000000000- <1>
    62 0000011E 000000000000000000- <1>
    62 00000127 000000000000000000- <1>
    62 00000130 000000000000000000- <1>
    62 00000139 000000000000000000- <1>
    62 00000142 000000000000000000- <1>
    62 0000014B 000000000000000000- <1>
    62 00000154 000000000000000000- <1>
    62 0000015D 000000000000000000- <1>
    62 00000166 000000000000000000- <1>
    62 0000016F 000000000000000000- <1>
    62 00000178 000000000000000000- <1>
    62 00000181 000000000000000000- <1>
    62 0000018A 0000                <1>
    63 0000018C 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    63 00000195 000000000000000000- <1>
    63 0000019E 000000000000000000- <1>
    63 000001A7 000000000000000000- <1>
    63 000001B0 000000000000000000- <1>
    63 000001B9 000000000000000000- <1>
    63 000001C2 000000000000000000- <1>
    63 000001CB 000000000000000000- <1>
    63 000001D4 000000000000000000- <1>
    63 000001DD 000000000000000000- <1>
    63 000001E6 000000000000000000- <1>
    63 000001EF 000000000000000000- <1>
    63 000001F8 000000000000000000- <1>
    63 00000201 000000000000000000- <1>
    63 0000020A 0000                <1>
    64 0000020C 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)  ;Space for full path to a external command
    64 00000215 000000000000000000- <1>
    64 0000021E 000000000000000000- <1>
    64 00000227 000000000000000000- <1>
    64 00000230 000000000000000000- <1>
    64 00000239 000000000000000000- <1>
    64 00000242 000000000000000000- <1>
    64 0000024B 000000000000000000- <1>
    64 00000254 00000000000000      <1>
    65                              <1> 
    66 0000025B 000000000000000000- <1> fcbCmdSpec  db fcbNameL dup (0) ;Used to make a FCB style name for the file
    66 00000264 0000                <1>
    67 00000266 000000000000000000- <1> cmdSpec     db fileNameZL dup (0)   ;ASCIIZ command spec for the command name
    67 0000026F 00000000            <1>
    68 00000273 000000000000000000- <1> cmdName     db cmdNameL dup (0) ;Command name string prefixed by length of word
    68 0000027C 0000000000          <1>
    69                              <1> 
    70 00000281 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    70 0000028A 000000000000000000- <1>
    70 00000293 000000000000000000- <1>
    70 0000029C 000000000000000000- <1>
    70 000002A5 000000000000000000- <1>
    70 000002AE 000000000000000000- <1>
    70 000002B7 000000000000000000- <1>
    70 000002C0 000000000000000000- <1>
    70 000002C9 00000000000000      <1>
    71 000002D0 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    71 000002D9 000000000000000000- <1>
    71 000002E2 000000000000000000- <1>
    71 000002EB 000000000000000000- <1>
    71 000002F4 000000000000000000- <1>
    71 000002FD 000000000000000000- <1>
    71 00000306 000000000000000000- <1>
    71 0000030F 000000000000000000- <1>
    71 00000318 00000000000000      <1>
    72                              <1> 
    73 0000031F 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Contains the pathspec for the search file
    73 00000328 000000000000000000- <1>
    73 00000331 000000000000000000- <1>
    73 0000033A 000000000000000000- <1>
    73 00000343 000000000000000000- <1>
    73 0000034C 000000000000000000- <1>
    73 00000355 000000000000000000- <1>
    73 0000035E 000000000000000000- <1>
    73 00000367 000000000000000000- <1>
    73 00000370 000000000000000000- <1>
    73 00000379 000000000000000000- <1>
    73 00000382 000000000000000000- <1>
    73 0000038B 000000000000000000- <1>
    73 00000394 000000000000000000- <1>
    73 0000039D 0000                <1>
    74                              <1> ;The above is larger than is needed/supported by DOS to allow for 
    75                              <1> ; users overtyping
    76                              <1> 
    77                              <1> ;Internal Function vars
    78                              <1> ;Dir Vars
    79 0000039F 00                  <1> dirPrnType  db 0    ;Print type.    Bit[0] set => /W or /w specified
    80                              <1> ;                                   Bit[1] set => /P or /p specified
    81 000003A0 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    82 000003A1 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    83 000003A2 00                  <1> dirDrv      db 0    ;0 based drive number to use
    84 000003A3 000000000000000000- <1> dirOldCWD   db cmdBufferL dup (0)   ;Space for CWD and any overspill 
    84 000003AC 000000000000000000- <1>
    84 000003B5 000000000000000000- <1>
    84 000003BE 000000000000000000- <1>
    84 000003C7 000000000000000000- <1>
    84 000003D0 000000000000000000- <1>
    84 000003D9 000000000000000000- <1>
    84 000003E2 000000000000000000- <1>
    84 000003EB 000000000000000000- <1>
    84 000003F4 000000000000000000- <1>
    84 000003FD 000000000000000000- <1>
    84 00000406 000000000000000000- <1>
    84 0000040F 000000000000000000- <1>
    84 00000418 000000000000000000- <1>
    84 00000421 0000                <1>
    85 00000423 000000000000000000- <1> dirPathArg  db cmdBufferL dup (0)   ;Copy the pathspec argument here if any
    85 0000042C 000000000000000000- <1>
    85 00000435 000000000000000000- <1>
    85 0000043E 000000000000000000- <1>
    85 00000447 000000000000000000- <1>
    85 00000450 000000000000000000- <1>
    85 00000459 000000000000000000- <1>
    85 00000462 000000000000000000- <1>
    85 0000046B 000000000000000000- <1>
    85 00000474 000000000000000000- <1>
    85 0000047D 000000000000000000- <1>
    85 00000486 000000000000000000- <1>
    85 0000048F 000000000000000000- <1>
    85 00000498 000000000000000000- <1>
    85 000004A1 0000                <1>
    86 000004A3 3F3F3F3F3F3F3F3F    <1> dirSrchPat  db 8 dup ("?")    ;We copy the search pattern here
    87 000004AB 2E                  <1> dirSPExt    db "."
    88 000004AC 3F3F3F              <1>             db 3 dup ("?")
    89                              <1> 
    90                              <1> ;Volume Vars
    91 000004AF 000000000000000000- <1> volLblSpc   db 13 dup (0)
    91 000004B8 00000000            <1>
    92 000004BC 00                  <1> volPathBuf  db 0 ;Drive LETTER goes here
    93 000004BD 3A5C2A2E2A00        <1>             db ":\*.*",0  ;This remains to build X:\*.*,0 for vol label search
    94                              <1> 
    95                              <1> ;Time/Date vars
    96 000004C3 00                  <1> td1 db 0    ;Minutes/Year
    97 000004C4 00                  <1> td2 db 0    ;Hours/Zero
    98 000004C5 00                  <1> td3 db 0    ;Hundredths/Day
    99 000004C6 00                  <1> td4 db 0    ;Seconds/Month
   100                              <1> 
   101                              <1> ;Type handle
   102 000004C7 FFFF                <1> typeHdl dw -1
   103 000004C9 00                  <1> typeBuffer  db 0
    12                                  %include "./Source/Utils/COMMAND/Data/cmdTable.asm"
    13                              <1> ;Function dispatch table
    14                              <1> functionTable:
    15                              <1> ;Use Pascal strings with each row of hte table having three columns:
    16                              <1> ; Col 1, BYTE, Length of command
    17                              <1> ; Col 2, String, String representing the user input
    18                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
    19 000004CA 03444952            <1>     db 3, "DIR"
    20 000004CE 1C10                <1>     dw dir - startLbl
    21                              <1> 
    22 000004D0 024344              <1>     db 2, "CD"
    23 000004D3 A913                <1>     dw chdir - startLbl
    24                              <1> 
    25 000004D5 054348444952        <1>     db 5, "CHDIR"
    26 000004DB A913                <1>     dw chdir - startLbl
    27                              <1> 
    28 000004DD 024D44              <1>     db 2, "MD"
    29 000004E0 5114                <1>     dw mkdir - startLbl
    30                              <1> 
    31 000004E2 054D4B444952        <1>     db 5, "MKDIR"
    32 000004E8 5114                <1>     dw mkdir - startLbl
    33                              <1> 
    34 000004EA 025244              <1>     db 2, "RD"
    35 000004ED A414                <1>     dw rmdir - startLbl
    36                              <1> 
    37 000004EF 05524D444952        <1>     db 5, "RMDIR"
    38 000004F5 A414                <1>     dw rmdir - startLbl
    39                              <1> 
    40 000004F7 0344454C            <1>     db 3, "DEL"
    41 000004FB F814                <1>     dw erase - startLbl
    42                              <1> 
    43 000004FD 054552415345        <1>     db 5, "ERASE"
    44 00000503 F814                <1>     dw erase - startLbl
    45                              <1> 
    46 00000505 0444415445          <1>     db 4, "DATE"
    47 0000050A F914                <1>     dw date - startLbl
    48                              <1> 
    49 0000050C 0454494D45          <1>     db 4, "TIME"
    50 00000511 BF15                <1>     dw time - startLbl
    51                              <1> 
    52 00000513 04434F5059          <1>     db 4, "COPY"
    53 00000518 F714                <1>     dw copy - startLbl
    54                              <1> 
    55 0000051A 0443545459          <1>     db 4, "CTTY"
    56 0000051F 5716                <1>     dw ctty - startLbl
    57                              <1> 
    58 00000521 03434C53            <1>     db 3, "CLS"
    59 00000525 5816                <1>     dw cls - startLbl
    60                              <1> 
    61 00000527 05425245414B        <1>     db 5, "BREAK"
    62 0000052D CA16                <1>     dw break - startLbl
    63                              <1> 
    64 0000052F 06564552494659      <1>     db 6, "VERIFY"
    65 00000536 4B17                <1>     dw verify - startLbl
    66                              <1> 
    67 00000538 0652454E414D45      <1>     db 6, "RENAME"
    68 0000053F C817                <1>     dw rename - startLbl
    69                              <1> 
    70 00000541 08545255454E414D45  <1>     db 8, "TRUENAME"
    71 0000054A C917                <1>     dw truename - startLbl
    72                              <1> 
    73 0000054C 03564552            <1>     db 3, "VER"
    74 00000550 1219                <1>     dw version - startLbl
    75                              <1> 
    76 00000552 03564F4C            <1>     db 3, "VOL"
    77 00000556 FF17                <1>     dw volume - startLbl
    78                              <1> 
    79 00000558 034D454D            <1>     db 3, "MEM"
    80 0000055C 5619                <1>     dw memory - startLbl
    81                              <1> 
    82 0000055E 0445584954          <1>     db 4, "EXIT"
    83 00000563 5A1B                <1>     dw exit - startLbl
    84                              <1> 
    85 00000565 0454595045          <1>     db 4, "TYPE"
    86 0000056A A01A                <1>     dw type - startLbl
    87                              <1> 
    88 0000056C FF                  <1>     db -1   ;End of table
    13                                  %include "./Source/Utils/COMMAND/Data/cmdMsg.asm"
    14                              <1> ;COMMAND.COM Messages and strings
    15 0000056D 0D0A24              <1> crlf    db  CR,LF,"$"
    16 00000570 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
    17 00000575 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
    17 0000057E 696C65206D69737369- <1>
    17 00000587 6E670D0A24          <1>
    18 0000058C 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
    18 00000595 6469736B2077697468- <1>
    18 0000059E 206261746368206669- <1>
    18 000005A7 6C65                <1>
    19 000005A9 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
    19 000005B2 737320616E79206B65- <1>
    19 000005BB 79207768656E207265- <1>
    19 000005C4 6164790D0A24        <1>
    20 000005CA 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
    20 000005D3 6E64206F722066696C- <1>
    20 000005DC 65206E616D650D0A24  <1>
    21 000005E5 4475706C6963617465- <1> dupName db  "Duplicate file name or "
    21 000005EE 2066696C65206E616D- <1>
    21 000005F7 65206F7220          <1>
    22 000005FC 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    22 00000605 666F756E640D0A24    <1>
    23 0000060D 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    23 00000616 656E74206469736B20- <1>
    23 0000061F 73706163650D0A24    <1>
    24 00000627 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    24 00000630 7669726F6E6D656E74- <1>
    24 00000639 2073706163650D0A24  <1>
    25 00000642 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    25 0000064B 74696F6E206572726F- <1>
    25 00000654 720D0A24            <1>
    26 00000658 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    26 00000661 6F7420626520636F70- <1>
    26 0000066A 696564206F6E746F20- <1>
    26 00000673 697473656C660D0A24  <1>
    27 0000067C 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    27 00000685 662064657374696E61- <1>
    27 0000068E 74696F6E206C6F7374- <1>
    27 00000697 206265666F72652063- <1>
    27 000006A0 6F70790D0A24        <1>
    28                              <1> ;Copy end message. First write # files copied then this message 
    29 000006A6 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    29 000006AF 636F706965640D0A24  <1>
    30                              <1> ;Dir end1 msg. First write # files in dir then this
    31 000006B8 2046696C6528732920- <1> dirOk   db  " File(s) $"
    31 000006C1 24                  <1>
    32                              <1> ;Dir end2 msg. First write # bytes free then this message
    33 000006C2 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    33 000006CB 65650D0A24          <1>
    34 000006D0 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    35                              <1> 
    36 000006D9 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    36 000006E2 726976652073706563- <1>
    36 000006EB 696669636174696F6E- <1>
    36 000006F4 0D0A24              <1>
    37 000006F7 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    37 00000700 6B6579207768656E20- <1>
    37 00000709 7265616479202E202E- <1>
    37 00000712 202E2024            <1>
    38 00000716 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    38 0000071F 6172616D657465720D- <1>
    38 00000728 0A24                <1>
    39                              <1> 
    40 0000072A 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    40 00000733 576564546875467269- <1>
    40 0000073C 536174              <1>
    41 0000073F 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    41 00000748 206461746524        <1>
    42 0000074E 43757272656E742064- <1> curDate db  "Current date is $"
    42 00000757 6174652069732024    <1>
    43 0000075F 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    43 00000768 657720646174652024  <1>
    44 00000771 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    44 0000077A 293A2024            <1>
    45 0000077E 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    45 00000787 293A2024            <1>
    46 0000078B 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    46 00000794 293A2024            <1>
    47 00000798 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    47 000007A1 2074696D6524        <1>
    48 000007A7 43757272656E742074- <1> curTime db  "Current time is $"
    48 000007B0 696D652069732024    <1>
    49 000007B8 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    49 000007C1 65772074696D653A20- <1>
    49 000007CA 24                  <1>
    50                              <1> 
    51 000007CB 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    51 000007D4 7572652028592F4E29- <1>
    51 000007DD 3F2024              <1>
    52                              <1> 
    53 000007E0 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    53 000007E9 56657273696F6E2024  <1>
    54                              <1> 
    55 000007F2 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    55 000007FB 6E2064726976652024  <1>
    56 00000804 2069732024          <1> volOk   db " is $"
    57 00000809 20686173206E6F206C- <1> volNo   db " has no label$"
    57 00000812 6162656C24          <1>
    58                              <1> 
    59 00000817 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    59 00000820 69726563746F72790D- <1>
    59 00000829 0A24                <1>
    60 0000082B 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    60 00000834 206372656174652064- <1>
    60 0000083D 69726563746F72790D- <1>
    60 00000846 0A24                <1>
    61 00000848 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    61 00000851 6174682C206E6F7420- <1>
    61 0000085A 6469726563746F7279- <1>
    61 00000863 2C0D0A              <1>
    62 00000866 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    62 0000086F 6F7279206E6F742065- <1>
    62 00000878 6D7074790D0A24      <1>
    63 0000087F 204469726563746F72- <1> dirMain db " Directory of  $"
    63 00000888 79206F66202024      <1>
    64 0000088F 4E6F20506174682024  <1> noPath  db "No Path $"
    65 00000898 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    65 000008A1 7269766520696E2073- <1>
    65 000008AA 656172636820706174- <1>
    65 000008B3 680D0A24            <1>
    66 000008B7 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    66 000008C0 65766963650D0A24    <1>
    67 000008C8 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    67 000008D1 20666F756E640D0A24  <1>
    68 000008DA 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    68 000008E3 726F720D0A24        <1>
    69 000008E9 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    69 000008F2 6F74206265206E6573- <1>
    69 000008FB 7465640D0A24        <1>
    70 00000901 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    70 0000090A 6174652066696C6520- <1>
    70 00000913 6572726F7220647572- <1>
    70 0000091C 696E6720706970650D- <1>
    70 00000925 0A24                <1>
    71 00000927 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    71 00000930 2062696E6172792072- <1>
    71 00000939 656164732066726F6D- <1>
    71 00000942 206120646576696365- <1>
    71 0000094B 0D0A24              <1>
    72 0000094E 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    73 00000954 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    74 00000959 425245414B20697320- <1> breakIs db "BREAK is $"
    74 00000962 24                  <1>
    75 00000963 564552494659206973- <1> verifyIs    db "VERIFY is $"
    75 0000096C 2024                <1>
    76 0000096E 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    77 00000977 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    77 00000980 617468206F72206669- <1>
    77 00000989 6C65206E616D650D0A- <1>
    77 00000992 24                  <1>
    78 00000993 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    78 0000099C 756D626572206F6620- <1>
    78 000009A5 706172616D65746572- <1>
    78 000009AE 730D0A24            <1>
    79 000009B2 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    79 000009BB 74696E6720746F2064- <1>
    79 000009C4 6576696365          <1>
    80 000009C9 08200800            <1> backSpace   db BSP," ",BSP,NUL
    81                              <1> 
    82 000009CD 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    82 000009D6 20202020202020546F- <1>
    82 000009DF 74616C207379737465- <1>
    82 000009E8 6D206D656D6F72793A- <1>
    82 000009F1 2024                <1>
    83 000009F3 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    83 000009FC 20202020202020204D- <1>
    83 00000A05 656D6F727920757365- <1>
    83 00000A0E 6420627920444F533A- <1>
    83 00000A17 2024                <1>
    84 00000A19 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    84 00000A22 656D6F727920757365- <1>
    84 00000A2B 64206279206170706C- <1>
    84 00000A34 69636174696F6E733A- <1>
    84 00000A3D 2024                <1>
    85 00000A3F 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    85 00000A48 656D6F727920726573- <1>
    85 00000A51 657276656420627920- <1>
    85 00000A5A 68617264776172653A- <1>
    85 00000A63 2024                <1>
    86 00000A65 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    86 00000A6E 202020202020202020- <1>
    86 00000A77 2020202020204D656D- <1>
    86 00000A80 6F727920667265653A- <1>
    86 00000A89 2024                <1>
    87 00000A8B 20627974657324      <1> memByte db " bytes$"
    88 00000A92 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    88 00000A9B 6F7420417373657274- <1>
    88 00000AA4 61696E20444F532045- <1>
    88 00000AAD 6E74727920506F696E- <1>
    88 00000AB6 7424                <1>
    89 00000AB8 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    89 00000AC1 416C6C6F636174696F- <1>
    89 00000ACA 6E204572726F7224    <1>
    90 00000AD2 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    90 00000ADB 4572726F7224        <1>
    91 00000AE1 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    91 00000AEA 68616C74656424      <1>
    92                              <1> 
    93                              <1> 
    94 00000AF1 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    95 00000AF5 2020202024          <1> fourSpc  db "    $"
    96 00000AFA 20202024            <1> threeSpc db "   $"
    97 00000AFE 202024              <1> twoSpc   db "  $"
    98                              <1> 
    99 00000B01 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    99 00000B0A 696679204F4E206F72- <1>
    99 00000B13 204F46460D0A24      <1>
   100 00000B1A 504154483D          <1> pathEVar db "PATH="
   101 00000B1F 50524F4D50543D      <1> promptEVar  db "PROMPT="
    14                                  %include "./Source/Utils/COMMAND/Source/cmdMain.asm"
    15                              <1> commandStart:
    16                              <1>     ;Resize Allocation, jump here with endpointer in rbx
    17                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
    18                              <1>     ; that the jump to safety won't be gobbled up when multitasking
    19 00000B26 49F7D8              <1>     neg r8  ;Convert r8 to -r8
    20 00000B29 4A8D5C0311          <1>     lea rbx, qword [rbx + r8 + 11h]    ;Get # of bytes for COMMAND.COM
    21 00000B2E C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
    22 00000B31 B44A                <1>     mov ah, 4Ah ;Realloc
    23 00000B33 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    24 00000B36 CD41                <1>     int 41h
    25 00000B38 EB5A                <1>     jmp short commandMain
    26                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    27 00000B3A B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    28 00000B3F CD41                <1>     int 41h
    29 00000B41 668905C5F4FFFF      <1>     mov word [returnCode], ax
    30                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    31 00000B48 488D155D170000      <1>     lea rdx, critErrorHandler
    32 00000B4F 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    33 00000B53 B844250000          <1>     mov eax, 2544h
    34 00000B58 CD41                <1>     int 41h
    35 00000B5A 488D15DB190000      <1>     lea rdx, int43h
    36 00000B61 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    37 00000B65 B843250000          <1>     mov eax, 2543h
    38 00000B6A CD41                <1>     int 41h
    39 00000B6C 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    40 00000B73 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    41 00000B77 B842250000          <1>     mov eax, 2542h
    42 00000B7C CD41                <1>     int 41h
    43                              <1> ;Close all handles from 5->MAX
    44 00000B7E 0FB70D9AF4FFFF      <1>     movzx ecx, word [numHdls]
    45 00000B85 BB05000000          <1>     mov ebx, 5
    46                              <1> .handleClose:
    47 00000B8A B43E                <1>     mov ah, 3Eh ;File close
    48 00000B8C CD41                <1>     int 41h
    49 00000B8E FFC3                <1>     inc ebx ;Goto next file
    50 00000B90 39CB                <1>     cmp ebx, ecx
    51 00000B92 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    52                              <1> commandMain:
    53                              <1> ;Setup Commandline
    54 00000B94 FA                  <1>     cli
    55 00000B95 488B2569F4FFFF      <1>     mov rsp, qword [stackBottom]    ;Reset internal stack pointer pos
    56 00000B9C FB                  <1>     sti
    57 00000B9D FC                  <1>     cld ;Ensure stringops are done the right way
    58 00000B9E C60567F5FFFF80      <1>     mov byte [inBuffer], 80h    ;Reset the buffer length
    59                              <1> .inputMain:
    60 00000BA5 E8A3140000          <1>     call clearCommandLineState
    61 00000BAA E82A110000          <1>     call printCRLF
    62 00000BAF E871140000          <1>     call printPrompt
    63                              <1> 
    64 00000BB4 488D1551F5FFFF      <1>     lea rdx, inBuffer
    65 00000BBB B80A0C0000          <1>     mov eax, 0C0Ah  ;Do Buffered input
    66 00000BC0 CD41                <1>     int 41h
    67 00000BC2 E812110000          <1>     call printCRLF  ;Note we have accepted input
    68                              <1> 
    69                              <1> ;First check we had something typed in of length greater than 1
    70                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    71 00000BC7 803D3FF5FFFF01      <1>     cmp byte [inBuffer + 1], 1  ;Check input length valid
    72 00000BCE 742C                <1>     je .dfltErrExit
    73 00000BD0 72D3                <1>     jb .inputMain
    74                              <1>     ;Copy over the input text
    75 00000BD2 488D3533F5FFFF      <1>     lea rsi, inBuffer
    76 00000BD9 488D3DACF5FFFF      <1>     lea rdi, cmdBuffer
    77 00000BE0 B980000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    78 00000BE5 F3A4                <1>     rep movsb
    79 00000BE7 31C0                <1>     xor eax, eax
    80 00000BE9 668905A7F4FFFF      <1>     mov word [cmdStartOff], ax  ;Clear start and end Off positions
    81 00000BF0 E814000000          <1>     call parseInput
    82 00000BF5 E8AD010000          <1>     call doCommandLine
    83 00000BFA EBA9                <1>     jmp short .inputMain
    84                              <1> .dfltErrExit:
    85 00000BFC 488D15C7F9FFFF      <1>     lea rdx, badCmd
    86 00000C03 B409                <1>     mov ah, 09h
    87 00000C05 CD41                <1>     int 41h
    88 00000C07 EB9C                <1>     jmp short .inputMain
    89                              <1> 
    90                              <1> parseInput:
    91                              <1> ;EndOff is set up before entering this part
    92                              <1> ;Copies a nicely formatted version of the input command line
    93                              <1> ; without any redirections to psp.dta
    94 00000C09 488D357EF5FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
    95 00000C10 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
    96 00000C17 0FB61D7AF4FFFF      <1>     movzx ebx, byte [cmdEndOff] ;Get the old end offset
    97 00000C1E 4801DE              <1>     add rsi, rbx    ;Move rsi to the start of this new command
    98 00000C21 E8F0130000          <1>     call skipSpaces ;Skip any preceeding spaces
    99 00000C26 66AD                <1>     lodsw   ;Get the first two chars into ax
   100 00000C28 66890578F4FFFF      <1>     mov word [cmdDrvSpec], ax ;Store these chars as if they are the drvspec
   101 00000C2F 4881EE02000000      <1>     sub rsi, 2  ;Go back to the start of the command
   102 00000C36 56                  <1>     push rsi
   103 00000C37 57                  <1>     push rdi
   104 00000C38 488D3DCDF5FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   105 00000C3F 57                  <1>     push rdi
   106 00000C40 E845030000          <1>     call copyCommandTailItem
   107 00000C45 5F                  <1>     pop rdi
   108 00000C46 9C                  <1>     pushfq  ;Save the CF state
   109 00000C47 E852130000          <1>     call strlen
   110 00000C4C FFC9                <1>     dec ecx ;Drop the terminating char from the count
   111 00000C4E 58                  <1>     pop rax ;Get the CF state in al
   112 00000C4F 5F                  <1>     pop rdi
   113 00000C50 5E                  <1>     pop rsi
   114 00000C51 F3A4                <1>     rep movsb   ;Now we copy the command into the psp command line
   115 00000C53 A801                <1>     test al, 1  ;Was CF set?
   116 00000C55 0F8586000000        <1>     jnz .exit   ;If an embedded CR was found in the filename, exit!
   117                              <1> .cmdLineProcess:
   118 00000C5B E8B6130000          <1>     call skipSpaces ;Go to the next char in the input line
   119                              <1> .redirFound:
   120 00000C60 AC                  <1>     lodsb   ;Get first non-space char (setupRedir skips spaces before ret)
   121 00000C61 3C0D                <1>     cmp al, CR  ;If this was a CR, we stop processing
   122 00000C63 747C                <1>     je .exit
   123 00000C65 E8B3020000          <1>     call checkAndSetupRedir ;If not, check if we have a redir element
   124 00000C6A 7275                <1>     jc .exit    ;CF=CY only if pipe, which is equivalent to CR when processing
   125 00000C6C 74F2                <1>     jz .redirFound  ;If we had a < > or >>, proceed to check if next char CR
   126 00000C6E B020                <1>     mov al, " "
   127 00000C70 AA                  <1>     stosb   ;Store a space to make space for the command file parameter
   128 00000C71 48FFCE              <1>     dec rsi ;Move rsi back to the first char
   129 00000C74 F60530F4FFFFFF      <1>     test byte [arg1Flg], -1
   130 00000C7B 7521                <1>     jnz .arg2
   131                              <1> .arg1:
   132 00000C7D C60527F4FFFFFF      <1>     mov byte [arg1Flg], -1
   133 00000C84 E88D130000          <1>     call skipSpaces
   134 00000C89 4889F0              <1>     mov rax, rsi
   135 00000C8C 488D1DF9F4FFFF      <1>     lea rbx, cmdBuffer
   136 00000C93 4829D8              <1>     sub rax, rbx
   137 00000C96 880510F4FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   138 00000C9C EB2A                <1>     jmp short .argCommon
   139                              <1> .arg2:
   140 00000C9E F60509F4FFFFFF      <1>     test byte [arg2Flg], -1
   141 00000CA5 7521                <1>     jnz .argCommon
   142 00000CA7 C60500F4FFFFFF      <1>     mov byte [arg2Flg], -1
   143 00000CAE E863130000          <1>     call skipSpaces
   144 00000CB3 4889F0              <1>     mov rax, rsi
   145 00000CB6 488D1DCFF4FFFF      <1>     lea rbx, cmdBuffer
   146 00000CBD 4829D8              <1>     sub rax, rbx
   147 00000CC0 8805E9F3FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   148 00000CC6 EB00                <1>     jmp short .argCommon
   149                              <1> .argCommon:
   150                              <1>     ;More than two arguments? Do nothing more than just copy it
   151                              <1>     ; over. If we encounter an embedded CR, exit there too
   152 00000CC8 E849130000          <1>     call skipSpaces
   153 00000CCD 803E0D              <1>     cmp byte [rsi], CR  ;Are we at the end of the commandline?
   154 00000CD0 740F                <1>     je .exit
   155                              <1>     ;If not, we copy it over
   156 00000CD2 E8B3020000          <1>     call copyCommandTailItem    ;Stores a terminating null we dont want
   157 00000CD7 488D7FFF            <1>     lea rdi, qword [rdi - 1]    ;Point back at the inserted terminating null
   158 00000CDB 0F837AFFFFFF        <1>     jnc .cmdLineProcess
   159                              <1> .exit:
   160 00000CE1 488D1DA4F4FFFF      <1>     lea rbx, cmdBuffer
   161 00000CE8 48FFCE              <1>     dec rsi
   162 00000CEB 4829DE              <1>     sub rsi, rbx    ;Get the offset into the command line
   163 00000CEE 89F3                <1>     mov ebx, esi
   164 00000CF0 881DA2F3FFFF        <1>     mov byte [cmdEndOff], bl    ;Store the offset to the terminating char
   165 00000CF6 B00D                <1>     mov al, CR
   166 00000CF8 AA                  <1>     stosb   ;Store the terminating CR in the psp command line
   167                              <1>     ;Now compute the command line length 
   168 00000CF9 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine] 
   169 00000D00 B00D                <1>     mov al, CR
   170 00000D02 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   171 00000D04 FFC9                <1>     dec ecx ;rcx = -1
   172 00000D06 F2AE                <1>     repne scasb
   173 00000D08 F7D1                <1>     not ecx
   174 00000D0A FEC9                <1>     dec cl  ;Dont include terminating CR
   175 00000D0C 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   176 00000D13 880F                <1>     mov byte [rdi], cl
   177                              <1>     ;Before returning, we copy the command name to cmdName
   178 00000D15 488D3DF0F4FFFF      <1>     lea rdi, cmdPathSpec
   179 00000D1C 4889FB              <1>     mov rbx, rdi    ;Use rbx as the ptr to the first char in the commandspec
   180 00000D1F 30C0                <1>     xor al, al  ;Search for the terminating null
   181 00000D21 B94F000000          <1>     mov ecx, fileSpecZL ;Max number of chars the length could be
   182 00000D26 F2AE                <1>     repne scasb
   183 00000D28 48FFCF              <1>     dec rdi ;Go to the last char in the command
   184 00000D2B 4889FE              <1>     mov rsi, rdi
   185 00000D2E FD                  <1>     std ;Now we go backwards to where rsi = rbx OR byte [rsi] = pathSep
   186                              <1> .keepSearching:
   187 00000D2F AC                  <1>     lodsb
   188 00000D30 3A05EDF2FFFF        <1>     cmp al, byte [pathSep]
   189 00000D36 740B                <1>     je .cmdStartFnd
   190 00000D38 4839DE              <1>     cmp rsi, rbx
   191 00000D3B 75F2                <1>     jne .keepSearching
   192 00000D3D 48FFCE              <1>     dec rsi ;Go back two to go forwards again
   193 00000D40 48FFCE              <1>     dec rsi
   194                              <1> .cmdStartFnd:
   195 00000D43 48FFC6              <1>     inc rsi
   196 00000D46 48FFC6              <1>     inc rsi ;Go past the pathsep
   197 00000D49 FC                  <1>     cld ;Go the sane way again
   198 00000D4A 488D3D23F5FFFF      <1>     lea rdi, qword [cmdName + 1]    ;First byte is for the length of the name
   199 00000D51 57                  <1>     push rdi    ;Cleanse the field before usage (not strictly necessary)
   200 00000D52 B90E000000          <1>     mov ecx, cmdNameL
   201 00000D57 30C0                <1>     xor al, al
   202 00000D59 F3AA                <1>     rep stosb
   203 00000D5B 5F                  <1>     pop rdi
   204 00000D5C 31C9                <1>     xor ecx, ecx
   205 00000D5E 56                  <1>     push rsi    ;Save the location of the start byte of the command name
   206                              <1> .cmdGetChar:
   207 00000D5F AC                  <1>     lodsb
   208 00000D60 84C0                <1>     test al, al ;Did we find the terminating null?
   209 00000D62 7411                <1>     jz .nameLenFnd
   210 00000D64 3C2E                <1>     cmp al, "." ;Extension sep also terminates
   211 00000D66 740D                <1>     je .nameLenFnd
   212 00000D68 24DF                <1>     and al, 0DFh    ;Else uppercase the char
   213 00000D6A AA                  <1>     stosb   ;and store it
   214 00000D6B FFC1                <1>     inc ecx
   215 00000D6D 81F90B000000        <1>     cmp ecx, 11 ;Max command length is 11
   216 00000D73 72EA                <1>     jb .cmdGetChar
   217                              <1> .nameLenFnd:
   218 00000D75 880DF8F4FFFF        <1>     mov byte [cmdName], cl  ;Store the name length now
   219                              <1>     ;Now finally, create a FCB filespec
   220 00000D7B 488D3DD9F4FFFF      <1>     lea rdi, fcbCmdSpec
   221 00000D82 57                  <1>     push rdi
   222 00000D83 B90B000000          <1>     mov ecx, fcbNameL
   223 00000D88 B020                <1>     mov al, " " ;Fill with spaces
   224 00000D8A F3AA                <1>     rep stosb
   225 00000D8C 5F                  <1>     pop rdi
   226 00000D8D 5E                  <1>     pop rsi ;Get back the location of the start byte of the command name
   227 00000D8E E8CB120000          <1>     call asciiToFCB
   228 00000D93 488D35C1F4FFFF      <1>     lea rsi, fcbCmdSpec
   229 00000D9A 488D3DC5F4FFFF      <1>     lea rdi, cmdSpec
   230 00000DA1 E813130000          <1>     call FCBToAsciiz
   231                              <1>     return
    19                              <2> %%_ret:
    20 00000DA6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   232                              <1> 
   233                              <1> doCommandLine:
   234 00000DA7 488D35E0F3FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
   235 00000DAE 488D3DFCF2FFFF      <1>     lea rdi, cmdFcb
   236 00000DB5 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks
   237 00000DBA CD41                <1>     int 41h
   238 00000DBC 0FB71DE4F2FFFF      <1>     movzx ebx, word [cmdDrvSpec]    ;Get the drive specifier
   239 00000DC3 80FF3A              <1>     cmp bh, ":"
   240 00000DC6 752E                <1>     jne .noDriveSpecified
   241 00000DC8 88DA                <1>     mov dl, bl      ;Move the drive letter in dl
   242 00000DCA 80E2DF              <1>     and dl, 0DFh    ;Make the drive letter upper case
   243 00000DCD 80EA41              <1>     sub dl, "A"     ;And make it a 0 based drive letter
   244 00000DD0 3CFF                <1>     cmp al, -1  ;Int 41h returns AL = -1 if bad drive specified
   245 00000DD2 7415                <1>     je .badDrive
   246                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   247 00000DD4 803D98F4FFFF02      <1>     cmp byte [cmdName], 2
   248 00000DDB 7519                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   249 00000DDD B40E                <1>     mov ah, 0Eh ;Set drive to dl
   250 00000DDF CD41                <1>     int 41h 
   251 00000DE1 B419                <1>     mov ah, 19h
   252 00000DE3 CD41                <1>     int 41h     ;Get current drive
   253 00000DE5 38D0                <1>     cmp al, dl  ;If the drive was set, all is well
   254                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000DE7 74(A6)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   255                              <1> .badDrive:
   256 00000DE9 488D15E9F8FFFF      <1>     lea rdx, badDrv
   257 00000DF0 B409                <1>     mov ah, 09h
   258 00000DF2 CD41                <1>     int 41h
   259 00000DF4 F9                  <1>     stc
   260                              <1>     return
    19                              <2> %%_ret:
    20 00000DF5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   261                              <1> .noDriveSpecified:
   262                              <1> ;Now we set the two FCB's in the command line
   263 00000DF6 F605AEF2FFFFFF      <1>     test byte [arg1Flg], -1
   264 00000DFD 744D                <1>     jz .fcbArgsDone
   265 00000DFF 0FB605A6F2FFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   266 00000E06 488D357FF3FFFF      <1>     lea rsi, cmdBuffer
   267 00000E0D 4801C6              <1>     add rsi, rax    ;Point to first argument
   268 00000E10 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   269 00000E14 B801290000          <1>     mov eax, 2901h
   270 00000E19 CD41                <1>     int 41h
   271 00000E1B 88058CF2FFFF        <1>     mov byte [arg1FCBret], al
   272 00000E21 F60586F2FFFFFF      <1>     test byte [arg2Flg], -1
   273 00000E28 7422                <1>     jz .fcbArgsDone
   274 00000E2A 0FB6057EF2FFFF      <1>     movzx eax, byte [arg2Off]
   275 00000E31 488D3554F3FFFF      <1>     lea rsi, cmdBuffer
   276 00000E38 4801C6              <1>     add rsi, rax    ;Point to first argument
   277 00000E3B 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   278 00000E3F B801290000          <1>     mov eax, 2901h
   279 00000E44 CD41                <1>     int 41h
   280 00000E46 880564F2FFFF        <1>     mov byte [arg2FCBret], al
   281                              <1> .fcbArgsDone:
   282 00000E4C 488D3539F3FFFF      <1>     lea rsi, cmdBuffer
   283 00000E53 488D1D19F4FFFF      <1>     lea rbx, cmdName
   284 00000E5A B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   285 00000E5F BAFFFF0000          <1>     mov edx, 0FFFFh
   286 00000E64 B5FF                <1>     mov ch, -1
   287 00000E66 CD4F                <1>     int 4Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   288                              <1>             ;        al = 0  if the command should be executed as usual
   289 00000E68 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   290 00000E6D BAFFFF0000          <1>     mov edx, 0FFFFh
   291 00000E72 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   292 00000E74 CD4F                <1>     int 4Fh
   293 00000E76 741D                <1>     jz .executeInternal
   294                              <1>     ;Here we execute externally and return to the prompt
   295                              <1>     ; as if it was an internal execution
   296 00000E78 488D358DF2FFFF      <1>     lea rsi, inBuffer ;Point to this built buffer
   297 00000E7F 488D1D2BF2FFFF      <1>     lea rbx, cmdFcb
   298 00000E86 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   299 00000E8B BAFFFF0000          <1>     mov edx, 0FFFFh
   300 00000E90 B5FF                <1>     mov ch, -1
   301 00000E92 CD4F                <1>     int 4Fh 
   302                              <1>     return
    19                              <2> %%_ret:
    20 00000E94 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   303                              <1> .executeInternal:
   304                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   305                              <1> ;rsi points after the command terminator in the command tail
   306 00000E95 488D1D2EF6FFFF      <1>     lea rbx, functionTable
   307                              <1> .nextEntry:
   308 00000E9C 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   309 00000E9F 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   310 00000EA2 0F84E80C0000        <1>     je launchChild      ;If so, check externally now
   311 00000EA8 380DC5F3FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   312 00000EAE 7529                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   313                              <1>     ;Here they have the same length so lets see if the name is the same
   314 00000EB0 56                  <1>     push rsi
   315                              <1>     ;ecx has the length to compare
   316 00000EB1 51                  <1>     push rcx
   317 00000EB2 488D7301            <1>     lea rsi, qword [rbx + 1]
   318 00000EB6 488D3DB7F3FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   319 00000EBD F3A6                <1>     rep cmpsb   ;Check the strings are equal
   320 00000EBF 59                  <1>     pop rcx
   321 00000EC0 5E                  <1>     pop rsi
   322 00000EC1 7516                <1>     jne .gotoNextEntry
   323                              <1>     ;Here it was found both strings are equal
   324 00000EC3 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   325 00000EC8 480FB71F            <1>     movzx rbx, word [rdi]
   326 00000ECC 488D3D2DF1FFFF      <1>     lea rdi, startLbl
   327 00000ED3 4801FB              <1>     add rbx, rdi
   328 00000ED6 FFD3                <1>     call rbx    ;Call this function...
   329                              <1>     return  ;... and return
    19                              <2> %%_ret:
    20 00000ED8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   330                              <1> .gotoNextEntry:
   331 00000ED9 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   332 00000EE0 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   333 00000EE3 EBB7                <1>     jmp short .nextEntry
   334                              <1> .dfltErrExit:
   335 00000EE5 488D15DEF6FFFF      <1>     lea rdx, badCmd
   336 00000EEC B409                <1>     mov ah, 09h
   337 00000EEE CD41                <1>     int 41h
   338                              <1>     return
    19                              <2> %%_ret:
    20 00000EF0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   339                              <1> 
   340                              <1> 
   341                              <1> checkExtensionExec:
   342                              <1> ;Checks the extension field of cmdFcb is .COM, .EXE, .BAT in that order
   343                              <1> ;Returns: ZF=ZE if executable. ZF=NZ if not executable.
   344                              <1> ;         If ZF=ZE and CF=CY => Batch file
   345 00000EF1 8B05C3F1FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   346 00000EF7 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   347 00000EFC 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   348 00000F01 25DFDFDFFF          <1>     and eax, 0FFDFDFDFh ;Uppercase the three letters
   349 00000F06 3D434F4D20          <1>     cmp eax, "COM "
   350                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000F0B 74(F0)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   351 00000F0D 3D45584520          <1>     cmp eax, "EXE "
   352                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000F12 74(F0)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   353 00000F14 3D42415420          <1>     cmp eax, "BAT "
   354                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000F19 75(F0)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   355 00000F1B F9                  <1>     stc
   356                              <1>     return
    19                              <2> %%_ret:
    20 00000F1C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   357                              <1> 
   358                              <1> checkAndSetupRedir:
   359                              <1> ;Checks and sets up redir as appropriate
   360                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   361                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   362                              <1> ;Output: ZF=NZ => No redir
   363                              <1> ;        ZF=ZY => Redir
   364                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   365                              <1> ;CF=CY if pipe set or an embedded CR found
   366 00000F1D 57                  <1>     push rdi
   367 00000F1E 3C3C                <1>     cmp al, "<"
   368 00000F20 740B                <1>     je .inputRedir
   369 00000F22 3C3E                <1>     cmp al, ">"
   370 00000F24 742A                <1>     je .outputRedir
   371 00000F26 3C7C                <1>     cmp al, "|"
   372 00000F28 7454                <1>     je .pipeSetup
   373 00000F2A F8                  <1>     clc
   374                              <1> .redirExit:
   375 00000F2B 5F                  <1>     pop rdi
   376                              <1>     return
    19                              <2> %%_ret:
    20 00000F2C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   377                              <1> .inputRedir:
   378 00000F2D C60575F1FFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   379 00000F34 488D3D46F3FFFF      <1>     lea rdi, rdrInFilespec
   380 00000F3B E8D6100000          <1>     call skipSpaces ;Skip spaces between < and the filespec
   381 00000F40 E845000000          <1>     call copyCommandTailItem
   382 00000F45 72E4                <1>     jc .redirExit
   383 00000F47 E8CA100000          <1>     call skipSpaces
   384 00000F4C 30C0                <1>     xor al, al
   385 00000F4E EBDB                <1>     jmp short .redirExit
   386                              <1> .outputRedir:
   387 00000F50 C60553F1FFFF01      <1>     mov byte [redirOut], 1
   388 00000F57 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   389 00000F5A 7506                <1>     jne .notDouble
   390 00000F5C FE0548F1FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   391                              <1> .notDouble:
   392 00000F62 488D3D67F3FFFF      <1>     lea rdi, rdrOutFilespec
   393 00000F69 E8A8100000          <1>     call skipSpaces
   394 00000F6E E817000000          <1>     call copyCommandTailItem
   395 00000F73 72B6                <1>     jc .redirExit
   396 00000F75 E89C100000          <1>     call skipSpaces
   397 00000F7A 30C0                <1>     xor al, al
   398 00000F7C EBAD                <1>     jmp short .redirExit
   399                              <1> .pipeSetup:
   400 00000F7E C60514F1FFFFFF      <1>     mov byte [pipeFlag], -1
   401 00000F85 30C0                <1>     xor al, al
   402 00000F87 F9                  <1>     stc
   403 00000F88 5F                  <1>     pop rdi
   404                              <1>     return
    19                              <2> %%_ret:
    20 00000F89 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   405                              <1> 
   406                              <1> copyCommandTailItem:
   407                              <1> ;Copies a sentence from the command tail until a terminator is found.
   408                              <1> ;Stores a terminating null in the destination
   409                              <1> ;Input: rsi = Start of the item to copy
   410                              <1> ;       rdi = Location for copy
   411                              <1> ;Output: Sentence copied with a null terminator inserted.
   412                              <1> ; If CF=CY, embedded CR encountered
   413 00000F8A AC                  <1>     lodsb
   414 00000F8B 3C0D                <1>     cmp al, CR
   415 00000F8D 741A                <1>     je .endOfInput
   416 00000F8F E84E100000          <1>     call isALterminator
   417 00000F94 741A                <1>     jz .exit
   418 00000F96 3A0587F0FFFF        <1>     cmp al, byte [pathSep]
   419 00000F9C 7412                <1>     je .exit
   420 00000F9E 3A0580F0FFFF        <1>     cmp al, byte [switchChar]
   421 00000FA4 740A                <1>     je .exit
   422 00000FA6 AA                  <1>     stosb
   423 00000FA7 EBE1                <1>     jmp short copyCommandTailItem
   424                              <1> .endOfInput:
   425 00000FA9 E802000000          <1>     call .exit
   426 00000FAE F9                  <1>     stc 
   427                              <1>     return
    19                              <2> %%_ret:
    20 00000FAF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   428                              <1> .exit:
   429 00000FB0 30C0                <1>     xor al, al
   430 00000FB2 AA                  <1>     stosb
   431                              <1>     return
    19                              <2> %%_ret:
    20 00000FB3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   432                              <1> 
   433                              <1> 
   434                              <1> int4Eh:   ;Interrupt interface for parsing and executing command lines
   435                              <1> ;Input: rsi points to the count byte of a command line
   436 00000FB4 4150                <1>     push r8
   437 00000FB6 4151                <1>     push r9
   438 00000FB8 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   439 00000FBA CD41                <1>     int 41h
   440 00000FBC 52                  <1>     push rdx    ;Save on the stack
   441 00000FBD 488D1D3CEFFFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   442 00000FC4 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   443 00000FC6 CD41                <1>     int 41h
   444 00000FC8 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   445 00000FCB 4989D9              <1>     mov r9, rbx
   446 00000FCE 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   447 00000FD5 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   448 00000FDA F348A5              <1>     rep movsq   ;Copy command line over
   449                              <1>     ;call doCommandLine
   450 00000FDD 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   451 00000FDE B450                <1>     mov ah, 50h ;Set Current PSP
   452 00000FE0 CD41                <1>     int 41h
   453 00000FE2 4159                <1>     pop r9
   454 00000FE4 4158                <1>     pop r8
   455 00000FE6 48CF                <1>     iretq
    15                                  %include "./Source/Utils/COMMAND/Source/cmdFunc.asm"
    16                              <1> ;Note! Each function must setup the DTA to use for itself.
    17                              <1> ;There is no requirement to preserve the DTA across a call.
    18                              <1> ;Only the Int 4Eh entry point will preserve the callers DTA.
    19                              <1> 
    20                              <1> ;Common Error Messages, jumped to to return from
    21                              <1> badParamError:
    22 00000FE8 488D1527F7FFFF      <1>     lea rdx, badParm
    23 00000FEF EB22                <1>     jmp short badCmn
    24                              <1> badDriveError:
    25 00000FF1 488D15E1F6FFFF      <1>     lea rdx, badDrv
    26 00000FF8 EB19                <1>     jmp short badCmn
    27                              <1> badArgError:
    28 00000FFA 488D1592F9FFFF      <1>     lea rdx, badArgs
    29 00001001 EB10                <1>     jmp short badCmn
    30                              <1> badFileError:
    31 00001003 488D156DF9FFFF      <1>     lea rdx, badSpec
    32 0000100A EB07                <1>     jmp short badCmn
    33                              <1> badDirError:
    34 0000100C 488D1504F8FFFF      <1>     lea rdx, badDir
    35                              <1> badCmn:
    36 00001013 B800090000          <1>     mov eax, 0900h
    37 00001018 CD41                <1>     int 41h
    38 0000101A F9                  <1>     stc ;Return with CY => Error occured
    39                              <1>     return
    19                              <2> %%_ret:
    20 0000101B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    40                              <1> 
    41                              <1> dir:
    42 0000101C C6057CF3FFFF00      <1>     mov byte [dirPrnType], 0    ;Clear DIR flags
    43 00001023 C60576F3FFFF00      <1>     mov byte [dirLineCtr], 0
    44 0000102A C60570F3FFFF00      <1>     mov byte [dirFileCtr], 0
    45 00001031 C605EBF3FFFF00      <1>     mov byte [dirPathArg], 0    ;Null terminate the start of the buffer
    46 00001038 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    46 00001041 3F                  <1>
    47 00001042 488D3D5AF4FFFF      <1>     lea rdi, dirSrchPat ;Start also by initialising the search pattern
    48 00001049 48AB                <1>     stosq
    49 0000104B 48FFC7              <1>     inc rdi ;Go past dot
    50 0000104E 668907              <1>     mov word [rdi], ax
    51 00001051 884702              <1>     mov byte [rdi + 2], al
    52                              <1>     ;Start by scanning for the switches
    53 00001054 488D3D32F1FFFF      <1>     lea rdi, cmdBuffer + 1  ;Goto command line input chars count
    54 0000105B 0FB60F              <1>     movzx ecx, byte [rdi]   ;Get number of chars typed
    55 0000105E 48FFC7              <1>     inc rdi ;Goto first char typed in
    56 00001061 4889FE              <1>     mov rsi, rdi    ;Use rsi as start of buffer counter
    57 00001064 8A05BAEFFFFF        <1>     mov al, byte [switchChar]   ;Scan for switchchars
    58                              <1> .switchScan:
    59 0000106A F2AE                <1>     repne scasb ;Scan for a switchchar
    60 0000106C 67E322              <1>     jecxz .switchScanDone
    61 0000106F 8A07                <1>     mov al, byte [rdi]  ;Get the byte pointed to by rdi
    62 00001071 24DF                <1>     and al, 0DFh    ;UC it
    63 00001073 3C57                <1>     cmp al, "W" ;Wide print mode?
    64 00001075 7509                <1>     jne .notWideSw
    65 00001077 800D21F3FFFF01      <1>     or byte [dirPrnType], 1 ;Set the correct bit
    66 0000107E EBEA                <1>     jmp short .switchScan
    67                              <1> .notWideSw:
    68 00001080 3C50                <1>     cmp al, "P" ;Pause mode?
    69 00001082 0F8560FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    70 00001088 800D10F3FFFF02      <1>     or byte [dirPrnType], 2 ;Set correct bit
    71 0000108F EBD9                <1>     jmp short .switchScan
    72                              <1> .switchScanDone:
    73                              <1> ;If no args, only switches, we search CWD
    74                              <1> ;If one arg, search that 
    75                              <1> ;If more than one, fail
    76 00001091 488D35F6F0FFFF      <1>     lea rsi, cmdBuffer + 2
    77 00001098 E8790F0000          <1>     call skipSpaces ;Skip leading spaces
    78 0000109D 4881C603000000      <1>     add rsi, 3  ;Go past the DIR (always three chars)
    79                              <1> .loop:
    80 000010A4 E86D0F0000          <1>     call skipSpaces ;Skip spaces after
    81 000010A9 AC                  <1>     lodsb   ;Get first non space char
    82 000010AA E8560F0000          <1>     call isALEndOfCommand   ;If this is the end char CR or "|", exit
    83 000010AF 7442                <1>     jz .eocNoNull
    84 000010B1 3A056DEFFFFF        <1>     cmp al, byte [switchChar]  ;Is al a switch char?
    85 000010B7 7509                <1>     jne .notSwitch
    86                              <1>     ;Now we skip the switch if it was a switch
    87 000010B9 E8EF0E0000          <1>     call findTerminatorOrEOC    ;Go past the switch
    88 000010BE 7233                <1>     jc .eocNoNull  ;If we reach the EOC, exit,
    89 000010C0 EBE2                <1>     jmp short .loop
    90                              <1> .notSwitch:
    91                              <1>     ;If not a switch, should be a path. Copy to buffer and keep searching
    92 000010C2 803D5AF3FFFF00      <1>     cmp byte [dirPathArg], 0    ;If a second path provided, error
    93 000010C9 0F852BFFFFFF        <1>     jne badArgError
    94 000010CF 488D3D4DF3FFFF      <1>     lea rdi, dirPathArg ;Store the path to search here AS WRITTEN BY USER
    95 000010D6 48FFCE              <1>     dec rsi ;Go back to the start of the string
    96                              <1> .nameCopy:
    97 000010D9 AC                  <1>     lodsb
    98 000010DA E8260F0000          <1>     call isALEndOfCommand
    99 000010DF 740F                <1>     jz .eocReached
   100 000010E1 E8FC0E0000          <1>     call isALterminator
   101 000010E6 7403                <1>     jz .terminateCopy
   102 000010E8 AA                  <1>     stosb
   103 000010E9 EBEE                <1>     jmp short .nameCopy
   104                              <1> .terminateCopy:
   105 000010EB 31C0                <1>     xor eax, eax
   106 000010ED AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   107 000010EE EBB4                <1>     jmp short .loop ;Now search if another 
   108                              <1> .eocReached:
   109 000010F0 31C0                <1>     xor eax, eax
   110 000010F2 AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   111                              <1> .eocNoNull:
   112 000010F3 803D29F3FFFF00      <1>     cmp byte [dirPathArg], 0    ;If no path provided, use CWD for current drive
   113 000010FA 7434                <1>     je .currentDrv
   114                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   115 000010FC 488D3520F3FFFF      <1>     lea rsi, dirPathArg
   116 00001103 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   117 00001107 7527                <1>     jne .currentDrv
   118                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   119 00001109 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   120 0000110E 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   121 00001112 B801290000          <1>     mov eax, 2901h   ;Parse filename
   122 00001117 CD41                <1>     int 41h
   123 00001119 3CFF                <1>     cmp al, -1
   124 0000111B 0F84D0FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   125                              <1>     ;Else the drive in the fcb is valid
   126 00001121 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   127 00001126 FEC8                <1>     dec al  ;Convert to 0 based drive number
   128 00001128 880574F2FFFF        <1>     mov byte [dirDrv], al
   129 0000112E EB0B                <1>     jmp short .dirPrintVol
   130                              <1> .currentDrv:
   131 00001130 E8640E0000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   132 00001135 880567F2FFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   133                              <1> .dirPrintVol:
   134 0000113B 0FB60560F2FFFF      <1>     movzx eax, byte [dirDrv] 
   135 00001142 E814070000          <1>     call volume.dirEP
   136 00001147 803DD5F2FFFF00      <1>     cmp byte [dirPathArg], 0    ;Null path here, 
   137 0000114E 7409                <1>     je .printCWD
   138 00001150 803DCFF2FFFF00      <1>     cmp byte [dirPathArg + 3], 0    ;Was this X:,0?
   139 00001157 7400                <1>     je .printCWD
   140                              <1>     ;Here we have a path
   141                              <1>     ;Temp measure, we just fall through ignoring the path provided
   142                              <1> .printCWD:
   143 00001159 8A1543F2FFFF        <1>     mov dl, byte [dirDrv]
   144 0000115F 88D0                <1>     mov al, dl
   145 00001161 0441                <1>     add al, "A"
   146 00001163 B43A                <1>     mov ah, ":"
   147 00001165 668905B3F1FFFF      <1>     mov word [searchSpec], ax
   148 0000116C 8A05B1EEFFFF        <1>     mov al, byte [pathSep]
   149 00001172 8805A9F1FFFF        <1>     mov byte [searchSpec + 2], al
   150 00001178 488D35A3F1FFFF      <1>     lea rsi, searchSpec + 3  ;Make space for a X:"\"
   151 0000117F B447                <1>     mov ah, 47h ;Get Current Working Directory
   152 00001181 FEC2                <1>     inc dl  ;Convert to 1 based number
   153 00001183 CD41                <1>     int 41h
   154 00001185 488D3D93F1FFFF      <1>     lea rdi, searchSpec
   155 0000118C E80D0E0000          <1>     call strlen
   156 00001191 FFC9                <1>     dec ecx
   157 00001193 C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   158 00001197 488D15E1F6FFFF      <1>     lea rdx, dirMain
   159 0000119E B409                <1>     mov ah, 09h
   160 000011A0 CD41                <1>     int 41h
   161 000011A2 4889FA              <1>     mov rdx, rdi    ;Print the current directory we are working on
   162 000011A5 B409                <1>     mov ah, 09h
   163 000011A7 CD41                <1>     int 41h
   164 000011A9 488D15C0F3FFFF      <1>     lea rdx, crlf2
   165 000011B0 B409                <1>     mov ah, 09h
   166 000011B2 CD41                <1>     int 41h
   167 000011B4 E801000000          <1>     call .searchForFile
   168                              <1>     return
    19                              <2> %%_ret:
    20 000011B9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   169                              <1>     ;If we get no path spec or just a X: path spec then we 
   170                              <1>     ; search the current working directory for that pathspec
   171                              <1>     ;If we get an actual pathspec, we first save the CWD for that drive
   172                              <1>     ; and then we try to make the pathspec the CWD. 
   173                              <1>     ;   If it works, we then search *.* in that folder and return the og CWD.
   174                              <1>     ;   If it fails, we then search one level up, for the search pattern
   175                              <1>     ;    that we compute.
   176                              <1> 
   177                              <1>     
   178                              <1>     ;Now we need to print the path to the folder we will be searching in
   179                              <1> .searchForFile:
   180                              <1>     ;Now we search for the files
   181                              <1>     ;RCX must have the number of chars to the end of the pathspec
   182 000011BA 488D3D5EF1FFFF      <1>     lea rdi, searchSpec
   183 000011C1 8A055CEEFFFF        <1>     mov al, byte [pathSep]
   184 000011C7 38440FFF            <1>     cmp byte [rdi + rcx - 1], al
   185 000011CB 7405                <1>     je .noAddSlash  ;Deals with special case of root dir
   186 000011CD 88040F              <1>     mov byte [rdi + rcx], al
   187 000011D0 FFC1                <1>     inc ecx
   188                              <1> .noAddSlash:
   189 000011D2 488D3C0F            <1>     lea rdi, qword [rdi + rcx]
   190 000011D6 488D35C6F2FFFF      <1>     lea rsi, dirSrchPat
   191 000011DD 4889FA              <1>     mov rdx, rdi    ;Ptr to search for in rdx
   192 000011E0 48A5                <1>     movsq
   193 000011E2 A5                  <1>     movsd
   194 000011E3 30C0                <1>     xor al, al
   195 000011E5 AA                  <1>     stosb   ;Store the terminating null
   196 000011E6 B911000000          <1>     mov ecx, dirReadOnly | dirDirectory
   197 000011EB B44E                <1>     mov ah, 4Eh ;Find first
   198 000011ED CD41                <1>     int 41h
   199 000011EF 720B                <1>     jc .dirNoMoreFiles
   200                              <1> .findNext:
   201 000011F1 E876000000          <1>     call .dirPrintFileData  ;Print the file information
   202 000011F6 B44F                <1>     mov ah, 4Fh
   203 000011F8 CD41                <1>     int 41h
   204 000011FA 73F5                <1>     jnc .findNext 
   205                              <1> .dirNoMoreFiles:
   206 000011FC F6059CF1FFFF01      <1>     test byte [dirPrnType], 1
   207 00001203 740B                <1>     jz .dirNoEndNewLine
   208 00001205 488D1561F3FFFF      <1>     lea rdx, crlf   ;Only need this for /W
   209 0000120C B409                <1>     mov ah, 09h
   210 0000120E CD41                <1>     int 41h
   211                              <1> .dirNoEndNewLine:
   212                              <1>     ;Now we print the number of files and the number of bytes on the disk
   213 00001210 488D15DEF8FFFF      <1>     lea rdx, fourSpc
   214 00001217 B409                <1>     mov ah, 09h
   215 00001219 CD41                <1>     int 41h
   216 0000121B B409                <1>     mov ah, 09h ;Print four Spaces twice
   217 0000121D CD41                <1>     int 41h
   218 0000121F 0FB6057BF1FFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   219 00001226 E89C0F0000          <1>     call printDecimalWord
   220 0000122B 488D1586F4FFFF      <1>     lea rdx, dirOk
   221 00001232 B409                <1>     mov ah, 09h
   222 00001234 CD41                <1>     int 41h
   223 00001236 488D15BDF8FFFF      <1>     lea rdx, threeSpc
   224 0000123D B409                <1>     mov ah, 09h
   225 0000123F CD41                <1>     int 41h
   226 00001241 B800360000          <1>     mov eax, 3600h ;Get disk info
   227 00001246 8A1556F1FFFF        <1>     mov dl, byte [dirDrv]
   228 0000124C CD41                <1>     int 41h ;Get disk free space info
   229 0000124E 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   230 00001251 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   231 00001254 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   232 00001256 F7E1                <1>     mul ecx ;Get bytes per cluster
   233 00001258 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   234                              <1>     ;rax now has the number of free bytes on the disk
   235 0000125B E8670F0000          <1>     call printDecimalWord
   236 00001260 488D155BF4FFFF      <1>     lea rdx, bytesOk
   237 00001267 B409                <1>     mov ah, 09h
   238 00001269 CD41                <1>     int 41h
   239                              <1>     return
    19                              <2> %%_ret:
    20 0000126B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   240                              <1> 
   241                              <1> .dirPrintFileData:
   242                              <1> ;Use fcbCmdSpec to build the file name with space
   243                              <1> ;Start by print the name (same for both cases)
   244 0000126C 488D356CEEFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   245 00001273 488D3DE1EFFFFF      <1>     lea rdi, fcbCmdSpec
   246 0000127A E8F00D0000          <1>     call asciiFilenameToFCB
   247 0000127F 488D15D5EFFFFF      <1>     lea rdx, fcbCmdSpec
   248 00001286 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   249 0000128B BB01000000          <1>     mov ebx, 1  ;STDOUT
   250 00001290 B440                <1>     mov ah, 40h ;Write handle
   251 00001292 CD41                <1>     int 41h
   252 00001294 52                  <1>     push rdx
   253 00001295 B220                <1>     mov dl, " "
   254 00001297 B402                <1>     mov ah, 02h ;Print char
   255 00001299 CD41                <1>     int 41h
   256 0000129B 5A                  <1>     pop rdx
   257 0000129C 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   258 000012A3 B903000000          <1>     mov ecx, 3  ;Print three chars
   259 000012A8 BB01000000          <1>     mov ebx, 1  ;STDOUT
   260 000012AD B440                <1>     mov ah, 40h ;Write handle
   261 000012AF CD41                <1>     int 41h
   262 000012B1 F605E7F0FFFF01      <1>     test byte [dirPrnType], 1
   263 000012B8 0F85A8000000        <1>     jnz .widePrint
   264                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   265                              <1>     ;Now check if a DIR
   266 000012BE F60511EEFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   267 000012C5 7418                <1>     jz .dirPrintNotDir
   268 000012C7 488D1502F4FFFF      <1>     lea rdx, dirLbl
   269 000012CE B409                <1>     mov ah, 09h
   270 000012D0 CD41                <1>     int 41h
   271 000012D2 488D1521F8FFFF      <1>     lea rdx, threeSpc
   272 000012D9 B409                <1>     mov ah, 09h
   273 000012DB CD41                <1>     int 41h
   274 000012DD EB4F                <1>     jmp short .dirPrintFileDT
   275                              <1> .dirPrintNotDir:
   276                              <1> ;Here we print the file size
   277 000012DF B220                <1>     mov dl, " "
   278 000012E1 B402                <1>     mov ah, 02h
   279 000012E3 CD41                <1>     int 41h
   280 000012E5 8B05F0EDFFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   281 000012EB E8480F0000          <1>     call getDecimalWord
   282 000012F0 4889CB              <1>     mov rbx, rcx
   283 000012F3 51                  <1>     push rcx
   284 000012F4 480FCB              <1>     bswap rbx
   285 000012F7 B908000000          <1>     mov ecx, 8
   286                              <1> .dirPrintFileSizePrep:
   287 000012FC 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   288 000012FE 7514                <1>     jne .dirPrintFileSize
   289 00001300 B402                <1>     mov ah, 02h
   290 00001302 B220                <1>     mov dl, " "
   291 00001304 CD41                <1>     int 41h
   292 00001306 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   293 0000130A FFC9                <1>     dec ecx
   294 0000130C 81F901000000        <1>     cmp ecx, 1
   295 00001312 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   296                              <1> .dirPrintFileSize:
   297 00001314 5B                  <1>     pop rbx
   298                              <1> .dirPrintFileSizeLoop:
   299 00001315 88DA                <1>     mov dl, bl
   300 00001317 B402                <1>     mov ah, 02h
   301 00001319 CD41                <1>     int 41h
   302 0000131B 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   303 0000131F FFC9                <1>     dec ecx
   304 00001321 75F2                <1>     jnz .dirPrintFileSizeLoop
   305 00001323 488D15D4F7FFFF      <1>     lea rdx, twoSpc
   306 0000132A B409                <1>     mov ah, 09h
   307 0000132C CD41                <1>     int 41h
   308                              <1> .dirPrintFileDT:
   309 0000132E B220                <1>     mov dl, " "
   310 00001330 B402                <1>     mov ah, 02h
   311 00001332 CD41                <1>     int 41h
   312 00001334 0FB7059EEDFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   313 0000133B 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   314 0000133D E8AD090000          <1>     call printDate
   315 00001342 488D15B5F7FFFF      <1>     lea rdx, twoSpc
   316 00001349 B409                <1>     mov ah, 09h
   317 0000134B CD41                <1>     int 41h
   318 0000134D 0FB70583EDFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   319 00001354 E8B80A0000          <1>     call printTime
   320 00001359 488D150DF2FFFF      <1>     lea rdx, crlf
   321 00001360 B409                <1>     mov ah, 09h
   322 00001362 CD41                <1>     int 41h
   323 00001364 EB0B                <1>     jmp short .dirPrintNameExit
   324                              <1> .widePrint:
   325                              <1> ;If /W, print name space ext space space space space
   326 00001366 488D1588F7FFFF      <1>     lea rdx, fourSpc
   327 0000136D B409                <1>     mov ah, 09h ;Print string
   328 0000136F CD41                <1>     int 41h
   329                              <1> .dirPrintNameExit:
   330 00001371 FE052AF0FFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   331 00001377 FE0523F0FFFF        <1>     inc byte [dirLineCtr]
   332 0000137D 803D1CF0FFFF17      <1>     cmp byte [dirLineCtr], 23
   333                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 00001384 7401                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 00001386 C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   334 00001387 488D1569F3FFFF      <1>     lea rdx, pauseMes
   335 0000138E B409                <1>     mov ah, 09h
   336 00001390 CD41                <1>     int 41h
   337 00001392 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   338 00001394 CD41                <1>     int 41h
   339 00001396 C60503F0FFFF00      <1>     mov byte [dirLineCtr], 0
   340 0000139D 488D15C9F1FFFF      <1>     lea rdx, crlf   ;Force new line
   341 000013A4 B409                <1>     mov ah, 09h
   342 000013A6 CD41                <1>     int 41h
   343                              <1>     return
    19                              <2> %%_ret:
    20 000013A8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   344                              <1> 
   345                              <1> chdir:
   346 000013A9 F605FBECFFFFFF      <1>     test byte [arg1Flg], -1
   347 000013B0 754D                <1>     jnz .changeDir
   348                              <1>     ;Print CWD
   349                              <1> .printCWD:
   350 000013B2 E83B0B0000          <1>     call putCWDInPrompt ;Exactly the same procedure
   351 000013B7 E81D090000          <1>     call printCRLF
   352                              <1>     return
    19                              <2> %%_ret:
    20 000013BC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   353                              <1> .printDiskCWD:
   354                              <1> ;Print CWD for a specified drive
   355 000013BD 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   356 000013C1 88D0                <1>     mov al, dl
   357 000013C3 0440                <1>     add al, "@" ;Get the UC letter
   358 000013C5 B43A                <1>     mov ah, ":"
   359 000013C7 488D3D51EFFFFF      <1>     lea rdi, searchSpec
   360 000013CE 66AB                <1>     stosw   ;Store X:, rdi+=2
   361 000013D0 8A054DECFFFF        <1>     mov al, byte [pathSep]
   362 000013D6 AA                  <1>     stosb   ;Store pathSep, inc rdi
   363 000013D7 B447                <1>     mov ah, 47h ;Get Current Working Directory
   364 000013D9 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   365 000013DC CD41                <1>     int 41h
   366 000013DE E8BB0B0000          <1>     call strlen
   367 000013E3 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   368 000013E9 B440                <1>     mov ah, 40h ;Write to handle
   369 000013EB BB01000000          <1>     mov ebx, 1  ;STDOUT
   370 000013F0 488D1528EFFFFF      <1>     lea rdx, searchSpec
   371 000013F7 CD41                <1>     int 41h
   372 000013F9 E8DB080000          <1>     call printCRLF
   373                              <1>     return
    19                              <2> %%_ret:
    20 000013FE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   374                              <1> .changeDir:
   375 000013FF 8A05A8ECFFFF        <1>     mov al, byte [arg1FCBret]
   376 00001405 3CFF                <1>     cmp al, -1 
   377 00001407 0F84E4FBFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   378 0000140D 4180785D20          <1>     cmp byte [r8 + fcb1 + fcb.filename], " "
   379 00001412 7520                <1>     jne .getFQPath
   380                              <1>     ;Now we double check that on the command line we have . or ..
   381 00001414 0FB60591ECFFFF      <1>     movzx eax, byte [arg1Off]
   382 0000141B 488D356AEDFFFF      <1>     lea rsi, cmdBuffer
   383 00001422 4801C6              <1>     add rsi, rax
   384 00001425 8A05F8EBFFFF        <1>     mov al, byte [pathSep]
   385 0000142B 3806                <1>     cmp byte [rsi], al  ;Is the first char a pathsep?
   386 0000142D 7405                <1>     je .getFQPath
   387 0000142F 803E2E              <1>     cmp byte [rsi], "."
   388 00001432 7589                <1>     jne .printDiskCWD
   389                              <1>     ;If the path is . or .., its acceptable, else fail
   390                              <1> .getFQPath:
   391 00001434 E8C00C0000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   392 00001439 0F82CDFBFFFF        <1>     jc badDirError  ;If this returns CF=CY, its a badDir
   393 0000143F 488D15D9EEFFFF      <1>     lea rdx, searchSpec
   394 00001446 B43B                <1>     mov ah, 3Bh ;CHDIR
   395 00001448 CD41                <1>     int 41h
   396 0000144A 0F82BCFBFFFF        <1>     jc badDirError
   397                              <1>     return
    19                              <2> %%_ret:
    20 00001450 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   398                              <1> 
   399                              <1> mkdir:
   400 00001451 F60553ECFFFFFF      <1>     test byte [arg1Flg], -1
   401 00001458 0F849CFBFFFF        <1>     jz badArgError
   402 0000145E F60549ECFFFFFF      <1>     test byte [arg2Flg], -1
   403 00001465 0F858FFBFFFF        <1>     jnz badArgError
   404                              <1>     ;We have exactly one argument
   405 0000146B 8A053CECFFFF        <1>     mov al, byte [arg1FCBret]
   406 00001471 3CFF                <1>     cmp al, -1 
   407 00001473 0F8478FBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   408 00001479 E87B0C0000          <1>     call buildCommandPath
   409 0000147E 7215                <1>     jc .badMake
   410 00001480 488D1598EEFFFF      <1>     lea rdx, searchSpec
   411 00001487 B800390000          <1>     mov eax, 3900h  ;MKDIR
   412 0000148C CD41                <1>     int 41h
   413 0000148E 7205                <1>     jc .badMake   ;Return if not carry
   414 00001490 B40D                <1>     mov ah, 0Dh
   415 00001492 CD41                <1>     int 41h ;Flush to disk
   416                              <1>     return
    19                              <2> %%_ret:
    20 00001494 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   417                              <1> .badMake:   ;Else, bad make
   418 00001495 488D158FF3FFFF      <1>     lea rdx, badMD
   419 0000149C B800090000          <1>     mov eax, 0900h
   420 000014A1 CD41                <1>     int 41h
   421                              <1>     return
    19                              <2> %%_ret:
    20 000014A3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   422                              <1> 
   423                              <1> rmdir:
   424 000014A4 F60500ECFFFFFF      <1>     test byte [arg1Flg], -1
   425 000014AB 0F8449FBFFFF        <1>     jz badArgError
   426 000014B1 F605F6EBFFFFFF      <1>     test byte [arg2Flg], -1
   427 000014B8 0F853CFBFFFF        <1>     jnz badArgError
   428                              <1>     ;We have exactly one argument
   429 000014BE 8A05E9EBFFFF        <1>     mov al, byte [arg1FCBret]
   430 000014C4 3CFF                <1>     cmp al, -1 
   431 000014C6 0F8425FBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   432 000014CC E8280C0000          <1>     call buildCommandPath
   433 000014D1 7215                <1>     jc .badRemove
   434 000014D3 488D1545EEFFFF      <1>     lea rdx, searchSpec
   435 000014DA B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   436 000014DF CD41                <1>     int 41h
   437 000014E1 7205                <1>     jc .badRemove   ;Return if not carry
   438 000014E3 B40D                <1>     mov ah, 0Dh
   439 000014E5 CD41                <1>     int 41h ;Flush to disk
   440                              <1>     return
    19                              <2> %%_ret:
    20 000014E7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   441                              <1> .badRemove:   ;Else, bad make
   442 000014E8 488D1559F3FFFF      <1>     lea rdx, badRD
   443 000014EF B800090000          <1>     mov eax, 0900h
   444 000014F4 CD41                <1>     int 41h
   445                              <1>     return
    19                              <2> %%_ret:
    20 000014F6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   446                              <1> 
   447                              <1> copy:
   448                              <1>     return
    19                              <2> %%_ret:
    20 000014F7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   449                              <1> erase:
   450                              <1>     return
    19                              <2> %%_ret:
    20 000014F8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   451                              <1> date:
   452 000014F9 488D154EF2FFFF      <1>     lea rdx, curDate
   453 00001500 B409                <1>     mov ah, 09h
   454 00001502 CD41                <1>     int 41h
   455 00001504 B42A                <1>     mov ah, 2Ah ;DOS get date
   456 00001506 CD41                <1>     int 41h
   457                              <1> 	;AL = day of the week (0=Sunday)
   458                              <1> 	;CX = year (1980-2099)
   459                              <1> 	;DH = month (1-12)
   460                              <1> 	;DL = day (1-31)
   461 00001508 66890DB4EFFFFF      <1>     mov word [td1], cx
   462 0000150F 8815B0EFFFFF        <1>     mov byte [td3], dl
   463 00001515 8835ABEFFFFF        <1>     mov byte [td4], dh
   464 0000151B 0FB6C0              <1>     movzx eax, al
   465 0000151E 89C3                <1>     mov ebx, eax
   466 00001520 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   467 00001522 01D8                <1>     add eax, ebx ;Make it 3 times 
   468 00001524 488D15FFF1FFFF      <1>     lea rdx, dayName
   469 0000152B 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   470 0000152F B903000000          <1>     mov ecx, 3  ;Print three chars
   471 00001534 BB01000000          <1>     mov ebx, 1  ;STDOUT
   472 00001539 B440                <1>     mov ah, 40h ;Write to handle
   473 0000153B CD41                <1>     int 41h
   474 0000153D B220                <1>     mov dl, " "
   475 0000153F B402                <1>     mov ah, 02h
   476 00001541 CD41                <1>     int 41h
   477                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   478                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   479                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   480 00001543 0FB70579EFFFFF      <1>     movzx eax, word [td1]   ;Get this word
   481 0000154A C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   482 0000154D 0FB61D72EFFFFF      <1>     movzx ebx, byte [td4]
   483 00001554 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   484 00001557 09D8                <1>     or eax, ebx ;Add this date to eax
   485 00001559 0FB61D65EFFFFF      <1>     movzx ebx, byte [td3]
   486 00001560 09D8                <1>     or eax, ebx
   487 00001562 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   488 00001567 E883070000          <1>     call printDate
   489                              <1> 
   490 0000156C 488D15ECF1FFFF      <1>     lea rdx, newDate
   491 00001573 B409                <1>     mov ah, 09h
   492 00001575 CD41                <1>     int 41h
   493 00001577 488D1500F2FFFF      <1>     lea rdx, ukDate
   494 0000157E 488D05ECF1FFFF      <1>     lea rax, usDate
   495 00001585 488D1DFFF1FFFF      <1>     lea rbx, jpDate
   496 0000158C 803D9BEAFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   497 00001593 480F47D3            <1>     cmova rdx, rbx
   498 00001597 480F42D0            <1>     cmovb rdx, rax
   499 0000159B B409                <1>     mov ah, 09h
   500 0000159D CD41                <1>     int 41h
   501                              <1> 
   502 0000159F 498D9080000000      <1>     lea rdx, qword [r8 + cmdLineCnt]
   503 000015A6 B40A                <1>     mov ah, 0Ah
   504 000015A8 CD41                <1>     int 41h
   505 000015AA 52                  <1>     push rdx
   506 000015AB 488D15BBEFFFFF      <1>     lea rdx, crlf
   507 000015B2 B409                <1>     mov ah, 09h
   508 000015B4 CD41                <1>     int 41h
   509 000015B6 5A                  <1>     pop rdx
   510 000015B7 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   511                              <1>     rete    ;Exit!
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 000015BB 7501                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 000015BD C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   512                              <1>     return
    19                              <2> %%_ret:
    20 000015BE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   513                              <1> 
   514                              <1> time:
   515 000015BF 488D15E1F1FFFF      <1>     lea rdx, curTime
   516 000015C6 B409                <1>     mov ah, 09h
   517 000015C8 CD41                <1>     int 41h
   518 000015CA B42C                <1>     mov ah, 2Ch ;DOS get time
   519 000015CC CD41                <1>     int 41h
   520                              <1>     ;CH = hour (0-23)
   521                              <1> 	;CL = minutes (0-59)
   522                              <1> 	;DH = seconds (0-59)
   523                              <1> 	;DL = hundredths (0-99)
   524 000015CE 880DEFEEFFFF        <1>     mov byte [td1], cl
   525 000015D4 882DEAEEFFFF        <1>     mov byte [td2], ch
   526 000015DA 8815E5EEFFFF        <1>     mov byte [td3], dl
   527 000015E0 8835E0EEFFFF        <1>     mov byte [td4], dh
   528 000015E6 0FB6C5              <1>     movzx eax, ch
   529 000015E9 E895080000          <1>     call printTime.printHours
   530                              <1> 
   531 000015EE 8A1547EAFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   532 000015F4 B402                <1>     mov ah, 02h
   533 000015F6 CD41                <1>     int 41h
   534                              <1> 
   535 000015F8 0FB605C4EEFFFF      <1>     movzx eax, byte [td1]   ;Minutes
   536 000015FF E86F080000          <1>     call printTime.printMinutesAlt
   537                              <1> 
   538 00001604 8A1531EAFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   539 0000160A B402                <1>     mov ah, 02h
   540 0000160C CD41                <1>     int 41h
   541                              <1> 
   542 0000160E 0FB605B1EEFFFF      <1>     movzx eax, byte [td4]   ;Seconds
   543 00001615 E859080000          <1>     call printTime.printMinutesAlt
   544                              <1> 
   545 0000161A B22E                <1>     mov dl, "."
   546 0000161C B402                <1>     mov ah, 02h
   547 0000161E CD41                <1>     int 41h
   548                              <1> 
   549 00001620 0FB6059EEEFFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   550 00001627 E847080000          <1>     call printTime.printMinutesAlt
   551                              <1> 
   552 0000162C 488D1585F1FFFF      <1>     lea rdx, newTime
   553 00001633 B409                <1>     mov ah, 09h
   554 00001635 CD41                <1>     int 41h
   555                              <1> 
   556 00001637 498D9080000000      <1>     lea rdx, qword [r8 + cmdLineCnt]
   557 0000163E B40A                <1>     mov ah, 0Ah
   558 00001640 CD41                <1>     int 41h
   559 00001642 52                  <1>     push rdx
   560 00001643 488D1523EFFFFF      <1>     lea rdx, crlf
   561 0000164A B409                <1>     mov ah, 09h
   562 0000164C CD41                <1>     int 41h
   563 0000164E 5A                  <1>     pop rdx
   564 0000164F 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   565                              <1>     rete    ;Exit!
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 00001653 7501                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 00001655 C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   566                              <1>     return
    19                              <2> %%_ret:
    20 00001656 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   567                              <1> ctty:
   568                              <1>     return
    19                              <2> %%_ret:
    20 00001657 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   569                              <1> cls:  
   570 00001658 B800440000          <1>     mov eax, 4400h  ;Get device info
   571 0000165D BB01000000          <1>     mov ebx, 1      ;for handle 1
   572 00001662 CD41                <1>     int 41h         ;in dx
   573 00001664 F7C280000000        <1>     test edx, devCharDev
   574 0000166A 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   575 0000166C F7C210000000        <1>     test edx, charDevFastOut
   576 00001672 743E                <1>     jz .doAnsi
   577                              <1>     ;Test if Int 49h uses Int 30h
   578                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   579                              <1>     ;Int 49h MUST be terminated with a IRETQ, within 1024 bytes
   580 00001674 B849350000          <1>     mov eax, 3549h  ;Get the vector for interrupt 49h
   581 00001679 CD41                <1>     int 41h
   582                              <1> .biosCheck:
   583 0000167B 66813BCD30          <1>     cmp word [rbx], 30CDh
   584 00001680 740C                <1>     je .biosConfirmed
   585 00001682 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   586 00001687 7429                <1>     je .doAnsi
   587 00001689 48FFC3              <1>     inc rbx
   588 0000168C EBED                <1>     jmp short .biosCheck
   589                              <1> .biosConfirmed:
   590                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   591 0000168E B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   592 00001690 31DB                <1>     xor ebx, ebx
   593 00001692 CD30                <1>     int 30h
   594 00001694 B40F                <1>     mov ah, 0Fh ;Get screen mode
   595 00001696 CD30                <1>     int 30h
   596 00001698 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   597 0000169B FECA                <1>     dec dl
   598 0000169D B619                <1>     mov dh, 25  ;Number of rows is standard
   599 0000169F 31C0                <1>     xor eax, eax
   600 000016A1 89C1                <1>     mov ecx, eax
   601 000016A3 B707                <1>     mov bh, 7   ;Screen attributes
   602 000016A5 B406                <1>     mov ah, 6   ;Scroll
   603 000016A7 CD30                <1>     int 30h
   604 000016A9 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   605 000016AB B700                <1>     mov bh, 0   ;Page 0
   606 000016AD B402                <1>     mov ah, 2
   607 000016AF CD30                <1>     int 30h
   608                              <1>     return
    19                              <2> %%_ret:
    20 000016B1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   609                              <1> .doAnsi:
   610                              <1> ;If an ANSI driver is not installed, this will simply insert blank lines
   611                              <1> ;4 chars in the ansi routine
   612                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   613                              <1> ; understand ANSI codes
   614 000016B2 488D3538F4FFFF      <1>     lea rsi, ansiCls
   615 000016B9 B904000000          <1>     mov ecx, 4
   616 000016BE B406                <1>     mov ah, 06h ;Raw char output
   617                              <1> .ansiLp:
   618 000016C0 AC                  <1>     lodsb   ;Get the char in 
   619 000016C1 88C2                <1>     mov dl, al
   620 000016C3 CD41                <1>     int 41h
   621 000016C5 FFC9                <1>     dec ecx
   622 000016C7 75F7                <1>     jnz .ansiLp
   623                              <1>     return
    19                              <2> %%_ret:
    20 000016C9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   624                              <1> 
   625                              <1> break:
   626 000016CA F605DAE9FFFFFF      <1>     test byte [arg1Flg], -1
   627 000016D1 752D                <1>     jnz .argumentProvided
   628                              <1>     ;Here we just get the status of break
   629 000016D3 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   630 000016D8 CD41                <1>     int 41h
   631 000016DA 88D3                <1>     mov bl, dl
   632 000016DC 488D1576F2FFFF      <1>     lea rdx, breakIs
   633 000016E3 B409                <1>     mov ah, 09h
   634 000016E5 CD41                <1>     int 41h
   635 000016E7 488D1566F2FFFF      <1>     lea rdx, onMes
   636 000016EE 488D0D59F2FFFF      <1>     lea rcx, offMes
   637 000016F5 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   638 000016F7 480F44D1            <1>     cmovz rdx, rcx
   639 000016FB B409                <1>     mov ah, 09h
   640 000016FD CD41                <1>     int 41h
   641                              <1>     return
    19                              <2> %%_ret:
    20 000016FF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   642                              <1> .argumentProvided:
   643 00001700 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   644 00001704 AD                  <1>     lodsd   ;Read the word
   645 00001705 89C3                <1>     mov ebx, eax
   646 00001707 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   647 0000170C C1EB10              <1>     shr ebx, 10h     ;Get high word low
   648 0000170F 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   649 00001714 7416                <1>     je .maybeOn
   650 00001716 663D4F46            <1>     cmp ax, "OF"
   651 0000171A 7523                <1>     jne .badOnOff
   652 0000171C 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   653 00001721 6681FB4620          <1>     cmp bx, "F "
   654 00001726 7517                <1>     jne .badOnOff
   655                              <1>     ;Set off
   656 00001728 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   657 0000172A EB0B                <1>     jmp short .setBreak
   658                              <1> .maybeOn:
   659 0000172C 663D4F4E            <1>     cmp ax, "ON"
   660 00001730 750D                <1>     jne .badOnOff
   661                              <1>     ;Set on
   662 00001732 BA01000000          <1>     mov edx, 1
   663                              <1> .setBreak:
   664 00001737 B801330000          <1>     mov eax, 3301h  ;Set break
   665 0000173C CD41                <1>     int 41h
   666                              <1>     return
    19                              <2> %%_ret:
    20 0000173E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   667                              <1> .badOnOff:
   668 0000173F 488D15BBF3FFFF      <1>     lea rdx, badOnOff
   669 00001746 B409                <1>     mov ah, 09h
   670 00001748 CD41                <1>     int 41h
   671                              <1>     return
    19                              <2> %%_ret:
    20 0000174A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   672                              <1> 
   673                              <1> verify:
   674 0000174B F60559E9FFFFFF      <1>     test byte [arg1Flg], -1
   675 00001752 752D                <1>     jnz .argumentProvided
   676                              <1>     ;Here we just get the status of break
   677 00001754 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
   678 00001759 CD41                <1>     int 41h
   679 0000175B 88C3                <1>     mov bl, al
   680 0000175D 488D15FFF1FFFF      <1>     lea rdx, verifyIs
   681 00001764 B409                <1>     mov ah, 09h
   682 00001766 CD41                <1>     int 41h
   683 00001768 488D15E5F1FFFF      <1>     lea rdx, onMes
   684 0000176F 488D0DD8F1FFFF      <1>     lea rcx, offMes
   685 00001776 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   686 00001778 480F44D1            <1>     cmovz rdx, rcx
   687 0000177C B409                <1>     mov ah, 09h
   688 0000177E CD41                <1>     int 41h
   689                              <1>     return
    19                              <2> %%_ret:
    20 00001780 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   690                              <1> .argumentProvided:
   691 00001781 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   692 00001785 AD                  <1>     lodsd   ;Read the word
   693 00001786 89C3                <1>     mov ebx, eax
   694 00001788 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   695 0000178D C1EB10              <1>     shr ebx, 10h     ;Get high word low
   696 00001790 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   697 00001795 7416                <1>     je .maybeOn
   698 00001797 663D4F46            <1>     cmp ax, "OF"
   699 0000179B 751F                <1>     jne .badOnOff
   700 0000179D 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   701 000017A2 6681FB4620          <1>     cmp bx, "F "
   702 000017A7 7513                <1>     jne .badOnOff
   703                              <1>     ;Set off
   704 000017A9 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
   705 000017AB EB0A                <1>     jmp short .setVerify
   706                              <1> .maybeOn:
   707 000017AD 663D4F4E            <1>     cmp ax, "ON"
   708 000017B1 7509                <1>     jne .badOnOff
   709                              <1>     ;Set on
   710 000017B3 31C0                <1>     xor eax, eax
   711 000017B5 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
   712                              <1> .setVerify:
   713 000017B7 B42E                <1>     mov ah, 2Eh  ;Set Verify
   714 000017B9 CD41                <1>     int 41h
   715                              <1>     return
    19                              <2> %%_ret:
    20 000017BB C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   716                              <1> .badOnOff:
   717 000017BC 488D153EF3FFFF      <1>     lea rdx, badOnOff
   718 000017C3 B409                <1>     mov ah, 09h
   719 000017C5 CD41                <1>     int 41h
   720                              <1>     return
    19                              <2> %%_ret:
    20 000017C7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   721                              <1> 
   722                              <1> rename:
   723                              <1>     return
    19                              <2> %%_ret:
    20 000017C8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   724                              <1> truename:
   725 000017C9 F605DBE8FFFFFF      <1>     test byte [arg1Flg], -1
   726 000017D0 0F8424F8FFFF        <1>     jz badArgError
   727 000017D6 E81E090000          <1>     call buildCommandPath
   728                              <1>     ;Explicitly call Truename if we remove truename from this function
   729 000017DB 488D3D3DEBFFFF      <1>     lea rdi, searchSpec
   730 000017E2 E8B7070000          <1>     call strlen
   731 000017E7 FFC9                <1>     dec ecx ;Don't print terminating null
   732 000017E9 488D152FEBFFFF      <1>     lea rdx, searchSpec
   733 000017F0 BB01000000          <1>     mov ebx, 01
   734 000017F5 B440                <1>     mov ah, 40h
   735 000017F7 CD41                <1>     int 41h
   736 000017F9 E8DB040000          <1>     call printCRLF
   737                              <1>     return
    19                              <2> %%_ret:
    20 000017FE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   738                              <1> 
   739                              <1> volume:
   740 000017FF 488D3588E9FFFF      <1>     lea rsi, cmdBuffer + 2  ;Get the command buffer
   741 00001806 E80B080000          <1>     call skipSpaces
   742 0000180B 4881C603000000      <1>     add rsi, 3  ;Go past the VOL command
   743 00001812 E8FF070000          <1>     call skipSpaces
   744 00001817 AC                  <1>     lodsb   ;Get the first char, and point rsi to next char
   745 00001818 E8E8070000          <1>     call isALEndOfCommand   ;If this char is end of command, use current drive
   746 0000181D 7507                <1>     jnz .checkDriveLetter
   747 0000181F E875070000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
   748 00001824 EB35                <1>     jmp short .dirEP
   749                              <1> .checkDriveLetter:
   750 00001826 803E3A              <1>     cmp byte [rsi], ":" ;If this is not a :, fail
   751 00001829 0F85C2F7FFFF        <1>     jne badDriveError
   752 0000182F 4889F7              <1>     mov rdi, rsi    ;Save start of drive spec in rsi
   753 00001832 48FFC6              <1>     inc rsi  ;Go past the X: spec
   754 00001835 E8DC070000          <1>     call skipSpaces
   755 0000183A AC                  <1>     lodsb   ;Get the non-space char in al
   756 0000183B E8C5070000          <1>     call isALEndOfCommand   ;The next non-space char must be terminator
   757 00001840 0F85ABF7FFFF        <1>     jne badDriveError
   758                              <1> ;This argument should've been parsed into FCB1 so use that result
   759 00001846 8A0561E8FFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
   760 0000184C A8FF                <1>     test al, -1
   761 0000184E 0F859DF7FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
   762 00001854 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
   763 00001859 FFC8                <1>     dec eax ;Convert to 0 based number
   764                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al
   765 0000185B 0541000000          <1>     add eax, "A" ;Get ASCII representation of 0 based number
   766 00001860 880556ECFFFF        <1>     mov byte [volPathBuf], al   ;Store ASCII letter here
   767 00001866 488D1554E8FFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   768 0000186D B41A                <1>     mov ah, 1Ah
   769 0000186F CD41                <1>     int 41h
   770 00001871 488D1544ECFFFF      <1>     lea rdx, volPathBuf
   771 00001878 66B90800            <1>     mov cx, dirVolumeID
   772 0000187C B44E                <1>     mov ah, 4Eh ;Find first
   773 0000187E CD41                <1>     int 41h
   774 00001880 7221                <1>     jc .skipVolLbl
   775 00001882 488D3556E8FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   776 00001889 488D3D1FECFFFF      <1>     lea rdi, volLblSpc
   777 00001890 B90B000000          <1>     mov ecx, 11 ;Get the 11 chars of the volume label
   778                              <1> .dirLblCopy:
   779 00001895 AC                  <1>     lodsb   ;Get the first char
   780 00001896 3C00                <1>     cmp al, 0
   781 00001898 7409                <1>     je .skipVolLbl  ;Jump with CF=NC
   782 0000189A 3C2E                <1>     cmp al, "."
   783 0000189C 7401                <1>     je .dirLblSkipStore
   784 0000189E AA                  <1>     stosb
   785                              <1> .dirLblSkipStore:
   786 0000189F FFC9                <1>     dec ecx
   787 000018A1 75F2                <1>     jnz .dirLblCopy
   788                              <1>     ;Fallthru with CF=NC
   789                              <1> .skipVolLbl:
   790                              <1> ;Print volume label information now
   791                              <1> ;Propagates the CF if CF was set    
   792 000018A3 9C                  <1>     pushfq
   793 000018A4 488D15C2ECFFFF      <1>     lea rdx, crlf
   794 000018AB B409                <1>     mov ah, 09h
   795 000018AD CD41                <1>     int 41h
   796 000018AF 488D153CEFFFFF      <1>     lea rdx, volMes
   797 000018B6 B409                <1>     mov ah, 09h
   798 000018B8 CD41                <1>     int 41h
   799 000018BA 8A15FCEBFFFF        <1>     mov dl, byte [volPathBuf]   ;Print the drive letter out
   800 000018C0 B402                <1>     mov ah, 02h
   801 000018C2 CD41                <1>     int 41h
   802 000018C4 9D                  <1>     popfq
   803 000018C5 7317                <1>     jnc .volIDOk
   804 000018C7 488D153BEFFFFF      <1>     lea rdx, volNo
   805 000018CE B409                <1>     mov ah, 09h
   806 000018D0 CD41                <1>     int 41h
   807 000018D2 488D1594ECFFFF      <1>     lea rdx, crlf
   808 000018D9 B409                <1>     mov ah, 09h
   809 000018DB CD41                <1>     int 41h
   810                              <1>     return
    19                              <2> %%_ret:
    20 000018DD C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   811                              <1> .volIDOk:
   812 000018DE 488D151FEFFFFF      <1>     lea rdx, volOk
   813 000018E5 B409                <1>     mov ah, 09h
   814 000018E7 CD41                <1>     int 41h
   815 000018E9 488D3DBFEBFFFF      <1>     lea rdi, volLblSpc
   816 000018F0 E8A9060000          <1>     call strlen
   817 000018F5 FFC9                <1>     dec ecx
   818 000018F7 C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   819 000018FB 488D15ADEBFFFF      <1>     lea rdx, volLblSpc
   820 00001902 B409                <1>     mov ah, 09h
   821 00001904 CD41                <1>     int 41h
   822 00001906 488D1560ECFFFF      <1>     lea rdx, crlf
   823 0000190D B409                <1>     mov ah, 09h
   824 0000190F CD41                <1>     int 41h
   825                              <1>     return
    19                              <2> %%_ret:
    20 00001911 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   826                              <1> 
   827                              <1> version:
   828 00001912 488D1554ECFFFF      <1>     lea rdx, crlf
   829 00001919 B409                <1>     mov ah, 09h
   830 0000191B CD41                <1>     int 41h
   831 0000191D 488D15BCEEFFFF      <1>     lea rdx, dosVer
   832 00001924 B409                <1>     mov ah, 09h
   833 00001926 CD41                <1>     int 41h
   834 00001928 E80C000000          <1>     call .printVersionNumber
   835 0000192D 488D1539ECFFFF      <1>     lea rdx, crlf
   836 00001934 B409                <1>     mov ah, 09h
   837 00001936 CD41                <1>     int 41h
   838                              <1>     return
    19                              <2> %%_ret:
    20 00001938 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   839                              <1> .printVersionNumber:
   840 00001939 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
   841 0000193B CD41                <1>     int 41h
   842 0000193D 50                  <1>     push rax
   843 0000193E 0FB6C0              <1>     movzx eax, al
   844 00001941 E881080000          <1>     call printDecimalWord
   845 00001946 B22E                <1>     mov dl, "."
   846 00001948 B402                <1>     mov ah, 02h
   847 0000194A CD41                <1>     int 41h
   848 0000194C 58                  <1>     pop rax
   849 0000194D 0FB6C4              <1>     movzx eax, ah
   850 00001950 E872080000          <1>     call printDecimalWord
   851                              <1>     return
    19                              <2> %%_ret:
    20 00001955 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   852                              <1> 
   853                              <1> 
   854                              <1> memory:
   855 00001956 488B1DBAE6FFFF      <1>     mov rbx, qword [sysVars]
   856 0000195D 4885DB              <1>     test rbx, rbx
   857 00001960 7510                <1>     jnz .sysvarsOK
   858 00001962 488D1529F1FFFF      <1>     lea rdx, memBad0
   859 00001969 B409                <1>     mov ah, 09h
   860 0000196B CD41                <1>     int 41h
   861 0000196D E9F8080000          <1>     jmp freezePC.altEP
   862                              <1> .sysvarsOK:
   863                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
   864                              <1>     ; and rcx to store Application memory
   865 00001972 31F6                <1>     xor esi, esi
   866 00001974 31FF                <1>     xor edi, edi
   867 00001976 31ED                <1>     xor ebp, ebp
   868 00001978 31C9                <1>     xor ecx, ecx
   869 0000197A 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
   870 0000197E 488B1B              <1>     mov rbx, qword [rbx]
   871                              <1> .memLp:
   872 00001981 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
   873 00001984 7409                <1>     je .validMCB
   874 00001986 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
   875 00001989 0F8501010000        <1>     jne .badMCBFound
   876                              <1> .validMCB:
   877 0000198F 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
   878 00001992 48C1E004            <1>     shl rax, 4  ;Convert to bytes
   879 00001996 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
   880 0000199E 7505                <1>     jne .notDOS
   881 000019A0 4801C6              <1>     add rsi, rax    ;Add to DOS count
   882 000019A3 EB21                <1>     jmp short .gotoNext
   883                              <1> .notDOS:
   884 000019A5 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
   885 000019AD 7505                <1>     jne .notFree
   886 000019AF 4801C7              <1>     add rdi, rax    ;Add to Free space count
   887 000019B2 EB12                <1>     jmp short .gotoNext
   888                              <1> .notFree:
   889 000019B4 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
   890 000019BC 7505                <1>     jne .notHole
   891 000019BE 4801C5              <1>     add rbp, rax    ;Add to Hole count
   892 000019C1 EB03                <1>     jmp short .gotoNext
   893                              <1> .notHole:
   894 000019C3 4801C1              <1>     add rcx, rax    ;Add to Application count
   895                              <1> .gotoNext:
   896 000019C6 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
   897 000019C9 7407                <1>     je .endOfWalk
   898 000019CB 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
   899 000019D0 EBAF                <1>     jmp short .memLp
   900                              <1> .endOfWalk:
   901                              <1>     
   902 000019D2 488D151AF0FFFF      <1>     lea rdx, memDOS
   903 000019D9 B409                <1>     mov ah, 09h
   904 000019DB CD41                <1>     int 41h
   905 000019DD 4889F0              <1>     mov rax, rsi
   906 000019E0 E89D000000          <1>     call .mcbPrintAmount
   907 000019E5 488D159FF0FFFF      <1>     lea rdx, memByte
   908 000019EC B409                <1>     mov ah, 09h
   909 000019EE CD41                <1>     int 41h
   910                              <1> 
   911 000019F0 4885ED              <1>     test rbp, rbp
   912 000019F3 741E                <1>     jz .skipHole
   913 000019F5 488D1543F0FFFF      <1>     lea rdx, memHole
   914 000019FC B409                <1>     mov ah, 09h
   915 000019FE CD41                <1>     int 41h
   916 00001A00 4889E8              <1>     mov rax, rbp
   917 00001A03 E87A000000          <1>     call .mcbPrintAmount
   918 00001A08 488D157CF0FFFF      <1>     lea rdx, memByte
   919 00001A0F B409                <1>     mov ah, 09h
   920 00001A11 CD41                <1>     int 41h
   921                              <1> .skipHole:
   922                              <1> 
   923 00001A13 488D15FFEFFFFF      <1>     lea rdx, memApp
   924 00001A1A B409                <1>     mov ah, 09h
   925 00001A1C CD41                <1>     int 41h
   926 00001A1E 4889C8              <1>     mov rax, rcx
   927 00001A21 E85C000000          <1>     call .mcbPrintAmount
   928 00001A26 488D155EF0FFFF      <1>     lea rdx, memByte
   929 00001A2D B409                <1>     mov ah, 09h
   930 00001A2F CD41                <1>     int 41h
   931                              <1> 
   932 00001A31 488D152DF0FFFF      <1>     lea rdx, memFree
   933 00001A38 B409                <1>     mov ah, 09h
   934 00001A3A CD41                <1>     int 41h
   935 00001A3C 4889F8              <1>     mov rax, rdi
   936 00001A3F E83E000000          <1>     call .mcbPrintAmount
   937 00001A44 488D1540F0FFFF      <1>     lea rdx, memByte
   938 00001A4B B409                <1>     mov ah, 09h
   939 00001A4D CD41                <1>     int 41h
   940                              <1> 
   941 00001A4F 488D1577EFFFFF      <1>     lea rdx, memSys
   942 00001A56 B409                <1>     mov ah, 09h
   943 00001A58 CD41                <1>     int 41h
   944 00001A5A 4889F0              <1>     mov rax, rsi
   945 00001A5D 4801F8              <1>     add rax, rdi
   946 00001A60 4801C8              <1>     add rax, rcx
   947 00001A63 4801E8              <1>     add rax, rbp
   948 00001A66 E817000000          <1>     call .mcbPrintAmount
   949 00001A6B 488D1519F0FFFF      <1>     lea rdx, memByte
   950 00001A72 B409                <1>     mov ah, 09h
   951 00001A74 CD41                <1>     int 41h
   952                              <1> 
   953 00001A76 488D15F0EAFFFF      <1>     lea rdx, crlf
   954 00001A7D B409                <1>     mov ah, 09h
   955 00001A7F CD41                <1>     int 41h
   956                              <1>     return
    19                              <2> %%_ret:
    20 00001A81 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   957                              <1> 
   958                              <1> .mcbPrintAmount:
   959 00001A82 51                  <1>     push rcx
   960 00001A83 56                  <1>     push rsi
   961 00001A84 57                  <1>     push rdi
   962 00001A85 55                  <1>     push rbp
   963 00001A86 E83C070000          <1>     call printDecimalWord
   964 00001A8B 5D                  <1>     pop rbp
   965 00001A8C 5F                  <1>     pop rdi
   966 00001A8D 5E                  <1>     pop rsi
   967 00001A8E 59                  <1>     pop rcx
   968                              <1>     return
    19                              <2> %%_ret:
    20 00001A8F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   969                              <1> .badMCBFound:
   970 00001A90 488D153BF0FFFF      <1>     lea rdx, memBad2
   971 00001A97 B409                <1>     mov ah, 09h
   972 00001A99 CD41                <1>     int 41h
   973 00001A9B E9CA070000          <1>     jmp freezePC.altEP
   974                              <1> 
   975                              <1> type:
   976 00001AA0 66C7051EEAFFFFFFFF  <1>     mov word [typeHdl], -1  ;Reset the internal var
   977 00001AA9 F605FBE5FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
   978 00001AB0 0F8444F5FFFF        <1>     jz badArgError
   979 00001AB6 F605F1E5FFFFFF      <1>     test byte [arg2Flg], -1
   980 00001ABD 0F8537F5FFFF        <1>     jnz badArgError         ;If this set, error
   981                              <1>     breakpoint
    79 00001AC3 6687DB              <2> xchg bx, bx
   982 00001AC6 488D35BFE6FFFF      <1>     lea rsi, cmdBuffer
   983 00001ACD 0FB605D8E5FFFF      <1>     movzx eax, byte [arg1Off]
   984 00001AD4 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
   985 00001AD7 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
   986 00001ADB 750F                <1>     jne .noDrive
   987 00001ADD 0FB605C9E5FFFF      <1>     movzx eax, byte [arg1FCBret]
   988 00001AE4 3CFF                <1>     cmp al, -1
   989 00001AE6 0F8405F5FFFF        <1>     je badDriveError
   990                              <1> .noDrive:
   991                              <1>     ;Now we open the provided file
   992 00001AEC 488D3D2CE8FFFF      <1>     lea rdi, searchSpec
   993                              <1> .copyPath:
   994 00001AF3 AC                  <1>     lodsb
   995 00001AF4 E80C050000          <1>     call isALEndOfCommand
   996 00001AF9 740A                <1>     jz .finishCopy
   997 00001AFB E8E2040000          <1>     call isALterminator
   998 00001B00 7403                <1>     jz .finishCopy
   999 00001B02 AA                  <1>     stosb
  1000 00001B03 EBEE                <1>     jmp short .copyPath
  1001                              <1> .finishCopy:
  1002 00001B05 31C0                <1>     xor eax, eax
  1003 00001B07 AA                  <1>     stosb
  1004 00001B08 488D1510E8FFFF      <1>     lea rdx, searchSpec
  1005 00001B0F B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1006 00001B14 CD41                <1>     int 41h
  1007 00001B16 0F82E7F4FFFF        <1>     jc badFileError
  1008 00001B1C 66891DA4E9FFFF      <1>     mov word [typeHdl], bx  ;Save the handle here
  1009                              <1> 
  1010 00001B23 488D159FE9FFFF      <1>     lea rdx, typeBuffer
  1011 00001B2A B901000000          <1>     mov ecx, 1
  1012                              <1> .lp:
  1013 00001B2F 0FB71D91E9FFFF      <1>     movzx ebx, word [typeHdl]  ;Get the handle here
  1014 00001B36 B43F                <1>     mov ah, 3Fh ;Read handle
  1015 00001B38 CD41                <1>     int 41h
  1016 00001B3A 803D88E9FFFF1A      <1>     cmp byte [typeBuffer], EOF
  1017 00001B41 740B                <1>     je .exit
  1018 00001B43 BB01000000          <1>     mov ebx, 1  ;STDOUT
  1019 00001B48 B440                <1>     mov ah, 40h
  1020 00001B4A CD41                <1>     int 41h
  1021 00001B4C EBE1                <1>     jmp short .lp
  1022                              <1> .exit:
  1023 00001B4E 0FB71D72E9FFFF      <1>     movzx ebx, word [typeHdl]
  1024 00001B55 B43E                <1>     mov ah, 3Eh ;Close handle
  1025 00001B57 CD41                <1>     int 41h
  1026                              <1>     return
    19                              <2> %%_ret:
    20 00001B59 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1027                              <1> 
  1028                              <1> exit:
  1029 00001B5A F605C4E4FFFFFF      <1>     test byte [permaSwitch], -1
  1030                              <1>     retnz   ;Return if the flag is set
    51                              <2> cret nz
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001B61 75(59)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
  1031 00001B63 488B05A5E4FFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1032 00001B6A 483DFFFFFFFF        <1>     cmp rax, -1
  1033                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001B70 74(59)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
  1034 00001B72 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1035                              <1> 
  1036 00001B76 488B15A9E4FFFF      <1>     mov rdx, qword [parentInt42]
  1037 00001B7D 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
  1038 00001B81 B842250000          <1>     mov eax, 2542h
  1039 00001B86 CD41                <1>     int 41h
  1040                              <1> 
  1041 00001B88 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1042 00001B8D CD41                <1>     int 41h
  1043                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    19                              <2> %%_ret:
    20 00001B8F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1044                              <1> 
  1045                              <1> launchChild:
  1046                              <1> ;We run EXEC on this and the child task will return via applicationReturn
  1047                              <1> ;Here we must search the CWD or all path componants before failing
  1048                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
  1049 00001B90 488D152AE5FFFF      <1>     lea rdx, cmdFFBlock
  1050 00001B97 B41A                <1>     mov ah, 1Ah     ;Set DTA for task
  1051 00001B99 CD41                <1>     int 41h
  1052                              <1> 
  1053 00001B9B 8B0519E5FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
  1054 00001BA1 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1055 00001BA6 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1056 00001BAB 3D20202020          <1>     cmp eax, "    " ;Only if we have four spaces do we proceed here
  1057 00001BB0 741D                <1>     je .noExt
  1058 00001BB2 E83AF3FFFF          <1>     call checkExtensionExec ;ZF=ZE => Executable
  1059 00001BB7 0F8510010000        <1>     jnz .dfltErrExit
  1060                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1061 00001BBD 0F820A010000        <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
  1062                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1063                              <1>     ;So it is a com or exe that we are searching for for now
  1064 00001BC3 488D3D42E6FFFF      <1>     lea rdi, cmdPathSpec
  1065 00001BCA 4889FA              <1>     mov rdx, rdi
  1066 00001BCD EB24                <1>     jmp short .search
  1067                              <1> .noExt:
  1068                              <1>     ;If the filename has no extension, append a .*
  1069                              <1>     ;Use bl as flags. bl[0] => COM found, bl[1] => EXE found, bl[2] => BAT found
  1070 00001BCF 31DB                <1>     xor ebx, ebx
  1071 00001BD1 488D3D34E6FFFF      <1>     lea rdi, cmdPathSpec
  1072 00001BD8 4889FA              <1>     mov rdx, rdi
  1073 00001BDB 31C0                <1>     xor eax, eax
  1074 00001BDD B9FFFFFFFF          <1>     mov ecx, -1
  1075 00001BE2 F2AE                <1>     repne scasb
  1076 00001BE4 48FFCF              <1>     dec rdi ;Point to the terminating null
  1077 00001BE7 4889FD              <1>     mov rbp, rdi    ;Temporarily store the ptr to the . in rbp
  1078 00001BEA 66B82E2A            <1>     mov ax, ".*"
  1079 00001BEE 66AB                <1>     stosw
  1080 00001BF0 30C0                <1>     xor al, al  ;Store terminating null
  1081 00001BF2 AA                  <1>     stosb
  1082                              <1> .search:
  1083 00001BF3 B906000000          <1>     mov ecx, dirIncFiles
  1084 00001BF8 B44E                <1>     mov ah, 4Eh ;Find First File
  1085 00001BFA CD41                <1>     int 41h
  1086 00001BFC 0F82CB000000        <1>     jc .dfltErrExit
  1087 00001C02 E879000000          <1>     call .noExtCheckExt
  1088                              <1> .moreSearch:
  1089 00001C07 B44F                <1>     mov ah, 4Fh
  1090 00001C09 CD41                <1>     int 41h
  1091 00001C0B 7207                <1>     jc .noMoreFiles
  1092 00001C0D E86E000000          <1>     call .noExtCheckExt
  1093 00001C12 EBF3                <1>     jmp short .moreSearch
  1094                              <1> .noMoreFiles:
  1095 00001C14 85DB                <1>     test ebx, ebx
  1096 00001C16 0F84B1000000        <1>     jz .dfltErrExit
  1097                              <1> ;So we have a valid executable
  1098 00001C1C 4889EF              <1>     mov rdi, rbp    ;Get back ptr to the .*,0
  1099 00001C1F F7C301000000        <1>     test ebx, 1
  1100 00001C25 7407                <1>     jz .launchexebat
  1101 00001C27 B82E434F4D          <1>     mov eax, ".COM"
  1102 00001C2C EB14                <1>     jmp short .launch
  1103                              <1> .launchexebat:
  1104 00001C2E F7C302000000        <1>     test ebx, 2
  1105 00001C34 7407                <1>     jz .launchbat
  1106 00001C36 B82E455845          <1>     mov eax, ".EXE"
  1107 00001C3B EB05                <1>     jmp short .launch
  1108                              <1> .launchbat:
  1109                              <1> ;Temporary For BAT
  1110 00001C3D E98B000000          <1>     jmp .dfltErrExit
  1111                              <1> .launch:
  1112 00001C42 AB                  <1>     stosd
  1113 00001C43 30C0                <1>     xor al, al
  1114 00001C45 AA                  <1>     stosb   ;Store the terminating null
  1115 00001C46 488D1D9FE4FFFF      <1>     lea rbx, launchBlock
  1116 00001C4D 31C0                <1>     xor eax, eax
  1117 00001C4F 488903              <1>     mov qword [rbx + execProg.pEnv], rax    ;Tell DOS to copy my current Env
  1118 00001C52 498D8080000000      <1>     lea rax, qword [r8 + cmdLineCnt]
  1119 00001C59 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1120 00001C5D 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1121 00001C61 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1122 00001C65 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1123 00001C69 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1124 00001C6D 488D1598E5FFFF      <1>     lea rdx, cmdPathSpec
  1125 00001C74 B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1126 00001C79 CD41                <1>     int 41h
  1127 00001C7B E94D000000          <1>     jmp .dfltErrExit    ;If something goes wrong, error out
  1128                              <1> .noExtCheckExt:
  1129                              <1>     ;mov eax, dword [cmdFFBlock + ffBlock.asciizName + filename.fExt]
  1130 00001C80 488D3558E4FFFF      <1>     lea rsi, dword [cmdFFBlock + ffBlock.asciizName]
  1131 00001C87 488D3DCDE5FFFF      <1>     lea rdi, fcbCmdSpec
  1132 00001C8E E8DC030000          <1>     call asciiFilenameToFCB
  1133 00001C93 8B05CAE5FFFF        <1>     mov eax, dword [fcbCmdSpec + filename.fExt]
  1134 00001C99 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1135 00001C9E 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1136 00001CA3 3D434F4D20          <1>     cmp eax, "COM "
  1137 00001CA8 7507                <1>     jne .neceexe
  1138 00001CAA 81CB01000000        <1>     or ebx, 1
  1139                              <1>     return
    19                              <2> %%_ret:
    20 00001CB0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1140                              <1> .neceexe:
  1141 00001CB1 3D45584520          <1>     cmp eax, "EXE "
  1142 00001CB6 7507                <1>     jne .necebat
  1143 00001CB8 81CB02000000        <1>     or ebx, 2
  1144                              <1>     return
    19                              <2> %%_ret:
    20 00001CBE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1145                              <1> .necebat:
  1146 00001CBF 3D42415420          <1>     cmp eax, "BAT "
  1147                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001CC4 75(BE)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
  1148 00001CC6 81CB04000000        <1>     or ebx, 4
  1149                              <1>     return
    19                              <2> %%_ret:
    20 00001CCC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1150                              <1> 
  1151                              <1> .dfltErrExit:
  1152 00001CCD 488D15F6E8FFFF      <1>     lea rdx, badCmd
  1153 00001CD4 B409                <1>     mov ah, 09h
  1154 00001CD6 CD41                <1>     int 41h
  1155                              <1>     return
    19                              <2> %%_ret:
    20 00001CD8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    16                                  %include "./Source/Utils/COMMAND/Source/cmdUtils.asm"
    17                              <1> ;Misc functions and subroutines for command.com
    18                              <1> 
    19                              <1> printCRLF:
    20 00001CD9 488D158DE8FFFF      <1>     lea rdx, crlf
    21 00001CE0 BB02000000          <1>     mov ebx, 2
    22 00001CE5 B440                <1>     mov ah, 40h ;Print a new line
    23 00001CE7 B902000000          <1>     mov ecx, 2  ;Two chars to write
    24 00001CEC CD41                <1>     int 41h
    25                              <1>     return
    19                              <2> %%_ret:
    20 00001CEE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    26                              <1> printDate:
    27                              <1> ;Input: eax = Packed Date
    28                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
    29                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
    30                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
    31                              <1> ;       ebx = 0 => Print two digit year
    32                              <1> ;       ebx = 1 => Print four digit year
    33 00001CEF 53                  <1>     push rbx
    34 00001CF0 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    35 00001CF2 803D35E3FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    36 00001CF9 7240                <1>     jb .usDate
    37 00001CFB 777C                <1>     ja .jpnDate
    38                              <1> ;European: DD/MM/YY
    39 00001CFD 251F000000          <1>     and eax, 1Fh    ;Save day bits
    40 00001D02 E8B0000000          <1>     call .printFirst
    41 00001D07 8A152CE3FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    42 00001D0D B402                <1>     mov ah, 02h
    43 00001D0F CD41                <1>     int 41h
    44                              <1> 
    45 00001D11 89C8                <1>     mov eax, ecx
    46 00001D13 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    47 00001D18 C1E805              <1>     shr eax, 5
    48 00001D1B E8B3000000          <1>     call .printSecond
    49                              <1> 
    50 00001D20 8A1513E3FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    51 00001D26 B402                <1>     mov ah, 02h
    52 00001D28 CD41                <1>     int 41h
    53                              <1> 
    54 00001D2A 89C8                <1>     mov eax, ecx
    55 00001D2C 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    56 00001D31 C1E809              <1>     shr eax, 9
    57 00001D34 5B                  <1>     pop rbx ;Get the year signature back
    58 00001D35 E8A9000000          <1>     call .printYear
    59                              <1>     return
    19                              <2> %%_ret:
    20 00001D3A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    60                              <1> .usDate:
    61                              <1> ;US: MM/DD/YY
    62 00001D3B 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    63 00001D40 C1E805              <1>     shr eax, 5
    64 00001D43 E86F000000          <1>     call .printFirst
    65                              <1> 
    66 00001D48 8A15EBE2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    67 00001D4E B402                <1>     mov ah, 02h
    68 00001D50 CD41                <1>     int 41h
    69                              <1> 
    70 00001D52 89C8                <1>     mov eax, ecx
    71 00001D54 251F000000          <1>     and eax, 1Fh    ;Save day bits
    72 00001D59 E875000000          <1>     call .printSecond
    73                              <1> 
    74 00001D5E 8A15D5E2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    75 00001D64 B402                <1>     mov ah, 02h
    76 00001D66 CD41                <1>     int 41h
    77                              <1> 
    78 00001D68 89C8                <1>     mov eax, ecx
    79 00001D6A 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    80 00001D6F C1E809              <1>     shr eax, 9
    81 00001D72 5B                  <1>     pop rbx ;Get the year signature back
    82 00001D73 E86B000000          <1>     call .printYear
    83                              <1>     return
    19                              <2> %%_ret:
    20 00001D78 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    84                              <1> .jpnDate:
    85                              <1> ;Japan: YY/MM/DD
    86 00001D79 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    87 00001D7E C1E809              <1>     shr eax, 9
    88 00001D81 5B                  <1>     pop rbx ;Get the year signature back
    89 00001D82 E85C000000          <1>     call .printYear
    90                              <1> 
    91 00001D87 8A15ACE2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    92 00001D8D B402                <1>     mov ah, 02h
    93 00001D8F CD41                <1>     int 41h
    94                              <1> 
    95 00001D91 89C8                <1>     mov eax, ecx
    96 00001D93 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    97 00001D98 C1E805              <1>     shr eax, 5
    98 00001D9B E833000000          <1>     call .printSecond
    99                              <1> 
   100 00001DA0 8A1593E2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
   101 00001DA6 B402                <1>     mov ah, 02h
   102 00001DA8 CD41                <1>     int 41h
   103                              <1> 
   104 00001DAA 89C8                <1>     mov eax, ecx
   105 00001DAC 251F000000          <1>     and eax, 1Fh    ;Save day bits
   106 00001DB1 E81D000000          <1>     call .printSecond
   107                              <1>     return
    19                              <2> %%_ret:
    20 00001DB6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   108                              <1> 
   109                              <1> ;Each of these require eax setup correctly
   110                              <1> .printFirst:
   111 00001DB7 51                  <1>     push rcx
   112 00001DB8 E87B040000          <1>     call getDecimalWord
   113 00001DBD 84ED                <1>     test ch, ch ;Do we have an upper digit?
   114 00001DBF 7504                <1>     jnz .skipSpace
   115 00001DC1 88CD                <1>     mov ch, cl
   116 00001DC3 B120                <1>     mov cl, " "
   117                              <1> .skipSpace:
   118 00001DC5 88CA                <1>     mov dl, cl
   119 00001DC7 B402                <1>     mov ah, 02h
   120 00001DC9 CD41                <1>     int 41h
   121 00001DCB 88EA                <1>     mov dl, ch
   122 00001DCD B402                <1>     mov ah, 02h
   123 00001DCF CD41                <1>     int 41h
   124 00001DD1 59                  <1>     pop rcx
   125                              <1>     return
    19                              <2> %%_ret:
    20 00001DD2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   126                              <1> .printSecond:
   127 00001DD3 51                  <1>     push rcx
   128 00001DD4 E85F040000          <1>     call getDecimalWord
   129 00001DD9 84ED                <1>     test ch, ch ;Do we have an upper digit?
   130 00001DDB 75E8                <1>     jnz .skipSpace
   131 00001DDD 88CD                <1>     mov ch, cl
   132 00001DDF B130                <1>     mov cl, "0"
   133 00001DE1 EBE2                <1>     jmp short .skipSpace
   134                              <1> .printYear:
   135 00001DE3 05BC070000          <1>     add eax, 1980
   136 00001DE8 51                  <1>     push rcx
   137 00001DE9 53                  <1>     push rbx
   138 00001DEA E849040000          <1>     call getDecimalWord ;Get unpacked in rcx
   139 00001DEF 5B                  <1>     pop rbx
   140 00001DF0 84DB                <1>     test bl, bl
   141 00001DF2 740C                <1>     jz .twoDigitYear
   142 00001DF4 88CA                <1>     mov dl, cl  ;Print the first digit
   143 00001DF6 B402                <1>     mov ah, 02h
   144 00001DF8 CD41                <1>     int 41h
   145 00001DFA 88EA                <1>     mov dl, ch  ;Print the second digit
   146 00001DFC B402                <1>     mov ah, 02h
   147 00001DFE CD41                <1>     int 41h
   148                              <1> .twoDigitYear:
   149 00001E00 C1E910              <1>     shr ecx, 10h    ;Get high word low
   150 00001E03 88CA                <1>     mov dl, cl  ;Print the upper digit
   151 00001E05 B402                <1>     mov ah, 02h
   152 00001E07 CD41                <1>     int 41h
   153 00001E09 88EA                <1>     mov dl, ch  ;Print the lower digit
   154 00001E0B B402                <1>     mov ah, 02h
   155 00001E0D CD41                <1>     int 41h
   156 00001E0F 59                  <1>     pop rcx
   157                              <1>     return
    19                              <2> %%_ret:
    20 00001E10 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   158                              <1> 
   159                              <1> 
   160                              <1> printTime:
   161                              <1> ;Input: eax = Packed Time
   162                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   163                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   164 00001E11 89C1                <1>     mov ecx, eax
   165 00001E13 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   166 00001E18 C1E80B              <1>     shr eax, 11
   167 00001E1B 803D1DE2FFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   168 00001E22 750B                <1>     jne .ampm
   169 00001E24 E85A000000          <1>     call .printHours
   170 00001E29 E831000000          <1>     call .printMinutes
   171                              <1>     return
    19                              <2> %%_ret:
    20 00001E2E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   172                              <1> .ampm:
   173 00001E2F 3D0C000000          <1>     cmp eax, 12
   174 00001E34 7713                <1>     ja .pm
   175 00001E36 7416                <1>     je .pm2
   176 00001E38 E846000000          <1>     call .printHours
   177 00001E3D E81D000000          <1>     call .printMinutes
   178 00001E42 B261                <1>     mov dl, "a"
   179 00001E44 B402                <1>     mov ah, 02h
   180 00001E46 CD41                <1>     int 41h
   181                              <1>     return
    19                              <2> %%_ret:
    20 00001E48 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   182                              <1> .pm:
   183 00001E49 2D0C000000          <1>     sub eax, 12
   184                              <1> .pm2:
   185 00001E4E E830000000          <1>     call .printHours
   186 00001E53 E807000000          <1>     call .printMinutes
   187 00001E58 B270                <1>     mov dl, "p"
   188 00001E5A B402                <1>     mov ah, 02h
   189 00001E5C CD41                <1>     int 41h
   190                              <1>     return
    19                              <2> %%_ret:
    20 00001E5E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   191                              <1> .printMinutes:
   192 00001E5F 8A15D6E1FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   193 00001E65 B402                <1>     mov ah, 02h
   194 00001E67 CD41                <1>     int 41h
   195                              <1> 
   196 00001E69 89C8                <1>     mov eax, ecx
   197 00001E6B 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   198 00001E70 C1E805              <1>     shr eax, 5
   199                              <1> .printMinutesAlt:
   200 00001E73 51                  <1>     push rcx
   201 00001E74 E8BF030000          <1>     call getDecimalWord
   202 00001E79 84ED                <1>     test ch, ch ;Do we have an upper digit?
   203 00001E7B 7514                <1>     jnz .skipSpace
   204 00001E7D 88CD                <1>     mov ch, cl
   205 00001E7F B130                <1>     mov cl, "0"
   206 00001E81 EB0E                <1>     jmp short .skipSpace
   207                              <1> .printHours:
   208 00001E83 51                  <1>     push rcx
   209 00001E84 E8AF030000          <1>     call getDecimalWord
   210 00001E89 84ED                <1>     test ch, ch ;Do we have an upper digit?
   211 00001E8B 7504                <1>     jnz .skipSpace
   212 00001E8D 88CD                <1>     mov ch, cl
   213 00001E8F B120                <1>     mov cl, " "
   214                              <1> .skipSpace:
   215 00001E91 88CA                <1>     mov dl, cl
   216 00001E93 B402                <1>     mov ah, 02h
   217 00001E95 CD41                <1>     int 41h
   218 00001E97 88EA                <1>     mov dl, ch
   219 00001E99 B402                <1>     mov ah, 02h
   220 00001E9B CD41                <1>     int 41h
   221 00001E9D 59                  <1>     pop rcx
   222                              <1>     return
    19                              <2> %%_ret:
    20 00001E9E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   223                              <1> 
   224                              <1> 
   225                              <1> putVersionInPrompt:
   226 00001E9F 488D153AE9FFFF      <1>     lea rdx, dosVer
   227 00001EA6 B409                <1>     mov ah, 09h ;Print String
   228 00001EA8 CD41                <1>     int 41h
   229 00001EAA B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   230 00001EAC CD41                <1>     int 41h
   231 00001EAE 50                  <1>     push rax    ;Save minor version
   232 00001EAF E89C000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   233 00001EB4 E8B4000000          <1>     call printPackedBCD ;Print al
   234 00001EB9 B22E                <1>     mov dl, "."
   235 00001EBB B402                <1>     mov ah, 02h
   236 00001EBD CD41                <1>     int 41h
   237 00001EBF 58                  <1>     pop rax
   238 00001EC0 88E0                <1>     mov al, ah  ;Get the minor version low
   239 00001EC2 E889000000          <1>     call hexToBCD
   240 00001EC7 E8A1000000          <1>     call printPackedBCD
   241                              <1>     return
    19                              <2> %%_ret:
    20 00001ECC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   242                              <1> putEscInPrompt:
   243 00001ECD B21B                <1>     mov dl, ESC
   244 00001ECF EB1C                <1>     jmp short outChar
   245                              <1> 
   246                              <1> putMoneyInPrompt:
   247 00001ED1 B224                <1>     mov dl, "$"
   248 00001ED3 EB18                <1>     jmp short outChar
   249                              <1> 
   250                              <1> putEquInPrompt:
   251 00001ED5 B23D                <1>     mov dl, "="
   252 00001ED7 EB14                <1>     jmp short outChar
   253                              <1> 
   254                              <1> putPipeInPrompt:
   255 00001ED9 B27C                <1>     mov dl, "|"
   256 00001EDB EB10                <1>     jmp short outChar
   257                              <1> 
   258                              <1> putGTinPrompt:
   259 00001EDD B23E                <1>     mov dl, ">"
   260 00001EDF EB0C                <1>     jmp short outChar
   261                              <1> 
   262                              <1> putLTinPrompt:
   263 00001EE1 B23C                <1>     mov dl, "<"
   264 00001EE3 EB08                <1>     jmp short outChar
   265                              <1> 
   266                              <1> putDriveInPrompt:
   267 00001EE5 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   268 00001EE7 CD41                <1>     int 41h
   269 00001EE9 0441                <1>     add al, "A" ;Convert to letter
   270 00001EEB 88C2                <1>     mov dl, al
   271                              <1> outChar:
   272 00001EED B402                <1>     mov ah, 02h ;Echo to STDOUT
   273 00001EEF CD41                <1>     int 41h
   274                              <1>     return
    19                              <2> %%_ret:
    20 00001EF1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   275                              <1> putCWDInPrompt:
   276 00001EF2 488D3D5BE1FFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   277 00001EF9 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   278 00001EFB CD41                <1>     int 41h
   279 00001EFD 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   280 00001EFF FEC2                <1>     inc dl
   281 00001F01 0441                <1>     add al, "A" ;Convert to letter
   282 00001F03 B43A                <1>     mov ah, ":"
   283 00001F05 66AB                <1>     stosw   ;Store X:, rdi+=2
   284 00001F07 8A0516E1FFFF        <1>     mov al, byte [pathSep]
   285 00001F0D AA                  <1>     stosb   ;Store pathSep, inc rdi
   286 00001F0E B447                <1>     mov ah, 47h ;Get Current Working Directory
   287 00001F10 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   288 00001F13 CD41                <1>     int 41h
   289 00001F15 E884000000          <1>     call strlen
   290 00001F1A 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   291                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   292 00001F20 B440                <1>     mov ah, 40h ;Write to handle
   293 00001F22 BB01000000          <1>     mov ebx, 1  ;STDOUT
   294 00001F27 488D1526E1FFFF      <1>     lea rdx, currDirStr
   295 00001F2E CD41                <1>     int 41h
   296                              <1>     return
    19                              <2> %%_ret:
    20 00001F30 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   297                              <1> 
   298                              <1> BCDtoHex:
   299                              <1> ;Converts a BCD value to a Hex byte
   300                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   301 00001F31 51                  <1>     push rcx
   302 00001F32 0FB6C0              <1>     movzx eax, al   ;Zero extend
   303 00001F35 89C1                <1>     mov ecx, eax    ;Save al in ecx
   304 00001F37 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   305 00001F3C 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   306 00001F42 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   307                              <1> .bth:
   308 00001F45 050A000000          <1>     add eax, 10
   309 00001F4A FFC9                <1>     dec ecx
   310 00001F4C 75F7                <1>     jnz .bth
   311 00001F4E 59                  <1>     pop rcx
   312 00001F4F C3                  <1>     ret
   313                              <1> 
   314                              <1> hexToBCD:
   315                              <1> ;Converts a Hex byte into two BCD digits
   316                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   317 00001F50 51                  <1>     push rcx
   318 00001F51 0FB6C0              <1>     movzx eax, al   ;Zero extend
   319 00001F54 31C9                <1>     xor ecx, ecx
   320                              <1> .htb0:
   321 00001F56 3D0A000000          <1>     cmp eax, 10
   322 00001F5B 7209                <1>     jb .htb1
   323 00001F5D 2D0A000000          <1>     sub eax, 10
   324 00001F62 FFC1                <1>     inc ecx
   325 00001F64 EBF0                <1>     jmp short .htb0
   326                              <1> .htb1:
   327 00001F66 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   328 00001F69 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   329 00001F6B 59                  <1>     pop rcx
   330 00001F6C C3                  <1>     ret
   331                              <1> 
   332                              <1> printPackedBCD:
   333                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   334                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   335                              <1> ;Preserves all registers
   336 00001F6D 50                  <1>     push rax
   337 00001F6E 52                  <1>     push rdx
   338 00001F6F 88C4                <1>     mov ah, al
   339 00001F71 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   340 00001F73 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   341 00001F76 7508                <1>     jnz .upperNybble
   342 00001F78 B220                <1>     mov dl, " "
   343 00001F7A B402                <1>     mov ah, 02h
   344 00001F7C CD41                <1>     int 41h
   345 00001F7E EB0E                <1>     jmp short .lowerNybble
   346                              <1> .upperNybble:
   347 00001F80 50                  <1>     push rax
   348 00001F81 C0EC04              <1>     shr ah, 4
   349 00001F84 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   350 00001F87 88E2                <1>     mov dl, ah
   351 00001F89 B402                <1>     mov ah, 02h ;Print DL
   352 00001F8B CD41                <1>     int 41h
   353 00001F8D 58                  <1>     pop rax
   354                              <1> .lowerNybble:
   355 00001F8E 0430                <1>     add al, "0"
   356 00001F90 88C2                <1>     mov dl, al
   357 00001F92 B402                <1>     mov ah, 02h ;Print DL
   358 00001F94 CD41                <1>     int 41h
   359 00001F96 5A                  <1>     pop rdx
   360 00001F97 58                  <1>     pop rax
   361                              <1>     return
    19                              <2> %%_ret:
    20 00001F98 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   362                              <1> 
   363                              <1> getCurrentDrive:
   364                              <1> ;Returns the 0 based current drive in al
   365 00001F99 B419                <1>     mov ah, 19h
   366 00001F9B CD41                <1>     int 41h
   367                              <1>     return
    19                              <2> %%_ret:
    20 00001F9D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   368                              <1> 
   369                              <1> strlen:
   370                              <1> ;Gets the length of a ASCIIZ string
   371                              <1> ;Input: rdi = Source buffer
   372                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   373 00001F9E 50                  <1>     push rax
   374 00001F9F 57                  <1>     push rdi
   375 00001FA0 30C0                <1>     xor al, al
   376 00001FA2 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   377 00001FA4 FFC9                <1>     dec ecx ;rcx = -1
   378 00001FA6 F2AE                <1>     repne scasb
   379 00001FA8 F7D1                <1>     not ecx
   380 00001FAA 5F                  <1>     pop rdi
   381 00001FAB 58                  <1>     pop rax
   382                              <1>     return
    19                              <2> %%_ret:
    20 00001FAC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   383                              <1> 
   384                              <1> findTerminatorOrEOC:
   385                              <1> ;Advances rsi to the next string terminator char or the next End of command
   386                              <1> ; char
   387                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   388                              <1> ;If a end of command char found, also sets CF
   389 00001FAD AC                  <1>     lodsb
   390 00001FAE 3C0D                <1>     cmp al, CR
   391 00001FB0 7419                <1>     je .endOfInput
   392 00001FB2 E82B000000          <1>     call isALterminator
   393 00001FB7 7419                <1>     jz .exit
   394 00001FB9 3A0564E0FFFF        <1>     cmp al, byte [pathSep]
   395 00001FBF 7411                <1>     je .exit
   396 00001FC1 3A055DE0FFFF        <1>     cmp al, byte [switchChar]
   397 00001FC7 7409                <1>     je .exit
   398 00001FC9 EBE2                <1>     jmp short findTerminatorOrEOC
   399                              <1> .endOfInput:
   400 00001FCB E802000000          <1>     call .exit
   401 00001FD0 F9                  <1>     stc 
   402                              <1>     return
    19                              <2> %%_ret:
    20 00001FD1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   403                              <1> .exit:
   404 00001FD2 48FFCE              <1>     dec rsi ;Point to the terminating char
   405                              <1>     return
    19                              <2> %%_ret:
    20 00001FD5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   406                              <1> 
   407                              <1> findTerminator:
   408                              <1> ;Advances rsi to the next string terminator char
   409                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   410 00001FD6 AC                  <1>     lodsb
   411 00001FD7 E806000000          <1>     call isALterminator
   412 00001FDC 75F8                <1>     jnz findTerminator
   413 00001FDE 48FFCE              <1>     dec rsi
   414                              <1>     return
    19                              <2> %%_ret:
    20 00001FE1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   415                              <1> isALterminator:
   416                              <1> ;Returns: ZF=NZ if al is not a terminator (Not including CR)
   417                              <1> ;         ZF=ZY if al is a terminator
   418 00001FE2 3C20                <1>     cmp al, " "
   419                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001FE4 74(E1)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   420 00001FE6 3C3B                <1>     cmp al, ";"
   421                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001FE8 74(E1)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   422 00001FEA 3C3D                <1>     cmp al, "="
   423                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001FEC 74(E1)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   424 00001FEE 3C2C                <1>     cmp al, ","
   425                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001FF0 74(E1)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   426 00001FF2 3C09                <1>     cmp al, TAB
   427                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001FF4 74(E1)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   428 00001FF6 3C0A                <1>     cmp al, LF
   429                              <1>     return
    19                              <2> %%_ret:
    20 00001FF8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   430                              <1> 
   431                              <1> findEndOfCommand:
   432                              <1> ;Moves rsi to the | or CR that terminates this command
   433 00001FF9 AC                  <1>     lodsb
   434 00001FFA E806000000          <1>     call isALEndOfCommand
   435 00001FFF 75F8                <1>     jnz findEndOfCommand
   436 00002001 48FFCE              <1>     dec rsi
   437                              <1>     return
    19                              <2> %%_ret:
    20 00002004 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   438                              <1> isALEndOfCommand:
   439 00002005 3C7C                <1>     cmp al, "|"
   440                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002007 74(04)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   441 00002009 3C0D                <1>     cmp al, CR
   442                              <1>     return
    19                              <2> %%_ret:
    20 0000200B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   443                              <1> 
   444                              <1> scanForRedir:
   445                              <1> ;Returns: AL = 0 => No redirection, terminate with CR
   446                              <1> ;         AL = 1 => Redirection, type <
   447                              <1> ;         AL = 10 => Redir, type >
   448                              <1> ;         AL = 20 => Redir, type >>
   449                              <1> ;If multiple redirs found, the last one of that type counts.
   450 0000200C 56                  <1>     push rsi
   451 0000200D 55                  <1>     push rbp
   452 0000200E 30E4                <1>     xor ah, ah
   453                              <1> .lp:
   454 00002010 AC                  <1>     lodsb
   455 00002011 3C3E                <1>     cmp al, ">"
   456                              <1> .exit:
   457 00002013 5D                  <1>     pop rbp
   458 00002014 5E                  <1>     pop rsi
   459                              <1>     return
    19                              <2> %%_ret:
    20 00002015 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   460                              <1> 
   461                              <1> 
   462                              <1> skipSpaces:
   463                              <1> ;Also skips tabs
   464                              <1> ;Input: rsi must point to the start of the data string
   465                              <1> ;Output: rsi points to the first non-space char
   466 00002016 803E20              <1>     cmp byte [rsi], " "
   467 00002019 7405                <1>     je .skip    ;If equal to a space, skip it
   468 0000201B 803E09              <1>     cmp byte [rsi], TAB
   469                              <1>     retne   ;If not equal to a tab or space, return
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000201E 75(15)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   470                              <1> .skip:
   471 00002020 48FFC6              <1>     inc rsi
   472 00002023 EBF1                <1>     jmp short skipSpaces
   473                              <1> 
   474                              <1> printPrompt:
   475 00002025 66813DF3DFFFFFFFFF  <1>     cmp word [promptPtr], -1
   476 0000202E 750B                <1>     jne .validPrompt
   477                              <1>     ;Here we print the default prompt
   478 00002030 E8BDFEFFFF          <1>     call putCWDInPrompt
   479 00002035 E8A3FEFFFF          <1>     call putGTinPrompt
   480                              <1>     return
    19                              <2> %%_ret:
    20 0000203A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   481                              <1> .validPrompt:
   482                              <1>     return
    19                              <2> %%_ret:
    20 0000203B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   483                              <1> 
   484                              <1> clearCommandState:
   485                              <1> ;Clears the command state
   486 0000203C 488D3D64E0FFFF      <1>     lea rdi, cmdStatePtr
   487 00002043 B90A000000          <1>     mov ecx, cmdStateL
   488 00002048 31C0                <1>     xor eax, eax
   489 0000204A F3AA                <1>     rep stosb
   490                              <1>     return
    19                              <2> %%_ret:
    20 0000204C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   491                              <1> 
   492                              <1> clearCommandLineState:
   493                              <1> ;Clears the command line state after a 0Dh encountered
   494 0000204D 488D3D43E0FFFF      <1>     lea rdi, cmdLineStatePtr
   495 00002054 B91A000000          <1>     mov ecx, cmdLineStateL
   496 00002059 31C0                <1>     xor eax, eax
   497 0000205B F3AA                <1>     rep stosb
   498                              <1>     return
    19                              <2> %%_ret:
    20 0000205D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   499                              <1> 
   500                              <1> asciiToFCB:
   501                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   502                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   503                              <1> ;Also doesn't check if chars are valid
   504                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   505                              <1> ;Name is space padded.
   506                              <1> ;Input: rsi = ASCII string buffer
   507                              <1> ;       rdi = FCB name buffer
   508                              <1> ;Output: al = Char that terminated the source string 
   509 0000205E 53                  <1>     push rbx    
   510 0000205F 57                  <1>     push rdi
   511 00002060 B90B000000          <1>     mov ecx, 11
   512 00002065 B020                <1>     mov al, " "
   513 00002067 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   514 00002069 5F                  <1>     pop rdi
   515 0000206A 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   516 0000206D EB1D                <1>     jmp short asciiFilenameToFCB.processName
   517                              <1> asciiFilenameToFCB:
   518                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   519                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   520                              <1> ;Also doesn't check if chars are valid
   521                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   522                              <1> ;Name is space padded.
   523                              <1> ;Input: rsi = ASCII string buffer
   524                              <1> ;       rdi = FCB name buffer
   525                              <1> ;Output: al = Char that terminated the source string 
   526 0000206F 53                  <1>     push rbx    
   527 00002070 57                  <1>     push rdi
   528 00002071 B90B000000          <1>     mov ecx, 11
   529 00002076 B020                <1>     mov al, " "
   530 00002078 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   531 0000207A 5F                  <1>     pop rdi
   532 0000207B 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   533                              <1>     ;Preprocess for Dir Searches
   534 0000207E 803E2E              <1>     cmp byte [rsi], "."
   535 00002081 7509                <1>     jne .processName
   536 00002083 A4                  <1>     movsb   ;Store the first dot
   537 00002084 803E2E              <1>     cmp byte [rsi], "."
   538 00002087 752C                <1>     jne .exitBadChar
   539 00002089 A4                  <1>     movsb
   540 0000208A EB29                <1>     jmp short .exitBadChar
   541                              <1> .processName:
   542 0000208C AC                  <1>     lodsb   ;Get the char in al
   543 0000208D 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   544 0000208F 7426                <1>     jz .exit
   545 00002091 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   546 00002093 7407                <1>     je .extSpace
   547 00002095 3C2E                <1>     cmp al, "."
   548 00002097 740C                <1>     je .ext
   549 00002099 AA                  <1>     stosb   ;Store the char
   550 0000209A EBF0                <1>     jmp short .processName
   551                              <1> .extSpace:
   552                              <1> ;Now we scan for a period in the name
   553 0000209C AC                  <1>     lodsb   ;Get a char and increase rsi
   554 0000209D 84C0                <1>     test al, al
   555 0000209F 7416                <1>     jz .exit
   556 000020A1 3C2E                <1>     cmp al, "."     ;If al is not a period...
   557 000020A3 75F7                <1>     jne .extSpace   ; keep searching
   558                              <1> .ext:
   559 000020A5 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   560                              <1> .processExt:
   561 000020A9 AC                  <1>     lodsb
   562 000020AA 84C0                <1>     test al, al
   563 000020AC 7409                <1>     jz .exit
   564 000020AE 3C20                <1>     cmp al, " "
   565 000020B0 7405                <1>     je .exit
   566 000020B2 AA                  <1>     stosb
   567 000020B3 EBF4                <1>     jmp short .processExt
   568                              <1> .exitBadChar:
   569 000020B5 30C0                <1>     xor al, al  ;Return a null terminator
   570                              <1> .exit:
   571 000020B7 5B                  <1>     pop rbx
   572                              <1>     return
    19                              <2> %%_ret:
    20 000020B8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   573                              <1> 
   574                              <1> FCBToAsciiz:
   575                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   576                              <1> ;Name is space padded too
   577                              <1> ;Input: rsi = FCB name buffer
   578                              <1> ;       rdi = ASCIIZ string buffer
   579 000020B9 B908000000          <1>     mov ecx, 8
   580 000020BE F3A4                <1>     rep movsb   ;Move the name over
   581                              <1> .scanNameSpace:
   582 000020C0 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   583 000020C4 750D                <1>     jne .ext
   584 000020C6 48FFCF              <1>     dec rdi
   585 000020C9 FFC1                <1>     inc ecx
   586 000020CB 81F908000000        <1>     cmp ecx, 8
   587 000020D1 72ED                <1>     jb .scanNameSpace
   588                              <1> .ext:
   589 000020D3 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   590 000020D8 7506                <1>     jne .validExt
   591 000020DA 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   592 000020DE 7415                <1>     je .exit
   593                              <1> .validExt:
   594 000020E0 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   595 000020E2 AA                  <1>     stosb
   596 000020E3 B903000000          <1>     mov ecx, 3
   597 000020E8 F3A4                <1>     rep movsb   ;Move the three extension chars over
   598                              <1> .scanExtSpace:
   599 000020EA 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   600 000020EE 7505                <1>     jne .exit
   601 000020F0 48FFCF              <1>     dec rdi
   602 000020F3 EBF5                <1>     jmp short .scanExtSpace
   603                              <1> .exit:
   604 000020F5 31C0                <1>     xor eax, eax
   605 000020F7 AA                  <1>     stosb   ;Store a null at the end
   606                              <1>     return
    19                              <2> %%_ret:
    20 000020F8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   607                              <1> 
   608                              <1> buildCommandPath:
   609                              <1> ;Based on the first argument on the command line
   610                              <1> ; will build a full ASCIIZ path in searchSpec to the file/dir specified
   611                              <1>     ;If this is a relative path, will handle correctly (tho unnecessary)
   612 000020F9 0FB605ACDFFFFF      <1>     movzx eax, byte [arg1Off]
   613 00002100 488D3585E0FFFF      <1>     lea rsi, cmdBuffer
   614 00002107 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   615 0000210A 8A3D13DFFFFF        <1>     mov bh, byte [pathSep]
   616 00002110 B33A                <1>     mov bl, ":"
   617 00002112 383E                <1>     cmp byte [rsi], bh  ;Is the first char relative to root?
   618 00002114 7458                <1>     je .absoluteCurrent
   619 00002116 66395E01            <1>     cmp word [rsi + 1], bx    ;This checks if absolute or relative
   620 0000211A 746D                <1>     je .absolutePath
   621 0000211C 385E01              <1>     cmp byte [rsi + 1], bl  ;Check if a drive separator
   622 0000211F 7409                <1>     je .relativeGiven
   623                              <1> ;No drive letter given, must get Current Drive
   624 00002121 E873FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   625 00002126 0441                <1>     add al, "A"
   626 00002128 EB0B                <1>     jmp short .relativeCommon
   627                              <1> .relativeGiven:
   628                              <1> ;Drive letter pointed to by AL
   629 0000212A 8A06                <1>     mov al, byte [rsi]  ;Get drive letter in al
   630 0000212C 24DF                <1>     and al, 0DFh    ;Convert to UC
   631 0000212E 4881C602000000      <1>     add rsi, 2  ;Skip the given drive letter and the colon
   632                              <1> .relativeCommon:
   633                              <1>     ;al has drive letter
   634 00002135 88C2                <1>     mov dl, al  ;Save drive letter in dl
   635 00002137 80EA40              <1>     sub dl, "@" ;Get 1 based drive number in dl
   636 0000213A B43A                <1>     mov ah, ":" ;Get the colon in too
   637 0000213C 488D3DDCE1FFFF      <1>     lea rdi, searchSpec ;Start building our search path here
   638 00002143 66AB                <1>     stosw   ;Store X:
   639 00002145 8A05D8DEFFFF        <1>     mov al, byte [pathSep]
   640 0000214B AA                  <1>     stosb   ;Store pathSep
   641 0000214C 56                  <1>     push rsi    ;Save user input string
   642 0000214D 4889FE              <1>     mov rsi, rdi    ;Put the current directory here for this drive
   643 00002150 B447                <1>     mov ah, 47h ;Get Current Working Directory, dl has drive number
   644 00002152 CD41                <1>     int 41h ;Won't fail as drive letter in dl confirmed ok
   645 00002154 5E                  <1>     pop rsi
   646                              <1>     ;Now want to find terminating null
   647 00002155 30C0                <1>     xor al, al
   648 00002157 31C9                <1>     xor ecx, ecx
   649 00002159 FFC9                <1>     dec ecx
   650 0000215B F2AE                <1>     repne scasb ;Search for the terminating null
   651 0000215D 48FFCF              <1>     dec rdi ;Go back one once found
   652 00002160 8A05BDDEFFFF        <1>     mov al, byte [pathSep]
   653 00002166 3847FF              <1>     cmp byte [rdi - 1], al
   654 00002169 7425                <1>     je .buildPath ;If the previous char is a pathsep, skip storing another
   655 0000216B AA                  <1>     stosb   ;Store the pathsep
   656 0000216C EB22                <1>     jmp short .buildPath  ;Now we copy the user string over and good to go
   657                              <1> .absoluteCurrent:
   658 0000216E E826FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   659 00002173 0441                <1>     add al, "A"
   660 00002175 B43A                <1>     mov ah, ":" ;ax has X: now to store 
   661 00002177 488D3DA1E1FFFF      <1>     lea rdi, searchSpec
   662 0000217E 66AB                <1>     stosw
   663 00002180 8A059DDEFFFF        <1>     mov al, byte [pathSep]
   664 00002186 AA                  <1>     stosb
   665 00002187 EB07                <1>     jmp short .buildPath
   666                              <1> .absolutePath:
   667 00002189 488D3D8FE1FFFF      <1>     lea rdi, searchSpec
   668                              <1> .buildPath:
   669 00002190 E8F5EDFFFF          <1>     call copyCommandTailItem    ;Terminates with a 0 for free
   670 00002195 488D3583E1FFFF      <1>     lea rsi, searchSpec
   671 0000219C 488D3D7CE1FFFF      <1>     lea rdi, searchSpec
   672 000021A3 B460                <1>     mov ah, 60h ;Truename it to avoid issues
   673 000021A5 CD41                <1>     int 41h
   674                              <1>     retc    ;Return if an error with CF=CY
    63                              <2> cret c
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 000021A7 7301                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 000021A9 C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   675                              <1>     ;Here we do one final check to ensure we dont end up with a A: but A:"\"
   676 000021AA 30C0                <1>     xor al, al
   677 000021AC 31C9                <1>     xor ecx, ecx
   678 000021AE FFC9                <1>     dec ecx
   679 000021B0 F2AE                <1>     repne scasb
   680 000021B2 48FFCF              <1>     dec rdi ;Go back to the final non-null char
   681 000021B5 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is the final non-null char a colon?
   682 000021B9 750A                <1>     jne .okExit   ;Return if not
   683 000021BB 31C0                <1>     xor eax, eax
   684 000021BD 8A0560DEFFFF        <1>     mov al, byte [pathSep]  ;IF it is, insert a pathsep
   685 000021C3 66AB                <1>     stosw   ;Store the terminating 0 after the pathsep
   686                              <1> .okExit:
   687 000021C5 F8                  <1>     clc
   688                              <1>     return
    19                              <2> %%_ret:
    20 000021C6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   689                              <1> 
   690                              <1> 
   691                              <1>     
   692                              <1> printDecimalWord:
   693                              <1> ;Takes qword in rax and print it's decimal representation
   694                              <1> ;Takes the qword in eax and prints its decimal representation
   695 000021C7 31C9                <1>     xor ecx, ecx
   696 000021C9 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   697 000021CB 85C0                <1>     test eax, eax
   698 000021CD 750C                <1>     jnz .notZero
   699 000021CF B930000000          <1>     mov ecx, "0"
   700 000021D4 BD01000000          <1>     mov ebp, 1  ;Print one digit
   701 000021D9 EB3E                <1>     jmp short .dpfb2
   702                              <1> .notZero:
   703 000021DB 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   704 000021DD BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   705                              <1> .dpfb0:
   706 000021E2 FFC5                <1>     inc ebp
   707 000021E4 81FD08000000        <1>     cmp ebp, 8
   708 000021EA 7206                <1>     jb .dpfb00
   709 000021EC 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   710 000021F0 EB04                <1>     jmp short .dpfb01
   711                              <1> .dpfb00:
   712 000021F2 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   713                              <1> .dpfb01:
   714 000021F6 31D2                <1>     xor edx, edx
   715 000021F8 48F7F6              <1>     div rsi
   716 000021FB 80C230              <1>     add dl, '0'
   717 000021FE 80FA39              <1>     cmp dl, '9'
   718 00002201 7603                <1>     jbe .dpfb1
   719 00002203 80C207              <1>     add dl, 'A'-'0'-10
   720                              <1> .dpfb1:
   721 00002206 81FD08000000        <1>     cmp ebp, 8
   722 0000220C 7204                <1>     jb .dpfb10
   723 0000220E 88D3                <1>     mov bl, dl ;Add the bottom bits
   724 00002210 EB02                <1>     jmp short .dpfb11
   725                              <1> .dpfb10:
   726 00002212 88D1                <1>     mov cl, dl    ;Save remainder byte
   727                              <1> .dpfb11:
   728 00002214 4885C0              <1>     test rax, rax
   729 00002217 75C9                <1>     jnz .dpfb0
   730                              <1> .dpfb2:
   731 00002219 81FD08000000        <1>     cmp ebp, 8
   732 0000221F 7208                <1>     jb .dpfb20
   733 00002221 88DA                <1>     mov dl, bl
   734 00002223 48C1EB08            <1>     shr rbx, 8
   735 00002227 EB06                <1>     jmp short .dpfb21
   736                              <1> .dpfb20:
   737 00002229 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   738 0000222B 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   739                              <1> .dpfb21:
   740 0000222F B402                <1>     mov ah, 02h
   741 00002231 CD41                <1>     int 41h
   742 00002233 FFCD                <1>     dec ebp
   743 00002235 75E2                <1>     jnz .dpfb2
   744                              <1>     return
    19                              <2> %%_ret:
    20 00002237 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   745                              <1> 
   746                              <1> getDecimalWord:
   747                              <1> ;Works on MAX A dword in eax
   748                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   749 00002238 31C9                <1>     xor ecx, ecx
   750 0000223A 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   751 0000223C BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   752                              <1> .dpfb0:
   753 00002241 FFC5                <1>     inc ebp
   754 00002243 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   755 00002247 31D2                <1>     xor edx, edx
   756 00002249 48F7F3              <1>     div rbx
   757 0000224C 80C230              <1>     add dl, '0'
   758 0000224F 80FA39              <1>     cmp dl, '9'
   759 00002252 7603                <1>     jbe .dpfb1
   760 00002254 80C207              <1>     add dl, 'A'-'0'-10
   761                              <1> .dpfb1:
   762 00002257 88D1                <1>     mov cl, dl    ;Save remainder byte
   763 00002259 4885C0              <1>     test rax, rax
   764 0000225C 75E3                <1>     jnz .dpfb0
   765                              <1>     return
    19                              <2> %%_ret:
    20 0000225E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   766                              <1> 
   767                              <1> freezePC:
   768 0000225F 488D1552E8FFFF      <1>     lea rdx, memBad1
   769 00002266 B409                <1>     mov ah, 09h
   770 00002268 CD41                <1>     int 41h
   771                              <1> .altEP:
   772 0000226A 488D1570E8FFFF      <1>     lea rdx, memBad3
   773 00002271 B409                <1>     mov ah, 09h
   774 00002273 CD41                <1>     int 41h
   775                              <1> .lp:
   776 00002275 F390                <1>     pause
   777 00002277 F4                  <1>     hlt
   778 00002278 EBFB                <1>     jmp short .lp
   779                              <1> 
   780                              <1> getFilenamePtrFromFilespec:
   781                              <1> ;Gets a pointer to the first char of a filename from a asciiz pathspec
   782                              <1> ;Input: rsi = Pathspec to search
   783                              <1> ;Output: rsi = Points to the first char of the filename
   784 0000227A 4889F3              <1>     mov rbx, rsi
   785 0000227D 31C0                <1>     xor eax, eax
   786 0000227F 4889F7              <1>     mov rdi, rsi    ;Go to the source string 
   787 00002282 E817FDFFFF          <1>     call strlen     ;Get it's length
   788 00002287 FFC9                <1>     dec ecx ;Dont include terminating null
   789 00002289 741F                <1>     jz .exitBad ;Was the string of length zero? Exit bad if so
   790 0000228B 4801CE              <1>     add rsi, rcx    ;Goto last char in path (not null)
   791                              <1> .lp:
   792 0000228E 4839F3              <1>     cmp rbx, rsi    ;Is rdi pointing to the start of the string?
   793                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002291 74(5E)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   794 00002293 8A06                <1>     mov al, byte [rsi]  ;Get the char we currently are at
   795 00002295 3C3A                <1>     cmp al, ":" ;X: ?
   796 00002297 740D                <1>     je .pointFilename
   797 00002299 3A0584DDFFFF        <1>     cmp al, byte [pathSep]  ;Is al pathSep?
   798 0000229F 7405                <1>     je .pointFilename
   799 000022A1 48FFCE              <1>     dec rsi ;Not a terminator, go back a char
   800 000022A4 EBE8                <1>     jmp short .lp
   801                              <1> .pointFilename:
   802 000022A6 48FFC6              <1>     inc rsi ;Now point to the first char of the pathname
   803                              <1>     return
    19                              <2> %%_ret:
    20 000022A9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   804                              <1> .exitBad:
   805 000022AA F9                  <1>     stc
   806                              <1> .exit:
   807                              <1>     return
    19                              <2> %%_ret:
    20 000022AB C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    17                                  %include "./Source/Utils/COMMAND/Source/int44h.asm"
    18                              <1> critErrorHandler:   ;Int 44h
    19                              <1> ;User Stack in usage here, must be swapped to before this is called
    20                              <1> ;Entered with:  
    21                              <1> ;               AH = Critical Error Bitfield
    22                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    23                              <1> ;               Bit 6 - Reserved
    24                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    25                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    26                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    27                              <1> ;               Bits [2-1] = Affected Disk Error
    28                              <1> ;                     0 0   DOS area
    29                              <1> ;                     0 1   FAT area
    30                              <1> ;                     1 0   Directory area
    31                              <1> ;                     1 1   Data area
    32                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    33                              <1> ;               AL  = Failing drive number if AH[7] = 0
    34                              <1> ;               DIL = Error code for errorMsg
    35                              <1> ;               RSI = EA of Device Header for which device the error occured
    36                              <1> ;Return:
    37                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    38                              <1> ;                  = 1 - Retry the Operation    (Retry)
    39                              <1> ;                  = 2 - Terminate the Program  (Abort)
    40                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    41 000022AC 53                  <1>     push rbx
    42 000022AD 51                  <1>     push rcx
    43 000022AE 52                  <1>     push rdx
    44 000022AF 57                  <1>     push rdi
    45 000022B0 56                  <1>     push rsi
    46 000022B1 FC                  <1>     cld         ;Make String ops go forward
    47                              <1> 
    48 000022B2 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    49 000022B5 488D15B1E2FFFF      <1>     lea rdx, crlf
    50 000022BC B409                <1>     mov ah, 09h ;Print String
    51 000022BE CD41                <1>     int 41h
    52                              <1> 
    53 000022C0 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    54 000022C6 B90C000000          <1>     mov ecx, 0Ch
    55 000022CB 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    56 000022CD 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    57 000022D0 480FB7FF            <1>     movzx rdi, di
    58 000022D4 4889FA              <1>     mov rdx, rdi    ;Copy error code
    59 000022D7 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    60 000022DB 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    61 000022DE 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    62 000022E1 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    63 000022E8 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    64 000022EC B409                <1>     mov ah, 09h ;Print String
    65 000022EE CD41                <1>     int 41h     ;Call DOS to print first part of message
    66                              <1> 
    67 000022F0 488D1505020000      <1>     lea rdx, qword [.readmsg]
    68 000022F7 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    69 000022FE F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    70 00002301 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    71 00002305 B409                <1>     mov ah, 09h ;Print String
    72 00002307 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    73                              <1> 
    74 00002309 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    75 0000230C 0F85DF000000        <1>     jnz .charError
    76                              <1> ;Disk error continues here
    77 00002312 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    78 00002319 B409                <1>     mov ah, 09h
    79 0000231B CD41                <1>     int 41h
    80 0000231D 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    81 0000231F 80C241              <1>     add dl, "A" ;Add ASCII code
    82 00002322 B402                <1>     mov ah, 02h ;Print char in dl
    83 00002324 CD41                <1>     int 41h
    84                              <1> .userInput:
    85 00002326 488D1540E2FFFF      <1>     lea rdx, crlf  ;Print new line
    86 0000232D B409                <1>     mov ah, 09h
    87 0000232F CD41                <1>     int 41h
    88                              <1> ;Abort, Retry, Ignore, Fail is word order
    89                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    90                              <1> .userAbort:
    91                              <1> ;Abort is always an option
    92 00002331 488D15E2010000      <1>     lea rdx, qword [.abortmsg]
    93 00002338 B409                <1>     mov ah, 09h
    94 0000233A CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
    95                              <1> .userRetry:
    96 0000233C F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    97 0000233F 7416                <1>     jz .userIgnore    ;If clear, dont print message
    98 00002341 488D15EA010000      <1>     lea rdx, qword [.betweenMsg]
    99 00002348 B409                <1>     mov ah, 09h
   100 0000234A CD41                <1>     int 41h
   101 0000234C 488D15D4010000      <1>     lea rdx, qword [.retrymsg]
   102 00002353 B409                <1>     mov ah, 09h
   103 00002355 CD41                <1>     int 41h
   104                              <1> .userIgnore:
   105 00002357 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   106 0000235A 7416                <1>     jz .userFail
   107 0000235C 488D15CF010000      <1>     lea rdx, qword [.betweenMsg]
   108 00002363 B409                <1>     mov ah, 09h
   109 00002365 CD41                <1>     int 41h
   110 00002367 488D15B2010000      <1>     lea rdx, qword [.ignoremsg]
   111 0000236E B409                <1>     mov ah, 09h
   112 00002370 CD41                <1>     int 41h
   113                              <1> .userFail:
   114 00002372 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   115 00002375 7416                <1>     jz .userMsgEnd
   116 00002377 488D15B4010000      <1>     lea rdx, qword [.betweenMsg]
   117 0000237E B409                <1>     mov ah, 09h
   118 00002380 CD41                <1>     int 41h
   119 00002382 488D15A4010000      <1>     lea rdx, qword [.failmsg]
   120 00002389 B409                <1>     mov ah, 09h
   121 0000238B CD41                <1>     int 41h
   122                              <1> .userMsgEnd:
   123 0000238D 488D15A1010000      <1>     lea rdx, qword [.endMsg]
   124 00002394 B409                <1>     mov ah, 09h
   125 00002396 CD41                <1>     int 41h
   126                              <1> ;Get user input now 
   127 00002398 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   128 0000239A 488D3D97010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   129 000023A1 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   130 000023A3 CD41                <1>     int 41h ;Get char in al
   131 000023A5 3C61                <1>     cmp al, "a" ;Chack if lowercase
   132 000023A7 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   133 000023A9 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   134                              <1> .uip1:
   135 000023AB AE                  <1>     scasb   ;Compare char to list, offset gives return code
   136 000023AC 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   137 000023AE FFC1                <1>     inc ecx
   138 000023B0 81F904000000        <1>     cmp ecx, 4
   139 000023B6 75F3                <1>     jne .uip1
   140 000023B8 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   141                              <1> .validInput:
   142 000023BD 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   143                              <1> ;Now check if the input is permitted
   144 000023BF 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   145 000023C1 7427                <1>     je .cehExit
   146 000023C3 84C0                <1>     test al, al ;Check if 0 => Ignore
   147 000023C5 740F                <1>     je .viIgnore
   148 000023C7 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   149 000023C9 7416                <1>     je .viRetry
   150                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   151 000023CB F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   152 000023CE 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   153 000023D4 EB14                <1>     jmp short .cehExit
   154                              <1> .viIgnore:
   155 000023D6 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   156 000023D9 0F8447FFFFFF        <1>     jz .userInput
   157 000023DF EB09                <1>     jmp short .cehExit
   158                              <1> .viRetry:
   159 000023E1 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   160 000023E4 0F843CFFFFFF        <1>     jz .userInput
   161                              <1> .cehExit:
   162 000023EA 5E                  <1>     pop rsi
   163 000023EB 5F                  <1>     pop rdi
   164 000023EC 5A                  <1>     pop rdx
   165 000023ED 59                  <1>     pop rcx
   166 000023EE 5B                  <1>     pop rbx
   167 000023EF 48CF                <1>     iretq
   168                              <1> .charError:
   169 000023F1 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   170 000023F6 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   171                              <1> .ce1:
   172 000023FD AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   173 000023FE 88C2                <1>     mov dl, al  ;Move char into dl
   174 00002400 B402                <1>     mov ah, 02h
   175 00002402 CD41                <1>     int 41h ;Print char
   176 00002404 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   177 00002406 E91BFFFFFF          <1>     jmp .userInput
   178                              <1> 
   179                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   180 0000240B 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   180 00002414 746563742024202020  <1>
   181 0000241D 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   181 00002426 6E6974202420202020  <1>
   182 0000242F 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   182 00002438 202420202020202020  <1>
   183 00002441 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   183 0000244A 6F6D6D616E64202420  <1>
   184 00002453 446174612024202020- <1>             db "Data $            "       ;Error 4
   184 0000245C 202020202020202020  <1>
   185 00002465 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   185 0000246E 737420242020202020  <1>
   186 00002477 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   186 00002480 202020202020202020  <1>
   187 00002489 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   187 00002492 656469612024202020  <1>
   188 0000249B 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   188 000024A4 7420466F756E642024  <1>
   189 000024AD 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   189 000024B6 706572202420202020  <1>
   190 000024BF 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   190 000024C8 6C7420242020202020  <1>
   191 000024D1 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   191 000024DA 742024202020202020  <1>
   192 000024E3 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   192 000024EC 61696C757265202420  <1>
   193                              <1> 
   194 000024F5 64726976652024      <1> .drive      db "drive $"
   195 000024FC 6572726F7220726561- <1> .readmsg    db "error reading $"
   195 00002505 64696E672024        <1>
   196 0000250B 6572726F7220777269- <1> .writemsg   db "error writing $"
   196 00002514 74696E672024        <1>
   197 0000251A 41626F727424        <1> .abortmsg   db "Abort$" 
   198 00002520 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   199 00002527 526574727924        <1> .retrymsg   db "Retry$"
   200 0000252D 4661696C24          <1> .failmsg    db "Fail$"
   201 00002532 2C2024              <1> .betweenMsg db ", $"
   202 00002535 3F2024              <1> .endMsg     db "? $"
   203 00002538 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   204                              <1> 
   205                              <1> int43h:
   206 0000253C F9                  <1>     stc     ;Set CF to kill the task
   207 0000253D C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    18                                  %include "./Source/Utils/COMMAND/Data/cmdEnv.asm"
    19                              <1>     
    20                              <1> masterEnv:  ;Yeet this is this is a child command processor
    21 00002540 5F3A434F4D4D414E44- <1>     db "_:COMMAND.COM",0
    21 00002549 2E434F4D00          <1>
    22 0000254E 504154483D0000      <1>     db "PATH=",0,0  ;Terminate with two null bytes
    23 00002555 202020202020202020- <1>     db ($ - masterEnv) dup (" ")    ;Pad the environment with spaces
    23 0000255E 202020202020202020- <1>
    23 00002567 202020              <1>
    24                              <1> endOfAlloc: ;Symbol to find the start of where I can yeet 
    19                                  %include "./Source/Utils/COMMAND/Source/cmdLdr.asm"
    20                              <1> cmdLdr:
    21                              <1> ;First check if the version is ok. If not, return.
    22 0000256A B430                <1>     mov ah, 30h
    23 0000256C CD41                <1>     int 41h
    24 0000256E 3C01                <1>     cmp al, 01h ;Version 1
    25 00002570 760D                <1>     jbe .okVersion
    26 00002572 488D15CD010000      <1>     lea rdx, badVerStr
    27 00002579 B409                <1>     mov ah, 09h
    28 0000257B CD41                <1>     int 41h
    29 0000257D CD40                <1>     int 40h ;Exit to caller or DOS to print bad command interpreter line
    30                              <1> .okVersion:
    31                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    32 0000257F 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    33 00002583 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    34 00002587 48890581DAFFFF      <1>     mov qword [realParent], rax ;Preserve the real parent address
    35                              <1> ;Setup Int 42h, Int 43h and Int 44h
    36 0000258E 498B400A            <1>     mov rax, qword [r8 + psp.oldInt42h] ;Preserve the original addresses
    37 00002592 4889058DDAFFFF      <1>     mov qword [parentInt42], rax
    38                              <1> 
    39 00002599 488D150CFDFFFF      <1>     lea rdx, critErrorHandler
    40 000025A0 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    41 000025A4 B844250000          <1>     mov eax, 2544h
    42 000025A9 CD41                <1>     int 41h
    43 000025AB 488D158AFFFFFF      <1>     lea rdx, int43h
    44 000025B2 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    45 000025B6 B843250000          <1>     mov eax, 2543h
    46 000025BB CD41                <1>     int 41h
    47 000025BD 488D1576E5FFFF      <1>     lea rdx, applicationReturn
    48 000025C4 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    49 000025C8 B842250000          <1>     mov eax, 2542h
    50 000025CD CD41                <1>     int 41h
    51                              <1> ;Get a pointer to DOS Sysvars
    52 000025CF B452                <1>     mov ah, 52h ;Get sysvars
    53 000025D1 CD41                <1>     int 41h
    54 000025D3 48891D3DDAFFFF      <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    55                              <1> ;Call for simple internationalisation data
    56 000025DA B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    57 000025DF CD41                <1>     int 41h
    58 000025E1 3CFF                <1>     cmp al, -1
    59 000025E3 7412                <1>     je .skipSwitch
    60 000025E5 881539DAFFFF        <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    61 000025EB 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    62 000025EE 7507                <1>     jne .skipSwitch
    63 000025F0 C6052CDAFFFF2F      <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    64                              <1> .skipSwitch:
    65 000025F7 B800380000          <1>     mov eax, 3800h  ;Get current country data
    66 000025FC 488D152BDAFFFF      <1>     lea rdx, ctryData
    67 00002603 CD41                <1>     int 41h ;Write the data to the internal country table
    68                              <1> ;Now determine if this is the master copy of COMMAND.COM
    69                              <1> ;Check if Int 4Eh has the same address as Int 4Dh. If so, we are master.
    70 00002605 B84E350000          <1>     mov eax, 354Eh  ;Get int 4Eh address
    71 0000260A CD41                <1>     int 41h
    72 0000260C 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    73 0000260F B84D350000          <1>     mov eax, 354Dh  ;Get int 4Dh address
    74 00002614 CD41                <1>     int 41h
    75 00002616 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    76 00002619 755C                <1>     jne .skipMaster
    77                              <1> ;Ok so we are master command.com
    78                              <1> ;Now make myself the real parent
    79 0000261B C60503DAFFFFFF      <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    80 00002622 4C8905E6D9FFFF      <1>     mov qword [realParent], r8
    81                              <1> ;Set master environment as mine
    82 00002629 488D0510FFFFFF      <1>     lea rax, masterEnv
    83 00002630 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    84                              <1> ;Set current Drive in COMSPEC
    85 00002634 B019                <1>     mov al, 19h ;Get current Drive
    86 00002636 CD41                <1>     int 41h
    87 00002638 0441                <1>     add al, "A"
    88 0000263A 880500FFFFFF        <1>     mov byte [masterEnv], al
    89                              <1> ;Set Int 4Eh up
    90 00002640 488D156DE9FFFF      <1>     lea rdx, int4Eh
    91 00002647 B84E250000          <1>     mov eax, 254Eh ;Set this as Int 4Eh
    92 0000264C CD41                <1>     int 41h
    93                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    94                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    95 0000264E 488D1518DFFFFF      <1>     lea rdx, crlf
    96 00002655 B409                <1>     mov ah, 09h
    97 00002657 CD41                <1>     int 41h
    98 00002659 E861EFFFFF          <1>     call time
    99 0000265E E896EEFFFF          <1>     call date
   100 00002663 488D1503DFFFFF      <1>     lea rdx, crlf
   101 0000266A B409                <1>     mov ah, 09h
   102 0000266C CD41                <1>     int 41h
   103 0000266E 488D1DF5FEFFFF      <1>     lea rbx, endOfAlloc ;Save the Master Environment
   104 00002675 EB32                <1>     jmp short .printInit
   105                              <1> .skipMaster:
   106 00002677 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
   107 0000267E 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
   108 00002686 0FB60597D9FFFF      <1>     movzx eax, byte [switchChar]
   109 0000268D F2AE                <1>     repne scasb
   110 0000268F 67E310              <1>     jecxz .noSwitches
   111 00002692 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
   112 00002695 24DF                <1>     and al, 0DFh    ;Convert to UC
   113 00002697 3C50                <1>     cmp al, "P" ;Is it permanent switch?
   114 00002699 7507                <1>     jne .noSwitches
   115 0000269B C60583D9FFFFFF      <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
   116                              <1> .noSwitches:
   117 000026A2 488D1D97FEFFFF      <1>     lea rbx, masterEnv  ;This is the base address to jettison
   118                              <1> .printInit:
   119                              <1> ;Finish by printing INIT string.
   120 000026A9 53                  <1>     push rbx
   121 000026AA 488D1521000000      <1>     lea rdx, initString
   122 000026B1 B409                <1>     mov ah, 09h
   123 000026B3 CD41                <1>     int 41h ;Print init string
   124 000026B5 E87FF2FFFF          <1>     call version.printVersionNumber
   125 000026BA 488D1547000000      <1>     lea rdx, initString2
   126 000026C1 B409                <1>     mov ah, 09h
   127 000026C3 CD41                <1>     int 41h ;Print init string
   128 000026C5 5B                  <1>     pop rbx
   129 000026C6 48892538D9FFFF      <1>     mov qword [stackBottom], rsp    ;Use this to save where to reset rsp to
   130 000026CD E954E4FFFF          <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   131                              <1> ;Loader Data here
   132                              <1> initString: 
   133 000026D2 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   133 000026DB 66696320436F6D7075- <1>
   133 000026E4 746572205265736561- <1>
   133 000026ED 726368285229205343- <1>
   133 000026F6 502F444F5328522920- <1>
   133 000026FF 56657273696F6E2024  <1>
   134                              <1> initString2:
   135 00002708 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Reserach 2022.",CR,LF,"$"
   135 00002711 202020284329436F70- <1>
   135 0000271A 797269676874205363- <1>
   135 00002723 69656E746966696320- <1>
   135 0000272C 436F6D707574657220- <1>
   135 00002735 526573657261636820- <1>
   135 0000273E 323032322E0D0A24    <1>
   136 00002746 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   136 0000274F 20444F532076657273- <1>
   136 00002758 696F6E0D0A24        <1>
   136          ------------------  <1>  info: assembly required 1+2+2 passes

