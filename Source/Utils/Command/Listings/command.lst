     1                                  ;COMMAND.COM main file
     2                                  [map all ./Source/Utils/COMMAND/Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Source/Include/dosMacro.mac"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------------------------------
     9                              <1> ;Generic Macros file
    10                              <1> ;The following instruction extensions allow to conditionally return
    11                              <1> ;The idea was borrowed from the DOS Source Code
    12                              <1> ;
    13                              <1> ;-------------------------------------------------------------------------------
    14                              <1> 
    15                              <1> ;-------------------------------------------------------------------------------
    16                              <1> ;These macros are live and must not be touched
    17                              <1> ;-------------------------------------------------------------------------------
    18                              <1> %macro return 0
    19                              <1> %%_ret:
    20                              <1>     ret
    21                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    22                              <1> %endmacro
    23                              <1> 
    24                              <1> %macro cret 1
    25                              <1> %%_base:
    26                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    27                              <1>     %ifdef retOff
    28                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <1>     %ifdef currSegVBase
    30                              <1>     j%+1 short (retOff+currSegVBase)
    31                              <1>     %else
    32                              <1>     j%+1 short retOff
    33                              <1>     %endif  ;End ifdef currSegVBase
    34                              <1>     %else 
    35                              <1>     j%-1 short %%a
    36                              <1>     return
    37                              <1> %%a:
    38                              <1>     %endif  ;End the distance measurement if
    39                              <1>     %else   
    40                              <1>     j%-1 short %%a
    41                              <1>     return
    42                              <1> %%a:
    43                              <1>     %endif  ;End ifdef retoff
    44                              <1> %endmacro
    45                              <1> 
    46                              <1> %macro retz 0
    47                              <1> cret z
    48                              <1> %endmacro
    49                              <1> 
    50                              <1> %macro retnz 0
    51                              <1> cret nz
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> %macro rete 0
    55                              <1> cret e
    56                              <1> %endmacro
    57                              <1> 
    58                              <1> %macro retne 0
    59                              <1> cret ne
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> %macro retc 0
    63                              <1> cret c
    64                              <1> %endmacro
    65                              <1> 
    66                              <1> %macro retnc 0
    67                              <1> cret nc
    68                              <1> %endmacro
    69                              <1> 
    70                              <1> %macro retb 0
    71                              <1> cret b
    72                              <1> %endmacro
    73                              <1> 
    74                              <1> %macro retnb 0
    75                              <1> cret nb
    76                              <1> %endmacro
    77                              <1> 
    78                              <1> %macro reta 0
    79                              <1> cret a
    80                              <1> %endmacro
    81                              <1> 
    82                              <1> %macro retna 0
    83                              <1> cret na
    84                              <1> %endmacro
    85                              <1> 
    86                              <1> %macro breakpoint 0
    87                              <1> xchg bx, bx
    88                              <1> %endmacro
     7                                  %include "./Source/Include/dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    27 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    32 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Only affects for SUBST drives, not JOIN
    69                              <1> ; Flags: Bit 15 set = Network drive
    70                              <1> ;        Bit 14 set = Physical drive
    71                              <1> ;        Bit 13 set = JOIN'ed drive
    72                              <1> ;        Bit 12 set = SUBST'ed drive
    73                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    74                              <1> endstruc
    75                              <1> ;CDS equates
    76                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    77                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    78                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    79                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    80                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    81                              <1> ;------------------------------------------------------------------------;
    82                              <1> ; The SFT is a way to allow applications to open file handles to files 
    83                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    84                              <1> ; under the first header, and then a second header will be linked to the 
    85                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    86                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    87                              <1> ; using the FCBS= command. Default FCBS=5.
    88                              <1> ;
    89                              <1> ; A file handle describes the file, and the location within the file that
    90                              <1> ; we are reading. The file handle can be manipulated without the file
    91                              <1> ; being in memory, thus allowing the user to access data without needing 
    92                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    93                              <1> ; accessing devices, by treating them as files with their drivers 
    94                              <1> ; responding and translating the manipulations of the file handle itself.
    95                              <1> ; Neither the driver nor the application should see or use the SFT for
    96                              <1> ; the handle, as it is subject to change (and will change when file 
    97                              <1> ; sharing provisions are included). The DOS will make requests to the 
    98                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    99                              <1> ; track of the information in the SFT entry for that handle. 
   100                              <1> ;
   101                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   102                              <1> ; can point to the same file. It all depends on what the applications 
   103                              <1> ; want to do with the File.
   104                              <1> ;
   105                              <1> ; !!!!IMPORTANT!!!!
   106                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   107                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   108                              <1> ;
   109                              <1> ;Each SFT may look like this:
   110                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   111                              <1> ;            |                |
   112                              <1> ;       wNumFiles*sft    wNumFiles*sft
   113                              <1> ;
   114                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   115                              <1> ; System FCBs.
   116                              <1> ;
   117                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   118                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   119                              <1> ;
   120                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   121                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   122                              <1> ;------------------------------------------------------------------------;
   123                              <1> struc sfth   ;System file table header
   124                              <1> ; This is the SFT header.
   125                              <1> ; This structure comes before the start of the first file in the array/table.
   126 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   127 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   128                              <1> endstruc
   129                              <1> 
   130                              <1> struc sft
   131                              <1> ;This is the file struc itself
   132 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   133 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   134 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   135 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   136 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   137 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   138 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   139 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   140 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   141 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   142 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   143 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   144 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   145 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   146 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   147 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   148 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   149 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   150 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   151                              <1> ;                           0 means no record
   152                              <1> endstruc
   153                              <1> ;Open Mode equates
   154                              <1> ;Access modes   Bits[2:0]
   155                              <1> ReadAccess      equ 0h
   156                              <1> WriteAccess     equ 1h
   157                              <1> RWAccess        equ 2h
   158                              <1> ;Bit 3 reserved 0
   159                              <1> ;Sharing modes  Bits[6:4]
   160                              <1> CompatShare     equ 0h
   161                              <1> denyRWShare     equ 10h
   162                              <1> denyWriteShare  equ 20h
   163                              <1> denyReadShare   equ 30h
   164                              <1> denyNoneShare   equ 40h
   165                              <1> netFCBShare     equ 70h
   166                              <1> noInherit       equ 80h
   167                              <1> ;Bits 8-12 reserved 0
   168                              <1> 
   169                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   170                              <1> ;Buffering on writes
   171                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   172                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   173                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   174                              <1> ;Attribute Byte
   175                              <1> readOnlyFile    equ 1h
   176                              <1> hiddenFile      equ 2h
   177                              <1> systemFile      equ 4h
   178                              <1> volumeLabel     equ 8h
   179                              <1> directoryFile   equ 10h ;Directory entry
   180                              <1> archiveFile     equ 20h
   181                              <1> ;Device Info equates
   182                              <1> ;For a block device, bits [5:0] contain the drive number
   183                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   184                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   185                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   186                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   187                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   188                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   189                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   190                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   191                              <1> devCharDev      equ 80h ;If set, it is a char device!
   192                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   193                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   194                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   195                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   196                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   197                              <1>  
   198                              <1> ;------------------------------------------------------------------------;
   199                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   200                              <1> ; to an internal buffer, and then copying it to the specified location
   201                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   202                              <1> ; another request for the same sector from the same device is made, so 
   203                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   204                              <1> ; size, selected according to the largest detected sector size during 
   205                              <1> ; the initial loadup.
   206                              <1> ;
   207                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   208                              <1> ;
   209                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   210                              <1> ;------------------------------------------------------------------------;
   211                              <1> 
   212                              <1> struc bufferHdr
   213 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   214 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   215 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   216 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   217 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   218 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   219 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   220 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   221 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   222                              <1>     .dataarea:             ;Points to the start of the data area
   223                              <1> endstruc
   224                              <1> ;Buffer Flag equates
   225                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   226                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   227                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   228                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   229                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   230                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   231                              <1> ;Note! A buffer is marked as referenced only when the application 
   232                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> ; Memory control block for each memory arena
   235                              <1> ;------------------------------------------------------------------------;
   236                              <1> struc mcb
   237 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   238 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   239 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   240 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbMarkCtn      equ "M"
   248                              <1> mcbMarkEnd      equ "Z"
   249                              <1> 
   250                              <1> memFirstFit     equ 0   ;First free block goes to application
   251                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   252                              <1> memLastFit      equ 2   ;Last free block goes to application
   253                              <1> 
   254                              <1> ;Owner = Para aligned address => Owning application PSP
   255                              <1> ;...To consider...
   256                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   257                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   258                              <1> ;------------------------------------------------------------------------;
   259                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   260                              <1> ; following order, thus allowing for return values to be placed in the 
   261                              <1> ; registers by accessing the caller register stack frame.
   262                              <1> ;------------------------------------------------------------------------;
   263                              <1> struc callerFrame
   264 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   265 00000008 ????????????????    <1>     .rbx    resq 1    
   266 00000010 ????????????????    <1>     .rcx    resq 1
   267 00000018 ????????????????    <1>     .rdx    resq 1
   268 00000020 ????????????????    <1>     .rsi    resq 1
   269 00000028 ????????????????    <1>     .rdi    resq 1
   270 00000030 ????????????????    <1>     .rbp    resq 1
   271 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   272 00000040 ????????????????    <1>     .r9     resq 1
   273                              <1> ;Pushed by Processor when invoked via Interrupt
   274 00000048 ????????????????    <1>     .rip    resq 1
   275 00000050 ????????????????    <1>     .cs     resq 1
   276 00000058 ????????????????    <1>     .flags  resq 1
   277                              <1> endstruc
   278                              <1> 
   279                              <1> struc dpl
   280                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   281                              <1> ; server calls
   282 00000000 ????????????????    <1>     .rax    resq 1
   283 00000008 ????????????????    <1>     .rbx    resq 1
   284 00000010 ????????????????    <1>     .rcx    resq 1
   285 00000018 ????????????????    <1>     .rdx    resq 1
   286 00000020 ????????????????    <1>     .rsi    resq 1
   287 00000028 ????????????????    <1>     .rdi    resq 1
   288 00000030 ????????????????    <1>     .r8     resq 1
   289 00000038 ????????????????    <1>     .r9     resq 1
   290 00000040 ????????????????    <1>     .align  resq 1
   291 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   292 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   293                              <1> endstruc
   294                              <1> 
   295                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   296 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   297 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   298 00000010 ????????????????    <1>     .newSFTVal      resq 1
   299 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   300 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   301 00000028 ????????????????    <1>     .newLastdrive   resq 1
   302 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   303 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   304 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   305 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   306 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   307 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   308 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc filename
   312                              <1> ;8.3 File name struct
   313 00000000 ????????????????    <1>     .fName  resb 8
   314 00000008 ??????              <1>     .fExt   resb 3
   315                              <1> endstruc
   316                              <1> 
   317                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   318 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   319 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   320 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   321 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   322 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   323 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   324 00000016 ????                <1>     .fileTime   resw 1  ;File time
   325 00000018 ????                <1>     .fileDate   resw 1  ;File date
   326 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   327 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc psp
   331 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   332 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   333 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   334 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   335 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   336 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   337 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   338 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   339 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   340 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   341 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   342 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   343 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   344 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   345                              <1> ;Extra handle arrays are grouped into a linked list
   346                              <1> ;The below are in the same place as in DOS
   347 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   348 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   349                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   350 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   351 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   352                              <1> endstruc
   353                              <1> 
   354                              <1> struc clkStruc
   355 00000000 ????                <1>     .dateWord   resw 1
   356 00000002 ??                  <1>     .minutes    resb 1
   357 00000003 ??                  <1>     .hours      resb 1
   358 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   359 00000005 ??                  <1>     .seconds    resb 1
   360                              <1> endstruc
   361                              <1> 
   362                              <1> struc countryStruc
   363 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   364                              <1>                         ;0 = month day year hh:mm:ss
   365                              <1>                         ;1 = day month year hh:mm:ss
   366                              <1>                         ;2 = year month day hh:mm:ss
   367 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   368 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   369 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   370 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   371 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   372 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   373                              <1>                         ;0 = Symbol leads, without space
   374                              <1>                         ;1 = Symbol follows, without space
   375                              <1>                         ;2 = Symbol leads, one space
   376                              <1>                         ;3 = Symbol follows, one space
   377                              <1>                         ;4 = Symbol replace decimal separator
   378 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   379 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   380 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   381 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   382 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   383                              <1> endstruc
   384                              <1> 
   385                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   386                              <1> ;for a space of 64Gb
   387                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   388                              <1> dosLowBase  equ 600h    ;Low load address
   389                              <1> 
   390                              <1> ;Critical Error AH bitfield equates
   391                              <1> critRead    equ 0h
   392                              <1> critWrite   equ 1h
   393                              <1> critDOS     equ 0h
   394                              <1> critFAT     equ 2h
   395                              <1> critDir     equ 4h
   396                              <1> critData    equ 6h
   397                              <1> critFailOK  equ 8h
   398                              <1> critRetryOK equ 10h
   399                              <1> critIgnorOK equ 20h
   400                              <1> critCharDev equ 80h
   401                              <1> 
   402                              <1> critIgnore  equ 0
   403                              <1> critRetry   equ 1
   404                              <1> critAbort   equ 2
   405                              <1> critFail    equ 3
   406                              <1> 
   407                              <1> ;MISC ASCII control chars
   408                              <1> NUL equ 00h ;^@         | ASCII Null
   409                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   410                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   411                              <1> BEL equ 07h ;^G         | ASCII Bell
   412                              <1> BSP equ 08h ;^H         | ASCII Backspace
   413                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   414                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   415                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   416                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   417                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   418                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   419                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   420                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   421                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   422                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   423                              <1> SPC equ 20h ;Printable  | ASCII Space
   424                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   425                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   426                              <1> 
   427                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   428                              <1> ;Extended Ascii Codes
   429                              <1> eF1     equ 3Bh ;F1 second byte
   430                              <1> eF2     equ 3Ch ;F2 second byte
   431                              <1> eF3     equ 3Dh ;F3 second byte
   432                              <1> eF4     equ 3Eh ;F4 second byte
   433                              <1> eF5     equ 3Fh ;F5 second byte
   434                              <1> eF6     equ 40h ;F6 second byte
   435                              <1> eF7     equ 41h ;F7 second byte
   436                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   437                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   438                              <1> eIns    equ 52h ;Insert second byte
   439                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   440                              <1> 
   441                              <1> ;Default Configuration for the system
   442                              <1> 
   443                              <1> buffersDefault  equ 30
   444                              <1> filesDefault    equ 20
   445                              <1> fcbsDefault     equ 4
   446                              <1> safeFcbsDeflt   equ 0
   447                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Source/Include/fcbStruc.inc"
     9                              <1> ;FCB related structures
    10                              <1> 
    11                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
    12                              <1> ;This field also used for random read/write ops to find the right record
    13                              <1> struc fcb
    14 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    15 00000001 ????????????????    <1>     .filename   resb 8
    16 00000009 ??????              <1>     .fileext    resb 3
    17 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    18                              <1> ;One block consists of 128 records, of size denoted in the below
    19 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    20 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    21 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    22 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    23                              <1>     ;----------------------------------------
    24                              <1>     ;Internal Records
    25 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    26 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    27 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    28                              <1>     ;----------------------------------------
    29 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    30 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    31                              <1> endstruc
    32                              <1> 
    33                              <1> struc exFcb
    34 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    35 00000001 ??????????          <1>     .reserved   resb 5  
    36 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    37 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    38 00000008 ????????????????    <1>     .filename   resb 8
    39 00000010 ??????              <1>     .fileext    resb 3
    40 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    41                              <1> ;One block consists of 128 records, of size denoted in the below
    42 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    43 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    44 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    45 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    46                              <1>     ;----------------------------------------
    47                              <1>     ;Internal Records
    48 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    49 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    50 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    51                              <1>     ;----------------------------------------
    52 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    53 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    54                              <1> endstruc
    55                              <1> 
    56                              <1> struc renameFcb
    57                              <1> ;Used for accessing the names and drive letter for renaming
    58                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    59 00000000 ??                  <1>     .driveNum   resb 1
    60 00000001 ????????????????    <1>     .filename   resb 8
    61 00000009 ??????              <1>     .fileext    resb 3
    62 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    63 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    64 00000011 ????????????????    <1>     .newName    resb 8
    65 00000019 ??????              <1>     .newExt     resb 3
    66 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    67                              <1> endstruc
    68                              <1> 
    69                              <1> ;FCBmode equates:
    70                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    71                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    72                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    73                              <1> fcbShareOn  equ 80h
    74                              <1> fcbCharDev  equ 40h
    75                              <1> fcbLocal    equ 40h
    76                              <1> 
    77                              <1> ;Structures of the special 6 bytes
    78                              <1> 
    79                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    80                              <1> struc noShare   
    81 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    82 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    83 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    84 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    85                              <1> endstruc
    86                              <1> 
    87                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    88                              <1> struc shareLocal    
    89 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    90 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    91 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    92                              <1> endstruc
    93                              <1> 
    94                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    95                              <1> struc shareNet
    96                              <1> ;All three fields too small for FAT32
    97 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    98 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    99 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   100                              <1> endstruc
     9                                  %include "./Source/Include/dosError.inc"
    10                              <1> ;DOS Error codes
    11                              <1> 
    12                              <1> ;Extended Error Codes
    13                              <1> errInvFnc   equ 1   ;Invalid function number
    14                              <1> errFnf      equ 2   ;File not found
    15                              <1> errPnf      equ 3   ;Path not found
    16                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    17                              <1> errAccDen   equ 5   ;Access denied (to resource)
    18                              <1> errBadHdl   equ 6   ;Invalid handle
    19                              <1> errMCBbad   equ 7   ;MCB's destroyed
    20                              <1> errNoMem    equ 8   ;Insufficient memory
    21                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    22                              <1> errBadEnv   equ 10  ;Invalid environment
    23                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    24                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    25                              <1> errInvDat   equ 13  ;Invalid data
    26                              <1> ;           equ 14  ;Reserved
    27                              <1> errBadDrv   equ 15  ;Invalid drive specified
    28                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    29                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    30                              <1> errNoFil    equ 18  ;No more files, no match found
    31                              <1> ;The following are Driver error codes + 19
    32                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    33                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    34                              <1> errUnkUnt   equ 20  ;Unknown Unit
    35                              <1> errDrvNR    equ 21  ;Drive not ready
    36                              <1> errUnkCmd   equ 22  ;Unknown Command
    37                              <1> errCRCerr   equ 23  ;Data (CRC) error
    38                              <1> errBadRLn   equ 24  ;Bad request structure length
    39                              <1> errSekErr   equ 25  ;Seek error
    40                              <1> errUnkMed   equ 26  ;Unknown media type
    41                              <1> errSecNF    equ 27  ;Sector not Found
    42                              <1> errNoPap    equ 28  ;Printer out of paper
    43                              <1> errWF       equ 29  ;Write fault
    44                              <1> errRF       equ 30  ;Read fault
    45                              <1> errGF       equ 31  ;General fault
    46                              <1> ;----------------------------------------------
    47                              <1> ;The following two go inbetween the Disk errors
    48                              <1> errShrVio   equ 32  ;Sharing violations
    49                              <1> errLokVio   equ 33  ;File Lock violation
    50                              <1> ;----------------------------------------------
    51                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    52                              <1> errNoFCB    equ 35  ;FCB unavailable
    53                              <1> errShrFul   equ 36  ;Sharing buffer full
    54                              <1> 
    55                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    56                              <1> 
    57                              <1> errFilExist equ 80  ;File already exists
    58                              <1> errDirExist equ 82  ;Directory already exists
    59                              <1> errFI44     equ 83  ;Fail on INT 44h
    60                              <1> errRedir    equ 84  ;Too many levels of redirection
    61                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    62                              <1> errBadPass  equ 86  ;Bad password
    63                              <1> errBadParam equ 87  ;Bad parameter passed to request
    64                              <1> errNetWrite equ 88  ;Network Write Fault
    65                              <1> ;-----------------------------------------------------------------------------
    66                              <1> ;Error Loci
    67                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    68                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    69                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    70                              <1> eLocChr     equ 4   ;Serial/Character Device error
    71                              <1> eLocMem     equ 5   ;Related to RAM
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error Actions
    74                              <1> eActRet     equ 1   ;Retry
    75                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    76                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    77                              <1> eActAbt     equ 4   ;Abort with cleanup
    78                              <1> eActKil     equ 5   ;Abort without cleanup
    79                              <1> eActIgn     equ 6   ;Ignore error
    80                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    81                              <1> ;-----------------------------------------------------------------------------
    82                              <1> ;Error classes
    83                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    84                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    85                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    86                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    87                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    88                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    89                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    90                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    91                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    92                              <1> eClsLocked  equ 10  ;Resource Locked
    93                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    94                              <1> eClsClash   equ 12  ;Resource already exists!
    95                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Source/Utils/COMMAND/Data/cmdEqu.asm"
    11                              <1> ;Data equates and struct declarations
    12                              <1> 
    13                              <1> cmdBufferL  equ 128 ;Length of a command line buffer
    14                              <1> driveSpecL  equ 2   ;Space for X:
    15                              <1> dirPathL    equ 64  ;Length of a directory path
    16                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
    17                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
    18                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
    19                              <1> fullDirPathL equ driveSpecL + dirPathL
    20                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    21                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    22                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    23                              <1> 
    24                              <1> ;Use PSP FCB's for switch buffers
    25                              <1> fcb1        equ psp.fcb1
    26                              <1> fcb2        equ psp.fcb2
    27                              <1> ;Use the dta as the built command line buffer.
    28                              <1> cmdLineCnt  equ psp.parmList
    29                              <1> cmdLine     equ psp.progTail
    30                              <1> 
    31                              <1> 
    32                              <1> ;Struct Declarations
    33                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    34 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    35 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    36 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    37 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    38 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    39                              <1> endstruc
    40                              <1> 
    41                              <1> struc execProg  ;For use with EXEC-ing a child task
    42 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    43 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    44 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    45 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    46                              <1> endstruc
    47                              <1> 
    48                              <1> ;Directory attribute equates
    49                              <1>     dirReadOnly     equ 01h
    50                              <1>     dirHidden       equ 02h
    51                              <1>     dirSystem       equ 04h
    52                              <1>     dirVolumeID     equ 08h
    53                              <1>     dirDirectory    equ 10h
    54                              <1>     dirArchive      equ 20h
    55                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    56                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    57                              <1>     ;If any of the three bits are set, then ALL three bits are set
    58                              <1>     ; in addition to whatever the user passed to search for.
    59                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    60                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Source/Utils/COMMAND/Data/cmdData.asm"
    13                              <1> ;Static Data Area for COMMAND.COM    
    14                              <1> startLbl:   ;Start symbol, this is the entry point
    15 00000000 E9A02A0000          <1>     jmp cmdLdr
    16 00000005 0000000000000000    <1> stackBottom dq 0    ;Pointer to the top of the stack as allocated by DOS
    17 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
    18 0000000F FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
    19 00000017 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
    20 0000001F 1400                <1> numHdls     dw 20   ;Get number of handles permitted, hardcoded in this version
    21 00000021 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    22 00000023 5C                  <1> pathSep     db "\"  ;Default path sep
    23 00000024 2F                  <1> switchChar  db "/"  ;Default switch char
    24 00000025 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    25 00000026 0000000000000000    <1> parentInt42 dq 0    ;Stores the parent values to restore upon exiting if it can
    26                              <1> ;Static strings, not used in command line parsing
    27 0000002E 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    27 00000037 000000000000000000- <1>
    27 00000040 000000000000000000- <1>
    27 00000049 000000000000000000- <1>
    27 00000052 0000                <1>
    28 00000054 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    28 0000005D 000000000000000000- <1>
    28 00000066 000000000000000000- <1>
    28 0000006F 000000000000000000- <1>
    28 00000078 000000000000000000- <1>
    28 00000081 000000000000000000- <1>
    28 0000008A 000000000000000000- <1>
    28 00000093 00000000            <1>
    29                              <1> 
    30                              <1> 
    31                              <1> cmdLineStatePtr:
    32 00000097 00                  <1> cmdStartOff db 0    ;Offset to the first char for this command (may be a space)
    33 00000098 00                  <1> cmdEndOff   db 0    ;Offset to the terminating char for this command (0Dh or |)
    34 00000099 00                  <1> pipeFlag    db 0    ;If set, we are piping across a command
    35 0000009A 0000                <1> pipeHndl    dw 0    ;If pipeFlag set, this var has the handle to the pipe file
    36 0000009C 000000000000000000- <1> pipeName    db 13 dup 0, ;Space for name of the pipe file we created.
    36 000000A5 00000000            <1>
    37                              <1> 
    38                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    39                              <1> ;These variables are valid for a SINGLE command in a command line
    40 000000A9 0000                <1> cmdDrvSpec  dw 0    ;Read the first word in to see if the pathspec has drivespec
    41 000000AB 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    42 000000AC 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    43                              <1> ;                    If 2, we are redirecting output to a file, by appending
    44                              <1> ;FLG and SWCH are read as a word when checking if argX is a switch
    45 000000AD 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    46 000000AE 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    47 000000AF 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    48                              <1> 
    49 000000B0 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    50 000000B1 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    51 000000B2 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    52                              <1> 
    53                              <1> cmdStateL equ $ - cmdStatePtr
    54                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    55                              <1> 
    56                              <1> ;Structs and strings
    57                              <1> 
    58 000000B3 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    58 000000BC 00000000000000      <1>
    59 000000C3 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    59 000000CC 000000000000000000- <1>
    59 000000D5 000000000000000000- <1>
    59 000000DE 000000000000000000- <1>
    59 000000E7 00000000000000      <1>
    60                              <1> 
    61 000000EE 000000000000000000- <1> launchBlock db execProg_size dup (0)
    61 000000F7 000000000000000000- <1>
    61 00000100 000000000000000000- <1>
    61 00000109 0000000000          <1>
    62                              <1> 
    63 0000010E 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    63 00000117 000000000000000000- <1>
    63 00000120 000000000000000000- <1>
    63 00000129 000000000000000000- <1>
    63 00000132 000000000000000000- <1>
    63 0000013B 000000000000000000- <1>
    63 00000144 000000000000000000- <1>
    63 0000014D 000000000000000000- <1>
    63 00000156 000000000000000000- <1>
    63 0000015F 000000000000000000- <1>
    63 00000168 000000000000000000- <1>
    63 00000171 000000000000000000- <1>
    63 0000017A 000000000000000000- <1>
    63 00000183 000000000000000000- <1>
    63 0000018C 0000                <1>
    64 0000018E 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    64 00000197 000000000000000000- <1>
    64 000001A0 000000000000000000- <1>
    64 000001A9 000000000000000000- <1>
    64 000001B2 000000000000000000- <1>
    64 000001BB 000000000000000000- <1>
    64 000001C4 000000000000000000- <1>
    64 000001CD 000000000000000000- <1>
    64 000001D6 000000000000000000- <1>
    64 000001DF 000000000000000000- <1>
    64 000001E8 000000000000000000- <1>
    64 000001F1 000000000000000000- <1>
    64 000001FA 000000000000000000- <1>
    64 00000203 000000000000000000- <1>
    64 0000020C 0000                <1>
    65 0000020E 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)  ;Space for full path to a external command
    65 00000217 000000000000000000- <1>
    65 00000220 000000000000000000- <1>
    65 00000229 000000000000000000- <1>
    65 00000232 000000000000000000- <1>
    65 0000023B 000000000000000000- <1>
    65 00000244 000000000000000000- <1>
    65 0000024D 000000000000000000- <1>
    65 00000256 00000000000000      <1>
    66                              <1> 
    67 0000025D 000000000000000000- <1> fcbCmdSpec  db fcbNameL dup (0) ;Used to make a FCB style name for the file
    67 00000266 0000                <1>
    68 00000268 000000000000000000- <1> cmdSpec     db fileNameZL dup (0)   ;ASCIIZ command spec for the command name
    68 00000271 00000000            <1>
    69 00000275 000000000000000000- <1> cmdName     db cmdNameL dup (0) ;Command name string prefixed by length of word
    69 0000027E 0000000000          <1>
    70                              <1> 
    71 00000283 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    71 0000028C 000000000000000000- <1>
    71 00000295 000000000000000000- <1>
    71 0000029E 000000000000000000- <1>
    71 000002A7 000000000000000000- <1>
    71 000002B0 000000000000000000- <1>
    71 000002B9 000000000000000000- <1>
    71 000002C2 000000000000000000- <1>
    71 000002CB 00000000000000      <1>
    72 000002D2 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    72 000002DB 000000000000000000- <1>
    72 000002E4 000000000000000000- <1>
    72 000002ED 000000000000000000- <1>
    72 000002F6 000000000000000000- <1>
    72 000002FF 000000000000000000- <1>
    72 00000308 000000000000000000- <1>
    72 00000311 000000000000000000- <1>
    72 0000031A 00000000000000      <1>
    73                              <1> 
    74 00000321 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Contains the pathspec for the search file
    74 0000032A 000000000000000000- <1>
    74 00000333 000000000000000000- <1>
    74 0000033C 000000000000000000- <1>
    74 00000345 000000000000000000- <1>
    74 0000034E 000000000000000000- <1>
    74 00000357 000000000000000000- <1>
    74 00000360 000000000000000000- <1>
    74 00000369 000000000000000000- <1>
    74 00000372 000000000000000000- <1>
    74 0000037B 000000000000000000- <1>
    74 00000384 000000000000000000- <1>
    74 0000038D 000000000000000000- <1>
    74 00000396 000000000000000000- <1>
    74 0000039F 0000                <1>
    75                              <1> ;The above is larger than is needed/supported by DOS to allow for 
    76                              <1> ; users overtyping
    77                              <1> 
    78                              <1> ;Internal Function vars
    79                              <1> ;Dir Vars
    80 000003A1 00                  <1> dirPrnType  db 0    ;Print type.    Bit[0] set => /W or /w specified
    81                              <1> ;                                   Bit[1] set => /P or /p specified
    82 000003A2 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    83 000003A3 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    84 000003A4 00                  <1> dirDrv      db 0    ;0 based drive number to use
    85 000003A5 000000000000000000- <1> dirOldCWD   db cmdBufferL dup (0)   ;Space for CWD and any overspill 
    85 000003AE 000000000000000000- <1>
    85 000003B7 000000000000000000- <1>
    85 000003C0 000000000000000000- <1>
    85 000003C9 000000000000000000- <1>
    85 000003D2 000000000000000000- <1>
    85 000003DB 000000000000000000- <1>
    85 000003E4 000000000000000000- <1>
    85 000003ED 000000000000000000- <1>
    85 000003F6 000000000000000000- <1>
    85 000003FF 000000000000000000- <1>
    85 00000408 000000000000000000- <1>
    85 00000411 000000000000000000- <1>
    85 0000041A 000000000000000000- <1>
    85 00000423 0000                <1>
    86 00000425 000000000000000000- <1> dirPathArg  db cmdBufferL dup (0)   ;Copy the pathspec argument here if any
    86 0000042E 000000000000000000- <1>
    86 00000437 000000000000000000- <1>
    86 00000440 000000000000000000- <1>
    86 00000449 000000000000000000- <1>
    86 00000452 000000000000000000- <1>
    86 0000045B 000000000000000000- <1>
    86 00000464 000000000000000000- <1>
    86 0000046D 000000000000000000- <1>
    86 00000476 000000000000000000- <1>
    86 0000047F 000000000000000000- <1>
    86 00000488 000000000000000000- <1>
    86 00000491 000000000000000000- <1>
    86 0000049A 000000000000000000- <1>
    86 000004A3 0000                <1>
    87 000004A5 3F3F3F3F3F3F3F3F    <1> dirSrchPat  db 8 dup ("?")    ;We copy the search pattern here
    88 000004AD 2E                  <1> dirSPExt    db "."
    89 000004AE 3F3F3F              <1>             db 3 dup ("?")
    90                              <1> 
    91                              <1> ;Volume Vars
    92 000004B1 000000000000000000- <1> volLblSpc   db 13 dup (0)
    92 000004BA 00000000            <1>
    93 000004BE 00                  <1> volPathBuf  db 0 ;Drive LETTER goes here
    94 000004BF 3A5C2A2E2A00        <1>             db ":\*.*",0  ;This remains to build X:\*.*,0 for vol label search
    95                              <1> 
    96                              <1> ;Time/Date vars
    97 000004C5 00                  <1> td1 db 0    ;Minutes/Year
    98 000004C6 00                  <1> td2 db 0    ;Hours/Zero
    99 000004C7 00                  <1> td3 db 0    ;Hundredths/Day
   100 000004C8 00                  <1> td4 db 0    ;Seconds/Month
   101                              <1> 
   102                              <1> ;Rename/Copy Buffers
   103 000004C9 000000000000000000- <1> sourcePath  db cmdBufferL dup (0)
   103 000004D2 000000000000000000- <1>
   103 000004DB 000000000000000000- <1>
   103 000004E4 000000000000000000- <1>
   103 000004ED 000000000000000000- <1>
   103 000004F6 000000000000000000- <1>
   103 000004FF 000000000000000000- <1>
   103 00000508 000000000000000000- <1>
   103 00000511 000000000000000000- <1>
   103 0000051A 000000000000000000- <1>
   103 00000523 000000000000000000- <1>
   103 0000052C 000000000000000000- <1>
   103 00000535 000000000000000000- <1>
   103 0000053E 000000000000000000- <1>
   103 00000547 0000                <1>
   104 00000549 000000000000000000- <1> destPath    db cmdBufferL dup (0)
   104 00000552 000000000000000000- <1>
   104 0000055B 000000000000000000- <1>
   104 00000564 000000000000000000- <1>
   104 0000056D 000000000000000000- <1>
   104 00000576 000000000000000000- <1>
   104 0000057F 000000000000000000- <1>
   104 00000588 000000000000000000- <1>
   104 00000591 000000000000000000- <1>
   104 0000059A 000000000000000000- <1>
   104 000005A3 000000000000000000- <1>
   104 000005AC 000000000000000000- <1>
   104 000005B5 000000000000000000- <1>
   104 000005BE 000000000000000000- <1>
   104 000005C7 0000                <1>
   105                              <1> ;Copy Handles
   106 000005C9 FFFF                <1> sourceHdl   dw -1
   107 000005CB FFFF                <1> destHdl     dw -1
   108                              <1> 
   109 000005CD 000000000000000000- <1> copyBuffer  db 128 dup (0)  ;Copy up to 128 bytes at a time
   109 000005D6 000000000000000000- <1>
   109 000005DF 000000000000000000- <1>
   109 000005E8 000000000000000000- <1>
   109 000005F1 000000000000000000- <1>
   109 000005FA 000000000000000000- <1>
   109 00000603 000000000000000000- <1>
   109 0000060C 000000000000000000- <1>
   109 00000615 000000000000000000- <1>
   109 0000061E 000000000000000000- <1>
   109 00000627 000000000000000000- <1>
   109 00000630 000000000000000000- <1>
   109 00000639 000000000000000000- <1>
   109 00000642 000000000000000000- <1>
   109 0000064B 0000                <1>
    13                                  %include "./Source/Utils/COMMAND/Data/cmdTable.asm"
    14                              <1> ;Function dispatch table
    15                              <1> functionTable:
    16                              <1> ;Use Pascal strings with each row of hte table having three columns:
    17                              <1> ; Col 1, BYTE, Length of command
    18                              <1> ; Col 2, String, String representing the user input
    19                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
    20 0000064D 03444952            <1>     db 3, "DIR"
    21 00000651 1B12                <1>     dw dir - startLbl
    22                              <1> 
    23 00000653 024344              <1>     db 2, "CD"
    24 00000656 B315                <1>     dw chdir - startLbl
    25                              <1> 
    26 00000658 054348444952        <1>     db 5, "CHDIR"
    27 0000065E B315                <1>     dw chdir - startLbl
    28                              <1> 
    29 00000660 024D44              <1>     db 2, "MD"
    30 00000663 5B16                <1>     dw mkdir - startLbl
    31                              <1> 
    32 00000665 054D4B444952        <1>     db 5, "MKDIR"
    33 0000066B 5B16                <1>     dw mkdir - startLbl
    34                              <1> 
    35 0000066D 025244              <1>     db 2, "RD"
    36 00000670 A716                <1>     dw rmdir - startLbl
    37                              <1> 
    38 00000672 05524D444952        <1>     db 5, "RMDIR"
    39 00000678 A716                <1>     dw rmdir - startLbl
    40                              <1> 
    41 0000067A 0344454C            <1>     db 3, "DEL"
    42 0000067E 9F18                <1>     dw erase - startLbl
    43                              <1> 
    44 00000680 054552415345        <1>     db 5, "ERASE"
    45 00000686 9F18                <1>     dw erase - startLbl
    46                              <1> 
    47 00000688 0444415445          <1>     db 4, "DATE"
    48 0000068D C818                <1>     dw date - startLbl
    49                              <1> 
    50 0000068F 0454494D45          <1>     db 4, "TIME"
    51 00000694 8E19                <1>     dw time - startLbl
    52                              <1> 
    53 00000696 04434F5059          <1>     db 4, "COPY"
    54 0000069B F316                <1>     dw copy - startLbl
    55                              <1> 
    56 0000069D 0443545459          <1>     db 4, "CTTY"
    57 000006A2 261A                <1>     dw ctty - startLbl
    58                              <1> 
    59 000006A4 03434C53            <1>     db 3, "CLS"
    60 000006A8 C11A                <1>     dw cls - startLbl
    61                              <1> 
    62 000006AA 05425245414B        <1>     db 5, "BREAK"
    63 000006B0 331B                <1>     dw break - startLbl
    64                              <1> 
    65 000006B2 06564552494659      <1>     db 6, "VERIFY"
    66 000006B9 B41B                <1>     dw verify - startLbl
    67                              <1> 
    68 000006BB 0652454E414D45      <1>     db 6, "RENAME"
    69 000006C2 311C                <1>     dw rename - startLbl
    70                              <1> 
    71 000006C4 08545255454E414D45  <1>     db 8, "TRUENAME"
    72 000006CD 391D                <1>     dw truename - startLbl
    73                              <1> 
    74 000006CF 03564552            <1>     db 3, "VER"
    75 000006D3 821E                <1>     dw version - startLbl
    76                              <1> 
    77 000006D5 03564F4C            <1>     db 3, "VOL"
    78 000006D9 6F1D                <1>     dw volume - startLbl
    79                              <1> 
    80 000006DB 034D454D            <1>     db 3, "MEM"
    81 000006DF C61E                <1>     dw memory - startLbl
    82                              <1> 
    83 000006E1 0445584954          <1>     db 4, "EXIT"
    84 000006E6 A820                <1>     dw exit - startLbl
    85                              <1> 
    86 000006E8 0454595045          <1>     db 4, "TYPE"
    87 000006ED 1020                <1>     dw type - startLbl
    88                              <1> 
    89 000006EF 05544F554348        <1>     db 5, "TOUCH"
    90 000006F5 FE1C                <1>     dw touch - startLbl
    91                              <1> 
    92 000006F7 FF                  <1>     db -1   ;End of table
    14                                  %include "./Source/Utils/COMMAND/Data/cmdMsg.asm"
    15                              <1> ;COMMAND.COM Messages and strings
    16 000006F8 0D0A24              <1> crlf    db  CR,LF,"$"
    17 000006FB 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
    18 00000700 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
    18 00000709 696C65206D69737369- <1>
    18 00000712 6E670D0A24          <1>
    19 00000717 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
    19 00000720 6469736B2077697468- <1>
    19 00000729 206261746368206669- <1>
    19 00000732 6C65                <1>
    20 00000734 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
    20 0000073D 737320616E79206B65- <1>
    20 00000746 79207768656E207265- <1>
    20 0000074F 6164790D0A24        <1>
    21 00000755 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
    21 0000075E 6E64206F722066696C- <1>
    21 00000767 65206E616D650D0A24  <1>
    22 00000770 4475706C6963617465- <1> dupName db  "Duplicate file name or "
    22 00000779 2066696C65206E616D- <1>
    22 00000782 65206F7220          <1>
    23 00000787 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    23 00000790 666F756E640D0A24    <1>
    24 00000798 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    24 000007A1 656E74206469736B20- <1>
    24 000007AA 73706163650D0A24    <1>
    25 000007B2 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    25 000007BB 7669726F6E6D656E74- <1>
    25 000007C4 2073706163650D0A24  <1>
    26 000007CD 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    26 000007D6 74696F6E206572726F- <1>
    26 000007DF 720D0A24            <1>
    27 000007E3 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    27 000007EC 6F7420626520636F70- <1>
    27 000007F5 696564206F6E746F20- <1>
    27 000007FE 697473656C660D0A24  <1>
    28 00000807 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    28 00000810 662064657374696E61- <1>
    28 00000819 74696F6E206C6F7374- <1>
    28 00000822 206265666F72652063- <1>
    28 0000082B 6F70790D0A24        <1>
    29                              <1> ;Copy end message. First write # files copied then this message 
    30 00000831 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    30 0000083A 636F706965640D0A24  <1>
    31                              <1> ;Dir end1 msg. First write # files in dir then this
    32 00000843 2046696C6528732920- <1> dirOk   db  " File(s) $"
    32 0000084C 24                  <1>
    33                              <1> ;Dir end2 msg. First write # bytes free then this message
    34 0000084D 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    34 00000856 65650D0A24          <1>
    35 0000085B 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    36                              <1> 
    37 00000864 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    37 0000086D 726976652073706563- <1>
    37 00000876 696669636174696F6E- <1>
    37 0000087F 0D0A24              <1>
    38 00000882 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    38 0000088B 6B6579207768656E20- <1>
    38 00000894 7265616479202E202E- <1>
    38 0000089D 202E2024            <1>
    39 000008A1 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    39 000008AA 6172616D657465720D- <1>
    39 000008B3 0A24                <1>
    40                              <1> 
    41 000008B5 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    41 000008BE 576564546875467269- <1>
    41 000008C7 536174              <1>
    42 000008CA 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    42 000008D3 206461746524        <1>
    43 000008D9 43757272656E742064- <1> curDate db  "Current date is $"
    43 000008E2 6174652069732024    <1>
    44 000008EA 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    44 000008F3 657720646174652024  <1>
    45 000008FC 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    45 00000905 293A2024            <1>
    46 00000909 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    46 00000912 293A2024            <1>
    47 00000916 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    47 0000091F 293A2024            <1>
    48 00000923 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    48 0000092C 2074696D6524        <1>
    49 00000932 43757272656E742074- <1> curTime db  "Current time is $"
    49 0000093B 696D652069732024    <1>
    50 00000943 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    50 0000094C 65772074696D653A20- <1>
    50 00000955 24                  <1>
    51                              <1> 
    52 00000956 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    52 0000095F 7572652028592F4E29- <1>
    52 00000968 3F2024              <1>
    53                              <1> 
    54 0000096B 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    54 00000974 56657273696F6E2024  <1>
    55                              <1> 
    56 0000097D 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    56 00000986 6E2064726976652024  <1>
    57 0000098F 2069732024          <1> volOk   db " is $"
    58 00000994 20686173206E6F206C- <1> volNo   db " has no label$"
    58 0000099D 6162656C24          <1>
    59                              <1> 
    60 000009A2 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    60 000009AB 69726563746F72790D- <1>
    60 000009B4 0A24                <1>
    61 000009B6 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    61 000009BF 206372656174652064- <1>
    61 000009C8 69726563746F72790D- <1>
    61 000009D1 0A24                <1>
    62 000009D3 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    62 000009DC 6174682C206E6F7420- <1>
    62 000009E5 6469726563746F7279- <1>
    62 000009EE 2C0D0A              <1>
    63 000009F1 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    63 000009FA 6F7279206E6F742065- <1>
    63 00000A03 6D7074790D0A24      <1>
    64 00000A0A 204469726563746F72- <1> dirMain db " Directory of  $"
    64 00000A13 79206F66202024      <1>
    65 00000A1A 4E6F20506174682024  <1> noPath  db "No Path $"
    66 00000A23 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    66 00000A2C 7269766520696E2073- <1>
    66 00000A35 656172636820706174- <1>
    66 00000A3E 680D0A24            <1>
    67 00000A42 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    67 00000A4B 65766963650D0A24    <1>
    68 00000A53 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    68 00000A5C 20666F756E640D0A24  <1>
    69 00000A65 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    69 00000A6E 726F720D0A24        <1>
    70 00000A74 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    70 00000A7D 6F74206265206E6573- <1>
    70 00000A86 7465640D0A24        <1>
    71 00000A8C 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    71 00000A95 6174652066696C6520- <1>
    71 00000A9E 6572726F7220647572- <1>
    71 00000AA7 696E6720706970650D- <1>
    71 00000AB0 0A24                <1>
    72 00000AB2 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    72 00000ABB 2062696E6172792072- <1>
    72 00000AC4 656164732066726F6D- <1>
    72 00000ACD 206120646576696365- <1>
    72 00000AD6 0D0A24              <1>
    73 00000AD9 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    74 00000ADF 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    75 00000AE4 425245414B20697320- <1> breakIs db "BREAK is $"
    75 00000AED 24                  <1>
    76 00000AEE 564552494659206973- <1> verifyIs    db "VERIFY is $"
    76 00000AF7 2024                <1>
    77 00000AF9 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    78 00000B02 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    78 00000B0B 617468206F72206669- <1>
    78 00000B14 6C65206E616D650D0A- <1>
    78 00000B1D 24                  <1>
    79 00000B1E 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    79 00000B27 756D626572206F6620- <1>
    79 00000B30 706172616D65746572- <1>
    79 00000B39 730D0A24            <1>
    80 00000B3D 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    80 00000B46 74696E6720746F2064- <1>
    80 00000B4F 6576696365          <1>
    81 00000B54 08200800            <1> backSpace   db BSP," ",BSP,NUL
    82                              <1> 
    83 00000B58 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    83 00000B61 20202020202020546F- <1>
    83 00000B6A 74616C207379737465- <1>
    83 00000B73 6D206D656D6F72793A- <1>
    83 00000B7C 2024                <1>
    84 00000B7E 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    84 00000B87 20202020202020204D- <1>
    84 00000B90 656D6F727920757365- <1>
    84 00000B99 6420627920444F533A- <1>
    84 00000BA2 2024                <1>
    85 00000BA4 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    85 00000BAD 656D6F727920757365- <1>
    85 00000BB6 64206279206170706C- <1>
    85 00000BBF 69636174696F6E733A- <1>
    85 00000BC8 2024                <1>
    86 00000BCA 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    86 00000BD3 656D6F727920726573- <1>
    86 00000BDC 657276656420627920- <1>
    86 00000BE5 68617264776172653A- <1>
    86 00000BEE 2024                <1>
    87 00000BF0 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    87 00000BF9 202020202020202020- <1>
    87 00000C02 2020202020204D656D- <1>
    87 00000C0B 6F727920667265653A- <1>
    87 00000C14 2024                <1>
    88 00000C16 20627974657324      <1> memByte db " bytes$"
    89 00000C1D 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    89 00000C26 6F7420417373657274- <1>
    89 00000C2F 61696E20444F532045- <1>
    89 00000C38 6E74727920506F696E- <1>
    89 00000C41 7424                <1>
    90 00000C43 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    90 00000C4C 416C6C6F636174696F- <1>
    90 00000C55 6E204572726F7224    <1>
    91 00000C5D 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    91 00000C66 4572726F7224        <1>
    92 00000C6C 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    92 00000C75 68616C74656424      <1>
    93                              <1> 
    94 00000C7C 556E61626C6520746F- <1> touchErr db "Unable to create file",CR,LF,"$"
    94 00000C85 206372656174652066- <1>
    94 00000C8E 696C650D0A24        <1>
    95                              <1> 
    96                              <1> 
    97 00000C94 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    98 00000C98 2020202024          <1> fourSpc  db "    $"
    99 00000C9D 20202024            <1> threeSpc db "   $"
   100 00000CA1 202024              <1> twoSpc   db "  $"
   101                              <1> 
   102 00000CA4 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
   102 00000CAD 696679204F4E206F72- <1>
   102 00000CB6 204F46460D0A24      <1>
   103 00000CBD 504154483D          <1> pathEVar db "PATH="
   104 00000CC2 50524F4D50543D      <1> promptEVar  db "PROMPT="
    15                                  %include "./Source/Utils/COMMAND/Source/cmdMain.asm"
    16                              <1> commandStart:
    17                              <1>     ;Resize Allocation, jump here with endpointer in rbx
    18                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
    19                              <1>     ; that the jump to safety won't be gobbled up when multitasking
    20 00000CC9 49F7D8              <1>     neg r8  ;Convert r8 to -r8
    21 00000CCC 4A8D5C0311          <1>     lea rbx, qword [rbx + r8 + 11h]    ;Get # of bytes for COMMAND.COM
    22 00000CD1 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
    23 00000CD4 B44A                <1>     mov ah, 4Ah ;Realloc
    24 00000CD6 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    25 00000CD9 CD41                <1>     int 41h
    26 00000CDB EB5A                <1>     jmp short commandMain
    27                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    28 00000CDD B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    29 00000CE2 CD41                <1>     int 41h
    30 00000CE4 66890522F3FFFF      <1>     mov word [returnCode], ax
    31                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    32 00000CEB 488D15F51A0000      <1>     lea rdx, critErrorHandler
    33 00000CF2 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    34 00000CF6 B844250000          <1>     mov eax, 2544h
    35 00000CFB CD41                <1>     int 41h
    36 00000CFD 488D15731D0000      <1>     lea rdx, int43h
    37 00000D04 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    38 00000D08 B843250000          <1>     mov eax, 2543h
    39 00000D0D CD41                <1>     int 41h
    40 00000D0F 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    41 00000D16 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    42 00000D1A B842250000          <1>     mov eax, 2542h
    43 00000D1F CD41                <1>     int 41h
    44                              <1> ;Close all handles from 5->MAX
    45 00000D21 0FB70DF7F2FFFF      <1>     movzx ecx, word [numHdls]
    46 00000D28 BB05000000          <1>     mov ebx, 5
    47                              <1> .handleClose:
    48 00000D2D B43E                <1>     mov ah, 3Eh ;File close
    49 00000D2F CD41                <1>     int 41h
    50 00000D31 FFC3                <1>     inc ebx ;Goto next file
    51 00000D33 39CB                <1>     cmp ebx, ecx
    52 00000D35 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    53                              <1> commandMain:
    54                              <1> ;Setup Commandline
    55 00000D37 FA                  <1>     cli
    56 00000D38 488B25C6F2FFFF      <1>     mov rsp, qword [stackBottom]    ;Reset internal stack pointer pos
    57 00000D3F FB                  <1>     sti
    58 00000D40 FC                  <1>     cld ;Ensure stringops are done the right way
    59 00000D41 C605C6F3FFFF80      <1>     mov byte [inBuffer], 80h    ;Reset the buffer length
    60                              <1> .inputMain:
    61 00000D48 E84E180000          <1>     call clearCommandLineState
    62 00000D4D E8D5140000          <1>     call printCRLF
    63 00000D52 E81C180000          <1>     call printPrompt
    64                              <1> 
    65 00000D57 488D15B0F3FFFF      <1>     lea rdx, inBuffer
    66 00000D5E B80A0C0000          <1>     mov eax, 0C0Ah  ;Do Buffered input
    67 00000D63 CD41                <1>     int 41h
    68 00000D65 E8BD140000          <1>     call printCRLF  ;Note we have accepted input
    69                              <1> 
    70                              <1> ;First check we had something typed in of length greater than 1
    71                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    72 00000D6A 803D9EF3FFFF01      <1>     cmp byte [inBuffer + 1], 1  ;Check input length valid
    73 00000D71 742C                <1>     je .dfltErrExit
    74 00000D73 72D3                <1>     jb .inputMain
    75                              <1>     ;Copy over the input text
    76 00000D75 488D3592F3FFFF      <1>     lea rsi, inBuffer
    77 00000D7C 488D3D0BF4FFFF      <1>     lea rdi, cmdBuffer
    78 00000D83 B980000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    79 00000D88 F3A4                <1>     rep movsb
    80 00000D8A 31C0                <1>     xor eax, eax
    81 00000D8C 66890504F3FFFF      <1>     mov word [cmdStartOff], ax  ;Clear start and end Off positions
    82 00000D93 E814000000          <1>     call parseInput
    83 00000D98 E8AD010000          <1>     call doCommandLine
    84 00000D9D EBA9                <1>     jmp short .inputMain
    85                              <1> .dfltErrExit:
    86 00000D9F 488D15AFF9FFFF      <1>     lea rdx, badCmd
    87 00000DA6 B409                <1>     mov ah, 09h
    88 00000DA8 CD41                <1>     int 41h
    89 00000DAA EB9C                <1>     jmp short .inputMain
    90                              <1> 
    91                              <1> parseInput:
    92                              <1> ;EndOff is set up before entering this part
    93                              <1> ;Copies a nicely formatted version of the input command line
    94                              <1> ; without any redirections to psp.dta
    95 00000DAC 488D35DDF3FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
    96 00000DB3 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
    97 00000DBA 0FB61DD7F2FFFF      <1>     movzx ebx, byte [cmdEndOff] ;Get the old end offset
    98 00000DC1 4801DE              <1>     add rsi, rbx    ;Move rsi to the start of this new command
    99 00000DC4 E89B170000          <1>     call skipSpaces ;Skip any preceeding spaces
   100 00000DC9 66AD                <1>     lodsw   ;Get the first two chars into ax
   101 00000DCB 668905D7F2FFFF      <1>     mov word [cmdDrvSpec], ax ;Store these chars as if they are the drvspec
   102 00000DD2 4881EE02000000      <1>     sub rsi, 2  ;Go back to the start of the command
   103 00000DD9 56                  <1>     push rsi
   104 00000DDA 57                  <1>     push rdi
   105 00000DDB 488D3D2CF4FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   106 00000DE2 57                  <1>     push rdi
   107 00000DE3 E845030000          <1>     call copyCommandTailItemProgram
   108 00000DE8 5F                  <1>     pop rdi
   109 00000DE9 9C                  <1>     pushfq  ;Save the CF state
   110 00000DEA E8FD160000          <1>     call strlen
   111 00000DEF FFC9                <1>     dec ecx ;Drop the terminating char from the count
   112 00000DF1 58                  <1>     pop rax ;Get the CF state in al
   113 00000DF2 5F                  <1>     pop rdi
   114 00000DF3 5E                  <1>     pop rsi
   115 00000DF4 F3A4                <1>     rep movsb   ;Now we copy the command into the psp command line
   116 00000DF6 A801                <1>     test al, 1  ;Was CF set?
   117 00000DF8 0F8586000000        <1>     jnz .exit   ;If an embedded CR was found in the filename, exit!
   118                              <1> .cmdLineProcess:
   119 00000DFE E861170000          <1>     call skipSpaces ;Go to the next char in the input line
   120                              <1> .redirFound:
   121 00000E03 AC                  <1>     lodsb   ;Get first non-space char (setupRedir skips spaces before ret)
   122 00000E04 3C0D                <1>     cmp al, CR  ;If this was a CR, we stop processing
   123 00000E06 747C                <1>     je .exit
   124 00000E08 E8B3020000          <1>     call checkAndSetupRedir ;If not, check if we have a redir element
   125 00000E0D 7275                <1>     jc .exit    ;CF=CY only if pipe, which is equivalent to CR when processing
   126 00000E0F 74F2                <1>     jz .redirFound  ;If we had a < > or >>, proceed to check if next char CR
   127 00000E11 B020                <1>     mov al, " "
   128 00000E13 AA                  <1>     stosb   ;Store a space to make space for the command file parameter
   129 00000E14 48FFCE              <1>     dec rsi ;Move rsi back to the first char
   130 00000E17 F6058FF2FFFFFF      <1>     test byte [arg1Flg], -1
   131 00000E1E 7521                <1>     jnz .arg2
   132                              <1> .arg1:
   133 00000E20 C60586F2FFFFFF      <1>     mov byte [arg1Flg], -1
   134 00000E27 E838170000          <1>     call skipSpaces
   135 00000E2C 4889F0              <1>     mov rax, rsi
   136 00000E2F 488D1D58F3FFFF      <1>     lea rbx, cmdBuffer
   137 00000E36 4829D8              <1>     sub rax, rbx
   138 00000E39 88056FF2FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   139 00000E3F EB2A                <1>     jmp short .argCommon
   140                              <1> .arg2:
   141 00000E41 F60568F2FFFFFF      <1>     test byte [arg2Flg], -1
   142 00000E48 7521                <1>     jnz .argCommon
   143 00000E4A C6055FF2FFFFFF      <1>     mov byte [arg2Flg], -1
   144 00000E51 E80E170000          <1>     call skipSpaces
   145 00000E56 4889F0              <1>     mov rax, rsi
   146 00000E59 488D1D2EF3FFFF      <1>     lea rbx, cmdBuffer
   147 00000E60 4829D8              <1>     sub rax, rbx
   148 00000E63 880548F2FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   149 00000E69 EB00                <1>     jmp short .argCommon
   150                              <1> .argCommon:
   151                              <1>     ;More than two arguments? Do nothing more than just copy it
   152                              <1>     ; over. If we encounter an embedded CR, exit there too
   153 00000E6B E8F4160000          <1>     call skipSpaces
   154 00000E70 803E0D              <1>     cmp byte [rsi], CR  ;Are we at the end of the commandline?
   155 00000E73 740F                <1>     je .exit
   156                              <1>     ;If not, we copy it over
   157 00000E75 E8DD020000          <1>     call copyCommandTailItem    ;Stores a terminating null we dont want
   158 00000E7A 488D7FFF            <1>     lea rdi, qword [rdi - 1]    ;Point back at the inserted terminating null
   159 00000E7E 0F837AFFFFFF        <1>     jnc .cmdLineProcess
   160                              <1> .exit:
   161 00000E84 488D1D03F3FFFF      <1>     lea rbx, cmdBuffer
   162 00000E8B 48FFCE              <1>     dec rsi
   163 00000E8E 4829DE              <1>     sub rsi, rbx    ;Get the offset into the command line
   164 00000E91 89F3                <1>     mov ebx, esi
   165 00000E93 881DFFF1FFFF        <1>     mov byte [cmdEndOff], bl    ;Store the offset to the terminating char
   166 00000E99 B00D                <1>     mov al, CR
   167 00000E9B AA                  <1>     stosb   ;Store the terminating CR in the psp command line
   168                              <1>     ;Now compute the command line length 
   169 00000E9C 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine] 
   170 00000EA3 B00D                <1>     mov al, CR
   171 00000EA5 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   172 00000EA7 FFC9                <1>     dec ecx ;rcx = -1
   173 00000EA9 F2AE                <1>     repne scasb
   174 00000EAB F7D1                <1>     not ecx
   175 00000EAD FEC9                <1>     dec cl  ;Dont include terminating CR
   176 00000EAF 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   177 00000EB6 880F                <1>     mov byte [rdi], cl
   178                              <1>     ;Before returning, we copy the command name to cmdName
   179 00000EB8 488D3D4FF3FFFF      <1>     lea rdi, cmdPathSpec
   180 00000EBF 4889FB              <1>     mov rbx, rdi    ;Use rbx as the ptr to the first char in the commandspec
   181 00000EC2 30C0                <1>     xor al, al  ;Search for the terminating null
   182 00000EC4 B94F000000          <1>     mov ecx, fileSpecZL ;Max number of chars the length could be
   183 00000EC9 F2AE                <1>     repne scasb
   184 00000ECB 48FFCF              <1>     dec rdi ;Go to the last char in the command
   185 00000ECE 4889FE              <1>     mov rsi, rdi
   186 00000ED1 FD                  <1>     std ;Now we go backwards to where rsi = rbx OR byte [rsi] = pathSep
   187                              <1> .keepSearching:
   188 00000ED2 AC                  <1>     lodsb
   189 00000ED3 3A054AF1FFFF        <1>     cmp al, byte [pathSep]
   190 00000ED9 740B                <1>     je .cmdStartFnd
   191 00000EDB 4839DE              <1>     cmp rsi, rbx
   192 00000EDE 75F2                <1>     jne .keepSearching
   193 00000EE0 48FFCE              <1>     dec rsi ;Go back two to go forwards again
   194 00000EE3 48FFCE              <1>     dec rsi
   195                              <1> .cmdStartFnd:
   196 00000EE6 48FFC6              <1>     inc rsi
   197 00000EE9 48FFC6              <1>     inc rsi ;Go past the pathsep
   198 00000EEC FC                  <1>     cld ;Go the sane way again
   199 00000EED 488D3D82F3FFFF      <1>     lea rdi, qword [cmdName + 1]    ;First byte is for the length of the name
   200 00000EF4 57                  <1>     push rdi    ;Cleanse the field before usage (not strictly necessary)
   201 00000EF5 B90E000000          <1>     mov ecx, cmdNameL
   202 00000EFA 30C0                <1>     xor al, al
   203 00000EFC F3AA                <1>     rep stosb
   204 00000EFE 5F                  <1>     pop rdi
   205 00000EFF 31C9                <1>     xor ecx, ecx
   206 00000F01 56                  <1>     push rsi    ;Save the location of the start byte of the command name
   207                              <1> .cmdGetChar:
   208 00000F02 AC                  <1>     lodsb
   209 00000F03 84C0                <1>     test al, al ;Did we find the terminating null?
   210 00000F05 7411                <1>     jz .nameLenFnd
   211 00000F07 3C2E                <1>     cmp al, "." ;Extension sep also terminates
   212 00000F09 740D                <1>     je .nameLenFnd
   213 00000F0B 24DF                <1>     and al, 0DFh    ;Else uppercase the char
   214 00000F0D AA                  <1>     stosb   ;and store it
   215 00000F0E FFC1                <1>     inc ecx
   216 00000F10 81F90B000000        <1>     cmp ecx, 11 ;Max command length is 11
   217 00000F16 72EA                <1>     jb .cmdGetChar
   218                              <1> .nameLenFnd:
   219 00000F18 880D57F3FFFF        <1>     mov byte [cmdName], cl  ;Store the name length now
   220                              <1>     ;Now finally, create a FCB filespec
   221 00000F1E 488D3D38F3FFFF      <1>     lea rdi, fcbCmdSpec
   222 00000F25 57                  <1>     push rdi
   223 00000F26 B90B000000          <1>     mov ecx, fcbNameL
   224 00000F2B B020                <1>     mov al, " " ;Fill with spaces
   225 00000F2D F3AA                <1>     rep stosb
   226 00000F2F 5F                  <1>     pop rdi
   227 00000F30 5E                  <1>     pop rsi ;Get back the location of the start byte of the command name
   228 00000F31 E876160000          <1>     call asciiToFCB
   229 00000F36 488D3520F3FFFF      <1>     lea rsi, fcbCmdSpec
   230 00000F3D 488D3D24F3FFFF      <1>     lea rdi, cmdSpec
   231 00000F44 E8BE160000          <1>     call FCBToAsciiz
   232                              <1>     return
    19                              <2> %%_ret:
    20 00000F49 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   233                              <1> 
   234                              <1> doCommandLine:
   235 00000F4A 488D353FF2FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
   236 00000F51 488D3D5BF1FFFF      <1>     lea rdi, cmdFcb
   237 00000F58 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks
   238 00000F5D CD41                <1>     int 41h
   239 00000F5F 0FB71D43F1FFFF      <1>     movzx ebx, word [cmdDrvSpec]    ;Get the drive specifier
   240 00000F66 80FF3A              <1>     cmp bh, ":"
   241 00000F69 752E                <1>     jne .noDriveSpecified
   242 00000F6B 88DA                <1>     mov dl, bl      ;Move the drive letter in dl
   243 00000F6D 80E2DF              <1>     and dl, 0DFh    ;Make the drive letter upper case
   244 00000F70 80EA41              <1>     sub dl, "A"     ;And make it a 0 based drive letter
   245 00000F73 3CFF                <1>     cmp al, -1  ;Int 41h returns AL = -1 if bad drive specified
   246 00000F75 7415                <1>     je .badDrive
   247                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   248 00000F77 803DF7F2FFFF02      <1>     cmp byte [cmdName], 2
   249 00000F7E 7519                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   250 00000F80 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   251 00000F82 CD41                <1>     int 41h 
   252 00000F84 B419                <1>     mov ah, 19h
   253 00000F86 CD41                <1>     int 41h     ;Get current drive
   254 00000F88 38D0                <1>     cmp al, dl  ;If the drive was set, all is well
   255                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000F8A 74(49)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   256                              <1> .badDrive:
   257 00000F8C 488D15D1F8FFFF      <1>     lea rdx, badDrv
   258 00000F93 B409                <1>     mov ah, 09h
   259 00000F95 CD41                <1>     int 41h
   260 00000F97 F9                  <1>     stc
   261                              <1>     return
    19                              <2> %%_ret:
    20 00000F98 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   262                              <1> .noDriveSpecified:
   263                              <1> ;Now we set the two FCB's in the command line
   264 00000F99 F6050DF1FFFFFF      <1>     test byte [arg1Flg], -1
   265 00000FA0 744D                <1>     jz .fcbArgsDone
   266 00000FA2 0FB60505F1FFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   267 00000FA9 488D35DEF1FFFF      <1>     lea rsi, cmdBuffer
   268 00000FB0 4801C6              <1>     add rsi, rax    ;Point to first argument
   269 00000FB3 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   270 00000FB7 B801290000          <1>     mov eax, 2901h
   271 00000FBC CD41                <1>     int 41h
   272 00000FBE 8805EBF0FFFF        <1>     mov byte [arg1FCBret], al
   273 00000FC4 F605E5F0FFFFFF      <1>     test byte [arg2Flg], -1
   274 00000FCB 7422                <1>     jz .fcbArgsDone
   275 00000FCD 0FB605DDF0FFFF      <1>     movzx eax, byte [arg2Off]
   276 00000FD4 488D35B3F1FFFF      <1>     lea rsi, cmdBuffer
   277 00000FDB 4801C6              <1>     add rsi, rax    ;Point to first argument
   278 00000FDE 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   279 00000FE2 B801290000          <1>     mov eax, 2901h
   280 00000FE7 CD41                <1>     int 41h
   281 00000FE9 8805C3F0FFFF        <1>     mov byte [arg2FCBret], al
   282                              <1> .fcbArgsDone:
   283 00000FEF 488D3598F1FFFF      <1>     lea rsi, cmdBuffer
   284 00000FF6 488D1D78F2FFFF      <1>     lea rbx, cmdName
   285 00000FFD B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   286 00001002 BAFFFF0000          <1>     mov edx, 0FFFFh
   287 00001007 B5FF                <1>     mov ch, -1
   288 00001009 CD4F                <1>     int 4Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   289                              <1>             ;        al = 0  if the command should be executed as usual
   290 0000100B B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   291 00001010 BAFFFF0000          <1>     mov edx, 0FFFFh
   292 00001015 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   293 00001017 CD4F                <1>     int 4Fh
   294 00001019 741D                <1>     jz .executeInternal
   295                              <1>     ;Here we execute externally and return to the prompt
   296                              <1>     ; as if it was an internal execution
   297 0000101B 488D35ECF0FFFF      <1>     lea rsi, inBuffer ;Point to this built buffer
   298 00001022 488D1D8AF0FFFF      <1>     lea rbx, cmdFcb
   299 00001029 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   300 0000102E BAFFFF0000          <1>     mov edx, 0FFFFh
   301 00001033 B5FF                <1>     mov ch, -1
   302 00001035 CD4F                <1>     int 4Fh 
   303                              <1>     return
    19                              <2> %%_ret:
    20 00001037 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   304                              <1> .executeInternal:
   305                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   306                              <1> ;rsi points after the command terminator in the command tail
   307 00001038 488D1D0EF6FFFF      <1>     lea rbx, functionTable
   308                              <1> .nextEntry:
   309 0000103F 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   310 00001042 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   311 00001045 0F8493100000        <1>     je launchChild      ;If so, check externally now
   312 0000104B 380D24F2FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   313 00001051 7529                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   314                              <1>     ;Here they have the same length so lets see if the name is the same
   315 00001053 56                  <1>     push rsi
   316                              <1>     ;ecx has the length to compare
   317 00001054 51                  <1>     push rcx
   318 00001055 488D7301            <1>     lea rsi, qword [rbx + 1]
   319 00001059 488D3D16F2FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   320 00001060 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   321 00001062 59                  <1>     pop rcx
   322 00001063 5E                  <1>     pop rsi
   323 00001064 7516                <1>     jne .gotoNextEntry
   324                              <1>     ;Here it was found both strings are equal
   325 00001066 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   326 0000106B 480FB71F            <1>     movzx rbx, word [rdi]
   327 0000106F 488D3D8AEFFFFF      <1>     lea rdi, startLbl
   328 00001076 4801FB              <1>     add rbx, rdi
   329 00001079 FFD3                <1>     call rbx    ;Call this function...
   330                              <1>     return  ;... and return
    19                              <2> %%_ret:
    20 0000107B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   331                              <1> .gotoNextEntry:
   332 0000107C 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   333 00001083 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   334 00001086 EBB7                <1>     jmp short .nextEntry
   335                              <1> .dfltErrExit:
   336 00001088 488D15C6F6FFFF      <1>     lea rdx, badCmd
   337 0000108F B409                <1>     mov ah, 09h
   338 00001091 CD41                <1>     int 41h
   339                              <1>     return
    19                              <2> %%_ret:
    20 00001093 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   340                              <1> 
   341                              <1> 
   342                              <1> checkExtensionExec:
   343                              <1> ;Checks the extension field of cmdFcb is .COM, .EXE, .BAT in that order
   344                              <1> ;Returns: ZF=ZE if executable. ZF=NZ if not executable.
   345                              <1> ;         If ZF=ZE and CF=CY => Batch file
   346 00001094 8B0522F0FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   347 0000109A 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   348 0000109F 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   349 000010A4 25DFDFDFFF          <1>     and eax, 0FFDFDFDFh ;Uppercase the three letters
   350 000010A9 3D434F4D20          <1>     cmp eax, "COM "
   351                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000010AE 74(93)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   352 000010B0 3D45584520          <1>     cmp eax, "EXE "
   353                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000010B5 74(93)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   354 000010B7 3D42415420          <1>     cmp eax, "BAT "
   355                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000010BC 75(93)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   356 000010BE F9                  <1>     stc
   357                              <1>     return
    19                              <2> %%_ret:
    20 000010BF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   358                              <1> 
   359                              <1> checkAndSetupRedir:
   360                              <1> ;Checks and sets up redir as appropriate
   361                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   362                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   363                              <1> ;Output: ZF=NZ => No redir
   364                              <1> ;        ZF=ZY => Redir
   365                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   366                              <1> ;CF=CY if pipe set or an embedded CR found
   367 000010C0 57                  <1>     push rdi
   368 000010C1 3C3C                <1>     cmp al, "<"
   369 000010C3 740B                <1>     je .inputRedir
   370 000010C5 3C3E                <1>     cmp al, ">"
   371 000010C7 742A                <1>     je .outputRedir
   372 000010C9 3C7C                <1>     cmp al, "|"
   373 000010CB 7454                <1>     je .pipeSetup
   374 000010CD F8                  <1>     clc
   375                              <1> .redirExit:
   376 000010CE 5F                  <1>     pop rdi
   377                              <1>     return
    19                              <2> %%_ret:
    20 000010CF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   378                              <1> .inputRedir:
   379 000010D0 C605D4EFFFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   380 000010D7 488D3DA5F1FFFF      <1>     lea rdi, rdrInFilespec
   381 000010DE E881140000          <1>     call skipSpaces ;Skip spaces between < and the filespec
   382 000010E3 E86F000000          <1>     call copyCommandTailItem
   383 000010E8 72E4                <1>     jc .redirExit
   384 000010EA E875140000          <1>     call skipSpaces
   385 000010EF 30C0                <1>     xor al, al
   386 000010F1 EBDB                <1>     jmp short .redirExit
   387                              <1> .outputRedir:
   388 000010F3 C605B2EFFFFF01      <1>     mov byte [redirOut], 1
   389 000010FA 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   390 000010FD 7506                <1>     jne .notDouble
   391 000010FF FE05A7EFFFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   392                              <1> .notDouble:
   393 00001105 488D3DC6F1FFFF      <1>     lea rdi, rdrOutFilespec
   394 0000110C E853140000          <1>     call skipSpaces
   395 00001111 E841000000          <1>     call copyCommandTailItem
   396 00001116 72B6                <1>     jc .redirExit
   397 00001118 E847140000          <1>     call skipSpaces
   398 0000111D 30C0                <1>     xor al, al
   399 0000111F EBAD                <1>     jmp short .redirExit
   400                              <1> .pipeSetup:
   401 00001121 C60571EFFFFFFF      <1>     mov byte [pipeFlag], -1
   402 00001128 30C0                <1>     xor al, al
   403 0000112A F9                  <1>     stc
   404 0000112B 5F                  <1>     pop rdi
   405                              <1>     return
    19                              <2> %%_ret:
    20 0000112C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   406                              <1> 
   407                              <1> copyCommandTailItemProgram:
   408                              <1> ;Copies a program name from the command tail until a terminator is found.
   409                              <1> ;Stores a terminating null in the destination
   410                              <1> ;Input: rsi = Start of the item to copy
   411                              <1> ;       rdi = Location for copy
   412                              <1> ;Output: Sentence copied with a null terminator inserted.
   413                              <1> ; If CF=CY, embedded CR encountered
   414 0000112D AC                  <1>     lodsb
   415 0000112E 3C0D                <1>     cmp al, CR
   416 00001130 741A                <1>     je .endOfInput
   417 00001132 E8F9130000          <1>     call isALterminator
   418 00001137 741A                <1>     jz .exit
   419 00001139 3A05E4EEFFFF        <1>     cmp al, byte [pathSep]
   420 0000113F 7412                <1>     je .exit
   421 00001141 3A05DDEEFFFF        <1>     cmp al, byte [switchChar]
   422 00001147 740A                <1>     je .exit
   423 00001149 AA                  <1>     stosb
   424 0000114A EBE1                <1>     jmp short copyCommandTailItemProgram
   425                              <1> .endOfInput:
   426 0000114C E802000000          <1>     call .exit
   427 00001151 F9                  <1>     stc 
   428                              <1>     return
    19                              <2> %%_ret:
    20 00001152 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   429                              <1> .exit:
   430 00001153 30C0                <1>     xor al, al
   431 00001155 AA                  <1>     stosb
   432                              <1>     return
    19                              <2> %%_ret:
    20 00001156 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   433                              <1> 
   434                              <1> copyCommandTailItem:
   435                              <1> ;Copies a sentence from the command tail until a terminator is found.
   436                              <1> ;Stores a terminating null in the destination
   437                              <1> ;Input: rsi = Start of the item to copy
   438                              <1> ;       rdi = Location for copy
   439                              <1> ;Output: Sentence copied with a null terminator inserted.
   440                              <1> ; If CF=CY, embedded CR encountered
   441 00001157 AC                  <1>     lodsb
   442 00001158 3C0D                <1>     cmp al, CR
   443 0000115A 743A                <1>     je .endOfInput
   444 0000115C E8CF130000          <1>     call isALterminator
   445 00001161 743A                <1>     jz .exit
   446 00001163 3A05BAEEFFFF        <1>     cmp al, byte [pathSep]
   447 00001169 740B                <1>     je .pathSep
   448 0000116B 3A05B3EEFFFF        <1>     cmp al, byte [switchChar]
   449 00001171 742A                <1>     je .exit
   450 00001173 AA                  <1>     stosb
   451 00001174 EBE1                <1>     jmp short copyCommandTailItem
   452                              <1> .pathSep:
   453                              <1> ;We look ahead, if the last char is a pathsep, we ignore it
   454 00001176 AC                  <1>     lodsb   ;Get the next char, increment rsi by one
   455 00001177 E8B4130000          <1>     call isALterminator
   456 0000117C 741F                <1>     jz .exit
   457 0000117E 3C0D                <1>     cmp al, CR
   458 00001180 7414                <1>     je .endOfInput
   459 00001182 3A059CEEFFFF        <1>     cmp al, byte [switchChar]
   460 00001188 7413                <1>     je .exit
   461 0000118A 8A0593EEFFFF        <1>     mov al, byte [pathSep]
   462 00001190 AA                  <1>     stosb   ;Else store the pathsep
   463 00001191 48FFCE              <1>     dec rsi ;Move rsi back a piece
   464 00001194 EBC1                <1>     jmp short copyCommandTailItem
   465                              <1> .endOfInput:
   466 00001196 E802000000          <1>     call .exit
   467 0000119B F9                  <1>     stc 
   468                              <1>     return
    19                              <2> %%_ret:
    20 0000119C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   469                              <1> .exit:
   470 0000119D 30C0                <1>     xor al, al
   471 0000119F AA                  <1>     stosb
   472                              <1>     return
    19                              <2> %%_ret:
    20 000011A0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   473                              <1> 
   474                              <1> 
   475                              <1> int4Eh:   ;Interrupt interface for parsing and executing command lines
   476                              <1> ;Input: rsi points to the count byte of a command line
   477 000011A1 4150                <1>     push r8
   478 000011A3 4151                <1>     push r9
   479 000011A5 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   480 000011A7 CD41                <1>     int 41h
   481 000011A9 52                  <1>     push rdx    ;Save on the stack
   482 000011AA 488D1D4FEDFFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   483 000011B1 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   484 000011B3 CD41                <1>     int 41h
   485 000011B5 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   486 000011B8 4989D9              <1>     mov r9, rbx
   487 000011BB 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   488 000011C2 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   489 000011C7 F348A5              <1>     rep movsq   ;Copy command line over
   490                              <1>     ;call doCommandLine
   491 000011CA 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   492 000011CB B450                <1>     mov ah, 50h ;Set Current PSP
   493 000011CD CD41                <1>     int 41h
   494 000011CF 4159                <1>     pop r9
   495 000011D1 4158                <1>     pop r8
   496 000011D3 48CF                <1>     iretq
    16                                  %include "./Source/Utils/COMMAND/Source/cmdFunc.asm"
    17                              <1> ;Note! Each function must setup the DTA to use for itself.
    18                              <1> ;There is no requirement to preserve the DTA across a call.
    19                              <1> ;Only the Int 4Eh entry point will preserve the callers DTA.
    20                              <1> 
    21                              <1> ;Common Error Messages, jumped to to return from
    22                              <1> noSelfCopyError:
    23 000011D5 488D1507F6FFFF      <1>     lea rdx, noSelfCopy
    24 000011DC EB34                <1>     jmp short badCmn
    25                              <1> badParamError:
    26 000011DE 488D15BCF6FFFF      <1>     lea rdx, badParm
    27 000011E5 EB2B                <1>     jmp short badCmn
    28                              <1> badDriveError:
    29 000011E7 488D1576F6FFFF      <1>     lea rdx, badDrv
    30 000011EE EB22                <1>     jmp short badCmn
    31                              <1> badArgError:
    32 000011F0 488D1527F9FFFF      <1>     lea rdx, badArgs
    33 000011F7 EB19                <1>     jmp short badCmn
    34                              <1> badFileError:
    35 000011F9 488D1502F9FFFF      <1>     lea rdx, badSpec
    36 00001200 EB10                <1>     jmp short badCmn
    37                              <1> badDupFnf:
    38                              <1> ;Hybrid error message
    39 00001202 488D1567F5FFFF      <1>     lea rdx, dupName
    40 00001209 EB07                <1>     jmp short badCmn
    41                              <1> badDirError:
    42 0000120B 488D1590F7FFFF      <1>     lea rdx, badDir
    43                              <1> badCmn:
    44 00001212 B800090000          <1>     mov eax, 0900h
    45 00001217 CD41                <1>     int 41h
    46 00001219 F9                  <1>     stc ;Return with CY => Error occured
    47                              <1>     return
    19                              <2> %%_ret:
    20 0000121A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    48                              <1> 
    49                              <1> dir:
    50 0000121B C6057FF1FFFF00      <1>     mov byte [dirPrnType], 0    ;Clear DIR flags
    51 00001222 C60579F1FFFF00      <1>     mov byte [dirLineCtr], 0
    52 00001229 C60573F1FFFF00      <1>     mov byte [dirFileCtr], 0
    53 00001230 C605EEF1FFFF00      <1>     mov byte [dirPathArg], 0    ;Null terminate the start of the buffer
    54 00001237 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    54 00001240 3F                  <1>
    55 00001241 488D3D5DF2FFFF      <1>     lea rdi, dirSrchPat ;Start also by initialising the search pattern
    56 00001248 48AB                <1>     stosq
    57 0000124A 48FFC7              <1>     inc rdi ;Go past dot
    58 0000124D 668907              <1>     mov word [rdi], ax
    59 00001250 884702              <1>     mov byte [rdi + 2], al
    60                              <1>     ;Start by scanning for the switches
    61 00001253 488D3D35EFFFFF      <1>     lea rdi, cmdBuffer + 1  ;Goto command line input chars count
    62 0000125A 0FB60F              <1>     movzx ecx, byte [rdi]   ;Get number of chars typed
    63 0000125D 48FFC7              <1>     inc rdi ;Goto first char typed in
    64 00001260 4889FE              <1>     mov rsi, rdi    ;Use rsi as start of buffer counter
    65 00001263 8A05BBEDFFFF        <1>     mov al, byte [switchChar]   ;Scan for switchchars
    66                              <1> .switchScan:
    67 00001269 F2AE                <1>     repne scasb ;Scan for a switchchar
    68 0000126B 67E322              <1>     jecxz .switchScanDone
    69 0000126E 8A07                <1>     mov al, byte [rdi]  ;Get the byte pointed to by rdi
    70 00001270 24DF                <1>     and al, 0DFh    ;UC it
    71 00001272 3C57                <1>     cmp al, "W" ;Wide print mode?
    72 00001274 7509                <1>     jne .notWideSw
    73 00001276 800D24F1FFFF01      <1>     or byte [dirPrnType], 1 ;Set the correct bit
    74 0000127D EBEA                <1>     jmp short .switchScan
    75                              <1> .notWideSw:
    76 0000127F 3C50                <1>     cmp al, "P" ;Pause mode?
    77 00001281 0F8557FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    78 00001287 800D13F1FFFF02      <1>     or byte [dirPrnType], 2 ;Set correct bit
    79 0000128E EBD9                <1>     jmp short .switchScan
    80                              <1> .switchScanDone:
    81                              <1> ;If no args, only switches, we search CWD
    82                              <1> ;If one arg, search that 
    83                              <1> ;If more than one, fail
    84 00001290 488D35F9EEFFFF      <1>     lea rsi, cmdBuffer + 2
    85 00001297 E8C8120000          <1>     call skipSpaces ;Skip leading spaces
    86 0000129C 4881C603000000      <1>     add rsi, 3  ;Go past the DIR (always three chars)
    87                              <1> .loop:
    88 000012A3 E8BC120000          <1>     call skipSpaces ;Skip spaces after
    89 000012A8 AC                  <1>     lodsb   ;Get first non space char
    90 000012A9 E8A5120000          <1>     call isALEndOfCommand   ;If this is the end char CR or "|", exit
    91 000012AE 7442                <1>     jz .eocNoNull
    92 000012B0 3A056EEDFFFF        <1>     cmp al, byte [switchChar]  ;Is al a switch char?
    93 000012B6 7509                <1>     jne .notSwitch
    94                              <1>     ;Now we skip the switch if it was a switch
    95 000012B8 E83E120000          <1>     call findTerminatorOrEOC    ;Go past the switch
    96 000012BD 7233                <1>     jc .eocNoNull  ;If we reach the EOC, exit,
    97 000012BF EBE2                <1>     jmp short .loop
    98                              <1> .notSwitch:
    99                              <1>     ;If not a switch, should be a path. Copy to buffer and keep searching
   100 000012C1 803D5DF1FFFF00      <1>     cmp byte [dirPathArg], 0    ;If a second path provided, error
   101 000012C8 0F8522FFFFFF        <1>     jne badArgError
   102 000012CE 488D3D50F1FFFF      <1>     lea rdi, dirPathArg ;Store the path to search here AS WRITTEN BY USER
   103 000012D5 48FFCE              <1>     dec rsi ;Go back to the start of the string
   104                              <1> .nameCopy:
   105 000012D8 AC                  <1>     lodsb
   106 000012D9 E875120000          <1>     call isALEndOfCommand
   107 000012DE 740F                <1>     jz .eocReached
   108 000012E0 E84B120000          <1>     call isALterminator
   109 000012E5 7403                <1>     jz .terminateCopy
   110 000012E7 AA                  <1>     stosb
   111 000012E8 EBEE                <1>     jmp short .nameCopy
   112                              <1> .terminateCopy:
   113 000012EA 31C0                <1>     xor eax, eax
   114 000012EC AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   115 000012ED EBB4                <1>     jmp short .loop ;Now search if another 
   116                              <1> .eocReached:
   117 000012EF 31C0                <1>     xor eax, eax
   118 000012F1 AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   119                              <1> .eocNoNull:
   120 000012F2 803D2CF1FFFF00      <1>     cmp byte [dirPathArg], 0    ;If no path provided, use CWD for current drive
   121 000012F9 7434                <1>     je .currentDrv
   122                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   123 000012FB 488D3523F1FFFF      <1>     lea rsi, dirPathArg
   124 00001302 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   125 00001306 7527                <1>     jne .currentDrv
   126                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   127 00001308 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   128 0000130D 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   129 00001311 B801290000          <1>     mov eax, 2901h   ;Parse filename
   130 00001316 CD41                <1>     int 41h
   131 00001318 3CFF                <1>     cmp al, -1
   132 0000131A 0F84C7FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   133                              <1>     ;Else the drive in the fcb is valid
   134 00001320 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   135 00001325 FEC8                <1>     dec al  ;Convert to 0 based drive number
   136 00001327 880577F0FFFF        <1>     mov byte [dirDrv], al
   137 0000132D EB0B                <1>     jmp short .dirPrintVol
   138                              <1> .currentDrv:
   139 0000132F E8B3110000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   140 00001334 88056AF0FFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   141                              <1> .dirPrintVol:
   142 0000133A 0FB60563F0FFFF      <1>     movzx eax, byte [dirDrv] 
   143 00001341 E8850A0000          <1>     call volume.dirEP
   144 00001346 803DD8F0FFFF00      <1>     cmp byte [dirPathArg], 0    ;Null path here, 
   145 0000134D 7409                <1>     je .printCWD
   146 0000134F 803DD2F0FFFF00      <1>     cmp byte [dirPathArg + 3], 0    ;Was this X:,0?
   147 00001356 7400                <1>     je .printCWD
   148                              <1>     ;Here we have a path
   149                              <1>     ;Temp measure, we just fall through ignoring the path provided
   150                              <1> .printCWD:
   151 00001358 8A1546F0FFFF        <1>     mov dl, byte [dirDrv]
   152 0000135E 88D0                <1>     mov al, dl
   153 00001360 0441                <1>     add al, "A"
   154 00001362 B43A                <1>     mov ah, ":"
   155 00001364 668905B6EFFFFF      <1>     mov word [searchSpec], ax
   156 0000136B 8A05B2ECFFFF        <1>     mov al, byte [pathSep]
   157 00001371 8805ACEFFFFF        <1>     mov byte [searchSpec + 2], al
   158 00001377 488D35A6EFFFFF      <1>     lea rsi, searchSpec + 3  ;Make space for a X:"\"
   159 0000137E B447                <1>     mov ah, 47h ;Get Current Working Directory
   160 00001380 FEC2                <1>     inc dl  ;Convert to 1 based number
   161 00001382 CD41                <1>     int 41h
   162 00001384 488D3D96EFFFFF      <1>     lea rdi, searchSpec
   163 0000138B E85C110000          <1>     call strlen
   164 00001390 FFC9                <1>     dec ecx
   165 00001392 C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   166 00001396 488D156DF6FFFF      <1>     lea rdx, dirMain
   167 0000139D B409                <1>     mov ah, 09h
   168 0000139F CD41                <1>     int 41h
   169 000013A1 4889FA              <1>     mov rdx, rdi    ;Print the current directory we are working on
   170 000013A4 B409                <1>     mov ah, 09h
   171 000013A6 CD41                <1>     int 41h
   172 000013A8 488D154CF3FFFF      <1>     lea rdx, crlf2
   173 000013AF B409                <1>     mov ah, 09h
   174 000013B1 CD41                <1>     int 41h
   175 000013B3 E801000000          <1>     call .searchForFile
   176                              <1>     return
    19                              <2> %%_ret:
    20 000013B8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   177                              <1>     ;If we get no path spec or just a X: path spec then we 
   178                              <1>     ; search the current working directory for that pathspec
   179                              <1>     ;If we get an actual pathspec, we first save the CWD for that drive
   180                              <1>     ; and then we try to make the pathspec the CWD. 
   181                              <1>     ;   If it works, we then search *.* in that folder and return the og CWD.
   182                              <1>     ;   If it fails, we then search one level up, for the search pattern
   183                              <1>     ;    that we compute.
   184                              <1> 
   185                              <1>     
   186                              <1>     ;Now we need to print the path to the folder we will be searching in
   187                              <1> .searchForFile:
   188                              <1>     ;Now we search for the files
   189                              <1>     ;RCX must have the number of chars to the end of the pathspec
   190 000013B9 488D3D61EFFFFF      <1>     lea rdi, searchSpec
   191 000013C0 8A055DECFFFF        <1>     mov al, byte [pathSep]
   192 000013C6 38440FFF            <1>     cmp byte [rdi + rcx - 1], al
   193 000013CA 7405                <1>     je .noAddSlash  ;Deals with special case of root dir
   194 000013CC 88040F              <1>     mov byte [rdi + rcx], al
   195 000013CF FFC1                <1>     inc ecx
   196                              <1> .noAddSlash:
   197 000013D1 488D3C0F            <1>     lea rdi, qword [rdi + rcx]
   198 000013D5 488D35C9F0FFFF      <1>     lea rsi, dirSrchPat
   199 000013DC 4889FA              <1>     mov rdx, rdi    ;Ptr to search for in rdx
   200 000013DF 48A5                <1>     movsq
   201 000013E1 A5                  <1>     movsd
   202 000013E2 30C0                <1>     xor al, al
   203 000013E4 AA                  <1>     stosb   ;Store the terminating null
   204 000013E5 B911000000          <1>     mov ecx, dirReadOnly | dirDirectory
   205 000013EA B44E                <1>     mov ah, 4Eh ;Find first
   206 000013EC CD41                <1>     int 41h
   207 000013EE 720B                <1>     jc .dirNoMoreFiles
   208                              <1> .findNext:
   209 000013F0 E878000000          <1>     call .dirPrintFileData  ;Print the file information
   210 000013F5 B44F                <1>     mov ah, 4Fh
   211 000013F7 CD41                <1>     int 41h
   212 000013F9 73F5                <1>     jnc .findNext 
   213                              <1> .dirNoMoreFiles:
   214 000013FB F6059FEFFFFF01      <1>     test byte [dirPrnType], 1
   215 00001402 740B                <1>     jz .dirNoEndNewLine
   216 00001404 488D15EDF2FFFF      <1>     lea rdx, crlf   ;Only need this for /W
   217 0000140B B409                <1>     mov ah, 09h
   218 0000140D CD41                <1>     int 41h
   219                              <1> .dirNoEndNewLine:
   220                              <1>     ;Now we print the number of files and the number of bytes on the disk
   221 0000140F 488D1582F8FFFF      <1>     lea rdx, fourSpc
   222 00001416 B409                <1>     mov ah, 09h
   223 00001418 CD41                <1>     int 41h
   224 0000141A B409                <1>     mov ah, 09h ;Print four Spaces twice
   225 0000141C CD41                <1>     int 41h
   226 0000141E 0FB6057EEFFFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   227 00001425 E8BB120000          <1>     call printDecimalWord
   228 0000142A 488D1512F4FFFF      <1>     lea rdx, dirOk
   229 00001431 B409                <1>     mov ah, 09h
   230 00001433 CD41                <1>     int 41h
   231 00001435 488D1561F8FFFF      <1>     lea rdx, threeSpc
   232 0000143C B409                <1>     mov ah, 09h
   233 0000143E CD41                <1>     int 41h
   234 00001440 B800360000          <1>     mov eax, 3600h ;Get disk info
   235 00001445 8A1559EFFFFF        <1>     mov dl, byte [dirDrv]
   236 0000144B FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   237 0000144D CD41                <1>     int 41h ;Get disk free space info
   238 0000144F 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   239 00001452 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   240 00001455 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   241 00001457 F7E1                <1>     mul ecx ;Get bytes per cluster
   242 00001459 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   243                              <1>     ;rax now has the number of free bytes on the disk
   244 0000145C E884120000          <1>     call printDecimalWord
   245 00001461 488D15E5F3FFFF      <1>     lea rdx, bytesOk
   246 00001468 B409                <1>     mov ah, 09h
   247 0000146A CD41                <1>     int 41h
   248                              <1>     return
    19                              <2> %%_ret:
    20 0000146C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   249                              <1> 
   250                              <1> .dirPrintFileData:
   251                              <1> ;Use fcbCmdSpec to build the file name with space
   252                              <1> ;Start by print the name (same for both cases)
   253                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   254 0000146D F60564ECFFFF06      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles
   255                              <1>     retnz   ;Simply return if either bit is set
    51                              <2> cret nz
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001474 75(6C)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   256 00001476 488D3564ECFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   257 0000147D 488D3DD9EDFFFF      <1>     lea rdi, fcbCmdSpec
   258 00001484 E834110000          <1>     call asciiFilenameToFCB
   259 00001489 488D15CDEDFFFF      <1>     lea rdx, fcbCmdSpec
   260 00001490 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   261 00001495 BB01000000          <1>     mov ebx, 1  ;STDOUT
   262 0000149A B440                <1>     mov ah, 40h ;Write handle
   263 0000149C CD41                <1>     int 41h
   264 0000149E 52                  <1>     push rdx
   265 0000149F B220                <1>     mov dl, " "
   266 000014A1 B402                <1>     mov ah, 02h ;Print char
   267 000014A3 CD41                <1>     int 41h
   268 000014A5 5A                  <1>     pop rdx
   269 000014A6 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   270 000014AD B903000000          <1>     mov ecx, 3  ;Print three chars
   271 000014B2 BB01000000          <1>     mov ebx, 1  ;STDOUT
   272 000014B7 B440                <1>     mov ah, 40h ;Write handle
   273 000014B9 CD41                <1>     int 41h
   274 000014BB F605DFEEFFFF01      <1>     test byte [dirPrnType], 1
   275 000014C2 0F85A8000000        <1>     jnz .widePrint
   276                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   277                              <1>     ;Now check if a DIR
   278 000014C8 F60509ECFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   279 000014CF 7418                <1>     jz .dirPrintNotDir
   280 000014D1 488D1583F3FFFF      <1>     lea rdx, dirLbl
   281 000014D8 B409                <1>     mov ah, 09h
   282 000014DA CD41                <1>     int 41h
   283 000014DC 488D15BAF7FFFF      <1>     lea rdx, threeSpc
   284 000014E3 B409                <1>     mov ah, 09h
   285 000014E5 CD41                <1>     int 41h
   286 000014E7 EB4F                <1>     jmp short .dirPrintFileDT
   287                              <1> .dirPrintNotDir:
   288                              <1> ;Here we print the file size
   289 000014E9 B220                <1>     mov dl, " "
   290 000014EB B402                <1>     mov ah, 02h
   291 000014ED CD41                <1>     int 41h
   292 000014EF 8B05E8EBFFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   293 000014F5 E85C120000          <1>     call getDecimalWord
   294 000014FA 4889CB              <1>     mov rbx, rcx
   295 000014FD 51                  <1>     push rcx
   296 000014FE 480FCB              <1>     bswap rbx
   297 00001501 B908000000          <1>     mov ecx, 8
   298                              <1> .dirPrintFileSizePrep:
   299 00001506 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   300 00001508 7514                <1>     jne .dirPrintFileSize
   301 0000150A B402                <1>     mov ah, 02h
   302 0000150C B220                <1>     mov dl, " "
   303 0000150E CD41                <1>     int 41h
   304 00001510 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   305 00001514 FFC9                <1>     dec ecx
   306 00001516 81F901000000        <1>     cmp ecx, 1
   307 0000151C 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   308                              <1> .dirPrintFileSize:
   309 0000151E 5B                  <1>     pop rbx
   310                              <1> .dirPrintFileSizeLoop:
   311 0000151F 88DA                <1>     mov dl, bl
   312 00001521 B402                <1>     mov ah, 02h
   313 00001523 CD41                <1>     int 41h
   314 00001525 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   315 00001529 FFC9                <1>     dec ecx
   316 0000152B 75F2                <1>     jnz .dirPrintFileSizeLoop
   317 0000152D 488D156DF7FFFF      <1>     lea rdx, twoSpc
   318 00001534 B409                <1>     mov ah, 09h
   319 00001536 CD41                <1>     int 41h
   320                              <1> .dirPrintFileDT:
   321 00001538 B220                <1>     mov dl, " "
   322 0000153A B402                <1>     mov ah, 02h
   323 0000153C CD41                <1>     int 41h
   324 0000153E 0FB70596EBFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   325 00001545 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   326 00001547 E8F10C0000          <1>     call printDate
   327 0000154C 488D154EF7FFFF      <1>     lea rdx, twoSpc
   328 00001553 B409                <1>     mov ah, 09h
   329 00001555 CD41                <1>     int 41h
   330 00001557 0FB7057BEBFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   331 0000155E E8FC0D0000          <1>     call printTime
   332 00001563 488D158EF1FFFF      <1>     lea rdx, crlf
   333 0000156A B409                <1>     mov ah, 09h
   334 0000156C CD41                <1>     int 41h
   335 0000156E EB0B                <1>     jmp short .dirPrintNameExit
   336                              <1> .widePrint:
   337                              <1> ;If /W, print name space ext space space space space
   338 00001570 488D1521F7FFFF      <1>     lea rdx, fourSpc
   339 00001577 B409                <1>     mov ah, 09h ;Print string
   340 00001579 CD41                <1>     int 41h
   341                              <1> .dirPrintNameExit:
   342 0000157B FE0522EEFFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   343 00001581 FE051BEEFFFF        <1>     inc byte [dirLineCtr]
   344 00001587 803D14EEFFFF17      <1>     cmp byte [dirLineCtr], 23
   345                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 0000158E 7401                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 00001590 C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   346 00001591 488D15EAF2FFFF      <1>     lea rdx, pauseMes
   347 00001598 B409                <1>     mov ah, 09h
   348 0000159A CD41                <1>     int 41h
   349 0000159C B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   350 0000159E CD41                <1>     int 41h
   351 000015A0 C605FBEDFFFF00      <1>     mov byte [dirLineCtr], 0
   352 000015A7 488D154AF1FFFF      <1>     lea rdx, crlf   ;Force new line
   353 000015AE B409                <1>     mov ah, 09h
   354 000015B0 CD41                <1>     int 41h
   355                              <1>     return
    19                              <2> %%_ret:
    20 000015B2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   356                              <1> 
   357                              <1> chdir:
   358 000015B3 F605F3EAFFFFFF      <1>     test byte [arg1Flg], -1
   359 000015BA 754D                <1>     jnz .changeDir
   360                              <1>     ;Print CWD
   361                              <1> .printCWD:
   362 000015BC E87F0E0000          <1>     call putCWDInPrompt ;Exactly the same procedure
   363 000015C1 E8610C0000          <1>     call printCRLF
   364                              <1>     return
    19                              <2> %%_ret:
    20 000015C6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   365                              <1> .printDiskCWD:
   366                              <1> ;Print CWD for a specified drive
   367 000015C7 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   368 000015CB 88D0                <1>     mov al, dl
   369 000015CD 0440                <1>     add al, "@" ;Get the UC letter
   370 000015CF B43A                <1>     mov ah, ":"
   371 000015D1 488D3D49EDFFFF      <1>     lea rdi, searchSpec
   372 000015D8 66AB                <1>     stosw   ;Store X:, rdi+=2
   373 000015DA 8A0543EAFFFF        <1>     mov al, byte [pathSep]
   374 000015E0 AA                  <1>     stosb   ;Store pathSep, inc rdi
   375 000015E1 B447                <1>     mov ah, 47h ;Get Current Working Directory
   376 000015E3 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   377 000015E6 CD41                <1>     int 41h
   378 000015E8 E8FF0E0000          <1>     call strlen
   379 000015ED 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   380 000015F3 B440                <1>     mov ah, 40h ;Write to handle
   381 000015F5 BB01000000          <1>     mov ebx, 1  ;STDOUT
   382 000015FA 488D1520EDFFFF      <1>     lea rdx, searchSpec
   383 00001601 CD41                <1>     int 41h
   384 00001603 E81F0C0000          <1>     call printCRLF
   385                              <1>     return
    19                              <2> %%_ret:
    20 00001608 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   386                              <1> .changeDir:
   387 00001609 8A05A0EAFFFF        <1>     mov al, byte [arg1FCBret]
   388 0000160F 3CFF                <1>     cmp al, -1 
   389 00001611 0F84D0FBFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   390 00001617 4180785D20          <1>     cmp byte [r8 + fcb1 + fcb.filename], " "
   391 0000161C 7520                <1>     jne .getFQPath
   392                              <1>     ;Now we double check that on the command line we have . or ..
   393 0000161E 0FB60589EAFFFF      <1>     movzx eax, byte [arg1Off]
   394 00001625 488D3562EBFFFF      <1>     lea rsi, cmdBuffer
   395 0000162C 4801C6              <1>     add rsi, rax
   396 0000162F 8A05EEE9FFFF        <1>     mov al, byte [pathSep]
   397 00001635 3806                <1>     cmp byte [rsi], al  ;Is the first char a pathsep?
   398 00001637 7405                <1>     je .getFQPath
   399 00001639 803E2E              <1>     cmp byte [rsi], "."
   400 0000163C 7589                <1>     jne .printDiskCWD
   401                              <1>     ;If the path is . or .., its acceptable, else fail
   402                              <1> .getFQPath:
   403 0000163E E804100000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   404 00001643 0F82C2FBFFFF        <1>     jc badDirError  ;If this returns CF=CY, its a badDir
   405 00001649 488D15D1ECFFFF      <1>     lea rdx, searchSpec
   406 00001650 B43B                <1>     mov ah, 3Bh ;CHDIR
   407 00001652 CD41                <1>     int 41h
   408 00001654 0F82B1FBFFFF        <1>     jc badDirError
   409                              <1>     return
    19                              <2> %%_ret:
    20 0000165A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   410                              <1> 
   411                              <1> mkdir:
   412 0000165B F6054BEAFFFFFF      <1>     test byte [arg1Flg], -1
   413 00001662 0F8488FBFFFF        <1>     jz badArgError
   414 00001668 F60541EAFFFFFF      <1>     test byte [arg2Flg], -1
   415 0000166F 0F857BFBFFFF        <1>     jnz badArgError
   416                              <1>     ;We have exactly one argument
   417 00001675 8A0534EAFFFF        <1>     mov al, byte [arg1FCBret]
   418 0000167B 3CFF                <1>     cmp al, -1 
   419 0000167D 0F8464FBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   420 00001683 E8BF0F0000          <1>     call buildCommandPath
   421 00001688 488D1592ECFFFF      <1>     lea rdx, searchSpec
   422 0000168F B800390000          <1>     mov eax, 3900h  ;MKDIR
   423 00001694 CD41                <1>     int 41h
   424                              <1>     retnc
    67                              <2> cret nc
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001696 73(5A)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   425                              <1> .badMake:   ;Else, bad make
   426 00001698 488D1517F3FFFF      <1>     lea rdx, badMD
   427 0000169F B800090000          <1>     mov eax, 0900h
   428 000016A4 CD41                <1>     int 41h
   429                              <1>     return
    19                              <2> %%_ret:
    20 000016A6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   430                              <1> 
   431                              <1> rmdir:
   432 000016A7 F605FFE9FFFFFF      <1>     test byte [arg1Flg], -1
   433 000016AE 0F843CFBFFFF        <1>     jz badArgError
   434 000016B4 F605F5E9FFFFFF      <1>     test byte [arg2Flg], -1
   435 000016BB 0F852FFBFFFF        <1>     jnz badArgError
   436                              <1>     ;We have exactly one argument
   437 000016C1 8A05E8E9FFFF        <1>     mov al, byte [arg1FCBret]
   438 000016C7 3CFF                <1>     cmp al, -1 
   439 000016C9 0F8418FBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   440 000016CF E8730F0000          <1>     call buildCommandPath
   441 000016D4 488D1546ECFFFF      <1>     lea rdx, searchSpec
   442 000016DB B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   443 000016E0 CD41                <1>     int 41h
   444                              <1>     retnc   ;Return if not carry
    67                              <2> cret nc
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000016E2 73(A6)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   445                              <1> .badRemove:   ;Else, bad make
   446 000016E4 488D15E8F2FFFF      <1>     lea rdx, badRD
   447 000016EB B800090000          <1>     mov eax, 0900h
   448 000016F0 CD41                <1>     int 41h
   449                              <1>     return
    19                              <2> %%_ret:
    20 000016F2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   450                              <1> 
   451                              <1> copy:
   452 000016F3 F605B3E9FFFFFF      <1>     test byte [arg1Flg], -1
   453 000016FA 0F84F0FAFFFF        <1>     jz badArgError
   454 00001700 F605A9E9FFFFFF      <1>     test byte [arg2Flg], -1
   455 00001707 0F84E3FAFFFF        <1>     jz badArgError
   456 0000170D 488D357AEAFFFF      <1>     lea rsi, cmdBuffer
   457 00001714 0FB60593E9FFFF      <1>     movzx eax, byte [arg1Off]
   458 0000171B 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   459                              <1>     ;rsi points to terminating char
   460 0000171E AC                  <1>     lodsb   ;Get first char in AL
   461 0000171F 48FFCE              <1>     dec rsi ;Go back to this char
   462 00001722 E82C0E0000          <1>     call isALEndOfCommand
   463 00001727 0F82B1FAFFFF        <1>     jc badParamError
   464 0000172D 488D3D95EDFFFF      <1>     lea rdi, sourcePath ;Store this in sourcePath
   465                              <1> .copyName1:
   466 00001734 AC                  <1>     lodsb
   467 00001735 E8190E0000          <1>     call isALEndOfCommand
   468 0000173A 0F849EFAFFFF        <1>     je badParamError
   469 00001740 E8EB0D0000          <1>     call isALterminator
   470 00001745 7403                <1>     jz .endOfName1
   471 00001747 AA                  <1>     stosb
   472 00001748 EBEA                <1>     jmp short .copyName1
   473                              <1> .endOfName1:
   474 0000174A 31C0                <1>     xor eax, eax
   475 0000174C AA                  <1>     stosb   ;Store this 0 at rdi
   476 0000174D 488D353AEAFFFF      <1>     lea rsi, cmdBuffer
   477 00001754 0FB60556E9FFFF      <1>     movzx eax, byte [arg2Off]
   478 0000175B 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   479 0000175E 807E013A            <1>     cmp byte [rsi + 1], ":" ;If dest path char 2 is :, must be X:, not allowed
   480 00001762 0F8476FAFFFF        <1>     je badParamError
   481 00001768 AC                  <1>     lodsb   ;Get first char in AL
   482 00001769 48FFCE              <1>     dec rsi ;Go back to this char
   483 0000176C E8E20D0000          <1>     call isALEndOfCommand
   484 00001771 0F8267FAFFFF        <1>     jc badParamError
   485 00001777 488D3DCBEDFFFF      <1>     lea rdi, destPath
   486                              <1> .copyName2:
   487 0000177E AC                  <1>     lodsb
   488 0000177F E8CF0D0000          <1>     call isALEndOfCommand
   489 00001784 740A                <1>     je .endOfName2
   490 00001786 E8A50D0000          <1>     call isALterminator
   491 0000178B 7403                <1>     jz .endOfName2
   492 0000178D AA                  <1>     stosb
   493 0000178E EBEE                <1>     jmp short .copyName2
   494                              <1> .endOfName2:
   495 00001790 31C0                <1>     xor eax, eax
   496 00001792 AA                  <1>     stosb   ;Store this 0 at rdi
   497                              <1> ;Before we open, we check if the two filenames are equal
   498                              <1> ; If so, crap out.
   499 00001793 488D352FEDFFFF      <1>     lea rsi, sourcePath
   500 0000179A 488D3DA8EDFFFF      <1>     lea rdi, destPath
   501 000017A1 B81E120000          <1>     mov eax, 121Eh
   502 000017A6 CD4F                <1>     int 4Fh
   503 000017A8 0F8497000000        <1>     jz .sameFilename
   504                              <1>     ;Open source with read permission
   505                              <1>     ;Open destination with write permission
   506                              <1>     breakpoint
    87 000017AE 6687DB              <2> xchg bx, bx
   507 000017B1 488D1511EDFFFF      <1>     lea rdx, sourcePath
   508 000017B8 B8003D0000          <1>     mov eax, 3D00h  ;Read open
   509 000017BD CD41                <1>     int 41h
   510 000017BF 0F8219FAFFFF        <1>     jc badParamError
   511 000017C5 668905FDEDFFFF      <1>     mov word [sourceHdl], ax
   512 000017CC 488D1576EDFFFF      <1>     lea rdx, destPath
   513 000017D3 B8003C0000          <1>     mov eax, 3C00h  ;Create the file
   514 000017D8 31C9                <1>     xor ecx, ecx    ;No file attributes
   515 000017DA CD41                <1>     int 41h
   516 000017DC 0F828A000000        <1>     jc .badExit
   517 000017E2 668905E2EDFFFF      <1>     mov word [destHdl], ax
   518                              <1>     breakpoint
    87 000017E9 6687DB              <2> xchg bx, bx
   519                              <1> .copyLoop:
   520 000017EC B980000000          <1>     mov ecx, 128
   521 000017F1 488D15D5EDFFFF      <1>     lea rdx, copyBuffer
   522 000017F8 0FB71DCAEDFFFF      <1>     movzx ebx, word [sourceHdl]
   523 000017FF B43F                <1>     mov ah, 3Fh ;Read
   524 00001801 CD41                <1>     int 41h
   525 00001803 7267                <1>     jc .badExit
   526 00001805 81F980000000        <1>     cmp ecx, 128
   527 0000180B 7226                <1>     jb .okExit
   528 0000180D B980000000          <1>     mov ecx, 128
   529 00001812 488D15B4EDFFFF      <1>     lea rdx, copyBuffer
   530 00001819 0FB71DABEDFFFF      <1>     movzx ebx, word [destHdl]
   531 00001820 B440                <1>     mov ah, 40h ;Write
   532 00001822 CD41                <1>     int 41h
   533 00001824 7246                <1>     jc .badExit
   534 00001826 81F980000000        <1>     cmp ecx, 128
   535 0000182C 73BE                <1>     jnb .copyLoop
   536 0000182E E800000000          <1>     call .okExit
   537                              <1> .okExit:
   538 00001833 B402                <1>     mov ah, 02h
   539 00001835 B231                <1>     mov dl, "1" ;1 File(s) copied
   540 00001837 CD41                <1>     int 41h
   541 00001839 488D15F1EFFFFF      <1>     lea rdx, copyOk
   542 00001840 B409                <1>     mov ah, 09h
   543 00001842 CD41                <1>     int 41h
   544                              <1>     return
    19                              <2> %%_ret:
    20 00001844 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   545                              <1> .sameFilename:
   546 00001845 E805000000          <1>     call .leaveCopyClose ;Close the handles
   547 0000184A E986F9FFFF          <1>     jmp noSelfCopyError
   548                              <1> .leaveCopyClose:
   549 0000184F 668B1D73EDFFFF      <1>     mov bx, word [sourceHdl]
   550 00001856 B8003E0000          <1>     mov eax, 3E00h
   551 0000185B CD41                <1>     int 41h
   552 0000185D 668B1D67EDFFFF      <1>     mov bx, word [destHdl]
   553 00001864 B8003E0000          <1>     mov eax, 3E00h
   554 00001869 CD41                <1>     int 41h
   555                              <1>     return
    19                              <2> %%_ret:
    20 0000186B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   556                              <1> .badExit:
   557                              <1> ;Prototypically use badParamError for error reporting... sucks I know
   558 0000186C 668B1D56EDFFFF      <1>     mov bx, word [sourceHdl]
   559 00001873 6681FBFFFF          <1>     cmp bx, -1
   560 00001878 7407                <1>     je .skipSource
   561 0000187A B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
   562 0000187F CD41                <1>     int 41h
   563                              <1> .skipSource:
   564 00001881 668B1D43EDFFFF      <1>     mov bx, word [destHdl]
   565 00001888 6681FBFFFF          <1>     cmp bx, -1
   566 0000188D 0F844BF9FFFF        <1>     je badParamError
   567 00001893 B8003E0000          <1>     mov eax, 3E00h
   568 00001898 CD41                <1>     int 41h
   569 0000189A E93FF9FFFF          <1>     jmp badParamError
   570                              <1> 
   571                              <1> erase:
   572 0000189F F60507E8FFFFFF      <1>     test byte [arg1Flg], -1
   573 000018A6 0F8444F9FFFF        <1>     jz badArgError
   574 000018AC E8960D0000          <1>     call buildCommandPath
   575 000018B1 488D1569EAFFFF      <1>     lea rdx, searchSpec
   576 000018B8 B800410000          <1>     mov eax, 4100h  ;Delete File 
   577 000018BD 31C9                <1>     xor ecx, ecx
   578 000018BF CD41                <1>     int 41h
   579 000018C1 0F8229F9FFFF        <1>     jc badArgError
   580                              <1>     return
    19                              <2> %%_ret:
    20 000018C7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   581                              <1> date:
   582 000018C8 488D150AF0FFFF      <1>     lea rdx, curDate
   583 000018CF B409                <1>     mov ah, 09h
   584 000018D1 CD41                <1>     int 41h
   585 000018D3 B42A                <1>     mov ah, 2Ah ;DOS get date
   586 000018D5 CD41                <1>     int 41h
   587                              <1> 	;AL = day of the week (0=Sunday)
   588                              <1> 	;CX = year (1980-2099)
   589                              <1> 	;DH = month (1-12)
   590                              <1> 	;DL = day (1-31)
   591 000018D7 66890DE7EBFFFF      <1>     mov word [td1], cx
   592 000018DE 8815E3EBFFFF        <1>     mov byte [td3], dl
   593 000018E4 8835DEEBFFFF        <1>     mov byte [td4], dh
   594 000018EA 0FB6C0              <1>     movzx eax, al
   595 000018ED 89C3                <1>     mov ebx, eax
   596 000018EF D1E3                <1>     shl ebx, 1   ;Multiply by 2
   597 000018F1 01D8                <1>     add eax, ebx ;Make it 3 times 
   598 000018F3 488D15BBEFFFFF      <1>     lea rdx, dayName
   599 000018FA 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   600 000018FE B903000000          <1>     mov ecx, 3  ;Print three chars
   601 00001903 BB01000000          <1>     mov ebx, 1  ;STDOUT
   602 00001908 B440                <1>     mov ah, 40h ;Write to handle
   603 0000190A CD41                <1>     int 41h
   604 0000190C B220                <1>     mov dl, " "
   605 0000190E B402                <1>     mov ah, 02h
   606 00001910 CD41                <1>     int 41h
   607                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   608                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   609                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   610 00001912 0FB705ACEBFFFF      <1>     movzx eax, word [td1]   ;Get this word
   611 00001919 C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   612 0000191C 0FB61DA5EBFFFF      <1>     movzx ebx, byte [td4]
   613 00001923 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   614 00001926 09D8                <1>     or eax, ebx ;Add this date to eax
   615 00001928 0FB61D98EBFFFF      <1>     movzx ebx, byte [td3]
   616 0000192F 09D8                <1>     or eax, ebx
   617 00001931 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   618 00001936 E802090000          <1>     call printDate
   619                              <1> 
   620 0000193B 488D15A8EFFFFF      <1>     lea rdx, newDate
   621 00001942 B409                <1>     mov ah, 09h
   622 00001944 CD41                <1>     int 41h
   623 00001946 488D15BCEFFFFF      <1>     lea rdx, ukDate
   624 0000194D 488D05A8EFFFFF      <1>     lea rax, usDate
   625 00001954 488D1DBBEFFFFF      <1>     lea rbx, jpDate
   626 0000195B 803DCCE6FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   627 00001962 480F47D3            <1>     cmova rdx, rbx
   628 00001966 480F42D0            <1>     cmovb rdx, rax
   629 0000196A B409                <1>     mov ah, 09h
   630 0000196C CD41                <1>     int 41h
   631                              <1> 
   632 0000196E 498D9080000000      <1>     lea rdx, qword [r8 + cmdLineCnt]
   633 00001975 B40A                <1>     mov ah, 0Ah
   634 00001977 CD41                <1>     int 41h
   635 00001979 52                  <1>     push rdx
   636 0000197A 488D1577EDFFFF      <1>     lea rdx, crlf
   637 00001981 B409                <1>     mov ah, 09h
   638 00001983 CD41                <1>     int 41h
   639 00001985 5A                  <1>     pop rdx
   640 00001986 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   641                              <1>     rete    ;Exit!
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 0000198A 7501                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 0000198C C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   642                              <1>     return
    19                              <2> %%_ret:
    20 0000198D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   643                              <1> 
   644                              <1> time:
   645 0000198E 488D159DEFFFFF      <1>     lea rdx, curTime
   646 00001995 B409                <1>     mov ah, 09h
   647 00001997 CD41                <1>     int 41h
   648 00001999 B42C                <1>     mov ah, 2Ch ;DOS get time
   649 0000199B CD41                <1>     int 41h
   650                              <1>     ;CH = hour (0-23)
   651                              <1> 	;CL = minutes (0-59)
   652                              <1> 	;DH = seconds (0-59)
   653                              <1> 	;DL = hundredths (0-99)
   654 0000199D 880D22EBFFFF        <1>     mov byte [td1], cl
   655 000019A3 882D1DEBFFFF        <1>     mov byte [td2], ch
   656 000019A9 881518EBFFFF        <1>     mov byte [td3], dl
   657 000019AF 883513EBFFFF        <1>     mov byte [td4], dh
   658 000019B5 0FB6C5              <1>     movzx eax, ch
   659 000019B8 E8140A0000          <1>     call printTime.printHours
   660                              <1> 
   661 000019BD 8A1578E6FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   662 000019C3 B402                <1>     mov ah, 02h
   663 000019C5 CD41                <1>     int 41h
   664                              <1> 
   665 000019C7 0FB605F7EAFFFF      <1>     movzx eax, byte [td1]   ;Minutes
   666 000019CE E8EE090000          <1>     call printTime.printMinutesAlt
   667                              <1> 
   668 000019D3 8A1562E6FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   669 000019D9 B402                <1>     mov ah, 02h
   670 000019DB CD41                <1>     int 41h
   671                              <1> 
   672 000019DD 0FB605E4EAFFFF      <1>     movzx eax, byte [td4]   ;Seconds
   673 000019E4 E8D8090000          <1>     call printTime.printMinutesAlt
   674                              <1> 
   675 000019E9 B22E                <1>     mov dl, "."
   676 000019EB B402                <1>     mov ah, 02h
   677 000019ED CD41                <1>     int 41h
   678                              <1> 
   679 000019EF 0FB605D1EAFFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   680 000019F6 E8C6090000          <1>     call printTime.printMinutesAlt
   681                              <1> 
   682 000019FB 488D1541EFFFFF      <1>     lea rdx, newTime
   683 00001A02 B409                <1>     mov ah, 09h
   684 00001A04 CD41                <1>     int 41h
   685                              <1> 
   686 00001A06 498D9080000000      <1>     lea rdx, qword [r8 + cmdLineCnt]
   687 00001A0D B40A                <1>     mov ah, 0Ah
   688 00001A0F CD41                <1>     int 41h
   689 00001A11 52                  <1>     push rdx
   690 00001A12 488D15DFECFFFF      <1>     lea rdx, crlf
   691 00001A19 B409                <1>     mov ah, 09h
   692 00001A1B CD41                <1>     int 41h
   693 00001A1D 5A                  <1>     pop rdx
   694 00001A1E 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   695                              <1>     rete    ;Exit!
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 00001A22 7501                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 00001A24 C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   696                              <1>     return
    19                              <2> %%_ret:
    20 00001A25 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   697                              <1> ctty:
   698 00001A26 F60580E6FFFFFF      <1>     test byte [arg1Flg], -1
   699 00001A2D 0F84BDF7FFFF        <1>     jz badArgError
   700 00001A33 F60576E6FFFFFF      <1>     test byte [arg2Flg], -1
   701 00001A3A 0F85B0F7FFFF        <1>     jnz badArgError
   702 00001A40 488D3547E7FFFF      <1>     lea rsi, cmdBuffer
   703 00001A47 0FB60560E6FFFF      <1>     movzx eax, byte [arg1Off]
   704 00001A4E 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
   705 00001A51 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
   706 00001A55 750F                <1>     jne .noDrive
   707 00001A57 0FB60551E6FFFF      <1>     movzx eax, byte [arg1FCBret]
   708 00001A5E 3CFF                <1>     cmp al, -1
   709 00001A60 0F8481F7FFFF        <1>     je badDriveError
   710                              <1> .noDrive:
   711                              <1>     ;Now we open the provided file
   712 00001A66 E85F0D0000          <1>     call copyArgumentToSearchSpec
   713 00001A6B 488D15AFE8FFFF      <1>     lea rdx, searchSpec
   714 00001A72 B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
   715 00001A77 CD41                <1>     int 41h
   716 00001A79 0F827AF7FFFF        <1>     jc badFileError
   717 00001A7F 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
   718 00001A82 B800440000          <1>     mov eax, 4400h  ;Get device word
   719 00001A87 CD41                <1>     int 41h
   720 00001A89 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
   721 00001A8C 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
   722                              <1>     ;Now we set this handle to be STDIO
   723 00001A8E 80CA03              <1>     or dl, 3    ;Set STDIO bits
   724 00001A91 30F6                <1>     xor dh, dh
   725 00001A93 B801440000          <1>     mov eax, 4401h  ;Now we set the device word
   726 00001A98 CD41                <1>     int 41h
   727                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
   728 00001A9A 31C9                <1>     xor ecx, ecx    ;STDIN
   729 00001A9C B446                <1>     mov ah, 46h
   730 00001A9E CD41                <1>     int 41h
   731 00001AA0 FFC1                <1>     inc ecx         ;STDOUT
   732 00001AA2 B446                <1>     mov ah, 46h
   733 00001AA4 CD41                <1>     int 41h
   734 00001AA6 FFC1                <1>     inc ecx         ;STDERR
   735 00001AA8 B446                <1>     mov ah, 46h
   736 00001AAA CD41                <1>     int 41h
   737 00001AAC B43E                <1>     mov ah, 3Eh ;Now we close the original handle
   738 00001AAE CD41                <1>     int 41h
   739                              <1>     return
    19                              <2> %%_ret:
    20 00001AB0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   740                              <1> .badCharDev:
   741 00001AB1 488D158AEFFFFF      <1>     lea rdx, badDev
   742 00001AB8 B409                <1>     mov ah, 09h
   743 00001ABA CD41                <1>     int 41h
   744 00001ABC B43E                <1>     mov ah, 3Eh ;Close opened handle
   745 00001ABE CD41                <1>     int 41h
   746                              <1>     return
    19                              <2> %%_ret:
    20 00001AC0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   747                              <1> 
   748                              <1> cls:  
   749 00001AC1 B800440000          <1>     mov eax, 4400h  ;Get device info
   750 00001AC6 BB01000000          <1>     mov ebx, 1      ;for handle 1
   751 00001ACB CD41                <1>     int 41h         ;in dx
   752 00001ACD F7C280000000        <1>     test edx, devCharDev
   753 00001AD3 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   754 00001AD5 F7C210000000        <1>     test edx, charDevFastOut
   755 00001ADB 743E                <1>     jz .doAnsi
   756                              <1>     ;Test if Int 49h uses Int 30h
   757                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   758                              <1>     ;Int 49h MUST be terminated with a IRETQ, within 1024 bytes
   759 00001ADD B849350000          <1>     mov eax, 3549h  ;Get the vector for interrupt 49h
   760 00001AE2 CD41                <1>     int 41h
   761                              <1> .biosCheck:
   762 00001AE4 66813BCD30          <1>     cmp word [rbx], 30CDh
   763 00001AE9 740C                <1>     je .biosConfirmed
   764 00001AEB 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   765 00001AF0 7429                <1>     je .doAnsi
   766 00001AF2 48FFC3              <1>     inc rbx
   767 00001AF5 EBED                <1>     jmp short .biosCheck
   768                              <1> .biosConfirmed:
   769                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   770 00001AF7 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   771 00001AF9 31DB                <1>     xor ebx, ebx
   772 00001AFB CD30                <1>     int 30h
   773 00001AFD B40F                <1>     mov ah, 0Fh ;Get screen mode
   774 00001AFF CD30                <1>     int 30h
   775 00001B01 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   776 00001B04 FECA                <1>     dec dl
   777 00001B06 B619                <1>     mov dh, 25  ;Number of rows is standard
   778 00001B08 31C0                <1>     xor eax, eax
   779 00001B0A 89C1                <1>     mov ecx, eax
   780 00001B0C B707                <1>     mov bh, 7   ;Screen attributes
   781 00001B0E B406                <1>     mov ah, 6   ;Scroll
   782 00001B10 CD30                <1>     int 30h
   783 00001B12 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   784 00001B14 B700                <1>     mov bh, 0   ;Page 0
   785 00001B16 B402                <1>     mov ah, 2
   786 00001B18 CD30                <1>     int 30h
   787                              <1>     return
    19                              <2> %%_ret:
    20 00001B1A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   788                              <1> .doAnsi:
   789                              <1> ;If an ANSI driver is not installed, this will simply insert blank lines
   790                              <1> ;4 chars in the ansi routine
   791                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   792                              <1> ; understand ANSI codes
   793 00001B1B 488D3572F1FFFF      <1>     lea rsi, ansiCls
   794 00001B22 B904000000          <1>     mov ecx, 4
   795 00001B27 B406                <1>     mov ah, 06h ;Raw char output
   796                              <1> .ansiLp:
   797 00001B29 AC                  <1>     lodsb   ;Get the char in 
   798 00001B2A 88C2                <1>     mov dl, al
   799 00001B2C CD41                <1>     int 41h
   800 00001B2E FFC9                <1>     dec ecx
   801 00001B30 75F7                <1>     jnz .ansiLp
   802                              <1>     return
    19                              <2> %%_ret:
    20 00001B32 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   803                              <1> 
   804                              <1> break:
   805 00001B33 F60573E5FFFFFF      <1>     test byte [arg1Flg], -1
   806 00001B3A 752D                <1>     jnz .argumentProvided
   807                              <1>     ;Here we just get the status of break
   808 00001B3C B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   809 00001B41 CD41                <1>     int 41h
   810 00001B43 88D3                <1>     mov bl, dl
   811 00001B45 488D1598EFFFFF      <1>     lea rdx, breakIs
   812 00001B4C B409                <1>     mov ah, 09h
   813 00001B4E CD41                <1>     int 41h
   814 00001B50 488D1588EFFFFF      <1>     lea rdx, onMes
   815 00001B57 488D0D7BEFFFFF      <1>     lea rcx, offMes
   816 00001B5E 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   817 00001B60 480F44D1            <1>     cmovz rdx, rcx
   818 00001B64 B409                <1>     mov ah, 09h
   819 00001B66 CD41                <1>     int 41h
   820                              <1>     return
    19                              <2> %%_ret:
    20 00001B68 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   821                              <1> .argumentProvided:
   822 00001B69 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   823 00001B6D AD                  <1>     lodsd   ;Read the word
   824 00001B6E 89C3                <1>     mov ebx, eax
   825 00001B70 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   826 00001B75 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   827 00001B78 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   828 00001B7D 7416                <1>     je .maybeOn
   829 00001B7F 663D4F46            <1>     cmp ax, "OF"
   830 00001B83 7523                <1>     jne .badOnOff
   831 00001B85 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   832 00001B8A 6681FB4620          <1>     cmp bx, "F "
   833 00001B8F 7517                <1>     jne .badOnOff
   834                              <1>     ;Set off
   835 00001B91 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   836 00001B93 EB0B                <1>     jmp short .setBreak
   837                              <1> .maybeOn:
   838 00001B95 663D4F4E            <1>     cmp ax, "ON"
   839 00001B99 750D                <1>     jne .badOnOff
   840                              <1>     ;Set on
   841 00001B9B BA01000000          <1>     mov edx, 1
   842                              <1> .setBreak:
   843 00001BA0 B801330000          <1>     mov eax, 3301h  ;Set break
   844 00001BA5 CD41                <1>     int 41h
   845                              <1>     return
    19                              <2> %%_ret:
    20 00001BA7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   846                              <1> .badOnOff:
   847 00001BA8 488D15F5F0FFFF      <1>     lea rdx, badOnOff
   848 00001BAF B409                <1>     mov ah, 09h
   849 00001BB1 CD41                <1>     int 41h
   850                              <1>     return
    19                              <2> %%_ret:
    20 00001BB3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   851                              <1> 
   852                              <1> verify:
   853 00001BB4 F605F2E4FFFFFF      <1>     test byte [arg1Flg], -1
   854 00001BBB 752D                <1>     jnz .argumentProvided
   855                              <1>     ;Here we just get the status of break
   856 00001BBD B800540000          <1>     mov eax, 5400h  ;Get verify status in al
   857 00001BC2 CD41                <1>     int 41h
   858 00001BC4 88C3                <1>     mov bl, al
   859 00001BC6 488D1521EFFFFF      <1>     lea rdx, verifyIs
   860 00001BCD B409                <1>     mov ah, 09h
   861 00001BCF CD41                <1>     int 41h
   862 00001BD1 488D1507EFFFFF      <1>     lea rdx, onMes
   863 00001BD8 488D0DFAEEFFFF      <1>     lea rcx, offMes
   864 00001BDF 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   865 00001BE1 480F44D1            <1>     cmovz rdx, rcx
   866 00001BE5 B409                <1>     mov ah, 09h
   867 00001BE7 CD41                <1>     int 41h
   868                              <1>     return
    19                              <2> %%_ret:
    20 00001BE9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   869                              <1> .argumentProvided:
   870 00001BEA 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   871 00001BEE AD                  <1>     lodsd   ;Read the word
   872 00001BEF 89C3                <1>     mov ebx, eax
   873 00001BF1 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   874 00001BF6 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   875 00001BF9 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   876 00001BFE 7416                <1>     je .maybeOn
   877 00001C00 663D4F46            <1>     cmp ax, "OF"
   878 00001C04 751F                <1>     jne .badOnOff
   879 00001C06 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   880 00001C0B 6681FB4620          <1>     cmp bx, "F "
   881 00001C10 7513                <1>     jne .badOnOff
   882                              <1>     ;Set off
   883 00001C12 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
   884 00001C14 EB0A                <1>     jmp short .setVerify
   885                              <1> .maybeOn:
   886 00001C16 663D4F4E            <1>     cmp ax, "ON"
   887 00001C1A 7509                <1>     jne .badOnOff
   888                              <1>     ;Set on
   889 00001C1C 31C0                <1>     xor eax, eax
   890 00001C1E FFC0                <1>     inc eax ;AL=1 => VERIFY is on
   891                              <1> .setVerify:
   892 00001C20 B42E                <1>     mov ah, 2Eh  ;Set Verify
   893 00001C22 CD41                <1>     int 41h
   894                              <1>     return
    19                              <2> %%_ret:
    20 00001C24 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   895                              <1> .badOnOff:
   896 00001C25 488D1578F0FFFF      <1>     lea rdx, badOnOff
   897 00001C2C B409                <1>     mov ah, 09h
   898 00001C2E CD41                <1>     int 41h
   899                              <1>     return
    19                              <2> %%_ret:
    20 00001C30 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   900                              <1> 
   901                              <1> rename:
   902 00001C31 F60575E4FFFFFF      <1>     test byte [arg1Flg], -1
   903 00001C38 0F84B2F5FFFF        <1>     jz badArgError
   904 00001C3E F6056BE4FFFFFF      <1>     test byte [arg2Flg], -1
   905 00001C45 0F84A5F5FFFF        <1>     jz badArgError
   906 00001C4B 488D353CE5FFFF      <1>     lea rsi, cmdBuffer
   907 00001C52 0FB60555E4FFFF      <1>     movzx eax, byte [arg1Off]
   908 00001C59 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   909                              <1>     ;rsi points to terminating char
   910 00001C5C AC                  <1>     lodsb   ;Get first char in AL
   911 00001C5D 48FFCE              <1>     dec rsi ;Go back to this char
   912 00001C60 E8EE080000          <1>     call isALEndOfCommand
   913 00001C65 0F8273F5FFFF        <1>     jc badParamError
   914 00001C6B 488D3D57E8FFFF      <1>     lea rdi, sourcePath ;Store this in sourcePath
   915                              <1> .copyName1:
   916 00001C72 AC                  <1>     lodsb
   917 00001C73 E8DB080000          <1>     call isALEndOfCommand
   918 00001C78 0F8460F5FFFF        <1>     je badParamError
   919 00001C7E E8AD080000          <1>     call isALterminator
   920 00001C83 7403                <1>     jz .endOfName1
   921 00001C85 AA                  <1>     stosb
   922 00001C86 EBEA                <1>     jmp short .copyName1
   923                              <1> .endOfName1:
   924 00001C88 31C0                <1>     xor eax, eax
   925 00001C8A AA                  <1>     stosb   ;Store this 0 at rdi
   926 00001C8B 488D35FCE4FFFF      <1>     lea rsi, cmdBuffer
   927 00001C92 0FB60518E4FFFF      <1>     movzx eax, byte [arg2Off]
   928 00001C99 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   929 00001C9C 807E013A            <1>     cmp byte [rsi + 1], ":" ;If dest path char 2 is :, must be X:, not allowed
   930 00001CA0 0F8438F5FFFF        <1>     je badParamError
   931 00001CA6 AC                  <1>     lodsb   ;Get first char in AL
   932 00001CA7 48FFCE              <1>     dec rsi ;Go back to this char
   933 00001CAA E8A4080000          <1>     call isALEndOfCommand
   934 00001CAF 0F8229F5FFFF        <1>     jc badParamError
   935 00001CB5 488D3D8DE8FFFF      <1>     lea rdi, destPath
   936                              <1> .copyName2:
   937 00001CBC AC                  <1>     lodsb
   938 00001CBD E891080000          <1>     call isALEndOfCommand
   939 00001CC2 740A                <1>     je .endOfName2
   940 00001CC4 E867080000          <1>     call isALterminator
   941 00001CC9 7403                <1>     jz .endOfName2
   942 00001CCB AA                  <1>     stosb
   943 00001CCC EBEE                <1>     jmp short .copyName2
   944                              <1> .endOfName2:
   945 00001CCE 31C0                <1>     xor eax, eax
   946 00001CD0 AA                  <1>     stosb   ;Store this 0 at rdi
   947 00001CD1 488D15F1E7FFFF      <1>     lea rdx, sourcePath
   948 00001CD8 488D3D6AE8FFFF      <1>     lea rdi, destPath
   949 00001CDF B800560000          <1>     mov eax, 5600h
   950 00001CE4 CD41                <1>     int 41h
   951                              <1>     retnc   ;Return if all oki!
    67                              <2> cret nc
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 00001CE6 7201                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 00001CE8 C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   952 00001CE9 3C0F                <1>     cmp al, errBadDrv
   953 00001CEB 0F84F6F4FFFF        <1>     je badDriveError
   954 00001CF1 3C0B                <1>     cmp al, errBadFmt
   955 00001CF3 0F8412F5FFFF        <1>     je badDirError
   956 00001CF9 E904F5FFFF          <1>     jmp badDupFnf
   957                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   958                              <1> touch:
   959                              <1> ;Temporarily used to create files
   960 00001CFE F605A8E3FFFFFF      <1>     test byte [arg1Flg], -1
   961 00001D05 0F84E5F4FFFF        <1>     jz badArgError
   962 00001D0B E837090000          <1>     call buildCommandPath
   963 00001D10 488D150AE6FFFF      <1>     lea rdx, searchSpec
   964 00001D17 B8003C0000          <1>     mov eax, 3C00h  ;Create file 
   965 00001D1C 31C9                <1>     xor ecx, ecx
   966 00001D1E CD41                <1>     int 41h
   967 00001D20 720B                <1>     jc .touchError
   968 00001D22 0FB7D8              <1>     movzx ebx, ax
   969 00001D25 B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
   970 00001D2A CD41                <1>     int 41h
   971                              <1>     return
    19                              <2> %%_ret:
    20 00001D2C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   972                              <1> .touchError:
   973 00001D2D 488D1548EFFFFF      <1>     lea rdx, touchErr
   974 00001D34 E9D9F4FFFF          <1>     jmp badCmn
   975                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   976                              <1> truename:
   977 00001D39 F6056DE3FFFFFF      <1>     test byte [arg1Flg], -1
   978 00001D40 0F84AAF4FFFF        <1>     jz badArgError
   979 00001D46 E8FC080000          <1>     call buildCommandPath
   980                              <1>     ;Explicitly call Truename if we remove truename from this function
   981 00001D4B 488D3DCFE5FFFF      <1>     lea rdi, searchSpec
   982 00001D52 E895070000          <1>     call strlen
   983 00001D57 FFC9                <1>     dec ecx ;Don't print terminating null
   984 00001D59 488D15C1E5FFFF      <1>     lea rdx, searchSpec
   985 00001D60 BB01000000          <1>     mov ebx, 01
   986 00001D65 B440                <1>     mov ah, 40h
   987 00001D67 CD41                <1>     int 41h
   988 00001D69 E8B9040000          <1>     call printCRLF
   989                              <1>     return
    19                              <2> %%_ret:
    20 00001D6E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   990                              <1> 
   991                              <1> volume:
   992 00001D6F 488D351AE4FFFF      <1>     lea rsi, cmdBuffer + 2  ;Get the command buffer
   993 00001D76 E8E9070000          <1>     call skipSpaces
   994 00001D7B 4881C603000000      <1>     add rsi, 3  ;Go past the VOL command
   995 00001D82 E8DD070000          <1>     call skipSpaces
   996 00001D87 AC                  <1>     lodsb   ;Get the first char, and point rsi to next char
   997 00001D88 E8C6070000          <1>     call isALEndOfCommand   ;If this char is end of command, use current drive
   998 00001D8D 7507                <1>     jnz .checkDriveLetter
   999 00001D8F E853070000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1000 00001D94 EB35                <1>     jmp short .dirEP
  1001                              <1> .checkDriveLetter:
  1002 00001D96 803E3A              <1>     cmp byte [rsi], ":" ;If this is not a :, fail
  1003 00001D99 0F8548F4FFFF        <1>     jne badDriveError
  1004 00001D9F 4889F7              <1>     mov rdi, rsi    ;Save start of drive spec in rsi
  1005 00001DA2 48FFC6              <1>     inc rsi  ;Go past the X: spec
  1006 00001DA5 E8BA070000          <1>     call skipSpaces
  1007 00001DAA AC                  <1>     lodsb   ;Get the non-space char in al
  1008 00001DAB E8A3070000          <1>     call isALEndOfCommand   ;The next non-space char must be terminator
  1009 00001DB0 0F8531F4FFFF        <1>     jne badDriveError
  1010                              <1> ;This argument should've been parsed into FCB1 so use that result
  1011 00001DB6 8A05F3E2FFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1012 00001DBC A8FF                <1>     test al, -1
  1013 00001DBE 0F8523F4FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1014 00001DC4 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1015 00001DC9 FFC8                <1>     dec eax ;Convert to 0 based number
  1016                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al
  1017 00001DCB 0541000000          <1>     add eax, "A" ;Get ASCII representation of 0 based number
  1018 00001DD0 8805E8E6FFFF        <1>     mov byte [volPathBuf], al   ;Store ASCII letter here
  1019 00001DD6 488D15E6E2FFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
  1020 00001DDD B41A                <1>     mov ah, 1Ah
  1021 00001DDF CD41                <1>     int 41h
  1022 00001DE1 488D15D6E6FFFF      <1>     lea rdx, volPathBuf
  1023 00001DE8 66B90800            <1>     mov cx, dirVolumeID
  1024 00001DEC B44E                <1>     mov ah, 4Eh ;Find first
  1025 00001DEE CD41                <1>     int 41h
  1026 00001DF0 7221                <1>     jc .skipVolLbl
  1027 00001DF2 488D35E8E2FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
  1028 00001DF9 488D3DB1E6FFFF      <1>     lea rdi, volLblSpc
  1029 00001E00 B90B000000          <1>     mov ecx, 11 ;Get the 11 chars of the volume label
  1030                              <1> .dirLblCopy:
  1031 00001E05 AC                  <1>     lodsb   ;Get the first char
  1032 00001E06 3C00                <1>     cmp al, 0
  1033 00001E08 7409                <1>     je .skipVolLbl  ;Jump with CF=NC
  1034 00001E0A 3C2E                <1>     cmp al, "."
  1035 00001E0C 7401                <1>     je .dirLblSkipStore
  1036 00001E0E AA                  <1>     stosb
  1037                              <1> .dirLblSkipStore:
  1038 00001E0F FFC9                <1>     dec ecx
  1039 00001E11 75F2                <1>     jnz .dirLblCopy
  1040                              <1>     ;Fallthru with CF=NC
  1041                              <1> .skipVolLbl:
  1042                              <1> ;Print volume label information now
  1043                              <1> ;Propagates the CF if CF was set    
  1044 00001E13 9C                  <1>     pushfq
  1045 00001E14 488D15DDE8FFFF      <1>     lea rdx, crlf
  1046 00001E1B B409                <1>     mov ah, 09h
  1047 00001E1D CD41                <1>     int 41h
  1048 00001E1F 488D1557EBFFFF      <1>     lea rdx, volMes
  1049 00001E26 B409                <1>     mov ah, 09h
  1050 00001E28 CD41                <1>     int 41h
  1051 00001E2A 8A158EE6FFFF        <1>     mov dl, byte [volPathBuf]   ;Print the drive letter out
  1052 00001E30 B402                <1>     mov ah, 02h
  1053 00001E32 CD41                <1>     int 41h
  1054 00001E34 9D                  <1>     popfq
  1055 00001E35 7317                <1>     jnc .volIDOk
  1056 00001E37 488D1556EBFFFF      <1>     lea rdx, volNo
  1057 00001E3E B409                <1>     mov ah, 09h
  1058 00001E40 CD41                <1>     int 41h
  1059 00001E42 488D15AFE8FFFF      <1>     lea rdx, crlf
  1060 00001E49 B409                <1>     mov ah, 09h
  1061 00001E4B CD41                <1>     int 41h
  1062                              <1>     return
    19                              <2> %%_ret:
    20 00001E4D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1063                              <1> .volIDOk:
  1064 00001E4E 488D153AEBFFFF      <1>     lea rdx, volOk
  1065 00001E55 B409                <1>     mov ah, 09h
  1066 00001E57 CD41                <1>     int 41h
  1067 00001E59 488D3D51E6FFFF      <1>     lea rdi, volLblSpc
  1068 00001E60 E887060000          <1>     call strlen
  1069 00001E65 FFC9                <1>     dec ecx
  1070 00001E67 C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
  1071 00001E6B 488D153FE6FFFF      <1>     lea rdx, volLblSpc
  1072 00001E72 B409                <1>     mov ah, 09h
  1073 00001E74 CD41                <1>     int 41h
  1074 00001E76 488D157BE8FFFF      <1>     lea rdx, crlf
  1075 00001E7D B409                <1>     mov ah, 09h
  1076 00001E7F CD41                <1>     int 41h
  1077                              <1>     return
    19                              <2> %%_ret:
    20 00001E81 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1078                              <1> 
  1079                              <1> version:
  1080 00001E82 488D156FE8FFFF      <1>     lea rdx, crlf
  1081 00001E89 B409                <1>     mov ah, 09h
  1082 00001E8B CD41                <1>     int 41h
  1083 00001E8D 488D15D7EAFFFF      <1>     lea rdx, dosVer
  1084 00001E94 B409                <1>     mov ah, 09h
  1085 00001E96 CD41                <1>     int 41h
  1086 00001E98 E80C000000          <1>     call .printVersionNumber
  1087 00001E9D 488D1554E8FFFF      <1>     lea rdx, crlf
  1088 00001EA4 B409                <1>     mov ah, 09h
  1089 00001EA6 CD41                <1>     int 41h
  1090                              <1>     return
    19                              <2> %%_ret:
    20 00001EA8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1091                              <1> .printVersionNumber:
  1092 00001EA9 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1093 00001EAB CD41                <1>     int 41h
  1094 00001EAD 50                  <1>     push rax
  1095 00001EAE 0FB6C0              <1>     movzx eax, al
  1096 00001EB1 E82F080000          <1>     call printDecimalWord
  1097 00001EB6 B22E                <1>     mov dl, "."
  1098 00001EB8 B402                <1>     mov ah, 02h
  1099 00001EBA CD41                <1>     int 41h
  1100 00001EBC 58                  <1>     pop rax
  1101 00001EBD 0FB6C4              <1>     movzx eax, ah
  1102 00001EC0 E820080000          <1>     call printDecimalWord
  1103                              <1>     return
    19                              <2> %%_ret:
    20 00001EC5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1104                              <1> 
  1105                              <1> 
  1106                              <1> memory:
  1107 00001EC6 488B1D4AE1FFFF      <1>     mov rbx, qword [sysVars]
  1108 00001ECD 4885DB              <1>     test rbx, rbx
  1109 00001ED0 7510                <1>     jnz .sysvarsOK
  1110 00001ED2 488D1544EDFFFF      <1>     lea rdx, memBad0
  1111 00001ED9 B409                <1>     mov ah, 09h
  1112 00001EDB CD41                <1>     int 41h
  1113 00001EDD E9A6080000          <1>     jmp freezePC.altEP
  1114                              <1> .sysvarsOK:
  1115                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1116                              <1>     ; and rcx to store Application memory
  1117 00001EE2 31F6                <1>     xor esi, esi
  1118 00001EE4 31FF                <1>     xor edi, edi
  1119 00001EE6 31ED                <1>     xor ebp, ebp
  1120 00001EE8 31C9                <1>     xor ecx, ecx
  1121 00001EEA 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1122 00001EEE 488B1B              <1>     mov rbx, qword [rbx]
  1123                              <1> .memLp:
  1124 00001EF1 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1125 00001EF4 7409                <1>     je .validMCB
  1126 00001EF6 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1127 00001EF9 0F8501010000        <1>     jne .badMCBFound
  1128                              <1> .validMCB:
  1129 00001EFF 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1130 00001F02 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1131 00001F06 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1132 00001F0E 7505                <1>     jne .notDOS
  1133 00001F10 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1134 00001F13 EB21                <1>     jmp short .gotoNext
  1135                              <1> .notDOS:
  1136 00001F15 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1137 00001F1D 7505                <1>     jne .notFree
  1138 00001F1F 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1139 00001F22 EB12                <1>     jmp short .gotoNext
  1140                              <1> .notFree:
  1141 00001F24 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1142 00001F2C 7505                <1>     jne .notHole
  1143 00001F2E 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1144 00001F31 EB03                <1>     jmp short .gotoNext
  1145                              <1> .notHole:
  1146 00001F33 4801C1              <1>     add rcx, rax    ;Add to Application count
  1147                              <1> .gotoNext:
  1148 00001F36 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1149 00001F39 7407                <1>     je .endOfWalk
  1150 00001F3B 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  1151 00001F40 EBAF                <1>     jmp short .memLp
  1152                              <1> .endOfWalk:
  1153                              <1>     
  1154 00001F42 488D1535ECFFFF      <1>     lea rdx, memDOS
  1155 00001F49 B409                <1>     mov ah, 09h
  1156 00001F4B CD41                <1>     int 41h
  1157 00001F4D 4889F0              <1>     mov rax, rsi
  1158 00001F50 E89D000000          <1>     call .mcbPrintAmount
  1159 00001F55 488D15BAECFFFF      <1>     lea rdx, memByte
  1160 00001F5C B409                <1>     mov ah, 09h
  1161 00001F5E CD41                <1>     int 41h
  1162                              <1> 
  1163 00001F60 4885ED              <1>     test rbp, rbp
  1164 00001F63 741E                <1>     jz .skipHole
  1165 00001F65 488D155EECFFFF      <1>     lea rdx, memHole
  1166 00001F6C B409                <1>     mov ah, 09h
  1167 00001F6E CD41                <1>     int 41h
  1168 00001F70 4889E8              <1>     mov rax, rbp
  1169 00001F73 E87A000000          <1>     call .mcbPrintAmount
  1170 00001F78 488D1597ECFFFF      <1>     lea rdx, memByte
  1171 00001F7F B409                <1>     mov ah, 09h
  1172 00001F81 CD41                <1>     int 41h
  1173                              <1> .skipHole:
  1174                              <1> 
  1175 00001F83 488D151AECFFFF      <1>     lea rdx, memApp
  1176 00001F8A B409                <1>     mov ah, 09h
  1177 00001F8C CD41                <1>     int 41h
  1178 00001F8E 4889C8              <1>     mov rax, rcx
  1179 00001F91 E85C000000          <1>     call .mcbPrintAmount
  1180 00001F96 488D1579ECFFFF      <1>     lea rdx, memByte
  1181 00001F9D B409                <1>     mov ah, 09h
  1182 00001F9F CD41                <1>     int 41h
  1183                              <1> 
  1184 00001FA1 488D1548ECFFFF      <1>     lea rdx, memFree
  1185 00001FA8 B409                <1>     mov ah, 09h
  1186 00001FAA CD41                <1>     int 41h
  1187 00001FAC 4889F8              <1>     mov rax, rdi
  1188 00001FAF E83E000000          <1>     call .mcbPrintAmount
  1189 00001FB4 488D155BECFFFF      <1>     lea rdx, memByte
  1190 00001FBB B409                <1>     mov ah, 09h
  1191 00001FBD CD41                <1>     int 41h
  1192                              <1> 
  1193 00001FBF 488D1592EBFFFF      <1>     lea rdx, memSys
  1194 00001FC6 B409                <1>     mov ah, 09h
  1195 00001FC8 CD41                <1>     int 41h
  1196 00001FCA 4889F0              <1>     mov rax, rsi
  1197 00001FCD 4801F8              <1>     add rax, rdi
  1198 00001FD0 4801C8              <1>     add rax, rcx
  1199 00001FD3 4801E8              <1>     add rax, rbp
  1200 00001FD6 E817000000          <1>     call .mcbPrintAmount
  1201 00001FDB 488D1534ECFFFF      <1>     lea rdx, memByte
  1202 00001FE2 B409                <1>     mov ah, 09h
  1203 00001FE4 CD41                <1>     int 41h
  1204                              <1> 
  1205 00001FE6 488D150BE7FFFF      <1>     lea rdx, crlf
  1206 00001FED B409                <1>     mov ah, 09h
  1207 00001FEF CD41                <1>     int 41h
  1208                              <1>     return
    19                              <2> %%_ret:
    20 00001FF1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1209                              <1> 
  1210                              <1> .mcbPrintAmount:
  1211 00001FF2 51                  <1>     push rcx
  1212 00001FF3 56                  <1>     push rsi
  1213 00001FF4 57                  <1>     push rdi
  1214 00001FF5 55                  <1>     push rbp
  1215 00001FF6 E8EA060000          <1>     call printDecimalWord
  1216 00001FFB 5D                  <1>     pop rbp
  1217 00001FFC 5F                  <1>     pop rdi
  1218 00001FFD 5E                  <1>     pop rsi
  1219 00001FFE 59                  <1>     pop rcx
  1220                              <1>     return
    19                              <2> %%_ret:
    20 00001FFF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1221                              <1> .badMCBFound:
  1222 00002000 488D1556ECFFFF      <1>     lea rdx, memBad2
  1223 00002007 B409                <1>     mov ah, 09h
  1224 00002009 CD41                <1>     int 41h
  1225 0000200B E978070000          <1>     jmp freezePC.altEP
  1226                              <1> 
  1227                              <1> type:
  1228 00002010 F60596E0FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1229 00002017 0F84D3F1FFFF        <1>     jz badArgError
  1230 0000201D F6058CE0FFFFFF      <1>     test byte [arg2Flg], -1
  1231 00002024 0F85C6F1FFFF        <1>     jnz badArgError         ;If this set, error
  1232 0000202A 488D355DE1FFFF      <1>     lea rsi, cmdBuffer
  1233 00002031 0FB60576E0FFFF      <1>     movzx eax, byte [arg1Off]
  1234 00002038 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1235 0000203B 803E0D              <1>     cmp byte [rsi], CR
  1236 0000203E 0F84ACF1FFFF        <1>     je badArgError
  1237 00002044 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1238 00002048 750F                <1>     jne .noDrive
  1239 0000204A 0FB6055EE0FFFF      <1>     movzx eax, byte [arg1FCBret]
  1240 00002051 3CFF                <1>     cmp al, -1
  1241 00002053 0F848EF1FFFF        <1>     je badDriveError
  1242                              <1> .noDrive:
  1243                              <1>     ;Now we open the provided file
  1244 00002059 E86C070000          <1>     call copyArgumentToSearchSpec
  1245 0000205E 488D15BCE2FFFF      <1>     lea rdx, searchSpec
  1246 00002065 B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1247 0000206A CD41                <1>     int 41h
  1248 0000206C 0F8287F1FFFF        <1>     jc badFileError
  1249 00002072 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1250 00002079 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1251                              <1> .lp:
  1252 0000207C B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1253 00002081 B43F                <1>     mov ah, 3Fh ;Read handle
  1254 00002083 CD41                <1>     int 41h
  1255 00002085 89C1                <1>     mov ecx, eax
  1256 00002087 67E317              <1>     jecxz .exit
  1257 0000208A 53                  <1>     push rbx    ;Save the original in handle
  1258 0000208B BB01000000          <1>     mov ebx, 1  ;STDOUT
  1259 00002090 B440                <1>     mov ah, 40h
  1260 00002092 CD41                <1>     int 41h
  1261 00002094 5B                  <1>     pop rbx ;Get back the original read handle
  1262 00002095 720F                <1>     jc .exitBad
  1263 00002097 39C8                <1>     cmp eax, ecx
  1264 00002099 74E1                <1>     je .lp
  1265 0000209B FFC9                <1>     dec ecx ;One less for a ^Z
  1266 0000209D 39C8                <1>     cmp eax, ecx
  1267 0000209F 7505                <1>     jne .exitBad
  1268                              <1> .exit:
  1269 000020A1 B43E                <1>     mov ah, 3Eh ;Close handle
  1270 000020A3 CD41                <1>     int 41h
  1271                              <1>     return
    19                              <2> %%_ret:
    20 000020A5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1272                              <1> .exitBad:
  1273                              <1>     ;Print a disk error message... use a table to build the message but for
  1274                              <1>     ; now, just exit
  1275                              <1>     ;If it is a char device, don't print a error
  1276 000020A6 EBF9                <1>     jmp short .exit
  1277                              <1> 
  1278                              <1> exit:
  1279 000020A8 F60576DFFFFFFF      <1>     test byte [permaSwitch], -1
  1280                              <1>     retnz   ;Return if the flag is set
    51                              <2> cret nz
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000020AF 75(A5)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
  1281 000020B1 488B0557DFFFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1282 000020B8 483DFFFFFFFF        <1>     cmp rax, -1
  1283                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000020BE 74(A5)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
  1284 000020C0 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1285                              <1> 
  1286 000020C4 488B155BDFFFFF      <1>     mov rdx, qword [parentInt42]
  1287 000020CB 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
  1288 000020CF B842250000          <1>     mov eax, 2542h
  1289 000020D4 CD41                <1>     int 41h
  1290                              <1> 
  1291 000020D6 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1292 000020DB CD41                <1>     int 41h
  1293                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    19                              <2> %%_ret:
    20 000020DD C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1294                              <1> 
  1295                              <1> launchChild:
  1296                              <1> ;We run EXEC on this and the child task will return via applicationReturn
  1297                              <1> ;Here we must search the CWD or all path componants before failing
  1298                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
  1299 000020DE 488D15DEDFFFFF      <1>     lea rdx, cmdFFBlock
  1300 000020E5 B41A                <1>     mov ah, 1Ah     ;Set DTA for task
  1301 000020E7 CD41                <1>     int 41h
  1302                              <1> 
  1303 000020E9 8B05CDDFFFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
  1304 000020EF 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1305 000020F4 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1306 000020F9 3D20202020          <1>     cmp eax, "    " ;Only if we have four spaces do we proceed here
  1307 000020FE 741D                <1>     je .noExt
  1308 00002100 E88FEFFFFF          <1>     call checkExtensionExec ;ZF=ZE => Executable
  1309 00002105 0F8510010000        <1>     jnz .dfltErrExit
  1310                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1311 0000210B 0F820A010000        <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
  1312                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1313                              <1>     ;So it is a com or exe that we are searching for for now
  1314 00002111 488D3DF6E0FFFF      <1>     lea rdi, cmdPathSpec
  1315 00002118 4889FA              <1>     mov rdx, rdi
  1316 0000211B EB24                <1>     jmp short .search
  1317                              <1> .noExt:
  1318                              <1>     ;If the filename has no extension, append a .*
  1319                              <1>     ;Use bl as flags. bl[0] => COM found, bl[1] => EXE found, bl[2] => BAT found
  1320 0000211D 31DB                <1>     xor ebx, ebx
  1321 0000211F 488D3DE8E0FFFF      <1>     lea rdi, cmdPathSpec
  1322 00002126 4889FA              <1>     mov rdx, rdi
  1323 00002129 31C0                <1>     xor eax, eax
  1324 0000212B B9FFFFFFFF          <1>     mov ecx, -1
  1325 00002130 F2AE                <1>     repne scasb
  1326 00002132 48FFCF              <1>     dec rdi ;Point to the terminating null
  1327 00002135 4889FD              <1>     mov rbp, rdi    ;Temporarily store the ptr to the . in rbp
  1328 00002138 66B82E2A            <1>     mov ax, ".*"
  1329 0000213C 66AB                <1>     stosw
  1330 0000213E 30C0                <1>     xor al, al  ;Store terminating null
  1331 00002140 AA                  <1>     stosb
  1332                              <1> .search:
  1333 00002141 B906000000          <1>     mov ecx, dirIncFiles
  1334 00002146 B44E                <1>     mov ah, 4Eh ;Find First File
  1335 00002148 CD41                <1>     int 41h
  1336 0000214A 0F82CB000000        <1>     jc .dfltErrExit
  1337 00002150 E879000000          <1>     call .noExtCheckExt
  1338                              <1> .moreSearch:
  1339 00002155 B44F                <1>     mov ah, 4Fh
  1340 00002157 CD41                <1>     int 41h
  1341 00002159 7207                <1>     jc .noMoreFiles
  1342 0000215B E86E000000          <1>     call .noExtCheckExt
  1343 00002160 EBF3                <1>     jmp short .moreSearch
  1344                              <1> .noMoreFiles:
  1345 00002162 85DB                <1>     test ebx, ebx
  1346 00002164 0F84B1000000        <1>     jz .dfltErrExit
  1347                              <1> ;So we have a valid executable
  1348 0000216A 4889EF              <1>     mov rdi, rbp    ;Get back ptr to the .*,0
  1349 0000216D F7C301000000        <1>     test ebx, 1
  1350 00002173 7407                <1>     jz .launchexebat
  1351 00002175 B82E434F4D          <1>     mov eax, ".COM"
  1352 0000217A EB14                <1>     jmp short .launch
  1353                              <1> .launchexebat:
  1354 0000217C F7C302000000        <1>     test ebx, 2
  1355 00002182 7407                <1>     jz .launchbat
  1356 00002184 B82E455845          <1>     mov eax, ".EXE"
  1357 00002189 EB05                <1>     jmp short .launch
  1358                              <1> .launchbat:
  1359                              <1> ;Temporary For BAT
  1360 0000218B E98B000000          <1>     jmp .dfltErrExit
  1361                              <1> .launch:
  1362 00002190 AB                  <1>     stosd
  1363 00002191 30C0                <1>     xor al, al
  1364 00002193 AA                  <1>     stosb   ;Store the terminating null
  1365 00002194 488D1D53DFFFFF      <1>     lea rbx, launchBlock
  1366 0000219B 31C0                <1>     xor eax, eax
  1367 0000219D 488903              <1>     mov qword [rbx + execProg.pEnv], rax    ;Tell DOS to copy my current Env
  1368 000021A0 498D8080000000      <1>     lea rax, qword [r8 + cmdLineCnt]
  1369 000021A7 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1370 000021AB 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1371 000021AF 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1372 000021B3 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1373 000021B7 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1374 000021BB 488D154CE0FFFF      <1>     lea rdx, cmdPathSpec
  1375 000021C2 B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1376 000021C7 CD41                <1>     int 41h
  1377 000021C9 E94D000000          <1>     jmp .dfltErrExit    ;If something goes wrong, error out
  1378                              <1> .noExtCheckExt:
  1379                              <1>     ;mov eax, dword [cmdFFBlock + ffBlock.asciizName + filename.fExt]
  1380 000021CE 488D350CDFFFFF      <1>     lea rsi, dword [cmdFFBlock + ffBlock.asciizName]
  1381 000021D5 488D3D81E0FFFF      <1>     lea rdi, fcbCmdSpec
  1382 000021DC E8DC030000          <1>     call asciiFilenameToFCB
  1383 000021E1 8B057EE0FFFF        <1>     mov eax, dword [fcbCmdSpec + filename.fExt]
  1384 000021E7 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1385 000021EC 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1386 000021F1 3D434F4D20          <1>     cmp eax, "COM "
  1387 000021F6 7507                <1>     jne .neceexe
  1388 000021F8 81CB01000000        <1>     or ebx, 1
  1389                              <1>     return
    19                              <2> %%_ret:
    20 000021FE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1390                              <1> .neceexe:
  1391 000021FF 3D45584520          <1>     cmp eax, "EXE "
  1392 00002204 7507                <1>     jne .necebat
  1393 00002206 81CB02000000        <1>     or ebx, 2
  1394                              <1>     return
    19                              <2> %%_ret:
    20 0000220C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1395                              <1> .necebat:
  1396 0000220D 3D42415420          <1>     cmp eax, "BAT "
  1397                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002212 75(0C)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
  1398 00002214 81CB04000000        <1>     or ebx, 4
  1399                              <1>     return
    19                              <2> %%_ret:
    20 0000221A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1400                              <1> 
  1401                              <1> .dfltErrExit:
  1402 0000221B 488D1533E5FFFF      <1>     lea rdx, badCmd
  1403 00002222 B409                <1>     mov ah, 09h
  1404 00002224 CD41                <1>     int 41h
  1405                              <1>     return
    19                              <2> %%_ret:
    20 00002226 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    17                                  %include "./Source/Utils/COMMAND/Source/cmdUtils.asm"
    18                              <1> ;Misc functions and subroutines for command.com
    19                              <1> 
    20                              <1> printCRLF:
    21 00002227 488D15CAE4FFFF      <1>     lea rdx, crlf
    22 0000222E BB02000000          <1>     mov ebx, 2
    23 00002233 B440                <1>     mov ah, 40h ;Print a new line
    24 00002235 B902000000          <1>     mov ecx, 2  ;Two chars to write
    25 0000223A CD41                <1>     int 41h
    26                              <1>     return
    19                              <2> %%_ret:
    20 0000223C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    27                              <1> printDate:
    28                              <1> ;Input: eax = Packed Date
    29                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
    30                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
    31                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
    32                              <1> ;       ebx = 0 => Print two digit year
    33                              <1> ;       ebx = 1 => Print four digit year
    34 0000223D 53                  <1>     push rbx
    35 0000223E 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    36 00002240 803DE7DDFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    37 00002247 7240                <1>     jb .usDate
    38 00002249 777C                <1>     ja .jpnDate
    39                              <1> ;European: DD/MM/YY
    40 0000224B 251F000000          <1>     and eax, 1Fh    ;Save day bits
    41 00002250 E8B0000000          <1>     call .printFirst
    42 00002255 8A15DEDDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    43 0000225B B402                <1>     mov ah, 02h
    44 0000225D CD41                <1>     int 41h
    45                              <1> 
    46 0000225F 89C8                <1>     mov eax, ecx
    47 00002261 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    48 00002266 C1E805              <1>     shr eax, 5
    49 00002269 E8B3000000          <1>     call .printSecond
    50                              <1> 
    51 0000226E 8A15C5DDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    52 00002274 B402                <1>     mov ah, 02h
    53 00002276 CD41                <1>     int 41h
    54                              <1> 
    55 00002278 89C8                <1>     mov eax, ecx
    56 0000227A 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    57 0000227F C1E809              <1>     shr eax, 9
    58 00002282 5B                  <1>     pop rbx ;Get the year signature back
    59 00002283 E8A9000000          <1>     call .printYear
    60                              <1>     return
    19                              <2> %%_ret:
    20 00002288 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    61                              <1> .usDate:
    62                              <1> ;US: MM/DD/YY
    63 00002289 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    64 0000228E C1E805              <1>     shr eax, 5
    65 00002291 E86F000000          <1>     call .printFirst
    66                              <1> 
    67 00002296 8A159DDDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    68 0000229C B402                <1>     mov ah, 02h
    69 0000229E CD41                <1>     int 41h
    70                              <1> 
    71 000022A0 89C8                <1>     mov eax, ecx
    72 000022A2 251F000000          <1>     and eax, 1Fh    ;Save day bits
    73 000022A7 E875000000          <1>     call .printSecond
    74                              <1> 
    75 000022AC 8A1587DDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    76 000022B2 B402                <1>     mov ah, 02h
    77 000022B4 CD41                <1>     int 41h
    78                              <1> 
    79 000022B6 89C8                <1>     mov eax, ecx
    80 000022B8 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    81 000022BD C1E809              <1>     shr eax, 9
    82 000022C0 5B                  <1>     pop rbx ;Get the year signature back
    83 000022C1 E86B000000          <1>     call .printYear
    84                              <1>     return
    19                              <2> %%_ret:
    20 000022C6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    85                              <1> .jpnDate:
    86                              <1> ;Japan: YY/MM/DD
    87 000022C7 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    88 000022CC C1E809              <1>     shr eax, 9
    89 000022CF 5B                  <1>     pop rbx ;Get the year signature back
    90 000022D0 E85C000000          <1>     call .printYear
    91                              <1> 
    92 000022D5 8A155EDDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    93 000022DB B402                <1>     mov ah, 02h
    94 000022DD CD41                <1>     int 41h
    95                              <1> 
    96 000022DF 89C8                <1>     mov eax, ecx
    97 000022E1 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    98 000022E6 C1E805              <1>     shr eax, 5
    99 000022E9 E833000000          <1>     call .printSecond
   100                              <1> 
   101 000022EE 8A1545DDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
   102 000022F4 B402                <1>     mov ah, 02h
   103 000022F6 CD41                <1>     int 41h
   104                              <1> 
   105 000022F8 89C8                <1>     mov eax, ecx
   106 000022FA 251F000000          <1>     and eax, 1Fh    ;Save day bits
   107 000022FF E81D000000          <1>     call .printSecond
   108                              <1>     return
    19                              <2> %%_ret:
    20 00002304 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   109                              <1> 
   110                              <1> ;Each of these require eax setup correctly
   111                              <1> .printFirst:
   112 00002305 51                  <1>     push rcx
   113 00002306 E84B040000          <1>     call getDecimalWord
   114 0000230B 84ED                <1>     test ch, ch ;Do we have an upper digit?
   115 0000230D 7504                <1>     jnz .skipSpace
   116 0000230F 88CD                <1>     mov ch, cl
   117 00002311 B120                <1>     mov cl, " "
   118                              <1> .skipSpace:
   119 00002313 88CA                <1>     mov dl, cl
   120 00002315 B402                <1>     mov ah, 02h
   121 00002317 CD41                <1>     int 41h
   122 00002319 88EA                <1>     mov dl, ch
   123 0000231B B402                <1>     mov ah, 02h
   124 0000231D CD41                <1>     int 41h
   125 0000231F 59                  <1>     pop rcx
   126                              <1>     return
    19                              <2> %%_ret:
    20 00002320 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   127                              <1> .printSecond:
   128 00002321 51                  <1>     push rcx
   129 00002322 E82F040000          <1>     call getDecimalWord
   130 00002327 84ED                <1>     test ch, ch ;Do we have an upper digit?
   131 00002329 75E8                <1>     jnz .skipSpace
   132 0000232B 88CD                <1>     mov ch, cl
   133 0000232D B130                <1>     mov cl, "0"
   134 0000232F EBE2                <1>     jmp short .skipSpace
   135                              <1> .printYear:
   136 00002331 05BC070000          <1>     add eax, 1980
   137 00002336 51                  <1>     push rcx
   138 00002337 53                  <1>     push rbx
   139 00002338 E819040000          <1>     call getDecimalWord ;Get unpacked in rcx
   140 0000233D 5B                  <1>     pop rbx
   141 0000233E 84DB                <1>     test bl, bl
   142 00002340 740C                <1>     jz .twoDigitYear
   143 00002342 88CA                <1>     mov dl, cl  ;Print the first digit
   144 00002344 B402                <1>     mov ah, 02h
   145 00002346 CD41                <1>     int 41h
   146 00002348 88EA                <1>     mov dl, ch  ;Print the second digit
   147 0000234A B402                <1>     mov ah, 02h
   148 0000234C CD41                <1>     int 41h
   149                              <1> .twoDigitYear:
   150 0000234E C1E910              <1>     shr ecx, 10h    ;Get high word low
   151 00002351 88CA                <1>     mov dl, cl  ;Print the upper digit
   152 00002353 B402                <1>     mov ah, 02h
   153 00002355 CD41                <1>     int 41h
   154 00002357 88EA                <1>     mov dl, ch  ;Print the lower digit
   155 00002359 B402                <1>     mov ah, 02h
   156 0000235B CD41                <1>     int 41h
   157 0000235D 59                  <1>     pop rcx
   158                              <1>     return
    19                              <2> %%_ret:
    20 0000235E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   159                              <1> 
   160                              <1> 
   161                              <1> printTime:
   162                              <1> ;Input: eax = Packed Time
   163                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   164                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   165 0000235F 89C1                <1>     mov ecx, eax
   166 00002361 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   167 00002366 C1E80B              <1>     shr eax, 11
   168 00002369 803DCFDCFFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   169 00002370 750B                <1>     jne .ampm
   170 00002372 E85A000000          <1>     call .printHours
   171 00002377 E831000000          <1>     call .printMinutes
   172                              <1>     return
    19                              <2> %%_ret:
    20 0000237C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   173                              <1> .ampm:
   174 0000237D 3D0C000000          <1>     cmp eax, 12
   175 00002382 7713                <1>     ja .pm
   176 00002384 7416                <1>     je .pm2
   177 00002386 E846000000          <1>     call .printHours
   178 0000238B E81D000000          <1>     call .printMinutes
   179 00002390 B261                <1>     mov dl, "a"
   180 00002392 B402                <1>     mov ah, 02h
   181 00002394 CD41                <1>     int 41h
   182                              <1>     return
    19                              <2> %%_ret:
    20 00002396 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   183                              <1> .pm:
   184 00002397 2D0C000000          <1>     sub eax, 12
   185                              <1> .pm2:
   186 0000239C E830000000          <1>     call .printHours
   187 000023A1 E807000000          <1>     call .printMinutes
   188 000023A6 B270                <1>     mov dl, "p"
   189 000023A8 B402                <1>     mov ah, 02h
   190 000023AA CD41                <1>     int 41h
   191                              <1>     return
    19                              <2> %%_ret:
    20 000023AC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   192                              <1> .printMinutes:
   193 000023AD 8A1588DCFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   194 000023B3 B402                <1>     mov ah, 02h
   195 000023B5 CD41                <1>     int 41h
   196                              <1> 
   197 000023B7 89C8                <1>     mov eax, ecx
   198 000023B9 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   199 000023BE C1E805              <1>     shr eax, 5
   200                              <1> .printMinutesAlt:
   201 000023C1 51                  <1>     push rcx
   202 000023C2 E88F030000          <1>     call getDecimalWord
   203 000023C7 84ED                <1>     test ch, ch ;Do we have an upper digit?
   204 000023C9 7514                <1>     jnz .skipSpace
   205 000023CB 88CD                <1>     mov ch, cl
   206 000023CD B130                <1>     mov cl, "0"
   207 000023CF EB0E                <1>     jmp short .skipSpace
   208                              <1> .printHours:
   209 000023D1 51                  <1>     push rcx
   210 000023D2 E87F030000          <1>     call getDecimalWord
   211 000023D7 84ED                <1>     test ch, ch ;Do we have an upper digit?
   212 000023D9 7504                <1>     jnz .skipSpace
   213 000023DB 88CD                <1>     mov ch, cl
   214 000023DD B120                <1>     mov cl, " "
   215                              <1> .skipSpace:
   216 000023DF 88CA                <1>     mov dl, cl
   217 000023E1 B402                <1>     mov ah, 02h
   218 000023E3 CD41                <1>     int 41h
   219 000023E5 88EA                <1>     mov dl, ch
   220 000023E7 B402                <1>     mov ah, 02h
   221 000023E9 CD41                <1>     int 41h
   222 000023EB 59                  <1>     pop rcx
   223                              <1>     return
    19                              <2> %%_ret:
    20 000023EC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   224                              <1> 
   225                              <1> 
   226                              <1> putVersionInPrompt:
   227 000023ED 488D1577E5FFFF      <1>     lea rdx, dosVer
   228 000023F4 B409                <1>     mov ah, 09h ;Print String
   229 000023F6 CD41                <1>     int 41h
   230 000023F8 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   231 000023FA CD41                <1>     int 41h
   232 000023FC 50                  <1>     push rax    ;Save minor version
   233 000023FD E89C000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   234 00002402 E8B4000000          <1>     call printPackedBCD ;Print al
   235 00002407 B22E                <1>     mov dl, "."
   236 00002409 B402                <1>     mov ah, 02h
   237 0000240B CD41                <1>     int 41h
   238 0000240D 58                  <1>     pop rax
   239 0000240E 88E0                <1>     mov al, ah  ;Get the minor version low
   240 00002410 E889000000          <1>     call hexToBCD
   241 00002415 E8A1000000          <1>     call printPackedBCD
   242                              <1>     return
    19                              <2> %%_ret:
    20 0000241A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   243                              <1> putEscInPrompt:
   244 0000241B B21B                <1>     mov dl, ESC
   245 0000241D EB1C                <1>     jmp short outChar
   246                              <1> 
   247                              <1> putMoneyInPrompt:
   248 0000241F B224                <1>     mov dl, "$"
   249 00002421 EB18                <1>     jmp short outChar
   250                              <1> 
   251                              <1> putEquInPrompt:
   252 00002423 B23D                <1>     mov dl, "="
   253 00002425 EB14                <1>     jmp short outChar
   254                              <1> 
   255                              <1> putPipeInPrompt:
   256 00002427 B27C                <1>     mov dl, "|"
   257 00002429 EB10                <1>     jmp short outChar
   258                              <1> 
   259                              <1> putGTinPrompt:
   260 0000242B B23E                <1>     mov dl, ">"
   261 0000242D EB0C                <1>     jmp short outChar
   262                              <1> 
   263                              <1> putLTinPrompt:
   264 0000242F B23C                <1>     mov dl, "<"
   265 00002431 EB08                <1>     jmp short outChar
   266                              <1> 
   267                              <1> putDriveInPrompt:
   268 00002433 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   269 00002435 CD41                <1>     int 41h
   270 00002437 0441                <1>     add al, "A" ;Convert to letter
   271 00002439 88C2                <1>     mov dl, al
   272                              <1> outChar:
   273 0000243B B402                <1>     mov ah, 02h ;Echo to STDOUT
   274 0000243D CD41                <1>     int 41h
   275                              <1>     return
    19                              <2> %%_ret:
    20 0000243F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   276                              <1> putCWDInPrompt:
   277 00002440 488D3D0DDCFFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   278 00002447 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   279 00002449 CD41                <1>     int 41h
   280 0000244B 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   281 0000244D FEC2                <1>     inc dl
   282 0000244F 0441                <1>     add al, "A" ;Convert to letter
   283 00002451 B43A                <1>     mov ah, ":"
   284 00002453 66AB                <1>     stosw   ;Store X:, rdi+=2
   285 00002455 8A05C8DBFFFF        <1>     mov al, byte [pathSep]
   286 0000245B AA                  <1>     stosb   ;Store pathSep, inc rdi
   287 0000245C B447                <1>     mov ah, 47h ;Get Current Working Directory
   288 0000245E 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   289 00002461 CD41                <1>     int 41h
   290 00002463 E884000000          <1>     call strlen
   291 00002468 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   292                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   293 0000246E B440                <1>     mov ah, 40h ;Write to handle
   294 00002470 BB01000000          <1>     mov ebx, 1  ;STDOUT
   295 00002475 488D15D8DBFFFF      <1>     lea rdx, currDirStr
   296 0000247C CD41                <1>     int 41h
   297                              <1>     return
    19                              <2> %%_ret:
    20 0000247E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   298                              <1> 
   299                              <1> BCDtoHex:
   300                              <1> ;Converts a BCD value to a Hex byte
   301                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   302 0000247F 51                  <1>     push rcx
   303 00002480 0FB6C0              <1>     movzx eax, al   ;Zero extend
   304 00002483 89C1                <1>     mov ecx, eax    ;Save al in ecx
   305 00002485 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   306 0000248A 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   307 00002490 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   308                              <1> .bth:
   309 00002493 050A000000          <1>     add eax, 10
   310 00002498 FFC9                <1>     dec ecx
   311 0000249A 75F7                <1>     jnz .bth
   312 0000249C 59                  <1>     pop rcx
   313 0000249D C3                  <1>     ret
   314                              <1> 
   315                              <1> hexToBCD:
   316                              <1> ;Converts a Hex byte into two BCD digits
   317                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   318 0000249E 51                  <1>     push rcx
   319 0000249F 0FB6C0              <1>     movzx eax, al   ;Zero extend
   320 000024A2 31C9                <1>     xor ecx, ecx
   321                              <1> .htb0:
   322 000024A4 3D0A000000          <1>     cmp eax, 10
   323 000024A9 7209                <1>     jb .htb1
   324 000024AB 2D0A000000          <1>     sub eax, 10
   325 000024B0 FFC1                <1>     inc ecx
   326 000024B2 EBF0                <1>     jmp short .htb0
   327                              <1> .htb1:
   328 000024B4 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   329 000024B7 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   330 000024B9 59                  <1>     pop rcx
   331 000024BA C3                  <1>     ret
   332                              <1> 
   333                              <1> printPackedBCD:
   334                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   335                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   336                              <1> ;Preserves all registers
   337 000024BB 50                  <1>     push rax
   338 000024BC 52                  <1>     push rdx
   339 000024BD 88C4                <1>     mov ah, al
   340 000024BF 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   341 000024C1 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   342 000024C4 7508                <1>     jnz .upperNybble
   343 000024C6 B220                <1>     mov dl, " "
   344 000024C8 B402                <1>     mov ah, 02h
   345 000024CA CD41                <1>     int 41h
   346 000024CC EB0E                <1>     jmp short .lowerNybble
   347                              <1> .upperNybble:
   348 000024CE 50                  <1>     push rax
   349 000024CF C0EC04              <1>     shr ah, 4
   350 000024D2 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   351 000024D5 88E2                <1>     mov dl, ah
   352 000024D7 B402                <1>     mov ah, 02h ;Print DL
   353 000024D9 CD41                <1>     int 41h
   354 000024DB 58                  <1>     pop rax
   355                              <1> .lowerNybble:
   356 000024DC 0430                <1>     add al, "0"
   357 000024DE 88C2                <1>     mov dl, al
   358 000024E0 B402                <1>     mov ah, 02h ;Print DL
   359 000024E2 CD41                <1>     int 41h
   360 000024E4 5A                  <1>     pop rdx
   361 000024E5 58                  <1>     pop rax
   362                              <1>     return
    19                              <2> %%_ret:
    20 000024E6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   363                              <1> 
   364                              <1> getCurrentDrive:
   365                              <1> ;Returns the 0 based current drive in al
   366 000024E7 B419                <1>     mov ah, 19h
   367 000024E9 CD41                <1>     int 41h
   368                              <1>     return
    19                              <2> %%_ret:
    20 000024EB C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   369                              <1> 
   370                              <1> strlen:
   371                              <1> ;Gets the length of a ASCIIZ string
   372                              <1> ;Input: rdi = Source buffer
   373                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   374 000024EC 50                  <1>     push rax
   375 000024ED 57                  <1>     push rdi
   376 000024EE 30C0                <1>     xor al, al
   377 000024F0 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   378 000024F2 FFC9                <1>     dec ecx ;rcx = -1
   379 000024F4 F2AE                <1>     repne scasb
   380 000024F6 F7D1                <1>     not ecx
   381 000024F8 5F                  <1>     pop rdi
   382 000024F9 58                  <1>     pop rax
   383                              <1>     return
    19                              <2> %%_ret:
    20 000024FA C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   384                              <1> 
   385                              <1> findTerminatorOrEOC:
   386                              <1> ;Advances rsi to the next string terminator char or the next End of command
   387                              <1> ; char
   388                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   389                              <1> ;If a end of command char found, also sets CF
   390 000024FB AC                  <1>     lodsb
   391 000024FC 3C0D                <1>     cmp al, CR
   392 000024FE 7419                <1>     je .endOfInput
   393 00002500 E82B000000          <1>     call isALterminator
   394 00002505 7419                <1>     jz .exit
   395 00002507 3A0516DBFFFF        <1>     cmp al, byte [pathSep]
   396 0000250D 7411                <1>     je .exit
   397 0000250F 3A050FDBFFFF        <1>     cmp al, byte [switchChar]
   398 00002515 7409                <1>     je .exit
   399 00002517 EBE2                <1>     jmp short findTerminatorOrEOC
   400                              <1> .endOfInput:
   401 00002519 E802000000          <1>     call .exit
   402 0000251E F9                  <1>     stc 
   403                              <1>     return
    19                              <2> %%_ret:
    20 0000251F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   404                              <1> .exit:
   405 00002520 48FFCE              <1>     dec rsi ;Point to the terminating char
   406                              <1>     return
    19                              <2> %%_ret:
    20 00002523 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   407                              <1> 
   408                              <1> findTerminator:
   409                              <1> ;Advances rsi to the next string terminator char
   410                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   411 00002524 AC                  <1>     lodsb
   412 00002525 E806000000          <1>     call isALterminator
   413 0000252A 75F8                <1>     jnz findTerminator
   414 0000252C 48FFCE              <1>     dec rsi
   415                              <1>     return
    19                              <2> %%_ret:
    20 0000252F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   416                              <1> isALterminator:
   417                              <1> ;Returns: ZF=NZ if al is not a terminator (Not including CR)
   418                              <1> ;         ZF=ZY if al is a terminator
   419 00002530 3C20                <1>     cmp al, " "
   420                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002532 74(2F)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   421 00002534 3C3B                <1>     cmp al, ";"
   422                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002536 74(2F)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   423 00002538 3C3D                <1>     cmp al, "="
   424                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000253A 74(2F)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   425 0000253C 3C2C                <1>     cmp al, ","
   426                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000253E 74(2F)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   427 00002540 3C09                <1>     cmp al, TAB
   428                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002542 74(2F)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   429 00002544 3C0A                <1>     cmp al, LF
   430                              <1>     return
    19                              <2> %%_ret:
    20 00002546 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   431                              <1> 
   432                              <1> findEndOfCommand:
   433                              <1> ;Moves rsi to the | or CR that terminates this command
   434 00002547 AC                  <1>     lodsb
   435 00002548 E806000000          <1>     call isALEndOfCommand
   436 0000254D 75F8                <1>     jnz findEndOfCommand
   437 0000254F 48FFCE              <1>     dec rsi
   438                              <1>     return
    19                              <2> %%_ret:
    20 00002552 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   439                              <1> isALEndOfCommand:
   440 00002553 3C7C                <1>     cmp al, "|"
   441                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002555 74(52)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   442 00002557 3C0D                <1>     cmp al, CR
   443                              <1>     return
    19                              <2> %%_ret:
    20 00002559 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   444                              <1> 
   445                              <1> scanForRedir:
   446                              <1> ;Returns: AL = 0 => No redirection, terminate with CR
   447                              <1> ;         AL = 1 => Redirection, type <
   448                              <1> ;         AL = 10 => Redir, type >
   449                              <1> ;         AL = 20 => Redir, type >>
   450                              <1> ;If multiple redirs found, the last one of that type counts.
   451 0000255A 56                  <1>     push rsi
   452 0000255B 55                  <1>     push rbp
   453 0000255C 30E4                <1>     xor ah, ah
   454                              <1> .lp:
   455 0000255E AC                  <1>     lodsb
   456 0000255F 3C3E                <1>     cmp al, ">"
   457                              <1> .exit:
   458 00002561 5D                  <1>     pop rbp
   459 00002562 5E                  <1>     pop rsi
   460                              <1>     return
    19                              <2> %%_ret:
    20 00002563 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   461                              <1> 
   462                              <1> 
   463                              <1> skipSpaces:
   464                              <1> ;Also skips tabs
   465                              <1> ;Input: rsi must point to the start of the data string
   466                              <1> ;Output: rsi points to the first non-space char
   467 00002564 803E20              <1>     cmp byte [rsi], " "
   468 00002567 7405                <1>     je .skip    ;If equal to a space, skip it
   469 00002569 803E09              <1>     cmp byte [rsi], TAB
   470                              <1>     retne   ;If not equal to a tab or space, return
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000256C 75(63)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   471                              <1> .skip:
   472 0000256E 48FFC6              <1>     inc rsi
   473 00002571 EBF1                <1>     jmp short skipSpaces
   474                              <1> 
   475                              <1> printPrompt:
   476 00002573 66813DA5DAFFFFFFFF  <1>     cmp word [promptPtr], -1
   477 0000257C 750B                <1>     jne .validPrompt
   478                              <1>     ;Here we print the default prompt
   479 0000257E E8BDFEFFFF          <1>     call putCWDInPrompt
   480 00002583 E8A3FEFFFF          <1>     call putGTinPrompt
   481                              <1>     return
    19                              <2> %%_ret:
    20 00002588 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   482                              <1> .validPrompt:
   483                              <1>     return
    19                              <2> %%_ret:
    20 00002589 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   484                              <1> 
   485                              <1> clearCommandState:
   486                              <1> ;Clears the command state
   487 0000258A 488D3D18DBFFFF      <1>     lea rdi, cmdStatePtr
   488 00002591 B90A000000          <1>     mov ecx, cmdStateL
   489 00002596 31C0                <1>     xor eax, eax
   490 00002598 F3AA                <1>     rep stosb
   491                              <1>     return
    19                              <2> %%_ret:
    20 0000259A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   492                              <1> 
   493                              <1> clearCommandLineState:
   494                              <1> ;Clears the command line state after a 0Dh encountered
   495 0000259B 488D3DF5DAFFFF      <1>     lea rdi, cmdLineStatePtr
   496 000025A2 B91C000000          <1>     mov ecx, cmdLineStateL
   497 000025A7 31C0                <1>     xor eax, eax
   498 000025A9 F3AA                <1>     rep stosb
   499                              <1>     return
    19                              <2> %%_ret:
    20 000025AB C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   500                              <1> 
   501                              <1> asciiToFCB:
   502                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   503                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   504                              <1> ;Also doesn't check if chars are valid
   505                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   506                              <1> ;Name is space padded.
   507                              <1> ;Input: rsi = ASCII string buffer
   508                              <1> ;       rdi = FCB name buffer
   509                              <1> ;Output: al = Char that terminated the source string 
   510 000025AC 53                  <1>     push rbx    
   511 000025AD 57                  <1>     push rdi
   512 000025AE B90B000000          <1>     mov ecx, 11
   513 000025B3 B020                <1>     mov al, " "
   514 000025B5 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   515 000025B7 5F                  <1>     pop rdi
   516 000025B8 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   517 000025BB EB1D                <1>     jmp short asciiFilenameToFCB.processName
   518                              <1> asciiFilenameToFCB:
   519                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   520                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   521                              <1> ;Also doesn't check if chars are valid
   522                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   523                              <1> ;Name is space padded.
   524                              <1> ;Input: rsi = ASCII string buffer
   525                              <1> ;       rdi = FCB name buffer
   526                              <1> ;Output: al = Char that terminated the source string 
   527 000025BD 53                  <1>     push rbx    
   528 000025BE 57                  <1>     push rdi
   529 000025BF B90B000000          <1>     mov ecx, 11
   530 000025C4 B020                <1>     mov al, " "
   531 000025C6 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   532 000025C8 5F                  <1>     pop rdi
   533 000025C9 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   534                              <1>     ;Preprocess for Dir Searches
   535 000025CC 803E2E              <1>     cmp byte [rsi], "."
   536 000025CF 7509                <1>     jne .processName
   537 000025D1 A4                  <1>     movsb   ;Store the first dot
   538 000025D2 803E2E              <1>     cmp byte [rsi], "."
   539 000025D5 752C                <1>     jne .exitBadChar
   540 000025D7 A4                  <1>     movsb
   541 000025D8 EB29                <1>     jmp short .exitBadChar
   542                              <1> .processName:
   543 000025DA AC                  <1>     lodsb   ;Get the char in al
   544 000025DB 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   545 000025DD 7426                <1>     jz .exit
   546 000025DF 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   547 000025E1 7407                <1>     je .extSpace
   548 000025E3 3C2E                <1>     cmp al, "."
   549 000025E5 740C                <1>     je .ext
   550 000025E7 AA                  <1>     stosb   ;Store the char
   551 000025E8 EBF0                <1>     jmp short .processName
   552                              <1> .extSpace:
   553                              <1> ;Now we scan for a period in the name
   554 000025EA AC                  <1>     lodsb   ;Get a char and increase rsi
   555 000025EB 84C0                <1>     test al, al
   556 000025ED 7416                <1>     jz .exit
   557 000025EF 3C2E                <1>     cmp al, "."     ;If al is not a period...
   558 000025F1 75F7                <1>     jne .extSpace   ; keep searching
   559                              <1> .ext:
   560 000025F3 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   561                              <1> .processExt:
   562 000025F7 AC                  <1>     lodsb
   563 000025F8 84C0                <1>     test al, al
   564 000025FA 7409                <1>     jz .exit
   565 000025FC 3C20                <1>     cmp al, " "
   566 000025FE 7405                <1>     je .exit
   567 00002600 AA                  <1>     stosb
   568 00002601 EBF4                <1>     jmp short .processExt
   569                              <1> .exitBadChar:
   570 00002603 30C0                <1>     xor al, al  ;Return a null terminator
   571                              <1> .exit:
   572 00002605 5B                  <1>     pop rbx
   573                              <1>     return
    19                              <2> %%_ret:
    20 00002606 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   574                              <1> 
   575                              <1> FCBToAsciiz:
   576                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   577                              <1> ;Name is space padded too
   578                              <1> ;Input: rsi = FCB name buffer
   579                              <1> ;       rdi = ASCIIZ string buffer
   580 00002607 B908000000          <1>     mov ecx, 8
   581 0000260C F3A4                <1>     rep movsb   ;Move the name over
   582                              <1> .scanNameSpace:
   583 0000260E 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   584 00002612 750D                <1>     jne .ext
   585 00002614 48FFCF              <1>     dec rdi
   586 00002617 FFC1                <1>     inc ecx
   587 00002619 81F908000000        <1>     cmp ecx, 8
   588 0000261F 72ED                <1>     jb .scanNameSpace
   589                              <1> .ext:
   590 00002621 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   591 00002626 7506                <1>     jne .validExt
   592 00002628 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   593 0000262C 7415                <1>     je .exit
   594                              <1> .validExt:
   595 0000262E B02E                <1>     mov al, "." ;We have a valid extension, store a period
   596 00002630 AA                  <1>     stosb
   597 00002631 B903000000          <1>     mov ecx, 3
   598 00002636 F3A4                <1>     rep movsb   ;Move the three extension chars over
   599                              <1> .scanExtSpace:
   600 00002638 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   601 0000263C 7505                <1>     jne .exit
   602 0000263E 48FFCF              <1>     dec rdi
   603 00002641 EBF5                <1>     jmp short .scanExtSpace
   604                              <1> .exit:
   605 00002643 31C0                <1>     xor eax, eax
   606 00002645 AA                  <1>     stosb   ;Store a null at the end
   607                              <1>     return
    19                              <2> %%_ret:
    20 00002646 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   608                              <1> 
   609                              <1> buildCommandPath:
   610                              <1> ;Based on the first argument on the command line
   611                              <1> ; will build a full ASCIIZ path in searchSpec to the file/dir specified
   612                              <1>     ;If this is a relative path, will handle correctly (tho unnecessary)
   613 00002647 0FB60560DAFFFF      <1>     movzx eax, byte [arg1Off]
   614 0000264E 488D3539DBFFFF      <1>     lea rsi, cmdBuffer
   615 00002655 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   616 00002658 8A3DC5D9FFFF        <1>     mov bh, byte [pathSep]
   617 0000265E B33A                <1>     mov bl, ":"
   618 00002660 383E                <1>     cmp byte [rsi], bh  ;Is the first char relative to root?
   619 00002662 7458                <1>     je .absoluteCurrent
   620 00002664 66395E01            <1>     cmp word [rsi + 1], bx    ;This checks if absolute or relative
   621 00002668 746D                <1>     je .absolutePath
   622 0000266A 385E01              <1>     cmp byte [rsi + 1], bl  ;Check if a drive separator
   623 0000266D 7409                <1>     je .relativeGiven
   624                              <1> ;No drive letter given, must get Current Drive
   625 0000266F E873FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   626 00002674 0441                <1>     add al, "A"
   627 00002676 EB0B                <1>     jmp short .relativeCommon
   628                              <1> .relativeGiven:
   629                              <1> ;Drive letter pointed to by AL
   630 00002678 8A06                <1>     mov al, byte [rsi]  ;Get drive letter in al
   631 0000267A 24DF                <1>     and al, 0DFh    ;Convert to UC
   632 0000267C 4881C602000000      <1>     add rsi, 2  ;Skip the given drive letter and the colon
   633                              <1> .relativeCommon:
   634                              <1>     ;al has drive letter
   635 00002683 88C2                <1>     mov dl, al  ;Save drive letter in dl
   636 00002685 80EA40              <1>     sub dl, "@" ;Get 1 based drive number in dl
   637 00002688 B43A                <1>     mov ah, ":" ;Get the colon in too
   638 0000268A 488D3D90DCFFFF      <1>     lea rdi, searchSpec ;Start building our search path here
   639 00002691 66AB                <1>     stosw   ;Store X:
   640 00002693 8A058AD9FFFF        <1>     mov al, byte [pathSep]
   641 00002699 AA                  <1>     stosb   ;Store pathSep
   642 0000269A 56                  <1>     push rsi    ;Save user input string
   643 0000269B 4889FE              <1>     mov rsi, rdi    ;Put the current directory here for this drive
   644 0000269E B447                <1>     mov ah, 47h ;Get Current Working Directory, dl has drive number
   645 000026A0 CD41                <1>     int 41h ;Won't fail as drive letter in dl confirmed ok
   646 000026A2 5E                  <1>     pop rsi
   647                              <1>     ;Now want to find terminating null
   648 000026A3 30C0                <1>     xor al, al
   649 000026A5 31C9                <1>     xor ecx, ecx
   650 000026A7 FFC9                <1>     dec ecx
   651 000026A9 F2AE                <1>     repne scasb ;Search for the terminating null
   652 000026AB 48FFCF              <1>     dec rdi ;Go back one once found
   653 000026AE 8A056FD9FFFF        <1>     mov al, byte [pathSep]
   654 000026B4 3847FF              <1>     cmp byte [rdi - 1], al
   655 000026B7 7425                <1>     je .buildPath ;If the previous char is a pathsep, skip storing another
   656 000026B9 AA                  <1>     stosb   ;Store the pathsep
   657 000026BA EB22                <1>     jmp short .buildPath  ;Now we copy the user string over and good to go
   658                              <1> .absoluteCurrent:
   659 000026BC E826FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   660 000026C1 0441                <1>     add al, "A"
   661 000026C3 B43A                <1>     mov ah, ":" ;ax has X: now to store 
   662 000026C5 488D3D55DCFFFF      <1>     lea rdi, searchSpec
   663 000026CC 66AB                <1>     stosw
   664 000026CE 8A054FD9FFFF        <1>     mov al, byte [pathSep]
   665 000026D4 AA                  <1>     stosb
   666 000026D5 EB07                <1>     jmp short .buildPath
   667                              <1> .absolutePath:
   668 000026D7 488D3D43DCFFFF      <1>     lea rdi, searchSpec
   669                              <1> .buildPath:
   670 000026DE E874EAFFFF          <1>     call copyCommandTailItem    ;Terminates with a 0 for free
   671 000026E3 F8                  <1>     clc ;I dont care if i encounter an embedded CR rn
   672                              <1>     return
    19                              <2> %%_ret:
    20 000026E4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   673                              <1>     
   674                              <1> printDecimalWord:
   675                              <1> ;Takes qword in rax and print it's decimal representation
   676                              <1> ;Takes the qword in eax and prints its decimal representation
   677 000026E5 31C9                <1>     xor ecx, ecx
   678 000026E7 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   679 000026E9 85C0                <1>     test eax, eax
   680 000026EB 750C                <1>     jnz .notZero
   681 000026ED B930000000          <1>     mov ecx, "0"
   682 000026F2 BD01000000          <1>     mov ebp, 1  ;Print one digit
   683 000026F7 EB3E                <1>     jmp short .dpfb2
   684                              <1> .notZero:
   685 000026F9 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   686 000026FB BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   687                              <1> .dpfb0:
   688 00002700 FFC5                <1>     inc ebp
   689 00002702 81FD08000000        <1>     cmp ebp, 8
   690 00002708 7206                <1>     jb .dpfb00
   691 0000270A 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   692 0000270E EB04                <1>     jmp short .dpfb01
   693                              <1> .dpfb00:
   694 00002710 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   695                              <1> .dpfb01:
   696 00002714 31D2                <1>     xor edx, edx
   697 00002716 48F7F6              <1>     div rsi
   698 00002719 80C230              <1>     add dl, '0'
   699 0000271C 80FA39              <1>     cmp dl, '9'
   700 0000271F 7603                <1>     jbe .dpfb1
   701 00002721 80C207              <1>     add dl, 'A'-'0'-10
   702                              <1> .dpfb1:
   703 00002724 81FD08000000        <1>     cmp ebp, 8
   704 0000272A 7204                <1>     jb .dpfb10
   705 0000272C 88D3                <1>     mov bl, dl ;Add the bottom bits
   706 0000272E EB02                <1>     jmp short .dpfb11
   707                              <1> .dpfb10:
   708 00002730 88D1                <1>     mov cl, dl    ;Save remainder byte
   709                              <1> .dpfb11:
   710 00002732 4885C0              <1>     test rax, rax
   711 00002735 75C9                <1>     jnz .dpfb0
   712                              <1> .dpfb2:
   713 00002737 81FD08000000        <1>     cmp ebp, 8
   714 0000273D 7208                <1>     jb .dpfb20
   715 0000273F 88DA                <1>     mov dl, bl
   716 00002741 48C1EB08            <1>     shr rbx, 8
   717 00002745 EB06                <1>     jmp short .dpfb21
   718                              <1> .dpfb20:
   719 00002747 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   720 00002749 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   721                              <1> .dpfb21:
   722 0000274D B402                <1>     mov ah, 02h
   723 0000274F CD41                <1>     int 41h
   724 00002751 FFCD                <1>     dec ebp
   725 00002753 75E2                <1>     jnz .dpfb2
   726                              <1>     return
    19                              <2> %%_ret:
    20 00002755 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   727                              <1> 
   728                              <1> getDecimalWord:
   729                              <1> ;Works on MAX A dword in eax
   730                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   731 00002756 31C9                <1>     xor ecx, ecx
   732 00002758 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   733 0000275A BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   734                              <1> .dpfb0:
   735 0000275F FFC5                <1>     inc ebp
   736 00002761 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   737 00002765 31D2                <1>     xor edx, edx
   738 00002767 48F7F3              <1>     div rbx
   739 0000276A 80C230              <1>     add dl, '0'
   740 0000276D 80FA39              <1>     cmp dl, '9'
   741 00002770 7603                <1>     jbe .dpfb1
   742 00002772 80C207              <1>     add dl, 'A'-'0'-10
   743                              <1> .dpfb1:
   744 00002775 88D1                <1>     mov cl, dl    ;Save remainder byte
   745 00002777 4885C0              <1>     test rax, rax
   746 0000277A 75E3                <1>     jnz .dpfb0
   747                              <1>     return
    19                              <2> %%_ret:
    20 0000277C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   748                              <1> 
   749                              <1> freezePC:
   750 0000277D 488D15BFE4FFFF      <1>     lea rdx, memBad1
   751 00002784 B409                <1>     mov ah, 09h
   752 00002786 CD41                <1>     int 41h
   753                              <1> .altEP:
   754 00002788 488D15DDE4FFFF      <1>     lea rdx, memBad3
   755 0000278F B409                <1>     mov ah, 09h
   756 00002791 CD41                <1>     int 41h
   757                              <1> .lp:
   758 00002793 F390                <1>     pause
   759 00002795 F4                  <1>     hlt
   760 00002796 EBFB                <1>     jmp short .lp
   761                              <1> 
   762                              <1> getFilenamePtrFromFilespec:
   763                              <1> ;Gets a pointer to the first char of a filename from a asciiz pathspec
   764                              <1> ;Input: rsi = Pathspec to search
   765                              <1> ;Output: rsi = Points to the first char of the filename
   766 00002798 4889F3              <1>     mov rbx, rsi
   767 0000279B 31C0                <1>     xor eax, eax
   768 0000279D 4889F7              <1>     mov rdi, rsi    ;Go to the source string 
   769 000027A0 E847FDFFFF          <1>     call strlen     ;Get it's length
   770 000027A5 FFC9                <1>     dec ecx ;Dont include terminating null
   771 000027A7 741F                <1>     jz .exitBad ;Was the string of length zero? Exit bad if so
   772 000027A9 4801CE              <1>     add rsi, rcx    ;Goto last char in path (not null)
   773                              <1> .lp:
   774 000027AC 4839F3              <1>     cmp rbx, rsi    ;Is rdi pointing to the start of the string?
   775                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000027AF 74(7C)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   776 000027B1 8A06                <1>     mov al, byte [rsi]  ;Get the char we currently are at
   777 000027B3 3C3A                <1>     cmp al, ":" ;X: ?
   778 000027B5 740D                <1>     je .pointFilename
   779 000027B7 3A0566D8FFFF        <1>     cmp al, byte [pathSep]  ;Is al pathSep?
   780 000027BD 7405                <1>     je .pointFilename
   781 000027BF 48FFCE              <1>     dec rsi ;Not a terminator, go back a char
   782 000027C2 EBE8                <1>     jmp short .lp
   783                              <1> .pointFilename:
   784 000027C4 48FFC6              <1>     inc rsi ;Now point to the first char of the pathname
   785                              <1>     return
    19                              <2> %%_ret:
    20 000027C7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   786                              <1> .exitBad:
   787 000027C8 F9                  <1>     stc
   788                              <1> .exit:
   789                              <1>     return
    19                              <2> %%_ret:
    20 000027C9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   790                              <1> 
   791                              <1> 
   792                              <1> copyArgumentToSearchSpec:
   793                              <1> ;Works similarly to the build searchpath but is simpler
   794                              <1> ;Null terminates
   795 000027CA 488D3D50DBFFFF      <1>     lea rdi, searchSpec
   796                              <1> .copyPath:
   797 000027D1 AC                  <1>     lodsb
   798 000027D2 E87CFDFFFF          <1>     call isALEndOfCommand
   799 000027D7 740A                <1>     jz .finishCopy
   800 000027D9 E852FDFFFF          <1>     call isALterminator
   801 000027DE 7403                <1>     jz .finishCopy
   802 000027E0 AA                  <1>     stosb
   803 000027E1 EBEE                <1>     jmp short .copyPath
   804                              <1> .finishCopy:
   805 000027E3 31C0                <1>     xor eax, eax
   806 000027E5 AA                  <1>     stosb
   807                              <1>     return
    19                              <2> %%_ret:
    20 000027E6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    18                                  %include "./Source/Utils/COMMAND/Source/int44h.asm"
    19                              <1> critErrorHandler:   ;Int 44h
    20                              <1> ;User Stack in usage here, must be swapped to before this is called
    21                              <1> ;Entered with:  
    22                              <1> ;               AH = Critical Error Bitfield
    23                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    24                              <1> ;               Bit 6 - Reserved
    25                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    26                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    27                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    28                              <1> ;               Bits [2-1] = Affected Disk Error
    29                              <1> ;                     0 0   DOS area
    30                              <1> ;                     0 1   FAT area
    31                              <1> ;                     1 0   Directory area
    32                              <1> ;                     1 1   Data area
    33                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    34                              <1> ;               AL  = Failing drive number if AH[7] = 0
    35                              <1> ;               DIL = Error code for errorMsg
    36                              <1> ;               RSI = EA of Device Header for which device the error occured
    37                              <1> ;Return:
    38                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    39                              <1> ;                  = 1 - Retry the Operation    (Retry)
    40                              <1> ;                  = 2 - Terminate the Program  (Abort)
    41                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    42 000027E7 53                  <1>     push rbx
    43 000027E8 51                  <1>     push rcx
    44 000027E9 52                  <1>     push rdx
    45 000027EA 57                  <1>     push rdi
    46 000027EB 56                  <1>     push rsi
    47 000027EC FC                  <1>     cld         ;Make String ops go forward
    48                              <1> 
    49 000027ED 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    50 000027F0 488D1501DFFFFF      <1>     lea rdx, crlf
    51 000027F7 B409                <1>     mov ah, 09h ;Print String
    52 000027F9 CD41                <1>     int 41h
    53                              <1> 
    54 000027FB 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    55 00002801 B90C000000          <1>     mov ecx, 0Ch
    56 00002806 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    57 00002808 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    58 0000280B 480FB7FF            <1>     movzx rdi, di
    59 0000280F 4889FA              <1>     mov rdx, rdi    ;Copy error code
    60 00002812 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    61 00002816 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    62 00002819 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    63 0000281C 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    64 00002823 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    65 00002827 B409                <1>     mov ah, 09h ;Print String
    66 00002829 CD41                <1>     int 41h     ;Call DOS to print first part of message
    67                              <1> 
    68 0000282B 488D1505020000      <1>     lea rdx, qword [.readmsg]
    69 00002832 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    70 00002839 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    71 0000283C 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    72 00002840 B409                <1>     mov ah, 09h ;Print String
    73 00002842 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    74                              <1> 
    75 00002844 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    76 00002847 0F85DF000000        <1>     jnz .charError
    77                              <1> ;Disk error continues here
    78 0000284D 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    79 00002854 B409                <1>     mov ah, 09h
    80 00002856 CD41                <1>     int 41h
    81 00002858 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    82 0000285A 80C241              <1>     add dl, "A" ;Add ASCII code
    83 0000285D B402                <1>     mov ah, 02h ;Print char in dl
    84 0000285F CD41                <1>     int 41h
    85                              <1> .userInput:
    86 00002861 488D1590DEFFFF      <1>     lea rdx, crlf  ;Print new line
    87 00002868 B409                <1>     mov ah, 09h
    88 0000286A CD41                <1>     int 41h
    89                              <1> ;Abort, Retry, Ignore, Fail is word order
    90                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    91                              <1> .userAbort:
    92                              <1> ;Abort is always an option
    93 0000286C 488D15E2010000      <1>     lea rdx, qword [.abortmsg]
    94 00002873 B409                <1>     mov ah, 09h
    95 00002875 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
    96                              <1> .userRetry:
    97 00002877 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    98 0000287A 7416                <1>     jz .userIgnore    ;If clear, dont print message
    99 0000287C 488D15EA010000      <1>     lea rdx, qword [.betweenMsg]
   100 00002883 B409                <1>     mov ah, 09h
   101 00002885 CD41                <1>     int 41h
   102 00002887 488D15D4010000      <1>     lea rdx, qword [.retrymsg]
   103 0000288E B409                <1>     mov ah, 09h
   104 00002890 CD41                <1>     int 41h
   105                              <1> .userIgnore:
   106 00002892 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   107 00002895 7416                <1>     jz .userFail
   108 00002897 488D15CF010000      <1>     lea rdx, qword [.betweenMsg]
   109 0000289E B409                <1>     mov ah, 09h
   110 000028A0 CD41                <1>     int 41h
   111 000028A2 488D15B2010000      <1>     lea rdx, qword [.ignoremsg]
   112 000028A9 B409                <1>     mov ah, 09h
   113 000028AB CD41                <1>     int 41h
   114                              <1> .userFail:
   115 000028AD F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   116 000028B0 7416                <1>     jz .userMsgEnd
   117 000028B2 488D15B4010000      <1>     lea rdx, qword [.betweenMsg]
   118 000028B9 B409                <1>     mov ah, 09h
   119 000028BB CD41                <1>     int 41h
   120 000028BD 488D15A4010000      <1>     lea rdx, qword [.failmsg]
   121 000028C4 B409                <1>     mov ah, 09h
   122 000028C6 CD41                <1>     int 41h
   123                              <1> .userMsgEnd:
   124 000028C8 488D15A1010000      <1>     lea rdx, qword [.endMsg]
   125 000028CF B409                <1>     mov ah, 09h
   126 000028D1 CD41                <1>     int 41h
   127                              <1> ;Get user input now 
   128 000028D3 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   129 000028D5 488D3D97010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   130 000028DC B401                <1>     mov ah, 01h ;STDIN without Console Echo
   131 000028DE CD41                <1>     int 41h ;Get char in al
   132 000028E0 3C61                <1>     cmp al, "a" ;Chack if lowercase
   133 000028E2 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   134 000028E4 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   135                              <1> .uip1:
   136 000028E6 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   137 000028E7 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   138 000028E9 FFC1                <1>     inc ecx
   139 000028EB 81F904000000        <1>     cmp ecx, 4
   140 000028F1 75F3                <1>     jne .uip1
   141 000028F3 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   142                              <1> .validInput:
   143 000028F8 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   144                              <1> ;Now check if the input is permitted
   145 000028FA 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   146 000028FC 7427                <1>     je .cehExit
   147 000028FE 84C0                <1>     test al, al ;Check if 0 => Ignore
   148 00002900 740F                <1>     je .viIgnore
   149 00002902 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   150 00002904 7416                <1>     je .viRetry
   151                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   152 00002906 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   153 00002909 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   154 0000290F EB14                <1>     jmp short .cehExit
   155                              <1> .viIgnore:
   156 00002911 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   157 00002914 0F8447FFFFFF        <1>     jz .userInput
   158 0000291A EB09                <1>     jmp short .cehExit
   159                              <1> .viRetry:
   160 0000291C F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   161 0000291F 0F843CFFFFFF        <1>     jz .userInput
   162                              <1> .cehExit:
   163 00002925 5E                  <1>     pop rsi
   164 00002926 5F                  <1>     pop rdi
   165 00002927 5A                  <1>     pop rdx
   166 00002928 59                  <1>     pop rcx
   167 00002929 5B                  <1>     pop rbx
   168 0000292A 48CF                <1>     iretq
   169                              <1> .charError:
   170 0000292C B908000000          <1>     mov ecx, 8  ;8 chars in device name
   171 00002931 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   172                              <1> .ce1:
   173 00002938 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   174 00002939 88C2                <1>     mov dl, al  ;Move char into dl
   175 0000293B B402                <1>     mov ah, 02h
   176 0000293D CD41                <1>     int 41h ;Print char
   177 0000293F E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   178 00002941 E91BFFFFFF          <1>     jmp .userInput
   179                              <1> 
   180                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   181 00002946 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   181 0000294F 746563742024202020  <1>
   182 00002958 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   182 00002961 6E6974202420202020  <1>
   183 0000296A 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   183 00002973 202420202020202020  <1>
   184 0000297C 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   184 00002985 6F6D6D616E64202420  <1>
   185 0000298E 446174612024202020- <1>             db "Data $            "       ;Error 4
   185 00002997 202020202020202020  <1>
   186 000029A0 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   186 000029A9 737420242020202020  <1>
   187 000029B2 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   187 000029BB 202020202020202020  <1>
   188 000029C4 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   188 000029CD 656469612024202020  <1>
   189 000029D6 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   189 000029DF 7420466F756E642024  <1>
   190 000029E8 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   190 000029F1 706572202420202020  <1>
   191 000029FA 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   191 00002A03 6C7420242020202020  <1>
   192 00002A0C 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   192 00002A15 742024202020202020  <1>
   193 00002A1E 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   193 00002A27 61696C757265202420  <1>
   194                              <1> 
   195 00002A30 64726976652024      <1> .drive      db "drive $"
   196 00002A37 6572726F7220726561- <1> .readmsg    db "error reading $"
   196 00002A40 64696E672024        <1>
   197 00002A46 6572726F7220777269- <1> .writemsg   db "error writing $"
   197 00002A4F 74696E672024        <1>
   198 00002A55 41626F727424        <1> .abortmsg   db "Abort$" 
   199 00002A5B 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   200 00002A62 526574727924        <1> .retrymsg   db "Retry$"
   201 00002A68 4661696C24          <1> .failmsg    db "Fail$"
   202 00002A6D 2C2024              <1> .betweenMsg db ", $"
   203 00002A70 3F2024              <1> .endMsg     db "? $"
   204 00002A73 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   205                              <1> 
   206                              <1> int43h:
   207 00002A77 F9                  <1>     stc     ;Set CF to kill the task
   208 00002A78 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    19                                  %include "./Source/Utils/COMMAND/Data/cmdEnv.asm"
    20                              <1>     
    21                              <1> masterEnv:  ;Yeet this is this is a child command processor
    22 00002A7B 5F3A434F4D4D414E44- <1>     db "_:COMMAND.COM",0
    22 00002A84 2E434F4D00          <1>
    23 00002A89 504154483D0000      <1>     db "PATH=",0,0  ;Terminate with two null bytes
    24 00002A90 202020202020202020- <1>     db ($ - masterEnv) dup (" ")    ;Pad the environment with spaces
    24 00002A99 202020202020202020- <1>
    24 00002AA2 202020              <1>
    25                              <1> endOfAlloc: ;Symbol to find the start of where I can yeet 
    20                                  %include "./Source/Utils/COMMAND/Source/cmdLdr.asm"
    21                              <1> cmdLdr:
    22                              <1> ;First check if the version is ok. If not, return.
    23 00002AA5 B430                <1>     mov ah, 30h
    24 00002AA7 CD41                <1>     int 41h
    25 00002AA9 3C01                <1>     cmp al, 01h ;Version 1
    26 00002AAB 760D                <1>     jbe .okVersion
    27 00002AAD 488D15CD010000      <1>     lea rdx, badVerStr
    28 00002AB4 B409                <1>     mov ah, 09h
    29 00002AB6 CD41                <1>     int 41h
    30 00002AB8 CD40                <1>     int 40h ;Exit to caller or DOS to print bad command interpreter line
    31                              <1> .okVersion:
    32                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    33 00002ABA 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    34 00002ABE 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    35 00002AC2 48890546D5FFFF      <1>     mov qword [realParent], rax ;Preserve the real parent address
    36                              <1> ;Setup Int 42h, Int 43h and Int 44h
    37 00002AC9 498B400A            <1>     mov rax, qword [r8 + psp.oldInt42h] ;Preserve the original addresses
    38 00002ACD 48890552D5FFFF      <1>     mov qword [parentInt42], rax
    39                              <1> 
    40 00002AD4 488D150CFDFFFF      <1>     lea rdx, critErrorHandler
    41 00002ADB 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    42 00002ADF B844250000          <1>     mov eax, 2544h
    43 00002AE4 CD41                <1>     int 41h
    44 00002AE6 488D158AFFFFFF      <1>     lea rdx, int43h
    45 00002AED 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    46 00002AF1 B843250000          <1>     mov eax, 2543h
    47 00002AF6 CD41                <1>     int 41h
    48 00002AF8 488D15DEE1FFFF      <1>     lea rdx, applicationReturn
    49 00002AFF 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    50 00002B03 B842250000          <1>     mov eax, 2542h
    51 00002B08 CD41                <1>     int 41h
    52                              <1> ;Get a pointer to DOS Sysvars
    53 00002B0A B452                <1>     mov ah, 52h ;Get sysvars
    54 00002B0C CD41                <1>     int 41h
    55 00002B0E 48891D02D5FFFF      <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    56                              <1> ;Call for simple internationalisation data
    57 00002B15 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    58 00002B1A CD41                <1>     int 41h
    59 00002B1C 3CFF                <1>     cmp al, -1
    60 00002B1E 7412                <1>     je .skipSwitch
    61 00002B20 8815FED4FFFF        <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    62 00002B26 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    63 00002B29 7507                <1>     jne .skipSwitch
    64 00002B2B C605F1D4FFFF2F      <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    65                              <1> .skipSwitch:
    66 00002B32 B800380000          <1>     mov eax, 3800h  ;Get current country data
    67 00002B37 488D15F0D4FFFF      <1>     lea rdx, ctryData
    68 00002B3E CD41                <1>     int 41h ;Write the data to the internal country table
    69                              <1> ;Now determine if this is the master copy of COMMAND.COM
    70                              <1> ;Check if Int 4Eh has the same address as Int 4Dh. If so, we are master.
    71 00002B40 B84E350000          <1>     mov eax, 354Eh  ;Get int 4Eh address
    72 00002B45 CD41                <1>     int 41h
    73 00002B47 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    74 00002B4A B84D350000          <1>     mov eax, 354Dh  ;Get int 4Dh address
    75 00002B4F CD41                <1>     int 41h
    76 00002B51 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    77 00002B54 755C                <1>     jne .skipMaster
    78                              <1> ;Ok so we are master command.com
    79                              <1> ;Now make myself the real parent
    80 00002B56 C605C8D4FFFFFF      <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    81 00002B5D 4C8905ABD4FFFF      <1>     mov qword [realParent], r8
    82                              <1> ;Set master environment as mine
    83 00002B64 488D0510FFFFFF      <1>     lea rax, masterEnv
    84 00002B6B 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    85                              <1> ;Set current Drive in COMSPEC
    86 00002B6F B019                <1>     mov al, 19h ;Get current Drive
    87 00002B71 CD41                <1>     int 41h
    88 00002B73 0441                <1>     add al, "A"
    89 00002B75 880500FFFFFF        <1>     mov byte [masterEnv], al
    90                              <1> ;Set Int 4Eh up
    91 00002B7B 488D151FE6FFFF      <1>     lea rdx, int4Eh
    92 00002B82 B84E250000          <1>     mov eax, 254Eh ;Set this as Int 4Eh
    93 00002B87 CD41                <1>     int 41h
    94                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    95                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    96 00002B89 488D1568DBFFFF      <1>     lea rdx, crlf
    97 00002B90 B409                <1>     mov ah, 09h
    98 00002B92 CD41                <1>     int 41h
    99 00002B94 E8F5EDFFFF          <1>     call time
   100 00002B99 E82AEDFFFF          <1>     call date
   101 00002B9E 488D1553DBFFFF      <1>     lea rdx, crlf
   102 00002BA5 B409                <1>     mov ah, 09h
   103 00002BA7 CD41                <1>     int 41h
   104 00002BA9 488D1DF5FEFFFF      <1>     lea rbx, endOfAlloc ;Save the Master Environment
   105 00002BB0 EB32                <1>     jmp short .printInit
   106                              <1> .skipMaster:
   107 00002BB2 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
   108 00002BB9 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
   109 00002BC1 0FB6055CD4FFFF      <1>     movzx eax, byte [switchChar]
   110 00002BC8 F2AE                <1>     repne scasb
   111 00002BCA 67E310              <1>     jecxz .noSwitches
   112 00002BCD 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
   113 00002BD0 24DF                <1>     and al, 0DFh    ;Convert to UC
   114 00002BD2 3C50                <1>     cmp al, "P" ;Is it permanent switch?
   115 00002BD4 7507                <1>     jne .noSwitches
   116 00002BD6 C60548D4FFFFFF      <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
   117                              <1> .noSwitches:
   118 00002BDD 488D1D97FEFFFF      <1>     lea rbx, masterEnv  ;This is the base address to jettison
   119                              <1> .printInit:
   120                              <1> ;Finish by printing INIT string.
   121 00002BE4 53                  <1>     push rbx
   122 00002BE5 488D1521000000      <1>     lea rdx, initString
   123 00002BEC B409                <1>     mov ah, 09h
   124 00002BEE CD41                <1>     int 41h ;Print init string
   125 00002BF0 E8B4F2FFFF          <1>     call version.printVersionNumber
   126 00002BF5 488D1547000000      <1>     lea rdx, initString2
   127 00002BFC B409                <1>     mov ah, 09h
   128 00002BFE CD41                <1>     int 41h ;Print init string
   129 00002C00 5B                  <1>     pop rbx
   130 00002C01 488925FDD3FFFF      <1>     mov qword [stackBottom], rsp    ;Use this to save where to reset rsp to
   131 00002C08 E9BCE0FFFF          <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   132                              <1> ;Loader Data here
   133                              <1> initString: 
   134 00002C0D 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   134 00002C16 66696320436F6D7075- <1>
   134 00002C1F 746572205265736561- <1>
   134 00002C28 726368285229205343- <1>
   134 00002C31 502F444F5328522920- <1>
   134 00002C3A 56657273696F6E2024  <1>
   135                              <1> initString2:
   136 00002C43 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Reserach 2022.",CR,LF,"$"
   136 00002C4C 202020284329436F70- <1>
   136 00002C55 797269676874205363- <1>
   136 00002C5E 69656E746966696320- <1>
   136 00002C67 436F6D707574657220- <1>
   136 00002C70 526573657261636820- <1>
   136 00002C79 323032322E0D0A24    <1>
   137 00002C81 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   137 00002C8A 20444F532076657273- <1>
   137 00002C93 696F6E0D0A24        <1>
   137          ------------------  <1>  info: assembly required 1+3+2 passes

