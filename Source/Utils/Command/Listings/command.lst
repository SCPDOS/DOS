     1                                  ;COMMAND.COM main file
     2                                  [map all ./Source/Utils/COMMAND/Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Source/Include/dosMacro.mac"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------------------------------
     9                              <1> ;Generic Macros file
    10                              <1> ;The following instruction extensions allow to conditionally return
    11                              <1> ;The idea was borrowed from the DOS Source Code
    12                              <1> ;
    13                              <1> ;-------------------------------------------------------------------------------
    14                              <1> 
    15                              <1> ;-------------------------------------------------------------------------------
    16                              <1> ;These macros are live and must not be touched
    17                              <1> ;-------------------------------------------------------------------------------
    18                              <1> %macro return 0
    19                              <1> %%_ret:
    20                              <1>     ret
    21                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    22                              <1> %endmacro
    23                              <1> 
    24                              <1> %macro cret 1
    25                              <1> %%_base:
    26                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    27                              <1>     %ifdef retOff
    28                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <1>     %ifdef currSegVBase
    30                              <1>     j%+1 short (retOff+currSegVBase)
    31                              <1>     %else
    32                              <1>     j%+1 short retOff
    33                              <1>     %endif  ;End ifdef currSegVBase
    34                              <1>     %else 
    35                              <1>     j%-1 short %%a
    36                              <1>     return
    37                              <1> %%a:
    38                              <1>     %endif  ;End the distance measurement if
    39                              <1>     %else   
    40                              <1>     j%-1 short %%a
    41                              <1>     return
    42                              <1> %%a:
    43                              <1>     %endif  ;End ifdef retoff
    44                              <1> %endmacro
    45                              <1> 
    46                              <1> %macro retz 0
    47                              <1> cret z
    48                              <1> %endmacro
    49                              <1> 
    50                              <1> %macro retnz 0
    51                              <1> cret nz
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> %macro rete 0
    55                              <1> cret e
    56                              <1> %endmacro
    57                              <1> 
    58                              <1> %macro retne 0
    59                              <1> cret ne
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> %macro retc 0
    63                              <1> cret c
    64                              <1> %endmacro
    65                              <1> 
    66                              <1> %macro retnc 0
    67                              <1> cret nc
    68                              <1> %endmacro
    69                              <1> 
    70                              <1> %macro retb 0
    71                              <1> cret b
    72                              <1> %endmacro
    73                              <1> 
    74                              <1> %macro retnb 0
    75                              <1> cret nb
    76                              <1> %endmacro
    77                              <1> 
    78                              <1> %macro breakpoint 0
    79                              <1> xchg bx, bx
    80                              <1> %endmacro
     7                                  %include "./Source/Include/dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    27 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    32 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Only affects for SUBST drives, not JOIN
    69                              <1> ; Flags: Bit 15 set = Network drive
    70                              <1> ;        Bit 14 set = Physical drive
    71                              <1> ;        Bit 13 set = JOIN'ed drive
    72                              <1> ;        Bit 12 set = SUBST'ed drive
    73                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    74                              <1> endstruc
    75                              <1> ;CDS equates
    76                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    77                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    78                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    79                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    80                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    81                              <1> ;------------------------------------------------------------------------;
    82                              <1> ; The SFT is a way to allow applications to open file handles to files 
    83                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    84                              <1> ; under the first header, and then a second header will be linked to the 
    85                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    86                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    87                              <1> ; using the FCBS= command. Default FCBS=5.
    88                              <1> ;
    89                              <1> ; A file handle describes the file, and the location within the file that
    90                              <1> ; we are reading. The file handle can be manipulated without the file
    91                              <1> ; being in memory, thus allowing the user to access data without needing 
    92                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    93                              <1> ; accessing devices, by treating them as files with their drivers 
    94                              <1> ; responding and translating the manipulations of the file handle itself.
    95                              <1> ; Neither the driver nor the application should see or use the SFT for
    96                              <1> ; the handle, as it is subject to change (and will change when file 
    97                              <1> ; sharing provisions are included). The DOS will make requests to the 
    98                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    99                              <1> ; track of the information in the SFT entry for that handle. 
   100                              <1> ;
   101                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   102                              <1> ; can point to the same file. It all depends on what the applications 
   103                              <1> ; want to do with the File.
   104                              <1> ;
   105                              <1> ; !!!!IMPORTANT!!!!
   106                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   107                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   108                              <1> ;
   109                              <1> ;Each SFT may look like this:
   110                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   111                              <1> ;            |                |
   112                              <1> ;       wNumFiles*sft    wNumFiles*sft
   113                              <1> ;
   114                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   115                              <1> ; System FCBs.
   116                              <1> ;
   117                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   118                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   119                              <1> ;
   120                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   121                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   122                              <1> ;------------------------------------------------------------------------;
   123                              <1> struc sfth   ;System file table header
   124                              <1> ; This is the SFT header.
   125                              <1> ; This structure comes before the start of the first file in the array/table.
   126 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   127 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   128                              <1> endstruc
   129                              <1> 
   130                              <1> struc sft
   131                              <1> ;This is the file struc itself
   132 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   133 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   134 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   135 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   136 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   137 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   138 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   139 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   140 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   141 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   142 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   143 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   144 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   145 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   146 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   147 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   148 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   149 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   150 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   151                              <1> ;                           0 means no record
   152                              <1> endstruc
   153                              <1> ;Open Mode equates
   154                              <1> ;Access modes   Bits[2:0]
   155                              <1> ReadAccess      equ 0h
   156                              <1> WriteAccess     equ 1h
   157                              <1> RWAccess        equ 2h
   158                              <1> ;Bit 3 reserved 0
   159                              <1> ;Sharing modes  Bits[6:4]
   160                              <1> CompatShare     equ 0h
   161                              <1> denyRWShare     equ 10h
   162                              <1> denyWriteShare  equ 20h
   163                              <1> denyReadShare   equ 30h
   164                              <1> denyNoneShare   equ 40h
   165                              <1> netFCBShare     equ 70h
   166                              <1> ;Bit 7 reserved 0
   167                              <1> ;Bits 8-12 reserved 0
   168                              <1> 
   169                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   170                              <1> ;Buffering on writes
   171                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   172                              <1> ;FCB opened file?
   173                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   174                              <1> ;Attribute Byte
   175                              <1> readOnlyFile    equ 1h
   176                              <1> hiddenFile      equ 2h
   177                              <1> systemFile      equ 4h
   178                              <1> volumeLabel     equ 8h
   179                              <1> directoryFile   equ 10h ;Directory entry
   180                              <1> archiveFile     equ 20h
   181                              <1> ;Device Info equates
   182                              <1> ;For a block device, bits [5:0] contain the drive number
   183                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   184                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   185                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   186                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   187                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   188                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   189                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   190                              <1> blokFileToFlush equ 40h ;Set if ANY writes are made to this handle!
   191                              <1> devCharDev      equ 80h ;If set, it is a char device!
   192                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   193                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   194                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   195                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   196                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   197                              <1> 
   198                              <1> ;openAddress   equ DOSSEG:367Ah   
   199                              <1> ;createAddress equ DOSSEG:35E3h   
   200                              <1> ;------------------------------------------------------------------------;
   201                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   202                              <1> ; to an internal buffer, and then copying it to the specified location
   203                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   204                              <1> ; another request for the same sector from the same device is made, so 
   205                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   206                              <1> ; size, selected according to the largest detected sector size during 
   207                              <1> ; the initial loadup.
   208                              <1> ;
   209                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   210                              <1> ;
   211                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   212                              <1> ;------------------------------------------------------------------------;
   213                              <1> 
   214                              <1> struc bufferHdr
   215 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   216 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   217 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   218 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   219 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   220 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   221 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   222 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   223 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   224                              <1>     .dataarea:             ;Points to the start of the data area
   225                              <1> endstruc
   226                              <1> ;Buffer Flag equates
   227                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   228                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   229                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   230                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   231                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   232                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   233                              <1> ;Note! A buffer is marked as referenced only when the application 
   234                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   235                              <1> ;------------------------------------------------------------------------;
   236                              <1> ; Memory control block for each memory arena
   237                              <1> ;------------------------------------------------------------------------;
   238                              <1> struc mcb
   239 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   240 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   241 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   242 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   243                              <1>     .program:
   244                              <1> endstruc
   245                              <1> ;MCB equates
   246                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   247                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   248                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   249                              <1> mcbMarkCtn      equ "M"
   250                              <1> mcbMarkEnd      equ "Z"
   251                              <1> 
   252                              <1> memFirstFit     equ 0   ;First free block goes to application
   253                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   254                              <1> memLastFit      equ 2   ;Last free block goes to application
   255                              <1> 
   256                              <1> ;Owner = Para aligned address => Owning application PSP
   257                              <1> ;...To consider...
   258                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   259                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   260                              <1> ;------------------------------------------------------------------------;
   261                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   262                              <1> ; following order, thus allowing for return values to be placed in the 
   263                              <1> ; registers by accessing the caller register stack frame.
   264                              <1> ;------------------------------------------------------------------------;
   265                              <1> struc callerFrame
   266 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   267 00000008 ????????????????    <1>     .rbx    resq 1    
   268 00000010 ????????????????    <1>     .rcx    resq 1
   269 00000018 ????????????????    <1>     .rdx    resq 1
   270 00000020 ????????????????    <1>     .rsi    resq 1
   271 00000028 ????????????????    <1>     .rdi    resq 1
   272 00000030 ????????????????    <1>     .rbp    resq 1
   273 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   274 00000040 ????????????????    <1>     .r9     resq 1
   275                              <1> ;Pushed by Processor when invoked via Interrupt
   276 00000048 ????????????????    <1>     .rip    resq 1
   277 00000050 ????????????????    <1>     .cs     resq 1
   278 00000058 ????????????????    <1>     .flags  resq 1
   279                              <1> endstruc
   280                              <1> 
   281                              <1> struc dpl
   282                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   283                              <1> ; server calls
   284 00000000 ????????????????    <1>     .rax    resq 1
   285 00000008 ????????????????    <1>     .rbx    resq 1
   286 00000010 ????????????????    <1>     .rcx    resq 1
   287 00000018 ????????????????    <1>     .rdx    resq 1
   288 00000020 ????????????????    <1>     .rsi    resq 1
   289 00000028 ????????????????    <1>     .rdi    resq 1
   290 00000030 ????????????????    <1>     .r8     resq 1
   291 00000038 ????????????????    <1>     .r9     resq 1
   292 00000040 ????????????????    <1>     .align  resq 1
   293 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   294 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   295                              <1> endstruc
   296                              <1> 
   297                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   298 00000000 ????????????????    <1>     .oldRBP         resq 1  
   299 00000008 ??                  <1>     .newBuffers     resb 1  ;New buffers value
   300 00000009 ??                  <1>     .newSFTVal      resb 1
   301 0000000A ??                  <1>     .newFCBSVal     resb 1
   302 0000000B ??                  <1>     .newProtFCBSVal resb 1  ;Number of protected FCBS
   303 0000000C ??                  <1>     .newLastdrive   resb 1
   304 0000000D ??                  <1>     .newStacks      resb 1  ;Ignored for now
   305 0000000E ????                <1>     .newStackSize   resb 2  ;Ignored for now
   306 00000010 ????????            <1>     .newAllocSize   resd 1  ;Used to keep track of reallocation size
   307 00000014 ????????            <1>                     resd 1  ;Alignment byte
   308 00000018 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc fcb
   312                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   313 00000000 ??                  <1>     .driveNum   resb 1
   314 00000001 ????????????????    <1>     .filename   resb 8
   315 00000009 ??????              <1>     .fileext    resb 3
   316 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   317                              <1> ;One block consists of 128 records, of size denoted in the below
   318 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   319 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   320 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   321 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   322 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   323 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   324 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   325 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   326 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   327                              <1>     ;If record size > 64, high byte is ignored.
   328                              <1>     ;Used for random read and write operations to find the right record
   329                              <1> endstruc
   330                              <1> 
   331                              <1> struc filename
   332                              <1> ;8.3 File name struct
   333 00000000 ????????????????    <1>     .fName  resb 8
   334 00000008 ??????              <1>     .fExt   resb 3
   335                              <1> endstruc
   336                              <1> 
   337                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   338 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   339 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   340 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   341 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   342 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   343 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   344 00000016 ????                <1>     .fileTime   resw 1  ;File time
   345 00000018 ????                <1>     .fileDate   resw 1  ;File date
   346 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   347 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   348                              <1> endstruc
   349                              <1> 
   350                              <1> struc psp
   351 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   352 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   353 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   354 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   355 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   356 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   357 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   358 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   359 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   360 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   361 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   362 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   363 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   364 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   365                              <1> ;Extra handle arrays are grouped into a linked list
   366                              <1> ;The below are in the same place as in DOS
   367 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   368 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   369                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   370 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   371 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   372                              <1> endstruc
   373                              <1> 
   374                              <1> struc clkStruc
   375 00000000 ????                <1>     .dateWord   resw 1
   376 00000002 ??                  <1>     .minutes    resb 1
   377 00000003 ??                  <1>     .hours      resb 1
   378 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   379 00000005 ??                  <1>     .seconds    resb 1
   380                              <1> endstruc
   381                              <1> 
   382                              <1> struc countryStruc
   383 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   384                              <1>                         ;0 = month day year hh:mm:ss
   385                              <1>                         ;1 = day month year hh:mm:ss
   386                              <1>                         ;2 = year month day hh:mm:ss
   387 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   388 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   389 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   390 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   391 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   392 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   393                              <1>                         ;0 = Symbol leads, without space
   394                              <1>                         ;1 = Symbol follows, without space
   395                              <1>                         ;2 = Symbol leads, one space
   396                              <1>                         ;3 = Symbol follows, one space
   397                              <1>                         ;4 = Symbol replace decimal separator
   398 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   399 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   400 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   401 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   402 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   403                              <1> endstruc
   404                              <1> 
   405                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   406                              <1> ;for a space of 64Gb
   407                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   408                              <1> dosLowBase  equ 600h    ;Low load address
   409                              <1> 
   410                              <1> ;Critical Error AH bitfield equates
   411                              <1> critRead    equ 0h
   412                              <1> critWrite   equ 1h
   413                              <1> critDOS     equ 0h
   414                              <1> critFAT     equ 2h
   415                              <1> critDir     equ 4h
   416                              <1> critData    equ 6h
   417                              <1> critFailOK  equ 8h
   418                              <1> critRetryOK equ 10h
   419                              <1> critIgnorOK equ 20h
   420                              <1> critCharDev equ 80h
   421                              <1> 
   422                              <1> critIgnore  equ 0
   423                              <1> critRetry   equ 1
   424                              <1> critAbort   equ 2
   425                              <1> critFail    equ 3
   426                              <1> 
   427                              <1> ;MISC ASCII control chars
   428                              <1> NUL equ 00h ;^@         | ASCII Null
   429                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   430                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   431                              <1> BEL equ 07h ;^G         | ASCII Bell
   432                              <1> BSP equ 08h ;^H         | ASCII Backspace
   433                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   434                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   435                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   436                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   437                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   438                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   439                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   440                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   441                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   442                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   443                              <1> SPC equ 20h ;Printable  | ASCII Space
   444                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   445                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   446                              <1> 
   447                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   448                              <1> ;Extended Ascii Codes
   449                              <1> eF1     equ 3Bh ;F1 second byte
   450                              <1> eF2     equ 3Ch ;F2 second byte
   451                              <1> eF3     equ 3Dh ;F3 second byte
   452                              <1> eF4     equ 3Eh ;F4 second byte
   453                              <1> eF5     equ 3Fh ;F5 second byte
   454                              <1> eF6     equ 40h ;F6 second byte
   455                              <1> eF7     equ 41h ;F7 second byte
   456                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   457                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   458                              <1> eIns    equ 52h ;Insert second byte
   459                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   460                              <1> 
   461                              <1> ;Default Configuration for the system
   462                              <1> 
   463                              <1> buffersDefault  equ 30
   464                              <1> filesDefault    equ 20
   465                              <1> fcbsDefault     equ 4
   466                              <1> safeFcbsDeflt   equ 0
   467                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Source/Include/dosError.inc"
     9                              <1> ;DOS Error codes
    10                              <1> 
    11                              <1> ;Extended Error Codes
    12                              <1> errInvFnc   equ 1   ;Invalid function number
    13                              <1> errFnf      equ 2   ;File not found
    14                              <1> errPnf      equ 3   ;Path not found
    15                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    16                              <1> errAccDen   equ 5   ;Access denied (to resource)
    17                              <1> errBadHdl   equ 6   ;Invalid handle
    18                              <1> errMCBbad   equ 7   ;MCB's destroyed
    19                              <1> errNoMem    equ 8   ;Insufficient memory
    20                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    21                              <1> errBadEnv   equ 10  ;Invalid environment
    22                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    23                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    24                              <1> errInvDat   equ 13  ;Invalid data
    25                              <1> ;           equ 14  ;Reserved
    26                              <1> errBadDrv   equ 15  ;Invalid drive specified
    27                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    28                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    29                              <1> errNoFil    equ 18  ;No more files
    30                              <1> ;The following are Driver error codes + 19
    31                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    32                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    33                              <1> errUnkUnt   equ 20  ;Unknown Unit
    34                              <1> errDrvNR    equ 21  ;Drive not ready
    35                              <1> errUnkCmd   equ 22  ;Unknown Command
    36                              <1> errCRCerr   equ 23  ;Data (CRC) error
    37                              <1> errBadRLn   equ 24  ;Bad request structure length
    38                              <1> errSekErr   equ 25  ;Seek error
    39                              <1> errUnkMed   equ 26  ;Unknown media type
    40                              <1> errSecNF    equ 27  ;Sector not Found
    41                              <1> errNoPap    equ 28  ;Printer out of paper
    42                              <1> errWF       equ 29  ;Write fault
    43                              <1> errRF       equ 30  ;Read fault
    44                              <1> errGF       equ 31  ;General fault
    45                              <1> ;----------------------------------------------
    46                              <1> ;The following two go inbetween the Disk errors
    47                              <1> errShrVio   equ 32  ;Sharing violations
    48                              <1> errLokVio   equ 33  ;File Lock violation
    49                              <1> ;----------------------------------------------
    50                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    51                              <1> errNoFCB    equ 35  ;FCB unavailable
    52                              <1> errShrFul   equ 36  ;Sharing buffer full
    53                              <1> 
    54                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    55                              <1> 
    56                              <1> errFilExist equ 80  ;File already exists
    57                              <1> errDirExist equ 82  ;Directory already exists
    58                              <1> errFI44     equ 83  ;Fail on INT 44h
    59                              <1> errRedir    equ 84  ;Too many levels of redirection
    60                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    61                              <1> errBadPass  equ 86  ;Bad password
    62                              <1> errBadParam equ 87  ;Bad parameter passed to request
    63                              <1> errNetWrite equ 88  ;Network Write Fault
    64                              <1> ;-----------------------------------------------------------------------------
    65                              <1> ;Error Loci
    66                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    67                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    68                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    69                              <1> eLocChr     equ 4   ;Serial/Character Device error
    70                              <1> eLocMem     equ 5   ;Related to RAM
    71                              <1> ;-----------------------------------------------------------------------------
    72                              <1> ;Error Actions
    73                              <1> eActRet     equ 1   ;Retry
    74                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    75                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    76                              <1> eActAbt     equ 4   ;Abort with cleanup
    77                              <1> eActKil     equ 5   ;Abort without cleanup
    78                              <1> eActIgn     equ 6   ;Ignore error
    79                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    80                              <1> ;-----------------------------------------------------------------------------
    81                              <1> ;Error classes
    82                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    83                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    84                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    85                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    86                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    87                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    88                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    89                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    90                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    91                              <1> eClsLocked  equ 10  ;Resource Locked
    92                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    93                              <1> eClsClash   equ 12  ;Resource already exists!
    94                              <1> eClsUnk     equ 13  ;Unknown class
     9                                  %include "./Source/Utils/COMMAND/Data/cmdEqu.asm"
    10                              <1> ;Data equates and struct declarations
    11                              <1> 
    12                              <1> cmdBufferL  equ 128 ;Length of a command line buffer
    13                              <1> driveSpecL  equ 2   ;Space for X:
    14                              <1> dirPathL    equ 64  ;Length of a directory path
    15                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
    16                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
    17                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
    18                              <1> fullDirPathL equ driveSpecL + dirPathL
    19                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    20                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    21                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    22                              <1> 
    23                              <1> ;Use PSP FCB's for switch buffers
    24                              <1> fcb1        equ psp.fcb1
    25                              <1> fcb2        equ psp.fcb2
    26                              <1> ;Use the dta as the built command line buffer.
    27                              <1> cmdLineCnt  equ psp.parmList
    28                              <1> cmdLine     equ psp.progTail
    29                              <1> 
    30                              <1> 
    31                              <1> ;Struct Declarations
    32                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    33 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    34 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    35 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    36 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    37 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    38                              <1> endstruc
    39                              <1> 
    40                              <1> struc execProg  ;For use with EXEC-ing a child task
    41 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    42 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    43 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    44 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    45                              <1> endstruc
    46                              <1> 
    47                              <1> ;Directory attribute equates
    48                              <1>     dirReadOnly     equ 01h
    49                              <1>     dirHidden       equ 02h
    50                              <1>     dirSystem       equ 04h
    51                              <1>     dirVolumeID     equ 08h
    52                              <1>     dirDirectory    equ 10h
    53                              <1>     dirArchive      equ 20h
    54                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    55                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    56                              <1>     ;If any of the three bits are set, then ALL three bits are set
    57                              <1>     ; in addition to whatever the user passed to search for.
    58                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    59                              <1>     dirIncFiles     equ dirHidden | dirSystem
    10                                  Segment .data align=1 
    11                                  %include "./Source/Utils/COMMAND/Data/cmdData.asm"
    12                              <1> ;Static Data Area for COMMAND.COM    
    13                              <1> startLbl:   ;Start symbol, this is the entry point
    14 00000000 E9CC1C0000          <1>     jmp cmdLdr
    15 00000005 0000000000000000    <1> stackBottom dq 0    ;Pointer to the top of the stack as allocated by DOS
    16 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
    17 0000000F FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
    18 00000017 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
    19 0000001F 1400                <1> numHdls     dw 20   ;Get number of handles permitted, hardcoded in this version
    20 00000021 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    21 00000023 5C                  <1> pathSep     db "\"  ;Default path sep
    22 00000024 2F                  <1> switchChar  db "/"  ;Default switch char
    23                              <1> ;Static strings, not used in command line parsing
    24 00000025 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    24 0000002E 000000000000000000- <1>
    24 00000037 000000000000000000- <1>
    24 00000040 000000000000000000- <1>
    24 00000049 0000                <1>
    25 0000004B 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    25 00000054 000000000000000000- <1>
    25 0000005D 000000000000000000- <1>
    25 00000066 000000000000000000- <1>
    25 0000006F 000000000000000000- <1>
    25 00000078 000000000000000000- <1>
    25 00000081 000000000000000000- <1>
    25 0000008A 00000000            <1>
    26                              <1> 
    27                              <1> 
    28                              <1> cmdLineStatePtr:
    29 0000008E 00                  <1> cmdStartOff db 0    ;Offset to the first char for this command (may be a space)
    30 0000008F 00                  <1> cmdEndOff   db 0    ;Offset to the terminating char for this command (0Dh or |)
    31 00000090 00                  <1> pipeFlag    db 0    ;If set, we are piping across a command
    32 00000091 0000                <1> pipeHndl    dw 0    ;If pipeFlag set, this var has the handle to the pipe file
    33 00000093 202020202020202020- <1> pipeName    db 11 dup (" ") ;Name of the pipe file we created
    33 0000009C 2020                <1>
    34                              <1> 
    35                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    36                              <1> ;These variables are valid for a SINGLE command in a command line
    37 0000009E 0000                <1> cmdDrvSpec  dw 0    ;Read the first word in to see if the pathspec has drivespec
    38 000000A0 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    39 000000A1 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    40                              <1> ;                    If 2, we are redirecting output to a file, by appending
    41                              <1> ;FLG and SWCH are read as a word when checking if argX is a switch
    42 000000A2 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    43 000000A3 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    44 000000A4 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    45                              <1> 
    46 000000A5 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    47 000000A6 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    48 000000A7 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    49                              <1> 
    50                              <1> cmdStateL equ $ - cmdStatePtr
    51                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    52                              <1> 
    53                              <1> ;Structs and strings
    54                              <1> 
    55 000000A8 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    55 000000B1 00000000000000      <1>
    56 000000B8 2B                  <1> cmdFFBlock  db ffBlock_size ;Internal Find First Block to use as default DTA
    57                              <1> 
    58 000000B9 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    58 000000C2 000000000000000000- <1>
    58 000000CB 000000000000000000- <1>
    58 000000D4 000000000000000000- <1>
    58 000000DD 000000000000000000- <1>
    58 000000E6 000000000000000000- <1>
    58 000000EF 000000000000000000- <1>
    58 000000F8 000000000000000000- <1>
    58 00000101 000000000000000000- <1>
    58 0000010A 000000000000000000- <1>
    58 00000113 000000000000000000- <1>
    58 0000011C 000000000000000000- <1>
    58 00000125 000000000000000000- <1>
    58 0000012E 000000000000000000- <1>
    58 00000137 0000                <1>
    59 00000139 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    59 00000142 000000000000000000- <1>
    59 0000014B 000000000000000000- <1>
    59 00000154 000000000000000000- <1>
    59 0000015D 000000000000000000- <1>
    59 00000166 000000000000000000- <1>
    59 0000016F 000000000000000000- <1>
    59 00000178 000000000000000000- <1>
    59 00000181 000000000000000000- <1>
    59 0000018A 000000000000000000- <1>
    59 00000193 000000000000000000- <1>
    59 0000019C 000000000000000000- <1>
    59 000001A5 000000000000000000- <1>
    59 000001AE 000000000000000000- <1>
    59 000001B7 0000                <1>
    60 000001B9 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)  ;Space for full path to a external command
    60 000001C2 000000000000000000- <1>
    60 000001CB 000000000000000000- <1>
    60 000001D4 000000000000000000- <1>
    60 000001DD 000000000000000000- <1>
    60 000001E6 000000000000000000- <1>
    60 000001EF 000000000000000000- <1>
    60 000001F8 000000000000000000- <1>
    60 00000201 00000000000000      <1>
    61                              <1> 
    62 00000208 000000000000000000- <1> fcbCmdSpec  db fcbNameL dup (0) ;Used to make a FCB style name for the file
    62 00000211 0000                <1>
    63 00000213 000000000000000000- <1> cmdSpec     db fileNameZL dup (0)   ;ASCIIZ command spec for the command name
    63 0000021C 00000000            <1>
    64 00000220 000000000000000000- <1> cmdName     db cmdNameL dup (0) ;Command name string prefixed by length of word
    64 00000229 0000000000          <1>
    65                              <1> 
    66 0000022E 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    66 00000237 000000000000000000- <1>
    66 00000240 000000000000000000- <1>
    66 00000249 000000000000000000- <1>
    66 00000252 000000000000000000- <1>
    66 0000025B 000000000000000000- <1>
    66 00000264 000000000000000000- <1>
    66 0000026D 000000000000000000- <1>
    66 00000276 00000000000000      <1>
    67 0000027D 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    67 00000286 000000000000000000- <1>
    67 0000028F 000000000000000000- <1>
    67 00000298 000000000000000000- <1>
    67 000002A1 000000000000000000- <1>
    67 000002AA 000000000000000000- <1>
    67 000002B3 000000000000000000- <1>
    67 000002BC 000000000000000000- <1>
    67 000002C5 00000000000000      <1>
    68                              <1> 
    69 000002CC 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Contains the pathspec for the search file
    69 000002D5 000000000000000000- <1>
    69 000002DE 000000000000000000- <1>
    69 000002E7 000000000000000000- <1>
    69 000002F0 000000000000000000- <1>
    69 000002F9 000000000000000000- <1>
    69 00000302 000000000000000000- <1>
    69 0000030B 000000000000000000- <1>
    69 00000314 000000000000000000- <1>
    69 0000031D 000000000000000000- <1>
    69 00000326 000000000000000000- <1>
    69 0000032F 000000000000000000- <1>
    69 00000338 000000000000000000- <1>
    69 00000341 000000000000000000- <1>
    69 0000034A 0000                <1>
    70                              <1> ;The above is larger than is needed/supported by DOS to allow for 
    71                              <1> ; users overtyping
    72                              <1> 
    73                              <1> ;Internal Function vars
    74 0000034C 00                  <1> dirPrnType  db 0    ;Print type.    Bit[0] set => /W or /w specified
    75                              <1> ;                                   Bit[1] set => /P or /p specified
    76 0000034D 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    77 0000034E 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    78 0000034F 00                  <1> dirPathOff  db 0
    79 00000350 000000000000000000- <1> dirVolLbl   db 13 dup (0)
    79 00000359 00000000            <1>
    80 0000035D 0000000000000000    <1> dirVolPathBuf db 8 dup (0)  ;Used to build X:\*.*,0 for volume label search
    81 00000365 00                  <1> dirDrv      db 0    ;0 based drive number to use
    12                                  %include "./Source/Utils/COMMAND/Data/cmdTable.asm"
    13                              <1> ;Function dispatch table
    14                              <1> functionTable:
    15                              <1> ;Use Pascal strings with each row of hte table having three columns:
    16                              <1> ; Col 1, BYTE, Length of command
    17                              <1> ; Col 2, String, String representing the user input
    18                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
    19 00000366 03444952            <1>     db 3, "DIR"
    20 0000036A 3C0D                <1>     dw dir - startLbl
    21                              <1> 
    22 0000036C 024344              <1>     db 2, "CD"
    23 0000036F 2C11                <1>     dw chdir - startLbl
    24                              <1> 
    25 00000371 054348444952        <1>     db 5, "CHDIR"
    26 00000377 2C11                <1>     dw chdir - startLbl
    27                              <1> 
    28 00000379 024D44              <1>     db 2, "MD"
    29 0000037C E611                <1>     dw mkdir - startLbl
    30                              <1> 
    31 0000037E 054D4B444952        <1>     db 5, "MKDIR"
    32 00000384 E611                <1>     dw mkdir - startLbl
    33                              <1> 
    34 00000386 025244              <1>     db 2, "RD"
    35 00000389 4B12                <1>     dw rmdir - startLbl
    36                              <1> 
    37 0000038B 05524D444952        <1>     db 5, "RMDIR"
    38 00000391 4B12                <1>     dw rmdir - startLbl
    39                              <1> 
    40 00000393 0344454C            <1>     db 3, "DEL"
    41 00000397 B112                <1>     dw erase - startLbl
    42                              <1> 
    43 00000399 054552415345        <1>     db 5, "ERASE"
    44 0000039F B112                <1>     dw erase - startLbl
    45                              <1> 
    46 000003A1 0444415445          <1>     db 4, "DATE"
    47 000003A6 B212                <1>     dw date - startLbl
    48                              <1> 
    49 000003A8 0454494D45          <1>     db 4, "TIME"
    50 000003AD B312                <1>     dw time - startLbl
    51                              <1> 
    52 000003AF 04434F5059          <1>     db 4, "COPY"
    53 000003B4 B012                <1>     dw copy - startLbl
    54                              <1> 
    55 000003B6 0443545459          <1>     db 4, "CTTY"
    56 000003BB B412                <1>     dw ctty - startLbl
    57                              <1> 
    58 000003BD 03434C53            <1>     db 3, "CLS"
    59 000003C1 B512                <1>     dw cls - startLbl
    60                              <1> 
    61 000003C3 05425245414B        <1>     db 5, "BREAK"
    62 000003C9 2713                <1>     dw break - startLbl
    63                              <1> 
    64 000003CB 06564552494659      <1>     db 6, "VERIFY"
    65 000003D2 A813                <1>     dw verify - startLbl
    66                              <1> 
    67 000003D4 0652454E414D45      <1>     db 6, "RENAME"
    68 000003DB 2514                <1>     dw rename - startLbl
    69                              <1> 
    70 000003DD 08545255454E414D45  <1>     db 8, "TRUENAME"
    71 000003E6 2614                <1>     dw truename - startLbl
    72                              <1> 
    73 000003E8 03564552            <1>     db 3, "VER"
    74 000003EC 6414                <1>     dw version - startLbl
    75                              <1> 
    76 000003EE FF                  <1>     db -1   ;End of table
    13                                  %include "./Source/Utils/COMMAND/Data/cmdMsg.asm"
    14                              <1> ;COMMAND.COM Messages and strings
    15 000003EF 0D0A24              <1> crlf    db  CR,LF,"$"
    16 000003F2 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
    16 000003FB 696C65206D69737369- <1>
    16 00000404 6E670D0A24          <1>
    17 00000409 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
    17 00000412 6469736B2077697468- <1>
    17 0000041B 206261746368206669- <1>
    17 00000424 6C65                <1>
    18 00000426 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
    18 0000042F 737320616E79206B65- <1>
    18 00000438 79207768656E207265- <1>
    18 00000441 6164790D0A24        <1>
    19 00000447 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
    19 00000450 6E64206F722066696C- <1>
    19 00000459 65206E616D650D0A24  <1>
    20 00000462 4475706C6963617465- <1> dupName db  "Duplicate file name or "
    20 0000046B 2066696C65206E616D- <1>
    20 00000474 65206F7220          <1>
    21 00000479 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    21 00000482 666F756E640D0A24    <1>
    22 0000048A 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    22 00000493 656E74206469736B20- <1>
    22 0000049C 73706163650D0A24    <1>
    23 000004A4 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    23 000004AD 7669726F6E6D656E74- <1>
    23 000004B6 2073706163650D0A24  <1>
    24 000004BF 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    24 000004C8 74696F6E206572726F- <1>
    24 000004D1 720D0A24            <1>
    25 000004D5 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    25 000004DE 6F7420626520636F70- <1>
    25 000004E7 696564206F6E746F20- <1>
    25 000004F0 697473656C660D0A24  <1>
    26 000004F9 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    26 00000502 662064657374696E61- <1>
    26 0000050B 74696F6E206C6F7374- <1>
    26 00000514 206265666F72652063- <1>
    26 0000051D 6F70790D0A24        <1>
    27                              <1> ;Copy end message. First write # files copied then this message 
    28 00000523 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    28 0000052C 636F706965640D0A24  <1>
    29                              <1> ;Dir end1 msg. First write # files in dir then this
    30 00000535 2046696C6528732920- <1> dirOk   db  " File(s) $"
    30 0000053E 24                  <1>
    31                              <1> ;Dir end2 msg. First write # bytes free then this message
    32 0000053F 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    32 00000548 65650D0A24          <1>
    33 0000054D 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    34                              <1> 
    35 00000556 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    35 0000055F 726976652073706563- <1>
    35 00000568 696669636174696F6E- <1>
    35 00000571 0D0A24              <1>
    36 00000574 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    36 0000057D 6B6579207768656E20- <1>
    36 00000586 7265616479202E202E- <1>
    36 0000058F 202E2024            <1>
    37 00000593 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    37 0000059C 6172616D657465720D- <1>
    37 000005A5 0A24                <1>
    38                              <1> 
    39 000005A7 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    39 000005B0 576564546875467269- <1>
    39 000005B9 536174              <1>
    40 000005BC 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    40 000005C5 206461746524        <1>
    41 000005CB 43757272656E742064- <1> curDate db  "Current date is $"
    41 000005D4 6174652069732024    <1>
    42 000005DC 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date: $"
    42 000005E5 657720646174653A20- <1>
    42 000005EE 24                  <1>
    43 000005EF 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    43 000005F8 2074696D6524        <1>
    44 000005FE 43757272656E742074- <1> curTime db  "Current time is $"
    44 00000607 696D652069732024    <1>
    45 0000060F 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    45 00000618 65772074696D653A20- <1>
    45 00000621 24                  <1>
    46                              <1> 
    47 00000622 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    47 0000062B 7572652028592F4E29- <1>
    47 00000634 3F2024              <1>
    48                              <1> 
    49 00000637 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    49 00000640 56657273696F6E2024  <1>
    50                              <1> 
    51 00000649 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    51 00000652 6E2064726976652024  <1>
    52 0000065B 2069732024          <1> volOk   db " is $"
    53 00000660 20686173206E6F206C- <1> volNo   db " has no label$"
    53 00000669 6162656C24          <1>
    54                              <1> 
    55 0000066E 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    55 00000677 69726563746F72790D- <1>
    55 00000680 0A24                <1>
    56 00000682 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    56 0000068B 206372656174652064- <1>
    56 00000694 69726563746F72790D- <1>
    56 0000069D 0A24                <1>
    57 0000069F 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    57 000006A8 6174682C206E6F7420- <1>
    57 000006B1 6469726563746F7279- <1>
    57 000006BA 2C0D0A              <1>
    58 000006BD 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    58 000006C6 6F7279206E6F742065- <1>
    58 000006CF 6D7074790D0A24      <1>
    59 000006D6 204469726563746F72- <1> dirMain db " Directory of  $"
    59 000006DF 79206F66202024      <1>
    60 000006E6 4E6F20506174682024  <1> noPath  db "No Path $"
    61 000006EF 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    61 000006F8 7269766520696E2073- <1>
    61 00000701 656172636820706174- <1>
    61 0000070A 680D0A24            <1>
    62 0000070E 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    62 00000717 65766963650D0A24    <1>
    63 0000071F 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    63 00000728 20666F756E640D0A24  <1>
    64 00000731 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    64 0000073A 726F720D0A24        <1>
    65 00000740 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    65 00000749 6F74206265206E6573- <1>
    65 00000752 7465640D0A24        <1>
    66 00000758 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    66 00000761 6174652066696C6520- <1>
    66 0000076A 6572726F7220647572- <1>
    66 00000773 696E6720706970650D- <1>
    66 0000077C 0A24                <1>
    67 0000077E 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    67 00000787 2062696E6172792072- <1>
    67 00000790 656164732066726F6D- <1>
    67 00000799 206120646576696365- <1>
    67 000007A2 0D0A24              <1>
    68 000007A5 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    69 000007AB 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    70 000007B0 425245414B20697320- <1> breakIs db "BREAK is $"
    70 000007B9 24                  <1>
    71 000007BA 564552494659206973- <1> verifyIs    db "VERIFY is $"
    71 000007C3 2024                <1>
    72 000007C5 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    73 000007CE 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    73 000007D7 617468206F72206669- <1>
    73 000007E0 6C65206E616D650D0A- <1>
    73 000007E9 24                  <1>
    74 000007EA 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    74 000007F3 756D626572206F6620- <1>
    74 000007FC 706172616D65746572- <1>
    74 00000805 730D0A24            <1>
    75 00000809 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    75 00000812 74696E6720746F2064- <1>
    75 0000081B 6576696365          <1>
    76 00000820 08200800            <1> backSpace   db BSP," ",BSP,NUL
    77                              <1> 
    78 00000824 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    79 00000828 2020202024          <1> fourSpc  db "    $"
    80 0000082D 20202024            <1> threeSpc db "   $"
    81 00000831 202024              <1> twoSpc   db "  $"
    82                              <1> 
    83 00000834 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    83 0000083D 696679204F4E206F72- <1>
    83 00000846 204F46460D0A24      <1>
    84 0000084D 504154483D          <1> pathEVar db "PATH="
    85 00000852 50524F4D50543D      <1> promptEVar  db "PROMPT="
    14                                  %include "./Source/Utils/COMMAND/Source/cmdMain.asm"
    15                              <1> commandStart:
    16                              <1>     ;Resize Allocation, jump here with endpointer in rbx
    17                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
    18                              <1>     ; that the jump to safety won't be gobbled up when multitasking
    19 00000859 49F7D8              <1>     neg r8  ;Convert r8 to -r8
    20 0000085C 4A8D5C0311          <1>     lea rbx, qword [rbx + r8 + 11h]    ;Get # of bytes for COMMAND.COM
    21 00000861 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
    22 00000864 B44A                <1>     mov ah, 4Ah ;Realloc
    23 00000866 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    24 00000869 CD41                <1>     int 41h
    25 0000086B EB5A                <1>     jmp short commandMain
    26                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    27 0000086D B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    28 00000872 CD41                <1>     int 41h
    29 00000874 66890592F7FFFF      <1>     mov word [returnCode], ax
    30                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    31 0000087B 488D1591110000      <1>     lea rdx, critErrorHandler
    32 00000882 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    33 00000886 B844250000          <1>     mov eax, 2544h
    34 0000088B CD41                <1>     int 41h
    35 0000088D 488D150F140000      <1>     lea rdx, int43h
    36 00000894 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    37 00000898 B843250000          <1>     mov eax, 2543h
    38 0000089D CD41                <1>     int 41h
    39 0000089F 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    40 000008A6 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    41 000008AA B842250000          <1>     mov eax, 2542h
    42 000008AF CD41                <1>     int 41h
    43                              <1> ;Close all handles from 5->MAX
    44 000008B1 0FB70D67F7FFFF      <1>     movzx ecx, word [numHdls]
    45 000008B8 BB05000000          <1>     mov ebx, 5
    46                              <1> .handleClose:
    47 000008BD B43E                <1>     mov ah, 3Eh ;File close
    48 000008BF CD41                <1>     int 41h
    49 000008C1 FFC3                <1>     inc ebx ;Goto next file
    50 000008C3 39CB                <1>     cmp ebx, ecx
    51 000008C5 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    52                              <1> commandMain:
    53                              <1> ;Setup Commandline
    54 000008C7 FA                  <1>     cli
    55 000008C8 488B2536F7FFFF      <1>     mov rsp, qword [stackBottom]    ;Reset internal stack pointer pos
    56 000008CF FB                  <1>     sti
    57 000008D0 FC                  <1>     cld ;Ensure stringops are done the right way
    58 000008D1 C605E1F7FFFF80      <1>     mov byte [inBuffer], 80h    ;Reset the buffer length
    59                              <1> .inputMain:
    60 000008D8 E8240F0000          <1>     call clearCommandLineState
    61 000008DD E8C10B0000          <1>     call printCRLF
    62 000008E2 E8F20E0000          <1>     call printPrompt
    63                              <1> 
    64 000008E7 488D15CBF7FFFF      <1>     lea rdx, inBuffer
    65 000008EE B80A0C0000          <1>     mov eax, 0C0Ah  ;Do Buffered input
    66 000008F3 CD41                <1>     int 41h
    67 000008F5 E8A90B0000          <1>     call printCRLF  ;Note we have accepted input
    68                              <1> 
    69                              <1> ;First check we had something typed in of length greater than 1
    70                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    71 000008FA 803DB9F7FFFF01      <1>     cmp byte [inBuffer + 1], 1  ;Check input length valid
    72 00000901 762A                <1>     jbe .dfltErrExit
    73                              <1>     ;Copy over the input text
    74 00000903 488D35AFF7FFFF      <1>     lea rsi, inBuffer
    75 0000090A 488D3D28F8FFFF      <1>     lea rdi, cmdBuffer
    76 00000911 B980000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    77 00000916 F3A4                <1>     rep movsb
    78 00000918 31C0                <1>     xor eax, eax
    79 0000091A 6689056DF7FFFF      <1>     mov word [cmdStartOff], ax  ;Clear start and end Off positions
    80 00000921 E814000000          <1>     call parseInput
    81 00000926 E8AD010000          <1>     call doCommandLine
    82 0000092B EBAB                <1>     jmp short .inputMain
    83                              <1> .dfltErrExit:
    84 0000092D 488D1513FBFFFF      <1>     lea rdx, badCmd
    85 00000934 B409                <1>     mov ah, 09h
    86 00000936 CD41                <1>     int 41h
    87 00000938 EB9E                <1>     jmp short .inputMain
    88                              <1> 
    89                              <1> parseInput:
    90                              <1> ;EndOff is set up before entering this part
    91                              <1> ;Copies a nicely formatted version of the input command line
    92                              <1> ; without any redirections to psp.dta
    93 0000093A 488D35FAF7FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
    94 00000941 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
    95 00000948 0FB61D40F7FFFF      <1>     movzx ebx, byte [cmdEndOff] ;Get the old end offset
    96 0000094F 4801DE              <1>     add rsi, rbx    ;Move rsi to the start of this new command
    97 00000952 E8730E0000          <1>     call skipSpaces ;Skip any preceeding spaces
    98 00000957 66AD                <1>     lodsw   ;Get the first two chars into ax
    99 00000959 6689053EF7FFFF      <1>     mov word [cmdDrvSpec], ax ;Store these chars as if they are the drvspec
   100 00000960 4881EE02000000      <1>     sub rsi, 2  ;Go back to the start of the command
   101 00000967 56                  <1>     push rsi
   102 00000968 57                  <1>     push rdi
   103 00000969 488D3D49F8FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   104 00000970 57                  <1>     push rdi
   105 00000971 E868030000          <1>     call copyCommandTailItem
   106 00000976 5F                  <1>     pop rdi
   107 00000977 9C                  <1>     pushfq  ;Save the CF state
   108 00000978 E8D50D0000          <1>     call strlen
   109 0000097D FFC9                <1>     dec ecx ;Drop the terminating char from the count
   110 0000097F 58                  <1>     pop rax ;Get the CF state in al
   111 00000980 5F                  <1>     pop rdi
   112 00000981 5E                  <1>     pop rsi
   113 00000982 F3A4                <1>     rep movsb   ;Now we copy the command into the psp command line
   114 00000984 A801                <1>     test al, 1  ;Was CF set?
   115 00000986 0F8586000000        <1>     jnz .exit   ;If an embedded CR was found in the filename, exit!
   116                              <1> .cmdLineProcess:
   117 0000098C E8390E0000          <1>     call skipSpaces ;Go to the next char in the input line
   118                              <1> .redirFound:
   119 00000991 AC                  <1>     lodsb   ;Get first non-space char (setupRedir skips spaces before ret)
   120 00000992 3C0D                <1>     cmp al, CR  ;If this was a CR, we stop processing
   121 00000994 747C                <1>     je .exit
   122 00000996 E8D6020000          <1>     call checkAndSetupRedir ;If not, check if we have a redir element
   123 0000099B 7275                <1>     jc .exit    ;CF=CY only if pipe, which is equivalent to CR when processing
   124 0000099D 74F2                <1>     jz .redirFound  ;If we had a < > or >>, proceed to check if next char CR
   125 0000099F B020                <1>     mov al, " "
   126 000009A1 AA                  <1>     stosb   ;Store a space to make space for the command file parameter
   127 000009A2 48FFCE              <1>     dec rsi ;Move rsi back to the first char
   128 000009A5 F605F6F6FFFFFF      <1>     test byte [arg1Flg], -1
   129 000009AC 7521                <1>     jnz .arg2
   130                              <1> .arg1:
   131 000009AE C605EDF6FFFFFF      <1>     mov byte [arg1Flg], -1
   132 000009B5 E8100E0000          <1>     call skipSpaces
   133 000009BA 4889F0              <1>     mov rax, rsi
   134 000009BD 488D1D75F7FFFF      <1>     lea rbx, cmdBuffer
   135 000009C4 4829D8              <1>     sub rax, rbx
   136 000009C7 8805D6F6FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   137 000009CD EB2A                <1>     jmp short .argCommon
   138                              <1> .arg2:
   139 000009CF F605CFF6FFFFFF      <1>     test byte [arg2Flg], -1
   140 000009D6 7521                <1>     jnz .argCommon
   141 000009D8 C605C6F6FFFFFF      <1>     mov byte [arg2Flg], -1
   142 000009DF E8E60D0000          <1>     call skipSpaces
   143 000009E4 4889F0              <1>     mov rax, rsi
   144 000009E7 488D1D4BF7FFFF      <1>     lea rbx, cmdBuffer
   145 000009EE 4829D8              <1>     sub rax, rbx
   146 000009F1 8805AFF6FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   147 000009F7 EB00                <1>     jmp short .argCommon
   148                              <1> .argCommon:
   149                              <1>     ;More than two arguments? Do nothing more than just copy it
   150                              <1>     ; over. If we encounter an embedded CR, exit there too
   151 000009F9 E8CC0D0000          <1>     call skipSpaces
   152 000009FE 803E0D              <1>     cmp byte [rsi], CR  ;Are we at the end of the commandline?
   153 00000A01 740F                <1>     je .exit
   154                              <1>     ;If not, we copy it over
   155 00000A03 E8D6020000          <1>     call copyCommandTailItem    ;Stores a terminating null we dont want
   156 00000A08 488D7FFF            <1>     lea rdi, qword [rdi - 1]    ;Point back at the inserted terminating null
   157 00000A0C 0F837AFFFFFF        <1>     jnc .cmdLineProcess
   158                              <1> .exit:
   159 00000A12 488D1D20F7FFFF      <1>     lea rbx, cmdBuffer
   160 00000A19 48FFCE              <1>     dec rsi
   161 00000A1C 4829DE              <1>     sub rsi, rbx    ;Get the offset into the command line
   162 00000A1F 89F3                <1>     mov ebx, esi
   163 00000A21 881D68F6FFFF        <1>     mov byte [cmdEndOff], bl    ;Store the offset to the terminating char
   164 00000A27 B00D                <1>     mov al, CR
   165 00000A29 AA                  <1>     stosb   ;Store the terminating CR in the psp command line
   166                              <1>     ;Now compute the command line length 
   167 00000A2A 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine] 
   168 00000A31 B00D                <1>     mov al, CR
   169 00000A33 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   170 00000A35 FFC9                <1>     dec ecx ;rcx = -1
   171 00000A37 F2AE                <1>     repne scasb
   172 00000A39 F7D1                <1>     not ecx
   173 00000A3B FEC9                <1>     dec cl  ;Dont include terminating CR
   174 00000A3D 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   175 00000A44 880F                <1>     mov byte [rdi], cl
   176                              <1>     ;Before returning, we copy the command name to cmdName
   177 00000A46 488D3D6CF7FFFF      <1>     lea rdi, cmdPathSpec
   178 00000A4D 4889FB              <1>     mov rbx, rdi    ;Use rbx as the ptr to the first char in the commandspec
   179 00000A50 30C0                <1>     xor al, al  ;Search for the terminating null
   180 00000A52 B94F000000          <1>     mov ecx, fileSpecZL ;Max number of chars the length could be
   181 00000A57 F2AE                <1>     repne scasb
   182 00000A59 48FFCF              <1>     dec rdi ;Go to the last char in the command
   183 00000A5C 4889FE              <1>     mov rsi, rdi
   184 00000A5F FD                  <1>     std ;Now we go backwards to where rsi = rbx OR byte [rsi] = pathSep
   185                              <1> .keepSearching:
   186 00000A60 AC                  <1>     lodsb
   187 00000A61 3A05BCF5FFFF        <1>     cmp al, byte [pathSep]
   188 00000A67 740B                <1>     je .cmdStartFnd
   189 00000A69 4839DE              <1>     cmp rsi, rbx
   190 00000A6C 75F2                <1>     jne .keepSearching
   191 00000A6E 48FFCE              <1>     dec rsi ;Go back two to go forwards again
   192 00000A71 48FFCE              <1>     dec rsi
   193                              <1> .cmdStartFnd:
   194 00000A74 48FFC6              <1>     inc rsi
   195 00000A77 48FFC6              <1>     inc rsi ;Go past the pathsep
   196 00000A7A FC                  <1>     cld ;Go the sane way again
   197 00000A7B 488D3D9FF7FFFF      <1>     lea rdi, qword [cmdName + 1]    ;First byte is for the length of the name
   198 00000A82 57                  <1>     push rdi    ;Cleanse the field before usage (not strictly necessary)
   199 00000A83 B90E000000          <1>     mov ecx, cmdNameL
   200 00000A88 30C0                <1>     xor al, al
   201 00000A8A F3AA                <1>     rep stosb
   202 00000A8C 5F                  <1>     pop rdi
   203 00000A8D 31C9                <1>     xor ecx, ecx
   204 00000A8F 56                  <1>     push rsi    ;Save the location of the start byte of the command name
   205                              <1> .cmdGetChar:
   206 00000A90 AC                  <1>     lodsb
   207 00000A91 84C0                <1>     test al, al ;Did we find the terminating null?
   208 00000A93 7411                <1>     jz .nameLenFnd
   209 00000A95 3C2E                <1>     cmp al, "." ;Extension sep also terminates
   210 00000A97 740D                <1>     je .nameLenFnd
   211 00000A99 24DF                <1>     and al, 0DFh    ;Else uppercase the char
   212 00000A9B AA                  <1>     stosb   ;and store it
   213 00000A9C FFC1                <1>     inc ecx
   214 00000A9E 81F90B000000        <1>     cmp ecx, 11 ;Max command length is 11
   215 00000AA4 72EA                <1>     jb .cmdGetChar
   216                              <1> .nameLenFnd:
   217 00000AA6 880D74F7FFFF        <1>     mov byte [cmdName], cl  ;Store the name length now
   218                              <1>     ;Now finally, create a FCB filespec
   219 00000AAC 488D3D55F7FFFF      <1>     lea rdi, fcbCmdSpec
   220 00000AB3 57                  <1>     push rdi
   221 00000AB4 B90B000000          <1>     mov ecx, fcbNameL
   222 00000AB9 B020                <1>     mov al, " " ;Fill with spaces
   223 00000ABB F3AA                <1>     rep stosb
   224 00000ABD 5F                  <1>     pop rdi
   225 00000ABE 5E                  <1>     pop rsi ;Get back the location of the start byte of the command name
   226 00000ABF E84E0D0000          <1>     call asciiToFCB
   227 00000AC4 488D353DF7FFFF      <1>     lea rsi, fcbCmdSpec
   228 00000ACB 488D3D41F7FFFF      <1>     lea rdi, cmdSpec
   229 00000AD2 E8960D0000          <1>     call FCBToAsciiz
   230                              <1>     return
    19                              <2> %%_ret:
    20 00000AD7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   231                              <1> 
   232                              <1> doCommandLine:
   233 00000AD8 488D355CF6FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
   234 00000ADF 488D3DC2F5FFFF      <1>     lea rdi, cmdFcb
   235 00000AE6 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks
   236 00000AEB CD41                <1>     int 41h
   237 00000AED 0FB71DAAF5FFFF      <1>     movzx ebx, word [cmdDrvSpec]    ;Get the drive specifier
   238 00000AF4 80FF3A              <1>     cmp bh, ":"
   239 00000AF7 752E                <1>     jne .noDriveSpecified
   240 00000AF9 88DA                <1>     mov dl, bl      ;Move the drive letter in dl
   241 00000AFB 80E2DF              <1>     and dl, 0DFh    ;Make the drive letter upper case
   242 00000AFE 80EA41              <1>     sub dl, "A"     ;And make it a 0 based drive letter
   243 00000B01 3CFF                <1>     cmp al, -1  ;Int 41h returns AL = -1 if bad drive specified
   244 00000B03 7415                <1>     je .badDrive
   245                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   246 00000B05 803D14F7FFFF02      <1>     cmp byte [cmdName], 2
   247 00000B0C 7519                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   248 00000B0E B40E                <1>     mov ah, 0Eh ;Set drive to dl
   249 00000B10 CD41                <1>     int 41h 
   250 00000B12 B419                <1>     mov ah, 19h
   251 00000B14 CD41                <1>     int 41h     ;Get current drive
   252 00000B16 38D0                <1>     cmp al, dl  ;If the drive was set, all is well
   253                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000B18 74(D7)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   254                              <1> .badDrive:
   255 00000B1A 488D1535FAFFFF      <1>     lea rdx, badDrv
   256 00000B21 B409                <1>     mov ah, 09h
   257 00000B23 CD41                <1>     int 41h
   258 00000B25 F9                  <1>     stc
   259                              <1>     return
    19                              <2> %%_ret:
    20 00000B26 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   260                              <1> .noDriveSpecified:
   261                              <1> ;Now we set the two FCB's in the command line
   262 00000B27 F60574F5FFFFFF      <1>     test byte [arg1Flg], -1
   263 00000B2E 744D                <1>     jz .fcbArgsDone
   264 00000B30 0FB6056CF5FFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   265 00000B37 488D35FBF5FFFF      <1>     lea rsi, cmdBuffer
   266 00000B3E 4801C6              <1>     add rsi, rax    ;Point to first argument
   267 00000B41 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   268 00000B45 B801290000          <1>     mov eax, 2901h
   269 00000B4A CD41                <1>     int 41h
   270 00000B4C 880552F5FFFF        <1>     mov byte [arg1FCBret], al
   271 00000B52 F6054CF5FFFFFF      <1>     test byte [arg2Flg], -1
   272 00000B59 7422                <1>     jz .fcbArgsDone
   273 00000B5B 0FB60544F5FFFF      <1>     movzx eax, byte [arg2Off]
   274 00000B62 488D35D0F5FFFF      <1>     lea rsi, cmdBuffer
   275 00000B69 4801C6              <1>     add rsi, rax    ;Point to first argument
   276 00000B6C 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   277 00000B70 B801290000          <1>     mov eax, 2901h
   278 00000B75 CD41                <1>     int 41h
   279 00000B77 88052AF5FFFF        <1>     mov byte [arg2FCBret], al
   280                              <1> .fcbArgsDone:
   281 00000B7D 488D35B5F5FFFF      <1>     lea rsi, cmdBuffer
   282 00000B84 488D1D95F6FFFF      <1>     lea rbx, cmdName
   283 00000B8B B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   284 00000B90 BAFFFF0000          <1>     mov edx, 0FFFFh
   285 00000B95 B5FF                <1>     mov ch, -1
   286 00000B97 CD4F                <1>     int 4Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   287                              <1>             ;        al = 0  if the command should be executed as usual
   288 00000B99 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   289 00000B9E BAFFFF0000          <1>     mov edx, 0FFFFh
   290 00000BA3 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   291 00000BA5 CD4F                <1>     int 4Fh
   292 00000BA7 741D                <1>     jz .executeInternal
   293                              <1>     ;Here we execute externally and return to the prompt
   294                              <1>     ; as if it was an internal execution
   295 00000BA9 488D3509F5FFFF      <1>     lea rsi, inBuffer ;Point to this built buffer
   296 00000BB0 488D1DF1F4FFFF      <1>     lea rbx, cmdFcb
   297 00000BB7 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   298 00000BBC BAFFFF0000          <1>     mov edx, 0FFFFh
   299 00000BC1 B5FF                <1>     mov ch, -1
   300 00000BC3 CD4F                <1>     int 4Fh 
   301                              <1>     return
    19                              <2> %%_ret:
    20 00000BC5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   302                              <1> .executeInternal:
   303                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   304                              <1> ;rsi points after the command terminator in the command tail
   305 00000BC6 488D1D99F7FFFF      <1>     lea rbx, functionTable
   306                              <1> .nextEntry:
   307 00000BCD 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   308 00000BD0 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   309 00000BD3 743D                <1>     je .external      ;If so, check externally now
   310 00000BD5 380D45F6FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   311 00000BDB 7529                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   312                              <1>     ;Here they have the same length so lets see if the name is the same
   313 00000BDD 56                  <1>     push rsi
   314                              <1>     ;ecx has the length to compare
   315 00000BDE 51                  <1>     push rcx
   316 00000BDF 488D7301            <1>     lea rsi, qword [rbx + 1]
   317 00000BE3 488D3D37F6FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   318 00000BEA F3A6                <1>     rep cmpsb   ;Check the strings are equal
   319 00000BEC 59                  <1>     pop rcx
   320 00000BED 5E                  <1>     pop rsi
   321 00000BEE 7516                <1>     jne .gotoNextEntry
   322                              <1>     ;Here it was found both strings are equal
   323 00000BF0 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   324 00000BF5 480FB71F            <1>     movzx rbx, word [rdi]
   325 00000BF9 488D3D00F4FFFF      <1>     lea rdi, startLbl
   326 00000C00 4801FB              <1>     add rbx, rdi
   327 00000C03 FFD3                <1>     call rbx    ;Call this function...
   328                              <1>     return  ;... and return
    19                              <2> %%_ret:
    20 00000C05 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   329                              <1> .gotoNextEntry:
   330 00000C06 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   331 00000C0D 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   332 00000C10 EBBB                <1>     jmp short .nextEntry
   333                              <1> 
   334                              <1> .external:
   335                              <1> ;Here we must search the CWD or all path componants before failing
   336                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
   337 00000C12 E925000000          <1>     jmp .dfltErrExit    ;Catch all for now
   338 00000C17 8B0594F4FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   339 00000C1D 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   340 00000C22 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   341 00000C27 3D20202020          <1>     cmp eax, "    " ;Only if we have four spaces do we proceed here
   342 00000C2C 741A                <1>     je .noExt
   343 00000C2E E817000000          <1>     call checkExtensionExec ;ZF=ZE => Executable
   344 00000C33 7507                <1>     jnz .dfltErrExit
   345                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
   346 00000C35 7205                <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
   347                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
   348                              <1>     ;So it is a com or exe that we are searching for for now
   349                              <1>     
   350 00000C37 E900000000          <1>     jmp .dfltErrExit
   351                              <1> .dfltErrExit:
   352 00000C3C 488D1504F8FFFF      <1>     lea rdx, badCmd
   353 00000C43 B409                <1>     mov ah, 09h
   354 00000C45 CD41                <1>     int 41h
   355                              <1>     return
    19                              <2> %%_ret:
    20 00000C47 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   356                              <1> .noExt:
   357                              <1>     ;Here we must search for the first file with a valid extension.
   358                              <1>     ;Use bl as flags. bl[0] => COM found, bl[1] => EXE found, bl[2] => BAT found
   359 00000C48 31DB                <1>     xor ebx, ebx
   360                              <1>     ;If relative path, search CWD. If absolute path, search absolute path.
   361                              <1>     ;If nothing, only then loop through each dir in the path for provided
   362                              <1>     ; pathspec (relative case), or filename (absolute case)
   363                              <1> 
   364                              <1> 
   365                              <1> 
   366                              <1> checkExtensionExec:
   367                              <1> ;Checks the extension field of cmdFcb is .COM, .EXE, .BAT in that order
   368                              <1> ;Returns: ZF=ZE if executable. ZF=NZ if not executable.
   369                              <1> ;         If ZF=ZE and CF=CY => Batch file
   370 00000C4A 8B0561F4FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   371 00000C50 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   372 00000C55 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   373 00000C5A 3D434F4D20          <1>     cmp eax, "COM "
   374                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000C5F 74(47)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   375 00000C61 3D45584520          <1>     cmp eax, "EXE "
   376                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000C66 74(47)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   377 00000C68 3D42415420          <1>     cmp eax, "BAT "
   378                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000C6D 75(47)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   379 00000C6F F9                  <1>     stc
   380                              <1>     return
    19                              <2> %%_ret:
    20 00000C70 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   381                              <1> 
   382                              <1> checkAndSetupRedir:
   383                              <1> ;Checks and sets up redir as appropriate
   384                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   385                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   386                              <1> ;Output: ZF=NZ => No redir
   387                              <1> ;        ZF=ZY => Redir
   388                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   389                              <1> ;CF=CY if pipe set or an embedded CR found
   390 00000C71 57                  <1>     push rdi
   391 00000C72 3C3C                <1>     cmp al, "<"
   392 00000C74 740B                <1>     je .inputRedir
   393 00000C76 3C3E                <1>     cmp al, ">"
   394 00000C78 742A                <1>     je .outputRedir
   395 00000C7A 3C7C                <1>     cmp al, "|"
   396 00000C7C 7454                <1>     je .pipeSetup
   397 00000C7E F8                  <1>     clc
   398                              <1> .redirExit:
   399 00000C7F 5F                  <1>     pop rdi
   400                              <1>     return
    19                              <2> %%_ret:
    20 00000C80 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   401                              <1> .inputRedir:
   402 00000C81 C60518F4FFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   403 00000C88 488D3D9FF5FFFF      <1>     lea rdi, rdrInFilespec
   404 00000C8F E8360B0000          <1>     call skipSpaces ;Skip spaces between < and the filespec
   405 00000C94 E845000000          <1>     call copyCommandTailItem
   406 00000C99 72E4                <1>     jc .redirExit
   407 00000C9B E82A0B0000          <1>     call skipSpaces
   408 00000CA0 30C0                <1>     xor al, al
   409 00000CA2 EBDB                <1>     jmp short .redirExit
   410                              <1> .outputRedir:
   411 00000CA4 C605F6F3FFFF01      <1>     mov byte [redirOut], 1
   412 00000CAB 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   413 00000CAE 7506                <1>     jne .notDouble
   414 00000CB0 FE05EBF3FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   415                              <1> .notDouble:
   416 00000CB6 488D3DC0F5FFFF      <1>     lea rdi, rdrOutFilespec
   417 00000CBD E8080B0000          <1>     call skipSpaces
   418 00000CC2 E817000000          <1>     call copyCommandTailItem
   419 00000CC7 72B6                <1>     jc .redirExit
   420 00000CC9 E8FC0A0000          <1>     call skipSpaces
   421 00000CCE 30C0                <1>     xor al, al
   422 00000CD0 EBAD                <1>     jmp short .redirExit
   423                              <1> .pipeSetup:
   424 00000CD2 C605B7F3FFFFFF      <1>     mov byte [pipeFlag], -1
   425 00000CD9 30C0                <1>     xor al, al
   426 00000CDB F9                  <1>     stc
   427 00000CDC 5F                  <1>     pop rdi
   428                              <1>     return
    19                              <2> %%_ret:
    20 00000CDD C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   429                              <1> 
   430                              <1> copyCommandTailItem:
   431                              <1> ;Copies a sentence from the command tail until a terminator is found.
   432                              <1> ;Stores a terminating null in the destination
   433                              <1> ;Input: rsi = Start of the item to copy
   434                              <1> ;       rdi = Location for copy
   435                              <1> ;Output: Sentence copied with a null terminator inserted.
   436                              <1> ; If CF=CY, embedded CR encountered
   437 00000CDE AC                  <1>     lodsb
   438 00000CDF 3C0D                <1>     cmp al, CR
   439 00000CE1 741A                <1>     je .endOfInput
   440 00000CE3 E8AE0A0000          <1>     call isALterminator
   441 00000CE8 741A                <1>     jz .exit
   442 00000CEA 3A0533F3FFFF        <1>     cmp al, byte [pathSep]
   443 00000CF0 7412                <1>     je .exit
   444 00000CF2 3A052CF3FFFF        <1>     cmp al, byte [switchChar]
   445 00000CF8 740A                <1>     je .exit
   446 00000CFA AA                  <1>     stosb
   447 00000CFB EBE1                <1>     jmp short copyCommandTailItem
   448                              <1> .endOfInput:
   449 00000CFD E802000000          <1>     call .exit
   450 00000D02 F9                  <1>     stc 
   451                              <1>     return
    19                              <2> %%_ret:
    20 00000D03 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   452                              <1> .exit:
   453 00000D04 30C0                <1>     xor al, al
   454 00000D06 AA                  <1>     stosb
   455                              <1>     return
    19                              <2> %%_ret:
    20 00000D07 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   456                              <1> 
   457                              <1> 
   458                              <1> int4Eh:   ;Interrupt interface for parsing and executing command lines
   459                              <1> ;Input: rsi points to the count byte of a command line
   460 00000D08 4150                <1>     push r8
   461 00000D0A 4151                <1>     push r9
   462 00000D0C B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   463 00000D0E CD41                <1>     int 41h
   464 00000D10 52                  <1>     push rdx    ;Save on the stack
   465 00000D11 488D1DE8F1FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   466 00000D18 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   467 00000D1A CD41                <1>     int 41h
   468 00000D1C 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   469 00000D1F 4989D9              <1>     mov r9, rbx
   470 00000D22 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   471 00000D29 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   472 00000D2E F348A5              <1>     rep movsq   ;Copy command line over
   473                              <1>     ;call doCommandLine
   474 00000D31 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   475 00000D32 B450                <1>     mov ah, 50h ;Set Current PSP
   476 00000D34 CD41                <1>     int 41h
   477 00000D36 4159                <1>     pop r9
   478 00000D38 4158                <1>     pop r8
   479 00000D3A 48CF                <1>     iretq
    15                                  %include "./Source/Utils/COMMAND/Source/cmdFunc.asm"
    16                              <1> dir:
    17 00000D3C C60509F6FFFF00      <1>     mov byte [dirPrnType], 0    ;Clear DIR flags
    18 00000D43 C60503F6FFFF00      <1>     mov byte [dirLineCtr], 0
    19 00000D4A C605FDF5FFFF00      <1>     mov byte [dirFileCtr], 0
    20 00000D51 C605F7F5FFFF00      <1>     mov byte [dirPathOff], 0    
    21 00000D58 C605F1F5FFFFFF      <1>     mov byte [dirVolLbl], -1    ;Mark as no label
    22                              <1>     ;Start by scanning for the switches
    23 00000D5F 488D3DD4F3FFFF      <1>     lea rdi, cmdBuffer + 1  ;Goto command line input chars count
    24 00000D66 0FB60F              <1>     movzx ecx, byte [rdi]   ;Get number of chars typed
    25 00000D69 48FFC7              <1>     inc rdi ;Goto first char typed in
    26 00000D6C 4889FE              <1>     mov rsi, rdi    ;Use rsi as start of buffer counter
    27 00000D6F 8A05AFF2FFFF        <1>     mov al, byte [switchChar]   ;Scan for switchchars
    28                              <1> .switchScan:
    29 00000D75 F2AE                <1>     repne scasb ;Scan for a switchchar
    30 00000D77 67E322              <1>     jecxz .switchScanDone
    31 00000D7A 8A07                <1>     mov al, byte [rdi]  ;Get the byte pointed to by rdi
    32 00000D7C 24DF                <1>     and al, 0DFh    ;UC it
    33 00000D7E 3C57                <1>     cmp al, "W" ;Wide print mode?
    34 00000D80 7509                <1>     jne .notWideSw
    35 00000D82 800DC3F5FFFF01      <1>     or byte [dirPrnType], 1 ;Set the correct bit
    36 00000D89 EBEA                <1>     jmp short .switchScan
    37                              <1> .notWideSw:
    38 00000D8B 3C50                <1>     cmp al, "P" ;Pause mode?
    39 00000D8D 0F858D030000        <1>     jne .badParam   ;If a switch other than /P or /W, fail
    40 00000D93 800DB2F5FFFF02      <1>     or byte [dirPrnType], 2 ;Set correct bit
    41 00000D9A EBD9                <1>     jmp short .switchScan
    42                              <1> .switchScanDone:
    43                              <1> ;If no args, only switches, we search CWD
    44                              <1> ;If one arg, search that 
    45                              <1> ;If more than one, fail
    46 00000D9C 488D3D98F3FFFF      <1>     lea rdi, cmdBuffer + 2
    47 00000DA3 4889FE              <1>     mov rsi, rdi
    48 00000DA6 E81F0A0000          <1>     call skipSpaces ;Skip leading spaces
    49 00000DAB 4881C603000000      <1>     add rsi, 3  ;Go past the DIR (always three chars)
    50 00000DB2 803E0D              <1>     cmp byte [rsi], CR
    51 00000DB5 7436                <1>     je .eocReached
    52                              <1> .pathSearch:
    53 00000DB7 E80E0A0000          <1>     call skipSpaces ;Now skip intermediate spaces to next non-space
    54 00000DBC 8A0562F2FFFF        <1>     mov al, byte [switchChar]   ;Is this a switch?
    55 00000DC2 3806                <1>     cmp byte [rsi], al
    56 00000DC4 741B                <1>     je .pathSearchSwitch    ;If a switch, skip it, find switch terminator
    57 00000DC6 803D82F5FFFF00      <1>     cmp byte [dirPathOff], 0    ;Did we previously get an argument?
    58 00000DCD 0F854D030000        <1>     jne .badParam ;If so, error
    59 00000DD3 4889F0              <1>     mov rax, rsi    ;Else, compute the offset in the cmdBuffer
    60 00000DD6 4829F8              <1>     sub rax, rdi    ;Offset from the cmdBuffer + 2
    61 00000DD9 0402                <1>     add al, 2       ;Make it an offset from cmdBuffer
    62 00000DDB 88056EF5FFFF        <1>     mov byte [dirPathOff], al   ;And save it!
    63                              <1> .pathSearchSwitch:
    64 00000DE1 E87B090000          <1>     call findTerminatorOrEOC
    65 00000DE6 7205                <1>     jc .eocReached
    66 00000DE8 48FFC6              <1>     inc rsi ;Go to next char
    67 00000DEB EBCA                <1>     jmp short .pathSearch
    68                              <1> .eocReached:
    69 00000DED 803D5BF5FFFF00      <1>     cmp byte [dirPathOff], 0
    70 00000DF4 7405                <1>     je .dirCWD
    71 00000DF6 E925030000          <1>     jmp .badParam   ;Temp measure
    72                              <1> .dirCWD:
    73                              <1>     ;Build current working dir and append a \*.* to it 
    74                              <1>     ;First we search the root for a label
    75 00000DFB 488D3D5BF5FFFF      <1>     lea rdi, dirVolPathBuf
    76 00000E02 488D35C3F4FFFF      <1>     lea rsi, searchSpec ;Will need to create the same X:\ here too
    77 00000E09 E83F090000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
    78 00000E0E 880551F5FFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
    79 00000E14 0441                <1>     add al, "A"
    80 00000E16 B43A                <1>     mov ah, ":" ;ax has X: now to store 
    81 00000E18 66AB                <1>     stosw
    82 00000E1A 668906              <1>     mov word [rsi], ax
    83 00000E1D 4881C602000000      <1>     add rsi, 2
    84 00000E24 8A05F9F1FFFF        <1>     mov al, byte [pathSep]
    85 00000E2A AA                  <1>     stosb
    86 00000E2B 8806                <1>     mov byte [rsi], al
    87 00000E2D B82A2E2A00          <1>     mov eax, 002A2E2Ah  ;*.*,0
    88 00000E32 AB                  <1>     stosd
    89 00000E33 B42F                <1>     mov ah, 2Fh ;Get current DTA in rbx
    90 00000E35 CD41                <1>     int 41h 
    91 00000E37 53                  <1>     push rbx    ;Preserve it on the stack
    92 00000E38 488D1579F2FFFF      <1>     lea rdx, cmdFFBlock
    93 00000E3F B41A                <1>     mov ah, 1Ah ;Set DTA to internal ffblock
    94 00000E41 CD41                <1>     int 41h
    95 00000E43 488D1513F5FFFF      <1>     lea rdx, dirVolPathBuf
    96 00000E4A 66B90800            <1>     mov cx, dirVolumeID
    97 00000E4E B44E                <1>     mov ah, 4Eh ;Find first
    98 00000E50 CD41                <1>     int 41h
    99 00000E52 7221                <1>     jc .skipVolLbl
   100 00000E54 488D357BF2FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   101 00000E5B 488D3DEEF4FFFF      <1>     lea rdi, dirVolLbl
   102 00000E62 B90B000000          <1>     mov ecx, 11 ;Get the 11 chars of the volume label
   103                              <1> .dirLblCopy:
   104 00000E67 AC                  <1>     lodsb   ;Get the first char
   105 00000E68 3C00                <1>     cmp al, 0
   106 00000E6A 7409                <1>     je .skipVolLbl
   107 00000E6C 3C2E                <1>     cmp al, "."
   108 00000E6E 7401                <1>     je .dirLblSkipStore
   109 00000E70 AA                  <1>     stosb
   110                              <1> .dirLblSkipStore:
   111 00000E71 FFC9                <1>     dec ecx
   112 00000E73 75F2                <1>     jnz .dirLblCopy
   113                              <1> .skipVolLbl:
   114                              <1> ;Print volume label information now
   115 00000E75 E8F7000000          <1>     call .dirPrintVolInfo
   116 00000E7A 488D3D4EF4FFFF      <1>     lea rdi, searchSpec + 3 ;Go to the fourth char in the field
   117 00000E81 B447                <1>     mov ah, 47h ;Get Current Working Directory
   118 00000E83 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   119 00000E86 8A1540F4FFFF        <1>     mov dl, byte [searchSpec]
   120 00000E8C 80EA40              <1>     sub dl, "@" ;Get 1 based drive letter
   121 00000E8F CD41                <1>     int 41h ;Overrwrite it with the current directory
   122 00000E91 488D3D34F4FFFF      <1>     lea rdi, searchSpec
   123 00000E98 E8B5080000          <1>     call strlen
   124 00000E9D FFC9                <1>     dec ecx
   125 00000E9F C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   126 00000EA3 488D152CF8FFFF      <1>     lea rdx, dirMain
   127 00000EAA B409                <1>     mov ah, 09h
   128 00000EAC CD41                <1>     int 41h
   129 00000EAE 4889FA              <1>     mov rdx, rdi    ;Print the current directory we are working on
   130 00000EB1 B409                <1>     mov ah, 09h
   131 00000EB3 CD41                <1>     int 41h
   132 00000EB5 488D1533F5FFFF      <1>     lea rdx, crlf
   133 00000EBC B409                <1>     mov ah, 09h
   134 00000EBE CD41                <1>     int 41h
   135 00000EC0 488D1528F5FFFF      <1>     lea rdx, crlf   ;Add an extra free line
   136 00000EC7 B409                <1>     mov ah, 09h
   137 00000EC9 CD41                <1>     int 41h
   138                              <1>     ;Now we search for the files
   139 00000ECB 8A0552F1FFFF        <1>     mov al, byte [pathSep]
   140 00000ED1 38440FFF            <1>     cmp byte [rdi + rcx - 1], al
   141 00000ED5 7405                <1>     je .noAddSlash  ;Deals with special case of root dir
   142 00000ED7 88040F              <1>     mov byte [rdi + rcx], al
   143 00000EDA FFC1                <1>     inc ecx
   144                              <1> .noAddSlash:
   145 00000EDC C7040F2A2E2A00      <1>     mov dword [rdi + rcx], 002A2E2Ah ;and add a *.*,0
   146 00000EE3 4889FA              <1>     mov rdx, rdi    ;Ptr to search for in rdx
   147 00000EE6 B911000000          <1>     mov ecx, dirReadOnly | dirDirectory
   148 00000EEB B44E                <1>     mov ah, 4Eh ;Find first
   149 00000EED CD41                <1>     int 41h
   150 00000EEF 720B                <1>     jc .dirNoMoreFiles
   151                              <1> .findNext:
   152 00000EF1 E8EF000000          <1>     call .dirPrintFileData  ;Print the file information
   153 00000EF6 B44F                <1>     mov ah, 4Fh
   154 00000EF8 CD41                <1>     int 41h
   155 00000EFA 73F5                <1>     jnc .findNext 
   156                              <1> .dirNoMoreFiles:
   157 00000EFC 5A                  <1>     pop rdx 
   158 00000EFD B41A                <1>     mov ah, 1Ah ;Return back the original DTA
   159 00000EFF CD41                <1>     int 41h
   160 00000F01 F60544F4FFFF01      <1>     test byte [dirPrnType], 1
   161 00000F08 740B                <1>     jz .dirNoEndNewLine
   162 00000F0A 488D15DEF4FFFF      <1>     lea rdx, crlf   ;Only need this for /W
   163 00000F11 B409                <1>     mov ah, 09h
   164 00000F13 CD41                <1>     int 41h
   165                              <1> .dirNoEndNewLine:
   166                              <1>     ;Now we print the number of files and the number of bytes on the disk
   167 00000F15 B908000000          <1>     mov ecx, 8  ;Print 8 spaces
   168 00000F1A B220                <1>     mov dl, " "
   169                              <1> .dirNumOffSpc:
   170 00000F1C B402                <1>     mov ah, 02h
   171 00000F1E CD41                <1>     int 41h
   172 00000F20 FFC9                <1>     dec ecx
   173 00000F22 75F8                <1>     jnz .dirNumOffSpc
   174 00000F24 0FB60523F4FFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   175 00000F2B E84B0A0000          <1>     call printDecimalWord
   176 00000F30 488D15FEF5FFFF      <1>     lea rdx, dirOk
   177 00000F37 B409                <1>     mov ah, 09h
   178 00000F39 CD41                <1>     int 41h
   179 00000F3B 488D15EBF8FFFF      <1>     lea rdx, threeSpc
   180 00000F42 B409                <1>     mov ah, 09h
   181 00000F44 CD41                <1>     int 41h
   182 00000F46 B800360000          <1>     mov eax, 3600h ;Get disk info
   183 00000F4B 8A1514F4FFFF        <1>     mov dl, byte [dirDrv]
   184 00000F51 CD41                <1>     int 41h ;Get disk free space info
   185 00000F53 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   186 00000F56 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   187 00000F59 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   188 00000F5B F7E1                <1>     mul ecx ;Get bytes per cluster
   189 00000F5D 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   190                              <1>     ;rax now has the number of free bytes on the disk
   191 00000F60 E8160A0000          <1>     call printDecimalWord
   192 00000F65 488D15D3F5FFFF      <1>     lea rdx, bytesOk
   193 00000F6C B409                <1>     mov ah, 09h
   194 00000F6E CD41                <1>     int 41h
   195                              <1>     return
    19                              <2> %%_ret:
    20 00000F70 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   196                              <1> 
   197                              <1> .dirPrintVolInfo:
   198 00000F71 488D1577F4FFFF      <1>     lea rdx, crlf
   199 00000F78 B409                <1>     mov ah, 09h
   200 00000F7A CD41                <1>     int 41h
   201 00000F7C 488D15C6F6FFFF      <1>     lea rdx, volMes
   202 00000F83 B409                <1>     mov ah, 09h
   203 00000F85 CD41                <1>     int 41h
   204 00000F87 8A15D0F3FFFF        <1>     mov dl, byte [dirVolPathBuf]   ;Print the drive letter out
   205 00000F8D B402                <1>     mov ah, 02h
   206 00000F8F CD41                <1>     int 41h
   207 00000F91 803DB7F3FFFFFF      <1>     cmp byte [dirPathOff], -1   ;No volume ID marker
   208 00000F98 7517                <1>     jne .dirVolIDOk
   209 00000F9A 488D15BFF6FFFF      <1>     lea rdx, volNo
   210 00000FA1 B409                <1>     mov ah, 09h
   211 00000FA3 CD41                <1>     int 41h
   212 00000FA5 488D1543F4FFFF      <1>     lea rdx, crlf
   213 00000FAC B409                <1>     mov ah, 09h
   214 00000FAE CD41                <1>     int 41h
   215                              <1>     return
    19                              <2> %%_ret:
    20 00000FB0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   216                              <1> .dirVolIDOk:
   217 00000FB1 488D15A3F6FFFF      <1>     lea rdx, volOk
   218 00000FB8 B409                <1>     mov ah, 09h
   219 00000FBA CD41                <1>     int 41h
   220 00000FBC 488D3D8DF3FFFF      <1>     lea rdi, dirVolLbl
   221 00000FC3 E88A070000          <1>     call strlen
   222 00000FC8 FFC9                <1>     dec ecx
   223 00000FCA C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   224 00000FCE 488D157BF3FFFF      <1>     lea rdx, dirVolLbl
   225 00000FD5 B409                <1>     mov ah, 09h
   226 00000FD7 CD41                <1>     int 41h
   227 00000FD9 488D150FF4FFFF      <1>     lea rdx, crlf
   228 00000FE0 B409                <1>     mov ah, 09h
   229 00000FE2 CD41                <1>     int 41h
   230                              <1>     return
    19                              <2> %%_ret:
    20 00000FE4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   231                              <1> 
   232                              <1> .dirPrintFileData:
   233                              <1> ;Use fcbCmdSpec to build the file name with space
   234                              <1> ;Start by print the name (same for both cases)
   235 00000FE5 488D35EAF0FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   236 00000FEC 488D3D15F2FFFF      <1>     lea rdi, fcbCmdSpec
   237 00000FF3 E82B080000          <1>     call asciiFilenameToFCB
   238 00000FF8 488D1509F2FFFF      <1>     lea rdx, fcbCmdSpec
   239 00000FFF B908000000          <1>     mov ecx, 8  ;Print 8 chars
   240 00001004 BB01000000          <1>     mov ebx, 1  ;STDOUT
   241 00001009 B440                <1>     mov ah, 40h ;Write handle
   242 0000100B CD41                <1>     int 41h
   243 0000100D 52                  <1>     push rdx
   244 0000100E B220                <1>     mov dl, " "
   245 00001010 B402                <1>     mov ah, 02h ;Print char
   246 00001012 CD41                <1>     int 41h
   247 00001014 5A                  <1>     pop rdx
   248 00001015 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   249 0000101C B903000000          <1>     mov ecx, 3  ;Print three chars
   250 00001021 BB01000000          <1>     mov ebx, 1  ;STDOUT
   251 00001026 B440                <1>     mov ah, 40h ;Write handle
   252 00001028 CD41                <1>     int 41h
   253 0000102A F6051BF3FFFF01      <1>     test byte [dirPrnType], 1
   254 00001031 0F85A6000000        <1>     jnz .widePrint
   255                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   256                              <1>     ;Now check if a DIR
   257 00001037 F6058FF0FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   258 0000103E 7418                <1>     jz .dirPrintNotDir
   259 00001040 488D1506F5FFFF      <1>     lea rdx, dirLbl
   260 00001047 B409                <1>     mov ah, 09h
   261 00001049 CD41                <1>     int 41h
   262 0000104B 488D15DBF7FFFF      <1>     lea rdx, threeSpc
   263 00001052 B409                <1>     mov ah, 09h
   264 00001054 CD41                <1>     int 41h
   265 00001056 EB4F                <1>     jmp short .dirPrintFileDT
   266                              <1> .dirPrintNotDir:
   267                              <1> ;Here we print the file size
   268 00001058 B220                <1>     mov dl, " "
   269 0000105A B402                <1>     mov ah, 02h
   270 0000105C CD41                <1>     int 41h
   271 0000105E 8B056EF0FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   272 00001064 E883090000          <1>     call getDecimalWord
   273 00001069 4889CB              <1>     mov rbx, rcx
   274 0000106C 51                  <1>     push rcx
   275 0000106D 480FCB              <1>     bswap rbx
   276 00001070 B908000000          <1>     mov ecx, 8
   277                              <1> .dirPrintFileSizePrep:
   278 00001075 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   279 00001077 7514                <1>     jne .dirPrintFileSize
   280 00001079 B402                <1>     mov ah, 02h
   281 0000107B B220                <1>     mov dl, " "
   282 0000107D CD41                <1>     int 41h
   283 0000107F 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   284 00001083 FFC9                <1>     dec ecx
   285 00001085 81F901000000        <1>     cmp ecx, 1
   286 0000108B 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   287                              <1> .dirPrintFileSize:
   288 0000108D 5B                  <1>     pop rbx
   289                              <1> .dirPrintFileSizeLoop:
   290 0000108E 88DA                <1>     mov dl, bl
   291 00001090 B402                <1>     mov ah, 02h
   292 00001092 CD41                <1>     int 41h
   293 00001094 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   294 00001098 FFC9                <1>     dec ecx
   295 0000109A 75F2                <1>     jnz .dirPrintFileSizeLoop
   296 0000109C 488D158EF7FFFF      <1>     lea rdx, twoSpc
   297 000010A3 B409                <1>     mov ah, 09h
   298 000010A5 CD41                <1>     int 41h
   299                              <1> .dirPrintFileDT:
   300 000010A7 B220                <1>     mov dl, " "
   301 000010A9 B402                <1>     mov ah, 02h
   302 000010AB CD41                <1>     int 41h
   303 000010AD 0FB7051CF0FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   304 000010B4 E800040000          <1>     call printDate
   305 000010B9 488D1571F7FFFF      <1>     lea rdx, twoSpc
   306 000010C0 B409                <1>     mov ah, 09h
   307 000010C2 CD41                <1>     int 41h
   308 000010C4 0FB70503F0FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   309 000010CB E8F5040000          <1>     call printTime
   310 000010D0 488D1518F3FFFF      <1>     lea rdx, crlf
   311 000010D7 B409                <1>     mov ah, 09h
   312 000010D9 CD41                <1>     int 41h
   313 000010DB EB0B                <1>     jmp short .dirPrintNameExit
   314                              <1> .widePrint:
   315                              <1> ;If /W, print name space ext space space space space
   316 000010DD 488D1544F7FFFF      <1>     lea rdx, fourSpc
   317 000010E4 B409                <1>     mov ah, 09h ;Print string
   318 000010E6 CD41                <1>     int 41h
   319                              <1> .dirPrintNameExit:
   320 000010E8 FE0560F2FFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   321 000010EE FE0559F2FFFF        <1>     inc byte [dirLineCtr]
   322 000010F4 803D52F2FFFF17      <1>     cmp byte [dirLineCtr], 23
   323                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 000010FB 7401                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 000010FD C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   324 000010FE 488D156FF4FFFF      <1>     lea rdx, pauseMes
   325 00001105 B409                <1>     mov ah, 09h
   326 00001107 CD41                <1>     int 41h
   327 00001109 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   328 0000110B CD41                <1>     int 41h
   329 0000110D C60539F2FFFF00      <1>     mov byte [dirLineCtr], 0
   330 00001114 488D15D4F2FFFF      <1>     lea rdx, crlf   ;Force new line
   331 0000111B B409                <1>     mov ah, 09h
   332 0000111D CD41                <1>     int 41h
   333                              <1>     return
    19                              <2> %%_ret:
    20 0000111F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   334                              <1>     
   335                              <1> .badParam:
   336 00001120 488D156CF4FFFF      <1>     lea rdx, badParm
   337 00001127 B409                <1>     mov ah, 09h
   338 00001129 CD41                <1>     int 41h
   339                              <1>     return
    19                              <2> %%_ret:
    20 0000112B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   340                              <1> 
   341                              <1> chdir:
   342 0000112C F6056FEFFFFFFF      <1>     test byte [arg1Flg], -1
   343 00001133 754D                <1>     jnz .changeDir
   344                              <1>     ;Print CWD
   345                              <1> .printCWD:
   346 00001135 E86C050000          <1>     call putCWDInPrompt ;Exactly the same procedure
   347 0000113A E864030000          <1>     call printCRLF
   348                              <1>     return
    19                              <2> %%_ret:
    20 0000113F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   349                              <1> .printDiskCWD:
   350                              <1> ;Print CWD for a specified drive
   351 00001140 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   352 00001144 88D0                <1>     mov al, dl
   353 00001146 0440                <1>     add al, "@" ;Get the UC letter
   354 00001148 B43A                <1>     mov ah, ":"
   355 0000114A 488D3D7BF1FFFF      <1>     lea rdi, searchSpec
   356 00001151 66AB                <1>     stosw   ;Store X:, rdi+=2
   357 00001153 8A05CAEEFFFF        <1>     mov al, byte [pathSep]
   358 00001159 AA                  <1>     stosb   ;Store pathSep, inc rdi
   359 0000115A B447                <1>     mov ah, 47h ;Get Current Working Directory
   360 0000115C 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   361 0000115F CD41                <1>     int 41h
   362 00001161 E8EC050000          <1>     call strlen
   363 00001166 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   364 0000116C B440                <1>     mov ah, 40h ;Write to handle
   365 0000116E BB01000000          <1>     mov ebx, 1  ;STDOUT
   366 00001173 488D1552F1FFFF      <1>     lea rdx, searchSpec
   367 0000117A CD41                <1>     int 41h
   368 0000117C E822030000          <1>     call printCRLF
   369                              <1>     return
    19                              <2> %%_ret:
    20 00001181 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   370                              <1> .changeDir:
   371 00001182 8A051CEFFFFF        <1>     mov al, byte [arg1FCBret]
   372 00001188 3CFF                <1>     cmp al, -1 
   373 0000118A 743C                <1>     je .badDrv  ;IF the drive is good, but FCB name blank, either X: or \ 
   374 0000118C 4180785D20          <1>     cmp byte [r8 + fcb1 + fcb.filename], " "
   375 00001191 7520                <1>     jne .getFQPath
   376                              <1>     ;Now we double check that on the command line we have . or ..
   377 00001193 0FB60509EFFFFF      <1>     movzx eax, byte [arg1Off]
   378 0000119A 488D3598EFFFFF      <1>     lea rsi, cmdBuffer
   379 000011A1 4801C6              <1>     add rsi, rax
   380 000011A4 8A0579EEFFFF        <1>     mov al, byte [pathSep]
   381 000011AA 3806                <1>     cmp byte [rsi], al  ;Is the first char a pathsep?
   382 000011AC 7405                <1>     je .getFQPath
   383 000011AE 803E2E              <1>     cmp byte [rsi], "."
   384 000011B1 758D                <1>     jne .printDiskCWD
   385                              <1>     ;If the path is . or .., its acceptable, else fail
   386                              <1> .getFQPath:
   387 000011B3 E8F5060000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   388 000011B8 721D                <1>     jc .badDir  ;If this returns CF=CY, its a badDir
   389 000011BA 488D150BF1FFFF      <1>     lea rdx, searchSpec
   390 000011C1 B43B                <1>     mov ah, 3Bh ;CHDIR
   391 000011C3 CD41                <1>     int 41h
   392 000011C5 7210                <1>     jc .badDir
   393                              <1>     return
    19                              <2> %%_ret:
    20 000011C7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   394                              <1> 
   395                              <1> .badDrv:
   396 000011C8 488D1587F3FFFF      <1>     lea rdx, badDrv
   397 000011CF B800090000          <1>     mov eax, 0900h
   398 000011D4 CD41                <1>     int 41h
   399                              <1>     return
    19                              <2> %%_ret:
    20 000011D6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   400                              <1> .badDir:
   401 000011D7 488D1590F4FFFF      <1>     lea rdx, badDir
   402 000011DE B800090000          <1>     mov eax, 0900h
   403 000011E3 CD41                <1>     int 41h
   404                              <1>     return
    19                              <2> %%_ret:
    20 000011E5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   405                              <1> 
   406                              <1> 
   407                              <1> mkdir:
   408 000011E6 F605B5EEFFFFFF      <1>     test byte [arg1Flg], -1
   409 000011ED 744D                <1>     jz .badParams
   410 000011EF F605AFEEFFFFFF      <1>     test byte [arg2Flg], -1
   411 000011F6 7544                <1>     jnz .badParams
   412                              <1>     ;We have exactly one argument
   413 000011F8 8A05A6EEFFFF        <1>     mov al, byte [arg1FCBret]
   414 000011FE 3CFF                <1>     cmp al, -1 
   415 00001200 742B                <1>     je .badDrv  ;If a drive was specified and was bad, jump
   416 00001202 E8A6060000          <1>     call buildCommandPath
   417 00001207 7215                <1>     jc .badMake
   418 00001209 488D15BCF0FFFF      <1>     lea rdx, searchSpec
   419 00001210 B800390000          <1>     mov eax, 3900h  ;MKDIR
   420 00001215 CD41                <1>     int 41h
   421 00001217 7205                <1>     jc .badMake   ;Return if not carry
   422 00001219 B40D                <1>     mov ah, 0Dh
   423 0000121B CD41                <1>     int 41h ;Flush to disk
   424                              <1>     return
    19                              <2> %%_ret:
    20 0000121D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   425                              <1> .badMake:   ;Else, bad make
   426 0000121E 488D155DF4FFFF      <1>     lea rdx, badMD
   427 00001225 B800090000          <1>     mov eax, 0900h
   428 0000122A CD41                <1>     int 41h
   429                              <1>     return
    19                              <2> %%_ret:
    20 0000122C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   430                              <1> .badDrv:
   431 0000122D 488D1522F3FFFF      <1>     lea rdx, badDrv
   432 00001234 B800090000          <1>     mov eax, 0900h
   433 00001239 CD41                <1>     int 41h
   434                              <1>     return
    19                              <2> %%_ret:
    20 0000123B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   435                              <1> .badParams:
   436 0000123C 488D15A7F5FFFF      <1>     lea rdx, badArgs
   437 00001243 B800090000          <1>     mov eax, 0900h
   438 00001248 CD41                <1>     int 41h
   439                              <1>     return
    19                              <2> %%_ret:
    20 0000124A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   440                              <1> 
   441                              <1> rmdir:
   442 0000124B F60550EEFFFFFF      <1>     test byte [arg1Flg], -1
   443 00001252 744D                <1>     jz .badParams
   444 00001254 F6054AEEFFFFFF      <1>     test byte [arg2Flg], -1
   445 0000125B 7544                <1>     jnz .badParams
   446                              <1>     ;We have exactly one argument
   447 0000125D 8A0541EEFFFF        <1>     mov al, byte [arg1FCBret]
   448 00001263 3CFF                <1>     cmp al, -1 
   449 00001265 742B                <1>     je .badDrv  ;If a drive was specified and was bad, jump
   450 00001267 E841060000          <1>     call buildCommandPath
   451 0000126C 7215                <1>     jc .badRemove
   452 0000126E 488D1557F0FFFF      <1>     lea rdx, searchSpec
   453 00001275 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   454 0000127A CD41                <1>     int 41h
   455 0000127C 7205                <1>     jc .badRemove   ;Return if not carry
   456 0000127E B40D                <1>     mov ah, 0Dh
   457 00001280 CD41                <1>     int 41h ;Flush to disk
   458                              <1>     return
    19                              <2> %%_ret:
    20 00001282 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   459                              <1> .badRemove:   ;Else, bad make
   460 00001283 488D1515F4FFFF      <1>     lea rdx, badRD
   461 0000128A B800090000          <1>     mov eax, 0900h
   462 0000128F CD41                <1>     int 41h
   463                              <1>     return
    19                              <2> %%_ret:
    20 00001291 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   464                              <1> .badDrv:
   465 00001292 488D15BDF2FFFF      <1>     lea rdx, badDrv
   466 00001299 B800090000          <1>     mov eax, 0900h
   467 0000129E CD41                <1>     int 41h
   468                              <1>     return
    19                              <2> %%_ret:
    20 000012A0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   469                              <1> .badParams:
   470 000012A1 488D1542F5FFFF      <1>     lea rdx, badArgs
   471 000012A8 B800090000          <1>     mov eax, 0900h
   472 000012AD CD41                <1>     int 41h
   473                              <1>     return
    19                              <2> %%_ret:
    20 000012AF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   474                              <1> copy:
   475                              <1>     return
    19                              <2> %%_ret:
    20 000012B0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   476                              <1> erase:
   477                              <1>     return
    19                              <2> %%_ret:
    20 000012B1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   478                              <1> date:
   479                              <1>     return
    19                              <2> %%_ret:
    20 000012B2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   480                              <1> time:
   481                              <1>     return
    19                              <2> %%_ret:
    20 000012B3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   482                              <1> ctty:
   483                              <1>     return
    19                              <2> %%_ret:
    20 000012B4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   484                              <1> cls:  
   485 000012B5 B800440000          <1>     mov eax, 4400h  ;Get device info
   486 000012BA BB01000000          <1>     mov ebx, 1      ;for handle 1
   487 000012BF CD41                <1>     int 41h         ;in dx
   488 000012C1 F7C280000000        <1>     test edx, devCharDev
   489 000012C7 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   490 000012C9 F7C210000000        <1>     test edx, charDevFastOut
   491 000012CF 743E                <1>     jz .doAnsi
   492                              <1>     ;Test if Int 49h uses Int 30h
   493                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   494                              <1>     ;Int 49h MUST be terminated with a IRETQ, within 1024 bytes
   495 000012D1 B849350000          <1>     mov eax, 3549h  ;Get the vector for interrupt 49h
   496 000012D6 CD41                <1>     int 41h
   497                              <1> .biosCheck:
   498 000012D8 66813BCD30          <1>     cmp word [rbx], 30CDh
   499 000012DD 740C                <1>     je .biosConfirmed
   500 000012DF 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   501 000012E4 7429                <1>     je .doAnsi
   502 000012E6 48FFC3              <1>     inc rbx
   503 000012E9 EBED                <1>     jmp short .biosCheck
   504                              <1> .biosConfirmed:
   505                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   506 000012EB B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   507 000012ED 31DB                <1>     xor ebx, ebx
   508 000012EF CD30                <1>     int 30h
   509 000012F1 B40F                <1>     mov ah, 0Fh ;Get screen mode
   510 000012F3 CD30                <1>     int 30h
   511 000012F5 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   512 000012F8 FECA                <1>     dec dl
   513 000012FA B619                <1>     mov dh, 25  ;Number of rows is standard
   514 000012FC 31C0                <1>     xor eax, eax
   515 000012FE 89C1                <1>     mov ecx, eax
   516 00001300 B707                <1>     mov bh, 7   ;Screen attributes
   517 00001302 B406                <1>     mov ah, 6   ;Scroll
   518 00001304 CD30                <1>     int 30h
   519 00001306 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   520 00001308 B700                <1>     mov bh, 0   ;Page 0
   521 0000130A B402                <1>     mov ah, 2
   522 0000130C CD30                <1>     int 30h
   523                              <1>     return
    19                              <2> %%_ret:
    20 0000130E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   524                              <1> .doAnsi:
   525                              <1> ;If an ANSI driver is not installed, this will simply insert blank lines
   526                              <1> ;4 chars in the ansi routine
   527                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   528                              <1> ; understand ANSI codes
   529 0000130F 488D350EF5FFFF      <1>     lea rsi, ansiCls
   530 00001316 B904000000          <1>     mov ecx, 4
   531 0000131B B406                <1>     mov ah, 06h ;Raw char output
   532                              <1> .ansiLp:
   533 0000131D AC                  <1>     lodsb   ;Get the char in 
   534 0000131E 88C2                <1>     mov dl, al
   535 00001320 CD41                <1>     int 41h
   536 00001322 FFC9                <1>     dec ecx
   537 00001324 75F7                <1>     jnz .ansiLp
   538                              <1>     return
    19                              <2> %%_ret:
    20 00001326 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   539                              <1> 
   540                              <1> break:
   541 00001327 F60574EDFFFFFF      <1>     test byte [arg1Flg], -1
   542 0000132E 752D                <1>     jnz .argumentProvided
   543                              <1>     ;Here we just get the status of break
   544 00001330 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   545 00001335 CD41                <1>     int 41h
   546 00001337 88D3                <1>     mov bl, dl
   547 00001339 488D1570F4FFFF      <1>     lea rdx, breakIs
   548 00001340 B409                <1>     mov ah, 09h
   549 00001342 CD41                <1>     int 41h
   550 00001344 488D1560F4FFFF      <1>     lea rdx, onMes
   551 0000134B 488D0D53F4FFFF      <1>     lea rcx, offMes
   552 00001352 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   553 00001354 480F44D1            <1>     cmovz rdx, rcx
   554 00001358 B409                <1>     mov ah, 09h
   555 0000135A CD41                <1>     int 41h
   556                              <1>     return
    19                              <2> %%_ret:
    20 0000135C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   557                              <1> .argumentProvided:
   558 0000135D 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   559 00001361 AD                  <1>     lodsd   ;Read the word
   560 00001362 89C3                <1>     mov ebx, eax
   561 00001364 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   562 00001369 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   563 0000136C 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   564 00001371 7416                <1>     je .maybeOn
   565 00001373 663D4F46            <1>     cmp ax, "OF"
   566 00001377 7523                <1>     jne .badArgument
   567 00001379 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   568 0000137E 6681FB4620          <1>     cmp bx, "F "
   569 00001383 7517                <1>     jne .badArgument
   570                              <1>     ;Set off
   571 00001385 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   572 00001387 EB0B                <1>     jmp short .setBreak
   573                              <1> .maybeOn:
   574 00001389 663D4F4E            <1>     cmp ax, "ON"
   575 0000138D 750D                <1>     jne .badArgument
   576                              <1>     ;Set on
   577 0000138F BA01000000          <1>     mov edx, 1
   578                              <1> .setBreak:
   579 00001394 B801330000          <1>     mov eax, 3301h  ;Set break
   580 00001399 CD41                <1>     int 41h
   581                              <1>     return
    19                              <2> %%_ret:
    20 0000139B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   582                              <1> .badArgument:
   583 0000139C 488D1591F4FFFF      <1>     lea rdx, badOnOff
   584 000013A3 B409                <1>     mov ah, 09h
   585 000013A5 CD41                <1>     int 41h
   586                              <1>     return
    19                              <2> %%_ret:
    20 000013A7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   587                              <1> 
   588                              <1> verify:
   589 000013A8 F605F3ECFFFFFF      <1>     test byte [arg1Flg], -1
   590 000013AF 752D                <1>     jnz .argumentProvided
   591                              <1>     ;Here we just get the status of break
   592 000013B1 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
   593 000013B6 CD41                <1>     int 41h
   594 000013B8 88C3                <1>     mov bl, al
   595 000013BA 488D15F9F3FFFF      <1>     lea rdx, verifyIs
   596 000013C1 B409                <1>     mov ah, 09h
   597 000013C3 CD41                <1>     int 41h
   598 000013C5 488D15DFF3FFFF      <1>     lea rdx, onMes
   599 000013CC 488D0DD2F3FFFF      <1>     lea rcx, offMes
   600 000013D3 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   601 000013D5 480F44D1            <1>     cmovz rdx, rcx
   602 000013D9 B409                <1>     mov ah, 09h
   603 000013DB CD41                <1>     int 41h
   604                              <1>     return
    19                              <2> %%_ret:
    20 000013DD C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   605                              <1> .argumentProvided:
   606 000013DE 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   607 000013E2 AD                  <1>     lodsd   ;Read the word
   608 000013E3 89C3                <1>     mov ebx, eax
   609 000013E5 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   610 000013EA C1EB10              <1>     shr ebx, 10h     ;Get high word low
   611 000013ED 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   612 000013F2 7416                <1>     je .maybeOn
   613 000013F4 663D4F46            <1>     cmp ax, "OF"
   614 000013F8 751F                <1>     jne .badArgument
   615 000013FA 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   616 000013FF 6681FB4620          <1>     cmp bx, "F "
   617 00001404 7513                <1>     jne .badArgument
   618                              <1>     ;Set off
   619 00001406 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
   620 00001408 EB0A                <1>     jmp short .setVerify
   621                              <1> .maybeOn:
   622 0000140A 663D4F4E            <1>     cmp ax, "ON"
   623 0000140E 7509                <1>     jne .badArgument
   624                              <1>     ;Set on
   625 00001410 31C0                <1>     xor eax, eax
   626 00001412 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
   627                              <1> .setVerify:
   628 00001414 B42E                <1>     mov ah, 2Eh  ;Set Verify
   629 00001416 CD41                <1>     int 41h
   630                              <1>     return
    19                              <2> %%_ret:
    20 00001418 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   631                              <1> .badArgument:
   632 00001419 488D1514F4FFFF      <1>     lea rdx, badOnOff
   633 00001420 B409                <1>     mov ah, 09h
   634 00001422 CD41                <1>     int 41h
   635                              <1>     return
    19                              <2> %%_ret:
    20 00001424 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   636                              <1> 
   637                              <1> rename:
   638                              <1>     return
    19                              <2> %%_ret:
    20 00001425 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   639                              <1> truename:
   640 00001426 F60575ECFFFFFF      <1>     test byte [arg1Flg], -1
   641 0000142D 750C                <1>     jnz .argumentProvided
   642 0000142F 488D15B4F3FFFF      <1>     lea rdx, badArgs
   643 00001436 B409                <1>     mov ah, 09h
   644 00001438 CD41                <1>     int 41h
   645                              <1>     return
    19                              <2> %%_ret:
    20 0000143A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   646                              <1> .argumentProvided:
   647 0000143B E86D040000          <1>     call buildCommandPath
   648                              <1>     ;Explicitly call Truename if we remove truename from this function
   649 00001440 488D3D85EEFFFF      <1>     lea rdi, searchSpec
   650 00001447 E806030000          <1>     call strlen
   651 0000144C FFC9                <1>     dec ecx ;Don't print terminating null
   652 0000144E 488D1577EEFFFF      <1>     lea rdx, searchSpec
   653 00001455 BB01000000          <1>     mov ebx, 01
   654 0000145A B440                <1>     mov ah, 40h
   655 0000145C CD41                <1>     int 41h
   656 0000145E E840000000          <1>     call printCRLF
   657                              <1>     return
    19                              <2> %%_ret:
    20 00001463 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   658                              <1> 
   659                              <1> 
   660                              <1> version:
   661 00001464 488D1584EFFFFF      <1>     lea rdx, crlf
   662 0000146B B409                <1>     mov ah, 09h
   663 0000146D CD41                <1>     int 41h
   664 0000146F 488D15C1F1FFFF      <1>     lea rdx, dosVer
   665 00001476 B409                <1>     mov ah, 09h
   666 00001478 CD41                <1>     int 41h
   667 0000147A B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
   668 0000147C CD41                <1>     int 41h
   669 0000147E 50                  <1>     push rax
   670 0000147F 0FB6C0              <1>     movzx eax, al
   671 00001482 E8F4040000          <1>     call printDecimalWord
   672 00001487 B22E                <1>     mov dl, "."
   673 00001489 B402                <1>     mov ah, 02h
   674 0000148B CD41                <1>     int 41h
   675 0000148D 58                  <1>     pop rax
   676 0000148E 0FB6C4              <1>     movzx eax, ah
   677 00001491 E8E5040000          <1>     call printDecimalWord
   678 00001496 488D1552EFFFFF      <1>     lea rdx, crlf
   679 0000149D B409                <1>     mov ah, 09h
   680 0000149F CD41                <1>     int 41h
   681                              <1>     return
    19                              <2> %%_ret:
    20 000014A1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   682                              <1> 
   683                              <1> launchChild:
   684                              <1> ;We run EXEC on this and the child task will return via applicationReturn
   685                              <1>     return
    19                              <2> %%_ret:
    20 000014A2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   686                              <1> 
    16                                  %include "./Source/Utils/COMMAND/Source/cmdUtils.asm"
    17                              <1> ;Misc functions and subroutines for command.com
    18                              <1> 
    19                              <1> printCRLF:
    20 000014A3 488D1545EFFFFF      <1>     lea rdx, crlf
    21 000014AA BB02000000          <1>     mov ebx, 2
    22 000014AF B440                <1>     mov ah, 40h ;Print a new line
    23 000014B1 B902000000          <1>     mov ecx, 2  ;Two chars to write
    24 000014B6 CD41                <1>     int 41h
    25                              <1>     return
    19                              <2> %%_ret:
    20 000014B8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    26                              <1> printDate:
    27                              <1> ;Input: eax = Packed Date
    28                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
    29                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
    30                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
    31 000014B9 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    32 000014BB 803D63EBFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    33 000014C2 723F                <1>     jb .usDate
    34 000014C4 777A                <1>     ja .jpnDate
    35                              <1> ;European: DD/MM/YY
    36 000014C6 251F000000          <1>     and eax, 1Fh    ;Save day bits
    37 000014CB E8AD000000          <1>     call .printFirst
    38 000014D0 8A155AEBFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    39 000014D6 B402                <1>     mov ah, 02h
    40 000014D8 CD41                <1>     int 41h
    41                              <1> 
    42 000014DA 89C8                <1>     mov eax, ecx
    43 000014DC 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    44 000014E1 C1E805              <1>     shr eax, 5
    45 000014E4 E8B0000000          <1>     call .printSecond
    46                              <1> 
    47 000014E9 8A1541EBFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    48 000014EF B402                <1>     mov ah, 02h
    49 000014F1 CD41                <1>     int 41h
    50                              <1> 
    51 000014F3 89C8                <1>     mov eax, ecx
    52 000014F5 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    53 000014FA C1E809              <1>     shr eax, 9
    54 000014FD E8A7000000          <1>     call .printYear
    55                              <1>     return
    19                              <2> %%_ret:
    20 00001502 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    56                              <1> .usDate:
    57                              <1> ;US: MM/DD/YY
    58 00001503 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    59 00001508 C1E805              <1>     shr eax, 5
    60 0000150B E86D000000          <1>     call .printFirst
    61                              <1> 
    62 00001510 8A151AEBFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    63 00001516 B402                <1>     mov ah, 02h
    64 00001518 CD41                <1>     int 41h
    65                              <1> 
    66 0000151A 89C8                <1>     mov eax, ecx
    67 0000151C 251F000000          <1>     and eax, 1Fh    ;Save day bits
    68 00001521 E873000000          <1>     call .printSecond
    69                              <1> 
    70 00001526 8A1504EBFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    71 0000152C B402                <1>     mov ah, 02h
    72 0000152E CD41                <1>     int 41h
    73                              <1> 
    74 00001530 89C8                <1>     mov eax, ecx
    75 00001532 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    76 00001537 C1E809              <1>     shr eax, 9
    77 0000153A E86A000000          <1>     call .printYear
    78                              <1>     return
    19                              <2> %%_ret:
    20 0000153F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    79                              <1> .jpnDate:
    80                              <1> ;Japan: YY/MM/DD
    81 00001540 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    82 00001545 C1E809              <1>     shr eax, 9
    83 00001548 E85C000000          <1>     call .printYear
    84                              <1> 
    85 0000154D 8A15DDEAFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    86 00001553 B402                <1>     mov ah, 02h
    87 00001555 CD41                <1>     int 41h
    88                              <1> 
    89 00001557 89C8                <1>     mov eax, ecx
    90 00001559 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    91 0000155E C1E805              <1>     shr eax, 5
    92 00001561 E833000000          <1>     call .printSecond
    93                              <1> 
    94 00001566 8A15C4EAFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    95 0000156C B402                <1>     mov ah, 02h
    96 0000156E CD41                <1>     int 41h
    97                              <1> 
    98 00001570 89C8                <1>     mov eax, ecx
    99 00001572 251F000000          <1>     and eax, 1Fh    ;Save day bits
   100 00001577 E81D000000          <1>     call .printSecond
   101                              <1>     return
    19                              <2> %%_ret:
    20 0000157C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   102                              <1> 
   103                              <1> ;Each of these require eax setup correctly
   104                              <1> .printFirst:
   105 0000157D 51                  <1>     push rcx
   106 0000157E E869040000          <1>     call getDecimalWord
   107 00001583 84ED                <1>     test ch, ch ;Do we have an upper digit?
   108 00001585 7504                <1>     jnz .skipSpace
   109 00001587 88CD                <1>     mov ch, cl
   110 00001589 B120                <1>     mov cl, " "
   111                              <1> .skipSpace:
   112 0000158B 88CA                <1>     mov dl, cl
   113 0000158D B402                <1>     mov ah, 02h
   114 0000158F CD41                <1>     int 41h
   115 00001591 88EA                <1>     mov dl, ch
   116 00001593 B402                <1>     mov ah, 02h
   117 00001595 CD41                <1>     int 41h
   118 00001597 59                  <1>     pop rcx
   119                              <1>     return
    19                              <2> %%_ret:
    20 00001598 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   120                              <1> .printSecond:
   121 00001599 51                  <1>     push rcx
   122 0000159A E84D040000          <1>     call getDecimalWord
   123 0000159F 84ED                <1>     test ch, ch ;Do we have an upper digit?
   124 000015A1 75E8                <1>     jnz .skipSpace
   125 000015A3 88CD                <1>     mov ch, cl
   126 000015A5 B130                <1>     mov cl, "0"
   127 000015A7 EBE2                <1>     jmp short .skipSpace
   128                              <1> .printYear:
   129 000015A9 05BC070000          <1>     add eax, 1980
   130 000015AE 51                  <1>     push rcx
   131 000015AF E838040000          <1>     call getDecimalWord ;Get unpacked in rcx
   132 000015B4 C1E910              <1>     shr ecx, 10h    ;Get high word low
   133 000015B7 88CA                <1>     mov dl, cl  ;Print the upper digit
   134 000015B9 B402                <1>     mov ah, 02h
   135 000015BB CD41                <1>     int 41h
   136 000015BD 88EA                <1>     mov dl, ch  ;Print the lower digit
   137 000015BF B402                <1>     mov ah, 02h
   138 000015C1 CD41                <1>     int 41h
   139 000015C3 59                  <1>     pop rcx
   140                              <1>     return
    19                              <2> %%_ret:
    20 000015C4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   141                              <1> 
   142                              <1> 
   143                              <1> 
   144                              <1> printTime:
   145                              <1> ;Input: eax = Packed Time
   146                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   147                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   148 000015C5 89C1                <1>     mov ecx, eax
   149 000015C7 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   150 000015CC C1E80B              <1>     shr eax, 11
   151 000015CF 803D60EAFFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   152 000015D6 750B                <1>     jne .ampm
   153 000015D8 E85A000000          <1>     call .printHours
   154 000015DD E831000000          <1>     call .printMinutes
   155                              <1>     return
    19                              <2> %%_ret:
    20 000015E2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   156                              <1> .ampm:
   157 000015E3 3D0C000000          <1>     cmp eax, 12
   158 000015E8 7713                <1>     ja .pm
   159 000015EA 7416                <1>     je .pm2
   160 000015EC E846000000          <1>     call .printHours
   161 000015F1 E81D000000          <1>     call .printMinutes
   162 000015F6 B261                <1>     mov dl, "a"
   163 000015F8 B402                <1>     mov ah, 02h
   164 000015FA CD41                <1>     int 41h
   165                              <1>     return
    19                              <2> %%_ret:
    20 000015FC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   166                              <1> .pm:
   167 000015FD 2D0C000000          <1>     sub eax, 12
   168                              <1> .pm2:
   169 00001602 E830000000          <1>     call .printHours
   170 00001607 E807000000          <1>     call .printMinutes
   171 0000160C B270                <1>     mov dl, "p"
   172 0000160E B402                <1>     mov ah, 02h
   173 00001610 CD41                <1>     int 41h
   174                              <1>     return
    19                              <2> %%_ret:
    20 00001612 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   175                              <1> .printMinutes:
   176 00001613 8A1519EAFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   177 00001619 B402                <1>     mov ah, 02h
   178 0000161B CD41                <1>     int 41h
   179                              <1> 
   180 0000161D 89C8                <1>     mov eax, ecx
   181 0000161F 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   182 00001624 C1E805              <1>     shr eax, 5
   183 00001627 51                  <1>     push rcx
   184 00001628 E8BF030000          <1>     call getDecimalWord
   185 0000162D 84ED                <1>     test ch, ch ;Do we have an upper digit?
   186 0000162F 7514                <1>     jnz .skipSpace
   187 00001631 88CD                <1>     mov ch, cl
   188 00001633 B130                <1>     mov cl, "0"
   189 00001635 EB0E                <1>     jmp short .skipSpace
   190                              <1> .printHours:
   191 00001637 51                  <1>     push rcx
   192 00001638 E8AF030000          <1>     call getDecimalWord
   193 0000163D 84ED                <1>     test ch, ch ;Do we have an upper digit?
   194 0000163F 7504                <1>     jnz .skipSpace
   195 00001641 88CD                <1>     mov ch, cl
   196 00001643 B120                <1>     mov cl, " "
   197                              <1> .skipSpace:
   198 00001645 88CA                <1>     mov dl, cl
   199 00001647 B402                <1>     mov ah, 02h
   200 00001649 CD41                <1>     int 41h
   201 0000164B 88EA                <1>     mov dl, ch
   202 0000164D B402                <1>     mov ah, 02h
   203 0000164F CD41                <1>     int 41h
   204 00001651 59                  <1>     pop rcx
   205                              <1>     return
    19                              <2> %%_ret:
    20 00001652 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   206                              <1> 
   207                              <1> 
   208                              <1> putVersionInPrompt:
   209 00001653 488D15DDEFFFFF      <1>     lea rdx, dosVer
   210 0000165A B409                <1>     mov ah, 09h ;Print String
   211 0000165C CD41                <1>     int 41h
   212 0000165E B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   213 00001660 CD41                <1>     int 41h
   214 00001662 50                  <1>     push rax    ;Save minor version
   215 00001663 E89C000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   216 00001668 E8B4000000          <1>     call printPackedBCD ;Print al
   217 0000166D B22E                <1>     mov dl, "."
   218 0000166F B402                <1>     mov ah, 02h
   219 00001671 CD41                <1>     int 41h
   220 00001673 58                  <1>     pop rax
   221 00001674 88E0                <1>     mov al, ah  ;Get the minor version low
   222 00001676 E889000000          <1>     call hexToBCD
   223 0000167B E8A1000000          <1>     call printPackedBCD
   224                              <1>     return
    19                              <2> %%_ret:
    20 00001680 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   225                              <1> putEscInPrompt:
   226 00001681 B21B                <1>     mov dl, ESC
   227 00001683 EB1C                <1>     jmp short outChar
   228                              <1> 
   229                              <1> putMoneyInPrompt:
   230 00001685 B224                <1>     mov dl, "$"
   231 00001687 EB18                <1>     jmp short outChar
   232                              <1> 
   233                              <1> putEquInPrompt:
   234 00001689 B23D                <1>     mov dl, "="
   235 0000168B EB14                <1>     jmp short outChar
   236                              <1> 
   237                              <1> putPipeInPrompt:
   238 0000168D B27C                <1>     mov dl, "|"
   239 0000168F EB10                <1>     jmp short outChar
   240                              <1> 
   241                              <1> putGTinPrompt:
   242 00001691 B23E                <1>     mov dl, ">"
   243 00001693 EB0C                <1>     jmp short outChar
   244                              <1> 
   245                              <1> putLTinPrompt:
   246 00001695 B23C                <1>     mov dl, "<"
   247 00001697 EB08                <1>     jmp short outChar
   248                              <1> 
   249                              <1> putDriveInPrompt:
   250 00001699 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   251 0000169B CD41                <1>     int 41h
   252 0000169D 0441                <1>     add al, "A" ;Convert to letter
   253 0000169F 88C2                <1>     mov dl, al
   254                              <1> outChar:
   255 000016A1 B402                <1>     mov ah, 02h ;Echo to STDOUT
   256 000016A3 CD41                <1>     int 41h
   257                              <1>     return
    19                              <2> %%_ret:
    20 000016A5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   258                              <1> putCWDInPrompt:
   259 000016A6 488D3D9EE9FFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   260 000016AD B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   261 000016AF CD41                <1>     int 41h
   262 000016B1 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   263 000016B3 FEC2                <1>     inc dl
   264 000016B5 0441                <1>     add al, "A" ;Convert to letter
   265 000016B7 B43A                <1>     mov ah, ":"
   266 000016B9 66AB                <1>     stosw   ;Store X:, rdi+=2
   267 000016BB 8A0562E9FFFF        <1>     mov al, byte [pathSep]
   268 000016C1 AA                  <1>     stosb   ;Store pathSep, inc rdi
   269 000016C2 B447                <1>     mov ah, 47h ;Get Current Working Directory
   270 000016C4 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   271 000016C7 CD41                <1>     int 41h
   272 000016C9 E884000000          <1>     call strlen
   273 000016CE 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   274                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   275 000016D4 B440                <1>     mov ah, 40h ;Write to handle
   276 000016D6 BB01000000          <1>     mov ebx, 1  ;STDOUT
   277 000016DB 488D1569E9FFFF      <1>     lea rdx, currDirStr
   278 000016E2 CD41                <1>     int 41h
   279                              <1>     return
    19                              <2> %%_ret:
    20 000016E4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   280                              <1> 
   281                              <1> BCDtoHex:
   282                              <1> ;Converts a BCD value to a Hex byte
   283                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   284 000016E5 51                  <1>     push rcx
   285 000016E6 0FB6C0              <1>     movzx eax, al   ;Zero extend
   286 000016E9 89C1                <1>     mov ecx, eax    ;Save al in ecx
   287 000016EB 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   288 000016F0 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   289 000016F6 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   290                              <1> .bth:
   291 000016F9 050A000000          <1>     add eax, 10
   292 000016FE FFC9                <1>     dec ecx
   293 00001700 75F7                <1>     jnz .bth
   294 00001702 59                  <1>     pop rcx
   295 00001703 C3                  <1>     ret
   296                              <1> 
   297                              <1> hexToBCD:
   298                              <1> ;Converts a Hex byte into two BCD digits
   299                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   300 00001704 51                  <1>     push rcx
   301 00001705 0FB6C0              <1>     movzx eax, al   ;Zero extend
   302 00001708 31C9                <1>     xor ecx, ecx
   303                              <1> .htb0:
   304 0000170A 3D0A000000          <1>     cmp eax, 10
   305 0000170F 7209                <1>     jb .htb1
   306 00001711 2D0A000000          <1>     sub eax, 10
   307 00001716 FFC1                <1>     inc ecx
   308 00001718 EBF0                <1>     jmp short .htb0
   309                              <1> .htb1:
   310 0000171A C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   311 0000171D 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   312 0000171F 59                  <1>     pop rcx
   313 00001720 C3                  <1>     ret
   314                              <1> 
   315                              <1> printPackedBCD:
   316                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   317                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   318                              <1> ;Preserves all registers
   319 00001721 50                  <1>     push rax
   320 00001722 52                  <1>     push rdx
   321 00001723 88C4                <1>     mov ah, al
   322 00001725 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   323 00001727 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   324 0000172A 7508                <1>     jnz .upperNybble
   325 0000172C B220                <1>     mov dl, " "
   326 0000172E B402                <1>     mov ah, 02h
   327 00001730 CD41                <1>     int 41h
   328 00001732 EB0E                <1>     jmp short .lowerNybble
   329                              <1> .upperNybble:
   330 00001734 50                  <1>     push rax
   331 00001735 C0EC04              <1>     shr ah, 4
   332 00001738 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   333 0000173B 88E2                <1>     mov dl, ah
   334 0000173D B402                <1>     mov ah, 02h ;Print DL
   335 0000173F CD41                <1>     int 41h
   336 00001741 58                  <1>     pop rax
   337                              <1> .lowerNybble:
   338 00001742 0430                <1>     add al, "0"
   339 00001744 88C2                <1>     mov dl, al
   340 00001746 B402                <1>     mov ah, 02h ;Print DL
   341 00001748 CD41                <1>     int 41h
   342 0000174A 5A                  <1>     pop rdx
   343 0000174B 58                  <1>     pop rax
   344                              <1>     return
    19                              <2> %%_ret:
    20 0000174C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   345                              <1> 
   346                              <1> getCurrentDrive:
   347                              <1> ;Returns the current drive in al
   348 0000174D B419                <1>     mov ah, 19h
   349 0000174F CD41                <1>     int 41h
   350                              <1>     return
    19                              <2> %%_ret:
    20 00001751 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   351                              <1> 
   352                              <1> strlen:
   353                              <1> ;Gets the length of a ASCIIZ string
   354                              <1> ;Input: rdi = Source buffer
   355                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   356 00001752 50                  <1>     push rax
   357 00001753 57                  <1>     push rdi
   358 00001754 30C0                <1>     xor al, al
   359 00001756 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   360 00001758 FFC9                <1>     dec ecx ;rcx = -1
   361 0000175A F2AE                <1>     repne scasb
   362 0000175C F7D1                <1>     not ecx
   363 0000175E 5F                  <1>     pop rdi
   364 0000175F 58                  <1>     pop rax
   365                              <1>     return
    19                              <2> %%_ret:
    20 00001760 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   366                              <1> 
   367                              <1> findTerminatorOrEOC:
   368                              <1> ;Advances rsi to the next string terminator char or the next End of command
   369                              <1> ; char
   370                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   371                              <1> ;If a end of command char found, also sets CF
   372 00001761 AC                  <1>     lodsb
   373 00001762 3C0D                <1>     cmp al, CR
   374 00001764 7419                <1>     je .endOfInput
   375 00001766 E82B000000          <1>     call isALterminator
   376 0000176B 7419                <1>     jz .exit
   377 0000176D 3A05B0E8FFFF        <1>     cmp al, byte [pathSep]
   378 00001773 7411                <1>     je .exit
   379 00001775 3A05A9E8FFFF        <1>     cmp al, byte [switchChar]
   380 0000177B 7409                <1>     je .exit
   381 0000177D EBE2                <1>     jmp short findTerminatorOrEOC
   382                              <1> .endOfInput:
   383 0000177F E802000000          <1>     call .exit
   384 00001784 F9                  <1>     stc 
   385                              <1>     return
    19                              <2> %%_ret:
    20 00001785 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   386                              <1> .exit:
   387 00001786 48FFCE              <1>     dec rsi ;Point to the terminating char
   388                              <1>     return
    19                              <2> %%_ret:
    20 00001789 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   389                              <1> 
   390                              <1> findTerminator:
   391                              <1> ;Advances rsi to the next string terminator char
   392                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   393 0000178A AC                  <1>     lodsb
   394 0000178B E806000000          <1>     call isALterminator
   395 00001790 75F8                <1>     jnz findTerminator
   396 00001792 48FFCE              <1>     dec rsi
   397                              <1>     return
    19                              <2> %%_ret:
    20 00001795 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   398                              <1> isALterminator:
   399                              <1> ;Returns: ZF=NZ if al is not a terminator (Not including CR)
   400                              <1> ;         ZF=ZY if al is a terminator
   401 00001796 3C20                <1>     cmp al, " "
   402                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001798 74(95)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   403 0000179A 3C3B                <1>     cmp al, ";"
   404                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000179C 74(95)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   405 0000179E 3C3D                <1>     cmp al, "="
   406                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000017A0 74(95)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   407 000017A2 3C2C                <1>     cmp al, ","
   408                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000017A4 74(95)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   409 000017A6 3C09                <1>     cmp al, TAB
   410                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000017A8 74(95)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   411 000017AA 3C0A                <1>     cmp al, LF
   412                              <1>     return
    19                              <2> %%_ret:
    20 000017AC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   413                              <1> 
   414                              <1> findEndOfCommand:
   415                              <1> ;Moves rsi to the | or CR that terminates this command
   416 000017AD AC                  <1>     lodsb
   417 000017AE E806000000          <1>     call isALEndOfCommand
   418 000017B3 75F8                <1>     jnz findEndOfCommand
   419 000017B5 48FFCE              <1>     dec rsi
   420                              <1>     return
    19                              <2> %%_ret:
    20 000017B8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   421                              <1> isALEndOfCommand:
   422 000017B9 3C7C                <1>     cmp al, "|"
   423                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000017BB 74(B8)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   424 000017BD 3C0D                <1>     cmp al, CR
   425                              <1>     return
    19                              <2> %%_ret:
    20 000017BF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   426                              <1> 
   427                              <1> scanForRedir:
   428                              <1> ;Returns: AL = 0 => No redirection, terminate with CR
   429                              <1> ;         AL = 1 => Redirection, type <
   430                              <1> ;         AL = 10 => Redir, type >
   431                              <1> ;         AL = 20 => Redir, type >>
   432                              <1> ;If multiple redirs found, the last one of that type counts.
   433 000017C0 56                  <1>     push rsi
   434 000017C1 55                  <1>     push rbp
   435 000017C2 30E4                <1>     xor ah, ah
   436                              <1> .lp:
   437 000017C4 AC                  <1>     lodsb
   438 000017C5 3C3E                <1>     cmp al, ">"
   439                              <1> .exit:
   440 000017C7 5D                  <1>     pop rbp
   441 000017C8 5E                  <1>     pop rsi
   442                              <1>     return
    19                              <2> %%_ret:
    20 000017C9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   443                              <1> 
   444                              <1> 
   445                              <1> skipSpaces:
   446                              <1> ;Also skips tabs
   447                              <1> ;Input: rsi must point to the start of the data string
   448                              <1> ;Output: rsi points to the first non-space char
   449 000017CA 803E20              <1>     cmp byte [rsi], " "
   450 000017CD 7405                <1>     je .skip    ;If equal to a space, skip it
   451 000017CF 803E09              <1>     cmp byte [rsi], TAB
   452                              <1>     retne   ;If not equal to a tab or space, return
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000017D2 75(C9)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   453                              <1> .skip:
   454 000017D4 48FFC6              <1>     inc rsi
   455 000017D7 EBF1                <1>     jmp short skipSpaces
   456                              <1> 
   457                              <1> printPrompt:
   458 000017D9 66813D3FE8FFFFFFFF  <1>     cmp word [promptPtr], -1
   459 000017E2 750B                <1>     jne .validPrompt
   460                              <1>     ;Here we print the default prompt
   461 000017E4 E8BDFEFFFF          <1>     call putCWDInPrompt
   462 000017E9 E8A3FEFFFF          <1>     call putGTinPrompt
   463                              <1>     return
    19                              <2> %%_ret:
    20 000017EE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   464                              <1> .validPrompt:
   465                              <1>     return
    19                              <2> %%_ret:
    20 000017EF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   466                              <1> 
   467                              <1> clearCommandState:
   468                              <1> ;Clears the command state
   469 000017F0 488D3DA7E8FFFF      <1>     lea rdi, cmdStatePtr
   470 000017F7 B90A000000          <1>     mov ecx, cmdStateL
   471 000017FC 31C0                <1>     xor eax, eax
   472 000017FE F3AA                <1>     rep stosb
   473                              <1>     return
    19                              <2> %%_ret:
    20 00001800 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   474                              <1> 
   475                              <1> clearCommandLineState:
   476                              <1> ;Clears the command line state after a 0Dh encountered
   477 00001801 488D3D86E8FFFF      <1>     lea rdi, cmdLineStatePtr
   478 00001808 B91A000000          <1>     mov ecx, cmdLineStateL
   479 0000180D 31C0                <1>     xor eax, eax
   480 0000180F F3AA                <1>     rep stosb
   481                              <1>     return
    19                              <2> %%_ret:
    20 00001811 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   482                              <1> 
   483                              <1> asciiToFCB:
   484                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   485                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   486                              <1> ;Also doesn't check if chars are valid
   487                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   488                              <1> ;Name is space padded.
   489                              <1> ;Input: rsi = ASCII string buffer
   490                              <1> ;       rdi = FCB name buffer
   491                              <1> ;Output: al = Char that terminated the source string 
   492 00001812 53                  <1>     push rbx    
   493 00001813 57                  <1>     push rdi
   494 00001814 B90B000000          <1>     mov ecx, 11
   495 00001819 B020                <1>     mov al, " "
   496 0000181B F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   497 0000181D 5F                  <1>     pop rdi
   498 0000181E 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   499 00001821 EB1D                <1>     jmp short asciiFilenameToFCB.processName
   500                              <1> asciiFilenameToFCB:
   501                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   502                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   503                              <1> ;Also doesn't check if chars are valid
   504                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   505                              <1> ;Name is space padded.
   506                              <1> ;Input: rsi = ASCII string buffer
   507                              <1> ;       rdi = FCB name buffer
   508                              <1> ;Output: al = Char that terminated the source string 
   509 00001823 53                  <1>     push rbx    
   510 00001824 57                  <1>     push rdi
   511 00001825 B90B000000          <1>     mov ecx, 11
   512 0000182A B020                <1>     mov al, " "
   513 0000182C F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   514 0000182E 5F                  <1>     pop rdi
   515 0000182F 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   516                              <1>     ;Preprocess for Dir Searches
   517 00001832 803E2E              <1>     cmp byte [rsi], "."
   518 00001835 7509                <1>     jne .processName
   519 00001837 A4                  <1>     movsb   ;Store the first dot
   520 00001838 803E2E              <1>     cmp byte [rsi], "."
   521 0000183B 752C                <1>     jne .exitBadChar
   522 0000183D A4                  <1>     movsb
   523 0000183E EB29                <1>     jmp short .exitBadChar
   524                              <1> .processName:
   525 00001840 AC                  <1>     lodsb   ;Get the char in al
   526 00001841 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   527 00001843 7426                <1>     jz .exit
   528 00001845 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   529 00001847 7407                <1>     je .extSpace
   530 00001849 3C2E                <1>     cmp al, "."
   531 0000184B 740C                <1>     je .ext
   532 0000184D AA                  <1>     stosb   ;Store the char
   533 0000184E EBF0                <1>     jmp short .processName
   534                              <1> .extSpace:
   535                              <1> ;Now we scan for a period in the name
   536 00001850 AC                  <1>     lodsb   ;Get a char and increase rsi
   537 00001851 84C0                <1>     test al, al
   538 00001853 7416                <1>     jz .exit
   539 00001855 3C2E                <1>     cmp al, "."     ;If al is not a period...
   540 00001857 75F7                <1>     jne .extSpace   ; keep searching
   541                              <1> .ext:
   542 00001859 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   543                              <1> .processExt:
   544 0000185D AC                  <1>     lodsb
   545 0000185E 84C0                <1>     test al, al
   546 00001860 7409                <1>     jz .exit
   547 00001862 3C20                <1>     cmp al, " "
   548 00001864 7405                <1>     je .exit
   549 00001866 AA                  <1>     stosb
   550 00001867 EBF4                <1>     jmp short .processExt
   551                              <1> .exitBadChar:
   552 00001869 30C0                <1>     xor al, al  ;Return a null terminator
   553                              <1> .exit:
   554 0000186B 5B                  <1>     pop rbx
   555                              <1>     return
    19                              <2> %%_ret:
    20 0000186C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   556                              <1> 
   557                              <1> FCBToAsciiz:
   558                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   559                              <1> ;Name is space padded too
   560                              <1> ;Input: rsi = FCB name buffer
   561                              <1> ;       rdi = ASCIIZ string buffer
   562 0000186D B908000000          <1>     mov ecx, 8
   563 00001872 F3A4                <1>     rep movsb   ;Move the name over
   564                              <1> .scanNameSpace:
   565 00001874 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   566 00001878 750D                <1>     jne .ext
   567 0000187A 48FFCF              <1>     dec rdi
   568 0000187D FFC1                <1>     inc ecx
   569 0000187F 81F908000000        <1>     cmp ecx, 8
   570 00001885 72ED                <1>     jb .scanNameSpace
   571                              <1> .ext:
   572 00001887 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   573 0000188C 7506                <1>     jne .validExt
   574 0000188E 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   575 00001892 7415                <1>     je .exit
   576                              <1> .validExt:
   577 00001894 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   578 00001896 AA                  <1>     stosb
   579 00001897 B903000000          <1>     mov ecx, 3
   580 0000189C F3A4                <1>     rep movsb   ;Move the three extension chars over
   581                              <1> .scanExtSpace:
   582 0000189E 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   583 000018A2 7505                <1>     jne .exit
   584 000018A4 48FFCF              <1>     dec rdi
   585 000018A7 EBF5                <1>     jmp short .scanExtSpace
   586                              <1> .exit:
   587 000018A9 31C0                <1>     xor eax, eax
   588 000018AB AA                  <1>     stosb   ;Store a null at the end
   589                              <1>     return
    19                              <2> %%_ret:
    20 000018AC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   590                              <1> 
   591                              <1> buildCommandPath:
   592                              <1> ;Based on the first argument on the command line
   593                              <1> ; will build a full ASCIIZ path in searchSpec to the file/dir specified
   594                              <1>     ;If this is a relative path, will handle correctly (tho unnecessary)
   595 000018AD 0FB605EFE7FFFF      <1>     movzx eax, byte [arg1Off]
   596 000018B4 488D357EE8FFFF      <1>     lea rsi, cmdBuffer
   597 000018BB 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   598 000018BE 8A3D5FE7FFFF        <1>     mov bh, byte [pathSep]
   599 000018C4 B33A                <1>     mov bl, ":"
   600 000018C6 383E                <1>     cmp byte [rsi], bh  ;Is the first char relative to root?
   601 000018C8 7458                <1>     je .absoluteCurrent
   602 000018CA 66395E01            <1>     cmp word [rsi + 1], bx    ;This checks if absolute or relative
   603 000018CE 746D                <1>     je .absolutePath
   604 000018D0 385E01              <1>     cmp byte [rsi + 1], bl  ;Check if a drive separator
   605 000018D3 7409                <1>     je .relativeGiven
   606                              <1> ;No drive letter given, must get Current Drive
   607 000018D5 E873FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   608 000018DA 0441                <1>     add al, "A"
   609 000018DC EB0B                <1>     jmp short .relativeCommon
   610                              <1> .relativeGiven:
   611                              <1> ;Drive letter pointed to by AL
   612 000018DE 8A06                <1>     mov al, byte [rsi]  ;Get drive letter in al
   613 000018E0 24DF                <1>     and al, 0DFh    ;Convert to UC
   614 000018E2 4881C602000000      <1>     add rsi, 2  ;Skip the given drive letter and the colon
   615                              <1> .relativeCommon:
   616                              <1>     ;al has drive letter
   617 000018E9 88C2                <1>     mov dl, al  ;Save drive letter in dl
   618 000018EB 80EA40              <1>     sub dl, "@" ;Get 1 based drive number in dl
   619 000018EE B43A                <1>     mov ah, ":" ;Get the colon in too
   620 000018F0 488D3DD5E9FFFF      <1>     lea rdi, searchSpec ;Start building our search path here
   621 000018F7 66AB                <1>     stosw   ;Store X:
   622 000018F9 8A0524E7FFFF        <1>     mov al, byte [pathSep]
   623 000018FF AA                  <1>     stosb   ;Store pathSep
   624 00001900 56                  <1>     push rsi    ;Save user input string
   625 00001901 4889FE              <1>     mov rsi, rdi    ;Put the current directory here for this drive
   626 00001904 B447                <1>     mov ah, 47h ;Get Current Working Directory, dl has drive number
   627 00001906 CD41                <1>     int 41h ;Won't fail as drive letter in dl confirmed ok
   628 00001908 5E                  <1>     pop rsi
   629                              <1>     ;Now want to find terminating null
   630 00001909 30C0                <1>     xor al, al
   631 0000190B 31C9                <1>     xor ecx, ecx
   632 0000190D FFC9                <1>     dec ecx
   633 0000190F F2AE                <1>     repne scasb ;Search for the terminating null
   634 00001911 48FFCF              <1>     dec rdi ;Go back one once found
   635 00001914 8A0509E7FFFF        <1>     mov al, byte [pathSep]
   636 0000191A 3847FF              <1>     cmp byte [rdi - 1], al
   637 0000191D 7425                <1>     je .buildPath ;If the previous char is a pathsep, skip storing another
   638 0000191F AA                  <1>     stosb   ;Store the pathsep
   639 00001920 EB22                <1>     jmp short .buildPath  ;Now we copy the user string over and good to go
   640                              <1> .absoluteCurrent:
   641 00001922 E826FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   642 00001927 0441                <1>     add al, "A"
   643 00001929 B43A                <1>     mov ah, ":" ;ax has X: now to store 
   644 0000192B 488D3D9AE9FFFF      <1>     lea rdi, searchSpec
   645 00001932 66AB                <1>     stosw
   646 00001934 8A05E9E6FFFF        <1>     mov al, byte [pathSep]
   647 0000193A AA                  <1>     stosb
   648 0000193B EB07                <1>     jmp short .buildPath
   649                              <1> .absolutePath:
   650 0000193D 488D3D88E9FFFF      <1>     lea rdi, searchSpec
   651                              <1> .buildPath:
   652 00001944 E895F3FFFF          <1>     call copyCommandTailItem    ;Terminates with a 0 for free
   653 00001949 488D357CE9FFFF      <1>     lea rsi, searchSpec
   654 00001950 488D3D75E9FFFF      <1>     lea rdi, searchSpec
   655 00001957 B460                <1>     mov ah, 60h ;Truename it to avoid issues
   656 00001959 CD41                <1>     int 41h
   657                              <1>     retc    ;Return if an error with CF=CY
    63                              <2> cret c
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 0000195B 7301                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 0000195D C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   658                              <1>     ;Here we do one final check to ensure we dont end up with a A: but A:"\"
   659 0000195E 30C0                <1>     xor al, al
   660 00001960 31C9                <1>     xor ecx, ecx
   661 00001962 FFC9                <1>     dec ecx
   662 00001964 F2AE                <1>     repne scasb
   663 00001966 48FFCF              <1>     dec rdi ;Go back to the final non-null char
   664 00001969 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is the final non-null char a colon?
   665 0000196D 750A                <1>     jne .okExit   ;Return if not
   666 0000196F 31C0                <1>     xor eax, eax
   667 00001971 8A05ACE6FFFF        <1>     mov al, byte [pathSep]  ;IF it is, insert a pathsep
   668 00001977 66AB                <1>     stosw   ;Store the terminating 0 after the pathsep
   669                              <1> .okExit:
   670 00001979 F8                  <1>     clc
   671                              <1>     return
    19                              <2> %%_ret:
    20 0000197A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   672                              <1> printDecimalWord:
   673                              <1> ;Takes qword in rax and print it's decimal representation
   674                              <1> ;Takes the qword in eax and prints its decimal representation
   675 0000197B 31C9                <1>     xor ecx, ecx
   676 0000197D 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   677 0000197F 85C0                <1>     test eax, eax
   678 00001981 750C                <1>     jnz .notZero
   679 00001983 B930000000          <1>     mov ecx, "0"
   680 00001988 BD01000000          <1>     mov ebp, 1  ;Print one digit
   681 0000198D EB3E                <1>     jmp short .dpfb2
   682                              <1> .notZero:
   683 0000198F 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   684 00001991 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   685                              <1> .dpfb0:
   686 00001996 FFC5                <1>     inc ebp
   687 00001998 81FD08000000        <1>     cmp ebp, 8
   688 0000199E 7206                <1>     jb .dpfb00
   689 000019A0 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   690 000019A4 EB04                <1>     jmp short .dpfb01
   691                              <1> .dpfb00:
   692 000019A6 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   693                              <1> .dpfb01:
   694 000019AA 31D2                <1>     xor edx, edx
   695 000019AC 48F7F6              <1>     div rsi
   696 000019AF 80C230              <1>     add dl, '0'
   697 000019B2 80FA39              <1>     cmp dl, '9'
   698 000019B5 7603                <1>     jbe .dpfb1
   699 000019B7 80C207              <1>     add dl, 'A'-'0'-10
   700                              <1> .dpfb1:
   701 000019BA 81FD08000000        <1>     cmp ebp, 8
   702 000019C0 7204                <1>     jb .dpfb10
   703 000019C2 88D3                <1>     mov bl, dl ;Add the bottom bits
   704 000019C4 EB02                <1>     jmp short .dpfb11
   705                              <1> .dpfb10:
   706 000019C6 88D1                <1>     mov cl, dl    ;Save remainder byte
   707                              <1> .dpfb11:
   708 000019C8 4885C0              <1>     test rax, rax
   709 000019CB 75C9                <1>     jnz .dpfb0
   710                              <1> .dpfb2:
   711 000019CD 81FD08000000        <1>     cmp ebp, 8
   712 000019D3 7208                <1>     jb .dpfb20
   713 000019D5 88DA                <1>     mov dl, bl
   714 000019D7 48C1EB08            <1>     shr rbx, 8
   715 000019DB EB06                <1>     jmp short .dpfb21
   716                              <1> .dpfb20:
   717 000019DD 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   718 000019DF 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   719                              <1> .dpfb21:
   720 000019E3 B402                <1>     mov ah, 02h
   721 000019E5 CD41                <1>     int 41h
   722 000019E7 FFCD                <1>     dec ebp
   723 000019E9 75E2                <1>     jnz .dpfb2
   724                              <1>     return
    19                              <2> %%_ret:
    20 000019EB C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   725                              <1> 
   726                              <1> getDecimalWord:
   727                              <1> ;Works on MAX A dword in eax
   728                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   729 000019EC 31C9                <1>     xor ecx, ecx
   730 000019EE 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   731 000019F0 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   732                              <1> .dpfb0:
   733 000019F5 FFC5                <1>     inc ebp
   734 000019F7 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   735 000019FB 31D2                <1>     xor edx, edx
   736 000019FD 48F7F3              <1>     div rbx
   737 00001A00 80C230              <1>     add dl, '0'
   738 00001A03 80FA39              <1>     cmp dl, '9'
   739 00001A06 7603                <1>     jbe .dpfb1
   740 00001A08 80C207              <1>     add dl, 'A'-'0'-10
   741                              <1> .dpfb1:
   742 00001A0B 88D1                <1>     mov cl, dl    ;Save remainder byte
   743 00001A0D 4885C0              <1>     test rax, rax
   744 00001A10 75E3                <1>     jnz .dpfb0
   745                              <1>     return
    19                              <2> %%_ret:
    20 00001A12 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    17                                  %include "./Source/Utils/COMMAND/Source/int44h.asm"
    18                              <1> critErrorHandler:   ;Int 44h
    19                              <1> ;User Stack in usage here, must be swapped to before this is called
    20                              <1> ;Entered with:  
    21                              <1> ;               AH = Critical Error Bitfield
    22                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    23                              <1> ;               Bit 6 - Reserved
    24                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    25                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    26                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    27                              <1> ;               Bits [2-1] = Affected Disk Error
    28                              <1> ;                     0 0   DOS area
    29                              <1> ;                     0 1   FAT area
    30                              <1> ;                     1 0   Directory area
    31                              <1> ;                     1 1   Data area
    32                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    33                              <1> ;               AL  = Failing drive number if AH[7] = 0
    34                              <1> ;               DIL = Error code for errorMsg
    35                              <1> ;               RSI = EA of Device Header for which device the error occured
    36                              <1> ;Return:
    37                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    38                              <1> ;                  = 1 - Retry the Operation    (Retry)
    39                              <1> ;                  = 2 - Terminate the Program  (Abort)
    40                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    41 00001A13 53                  <1>     push rbx
    42 00001A14 51                  <1>     push rcx
    43 00001A15 52                  <1>     push rdx
    44 00001A16 57                  <1>     push rdi
    45 00001A17 56                  <1>     push rsi
    46 00001A18 FC                  <1>     cld         ;Make String ops go forward
    47                              <1> 
    48 00001A19 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    49 00001A1C 488D15CCE9FFFF      <1>     lea rdx, crlf
    50 00001A23 B409                <1>     mov ah, 09h ;Print String
    51 00001A25 CD41                <1>     int 41h
    52                              <1> 
    53 00001A27 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    54 00001A2D B90C000000          <1>     mov ecx, 0Ch
    55 00001A32 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    56 00001A34 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    57 00001A37 480FB7FF            <1>     movzx rdi, di
    58 00001A3B 4889FA              <1>     mov rdx, rdi    ;Copy error code
    59 00001A3E 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    60 00001A42 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    61 00001A45 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    62 00001A48 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    63 00001A4F 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    64 00001A53 B409                <1>     mov ah, 09h ;Print String
    65 00001A55 CD41                <1>     int 41h     ;Call DOS to print first part of message
    66                              <1> 
    67 00001A57 488D1505020000      <1>     lea rdx, qword [.readmsg]
    68 00001A5E 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    69 00001A65 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    70 00001A68 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    71 00001A6C B409                <1>     mov ah, 09h ;Print String
    72 00001A6E CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    73                              <1> 
    74 00001A70 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    75 00001A73 0F85DF000000        <1>     jnz .charError
    76                              <1> ;Disk error continues here
    77 00001A79 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    78 00001A80 B409                <1>     mov ah, 09h
    79 00001A82 CD41                <1>     int 41h
    80 00001A84 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    81 00001A86 80C241              <1>     add dl, "A" ;Add ASCII code
    82 00001A89 B402                <1>     mov ah, 02h ;Print char in dl
    83 00001A8B CD41                <1>     int 41h
    84                              <1> .userInput:
    85 00001A8D 488D155BE9FFFF      <1>     lea rdx, crlf  ;Print new line
    86 00001A94 B409                <1>     mov ah, 09h
    87 00001A96 CD41                <1>     int 41h
    88                              <1> ;Abort, Retry, Ignore, Fail is word order
    89                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    90                              <1> .userAbort:
    91                              <1> ;Abort is always an option
    92 00001A98 488D15E2010000      <1>     lea rdx, qword [.abortmsg]
    93 00001A9F B409                <1>     mov ah, 09h
    94 00001AA1 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
    95                              <1> .userRetry:
    96 00001AA3 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    97 00001AA6 7416                <1>     jz .userIgnore    ;If clear, dont print message
    98 00001AA8 488D15EA010000      <1>     lea rdx, qword [.betweenMsg]
    99 00001AAF B409                <1>     mov ah, 09h
   100 00001AB1 CD41                <1>     int 41h
   101 00001AB3 488D15D4010000      <1>     lea rdx, qword [.retrymsg]
   102 00001ABA B409                <1>     mov ah, 09h
   103 00001ABC CD41                <1>     int 41h
   104                              <1> .userIgnore:
   105 00001ABE F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   106 00001AC1 7416                <1>     jz .userFail
   107 00001AC3 488D15CF010000      <1>     lea rdx, qword [.betweenMsg]
   108 00001ACA B409                <1>     mov ah, 09h
   109 00001ACC CD41                <1>     int 41h
   110 00001ACE 488D15B2010000      <1>     lea rdx, qword [.ignoremsg]
   111 00001AD5 B409                <1>     mov ah, 09h
   112 00001AD7 CD41                <1>     int 41h
   113                              <1> .userFail:
   114 00001AD9 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   115 00001ADC 7416                <1>     jz .userMsgEnd
   116 00001ADE 488D15B4010000      <1>     lea rdx, qword [.betweenMsg]
   117 00001AE5 B409                <1>     mov ah, 09h
   118 00001AE7 CD41                <1>     int 41h
   119 00001AE9 488D15A4010000      <1>     lea rdx, qword [.failmsg]
   120 00001AF0 B409                <1>     mov ah, 09h
   121 00001AF2 CD41                <1>     int 41h
   122                              <1> .userMsgEnd:
   123 00001AF4 488D15A1010000      <1>     lea rdx, qword [.endMsg]
   124 00001AFB B409                <1>     mov ah, 09h
   125 00001AFD CD41                <1>     int 41h
   126                              <1> ;Get user input now 
   127 00001AFF 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   128 00001B01 488D3D97010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   129 00001B08 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   130 00001B0A CD41                <1>     int 41h ;Get char in al
   131 00001B0C 3C61                <1>     cmp al, "a" ;Chack if lowercase
   132 00001B0E 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   133 00001B10 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   134                              <1> .uip1:
   135 00001B12 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   136 00001B13 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   137 00001B15 FFC1                <1>     inc ecx
   138 00001B17 81F904000000        <1>     cmp ecx, 4
   139 00001B1D 75F3                <1>     jne .uip1
   140 00001B1F E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   141                              <1> .validInput:
   142 00001B24 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   143                              <1> ;Now check if the input is permitted
   144 00001B26 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   145 00001B28 7427                <1>     je .cehExit
   146 00001B2A 84C0                <1>     test al, al ;Check if 0 => Ignore
   147 00001B2C 740F                <1>     je .viIgnore
   148 00001B2E 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   149 00001B30 7416                <1>     je .viRetry
   150                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   151 00001B32 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   152 00001B35 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   153 00001B3B EB14                <1>     jmp short .cehExit
   154                              <1> .viIgnore:
   155 00001B3D F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   156 00001B40 0F8447FFFFFF        <1>     jz .userInput
   157 00001B46 EB09                <1>     jmp short .cehExit
   158                              <1> .viRetry:
   159 00001B48 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   160 00001B4B 0F843CFFFFFF        <1>     jz .userInput
   161                              <1> .cehExit:
   162 00001B51 5E                  <1>     pop rsi
   163 00001B52 5F                  <1>     pop rdi
   164 00001B53 5A                  <1>     pop rdx
   165 00001B54 59                  <1>     pop rcx
   166 00001B55 5B                  <1>     pop rbx
   167 00001B56 48CF                <1>     iretq
   168                              <1> .charError:
   169 00001B58 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   170 00001B5D 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   171                              <1> .ce1:
   172 00001B64 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   173 00001B65 88C2                <1>     mov dl, al  ;Move char into dl
   174 00001B67 B402                <1>     mov ah, 02h
   175 00001B69 CD41                <1>     int 41h ;Print char
   176 00001B6B E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   177 00001B6D E91BFFFFFF          <1>     jmp .userInput
   178                              <1> 
   179                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   180 00001B72 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   180 00001B7B 746563742024202020  <1>
   181 00001B84 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   181 00001B8D 6E6974202420202020  <1>
   182 00001B96 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   182 00001B9F 202420202020202020  <1>
   183 00001BA8 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   183 00001BB1 6F6D6D616E64202420  <1>
   184 00001BBA 446174612024202020- <1>             db "Data $            "       ;Error 4
   184 00001BC3 202020202020202020  <1>
   185 00001BCC 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   185 00001BD5 737420242020202020  <1>
   186 00001BDE 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   186 00001BE7 202020202020202020  <1>
   187 00001BF0 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   187 00001BF9 656469612024202020  <1>
   188 00001C02 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   188 00001C0B 7420466F756E642024  <1>
   189 00001C14 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   189 00001C1D 706572202420202020  <1>
   190 00001C26 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   190 00001C2F 6C7420242020202020  <1>
   191 00001C38 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   191 00001C41 742024202020202020  <1>
   192 00001C4A 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   192 00001C53 61696C757265202420  <1>
   193                              <1> 
   194 00001C5C 64726976652024      <1> .drive      db "drive $"
   195 00001C63 6572726F7220726561- <1> .readmsg    db "error reading $"
   195 00001C6C 64696E672024        <1>
   196 00001C72 6572726F7220777269- <1> .writemsg   db "error writing $"
   196 00001C7B 74696E672024        <1>
   197 00001C81 41626F727424        <1> .abortmsg   db "Abort$" 
   198 00001C87 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   199 00001C8E 526574727924        <1> .retrymsg   db "Retry$"
   200 00001C94 4661696C24          <1> .failmsg    db "Fail$"
   201 00001C99 2C2024              <1> .betweenMsg db ", $"
   202 00001C9C 3F2024              <1> .endMsg     db "? $"
   203 00001C9F 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   204                              <1> 
   205                              <1> int43h:
   206 00001CA3 F9                  <1>     stc     ;Set CF to kill the task
   207 00001CA4 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    18                                  %include "./Source/Utils/COMMAND/Data/cmdEnv.asm"
    19                              <1>     
    20                              <1> masterEnv:  ;Yeet this is this is a child command processor
    21 00001CA7 5F3A434F4D4D414E44- <1>     db "_:COMMAND.COM",0
    21 00001CB0 2E434F4D00          <1>
    22 00001CB5 504154483D0000      <1>     db "PATH=",0,0
    23 00001CBC 202020202020202020- <1>     db ($ - masterEnv) dup (" ")    ;Pad the environment with spaces
    23 00001CC5 202020202020202020- <1>
    23 00001CCE 202020              <1>
    24                              <1> endOfAlloc: ;Symbol to find the start of where I can yeet 
    19                                  %include "./Source/Utils/COMMAND/Source/cmdLdr.asm"
    20                              <1> cmdLdr:
    21                              <1> ;First check if the version is ok. If not, return.
    22 00001CD1 B430                <1>     mov ah, 30h
    23 00001CD3 CD41                <1>     int 41h
    24 00001CD5 3C01                <1>     cmp al, 01h ;Version 1
    25 00001CD7 760D                <1>     jbe .okVersion
    26 00001CD9 488D1560010000      <1>     lea rdx, badVerStr
    27 00001CE0 B409                <1>     mov ah, 09h
    28 00001CE2 CD41                <1>     int 41h
    29 00001CE4 CD40                <1>     int 40h ;Exit to caller or DOS to print bad command interpreter line
    30                              <1> .okVersion:
    31                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    32 00001CE6 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    33 00001CEA 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    34 00001CEE 4889051AE3FFFF      <1>     mov qword [realParent], rax ;Preserve the real parent address
    35                              <1> ;Setup Int 43h and Int 44h
    36 00001CF5 488D1517FDFFFF      <1>     lea rdx, critErrorHandler
    37 00001CFC 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    38 00001D00 B844250000          <1>     mov eax, 2544h
    39 00001D05 CD41                <1>     int 41h
    40 00001D07 488D1595FFFFFF      <1>     lea rdx, int43h
    41 00001D0E 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    42 00001D12 B843250000          <1>     mov eax, 2543h
    43 00001D17 CD41                <1>     int 41h
    44 00001D19 488D154DEBFFFF      <1>     lea rdx, applicationReturn
    45 00001D20 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    46 00001D24 B842250000          <1>     mov eax, 2542h
    47 00001D29 CD41                <1>     int 41h
    48                              <1> ;Get a pointer to DOS Sysvars
    49 00001D2B B452                <1>     mov ah, 52h ;Get sysvars
    50 00001D2D CD41                <1>     int 41h
    51 00001D2F 48891DE1E2FFFF      <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    52                              <1> ;Call for simple internationalisation data
    53 00001D36 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    54 00001D3B CD41                <1>     int 41h
    55 00001D3D 3CFF                <1>     cmp al, -1
    56 00001D3F 7412                <1>     je .skipSwitch
    57 00001D41 8815DDE2FFFF        <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    58 00001D47 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    59 00001D4A 7507                <1>     jne .skipSwitch
    60 00001D4C C605D0E2FFFF2F      <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    61                              <1> .skipSwitch:
    62 00001D53 B800380000          <1>     mov eax, 3800h  ;Get current country data
    63 00001D58 488D15C6E2FFFF      <1>     lea rdx, ctryData
    64 00001D5F CD41                <1>     int 41h ;Write the data to the internal country table
    65                              <1> ;Now determine if this is the master copy of COMMAND.COM
    66                              <1> ;Check if Int 4Eh has the same address as Int 4Dh. If so, we are master.
    67 00001D61 B84E350000          <1>     mov eax, 354Eh  ;Get int 4Eh address
    68 00001D66 CD41                <1>     int 41h
    69 00001D68 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    70 00001D6B B84D350000          <1>     mov eax, 354Dh  ;Get int 4Dh address
    71 00001D70 CD41                <1>     int 41h
    72 00001D72 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    73 00001D75 7535                <1>     jne .skipMaster
    74                              <1> ;Ok so we are master command.com
    75                              <1> ;Now make myself the real parent
    76 00001D77 4C890591E2FFFF      <1>     mov qword [realParent], r8
    77                              <1> ;Set master environment as mine
    78 00001D7E 488D0522FFFFFF      <1>     lea rax, masterEnv
    79 00001D85 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    80                              <1> ;Set current Drive in COMSPEC
    81 00001D89 B019                <1>     mov al, 19h ;Get current Drive
    82 00001D8B CD41                <1>     int 41h
    83 00001D8D 0441                <1>     add al, "A"
    84 00001D8F 880512FFFFFF        <1>     mov byte [masterEnv], al
    85                              <1> ;Set Int 4Eh up
    86 00001D95 488D156CEFFFFF      <1>     lea rdx, int4Eh
    87 00001D9C B84E250000          <1>     mov eax, 254Eh ;Set this as Int 4Eh
    88 00001DA1 CD41                <1>     int 41h
    89                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    90                              <1>     
    91 00001DA3 488D1D27FFFFFF      <1>     lea rbx, endOfAlloc ;Save the Master Environment
    92 00001DAA EB07                <1>     jmp short .printInit
    93                              <1> .skipMaster:
    94 00001DAC 488D1DF4FEFFFF      <1>     lea rbx, masterEnv  ;This is the base address to jettison
    95                              <1> .printInit:
    96                              <1> ;Finish by printing INIT string.
    97 00001DB3 488D1510000000      <1>     lea rdx, initString
    98 00001DBA B409                <1>     mov ah, 09h
    99 00001DBC CD41                <1>     int 41h ;Print init string
   100 00001DBE 48892540E2FFFF      <1>     mov qword [stackBottom], rsp    ;Use this to save where to reset rsp to
   101 00001DC5 E98FEAFFFF          <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   102                              <1> ;Loader Data here
   103                              <1> initString: 
   104 00001DCA 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version 1.0",CR,LF
   104 00001DD3 66696320436F6D7075- <1>
   104 00001DDC 746572205265736561- <1>
   104 00001DE5 726368285229205343- <1>
   104 00001DEE 502F444F5328522920- <1>
   104 00001DF7 56657273696F6E2031- <1>
   104 00001E00 2E300D0A            <1>
   105 00001E04 202020202020202020- <1>     db       "          (C)Copyright Scientific Computer Reserach 2022.",CR,LF,"$"
   105 00001E0D 20284329436F707972- <1>
   105 00001E16 696768742053636965- <1>
   105 00001E1F 6E746966696320436F- <1>
   105 00001E28 6D7075746572205265- <1>
   105 00001E31 736572616368203230- <1>
   105 00001E3A 32322E0D0A24        <1>
   106 00001E40 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   106 00001E49 20444F532076657273- <1>
   106 00001E52 696F6E0D0A24        <1>
   106          ------------------  <1>  info: assembly required 1+2+2 passes

