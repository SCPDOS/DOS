     1                                  ;COMMAND.COM main file
     2                                  [map all ./Source/Utils/COMMAND/Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Source/Include/dosMacro.mac"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------------------------------
     9                              <1> ;Generic Macros file
    10                              <1> ;The following instruction extensions allow to conditionally return
    11                              <1> ;The idea was borrowed from the DOS Source Code
    12                              <1> ;
    13                              <1> ;-------------------------------------------------------------------------------
    14                              <1> 
    15                              <1> ;-------------------------------------------------------------------------------
    16                              <1> ;These macros are live and must not be touched
    17                              <1> ;-------------------------------------------------------------------------------
    18                              <1> %macro return 0
    19                              <1> %%_ret:
    20                              <1>     ret
    21                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    22                              <1> %endmacro
    23                              <1> 
    24                              <1> %macro cret 1
    25                              <1> %%_base:
    26                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    27                              <1>     %ifdef retOff
    28                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <1>     %ifdef currSegVBase
    30                              <1>     j%+1 short (retOff+currSegVBase)
    31                              <1>     %else
    32                              <1>     j%+1 short retOff
    33                              <1>     %endif  ;End ifdef currSegVBase
    34                              <1>     %else 
    35                              <1>     j%-1 short %%a
    36                              <1>     return
    37                              <1> %%a:
    38                              <1>     %endif  ;End the distance measurement if
    39                              <1>     %else   
    40                              <1>     j%-1 short %%a
    41                              <1>     return
    42                              <1> %%a:
    43                              <1>     %endif  ;End ifdef retoff
    44                              <1> %endmacro
    45                              <1> 
    46                              <1> %macro retz 0
    47                              <1> cret z
    48                              <1> %endmacro
    49                              <1> 
    50                              <1> %macro retnz 0
    51                              <1> cret nz
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> %macro rete 0
    55                              <1> cret e
    56                              <1> %endmacro
    57                              <1> 
    58                              <1> %macro retne 0
    59                              <1> cret ne
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> %macro retc 0
    63                              <1> cret c
    64                              <1> %endmacro
    65                              <1> 
    66                              <1> %macro retnc 0
    67                              <1> cret nc
    68                              <1> %endmacro
    69                              <1> 
    70                              <1> %macro retb 0
    71                              <1> cret b
    72                              <1> %endmacro
    73                              <1> 
    74                              <1> %macro retnb 0
    75                              <1> cret nb
    76                              <1> %endmacro
    77                              <1> 
    78                              <1> %macro breakpoint 0
    79                              <1> xchg bx, bx
    80                              <1> %endmacro
     7                                  %include "./Source/Include/dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    27 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    32 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Only affects for SUBST drives, not JOIN
    69                              <1> ; Flags: Bit 15 set = Network drive
    70                              <1> ;        Bit 14 set = Physical drive
    71                              <1> ;        Bit 13 set = JOIN'ed drive
    72                              <1> ;        Bit 12 set = SUBST'ed drive
    73                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    74                              <1> endstruc
    75                              <1> ;CDS equates
    76                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    77                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    78                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    79                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    80                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    81                              <1> ;------------------------------------------------------------------------;
    82                              <1> ; The SFT is a way to allow applications to open file handles to files 
    83                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    84                              <1> ; under the first header, and then a second header will be linked to the 
    85                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    86                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    87                              <1> ; using the FCBS= command. Default FCBS=5.
    88                              <1> ;
    89                              <1> ; A file handle describes the file, and the location within the file that
    90                              <1> ; we are reading. The file handle can be manipulated without the file
    91                              <1> ; being in memory, thus allowing the user to access data without needing 
    92                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    93                              <1> ; accessing devices, by treating them as files with their drivers 
    94                              <1> ; responding and translating the manipulations of the file handle itself.
    95                              <1> ; Neither the driver nor the application should see or use the SFT for
    96                              <1> ; the handle, as it is subject to change (and will change when file 
    97                              <1> ; sharing provisions are included). The DOS will make requests to the 
    98                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    99                              <1> ; track of the information in the SFT entry for that handle. 
   100                              <1> ;
   101                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   102                              <1> ; can point to the same file. It all depends on what the applications 
   103                              <1> ; want to do with the File.
   104                              <1> ;
   105                              <1> ; !!!!IMPORTANT!!!!
   106                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   107                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   108                              <1> ;
   109                              <1> ;Each SFT may look like this:
   110                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   111                              <1> ;            |                |
   112                              <1> ;       wNumFiles*sft    wNumFiles*sft
   113                              <1> ;
   114                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   115                              <1> ; System FCBs.
   116                              <1> ;
   117                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   118                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   119                              <1> ;
   120                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   121                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   122                              <1> ;------------------------------------------------------------------------;
   123                              <1> struc sfth   ;System file table header
   124                              <1> ; This is the SFT header.
   125                              <1> ; This structure comes before the start of the first file in the array/table.
   126 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   127 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   128                              <1> endstruc
   129                              <1> 
   130                              <1> struc sft
   131                              <1> ;This is the file struc itself
   132 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   133 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   134 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   135 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   136 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   137 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   138 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   139 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   140 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   141 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   142 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   143 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   144 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   145 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   146 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   147 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   148 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   149 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   150 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   151                              <1> ;                           0 means no record
   152                              <1> endstruc
   153                              <1> ;Open Mode equates
   154                              <1> ;Access modes   Bits[2:0]
   155                              <1> ReadAccess      equ 0h
   156                              <1> WriteAccess     equ 1h
   157                              <1> RWAccess        equ 2h
   158                              <1> ;Bit 3 reserved 0
   159                              <1> ;Sharing modes  Bits[6:4]
   160                              <1> CompatShare     equ 0h
   161                              <1> denyRWShare     equ 10h
   162                              <1> denyWriteShare  equ 20h
   163                              <1> denyReadShare   equ 30h
   164                              <1> denyNoneShare   equ 40h
   165                              <1> netFCBShare     equ 70h
   166                              <1> ;Bit 7 reserved 0
   167                              <1> ;Bits 8-12 reserved 0
   168                              <1> 
   169                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   170                              <1> ;Buffering on writes
   171                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   172                              <1> ;FCB opened file?
   173                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   174                              <1> ;Attribute Byte
   175                              <1> readOnlyFile    equ 1h
   176                              <1> hiddenFile      equ 2h
   177                              <1> systemFile      equ 4h
   178                              <1> volumeLabel     equ 8h
   179                              <1> directoryFile   equ 10h ;Directory entry
   180                              <1> archiveFile     equ 20h
   181                              <1> ;Device Info equates
   182                              <1> ;For a block device, bits [5:0] contain the drive number
   183                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   184                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   185                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   186                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   187                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   188                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   189                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   190                              <1> blokFileToFlush equ 40h ;Set if ANY writes are made to this handle!
   191                              <1> devCharDev      equ 80h ;If set, it is a char device!
   192                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   193                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   194                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   195                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   196                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   197                              <1> 
   198                              <1> ;openAddress   equ DOSSEG:367Ah   
   199                              <1> ;createAddress equ DOSSEG:35E3h   
   200                              <1> ;------------------------------------------------------------------------;
   201                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   202                              <1> ; to an internal buffer, and then copying it to the specified location
   203                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   204                              <1> ; another request for the same sector from the same device is made, so 
   205                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   206                              <1> ; size, selected according to the largest detected sector size during 
   207                              <1> ; the initial loadup.
   208                              <1> ;
   209                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   210                              <1> ;
   211                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   212                              <1> ;------------------------------------------------------------------------;
   213                              <1> 
   214                              <1> struc bufferHdr
   215 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   216 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   217 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   218 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   219 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   220 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   221 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   222 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   223 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   224                              <1>     .dataarea:             ;Points to the start of the data area
   225                              <1> endstruc
   226                              <1> ;Buffer Flag equates
   227                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   228                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   229                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   230                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   231                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   232                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   233                              <1> ;Note! A buffer is marked as referenced only when the application 
   234                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   235                              <1> ;------------------------------------------------------------------------;
   236                              <1> ; Memory control block for each memory arena
   237                              <1> ;------------------------------------------------------------------------;
   238                              <1> struc mcb
   239 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   240 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   241 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   242 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   243                              <1>     .program:
   244                              <1> endstruc
   245                              <1> ;MCB equates
   246                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   247                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   248                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   249                              <1> mcbMarkCtn      equ "M"
   250                              <1> mcbMarkEnd      equ "Z"
   251                              <1> 
   252                              <1> memFirstFit     equ 0   ;First free block goes to application
   253                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   254                              <1> memLastFit      equ 2   ;Last free block goes to application
   255                              <1> 
   256                              <1> ;Owner = Para aligned address => Owning application PSP
   257                              <1> ;...To consider...
   258                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   259                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   260                              <1> ;------------------------------------------------------------------------;
   261                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   262                              <1> ; following order, thus allowing for return values to be placed in the 
   263                              <1> ; registers by accessing the caller register stack frame.
   264                              <1> ;------------------------------------------------------------------------;
   265                              <1> struc callerFrame
   266 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   267 00000008 ????????????????    <1>     .rbx    resq 1    
   268 00000010 ????????????????    <1>     .rcx    resq 1
   269 00000018 ????????????????    <1>     .rdx    resq 1
   270 00000020 ????????????????    <1>     .rsi    resq 1
   271 00000028 ????????????????    <1>     .rdi    resq 1
   272 00000030 ????????????????    <1>     .rbp    resq 1
   273 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   274 00000040 ????????????????    <1>     .r9     resq 1
   275                              <1> ;Pushed by Processor when invoked via Interrupt
   276 00000048 ????????????????    <1>     .rip    resq 1
   277 00000050 ????????????????    <1>     .cs     resq 1
   278 00000058 ????????????????    <1>     .flags  resq 1
   279                              <1> endstruc
   280                              <1> 
   281                              <1> struc dpl
   282                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   283                              <1> ; server calls
   284 00000000 ????????????????    <1>     .rax    resq 1
   285 00000008 ????????????????    <1>     .rbx    resq 1
   286 00000010 ????????????????    <1>     .rcx    resq 1
   287 00000018 ????????????????    <1>     .rdx    resq 1
   288 00000020 ????????????????    <1>     .rsi    resq 1
   289 00000028 ????????????????    <1>     .rdi    resq 1
   290 00000030 ????????????????    <1>     .r8     resq 1
   291 00000038 ????????????????    <1>     .r9     resq 1
   292 00000040 ????????????????    <1>     .align  resq 1
   293 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   294 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   295                              <1> endstruc
   296                              <1> 
   297                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   298 00000000 ????????????????    <1>     .oldRBP         resq 1  
   299 00000008 ??                  <1>     .newBuffers     resb 1  ;New buffers value
   300 00000009 ??                  <1>     .newSFTVal      resb 1
   301 0000000A ??                  <1>     .newFCBSVal     resb 1
   302 0000000B ??                  <1>     .newProtFCBSVal resb 1  ;Number of protected FCBS
   303 0000000C ??                  <1>     .newLastdrive   resb 1
   304 0000000D ??                  <1>     .newStacks      resb 1  ;Ignored for now
   305 0000000E ????                <1>     .newStackSize   resb 2  ;Ignored for now
   306 00000010 ????????            <1>     .newAllocSize   resd 1  ;Used to keep track of reallocation size
   307 00000014 ????????            <1>                     resd 1  ;Alignment byte
   308 00000018 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc fcb
   312                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   313 00000000 ??                  <1>     .driveNum   resb 1
   314 00000001 ????????????????    <1>     .filename   resb 8
   315 00000009 ??????              <1>     .fileext    resb 3
   316 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   317                              <1> ;One block consists of 128 records, of size denoted in the below
   318 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   319 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   320 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   321 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   322 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   323 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   324 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   325 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   326 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   327                              <1>     ;If record size > 64, high byte is ignored.
   328                              <1>     ;Used for random read and write operations to find the right record
   329                              <1> endstruc
   330                              <1> 
   331                              <1> struc filename
   332                              <1> ;8.3 File name struct
   333 00000000 ????????????????    <1>     .fName  resb 8
   334 00000008 ??????              <1>     .fExt   resb 3
   335                              <1> endstruc
   336                              <1> 
   337                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   338 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   339 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   340 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   341 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   342 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   343 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   344 00000016 ????                <1>     .fileTime   resw 1  ;File time
   345 00000018 ????                <1>     .fileDate   resw 1  ;File date
   346 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   347 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   348                              <1> endstruc
   349                              <1> 
   350                              <1> struc psp
   351 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   352 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   353 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   354 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   355 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   356 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   357 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   358 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   359 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   360 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   361 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   362 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   363 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   364 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   365                              <1> ;Extra handle arrays are grouped into a linked list
   366                              <1> ;The below are in the same place as in DOS
   367 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   368 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   369                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   370 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   371 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   372                              <1> endstruc
   373                              <1> 
   374                              <1> struc clkStruc
   375 00000000 ????                <1>     .dateWord   resw 1
   376 00000002 ??                  <1>     .minutes    resb 1
   377 00000003 ??                  <1>     .hours      resb 1
   378 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   379 00000005 ??                  <1>     .seconds    resb 1
   380                              <1> endstruc
   381                              <1> 
   382                              <1> struc countryStruc
   383 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   384                              <1>                         ;0 = month day year hh:mm:ss
   385                              <1>                         ;1 = day month year hh:mm:ss
   386                              <1>                         ;2 = year month day hh:mm:ss
   387 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   388 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   389 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   390 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   391 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   392 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   393                              <1>                         ;0 = Symbol leads, without space
   394                              <1>                         ;1 = Symbol follows, without space
   395                              <1>                         ;2 = Symbol leads, one space
   396                              <1>                         ;3 = Symbol follows, one space
   397                              <1>                         ;4 = Symbol replace decimal separator
   398 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   399 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   400 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   401 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   402 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   403                              <1> endstruc
   404                              <1> 
   405                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   406                              <1> ;for a space of 64Gb
   407                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   408                              <1> dosLowBase  equ 600h    ;Low load address
   409                              <1> 
   410                              <1> ;Critical Error AH bitfield equates
   411                              <1> critRead    equ 0h
   412                              <1> critWrite   equ 1h
   413                              <1> critDOS     equ 0h
   414                              <1> critFAT     equ 2h
   415                              <1> critDir     equ 4h
   416                              <1> critData    equ 6h
   417                              <1> critFailOK  equ 8h
   418                              <1> critRetryOK equ 10h
   419                              <1> critIgnorOK equ 20h
   420                              <1> critCharDev equ 80h
   421                              <1> 
   422                              <1> critIgnore  equ 0
   423                              <1> critRetry   equ 1
   424                              <1> critAbort   equ 2
   425                              <1> critFail    equ 3
   426                              <1> 
   427                              <1> ;MISC ASCII control chars
   428                              <1> NUL equ 00h ;^@         | ASCII Null
   429                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   430                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   431                              <1> BEL equ 07h ;^G         | ASCII Bell
   432                              <1> BSP equ 08h ;^H         | ASCII Backspace
   433                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   434                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   435                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   436                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   437                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   438                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   439                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   440                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   441                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   442                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   443                              <1> SPC equ 20h ;Printable  | ASCII Space
   444                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   445                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   446                              <1> 
   447                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   448                              <1> ;Extended Ascii Codes
   449                              <1> eF1     equ 3Bh ;F1 second byte
   450                              <1> eF2     equ 3Ch ;F2 second byte
   451                              <1> eF3     equ 3Dh ;F3 second byte
   452                              <1> eF4     equ 3Eh ;F4 second byte
   453                              <1> eF5     equ 3Fh ;F5 second byte
   454                              <1> eF6     equ 40h ;F6 second byte
   455                              <1> eF7     equ 41h ;F7 second byte
   456                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   457                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   458                              <1> eIns    equ 52h ;Insert second byte
   459                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   460                              <1> 
   461                              <1> ;Default Configuration for the system
   462                              <1> 
   463                              <1> buffersDefault  equ 30
   464                              <1> filesDefault    equ 20
   465                              <1> fcbsDefault     equ 4
   466                              <1> safeFcbsDeflt   equ 0
   467                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Source/Include/dosError.inc"
     9                              <1> ;DOS Error codes
    10                              <1> 
    11                              <1> ;Extended Error Codes
    12                              <1> errInvFnc   equ 1   ;Invalid function number
    13                              <1> errFnf      equ 2   ;File not found
    14                              <1> errPnf      equ 3   ;Path not found
    15                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    16                              <1> errAccDen   equ 5   ;Access denied (to resource)
    17                              <1> errBadHdl   equ 6   ;Invalid handle
    18                              <1> errMCBbad   equ 7   ;MCB's destroyed
    19                              <1> errNoMem    equ 8   ;Insufficient memory
    20                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    21                              <1> errBadEnv   equ 10  ;Invalid environment
    22                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    23                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    24                              <1> errInvDat   equ 13  ;Invalid data
    25                              <1> ;           equ 14  ;Reserved
    26                              <1> errBadDrv   equ 15  ;Invalid drive specified
    27                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    28                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    29                              <1> errNoFil    equ 18  ;No more files
    30                              <1> ;The following are Driver error codes + 19
    31                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    32                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    33                              <1> errUnkUnt   equ 20  ;Unknown Unit
    34                              <1> errDrvNR    equ 21  ;Drive not ready
    35                              <1> errUnkCmd   equ 22  ;Unknown Command
    36                              <1> errCRCerr   equ 23  ;Data (CRC) error
    37                              <1> errBadRLn   equ 24  ;Bad request structure length
    38                              <1> errSekErr   equ 25  ;Seek error
    39                              <1> errUnkMed   equ 26  ;Unknown media type
    40                              <1> errSecNF    equ 27  ;Sector not Found
    41                              <1> errNoPap    equ 28  ;Printer out of paper
    42                              <1> errWF       equ 29  ;Write fault
    43                              <1> errRF       equ 30  ;Read fault
    44                              <1> errGF       equ 31  ;General fault
    45                              <1> ;----------------------------------------------
    46                              <1> ;The following two go inbetween the Disk errors
    47                              <1> errShrVio   equ 32  ;Sharing violations
    48                              <1> errLokVio   equ 33  ;File Lock violation
    49                              <1> ;----------------------------------------------
    50                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    51                              <1> errNoFCB    equ 35  ;FCB unavailable
    52                              <1> errShrFul   equ 36  ;Sharing buffer full
    53                              <1> 
    54                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    55                              <1> 
    56                              <1> errFilExist equ 80  ;File already exists
    57                              <1> errDirExist equ 82  ;Directory already exists
    58                              <1> errFI44     equ 83  ;Fail on INT 44h
    59                              <1> errRedir    equ 84  ;Too many levels of redirection
    60                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    61                              <1> errBadPass  equ 86  ;Bad password
    62                              <1> errBadParam equ 87  ;Bad parameter passed to request
    63                              <1> errNetWrite equ 88  ;Network Write Fault
    64                              <1> ;-----------------------------------------------------------------------------
    65                              <1> ;Error Loci
    66                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    67                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    68                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    69                              <1> eLocChr     equ 4   ;Serial/Character Device error
    70                              <1> eLocMem     equ 5   ;Related to RAM
    71                              <1> ;-----------------------------------------------------------------------------
    72                              <1> ;Error Actions
    73                              <1> eActRet     equ 1   ;Retry
    74                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    75                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    76                              <1> eActAbt     equ 4   ;Abort with cleanup
    77                              <1> eActKil     equ 5   ;Abort without cleanup
    78                              <1> eActIgn     equ 6   ;Ignore error
    79                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    80                              <1> ;-----------------------------------------------------------------------------
    81                              <1> ;Error classes
    82                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    83                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    84                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    85                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    86                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    87                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    88                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    89                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    90                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    91                              <1> eClsLocked  equ 10  ;Resource Locked
    92                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    93                              <1> eClsClash   equ 12  ;Resource already exists!
    94                              <1> eClsUnk     equ 13  ;Unknown class
     9                                  %include "./Source/Utils/COMMAND/Data/cmdEqu.asm"
    10                              <1> ;Data equates and struct declarations
    11                              <1> 
    12                              <1> cmdBufferL  equ 128 ;Length of a command line buffer
    13                              <1> driveSpecL  equ 2   ;Space for X:
    14                              <1> dirPathL    equ 64  ;Length of a directory path
    15                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
    16                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
    17                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
    18                              <1> fullDirPathL equ driveSpecL + dirPathL
    19                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    20                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    21                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    22                              <1> 
    23                              <1> ;Use PSP FCB's for switch buffers
    24                              <1> fcb1        equ psp.fcb1
    25                              <1> fcb2        equ psp.fcb2
    26                              <1> ;Use the dta as the built command line buffer.
    27                              <1> cmdLineCnt  equ psp.parmList
    28                              <1> cmdLine     equ psp.progTail
    29                              <1> 
    30                              <1> 
    31                              <1> ;Struct Declarations
    32                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    33 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    34 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    35 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    36 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    37 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    38                              <1> endstruc
    39                              <1> 
    40                              <1> struc execProg  ;For use with EXEC-ing a child task
    41 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    42 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    43 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    44 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    45                              <1> endstruc
    46                              <1> 
    47                              <1> ;Directory attribute equates
    48                              <1>     dirReadOnly     equ 01h
    49                              <1>     dirHidden       equ 02h
    50                              <1>     dirSystem       equ 04h
    51                              <1>     dirVolumeID     equ 08h
    52                              <1>     dirDirectory    equ 10h
    53                              <1>     dirArchive      equ 20h
    54                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    55                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    56                              <1>     ;If any of the three bits are set, then ALL three bits are set
    57                              <1>     ; in addition to whatever the user passed to search for.
    58                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    59                              <1>     dirIncFiles     equ dirHidden | dirSystem
    10                                  Segment .data align=1 
    11                                  %include "./Source/Utils/COMMAND/Data/cmdData.asm"
    12                              <1> ;Static Data Area for COMMAND.COM    
    13                              <1> startLbl:   ;Start symbol, this is the entry point
    14 00000000 E93E170000          <1>     jmp cmdLdr
    15 00000005 0000000000000000    <1> stackBottom dq 0    ;Pointer to the top of the stack as allocated by DOS
    16 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
    17 0000000F FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
    18 00000017 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
    19 0000001F 1400                <1> numHdls     dw 20   ;Get number of handles permitted, hardcoded in this version
    20 00000021 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    21 00000023 5C                  <1> pathSep     db "\"  ;Default path sep
    22 00000024 2F                  <1> switchChar  db "/"  ;Default switch char
    23                              <1> ;Static strings, not used in command line parsing
    24 00000025 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    24 0000002E 000000000000000000- <1>
    24 00000037 000000000000000000- <1>
    24 00000040 000000000000000000- <1>
    24 00000049 0000                <1>
    25 0000004B 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    25 00000054 000000000000000000- <1>
    25 0000005D 000000000000000000- <1>
    25 00000066 000000000000000000- <1>
    25 0000006F 000000000000000000- <1>
    25 00000078 000000000000000000- <1>
    25 00000081 000000000000000000- <1>
    25 0000008A 00000000            <1>
    26                              <1> 
    27                              <1> 
    28                              <1> cmdLineStatePtr:
    29 0000008E 00                  <1> cmdStartOff db 0    ;Offset to the first char for this command (may be a space)
    30 0000008F 00                  <1> cmdEndOff   db 0    ;Offset to the terminating char for this command (0Dh or |)
    31 00000090 00                  <1> pipeFlag    db 0    ;If set, we are piping across a command
    32 00000091 0000                <1> pipeHndl    dw 0    ;If pipeFlag set, this var has the handle to the pipe file
    33 00000093 202020202020202020- <1> pipeName    db 11 dup (" ") ;Name of the pipe file we created
    33 0000009C 2020                <1>
    34                              <1> 
    35                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    36                              <1> ;These variables are valid for a SINGLE command in a command line
    37 0000009E 0000                <1> cmdDrvSpec  dw 0    ;Read the first word in to see if the pathspec has drivespec
    38 000000A0 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    39 000000A1 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    40                              <1> ;                    If 2, we are redirecting output to a file, by appending
    41                              <1> ;FLG and SWCH are read as a word when checking if argX is a switch
    42 000000A2 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    43 000000A3 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    44 000000A4 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    45                              <1> 
    46 000000A5 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    47 000000A6 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    48 000000A7 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    49                              <1> 
    50                              <1> cmdStateL equ $ - cmdStatePtr
    51                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    52                              <1> 
    53                              <1> ;Structs and strings
    54                              <1> 
    55 000000A8 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    55 000000B1 00000000000000      <1>
    56 000000B8 2B                  <1> cmdFFBlock  db ffBlock_size ;Internal Find First Block to use as default DTA
    57                              <1> 
    58 000000B9 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    58 000000C2 000000000000000000- <1>
    58 000000CB 000000000000000000- <1>
    58 000000D4 000000000000000000- <1>
    58 000000DD 000000000000000000- <1>
    58 000000E6 000000000000000000- <1>
    58 000000EF 000000000000000000- <1>
    58 000000F8 000000000000000000- <1>
    58 00000101 000000000000000000- <1>
    58 0000010A 000000000000000000- <1>
    58 00000113 000000000000000000- <1>
    58 0000011C 000000000000000000- <1>
    58 00000125 000000000000000000- <1>
    58 0000012E 000000000000000000- <1>
    58 00000137 0000                <1>
    59 00000139 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    59 00000142 000000000000000000- <1>
    59 0000014B 000000000000000000- <1>
    59 00000154 000000000000000000- <1>
    59 0000015D 000000000000000000- <1>
    59 00000166 000000000000000000- <1>
    59 0000016F 000000000000000000- <1>
    59 00000178 000000000000000000- <1>
    59 00000181 000000000000000000- <1>
    59 0000018A 000000000000000000- <1>
    59 00000193 000000000000000000- <1>
    59 0000019C 000000000000000000- <1>
    59 000001A5 000000000000000000- <1>
    59 000001AE 000000000000000000- <1>
    59 000001B7 0000                <1>
    60 000001B9 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)  ;Space for full path to a external command
    60 000001C2 000000000000000000- <1>
    60 000001CB 000000000000000000- <1>
    60 000001D4 000000000000000000- <1>
    60 000001DD 000000000000000000- <1>
    60 000001E6 000000000000000000- <1>
    60 000001EF 000000000000000000- <1>
    60 000001F8 000000000000000000- <1>
    60 00000201 00000000000000      <1>
    61                              <1> 
    62 00000208 000000000000000000- <1> fcbCmdSpec  db fcbNameL dup (0) ;Used to make a FCB style name for the file
    62 00000211 0000                <1>
    63 00000213 000000000000000000- <1> cmdSpec     db fileNameZL dup (0)   ;ASCIIZ command spec for the command name
    63 0000021C 00000000            <1>
    64 00000220 000000000000000000- <1> cmdName     db cmdNameL dup (0) ;Command name string prefixed by length of word
    64 00000229 0000000000          <1>
    65                              <1> 
    66 0000022E 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    66 00000237 000000000000000000- <1>
    66 00000240 000000000000000000- <1>
    66 00000249 000000000000000000- <1>
    66 00000252 000000000000000000- <1>
    66 0000025B 000000000000000000- <1>
    66 00000264 000000000000000000- <1>
    66 0000026D 000000000000000000- <1>
    66 00000276 00000000000000      <1>
    67 0000027D 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    67 00000286 000000000000000000- <1>
    67 0000028F 000000000000000000- <1>
    67 00000298 000000000000000000- <1>
    67 000002A1 000000000000000000- <1>
    67 000002AA 000000000000000000- <1>
    67 000002B3 000000000000000000- <1>
    67 000002BC 000000000000000000- <1>
    67 000002C5 00000000000000      <1>
    68                              <1> 
    69 000002CC 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Contains the pathspec for the search file
    69 000002D5 000000000000000000- <1>
    69 000002DE 000000000000000000- <1>
    69 000002E7 000000000000000000- <1>
    69 000002F0 000000000000000000- <1>
    69 000002F9 000000000000000000- <1>
    69 00000302 000000000000000000- <1>
    69 0000030B 000000000000000000- <1>
    69 00000314 000000000000000000- <1>
    69 0000031D 000000000000000000- <1>
    69 00000326 000000000000000000- <1>
    69 0000032F 000000000000000000- <1>
    69 00000338 000000000000000000- <1>
    69 00000341 000000000000000000- <1>
    69 0000034A 0000                <1>
    70                              <1> ;The above is larger than is needed/supported by DOS to allow for 
    71                              <1> ; users overtyping
    72                              <1> 
    73                              <1> ;Internal Function vars
    74 0000034C 00                  <1> dirPrnType  db 0    ;Print type.    Bit[0] set => /W or /w specified
    75                              <1> ;                                   Bit[1] set => /P or /p specified
    76 0000034D 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    77 0000034E 00                  <1> dirFileCtr  db 0
    78 0000034F 00                  <1> dirPathOff  db 0
    79 00000350 000000000000000000- <1> dirVolLbl   db 13 dup (0)
    79 00000359 00000000            <1>
    80 0000035D 0000000000000000    <1> dirVolPathBuf db 8 dup (0)  ;Used to build X:\*.*,0 for volume label search
    12                                  %include "./Source/Utils/COMMAND/Data/cmdTable.asm"
    13                              <1> ;Function dispatch table
    14                              <1> functionTable:
    15                              <1> ;Use Pascal strings with each row of hte table having three columns:
    16                              <1> ; Col 1, BYTE, Length of command
    17                              <1> ; Col 2, String, String representing the user input
    18                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
    19 00000365 03444952            <1>     db 3, "DIR"
    20 00000369 210D                <1>     dw dir - startLbl
    21                              <1> 
    22 0000036B 024344              <1>     db 2, "CD"
    23 0000036E 1E0F                <1>     dw chdir - startLbl
    24                              <1> 
    25 00000370 054348444952        <1>     db 5, "CHDIR"
    26 00000376 1E0F                <1>     dw chdir - startLbl
    27                              <1> 
    28 00000378 024D44              <1>     db 2, "MD"
    29 0000037B D80F                <1>     dw mkdir - startLbl
    30                              <1> 
    31 0000037D 054D4B444952        <1>     db 5, "MKDIR"
    32 00000383 D80F                <1>     dw mkdir - startLbl
    33                              <1> 
    34 00000385 025244              <1>     db 2, "RD"
    35 00000388 3D10                <1>     dw rmdir - startLbl
    36                              <1> 
    37 0000038A 05524D444952        <1>     db 5, "RMDIR"
    38 00000390 3D10                <1>     dw rmdir - startLbl
    39                              <1> 
    40 00000392 0344454C            <1>     db 3, "DEL"
    41 00000396 3D10                <1>     dw erase - startLbl
    42                              <1> 
    43 00000398 054552415345        <1>     db 5, "ERASE"
    44 0000039E 3D10                <1>     dw erase - startLbl
    45                              <1> 
    46 000003A0 0444415445          <1>     db 4, "DATE"
    47 000003A5 3D10                <1>     dw date - startLbl
    48                              <1> 
    49 000003A7 0454494D45          <1>     db 4, "TIME"
    50 000003AC 3D10                <1>     dw time - startLbl
    51                              <1> 
    52 000003AE 04434F5059          <1>     db 4, "COPY"
    53 000003B3 3D10                <1>     dw copy - startLbl
    54                              <1> 
    55 000003B5 0443545459          <1>     db 4, "CTTY"
    56 000003BA 3D10                <1>     dw ctty - startLbl
    57                              <1> 
    58 000003BC 03434C53            <1>     db 3, "CLS"
    59 000003C0 3E10                <1>     dw cls - startLbl
    60                              <1> 
    61 000003C2 05425245414B        <1>     db 5, "BREAK"
    62 000003C8 B010                <1>     dw break - startLbl
    63                              <1> 
    64 000003CA 0652454E414D45      <1>     db 6, "RENAME"
    65 000003D1 3111                <1>     dw rename - startLbl
    66                              <1> 
    67 000003D3 08545255454E414D45  <1>     db 8, "TRUENAME"
    68 000003DC 3211                <1>     dw truename - startLbl
    69                              <1> 
    70 000003DE FF                  <1>     db -1   ;End of table
    13                                  %include "./Source/Utils/COMMAND/Data/cmdMsg.asm"
    14                              <1> ;COMMAND.COM Messages and strings
    15 000003DF 0D0A24              <1> crlf    db  CR,LF,"$"
    16 000003E2 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
    16 000003EB 696C65206D69737369- <1>
    16 000003F4 6E670D0A24          <1>
    17 000003F9 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
    17 00000402 6469736B2077697468- <1>
    17 0000040B 206261746368206669- <1>
    17 00000414 6C65                <1>
    18 00000416 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
    18 0000041F 737320616E79206B65- <1>
    18 00000428 79207768656E207265- <1>
    18 00000431 6164790D0A24        <1>
    19 00000437 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
    19 00000440 6E64206F722066696C- <1>
    19 00000449 65206E616D650D0A24  <1>
    20 00000452 4475706C6963617465- <1> dupName db  "Duplicate file name or "
    20 0000045B 2066696C65206E616D- <1>
    20 00000464 65206F7220          <1>
    21 00000469 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    21 00000472 666F756E640D0A24    <1>
    22 0000047A 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    22 00000483 656E74206469736B20- <1>
    22 0000048C 73706163650D0A24    <1>
    23 00000494 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    23 0000049D 7669726F6E6D656E74- <1>
    23 000004A6 2073706163650D0A24  <1>
    24 000004AF 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    24 000004B8 74696F6E206572726F- <1>
    24 000004C1 720D0A24            <1>
    25 000004C5 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    25 000004CE 6F7420626520636F70- <1>
    25 000004D7 696564206F6E746F20- <1>
    25 000004E0 697473656C660D0A24  <1>
    26 000004E9 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    26 000004F2 662064657374696E61- <1>
    26 000004FB 74696F6E206C6F7374- <1>
    26 00000504 206265666F72652063- <1>
    26 0000050D 6F70790D0A24        <1>
    27                              <1> ;Copy end message. First write # files copied then this message 
    28 00000513 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    28 0000051C 636F706965640D0A24  <1>
    29                              <1> ;Dir end1 msg. First write # files in dir then this
    30 00000525 2046696C6528732920- <1> dirOk   db  " File(s) ", "$"
    30 0000052E 24                  <1>
    31                              <1> ;Dir end2 msg. First write # bytes free then this message
    32 0000052F 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    32 00000538 65650D0A24          <1>
    33 0000053D 203C4449523E202020- <1> dirLbl  db  " <DIR>   $"
    33 00000546 24                  <1>
    34                              <1> 
    35 00000547 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    35 00000550 726976652073706563- <1>
    35 00000559 696669636174696F6E- <1>
    35 00000562 0D0A24              <1>
    36 00000565 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    36 0000056E 6B6579207768656E20- <1>
    36 00000577 7265616479202E202E- <1>
    36 00000580 202E2024            <1>
    37 00000584 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    37 0000058D 6172616D657465720D- <1>
    37 00000596 0A24                <1>
    38                              <1> 
    39 00000598 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    39 000005A1 576564546875467269- <1>
    39 000005AA 536174              <1>
    40 000005AD 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    40 000005B6 206461746524        <1>
    41 000005BC 43757272656E742064- <1> curDate db  "Current date is $"
    41 000005C5 6174652069732024    <1>
    42 000005CD 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date: $"
    42 000005D6 657720646174653A20- <1>
    42 000005DF 24                  <1>
    43 000005E0 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    43 000005E9 2074696D6524        <1>
    44 000005EF 43757272656E742074- <1> curTime db  "Current time is $"
    44 000005F8 696D652069732024    <1>
    45 00000600 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    45 00000609 65772074696D653A20- <1>
    45 00000612 24                  <1>
    46                              <1> 
    47 00000613 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    47 0000061C 7572652028592F4E29- <1>
    47 00000625 3F2024              <1>
    48                              <1> 
    49 00000628 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    49 00000631 56657273696F6E2024  <1>
    50                              <1> dosVerL equ $ - dosVer
    51                              <1> 
    52 0000063A 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    52 00000643 6E2064726976652024  <1>
    53 0000064C 2069732024          <1> volOk   db " is $"
    54 00000651 20686173206E6F206C- <1> volNo   db " has no label$"
    54 0000065A 6162656C24          <1>
    55                              <1> 
    56 0000065F 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    56 00000668 69726563746F72790D- <1>
    56 00000671 0A24                <1>
    57 00000673 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    57 0000067C 206372656174652064- <1>
    57 00000685 69726563746F72790D- <1>
    57 0000068E 0A24                <1>
    58 00000690 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    58 00000699 6174682C206E6F7420- <1>
    58 000006A2 6469726563746F7279- <1>
    58 000006AB 2C0D0A              <1>
    59 000006AE 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    59 000006B7 6F7279206E6F742065- <1>
    59 000006C0 6D7074790D0A24      <1>
    60 000006C7 204469726563746F72- <1> dirMain db " Directory of  $"
    60 000006D0 79206F66202024      <1>
    61 000006D7 4E6F20506174682024  <1> noPath  db "No Path $"
    62 000006E0 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    62 000006E9 7269766520696E2073- <1>
    62 000006F2 656172636820706174- <1>
    62 000006FB 680D0A24            <1>
    63 000006FF 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    63 00000708 65766963650D0A24    <1>
    64 00000710 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    64 00000719 20666F756E640D0A24  <1>
    65 00000722 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    65 0000072B 726F720D0A24        <1>
    66 00000731 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    66 0000073A 6F74206265206E6573- <1>
    66 00000743 7465640D0A24        <1>
    67 00000749 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    67 00000752 6174652066696C6520- <1>
    67 0000075B 6572726F7220647572- <1>
    67 00000764 696E6720706970650D- <1>
    67 0000076D 0A24                <1>
    68 0000076F 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    68 00000778 2062696E6172792072- <1>
    68 00000781 656164732066726F6D- <1>
    68 0000078A 206120646576696365- <1>
    68 00000793 0D0A24              <1>
    69 00000796 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    70 0000079C 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    71 000007A1 425245414B20697320- <1> breakIs db "BREAK is $"
    71 000007AA 24                  <1>
    72 000007AB 564552494659206973- <1> verifyIs    db "VERIFY is $"
    72 000007B4 2024                <1>
    73 000007B6 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    74 000007BF 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    74 000007C8 617468206F72206669- <1>
    74 000007D1 6C65206E616D650D0A- <1>
    74 000007DA 24                  <1>
    75 000007DB 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    75 000007E4 756D626572206F6620- <1>
    75 000007ED 706172616D65746572- <1>
    75 000007F6 730D0A24            <1>
    76 000007FA 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    76 00000803 74696E6720746F2064- <1>
    76 0000080C 6576696365          <1>
    77 00000811 08200800            <1> backSpace   db BSP," ",BSP,NUL
    78                              <1> 
    79 00000815 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    80                              <1> 
    81 00000819 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    81 00000822 696679204F4E206F72- <1>
    81 0000082B 204F46460D0A24      <1>
    82 00000832 504154483D          <1> pathEVar db "PATH="
    83 00000837 50524F4D50543D      <1> promptEVar  db "PROMPT="
    14                                  %include "./Source/Utils/COMMAND/Source/cmdMain.asm"
    15                              <1> commandStart:
    16                              <1>     ;Resize Allocation, jump here with endpointer in rbx
    17                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
    18                              <1>     ; that the jump to safety won't be gobbled up when multitasking
    19 0000083E 49F7D8              <1>     neg r8  ;Convert r8 to -r8
    20 00000841 4A8D5C0311          <1>     lea rbx, qword [rbx + r8 + 11h]    ;Get # of bytes for COMMAND.COM
    21 00000846 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
    22 00000849 B44A                <1>     mov ah, 4Ah ;Realloc
    23 0000084B 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    24 0000084E CD41                <1>     int 41h
    25 00000850 EB5A                <1>     jmp short commandMain
    26                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    27 00000852 B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    28 00000857 CD41                <1>     int 41h
    29 00000859 668905ADF7FFFF      <1>     mov word [returnCode], ax
    30                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    31 00000860 488D151E0C0000      <1>     lea rdx, critErrorHandler
    32 00000867 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    33 0000086B B844250000          <1>     mov eax, 2544h
    34 00000870 CD41                <1>     int 41h
    35 00000872 488D159C0E0000      <1>     lea rdx, int43h
    36 00000879 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    37 0000087D B843250000          <1>     mov eax, 2543h
    38 00000882 CD41                <1>     int 41h
    39 00000884 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    40 0000088B 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    41 0000088F B842250000          <1>     mov eax, 2542h
    42 00000894 CD41                <1>     int 41h
    43                              <1> ;Close all handles from 5->MAX
    44 00000896 0FB70D82F7FFFF      <1>     movzx ecx, word [numHdls]
    45 0000089D BB05000000          <1>     mov ebx, 5
    46                              <1> .handleClose:
    47 000008A2 B43E                <1>     mov ah, 3Eh ;File close
    48 000008A4 CD41                <1>     int 41h
    49 000008A6 FFC3                <1>     inc ebx ;Goto next file
    50 000008A8 39CB                <1>     cmp ebx, ecx
    51 000008AA 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    52                              <1> commandMain:
    53                              <1> ;Setup Commandline
    54 000008AC FA                  <1>     cli
    55 000008AD 488B2551F7FFFF      <1>     mov rsp, qword [stackBottom]    ;Reset internal stack pointer pos
    56 000008B4 FB                  <1>     sti
    57 000008B5 FC                  <1>     cld ;Ensure stringops are done the right way
    58 000008B6 C605FCF7FFFF80      <1>     mov byte [inBuffer], 80h    ;Reset the buffer length
    59                              <1> .inputMain:
    60 000008BD E8690A0000          <1>     call clearCommandLineState
    61 000008C2 E8AA080000          <1>     call printCRLF
    62 000008C7 E8370A0000          <1>     call printPrompt
    63                              <1> 
    64 000008CC 488D15E6F7FFFF      <1>     lea rdx, inBuffer
    65 000008D3 B80A0C0000          <1>     mov eax, 0C0Ah  ;Do Buffered input
    66 000008D8 CD41                <1>     int 41h
    67 000008DA E892080000          <1>     call printCRLF  ;Note we have accepted input
    68                              <1> 
    69                              <1> ;First check we had something typed in of length greater than 1
    70                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    71 000008DF 803DD4F7FFFF01      <1>     cmp byte [inBuffer + 1], 1  ;Check input length valid
    72 000008E6 762A                <1>     jbe .dfltErrExit
    73                              <1>     ;Copy over the input text
    74 000008E8 488D35CAF7FFFF      <1>     lea rsi, inBuffer
    75 000008EF 488D3D43F8FFFF      <1>     lea rdi, cmdBuffer
    76 000008F6 B980000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    77 000008FB F3A4                <1>     rep movsb
    78 000008FD 31C0                <1>     xor eax, eax
    79 000008FF 66890588F7FFFF      <1>     mov word [cmdStartOff], ax  ;Clear start and end Off positions
    80 00000906 E814000000          <1>     call parseInput
    81 0000090B E8AD010000          <1>     call doCommandLine
    82 00000910 EBAB                <1>     jmp short .inputMain
    83                              <1> .dfltErrExit:
    84 00000912 488D151EFBFFFF      <1>     lea rdx, badCmd
    85 00000919 B409                <1>     mov ah, 09h
    86 0000091B CD41                <1>     int 41h
    87 0000091D EB9E                <1>     jmp short .inputMain
    88                              <1> 
    89                              <1> parseInput:
    90                              <1> ;EndOff is set up before entering this part
    91                              <1> ;Copies a nicely formatted version of the input command line
    92                              <1> ; without any redirections to psp.dta
    93 0000091F 488D3515F8FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
    94 00000926 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
    95 0000092D 0FB61D5BF7FFFF      <1>     movzx ebx, byte [cmdEndOff] ;Get the old end offset
    96 00000934 4801DE              <1>     add rsi, rbx    ;Move rsi to the start of this new command
    97 00000937 E8B8090000          <1>     call skipSpaces ;Skip any preceeding spaces
    98 0000093C 66AD                <1>     lodsw   ;Get the first two chars into ax
    99 0000093E 66890559F7FFFF      <1>     mov word [cmdDrvSpec], ax ;Store these chars as if they are the drvspec
   100 00000945 4881EE02000000      <1>     sub rsi, 2  ;Go back to the start of the command
   101 0000094C 56                  <1>     push rsi
   102 0000094D 57                  <1>     push rdi
   103 0000094E 488D3D64F8FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   104 00000955 57                  <1>     push rdi
   105 00000956 E868030000          <1>     call copyCommandTailItem
   106 0000095B 5F                  <1>     pop rdi
   107 0000095C 9C                  <1>     pushfq  ;Save the CF state
   108 0000095D E81A090000          <1>     call strlen
   109 00000962 FFC9                <1>     dec ecx ;Drop the terminating char from the count
   110 00000964 58                  <1>     pop rax ;Get the CF state in al
   111 00000965 5F                  <1>     pop rdi
   112 00000966 5E                  <1>     pop rsi
   113 00000967 F3A4                <1>     rep movsb   ;Now we copy the command into the psp command line
   114 00000969 A801                <1>     test al, 1  ;Was CF set?
   115 0000096B 0F8586000000        <1>     jnz .exit   ;If an embedded CR was found in the filename, exit!
   116                              <1> .cmdLineProcess:
   117 00000971 E87E090000          <1>     call skipSpaces ;Go to the next char in the input line
   118                              <1> .redirFound:
   119 00000976 AC                  <1>     lodsb   ;Get first non-space char (setupRedir skips spaces before ret)
   120 00000977 3C0D                <1>     cmp al, CR  ;If this was a CR, we stop processing
   121 00000979 747C                <1>     je .exit
   122 0000097B E8D6020000          <1>     call checkAndSetupRedir ;If not, check if we have a redir element
   123 00000980 7275                <1>     jc .exit    ;CF=CY only if pipe, which is equivalent to CR when processing
   124 00000982 74F2                <1>     jz .redirFound  ;If we had a < > or >>, proceed to check if next char CR
   125 00000984 B020                <1>     mov al, " "
   126 00000986 AA                  <1>     stosb   ;Store a space to make space for the command file parameter
   127 00000987 48FFCE              <1>     dec rsi ;Move rsi back to the first char
   128 0000098A F60511F7FFFFFF      <1>     test byte [arg1Flg], -1
   129 00000991 7521                <1>     jnz .arg2
   130                              <1> .arg1:
   131 00000993 C60508F7FFFFFF      <1>     mov byte [arg1Flg], -1
   132 0000099A E855090000          <1>     call skipSpaces
   133 0000099F 4889F0              <1>     mov rax, rsi
   134 000009A2 488D1D90F7FFFF      <1>     lea rbx, cmdBuffer
   135 000009A9 4829D8              <1>     sub rax, rbx
   136 000009AC 8805F1F6FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   137 000009B2 EB2A                <1>     jmp short .argCommon
   138                              <1> .arg2:
   139 000009B4 F605EAF6FFFFFF      <1>     test byte [arg2Flg], -1
   140 000009BB 7521                <1>     jnz .argCommon
   141 000009BD C605E1F6FFFFFF      <1>     mov byte [arg2Flg], -1
   142 000009C4 E82B090000          <1>     call skipSpaces
   143 000009C9 4889F0              <1>     mov rax, rsi
   144 000009CC 488D1D66F7FFFF      <1>     lea rbx, cmdBuffer
   145 000009D3 4829D8              <1>     sub rax, rbx
   146 000009D6 8805CAF6FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   147 000009DC EB00                <1>     jmp short .argCommon
   148                              <1> .argCommon:
   149                              <1>     ;More than two arguments? Do nothing more than just copy it
   150                              <1>     ; over. If we encounter an embedded CR, exit there too
   151 000009DE E811090000          <1>     call skipSpaces
   152 000009E3 803E0D              <1>     cmp byte [rsi], CR  ;Are we at the end of the commandline?
   153 000009E6 740F                <1>     je .exit
   154                              <1>     ;If not, we copy it over
   155 000009E8 E8D6020000          <1>     call copyCommandTailItem    ;Stores a terminating null we dont want
   156 000009ED 488D7FFF            <1>     lea rdi, qword [rdi - 1]    ;Point back at the inserted terminating null
   157 000009F1 0F837AFFFFFF        <1>     jnc .cmdLineProcess
   158                              <1> .exit:
   159 000009F7 488D1D3BF7FFFF      <1>     lea rbx, cmdBuffer
   160 000009FE 48FFCE              <1>     dec rsi
   161 00000A01 4829DE              <1>     sub rsi, rbx    ;Get the offset into the command line
   162 00000A04 89F3                <1>     mov ebx, esi
   163 00000A06 881D83F6FFFF        <1>     mov byte [cmdEndOff], bl    ;Store the offset to the terminating char
   164 00000A0C B00D                <1>     mov al, CR
   165 00000A0E AA                  <1>     stosb   ;Store the terminating CR in the psp command line
   166                              <1>     ;Now compute the command line length 
   167 00000A0F 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine] 
   168 00000A16 B00D                <1>     mov al, CR
   169 00000A18 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   170 00000A1A FFC9                <1>     dec ecx ;rcx = -1
   171 00000A1C F2AE                <1>     repne scasb
   172 00000A1E F7D1                <1>     not ecx
   173 00000A20 FEC9                <1>     dec cl  ;Dont include terminating CR
   174 00000A22 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   175 00000A29 880F                <1>     mov byte [rdi], cl
   176                              <1>     ;Before returning, we copy the command name to cmdName
   177 00000A2B 488D3D87F7FFFF      <1>     lea rdi, cmdPathSpec
   178 00000A32 4889FB              <1>     mov rbx, rdi    ;Use rbx as the ptr to the first char in the commandspec
   179 00000A35 30C0                <1>     xor al, al  ;Search for the terminating null
   180 00000A37 B94F000000          <1>     mov ecx, fileSpecZL ;Max number of chars the length could be
   181 00000A3C F2AE                <1>     repne scasb
   182 00000A3E 48FFCF              <1>     dec rdi ;Go to the last char in the command
   183 00000A41 4889FE              <1>     mov rsi, rdi
   184 00000A44 FD                  <1>     std ;Now we go backwards to where rsi = rbx OR byte [rsi] = pathSep
   185                              <1> .keepSearching:
   186 00000A45 AC                  <1>     lodsb
   187 00000A46 3A05D7F5FFFF        <1>     cmp al, byte [pathSep]
   188 00000A4C 740B                <1>     je .cmdStartFnd
   189 00000A4E 4839DE              <1>     cmp rsi, rbx
   190 00000A51 75F2                <1>     jne .keepSearching
   191 00000A53 48FFCE              <1>     dec rsi ;Go back two to go forwards again
   192 00000A56 48FFCE              <1>     dec rsi
   193                              <1> .cmdStartFnd:
   194 00000A59 48FFC6              <1>     inc rsi
   195 00000A5C 48FFC6              <1>     inc rsi ;Go past the pathsep
   196 00000A5F FC                  <1>     cld ;Go the sane way again
   197 00000A60 488D3DBAF7FFFF      <1>     lea rdi, qword [cmdName + 1]    ;First byte is for the length of the name
   198 00000A67 57                  <1>     push rdi    ;Cleanse the field before usage (not strictly necessary)
   199 00000A68 B90E000000          <1>     mov ecx, cmdNameL
   200 00000A6D 30C0                <1>     xor al, al
   201 00000A6F F3AA                <1>     rep stosb
   202 00000A71 5F                  <1>     pop rdi
   203 00000A72 31C9                <1>     xor ecx, ecx
   204 00000A74 56                  <1>     push rsi    ;Save the location of the start byte of the command name
   205                              <1> .cmdGetChar:
   206 00000A75 AC                  <1>     lodsb
   207 00000A76 84C0                <1>     test al, al ;Did we find the terminating null?
   208 00000A78 7411                <1>     jz .nameLenFnd
   209 00000A7A 3C2E                <1>     cmp al, "." ;Extension sep also terminates
   210 00000A7C 740D                <1>     je .nameLenFnd
   211 00000A7E 24DF                <1>     and al, 0DFh    ;Else uppercase the char
   212 00000A80 AA                  <1>     stosb   ;and store it
   213 00000A81 FFC1                <1>     inc ecx
   214 00000A83 81F90B000000        <1>     cmp ecx, 11 ;Max command length is 11
   215 00000A89 72EA                <1>     jb .cmdGetChar
   216                              <1> .nameLenFnd:
   217 00000A8B 880D8FF7FFFF        <1>     mov byte [cmdName], cl  ;Store the name length now
   218                              <1>     ;Now finally, create a FCB filespec
   219 00000A91 488D3D70F7FFFF      <1>     lea rdi, fcbCmdSpec
   220 00000A98 57                  <1>     push rdi
   221 00000A99 B90B000000          <1>     mov ecx, fcbNameL
   222 00000A9E B020                <1>     mov al, " " ;Fill with spaces
   223 00000AA0 F3AA                <1>     rep stosb
   224 00000AA2 5F                  <1>     pop rdi
   225 00000AA3 5E                  <1>     pop rsi ;Get back the location of the start byte of the command name
   226 00000AA4 E893080000          <1>     call asciiToFCB
   227 00000AA9 488D3558F7FFFF      <1>     lea rsi, fcbCmdSpec
   228 00000AB0 488D3D5CF7FFFF      <1>     lea rdi, cmdSpec
   229 00000AB7 E8BC080000          <1>     call FCBToAsciiz
   230                              <1>     return
    19                              <2> %%_ret:
    20 00000ABC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   231                              <1> 
   232                              <1> doCommandLine:
   233 00000ABD 488D3577F6FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
   234 00000AC4 488D3DDDF5FFFF      <1>     lea rdi, cmdFcb
   235 00000ACB B801290000          <1>     mov eax, 2901h  ;Skip leading blanks
   236 00000AD0 CD41                <1>     int 41h
   237 00000AD2 0FB71DC5F5FFFF      <1>     movzx ebx, word [cmdDrvSpec]    ;Get the drive specifier
   238 00000AD9 80FF3A              <1>     cmp bh, ":"
   239 00000ADC 752E                <1>     jne .noDriveSpecified
   240 00000ADE 88DA                <1>     mov dl, bl      ;Move the drive letter in dl
   241 00000AE0 80E2DF              <1>     and dl, 0DFh    ;Make the drive letter upper case
   242 00000AE3 80EA41              <1>     sub dl, "A"     ;And make it a 0 based drive letter
   243 00000AE6 3CFF                <1>     cmp al, -1  ;Int 41h returns AL = -1 if bad drive specified
   244 00000AE8 7415                <1>     je .badDrive
   245                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   246 00000AEA 803D2FF7FFFF02      <1>     cmp byte [cmdName], 2
   247 00000AF1 7519                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   248 00000AF3 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   249 00000AF5 CD41                <1>     int 41h 
   250 00000AF7 B419                <1>     mov ah, 19h
   251 00000AF9 CD41                <1>     int 41h     ;Get current drive
   252 00000AFB 38D0                <1>     cmp al, dl  ;If the drive was set, all is well
   253                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000AFD 74(BC)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   254                              <1> .badDrive:
   255 00000AFF 488D1541FAFFFF      <1>     lea rdx, badDrv
   256 00000B06 B409                <1>     mov ah, 09h
   257 00000B08 CD41                <1>     int 41h
   258 00000B0A F9                  <1>     stc
   259                              <1>     return
    19                              <2> %%_ret:
    20 00000B0B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   260                              <1> .noDriveSpecified:
   261                              <1> ;Now we set the two FCB's in the command line
   262 00000B0C F6058FF5FFFFFF      <1>     test byte [arg1Flg], -1
   263 00000B13 744D                <1>     jz .fcbArgsDone
   264 00000B15 0FB60587F5FFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   265 00000B1C 488D3516F6FFFF      <1>     lea rsi, cmdBuffer
   266 00000B23 4801C6              <1>     add rsi, rax    ;Point to first argument
   267 00000B26 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   268 00000B2A B801290000          <1>     mov eax, 2901h
   269 00000B2F CD41                <1>     int 41h
   270 00000B31 88056DF5FFFF        <1>     mov byte [arg1FCBret], al
   271 00000B37 F60567F5FFFFFF      <1>     test byte [arg2Flg], -1
   272 00000B3E 7422                <1>     jz .fcbArgsDone
   273 00000B40 0FB6055FF5FFFF      <1>     movzx eax, byte [arg2Off]
   274 00000B47 488D35EBF5FFFF      <1>     lea rsi, cmdBuffer
   275 00000B4E 4801C6              <1>     add rsi, rax    ;Point to first argument
   276 00000B51 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   277 00000B55 B801290000          <1>     mov eax, 2901h
   278 00000B5A CD41                <1>     int 41h
   279 00000B5C 880545F5FFFF        <1>     mov byte [arg2FCBret], al
   280                              <1> .fcbArgsDone:
   281 00000B62 488D35D0F5FFFF      <1>     lea rsi, cmdBuffer
   282 00000B69 488D1DB0F6FFFF      <1>     lea rbx, cmdName
   283 00000B70 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   284 00000B75 BAFFFF0000          <1>     mov edx, 0FFFFh
   285 00000B7A B5FF                <1>     mov ch, -1
   286 00000B7C CD4F                <1>     int 4Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   287                              <1>             ;        al = 0  if the command should be executed as usual
   288 00000B7E B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   289 00000B83 BAFFFF0000          <1>     mov edx, 0FFFFh
   290 00000B88 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   291 00000B8A CD4F                <1>     int 4Fh
   292 00000B8C 741D                <1>     jz .executeInternal
   293                              <1>     ;Here we execute externally and return to the prompt
   294                              <1>     ; as if it was an internal execution
   295 00000B8E 488D3524F5FFFF      <1>     lea rsi, inBuffer ;Point to this built buffer
   296 00000B95 488D1D0CF5FFFF      <1>     lea rbx, cmdFcb
   297 00000B9C B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   298 00000BA1 BAFFFF0000          <1>     mov edx, 0FFFFh
   299 00000BA6 B5FF                <1>     mov ch, -1
   300 00000BA8 CD4F                <1>     int 4Fh 
   301                              <1>     return
    19                              <2> %%_ret:
    20 00000BAA C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   302                              <1> .executeInternal:
   303                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   304                              <1> ;rsi points after the command terminator in the command tail
   305 00000BAB 488D1DB3F7FFFF      <1>     lea rbx, functionTable
   306                              <1> .nextEntry:
   307 00000BB2 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   308 00000BB5 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   309 00000BB8 743D                <1>     je .external      ;If so, check externally now
   310 00000BBA 380D60F6FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   311 00000BC0 7529                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   312                              <1>     ;Here they have the same length so lets see if the name is the same
   313 00000BC2 56                  <1>     push rsi
   314                              <1>     ;ecx has the length to compare
   315 00000BC3 51                  <1>     push rcx
   316 00000BC4 488D7301            <1>     lea rsi, qword [rbx + 1]
   317 00000BC8 488D3D52F6FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   318 00000BCF F3A6                <1>     rep cmpsb   ;Check the strings are equal
   319 00000BD1 59                  <1>     pop rcx
   320 00000BD2 5E                  <1>     pop rsi
   321 00000BD3 7516                <1>     jne .gotoNextEntry
   322                              <1>     ;Here it was found both strings are equal
   323 00000BD5 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   324 00000BDA 480FB71F            <1>     movzx rbx, word [rdi]
   325 00000BDE 488D3D1BF4FFFF      <1>     lea rdi, startLbl
   326 00000BE5 4801FB              <1>     add rbx, rdi
   327 00000BE8 FFD3                <1>     call rbx    ;Call this function...
   328                              <1>     return  ;... and return
    19                              <2> %%_ret:
    20 00000BEA C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   329                              <1> .gotoNextEntry:
   330 00000BEB 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   331 00000BF2 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   332 00000BF5 EBBB                <1>     jmp short .nextEntry
   333                              <1> 
   334                              <1> .external:
   335                              <1> ;Here we must search the CWD or all path componants before failing
   336                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
   337 00000BF7 E925000000          <1>     jmp .dfltErrExit    ;Catch all for now
   338 00000BFC 8B05AFF4FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   339 00000C02 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   340 00000C07 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   341 00000C0C 3D20202020          <1>     cmp eax, "    " ;Only if we have four spaces do we proceed here
   342 00000C11 741A                <1>     je .noExt
   343 00000C13 E817000000          <1>     call checkExtensionExec ;ZF=ZE => Executable
   344 00000C18 7507                <1>     jnz .dfltErrExit
   345                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
   346 00000C1A 7205                <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
   347                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
   348                              <1>     ;So it is a com or exe that we are searching for for now
   349                              <1>     
   350 00000C1C E900000000          <1>     jmp .dfltErrExit
   351                              <1> .dfltErrExit:
   352 00000C21 488D150FF8FFFF      <1>     lea rdx, badCmd
   353 00000C28 B409                <1>     mov ah, 09h
   354 00000C2A CD41                <1>     int 41h
   355                              <1>     return
    19                              <2> %%_ret:
    20 00000C2C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   356                              <1> .noExt:
   357                              <1>     ;Here we must search for the first file with a valid extension.
   358                              <1>     ;Use bl as flags. bl[0] => COM found, bl[1] => EXE found, bl[2] => BAT found
   359 00000C2D 31DB                <1>     xor ebx, ebx
   360                              <1>     ;If relative path, search CWD. If absolute path, search absolute path.
   361                              <1>     ;If nothing, only then loop through each dir in the path for provided
   362                              <1>     ; pathspec (relative case), or filename (absolute case)
   363                              <1> 
   364                              <1> 
   365                              <1> 
   366                              <1> checkExtensionExec:
   367                              <1> ;Checks the extension field of cmdFcb is .COM, .EXE, .BAT in that order
   368                              <1> ;Returns: ZF=ZE if executable. ZF=NZ if not executable.
   369                              <1> ;         If ZF=ZE and CF=CY => Batch file
   370 00000C2F 8B057CF4FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   371 00000C35 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   372 00000C3A 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   373 00000C3F 3D434F4D20          <1>     cmp eax, "COM "
   374                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000C44 74(2C)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   375 00000C46 3D45584520          <1>     cmp eax, "EXE "
   376                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000C4B 74(2C)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   377 00000C4D 3D42415420          <1>     cmp eax, "BAT "
   378                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000C52 75(2C)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   379 00000C54 F9                  <1>     stc
   380                              <1>     return
    19                              <2> %%_ret:
    20 00000C55 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   381                              <1> 
   382                              <1> checkAndSetupRedir:
   383                              <1> ;Checks and sets up redir as appropriate
   384                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   385                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   386                              <1> ;Output: ZF=NZ => No redir
   387                              <1> ;        ZF=ZY => Redir
   388                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   389                              <1> ;CF=CY if pipe set or an embedded CR found
   390 00000C56 57                  <1>     push rdi
   391 00000C57 3C3C                <1>     cmp al, "<"
   392 00000C59 740B                <1>     je .inputRedir
   393 00000C5B 3C3E                <1>     cmp al, ">"
   394 00000C5D 742A                <1>     je .outputRedir
   395 00000C5F 3C7C                <1>     cmp al, "|"
   396 00000C61 7454                <1>     je .pipeSetup
   397 00000C63 F8                  <1>     clc
   398                              <1> .redirExit:
   399 00000C64 5F                  <1>     pop rdi
   400                              <1>     return
    19                              <2> %%_ret:
    20 00000C65 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   401                              <1> .inputRedir:
   402 00000C66 C60533F4FFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   403 00000C6D 488D3DBAF5FFFF      <1>     lea rdi, rdrInFilespec
   404 00000C74 E87B060000          <1>     call skipSpaces ;Skip spaces between < and the filespec
   405 00000C79 E845000000          <1>     call copyCommandTailItem
   406 00000C7E 72E4                <1>     jc .redirExit
   407 00000C80 E86F060000          <1>     call skipSpaces
   408 00000C85 30C0                <1>     xor al, al
   409 00000C87 EBDB                <1>     jmp short .redirExit
   410                              <1> .outputRedir:
   411 00000C89 C60511F4FFFF01      <1>     mov byte [redirOut], 1
   412 00000C90 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   413 00000C93 7506                <1>     jne .notDouble
   414 00000C95 FE0506F4FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   415                              <1> .notDouble:
   416 00000C9B 488D3DDBF5FFFF      <1>     lea rdi, rdrOutFilespec
   417 00000CA2 E84D060000          <1>     call skipSpaces
   418 00000CA7 E817000000          <1>     call copyCommandTailItem
   419 00000CAC 72B6                <1>     jc .redirExit
   420 00000CAE E841060000          <1>     call skipSpaces
   421 00000CB3 30C0                <1>     xor al, al
   422 00000CB5 EBAD                <1>     jmp short .redirExit
   423                              <1> .pipeSetup:
   424 00000CB7 C605D2F3FFFFFF      <1>     mov byte [pipeFlag], -1
   425 00000CBE 30C0                <1>     xor al, al
   426 00000CC0 F9                  <1>     stc
   427 00000CC1 5F                  <1>     pop rdi
   428                              <1>     return
    19                              <2> %%_ret:
    20 00000CC2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   429                              <1> 
   430                              <1> copyCommandTailItem:
   431                              <1> ;Copies a sentence from the command tail until a terminator is found.
   432                              <1> ;Stores a terminating null in the destination
   433                              <1> ;Input: rsi = Start of the item to copy
   434                              <1> ;       rdi = Location for copy
   435                              <1> ;Output: Sentence copied with a null terminator inserted.
   436                              <1> ; If CF=CY, embedded CR encountered
   437 00000CC3 AC                  <1>     lodsb
   438 00000CC4 3C0D                <1>     cmp al, CR
   439 00000CC6 741A                <1>     je .endOfInput
   440 00000CC8 E8F3050000          <1>     call isALterminator
   441 00000CCD 741A                <1>     jz .exit
   442 00000CCF 3A054EF3FFFF        <1>     cmp al, byte [pathSep]
   443 00000CD5 7412                <1>     je .exit
   444 00000CD7 3A0547F3FFFF        <1>     cmp al, byte [switchChar]
   445 00000CDD 740A                <1>     je .exit
   446 00000CDF AA                  <1>     stosb
   447 00000CE0 EBE1                <1>     jmp short copyCommandTailItem
   448                              <1> .endOfInput:
   449 00000CE2 E802000000          <1>     call .exit
   450 00000CE7 F9                  <1>     stc 
   451                              <1>     return
    19                              <2> %%_ret:
    20 00000CE8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   452                              <1> .exit:
   453 00000CE9 30C0                <1>     xor al, al
   454 00000CEB AA                  <1>     stosb
   455                              <1>     return
    19                              <2> %%_ret:
    20 00000CEC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   456                              <1> 
   457                              <1> 
   458                              <1> int4Eh:   ;Interrupt interface for parsing and executing command lines
   459                              <1> ;Input: rsi points to the count byte of a command line
   460 00000CED 4150                <1>     push r8
   461 00000CEF 4151                <1>     push r9
   462 00000CF1 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   463 00000CF3 CD41                <1>     int 41h
   464 00000CF5 52                  <1>     push rdx    ;Save on the stack
   465 00000CF6 488D1D03F2FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   466 00000CFD B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   467 00000CFF CD41                <1>     int 41h
   468 00000D01 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   469 00000D04 4989D9              <1>     mov r9, rbx
   470 00000D07 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   471 00000D0E B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   472 00000D13 F348A5              <1>     rep movsq   ;Copy command line over
   473                              <1>     ;call doCommandLine
   474 00000D16 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   475 00000D17 B450                <1>     mov ah, 50h ;Set Current PSP
   476 00000D19 CD41                <1>     int 41h
   477 00000D1B 4159                <1>     pop r9
   478 00000D1D 4158                <1>     pop r8
   479 00000D1F 48CF                <1>     iretq
    15                                  %include "./Source/Utils/COMMAND/Source/cmdFunc.asm"
    16                              <1> dir:
    17 00000D21 C60524F6FFFF00      <1>     mov byte [dirPrnType], 0    ;Clear DIR flags
    18 00000D28 C6051EF6FFFF00      <1>     mov byte [dirLineCtr], 0
    19 00000D2F C60519F6FFFF00      <1>     mov byte [dirPathOff], 0    
    20 00000D36 C60513F6FFFFFF      <1>     mov byte [dirVolLbl], -1    ;Mark as no label
    21                              <1>     ;Start by scanning for the switches
    22 00000D3D 488D3DF6F3FFFF      <1>     lea rdi, cmdBuffer + 1  ;Goto command line input chars count
    23 00000D44 0FB60F              <1>     movzx ecx, byte [rdi]   ;Get number of chars typed
    24 00000D47 48FFC7              <1>     inc rdi ;Goto first char typed in
    25 00000D4A 4889FE              <1>     mov rsi, rdi    ;Use rsi as start of buffer counter
    26 00000D4D 8A05D1F2FFFF        <1>     mov al, byte [switchChar]   ;Scan for switchchars
    27                              <1> .switchScan:
    28 00000D53 F2AE                <1>     repne scasb ;Scan for a switchchar
    29 00000D55 67E322              <1>     jecxz .switchScanDone
    30 00000D58 8A07                <1>     mov al, byte [rdi]  ;Get the byte pointed to by rdi
    31 00000D5A 24DF                <1>     and al, 0DFh    ;UC it
    32 00000D5C 3C57                <1>     cmp al, "W" ;Wide print mode?
    33 00000D5E 7509                <1>     jne .notWideSw
    34 00000D60 800DE5F5FFFF01      <1>     or byte [dirPrnType], 1 ;Set the correct bit
    35 00000D67 EBEA                <1>     jmp short .switchScan
    36                              <1> .notWideSw:
    37 00000D69 3C50                <1>     cmp al, "P" ;Pause mode?
    38 00000D6B 0F85A1010000        <1>     jne .badParam   ;If a switch other than /P or /W, fail
    39 00000D71 800DD4F5FFFF02      <1>     or byte [dirPrnType], 2 ;Set correct bit
    40 00000D78 EBD9                <1>     jmp short .switchScan
    41                              <1> .switchScanDone:
    42                              <1> ;If no args, only switches, we search CWD
    43                              <1> ;If one arg, search that 
    44                              <1> ;If more than one, fail
    45 00000D7A 488D3DBAF3FFFF      <1>     lea rdi, cmdBuffer + 2
    46 00000D81 4889FE              <1>     mov rsi, rdi
    47 00000D84 E86B050000          <1>     call skipSpaces ;Skip leading spaces
    48 00000D89 4881C603000000      <1>     add rsi, 3  ;Go past the DIR (always three chars)
    49 00000D90 803E0D              <1>     cmp byte [rsi], CR
    50 00000D93 7436                <1>     je .eocReached
    51                              <1> .pathSearch:
    52 00000D95 E85A050000          <1>     call skipSpaces ;Now skip intermediate spaces to next non-space
    53 00000D9A 8A0584F2FFFF        <1>     mov al, byte [switchChar]   ;Is this a switch?
    54 00000DA0 3806                <1>     cmp byte [rsi], al
    55 00000DA2 741B                <1>     je .pathSearchSwitch    ;If a switch, skip it, find switch terminator
    56 00000DA4 803DA4F5FFFF00      <1>     cmp byte [dirPathOff], 0    ;Did we previously get an argument?
    57 00000DAB 0F8561010000        <1>     jne .badParam ;If so, error
    58 00000DB1 4889F0              <1>     mov rax, rsi    ;Else, compute the offset in the cmdBuffer
    59 00000DB4 4829F8              <1>     sub rax, rdi    ;Offset from the cmdBuffer + 2
    60 00000DB7 0402                <1>     add al, 2       ;Make it an offset from cmdBuffer
    61 00000DB9 880590F5FFFF        <1>     mov byte [dirPathOff], al   ;And save it!
    62                              <1> .pathSearchSwitch:
    63 00000DBF E8C7040000          <1>     call findTerminatorOrEOC
    64 00000DC4 7205                <1>     jc .eocReached
    65 00000DC6 48FFC6              <1>     inc rsi ;Go to next char
    66 00000DC9 EBCA                <1>     jmp short .pathSearch
    67                              <1> .eocReached:
    68 00000DCB 803D7DF5FFFF00      <1>     cmp byte [dirPathOff], 0
    69 00000DD2 7405                <1>     je .dirCWD
    70 00000DD4 E939010000          <1>     jmp .badParam   ;Temp measure
    71                              <1> .dirCWD:
    72                              <1>     ;Build current working dir and append a \*.* to it 
    73                              <1>     ;First we search the root for a label
    74 00000DD9 488D3D7DF5FFFF      <1>     lea rdi, dirVolPathBuf
    75 00000DE0 488D35E5F4FFFF      <1>     lea rsi, searchSpec ;Will need to create the same X:\ here too
    76 00000DE7 E88B040000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
    77 00000DEC 0441                <1>     add al, "A"
    78 00000DEE B43A                <1>     mov ah, ":" ;ax has X: now to store 
    79 00000DF0 66AB                <1>     stosw
    80 00000DF2 668906              <1>     mov word [rsi], ax
    81 00000DF5 4881C602000000      <1>     add rsi, 2
    82 00000DFC 8A0521F2FFFF        <1>     mov al, byte [pathSep]
    83 00000E02 AA                  <1>     stosb
    84 00000E03 8806                <1>     mov byte [rsi], al
    85 00000E05 B82A2E2A00          <1>     mov eax, 002A2E2Ah  ;*.*,0
    86 00000E0A AB                  <1>     stosd
    87 00000E0B B42F                <1>     mov ah, 2Fh ;Get current DTA in rbx
    88 00000E0D CD41                <1>     int 41h 
    89 00000E0F 53                  <1>     push rbx    ;Preserve it on the stack
    90                              <1> 
    91 00000E10 488D15A1F2FFFF      <1>     lea rdx, cmdFFBlock
    92 00000E17 B41A                <1>     mov ah, 1Ah ;Set DTA to internal ffblock
    93 00000E19 CD41                <1>     int 41h
    94 00000E1B 488D153BF5FFFF      <1>     lea rdx, dirVolPathBuf
    95 00000E22 66B90800            <1>     mov cx, dirVolumeID
    96 00000E26 B44E                <1>     mov ah, 4Eh ;Find first
    97 00000E28 CD41                <1>     int 41h
    98 00000E2A 7221                <1>     jc .skipVolLbl
    99 00000E2C 488D35A3F2FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   100 00000E33 488D3D16F5FFFF      <1>     lea rdi, dirVolLbl
   101 00000E3A B90B000000          <1>     mov ecx, 11 ;Get the 11 chars of the volume label
   102                              <1> .dirLblCopy:
   103 00000E3F AC                  <1>     lodsb   ;Get the first char
   104 00000E40 3C00                <1>     cmp al, 0
   105 00000E42 7409                <1>     je .skipVolLbl
   106 00000E44 3C2E                <1>     cmp al, "."
   107 00000E46 7401                <1>     je .dirLblSkipStore
   108 00000E48 AA                  <1>     stosb
   109                              <1> .dirLblSkipStore:
   110 00000E49 FFC9                <1>     dec ecx
   111 00000E4B 75F2                <1>     jnz .dirLblCopy
   112                              <1> .skipVolLbl:
   113                              <1> ;Print volume label information now
   114 00000E4D E84C000000          <1>     call .dirPrintVolInfo
   115 00000E52 488D3D76F4FFFF      <1>     lea rdi, searchSpec + 3 ;Go to the fourth char in the field
   116 00000E59 B447                <1>     mov ah, 47h ;Get Current Working Directory
   117 00000E5B 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   118 00000E5E 8A1568F4FFFF        <1>     mov dl, byte [searchSpec]
   119 00000E64 80EA40              <1>     sub dl, "@" ;Get 1 based drive letter
   120 00000E67 CD41                <1>     int 41h ;Overrwrite it with the current directory
   121 00000E69 488D3D5CF4FFFF      <1>     lea rdi, searchSpec
   122 00000E70 E807040000          <1>     call strlen
   123 00000E75 FFC9                <1>     dec ecx
   124 00000E77 C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   125 00000E7B 488D1545F8FFFF      <1>     lea rdx, dirMain
   126 00000E82 B409                <1>     mov ah, 09h
   127 00000E84 CD41                <1>     int 41h
   128 00000E86 4889FA              <1>     mov rdx, rdi    ;Print the current directory we are working on
   129 00000E89 B409                <1>     mov ah, 09h
   130 00000E8B CD41                <1>     int 41h
   131 00000E8D 488D154BF5FFFF      <1>     lea rdx, crlf
   132 00000E94 B409                <1>     mov ah, 09h
   133 00000E96 CD41                <1>     int 41h
   134                              <1>     ;Now we search for the files
   135                              <1> 
   136                              <1> 
   137                              <1> .dirCWDExit:
   138 00000E98 5A                  <1>     pop rdx
   139 00000E99 B41A                <1>     mov ah, 1Ah
   140 00000E9B CD41                <1>     int 41h
   141                              <1>     return
    19                              <2> %%_ret:
    20 00000E9D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   142                              <1> 
   143                              <1> .dirPrintVolInfo:
   144 00000E9E 488D153AF5FFFF      <1>     lea rdx, crlf
   145 00000EA5 B409                <1>     mov ah, 09h
   146 00000EA7 CD41                <1>     int 41h
   147 00000EA9 488D158AF7FFFF      <1>     lea rdx, volMes
   148 00000EB0 B409                <1>     mov ah, 09h
   149 00000EB2 CD41                <1>     int 41h
   150 00000EB4 8A15A3F4FFFF        <1>     mov dl, byte [dirVolPathBuf]   ;Print the drive letter out
   151 00000EBA B402                <1>     mov ah, 02h
   152 00000EBC CD41                <1>     int 41h
   153 00000EBE 803D8AF4FFFFFF      <1>     cmp byte [dirPathOff], -1   ;No volume ID marker
   154 00000EC5 7517                <1>     jne .dirVolIDOk
   155 00000EC7 488D1583F7FFFF      <1>     lea rdx, volNo
   156 00000ECE B409                <1>     mov ah, 09h
   157 00000ED0 CD41                <1>     int 41h
   158 00000ED2 488D1506F5FFFF      <1>     lea rdx, crlf
   159 00000ED9 B409                <1>     mov ah, 09h
   160 00000EDB CD41                <1>     int 41h
   161                              <1>     return
    19                              <2> %%_ret:
    20 00000EDD C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   162                              <1> .dirVolIDOk:
   163 00000EDE 488D1567F7FFFF      <1>     lea rdx, volOk
   164 00000EE5 B409                <1>     mov ah, 09h
   165 00000EE7 CD41                <1>     int 41h
   166 00000EE9 488D3D60F4FFFF      <1>     lea rdi, dirVolLbl
   167 00000EF0 E887030000          <1>     call strlen
   168 00000EF5 FFC9                <1>     dec ecx
   169 00000EF7 C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   170 00000EFB 488D154EF4FFFF      <1>     lea rdx, dirVolLbl
   171 00000F02 B409                <1>     mov ah, 09h
   172 00000F04 CD41                <1>     int 41h
   173 00000F06 488D15D2F4FFFF      <1>     lea rdx, crlf
   174 00000F0D B409                <1>     mov ah, 09h
   175 00000F0F CD41                <1>     int 41h
   176                              <1>     return
    19                              <2> %%_ret:
    20 00000F11 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   177                              <1> 
   178                              <1> 
   179                              <1> 
   180                              <1> .badParam:
   181 00000F12 488D156BF6FFFF      <1>     lea rdx, badParm
   182 00000F19 B409                <1>     mov ah, 09h
   183 00000F1B CD41                <1>     int 41h
   184                              <1>     return
    19                              <2> %%_ret:
    20 00000F1D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   185                              <1> 
   186                              <1> 
   187                              <1> 
   188                              <1> chdir:
   189 00000F1E F6057DF1FFFFFF      <1>     test byte [arg1Flg], -1
   190 00000F25 754D                <1>     jnz .changeDir
   191                              <1>     ;Print CWD
   192                              <1> .printCWD:
   193 00000F27 E8AF020000          <1>     call putCWDInPrompt ;Exactly the same procedure
   194 00000F2C E840020000          <1>     call printCRLF
   195                              <1>     return
    19                              <2> %%_ret:
    20 00000F31 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   196                              <1> .printDiskCWD:
   197                              <1> ;Print CWD for a specified drive
   198 00000F32 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   199 00000F36 88D0                <1>     mov al, dl
   200 00000F38 0440                <1>     add al, "@" ;Get the UC letter
   201 00000F3A B43A                <1>     mov ah, ":"
   202 00000F3C 488D3D89F3FFFF      <1>     lea rdi, searchSpec
   203 00000F43 66AB                <1>     stosw   ;Store X:, rdi+=2
   204 00000F45 8A05D8F0FFFF        <1>     mov al, byte [pathSep]
   205 00000F4B AA                  <1>     stosb   ;Store pathSep, inc rdi
   206 00000F4C B447                <1>     mov ah, 47h ;Get Current Working Directory
   207 00000F4E 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   208 00000F51 CD41                <1>     int 41h
   209 00000F53 E824030000          <1>     call strlen
   210 00000F58 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   211 00000F5E B440                <1>     mov ah, 40h ;Write to handle
   212 00000F60 BB01000000          <1>     mov ebx, 1  ;STDOUT
   213 00000F65 488D1560F3FFFF      <1>     lea rdx, searchSpec
   214 00000F6C CD41                <1>     int 41h
   215 00000F6E E8FE010000          <1>     call printCRLF
   216                              <1>     return
    19                              <2> %%_ret:
    20 00000F73 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   217                              <1> .changeDir:
   218 00000F74 8A052AF1FFFF        <1>     mov al, byte [arg1FCBret]
   219 00000F7A 3CFF                <1>     cmp al, -1 
   220 00000F7C 743C                <1>     je .badDrv  ;IF the drive is good, but FCB name blank, either X: or \ 
   221 00000F7E 4180785D20          <1>     cmp byte [r8 + fcb1 + fcb.filename], " "
   222 00000F83 7520                <1>     jne .getFQPath
   223                              <1>     ;Now we double check that on the command line we have . or ..
   224 00000F85 0FB60517F1FFFF      <1>     movzx eax, byte [arg1Off]
   225 00000F8C 488D35A6F1FFFF      <1>     lea rsi, cmdBuffer
   226 00000F93 4801C6              <1>     add rsi, rax
   227 00000F96 8A0587F0FFFF        <1>     mov al, byte [pathSep]
   228 00000F9C 3806                <1>     cmp byte [rsi], al  ;Is the first char a pathsep?
   229 00000F9E 7405                <1>     je .getFQPath
   230 00000FA0 803E2E              <1>     cmp byte [rsi], "."
   231 00000FA3 758D                <1>     jne .printDiskCWD
   232                              <1>     ;If the path is . or .., its acceptable, else fail
   233                              <1> .getFQPath:
   234 00000FA5 E80E040000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   235 00000FAA 721D                <1>     jc .badDir  ;If this returns CF=CY, its a badDir
   236 00000FAC 488D1519F3FFFF      <1>     lea rdx, searchSpec
   237 00000FB3 B43B                <1>     mov ah, 3Bh ;CHDIR
   238 00000FB5 CD41                <1>     int 41h
   239 00000FB7 7210                <1>     jc .badDir
   240                              <1>     return
    19                              <2> %%_ret:
    20 00000FB9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   241                              <1> 
   242                              <1> .badDrv:
   243 00000FBA 488D1586F5FFFF      <1>     lea rdx, badDrv
   244 00000FC1 B800090000          <1>     mov eax, 0900h
   245 00000FC6 CD41                <1>     int 41h
   246                              <1>     return
    19                              <2> %%_ret:
    20 00000FC8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   247                              <1> .badDir:
   248 00000FC9 488D158FF6FFFF      <1>     lea rdx, badDir
   249 00000FD0 B800090000          <1>     mov eax, 0900h
   250 00000FD5 CD41                <1>     int 41h
   251                              <1>     return
    19                              <2> %%_ret:
    20 00000FD7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   252                              <1> 
   253                              <1> 
   254                              <1> mkdir:
   255 00000FD8 F605C3F0FFFFFF      <1>     test byte [arg1Flg], -1
   256 00000FDF 744D                <1>     jz .badParams
   257 00000FE1 F605BDF0FFFFFF      <1>     test byte [arg2Flg], -1
   258 00000FE8 7544                <1>     jnz .badParams
   259                              <1>     ;We have exactly one argument
   260 00000FEA 8A05B4F0FFFF        <1>     mov al, byte [arg1FCBret]
   261 00000FF0 3CFF                <1>     cmp al, -1 
   262 00000FF2 742B                <1>     je .badDrv  ;If a drive was specified and was bad, jump
   263 00000FF4 E8BF030000          <1>     call buildCommandPath
   264 00000FF9 7215                <1>     jc .badMake
   265 00000FFB 488D15CAF2FFFF      <1>     lea rdx, searchSpec
   266 00001002 B800390000          <1>     mov eax, 3900h  ;MKDIR
   267 00001007 CD41                <1>     int 41h
   268 00001009 7205                <1>     jc .badMake   ;Return if not carry
   269 0000100B B40D                <1>     mov ah, 0Dh
   270 0000100D CD41                <1>     int 41h ;Flush to disk
   271                              <1>     return
    19                              <2> %%_ret:
    20 0000100F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   272                              <1> .badMake:   ;Else, bad make
   273 00001010 488D155CF6FFFF      <1>     lea rdx, badMD
   274 00001017 B800090000          <1>     mov eax, 0900h
   275 0000101C CD41                <1>     int 41h
   276                              <1>     return
    19                              <2> %%_ret:
    20 0000101E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   277                              <1> .badDrv:
   278 0000101F 488D1521F5FFFF      <1>     lea rdx, badDrv
   279 00001026 B800090000          <1>     mov eax, 0900h
   280 0000102B CD41                <1>     int 41h
   281                              <1>     return
    19                              <2> %%_ret:
    20 0000102D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   282                              <1> .badParams:
   283 0000102E 488D15A6F7FFFF      <1>     lea rdx, badArgs
   284 00001035 B800090000          <1>     mov eax, 0900h
   285 0000103A CD41                <1>     int 41h
   286                              <1>     return
    19                              <2> %%_ret:
    20 0000103C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   287                              <1> 
   288                              <1> rmdir:
   289                              <1> erase:
   290                              <1> date:
   291                              <1> time:
   292                              <1> copy:
   293                              <1> ctty:
   294                              <1>     return
    19                              <2> %%_ret:
    20 0000103D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   295                              <1> cls:  
   296 0000103E B800440000          <1>     mov eax, 4400h  ;Get device info
   297 00001043 BB01000000          <1>     mov ebx, 1      ;for handle 1
   298 00001048 CD41                <1>     int 41h         ;in dx
   299 0000104A F7C280000000        <1>     test edx, devCharDev
   300 00001050 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   301 00001052 F7C210000000        <1>     test edx, charDevFastOut
   302 00001058 743E                <1>     jz .doAnsi
   303                              <1>     ;Test if Int 49h uses Int 30h
   304                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   305                              <1>     ;Int 49h MUST be terminated with a IRETQ, within 1024 bytes
   306 0000105A B849350000          <1>     mov eax, 3549h  ;Get the vector for interrupt 49h
   307 0000105F CD41                <1>     int 41h
   308                              <1> .biosCheck:
   309 00001061 66813BCD30          <1>     cmp word [rbx], 30CDh
   310 00001066 740C                <1>     je .biosConfirmed
   311 00001068 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   312 0000106D 7429                <1>     je .doAnsi
   313 0000106F 48FFC3              <1>     inc rbx
   314 00001072 EBED                <1>     jmp short .biosCheck
   315                              <1> .biosConfirmed:
   316                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   317 00001074 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   318 00001076 31DB                <1>     xor ebx, ebx
   319 00001078 CD30                <1>     int 30h
   320 0000107A B40F                <1>     mov ah, 0Fh ;Get screen mode
   321 0000107C CD30                <1>     int 30h
   322 0000107E 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   323 00001081 FECA                <1>     dec dl
   324 00001083 B619                <1>     mov dh, 25  ;Number of rows is standard
   325 00001085 31C0                <1>     xor eax, eax
   326 00001087 89C1                <1>     mov ecx, eax
   327 00001089 B707                <1>     mov bh, 7   ;Screen attributes
   328 0000108B B406                <1>     mov ah, 6   ;Scroll
   329 0000108D CD30                <1>     int 30h
   330 0000108F 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   331 00001091 B700                <1>     mov bh, 0   ;Page 0
   332 00001093 B402                <1>     mov ah, 2
   333 00001095 CD30                <1>     int 30h
   334                              <1>     return
    19                              <2> %%_ret:
    20 00001097 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   335                              <1> .doAnsi:
   336                              <1> ;If an ANSI driver is not installed, this will simply insert blank lines
   337                              <1> ;4 chars in the ansi routine
   338                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   339                              <1> ; understand ANSI codes
   340 00001098 488D3576F7FFFF      <1>     lea rsi, ansiCls
   341 0000109F B904000000          <1>     mov ecx, 4
   342 000010A4 B406                <1>     mov ah, 06h ;Raw char output
   343                              <1> .ansiLp:
   344 000010A6 AC                  <1>     lodsb   ;Get the char in 
   345 000010A7 88C2                <1>     mov dl, al
   346 000010A9 CD41                <1>     int 41h
   347 000010AB FFC9                <1>     dec ecx
   348 000010AD 75F7                <1>     jnz .ansiLp
   349                              <1>     return
    19                              <2> %%_ret:
    20 000010AF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   350                              <1> 
   351                              <1> break:
   352 000010B0 F605EBEFFFFFFF      <1>     test byte [arg1Flg], -1
   353 000010B7 752D                <1>     jnz .argumentProvided
   354                              <1>     ;Here we just get the status of break
   355 000010B9 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   356 000010BE CD41                <1>     int 41h
   357 000010C0 88D3                <1>     mov bl, dl
   358 000010C2 488D15D8F6FFFF      <1>     lea rdx, breakIs
   359 000010C9 B409                <1>     mov ah, 09h
   360 000010CB CD41                <1>     int 41h
   361 000010CD 488D15C8F6FFFF      <1>     lea rdx, onMes
   362 000010D4 488D0DBBF6FFFF      <1>     lea rcx, offMes
   363 000010DB 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   364 000010DD 480F44D1            <1>     cmovz rdx, rcx
   365 000010E1 B409                <1>     mov ah, 09h
   366 000010E3 CD41                <1>     int 41h
   367                              <1>     return
    19                              <2> %%_ret:
    20 000010E5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   368                              <1> .argumentProvided:
   369 000010E6 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   370 000010EA AD                  <1>     lodsd   ;Read the word
   371 000010EB 89C3                <1>     mov ebx, eax
   372 000010ED 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   373 000010F2 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   374 000010F5 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   375 000010FA 7416                <1>     je .maybeOn
   376 000010FC 663D4F46            <1>     cmp ax, "OF"
   377 00001100 7523                <1>     jne .badArgument
   378 00001102 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   379 00001107 6681FB4620          <1>     cmp bx, "F "
   380 0000110C 7517                <1>     jne .badArgument
   381                              <1>     ;Set off
   382 0000110E 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   383 00001110 EB0B                <1>     jmp short .setBreak
   384                              <1> .maybeOn:
   385 00001112 663D4F4E            <1>     cmp ax, "ON"
   386 00001116 750D                <1>     jne .badArgument
   387                              <1>     ;Set on
   388 00001118 BA01000000          <1>     mov edx, 1
   389                              <1> .setBreak:
   390 0000111D B801330000          <1>     mov eax, 3301h  ;Set break
   391 00001122 CD41                <1>     int 41h
   392                              <1>     return
    19                              <2> %%_ret:
    20 00001124 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   393                              <1> .badArgument:
   394 00001125 488D15EDF6FFFF      <1>     lea rdx, badOnOff
   395 0000112C B409                <1>     mov ah, 09h
   396 0000112E CD41                <1>     int 41h
   397                              <1>     return
    19                              <2> %%_ret:
    20 00001130 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   398                              <1> 
   399                              <1> rename:
   400                              <1>     return
    19                              <2> %%_ret:
    20 00001131 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   401                              <1> truename:
   402 00001132 F60569EFFFFFFF      <1>     test byte [arg1Flg], -1
   403 00001139 750C                <1>     jnz .argumentProvided
   404 0000113B 488D1599F6FFFF      <1>     lea rdx, badArgs
   405 00001142 B409                <1>     mov ah, 09h
   406 00001144 CD41                <1>     int 41h
   407                              <1>     return
    19                              <2> %%_ret:
    20 00001146 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   408                              <1> .argumentProvided:
   409 00001147 E86C020000          <1>     call buildCommandPath
   410                              <1>     ;Explicitly call Truename if we remove truename from this function
   411 0000114C 488D3D79F1FFFF      <1>     lea rdi, searchSpec
   412 00001153 E824010000          <1>     call strlen
   413 00001158 FFC9                <1>     dec ecx ;Don't print terminating null
   414 0000115A 488D156BF1FFFF      <1>     lea rdx, searchSpec
   415 00001161 BB01000000          <1>     mov ebx, 01
   416 00001166 B440                <1>     mov ah, 40h
   417 00001168 CD41                <1>     int 41h
   418 0000116A E802000000          <1>     call printCRLF
   419                              <1>     return
    19                              <2> %%_ret:
    20 0000116F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   420                              <1> 
   421                              <1> 
   422                              <1> launchChild:
   423                              <1> ;We run EXEC on this and the child task will return via applicationReturn
   424                              <1>     return
    19                              <2> %%_ret:
    20 00001170 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   425                              <1> 
    16                                  %include "./Source/Utils/COMMAND/Source/cmdUtils.asm"
    17                              <1> ;Misc functions and subroutines for command.com
    18                              <1> 
    19                              <1> printCRLF:
    20 00001171 488D1567F2FFFF      <1>     lea rdx, crlf
    21 00001178 BB02000000          <1>     mov ebx, 2
    22 0000117D B440                <1>     mov ah, 40h ;Print a new line
    23 0000117F B902000000          <1>     mov ecx, 2  ;Two chars to write
    24 00001184 CD41                <1>     int 41h
    25                              <1>     return
    19                              <2> %%_ret:
    20 00001186 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    26                              <1> 
    27                              <1> putDateInPrompt:
    28                              <1> putTimeInPrompt:
    29                              <1>     return
    19                              <2> %%_ret:
    20 00001187 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    30                              <1> 
    31                              <1> putVersionInPrompt:
    32 00001188 488D1599F4FFFF      <1>     lea rdx, dosVer
    33 0000118F B409                <1>     mov ah, 09h ;Print String
    34 00001191 CD41                <1>     int 41h
    35 00001193 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
    36 00001195 CD41                <1>     int 41h
    37 00001197 50                  <1>     push rax    ;Save minor version
    38 00001198 E89C000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
    39 0000119D E8B4000000          <1>     call printPackedBCD ;Print al
    40 000011A2 B22E                <1>     mov dl, "."
    41 000011A4 B402                <1>     mov ah, 02h
    42 000011A6 CD41                <1>     int 41h
    43 000011A8 58                  <1>     pop rax
    44 000011A9 88E0                <1>     mov al, ah  ;Get the minor version low
    45 000011AB E889000000          <1>     call hexToBCD
    46 000011B0 E8A1000000          <1>     call printPackedBCD
    47                              <1>     return
    19                              <2> %%_ret:
    20 000011B5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    48                              <1> putEscInPrompt:
    49 000011B6 B21B                <1>     mov dl, ESC
    50 000011B8 EB1C                <1>     jmp short outChar
    51                              <1> 
    52                              <1> putMoneyInPrompt:
    53 000011BA B224                <1>     mov dl, "$"
    54 000011BC EB18                <1>     jmp short outChar
    55                              <1> 
    56                              <1> putEquInPrompt:
    57 000011BE B23D                <1>     mov dl, "="
    58 000011C0 EB14                <1>     jmp short outChar
    59                              <1> 
    60                              <1> putPipeInPrompt:
    61 000011C2 B27C                <1>     mov dl, "|"
    62 000011C4 EB10                <1>     jmp short outChar
    63                              <1> 
    64                              <1> putGTinPrompt:
    65 000011C6 B23E                <1>     mov dl, ">"
    66 000011C8 EB0C                <1>     jmp short outChar
    67                              <1> 
    68                              <1> putLTinPrompt:
    69 000011CA B23C                <1>     mov dl, "<"
    70 000011CC EB08                <1>     jmp short outChar
    71                              <1> 
    72                              <1> putDriveInPrompt:
    73 000011CE B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
    74 000011D0 CD41                <1>     int 41h
    75 000011D2 0441                <1>     add al, "A" ;Convert to letter
    76 000011D4 88C2                <1>     mov dl, al
    77                              <1> outChar:
    78 000011D6 B402                <1>     mov ah, 02h ;Echo to STDOUT
    79 000011D8 CD41                <1>     int 41h
    80                              <1>     return
    19                              <2> %%_ret:
    20 000011DA C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    81                              <1> putCWDInPrompt:
    82 000011DB 488D3D69EEFFFF      <1>     lea rdi, currDirStr ;Update the current directory string
    83 000011E2 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
    84 000011E4 CD41                <1>     int 41h
    85 000011E6 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
    86 000011E8 FEC2                <1>     inc dl
    87 000011EA 0441                <1>     add al, "A" ;Convert to letter
    88 000011EC B43A                <1>     mov ah, ":"
    89 000011EE 66AB                <1>     stosw   ;Store X:, rdi+=2
    90 000011F0 8A052DEEFFFF        <1>     mov al, byte [pathSep]
    91 000011F6 AA                  <1>     stosb   ;Store pathSep, inc rdi
    92 000011F7 B447                <1>     mov ah, 47h ;Get Current Working Directory
    93 000011F9 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
    94 000011FC CD41                <1>     int 41h
    95 000011FE E879000000          <1>     call strlen
    96 00001203 81C102000000        <1>     add ecx, 2 ;Add two for the X:
    97                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
    98 00001209 B440                <1>     mov ah, 40h ;Write to handle
    99 0000120B BB01000000          <1>     mov ebx, 1  ;STDOUT
   100 00001210 488D1534EEFFFF      <1>     lea rdx, currDirStr
   101 00001217 CD41                <1>     int 41h
   102                              <1>     return
    19                              <2> %%_ret:
    20 00001219 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   103                              <1> 
   104                              <1> BCDtoHex:
   105                              <1> ;Converts a BCD value to a Hex byte
   106                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   107 0000121A 51                  <1>     push rcx
   108 0000121B 0FB6C0              <1>     movzx eax, al   ;Zero extend
   109 0000121E 89C1                <1>     mov ecx, eax    ;Save al in ecx
   110 00001220 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   111 00001225 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   112 0000122B C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   113                              <1> .bth:
   114 0000122E 050A000000          <1>     add eax, 10
   115 00001233 FFC9                <1>     dec ecx
   116 00001235 75F7                <1>     jnz .bth
   117 00001237 59                  <1>     pop rcx
   118 00001238 C3                  <1>     ret
   119                              <1> 
   120                              <1> hexToBCD:
   121                              <1> ;Converts a Hex byte into two BCD digits
   122                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   123 00001239 51                  <1>     push rcx
   124 0000123A 0FB6C0              <1>     movzx eax, al   ;Zero extend
   125 0000123D 31C9                <1>     xor ecx, ecx
   126                              <1> .htb0:
   127 0000123F 3D0A000000          <1>     cmp eax, 10
   128 00001244 7209                <1>     jb .htb1
   129 00001246 2D0A000000          <1>     sub eax, 10
   130 0000124B FFC1                <1>     inc ecx
   131 0000124D EBF0                <1>     jmp short .htb0
   132                              <1> .htb1:
   133 0000124F C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   134 00001252 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   135 00001254 59                  <1>     pop rcx
   136 00001255 C3                  <1>     ret
   137                              <1> printPackedBCD:
   138                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   139                              <1> ; then prints al[3:0]
   140                              <1> ;Preserves all registers
   141 00001256 50                  <1>     push rax
   142 00001257 52                  <1>     push rdx
   143 00001258 88C4                <1>     mov ah, al
   144 0000125A 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   145 0000125C 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   146 0000125F 740B                <1>     jz .skipUpperNybble
   147 00001261 50                  <1>     push rax
   148 00001262 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   149 00001265 88E2                <1>     mov dl, ah
   150 00001267 B402                <1>     mov ah, 02h ;Print DL
   151 00001269 CD41                <1>     int 41h
   152 0000126B 58                  <1>     pop rax
   153                              <1> .skipUpperNybble:
   154 0000126C 0430                <1>     add al, "0"
   155 0000126E 88C2                <1>     mov dl, al
   156 00001270 B402                <1>     mov ah, 02h ;Print DL
   157 00001272 CD41                <1>     int 41h
   158 00001274 5A                  <1>     pop rdx
   159 00001275 58                  <1>     pop rax
   160                              <1>     return
    19                              <2> %%_ret:
    20 00001276 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   161                              <1> 
   162                              <1> getCurrentDrive:
   163                              <1> ;Returns the current drive in al
   164 00001277 B419                <1>     mov ah, 19h
   165 00001279 CD41                <1>     int 41h
   166                              <1>     return
    19                              <2> %%_ret:
    20 0000127B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   167                              <1> 
   168                              <1> strlen:
   169                              <1> ;Gets the length of a ASCIIZ string
   170                              <1> ;Input: rdi = Source buffer
   171                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   172 0000127C 50                  <1>     push rax
   173 0000127D 57                  <1>     push rdi
   174 0000127E 30C0                <1>     xor al, al
   175 00001280 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   176 00001282 FFC9                <1>     dec ecx ;rcx = -1
   177 00001284 F2AE                <1>     repne scasb
   178 00001286 F7D1                <1>     not ecx
   179 00001288 5F                  <1>     pop rdi
   180 00001289 58                  <1>     pop rax
   181                              <1>     return
    19                              <2> %%_ret:
    20 0000128A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   182                              <1> 
   183                              <1> findTerminatorOrEOC:
   184                              <1> ;Advances rsi to the next string terminator char or the next End of command
   185                              <1> ; char
   186                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   187                              <1> ;If a end of command char found, also sets CF
   188 0000128B AC                  <1>     lodsb
   189 0000128C 3C0D                <1>     cmp al, CR
   190 0000128E 7419                <1>     je .endOfInput
   191 00001290 E82B000000          <1>     call isALterminator
   192 00001295 7419                <1>     jz .exit
   193 00001297 3A0586EDFFFF        <1>     cmp al, byte [pathSep]
   194 0000129D 7411                <1>     je .exit
   195 0000129F 3A057FEDFFFF        <1>     cmp al, byte [switchChar]
   196 000012A5 7409                <1>     je .exit
   197 000012A7 EBE2                <1>     jmp short findTerminatorOrEOC
   198                              <1> .endOfInput:
   199 000012A9 E802000000          <1>     call .exit
   200 000012AE F9                  <1>     stc 
   201                              <1>     return
    19                              <2> %%_ret:
    20 000012AF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   202                              <1> .exit:
   203 000012B0 48FFCE              <1>     dec rsi ;Point to the terminating char
   204                              <1>     return
    19                              <2> %%_ret:
    20 000012B3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   205                              <1> 
   206                              <1> findTerminator:
   207                              <1> ;Advances rsi to the next string terminator char
   208                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   209 000012B4 AC                  <1>     lodsb
   210 000012B5 E806000000          <1>     call isALterminator
   211 000012BA 75F8                <1>     jnz findTerminator
   212 000012BC 48FFCE              <1>     dec rsi
   213                              <1>     return
    19                              <2> %%_ret:
    20 000012BF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   214                              <1> isALterminator:
   215                              <1> ;Returns: ZF=NZ if al is not a terminator (Not including CR)
   216                              <1> ;         ZF=ZY if al is a terminator
   217 000012C0 3C20                <1>     cmp al, " "
   218                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000012C2 74(BF)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   219 000012C4 3C3B                <1>     cmp al, ";"
   220                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000012C6 74(BF)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   221 000012C8 3C3D                <1>     cmp al, "="
   222                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000012CA 74(BF)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   223 000012CC 3C2C                <1>     cmp al, ","
   224                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000012CE 74(BF)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   225 000012D0 3C09                <1>     cmp al, TAB
   226                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000012D2 74(BF)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   227 000012D4 3C0A                <1>     cmp al, LF
   228                              <1>     return
    19                              <2> %%_ret:
    20 000012D6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   229                              <1> 
   230                              <1> findEndOfCommand:
   231                              <1> ;Moves rsi to the | or CR that terminates this command
   232 000012D7 AC                  <1>     lodsb
   233 000012D8 E806000000          <1>     call isALEndOfCommand
   234 000012DD 75F8                <1>     jnz findEndOfCommand
   235 000012DF 48FFCE              <1>     dec rsi
   236                              <1>     return
    19                              <2> %%_ret:
    20 000012E2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   237                              <1> isALEndOfCommand:
   238 000012E3 3C7C                <1>     cmp al, "|"
   239                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000012E5 74(E2)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   240 000012E7 3C0D                <1>     cmp al, CR
   241                              <1>     return
    19                              <2> %%_ret:
    20 000012E9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   242                              <1> 
   243                              <1> scanForRedir:
   244                              <1> ;Returns: AL = 0 => No redirection, terminate with CR
   245                              <1> ;         AL = 1 => Redirection, type <
   246                              <1> ;         AL = 10 => Redir, type >
   247                              <1> ;         AL = 20 => Redir, type >>
   248                              <1> ;If multiple redirs found, the last one of that type counts.
   249 000012EA 56                  <1>     push rsi
   250 000012EB 55                  <1>     push rbp
   251 000012EC 30E4                <1>     xor ah, ah
   252                              <1> .lp:
   253 000012EE AC                  <1>     lodsb
   254 000012EF 3C3E                <1>     cmp al, ">"
   255                              <1> .exit:
   256 000012F1 5D                  <1>     pop rbp
   257 000012F2 5E                  <1>     pop rsi
   258                              <1>     return
    19                              <2> %%_ret:
    20 000012F3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   259                              <1> 
   260                              <1> 
   261                              <1> skipSpaces:
   262                              <1> ;Also skips tabs
   263                              <1> ;Input: rsi must point to the start of the data string
   264                              <1> ;Output: rsi points to the first non-space char
   265 000012F4 803E20              <1>     cmp byte [rsi], " "
   266 000012F7 7405                <1>     je .skip    ;If equal to a space, skip it
   267 000012F9 803E09              <1>     cmp byte [rsi], TAB
   268                              <1>     retne   ;If not equal to a tab or space, return
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000012FC 75(F3)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   269                              <1> .skip:
   270 000012FE 48FFC6              <1>     inc rsi
   271 00001301 EBF1                <1>     jmp short skipSpaces
   272                              <1> 
   273                              <1> printPrompt:
   274 00001303 66813D15EDFFFFFFFF  <1>     cmp word [promptPtr], -1
   275 0000130C 750B                <1>     jne .validPrompt
   276                              <1>     ;Here we print the default prompt
   277 0000130E E8C8FEFFFF          <1>     call putCWDInPrompt
   278 00001313 E8AEFEFFFF          <1>     call putGTinPrompt
   279                              <1>     return
    19                              <2> %%_ret:
    20 00001318 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   280                              <1> .validPrompt:
   281                              <1>     return
    19                              <2> %%_ret:
    20 00001319 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   282                              <1> 
   283                              <1> clearCommandState:
   284                              <1> ;Clears the command state
   285 0000131A 488D3D7DEDFFFF      <1>     lea rdi, cmdStatePtr
   286 00001321 B90A000000          <1>     mov ecx, cmdStateL
   287 00001326 31C0                <1>     xor eax, eax
   288 00001328 F3AA                <1>     rep stosb
   289                              <1>     return
    19                              <2> %%_ret:
    20 0000132A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   290                              <1> 
   291                              <1> clearCommandLineState:
   292                              <1> ;Clears the command line state after a 0Dh encountered
   293 0000132B 488D3D5CEDFFFF      <1>     lea rdi, cmdLineStatePtr
   294 00001332 B91A000000          <1>     mov ecx, cmdLineStateL
   295 00001337 31C0                <1>     xor eax, eax
   296 00001339 F3AA                <1>     rep stosb
   297                              <1>     return
    19                              <2> %%_ret:
    20 0000133B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   298                              <1> 
   299                              <1> asciiToFCB:
   300                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   301                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   302                              <1> ;Also doesn't check if chars are valid
   303                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   304                              <1> ;Name is space padded.
   305                              <1> ;Input: rsi = ASCII string buffer
   306                              <1> ;       rdi = FCB name buffer
   307                              <1> ;Output: al = Char that terminated the source string 
   308 0000133C 53                  <1>     push rbx    
   309 0000133D 57                  <1>     push rdi
   310 0000133E B90B000000          <1>     mov ecx, 11
   311 00001343 B020                <1>     mov al, " "
   312 00001345 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   313 00001347 5F                  <1>     pop rdi
   314 00001348 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   315                              <1> .processName:
   316 0000134B AC                  <1>     lodsb   ;Get the char in al
   317 0000134C 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   318 0000134E 7426                <1>     jz .exit
   319 00001350 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   320 00001352 7407                <1>     je .extSpace
   321 00001354 3C2E                <1>     cmp al, "."
   322 00001356 740C                <1>     je .ext
   323 00001358 AA                  <1>     stosb   ;Store the char
   324 00001359 EBF0                <1>     jmp short .processName
   325                              <1> .extSpace:
   326                              <1> ;Now we scan for a period in the name
   327 0000135B AC                  <1>     lodsb   ;Get a char and increase rsi
   328 0000135C 84C0                <1>     test al, al
   329 0000135E 7416                <1>     jz .exit
   330 00001360 3C2E                <1>     cmp al, "."     ;If al is not a period...
   331 00001362 75F7                <1>     jne .extSpace   ; keep searching
   332                              <1> .ext:
   333 00001364 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   334                              <1> .processExt:
   335 00001368 AC                  <1>     lodsb
   336 00001369 84C0                <1>     test al, al
   337 0000136B 7409                <1>     jz .exit
   338 0000136D 3C20                <1>     cmp al, " "
   339 0000136F 7405                <1>     je .exit
   340 00001371 AA                  <1>     stosb
   341 00001372 EBF4                <1>     jmp short .processExt
   342                              <1> .exitBadChar:
   343 00001374 30C0                <1>     xor al, al  ;Return a null terminator
   344                              <1> .exit:
   345 00001376 5B                  <1>     pop rbx
   346                              <1>     return
    19                              <2> %%_ret:
    20 00001377 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   347                              <1> 
   348                              <1> FCBToAsciiz:
   349                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   350                              <1> ;Name is space padded too
   351                              <1> ;Input: rsi = FCB name buffer
   352                              <1> ;       rdi = ASCIIZ string buffer
   353 00001378 B908000000          <1>     mov ecx, 8
   354 0000137D F3A4                <1>     rep movsb   ;Move the name over
   355                              <1> .scanNameSpace:
   356 0000137F 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   357 00001383 750D                <1>     jne .ext
   358 00001385 48FFCF              <1>     dec rdi
   359 00001388 FFC1                <1>     inc ecx
   360 0000138A 81F908000000        <1>     cmp ecx, 8
   361 00001390 72ED                <1>     jb .scanNameSpace
   362                              <1> .ext:
   363 00001392 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   364 00001397 7506                <1>     jne .validExt
   365 00001399 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   366 0000139D 7415                <1>     je .exit
   367                              <1> .validExt:
   368 0000139F B02E                <1>     mov al, "." ;We have a valid extension, store a period
   369 000013A1 AA                  <1>     stosb
   370 000013A2 B903000000          <1>     mov ecx, 3
   371 000013A7 F3A4                <1>     rep movsb   ;Move the three extension chars over
   372                              <1> .scanExtSpace:
   373 000013A9 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   374 000013AD 7505                <1>     jne .exit
   375 000013AF 48FFCF              <1>     dec rdi
   376 000013B2 EBF5                <1>     jmp short .scanExtSpace
   377                              <1> .exit:
   378 000013B4 31C0                <1>     xor eax, eax
   379 000013B6 AA                  <1>     stosb   ;Store a null at the end
   380                              <1>     return
    19                              <2> %%_ret:
    20 000013B7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   381                              <1> 
   382                              <1> buildCommandPath:
   383                              <1> ;Based on the first argument on the command line
   384                              <1> ; will build a full ASCIIZ path in searchSpec to the file/dir specified
   385                              <1>     ;If this is a relative path, will handle correctly (tho unnecessary)
   386 000013B8 0FB605E4ECFFFF      <1>     movzx eax, byte [arg1Off]
   387 000013BF 488D3573EDFFFF      <1>     lea rsi, cmdBuffer
   388 000013C6 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   389 000013C9 8A3D54ECFFFF        <1>     mov bh, byte [pathSep]
   390 000013CF B33A                <1>     mov bl, ":"
   391 000013D1 383E                <1>     cmp byte [rsi], bh  ;Is the first char relative to root?
   392 000013D3 7458                <1>     je .absoluteCurrent
   393 000013D5 66395E01            <1>     cmp word [rsi + 1], bx    ;This checks if absolute or relative
   394 000013D9 746D                <1>     je .absolutePath
   395 000013DB 385E01              <1>     cmp byte [rsi + 1], bl  ;Check if a drive separator
   396 000013DE 7409                <1>     je .relativeGiven
   397                              <1> ;No drive letter given, must get Current Drive
   398 000013E0 E892FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   399 000013E5 0441                <1>     add al, "A"
   400 000013E7 EB0B                <1>     jmp short .relativeCommon
   401                              <1> .relativeGiven:
   402                              <1> ;Drive letter pointed to by AL
   403 000013E9 8A06                <1>     mov al, byte [rsi]  ;Get drive letter in al
   404 000013EB 24DF                <1>     and al, 0DFh    ;Convert to UC
   405 000013ED 4881C602000000      <1>     add rsi, 2  ;Skip the given drive letter and the colon
   406                              <1> .relativeCommon:
   407                              <1>     ;al has drive letter
   408 000013F4 88C2                <1>     mov dl, al  ;Save drive letter in dl
   409 000013F6 80EA40              <1>     sub dl, "@" ;Get 1 based drive number in dl
   410 000013F9 B43A                <1>     mov ah, ":" ;Get the colon in too
   411 000013FB 488D3DCAEEFFFF      <1>     lea rdi, searchSpec ;Start building our search path here
   412 00001402 66AB                <1>     stosw   ;Store X:
   413 00001404 8A0519ECFFFF        <1>     mov al, byte [pathSep]
   414 0000140A AA                  <1>     stosb   ;Store pathSep
   415 0000140B 56                  <1>     push rsi    ;Save user input string
   416 0000140C 4889FE              <1>     mov rsi, rdi    ;Put the current directory here for this drive
   417 0000140F B447                <1>     mov ah, 47h ;Get Current Working Directory, dl has drive number
   418 00001411 CD41                <1>     int 41h ;Won't fail as drive letter in dl confirmed ok
   419 00001413 5E                  <1>     pop rsi
   420                              <1>     ;Now want to find terminating null
   421 00001414 30C0                <1>     xor al, al
   422 00001416 31C9                <1>     xor ecx, ecx
   423 00001418 FFC9                <1>     dec ecx
   424 0000141A F2AE                <1>     repne scasb ;Search for the terminating null
   425 0000141C 48FFCF              <1>     dec rdi ;Go back one once found
   426 0000141F 8A05FEEBFFFF        <1>     mov al, byte [pathSep]
   427 00001425 3847FF              <1>     cmp byte [rdi - 1], al
   428 00001428 7425                <1>     je .buildPath ;If the previous char is a pathsep, skip storing another
   429 0000142A AA                  <1>     stosb   ;Store the pathsep
   430 0000142B EB22                <1>     jmp short .buildPath  ;Now we copy the user string over and good to go
   431                              <1> .absoluteCurrent:
   432 0000142D E845FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   433 00001432 0441                <1>     add al, "A"
   434 00001434 B43A                <1>     mov ah, ":" ;ax has X: now to store 
   435 00001436 488D3D8FEEFFFF      <1>     lea rdi, searchSpec
   436 0000143D 66AB                <1>     stosw
   437 0000143F 8A05DEEBFFFF        <1>     mov al, byte [pathSep]
   438 00001445 AA                  <1>     stosb
   439 00001446 EB07                <1>     jmp short .buildPath
   440                              <1> .absolutePath:
   441 00001448 488D3D7DEEFFFF      <1>     lea rdi, searchSpec
   442                              <1> .buildPath:
   443 0000144F E86FF8FFFF          <1>     call copyCommandTailItem    ;Terminates with a 0 for free
   444 00001454 488D3571EEFFFF      <1>     lea rsi, searchSpec
   445 0000145B 488D3D6AEEFFFF      <1>     lea rdi, searchSpec
   446 00001462 B460                <1>     mov ah, 60h ;Truename it to avoid issues
   447 00001464 CD41                <1>     int 41h
   448                              <1>     retc    ;Return if an error with CF=CY
    63                              <2> cret c
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 00001466 7301                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 00001468 C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   449                              <1>     ;Here we do one final check to ensure we dont end up with a A: but A:"\"
   450 00001469 30C0                <1>     xor al, al
   451 0000146B 31C9                <1>     xor ecx, ecx
   452 0000146D FFC9                <1>     dec ecx
   453 0000146F F2AE                <1>     repne scasb
   454 00001471 48FFCF              <1>     dec rdi ;Go back to the final non-null char
   455 00001474 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is the final non-null char a colon?
   456                              <1>     retne   ;Return if not
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001478 75(68)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   457 0000147A 31C0                <1>     xor eax, eax
   458 0000147C 8A05A1EBFFFF        <1>     mov al, byte [pathSep]  ;IF it is, insert a pathsep
   459 00001482 66AB                <1>     stosw   ;Store the terminating 0 after the pathsep
   460                              <1>     return
    19                              <2> %%_ret:
    20 00001484 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    17                                  %include "./Source/Utils/COMMAND/Source/int44h.asm"
    18                              <1> critErrorHandler:   ;Int 44h
    19                              <1> ;User Stack in usage here, must be swapped to before this is called
    20                              <1> ;Entered with:  
    21                              <1> ;               AH = Critical Error Bitfield
    22                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    23                              <1> ;               Bit 6 - Reserved
    24                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    25                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    26                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    27                              <1> ;               Bits [2-1] = Affected Disk Error
    28                              <1> ;                     0 0   DOS area
    29                              <1> ;                     0 1   FAT area
    30                              <1> ;                     1 0   Directory area
    31                              <1> ;                     1 1   Data area
    32                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    33                              <1> ;               AL  = Failing drive number if AH[7] = 0
    34                              <1> ;               DIL = Error code for errorMsg
    35                              <1> ;               RSI = EA of Device Header for which device the error occured
    36                              <1> ;Return:
    37                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    38                              <1> ;                  = 1 - Retry the Operation    (Retry)
    39                              <1> ;                  = 2 - Terminate the Program  (Abort)
    40                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    41 00001485 53                  <1>     push rbx
    42 00001486 51                  <1>     push rcx
    43 00001487 52                  <1>     push rdx
    44 00001488 57                  <1>     push rdi
    45 00001489 56                  <1>     push rsi
    46 0000148A FC                  <1>     cld         ;Make String ops go forward
    47                              <1> 
    48 0000148B 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    49 0000148E 488D154AEFFFFF      <1>     lea rdx, crlf
    50 00001495 B409                <1>     mov ah, 09h ;Print String
    51 00001497 CD41                <1>     int 41h
    52                              <1> 
    53 00001499 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    54 0000149F B90C000000          <1>     mov ecx, 0Ch
    55 000014A4 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    56 000014A6 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    57 000014A9 480FB7FF            <1>     movzx rdi, di
    58 000014AD 4889FA              <1>     mov rdx, rdi    ;Copy error code
    59 000014B0 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    60 000014B4 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    61 000014B7 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    62 000014BA 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    63 000014C1 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    64 000014C5 B409                <1>     mov ah, 09h ;Print String
    65 000014C7 CD41                <1>     int 41h     ;Call DOS to print first part of message
    66                              <1> 
    67 000014C9 488D1505020000      <1>     lea rdx, qword [.readmsg]
    68 000014D0 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    69 000014D7 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    70 000014DA 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    71 000014DE B409                <1>     mov ah, 09h ;Print String
    72 000014E0 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    73                              <1> 
    74 000014E2 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    75 000014E5 0F85DF000000        <1>     jnz .charError
    76                              <1> ;Disk error continues here
    77 000014EB 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    78 000014F2 B409                <1>     mov ah, 09h
    79 000014F4 CD41                <1>     int 41h
    80 000014F6 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    81 000014F8 80C241              <1>     add dl, "A" ;Add ASCII code
    82 000014FB B402                <1>     mov ah, 02h ;Print char in dl
    83 000014FD CD41                <1>     int 41h
    84                              <1> .userInput:
    85 000014FF 488D15D9EEFFFF      <1>     lea rdx, crlf  ;Print new line
    86 00001506 B409                <1>     mov ah, 09h
    87 00001508 CD41                <1>     int 41h
    88                              <1> ;Abort, Retry, Ignore, Fail is word order
    89                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    90                              <1> .userAbort:
    91                              <1> ;Abort is always an option
    92 0000150A 488D15E2010000      <1>     lea rdx, qword [.abortmsg]
    93 00001511 B409                <1>     mov ah, 09h
    94 00001513 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
    95                              <1> .userRetry:
    96 00001515 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    97 00001518 7416                <1>     jz .userIgnore    ;If clear, dont print message
    98 0000151A 488D15EA010000      <1>     lea rdx, qword [.betweenMsg]
    99 00001521 B409                <1>     mov ah, 09h
   100 00001523 CD41                <1>     int 41h
   101 00001525 488D15D4010000      <1>     lea rdx, qword [.retrymsg]
   102 0000152C B409                <1>     mov ah, 09h
   103 0000152E CD41                <1>     int 41h
   104                              <1> .userIgnore:
   105 00001530 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   106 00001533 7416                <1>     jz .userFail
   107 00001535 488D15CF010000      <1>     lea rdx, qword [.betweenMsg]
   108 0000153C B409                <1>     mov ah, 09h
   109 0000153E CD41                <1>     int 41h
   110 00001540 488D15B2010000      <1>     lea rdx, qword [.ignoremsg]
   111 00001547 B409                <1>     mov ah, 09h
   112 00001549 CD41                <1>     int 41h
   113                              <1> .userFail:
   114 0000154B F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   115 0000154E 7416                <1>     jz .userMsgEnd
   116 00001550 488D15B4010000      <1>     lea rdx, qword [.betweenMsg]
   117 00001557 B409                <1>     mov ah, 09h
   118 00001559 CD41                <1>     int 41h
   119 0000155B 488D15A4010000      <1>     lea rdx, qword [.failmsg]
   120 00001562 B409                <1>     mov ah, 09h
   121 00001564 CD41                <1>     int 41h
   122                              <1> .userMsgEnd:
   123 00001566 488D15A1010000      <1>     lea rdx, qword [.endMsg]
   124 0000156D B409                <1>     mov ah, 09h
   125 0000156F CD41                <1>     int 41h
   126                              <1> ;Get user input now 
   127 00001571 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   128 00001573 488D3D97010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   129 0000157A B401                <1>     mov ah, 01h ;STDIN without Console Echo
   130 0000157C CD41                <1>     int 41h ;Get char in al
   131 0000157E 3C61                <1>     cmp al, "a" ;Chack if lowercase
   132 00001580 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   133 00001582 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   134                              <1> .uip1:
   135 00001584 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   136 00001585 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   137 00001587 FFC1                <1>     inc ecx
   138 00001589 81F904000000        <1>     cmp ecx, 4
   139 0000158F 75F3                <1>     jne .uip1
   140 00001591 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   141                              <1> .validInput:
   142 00001596 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   143                              <1> ;Now check if the input is permitted
   144 00001598 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   145 0000159A 7427                <1>     je .cehExit
   146 0000159C 84C0                <1>     test al, al ;Check if 0 => Ignore
   147 0000159E 740F                <1>     je .viIgnore
   148 000015A0 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   149 000015A2 7416                <1>     je .viRetry
   150                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   151 000015A4 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   152 000015A7 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   153 000015AD EB14                <1>     jmp short .cehExit
   154                              <1> .viIgnore:
   155 000015AF F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   156 000015B2 0F8447FFFFFF        <1>     jz .userInput
   157 000015B8 EB09                <1>     jmp short .cehExit
   158                              <1> .viRetry:
   159 000015BA F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   160 000015BD 0F843CFFFFFF        <1>     jz .userInput
   161                              <1> .cehExit:
   162 000015C3 5E                  <1>     pop rsi
   163 000015C4 5F                  <1>     pop rdi
   164 000015C5 5A                  <1>     pop rdx
   165 000015C6 59                  <1>     pop rcx
   166 000015C7 5B                  <1>     pop rbx
   167 000015C8 48CF                <1>     iretq
   168                              <1> .charError:
   169 000015CA B908000000          <1>     mov ecx, 8  ;8 chars in device name
   170 000015CF 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   171                              <1> .ce1:
   172 000015D6 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   173 000015D7 88C2                <1>     mov dl, al  ;Move char into dl
   174 000015D9 B402                <1>     mov ah, 02h
   175 000015DB CD41                <1>     int 41h ;Print char
   176 000015DD E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   177 000015DF E91BFFFFFF          <1>     jmp .userInput
   178                              <1> 
   179                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   180 000015E4 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   180 000015ED 746563742024202020  <1>
   181 000015F6 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   181 000015FF 6E6974202420202020  <1>
   182 00001608 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   182 00001611 202420202020202020  <1>
   183 0000161A 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   183 00001623 6F6D6D616E64202420  <1>
   184 0000162C 446174612024202020- <1>             db "Data $            "       ;Error 4
   184 00001635 202020202020202020  <1>
   185 0000163E 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   185 00001647 737420242020202020  <1>
   186 00001650 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   186 00001659 202020202020202020  <1>
   187 00001662 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   187 0000166B 656469612024202020  <1>
   188 00001674 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   188 0000167D 7420466F756E642024  <1>
   189 00001686 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   189 0000168F 706572202420202020  <1>
   190 00001698 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   190 000016A1 6C7420242020202020  <1>
   191 000016AA 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   191 000016B3 742024202020202020  <1>
   192 000016BC 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   192 000016C5 61696C757265202420  <1>
   193                              <1> 
   194 000016CE 64726976652024      <1> .drive      db "drive $"
   195 000016D5 6572726F7220726561- <1> .readmsg    db "error reading $"
   195 000016DE 64696E672024        <1>
   196 000016E4 6572726F7220777269- <1> .writemsg   db "error writing $"
   196 000016ED 74696E672024        <1>
   197 000016F3 41626F727424        <1> .abortmsg   db "Abort$" 
   198 000016F9 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   199 00001700 526574727924        <1> .retrymsg   db "Retry$"
   200 00001706 4661696C24          <1> .failmsg    db "Fail$"
   201 0000170B 2C2024              <1> .betweenMsg db ", $"
   202 0000170E 3F2024              <1> .endMsg     db "? $"
   203 00001711 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   204                              <1> 
   205                              <1> int43h:
   206 00001715 F9                  <1>     stc     ;Set CF to kill the task
   207 00001716 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    18                                  %include "./Source/Utils/COMMAND/Data/cmdEnv.asm"
    19                              <1>     
    20                              <1> masterEnv:  ;Yeet this is this is a child command processor
    21 00001719 5F3A434F4D4D414E44- <1>     db "_:COMMAND.COM",0
    21 00001722 2E434F4D00          <1>
    22 00001727 504154483D0000      <1>     db "PATH=",0,0
    23 0000172E 202020202020202020- <1>     db ($ - masterEnv) dup (" ")    ;Pad the environment with spaces
    23 00001737 202020202020202020- <1>
    23 00001740 202020              <1>
    24                              <1> endOfAlloc: ;Symbol to find the start of where I can yeet 
    19                                  %include "./Source/Utils/COMMAND/Source/cmdLdr.asm"
    20                              <1> cmdLdr:
    21                              <1> ;First check if the version is ok. If not, return.
    22 00001743 B430                <1>     mov ah, 30h
    23 00001745 CD41                <1>     int 41h
    24 00001747 3C01                <1>     cmp al, 01h ;Version 1
    25 00001749 760D                <1>     jbe .okVersion
    26 0000174B 488D1560010000      <1>     lea rdx, badVerStr
    27 00001752 B409                <1>     mov ah, 09h
    28 00001754 CD41                <1>     int 41h
    29 00001756 CD40                <1>     int 40h ;Exit to caller or DOS to print bad command interpreter line
    30                              <1> .okVersion:
    31                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    32 00001758 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    33 0000175C 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    34 00001760 488905A8E8FFFF      <1>     mov qword [realParent], rax ;Preserve the real parent address
    35                              <1> ;Setup Int 43h and Int 44h
    36 00001767 488D1517FDFFFF      <1>     lea rdx, critErrorHandler
    37 0000176E 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    38 00001772 B844250000          <1>     mov eax, 2544h
    39 00001777 CD41                <1>     int 41h
    40 00001779 488D1595FFFFFF      <1>     lea rdx, int43h
    41 00001780 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    42 00001784 B843250000          <1>     mov eax, 2543h
    43 00001789 CD41                <1>     int 41h
    44 0000178B 488D15C0F0FFFF      <1>     lea rdx, applicationReturn
    45 00001792 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    46 00001796 B842250000          <1>     mov eax, 2542h
    47 0000179B CD41                <1>     int 41h
    48                              <1> ;Get a pointer to DOS Sysvars
    49 0000179D B452                <1>     mov ah, 52h ;Get sysvars
    50 0000179F CD41                <1>     int 41h
    51 000017A1 48891D6FE8FFFF      <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    52                              <1> ;Call for simple internationalisation data
    53 000017A8 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    54 000017AD CD41                <1>     int 41h
    55 000017AF 3CFF                <1>     cmp al, -1
    56 000017B1 7412                <1>     je .skipSwitch
    57 000017B3 88156BE8FFFF        <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    58 000017B9 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    59 000017BC 7507                <1>     jne .skipSwitch
    60 000017BE C6055EE8FFFF2F      <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    61                              <1> .skipSwitch:
    62 000017C5 B800380000          <1>     mov eax, 3800h  ;Get current country data
    63 000017CA 488D1554E8FFFF      <1>     lea rdx, ctryData
    64 000017D1 CD41                <1>     int 41h ;Write the data to the internal country table
    65                              <1> ;Now determine if this is the master copy of COMMAND.COM
    66                              <1> ;Check if Int 4Eh has the same address as Int 4Dh. If so, we are master.
    67 000017D3 B84E350000          <1>     mov eax, 354Eh  ;Get int 4Eh address
    68 000017D8 CD41                <1>     int 41h
    69 000017DA 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    70 000017DD B84D350000          <1>     mov eax, 354Dh  ;Get int 4Dh address
    71 000017E2 CD41                <1>     int 41h
    72 000017E4 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    73 000017E7 7535                <1>     jne .skipMaster
    74                              <1> ;Ok so we are master command.com
    75                              <1> ;Now make myself the real parent
    76 000017E9 4C89051FE8FFFF      <1>     mov qword [realParent], r8
    77                              <1> ;Set master environment as mine
    78 000017F0 488D0522FFFFFF      <1>     lea rax, masterEnv
    79 000017F7 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    80                              <1> ;Set current Drive in COMSPEC
    81 000017FB B019                <1>     mov al, 19h ;Get current Drive
    82 000017FD CD41                <1>     int 41h
    83 000017FF 0441                <1>     add al, "A"
    84 00001801 880512FFFFFF        <1>     mov byte [masterEnv], al
    85                              <1> ;Set Int 4Eh up
    86 00001807 488D15DFF4FFFF      <1>     lea rdx, int4Eh
    87 0000180E B84E250000          <1>     mov eax, 254Eh ;Set this as Int 4Eh
    88 00001813 CD41                <1>     int 41h
    89                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    90                              <1>     
    91 00001815 488D1D27FFFFFF      <1>     lea rbx, endOfAlloc ;Save the Master Environment
    92 0000181C EB07                <1>     jmp short .printInit
    93                              <1> .skipMaster:
    94 0000181E 488D1DF4FEFFFF      <1>     lea rbx, masterEnv  ;This is the base address to jettison
    95                              <1> .printInit:
    96                              <1> ;Finish by printing INIT string.
    97 00001825 488D1510000000      <1>     lea rdx, initString
    98 0000182C B409                <1>     mov ah, 09h
    99 0000182E CD41                <1>     int 41h ;Print init string
   100 00001830 488925CEE7FFFF      <1>     mov qword [stackBottom], rsp    ;Use this to save where to reset rsp to
   101 00001837 E902F0FFFF          <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   102                              <1> ;Loader Data here
   103                              <1> initString: 
   104 0000183C 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version 1.0",CR,LF
   104 00001845 66696320436F6D7075- <1>
   104 0000184E 746572205265736561- <1>
   104 00001857 726368285229205343- <1>
   104 00001860 502F444F5328522920- <1>
   104 00001869 56657273696F6E2031- <1>
   104 00001872 2E300D0A            <1>
   105 00001876 202020202020202020- <1>     db       "          (C)Copyright Scientific Computer Reserach 2022.",CR,LF,"$"
   105 0000187F 20284329436F707972- <1>
   105 00001888 696768742053636965- <1>
   105 00001891 6E746966696320436F- <1>
   105 0000189A 6D7075746572205265- <1>
   105 000018A3 736572616368203230- <1>
   105 000018AC 32322E0D0A24        <1>
   106 000018B2 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   106 000018BB 20444F532076657273- <1>
   106 000018C4 696F6E0D0A24        <1>
   106          ------------------  <1>  info: assembly required 1+2+2 passes

