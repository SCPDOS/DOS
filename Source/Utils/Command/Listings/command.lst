     1                                  ;COMMAND.COM main file
     2                                  [map all ./Source/Utils/COMMAND/Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Source/Include/dosMacro.mac"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------------------------------
     9                              <1> ;Generic Macros file
    10                              <1> ;The following instruction extensions allow to conditionally return
    11                              <1> ;The idea was borrowed from the DOS Source Code
    12                              <1> ;
    13                              <1> ;-------------------------------------------------------------------------------
    14                              <1> 
    15                              <1> ;-------------------------------------------------------------------------------
    16                              <1> ;These macros are live and must not be touched
    17                              <1> ;-------------------------------------------------------------------------------
    18                              <1> %macro return 0
    19                              <1> %%_ret:
    20                              <1>     ret
    21                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    22                              <1> %endmacro
    23                              <1> 
    24                              <1> %macro cret 1
    25                              <1> %%_base:
    26                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    27                              <1>     %ifdef retOff
    28                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <1>     %ifdef currSegVBase
    30                              <1>     j%+1 short (retOff+currSegVBase)
    31                              <1>     %else
    32                              <1>     j%+1 short retOff
    33                              <1>     %endif  ;End ifdef currSegVBase
    34                              <1>     %else 
    35                              <1>     j%-1 short %%a
    36                              <1>     return
    37                              <1> %%a:
    38                              <1>     %endif  ;End the distance measurement if
    39                              <1>     %else   
    40                              <1>     j%-1 short %%a
    41                              <1>     return
    42                              <1> %%a:
    43                              <1>     %endif  ;End ifdef retoff
    44                              <1> %endmacro
    45                              <1> 
    46                              <1> %macro retz 0
    47                              <1> cret z
    48                              <1> %endmacro
    49                              <1> 
    50                              <1> %macro retnz 0
    51                              <1> cret nz
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> %macro rete 0
    55                              <1> cret e
    56                              <1> %endmacro
    57                              <1> 
    58                              <1> %macro retne 0
    59                              <1> cret ne
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> %macro retc 0
    63                              <1> cret c
    64                              <1> %endmacro
    65                              <1> 
    66                              <1> %macro retnc 0
    67                              <1> cret nc
    68                              <1> %endmacro
    69                              <1> 
    70                              <1> %macro retb 0
    71                              <1> cret b
    72                              <1> %endmacro
    73                              <1> 
    74                              <1> %macro retnb 0
    75                              <1> cret nb
    76                              <1> %endmacro
    77                              <1> 
    78                              <1> %macro reta 0
    79                              <1> cret a
    80                              <1> %endmacro
    81                              <1> 
    82                              <1> %macro retna 0
    83                              <1> cret na
    84                              <1> %endmacro
    85                              <1> 
    86                              <1> %macro breakpoint 0
    87                              <1> xchg bx, bx
    88                              <1> %endmacro
     7                                  %include "./Source/Include/dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    27 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    32 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Only affects for SUBST drives, not JOIN
    69                              <1> ; Flags: Bit 15 set = Network drive
    70                              <1> ;        Bit 14 set = Physical drive
    71                              <1> ;        Bit 13 set = JOIN'ed drive
    72                              <1> ;        Bit 12 set = SUBST'ed drive
    73                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    74                              <1> endstruc
    75                              <1> ;CDS equates
    76                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    77                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    78                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    79                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    80                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    81                              <1> ;------------------------------------------------------------------------;
    82                              <1> ; The SFT is a way to allow applications to open file handles to files 
    83                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    84                              <1> ; under the first header, and then a second header will be linked to the 
    85                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    86                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    87                              <1> ; using the FCBS= command. Default FCBS=5.
    88                              <1> ;
    89                              <1> ; A file handle describes the file, and the location within the file that
    90                              <1> ; we are reading. The file handle can be manipulated without the file
    91                              <1> ; being in memory, thus allowing the user to access data without needing 
    92                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    93                              <1> ; accessing devices, by treating them as files with their drivers 
    94                              <1> ; responding and translating the manipulations of the file handle itself.
    95                              <1> ; Neither the driver nor the application should see or use the SFT for
    96                              <1> ; the handle, as it is subject to change (and will change when file 
    97                              <1> ; sharing provisions are included). The DOS will make requests to the 
    98                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    99                              <1> ; track of the information in the SFT entry for that handle. 
   100                              <1> ;
   101                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   102                              <1> ; can point to the same file. It all depends on what the applications 
   103                              <1> ; want to do with the File.
   104                              <1> ;
   105                              <1> ; !!!!IMPORTANT!!!!
   106                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   107                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   108                              <1> ;
   109                              <1> ;Each SFT may look like this:
   110                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   111                              <1> ;            |                |
   112                              <1> ;       wNumFiles*sft    wNumFiles*sft
   113                              <1> ;
   114                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   115                              <1> ; System FCBs.
   116                              <1> ;
   117                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   118                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   119                              <1> ;
   120                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   121                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   122                              <1> ;------------------------------------------------------------------------;
   123                              <1> struc sfth   ;System file table header
   124                              <1> ; This is the SFT header.
   125                              <1> ; This structure comes before the start of the first file in the array/table.
   126 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   127 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   128                              <1> endstruc
   129                              <1> 
   130                              <1> struc sft
   131                              <1> ;This is the file struc itself
   132 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   133 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   134 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   135 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   136 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   137 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   138 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   139 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   140 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   141 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   142 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   143 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   144 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   145 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   146 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   147 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   148 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   149 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   150 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   151                              <1> ;                           0 means no record
   152                              <1> endstruc
   153                              <1> ;Open Mode equates
   154                              <1> ;Access modes   Bits[2:0]
   155                              <1> ReadAccess      equ 0h
   156                              <1> WriteAccess     equ 1h
   157                              <1> RWAccess        equ 2h
   158                              <1> ;Bit 3 reserved 0
   159                              <1> ;Sharing modes  Bits[6:4]
   160                              <1> CompatShare     equ 0h
   161                              <1> denyRWShare     equ 10h
   162                              <1> denyWriteShare  equ 20h
   163                              <1> denyReadShare   equ 30h
   164                              <1> denyNoneShare   equ 40h
   165                              <1> netFCBShare     equ 70h
   166                              <1> noInherit       equ 80h
   167                              <1> ;Bits 8-12 reserved 0
   168                              <1> 
   169                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   170                              <1> ;Buffering on writes
   171                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   172                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   173                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   174                              <1> ;Attribute Byte
   175                              <1> readOnlyFile    equ 1h
   176                              <1> hiddenFile      equ 2h
   177                              <1> systemFile      equ 4h
   178                              <1> volumeLabel     equ 8h
   179                              <1> directoryFile   equ 10h ;Directory entry
   180                              <1> archiveFile     equ 20h
   181                              <1> ;Device Info equates
   182                              <1> ;For a block device, bits [5:0] contain the drive number
   183                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   184                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   185                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   186                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   187                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   188                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   189                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   190                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   191                              <1> devCharDev      equ 80h ;If set, it is a char device!
   192                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   193                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   194                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   195                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   196                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   197                              <1>  
   198                              <1> ;------------------------------------------------------------------------;
   199                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   200                              <1> ; to an internal buffer, and then copying it to the specified location
   201                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   202                              <1> ; another request for the same sector from the same device is made, so 
   203                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   204                              <1> ; size, selected according to the largest detected sector size during 
   205                              <1> ; the initial loadup.
   206                              <1> ;
   207                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   208                              <1> ;
   209                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   210                              <1> ;------------------------------------------------------------------------;
   211                              <1> 
   212                              <1> struc bufferHdr
   213 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   214 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   215 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   216 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   217 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   218 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   219 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   220 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   221 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   222                              <1>     .dataarea:             ;Points to the start of the data area
   223                              <1> endstruc
   224                              <1> ;Buffer Flag equates
   225                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   226                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   227                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   228                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   229                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   230                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   231                              <1> ;Note! A buffer is marked as referenced only when the application 
   232                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> ; Memory control block for each memory arena
   235                              <1> ;------------------------------------------------------------------------;
   236                              <1> struc mcb
   237 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   238 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   239 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   240 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbMarkCtn      equ "M"
   248                              <1> mcbMarkEnd      equ "Z"
   249                              <1> 
   250                              <1> memFirstFit     equ 0   ;First free block goes to application
   251                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   252                              <1> memLastFit      equ 2   ;Last free block goes to application
   253                              <1> 
   254                              <1> ;Owner = Para aligned address => Owning application PSP
   255                              <1> ;...To consider...
   256                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   257                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   258                              <1> ;------------------------------------------------------------------------;
   259                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   260                              <1> ; following order, thus allowing for return values to be placed in the 
   261                              <1> ; registers by accessing the caller register stack frame.
   262                              <1> ;------------------------------------------------------------------------;
   263                              <1> struc callerFrame
   264 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   265 00000008 ????????????????    <1>     .rbx    resq 1    
   266 00000010 ????????????????    <1>     .rcx    resq 1
   267 00000018 ????????????????    <1>     .rdx    resq 1
   268 00000020 ????????????????    <1>     .rsi    resq 1
   269 00000028 ????????????????    <1>     .rdi    resq 1
   270 00000030 ????????????????    <1>     .rbp    resq 1
   271 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   272 00000040 ????????????????    <1>     .r9     resq 1
   273                              <1> ;Pushed by Processor when invoked via Interrupt
   274 00000048 ????????????????    <1>     .rip    resq 1
   275 00000050 ????????????????    <1>     .cs     resq 1
   276 00000058 ????????????????    <1>     .flags  resq 1
   277                              <1> endstruc
   278                              <1> 
   279                              <1> struc dpl
   280                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   281                              <1> ; server calls
   282 00000000 ????????????????    <1>     .rax    resq 1
   283 00000008 ????????????????    <1>     .rbx    resq 1
   284 00000010 ????????????????    <1>     .rcx    resq 1
   285 00000018 ????????????????    <1>     .rdx    resq 1
   286 00000020 ????????????????    <1>     .rsi    resq 1
   287 00000028 ????????????????    <1>     .rdi    resq 1
   288 00000030 ????????????????    <1>     .r8     resq 1
   289 00000038 ????????????????    <1>     .r9     resq 1
   290 00000040 ????????????????    <1>     .align  resq 1
   291 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   292 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   293                              <1> endstruc
   294                              <1> 
   295                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   296 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   297 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   298 00000010 ????????????????    <1>     .newSFTVal      resq 1
   299 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   300 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   301 00000028 ????????????????    <1>     .newLastdrive   resq 1
   302 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   303 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   304 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   305 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   306 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   307 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   308 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc filename
   312                              <1> ;8.3 File name struct
   313 00000000 ????????????????    <1>     .fName  resb 8
   314 00000008 ??????              <1>     .fExt   resb 3
   315                              <1> endstruc
   316                              <1> 
   317                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   318 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   319 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   320 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   321 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   322 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   323 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   324 00000016 ????                <1>     .fileTime   resw 1  ;File time
   325 00000018 ????                <1>     .fileDate   resw 1  ;File date
   326 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   327 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc psp
   331 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   332 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   333 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   334 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   335 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   336 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   337 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   338 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   339 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   340 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   341 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   342 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   343 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   344 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   345                              <1> ;Extra handle arrays are grouped into a linked list
   346                              <1> ;The below are in the same place as in DOS
   347 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   348 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   349                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   350 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   351 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   352                              <1> endstruc
   353                              <1> 
   354                              <1> struc clkStruc
   355 00000000 ????                <1>     .dateWord   resw 1
   356 00000002 ??                  <1>     .minutes    resb 1
   357 00000003 ??                  <1>     .hours      resb 1
   358 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   359 00000005 ??                  <1>     .seconds    resb 1
   360                              <1> endstruc
   361                              <1> 
   362                              <1> struc countryStruc
   363 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   364                              <1>                         ;0 = month day year hh:mm:ss
   365                              <1>                         ;1 = day month year hh:mm:ss
   366                              <1>                         ;2 = year month day hh:mm:ss
   367 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   368 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   369 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   370 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   371 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   372 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   373                              <1>                         ;0 = Symbol leads, without space
   374                              <1>                         ;1 = Symbol follows, without space
   375                              <1>                         ;2 = Symbol leads, one space
   376                              <1>                         ;3 = Symbol follows, one space
   377                              <1>                         ;4 = Symbol replace decimal separator
   378 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   379 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   380 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   381 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   382 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   383                              <1> endstruc
   384                              <1> 
   385                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   386                              <1> ;for a space of 64Gb
   387                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   388                              <1> dosLowBase  equ 600h    ;Low load address
   389                              <1> 
   390                              <1> ;Critical Error AH bitfield equates
   391                              <1> critRead    equ 0h
   392                              <1> critWrite   equ 1h
   393                              <1> critDOS     equ 0h
   394                              <1> critFAT     equ 2h
   395                              <1> critDir     equ 4h
   396                              <1> critData    equ 6h
   397                              <1> critFailOK  equ 8h
   398                              <1> critRetryOK equ 10h
   399                              <1> critIgnorOK equ 20h
   400                              <1> critCharDev equ 80h
   401                              <1> 
   402                              <1> critIgnore  equ 0
   403                              <1> critRetry   equ 1
   404                              <1> critAbort   equ 2
   405                              <1> critFail    equ 3
   406                              <1> 
   407                              <1> ;MISC ASCII control chars
   408                              <1> NUL equ 00h ;^@         | ASCII Null
   409                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   410                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   411                              <1> BEL equ 07h ;^G         | ASCII Bell
   412                              <1> BSP equ 08h ;^H         | ASCII Backspace
   413                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   414                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   415                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   416                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   417                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   418                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   419                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   420                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   421                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   422                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   423                              <1> SPC equ 20h ;Printable  | ASCII Space
   424                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   425                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   426                              <1> 
   427                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   428                              <1> ;Extended Ascii Codes
   429                              <1> eF1     equ 3Bh ;F1 second byte
   430                              <1> eF2     equ 3Ch ;F2 second byte
   431                              <1> eF3     equ 3Dh ;F3 second byte
   432                              <1> eF4     equ 3Eh ;F4 second byte
   433                              <1> eF5     equ 3Fh ;F5 second byte
   434                              <1> eF6     equ 40h ;F6 second byte
   435                              <1> eF7     equ 41h ;F7 second byte
   436                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   437                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   438                              <1> eIns    equ 52h ;Insert second byte
   439                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   440                              <1> 
   441                              <1> ;Default Configuration for the system
   442                              <1> 
   443                              <1> buffersDefault  equ 30
   444                              <1> filesDefault    equ 20
   445                              <1> fcbsDefault     equ 4
   446                              <1> safeFcbsDeflt   equ 0
   447                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Source/Include/fcbStruc.inc"
     9                              <1> ;FCB related structures
    10                              <1> 
    11                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
    12                              <1> ;This field also used for random read/write ops to find the right record
    13                              <1> struc fcb
    14 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    15 00000001 ????????????????    <1>     .filename   resb 8
    16 00000009 ??????              <1>     .fileext    resb 3
    17 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    18                              <1> ;One block consists of 128 records, of size denoted in the below
    19 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    20 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    21 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    22 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    23                              <1>     ;----------------------------------------
    24                              <1>     ;Internal Records
    25 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    26 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    27 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    28                              <1>     ;----------------------------------------
    29 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    30 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    31                              <1> endstruc
    32                              <1> 
    33                              <1> struc exFcb
    34 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    35 00000001 ??????????          <1>     .reserved   resb 5  
    36 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    37 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    38 00000008 ????????????????    <1>     .filename   resb 8
    39 00000010 ??????              <1>     .fileext    resb 3
    40 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    41                              <1> ;One block consists of 128 records, of size denoted in the below
    42 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    43 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    44 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    45 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    46                              <1>     ;----------------------------------------
    47                              <1>     ;Internal Records
    48 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    49 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    50 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    51                              <1>     ;----------------------------------------
    52 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    53 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    54                              <1> endstruc
    55                              <1> 
    56                              <1> struc renameFcb
    57                              <1> ;Used for accessing the names and drive letter for renaming
    58                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    59 00000000 ??                  <1>     .driveNum   resb 1
    60 00000001 ????????????????    <1>     .filename   resb 8
    61 00000009 ??????              <1>     .fileext    resb 3
    62 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    63 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    64 00000011 ????????????????    <1>     .newName    resb 8
    65 00000019 ??????              <1>     .newExt     resb 3
    66 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    67                              <1> endstruc
    68                              <1> 
    69                              <1> ;FCBmode equates:
    70                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    71                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    72                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    73                              <1> fcbShareOn  equ 80h
    74                              <1> fcbCharDev  equ 40h
    75                              <1> fcbLocal    equ 40h
    76                              <1> 
    77                              <1> ;Structures of the special 6 bytes
    78                              <1> 
    79                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    80                              <1> struc noShare   
    81 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    82 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    83 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    84 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    85                              <1> endstruc
    86                              <1> 
    87                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    88                              <1> struc shareLocal    
    89 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    90 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    91 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    92                              <1> endstruc
    93                              <1> 
    94                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    95                              <1> struc shareNet
    96                              <1> ;All three fields too small for FAT32
    97 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    98 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    99 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   100                              <1> endstruc
     9                                  %include "./Source/Include/dosError.inc"
    10                              <1> ;DOS Error codes
    11                              <1> 
    12                              <1> ;Extended Error Codes
    13                              <1> errInvFnc   equ 1   ;Invalid function number
    14                              <1> errFnf      equ 2   ;File not found
    15                              <1> errPnf      equ 3   ;Path not found
    16                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    17                              <1> errAccDen   equ 5   ;Access denied (to resource)
    18                              <1> errBadHdl   equ 6   ;Invalid handle
    19                              <1> errMCBbad   equ 7   ;MCB's destroyed
    20                              <1> errNoMem    equ 8   ;Insufficient memory
    21                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    22                              <1> errBadEnv   equ 10  ;Invalid environment
    23                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    24                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    25                              <1> errInvDat   equ 13  ;Invalid data
    26                              <1> ;           equ 14  ;Reserved
    27                              <1> errBadDrv   equ 15  ;Invalid drive specified
    28                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    29                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    30                              <1> errNoFil    equ 18  ;No more files, no match found
    31                              <1> ;The following are Driver error codes + 19
    32                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    33                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    34                              <1> errUnkUnt   equ 20  ;Unknown Unit
    35                              <1> errDrvNR    equ 21  ;Drive not ready
    36                              <1> errUnkCmd   equ 22  ;Unknown Command
    37                              <1> errCRCerr   equ 23  ;Data (CRC) error
    38                              <1> errBadRLn   equ 24  ;Bad request structure length
    39                              <1> errSekErr   equ 25  ;Seek error
    40                              <1> errUnkMed   equ 26  ;Unknown media type
    41                              <1> errSecNF    equ 27  ;Sector not Found
    42                              <1> errNoPap    equ 28  ;Printer out of paper
    43                              <1> errWF       equ 29  ;Write fault
    44                              <1> errRF       equ 30  ;Read fault
    45                              <1> errGF       equ 31  ;General fault
    46                              <1> ;----------------------------------------------
    47                              <1> ;The following two go inbetween the Disk errors
    48                              <1> errShrVio   equ 32  ;Sharing violations
    49                              <1> errLokVio   equ 33  ;File Lock violation
    50                              <1> ;----------------------------------------------
    51                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    52                              <1> errNoFCB    equ 35  ;FCB unavailable
    53                              <1> errShrFul   equ 36  ;Sharing buffer full
    54                              <1> 
    55                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    56                              <1> 
    57                              <1> errFilExist equ 80  ;File already exists
    58                              <1> errDirExist equ 82  ;Directory already exists
    59                              <1> errFI44     equ 83  ;Fail on INT 44h
    60                              <1> errRedir    equ 84  ;Too many levels of redirection
    61                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    62                              <1> errBadPass  equ 86  ;Bad password
    63                              <1> errBadParam equ 87  ;Bad parameter passed to request
    64                              <1> errNetWrite equ 88  ;Network Write Fault
    65                              <1> ;-----------------------------------------------------------------------------
    66                              <1> ;Error Loci
    67                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    68                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    69                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    70                              <1> eLocChr     equ 4   ;Serial/Character Device error
    71                              <1> eLocMem     equ 5   ;Related to RAM
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error Actions
    74                              <1> eActRet     equ 1   ;Retry
    75                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    76                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    77                              <1> eActAbt     equ 4   ;Abort with cleanup
    78                              <1> eActKil     equ 5   ;Abort without cleanup
    79                              <1> eActIgn     equ 6   ;Ignore error
    80                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    81                              <1> ;-----------------------------------------------------------------------------
    82                              <1> ;Error classes
    83                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    84                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    85                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    86                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    87                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    88                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    89                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    90                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    91                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    92                              <1> eClsLocked  equ 10  ;Resource Locked
    93                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    94                              <1> eClsClash   equ 12  ;Resource already exists!
    95                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Source/Utils/COMMAND/Data/cmdEqu.asm"
    11                              <1> ;Data equates and struct declarations
    12                              <1> 
    13                              <1> cmdBufferL  equ 128 ;Length of a command line buffer
    14                              <1> driveSpecL  equ 2   ;Space for X:
    15                              <1> dirPathL    equ 64  ;Length of a directory path
    16                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
    17                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
    18                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
    19                              <1> fullDirPathL equ driveSpecL + dirPathL
    20                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    21                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    22                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    23                              <1> 
    24                              <1> ;Use PSP FCB's for switch buffers
    25                              <1> fcb1        equ psp.fcb1
    26                              <1> fcb2        equ psp.fcb2
    27                              <1> ;Use the dta as the built command line buffer.
    28                              <1> cmdLineCnt  equ psp.parmList
    29                              <1> cmdLine     equ psp.progTail
    30                              <1> 
    31                              <1> 
    32                              <1> ;Struct Declarations
    33                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    34 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    35 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    36 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    37 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    38 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    39                              <1> endstruc
    40                              <1> 
    41                              <1> struc execProg  ;For use with EXEC-ing a child task
    42 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    43 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    44 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    45 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    46                              <1> endstruc
    47                              <1> 
    48                              <1> ;Directory attribute equates
    49                              <1>     dirReadOnly     equ 01h
    50                              <1>     dirHidden       equ 02h
    51                              <1>     dirSystem       equ 04h
    52                              <1>     dirVolumeID     equ 08h
    53                              <1>     dirDirectory    equ 10h
    54                              <1>     dirArchive      equ 20h
    55                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    56                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    57                              <1>     ;If any of the three bits are set, then ALL three bits are set
    58                              <1>     ; in addition to whatever the user passed to search for.
    59                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    60                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Source/Utils/COMMAND/Data/cmdData.asm"
    13                              <1> ;Static Data Area for COMMAND.COM    
    14                              <1> startLbl:   ;Start symbol, this is the entry point
    15 00000000 E9162A0000          <1>     jmp cmdLdr
    16 00000005 0000000000000000    <1> stackBottom dq 0    ;Pointer to the top of the stack as allocated by DOS
    17 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
    18 0000000F FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
    19 00000017 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
    20 0000001F 1400                <1> numHdls     dw 20   ;Get number of handles permitted, hardcoded in this version
    21 00000021 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    22 00000023 5C                  <1> pathSep     db "\"  ;Default path sep
    23 00000024 2F                  <1> switchChar  db "/"  ;Default switch char
    24 00000025 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    25 00000026 0000000000000000    <1> parentInt42 dq 0    ;Stores the parent values to restore upon exiting if it can
    26                              <1> ;Static strings, not used in command line parsing
    27 0000002E 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    27 00000037 000000000000000000- <1>
    27 00000040 000000000000000000- <1>
    27 00000049 000000000000000000- <1>
    27 00000052 0000                <1>
    28 00000054 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    28 0000005D 000000000000000000- <1>
    28 00000066 000000000000000000- <1>
    28 0000006F 000000000000000000- <1>
    28 00000078 000000000000000000- <1>
    28 00000081 000000000000000000- <1>
    28 0000008A 000000000000000000- <1>
    28 00000093 00000000            <1>
    29                              <1> 
    30                              <1> 
    31                              <1> cmdLineStatePtr:
    32 00000097 00                  <1> cmdStartOff db 0    ;Offset to the first char for this command (may be a space)
    33 00000098 00                  <1> cmdEndOff   db 0    ;Offset to the terminating char for this command (0Dh or |)
    34 00000099 00                  <1> pipeFlag    db 0    ;If set, we are piping across a command
    35 0000009A 0000                <1> pipeHndl    dw 0    ;If pipeFlag set, this var has the handle to the pipe file
    36 0000009C 000000000000000000- <1> pipeName    db 13 dup 0, ;Space for name of the pipe file we created.
    36 000000A5 00000000            <1>
    37                              <1> 
    38                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    39                              <1> ;These variables are valid for a SINGLE command in a command line
    40 000000A9 0000                <1> cmdDrvSpec  dw 0    ;Read the first word in to see if the pathspec has drivespec
    41 000000AB 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    42 000000AC 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    43                              <1> ;                    If 2, we are redirecting output to a file, by appending
    44                              <1> ;FLG and SWCH are read as a word when checking if argX is a switch
    45 000000AD 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    46 000000AE 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    47 000000AF 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    48                              <1> 
    49 000000B0 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    50 000000B1 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    51 000000B2 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    52                              <1> 
    53                              <1> cmdStateL equ $ - cmdStatePtr
    54                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    55                              <1> 
    56                              <1> ;Structs and strings
    57                              <1> 
    58 000000B3 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    58 000000BC 00000000000000      <1>
    59 000000C3 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    59 000000CC 000000000000000000- <1>
    59 000000D5 000000000000000000- <1>
    59 000000DE 000000000000000000- <1>
    59 000000E7 00000000000000      <1>
    60                              <1> 
    61 000000EE 000000000000000000- <1> launchBlock db execProg_size dup (0)
    61 000000F7 000000000000000000- <1>
    61 00000100 000000000000000000- <1>
    61 00000109 0000000000          <1>
    62                              <1> 
    63 0000010E 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    63 00000117 000000000000000000- <1>
    63 00000120 000000000000000000- <1>
    63 00000129 000000000000000000- <1>
    63 00000132 000000000000000000- <1>
    63 0000013B 000000000000000000- <1>
    63 00000144 000000000000000000- <1>
    63 0000014D 000000000000000000- <1>
    63 00000156 000000000000000000- <1>
    63 0000015F 000000000000000000- <1>
    63 00000168 000000000000000000- <1>
    63 00000171 000000000000000000- <1>
    63 0000017A 000000000000000000- <1>
    63 00000183 000000000000000000- <1>
    63 0000018C 0000                <1>
    64 0000018E 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    64 00000197 000000000000000000- <1>
    64 000001A0 000000000000000000- <1>
    64 000001A9 000000000000000000- <1>
    64 000001B2 000000000000000000- <1>
    64 000001BB 000000000000000000- <1>
    64 000001C4 000000000000000000- <1>
    64 000001CD 000000000000000000- <1>
    64 000001D6 000000000000000000- <1>
    64 000001DF 000000000000000000- <1>
    64 000001E8 000000000000000000- <1>
    64 000001F1 000000000000000000- <1>
    64 000001FA 000000000000000000- <1>
    64 00000203 000000000000000000- <1>
    64 0000020C 0000                <1>
    65 0000020E 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)  ;Space for full path to a external command
    65 00000217 000000000000000000- <1>
    65 00000220 000000000000000000- <1>
    65 00000229 000000000000000000- <1>
    65 00000232 000000000000000000- <1>
    65 0000023B 000000000000000000- <1>
    65 00000244 000000000000000000- <1>
    65 0000024D 000000000000000000- <1>
    65 00000256 00000000000000      <1>
    66                              <1> 
    67 0000025D 000000000000000000- <1> fcbCmdSpec  db fcbNameL dup (0) ;Used to make a FCB style name for the file
    67 00000266 0000                <1>
    68 00000268 000000000000000000- <1> cmdSpec     db fileNameZL dup (0)   ;ASCIIZ command spec for the command name
    68 00000271 00000000            <1>
    69 00000275 000000000000000000- <1> cmdName     db cmdNameL dup (0) ;Command name string prefixed by length of word
    69 0000027E 0000000000          <1>
    70                              <1> 
    71 00000283 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    71 0000028C 000000000000000000- <1>
    71 00000295 000000000000000000- <1>
    71 0000029E 000000000000000000- <1>
    71 000002A7 000000000000000000- <1>
    71 000002B0 000000000000000000- <1>
    71 000002B9 000000000000000000- <1>
    71 000002C2 000000000000000000- <1>
    71 000002CB 00000000000000      <1>
    72 000002D2 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    72 000002DB 000000000000000000- <1>
    72 000002E4 000000000000000000- <1>
    72 000002ED 000000000000000000- <1>
    72 000002F6 000000000000000000- <1>
    72 000002FF 000000000000000000- <1>
    72 00000308 000000000000000000- <1>
    72 00000311 000000000000000000- <1>
    72 0000031A 00000000000000      <1>
    73                              <1> 
    74 00000321 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Contains the pathspec for the search file
    74 0000032A 000000000000000000- <1>
    74 00000333 000000000000000000- <1>
    74 0000033C 000000000000000000- <1>
    74 00000345 000000000000000000- <1>
    74 0000034E 000000000000000000- <1>
    74 00000357 000000000000000000- <1>
    74 00000360 000000000000000000- <1>
    74 00000369 000000000000000000- <1>
    74 00000372 000000000000000000- <1>
    74 0000037B 000000000000000000- <1>
    74 00000384 000000000000000000- <1>
    74 0000038D 000000000000000000- <1>
    74 00000396 000000000000000000- <1>
    74 0000039F 0000                <1>
    75                              <1> ;The above is larger than is needed/supported by DOS to allow for 
    76                              <1> ; users overtyping
    77                              <1> 
    78                              <1> ;Internal Function vars
    79                              <1> ;Dir Vars
    80 000003A1 00                  <1> dirPrnType  db 0    ;Print type.    Bit[0] set => /W or /w specified
    81                              <1> ;                                   Bit[1] set => /P or /p specified
    82 000003A2 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    83 000003A3 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    84 000003A4 00                  <1> dirDrv      db 0    ;0 based drive number to use
    85 000003A5 000000000000000000- <1> dirOldCWD   db cmdBufferL dup (0)   ;Space for CWD and any overspill 
    85 000003AE 000000000000000000- <1>
    85 000003B7 000000000000000000- <1>
    85 000003C0 000000000000000000- <1>
    85 000003C9 000000000000000000- <1>
    85 000003D2 000000000000000000- <1>
    85 000003DB 000000000000000000- <1>
    85 000003E4 000000000000000000- <1>
    85 000003ED 000000000000000000- <1>
    85 000003F6 000000000000000000- <1>
    85 000003FF 000000000000000000- <1>
    85 00000408 000000000000000000- <1>
    85 00000411 000000000000000000- <1>
    85 0000041A 000000000000000000- <1>
    85 00000423 0000                <1>
    86 00000425 000000000000000000- <1> dirPathArg  db cmdBufferL dup (0)   ;Copy the pathspec argument here if any
    86 0000042E 000000000000000000- <1>
    86 00000437 000000000000000000- <1>
    86 00000440 000000000000000000- <1>
    86 00000449 000000000000000000- <1>
    86 00000452 000000000000000000- <1>
    86 0000045B 000000000000000000- <1>
    86 00000464 000000000000000000- <1>
    86 0000046D 000000000000000000- <1>
    86 00000476 000000000000000000- <1>
    86 0000047F 000000000000000000- <1>
    86 00000488 000000000000000000- <1>
    86 00000491 000000000000000000- <1>
    86 0000049A 000000000000000000- <1>
    86 000004A3 0000                <1>
    87 000004A5 3F3F3F3F3F3F3F3F    <1> dirSrchPat  db 8 dup ("?")    ;We copy the search pattern here
    88 000004AD 2E                  <1> dirSPExt    db "."
    89 000004AE 3F3F3F              <1>             db 3 dup ("?")
    90                              <1> 
    91                              <1> ;Volume Vars
    92 000004B1 000000000000000000- <1> volLblSpc   db 13 dup (0)
    92 000004BA 00000000            <1>
    93 000004BE 00                  <1> volPathBuf  db 0 ;Drive LETTER goes here
    94 000004BF 3A5C2A2E2A00        <1>             db ":\*.*",0  ;This remains to build X:\*.*,0 for vol label search
    95                              <1> 
    96                              <1> ;Time/Date vars
    97 000004C5 00                  <1> td1 db 0    ;Minutes/Year
    98 000004C6 00                  <1> td2 db 0    ;Hours/Zero
    99 000004C7 00                  <1> td3 db 0    ;Hundredths/Day
   100 000004C8 00                  <1> td4 db 0    ;Seconds/Month
   101                              <1> 
   102                              <1> ;Rename/Copy Buffers
   103 000004C9 000000000000000000- <1> sourcePath  db cmdBufferL dup (0)
   103 000004D2 000000000000000000- <1>
   103 000004DB 000000000000000000- <1>
   103 000004E4 000000000000000000- <1>
   103 000004ED 000000000000000000- <1>
   103 000004F6 000000000000000000- <1>
   103 000004FF 000000000000000000- <1>
   103 00000508 000000000000000000- <1>
   103 00000511 000000000000000000- <1>
   103 0000051A 000000000000000000- <1>
   103 00000523 000000000000000000- <1>
   103 0000052C 000000000000000000- <1>
   103 00000535 000000000000000000- <1>
   103 0000053E 000000000000000000- <1>
   103 00000547 0000                <1>
   104 00000549 000000000000000000- <1> destPath    db cmdBufferL dup (0)
   104 00000552 000000000000000000- <1>
   104 0000055B 000000000000000000- <1>
   104 00000564 000000000000000000- <1>
   104 0000056D 000000000000000000- <1>
   104 00000576 000000000000000000- <1>
   104 0000057F 000000000000000000- <1>
   104 00000588 000000000000000000- <1>
   104 00000591 000000000000000000- <1>
   104 0000059A 000000000000000000- <1>
   104 000005A3 000000000000000000- <1>
   104 000005AC 000000000000000000- <1>
   104 000005B5 000000000000000000- <1>
   104 000005BE 000000000000000000- <1>
   104 000005C7 0000                <1>
   105                              <1> ;Copy Handles
   106 000005C9 FFFF                <1> sourceHdl   dw -1
   107 000005CB FFFF                <1> destHdl     dw -1
   108                              <1> 
   109                              <1> copyBuffer  db 0 dup (128)  ;Copy up to 128 bytes at a time
    13                                  %include "./Source/Utils/COMMAND/Data/cmdTable.asm"
    14                              <1> ;Function dispatch table
    15                              <1> functionTable:
    16                              <1> ;Use Pascal strings with each row of hte table having three columns:
    17                              <1> ; Col 1, BYTE, Length of command
    18                              <1> ; Col 2, String, String representing the user input
    19                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
    20 000005CD 03444952            <1>     db 3, "DIR"
    21 000005D1 9B11                <1>     dw dir - startLbl
    22                              <1> 
    23 000005D3 024344              <1>     db 2, "CD"
    24 000005D6 3315                <1>     dw chdir - startLbl
    25                              <1> 
    26 000005D8 054348444952        <1>     db 5, "CHDIR"
    27 000005DE 3315                <1>     dw chdir - startLbl
    28                              <1> 
    29 000005E0 024D44              <1>     db 2, "MD"
    30 000005E3 DB15                <1>     dw mkdir - startLbl
    31                              <1> 
    32 000005E5 054D4B444952        <1>     db 5, "MKDIR"
    33 000005EB DB15                <1>     dw mkdir - startLbl
    34                              <1> 
    35 000005ED 025244              <1>     db 2, "RD"
    36 000005F0 2716                <1>     dw rmdir - startLbl
    37                              <1> 
    38 000005F2 05524D444952        <1>     db 5, "RMDIR"
    39 000005F8 2716                <1>     dw rmdir - startLbl
    40                              <1> 
    41 000005FA 0344454C            <1>     db 3, "DEL"
    42 000005FE 1518                <1>     dw erase - startLbl
    43                              <1> 
    44 00000600 054552415345        <1>     db 5, "ERASE"
    45 00000606 1518                <1>     dw erase - startLbl
    46                              <1> 
    47 00000608 0444415445          <1>     db 4, "DATE"
    48 0000060D 3E18                <1>     dw date - startLbl
    49                              <1> 
    50 0000060F 0454494D45          <1>     db 4, "TIME"
    51 00000614 0419                <1>     dw time - startLbl
    52                              <1> 
    53 00000616 04434F5059          <1>     db 4, "COPY"
    54 0000061B 7316                <1>     dw copy - startLbl
    55                              <1> 
    56 0000061D 0443545459          <1>     db 4, "CTTY"
    57 00000622 9C19                <1>     dw ctty - startLbl
    58                              <1> 
    59 00000624 03434C53            <1>     db 3, "CLS"
    60 00000628 371A                <1>     dw cls - startLbl
    61                              <1> 
    62 0000062A 05425245414B        <1>     db 5, "BREAK"
    63 00000630 A91A                <1>     dw break - startLbl
    64                              <1> 
    65 00000632 06564552494659      <1>     db 6, "VERIFY"
    66 00000639 2A1B                <1>     dw verify - startLbl
    67                              <1> 
    68 0000063B 0652454E414D45      <1>     db 6, "RENAME"
    69 00000642 A71B                <1>     dw rename - startLbl
    70                              <1> 
    71 00000644 08545255454E414D45  <1>     db 8, "TRUENAME"
    72 0000064D AF1C                <1>     dw truename - startLbl
    73                              <1> 
    74 0000064F 03564552            <1>     db 3, "VER"
    75 00000653 F81D                <1>     dw version - startLbl
    76                              <1> 
    77 00000655 03564F4C            <1>     db 3, "VOL"
    78 00000659 E51C                <1>     dw volume - startLbl
    79                              <1> 
    80 0000065B 034D454D            <1>     db 3, "MEM"
    81 0000065F 3C1E                <1>     dw memory - startLbl
    82                              <1> 
    83 00000661 0445584954          <1>     db 4, "EXIT"
    84 00000666 1E20                <1>     dw exit - startLbl
    85                              <1> 
    86 00000668 0454595045          <1>     db 4, "TYPE"
    87 0000066D 861F                <1>     dw type - startLbl
    88                              <1> 
    89 0000066F 05544F554348        <1>     db 5, "TOUCH"
    90 00000675 741C                <1>     dw touch - startLbl
    91                              <1> 
    92 00000677 FF                  <1>     db -1   ;End of table
    14                                  %include "./Source/Utils/COMMAND/Data/cmdMsg.asm"
    15                              <1> ;COMMAND.COM Messages and strings
    16 00000678 0D0A24              <1> crlf    db  CR,LF,"$"
    17 0000067B 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
    18 00000680 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
    18 00000689 696C65206D69737369- <1>
    18 00000692 6E670D0A24          <1>
    19 00000697 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
    19 000006A0 6469736B2077697468- <1>
    19 000006A9 206261746368206669- <1>
    19 000006B2 6C65                <1>
    20 000006B4 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
    20 000006BD 737320616E79206B65- <1>
    20 000006C6 79207768656E207265- <1>
    20 000006CF 6164790D0A24        <1>
    21 000006D5 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
    21 000006DE 6E64206F722066696C- <1>
    21 000006E7 65206E616D650D0A24  <1>
    22 000006F0 4475706C6963617465- <1> dupName db  "Duplicate file name or "
    22 000006F9 2066696C65206E616D- <1>
    22 00000702 65206F7220          <1>
    23 00000707 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    23 00000710 666F756E640D0A24    <1>
    24 00000718 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    24 00000721 656E74206469736B20- <1>
    24 0000072A 73706163650D0A24    <1>
    25 00000732 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    25 0000073B 7669726F6E6D656E74- <1>
    25 00000744 2073706163650D0A24  <1>
    26 0000074D 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    26 00000756 74696F6E206572726F- <1>
    26 0000075F 720D0A24            <1>
    27 00000763 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    27 0000076C 6F7420626520636F70- <1>
    27 00000775 696564206F6E746F20- <1>
    27 0000077E 697473656C660D0A24  <1>
    28 00000787 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    28 00000790 662064657374696E61- <1>
    28 00000799 74696F6E206C6F7374- <1>
    28 000007A2 206265666F72652063- <1>
    28 000007AB 6F70790D0A24        <1>
    29                              <1> ;Copy end message. First write # files copied then this message 
    30 000007B1 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    30 000007BA 636F706965640D0A24  <1>
    31                              <1> ;Dir end1 msg. First write # files in dir then this
    32 000007C3 2046696C6528732920- <1> dirOk   db  " File(s) $"
    32 000007CC 24                  <1>
    33                              <1> ;Dir end2 msg. First write # bytes free then this message
    34 000007CD 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    34 000007D6 65650D0A24          <1>
    35 000007DB 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    36                              <1> 
    37 000007E4 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    37 000007ED 726976652073706563- <1>
    37 000007F6 696669636174696F6E- <1>
    37 000007FF 0D0A24              <1>
    38 00000802 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    38 0000080B 6B6579207768656E20- <1>
    38 00000814 7265616479202E202E- <1>
    38 0000081D 202E2024            <1>
    39 00000821 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    39 0000082A 6172616D657465720D- <1>
    39 00000833 0A24                <1>
    40                              <1> 
    41 00000835 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    41 0000083E 576564546875467269- <1>
    41 00000847 536174              <1>
    42 0000084A 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    42 00000853 206461746524        <1>
    43 00000859 43757272656E742064- <1> curDate db  "Current date is $"
    43 00000862 6174652069732024    <1>
    44 0000086A 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    44 00000873 657720646174652024  <1>
    45 0000087C 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    45 00000885 293A2024            <1>
    46 00000889 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    46 00000892 293A2024            <1>
    47 00000896 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    47 0000089F 293A2024            <1>
    48 000008A3 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    48 000008AC 2074696D6524        <1>
    49 000008B2 43757272656E742074- <1> curTime db  "Current time is $"
    49 000008BB 696D652069732024    <1>
    50 000008C3 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    50 000008CC 65772074696D653A20- <1>
    50 000008D5 24                  <1>
    51                              <1> 
    52 000008D6 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    52 000008DF 7572652028592F4E29- <1>
    52 000008E8 3F2024              <1>
    53                              <1> 
    54 000008EB 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    54 000008F4 56657273696F6E2024  <1>
    55                              <1> 
    56 000008FD 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    56 00000906 6E2064726976652024  <1>
    57 0000090F 2069732024          <1> volOk   db " is $"
    58 00000914 20686173206E6F206C- <1> volNo   db " has no label$"
    58 0000091D 6162656C24          <1>
    59                              <1> 
    60 00000922 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    60 0000092B 69726563746F72790D- <1>
    60 00000934 0A24                <1>
    61 00000936 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    61 0000093F 206372656174652064- <1>
    61 00000948 69726563746F72790D- <1>
    61 00000951 0A24                <1>
    62 00000953 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    62 0000095C 6174682C206E6F7420- <1>
    62 00000965 6469726563746F7279- <1>
    62 0000096E 2C0D0A              <1>
    63 00000971 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    63 0000097A 6F7279206E6F742065- <1>
    63 00000983 6D7074790D0A24      <1>
    64 0000098A 204469726563746F72- <1> dirMain db " Directory of  $"
    64 00000993 79206F66202024      <1>
    65 0000099A 4E6F20506174682024  <1> noPath  db "No Path $"
    66 000009A3 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    66 000009AC 7269766520696E2073- <1>
    66 000009B5 656172636820706174- <1>
    66 000009BE 680D0A24            <1>
    67 000009C2 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    67 000009CB 65766963650D0A24    <1>
    68 000009D3 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    68 000009DC 20666F756E640D0A24  <1>
    69 000009E5 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    69 000009EE 726F720D0A24        <1>
    70 000009F4 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    70 000009FD 6F74206265206E6573- <1>
    70 00000A06 7465640D0A24        <1>
    71 00000A0C 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    71 00000A15 6174652066696C6520- <1>
    71 00000A1E 6572726F7220647572- <1>
    71 00000A27 696E6720706970650D- <1>
    71 00000A30 0A24                <1>
    72 00000A32 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    72 00000A3B 2062696E6172792072- <1>
    72 00000A44 656164732066726F6D- <1>
    72 00000A4D 206120646576696365- <1>
    72 00000A56 0D0A24              <1>
    73 00000A59 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    74 00000A5F 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    75 00000A64 425245414B20697320- <1> breakIs db "BREAK is $"
    75 00000A6D 24                  <1>
    76 00000A6E 564552494659206973- <1> verifyIs    db "VERIFY is $"
    76 00000A77 2024                <1>
    77 00000A79 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    78 00000A82 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    78 00000A8B 617468206F72206669- <1>
    78 00000A94 6C65206E616D650D0A- <1>
    78 00000A9D 24                  <1>
    79 00000A9E 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    79 00000AA7 756D626572206F6620- <1>
    79 00000AB0 706172616D65746572- <1>
    79 00000AB9 730D0A24            <1>
    80 00000ABD 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    80 00000AC6 74696E6720746F2064- <1>
    80 00000ACF 6576696365          <1>
    81 00000AD4 08200800            <1> backSpace   db BSP," ",BSP,NUL
    82                              <1> 
    83 00000AD8 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    83 00000AE1 20202020202020546F- <1>
    83 00000AEA 74616C207379737465- <1>
    83 00000AF3 6D206D656D6F72793A- <1>
    83 00000AFC 2024                <1>
    84 00000AFE 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    84 00000B07 20202020202020204D- <1>
    84 00000B10 656D6F727920757365- <1>
    84 00000B19 6420627920444F533A- <1>
    84 00000B22 2024                <1>
    85 00000B24 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    85 00000B2D 656D6F727920757365- <1>
    85 00000B36 64206279206170706C- <1>
    85 00000B3F 69636174696F6E733A- <1>
    85 00000B48 2024                <1>
    86 00000B4A 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    86 00000B53 656D6F727920726573- <1>
    86 00000B5C 657276656420627920- <1>
    86 00000B65 68617264776172653A- <1>
    86 00000B6E 2024                <1>
    87 00000B70 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    87 00000B79 202020202020202020- <1>
    87 00000B82 2020202020204D656D- <1>
    87 00000B8B 6F727920667265653A- <1>
    87 00000B94 2024                <1>
    88 00000B96 20627974657324      <1> memByte db " bytes$"
    89 00000B9D 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    89 00000BA6 6F7420417373657274- <1>
    89 00000BAF 61696E20444F532045- <1>
    89 00000BB8 6E74727920506F696E- <1>
    89 00000BC1 7424                <1>
    90 00000BC3 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    90 00000BCC 416C6C6F636174696F- <1>
    90 00000BD5 6E204572726F7224    <1>
    91 00000BDD 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    91 00000BE6 4572726F7224        <1>
    92 00000BEC 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    92 00000BF5 68616C74656424      <1>
    93                              <1> 
    94 00000BFC 556E61626C6520746F- <1> touchErr db "Unable to create file",CR,LF,"$"
    94 00000C05 206372656174652066- <1>
    94 00000C0E 696C650D0A24        <1>
    95                              <1> 
    96                              <1> 
    97 00000C14 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    98 00000C18 2020202024          <1> fourSpc  db "    $"
    99 00000C1D 20202024            <1> threeSpc db "   $"
   100 00000C21 202024              <1> twoSpc   db "  $"
   101                              <1> 
   102 00000C24 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
   102 00000C2D 696679204F4E206F72- <1>
   102 00000C36 204F46460D0A24      <1>
   103 00000C3D 504154483D          <1> pathEVar db "PATH="
   104 00000C42 50524F4D50543D      <1> promptEVar  db "PROMPT="
    15                                  %include "./Source/Utils/COMMAND/Source/cmdMain.asm"
    16                              <1> commandStart:
    17                              <1>     ;Resize Allocation, jump here with endpointer in rbx
    18                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
    19                              <1>     ; that the jump to safety won't be gobbled up when multitasking
    20 00000C49 49F7D8              <1>     neg r8  ;Convert r8 to -r8
    21 00000C4C 4A8D5C0311          <1>     lea rbx, qword [rbx + r8 + 11h]    ;Get # of bytes for COMMAND.COM
    22 00000C51 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
    23 00000C54 B44A                <1>     mov ah, 4Ah ;Realloc
    24 00000C56 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    25 00000C59 CD41                <1>     int 41h
    26 00000C5B EB5A                <1>     jmp short commandMain
    27                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    28 00000C5D B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    29 00000C62 CD41                <1>     int 41h
    30 00000C64 668905A2F3FFFF      <1>     mov word [returnCode], ax
    31                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    32 00000C6B 488D15EB1A0000      <1>     lea rdx, critErrorHandler
    33 00000C72 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    34 00000C76 B844250000          <1>     mov eax, 2544h
    35 00000C7B CD41                <1>     int 41h
    36 00000C7D 488D15691D0000      <1>     lea rdx, int43h
    37 00000C84 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    38 00000C88 B843250000          <1>     mov eax, 2543h
    39 00000C8D CD41                <1>     int 41h
    40 00000C8F 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    41 00000C96 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    42 00000C9A B842250000          <1>     mov eax, 2542h
    43 00000C9F CD41                <1>     int 41h
    44                              <1> ;Close all handles from 5->MAX
    45 00000CA1 0FB70D77F3FFFF      <1>     movzx ecx, word [numHdls]
    46 00000CA8 BB05000000          <1>     mov ebx, 5
    47                              <1> .handleClose:
    48 00000CAD B43E                <1>     mov ah, 3Eh ;File close
    49 00000CAF CD41                <1>     int 41h
    50 00000CB1 FFC3                <1>     inc ebx ;Goto next file
    51 00000CB3 39CB                <1>     cmp ebx, ecx
    52 00000CB5 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    53                              <1> commandMain:
    54                              <1> ;Setup Commandline
    55 00000CB7 FA                  <1>     cli
    56 00000CB8 488B2546F3FFFF      <1>     mov rsp, qword [stackBottom]    ;Reset internal stack pointer pos
    57 00000CBF FB                  <1>     sti
    58 00000CC0 FC                  <1>     cld ;Ensure stringops are done the right way
    59 00000CC1 C60546F4FFFF80      <1>     mov byte [inBuffer], 80h    ;Reset the buffer length
    60                              <1> .inputMain:
    61 00000CC8 E844180000          <1>     call clearCommandLineState
    62 00000CCD E8CB140000          <1>     call printCRLF
    63 00000CD2 E812180000          <1>     call printPrompt
    64                              <1> 
    65 00000CD7 488D1530F4FFFF      <1>     lea rdx, inBuffer
    66 00000CDE B80A0C0000          <1>     mov eax, 0C0Ah  ;Do Buffered input
    67 00000CE3 CD41                <1>     int 41h
    68 00000CE5 E8B3140000          <1>     call printCRLF  ;Note we have accepted input
    69                              <1> 
    70                              <1> ;First check we had something typed in of length greater than 1
    71                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    72 00000CEA 803D1EF4FFFF01      <1>     cmp byte [inBuffer + 1], 1  ;Check input length valid
    73 00000CF1 742C                <1>     je .dfltErrExit
    74 00000CF3 72D3                <1>     jb .inputMain
    75                              <1>     ;Copy over the input text
    76 00000CF5 488D3512F4FFFF      <1>     lea rsi, inBuffer
    77 00000CFC 488D3D8BF4FFFF      <1>     lea rdi, cmdBuffer
    78 00000D03 B980000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    79 00000D08 F3A4                <1>     rep movsb
    80 00000D0A 31C0                <1>     xor eax, eax
    81 00000D0C 66890584F3FFFF      <1>     mov word [cmdStartOff], ax  ;Clear start and end Off positions
    82 00000D13 E814000000          <1>     call parseInput
    83 00000D18 E8AD010000          <1>     call doCommandLine
    84 00000D1D EBA9                <1>     jmp short .inputMain
    85                              <1> .dfltErrExit:
    86 00000D1F 488D15AFF9FFFF      <1>     lea rdx, badCmd
    87 00000D26 B409                <1>     mov ah, 09h
    88 00000D28 CD41                <1>     int 41h
    89 00000D2A EB9C                <1>     jmp short .inputMain
    90                              <1> 
    91                              <1> parseInput:
    92                              <1> ;EndOff is set up before entering this part
    93                              <1> ;Copies a nicely formatted version of the input command line
    94                              <1> ; without any redirections to psp.dta
    95 00000D2C 488D355DF4FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
    96 00000D33 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
    97 00000D3A 0FB61D57F3FFFF      <1>     movzx ebx, byte [cmdEndOff] ;Get the old end offset
    98 00000D41 4801DE              <1>     add rsi, rbx    ;Move rsi to the start of this new command
    99 00000D44 E891170000          <1>     call skipSpaces ;Skip any preceeding spaces
   100 00000D49 66AD                <1>     lodsw   ;Get the first two chars into ax
   101 00000D4B 66890557F3FFFF      <1>     mov word [cmdDrvSpec], ax ;Store these chars as if they are the drvspec
   102 00000D52 4881EE02000000      <1>     sub rsi, 2  ;Go back to the start of the command
   103 00000D59 56                  <1>     push rsi
   104 00000D5A 57                  <1>     push rdi
   105 00000D5B 488D3DACF4FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   106 00000D62 57                  <1>     push rdi
   107 00000D63 E845030000          <1>     call copyCommandTailItemProgram
   108 00000D68 5F                  <1>     pop rdi
   109 00000D69 9C                  <1>     pushfq  ;Save the CF state
   110 00000D6A E8F3160000          <1>     call strlen
   111 00000D6F FFC9                <1>     dec ecx ;Drop the terminating char from the count
   112 00000D71 58                  <1>     pop rax ;Get the CF state in al
   113 00000D72 5F                  <1>     pop rdi
   114 00000D73 5E                  <1>     pop rsi
   115 00000D74 F3A4                <1>     rep movsb   ;Now we copy the command into the psp command line
   116 00000D76 A801                <1>     test al, 1  ;Was CF set?
   117 00000D78 0F8586000000        <1>     jnz .exit   ;If an embedded CR was found in the filename, exit!
   118                              <1> .cmdLineProcess:
   119 00000D7E E857170000          <1>     call skipSpaces ;Go to the next char in the input line
   120                              <1> .redirFound:
   121 00000D83 AC                  <1>     lodsb   ;Get first non-space char (setupRedir skips spaces before ret)
   122 00000D84 3C0D                <1>     cmp al, CR  ;If this was a CR, we stop processing
   123 00000D86 747C                <1>     je .exit
   124 00000D88 E8B3020000          <1>     call checkAndSetupRedir ;If not, check if we have a redir element
   125 00000D8D 7275                <1>     jc .exit    ;CF=CY only if pipe, which is equivalent to CR when processing
   126 00000D8F 74F2                <1>     jz .redirFound  ;If we had a < > or >>, proceed to check if next char CR
   127 00000D91 B020                <1>     mov al, " "
   128 00000D93 AA                  <1>     stosb   ;Store a space to make space for the command file parameter
   129 00000D94 48FFCE              <1>     dec rsi ;Move rsi back to the first char
   130 00000D97 F6050FF3FFFFFF      <1>     test byte [arg1Flg], -1
   131 00000D9E 7521                <1>     jnz .arg2
   132                              <1> .arg1:
   133 00000DA0 C60506F3FFFFFF      <1>     mov byte [arg1Flg], -1
   134 00000DA7 E82E170000          <1>     call skipSpaces
   135 00000DAC 4889F0              <1>     mov rax, rsi
   136 00000DAF 488D1DD8F3FFFF      <1>     lea rbx, cmdBuffer
   137 00000DB6 4829D8              <1>     sub rax, rbx
   138 00000DB9 8805EFF2FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   139 00000DBF EB2A                <1>     jmp short .argCommon
   140                              <1> .arg2:
   141 00000DC1 F605E8F2FFFFFF      <1>     test byte [arg2Flg], -1
   142 00000DC8 7521                <1>     jnz .argCommon
   143 00000DCA C605DFF2FFFFFF      <1>     mov byte [arg2Flg], -1
   144 00000DD1 E804170000          <1>     call skipSpaces
   145 00000DD6 4889F0              <1>     mov rax, rsi
   146 00000DD9 488D1DAEF3FFFF      <1>     lea rbx, cmdBuffer
   147 00000DE0 4829D8              <1>     sub rax, rbx
   148 00000DE3 8805C8F2FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   149 00000DE9 EB00                <1>     jmp short .argCommon
   150                              <1> .argCommon:
   151                              <1>     ;More than two arguments? Do nothing more than just copy it
   152                              <1>     ; over. If we encounter an embedded CR, exit there too
   153 00000DEB E8EA160000          <1>     call skipSpaces
   154 00000DF0 803E0D              <1>     cmp byte [rsi], CR  ;Are we at the end of the commandline?
   155 00000DF3 740F                <1>     je .exit
   156                              <1>     ;If not, we copy it over
   157 00000DF5 E8DD020000          <1>     call copyCommandTailItem    ;Stores a terminating null we dont want
   158 00000DFA 488D7FFF            <1>     lea rdi, qword [rdi - 1]    ;Point back at the inserted terminating null
   159 00000DFE 0F837AFFFFFF        <1>     jnc .cmdLineProcess
   160                              <1> .exit:
   161 00000E04 488D1D83F3FFFF      <1>     lea rbx, cmdBuffer
   162 00000E0B 48FFCE              <1>     dec rsi
   163 00000E0E 4829DE              <1>     sub rsi, rbx    ;Get the offset into the command line
   164 00000E11 89F3                <1>     mov ebx, esi
   165 00000E13 881D7FF2FFFF        <1>     mov byte [cmdEndOff], bl    ;Store the offset to the terminating char
   166 00000E19 B00D                <1>     mov al, CR
   167 00000E1B AA                  <1>     stosb   ;Store the terminating CR in the psp command line
   168                              <1>     ;Now compute the command line length 
   169 00000E1C 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine] 
   170 00000E23 B00D                <1>     mov al, CR
   171 00000E25 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   172 00000E27 FFC9                <1>     dec ecx ;rcx = -1
   173 00000E29 F2AE                <1>     repne scasb
   174 00000E2B F7D1                <1>     not ecx
   175 00000E2D FEC9                <1>     dec cl  ;Dont include terminating CR
   176 00000E2F 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   177 00000E36 880F                <1>     mov byte [rdi], cl
   178                              <1>     ;Before returning, we copy the command name to cmdName
   179 00000E38 488D3DCFF3FFFF      <1>     lea rdi, cmdPathSpec
   180 00000E3F 4889FB              <1>     mov rbx, rdi    ;Use rbx as the ptr to the first char in the commandspec
   181 00000E42 30C0                <1>     xor al, al  ;Search for the terminating null
   182 00000E44 B94F000000          <1>     mov ecx, fileSpecZL ;Max number of chars the length could be
   183 00000E49 F2AE                <1>     repne scasb
   184 00000E4B 48FFCF              <1>     dec rdi ;Go to the last char in the command
   185 00000E4E 4889FE              <1>     mov rsi, rdi
   186 00000E51 FD                  <1>     std ;Now we go backwards to where rsi = rbx OR byte [rsi] = pathSep
   187                              <1> .keepSearching:
   188 00000E52 AC                  <1>     lodsb
   189 00000E53 3A05CAF1FFFF        <1>     cmp al, byte [pathSep]
   190 00000E59 740B                <1>     je .cmdStartFnd
   191 00000E5B 4839DE              <1>     cmp rsi, rbx
   192 00000E5E 75F2                <1>     jne .keepSearching
   193 00000E60 48FFCE              <1>     dec rsi ;Go back two to go forwards again
   194 00000E63 48FFCE              <1>     dec rsi
   195                              <1> .cmdStartFnd:
   196 00000E66 48FFC6              <1>     inc rsi
   197 00000E69 48FFC6              <1>     inc rsi ;Go past the pathsep
   198 00000E6C FC                  <1>     cld ;Go the sane way again
   199 00000E6D 488D3D02F4FFFF      <1>     lea rdi, qword [cmdName + 1]    ;First byte is for the length of the name
   200 00000E74 57                  <1>     push rdi    ;Cleanse the field before usage (not strictly necessary)
   201 00000E75 B90E000000          <1>     mov ecx, cmdNameL
   202 00000E7A 30C0                <1>     xor al, al
   203 00000E7C F3AA                <1>     rep stosb
   204 00000E7E 5F                  <1>     pop rdi
   205 00000E7F 31C9                <1>     xor ecx, ecx
   206 00000E81 56                  <1>     push rsi    ;Save the location of the start byte of the command name
   207                              <1> .cmdGetChar:
   208 00000E82 AC                  <1>     lodsb
   209 00000E83 84C0                <1>     test al, al ;Did we find the terminating null?
   210 00000E85 7411                <1>     jz .nameLenFnd
   211 00000E87 3C2E                <1>     cmp al, "." ;Extension sep also terminates
   212 00000E89 740D                <1>     je .nameLenFnd
   213 00000E8B 24DF                <1>     and al, 0DFh    ;Else uppercase the char
   214 00000E8D AA                  <1>     stosb   ;and store it
   215 00000E8E FFC1                <1>     inc ecx
   216 00000E90 81F90B000000        <1>     cmp ecx, 11 ;Max command length is 11
   217 00000E96 72EA                <1>     jb .cmdGetChar
   218                              <1> .nameLenFnd:
   219 00000E98 880DD7F3FFFF        <1>     mov byte [cmdName], cl  ;Store the name length now
   220                              <1>     ;Now finally, create a FCB filespec
   221 00000E9E 488D3DB8F3FFFF      <1>     lea rdi, fcbCmdSpec
   222 00000EA5 57                  <1>     push rdi
   223 00000EA6 B90B000000          <1>     mov ecx, fcbNameL
   224 00000EAB B020                <1>     mov al, " " ;Fill with spaces
   225 00000EAD F3AA                <1>     rep stosb
   226 00000EAF 5F                  <1>     pop rdi
   227 00000EB0 5E                  <1>     pop rsi ;Get back the location of the start byte of the command name
   228 00000EB1 E86C160000          <1>     call asciiToFCB
   229 00000EB6 488D35A0F3FFFF      <1>     lea rsi, fcbCmdSpec
   230 00000EBD 488D3DA4F3FFFF      <1>     lea rdi, cmdSpec
   231 00000EC4 E8B4160000          <1>     call FCBToAsciiz
   232                              <1>     return
    19                              <2> %%_ret:
    20 00000EC9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   233                              <1> 
   234                              <1> doCommandLine:
   235 00000ECA 488D35BFF2FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
   236 00000ED1 488D3DDBF1FFFF      <1>     lea rdi, cmdFcb
   237 00000ED8 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks
   238 00000EDD CD41                <1>     int 41h
   239 00000EDF 0FB71DC3F1FFFF      <1>     movzx ebx, word [cmdDrvSpec]    ;Get the drive specifier
   240 00000EE6 80FF3A              <1>     cmp bh, ":"
   241 00000EE9 752E                <1>     jne .noDriveSpecified
   242 00000EEB 88DA                <1>     mov dl, bl      ;Move the drive letter in dl
   243 00000EED 80E2DF              <1>     and dl, 0DFh    ;Make the drive letter upper case
   244 00000EF0 80EA41              <1>     sub dl, "A"     ;And make it a 0 based drive letter
   245 00000EF3 3CFF                <1>     cmp al, -1  ;Int 41h returns AL = -1 if bad drive specified
   246 00000EF5 7415                <1>     je .badDrive
   247                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   248 00000EF7 803D77F3FFFF02      <1>     cmp byte [cmdName], 2
   249 00000EFE 7519                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   250 00000F00 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   251 00000F02 CD41                <1>     int 41h 
   252 00000F04 B419                <1>     mov ah, 19h
   253 00000F06 CD41                <1>     int 41h     ;Get current drive
   254 00000F08 38D0                <1>     cmp al, dl  ;If the drive was set, all is well
   255                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000F0A 74(C9)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   256                              <1> .badDrive:
   257 00000F0C 488D15D1F8FFFF      <1>     lea rdx, badDrv
   258 00000F13 B409                <1>     mov ah, 09h
   259 00000F15 CD41                <1>     int 41h
   260 00000F17 F9                  <1>     stc
   261                              <1>     return
    19                              <2> %%_ret:
    20 00000F18 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   262                              <1> .noDriveSpecified:
   263                              <1> ;Now we set the two FCB's in the command line
   264 00000F19 F6058DF1FFFFFF      <1>     test byte [arg1Flg], -1
   265 00000F20 744D                <1>     jz .fcbArgsDone
   266 00000F22 0FB60585F1FFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   267 00000F29 488D355EF2FFFF      <1>     lea rsi, cmdBuffer
   268 00000F30 4801C6              <1>     add rsi, rax    ;Point to first argument
   269 00000F33 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   270 00000F37 B801290000          <1>     mov eax, 2901h
   271 00000F3C CD41                <1>     int 41h
   272 00000F3E 88056BF1FFFF        <1>     mov byte [arg1FCBret], al
   273 00000F44 F60565F1FFFFFF      <1>     test byte [arg2Flg], -1
   274 00000F4B 7422                <1>     jz .fcbArgsDone
   275 00000F4D 0FB6055DF1FFFF      <1>     movzx eax, byte [arg2Off]
   276 00000F54 488D3533F2FFFF      <1>     lea rsi, cmdBuffer
   277 00000F5B 4801C6              <1>     add rsi, rax    ;Point to first argument
   278 00000F5E 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   279 00000F62 B801290000          <1>     mov eax, 2901h
   280 00000F67 CD41                <1>     int 41h
   281 00000F69 880543F1FFFF        <1>     mov byte [arg2FCBret], al
   282                              <1> .fcbArgsDone:
   283 00000F6F 488D3518F2FFFF      <1>     lea rsi, cmdBuffer
   284 00000F76 488D1DF8F2FFFF      <1>     lea rbx, cmdName
   285 00000F7D B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   286 00000F82 BAFFFF0000          <1>     mov edx, 0FFFFh
   287 00000F87 B5FF                <1>     mov ch, -1
   288 00000F89 CD4F                <1>     int 4Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   289                              <1>             ;        al = 0  if the command should be executed as usual
   290 00000F8B B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   291 00000F90 BAFFFF0000          <1>     mov edx, 0FFFFh
   292 00000F95 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   293 00000F97 CD4F                <1>     int 4Fh
   294 00000F99 741D                <1>     jz .executeInternal
   295                              <1>     ;Here we execute externally and return to the prompt
   296                              <1>     ; as if it was an internal execution
   297 00000F9B 488D356CF1FFFF      <1>     lea rsi, inBuffer ;Point to this built buffer
   298 00000FA2 488D1D0AF1FFFF      <1>     lea rbx, cmdFcb
   299 00000FA9 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   300 00000FAE BAFFFF0000          <1>     mov edx, 0FFFFh
   301 00000FB3 B5FF                <1>     mov ch, -1
   302 00000FB5 CD4F                <1>     int 4Fh 
   303                              <1>     return
    19                              <2> %%_ret:
    20 00000FB7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   304                              <1> .executeInternal:
   305                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   306                              <1> ;rsi points after the command terminator in the command tail
   307 00000FB8 488D1D0EF6FFFF      <1>     lea rbx, functionTable
   308                              <1> .nextEntry:
   309 00000FBF 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   310 00000FC2 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   311 00000FC5 0F8489100000        <1>     je launchChild      ;If so, check externally now
   312 00000FCB 380DA4F2FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   313 00000FD1 7529                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   314                              <1>     ;Here they have the same length so lets see if the name is the same
   315 00000FD3 56                  <1>     push rsi
   316                              <1>     ;ecx has the length to compare
   317 00000FD4 51                  <1>     push rcx
   318 00000FD5 488D7301            <1>     lea rsi, qword [rbx + 1]
   319 00000FD9 488D3D96F2FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   320 00000FE0 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   321 00000FE2 59                  <1>     pop rcx
   322 00000FE3 5E                  <1>     pop rsi
   323 00000FE4 7516                <1>     jne .gotoNextEntry
   324                              <1>     ;Here it was found both strings are equal
   325 00000FE6 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   326 00000FEB 480FB71F            <1>     movzx rbx, word [rdi]
   327 00000FEF 488D3D0AF0FFFF      <1>     lea rdi, startLbl
   328 00000FF6 4801FB              <1>     add rbx, rdi
   329 00000FF9 FFD3                <1>     call rbx    ;Call this function...
   330                              <1>     return  ;... and return
    19                              <2> %%_ret:
    20 00000FFB C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   331                              <1> .gotoNextEntry:
   332 00000FFC 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   333 00001003 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   334 00001006 EBB7                <1>     jmp short .nextEntry
   335                              <1> .dfltErrExit:
   336 00001008 488D15C6F6FFFF      <1>     lea rdx, badCmd
   337 0000100F B409                <1>     mov ah, 09h
   338 00001011 CD41                <1>     int 41h
   339                              <1>     return
    19                              <2> %%_ret:
    20 00001013 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   340                              <1> 
   341                              <1> 
   342                              <1> checkExtensionExec:
   343                              <1> ;Checks the extension field of cmdFcb is .COM, .EXE, .BAT in that order
   344                              <1> ;Returns: ZF=ZE if executable. ZF=NZ if not executable.
   345                              <1> ;         If ZF=ZE and CF=CY => Batch file
   346 00001014 8B05A2F0FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   347 0000101A 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   348 0000101F 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   349 00001024 25DFDFDFFF          <1>     and eax, 0FFDFDFDFh ;Uppercase the three letters
   350 00001029 3D434F4D20          <1>     cmp eax, "COM "
   351                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000102E 74(13)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   352 00001030 3D45584520          <1>     cmp eax, "EXE "
   353                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001035 74(13)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   354 00001037 3D42415420          <1>     cmp eax, "BAT "
   355                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000103C 75(13)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   356 0000103E F9                  <1>     stc
   357                              <1>     return
    19                              <2> %%_ret:
    20 0000103F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   358                              <1> 
   359                              <1> checkAndSetupRedir:
   360                              <1> ;Checks and sets up redir as appropriate
   361                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   362                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   363                              <1> ;Output: ZF=NZ => No redir
   364                              <1> ;        ZF=ZY => Redir
   365                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   366                              <1> ;CF=CY if pipe set or an embedded CR found
   367 00001040 57                  <1>     push rdi
   368 00001041 3C3C                <1>     cmp al, "<"
   369 00001043 740B                <1>     je .inputRedir
   370 00001045 3C3E                <1>     cmp al, ">"
   371 00001047 742A                <1>     je .outputRedir
   372 00001049 3C7C                <1>     cmp al, "|"
   373 0000104B 7454                <1>     je .pipeSetup
   374 0000104D F8                  <1>     clc
   375                              <1> .redirExit:
   376 0000104E 5F                  <1>     pop rdi
   377                              <1>     return
    19                              <2> %%_ret:
    20 0000104F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   378                              <1> .inputRedir:
   379 00001050 C60554F0FFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   380 00001057 488D3D25F2FFFF      <1>     lea rdi, rdrInFilespec
   381 0000105E E877140000          <1>     call skipSpaces ;Skip spaces between < and the filespec
   382 00001063 E86F000000          <1>     call copyCommandTailItem
   383 00001068 72E4                <1>     jc .redirExit
   384 0000106A E86B140000          <1>     call skipSpaces
   385 0000106F 30C0                <1>     xor al, al
   386 00001071 EBDB                <1>     jmp short .redirExit
   387                              <1> .outputRedir:
   388 00001073 C60532F0FFFF01      <1>     mov byte [redirOut], 1
   389 0000107A 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   390 0000107D 7506                <1>     jne .notDouble
   391 0000107F FE0527F0FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   392                              <1> .notDouble:
   393 00001085 488D3D46F2FFFF      <1>     lea rdi, rdrOutFilespec
   394 0000108C E849140000          <1>     call skipSpaces
   395 00001091 E841000000          <1>     call copyCommandTailItem
   396 00001096 72B6                <1>     jc .redirExit
   397 00001098 E83D140000          <1>     call skipSpaces
   398 0000109D 30C0                <1>     xor al, al
   399 0000109F EBAD                <1>     jmp short .redirExit
   400                              <1> .pipeSetup:
   401 000010A1 C605F1EFFFFFFF      <1>     mov byte [pipeFlag], -1
   402 000010A8 30C0                <1>     xor al, al
   403 000010AA F9                  <1>     stc
   404 000010AB 5F                  <1>     pop rdi
   405                              <1>     return
    19                              <2> %%_ret:
    20 000010AC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   406                              <1> 
   407                              <1> copyCommandTailItemProgram:
   408                              <1> ;Copies a program name from the command tail until a terminator is found.
   409                              <1> ;Stores a terminating null in the destination
   410                              <1> ;Input: rsi = Start of the item to copy
   411                              <1> ;       rdi = Location for copy
   412                              <1> ;Output: Sentence copied with a null terminator inserted.
   413                              <1> ; If CF=CY, embedded CR encountered
   414 000010AD AC                  <1>     lodsb
   415 000010AE 3C0D                <1>     cmp al, CR
   416 000010B0 741A                <1>     je .endOfInput
   417 000010B2 E8EF130000          <1>     call isALterminator
   418 000010B7 741A                <1>     jz .exit
   419 000010B9 3A0564EFFFFF        <1>     cmp al, byte [pathSep]
   420 000010BF 7412                <1>     je .exit
   421 000010C1 3A055DEFFFFF        <1>     cmp al, byte [switchChar]
   422 000010C7 740A                <1>     je .exit
   423 000010C9 AA                  <1>     stosb
   424 000010CA EBE1                <1>     jmp short copyCommandTailItemProgram
   425                              <1> .endOfInput:
   426 000010CC E802000000          <1>     call .exit
   427 000010D1 F9                  <1>     stc 
   428                              <1>     return
    19                              <2> %%_ret:
    20 000010D2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   429                              <1> .exit:
   430 000010D3 30C0                <1>     xor al, al
   431 000010D5 AA                  <1>     stosb
   432                              <1>     return
    19                              <2> %%_ret:
    20 000010D6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   433                              <1> 
   434                              <1> copyCommandTailItem:
   435                              <1> ;Copies a sentence from the command tail until a terminator is found.
   436                              <1> ;Stores a terminating null in the destination
   437                              <1> ;Input: rsi = Start of the item to copy
   438                              <1> ;       rdi = Location for copy
   439                              <1> ;Output: Sentence copied with a null terminator inserted.
   440                              <1> ; If CF=CY, embedded CR encountered
   441 000010D7 AC                  <1>     lodsb
   442 000010D8 3C0D                <1>     cmp al, CR
   443 000010DA 743A                <1>     je .endOfInput
   444 000010DC E8C5130000          <1>     call isALterminator
   445 000010E1 743A                <1>     jz .exit
   446 000010E3 3A053AEFFFFF        <1>     cmp al, byte [pathSep]
   447 000010E9 740B                <1>     je .pathSep
   448 000010EB 3A0533EFFFFF        <1>     cmp al, byte [switchChar]
   449 000010F1 742A                <1>     je .exit
   450 000010F3 AA                  <1>     stosb
   451 000010F4 EBE1                <1>     jmp short copyCommandTailItem
   452                              <1> .pathSep:
   453                              <1> ;We look ahead, if the last char is a pathsep, we ignore it
   454 000010F6 AC                  <1>     lodsb   ;Get the next char, increment rsi by one
   455 000010F7 E8AA130000          <1>     call isALterminator
   456 000010FC 741F                <1>     jz .exit
   457 000010FE 3C0D                <1>     cmp al, CR
   458 00001100 7414                <1>     je .endOfInput
   459 00001102 3A051CEFFFFF        <1>     cmp al, byte [switchChar]
   460 00001108 7413                <1>     je .exit
   461 0000110A 8A0513EFFFFF        <1>     mov al, byte [pathSep]
   462 00001110 AA                  <1>     stosb   ;Else store the pathsep
   463 00001111 48FFCE              <1>     dec rsi ;Move rsi back a piece
   464 00001114 EBC1                <1>     jmp short copyCommandTailItem
   465                              <1> .endOfInput:
   466 00001116 E802000000          <1>     call .exit
   467 0000111B F9                  <1>     stc 
   468                              <1>     return
    19                              <2> %%_ret:
    20 0000111C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   469                              <1> .exit:
   470 0000111D 30C0                <1>     xor al, al
   471 0000111F AA                  <1>     stosb
   472                              <1>     return
    19                              <2> %%_ret:
    20 00001120 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   473                              <1> 
   474                              <1> 
   475                              <1> int4Eh:   ;Interrupt interface for parsing and executing command lines
   476                              <1> ;Input: rsi points to the count byte of a command line
   477 00001121 4150                <1>     push r8
   478 00001123 4151                <1>     push r9
   479 00001125 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   480 00001127 CD41                <1>     int 41h
   481 00001129 52                  <1>     push rdx    ;Save on the stack
   482 0000112A 488D1DCFEDFFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   483 00001131 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   484 00001133 CD41                <1>     int 41h
   485 00001135 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   486 00001138 4989D9              <1>     mov r9, rbx
   487 0000113B 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   488 00001142 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   489 00001147 F348A5              <1>     rep movsq   ;Copy command line over
   490                              <1>     ;call doCommandLine
   491 0000114A 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   492 0000114B B450                <1>     mov ah, 50h ;Set Current PSP
   493 0000114D CD41                <1>     int 41h
   494 0000114F 4159                <1>     pop r9
   495 00001151 4158                <1>     pop r8
   496 00001153 48CF                <1>     iretq
    16                                  %include "./Source/Utils/COMMAND/Source/cmdFunc.asm"
    17                              <1> ;Note! Each function must setup the DTA to use for itself.
    18                              <1> ;There is no requirement to preserve the DTA across a call.
    19                              <1> ;Only the Int 4Eh entry point will preserve the callers DTA.
    20                              <1> 
    21                              <1> ;Common Error Messages, jumped to to return from
    22                              <1> noSelfCopyError:
    23 00001155 488D1507F6FFFF      <1>     lea rdx, noSelfCopy
    24 0000115C EB34                <1>     jmp short badCmn
    25                              <1> badParamError:
    26 0000115E 488D15BCF6FFFF      <1>     lea rdx, badParm
    27 00001165 EB2B                <1>     jmp short badCmn
    28                              <1> badDriveError:
    29 00001167 488D1576F6FFFF      <1>     lea rdx, badDrv
    30 0000116E EB22                <1>     jmp short badCmn
    31                              <1> badArgError:
    32 00001170 488D1527F9FFFF      <1>     lea rdx, badArgs
    33 00001177 EB19                <1>     jmp short badCmn
    34                              <1> badFileError:
    35 00001179 488D1502F9FFFF      <1>     lea rdx, badSpec
    36 00001180 EB10                <1>     jmp short badCmn
    37                              <1> badDupFnf:
    38                              <1> ;Hybrid error message
    39 00001182 488D1567F5FFFF      <1>     lea rdx, dupName
    40 00001189 EB07                <1>     jmp short badCmn
    41                              <1> badDirError:
    42 0000118B 488D1590F7FFFF      <1>     lea rdx, badDir
    43                              <1> badCmn:
    44 00001192 B800090000          <1>     mov eax, 0900h
    45 00001197 CD41                <1>     int 41h
    46 00001199 F9                  <1>     stc ;Return with CY => Error occured
    47                              <1>     return
    19                              <2> %%_ret:
    20 0000119A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    48                              <1> 
    49                              <1> dir:
    50 0000119B C605FFF1FFFF00      <1>     mov byte [dirPrnType], 0    ;Clear DIR flags
    51 000011A2 C605F9F1FFFF00      <1>     mov byte [dirLineCtr], 0
    52 000011A9 C605F3F1FFFF00      <1>     mov byte [dirFileCtr], 0
    53 000011B0 C6056EF2FFFF00      <1>     mov byte [dirPathArg], 0    ;Null terminate the start of the buffer
    54 000011B7 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    54 000011C0 3F                  <1>
    55 000011C1 488D3DDDF2FFFF      <1>     lea rdi, dirSrchPat ;Start also by initialising the search pattern
    56 000011C8 48AB                <1>     stosq
    57 000011CA 48FFC7              <1>     inc rdi ;Go past dot
    58 000011CD 668907              <1>     mov word [rdi], ax
    59 000011D0 884702              <1>     mov byte [rdi + 2], al
    60                              <1>     ;Start by scanning for the switches
    61 000011D3 488D3DB5EFFFFF      <1>     lea rdi, cmdBuffer + 1  ;Goto command line input chars count
    62 000011DA 0FB60F              <1>     movzx ecx, byte [rdi]   ;Get number of chars typed
    63 000011DD 48FFC7              <1>     inc rdi ;Goto first char typed in
    64 000011E0 4889FE              <1>     mov rsi, rdi    ;Use rsi as start of buffer counter
    65 000011E3 8A053BEEFFFF        <1>     mov al, byte [switchChar]   ;Scan for switchchars
    66                              <1> .switchScan:
    67 000011E9 F2AE                <1>     repne scasb ;Scan for a switchchar
    68 000011EB 67E322              <1>     jecxz .switchScanDone
    69 000011EE 8A07                <1>     mov al, byte [rdi]  ;Get the byte pointed to by rdi
    70 000011F0 24DF                <1>     and al, 0DFh    ;UC it
    71 000011F2 3C57                <1>     cmp al, "W" ;Wide print mode?
    72 000011F4 7509                <1>     jne .notWideSw
    73 000011F6 800DA4F1FFFF01      <1>     or byte [dirPrnType], 1 ;Set the correct bit
    74 000011FD EBEA                <1>     jmp short .switchScan
    75                              <1> .notWideSw:
    76 000011FF 3C50                <1>     cmp al, "P" ;Pause mode?
    77 00001201 0F8557FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    78 00001207 800D93F1FFFF02      <1>     or byte [dirPrnType], 2 ;Set correct bit
    79 0000120E EBD9                <1>     jmp short .switchScan
    80                              <1> .switchScanDone:
    81                              <1> ;If no args, only switches, we search CWD
    82                              <1> ;If one arg, search that 
    83                              <1> ;If more than one, fail
    84 00001210 488D3579EFFFFF      <1>     lea rsi, cmdBuffer + 2
    85 00001217 E8BE120000          <1>     call skipSpaces ;Skip leading spaces
    86 0000121C 4881C603000000      <1>     add rsi, 3  ;Go past the DIR (always three chars)
    87                              <1> .loop:
    88 00001223 E8B2120000          <1>     call skipSpaces ;Skip spaces after
    89 00001228 AC                  <1>     lodsb   ;Get first non space char
    90 00001229 E89B120000          <1>     call isALEndOfCommand   ;If this is the end char CR or "|", exit
    91 0000122E 7442                <1>     jz .eocNoNull
    92 00001230 3A05EEEDFFFF        <1>     cmp al, byte [switchChar]  ;Is al a switch char?
    93 00001236 7509                <1>     jne .notSwitch
    94                              <1>     ;Now we skip the switch if it was a switch
    95 00001238 E834120000          <1>     call findTerminatorOrEOC    ;Go past the switch
    96 0000123D 7233                <1>     jc .eocNoNull  ;If we reach the EOC, exit,
    97 0000123F EBE2                <1>     jmp short .loop
    98                              <1> .notSwitch:
    99                              <1>     ;If not a switch, should be a path. Copy to buffer and keep searching
   100 00001241 803DDDF1FFFF00      <1>     cmp byte [dirPathArg], 0    ;If a second path provided, error
   101 00001248 0F8522FFFFFF        <1>     jne badArgError
   102 0000124E 488D3DD0F1FFFF      <1>     lea rdi, dirPathArg ;Store the path to search here AS WRITTEN BY USER
   103 00001255 48FFCE              <1>     dec rsi ;Go back to the start of the string
   104                              <1> .nameCopy:
   105 00001258 AC                  <1>     lodsb
   106 00001259 E86B120000          <1>     call isALEndOfCommand
   107 0000125E 740F                <1>     jz .eocReached
   108 00001260 E841120000          <1>     call isALterminator
   109 00001265 7403                <1>     jz .terminateCopy
   110 00001267 AA                  <1>     stosb
   111 00001268 EBEE                <1>     jmp short .nameCopy
   112                              <1> .terminateCopy:
   113 0000126A 31C0                <1>     xor eax, eax
   114 0000126C AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   115 0000126D EBB4                <1>     jmp short .loop ;Now search if another 
   116                              <1> .eocReached:
   117 0000126F 31C0                <1>     xor eax, eax
   118 00001271 AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   119                              <1> .eocNoNull:
   120 00001272 803DACF1FFFF00      <1>     cmp byte [dirPathArg], 0    ;If no path provided, use CWD for current drive
   121 00001279 7434                <1>     je .currentDrv
   122                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   123 0000127B 488D35A3F1FFFF      <1>     lea rsi, dirPathArg
   124 00001282 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   125 00001286 7527                <1>     jne .currentDrv
   126                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   127 00001288 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   128 0000128D 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   129 00001291 B801290000          <1>     mov eax, 2901h   ;Parse filename
   130 00001296 CD41                <1>     int 41h
   131 00001298 3CFF                <1>     cmp al, -1
   132 0000129A 0F84C7FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   133                              <1>     ;Else the drive in the fcb is valid
   134 000012A0 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   135 000012A5 FEC8                <1>     dec al  ;Convert to 0 based drive number
   136 000012A7 8805F7F0FFFF        <1>     mov byte [dirDrv], al
   137 000012AD EB0B                <1>     jmp short .dirPrintVol
   138                              <1> .currentDrv:
   139 000012AF E8A9110000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   140 000012B4 8805EAF0FFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   141                              <1> .dirPrintVol:
   142 000012BA 0FB605E3F0FFFF      <1>     movzx eax, byte [dirDrv] 
   143 000012C1 E87B0A0000          <1>     call volume.dirEP
   144 000012C6 803D58F1FFFF00      <1>     cmp byte [dirPathArg], 0    ;Null path here, 
   145 000012CD 7409                <1>     je .printCWD
   146 000012CF 803D52F1FFFF00      <1>     cmp byte [dirPathArg + 3], 0    ;Was this X:,0?
   147 000012D6 7400                <1>     je .printCWD
   148                              <1>     ;Here we have a path
   149                              <1>     ;Temp measure, we just fall through ignoring the path provided
   150                              <1> .printCWD:
   151 000012D8 8A15C6F0FFFF        <1>     mov dl, byte [dirDrv]
   152 000012DE 88D0                <1>     mov al, dl
   153 000012E0 0441                <1>     add al, "A"
   154 000012E2 B43A                <1>     mov ah, ":"
   155 000012E4 66890536F0FFFF      <1>     mov word [searchSpec], ax
   156 000012EB 8A0532EDFFFF        <1>     mov al, byte [pathSep]
   157 000012F1 88052CF0FFFF        <1>     mov byte [searchSpec + 2], al
   158 000012F7 488D3526F0FFFF      <1>     lea rsi, searchSpec + 3  ;Make space for a X:"\"
   159 000012FE B447                <1>     mov ah, 47h ;Get Current Working Directory
   160 00001300 FEC2                <1>     inc dl  ;Convert to 1 based number
   161 00001302 CD41                <1>     int 41h
   162 00001304 488D3D16F0FFFF      <1>     lea rdi, searchSpec
   163 0000130B E852110000          <1>     call strlen
   164 00001310 FFC9                <1>     dec ecx
   165 00001312 C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   166 00001316 488D156DF6FFFF      <1>     lea rdx, dirMain
   167 0000131D B409                <1>     mov ah, 09h
   168 0000131F CD41                <1>     int 41h
   169 00001321 4889FA              <1>     mov rdx, rdi    ;Print the current directory we are working on
   170 00001324 B409                <1>     mov ah, 09h
   171 00001326 CD41                <1>     int 41h
   172 00001328 488D154CF3FFFF      <1>     lea rdx, crlf2
   173 0000132F B409                <1>     mov ah, 09h
   174 00001331 CD41                <1>     int 41h
   175 00001333 E801000000          <1>     call .searchForFile
   176                              <1>     return
    19                              <2> %%_ret:
    20 00001338 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   177                              <1>     ;If we get no path spec or just a X: path spec then we 
   178                              <1>     ; search the current working directory for that pathspec
   179                              <1>     ;If we get an actual pathspec, we first save the CWD for that drive
   180                              <1>     ; and then we try to make the pathspec the CWD. 
   181                              <1>     ;   If it works, we then search *.* in that folder and return the og CWD.
   182                              <1>     ;   If it fails, we then search one level up, for the search pattern
   183                              <1>     ;    that we compute.
   184                              <1> 
   185                              <1>     
   186                              <1>     ;Now we need to print the path to the folder we will be searching in
   187                              <1> .searchForFile:
   188                              <1>     ;Now we search for the files
   189                              <1>     ;RCX must have the number of chars to the end of the pathspec
   190 00001339 488D3DE1EFFFFF      <1>     lea rdi, searchSpec
   191 00001340 8A05DDECFFFF        <1>     mov al, byte [pathSep]
   192 00001346 38440FFF            <1>     cmp byte [rdi + rcx - 1], al
   193 0000134A 7405                <1>     je .noAddSlash  ;Deals with special case of root dir
   194 0000134C 88040F              <1>     mov byte [rdi + rcx], al
   195 0000134F FFC1                <1>     inc ecx
   196                              <1> .noAddSlash:
   197 00001351 488D3C0F            <1>     lea rdi, qword [rdi + rcx]
   198 00001355 488D3549F1FFFF      <1>     lea rsi, dirSrchPat
   199 0000135C 4889FA              <1>     mov rdx, rdi    ;Ptr to search for in rdx
   200 0000135F 48A5                <1>     movsq
   201 00001361 A5                  <1>     movsd
   202 00001362 30C0                <1>     xor al, al
   203 00001364 AA                  <1>     stosb   ;Store the terminating null
   204 00001365 B911000000          <1>     mov ecx, dirReadOnly | dirDirectory
   205 0000136A B44E                <1>     mov ah, 4Eh ;Find first
   206 0000136C CD41                <1>     int 41h
   207 0000136E 720B                <1>     jc .dirNoMoreFiles
   208                              <1> .findNext:
   209 00001370 E878000000          <1>     call .dirPrintFileData  ;Print the file information
   210 00001375 B44F                <1>     mov ah, 4Fh
   211 00001377 CD41                <1>     int 41h
   212 00001379 73F5                <1>     jnc .findNext 
   213                              <1> .dirNoMoreFiles:
   214 0000137B F6051FF0FFFF01      <1>     test byte [dirPrnType], 1
   215 00001382 740B                <1>     jz .dirNoEndNewLine
   216 00001384 488D15EDF2FFFF      <1>     lea rdx, crlf   ;Only need this for /W
   217 0000138B B409                <1>     mov ah, 09h
   218 0000138D CD41                <1>     int 41h
   219                              <1> .dirNoEndNewLine:
   220                              <1>     ;Now we print the number of files and the number of bytes on the disk
   221 0000138F 488D1582F8FFFF      <1>     lea rdx, fourSpc
   222 00001396 B409                <1>     mov ah, 09h
   223 00001398 CD41                <1>     int 41h
   224 0000139A B409                <1>     mov ah, 09h ;Print four Spaces twice
   225 0000139C CD41                <1>     int 41h
   226 0000139E 0FB605FEEFFFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   227 000013A5 E8B1120000          <1>     call printDecimalWord
   228 000013AA 488D1512F4FFFF      <1>     lea rdx, dirOk
   229 000013B1 B409                <1>     mov ah, 09h
   230 000013B3 CD41                <1>     int 41h
   231 000013B5 488D1561F8FFFF      <1>     lea rdx, threeSpc
   232 000013BC B409                <1>     mov ah, 09h
   233 000013BE CD41                <1>     int 41h
   234 000013C0 B800360000          <1>     mov eax, 3600h ;Get disk info
   235 000013C5 8A15D9EFFFFF        <1>     mov dl, byte [dirDrv]
   236 000013CB FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   237 000013CD CD41                <1>     int 41h ;Get disk free space info
   238 000013CF 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   239 000013D2 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   240 000013D5 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   241 000013D7 F7E1                <1>     mul ecx ;Get bytes per cluster
   242 000013D9 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   243                              <1>     ;rax now has the number of free bytes on the disk
   244 000013DC E87A120000          <1>     call printDecimalWord
   245 000013E1 488D15E5F3FFFF      <1>     lea rdx, bytesOk
   246 000013E8 B409                <1>     mov ah, 09h
   247 000013EA CD41                <1>     int 41h
   248                              <1>     return
    19                              <2> %%_ret:
    20 000013EC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   249                              <1> 
   250                              <1> .dirPrintFileData:
   251                              <1> ;Use fcbCmdSpec to build the file name with space
   252                              <1> ;Start by print the name (same for both cases)
   253                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   254 000013ED F605E4ECFFFF06      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles
   255                              <1>     retnz   ;Simply return if either bit is set
    51                              <2> cret nz
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000013F4 75(EC)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   256 000013F6 488D35E4ECFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   257 000013FD 488D3D59EEFFFF      <1>     lea rdi, fcbCmdSpec
   258 00001404 E82A110000          <1>     call asciiFilenameToFCB
   259 00001409 488D154DEEFFFF      <1>     lea rdx, fcbCmdSpec
   260 00001410 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   261 00001415 BB01000000          <1>     mov ebx, 1  ;STDOUT
   262 0000141A B440                <1>     mov ah, 40h ;Write handle
   263 0000141C CD41                <1>     int 41h
   264 0000141E 52                  <1>     push rdx
   265 0000141F B220                <1>     mov dl, " "
   266 00001421 B402                <1>     mov ah, 02h ;Print char
   267 00001423 CD41                <1>     int 41h
   268 00001425 5A                  <1>     pop rdx
   269 00001426 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   270 0000142D B903000000          <1>     mov ecx, 3  ;Print three chars
   271 00001432 BB01000000          <1>     mov ebx, 1  ;STDOUT
   272 00001437 B440                <1>     mov ah, 40h ;Write handle
   273 00001439 CD41                <1>     int 41h
   274 0000143B F6055FEFFFFF01      <1>     test byte [dirPrnType], 1
   275 00001442 0F85A8000000        <1>     jnz .widePrint
   276                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   277                              <1>     ;Now check if a DIR
   278 00001448 F60589ECFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   279 0000144F 7418                <1>     jz .dirPrintNotDir
   280 00001451 488D1583F3FFFF      <1>     lea rdx, dirLbl
   281 00001458 B409                <1>     mov ah, 09h
   282 0000145A CD41                <1>     int 41h
   283 0000145C 488D15BAF7FFFF      <1>     lea rdx, threeSpc
   284 00001463 B409                <1>     mov ah, 09h
   285 00001465 CD41                <1>     int 41h
   286 00001467 EB4F                <1>     jmp short .dirPrintFileDT
   287                              <1> .dirPrintNotDir:
   288                              <1> ;Here we print the file size
   289 00001469 B220                <1>     mov dl, " "
   290 0000146B B402                <1>     mov ah, 02h
   291 0000146D CD41                <1>     int 41h
   292 0000146F 8B0568ECFFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   293 00001475 E852120000          <1>     call getDecimalWord
   294 0000147A 4889CB              <1>     mov rbx, rcx
   295 0000147D 51                  <1>     push rcx
   296 0000147E 480FCB              <1>     bswap rbx
   297 00001481 B908000000          <1>     mov ecx, 8
   298                              <1> .dirPrintFileSizePrep:
   299 00001486 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   300 00001488 7514                <1>     jne .dirPrintFileSize
   301 0000148A B402                <1>     mov ah, 02h
   302 0000148C B220                <1>     mov dl, " "
   303 0000148E CD41                <1>     int 41h
   304 00001490 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   305 00001494 FFC9                <1>     dec ecx
   306 00001496 81F901000000        <1>     cmp ecx, 1
   307 0000149C 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   308                              <1> .dirPrintFileSize:
   309 0000149E 5B                  <1>     pop rbx
   310                              <1> .dirPrintFileSizeLoop:
   311 0000149F 88DA                <1>     mov dl, bl
   312 000014A1 B402                <1>     mov ah, 02h
   313 000014A3 CD41                <1>     int 41h
   314 000014A5 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   315 000014A9 FFC9                <1>     dec ecx
   316 000014AB 75F2                <1>     jnz .dirPrintFileSizeLoop
   317 000014AD 488D156DF7FFFF      <1>     lea rdx, twoSpc
   318 000014B4 B409                <1>     mov ah, 09h
   319 000014B6 CD41                <1>     int 41h
   320                              <1> .dirPrintFileDT:
   321 000014B8 B220                <1>     mov dl, " "
   322 000014BA B402                <1>     mov ah, 02h
   323 000014BC CD41                <1>     int 41h
   324 000014BE 0FB70516ECFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   325 000014C5 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   326 000014C7 E8E70C0000          <1>     call printDate
   327 000014CC 488D154EF7FFFF      <1>     lea rdx, twoSpc
   328 000014D3 B409                <1>     mov ah, 09h
   329 000014D5 CD41                <1>     int 41h
   330 000014D7 0FB705FBEBFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   331 000014DE E8F20D0000          <1>     call printTime
   332 000014E3 488D158EF1FFFF      <1>     lea rdx, crlf
   333 000014EA B409                <1>     mov ah, 09h
   334 000014EC CD41                <1>     int 41h
   335 000014EE EB0B                <1>     jmp short .dirPrintNameExit
   336                              <1> .widePrint:
   337                              <1> ;If /W, print name space ext space space space space
   338 000014F0 488D1521F7FFFF      <1>     lea rdx, fourSpc
   339 000014F7 B409                <1>     mov ah, 09h ;Print string
   340 000014F9 CD41                <1>     int 41h
   341                              <1> .dirPrintNameExit:
   342 000014FB FE05A2EEFFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   343 00001501 FE059BEEFFFF        <1>     inc byte [dirLineCtr]
   344 00001507 803D94EEFFFF17      <1>     cmp byte [dirLineCtr], 23
   345                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 0000150E 7401                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 00001510 C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   346 00001511 488D15EAF2FFFF      <1>     lea rdx, pauseMes
   347 00001518 B409                <1>     mov ah, 09h
   348 0000151A CD41                <1>     int 41h
   349 0000151C B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   350 0000151E CD41                <1>     int 41h
   351 00001520 C6057BEEFFFF00      <1>     mov byte [dirLineCtr], 0
   352 00001527 488D154AF1FFFF      <1>     lea rdx, crlf   ;Force new line
   353 0000152E B409                <1>     mov ah, 09h
   354 00001530 CD41                <1>     int 41h
   355                              <1>     return
    19                              <2> %%_ret:
    20 00001532 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   356                              <1> 
   357                              <1> chdir:
   358 00001533 F60573EBFFFFFF      <1>     test byte [arg1Flg], -1
   359 0000153A 754D                <1>     jnz .changeDir
   360                              <1>     ;Print CWD
   361                              <1> .printCWD:
   362 0000153C E8750E0000          <1>     call putCWDInPrompt ;Exactly the same procedure
   363 00001541 E8570C0000          <1>     call printCRLF
   364                              <1>     return
    19                              <2> %%_ret:
    20 00001546 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   365                              <1> .printDiskCWD:
   366                              <1> ;Print CWD for a specified drive
   367 00001547 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   368 0000154B 88D0                <1>     mov al, dl
   369 0000154D 0440                <1>     add al, "@" ;Get the UC letter
   370 0000154F B43A                <1>     mov ah, ":"
   371 00001551 488D3DC9EDFFFF      <1>     lea rdi, searchSpec
   372 00001558 66AB                <1>     stosw   ;Store X:, rdi+=2
   373 0000155A 8A05C3EAFFFF        <1>     mov al, byte [pathSep]
   374 00001560 AA                  <1>     stosb   ;Store pathSep, inc rdi
   375 00001561 B447                <1>     mov ah, 47h ;Get Current Working Directory
   376 00001563 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   377 00001566 CD41                <1>     int 41h
   378 00001568 E8F50E0000          <1>     call strlen
   379 0000156D 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   380 00001573 B440                <1>     mov ah, 40h ;Write to handle
   381 00001575 BB01000000          <1>     mov ebx, 1  ;STDOUT
   382 0000157A 488D15A0EDFFFF      <1>     lea rdx, searchSpec
   383 00001581 CD41                <1>     int 41h
   384 00001583 E8150C0000          <1>     call printCRLF
   385                              <1>     return
    19                              <2> %%_ret:
    20 00001588 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   386                              <1> .changeDir:
   387 00001589 8A0520EBFFFF        <1>     mov al, byte [arg1FCBret]
   388 0000158F 3CFF                <1>     cmp al, -1 
   389 00001591 0F84D0FBFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   390 00001597 4180785D20          <1>     cmp byte [r8 + fcb1 + fcb.filename], " "
   391 0000159C 7520                <1>     jne .getFQPath
   392                              <1>     ;Now we double check that on the command line we have . or ..
   393 0000159E 0FB60509EBFFFF      <1>     movzx eax, byte [arg1Off]
   394 000015A5 488D35E2EBFFFF      <1>     lea rsi, cmdBuffer
   395 000015AC 4801C6              <1>     add rsi, rax
   396 000015AF 8A056EEAFFFF        <1>     mov al, byte [pathSep]
   397 000015B5 3806                <1>     cmp byte [rsi], al  ;Is the first char a pathsep?
   398 000015B7 7405                <1>     je .getFQPath
   399 000015B9 803E2E              <1>     cmp byte [rsi], "."
   400 000015BC 7589                <1>     jne .printDiskCWD
   401                              <1>     ;If the path is . or .., its acceptable, else fail
   402                              <1> .getFQPath:
   403 000015BE E8FA0F0000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   404 000015C3 0F82C2FBFFFF        <1>     jc badDirError  ;If this returns CF=CY, its a badDir
   405 000015C9 488D1551EDFFFF      <1>     lea rdx, searchSpec
   406 000015D0 B43B                <1>     mov ah, 3Bh ;CHDIR
   407 000015D2 CD41                <1>     int 41h
   408 000015D4 0F82B1FBFFFF        <1>     jc badDirError
   409                              <1>     return
    19                              <2> %%_ret:
    20 000015DA C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   410                              <1> 
   411                              <1> mkdir:
   412 000015DB F605CBEAFFFFFF      <1>     test byte [arg1Flg], -1
   413 000015E2 0F8488FBFFFF        <1>     jz badArgError
   414 000015E8 F605C1EAFFFFFF      <1>     test byte [arg2Flg], -1
   415 000015EF 0F857BFBFFFF        <1>     jnz badArgError
   416                              <1>     ;We have exactly one argument
   417 000015F5 8A05B4EAFFFF        <1>     mov al, byte [arg1FCBret]
   418 000015FB 3CFF                <1>     cmp al, -1 
   419 000015FD 0F8464FBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   420 00001603 E8B50F0000          <1>     call buildCommandPath
   421 00001608 488D1512EDFFFF      <1>     lea rdx, searchSpec
   422 0000160F B800390000          <1>     mov eax, 3900h  ;MKDIR
   423 00001614 CD41                <1>     int 41h
   424                              <1>     retnc
    67                              <2> cret nc
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001616 73(DA)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   425                              <1> .badMake:   ;Else, bad make
   426 00001618 488D1517F3FFFF      <1>     lea rdx, badMD
   427 0000161F B800090000          <1>     mov eax, 0900h
   428 00001624 CD41                <1>     int 41h
   429                              <1>     return
    19                              <2> %%_ret:
    20 00001626 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   430                              <1> 
   431                              <1> rmdir:
   432 00001627 F6057FEAFFFFFF      <1>     test byte [arg1Flg], -1
   433 0000162E 0F843CFBFFFF        <1>     jz badArgError
   434 00001634 F60575EAFFFFFF      <1>     test byte [arg2Flg], -1
   435 0000163B 0F852FFBFFFF        <1>     jnz badArgError
   436                              <1>     ;We have exactly one argument
   437 00001641 8A0568EAFFFF        <1>     mov al, byte [arg1FCBret]
   438 00001647 3CFF                <1>     cmp al, -1 
   439 00001649 0F8418FBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   440 0000164F E8690F0000          <1>     call buildCommandPath
   441 00001654 488D15C6ECFFFF      <1>     lea rdx, searchSpec
   442 0000165B B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   443 00001660 CD41                <1>     int 41h
   444                              <1>     retnc   ;Return if not carry
    67                              <2> cret nc
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001662 73(26)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   445                              <1> .badRemove:   ;Else, bad make
   446 00001664 488D15E8F2FFFF      <1>     lea rdx, badRD
   447 0000166B B800090000          <1>     mov eax, 0900h
   448 00001670 CD41                <1>     int 41h
   449                              <1>     return
    19                              <2> %%_ret:
    20 00001672 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   450                              <1> 
   451                              <1> copy:
   452 00001673 F60533EAFFFFFF      <1>     test byte [arg1Flg], -1
   453 0000167A 0F84F0FAFFFF        <1>     jz badArgError
   454 00001680 F60529EAFFFFFF      <1>     test byte [arg2Flg], -1
   455 00001687 0F84E3FAFFFF        <1>     jz badArgError
   456 0000168D 488D35FAEAFFFF      <1>     lea rsi, cmdBuffer
   457 00001694 0FB60513EAFFFF      <1>     movzx eax, byte [arg1Off]
   458 0000169B 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   459                              <1>     ;rsi points to terminating char
   460 0000169E AC                  <1>     lodsb   ;Get first char in AL
   461 0000169F 48FFCE              <1>     dec rsi ;Go back to this char
   462 000016A2 E8220E0000          <1>     call isALEndOfCommand
   463 000016A7 0F82B1FAFFFF        <1>     jc badParamError
   464 000016AD 488D3D15EEFFFF      <1>     lea rdi, sourcePath ;Store this in sourcePath
   465                              <1> .copyName1:
   466 000016B4 AC                  <1>     lodsb
   467 000016B5 E80F0E0000          <1>     call isALEndOfCommand
   468 000016BA 0F849EFAFFFF        <1>     je badParamError
   469 000016C0 E8E10D0000          <1>     call isALterminator
   470 000016C5 7403                <1>     jz .endOfName1
   471 000016C7 AA                  <1>     stosb
   472 000016C8 EBEA                <1>     jmp short .copyName1
   473                              <1> .endOfName1:
   474 000016CA 31C0                <1>     xor eax, eax
   475 000016CC AA                  <1>     stosb   ;Store this 0 at rdi
   476 000016CD 488D35BAEAFFFF      <1>     lea rsi, cmdBuffer
   477 000016D4 0FB605D6E9FFFF      <1>     movzx eax, byte [arg2Off]
   478 000016DB 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   479 000016DE 807E013A            <1>     cmp byte [rsi + 1], ":" ;If dest path char 2 is :, must be X:, not allowed
   480 000016E2 0F8476FAFFFF        <1>     je badParamError
   481 000016E8 AC                  <1>     lodsb   ;Get first char in AL
   482 000016E9 48FFCE              <1>     dec rsi ;Go back to this char
   483 000016EC E8D80D0000          <1>     call isALEndOfCommand
   484 000016F1 0F8267FAFFFF        <1>     jc badParamError
   485 000016F7 488D3D4BEEFFFF      <1>     lea rdi, destPath
   486                              <1> .copyName2:
   487 000016FE AC                  <1>     lodsb
   488 000016FF E8C50D0000          <1>     call isALEndOfCommand
   489 00001704 740A                <1>     je .endOfName2
   490 00001706 E89B0D0000          <1>     call isALterminator
   491 0000170B 7403                <1>     jz .endOfName2
   492 0000170D AA                  <1>     stosb
   493 0000170E EBEE                <1>     jmp short .copyName2
   494                              <1> .endOfName2:
   495 00001710 31C0                <1>     xor eax, eax
   496 00001712 AA                  <1>     stosb   ;Store this 0 at rdi
   497                              <1> ;Before we open, we check if the two filenames are equal
   498                              <1> ; If so, crap out.
   499 00001713 488D35AFEDFFFF      <1>     lea rsi, sourcePath
   500 0000171A 488D3D28EEFFFF      <1>     lea rdi, destPath
   501 00001721 B81E120000          <1>     mov eax, 121Eh
   502                              <1>     breakpoint
    87 00001726 6687DB              <2> xchg bx, bx
   503 00001729 CD4F                <1>     int 4Fh
   504 0000172B 0F848A000000        <1>     jz .sameFilename
   505                              <1>     ;Open source with read permission
   506                              <1>     ;Open destination with write permission
   507 00001731 488D1591EDFFFF      <1>     lea rdx, sourcePath
   508 00001738 B8003D0000          <1>     mov eax, 3D00h  ;Read open
   509 0000173D CD41                <1>     int 41h
   510 0000173F 0F8219FAFFFF        <1>     jc badParamError
   511 00001745 6689057DEEFFFF      <1>     mov word [sourceHdl], ax
   512 0000174C 488D15F6EDFFFF      <1>     lea rdx, destPath
   513 00001753 B8003C0000          <1>     mov eax, 3C00h  ;Create the file
   514 00001758 31C9                <1>     xor ecx, ecx    ;No file attributes
   515 0000175A CD41                <1>     int 41h
   516 0000175C 0F8280000000        <1>     jc .badExit
   517 00001762 66890562EEFFFF      <1>     mov word [destHdl], ax
   518                              <1> .copyLoop:
   519 00001769 B980000000          <1>     mov ecx, 128
   520 0000176E 488D1558EEFFFF      <1>     lea rdx, copyBuffer
   521 00001775 0FB71D4DEEFFFF      <1>     movzx ebx, word [sourceHdl]
   522 0000177C B43F                <1>     mov ah, 3Fh ;Read
   523 0000177E CD41                <1>     int 41h
   524 00001780 7260                <1>     jc .badExit
   525 00001782 81F980000000        <1>     cmp ecx, 128
   526 00001788 721F                <1>     jb .okExit
   527 0000178A B980000000          <1>     mov ecx, 128
   528 0000178F 488D1537EEFFFF      <1>     lea rdx, copyBuffer
   529 00001796 B440                <1>     mov ah, 40h ;Write
   530 00001798 CD41                <1>     int 41h
   531 0000179A 7246                <1>     jc .badExit
   532 0000179C 81F980000000        <1>     cmp ecx, 128
   533 000017A2 73C5                <1>     jnb .copyLoop
   534 000017A4 E800000000          <1>     call .okExit
   535                              <1> .okExit:
   536 000017A9 B402                <1>     mov ah, 02h
   537 000017AB B231                <1>     mov dl, "1" ;1 File(s) copied
   538 000017AD CD41                <1>     int 41h
   539 000017AF 488D15FBEFFFFF      <1>     lea rdx, copyOk
   540 000017B6 B409                <1>     mov ah, 09h
   541 000017B8 CD41                <1>     int 41h
   542                              <1>     return
    19                              <2> %%_ret:
    20 000017BA C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   543                              <1> .sameFilename:
   544 000017BB E805000000          <1>     call .leaveCopyClose ;Close the handles
   545 000017C0 E990F9FFFF          <1>     jmp noSelfCopyError
   546                              <1> .leaveCopyClose:
   547 000017C5 668B1DFDEDFFFF      <1>     mov bx, word [sourceHdl]
   548 000017CC B8003E0000          <1>     mov eax, 3E00h
   549 000017D1 CD41                <1>     int 41h
   550 000017D3 668B1DF1EDFFFF      <1>     mov bx, word [destHdl]
   551 000017DA B8003E0000          <1>     mov eax, 3E00h
   552 000017DF CD41                <1>     int 41h
   553                              <1>     return
    19                              <2> %%_ret:
    20 000017E1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   554                              <1> .badExit:
   555                              <1> ;Prototypically use badParamError for error reporting... sucks I know
   556 000017E2 668B1DE0EDFFFF      <1>     mov bx, word [sourceHdl]
   557 000017E9 6681FBFFFF          <1>     cmp bx, -1
   558 000017EE 7407                <1>     je .skipSource
   559 000017F0 B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
   560 000017F5 CD41                <1>     int 41h
   561                              <1> .skipSource:
   562 000017F7 668B1DCDEDFFFF      <1>     mov bx, word [destHdl]
   563 000017FE 6681FBFFFF          <1>     cmp bx, -1
   564 00001803 0F8455F9FFFF        <1>     je badParamError
   565 00001809 B8003E0000          <1>     mov eax, 3E00h
   566 0000180E CD41                <1>     int 41h
   567 00001810 E949F9FFFF          <1>     jmp badParamError
   568                              <1> 
   569                              <1> erase:
   570 00001815 F60591E8FFFFFF      <1>     test byte [arg1Flg], -1
   571 0000181C 0F844EF9FFFF        <1>     jz badArgError
   572 00001822 E8960D0000          <1>     call buildCommandPath
   573 00001827 488D15F3EAFFFF      <1>     lea rdx, searchSpec
   574 0000182E B800410000          <1>     mov eax, 4100h  ;Delete File 
   575 00001833 31C9                <1>     xor ecx, ecx
   576 00001835 CD41                <1>     int 41h
   577 00001837 0F8233F9FFFF        <1>     jc badArgError
   578                              <1>     return
    19                              <2> %%_ret:
    20 0000183D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   579                              <1> date:
   580 0000183E 488D1514F0FFFF      <1>     lea rdx, curDate
   581 00001845 B409                <1>     mov ah, 09h
   582 00001847 CD41                <1>     int 41h
   583 00001849 B42A                <1>     mov ah, 2Ah ;DOS get date
   584 0000184B CD41                <1>     int 41h
   585                              <1> 	;AL = day of the week (0=Sunday)
   586                              <1> 	;CX = year (1980-2099)
   587                              <1> 	;DH = month (1-12)
   588                              <1> 	;DL = day (1-31)
   589 0000184D 66890D71ECFFFF      <1>     mov word [td1], cx
   590 00001854 88156DECFFFF        <1>     mov byte [td3], dl
   591 0000185A 883568ECFFFF        <1>     mov byte [td4], dh
   592 00001860 0FB6C0              <1>     movzx eax, al
   593 00001863 89C3                <1>     mov ebx, eax
   594 00001865 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   595 00001867 01D8                <1>     add eax, ebx ;Make it 3 times 
   596 00001869 488D15C5EFFFFF      <1>     lea rdx, dayName
   597 00001870 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   598 00001874 B903000000          <1>     mov ecx, 3  ;Print three chars
   599 00001879 BB01000000          <1>     mov ebx, 1  ;STDOUT
   600 0000187E B440                <1>     mov ah, 40h ;Write to handle
   601 00001880 CD41                <1>     int 41h
   602 00001882 B220                <1>     mov dl, " "
   603 00001884 B402                <1>     mov ah, 02h
   604 00001886 CD41                <1>     int 41h
   605                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   606                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   607                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   608 00001888 0FB70536ECFFFF      <1>     movzx eax, word [td1]   ;Get this word
   609 0000188F C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   610 00001892 0FB61D2FECFFFF      <1>     movzx ebx, byte [td4]
   611 00001899 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   612 0000189C 09D8                <1>     or eax, ebx ;Add this date to eax
   613 0000189E 0FB61D22ECFFFF      <1>     movzx ebx, byte [td3]
   614 000018A5 09D8                <1>     or eax, ebx
   615 000018A7 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   616 000018AC E802090000          <1>     call printDate
   617                              <1> 
   618 000018B1 488D15B2EFFFFF      <1>     lea rdx, newDate
   619 000018B8 B409                <1>     mov ah, 09h
   620 000018BA CD41                <1>     int 41h
   621 000018BC 488D15C6EFFFFF      <1>     lea rdx, ukDate
   622 000018C3 488D05B2EFFFFF      <1>     lea rax, usDate
   623 000018CA 488D1DC5EFFFFF      <1>     lea rbx, jpDate
   624 000018D1 803D56E7FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   625 000018D8 480F47D3            <1>     cmova rdx, rbx
   626 000018DC 480F42D0            <1>     cmovb rdx, rax
   627 000018E0 B409                <1>     mov ah, 09h
   628 000018E2 CD41                <1>     int 41h
   629                              <1> 
   630 000018E4 498D9080000000      <1>     lea rdx, qword [r8 + cmdLineCnt]
   631 000018EB B40A                <1>     mov ah, 0Ah
   632 000018ED CD41                <1>     int 41h
   633 000018EF 52                  <1>     push rdx
   634 000018F0 488D1581EDFFFF      <1>     lea rdx, crlf
   635 000018F7 B409                <1>     mov ah, 09h
   636 000018F9 CD41                <1>     int 41h
   637 000018FB 5A                  <1>     pop rdx
   638 000018FC 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   639                              <1>     rete    ;Exit!
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 00001900 7501                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 00001902 C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   640                              <1>     return
    19                              <2> %%_ret:
    20 00001903 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   641                              <1> 
   642                              <1> time:
   643 00001904 488D15A7EFFFFF      <1>     lea rdx, curTime
   644 0000190B B409                <1>     mov ah, 09h
   645 0000190D CD41                <1>     int 41h
   646 0000190F B42C                <1>     mov ah, 2Ch ;DOS get time
   647 00001911 CD41                <1>     int 41h
   648                              <1>     ;CH = hour (0-23)
   649                              <1> 	;CL = minutes (0-59)
   650                              <1> 	;DH = seconds (0-59)
   651                              <1> 	;DL = hundredths (0-99)
   652 00001913 880DACEBFFFF        <1>     mov byte [td1], cl
   653 00001919 882DA7EBFFFF        <1>     mov byte [td2], ch
   654 0000191F 8815A2EBFFFF        <1>     mov byte [td3], dl
   655 00001925 88359DEBFFFF        <1>     mov byte [td4], dh
   656 0000192B 0FB6C5              <1>     movzx eax, ch
   657 0000192E E8140A0000          <1>     call printTime.printHours
   658                              <1> 
   659 00001933 8A1502E7FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   660 00001939 B402                <1>     mov ah, 02h
   661 0000193B CD41                <1>     int 41h
   662                              <1> 
   663 0000193D 0FB60581EBFFFF      <1>     movzx eax, byte [td1]   ;Minutes
   664 00001944 E8EE090000          <1>     call printTime.printMinutesAlt
   665                              <1> 
   666 00001949 8A15ECE6FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   667 0000194F B402                <1>     mov ah, 02h
   668 00001951 CD41                <1>     int 41h
   669                              <1> 
   670 00001953 0FB6056EEBFFFF      <1>     movzx eax, byte [td4]   ;Seconds
   671 0000195A E8D8090000          <1>     call printTime.printMinutesAlt
   672                              <1> 
   673 0000195F B22E                <1>     mov dl, "."
   674 00001961 B402                <1>     mov ah, 02h
   675 00001963 CD41                <1>     int 41h
   676                              <1> 
   677 00001965 0FB6055BEBFFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   678 0000196C E8C6090000          <1>     call printTime.printMinutesAlt
   679                              <1> 
   680 00001971 488D154BEFFFFF      <1>     lea rdx, newTime
   681 00001978 B409                <1>     mov ah, 09h
   682 0000197A CD41                <1>     int 41h
   683                              <1> 
   684 0000197C 498D9080000000      <1>     lea rdx, qword [r8 + cmdLineCnt]
   685 00001983 B40A                <1>     mov ah, 0Ah
   686 00001985 CD41                <1>     int 41h
   687 00001987 52                  <1>     push rdx
   688 00001988 488D15E9ECFFFF      <1>     lea rdx, crlf
   689 0000198F B409                <1>     mov ah, 09h
   690 00001991 CD41                <1>     int 41h
   691 00001993 5A                  <1>     pop rdx
   692 00001994 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   693                              <1>     rete    ;Exit!
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 00001998 7501                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 0000199A C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   694                              <1>     return
    19                              <2> %%_ret:
    20 0000199B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   695                              <1> ctty:
   696 0000199C F6050AE7FFFFFF      <1>     test byte [arg1Flg], -1
   697 000019A3 0F84C7F7FFFF        <1>     jz badArgError
   698 000019A9 F60500E7FFFFFF      <1>     test byte [arg2Flg], -1
   699 000019B0 0F85BAF7FFFF        <1>     jnz badArgError
   700 000019B6 488D35D1E7FFFF      <1>     lea rsi, cmdBuffer
   701 000019BD 0FB605EAE6FFFF      <1>     movzx eax, byte [arg1Off]
   702 000019C4 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
   703 000019C7 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
   704 000019CB 750F                <1>     jne .noDrive
   705 000019CD 0FB605DBE6FFFF      <1>     movzx eax, byte [arg1FCBret]
   706 000019D4 3CFF                <1>     cmp al, -1
   707 000019D6 0F848BF7FFFF        <1>     je badDriveError
   708                              <1> .noDrive:
   709                              <1>     ;Now we open the provided file
   710 000019DC E85F0D0000          <1>     call copyArgumentToSearchSpec
   711 000019E1 488D1539E9FFFF      <1>     lea rdx, searchSpec
   712 000019E8 B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
   713 000019ED CD41                <1>     int 41h
   714 000019EF 0F8284F7FFFF        <1>     jc badFileError
   715 000019F5 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
   716 000019F8 B800440000          <1>     mov eax, 4400h  ;Get device word
   717 000019FD CD41                <1>     int 41h
   718 000019FF F6C280              <1>     test dl, 80h    ;Test if this device is a char device
   719 00001A02 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
   720                              <1>     ;Now we set this handle to be STDIO
   721 00001A04 80CA03              <1>     or dl, 3    ;Set STDIO bits
   722 00001A07 30F6                <1>     xor dh, dh
   723 00001A09 B801440000          <1>     mov eax, 4401h  ;Now we set the device word
   724 00001A0E CD41                <1>     int 41h
   725                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
   726 00001A10 31C9                <1>     xor ecx, ecx    ;STDIN
   727 00001A12 B446                <1>     mov ah, 46h
   728 00001A14 CD41                <1>     int 41h
   729 00001A16 FFC1                <1>     inc ecx         ;STDOUT
   730 00001A18 B446                <1>     mov ah, 46h
   731 00001A1A CD41                <1>     int 41h
   732 00001A1C FFC1                <1>     inc ecx         ;STDERR
   733 00001A1E B446                <1>     mov ah, 46h
   734 00001A20 CD41                <1>     int 41h
   735 00001A22 B43E                <1>     mov ah, 3Eh ;Now we close the original handle
   736 00001A24 CD41                <1>     int 41h
   737                              <1>     return
    19                              <2> %%_ret:
    20 00001A26 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   738                              <1> .badCharDev:
   739 00001A27 488D1594EFFFFF      <1>     lea rdx, badDev
   740 00001A2E B409                <1>     mov ah, 09h
   741 00001A30 CD41                <1>     int 41h
   742 00001A32 B43E                <1>     mov ah, 3Eh ;Close opened handle
   743 00001A34 CD41                <1>     int 41h
   744                              <1>     return
    19                              <2> %%_ret:
    20 00001A36 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   745                              <1> 
   746                              <1> cls:  
   747 00001A37 B800440000          <1>     mov eax, 4400h  ;Get device info
   748 00001A3C BB01000000          <1>     mov ebx, 1      ;for handle 1
   749 00001A41 CD41                <1>     int 41h         ;in dx
   750 00001A43 F7C280000000        <1>     test edx, devCharDev
   751 00001A49 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   752 00001A4B F7C210000000        <1>     test edx, charDevFastOut
   753 00001A51 743E                <1>     jz .doAnsi
   754                              <1>     ;Test if Int 49h uses Int 30h
   755                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   756                              <1>     ;Int 49h MUST be terminated with a IRETQ, within 1024 bytes
   757 00001A53 B849350000          <1>     mov eax, 3549h  ;Get the vector for interrupt 49h
   758 00001A58 CD41                <1>     int 41h
   759                              <1> .biosCheck:
   760 00001A5A 66813BCD30          <1>     cmp word [rbx], 30CDh
   761 00001A5F 740C                <1>     je .biosConfirmed
   762 00001A61 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   763 00001A66 7429                <1>     je .doAnsi
   764 00001A68 48FFC3              <1>     inc rbx
   765 00001A6B EBED                <1>     jmp short .biosCheck
   766                              <1> .biosConfirmed:
   767                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   768 00001A6D B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   769 00001A6F 31DB                <1>     xor ebx, ebx
   770 00001A71 CD30                <1>     int 30h
   771 00001A73 B40F                <1>     mov ah, 0Fh ;Get screen mode
   772 00001A75 CD30                <1>     int 30h
   773 00001A77 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   774 00001A7A FECA                <1>     dec dl
   775 00001A7C B619                <1>     mov dh, 25  ;Number of rows is standard
   776 00001A7E 31C0                <1>     xor eax, eax
   777 00001A80 89C1                <1>     mov ecx, eax
   778 00001A82 B707                <1>     mov bh, 7   ;Screen attributes
   779 00001A84 B406                <1>     mov ah, 6   ;Scroll
   780 00001A86 CD30                <1>     int 30h
   781 00001A88 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   782 00001A8A B700                <1>     mov bh, 0   ;Page 0
   783 00001A8C B402                <1>     mov ah, 2
   784 00001A8E CD30                <1>     int 30h
   785                              <1>     return
    19                              <2> %%_ret:
    20 00001A90 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   786                              <1> .doAnsi:
   787                              <1> ;If an ANSI driver is not installed, this will simply insert blank lines
   788                              <1> ;4 chars in the ansi routine
   789                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   790                              <1> ; understand ANSI codes
   791 00001A91 488D357CF1FFFF      <1>     lea rsi, ansiCls
   792 00001A98 B904000000          <1>     mov ecx, 4
   793 00001A9D B406                <1>     mov ah, 06h ;Raw char output
   794                              <1> .ansiLp:
   795 00001A9F AC                  <1>     lodsb   ;Get the char in 
   796 00001AA0 88C2                <1>     mov dl, al
   797 00001AA2 CD41                <1>     int 41h
   798 00001AA4 FFC9                <1>     dec ecx
   799 00001AA6 75F7                <1>     jnz .ansiLp
   800                              <1>     return
    19                              <2> %%_ret:
    20 00001AA8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   801                              <1> 
   802                              <1> break:
   803 00001AA9 F605FDE5FFFFFF      <1>     test byte [arg1Flg], -1
   804 00001AB0 752D                <1>     jnz .argumentProvided
   805                              <1>     ;Here we just get the status of break
   806 00001AB2 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   807 00001AB7 CD41                <1>     int 41h
   808 00001AB9 88D3                <1>     mov bl, dl
   809 00001ABB 488D15A2EFFFFF      <1>     lea rdx, breakIs
   810 00001AC2 B409                <1>     mov ah, 09h
   811 00001AC4 CD41                <1>     int 41h
   812 00001AC6 488D1592EFFFFF      <1>     lea rdx, onMes
   813 00001ACD 488D0D85EFFFFF      <1>     lea rcx, offMes
   814 00001AD4 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   815 00001AD6 480F44D1            <1>     cmovz rdx, rcx
   816 00001ADA B409                <1>     mov ah, 09h
   817 00001ADC CD41                <1>     int 41h
   818                              <1>     return
    19                              <2> %%_ret:
    20 00001ADE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   819                              <1> .argumentProvided:
   820 00001ADF 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   821 00001AE3 AD                  <1>     lodsd   ;Read the word
   822 00001AE4 89C3                <1>     mov ebx, eax
   823 00001AE6 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   824 00001AEB C1EB10              <1>     shr ebx, 10h     ;Get high word low
   825 00001AEE 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   826 00001AF3 7416                <1>     je .maybeOn
   827 00001AF5 663D4F46            <1>     cmp ax, "OF"
   828 00001AF9 7523                <1>     jne .badOnOff
   829 00001AFB 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   830 00001B00 6681FB4620          <1>     cmp bx, "F "
   831 00001B05 7517                <1>     jne .badOnOff
   832                              <1>     ;Set off
   833 00001B07 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   834 00001B09 EB0B                <1>     jmp short .setBreak
   835                              <1> .maybeOn:
   836 00001B0B 663D4F4E            <1>     cmp ax, "ON"
   837 00001B0F 750D                <1>     jne .badOnOff
   838                              <1>     ;Set on
   839 00001B11 BA01000000          <1>     mov edx, 1
   840                              <1> .setBreak:
   841 00001B16 B801330000          <1>     mov eax, 3301h  ;Set break
   842 00001B1B CD41                <1>     int 41h
   843                              <1>     return
    19                              <2> %%_ret:
    20 00001B1D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   844                              <1> .badOnOff:
   845 00001B1E 488D15FFF0FFFF      <1>     lea rdx, badOnOff
   846 00001B25 B409                <1>     mov ah, 09h
   847 00001B27 CD41                <1>     int 41h
   848                              <1>     return
    19                              <2> %%_ret:
    20 00001B29 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   849                              <1> 
   850                              <1> verify:
   851 00001B2A F6057CE5FFFFFF      <1>     test byte [arg1Flg], -1
   852 00001B31 752D                <1>     jnz .argumentProvided
   853                              <1>     ;Here we just get the status of break
   854 00001B33 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
   855 00001B38 CD41                <1>     int 41h
   856 00001B3A 88C3                <1>     mov bl, al
   857 00001B3C 488D152BEFFFFF      <1>     lea rdx, verifyIs
   858 00001B43 B409                <1>     mov ah, 09h
   859 00001B45 CD41                <1>     int 41h
   860 00001B47 488D1511EFFFFF      <1>     lea rdx, onMes
   861 00001B4E 488D0D04EFFFFF      <1>     lea rcx, offMes
   862 00001B55 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   863 00001B57 480F44D1            <1>     cmovz rdx, rcx
   864 00001B5B B409                <1>     mov ah, 09h
   865 00001B5D CD41                <1>     int 41h
   866                              <1>     return
    19                              <2> %%_ret:
    20 00001B5F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   867                              <1> .argumentProvided:
   868 00001B60 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   869 00001B64 AD                  <1>     lodsd   ;Read the word
   870 00001B65 89C3                <1>     mov ebx, eax
   871 00001B67 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   872 00001B6C C1EB10              <1>     shr ebx, 10h     ;Get high word low
   873 00001B6F 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   874 00001B74 7416                <1>     je .maybeOn
   875 00001B76 663D4F46            <1>     cmp ax, "OF"
   876 00001B7A 751F                <1>     jne .badOnOff
   877 00001B7C 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   878 00001B81 6681FB4620          <1>     cmp bx, "F "
   879 00001B86 7513                <1>     jne .badOnOff
   880                              <1>     ;Set off
   881 00001B88 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
   882 00001B8A EB0A                <1>     jmp short .setVerify
   883                              <1> .maybeOn:
   884 00001B8C 663D4F4E            <1>     cmp ax, "ON"
   885 00001B90 7509                <1>     jne .badOnOff
   886                              <1>     ;Set on
   887 00001B92 31C0                <1>     xor eax, eax
   888 00001B94 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
   889                              <1> .setVerify:
   890 00001B96 B42E                <1>     mov ah, 2Eh  ;Set Verify
   891 00001B98 CD41                <1>     int 41h
   892                              <1>     return
    19                              <2> %%_ret:
    20 00001B9A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   893                              <1> .badOnOff:
   894 00001B9B 488D1582F0FFFF      <1>     lea rdx, badOnOff
   895 00001BA2 B409                <1>     mov ah, 09h
   896 00001BA4 CD41                <1>     int 41h
   897                              <1>     return
    19                              <2> %%_ret:
    20 00001BA6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   898                              <1> 
   899                              <1> rename:
   900 00001BA7 F605FFE4FFFFFF      <1>     test byte [arg1Flg], -1
   901 00001BAE 0F84BCF5FFFF        <1>     jz badArgError
   902 00001BB4 F605F5E4FFFFFF      <1>     test byte [arg2Flg], -1
   903 00001BBB 0F84AFF5FFFF        <1>     jz badArgError
   904 00001BC1 488D35C6E5FFFF      <1>     lea rsi, cmdBuffer
   905 00001BC8 0FB605DFE4FFFF      <1>     movzx eax, byte [arg1Off]
   906 00001BCF 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   907                              <1>     ;rsi points to terminating char
   908 00001BD2 AC                  <1>     lodsb   ;Get first char in AL
   909 00001BD3 48FFCE              <1>     dec rsi ;Go back to this char
   910 00001BD6 E8EE080000          <1>     call isALEndOfCommand
   911 00001BDB 0F827DF5FFFF        <1>     jc badParamError
   912 00001BE1 488D3DE1E8FFFF      <1>     lea rdi, sourcePath ;Store this in sourcePath
   913                              <1> .copyName1:
   914 00001BE8 AC                  <1>     lodsb
   915 00001BE9 E8DB080000          <1>     call isALEndOfCommand
   916 00001BEE 0F846AF5FFFF        <1>     je badParamError
   917 00001BF4 E8AD080000          <1>     call isALterminator
   918 00001BF9 7403                <1>     jz .endOfName1
   919 00001BFB AA                  <1>     stosb
   920 00001BFC EBEA                <1>     jmp short .copyName1
   921                              <1> .endOfName1:
   922 00001BFE 31C0                <1>     xor eax, eax
   923 00001C00 AA                  <1>     stosb   ;Store this 0 at rdi
   924 00001C01 488D3586E5FFFF      <1>     lea rsi, cmdBuffer
   925 00001C08 0FB605A2E4FFFF      <1>     movzx eax, byte [arg2Off]
   926 00001C0F 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   927 00001C12 807E013A            <1>     cmp byte [rsi + 1], ":" ;If dest path char 2 is :, must be X:, not allowed
   928 00001C16 0F8442F5FFFF        <1>     je badParamError
   929 00001C1C AC                  <1>     lodsb   ;Get first char in AL
   930 00001C1D 48FFCE              <1>     dec rsi ;Go back to this char
   931 00001C20 E8A4080000          <1>     call isALEndOfCommand
   932 00001C25 0F8233F5FFFF        <1>     jc badParamError
   933 00001C2B 488D3D17E9FFFF      <1>     lea rdi, destPath
   934                              <1> .copyName2:
   935 00001C32 AC                  <1>     lodsb
   936 00001C33 E891080000          <1>     call isALEndOfCommand
   937 00001C38 740A                <1>     je .endOfName2
   938 00001C3A E867080000          <1>     call isALterminator
   939 00001C3F 7403                <1>     jz .endOfName2
   940 00001C41 AA                  <1>     stosb
   941 00001C42 EBEE                <1>     jmp short .copyName2
   942                              <1> .endOfName2:
   943 00001C44 31C0                <1>     xor eax, eax
   944 00001C46 AA                  <1>     stosb   ;Store this 0 at rdi
   945 00001C47 488D157BE8FFFF      <1>     lea rdx, sourcePath
   946 00001C4E 488D3DF4E8FFFF      <1>     lea rdi, destPath
   947 00001C55 B800560000          <1>     mov eax, 5600h
   948 00001C5A CD41                <1>     int 41h
   949                              <1>     retnc   ;Return if all oki!
    67                              <2> cret nc
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 00001C5C 7201                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 00001C5E C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   950 00001C5F 3C0F                <1>     cmp al, errBadDrv
   951 00001C61 0F8400F5FFFF        <1>     je badDriveError
   952 00001C67 3C0B                <1>     cmp al, errBadFmt
   953 00001C69 0F841CF5FFFF        <1>     je badDirError
   954 00001C6F E90EF5FFFF          <1>     jmp badDupFnf
   955                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   956                              <1> touch:
   957                              <1> ;Temporarily used to create files
   958 00001C74 F60532E4FFFFFF      <1>     test byte [arg1Flg], -1
   959 00001C7B 0F84EFF4FFFF        <1>     jz badArgError
   960 00001C81 E837090000          <1>     call buildCommandPath
   961 00001C86 488D1594E6FFFF      <1>     lea rdx, searchSpec
   962 00001C8D B8003C0000          <1>     mov eax, 3C00h  ;Create file 
   963 00001C92 31C9                <1>     xor ecx, ecx
   964 00001C94 CD41                <1>     int 41h
   965 00001C96 720B                <1>     jc .touchError
   966 00001C98 0FB7D8              <1>     movzx ebx, ax
   967 00001C9B B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
   968 00001CA0 CD41                <1>     int 41h
   969                              <1>     return
    19                              <2> %%_ret:
    20 00001CA2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   970                              <1> .touchError:
   971 00001CA3 488D1552EFFFFF      <1>     lea rdx, touchErr
   972 00001CAA E9E3F4FFFF          <1>     jmp badCmn
   973                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   974                              <1> truename:
   975 00001CAF F605F7E3FFFFFF      <1>     test byte [arg1Flg], -1
   976 00001CB6 0F84B4F4FFFF        <1>     jz badArgError
   977 00001CBC E8FC080000          <1>     call buildCommandPath
   978                              <1>     ;Explicitly call Truename if we remove truename from this function
   979 00001CC1 488D3D59E6FFFF      <1>     lea rdi, searchSpec
   980 00001CC8 E895070000          <1>     call strlen
   981 00001CCD FFC9                <1>     dec ecx ;Don't print terminating null
   982 00001CCF 488D154BE6FFFF      <1>     lea rdx, searchSpec
   983 00001CD6 BB01000000          <1>     mov ebx, 01
   984 00001CDB B440                <1>     mov ah, 40h
   985 00001CDD CD41                <1>     int 41h
   986 00001CDF E8B9040000          <1>     call printCRLF
   987                              <1>     return
    19                              <2> %%_ret:
    20 00001CE4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   988                              <1> 
   989                              <1> volume:
   990 00001CE5 488D35A4E4FFFF      <1>     lea rsi, cmdBuffer + 2  ;Get the command buffer
   991 00001CEC E8E9070000          <1>     call skipSpaces
   992 00001CF1 4881C603000000      <1>     add rsi, 3  ;Go past the VOL command
   993 00001CF8 E8DD070000          <1>     call skipSpaces
   994 00001CFD AC                  <1>     lodsb   ;Get the first char, and point rsi to next char
   995 00001CFE E8C6070000          <1>     call isALEndOfCommand   ;If this char is end of command, use current drive
   996 00001D03 7507                <1>     jnz .checkDriveLetter
   997 00001D05 E853070000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
   998 00001D0A EB35                <1>     jmp short .dirEP
   999                              <1> .checkDriveLetter:
  1000 00001D0C 803E3A              <1>     cmp byte [rsi], ":" ;If this is not a :, fail
  1001 00001D0F 0F8552F4FFFF        <1>     jne badDriveError
  1002 00001D15 4889F7              <1>     mov rdi, rsi    ;Save start of drive spec in rsi
  1003 00001D18 48FFC6              <1>     inc rsi  ;Go past the X: spec
  1004 00001D1B E8BA070000          <1>     call skipSpaces
  1005 00001D20 AC                  <1>     lodsb   ;Get the non-space char in al
  1006 00001D21 E8A3070000          <1>     call isALEndOfCommand   ;The next non-space char must be terminator
  1007 00001D26 0F853BF4FFFF        <1>     jne badDriveError
  1008                              <1> ;This argument should've been parsed into FCB1 so use that result
  1009 00001D2C 8A057DE3FFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1010 00001D32 A8FF                <1>     test al, -1
  1011 00001D34 0F852DF4FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1012 00001D3A 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1013 00001D3F FFC8                <1>     dec eax ;Convert to 0 based number
  1014                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al
  1015 00001D41 0541000000          <1>     add eax, "A" ;Get ASCII representation of 0 based number
  1016 00001D46 880572E7FFFF        <1>     mov byte [volPathBuf], al   ;Store ASCII letter here
  1017 00001D4C 488D1570E3FFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
  1018 00001D53 B41A                <1>     mov ah, 1Ah
  1019 00001D55 CD41                <1>     int 41h
  1020 00001D57 488D1560E7FFFF      <1>     lea rdx, volPathBuf
  1021 00001D5E 66B90800            <1>     mov cx, dirVolumeID
  1022 00001D62 B44E                <1>     mov ah, 4Eh ;Find first
  1023 00001D64 CD41                <1>     int 41h
  1024 00001D66 7221                <1>     jc .skipVolLbl
  1025 00001D68 488D3572E3FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
  1026 00001D6F 488D3D3BE7FFFF      <1>     lea rdi, volLblSpc
  1027 00001D76 B90B000000          <1>     mov ecx, 11 ;Get the 11 chars of the volume label
  1028                              <1> .dirLblCopy:
  1029 00001D7B AC                  <1>     lodsb   ;Get the first char
  1030 00001D7C 3C00                <1>     cmp al, 0
  1031 00001D7E 7409                <1>     je .skipVolLbl  ;Jump with CF=NC
  1032 00001D80 3C2E                <1>     cmp al, "."
  1033 00001D82 7401                <1>     je .dirLblSkipStore
  1034 00001D84 AA                  <1>     stosb
  1035                              <1> .dirLblSkipStore:
  1036 00001D85 FFC9                <1>     dec ecx
  1037 00001D87 75F2                <1>     jnz .dirLblCopy
  1038                              <1>     ;Fallthru with CF=NC
  1039                              <1> .skipVolLbl:
  1040                              <1> ;Print volume label information now
  1041                              <1> ;Propagates the CF if CF was set    
  1042 00001D89 9C                  <1>     pushfq
  1043 00001D8A 488D15E7E8FFFF      <1>     lea rdx, crlf
  1044 00001D91 B409                <1>     mov ah, 09h
  1045 00001D93 CD41                <1>     int 41h
  1046 00001D95 488D1561EBFFFF      <1>     lea rdx, volMes
  1047 00001D9C B409                <1>     mov ah, 09h
  1048 00001D9E CD41                <1>     int 41h
  1049 00001DA0 8A1518E7FFFF        <1>     mov dl, byte [volPathBuf]   ;Print the drive letter out
  1050 00001DA6 B402                <1>     mov ah, 02h
  1051 00001DA8 CD41                <1>     int 41h
  1052 00001DAA 9D                  <1>     popfq
  1053 00001DAB 7317                <1>     jnc .volIDOk
  1054 00001DAD 488D1560EBFFFF      <1>     lea rdx, volNo
  1055 00001DB4 B409                <1>     mov ah, 09h
  1056 00001DB6 CD41                <1>     int 41h
  1057 00001DB8 488D15B9E8FFFF      <1>     lea rdx, crlf
  1058 00001DBF B409                <1>     mov ah, 09h
  1059 00001DC1 CD41                <1>     int 41h
  1060                              <1>     return
    19                              <2> %%_ret:
    20 00001DC3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1061                              <1> .volIDOk:
  1062 00001DC4 488D1544EBFFFF      <1>     lea rdx, volOk
  1063 00001DCB B409                <1>     mov ah, 09h
  1064 00001DCD CD41                <1>     int 41h
  1065 00001DCF 488D3DDBE6FFFF      <1>     lea rdi, volLblSpc
  1066 00001DD6 E887060000          <1>     call strlen
  1067 00001DDB FFC9                <1>     dec ecx
  1068 00001DDD C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
  1069 00001DE1 488D15C9E6FFFF      <1>     lea rdx, volLblSpc
  1070 00001DE8 B409                <1>     mov ah, 09h
  1071 00001DEA CD41                <1>     int 41h
  1072 00001DEC 488D1585E8FFFF      <1>     lea rdx, crlf
  1073 00001DF3 B409                <1>     mov ah, 09h
  1074 00001DF5 CD41                <1>     int 41h
  1075                              <1>     return
    19                              <2> %%_ret:
    20 00001DF7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1076                              <1> 
  1077                              <1> version:
  1078 00001DF8 488D1579E8FFFF      <1>     lea rdx, crlf
  1079 00001DFF B409                <1>     mov ah, 09h
  1080 00001E01 CD41                <1>     int 41h
  1081 00001E03 488D15E1EAFFFF      <1>     lea rdx, dosVer
  1082 00001E0A B409                <1>     mov ah, 09h
  1083 00001E0C CD41                <1>     int 41h
  1084 00001E0E E80C000000          <1>     call .printVersionNumber
  1085 00001E13 488D155EE8FFFF      <1>     lea rdx, crlf
  1086 00001E1A B409                <1>     mov ah, 09h
  1087 00001E1C CD41                <1>     int 41h
  1088                              <1>     return
    19                              <2> %%_ret:
    20 00001E1E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1089                              <1> .printVersionNumber:
  1090 00001E1F B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1091 00001E21 CD41                <1>     int 41h
  1092 00001E23 50                  <1>     push rax
  1093 00001E24 0FB6C0              <1>     movzx eax, al
  1094 00001E27 E82F080000          <1>     call printDecimalWord
  1095 00001E2C B22E                <1>     mov dl, "."
  1096 00001E2E B402                <1>     mov ah, 02h
  1097 00001E30 CD41                <1>     int 41h
  1098 00001E32 58                  <1>     pop rax
  1099 00001E33 0FB6C4              <1>     movzx eax, ah
  1100 00001E36 E820080000          <1>     call printDecimalWord
  1101                              <1>     return
    19                              <2> %%_ret:
    20 00001E3B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1102                              <1> 
  1103                              <1> 
  1104                              <1> memory:
  1105 00001E3C 488B1DD4E1FFFF      <1>     mov rbx, qword [sysVars]
  1106 00001E43 4885DB              <1>     test rbx, rbx
  1107 00001E46 7510                <1>     jnz .sysvarsOK
  1108 00001E48 488D154EEDFFFF      <1>     lea rdx, memBad0
  1109 00001E4F B409                <1>     mov ah, 09h
  1110 00001E51 CD41                <1>     int 41h
  1111 00001E53 E9A6080000          <1>     jmp freezePC.altEP
  1112                              <1> .sysvarsOK:
  1113                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1114                              <1>     ; and rcx to store Application memory
  1115 00001E58 31F6                <1>     xor esi, esi
  1116 00001E5A 31FF                <1>     xor edi, edi
  1117 00001E5C 31ED                <1>     xor ebp, ebp
  1118 00001E5E 31C9                <1>     xor ecx, ecx
  1119 00001E60 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1120 00001E64 488B1B              <1>     mov rbx, qword [rbx]
  1121                              <1> .memLp:
  1122 00001E67 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1123 00001E6A 7409                <1>     je .validMCB
  1124 00001E6C 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1125 00001E6F 0F8501010000        <1>     jne .badMCBFound
  1126                              <1> .validMCB:
  1127 00001E75 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1128 00001E78 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1129 00001E7C 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1130 00001E84 7505                <1>     jne .notDOS
  1131 00001E86 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1132 00001E89 EB21                <1>     jmp short .gotoNext
  1133                              <1> .notDOS:
  1134 00001E8B 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1135 00001E93 7505                <1>     jne .notFree
  1136 00001E95 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1137 00001E98 EB12                <1>     jmp short .gotoNext
  1138                              <1> .notFree:
  1139 00001E9A 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1140 00001EA2 7505                <1>     jne .notHole
  1141 00001EA4 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1142 00001EA7 EB03                <1>     jmp short .gotoNext
  1143                              <1> .notHole:
  1144 00001EA9 4801C1              <1>     add rcx, rax    ;Add to Application count
  1145                              <1> .gotoNext:
  1146 00001EAC 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1147 00001EAF 7407                <1>     je .endOfWalk
  1148 00001EB1 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  1149 00001EB6 EBAF                <1>     jmp short .memLp
  1150                              <1> .endOfWalk:
  1151                              <1>     
  1152 00001EB8 488D153FECFFFF      <1>     lea rdx, memDOS
  1153 00001EBF B409                <1>     mov ah, 09h
  1154 00001EC1 CD41                <1>     int 41h
  1155 00001EC3 4889F0              <1>     mov rax, rsi
  1156 00001EC6 E89D000000          <1>     call .mcbPrintAmount
  1157 00001ECB 488D15C4ECFFFF      <1>     lea rdx, memByte
  1158 00001ED2 B409                <1>     mov ah, 09h
  1159 00001ED4 CD41                <1>     int 41h
  1160                              <1> 
  1161 00001ED6 4885ED              <1>     test rbp, rbp
  1162 00001ED9 741E                <1>     jz .skipHole
  1163 00001EDB 488D1568ECFFFF      <1>     lea rdx, memHole
  1164 00001EE2 B409                <1>     mov ah, 09h
  1165 00001EE4 CD41                <1>     int 41h
  1166 00001EE6 4889E8              <1>     mov rax, rbp
  1167 00001EE9 E87A000000          <1>     call .mcbPrintAmount
  1168 00001EEE 488D15A1ECFFFF      <1>     lea rdx, memByte
  1169 00001EF5 B409                <1>     mov ah, 09h
  1170 00001EF7 CD41                <1>     int 41h
  1171                              <1> .skipHole:
  1172                              <1> 
  1173 00001EF9 488D1524ECFFFF      <1>     lea rdx, memApp
  1174 00001F00 B409                <1>     mov ah, 09h
  1175 00001F02 CD41                <1>     int 41h
  1176 00001F04 4889C8              <1>     mov rax, rcx
  1177 00001F07 E85C000000          <1>     call .mcbPrintAmount
  1178 00001F0C 488D1583ECFFFF      <1>     lea rdx, memByte
  1179 00001F13 B409                <1>     mov ah, 09h
  1180 00001F15 CD41                <1>     int 41h
  1181                              <1> 
  1182 00001F17 488D1552ECFFFF      <1>     lea rdx, memFree
  1183 00001F1E B409                <1>     mov ah, 09h
  1184 00001F20 CD41                <1>     int 41h
  1185 00001F22 4889F8              <1>     mov rax, rdi
  1186 00001F25 E83E000000          <1>     call .mcbPrintAmount
  1187 00001F2A 488D1565ECFFFF      <1>     lea rdx, memByte
  1188 00001F31 B409                <1>     mov ah, 09h
  1189 00001F33 CD41                <1>     int 41h
  1190                              <1> 
  1191 00001F35 488D159CEBFFFF      <1>     lea rdx, memSys
  1192 00001F3C B409                <1>     mov ah, 09h
  1193 00001F3E CD41                <1>     int 41h
  1194 00001F40 4889F0              <1>     mov rax, rsi
  1195 00001F43 4801F8              <1>     add rax, rdi
  1196 00001F46 4801C8              <1>     add rax, rcx
  1197 00001F49 4801E8              <1>     add rax, rbp
  1198 00001F4C E817000000          <1>     call .mcbPrintAmount
  1199 00001F51 488D153EECFFFF      <1>     lea rdx, memByte
  1200 00001F58 B409                <1>     mov ah, 09h
  1201 00001F5A CD41                <1>     int 41h
  1202                              <1> 
  1203 00001F5C 488D1515E7FFFF      <1>     lea rdx, crlf
  1204 00001F63 B409                <1>     mov ah, 09h
  1205 00001F65 CD41                <1>     int 41h
  1206                              <1>     return
    19                              <2> %%_ret:
    20 00001F67 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1207                              <1> 
  1208                              <1> .mcbPrintAmount:
  1209 00001F68 51                  <1>     push rcx
  1210 00001F69 56                  <1>     push rsi
  1211 00001F6A 57                  <1>     push rdi
  1212 00001F6B 55                  <1>     push rbp
  1213 00001F6C E8EA060000          <1>     call printDecimalWord
  1214 00001F71 5D                  <1>     pop rbp
  1215 00001F72 5F                  <1>     pop rdi
  1216 00001F73 5E                  <1>     pop rsi
  1217 00001F74 59                  <1>     pop rcx
  1218                              <1>     return
    19                              <2> %%_ret:
    20 00001F75 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1219                              <1> .badMCBFound:
  1220 00001F76 488D1560ECFFFF      <1>     lea rdx, memBad2
  1221 00001F7D B409                <1>     mov ah, 09h
  1222 00001F7F CD41                <1>     int 41h
  1223 00001F81 E978070000          <1>     jmp freezePC.altEP
  1224                              <1> 
  1225                              <1> type:
  1226 00001F86 F60520E1FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1227 00001F8D 0F84DDF1FFFF        <1>     jz badArgError
  1228 00001F93 F60516E1FFFFFF      <1>     test byte [arg2Flg], -1
  1229 00001F9A 0F85D0F1FFFF        <1>     jnz badArgError         ;If this set, error
  1230 00001FA0 488D35E7E1FFFF      <1>     lea rsi, cmdBuffer
  1231 00001FA7 0FB60500E1FFFF      <1>     movzx eax, byte [arg1Off]
  1232 00001FAE 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1233 00001FB1 803E0D              <1>     cmp byte [rsi], CR
  1234 00001FB4 0F84B6F1FFFF        <1>     je badArgError
  1235 00001FBA 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1236 00001FBE 750F                <1>     jne .noDrive
  1237 00001FC0 0FB605E8E0FFFF      <1>     movzx eax, byte [arg1FCBret]
  1238 00001FC7 3CFF                <1>     cmp al, -1
  1239 00001FC9 0F8498F1FFFF        <1>     je badDriveError
  1240                              <1> .noDrive:
  1241                              <1>     ;Now we open the provided file
  1242 00001FCF E86C070000          <1>     call copyArgumentToSearchSpec
  1243 00001FD4 488D1546E3FFFF      <1>     lea rdx, searchSpec
  1244 00001FDB B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1245 00001FE0 CD41                <1>     int 41h
  1246 00001FE2 0F8291F1FFFF        <1>     jc badFileError
  1247 00001FE8 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1248 00001FEF 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1249                              <1> .lp:
  1250 00001FF2 B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1251 00001FF7 B43F                <1>     mov ah, 3Fh ;Read handle
  1252 00001FF9 CD41                <1>     int 41h
  1253 00001FFB 89C1                <1>     mov ecx, eax
  1254 00001FFD 67E317              <1>     jecxz .exit
  1255 00002000 53                  <1>     push rbx    ;Save the original in handle
  1256 00002001 BB01000000          <1>     mov ebx, 1  ;STDOUT
  1257 00002006 B440                <1>     mov ah, 40h
  1258 00002008 CD41                <1>     int 41h
  1259 0000200A 5B                  <1>     pop rbx ;Get back the original read handle
  1260 0000200B 720F                <1>     jc .exitBad
  1261 0000200D 39C8                <1>     cmp eax, ecx
  1262 0000200F 74E1                <1>     je .lp
  1263 00002011 FFC9                <1>     dec ecx ;One less for a ^Z
  1264 00002013 39C8                <1>     cmp eax, ecx
  1265 00002015 7505                <1>     jne .exitBad
  1266                              <1> .exit:
  1267 00002017 B43E                <1>     mov ah, 3Eh ;Close handle
  1268 00002019 CD41                <1>     int 41h
  1269                              <1>     return
    19                              <2> %%_ret:
    20 0000201B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1270                              <1> .exitBad:
  1271                              <1>     ;Print a disk error message... use a table to build the message but for
  1272                              <1>     ; now, just exit
  1273                              <1>     ;If it is a char device, don't print a error
  1274 0000201C EBF9                <1>     jmp short .exit
  1275                              <1> 
  1276                              <1> exit:
  1277 0000201E F60500E0FFFFFF      <1>     test byte [permaSwitch], -1
  1278                              <1>     retnz   ;Return if the flag is set
    51                              <2> cret nz
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002025 75(1B)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
  1279 00002027 488B05E1DFFFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1280 0000202E 483DFFFFFFFF        <1>     cmp rax, -1
  1281                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002034 74(1B)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
  1282 00002036 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1283                              <1> 
  1284 0000203A 488B15E5DFFFFF      <1>     mov rdx, qword [parentInt42]
  1285 00002041 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
  1286 00002045 B842250000          <1>     mov eax, 2542h
  1287 0000204A CD41                <1>     int 41h
  1288                              <1> 
  1289 0000204C B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1290 00002051 CD41                <1>     int 41h
  1291                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    19                              <2> %%_ret:
    20 00002053 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1292                              <1> 
  1293                              <1> launchChild:
  1294                              <1> ;We run EXEC on this and the child task will return via applicationReturn
  1295                              <1> ;Here we must search the CWD or all path componants before failing
  1296                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
  1297 00002054 488D1568E0FFFF      <1>     lea rdx, cmdFFBlock
  1298 0000205B B41A                <1>     mov ah, 1Ah     ;Set DTA for task
  1299 0000205D CD41                <1>     int 41h
  1300                              <1> 
  1301 0000205F 8B0557E0FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
  1302 00002065 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1303 0000206A 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1304 0000206F 3D20202020          <1>     cmp eax, "    " ;Only if we have four spaces do we proceed here
  1305 00002074 741D                <1>     je .noExt
  1306 00002076 E899EFFFFF          <1>     call checkExtensionExec ;ZF=ZE => Executable
  1307 0000207B 0F8510010000        <1>     jnz .dfltErrExit
  1308                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1309 00002081 0F820A010000        <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
  1310                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1311                              <1>     ;So it is a com or exe that we are searching for for now
  1312 00002087 488D3D80E1FFFF      <1>     lea rdi, cmdPathSpec
  1313 0000208E 4889FA              <1>     mov rdx, rdi
  1314 00002091 EB24                <1>     jmp short .search
  1315                              <1> .noExt:
  1316                              <1>     ;If the filename has no extension, append a .*
  1317                              <1>     ;Use bl as flags. bl[0] => COM found, bl[1] => EXE found, bl[2] => BAT found
  1318 00002093 31DB                <1>     xor ebx, ebx
  1319 00002095 488D3D72E1FFFF      <1>     lea rdi, cmdPathSpec
  1320 0000209C 4889FA              <1>     mov rdx, rdi
  1321 0000209F 31C0                <1>     xor eax, eax
  1322 000020A1 B9FFFFFFFF          <1>     mov ecx, -1
  1323 000020A6 F2AE                <1>     repne scasb
  1324 000020A8 48FFCF              <1>     dec rdi ;Point to the terminating null
  1325 000020AB 4889FD              <1>     mov rbp, rdi    ;Temporarily store the ptr to the . in rbp
  1326 000020AE 66B82E2A            <1>     mov ax, ".*"
  1327 000020B2 66AB                <1>     stosw
  1328 000020B4 30C0                <1>     xor al, al  ;Store terminating null
  1329 000020B6 AA                  <1>     stosb
  1330                              <1> .search:
  1331 000020B7 B906000000          <1>     mov ecx, dirIncFiles
  1332 000020BC B44E                <1>     mov ah, 4Eh ;Find First File
  1333 000020BE CD41                <1>     int 41h
  1334 000020C0 0F82CB000000        <1>     jc .dfltErrExit
  1335 000020C6 E879000000          <1>     call .noExtCheckExt
  1336                              <1> .moreSearch:
  1337 000020CB B44F                <1>     mov ah, 4Fh
  1338 000020CD CD41                <1>     int 41h
  1339 000020CF 7207                <1>     jc .noMoreFiles
  1340 000020D1 E86E000000          <1>     call .noExtCheckExt
  1341 000020D6 EBF3                <1>     jmp short .moreSearch
  1342                              <1> .noMoreFiles:
  1343 000020D8 85DB                <1>     test ebx, ebx
  1344 000020DA 0F84B1000000        <1>     jz .dfltErrExit
  1345                              <1> ;So we have a valid executable
  1346 000020E0 4889EF              <1>     mov rdi, rbp    ;Get back ptr to the .*,0
  1347 000020E3 F7C301000000        <1>     test ebx, 1
  1348 000020E9 7407                <1>     jz .launchexebat
  1349 000020EB B82E434F4D          <1>     mov eax, ".COM"
  1350 000020F0 EB14                <1>     jmp short .launch
  1351                              <1> .launchexebat:
  1352 000020F2 F7C302000000        <1>     test ebx, 2
  1353 000020F8 7407                <1>     jz .launchbat
  1354 000020FA B82E455845          <1>     mov eax, ".EXE"
  1355 000020FF EB05                <1>     jmp short .launch
  1356                              <1> .launchbat:
  1357                              <1> ;Temporary For BAT
  1358 00002101 E98B000000          <1>     jmp .dfltErrExit
  1359                              <1> .launch:
  1360 00002106 AB                  <1>     stosd
  1361 00002107 30C0                <1>     xor al, al
  1362 00002109 AA                  <1>     stosb   ;Store the terminating null
  1363 0000210A 488D1DDDDFFFFF      <1>     lea rbx, launchBlock
  1364 00002111 31C0                <1>     xor eax, eax
  1365 00002113 488903              <1>     mov qword [rbx + execProg.pEnv], rax    ;Tell DOS to copy my current Env
  1366 00002116 498D8080000000      <1>     lea rax, qword [r8 + cmdLineCnt]
  1367 0000211D 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1368 00002121 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1369 00002125 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1370 00002129 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1371 0000212D 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1372 00002131 488D15D6E0FFFF      <1>     lea rdx, cmdPathSpec
  1373 00002138 B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1374 0000213D CD41                <1>     int 41h
  1375 0000213F E94D000000          <1>     jmp .dfltErrExit    ;If something goes wrong, error out
  1376                              <1> .noExtCheckExt:
  1377                              <1>     ;mov eax, dword [cmdFFBlock + ffBlock.asciizName + filename.fExt]
  1378 00002144 488D3596DFFFFF      <1>     lea rsi, dword [cmdFFBlock + ffBlock.asciizName]
  1379 0000214B 488D3D0BE1FFFF      <1>     lea rdi, fcbCmdSpec
  1380 00002152 E8DC030000          <1>     call asciiFilenameToFCB
  1381 00002157 8B0508E1FFFF        <1>     mov eax, dword [fcbCmdSpec + filename.fExt]
  1382 0000215D 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1383 00002162 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1384 00002167 3D434F4D20          <1>     cmp eax, "COM "
  1385 0000216C 7507                <1>     jne .neceexe
  1386 0000216E 81CB01000000        <1>     or ebx, 1
  1387                              <1>     return
    19                              <2> %%_ret:
    20 00002174 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1388                              <1> .neceexe:
  1389 00002175 3D45584520          <1>     cmp eax, "EXE "
  1390 0000217A 7507                <1>     jne .necebat
  1391 0000217C 81CB02000000        <1>     or ebx, 2
  1392                              <1>     return
    19                              <2> %%_ret:
    20 00002182 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1393                              <1> .necebat:
  1394 00002183 3D42415420          <1>     cmp eax, "BAT "
  1395                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002188 75(82)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
  1396 0000218A 81CB04000000        <1>     or ebx, 4
  1397                              <1>     return
    19                              <2> %%_ret:
    20 00002190 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1398                              <1> 
  1399                              <1> .dfltErrExit:
  1400 00002191 488D153DE5FFFF      <1>     lea rdx, badCmd
  1401 00002198 B409                <1>     mov ah, 09h
  1402 0000219A CD41                <1>     int 41h
  1403                              <1>     return
    19                              <2> %%_ret:
    20 0000219C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    17                                  %include "./Source/Utils/COMMAND/Source/cmdUtils.asm"
    18                              <1> ;Misc functions and subroutines for command.com
    19                              <1> 
    20                              <1> printCRLF:
    21 0000219D 488D15D4E4FFFF      <1>     lea rdx, crlf
    22 000021A4 BB02000000          <1>     mov ebx, 2
    23 000021A9 B440                <1>     mov ah, 40h ;Print a new line
    24 000021AB B902000000          <1>     mov ecx, 2  ;Two chars to write
    25 000021B0 CD41                <1>     int 41h
    26                              <1>     return
    19                              <2> %%_ret:
    20 000021B2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    27                              <1> printDate:
    28                              <1> ;Input: eax = Packed Date
    29                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
    30                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
    31                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
    32                              <1> ;       ebx = 0 => Print two digit year
    33                              <1> ;       ebx = 1 => Print four digit year
    34 000021B3 53                  <1>     push rbx
    35 000021B4 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    36 000021B6 803D71DEFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    37 000021BD 7240                <1>     jb .usDate
    38 000021BF 777C                <1>     ja .jpnDate
    39                              <1> ;European: DD/MM/YY
    40 000021C1 251F000000          <1>     and eax, 1Fh    ;Save day bits
    41 000021C6 E8B0000000          <1>     call .printFirst
    42 000021CB 8A1568DEFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    43 000021D1 B402                <1>     mov ah, 02h
    44 000021D3 CD41                <1>     int 41h
    45                              <1> 
    46 000021D5 89C8                <1>     mov eax, ecx
    47 000021D7 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    48 000021DC C1E805              <1>     shr eax, 5
    49 000021DF E8B3000000          <1>     call .printSecond
    50                              <1> 
    51 000021E4 8A154FDEFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    52 000021EA B402                <1>     mov ah, 02h
    53 000021EC CD41                <1>     int 41h
    54                              <1> 
    55 000021EE 89C8                <1>     mov eax, ecx
    56 000021F0 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    57 000021F5 C1E809              <1>     shr eax, 9
    58 000021F8 5B                  <1>     pop rbx ;Get the year signature back
    59 000021F9 E8A9000000          <1>     call .printYear
    60                              <1>     return
    19                              <2> %%_ret:
    20 000021FE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    61                              <1> .usDate:
    62                              <1> ;US: MM/DD/YY
    63 000021FF 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    64 00002204 C1E805              <1>     shr eax, 5
    65 00002207 E86F000000          <1>     call .printFirst
    66                              <1> 
    67 0000220C 8A1527DEFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    68 00002212 B402                <1>     mov ah, 02h
    69 00002214 CD41                <1>     int 41h
    70                              <1> 
    71 00002216 89C8                <1>     mov eax, ecx
    72 00002218 251F000000          <1>     and eax, 1Fh    ;Save day bits
    73 0000221D E875000000          <1>     call .printSecond
    74                              <1> 
    75 00002222 8A1511DEFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    76 00002228 B402                <1>     mov ah, 02h
    77 0000222A CD41                <1>     int 41h
    78                              <1> 
    79 0000222C 89C8                <1>     mov eax, ecx
    80 0000222E 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    81 00002233 C1E809              <1>     shr eax, 9
    82 00002236 5B                  <1>     pop rbx ;Get the year signature back
    83 00002237 E86B000000          <1>     call .printYear
    84                              <1>     return
    19                              <2> %%_ret:
    20 0000223C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    85                              <1> .jpnDate:
    86                              <1> ;Japan: YY/MM/DD
    87 0000223D 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    88 00002242 C1E809              <1>     shr eax, 9
    89 00002245 5B                  <1>     pop rbx ;Get the year signature back
    90 00002246 E85C000000          <1>     call .printYear
    91                              <1> 
    92 0000224B 8A15E8DDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    93 00002251 B402                <1>     mov ah, 02h
    94 00002253 CD41                <1>     int 41h
    95                              <1> 
    96 00002255 89C8                <1>     mov eax, ecx
    97 00002257 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    98 0000225C C1E805              <1>     shr eax, 5
    99 0000225F E833000000          <1>     call .printSecond
   100                              <1> 
   101 00002264 8A15CFDDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
   102 0000226A B402                <1>     mov ah, 02h
   103 0000226C CD41                <1>     int 41h
   104                              <1> 
   105 0000226E 89C8                <1>     mov eax, ecx
   106 00002270 251F000000          <1>     and eax, 1Fh    ;Save day bits
   107 00002275 E81D000000          <1>     call .printSecond
   108                              <1>     return
    19                              <2> %%_ret:
    20 0000227A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   109                              <1> 
   110                              <1> ;Each of these require eax setup correctly
   111                              <1> .printFirst:
   112 0000227B 51                  <1>     push rcx
   113 0000227C E84B040000          <1>     call getDecimalWord
   114 00002281 84ED                <1>     test ch, ch ;Do we have an upper digit?
   115 00002283 7504                <1>     jnz .skipSpace
   116 00002285 88CD                <1>     mov ch, cl
   117 00002287 B120                <1>     mov cl, " "
   118                              <1> .skipSpace:
   119 00002289 88CA                <1>     mov dl, cl
   120 0000228B B402                <1>     mov ah, 02h
   121 0000228D CD41                <1>     int 41h
   122 0000228F 88EA                <1>     mov dl, ch
   123 00002291 B402                <1>     mov ah, 02h
   124 00002293 CD41                <1>     int 41h
   125 00002295 59                  <1>     pop rcx
   126                              <1>     return
    19                              <2> %%_ret:
    20 00002296 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   127                              <1> .printSecond:
   128 00002297 51                  <1>     push rcx
   129 00002298 E82F040000          <1>     call getDecimalWord
   130 0000229D 84ED                <1>     test ch, ch ;Do we have an upper digit?
   131 0000229F 75E8                <1>     jnz .skipSpace
   132 000022A1 88CD                <1>     mov ch, cl
   133 000022A3 B130                <1>     mov cl, "0"
   134 000022A5 EBE2                <1>     jmp short .skipSpace
   135                              <1> .printYear:
   136 000022A7 05BC070000          <1>     add eax, 1980
   137 000022AC 51                  <1>     push rcx
   138 000022AD 53                  <1>     push rbx
   139 000022AE E819040000          <1>     call getDecimalWord ;Get unpacked in rcx
   140 000022B3 5B                  <1>     pop rbx
   141 000022B4 84DB                <1>     test bl, bl
   142 000022B6 740C                <1>     jz .twoDigitYear
   143 000022B8 88CA                <1>     mov dl, cl  ;Print the first digit
   144 000022BA B402                <1>     mov ah, 02h
   145 000022BC CD41                <1>     int 41h
   146 000022BE 88EA                <1>     mov dl, ch  ;Print the second digit
   147 000022C0 B402                <1>     mov ah, 02h
   148 000022C2 CD41                <1>     int 41h
   149                              <1> .twoDigitYear:
   150 000022C4 C1E910              <1>     shr ecx, 10h    ;Get high word low
   151 000022C7 88CA                <1>     mov dl, cl  ;Print the upper digit
   152 000022C9 B402                <1>     mov ah, 02h
   153 000022CB CD41                <1>     int 41h
   154 000022CD 88EA                <1>     mov dl, ch  ;Print the lower digit
   155 000022CF B402                <1>     mov ah, 02h
   156 000022D1 CD41                <1>     int 41h
   157 000022D3 59                  <1>     pop rcx
   158                              <1>     return
    19                              <2> %%_ret:
    20 000022D4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   159                              <1> 
   160                              <1> 
   161                              <1> printTime:
   162                              <1> ;Input: eax = Packed Time
   163                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   164                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   165 000022D5 89C1                <1>     mov ecx, eax
   166 000022D7 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   167 000022DC C1E80B              <1>     shr eax, 11
   168 000022DF 803D59DDFFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   169 000022E6 750B                <1>     jne .ampm
   170 000022E8 E85A000000          <1>     call .printHours
   171 000022ED E831000000          <1>     call .printMinutes
   172                              <1>     return
    19                              <2> %%_ret:
    20 000022F2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   173                              <1> .ampm:
   174 000022F3 3D0C000000          <1>     cmp eax, 12
   175 000022F8 7713                <1>     ja .pm
   176 000022FA 7416                <1>     je .pm2
   177 000022FC E846000000          <1>     call .printHours
   178 00002301 E81D000000          <1>     call .printMinutes
   179 00002306 B261                <1>     mov dl, "a"
   180 00002308 B402                <1>     mov ah, 02h
   181 0000230A CD41                <1>     int 41h
   182                              <1>     return
    19                              <2> %%_ret:
    20 0000230C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   183                              <1> .pm:
   184 0000230D 2D0C000000          <1>     sub eax, 12
   185                              <1> .pm2:
   186 00002312 E830000000          <1>     call .printHours
   187 00002317 E807000000          <1>     call .printMinutes
   188 0000231C B270                <1>     mov dl, "p"
   189 0000231E B402                <1>     mov ah, 02h
   190 00002320 CD41                <1>     int 41h
   191                              <1>     return
    19                              <2> %%_ret:
    20 00002322 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   192                              <1> .printMinutes:
   193 00002323 8A1512DDFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   194 00002329 B402                <1>     mov ah, 02h
   195 0000232B CD41                <1>     int 41h
   196                              <1> 
   197 0000232D 89C8                <1>     mov eax, ecx
   198 0000232F 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   199 00002334 C1E805              <1>     shr eax, 5
   200                              <1> .printMinutesAlt:
   201 00002337 51                  <1>     push rcx
   202 00002338 E88F030000          <1>     call getDecimalWord
   203 0000233D 84ED                <1>     test ch, ch ;Do we have an upper digit?
   204 0000233F 7514                <1>     jnz .skipSpace
   205 00002341 88CD                <1>     mov ch, cl
   206 00002343 B130                <1>     mov cl, "0"
   207 00002345 EB0E                <1>     jmp short .skipSpace
   208                              <1> .printHours:
   209 00002347 51                  <1>     push rcx
   210 00002348 E87F030000          <1>     call getDecimalWord
   211 0000234D 84ED                <1>     test ch, ch ;Do we have an upper digit?
   212 0000234F 7504                <1>     jnz .skipSpace
   213 00002351 88CD                <1>     mov ch, cl
   214 00002353 B120                <1>     mov cl, " "
   215                              <1> .skipSpace:
   216 00002355 88CA                <1>     mov dl, cl
   217 00002357 B402                <1>     mov ah, 02h
   218 00002359 CD41                <1>     int 41h
   219 0000235B 88EA                <1>     mov dl, ch
   220 0000235D B402                <1>     mov ah, 02h
   221 0000235F CD41                <1>     int 41h
   222 00002361 59                  <1>     pop rcx
   223                              <1>     return
    19                              <2> %%_ret:
    20 00002362 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   224                              <1> 
   225                              <1> 
   226                              <1> putVersionInPrompt:
   227 00002363 488D1581E5FFFF      <1>     lea rdx, dosVer
   228 0000236A B409                <1>     mov ah, 09h ;Print String
   229 0000236C CD41                <1>     int 41h
   230 0000236E B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   231 00002370 CD41                <1>     int 41h
   232 00002372 50                  <1>     push rax    ;Save minor version
   233 00002373 E89C000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   234 00002378 E8B4000000          <1>     call printPackedBCD ;Print al
   235 0000237D B22E                <1>     mov dl, "."
   236 0000237F B402                <1>     mov ah, 02h
   237 00002381 CD41                <1>     int 41h
   238 00002383 58                  <1>     pop rax
   239 00002384 88E0                <1>     mov al, ah  ;Get the minor version low
   240 00002386 E889000000          <1>     call hexToBCD
   241 0000238B E8A1000000          <1>     call printPackedBCD
   242                              <1>     return
    19                              <2> %%_ret:
    20 00002390 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   243                              <1> putEscInPrompt:
   244 00002391 B21B                <1>     mov dl, ESC
   245 00002393 EB1C                <1>     jmp short outChar
   246                              <1> 
   247                              <1> putMoneyInPrompt:
   248 00002395 B224                <1>     mov dl, "$"
   249 00002397 EB18                <1>     jmp short outChar
   250                              <1> 
   251                              <1> putEquInPrompt:
   252 00002399 B23D                <1>     mov dl, "="
   253 0000239B EB14                <1>     jmp short outChar
   254                              <1> 
   255                              <1> putPipeInPrompt:
   256 0000239D B27C                <1>     mov dl, "|"
   257 0000239F EB10                <1>     jmp short outChar
   258                              <1> 
   259                              <1> putGTinPrompt:
   260 000023A1 B23E                <1>     mov dl, ">"
   261 000023A3 EB0C                <1>     jmp short outChar
   262                              <1> 
   263                              <1> putLTinPrompt:
   264 000023A5 B23C                <1>     mov dl, "<"
   265 000023A7 EB08                <1>     jmp short outChar
   266                              <1> 
   267                              <1> putDriveInPrompt:
   268 000023A9 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   269 000023AB CD41                <1>     int 41h
   270 000023AD 0441                <1>     add al, "A" ;Convert to letter
   271 000023AF 88C2                <1>     mov dl, al
   272                              <1> outChar:
   273 000023B1 B402                <1>     mov ah, 02h ;Echo to STDOUT
   274 000023B3 CD41                <1>     int 41h
   275                              <1>     return
    19                              <2> %%_ret:
    20 000023B5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   276                              <1> putCWDInPrompt:
   277 000023B6 488D3D97DCFFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   278 000023BD B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   279 000023BF CD41                <1>     int 41h
   280 000023C1 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   281 000023C3 FEC2                <1>     inc dl
   282 000023C5 0441                <1>     add al, "A" ;Convert to letter
   283 000023C7 B43A                <1>     mov ah, ":"
   284 000023C9 66AB                <1>     stosw   ;Store X:, rdi+=2
   285 000023CB 8A0552DCFFFF        <1>     mov al, byte [pathSep]
   286 000023D1 AA                  <1>     stosb   ;Store pathSep, inc rdi
   287 000023D2 B447                <1>     mov ah, 47h ;Get Current Working Directory
   288 000023D4 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   289 000023D7 CD41                <1>     int 41h
   290 000023D9 E884000000          <1>     call strlen
   291 000023DE 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   292                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   293 000023E4 B440                <1>     mov ah, 40h ;Write to handle
   294 000023E6 BB01000000          <1>     mov ebx, 1  ;STDOUT
   295 000023EB 488D1562DCFFFF      <1>     lea rdx, currDirStr
   296 000023F2 CD41                <1>     int 41h
   297                              <1>     return
    19                              <2> %%_ret:
    20 000023F4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   298                              <1> 
   299                              <1> BCDtoHex:
   300                              <1> ;Converts a BCD value to a Hex byte
   301                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   302 000023F5 51                  <1>     push rcx
   303 000023F6 0FB6C0              <1>     movzx eax, al   ;Zero extend
   304 000023F9 89C1                <1>     mov ecx, eax    ;Save al in ecx
   305 000023FB 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   306 00002400 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   307 00002406 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   308                              <1> .bth:
   309 00002409 050A000000          <1>     add eax, 10
   310 0000240E FFC9                <1>     dec ecx
   311 00002410 75F7                <1>     jnz .bth
   312 00002412 59                  <1>     pop rcx
   313 00002413 C3                  <1>     ret
   314                              <1> 
   315                              <1> hexToBCD:
   316                              <1> ;Converts a Hex byte into two BCD digits
   317                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   318 00002414 51                  <1>     push rcx
   319 00002415 0FB6C0              <1>     movzx eax, al   ;Zero extend
   320 00002418 31C9                <1>     xor ecx, ecx
   321                              <1> .htb0:
   322 0000241A 3D0A000000          <1>     cmp eax, 10
   323 0000241F 7209                <1>     jb .htb1
   324 00002421 2D0A000000          <1>     sub eax, 10
   325 00002426 FFC1                <1>     inc ecx
   326 00002428 EBF0                <1>     jmp short .htb0
   327                              <1> .htb1:
   328 0000242A C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   329 0000242D 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   330 0000242F 59                  <1>     pop rcx
   331 00002430 C3                  <1>     ret
   332                              <1> 
   333                              <1> printPackedBCD:
   334                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   335                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   336                              <1> ;Preserves all registers
   337 00002431 50                  <1>     push rax
   338 00002432 52                  <1>     push rdx
   339 00002433 88C4                <1>     mov ah, al
   340 00002435 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   341 00002437 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   342 0000243A 7508                <1>     jnz .upperNybble
   343 0000243C B220                <1>     mov dl, " "
   344 0000243E B402                <1>     mov ah, 02h
   345 00002440 CD41                <1>     int 41h
   346 00002442 EB0E                <1>     jmp short .lowerNybble
   347                              <1> .upperNybble:
   348 00002444 50                  <1>     push rax
   349 00002445 C0EC04              <1>     shr ah, 4
   350 00002448 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   351 0000244B 88E2                <1>     mov dl, ah
   352 0000244D B402                <1>     mov ah, 02h ;Print DL
   353 0000244F CD41                <1>     int 41h
   354 00002451 58                  <1>     pop rax
   355                              <1> .lowerNybble:
   356 00002452 0430                <1>     add al, "0"
   357 00002454 88C2                <1>     mov dl, al
   358 00002456 B402                <1>     mov ah, 02h ;Print DL
   359 00002458 CD41                <1>     int 41h
   360 0000245A 5A                  <1>     pop rdx
   361 0000245B 58                  <1>     pop rax
   362                              <1>     return
    19                              <2> %%_ret:
    20 0000245C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   363                              <1> 
   364                              <1> getCurrentDrive:
   365                              <1> ;Returns the 0 based current drive in al
   366 0000245D B419                <1>     mov ah, 19h
   367 0000245F CD41                <1>     int 41h
   368                              <1>     return
    19                              <2> %%_ret:
    20 00002461 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   369                              <1> 
   370                              <1> strlen:
   371                              <1> ;Gets the length of a ASCIIZ string
   372                              <1> ;Input: rdi = Source buffer
   373                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   374 00002462 50                  <1>     push rax
   375 00002463 57                  <1>     push rdi
   376 00002464 30C0                <1>     xor al, al
   377 00002466 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   378 00002468 FFC9                <1>     dec ecx ;rcx = -1
   379 0000246A F2AE                <1>     repne scasb
   380 0000246C F7D1                <1>     not ecx
   381 0000246E 5F                  <1>     pop rdi
   382 0000246F 58                  <1>     pop rax
   383                              <1>     return
    19                              <2> %%_ret:
    20 00002470 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   384                              <1> 
   385                              <1> findTerminatorOrEOC:
   386                              <1> ;Advances rsi to the next string terminator char or the next End of command
   387                              <1> ; char
   388                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   389                              <1> ;If a end of command char found, also sets CF
   390 00002471 AC                  <1>     lodsb
   391 00002472 3C0D                <1>     cmp al, CR
   392 00002474 7419                <1>     je .endOfInput
   393 00002476 E82B000000          <1>     call isALterminator
   394 0000247B 7419                <1>     jz .exit
   395 0000247D 3A05A0DBFFFF        <1>     cmp al, byte [pathSep]
   396 00002483 7411                <1>     je .exit
   397 00002485 3A0599DBFFFF        <1>     cmp al, byte [switchChar]
   398 0000248B 7409                <1>     je .exit
   399 0000248D EBE2                <1>     jmp short findTerminatorOrEOC
   400                              <1> .endOfInput:
   401 0000248F E802000000          <1>     call .exit
   402 00002494 F9                  <1>     stc 
   403                              <1>     return
    19                              <2> %%_ret:
    20 00002495 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   404                              <1> .exit:
   405 00002496 48FFCE              <1>     dec rsi ;Point to the terminating char
   406                              <1>     return
    19                              <2> %%_ret:
    20 00002499 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   407                              <1> 
   408                              <1> findTerminator:
   409                              <1> ;Advances rsi to the next string terminator char
   410                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   411 0000249A AC                  <1>     lodsb
   412 0000249B E806000000          <1>     call isALterminator
   413 000024A0 75F8                <1>     jnz findTerminator
   414 000024A2 48FFCE              <1>     dec rsi
   415                              <1>     return
    19                              <2> %%_ret:
    20 000024A5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   416                              <1> isALterminator:
   417                              <1> ;Returns: ZF=NZ if al is not a terminator (Not including CR)
   418                              <1> ;         ZF=ZY if al is a terminator
   419 000024A6 3C20                <1>     cmp al, " "
   420                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000024A8 74(A5)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   421 000024AA 3C3B                <1>     cmp al, ";"
   422                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000024AC 74(A5)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   423 000024AE 3C3D                <1>     cmp al, "="
   424                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000024B0 74(A5)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   425 000024B2 3C2C                <1>     cmp al, ","
   426                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000024B4 74(A5)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   427 000024B6 3C09                <1>     cmp al, TAB
   428                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000024B8 74(A5)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   429 000024BA 3C0A                <1>     cmp al, LF
   430                              <1>     return
    19                              <2> %%_ret:
    20 000024BC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   431                              <1> 
   432                              <1> findEndOfCommand:
   433                              <1> ;Moves rsi to the | or CR that terminates this command
   434 000024BD AC                  <1>     lodsb
   435 000024BE E806000000          <1>     call isALEndOfCommand
   436 000024C3 75F8                <1>     jnz findEndOfCommand
   437 000024C5 48FFCE              <1>     dec rsi
   438                              <1>     return
    19                              <2> %%_ret:
    20 000024C8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   439                              <1> isALEndOfCommand:
   440 000024C9 3C7C                <1>     cmp al, "|"
   441                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000024CB 74(C8)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   442 000024CD 3C0D                <1>     cmp al, CR
   443                              <1>     return
    19                              <2> %%_ret:
    20 000024CF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   444                              <1> 
   445                              <1> scanForRedir:
   446                              <1> ;Returns: AL = 0 => No redirection, terminate with CR
   447                              <1> ;         AL = 1 => Redirection, type <
   448                              <1> ;         AL = 10 => Redir, type >
   449                              <1> ;         AL = 20 => Redir, type >>
   450                              <1> ;If multiple redirs found, the last one of that type counts.
   451 000024D0 56                  <1>     push rsi
   452 000024D1 55                  <1>     push rbp
   453 000024D2 30E4                <1>     xor ah, ah
   454                              <1> .lp:
   455 000024D4 AC                  <1>     lodsb
   456 000024D5 3C3E                <1>     cmp al, ">"
   457                              <1> .exit:
   458 000024D7 5D                  <1>     pop rbp
   459 000024D8 5E                  <1>     pop rsi
   460                              <1>     return
    19                              <2> %%_ret:
    20 000024D9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   461                              <1> 
   462                              <1> 
   463                              <1> skipSpaces:
   464                              <1> ;Also skips tabs
   465                              <1> ;Input: rsi must point to the start of the data string
   466                              <1> ;Output: rsi points to the first non-space char
   467 000024DA 803E20              <1>     cmp byte [rsi], " "
   468 000024DD 7405                <1>     je .skip    ;If equal to a space, skip it
   469 000024DF 803E09              <1>     cmp byte [rsi], TAB
   470                              <1>     retne   ;If not equal to a tab or space, return
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000024E2 75(D9)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   471                              <1> .skip:
   472 000024E4 48FFC6              <1>     inc rsi
   473 000024E7 EBF1                <1>     jmp short skipSpaces
   474                              <1> 
   475                              <1> printPrompt:
   476 000024E9 66813D2FDBFFFFFFFF  <1>     cmp word [promptPtr], -1
   477 000024F2 750B                <1>     jne .validPrompt
   478                              <1>     ;Here we print the default prompt
   479 000024F4 E8BDFEFFFF          <1>     call putCWDInPrompt
   480 000024F9 E8A3FEFFFF          <1>     call putGTinPrompt
   481                              <1>     return
    19                              <2> %%_ret:
    20 000024FE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   482                              <1> .validPrompt:
   483                              <1>     return
    19                              <2> %%_ret:
    20 000024FF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   484                              <1> 
   485                              <1> clearCommandState:
   486                              <1> ;Clears the command state
   487 00002500 488D3DA2DBFFFF      <1>     lea rdi, cmdStatePtr
   488 00002507 B90A000000          <1>     mov ecx, cmdStateL
   489 0000250C 31C0                <1>     xor eax, eax
   490 0000250E F3AA                <1>     rep stosb
   491                              <1>     return
    19                              <2> %%_ret:
    20 00002510 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   492                              <1> 
   493                              <1> clearCommandLineState:
   494                              <1> ;Clears the command line state after a 0Dh encountered
   495 00002511 488D3D7FDBFFFF      <1>     lea rdi, cmdLineStatePtr
   496 00002518 B91C000000          <1>     mov ecx, cmdLineStateL
   497 0000251D 31C0                <1>     xor eax, eax
   498 0000251F F3AA                <1>     rep stosb
   499                              <1>     return
    19                              <2> %%_ret:
    20 00002521 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   500                              <1> 
   501                              <1> asciiToFCB:
   502                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   503                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   504                              <1> ;Also doesn't check if chars are valid
   505                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   506                              <1> ;Name is space padded.
   507                              <1> ;Input: rsi = ASCII string buffer
   508                              <1> ;       rdi = FCB name buffer
   509                              <1> ;Output: al = Char that terminated the source string 
   510 00002522 53                  <1>     push rbx    
   511 00002523 57                  <1>     push rdi
   512 00002524 B90B000000          <1>     mov ecx, 11
   513 00002529 B020                <1>     mov al, " "
   514 0000252B F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   515 0000252D 5F                  <1>     pop rdi
   516 0000252E 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   517 00002531 EB1D                <1>     jmp short asciiFilenameToFCB.processName
   518                              <1> asciiFilenameToFCB:
   519                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   520                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   521                              <1> ;Also doesn't check if chars are valid
   522                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   523                              <1> ;Name is space padded.
   524                              <1> ;Input: rsi = ASCII string buffer
   525                              <1> ;       rdi = FCB name buffer
   526                              <1> ;Output: al = Char that terminated the source string 
   527 00002533 53                  <1>     push rbx    
   528 00002534 57                  <1>     push rdi
   529 00002535 B90B000000          <1>     mov ecx, 11
   530 0000253A B020                <1>     mov al, " "
   531 0000253C F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   532 0000253E 5F                  <1>     pop rdi
   533 0000253F 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   534                              <1>     ;Preprocess for Dir Searches
   535 00002542 803E2E              <1>     cmp byte [rsi], "."
   536 00002545 7509                <1>     jne .processName
   537 00002547 A4                  <1>     movsb   ;Store the first dot
   538 00002548 803E2E              <1>     cmp byte [rsi], "."
   539 0000254B 752C                <1>     jne .exitBadChar
   540 0000254D A4                  <1>     movsb
   541 0000254E EB29                <1>     jmp short .exitBadChar
   542                              <1> .processName:
   543 00002550 AC                  <1>     lodsb   ;Get the char in al
   544 00002551 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   545 00002553 7426                <1>     jz .exit
   546 00002555 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   547 00002557 7407                <1>     je .extSpace
   548 00002559 3C2E                <1>     cmp al, "."
   549 0000255B 740C                <1>     je .ext
   550 0000255D AA                  <1>     stosb   ;Store the char
   551 0000255E EBF0                <1>     jmp short .processName
   552                              <1> .extSpace:
   553                              <1> ;Now we scan for a period in the name
   554 00002560 AC                  <1>     lodsb   ;Get a char and increase rsi
   555 00002561 84C0                <1>     test al, al
   556 00002563 7416                <1>     jz .exit
   557 00002565 3C2E                <1>     cmp al, "."     ;If al is not a period...
   558 00002567 75F7                <1>     jne .extSpace   ; keep searching
   559                              <1> .ext:
   560 00002569 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   561                              <1> .processExt:
   562 0000256D AC                  <1>     lodsb
   563 0000256E 84C0                <1>     test al, al
   564 00002570 7409                <1>     jz .exit
   565 00002572 3C20                <1>     cmp al, " "
   566 00002574 7405                <1>     je .exit
   567 00002576 AA                  <1>     stosb
   568 00002577 EBF4                <1>     jmp short .processExt
   569                              <1> .exitBadChar:
   570 00002579 30C0                <1>     xor al, al  ;Return a null terminator
   571                              <1> .exit:
   572 0000257B 5B                  <1>     pop rbx
   573                              <1>     return
    19                              <2> %%_ret:
    20 0000257C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   574                              <1> 
   575                              <1> FCBToAsciiz:
   576                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   577                              <1> ;Name is space padded too
   578                              <1> ;Input: rsi = FCB name buffer
   579                              <1> ;       rdi = ASCIIZ string buffer
   580 0000257D B908000000          <1>     mov ecx, 8
   581 00002582 F3A4                <1>     rep movsb   ;Move the name over
   582                              <1> .scanNameSpace:
   583 00002584 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   584 00002588 750D                <1>     jne .ext
   585 0000258A 48FFCF              <1>     dec rdi
   586 0000258D FFC1                <1>     inc ecx
   587 0000258F 81F908000000        <1>     cmp ecx, 8
   588 00002595 72ED                <1>     jb .scanNameSpace
   589                              <1> .ext:
   590 00002597 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   591 0000259C 7506                <1>     jne .validExt
   592 0000259E 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   593 000025A2 7415                <1>     je .exit
   594                              <1> .validExt:
   595 000025A4 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   596 000025A6 AA                  <1>     stosb
   597 000025A7 B903000000          <1>     mov ecx, 3
   598 000025AC F3A4                <1>     rep movsb   ;Move the three extension chars over
   599                              <1> .scanExtSpace:
   600 000025AE 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   601 000025B2 7505                <1>     jne .exit
   602 000025B4 48FFCF              <1>     dec rdi
   603 000025B7 EBF5                <1>     jmp short .scanExtSpace
   604                              <1> .exit:
   605 000025B9 31C0                <1>     xor eax, eax
   606 000025BB AA                  <1>     stosb   ;Store a null at the end
   607                              <1>     return
    19                              <2> %%_ret:
    20 000025BC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   608                              <1> 
   609                              <1> buildCommandPath:
   610                              <1> ;Based on the first argument on the command line
   611                              <1> ; will build a full ASCIIZ path in searchSpec to the file/dir specified
   612                              <1>     ;If this is a relative path, will handle correctly (tho unnecessary)
   613 000025BD 0FB605EADAFFFF      <1>     movzx eax, byte [arg1Off]
   614 000025C4 488D35C3DBFFFF      <1>     lea rsi, cmdBuffer
   615 000025CB 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   616 000025CE 8A3D4FDAFFFF        <1>     mov bh, byte [pathSep]
   617 000025D4 B33A                <1>     mov bl, ":"
   618 000025D6 383E                <1>     cmp byte [rsi], bh  ;Is the first char relative to root?
   619 000025D8 7458                <1>     je .absoluteCurrent
   620 000025DA 66395E01            <1>     cmp word [rsi + 1], bx    ;This checks if absolute or relative
   621 000025DE 746D                <1>     je .absolutePath
   622 000025E0 385E01              <1>     cmp byte [rsi + 1], bl  ;Check if a drive separator
   623 000025E3 7409                <1>     je .relativeGiven
   624                              <1> ;No drive letter given, must get Current Drive
   625 000025E5 E873FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   626 000025EA 0441                <1>     add al, "A"
   627 000025EC EB0B                <1>     jmp short .relativeCommon
   628                              <1> .relativeGiven:
   629                              <1> ;Drive letter pointed to by AL
   630 000025EE 8A06                <1>     mov al, byte [rsi]  ;Get drive letter in al
   631 000025F0 24DF                <1>     and al, 0DFh    ;Convert to UC
   632 000025F2 4881C602000000      <1>     add rsi, 2  ;Skip the given drive letter and the colon
   633                              <1> .relativeCommon:
   634                              <1>     ;al has drive letter
   635 000025F9 88C2                <1>     mov dl, al  ;Save drive letter in dl
   636 000025FB 80EA40              <1>     sub dl, "@" ;Get 1 based drive number in dl
   637 000025FE B43A                <1>     mov ah, ":" ;Get the colon in too
   638 00002600 488D3D1ADDFFFF      <1>     lea rdi, searchSpec ;Start building our search path here
   639 00002607 66AB                <1>     stosw   ;Store X:
   640 00002609 8A0514DAFFFF        <1>     mov al, byte [pathSep]
   641 0000260F AA                  <1>     stosb   ;Store pathSep
   642 00002610 56                  <1>     push rsi    ;Save user input string
   643 00002611 4889FE              <1>     mov rsi, rdi    ;Put the current directory here for this drive
   644 00002614 B447                <1>     mov ah, 47h ;Get Current Working Directory, dl has drive number
   645 00002616 CD41                <1>     int 41h ;Won't fail as drive letter in dl confirmed ok
   646 00002618 5E                  <1>     pop rsi
   647                              <1>     ;Now want to find terminating null
   648 00002619 30C0                <1>     xor al, al
   649 0000261B 31C9                <1>     xor ecx, ecx
   650 0000261D FFC9                <1>     dec ecx
   651 0000261F F2AE                <1>     repne scasb ;Search for the terminating null
   652 00002621 48FFCF              <1>     dec rdi ;Go back one once found
   653 00002624 8A05F9D9FFFF        <1>     mov al, byte [pathSep]
   654 0000262A 3847FF              <1>     cmp byte [rdi - 1], al
   655 0000262D 7425                <1>     je .buildPath ;If the previous char is a pathsep, skip storing another
   656 0000262F AA                  <1>     stosb   ;Store the pathsep
   657 00002630 EB22                <1>     jmp short .buildPath  ;Now we copy the user string over and good to go
   658                              <1> .absoluteCurrent:
   659 00002632 E826FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   660 00002637 0441                <1>     add al, "A"
   661 00002639 B43A                <1>     mov ah, ":" ;ax has X: now to store 
   662 0000263B 488D3DDFDCFFFF      <1>     lea rdi, searchSpec
   663 00002642 66AB                <1>     stosw
   664 00002644 8A05D9D9FFFF        <1>     mov al, byte [pathSep]
   665 0000264A AA                  <1>     stosb
   666 0000264B EB07                <1>     jmp short .buildPath
   667                              <1> .absolutePath:
   668 0000264D 488D3DCDDCFFFF      <1>     lea rdi, searchSpec
   669                              <1> .buildPath:
   670 00002654 E87EEAFFFF          <1>     call copyCommandTailItem    ;Terminates with a 0 for free
   671 00002659 F8                  <1>     clc ;I dont care if i encounter an embedded CR rn
   672                              <1>     return
    19                              <2> %%_ret:
    20 0000265A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   673                              <1>     
   674                              <1> printDecimalWord:
   675                              <1> ;Takes qword in rax and print it's decimal representation
   676                              <1> ;Takes the qword in eax and prints its decimal representation
   677 0000265B 31C9                <1>     xor ecx, ecx
   678 0000265D 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   679 0000265F 85C0                <1>     test eax, eax
   680 00002661 750C                <1>     jnz .notZero
   681 00002663 B930000000          <1>     mov ecx, "0"
   682 00002668 BD01000000          <1>     mov ebp, 1  ;Print one digit
   683 0000266D EB3E                <1>     jmp short .dpfb2
   684                              <1> .notZero:
   685 0000266F 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   686 00002671 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   687                              <1> .dpfb0:
   688 00002676 FFC5                <1>     inc ebp
   689 00002678 81FD08000000        <1>     cmp ebp, 8
   690 0000267E 7206                <1>     jb .dpfb00
   691 00002680 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   692 00002684 EB04                <1>     jmp short .dpfb01
   693                              <1> .dpfb00:
   694 00002686 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   695                              <1> .dpfb01:
   696 0000268A 31D2                <1>     xor edx, edx
   697 0000268C 48F7F6              <1>     div rsi
   698 0000268F 80C230              <1>     add dl, '0'
   699 00002692 80FA39              <1>     cmp dl, '9'
   700 00002695 7603                <1>     jbe .dpfb1
   701 00002697 80C207              <1>     add dl, 'A'-'0'-10
   702                              <1> .dpfb1:
   703 0000269A 81FD08000000        <1>     cmp ebp, 8
   704 000026A0 7204                <1>     jb .dpfb10
   705 000026A2 88D3                <1>     mov bl, dl ;Add the bottom bits
   706 000026A4 EB02                <1>     jmp short .dpfb11
   707                              <1> .dpfb10:
   708 000026A6 88D1                <1>     mov cl, dl    ;Save remainder byte
   709                              <1> .dpfb11:
   710 000026A8 4885C0              <1>     test rax, rax
   711 000026AB 75C9                <1>     jnz .dpfb0
   712                              <1> .dpfb2:
   713 000026AD 81FD08000000        <1>     cmp ebp, 8
   714 000026B3 7208                <1>     jb .dpfb20
   715 000026B5 88DA                <1>     mov dl, bl
   716 000026B7 48C1EB08            <1>     shr rbx, 8
   717 000026BB EB06                <1>     jmp short .dpfb21
   718                              <1> .dpfb20:
   719 000026BD 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   720 000026BF 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   721                              <1> .dpfb21:
   722 000026C3 B402                <1>     mov ah, 02h
   723 000026C5 CD41                <1>     int 41h
   724 000026C7 FFCD                <1>     dec ebp
   725 000026C9 75E2                <1>     jnz .dpfb2
   726                              <1>     return
    19                              <2> %%_ret:
    20 000026CB C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   727                              <1> 
   728                              <1> getDecimalWord:
   729                              <1> ;Works on MAX A dword in eax
   730                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   731 000026CC 31C9                <1>     xor ecx, ecx
   732 000026CE 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   733 000026D0 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   734                              <1> .dpfb0:
   735 000026D5 FFC5                <1>     inc ebp
   736 000026D7 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   737 000026DB 31D2                <1>     xor edx, edx
   738 000026DD 48F7F3              <1>     div rbx
   739 000026E0 80C230              <1>     add dl, '0'
   740 000026E3 80FA39              <1>     cmp dl, '9'
   741 000026E6 7603                <1>     jbe .dpfb1
   742 000026E8 80C207              <1>     add dl, 'A'-'0'-10
   743                              <1> .dpfb1:
   744 000026EB 88D1                <1>     mov cl, dl    ;Save remainder byte
   745 000026ED 4885C0              <1>     test rax, rax
   746 000026F0 75E3                <1>     jnz .dpfb0
   747                              <1>     return
    19                              <2> %%_ret:
    20 000026F2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   748                              <1> 
   749                              <1> freezePC:
   750 000026F3 488D15C9E4FFFF      <1>     lea rdx, memBad1
   751 000026FA B409                <1>     mov ah, 09h
   752 000026FC CD41                <1>     int 41h
   753                              <1> .altEP:
   754 000026FE 488D15E7E4FFFF      <1>     lea rdx, memBad3
   755 00002705 B409                <1>     mov ah, 09h
   756 00002707 CD41                <1>     int 41h
   757                              <1> .lp:
   758 00002709 F390                <1>     pause
   759 0000270B F4                  <1>     hlt
   760 0000270C EBFB                <1>     jmp short .lp
   761                              <1> 
   762                              <1> getFilenamePtrFromFilespec:
   763                              <1> ;Gets a pointer to the first char of a filename from a asciiz pathspec
   764                              <1> ;Input: rsi = Pathspec to search
   765                              <1> ;Output: rsi = Points to the first char of the filename
   766 0000270E 4889F3              <1>     mov rbx, rsi
   767 00002711 31C0                <1>     xor eax, eax
   768 00002713 4889F7              <1>     mov rdi, rsi    ;Go to the source string 
   769 00002716 E847FDFFFF          <1>     call strlen     ;Get it's length
   770 0000271B FFC9                <1>     dec ecx ;Dont include terminating null
   771 0000271D 741F                <1>     jz .exitBad ;Was the string of length zero? Exit bad if so
   772 0000271F 4801CE              <1>     add rsi, rcx    ;Goto last char in path (not null)
   773                              <1> .lp:
   774 00002722 4839F3              <1>     cmp rbx, rsi    ;Is rdi pointing to the start of the string?
   775                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002725 74(F2)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   776 00002727 8A06                <1>     mov al, byte [rsi]  ;Get the char we currently are at
   777 00002729 3C3A                <1>     cmp al, ":" ;X: ?
   778 0000272B 740D                <1>     je .pointFilename
   779 0000272D 3A05F0D8FFFF        <1>     cmp al, byte [pathSep]  ;Is al pathSep?
   780 00002733 7405                <1>     je .pointFilename
   781 00002735 48FFCE              <1>     dec rsi ;Not a terminator, go back a char
   782 00002738 EBE8                <1>     jmp short .lp
   783                              <1> .pointFilename:
   784 0000273A 48FFC6              <1>     inc rsi ;Now point to the first char of the pathname
   785                              <1>     return
    19                              <2> %%_ret:
    20 0000273D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   786                              <1> .exitBad:
   787 0000273E F9                  <1>     stc
   788                              <1> .exit:
   789                              <1>     return
    19                              <2> %%_ret:
    20 0000273F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   790                              <1> 
   791                              <1> 
   792                              <1> copyArgumentToSearchSpec:
   793                              <1> ;Works similarly to the build searchpath but is simpler
   794                              <1> ;Null terminates
   795 00002740 488D3DDADBFFFF      <1>     lea rdi, searchSpec
   796                              <1> .copyPath:
   797 00002747 AC                  <1>     lodsb
   798 00002748 E87CFDFFFF          <1>     call isALEndOfCommand
   799 0000274D 740A                <1>     jz .finishCopy
   800 0000274F E852FDFFFF          <1>     call isALterminator
   801 00002754 7403                <1>     jz .finishCopy
   802 00002756 AA                  <1>     stosb
   803 00002757 EBEE                <1>     jmp short .copyPath
   804                              <1> .finishCopy:
   805 00002759 31C0                <1>     xor eax, eax
   806 0000275B AA                  <1>     stosb
   807                              <1>     return
    19                              <2> %%_ret:
    20 0000275C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    18                                  %include "./Source/Utils/COMMAND/Source/int44h.asm"
    19                              <1> critErrorHandler:   ;Int 44h
    20                              <1> ;User Stack in usage here, must be swapped to before this is called
    21                              <1> ;Entered with:  
    22                              <1> ;               AH = Critical Error Bitfield
    23                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    24                              <1> ;               Bit 6 - Reserved
    25                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    26                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    27                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    28                              <1> ;               Bits [2-1] = Affected Disk Error
    29                              <1> ;                     0 0   DOS area
    30                              <1> ;                     0 1   FAT area
    31                              <1> ;                     1 0   Directory area
    32                              <1> ;                     1 1   Data area
    33                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    34                              <1> ;               AL  = Failing drive number if AH[7] = 0
    35                              <1> ;               DIL = Error code for errorMsg
    36                              <1> ;               RSI = EA of Device Header for which device the error occured
    37                              <1> ;Return:
    38                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    39                              <1> ;                  = 1 - Retry the Operation    (Retry)
    40                              <1> ;                  = 2 - Terminate the Program  (Abort)
    41                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    42 0000275D 53                  <1>     push rbx
    43 0000275E 51                  <1>     push rcx
    44 0000275F 52                  <1>     push rdx
    45 00002760 57                  <1>     push rdi
    46 00002761 56                  <1>     push rsi
    47 00002762 FC                  <1>     cld         ;Make String ops go forward
    48                              <1> 
    49 00002763 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    50 00002766 488D150BDFFFFF      <1>     lea rdx, crlf
    51 0000276D B409                <1>     mov ah, 09h ;Print String
    52 0000276F CD41                <1>     int 41h
    53                              <1> 
    54 00002771 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    55 00002777 B90C000000          <1>     mov ecx, 0Ch
    56 0000277C 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    57 0000277E 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    58 00002781 480FB7FF            <1>     movzx rdi, di
    59 00002785 4889FA              <1>     mov rdx, rdi    ;Copy error code
    60 00002788 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    61 0000278C 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    62 0000278F 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    63 00002792 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    64 00002799 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    65 0000279D B409                <1>     mov ah, 09h ;Print String
    66 0000279F CD41                <1>     int 41h     ;Call DOS to print first part of message
    67                              <1> 
    68 000027A1 488D1505020000      <1>     lea rdx, qword [.readmsg]
    69 000027A8 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    70 000027AF F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    71 000027B2 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    72 000027B6 B409                <1>     mov ah, 09h ;Print String
    73 000027B8 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    74                              <1> 
    75 000027BA F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    76 000027BD 0F85DF000000        <1>     jnz .charError
    77                              <1> ;Disk error continues here
    78 000027C3 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    79 000027CA B409                <1>     mov ah, 09h
    80 000027CC CD41                <1>     int 41h
    81 000027CE 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    82 000027D0 80C241              <1>     add dl, "A" ;Add ASCII code
    83 000027D3 B402                <1>     mov ah, 02h ;Print char in dl
    84 000027D5 CD41                <1>     int 41h
    85                              <1> .userInput:
    86 000027D7 488D159ADEFFFF      <1>     lea rdx, crlf  ;Print new line
    87 000027DE B409                <1>     mov ah, 09h
    88 000027E0 CD41                <1>     int 41h
    89                              <1> ;Abort, Retry, Ignore, Fail is word order
    90                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    91                              <1> .userAbort:
    92                              <1> ;Abort is always an option
    93 000027E2 488D15E2010000      <1>     lea rdx, qword [.abortmsg]
    94 000027E9 B409                <1>     mov ah, 09h
    95 000027EB CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
    96                              <1> .userRetry:
    97 000027ED F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    98 000027F0 7416                <1>     jz .userIgnore    ;If clear, dont print message
    99 000027F2 488D15EA010000      <1>     lea rdx, qword [.betweenMsg]
   100 000027F9 B409                <1>     mov ah, 09h
   101 000027FB CD41                <1>     int 41h
   102 000027FD 488D15D4010000      <1>     lea rdx, qword [.retrymsg]
   103 00002804 B409                <1>     mov ah, 09h
   104 00002806 CD41                <1>     int 41h
   105                              <1> .userIgnore:
   106 00002808 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   107 0000280B 7416                <1>     jz .userFail
   108 0000280D 488D15CF010000      <1>     lea rdx, qword [.betweenMsg]
   109 00002814 B409                <1>     mov ah, 09h
   110 00002816 CD41                <1>     int 41h
   111 00002818 488D15B2010000      <1>     lea rdx, qword [.ignoremsg]
   112 0000281F B409                <1>     mov ah, 09h
   113 00002821 CD41                <1>     int 41h
   114                              <1> .userFail:
   115 00002823 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   116 00002826 7416                <1>     jz .userMsgEnd
   117 00002828 488D15B4010000      <1>     lea rdx, qword [.betweenMsg]
   118 0000282F B409                <1>     mov ah, 09h
   119 00002831 CD41                <1>     int 41h
   120 00002833 488D15A4010000      <1>     lea rdx, qword [.failmsg]
   121 0000283A B409                <1>     mov ah, 09h
   122 0000283C CD41                <1>     int 41h
   123                              <1> .userMsgEnd:
   124 0000283E 488D15A1010000      <1>     lea rdx, qword [.endMsg]
   125 00002845 B409                <1>     mov ah, 09h
   126 00002847 CD41                <1>     int 41h
   127                              <1> ;Get user input now 
   128 00002849 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   129 0000284B 488D3D97010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   130 00002852 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   131 00002854 CD41                <1>     int 41h ;Get char in al
   132 00002856 3C61                <1>     cmp al, "a" ;Chack if lowercase
   133 00002858 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   134 0000285A 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   135                              <1> .uip1:
   136 0000285C AE                  <1>     scasb   ;Compare char to list, offset gives return code
   137 0000285D 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   138 0000285F FFC1                <1>     inc ecx
   139 00002861 81F904000000        <1>     cmp ecx, 4
   140 00002867 75F3                <1>     jne .uip1
   141 00002869 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   142                              <1> .validInput:
   143 0000286E 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   144                              <1> ;Now check if the input is permitted
   145 00002870 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   146 00002872 7427                <1>     je .cehExit
   147 00002874 84C0                <1>     test al, al ;Check if 0 => Ignore
   148 00002876 740F                <1>     je .viIgnore
   149 00002878 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   150 0000287A 7416                <1>     je .viRetry
   151                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   152 0000287C F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   153 0000287F 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   154 00002885 EB14                <1>     jmp short .cehExit
   155                              <1> .viIgnore:
   156 00002887 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   157 0000288A 0F8447FFFFFF        <1>     jz .userInput
   158 00002890 EB09                <1>     jmp short .cehExit
   159                              <1> .viRetry:
   160 00002892 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   161 00002895 0F843CFFFFFF        <1>     jz .userInput
   162                              <1> .cehExit:
   163 0000289B 5E                  <1>     pop rsi
   164 0000289C 5F                  <1>     pop rdi
   165 0000289D 5A                  <1>     pop rdx
   166 0000289E 59                  <1>     pop rcx
   167 0000289F 5B                  <1>     pop rbx
   168 000028A0 48CF                <1>     iretq
   169                              <1> .charError:
   170 000028A2 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   171 000028A7 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   172                              <1> .ce1:
   173 000028AE AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   174 000028AF 88C2                <1>     mov dl, al  ;Move char into dl
   175 000028B1 B402                <1>     mov ah, 02h
   176 000028B3 CD41                <1>     int 41h ;Print char
   177 000028B5 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   178 000028B7 E91BFFFFFF          <1>     jmp .userInput
   179                              <1> 
   180                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   181 000028BC 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   181 000028C5 746563742024202020  <1>
   182 000028CE 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   182 000028D7 6E6974202420202020  <1>
   183 000028E0 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   183 000028E9 202420202020202020  <1>
   184 000028F2 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   184 000028FB 6F6D6D616E64202420  <1>
   185 00002904 446174612024202020- <1>             db "Data $            "       ;Error 4
   185 0000290D 202020202020202020  <1>
   186 00002916 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   186 0000291F 737420242020202020  <1>
   187 00002928 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   187 00002931 202020202020202020  <1>
   188 0000293A 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   188 00002943 656469612024202020  <1>
   189 0000294C 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   189 00002955 7420466F756E642024  <1>
   190 0000295E 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   190 00002967 706572202420202020  <1>
   191 00002970 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   191 00002979 6C7420242020202020  <1>
   192 00002982 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   192 0000298B 742024202020202020  <1>
   193 00002994 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   193 0000299D 61696C757265202420  <1>
   194                              <1> 
   195 000029A6 64726976652024      <1> .drive      db "drive $"
   196 000029AD 6572726F7220726561- <1> .readmsg    db "error reading $"
   196 000029B6 64696E672024        <1>
   197 000029BC 6572726F7220777269- <1> .writemsg   db "error writing $"
   197 000029C5 74696E672024        <1>
   198 000029CB 41626F727424        <1> .abortmsg   db "Abort$" 
   199 000029D1 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   200 000029D8 526574727924        <1> .retrymsg   db "Retry$"
   201 000029DE 4661696C24          <1> .failmsg    db "Fail$"
   202 000029E3 2C2024              <1> .betweenMsg db ", $"
   203 000029E6 3F2024              <1> .endMsg     db "? $"
   204 000029E9 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   205                              <1> 
   206                              <1> int43h:
   207 000029ED F9                  <1>     stc     ;Set CF to kill the task
   208 000029EE C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    19                                  %include "./Source/Utils/COMMAND/Data/cmdEnv.asm"
    20                              <1>     
    21                              <1> masterEnv:  ;Yeet this is this is a child command processor
    22 000029F1 5F3A434F4D4D414E44- <1>     db "_:COMMAND.COM",0
    22 000029FA 2E434F4D00          <1>
    23 000029FF 504154483D0000      <1>     db "PATH=",0,0  ;Terminate with two null bytes
    24 00002A06 202020202020202020- <1>     db ($ - masterEnv) dup (" ")    ;Pad the environment with spaces
    24 00002A0F 202020202020202020- <1>
    24 00002A18 202020              <1>
    25                              <1> endOfAlloc: ;Symbol to find the start of where I can yeet 
    20                                  %include "./Source/Utils/COMMAND/Source/cmdLdr.asm"
    21                              <1> cmdLdr:
    22                              <1> ;First check if the version is ok. If not, return.
    23 00002A1B B430                <1>     mov ah, 30h
    24 00002A1D CD41                <1>     int 41h
    25 00002A1F 3C01                <1>     cmp al, 01h ;Version 1
    26 00002A21 760D                <1>     jbe .okVersion
    27 00002A23 488D15CD010000      <1>     lea rdx, badVerStr
    28 00002A2A B409                <1>     mov ah, 09h
    29 00002A2C CD41                <1>     int 41h
    30 00002A2E CD40                <1>     int 40h ;Exit to caller or DOS to print bad command interpreter line
    31                              <1> .okVersion:
    32                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    33 00002A30 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    34 00002A34 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    35 00002A38 488905D0D5FFFF      <1>     mov qword [realParent], rax ;Preserve the real parent address
    36                              <1> ;Setup Int 42h, Int 43h and Int 44h
    37 00002A3F 498B400A            <1>     mov rax, qword [r8 + psp.oldInt42h] ;Preserve the original addresses
    38 00002A43 488905DCD5FFFF      <1>     mov qword [parentInt42], rax
    39                              <1> 
    40 00002A4A 488D150CFDFFFF      <1>     lea rdx, critErrorHandler
    41 00002A51 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    42 00002A55 B844250000          <1>     mov eax, 2544h
    43 00002A5A CD41                <1>     int 41h
    44 00002A5C 488D158AFFFFFF      <1>     lea rdx, int43h
    45 00002A63 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    46 00002A67 B843250000          <1>     mov eax, 2543h
    47 00002A6C CD41                <1>     int 41h
    48 00002A6E 488D15E8E1FFFF      <1>     lea rdx, applicationReturn
    49 00002A75 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    50 00002A79 B842250000          <1>     mov eax, 2542h
    51 00002A7E CD41                <1>     int 41h
    52                              <1> ;Get a pointer to DOS Sysvars
    53 00002A80 B452                <1>     mov ah, 52h ;Get sysvars
    54 00002A82 CD41                <1>     int 41h
    55 00002A84 48891D8CD5FFFF      <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    56                              <1> ;Call for simple internationalisation data
    57 00002A8B B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    58 00002A90 CD41                <1>     int 41h
    59 00002A92 3CFF                <1>     cmp al, -1
    60 00002A94 7412                <1>     je .skipSwitch
    61 00002A96 881588D5FFFF        <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    62 00002A9C 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    63 00002A9F 7507                <1>     jne .skipSwitch
    64 00002AA1 C6057BD5FFFF2F      <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    65                              <1> .skipSwitch:
    66 00002AA8 B800380000          <1>     mov eax, 3800h  ;Get current country data
    67 00002AAD 488D157AD5FFFF      <1>     lea rdx, ctryData
    68 00002AB4 CD41                <1>     int 41h ;Write the data to the internal country table
    69                              <1> ;Now determine if this is the master copy of COMMAND.COM
    70                              <1> ;Check if Int 4Eh has the same address as Int 4Dh. If so, we are master.
    71 00002AB6 B84E350000          <1>     mov eax, 354Eh  ;Get int 4Eh address
    72 00002ABB CD41                <1>     int 41h
    73 00002ABD 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    74 00002AC0 B84D350000          <1>     mov eax, 354Dh  ;Get int 4Dh address
    75 00002AC5 CD41                <1>     int 41h
    76 00002AC7 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    77 00002ACA 755C                <1>     jne .skipMaster
    78                              <1> ;Ok so we are master command.com
    79                              <1> ;Now make myself the real parent
    80 00002ACC C60552D5FFFFFF      <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    81 00002AD3 4C890535D5FFFF      <1>     mov qword [realParent], r8
    82                              <1> ;Set master environment as mine
    83 00002ADA 488D0510FFFFFF      <1>     lea rax, masterEnv
    84 00002AE1 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    85                              <1> ;Set current Drive in COMSPEC
    86 00002AE5 B019                <1>     mov al, 19h ;Get current Drive
    87 00002AE7 CD41                <1>     int 41h
    88 00002AE9 0441                <1>     add al, "A"
    89 00002AEB 880500FFFFFF        <1>     mov byte [masterEnv], al
    90                              <1> ;Set Int 4Eh up
    91 00002AF1 488D1529E6FFFF      <1>     lea rdx, int4Eh
    92 00002AF8 B84E250000          <1>     mov eax, 254Eh ;Set this as Int 4Eh
    93 00002AFD CD41                <1>     int 41h
    94                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    95                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    96 00002AFF 488D1572DBFFFF      <1>     lea rdx, crlf
    97 00002B06 B409                <1>     mov ah, 09h
    98 00002B08 CD41                <1>     int 41h
    99 00002B0A E8F5EDFFFF          <1>     call time
   100 00002B0F E82AEDFFFF          <1>     call date
   101 00002B14 488D155DDBFFFF      <1>     lea rdx, crlf
   102 00002B1B B409                <1>     mov ah, 09h
   103 00002B1D CD41                <1>     int 41h
   104 00002B1F 488D1DF5FEFFFF      <1>     lea rbx, endOfAlloc ;Save the Master Environment
   105 00002B26 EB32                <1>     jmp short .printInit
   106                              <1> .skipMaster:
   107 00002B28 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
   108 00002B2F 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
   109 00002B37 0FB605E6D4FFFF      <1>     movzx eax, byte [switchChar]
   110 00002B3E F2AE                <1>     repne scasb
   111 00002B40 67E310              <1>     jecxz .noSwitches
   112 00002B43 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
   113 00002B46 24DF                <1>     and al, 0DFh    ;Convert to UC
   114 00002B48 3C50                <1>     cmp al, "P" ;Is it permanent switch?
   115 00002B4A 7507                <1>     jne .noSwitches
   116 00002B4C C605D2D4FFFFFF      <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
   117                              <1> .noSwitches:
   118 00002B53 488D1D97FEFFFF      <1>     lea rbx, masterEnv  ;This is the base address to jettison
   119                              <1> .printInit:
   120                              <1> ;Finish by printing INIT string.
   121 00002B5A 53                  <1>     push rbx
   122 00002B5B 488D1521000000      <1>     lea rdx, initString
   123 00002B62 B409                <1>     mov ah, 09h
   124 00002B64 CD41                <1>     int 41h ;Print init string
   125 00002B66 E8B4F2FFFF          <1>     call version.printVersionNumber
   126 00002B6B 488D1547000000      <1>     lea rdx, initString2
   127 00002B72 B409                <1>     mov ah, 09h
   128 00002B74 CD41                <1>     int 41h ;Print init string
   129 00002B76 5B                  <1>     pop rbx
   130 00002B77 48892587D4FFFF      <1>     mov qword [stackBottom], rsp    ;Use this to save where to reset rsp to
   131 00002B7E E9C6E0FFFF          <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   132                              <1> ;Loader Data here
   133                              <1> initString: 
   134 00002B83 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   134 00002B8C 66696320436F6D7075- <1>
   134 00002B95 746572205265736561- <1>
   134 00002B9E 726368285229205343- <1>
   134 00002BA7 502F444F5328522920- <1>
   134 00002BB0 56657273696F6E2024  <1>
   135                              <1> initString2:
   136 00002BB9 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Reserach 2022.",CR,LF,"$"
   136 00002BC2 202020284329436F70- <1>
   136 00002BCB 797269676874205363- <1>
   136 00002BD4 69656E746966696320- <1>
   136 00002BDD 436F6D707574657220- <1>
   136 00002BE6 526573657261636820- <1>
   136 00002BEF 323032322E0D0A24    <1>
   137 00002BF7 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   137 00002C00 20444F532076657273- <1>
   137 00002C09 696F6E0D0A24        <1>
   137          ------------------  <1>  info: assembly required 1+4+2 passes

