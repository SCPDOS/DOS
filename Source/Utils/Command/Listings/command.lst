     1                                  ;COMMAND.COM main file
     2                                  [map all ./Source/Utils/COMMAND/Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Source/Include/dosMacro.mac"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------------------------------
     9                              <1> ;Generic Macros file
    10                              <1> ;The following instruction extensions allow to conditionally return
    11                              <1> ;The idea was borrowed from the DOS Source Code
    12                              <1> ;
    13                              <1> ;-------------------------------------------------------------------------------
    14                              <1> 
    15                              <1> ;-------------------------------------------------------------------------------
    16                              <1> ;These macros are live and must not be touched
    17                              <1> ;-------------------------------------------------------------------------------
    18                              <1> %macro return 0
    19                              <1> %%_ret:
    20                              <1>     ret
    21                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    22                              <1> %endmacro
    23                              <1> 
    24                              <1> %macro cret 1
    25                              <1> %%_base:
    26                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    27                              <1>     %ifdef retOff
    28                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <1>     %ifdef currSegVBase
    30                              <1>     j%+1 short (retOff+currSegVBase)
    31                              <1>     %else
    32                              <1>     j%+1 short retOff
    33                              <1>     %endif  ;End ifdef currSegVBase
    34                              <1>     %else 
    35                              <1>     j%-1 short %%a
    36                              <1>     return
    37                              <1> %%a:
    38                              <1>     %endif  ;End the distance measurement if
    39                              <1>     %else   
    40                              <1>     j%-1 short %%a
    41                              <1>     return
    42                              <1> %%a:
    43                              <1>     %endif  ;End ifdef retoff
    44                              <1> %endmacro
    45                              <1> 
    46                              <1> %macro retz 0
    47                              <1> cret z
    48                              <1> %endmacro
    49                              <1> 
    50                              <1> %macro retnz 0
    51                              <1> cret nz
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> %macro rete 0
    55                              <1> cret e
    56                              <1> %endmacro
    57                              <1> 
    58                              <1> %macro retne 0
    59                              <1> cret ne
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> %macro retc 0
    63                              <1> cret c
    64                              <1> %endmacro
    65                              <1> 
    66                              <1> %macro retnc 0
    67                              <1> cret nc
    68                              <1> %endmacro
    69                              <1> 
    70                              <1> %macro retb 0
    71                              <1> cret b
    72                              <1> %endmacro
    73                              <1> 
    74                              <1> %macro retnb 0
    75                              <1> cret nb
    76                              <1> %endmacro
    77                              <1> 
    78                              <1> %macro breakpoint 0
    79                              <1> xchg bx, bx
    80                              <1> %endmacro
     7                                  %include "./Source/Include/dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    27 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    32 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Only affects for SUBST drives, not JOIN
    69                              <1> ; Flags: Bit 15 set = Network drive
    70                              <1> ;        Bit 14 set = Physical drive
    71                              <1> ;        Bit 13 set = JOIN'ed drive
    72                              <1> ;        Bit 12 set = SUBST'ed drive
    73                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    74                              <1> endstruc
    75                              <1> ;CDS equates
    76                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    77                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    78                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    79                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    80                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    81                              <1> ;------------------------------------------------------------------------;
    82                              <1> ; The SFT is a way to allow applications to open file handles to files 
    83                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    84                              <1> ; under the first header, and then a second header will be linked to the 
    85                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    86                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    87                              <1> ; using the FCBS= command. Default FCBS=5.
    88                              <1> ;
    89                              <1> ; A file handle describes the file, and the location within the file that
    90                              <1> ; we are reading. The file handle can be manipulated without the file
    91                              <1> ; being in memory, thus allowing the user to access data without needing 
    92                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    93                              <1> ; accessing devices, by treating them as files with their drivers 
    94                              <1> ; responding and translating the manipulations of the file handle itself.
    95                              <1> ; Neither the driver nor the application should see or use the SFT for
    96                              <1> ; the handle, as it is subject to change (and will change when file 
    97                              <1> ; sharing provisions are included). The DOS will make requests to the 
    98                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    99                              <1> ; track of the information in the SFT entry for that handle. 
   100                              <1> ;
   101                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   102                              <1> ; can point to the same file. It all depends on what the applications 
   103                              <1> ; want to do with the File.
   104                              <1> ;
   105                              <1> ; !!!!IMPORTANT!!!!
   106                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   107                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   108                              <1> ;
   109                              <1> ;Each SFT may look like this:
   110                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   111                              <1> ;            |                |
   112                              <1> ;       wNumFiles*sft    wNumFiles*sft
   113                              <1> ;
   114                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   115                              <1> ; System FCBs.
   116                              <1> ;
   117                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   118                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   119                              <1> ;
   120                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   121                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   122                              <1> ;------------------------------------------------------------------------;
   123                              <1> struc sfth   ;System file table header
   124                              <1> ; This is the SFT header.
   125                              <1> ; This structure comes before the start of the first file in the array/table.
   126 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   127 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   128                              <1> endstruc
   129                              <1> 
   130                              <1> struc sft
   131                              <1> ;This is the file struc itself
   132 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   133 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   134 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   135 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   136 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   137 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   138 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   139 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   140 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   141 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   142 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   143 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   144 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   145 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   146 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   147 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   148 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   149 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   150 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   151                              <1> ;                           0 means no record
   152                              <1> endstruc
   153                              <1> ;Open Mode equates
   154                              <1> ;Access modes   Bits[2:0]
   155                              <1> ReadAccess      equ 0h
   156                              <1> WriteAccess     equ 1h
   157                              <1> RWAccess        equ 2h
   158                              <1> ;Bit 3 reserved 0
   159                              <1> ;Sharing modes  Bits[6:4]
   160                              <1> CompatShare     equ 0h
   161                              <1> denyRWShare     equ 10h
   162                              <1> denyWriteShare  equ 20h
   163                              <1> denyReadShare   equ 30h
   164                              <1> denyNoneShare   equ 40h
   165                              <1> netFCBShare     equ 70h
   166                              <1> ;Bit 7 reserved 0
   167                              <1> ;Bits 8-12 reserved 0
   168                              <1> 
   169                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   170                              <1> ;Buffering on writes
   171                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   172                              <1> ;FCB opened file?
   173                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   174                              <1> ;Attribute Byte
   175                              <1> readOnlyFile    equ 1h
   176                              <1> hiddenFile      equ 2h
   177                              <1> systemFile      equ 4h
   178                              <1> volumeLabel     equ 8h
   179                              <1> directoryFile   equ 10h ;Directory entry
   180                              <1> archiveFile     equ 20h
   181                              <1> ;Device Info equates
   182                              <1> ;For a block device, bits [5:0] contain the drive number
   183                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   184                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   185                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   186                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   187                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   188                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   189                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   190                              <1> blokFileToFlush equ 40h ;Set if ANY writes are made to this handle!
   191                              <1> devCharDev      equ 80h ;If set, it is a char device!
   192                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   193                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   194                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   195                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   196                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   197                              <1> 
   198                              <1> ;openAddress   equ DOSSEG:367Ah   
   199                              <1> ;createAddress equ DOSSEG:35E3h   
   200                              <1> ;------------------------------------------------------------------------;
   201                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   202                              <1> ; to an internal buffer, and then copying it to the specified location
   203                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   204                              <1> ; another request for the same sector from the same device is made, so 
   205                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   206                              <1> ; size, selected according to the largest detected sector size during 
   207                              <1> ; the initial loadup.
   208                              <1> ;
   209                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   210                              <1> ;
   211                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   212                              <1> ;------------------------------------------------------------------------;
   213                              <1> 
   214                              <1> struc bufferHdr
   215 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   216 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   217 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   218 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   219 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   220 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   221 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   222 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   223 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   224                              <1>     .dataarea:             ;Points to the start of the data area
   225                              <1> endstruc
   226                              <1> ;Buffer Flag equates
   227                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   228                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   229                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   230                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   231                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   232                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   233                              <1> ;Note! A buffer is marked as referenced only when the application 
   234                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   235                              <1> ;------------------------------------------------------------------------;
   236                              <1> ; Memory control block for each memory arena
   237                              <1> ;------------------------------------------------------------------------;
   238                              <1> struc mcb
   239 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   240 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   241 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   242 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   243                              <1>     .program:
   244                              <1> endstruc
   245                              <1> ;MCB equates
   246                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   247                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   248                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   249                              <1> mcbMarkCtn      equ "M"
   250                              <1> mcbMarkEnd      equ "Z"
   251                              <1> 
   252                              <1> memFirstFit     equ 0   ;First free block goes to application
   253                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   254                              <1> memLastFit      equ 2   ;Last free block goes to application
   255                              <1> 
   256                              <1> ;Owner = Para aligned address => Owning application PSP
   257                              <1> ;...To consider...
   258                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   259                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   260                              <1> ;------------------------------------------------------------------------;
   261                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   262                              <1> ; following order, thus allowing for return values to be placed in the 
   263                              <1> ; registers by accessing the caller register stack frame.
   264                              <1> ;------------------------------------------------------------------------;
   265                              <1> struc callerFrame
   266 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   267 00000008 ????????????????    <1>     .rbx    resq 1    
   268 00000010 ????????????????    <1>     .rcx    resq 1
   269 00000018 ????????????????    <1>     .rdx    resq 1
   270 00000020 ????????????????    <1>     .rsi    resq 1
   271 00000028 ????????????????    <1>     .rdi    resq 1
   272 00000030 ????????????????    <1>     .rbp    resq 1
   273 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   274 00000040 ????????????????    <1>     .r9     resq 1
   275                              <1> ;Pushed by Processor when invoked via Interrupt
   276 00000048 ????????????????    <1>     .rip    resq 1
   277 00000050 ????????????????    <1>     .cs     resq 1
   278 00000058 ????????????????    <1>     .flags  resq 1
   279                              <1> endstruc
   280                              <1> 
   281                              <1> struc dpl
   282                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   283                              <1> ; server calls
   284 00000000 ????????????????    <1>     .rax    resq 1
   285 00000008 ????????????????    <1>     .rbx    resq 1
   286 00000010 ????????????????    <1>     .rcx    resq 1
   287 00000018 ????????????????    <1>     .rdx    resq 1
   288 00000020 ????????????????    <1>     .rsi    resq 1
   289 00000028 ????????????????    <1>     .rdi    resq 1
   290 00000030 ????????????????    <1>     .r8     resq 1
   291 00000038 ????????????????    <1>     .r9     resq 1
   292 00000040 ????????????????    <1>     .align  resq 1
   293 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   294 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   295                              <1> endstruc
   296                              <1> 
   297                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   298 00000000 ????????????????    <1>     .oldRBP         resq 1  
   299 00000008 ??                  <1>     .newBuffers     resb 1  ;New buffers value
   300 00000009 ??                  <1>     .newSFTVal      resb 1
   301 0000000A ??                  <1>     .newFCBSVal     resb 1
   302 0000000B ??                  <1>     .newProtFCBSVal resb 1  ;Number of protected FCBS
   303 0000000C ??                  <1>     .newLastdrive   resb 1
   304 0000000D ??                  <1>     .newStacks      resb 1  ;Ignored for now
   305 0000000E ????                <1>     .newStackSize   resb 2  ;Ignored for now
   306 00000010 ????????            <1>     .newAllocSize   resd 1  ;Used to keep track of reallocation size
   307 00000014 ????????            <1>                     resd 1  ;Alignment byte
   308 00000018 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc fcb
   312                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   313 00000000 ??                  <1>     .driveNum   resb 1
   314 00000001 ????????????????    <1>     .filename   resb 8
   315 00000009 ??????              <1>     .fileext    resb 3
   316 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   317                              <1> ;One block consists of 128 records, of size denoted in the below
   318 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   319 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   320 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   321 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   322 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   323 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   324 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   325 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   326 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   327                              <1>     ;If record size > 64, high byte is ignored.
   328                              <1>     ;Used for random read and write operations to find the right record
   329                              <1> endstruc
   330                              <1> 
   331                              <1> struc filename
   332                              <1> ;8.3 File name struct
   333 00000000 ????????????????    <1>     .fName  resb 8
   334 00000008 ??????              <1>     .fExt   resb 3
   335                              <1> endstruc
   336                              <1> 
   337                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   338 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   339 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   340 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   341 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   342 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   343 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   344 00000016 ????                <1>     .fileTime   resw 1  ;File time
   345 00000018 ????                <1>     .fileDate   resw 1  ;File date
   346 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   347 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   348                              <1> endstruc
   349                              <1> 
   350                              <1> struc psp
   351 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   352 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   353 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   354 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   355 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   356 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   357 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   358 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   359 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   360 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   361 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   362 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   363 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   364 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   365                              <1> ;Extra handle arrays are grouped into a linked list
   366                              <1> ;The below are in the same place as in DOS
   367 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   368 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   369                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   370 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   371 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   372                              <1> endstruc
   373                              <1> 
   374                              <1> struc clkStruc
   375 00000000 ????                <1>     .dateWord   resw 1
   376 00000002 ??                  <1>     .minutes    resb 1
   377 00000003 ??                  <1>     .hours      resb 1
   378 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   379 00000005 ??                  <1>     .seconds    resb 1
   380                              <1> endstruc
   381                              <1> 
   382                              <1> struc countryStruc
   383 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   384                              <1>                         ;0 = month day year hh:mm:ss
   385                              <1>                         ;1 = day month year hh:mm:ss
   386                              <1>                         ;2 = year month day hh:mm:ss
   387 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   388 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   389 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   390 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   391 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   392 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   393                              <1>                         ;0 = Symbol leads, without space
   394                              <1>                         ;1 = Symbol follows, without space
   395                              <1>                         ;2 = Symbol leads, one space
   396                              <1>                         ;3 = Symbol follows, one space
   397                              <1>                         ;4 = Symbol replace decimal separator
   398 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   399 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   400 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   401 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   402 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   403                              <1> endstruc
   404                              <1> 
   405                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   406                              <1> ;for a space of 64Gb
   407                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   408                              <1> dosLowBase  equ 600h    ;Low load address
   409                              <1> 
   410                              <1> ;Critical Error AH bitfield equates
   411                              <1> critRead    equ 0h
   412                              <1> critWrite   equ 1h
   413                              <1> critDOS     equ 0h
   414                              <1> critFAT     equ 2h
   415                              <1> critDir     equ 4h
   416                              <1> critData    equ 6h
   417                              <1> critFailOK  equ 8h
   418                              <1> critRetryOK equ 10h
   419                              <1> critIgnorOK equ 20h
   420                              <1> critCharDev equ 80h
   421                              <1> 
   422                              <1> critIgnore  equ 0
   423                              <1> critRetry   equ 1
   424                              <1> critAbort   equ 2
   425                              <1> critFail    equ 3
   426                              <1> 
   427                              <1> ;MISC ASCII control chars
   428                              <1> NUL equ 00h ;^@         | ASCII Null
   429                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   430                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   431                              <1> BEL equ 07h ;^G         | ASCII Bell
   432                              <1> BSP equ 08h ;^H         | ASCII Backspace
   433                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   434                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   435                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   436                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   437                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   438                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   439                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   440                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   441                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   442                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   443                              <1> SPC equ 20h ;Printable  | ASCII Space
   444                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   445                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   446                              <1> 
   447                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   448                              <1> ;Extended Ascii Codes
   449                              <1> eF1     equ 3Bh ;F1 second byte
   450                              <1> eF2     equ 3Ch ;F2 second byte
   451                              <1> eF3     equ 3Dh ;F3 second byte
   452                              <1> eF4     equ 3Eh ;F4 second byte
   453                              <1> eF5     equ 3Fh ;F5 second byte
   454                              <1> eF6     equ 40h ;F6 second byte
   455                              <1> eF7     equ 41h ;F7 second byte
   456                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   457                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   458                              <1> eIns    equ 52h ;Insert second byte
   459                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   460                              <1> 
   461                              <1> ;Default Configuration for the system
   462                              <1> 
   463                              <1> buffersDefault  equ 30
   464                              <1> filesDefault    equ 20
   465                              <1> fcbsDefault     equ 4
   466                              <1> safeFcbsDeflt   equ 0
   467                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Source/Include/dosError.inc"
     9                              <1> ;DOS Error codes
    10                              <1> 
    11                              <1> ;Extended Error Codes
    12                              <1> errInvFnc   equ 1   ;Invalid function number
    13                              <1> errFnf      equ 2   ;File not found
    14                              <1> errPnf      equ 3   ;Path not found
    15                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    16                              <1> errAccDen   equ 5   ;Access denied (to resource)
    17                              <1> errBadHdl   equ 6   ;Invalid handle
    18                              <1> errMCBbad   equ 7   ;MCB's destroyed
    19                              <1> errNoMem    equ 8   ;Insufficient memory
    20                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    21                              <1> errBadEnv   equ 10  ;Invalid environment
    22                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    23                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    24                              <1> errInvDat   equ 13  ;Invalid data
    25                              <1> ;           equ 14  ;Reserved
    26                              <1> errBadDrv   equ 15  ;Invalid drive specified
    27                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    28                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    29                              <1> errNoFil    equ 18  ;No more files
    30                              <1> ;The following are Driver error codes + 19
    31                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    32                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    33                              <1> errUnkUnt   equ 20  ;Unknown Unit
    34                              <1> errDrvNR    equ 21  ;Drive not ready
    35                              <1> errUnkCmd   equ 22  ;Unknown Command
    36                              <1> errCRCerr   equ 23  ;Data (CRC) error
    37                              <1> errBadRLn   equ 24  ;Bad request structure length
    38                              <1> errSekErr   equ 25  ;Seek error
    39                              <1> errUnkMed   equ 26  ;Unknown media type
    40                              <1> errSecNF    equ 27  ;Sector not Found
    41                              <1> errNoPap    equ 28  ;Printer out of paper
    42                              <1> errWF       equ 29  ;Write fault
    43                              <1> errRF       equ 30  ;Read fault
    44                              <1> errGF       equ 31  ;General fault
    45                              <1> ;----------------------------------------------
    46                              <1> ;The following two go inbetween the Disk errors
    47                              <1> errShrVio   equ 32  ;Sharing violations
    48                              <1> errLokVio   equ 33  ;File Lock violation
    49                              <1> ;----------------------------------------------
    50                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    51                              <1> errNoFCB    equ 35  ;FCB unavailable
    52                              <1> errShrFul   equ 36  ;Sharing buffer full
    53                              <1> 
    54                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    55                              <1> 
    56                              <1> errFilExist equ 80  ;File already exists
    57                              <1> errDirExist equ 82  ;Directory already exists
    58                              <1> errFI44     equ 83  ;Fail on INT 44h
    59                              <1> errRedir    equ 84  ;Too many levels of redirection
    60                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    61                              <1> errBadPass  equ 86  ;Bad password
    62                              <1> errBadParam equ 87  ;Bad parameter passed to request
    63                              <1> errNetWrite equ 88  ;Network Write Fault
    64                              <1> ;-----------------------------------------------------------------------------
    65                              <1> ;Error Loci
    66                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    67                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    68                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    69                              <1> eLocChr     equ 4   ;Serial/Character Device error
    70                              <1> eLocMem     equ 5   ;Related to RAM
    71                              <1> ;-----------------------------------------------------------------------------
    72                              <1> ;Error Actions
    73                              <1> eActRet     equ 1   ;Retry
    74                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    75                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    76                              <1> eActAbt     equ 4   ;Abort with cleanup
    77                              <1> eActKil     equ 5   ;Abort without cleanup
    78                              <1> eActIgn     equ 6   ;Ignore error
    79                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    80                              <1> ;-----------------------------------------------------------------------------
    81                              <1> ;Error classes
    82                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    83                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    84                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    85                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    86                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    87                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    88                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    89                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    90                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    91                              <1> eClsLocked  equ 10  ;Resource Locked
    92                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    93                              <1> eClsClash   equ 12  ;Resource already exists!
    94                              <1> eClsUnk     equ 13  ;Unknown class
     9                                  %include "./Source/Utils/COMMAND/Data/cmdEqu.asm"
    10                              <1> ;Data equates and struct declarations
    11                              <1> 
    12                              <1> cmdBufferL  equ 128 ;Length of a command line buffer
    13                              <1> driveSpecL  equ 2   ;Space for X:
    14                              <1> dirPathL    equ 64  ;Length of a directory path
    15                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
    16                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
    17                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
    18                              <1> fullDirPathL equ driveSpecL + dirPathL
    19                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    20                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    21                              <1> 
    22                              <1> ;Use PSP FCB's for switch buffers
    23                              <1> fcb1        equ psp.fcb1
    24                              <1> fcb2        equ psp.fcb2
    25                              <1> ;Use the dta as the built command line buffer.
    26                              <1> cmdLine     equ psp.dta
    27                              <1> 
    28                              <1> 
    29                              <1> ;Struct Declarations
    30                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    31 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    32 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    33 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    34 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    35 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    36                              <1> endstruc
    37                              <1> 
    38                              <1> struc execProg  ;For use with EXEC-ing a child task
    39 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    40 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    41 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    42 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    43                              <1> endstruc
    10                                  Segment .data align=1 
    11                                  %include "./Source/Utils/COMMAND/Data/cmdData.asm"
    12                              <1> ;Static Data Area for COMMAND.COM    
    13                              <1> startLbl:   ;Start symbol, this is the entry point
    14 00000000 E9C60D0000          <1>     jmp cmdLdr
    15 00000005 0000000000000000    <1> stackBottom dq 0    ;Pointer to the top of the stack as allocated by DOS
    16 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
    17 0000000F FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
    18 00000017 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
    19 0000001F 1400                <1> numHdls     dw 20   ;Get number of handles permitted, hardcoded in this version
    20 00000021 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    21 00000023 5C                  <1> pathSep     db "\"  ;Default path sep
    22 00000024 2F                  <1> switchChar  db "/"  ;Default switch char
    23                              <1> 
    24                              <1> cmdLineState:   ;Symbol to use for cmdLineState variable block
    25                              <1> ;Offsets are computed from dta + 2
    26 00000025 00                  <1> cmdStart    db 0    ;Offset into input buffer to the start of the current cmd
    27 00000026 00                  <1> cmdEnd      db 0    ;Offset into input buffer to the end of the current cmd
    28 00000027 00                  <1> searchDrv   db 0    ;Search drive for the operation
    29                              <1> ;Points to terminating char for the current cmd which is either a 0Dh OR pipe
    30 00000028 00                  <1> pipeFlag    db 0    ;If set, we are piping across a command
    31 00000029 0000                <1> pipeHndl    dw 0    ;If pipeFlag set, this var has the handle to the pipe file
    32 0000002B 202020202020202020- <1> pipeName    db 11 dup (" ") ;Name of the pipe file we created
    32 00000034 2020                <1>
    33 00000036 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    34 00000037 00                  <1> redirOut    db 0    ;If set, we are redirecting output to a file, destructive
    35 00000038 00                  <1> redirOut2   db 0    ;If set, we are appending output to a file, not destructive
    36                              <1> cmdLineStateL equ $ - cmdLineState
    37                              <1> 
    38                              <1> ;Structs and strings
    39 00000039 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    39 00000042 000000000000000000- <1>
    39 0000004B 000000000000000000- <1>
    39 00000054 000000000000000000- <1>
    39 0000005D 0000                <1>
    40 0000005F 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    40 00000068 00000000000000      <1>
    41                              <1> ;Reuse byte 0 to optionally store the count of chars in the filename too
    42 0000006F 2B                  <1> cmdFFBlock  db ffBlock_size ;Internal Find First Block to use as default DTA
    43                              <1> 
    44 00000070 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    44 00000079 000000000000000000- <1>
    44 00000082 000000000000000000- <1>
    44 0000008B 000000000000000000- <1>
    44 00000094 000000000000000000- <1>
    44 0000009D 000000000000000000- <1>
    44 000000A6 000000000000000000- <1>
    44 000000AF 000000000000000000- <1>
    44 000000B8 000000000000000000- <1>
    44 000000C1 000000000000000000- <1>
    44 000000CA 000000000000000000- <1>
    44 000000D3 000000000000000000- <1>
    44 000000DC 000000000000000000- <1>
    44 000000E5 000000000000000000- <1>
    44 000000EE 0000                <1>
    45 000000F0 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    45 000000F9 000000000000000000- <1>
    45 00000102 000000000000000000- <1>
    45 0000010B 000000000000000000- <1>
    45 00000114 000000000000000000- <1>
    45 0000011D 000000000000000000- <1>
    45 00000126 000000000000000000- <1>
    45 0000012F 000000000000000000- <1>
    45 00000138 000000000000000000- <1>
    45 00000141 000000000000000000- <1>
    45 0000014A 000000000000000000- <1>
    45 00000153 000000000000000000- <1>
    45 0000015C 000000000000000000- <1>
    45 00000165 000000000000000000- <1>
    45 0000016E 0000                <1>
    46 00000170 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    46 00000179 000000000000000000- <1>
    46 00000182 000000000000000000- <1>
    46 0000018B 000000000000000000- <1>
    46 00000194 000000000000000000- <1>
    46 0000019D 000000000000000000- <1>
    46 000001A6 000000000000000000- <1>
    46 000001AF 00000000            <1>
    47 000001B3 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)    ;Full path to a external command
    47 000001BC 000000000000000000- <1>
    47 000001C5 000000000000000000- <1>
    47 000001CE 000000000000000000- <1>
    47 000001D7 000000000000000000- <1>
    47 000001E0 000000000000000000- <1>
    47 000001E9 000000000000000000- <1>
    47 000001F2 000000000000000000- <1>
    47 000001FB 00000000000000      <1>
    12                                  %include "./Source/Utils/COMMAND/Data/cmdTable.asm"
    13                              <1> ;Function dispatch table
    14                              <1> functionTable:
    15                              <1> ;Use Pascal strings with each row of hte table having three columns:
    16                              <1> ; Col 1, BYTE, Length of command
    17                              <1> ; Col 2, String, String representing the user input
    18                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
    19 00000202 03444952            <1>     db 3, "DIR"
    20 00000206 5E09                <1>     dw dir - startLbl
    21                              <1> 
    22 00000208 024344              <1>     db 2, "CD"
    23 0000020B 6309                <1>     dw chdir - startLbl
    24                              <1> 
    25 0000020D 054348444952        <1>     db 5, "CHDIR"
    26 00000213 6309                <1>     dw chdir - startLbl
    27                              <1> 
    28 00000215 024D44              <1>     db 2, "MD"
    29 00000218 6309                <1>     dw mkdir - startLbl
    30                              <1> 
    31 0000021A 054D4B444952        <1>     db 5, "MKDIR"
    32 00000220 6309                <1>     dw mkdir - startLbl
    33                              <1> 
    34 00000222 025244              <1>     db 2, "RD"
    35 00000225 6309                <1>     dw rmdir - startLbl
    36                              <1> 
    37 00000227 05524D444952        <1>     db 5, "RMDIR"
    38 0000022D 6309                <1>     dw rmdir - startLbl
    39                              <1> 
    40 0000022F 0344454C            <1>     db 3, "DEL"
    41 00000233 6309                <1>     dw erase - startLbl
    42                              <1> 
    43 00000235 054552415345        <1>     db 5, "ERASE"
    44 0000023B 6309                <1>     dw erase - startLbl
    45                              <1> 
    46 0000023D 0444415445          <1>     db 4, "DATE"
    47 00000242 6309                <1>     dw date - startLbl
    48                              <1> 
    49 00000244 0454494D45          <1>     db 4, "TIME"
    50 00000249 6309                <1>     dw time - startLbl
    51                              <1> 
    52 0000024B 04434F5059          <1>     db 4, "COPY"
    53 00000250 6309                <1>     dw copy - startLbl
    54                              <1> 
    55 00000252 0443545459          <1>     db 4, "CTTY"
    56 00000257 6309                <1>     dw ctty - startLbl
    57                              <1> 
    58 00000259 03434C53            <1>     db 3, "CLS"
    59 0000025D 6309                <1>     dw cls - startLbl
    60                              <1> 
    61 0000025F 05425245414B        <1>     db 5, "BREAK"
    62 00000265 D509                <1>     dw break - startLbl
    63                              <1> 
    64 00000267 0752454E414D45      <1>     db 7, "RENAME"
    65 0000026E D509                <1>     dw rename - startLbl
    66                              <1> 
    67 00000270 FF                  <1>     db -1   ;End of table
    13                                  %include "./Source/Utils/COMMAND/Data/cmdMsg.asm"
    14                              <1> ;COMMAND.COM Messages and strings
    15 00000271 0D0A24              <1> crlf    db  CR,LF,"$"
    16 00000274 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
    16 0000027D 696C65206D69737369- <1>
    16 00000286 6E670D0A24          <1>
    17 0000028B 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
    17 00000294 6469736B2077697468- <1>
    17 0000029D 206261746368206669- <1>
    17 000002A6 6C65                <1>
    18 000002A8 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
    18 000002B1 737320616E79206B65- <1>
    18 000002BA 79207768656E207265- <1>
    18 000002C3 6164790D0A24        <1>
    19 000002C9 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
    19 000002D2 6E64206F722066696C- <1>
    19 000002DB 65206E616D650D0A24  <1>
    20 000002E4 4475706C6963617465- <1> dupName db  "Duplicate file name or "
    20 000002ED 2066696C65206E616D- <1>
    20 000002F6 65206F7220          <1>
    21 000002FB 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    21 00000304 666F756E640D0A24    <1>
    22 0000030C 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    22 00000315 656E74206469736B20- <1>
    22 0000031E 73706163650D0A24    <1>
    23 00000326 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    23 0000032F 7669726F6E6D656E74- <1>
    23 00000338 2073706163650D0A24  <1>
    24 00000341 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    24 0000034A 74696F6E206572726F- <1>
    24 00000353 720D0A24            <1>
    25 00000357 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    25 00000360 6F7420626520636F70- <1>
    25 00000369 696564206F6E746F20- <1>
    25 00000372 697473656C660D0A24  <1>
    26 0000037B 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    26 00000384 662064657374696E61- <1>
    26 0000038D 74696F6E206C6F7374- <1>
    26 00000396 206265666F72652063- <1>
    26 0000039F 6F70790D0A24        <1>
    27                              <1> ;Copy end message. First write # files copied then this message 
    28 000003A5 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    28 000003AE 636F706965640D0A24  <1>
    29                              <1> ;Dir end1 msg. First write # files in dir then this
    30 000003B7 2046696C6528732920- <1> dirOk   db  " File(s) ", "$"
    30 000003C0 24                  <1>
    31                              <1> ;Dir end2 msg. First write # bytes free then this message
    32 000003C1 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    32 000003CA 65650D0A24          <1>
    33 000003CF 203C4449523E202020- <1> dirLbl  db  " <DIR>   $"
    33 000003D8 24                  <1>
    34                              <1> 
    35 000003D9 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    35 000003E2 726976652073706563- <1>
    35 000003EB 696669636174696F6E- <1>
    35 000003F4 0D0A24              <1>
    36 000003F7 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    36 00000400 6B6579207768656E20- <1>
    36 00000409 7265616479202E202E- <1>
    36 00000412 202E2024            <1>
    37 00000416 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    37 0000041F 6172616D657465720D- <1>
    37 00000428 0A24                <1>
    38                              <1> 
    39 0000042A 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    39 00000433 576564546875467269- <1>
    39 0000043C 536174              <1>
    40 0000043F 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    40 00000448 206461746524        <1>
    41 0000044E 43757272656E742064- <1> curDate db  "Current date is $"
    41 00000457 6174652069732024    <1>
    42 0000045F 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date: $"
    42 00000468 657720646174653A20- <1>
    42 00000471 24                  <1>
    43 00000472 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    43 0000047B 2074696D6524        <1>
    44 00000481 43757272656E742074- <1> curTime db  "Current time is $"
    44 0000048A 696D652069732024    <1>
    45 00000492 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    45 0000049B 65772074696D653A20- <1>
    45 000004A4 24                  <1>
    46                              <1> 
    47 000004A5 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    47 000004AE 7572652028592F4E29- <1>
    47 000004B7 3F2024              <1>
    48                              <1> 
    49 000004BA 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    49 000004C3 56657273696F6E2024  <1>
    50                              <1> dosVerL equ $ - dosVer
    51                              <1> 
    52 000004CC 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    52 000004D5 6E2064726976652024  <1>
    53 000004DE 2069732024          <1> volOk   db " is $"
    54 000004E3 20686173206E6F206C- <1> volNo   db " has no label$"
    54 000004EC 6162656C24          <1>
    55                              <1> 
    56 000004F1 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    56 000004FA 69726563746F72790D- <1>
    56 00000503 0A24                <1>
    57 00000505 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    57 0000050E 206372656174652064- <1>
    57 00000517 69726563746F72790D- <1>
    57 00000520 0A24                <1>
    58 00000522 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    58 0000052B 6174682C206E6F7420- <1>
    58 00000534 6469726563746F7279- <1>
    58 0000053D 2C0D0A              <1>
    59 00000540 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    59 00000549 6F7279206E6F742065- <1>
    59 00000552 6D7074790D0A24      <1>
    60 00000559 204469726563746F72- <1> dirMain db " Directory of $"
    60 00000562 79206F662024        <1>
    61 00000568 4E6F20506174682024  <1> noPath  db "No Path $"
    62 00000571 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    62 0000057A 7269766520696E2073- <1>
    62 00000583 656172636820706174- <1>
    62 0000058C 680D0A24            <1>
    63 00000590 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    63 00000599 65766963650D0A24    <1>
    64 000005A1 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    64 000005AA 20666F756E640D0A24  <1>
    65 000005B3 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    65 000005BC 726F720D0A24        <1>
    66 000005C2 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    66 000005CB 6F74206265206E6573- <1>
    66 000005D4 7465640D0A24        <1>
    67 000005DA 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    67 000005E3 6174652066696C6520- <1>
    67 000005EC 6572726F7220647572- <1>
    67 000005F5 696E6720706970650D- <1>
    67 000005FE 0A24                <1>
    68 00000600 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    68 00000609 2062696E6172792072- <1>
    68 00000612 656164732066726F6D- <1>
    68 0000061B 206120646576696365- <1>
    68 00000624 0D0A24              <1>
    69 00000627 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    70 0000062D 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    71 00000632 425245414B20697320- <1> breakIs db "BREAK is $"
    71 0000063B 24                  <1>
    72 0000063C 564552494659206973- <1> verifyIs    db "VERIFY is $"
    72 00000645 2024                <1>
    73 00000647 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    74 00000650 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    74 00000659 617468206F72206669- <1>
    74 00000662 6C65206E616D650D0A- <1>
    74 0000066B 24                  <1>
    75 0000066C 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    75 00000675 756D626572206F6620- <1>
    75 0000067E 706172616D65746572- <1>
    75 00000687 730D0A24            <1>
    76 0000068B 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    76 00000694 74696E6720746F2064- <1>
    76 0000069D 6576696365          <1>
    77 000006A2 08200800            <1> backSpace   db BSP," ",BSP,NUL
    78                              <1> 
    79 000006A6 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    80                              <1> 
    81 000006AA 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    81 000006B3 696679204F4E206F72- <1>
    81 000006BC 204F46460D0A24      <1>
    82 000006C3 504154483D          <1> pathEVar db "PATH="
    83 000006C8 50524F4D50543D      <1> promptEVar  db "PROMPT="
    14                                  %include "./Source/Utils/COMMAND/Source/cmdMain.asm"
    15                              <1> commandStart:
    16                              <1>     ;Resize Allocation, jump here with endpointer in rbx
    17                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
    18                              <1>     ; that the jump to safety won't be gobbled up when multitasking
    19 000006CF 49F7D8              <1>     neg r8  ;Convert r8 to -r8
    20 000006D2 4A8D5C0311          <1>     lea rbx, qword [rbx + r8 + 11h]    ;Get # of bytes for COMMAND.COM
    21 000006D7 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
    22 000006DA B44A                <1>     mov ah, 4Ah ;Realloc
    23 000006DC 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    24 000006DF CD41                <1>     int 41h
    25 000006E1 EB5A                <1>     jmp short commandMain
    26                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    27 000006E3 B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    28 000006E8 CD41                <1>     int 41h
    29 000006EA 6689051CF9FFFF      <1>     mov word [returnCode], ax
    30                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    31 000006F1 488D1515040000      <1>     lea rdx, critErrorHandler
    32 000006F8 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    33 000006FC B844250000          <1>     mov eax, 2544h
    34 00000701 CD41                <1>     int 41h
    35 00000703 488D1593060000      <1>     lea rdx, int43h
    36 0000070A 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    37 0000070E B843250000          <1>     mov eax, 2543h
    38 00000713 CD41                <1>     int 41h
    39 00000715 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    40 0000071C 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    41 00000720 B842250000          <1>     mov eax, 2542h
    42 00000725 CD41                <1>     int 41h
    43                              <1> ;Close all handles from 5->MAX
    44 00000727 0FB70DF1F8FFFF      <1>     movzx ecx, word [numHdls]
    45 0000072E BB05000000          <1>     mov ebx, 5
    46                              <1> .handleClose:
    47 00000733 B43E                <1>     mov ah, 3Eh ;File close
    48 00000735 CD41                <1>     int 41h
    49 00000737 FFC3                <1>     inc ebx ;Goto next file
    50 00000739 39CB                <1>     cmp ebx, ecx
    51 0000073B 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    52                              <1> commandMain:
    53                              <1> ;Setup Commandline
    54 0000073D FA                  <1>     cli
    55 0000073E 488B25C0F8FFFF      <1>     mov rsp, qword [stackBottom]    ;Reset internal stack pointer pos
    56 00000745 FB                  <1>     sti
    57 00000746 FC                  <1>     cld ;Ensure stringops are done the right way
    58 00000747 C60522F9FFFF80      <1>     mov byte [inBuffer], 80h    ;Reset the buffer length
    59 0000074E 41C680[F0000000]80  <1>     mov byte [r8 + cmdBuffer], 80h  ;Reset the processed buffer length
    60                              <1> .inputMain:
    61 00000756 E87A020000          <1>     call printCRLF
    62 0000075B E81A000000          <1>     call printPrompt
    63                              <1> 
    64 00000760 488D1509F9FFFF      <1>     lea rdx, inBuffer
    65 00000767 B80A0C0000          <1>     mov eax, 0C0Ah  ;Do Buffered input
    66 0000076C CD41                <1>     int 41h
    67 0000076E E862020000          <1>     call printCRLF  ;Note we have accepted input
    68                              <1> 
    69 00000773 E84D000000          <1>     call doCommandLine
    70 00000778 EBDC                <1>     jmp short .inputMain
    71                              <1> 
    72                              <1> printPrompt:
    73 0000077A 66813D9EF8FFFFFFFF  <1>     cmp word [promptPtr], -1
    74 00000783 750B                <1>     jne .validPrompt
    75                              <1>     ;Here we print the default prompt
    76 00000785 E8B5020000          <1>     call putCWDInPrompt
    77 0000078A E89B020000          <1>     call putGTinPrompt
    78                              <1>     return
    19                              <2> %%_ret:
    20 0000078F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    79                              <1> .validPrompt:
    80                              <1>     return
    19                              <2> %%_ret:
    20 00000790 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    81                              <1> 
    82                              <1> 
    83                              <1> int4Eh:   ;Interrupt interface for parsing and executing command lines
    84                              <1> ;Input: rsi points to the count byte of a command line
    85 00000791 4150                <1>     push r8
    86 00000793 4151                <1>     push r9
    87 00000795 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
    88 00000797 CD41                <1>     int 41h
    89 00000799 52                  <1>     push rdx    ;Save on the stack
    90 0000079A 488D1D5FF7FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
    91 000007A1 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
    92 000007A3 CD41                <1>     int 41h
    93 000007A5 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
    94 000007A8 4989D9              <1>     mov r9, rbx
    95 000007AB 498DB8[F0000000]    <1>     lea rdi, qword [r8 + cmdBuffer]
    96 000007B2 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
    97 000007B7 F348A5              <1>     rep movsq   ;Copy command line over
    98                              <1>     ;call doCommandLine
    99 000007BA 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   100 000007BB B450                <1>     mov ah, 50h ;Set Current PSP
   101 000007BD CD41                <1>     int 41h
   102 000007BF 4159                <1>     pop r9
   103 000007C1 4158                <1>     pop r8
   104 000007C3 48CF                <1>     iretq
   105                              <1> doCommandLine:    ;And this is how we enter it normally
   106                              <1> ;r8 must be pointing to COMMAND.COM's internal PSP
   107 000007C5 488D35A5F8FFFF      <1>     lea rsi, qword [inBuffer + 1]   ;Point to count byte
   108 000007CC 803E00              <1>     cmp byte [rsi], 0   ;If the string has length 0, empty string
   109                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000007CF 74(90)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   110 000007D1 48FFC6              <1>     inc rsi ;Goto first char in string
   111 000007D4 488D3D84F8FFFF      <1>     lea rdi, cmdFcb   ;Parse into fcb
   112 000007DB B801290000          <1>     mov eax, 2901h ;Parse FCB and skip leading spaces
   113 000007E0 CD41                <1>     int 41h
   114 000007E2 3C01                <1>     cmp al, 1   ;Command cannot have wildcards in the name
   115 000007E4 7428                <1>     je .dfltErrExit
   116 000007E6 803E0D              <1>     cmp byte [rsi], CR  ;Are we at a carriage return, i.e. end of string?
   117 000007E9 742F                <1>     je .endOneField     ;After one iteration, if we reached CR, now process
   118                              <1>     ;If the terminator is pathsep, build a pathstring
   119 000007EB 8A0532F8FFFF        <1>     mov al, byte [pathSep]
   120 000007F1 3806                <1>     cmp byte [rsi], al
   121 000007F3 754B                <1>     jne .commandCase
   122                              <1>     ;Path resolving here
   123                              <1>     ;Go to the end of the path to see if we have a .COM, .EXE or .BAT
   124                              <1> .resolve:
   125 000007F5 48FFC6              <1>     inc rsi ;Go past the terminator
   126 000007F8 B801290000          <1>     mov eax, 2901h ;Parse FCB and skip leading spaces
   127 000007FD CD41                <1>     int 41h
   128 000007FF 8A051EF8FFFF        <1>     mov al, byte [pathSep]
   129 00000805 3806                <1>     cmp byte [rsi], al  ;Keep going if pathsep
   130 00000807 74EC                <1>     je .resolve
   131                              <1>     ;We stop looping if we are at the end of the path.
   132 00000809 E9DF000000          <1>     jmp .external
   133                              <1> .dfltErrExit:
   134 0000080E 488D15B4FAFFFF      <1>     lea rdx, badCmd
   135 00000815 B409                <1>     mov ah, 09h
   136 00000817 CD41                <1>     int 41h
   137                              <1>     return
    19                              <2> %%_ret:
    20 00000819 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   138                              <1> .endOneField:
   139                              <1> ;rsi points to the CR
   140 0000081A 807F0120            <1>     cmp byte [rdi + fcb.filename], " "  ;Filename cannot begin with space
   141 0000081E 7520                <1>     jne .commandCase
   142                              <1>     ;Here we have an empty filename, but a drive letter may have been specified
   143 00000820 3CFF                <1>     cmp al, -1
   144 00000822 7410                <1>     je .badDrive
   145 00000824 8A17                <1>     mov dl, byte [rdi + fcb.driveNum]  ;1 based drive letter
   146 00000826 FECA                <1>     dec dl  ;Convert to 0 based drive letter
   147 00000828 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   148 0000082A CD41                <1>     int 41h 
   149 0000082C B419                <1>     mov ah, 19h
   150 0000082E CD41                <1>     int 41h     ;Get current drive
   151 00000830 38D0                <1>     cmp al, dl  ;If the drive was set, all is well
   152                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000832 74(19)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   153                              <1> .badDrive:
   154 00000834 488D159EFBFFFF      <1>     lea rdx, badDrv
   155 0000083B B409                <1>     mov ah, 09h
   156 0000083D CD41                <1>     int 41h
   157                              <1>     return
    19                              <2> %%_ret:
    20 0000083F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   158                              <1> .commandCase:
   159                              <1> ;Here we check if the word was an installed or internal command before 
   160                              <1> ; attempting to launching it as an external command
   161                              <1>     ;breakpoint
   162 00000840 56                  <1>     push rsi    ;Save rsi's current position in the command tail on stack
   163                              <1>     ;Move the name from the FCB to the buffer
   164 00000841 31C9                <1>     xor ecx, ecx
   165 00000843 488D1D15F8FFFF      <1>     lea rbx, cmdFcb ;Find char count, scan for the first space
   166 0000084A 488D7B01            <1>     lea rdi, qword [rbx + 1]    ;Skip byte 0 for scan
   167 0000084E B020                <1>     mov al, " " ;Scan for a space
   168 00000850 31C9                <1>     xor ecx, ecx
   169 00000852 FFC9                <1>     dec ecx ;Make ecx = -1 in three bytes
   170 00000854 F2AE                <1>     repne scasb
   171 00000856 F7D1                <1>     not ecx ;Now ecx has the count of chars including the space
   172 00000858 FFC9                <1>     dec ecx ;so remove the terminating space from the count
   173 0000085A 880B                <1>     mov byte [rbx], cl  ;Store the byte count here
   174 0000085C 488D350DF8FFFF      <1>     lea rsi, inBuffer ;Point to our internal buffer
   175 00000863 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   176 00000868 BAFFFF0000          <1>     mov edx, 0FFFFh
   177 0000086D B5FF                <1>     mov ch, -1
   178 0000086F CD4F                <1>     int 4Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   179                              <1>             ;        al = 0  if the command should be executed as usual
   180 00000871 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   181 00000876 BAFFFF0000          <1>     mov edx, 0FFFFh
   182 0000087B 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   183 0000087D CD4F                <1>     int 4Fh
   184 0000087F 5E                  <1>     pop rsi ;Get back rsi's position in command tail (after command name)
   185 00000880 84C0                <1>     test al, al
   186 00000882 741D                <1>     jz .executeInternal
   187                              <1>     ;Here we execute externally and return to the prompt
   188                              <1>     ; as if it was an internal execution
   189 00000884 488D35E5F7FFFF      <1>     lea rsi, inBuffer ;Point to this built buffer
   190 0000088B 488D1DCDF7FFFF      <1>     lea rbx, cmdFcb
   191 00000892 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   192 00000897 BAFFFF0000          <1>     mov edx, 0FFFFh
   193 0000089C B5FF                <1>     mov ch, -1
   194 0000089E CD4F                <1>     int 4Fh 
   195                              <1>     return
    19                              <2> %%_ret:
    20 000008A0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   196                              <1> .executeInternal:
   197                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   198                              <1> ;rsi points after the command terminator in the command tail
   199 000008A1 488D1D5AF9FFFF      <1>     lea rbx, functionTable
   200                              <1> .nextEntry:
   201 000008A8 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   202 000008AB 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   203 000008AE 743D                <1>     je .external      ;If so, check externally now
   204 000008B0 380DA9F7FFFF        <1>     cmp byte [cmdFcb], cl  ;Is command length the same as the tbl entry length?
   205 000008B6 7529                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   206                              <1>     ;Here they have the same length so lets see if the name is the same
   207 000008B8 56                  <1>     push rsi
   208                              <1>     ;ecx has the length to compare
   209 000008B9 51                  <1>     push rcx
   210 000008BA 488D7301            <1>     lea rsi, qword [rbx + 1]
   211 000008BE 488D3D9BF7FFFF      <1>     lea rdi, qword [cmdFcb + 1]   ;Go to the name portion
   212 000008C5 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   213 000008C7 59                  <1>     pop rcx
   214 000008C8 5E                  <1>     pop rsi
   215 000008C9 7516                <1>     jne .gotoNextEntry
   216                              <1>     ;Here it was found both strings are equal
   217 000008CB 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   218 000008D0 480FB71F            <1>     movzx rbx, word [rdi]
   219 000008D4 488D3D25F7FFFF      <1>     lea rdi, startLbl
   220 000008DB 4801FB              <1>     add rbx, rdi
   221 000008DE FFD3                <1>     call rbx    ;Call this function...
   222                              <1>     return  ;... and return
    19                              <2> %%_ret:
    20 000008E0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   223                              <1> .gotoNextEntry:
   224 000008E1 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   225 000008E8 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   226 000008EB EBBB                <1>     jmp short .nextEntry
   227                              <1> 
   228                              <1> .external:
   229                              <1> ;Here we must search the CWD or all path componants before failing
   230                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
   231 000008ED E81B000000          <1>     call checkExtensionExec ;ZF=ZE => Executable
   232 000008F2 0F8516FFFFFF        <1>     jnz .dfltErrExit
   233                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
   234 000008F8 0F8210FFFFFF        <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
   235                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
   236                              <1>     ;So it is a com or exe that we are searching for
   237 000008FE E90BFFFFFF          <1>     jmp .dfltErrExit
   238                              <1> 
   239                              <1> 
   240                              <1> skipSpaces:
   241                              <1> ;Input: rsi must point to the start of the data string
   242                              <1> ;Output: rsi points to the first non-space char
   243 00000903 803E20              <1>     cmp byte [rsi], " "
   244                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000906 75(E0)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   245 00000908 48FFC6              <1>     inc rsi
   246 0000090B EBF6                <1>     jmp short skipSpaces
   247                              <1> 
   248                              <1> checkExtensionExec:
   249                              <1> ;Checks the extension field of cmdFcb is .COM, .EXE, .BAT in that order
   250                              <1> ;Returns: ZF=ZE if executable. ZF=NZ if not executable.
   251                              <1> ;         If ZF=ZE and CF=CY => Batch file
   252 0000090D 803D54F7FFFF43      <1>     cmp byte [cmdFcb + fcb.fileext], "C"
   253 00000914 750A                <1>     jne .notCOM
   254 00000916 66813D4AF7FFFF4F4D  <1>     cmp word [cmdFcb + fcb.fileext + 1], "OM"
   255                              <1>     return
    19                              <2> %%_ret:
    20 0000091F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   256                              <1> .notCOM:
   257 00000920 803D41F7FFFF45      <1>     cmp byte [cmdFcb + fcb.fileext], "E"
   258 00000927 750A                <1>     jne .batFile
   259 00000929 66813D37F7FFFF5845  <1>     cmp word [cmdFcb + fcb.fileext + 1], "XE"
   260                              <1>     return
    19                              <2> %%_ret:
    20 00000932 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   261                              <1> .batFile:
   262 00000933 803D2EF7FFFF42      <1>     cmp byte [cmdFcb + fcb.fileext], "B"
   263                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000093A 75(32)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   264 0000093C 66813D24F7FFFF4154  <1>     cmp word [cmdFcb + fcb.fileext + 1], "AT"
   265                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000945 75(32)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   266 00000947 F9                  <1>     stc
   267                              <1>     return
    19                              <2> %%_ret:
    20 00000948 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   268                              <1> 
   269                              <1> resetCommandLineState:
   270                              <1> ;Clears the vars that track the state of a command line
   271                              <1> ;Called every time we enter command line processor for a NEW command line
   272                              <1> ;Not called when returning from a pipe.
   273                              <1> ; In that case only clear redir vars when returning from executing command
   274 00000949 50                  <1>     push rax
   275 0000094A 51                  <1>     push rcx
   276 0000094B 57                  <1>     push rdi
   277 0000094C 488D3DD2F6FFFF      <1>     lea rdi, cmdLineState
   278 00000953 B914000000          <1>     mov ecx, cmdLineStateL
   279 00000958 31C0                <1>     xor eax, eax
   280 0000095A F3AA                <1>     rep stosb
   281 0000095C 58                  <1>     pop rax
   282                              <1>     return
    19                              <2> %%_ret:
    20 0000095D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   283                              <1> 
   284                              <1> 
    15                                  %include "./Source/Utils/COMMAND/Source/cmdFunc.asm"
    16                              <1> dir:
    17                              <1>     ;If a particular path is given, we search for it.
    18                              <1>     ;Else, if rsi is pointing at CR, . or " " we search in CWD for *.*
    19 0000095E 803E0D              <1>     cmp byte [rsi], CR
    20 00000961 7400                <1>     je .searchCWD
    21                              <1> 
    22                              <1> .searchCWD:
    23                              <1> chdir:
    24                              <1> mkdir:
    25                              <1> rmdir:
    26                              <1> erase:
    27                              <1> date:
    28                              <1> time:
    29                              <1> copy:
    30                              <1> ctty:
    31                              <1> cls:  
    32 00000963 B800440000          <1>     mov eax, 4400h  ;Get device info
    33 00000968 BB01000000          <1>     mov ebx, 1      ;for handle 1
    34 0000096D CD41                <1>     int 41h         ;in dx
    35 0000096F F7C280000000        <1>     test edx, devCharDev
    36 00000975 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
    37 00000977 F7C210000000        <1>     test edx, charDevFastOut
    38 0000097D 743E                <1>     jz .doAnsi
    39                              <1>     ;Test if Int 49h uses Int 30h
    40                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
    41                              <1>     ;Int 49h MUST be terminated with a IRETQ, within 1024 bytes
    42 0000097F B849350000          <1>     mov eax, 3549h  ;Get the vector for interrupt 49h
    43 00000984 CD41                <1>     int 41h
    44                              <1> .biosCheck:
    45 00000986 66813BCD30          <1>     cmp word [rbx], 30CDh
    46 0000098B 740C                <1>     je .biosConfirmed
    47 0000098D 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
    48 00000992 7429                <1>     je .doAnsi
    49 00000994 48FFC3              <1>     inc rbx
    50 00000997 EBED                <1>     jmp short .biosCheck
    51                              <1> .biosConfirmed:
    52                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
    53 00000999 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
    54 0000099B 31DB                <1>     xor ebx, ebx
    55 0000099D CD30                <1>     int 30h
    56 0000099F B40F                <1>     mov ah, 0Fh ;Get screen mode
    57 000009A1 CD30                <1>     int 30h
    58 000009A3 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
    59 000009A6 FECA                <1>     dec dl
    60 000009A8 B619                <1>     mov dh, 25  ;Number of rows is standard
    61 000009AA 31C0                <1>     xor eax, eax
    62 000009AC 89C1                <1>     mov ecx, eax
    63 000009AE B707                <1>     mov bh, 7   ;Screen attributes
    64 000009B0 B406                <1>     mov ah, 6   ;Scroll
    65 000009B2 CD30                <1>     int 30h
    66 000009B4 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
    67 000009B6 B700                <1>     mov bh, 0   ;Page 0
    68 000009B8 B402                <1>     mov ah, 2
    69 000009BA CD30                <1>     int 30h
    70                              <1>     return
    19                              <2> %%_ret:
    20 000009BC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    71                              <1> .doAnsi:
    72                              <1> ;If an ANSI driver is not installed, this will simply insert blank lines
    73                              <1> ;4 chars in the ansi routine
    74                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
    75                              <1> ; understand ANSI codes
    76 000009BD 488D35E2FCFFFF      <1>     lea rsi, ansiCls
    77 000009C4 B904000000          <1>     mov ecx, 4
    78 000009C9 B406                <1>     mov ah, 06h ;Raw char output
    79                              <1> .ansiLp:
    80 000009CB AC                  <1>     lodsb   ;Get the char in 
    81 000009CC 88C2                <1>     mov dl, al
    82 000009CE CD41                <1>     int 41h
    83 000009D0 FFC9                <1>     dec ecx
    84 000009D2 75F7                <1>     jnz .ansiLp
    85                              <1>     return
    19                              <2> %%_ret:
    20 000009D4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    86                              <1> 
    87                              <1> break:
    88                              <1> rename:
    89                              <1> launchChild:
    90                              <1> ;We run EXEC on this and the child task will return via applicationReturn
    16                                  %include "./Source/Utils/COMMAND/Source/cmdUtils.asm"
    17                              <1> ;Misc functions and subroutines for command.com
    18                              <1> 
    19                              <1> printCRLF:
    20 000009D5 488D1595F8FFFF      <1>     lea rdx, crlf
    21 000009DC BB02000000          <1>     mov ebx, 2
    22 000009E1 B440                <1>     mov ah, 40h ;Print a new line
    23 000009E3 B902000000          <1>     mov ecx, 2  ;Two chars to write
    24 000009E8 CD41                <1>     int 41h
    25                              <1>     return
    19                              <2> %%_ret:
    20 000009EA C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    26                              <1> 
    27                              <1> putDateInPrompt:
    28                              <1> putTimeInPrompt:
    29                              <1>     return
    19                              <2> %%_ret:
    20 000009EB C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    30                              <1> 
    31                              <1> putVersionInPrompt:
    32 000009EC 488D15C7FAFFFF      <1>     lea rdx, dosVer
    33 000009F3 B409                <1>     mov ah, 09h ;Print String
    34 000009F5 CD41                <1>     int 41h
    35 000009F7 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
    36 000009F9 CD41                <1>     int 41h
    37 000009FB 50                  <1>     push rax    ;Save minor version
    38 000009FC E89C000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
    39 00000A01 E8B4000000          <1>     call printPackedBCD ;Print al
    40 00000A06 B22E                <1>     mov dl, "."
    41 00000A08 B402                <1>     mov ah, 02h
    42 00000A0A CD41                <1>     int 41h
    43 00000A0C 58                  <1>     pop rax
    44 00000A0D 88E0                <1>     mov al, ah  ;Get the minor version low
    45 00000A0F E889000000          <1>     call hexToBCD
    46 00000A14 E8A1000000          <1>     call printPackedBCD
    47                              <1>     return
    19                              <2> %%_ret:
    20 00000A19 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    48                              <1> putEscInPrompt:
    49 00000A1A B21B                <1>     mov dl, ESC
    50 00000A1C EB1C                <1>     jmp short outChar
    51                              <1> 
    52                              <1> putMoneyInPrompt:
    53 00000A1E B224                <1>     mov dl, "$"
    54 00000A20 EB18                <1>     jmp short outChar
    55                              <1> 
    56                              <1> putEquInPrompt:
    57 00000A22 B23D                <1>     mov dl, "="
    58 00000A24 EB14                <1>     jmp short outChar
    59                              <1> 
    60                              <1> putPipeInPrompt:
    61 00000A26 B27C                <1>     mov dl, "|"
    62 00000A28 EB10                <1>     jmp short outChar
    63                              <1> 
    64                              <1> putGTinPrompt:
    65 00000A2A B23E                <1>     mov dl, ">"
    66 00000A2C EB0C                <1>     jmp short outChar
    67                              <1> 
    68                              <1> putLTinPrompt:
    69 00000A2E B23C                <1>     mov dl, "<"
    70 00000A30 EB08                <1>     jmp short outChar
    71                              <1> 
    72                              <1> putDriveInPrompt:
    73 00000A32 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
    74 00000A34 CD41                <1>     int 41h
    75 00000A36 0441                <1>     add al, "A" ;Convert to letter
    76 00000A38 88C2                <1>     mov dl, al
    77                              <1> outChar:
    78 00000A3A B402                <1>     mov ah, 02h ;Echo to STDOUT
    79 00000A3C CD41                <1>     int 41h
    80                              <1>     return
    19                              <2> %%_ret:
    20 00000A3E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    81                              <1> putCWDInPrompt:
    82 00000A3F 488D3D2AF7FFFF      <1>     lea rdi, currDirStr ;Update the current directory string
    83 00000A46 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
    84 00000A48 CD41                <1>     int 41h
    85 00000A4A 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
    86 00000A4C FEC2                <1>     inc dl
    87 00000A4E 0441                <1>     add al, "A" ;Convert to letter
    88 00000A50 B43A                <1>     mov ah, ":"
    89 00000A52 66AB                <1>     stosw   ;Store X:, rdi+=2
    90 00000A54 8A05C9F5FFFF        <1>     mov al, byte [pathSep]
    91 00000A5A AA                  <1>     stosb   ;Store pathSep, inc rdi
    92 00000A5B B447                <1>     mov ah, 47h ;Get Current Working Directory
    93 00000A5D 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
    94 00000A60 CD41                <1>     int 41h
    95 00000A62 E874000000          <1>     call strlen
    96 00000A67 81C102000000        <1>     add ecx, 2 ;Add two for the X:
    97                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
    98 00000A6D B440                <1>     mov ah, 40h ;Write to handle
    99 00000A6F BB01000000          <1>     mov ebx, 1  ;STDOUT
   100 00000A74 488D15F5F6FFFF      <1>     lea rdx, currDirStr
   101 00000A7B CD41                <1>     int 41h
   102                              <1>     return
    19                              <2> %%_ret:
    20 00000A7D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   103                              <1> 
   104                              <1> BCDtoHex:
   105                              <1> ;Converts a BCD value to a Hex byte
   106                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   107 00000A7E 51                  <1>     push rcx
   108 00000A7F 0FB6C0              <1>     movzx eax, al   ;Zero extend
   109 00000A82 89C1                <1>     mov ecx, eax    ;Save al in ecx
   110 00000A84 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   111 00000A89 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   112 00000A8F C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   113                              <1> .bth:
   114 00000A92 050A000000          <1>     add eax, 10
   115 00000A97 FFC9                <1>     dec ecx
   116 00000A99 75F7                <1>     jnz .bth
   117 00000A9B 59                  <1>     pop rcx
   118 00000A9C C3                  <1>     ret
   119                              <1> 
   120                              <1> hexToBCD:
   121                              <1> ;Converts a Hex byte into two BCD digits
   122                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   123 00000A9D 51                  <1>     push rcx
   124 00000A9E 0FB6C0              <1>     movzx eax, al   ;Zero extend
   125 00000AA1 31C9                <1>     xor ecx, ecx
   126                              <1> .htb0:
   127 00000AA3 3D0A000000          <1>     cmp eax, 10
   128 00000AA8 7209                <1>     jb .htb1
   129 00000AAA 2D0A000000          <1>     sub eax, 10
   130 00000AAF FFC1                <1>     inc ecx
   131 00000AB1 EBF0                <1>     jmp short .htb0
   132                              <1> .htb1:
   133 00000AB3 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   134 00000AB6 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   135 00000AB8 59                  <1>     pop rcx
   136 00000AB9 C3                  <1>     ret
   137                              <1> printPackedBCD:
   138                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   139                              <1> ; then prints al[3:0]
   140                              <1> ;Preserves all registers
   141 00000ABA 50                  <1>     push rax
   142 00000ABB 52                  <1>     push rdx
   143 00000ABC 88C4                <1>     mov ah, al
   144 00000ABE 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   145 00000AC0 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   146 00000AC3 740B                <1>     jz .skipUpperNybble
   147 00000AC5 50                  <1>     push rax
   148 00000AC6 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   149 00000AC9 88E2                <1>     mov dl, ah
   150 00000ACB B402                <1>     mov ah, 02h ;Print DL
   151 00000ACD CD41                <1>     int 41h
   152 00000ACF 58                  <1>     pop rax
   153                              <1> .skipUpperNybble:
   154 00000AD0 0430                <1>     add al, "0"
   155 00000AD2 88C2                <1>     mov dl, al
   156 00000AD4 B402                <1>     mov ah, 02h ;Print DL
   157 00000AD6 CD41                <1>     int 41h
   158 00000AD8 5A                  <1>     pop rdx
   159 00000AD9 58                  <1>     pop rax
   160                              <1>     return
    19                              <2> %%_ret:
    20 00000ADA C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   161                              <1> 
   162                              <1> strlen:
   163                              <1> ;Gets the length of a ASCIIZ string
   164                              <1> ;Input: rdi = Source buffer
   165                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   166 00000ADB 50                  <1>     push rax
   167 00000ADC 57                  <1>     push rdi
   168 00000ADD 30C0                <1>     xor al, al
   169 00000ADF 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   170 00000AE1 FFC9                <1>     dec ecx ;rcx = -1
   171 00000AE3 F2AE                <1>     repne scasb
   172 00000AE5 F7D1                <1>     not ecx
   173 00000AE7 5F                  <1>     pop rdi
   174 00000AE8 58                  <1>     pop rax
   175                              <1>     return
    19                              <2> %%_ret:
    20 00000AE9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   176                              <1> 
   177                              <1> 
   178                              <1> findTerminator:
   179                              <1> ;Advances rsi to the next string terminator char
   180                              <1> ;Returns with rsi pointing to the terminating char and
   181                              <1> ; ZF=NZ if al is not a terminator (Not including CR)
   182                              <1> ; ZF=ZY if al is a terminator
   183 00000AEA AC                  <1>     lodsb
   184 00000AEB E806000000          <1>     call isALterminator
   185 00000AF0 75F8                <1>     jnz findTerminator
   186 00000AF2 48FFCE              <1>     dec rsi
   187                              <1>     return
    19                              <2> %%_ret:
    20 00000AF5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   188                              <1> isALterminator:
   189                              <1> ;Returns: ZF=NZ if al is not a terminator (Not including CR)
   190                              <1> ;         ZF=ZY if al is a terminator
   191 00000AF6 3C20                <1>     cmp al, " "
   192                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000AF8 74(F5)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   193 00000AFA 3C3B                <1>     cmp al, ";"
   194                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000AFC 74(F5)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   195 00000AFE 3C3D                <1>     cmp al, "="
   196                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000B00 74(F5)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   197 00000B02 3C2C                <1>     cmp al, ","
   198                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000B04 74(F5)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   199 00000B06 3C09                <1>     cmp al, TAB
   200                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000B08 74(F5)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   201 00000B0A 3C0A                <1>     cmp al, LF
   202                              <1>     return
    19                              <2> %%_ret:
    20 00000B0C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    17                                  %include "./Source/Utils/COMMAND/Source/int44h.asm"
    18                              <1> critErrorHandler:   ;Int 44h
    19                              <1> ;User Stack in usage here, must be swapped to before this is called
    20                              <1> ;Entered with:  
    21                              <1> ;               AH = Critical Error Bitfield
    22                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    23                              <1> ;               Bit 6 - Reserved
    24                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    25                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    26                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    27                              <1> ;               Bits [2-1] = Affected Disk Error
    28                              <1> ;                     0 0   DOS area
    29                              <1> ;                     0 1   FAT area
    30                              <1> ;                     1 0   Directory area
    31                              <1> ;                     1 1   Data area
    32                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    33                              <1> ;               AL  = Failing drive number if AH[7] = 0
    34                              <1> ;               DIL = Error code for errorMsg
    35                              <1> ;               RSI = EA of Device Header for which device the error occured
    36                              <1> ;Return:
    37                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    38                              <1> ;                  = 1 - Retry the Operation    (Retry)
    39                              <1> ;                  = 2 - Terminate the Program  (Abort)
    40                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    41 00000B0D 53                  <1>     push rbx
    42 00000B0E 51                  <1>     push rcx
    43 00000B0F 52                  <1>     push rdx
    44 00000B10 57                  <1>     push rdi
    45 00000B11 56                  <1>     push rsi
    46 00000B12 FC                  <1>     cld         ;Make String ops go forward
    47                              <1> 
    48 00000B13 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    49 00000B16 488D1554F7FFFF      <1>     lea rdx, crlf
    50 00000B1D B409                <1>     mov ah, 09h ;Print String
    51 00000B1F CD41                <1>     int 41h
    52                              <1> 
    53 00000B21 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    54 00000B27 B90C000000          <1>     mov ecx, 0Ch
    55 00000B2C 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    56 00000B2E 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    57 00000B31 480FB7FF            <1>     movzx rdi, di
    58 00000B35 4889FA              <1>     mov rdx, rdi    ;Copy error code
    59 00000B38 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    60 00000B3C 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    61 00000B3F 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    62 00000B42 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    63 00000B49 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    64 00000B4D B409                <1>     mov ah, 09h ;Print String
    65 00000B4F CD41                <1>     int 41h     ;Call DOS to print first part of message
    66                              <1> 
    67 00000B51 488D1505020000      <1>     lea rdx, qword [.readmsg]
    68 00000B58 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    69 00000B5F F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    70 00000B62 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    71 00000B66 B409                <1>     mov ah, 09h ;Print String
    72 00000B68 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    73                              <1> 
    74 00000B6A F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    75 00000B6D 0F85DF000000        <1>     jnz .charError
    76                              <1> ;Disk error continues here
    77 00000B73 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    78 00000B7A B409                <1>     mov ah, 09h
    79 00000B7C CD41                <1>     int 41h
    80 00000B7E 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    81 00000B80 80C241              <1>     add dl, "A" ;Add ASCII code
    82 00000B83 B402                <1>     mov ah, 02h ;Print char in dl
    83 00000B85 CD41                <1>     int 41h
    84                              <1> .userInput:
    85 00000B87 488D15E3F6FFFF      <1>     lea rdx, crlf  ;Print new line
    86 00000B8E B409                <1>     mov ah, 09h
    87 00000B90 CD41                <1>     int 41h
    88                              <1> ;Abort, Retry, Ignore, Fail is word order
    89                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    90                              <1> .userAbort:
    91                              <1> ;Abort is always an option
    92 00000B92 488D15E2010000      <1>     lea rdx, qword [.abortmsg]
    93 00000B99 B409                <1>     mov ah, 09h
    94 00000B9B CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
    95                              <1> .userRetry:
    96 00000B9D F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    97 00000BA0 7416                <1>     jz .userIgnore    ;If clear, dont print message
    98 00000BA2 488D15EA010000      <1>     lea rdx, qword [.betweenMsg]
    99 00000BA9 B409                <1>     mov ah, 09h
   100 00000BAB CD41                <1>     int 41h
   101 00000BAD 488D15D4010000      <1>     lea rdx, qword [.retrymsg]
   102 00000BB4 B409                <1>     mov ah, 09h
   103 00000BB6 CD41                <1>     int 41h
   104                              <1> .userIgnore:
   105 00000BB8 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   106 00000BBB 7416                <1>     jz .userFail
   107 00000BBD 488D15CF010000      <1>     lea rdx, qword [.betweenMsg]
   108 00000BC4 B409                <1>     mov ah, 09h
   109 00000BC6 CD41                <1>     int 41h
   110 00000BC8 488D15B2010000      <1>     lea rdx, qword [.ignoremsg]
   111 00000BCF B409                <1>     mov ah, 09h
   112 00000BD1 CD41                <1>     int 41h
   113                              <1> .userFail:
   114 00000BD3 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   115 00000BD6 7416                <1>     jz .userMsgEnd
   116 00000BD8 488D15B4010000      <1>     lea rdx, qword [.betweenMsg]
   117 00000BDF B409                <1>     mov ah, 09h
   118 00000BE1 CD41                <1>     int 41h
   119 00000BE3 488D15A4010000      <1>     lea rdx, qword [.failmsg]
   120 00000BEA B409                <1>     mov ah, 09h
   121 00000BEC CD41                <1>     int 41h
   122                              <1> .userMsgEnd:
   123 00000BEE 488D15A1010000      <1>     lea rdx, qword [.endMsg]
   124 00000BF5 B409                <1>     mov ah, 09h
   125 00000BF7 CD41                <1>     int 41h
   126                              <1> ;Get user input now 
   127 00000BF9 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   128 00000BFB 488D3D97010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   129 00000C02 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   130 00000C04 CD41                <1>     int 41h ;Get char in al
   131 00000C06 3C61                <1>     cmp al, "a" ;Chack if lowercase
   132 00000C08 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   133 00000C0A 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   134                              <1> .uip1:
   135 00000C0C AE                  <1>     scasb   ;Compare char to list, offset gives return code
   136 00000C0D 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   137 00000C0F FFC1                <1>     inc ecx
   138 00000C11 81F904000000        <1>     cmp ecx, 4
   139 00000C17 75F3                <1>     jne .uip1
   140 00000C19 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   141                              <1> .validInput:
   142 00000C1E 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   143                              <1> ;Now check if the input is permitted
   144 00000C20 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   145 00000C22 7427                <1>     je .cehExit
   146 00000C24 84C0                <1>     test al, al ;Check if 0 => Ignore
   147 00000C26 740F                <1>     je .viIgnore
   148 00000C28 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   149 00000C2A 7416                <1>     je .viRetry
   150                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   151 00000C2C F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   152 00000C2F 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   153 00000C35 EB14                <1>     jmp short .cehExit
   154                              <1> .viIgnore:
   155 00000C37 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   156 00000C3A 0F8447FFFFFF        <1>     jz .userInput
   157 00000C40 EB09                <1>     jmp short .cehExit
   158                              <1> .viRetry:
   159 00000C42 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   160 00000C45 0F843CFFFFFF        <1>     jz .userInput
   161                              <1> .cehExit:
   162 00000C4B 5E                  <1>     pop rsi
   163 00000C4C 5F                  <1>     pop rdi
   164 00000C4D 5A                  <1>     pop rdx
   165 00000C4E 59                  <1>     pop rcx
   166 00000C4F 5B                  <1>     pop rbx
   167 00000C50 48CF                <1>     iretq
   168                              <1> .charError:
   169 00000C52 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   170 00000C57 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   171                              <1> .ce1:
   172 00000C5E AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   173 00000C5F 88C2                <1>     mov dl, al  ;Move char into dl
   174 00000C61 B402                <1>     mov ah, 02h
   175 00000C63 CD41                <1>     int 41h ;Print char
   176 00000C65 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   177 00000C67 E91BFFFFFF          <1>     jmp .userInput
   178                              <1> 
   179                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   180 00000C6C 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   180 00000C75 746563742024202020  <1>
   181 00000C7E 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   181 00000C87 6E6974202420202020  <1>
   182 00000C90 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   182 00000C99 202420202020202020  <1>
   183 00000CA2 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   183 00000CAB 6F6D6D616E64202420  <1>
   184 00000CB4 446174612024202020- <1>             db "Data $            "       ;Error 4
   184 00000CBD 202020202020202020  <1>
   185 00000CC6 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   185 00000CCF 737420242020202020  <1>
   186 00000CD8 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   186 00000CE1 202020202020202020  <1>
   187 00000CEA 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   187 00000CF3 656469612024202020  <1>
   188 00000CFC 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   188 00000D05 7420466F756E642024  <1>
   189 00000D0E 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   189 00000D17 706572202420202020  <1>
   190 00000D20 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   190 00000D29 6C7420242020202020  <1>
   191 00000D32 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   191 00000D3B 742024202020202020  <1>
   192 00000D44 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   192 00000D4D 61696C757265202420  <1>
   193                              <1> 
   194 00000D56 64726976652024      <1> .drive      db "drive $"
   195 00000D5D 6572726F7220726561- <1> .readmsg    db "error reading $"
   195 00000D66 64696E672024        <1>
   196 00000D6C 6572726F7220777269- <1> .writemsg   db "error writing $"
   196 00000D75 74696E672024        <1>
   197 00000D7B 41626F727424        <1> .abortmsg   db "Abort$" 
   198 00000D81 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   199 00000D88 526574727924        <1> .retrymsg   db "Retry$"
   200 00000D8E 4661696C24          <1> .failmsg    db "Fail$"
   201 00000D93 2C2024              <1> .betweenMsg db ", $"
   202 00000D96 3F2024              <1> .endMsg     db "? $"
   203 00000D99 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   204                              <1> 
   205                              <1> int43h:
   206 00000D9D F9                  <1>     stc     ;Set CF to kill the task
   207 00000D9E C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    18                                  %include "./Source/Utils/COMMAND/Data/cmdEnv.asm"
    19                              <1>     
    20                              <1> masterEnv:  ;Yeet this is this is a child command processor
    21 00000DA1 5F3A434F4D4D414E44- <1>     db "_:COMMAND.COM",0
    21 00000DAA 2E434F4D00          <1>
    22 00000DAF 504154483D0000      <1>     db "PATH=",0,0
    23 00000DB6 202020202020202020- <1>     db ($ - masterEnv) dup (" ")    ;Pad the environment with spaces
    23 00000DBF 202020202020202020- <1>
    23 00000DC8 202020              <1>
    24                              <1> endOfAlloc: ;Symbol to find the start of where I can yeet 
    19                                  %include "./Source/Utils/COMMAND/Source/cmdLdr.asm"
    20                              <1> cmdLdr:
    21                              <1> ;First check if the version is ok. If not, return.
    22 00000DCB B430                <1>     mov ah, 30h
    23 00000DCD CD41                <1>     int 41h
    24 00000DCF 3C01                <1>     cmp al, 01h ;Version 1
    25 00000DD1 760D                <1>     jbe .okVersion
    26 00000DD3 488D1560010000      <1>     lea rdx, badVerStr
    27 00000DDA B409                <1>     mov ah, 09h
    28 00000DDC CD41                <1>     int 41h
    29 00000DDE CD40                <1>     int 40h ;Exit to caller or DOS to print bad command interpreter line
    30                              <1> .okVersion:
    31                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    32 00000DE0 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    33 00000DE4 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    34 00000DE8 48890520F2FFFF      <1>     mov qword [realParent], rax ;Preserve the real parent address
    35                              <1> ;Setup Int 43h and Int 44h
    36 00000DEF 488D1517FDFFFF      <1>     lea rdx, critErrorHandler
    37 00000DF6 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    38 00000DFA B844250000          <1>     mov eax, 2544h
    39 00000DFF CD41                <1>     int 41h
    40 00000E01 488D1595FFFFFF      <1>     lea rdx, int43h
    41 00000E08 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    42 00000E0C B843250000          <1>     mov eax, 2543h
    43 00000E11 CD41                <1>     int 41h
    44 00000E13 488D15C9F8FFFF      <1>     lea rdx, applicationReturn
    45 00000E1A 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    46 00000E1E B842250000          <1>     mov eax, 2542h
    47 00000E23 CD41                <1>     int 41h
    48                              <1> ;Get a pointer to DOS Sysvars
    49 00000E25 B452                <1>     mov ah, 52h ;Get sysvars
    50 00000E27 CD41                <1>     int 41h
    51 00000E29 48891DE7F1FFFF      <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    52                              <1> ;Call for simple internationalisation data
    53 00000E30 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    54 00000E35 CD41                <1>     int 41h
    55 00000E37 3CFF                <1>     cmp al, -1
    56 00000E39 7412                <1>     je .skipSwitch
    57 00000E3B 8815E3F1FFFF        <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    58 00000E41 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    59 00000E44 7507                <1>     jne .skipSwitch
    60 00000E46 C605D6F1FFFF2F      <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    61                              <1> .skipSwitch:
    62 00000E4D B800380000          <1>     mov eax, 3800h  ;Get current country data
    63 00000E52 488D15E0F1FFFF      <1>     lea rdx, ctryData
    64 00000E59 CD41                <1>     int 41h ;Write the data to the internal country table
    65                              <1> ;Now determine if this is the master copy of COMMAND.COM
    66                              <1> ;Check if Int 4Eh has the same address as Int 4Dh. If so, we are master.
    67 00000E5B B84E350000          <1>     mov eax, 354Eh  ;Get int 4Eh address
    68 00000E60 CD41                <1>     int 41h
    69 00000E62 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    70 00000E65 B84D350000          <1>     mov eax, 354Dh  ;Get int 4Dh address
    71 00000E6A CD41                <1>     int 41h
    72 00000E6C 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    73 00000E6F 7535                <1>     jne .skipMaster
    74                              <1> ;Ok so we are master command.com
    75                              <1> ;Now make myself the real parent
    76 00000E71 4C890597F1FFFF      <1>     mov qword [realParent], r8
    77                              <1> ;Set master environment as mine
    78 00000E78 488D0522FFFFFF      <1>     lea rax, masterEnv
    79 00000E7F 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    80                              <1> ;Set current Drive in COMSPEC
    81 00000E83 B019                <1>     mov al, 19h ;Get current Drive
    82 00000E85 CD41                <1>     int 41h
    83 00000E87 0441                <1>     add al, "A"
    84 00000E89 880512FFFFFF        <1>     mov byte [masterEnv], al
    85                              <1> ;Set Int 4Eh up
    86 00000E8F 488D15FBF8FFFF      <1>     lea rdx, int4Eh
    87 00000E96 B84E250000          <1>     mov eax, 254Eh ;Set this as Int 4Eh
    88 00000E9B CD41                <1>     int 41h
    89                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    90                              <1>     
    91 00000E9D 488D1D27FFFFFF      <1>     lea rbx, endOfAlloc ;Save the Master Environment
    92 00000EA4 EB07                <1>     jmp short .printInit
    93                              <1> .skipMaster:
    94 00000EA6 488D1DF4FEFFFF      <1>     lea rbx, masterEnv  ;This is the base address to jettison
    95                              <1> .printInit:
    96                              <1> ;Finish by printing INIT string.
    97 00000EAD 488D1510000000      <1>     lea rdx, initString
    98 00000EB4 B409                <1>     mov ah, 09h
    99 00000EB6 CD41                <1>     int 41h ;Print init string
   100 00000EB8 48892546F1FFFF      <1>     mov qword [stackBottom], rsp    ;Use this to save where to reset rsp to
   101 00000EBF E90BF8FFFF          <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   102                              <1> ;Loader Data here
   103                              <1> initString: 
   104 00000EC4 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version 1.0",CR,LF
   104 00000ECD 66696320436F6D7075- <1>
   104 00000ED6 746572205265736561- <1>
   104 00000EDF 726368285229205343- <1>
   104 00000EE8 502F444F5328522920- <1>
   104 00000EF1 56657273696F6E2031- <1>
   104 00000EFA 2E300D0A            <1>
   105 00000EFE 202020202020202020- <1>     db       "          (C)Copyright Scientific Computer Reserach 2022.",CR,LF,"$"
   105 00000F07 20284329436F707972- <1>
   105 00000F10 696768742053636965- <1>
   105 00000F19 6E746966696320436F- <1>
   105 00000F22 6D7075746572205265- <1>
   105 00000F2B 736572616368203230- <1>
   105 00000F34 32322E0D0A24        <1>
   106 00000F3A 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   106 00000F43 20444F532076657273- <1>
   106 00000F4C 696F6E0D0A24        <1>
   106          ------------------  <1>  info: assembly required 1+2+2 passes

