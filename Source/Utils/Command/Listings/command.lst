     1                                  ;COMMAND.COM main file
     2                                  [map all ./Source/Utils/COMMAND/Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Source/Include/dosMacro.mac"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------------------------------
     9                              <1> ;Generic Macros file
    10                              <1> ;The following instruction extensions allow to conditionally return
    11                              <1> ;The idea was borrowed from the DOS Source Code
    12                              <1> ;
    13                              <1> ;-------------------------------------------------------------------------------
    14                              <1> 
    15                              <1> ;-------------------------------------------------------------------------------
    16                              <1> ;These macros are live and must not be touched
    17                              <1> ;-------------------------------------------------------------------------------
    18                              <1> %macro return 0
    19                              <1> %%_ret:
    20                              <1>     ret
    21                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    22                              <1> %endmacro
    23                              <1> 
    24                              <1> %macro cret 1
    25                              <1> %%_base:
    26                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    27                              <1>     %ifdef retOff
    28                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <1>     %ifdef currSegVBase
    30                              <1>     j%+1 short (retOff+currSegVBase)
    31                              <1>     %else
    32                              <1>     j%+1 short retOff
    33                              <1>     %endif  ;End ifdef currSegVBase
    34                              <1>     %else 
    35                              <1>     j%-1 short %%a
    36                              <1>     return
    37                              <1> %%a:
    38                              <1>     %endif  ;End the distance measurement if
    39                              <1>     %else   
    40                              <1>     j%-1 short %%a
    41                              <1>     return
    42                              <1> %%a:
    43                              <1>     %endif  ;End ifdef retoff
    44                              <1> %endmacro
    45                              <1> 
    46                              <1> %macro retz 0
    47                              <1> cret z
    48                              <1> %endmacro
    49                              <1> 
    50                              <1> %macro retnz 0
    51                              <1> cret nz
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> %macro rete 0
    55                              <1> cret e
    56                              <1> %endmacro
    57                              <1> 
    58                              <1> %macro retne 0
    59                              <1> cret ne
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> %macro retc 0
    63                              <1> cret c
    64                              <1> %endmacro
    65                              <1> 
    66                              <1> %macro retnc 0
    67                              <1> cret nc
    68                              <1> %endmacro
    69                              <1> 
    70                              <1> %macro retb 0
    71                              <1> cret b
    72                              <1> %endmacro
    73                              <1> 
    74                              <1> %macro retnb 0
    75                              <1> cret nb
    76                              <1> %endmacro
    77                              <1> 
    78                              <1> %macro breakpoint 0
    79                              <1> xchg bx, bx
    80                              <1> %endmacro
     7                                  %include "./Source/Include/driverStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous SCP/DOS      ;
    11                              <1> ; device driver related structures.                     ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    15                              <1> 
    16 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    17 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    18 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    19 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    20 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    21                              <1> 
    22                              <1> endstruc
    23                              <1> 
    24                              <1> ;Command Code equates
    25                              <1>     drvINIT         equ 0
    26                              <1>     drvMEDCHK       equ 1
    27                              <1>     drvBUILDBPB     equ 2
    28                              <1>     drvIOCTLREAD    equ 3
    29                              <1>     drvREAD         equ 4
    30                              <1>     drvNONDESTREAD  equ 5
    31                              <1>     drvINSTATUS     equ 6
    32                              <1>     drvFLUSHINBUF   equ 7
    33                              <1>     drvWRITE        equ 8
    34                              <1>     drvWRITEVERIFY  equ 9
    35                              <1>     drvOUTSTATUS    equ 10
    36                              <1>     drvFLUSHOUTBUF  equ 11
    37                              <1>     drvIOCTLWRITE   equ 12
    38                              <1>     drvOPEN         equ 13
    39                              <1>     drvCLOSE        equ 14
    40                              <1>     drvREMMEDCHECK  equ 15
    41                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    42                              <1>     drvIOCTL        equ 19
    43                              <1>     drvGETDRVMAP    equ 23
    44                              <1>     drvSETDRVMAP    equ 24
    45                              <1>     
    46                              <1> ;Driver Error equates 
    47                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    48                              <1>     drvBadUnit      equ 1   ;Unknown unit
    49                              <1>     drvNotReady     equ 2   ;Device not ready
    50                              <1>     drvBadCmd       equ 3   ;Unknown command
    51                              <1>     drvCRCErr       equ 4   ;CRC Error
    52                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    53                              <1>     drvBadSeek      equ 6   ;Seek error
    54                              <1>     drvBadMed       equ 7   ;Unknown media
    55                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    56                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    57                              <1>     drvWriteFault   equ 10  ;Write Fault
    58                              <1>     drvReadFault    equ 11  ;Read Fault
    59                              <1>     drvGenFault     equ 12  ;General Fault
    60                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    61                              <1> 
    62                              <1> ;Driver status word status bit meanings
    63                              <1>     drvErrStatus    equ 8000h  
    64                              <1>     drvDonStatus    equ 0100h
    65                              <1>     drvBsyStatus    equ 0200h
    66                              <1> 
    67                              <1> ;Driver Attribute Word bit meanings
    68                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    69                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    70                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    71                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    72                              <1>     devDrvFastOut  equ 10h ;If set, device supports INT 49h
    73                              <1>     devDrvExtFun   equ 40h ;If set, functions 13, 17, 18 supported (must be)
    74                              <1>     devDrvIOCTL2   equ 80h ;If set, IOCTL function 19 supported
    75                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    76                              <1>     devDrvIOCTL    equ 4000h ;If set, Generic IOCTL supported
    77                              <1>     devDrvChar     equ 8000h ;If set, Char device
    78                              <1> ;Bit 0 1=console input
    79                              <1> ;    1 1=console output (character devices)
    80                              <1> ;    2 1=NUL device
    81                              <1> ;    3 1=CLOCK device
    82                              <1> ;    4 1=INT 49 output (CON)
    83                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    84                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    85                              <1> ;   11 1=open/close/removable media supported (3.0+)
    86                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    87                              <1> ;      1=media descriptor in FAT required (block devices)
    88                              <1> ;   14 1=IOCTL supported
    89                              <1> ;   15 0=block device
    90                              <1> ;      1=character device
    91                              <1> 
    92                              <1> ;Driver structures
    93                              <1> 
    94                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    95                              <1> 
    96                              <1>     .hdrlen resb 1  ;Length of the request header
    97                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    98                              <1>     .cmdcde resb 1  ;Command code
    99                              <1>     .status resw 1  ;Status word
   100                              <1>     .devptr resq 1  ;Device queue pointer field
   101                              <1> 
   102                              <1> %endmacro
   103                              <1> 
   104                              <1> struc drvReqHdr
   105                              <1>     drvReqHdrM
    95                              <2> 
    96 00000000 ??                  <2>  .hdrlen resb 1
    97 00000001 ??                  <2>  .unitnm resb 1
    98 00000002 ??                  <2>  .cmdcde resb 1
    99 00000003 ????                <2>  .status resw 1
   100 00000005 ????????????????    <2>  .devptr resq 1
   101                              <2> 
   106                              <1> endstruc
   107                              <1> 
   108                              <1> struc initReqPkt  ;Init Request Packet
   109                              <1> 
   110                              <1>     drvReqHdrM   ;Common Driver Header Macro
    95                              <2> 
    96 00000000 ??                  <2>  .hdrlen resb 1
    97 00000001 ??                  <2>  .unitnm resb 1
    98 00000002 ??                  <2>  .cmdcde resb 1
    99 00000003 ????                <2>  .status resw 1
   100 00000005 ????????????????    <2>  .devptr resq 1
   101                              <2> 
   111 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
   112 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
   113 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
   114 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
   115                              <1> 
   116                              <1> endstruc
   117                              <1> 
   118                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   119                              <1> 
   120                              <1>     drvReqHdrM    ;Common Driver Header Macro
    95                              <2> 
    96 00000000 ??                  <2>  .hdrlen resb 1
    97 00000001 ??                  <2>  .unitnm resb 1
    98 00000002 ??                  <2>  .cmdcde resb 1
    99 00000003 ????                <2>  .status resw 1
   100 00000005 ????????????????    <2>  .devptr resq 1
   101                              <2> 
   121 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   122 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
   123 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
   124                              <1> 
   125                              <1> endstruc
   126                              <1> 
   127                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   128                              <1> 
   129                              <1>     drvReqHdrM    ;Common Driver Header Macro
    95                              <2> 
    96 00000000 ??                  <2>  .hdrlen resb 1
    97 00000001 ??                  <2>  .unitnm resb 1
    98 00000002 ??                  <2>  .cmdcde resb 1
    99 00000003 ????                <2>  .status resw 1
   100 00000005 ????????????????    <2>  .devptr resq 1
   101                              <2> 
   130 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   131 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   132 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   133                              <1> 
   134                              <1> endstruc
   135                              <1> 
   136                              <1> struc ioReqPkt   ;IO Request Packet
   137                              <1> 
   138                              <1>     drvReqHdrM    ;Common Driver Header Macro
    95                              <2> 
    96 00000000 ??                  <2>  .hdrlen resb 1
    97 00000001 ??                  <2>  .unitnm resb 1
    98 00000002 ??                  <2>  .cmdcde resb 1
    99 00000003 ????                <2>  .status resw 1
   100 00000005 ????????????????    <2>  .devptr resq 1
   101                              <2> 
   139 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   140 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   141 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   142 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   143 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   144                              <1> 
   145                              <1> endstruc
   146                              <1> 
   147                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   148                              <1>     
   149                              <1>     drvReqHdrM    ;Common Driver Header Macro
    95                              <2> 
    96 00000000 ??                  <2>  .hdrlen resb 1
    97 00000001 ??                  <2>  .unitnm resb 1
    98 00000002 ??                  <2>  .cmdcde resb 1
    99 00000003 ????                <2>  .status resw 1
   100 00000005 ????????????????    <2>  .devptr resq 1
   101                              <2> 
   150 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   151                              <1> 
   152                              <1> endstruc
   153                              <1> 
   154                              <1> struc statusReqPkt   ;Status Request Packet
   155                              <1> 
   156                              <1>     drvReqHdrM    ;Common Driver Header Macro
    95                              <2> 
    96 00000000 ??                  <2>  .hdrlen resb 1
    97 00000001 ??                  <2>  .unitnm resb 1
    98 00000002 ??                  <2>  .cmdcde resb 1
    99 00000003 ????                <2>  .status resw 1
   100 00000005 ????????????????    <2>  .devptr resq 1
   101                              <2> 
   157                              <1> 
   158                              <1> endstruc
   159                              <1> 
   160                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   161                              <1> 
   162                              <1>     drvReqHdrM    ;Common Driver Header Macro
    95                              <2> 
    96 00000000 ??                  <2>  .hdrlen resb 1
    97 00000001 ??                  <2>  .unitnm resb 1
    98 00000002 ??                  <2>  .cmdcde resb 1
    99 00000003 ????                <2>  .status resw 1
   100 00000005 ????????????????    <2>  .devptr resq 1
   101                              <2> 
   163                              <1>      
   164                              <1> endstruc
   165                              <1> 
   166                              <1> struc openReqPkt ;Open Device Request Packet
   167                              <1> 
   168                              <1>     drvReqHdrM    ;Common Driver Header Macro
    95                              <2> 
    96 00000000 ??                  <2>  .hdrlen resb 1
    97 00000001 ??                  <2>  .unitnm resb 1
    98 00000002 ??                  <2>  .cmdcde resb 1
    99 00000003 ????                <2>  .status resw 1
   100 00000005 ????????????????    <2>  .devptr resq 1
   101                              <2> 
   169                              <1>      
   170                              <1> endstruc
   171                              <1> 
   172                              <1> struc closeReqPkt ;Close Device Request Packet
   173                              <1> 
   174                              <1>     drvReqHdrM    ;Common Driver Header Macro
    95                              <2> 
    96 00000000 ??                  <2>  .hdrlen resb 1
    97 00000001 ??                  <2>  .unitnm resb 1
    98 00000002 ??                  <2>  .cmdcde resb 1
    99 00000003 ????                <2>  .status resw 1
   100 00000005 ????????????????    <2>  .devptr resq 1
   101                              <2> 
   175                              <1>      
   176                              <1> endstruc
   177                              <1> 
   178                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   179                              <1> 
   180                              <1>     drvReqHdrM    ;Common Driver Header Macro
    95                              <2> 
    96 00000000 ??                  <2>  .hdrlen resb 1
    97 00000001 ??                  <2>  .unitnm resb 1
    98 00000002 ??                  <2>  .cmdcde resb 1
    99 00000003 ????                <2>  .status resw 1
   100 00000005 ????????????????    <2>  .devptr resq 1
   101                              <2> 
   181                              <1>      
   182                              <1> endstruc
   183                              <1> 
   184                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   185                              <1> 
   186                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    95                              <2> 
    96 00000000 ??                  <2>  .hdrlen resb 1
    97 00000001 ??                  <2>  .unitnm resb 1
    98 00000002 ??                  <2>  .cmdcde resb 1
    99 00000003 ????                <2>  .status resw 1
   100 00000005 ????????????????    <2>  .devptr resq 1
   101                              <2> 
   187 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   188 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   189 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   190 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   191 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   192                              <1> 
   193                              <1> endstruc
   194                              <1> 
   195                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   196                              <1>     
   197                              <1>     drvReqHdrM    ;Common Driver Header Macro
    95                              <2> 
    96 00000000 ??                  <2>  .hdrlen resb 1
    97 00000001 ??                  <2>  .unitnm resb 1
    98 00000002 ??                  <2>  .cmdcde resb 1
    99 00000003 ????                <2>  .status resw 1
   100 00000005 ????????????????    <2>  .devptr resq 1
   101                              <2> 
   198                              <1> 
   199                              <1> endstruc
   200                              <1> 
   201                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   202                              <1>     
   203                              <1>     drvReqHdrM    ;Common Driver Header Macro
    95                              <2> 
    96 00000000 ??                  <2>  .hdrlen resb 1
    97 00000001 ??                  <2>  .unitnm resb 1
    98 00000002 ??                  <2>  .cmdcde resb 1
    99 00000003 ????                <2>  .status resw 1
   100 00000005 ????????????????    <2>  .devptr resq 1
   101                              <2> 
   204                              <1> 
   205                              <1> endstruc
     8                                  %include "./Source/Include/fatStruc.inc"
     9                              <1> 
    10                              <1> ;-------------------------------------------------------;
    11                              <1> ; This include file contains miscellaneous FAT driver   ;
    12                              <1> ; structures. exFAT will have it's own files at a later ;
    13                              <1> ; stage.                                                ;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;-------------------------------------------------------;
    16                              <1> ;-------------------------------------------------------;
    17                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    18                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    19                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    20                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    21                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    22                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    23                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    24                              <1> ;-------------------------------------------------------;
    25                              <1> 
    26                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    27                              <1> 
    28 00000000 ??????              <1>     .jmpBoot    resb 3 
    29 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    30 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    31 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    32 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    33 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    34 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    35 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    36 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    37 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    38 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    39 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    40 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    41 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    42                              <1> 
    43 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    44 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    45 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    46 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    47 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    48 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    49                              <1> 
    50                              <1> endstruc
    51                              <1> 
    52                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    53                              <1> 
    54 00000000 ??????              <1>     .jmpBoot    resb 3
    55 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    56 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    57 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    58 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    59 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    60 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    61 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    62 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    63 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    64 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    65 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    66 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    67 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    68                              <1> 
    69 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    70 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    71 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    72 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    73 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    74 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    75 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    76                              <1> 
    77 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    78 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    79 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    80 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    81 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    82 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    83                              <1> 
    84                              <1> endstruc
    85                              <1> 
    86                              <1> struc mbr
    87 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    88 000001B8 ????????            <1>     .diskID     resb 4
    89 000001BC ????                <1>     .reserved   resb 2
    90 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    91 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    92 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    93 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    94 000001FE ????                <1>     .mbrSig     resb 2
    95                              <1> endstruc
    96                              <1> 
    97                              <1> struc mbrEntry
    98 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    99 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
   100 00000004 ??                  <1>     .ptnType    resb 1
   101 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   102 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   103 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   104                              <1> endstruc
   105                              <1> 
   106                              <1> struc ebr
   107 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   108 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   109 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   110 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   111 000001FE ????                <1>     .mbrSig     resb 2
   112                              <1> endstruc
   113                              <1> 
   114                              <1> 
   115                              <1> struc fatDirEntry
   116                              <1> 
   117 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name w/o fullstop
   118 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   119 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   120 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   121 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   122 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   123 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   124 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   125 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   126 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   127 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   128 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   129                              <1> 
   130                              <1> endstruc
   131                              <1> ;Directory attribute equates
   132                              <1>     dirReadOnly     equ 01h
   133                              <1>     dirHidden       equ 02h
   134                              <1>     dirSystem       equ 04h
   135                              <1>     dirVolumeID     equ 08h
   136                              <1>     dirDirectory    equ 10h
   137                              <1>     dirArchive      equ 20h
   138                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   139                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   140                              <1>     ;If any of the three bits are set, then ALL three bits are set
   141                              <1>     ; in addition to whatever the user passed to search for.
   142                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   143                              <1>     dirIncFiles     equ dirHidden | dirSystem
   144                              <1> 
   145                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   146                              <1> 
   147 00000000 ??????              <1>     .jmpBoot                resb 3 
   148 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   149 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   150 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   151 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   152 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   153 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   154 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   155 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   156 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   157 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   158 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   159 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   160 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   161 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   162 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   163 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   164 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   165 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   166                              <1> 
   167                              <1> endstruc
   168                              <1> 
   169                              <1> struc FSInfo
   170                              <1> 
   171 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   172 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   173 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   174 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   175 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   176 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   177 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   178                              <1> 
   179                              <1> endstruc
   180                              <1> 
   181                              <1> %macro defaultBPB 0
   182                              <1>     db 0E9h
   183                              <1>     db 00h
   184                              <1>     db 90h
   185                              <1>     db 'SCPDOSv1'
   186                              <1>     dw 0200h                       
   187                              <1>     db 01h                         
   188                              <1>     dw 0001h                           
   189                              <1>     db 02h                              
   190                              <1>     dw 00E0h            
   191                              <1>     dw 0B40h   
   192                              <1>     db 0F0h                   
   193                              <1>     dw 0009h                   
   194                              <1>     dw 0012h                     
   195                              <1>     dw 0002h                  
   196                              <1>     dd 0                 
   197                              <1>     dd 0 
   198                              <1>     db 00h
   199                              <1>     db 00h
   200                              <1>     db 29h
   201                              <1>     dd 0
   202                              <1>     db 'NO NAME    '
   203                              <1>     db 'FAT12   '
   204                              <1>     db 58 dup 0 ;Size padding for a FAT12/16 BPB to make it 120 bytes long
   205                              <1> %endmacro
     9                                  %include "./Source/Include/dosStruc.inc"
    10                              <1> 
    11                              <1> ;-------------------------------------------------------;
    12                              <1> ; This include file contains miscellaneous internal     ;
    13                              <1> ; SCP/DOS structures.                                   ;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> 
    16                              <1> ;------------------------------------------------------------------------;
    17                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    18                              <1> ; its file system structure. This is used to locate files and structures
    19                              <1> ; on the device itself and to translate file requests to cluster chains
    20                              <1> ; to LBAs to pass to the disk driver..
    21                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    22                              <1> ; drivers Initialise routine has been called.
    23                              <1> ;------------------------------------------------------------------------;
    24                              <1> struc dpb        ;Drive Parameter Block
    25                              <1> 
    26 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    27 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    28 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    29 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    30 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    31 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    32 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    33 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    34 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    35 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    36 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    37 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    38                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    39 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    40 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    41 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    42 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    43 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    44 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    45                              <1> 
    46                              <1> endstruc
    47                              <1> 
    48                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    49                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    52                              <1> ; All disk pathing requests go via the CDS for that drive.
    53                              <1> ; The default drive is the last accessed drive, this number is stored
    54                              <1> ; in the DOS data area.
    55                              <1> ; The CDS is stored as an array with the offset into the array being 
    56                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    57                              <1> ;
    58                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    59                              <1> ;------------------------------------------------------------------------;
    60                              <1> struc cds       ;Current Directory structure
    61 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    62 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    63 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    64 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    65 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    66 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    67                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    68                              <1> ; another, we save the number of chars to skip to that deep level).
    69                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    70                              <1> ; Only affects for SUBST drives, not JOIN
    71                              <1> ; Flags: Bit 15 set = Network drive
    72                              <1> ;        Bit 14 set = Physical drive
    73                              <1> ;        Bit 13 set = JOIN'ed drive
    74                              <1> ;        Bit 12 set = SUBST'ed drive
    75                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    76                              <1> endstruc
    77                              <1> ;CDS equates
    78                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    79                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    80                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    81                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    82                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    83                              <1> ;------------------------------------------------------------------------;
    84                              <1> ; The SFT is a way to allow applications to open file handles to files 
    85                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    86                              <1> ; under the first header, and then a second header will be linked to the 
    87                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    88                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    89                              <1> ; using the FCBS= command. Default FCBS=5.
    90                              <1> ;
    91                              <1> ; A file handle describes the file, and the location within the file that
    92                              <1> ; we are reading. The file handle can be manipulated without the file
    93                              <1> ; being in memory, thus allowing the user to access data without needing 
    94                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    95                              <1> ; accessing devices, by treating them as files with their drivers 
    96                              <1> ; responding and translating the manipulations of the file handle itself.
    97                              <1> ; Neither the driver nor the application should see or use the SFT for
    98                              <1> ; the handle, as it is subject to change (and will change when file 
    99                              <1> ; sharing provisions are included). The DOS will make requests to the 
   100                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
   101                              <1> ; track of the information in the SFT entry for that handle. 
   102                              <1> ;
   103                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   104                              <1> ; can point to the same file. It all depends on what the applications 
   105                              <1> ; want to do with the File.
   106                              <1> ;
   107                              <1> ; !!!!IMPORTANT!!!!
   108                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   109                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   110                              <1> ;
   111                              <1> ;Each SFT may look like this:
   112                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   113                              <1> ;            |                |
   114                              <1> ;       wNumFiles*sft    wNumFiles*sft
   115                              <1> ;
   116                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   117                              <1> ; System FCBs.
   118                              <1> ;
   119                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   120                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   121                              <1> ;
   122                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   123                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   124                              <1> ;------------------------------------------------------------------------;
   125                              <1> struc sfth   ;System file table header
   126                              <1> ; This is the SFT header.
   127                              <1> ; This structure comes before the start of the first file in the array/table.
   128 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   129 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   130                              <1> endstruc
   131                              <1> 
   132                              <1> struc sft
   133                              <1> ;This is the file struc itself
   134 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   135 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   136 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   137 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   138 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   139 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   140 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   141 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   142 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   143 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   144 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   145 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   146 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   147 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   148 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   149 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   150 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   151 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   152 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   153                              <1> ;                           0 means no record
   154                              <1> endstruc
   155                              <1> ;Open Mode equates
   156                              <1> ;Access modes   Bits[2:0]
   157                              <1> ReadAccess      equ 0h
   158                              <1> WriteAccess     equ 1h
   159                              <1> RWAccess        equ 2h
   160                              <1> ;Bit 3 reserved 0
   161                              <1> ;Sharing modes  Bits[6:4]
   162                              <1> CompatShare     equ 0h
   163                              <1> denyRWShare     equ 10h
   164                              <1> denyWriteShare  equ 20h
   165                              <1> denyReadShare   equ 30h
   166                              <1> denyNoneShare   equ 40h
   167                              <1> netFCBShare     equ 70h
   168                              <1> ;Bit 7 reserved 0
   169                              <1> ;Bits 8-12 reserved 0
   170                              <1> 
   171                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   172                              <1> ;Buffering on writes
   173                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   174                              <1> ;FCB opened file?
   175                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   176                              <1> ;Attribute Byte
   177                              <1> readOnlyFile    equ 1h
   178                              <1> hiddenFile      equ 2h
   179                              <1> systemFile      equ 4h
   180                              <1> volumeLabel     equ 8h
   181                              <1> directoryFile   equ 10h ;Directory entry
   182                              <1> archiveFile     equ 20h
   183                              <1> ;Device Info equates
   184                              <1> ;For a block device, bits [5:0] contain the drive number
   185                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   186                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   187                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   188                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   189                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   190                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   191                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   192                              <1> blokFileToFlush equ 40h ;Set if ANY writes are made to this handle!
   193                              <1> devCharDev      equ 80h ;If set, it is a char device!
   194                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   195                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   196                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   197                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   198                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   199                              <1> 
   200                              <1> ;openAddress   equ DOSSEG:367Ah   
   201                              <1> ;createAddress equ DOSSEG:35E3h   
   202                              <1> ;------------------------------------------------------------------------;
   203                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   204                              <1> ; to an internal buffer, and then copying it to the specified location
   205                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   206                              <1> ; another request for the same sector from the same device is made, so 
   207                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   208                              <1> ; size, selected according to the largest detected sector size during 
   209                              <1> ; the initial loadup.
   210                              <1> ;
   211                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   212                              <1> ;
   213                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   214                              <1> ;------------------------------------------------------------------------;
   215                              <1> 
   216                              <1> struc bufferHdr
   217 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   218 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   219 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   220 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   221 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   222 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   223 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   224 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   225 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   226                              <1>     .dataarea:             ;Points to the start of the data area
   227                              <1> endstruc
   228                              <1> ;Buffer Flag equates
   229                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   230                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   231                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   232                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   233                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   234                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   235                              <1> ;Note! A buffer is marked as referenced only when the application 
   236                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   237                              <1> ;------------------------------------------------------------------------;
   238                              <1> ; Memory control block for each memory arena
   239                              <1> ;------------------------------------------------------------------------;
   240                              <1> struc mcb
   241 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   242 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   243 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   244 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   245                              <1>     .program:
   246                              <1> endstruc
   247                              <1> ;MCB equates
   248                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   249                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   250                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   251                              <1> mcbMarkCtn      equ "M"
   252                              <1> mcbMarkEnd      equ "Z"
   253                              <1> 
   254                              <1> memFirstFit     equ 0   ;First free block goes to application
   255                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   256                              <1> memLastFit      equ 2   ;Last free block goes to application
   257                              <1> 
   258                              <1> ;Owner = Para aligned address => Owning application PSP
   259                              <1> ;...To consider...
   260                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   261                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   262                              <1> ;------------------------------------------------------------------------;
   263                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   264                              <1> ; following order, thus allowing for return values to be placed in the 
   265                              <1> ; registers by accessing the caller register stack frame.
   266                              <1> ;------------------------------------------------------------------------;
   267                              <1> struc callerFrame
   268 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   269 00000008 ????????????????    <1>     .rbx    resq 1    
   270 00000010 ????????????????    <1>     .rcx    resq 1
   271 00000018 ????????????????    <1>     .rdx    resq 1
   272 00000020 ????????????????    <1>     .rsi    resq 1
   273 00000028 ????????????????    <1>     .rdi    resq 1
   274 00000030 ????????????????    <1>     .rbp    resq 1
   275 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   276 00000040 ????????????????    <1>     .r9     resq 1
   277                              <1> ;Pushed by Processor when invoked via Interrupt
   278 00000048 ????????????????    <1>     .rip    resq 1
   279 00000050 ????????????????    <1>     .cs     resq 1
   280 00000058 ????????????????    <1>     .flags  resq 1
   281                              <1> endstruc
   282                              <1> 
   283                              <1> struc dpl
   284                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   285                              <1> ; server calls
   286 00000000 ????????????????    <1>     .rax    resq 1
   287 00000008 ????????????????    <1>     .rbx    resq 1
   288 00000010 ????????????????    <1>     .rcx    resq 1
   289 00000018 ????????????????    <1>     .rdx    resq 1
   290 00000020 ????????????????    <1>     .rsi    resq 1
   291 00000028 ????????????????    <1>     .rdi    resq 1
   292 00000030 ????????????????    <1>     .r8     resq 1
   293 00000038 ????????????????    <1>     .r9     resq 1
   294 00000040 ????????????????    <1>     .align  resq 1
   295 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   296 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   297                              <1> endstruc
   298                              <1> 
   299                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   300 00000000 ????????????????    <1>     .oldRBP         resq 1  
   301 00000008 ??                  <1>     .newBuffers     resb 1  ;New buffers value
   302 00000009 ??                  <1>     .newSFTVal      resb 1
   303 0000000A ??                  <1>     .newFCBSVal     resb 1
   304 0000000B ??                  <1>     .newProtFCBSVal resb 1  ;Number of protected FCBS
   305 0000000C ??                  <1>     .newLastdrive   resb 1
   306 0000000D ??                  <1>     .newStacks      resb 1  ;Ignored for now
   307 0000000E ????                <1>     .newStackSize   resb 2  ;Ignored for now
   308 00000010 ????????            <1>     .newAllocSize   resd 1  ;Used to keep track of reallocation size
   309 00000014 ????????            <1>                     resd 1  ;Alignment byte
   310 00000018 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   311                              <1> endstruc
   312                              <1> 
   313                              <1> struc fcb
   314                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   315 00000000 ??                  <1>     .driveNum   resb 1
   316 00000001 ????????????????    <1>     .filename   resb 8
   317 00000009 ??????              <1>     .fileext    resb 3
   318 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   319                              <1> ;One block consists of 128 records, of size denoted in the below
   320 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   321 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   322 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   323 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   324 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   325 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   326 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   327 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   328 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   329                              <1>     ;If record size > 64, high byte is ignored.
   330                              <1>     ;Used for random read and write operations to find the right record
   331                              <1> endstruc
   332                              <1> 
   333                              <1> struc filename
   334                              <1> ;8.3 File name struct
   335 00000000 ????????????????    <1>     .fName  resb 8
   336 00000008 ??????              <1>     .fExt   resb 3
   337                              <1> endstruc
   338                              <1> 
   339                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   340 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   341 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   342 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   343 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   344 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   345 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   346 00000016 ????                <1>     .fileTime   resw 1  ;File time
   347 00000018 ????                <1>     .fileDate   resw 1  ;File date
   348 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   349 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   350                              <1> endstruc
   351                              <1> 
   352                              <1> struc psp
   353 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   354 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   355 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   356 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   357 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   358 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   359 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   360 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   361 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   362 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   363 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   364 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   365 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   366 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   367                              <1> ;Extra handle arrays are grouped into a linked list
   368                              <1> ;The below are in the same place as in DOS
   369 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   370 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   371                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   372 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   373 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   374                              <1> endstruc
   375                              <1> 
   376                              <1> struc clkStruc
   377 00000000 ????                <1>     .dateWord   resw 1
   378 00000002 ??                  <1>     .minutes    resb 1
   379 00000003 ??                  <1>     .hours      resb 1
   380 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   381 00000005 ??                  <1>     .seconds    resb 1
   382                              <1> endstruc
   383                              <1> 
   384                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   385                              <1> ;for a space of 64Gb
   386                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   387                              <1> dosLowBase  equ 600h    ;Low load address
   388                              <1> 
   389                              <1> ;Critical Error AH bitfield equates
   390                              <1> critRead    equ 0h
   391                              <1> critWrite   equ 1h
   392                              <1> critDOS     equ 0h
   393                              <1> critFAT     equ 2h
   394                              <1> critDir     equ 4h
   395                              <1> critData    equ 6h
   396                              <1> critFailOK  equ 8h
   397                              <1> critRetryOK equ 10h
   398                              <1> critIgnorOK equ 20h
   399                              <1> critCharDev equ 80h
   400                              <1> 
   401                              <1> critIgnore  equ 0
   402                              <1> critRetry   equ 1
   403                              <1> critAbort   equ 2
   404                              <1> critFail    equ 3
   405                              <1> 
   406                              <1> ;MISC ASCII control chars
   407                              <1> NUL equ 00h ;^@         | ASCII Null
   408                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   409                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   410                              <1> BEL equ 07h ;^G         | ASCII Bell
   411                              <1> BSP equ 08h ;^H         | ASCII Backspace
   412                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   413                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   414                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   415                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   416                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   417                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   418                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   419                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   420                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   421                              <1> SPC equ 20h ;Printable  | ASCII Space
   422                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   423                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   424                              <1> 
   425                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   426                              <1> ;Extended Ascii Codes
   427                              <1> eF1     equ 3Bh ;F1 second byte
   428                              <1> eF2     equ 3Ch ;F2 second byte
   429                              <1> eF3     equ 3Dh ;F3 second byte
   430                              <1> eF4     equ 3Eh ;F4 second byte
   431                              <1> eF5     equ 3Fh ;F5 second byte
   432                              <1> eF6     equ 40h ;F6 second byte
   433                              <1> eF7     equ 41h ;F7 second byte
   434                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   435                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   436                              <1> eIns    equ 52h ;Insert second byte
   437                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   438                              <1> 
   439                              <1> ;Default Configuration for the system
   440                              <1> 
   441                              <1> buffersDefault  equ 30
   442                              <1> filesDefault    equ 20
   443                              <1> fcbsDefault     equ 4
   444                              <1> safeFcbsDeflt   equ 0
   445                              <1> lastDriveDeflt  equ 5   
    10                                  %include "./Source/Include/dosError.inc"
    11                              <1> ;DOS Error codes
    12                              <1> 
    13                              <1> ;Extended Error Codes
    14                              <1> errInvFnc   equ 1   ;Invalid function number
    15                              <1> errFnf      equ 2   ;File not found
    16                              <1> errPnf      equ 3   ;Path not found
    17                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    18                              <1> errAccDen   equ 5   ;Access denied (to resource)
    19                              <1> errBadHdl   equ 6   ;Invalid handle
    20                              <1> errMCBbad   equ 7   ;MCB's destroyed
    21                              <1> errNoMem    equ 8   ;Insufficient memory
    22                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    23                              <1> errBadEnv   equ 10  ;Invalid environment
    24                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    25                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    26                              <1> errInvDat   equ 13  ;Invalid data
    27                              <1> ;           equ 14  ;Reserved
    28                              <1> errBadDrv   equ 15  ;Invalid drive specified
    29                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    30                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    31                              <1> errNoFil    equ 18  ;No more files
    32                              <1> ;The following are Driver error codes + 19
    33                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    34                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    35                              <1> errUnkUnt   equ 20  ;Unknown Unit
    36                              <1> errDrvNR    equ 21  ;Drive not ready
    37                              <1> errUnkCmd   equ 22  ;Unknown Command
    38                              <1> errCRCerr   equ 23  ;Data (CRC) error
    39                              <1> errBadRLn   equ 24  ;Bad request structure length
    40                              <1> errSekErr   equ 25  ;Seek error
    41                              <1> errUnkMed   equ 26  ;Unknown media type
    42                              <1> errSecNF    equ 27  ;Sector not Found
    43                              <1> errNoPap    equ 28  ;Printer out of paper
    44                              <1> errWF       equ 29  ;Write fault
    45                              <1> errRF       equ 30  ;Read fault
    46                              <1> errGF       equ 31  ;General fault
    47                              <1> ;----------------------------------------------
    48                              <1> ;The following two go inbetween the Disk errors
    49                              <1> errShrVio   equ 32  ;Sharing violations
    50                              <1> errLokVio   equ 33  ;File Lock violation
    51                              <1> ;----------------------------------------------
    52                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    53                              <1> errNoFCB    equ 35  ;FCB unavailable
    54                              <1> errShrFul   equ 36  ;Sharing buffer full
    55                              <1> 
    56                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    57                              <1> 
    58                              <1> errFilExist equ 80  ;File already exists
    59                              <1> errDirExist equ 82  ;Directory already exists
    60                              <1> errFI44     equ 83  ;Fail on INT 44h
    61                              <1> errRedir    equ 84  ;Too many levels of redirection
    62                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    63                              <1> errBadPass  equ 86  ;Bad password
    64                              <1> errBadParam equ 87  ;Bad parameter passed to request
    65                              <1> errNetWrite equ 88  ;Network Write Fault
    66                              <1> ;-----------------------------------------------------------------------------
    67                              <1> ;Error Loci
    68                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    69                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    70                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    71                              <1> eLocChr     equ 4   ;Serial/Character Device error
    72                              <1> eLocMem     equ 5   ;Related to RAM
    73                              <1> ;-----------------------------------------------------------------------------
    74                              <1> ;Error Actions
    75                              <1> eActRet     equ 1   ;Retry
    76                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    77                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    78                              <1> eActAbt     equ 4   ;Abort with cleanup
    79                              <1> eActKil     equ 5   ;Abort without cleanup
    80                              <1> eActIgn     equ 6   ;Ignore error
    81                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    82                              <1> ;-----------------------------------------------------------------------------
    83                              <1> ;Error classes
    84                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    85                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    86                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    87                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    88                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    89                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    90                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    91                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    92                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    93                              <1> eClsLocked  equ 10  ;Resource Locked
    94                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    95                              <1> eClsClash   equ 12  ;Resource already exists!
    96                              <1> eClsUnk     equ 13  ;Unknown class
    11                                  Segment .data align=1 
    12                                  %include "./Source/Utils/COMMAND/Data/cmdData.asm"
    13                              <1> ;Static Data Area for COMMAND.COM    
    14                              <1> startLbl:
    15 00000000 E9(CC020000)        <1>     jmp cmdLdr
    16 00000005 5F3E24              <1> basicPrompt: db "_>$"
    17                              <1> 
    13                                  Segment .bss align=1 follows=.data
    14                                  %include "./Source/Utils/COMMAND/Data/cmdBSS.asm"
    15                              <1>     
    16 00000000 ??                  <1> currentDrv  resb 1  ;Current Drive    
    17 00000001 <res 80h>           <1> cmdLine     resb 128
    15                                  Segment .text align=1 follows=.data vfollows=.data
    16                                  %define currSegVBase section.text.vstart
    17                                  %include "./Source/Utils/COMMAND/Source/cmdMain.asm"
    18                              <1> ;Initial Portion, jumped past data asection
    19                              <1> commandStart:
    20 00000000 66C705(01000000)80- <1>     mov word [cmdLine], 0080h ;Accept up to 128 bytes
    20 00000008 00                  <1>
    21                              <1> .inputMain:
    22 00000009 E80D000000          <1>     call .printPrompt
    23 0000000E 488D15(01000000)    <1>     lea rdx, cmdLine
    24 00000015 B40A                <1>     mov ah, 0Ah  ;Buffered input
    25 00000017 CD41                <1>     int 41h
    26 00000019 EBEE                <1>     jmp short .inputMain
    27                              <1> 
    28                              <1> .printPrompt:
    29                              <1>     ;Currently, fixed prompt X>
    30 0000001B B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
    31 0000001D CD41                <1>     int 41h
    32 0000001F 8805(00000000)      <1>     mov byte [currentDrv], al   ;Save drv number
    33 00000025 0441                <1>     add al, "A"
    34 00000027 8805(05000000)      <1>     mov byte [basicPrompt], al  ;Save letter in prompt string
    35 0000002D 488D15(05000000)    <1>     lea rdx, basicPrompt
    36 00000034 B409                <1>     mov ah, 09h ;Print String
    37 00000036 CD41                <1>     int 41h
    38                              <1>     return
    19                              <2> %%_ret:
    20 00000038 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    18                                  %include "./Source/Utils/COMMAND/Source/int44h.asm"
    19                              <1> critErrorHandler:   ;Int 44h
    20                              <1> ;User Stack in usage here, must be swapped to before this is called
    21                              <1> ;Entered with:  
    22                              <1> ;               AH = Critical Error Bitfield
    23                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    24                              <1> ;               Bit 6 - Reserved
    25                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    26                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    27                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    28                              <1> ;               Bits [2-1] = Affected Disk Error
    29                              <1> ;                     0 0   DOS area
    30                              <1> ;                     0 1   FAT area
    31                              <1> ;                     1 0   Directory area
    32                              <1> ;                     1 1   Data area
    33                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    34                              <1> ;               AL  = Failing drive number if AH[7] = 0
    35                              <1> ;               DIL = Error code for errorMsg
    36                              <1> ;               RSI = EA of Device Header for which device the error occured
    37                              <1> ;Return:
    38                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    39                              <1> ;                  = 1 - Retry the Operation    (Retry)
    40                              <1> ;                  = 2 - Terminate the Program  (Abort)
    41                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    42 00000039 53                  <1>     push rbx
    43 0000003A 51                  <1>     push rcx
    44 0000003B 52                  <1>     push rdx
    45 0000003C 57                  <1>     push rdi
    46 0000003D 56                  <1>     push rsi
    47 0000003E FC                  <1>     cld         ;Make String ops go forward
    48                              <1> 
    49 0000003F 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    50 00000042 488D155E020000      <1>     lea rdx, qword [.crlf]
    51 00000049 B409                <1>     mov ah, 09h ;Print String
    52 0000004B CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
    53                              <1> 
    54 0000004D 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    55 00000053 B90C000000          <1>     mov ecx, 0Ch
    56 00000058 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    57 0000005A 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    58 0000005D 480FB7FF            <1>     movzx rdi, di
    59 00000061 4889FA              <1>     mov rdx, rdi    ;Copy error code
    60 00000064 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    61 00000068 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    62 0000006B 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    63 0000006E 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    64 00000075 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    65 00000079 B409                <1>     mov ah, 09h ;Print String
    66 0000007B CD41                <1>     int 41h     ;Call DOS to print first part of message
    67                              <1> 
    68 0000007D 488D1505020000      <1>     lea rdx, qword [.readmsg]
    69 00000084 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    70 0000008B F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    71 0000008E 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    72 00000092 B409                <1>     mov ah, 09h ;Print String
    73 00000094 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    74                              <1> 
    75 00000096 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    76 00000099 0F85DF000000        <1>     jnz .charError
    77                              <1> ;Disk error continues here
    78 0000009F 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    79 000000A6 B409                <1>     mov ah, 09h
    80 000000A8 CD41                <1>     int 41h
    81 000000AA 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    82 000000AC 80C241              <1>     add dl, "A" ;Add ASCII code
    83 000000AF B402                <1>     mov ah, 02h ;Print char in dl
    84 000000B1 CD41                <1>     int 41h
    85                              <1> .userInput:
    86 000000B3 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
    87 000000BA B409                <1>     mov ah, 09h
    88 000000BC CD41                <1>     int 41h
    89                              <1> ;Abort, Retry, Ignore, Fail is word order
    90                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    91                              <1> .userAbort:
    92                              <1> ;Abort is always an option
    93 000000BE 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
    94 000000C5 B409                <1>     mov ah, 09h
    95 000000C7 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
    96                              <1> .userRetry:
    97 000000C9 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    98 000000CC 7416                <1>     jz .userIgnore    ;If clear, dont print message
    99 000000CE 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
   100 000000D5 B409                <1>     mov ah, 09h
   101 000000D7 CD41                <1>     int 41h
   102 000000D9 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
   103 000000E0 B409                <1>     mov ah, 09h
   104 000000E2 CD41                <1>     int 41h
   105                              <1> .userIgnore:
   106 000000E4 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   107 000000E7 7416                <1>     jz .userFail
   108 000000E9 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
   109 000000F0 B409                <1>     mov ah, 09h
   110 000000F2 CD41                <1>     int 41h
   111 000000F4 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
   112 000000FB B409                <1>     mov ah, 09h
   113 000000FD CD41                <1>     int 41h
   114                              <1> .userFail:
   115 000000FF F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   116 00000102 7416                <1>     jz .userMsgEnd
   117 00000104 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
   118 0000010B B409                <1>     mov ah, 09h
   119 0000010D CD41                <1>     int 41h
   120 0000010F 488D15A7010000      <1>     lea rdx, qword [.failmsg]
   121 00000116 B409                <1>     mov ah, 09h
   122 00000118 CD41                <1>     int 41h
   123                              <1> .userMsgEnd:
   124 0000011A 488D15A4010000      <1>     lea rdx, qword [.endMsg]
   125 00000121 B409                <1>     mov ah, 09h
   126 00000123 CD41                <1>     int 41h
   127                              <1> ;Get user input now 
   128 00000125 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   129 00000127 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   130 0000012E B401                <1>     mov ah, 01h ;STDIN without Console Echo
   131 00000130 CD41                <1>     int 41h ;Get char in al
   132 00000132 3C61                <1>     cmp al, "a" ;Chack if lowercase
   133 00000134 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   134 00000136 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   135                              <1> .uip1:
   136 00000138 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   137 00000139 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   138 0000013B FFC1                <1>     inc ecx
   139 0000013D 81F904000000        <1>     cmp ecx, 4
   140 00000143 75F3                <1>     jne .uip1
   141 00000145 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   142                              <1> .validInput:
   143 0000014A 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   144                              <1> ;Now check if the input is permitted
   145 0000014C 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   146 0000014E 7427                <1>     je .cehExit
   147 00000150 84C0                <1>     test al, al ;Check if 0 => Ignore
   148 00000152 740F                <1>     je .viIgnore
   149 00000154 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   150 00000156 7416                <1>     je .viRetry
   151                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   152 00000158 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   153 0000015B 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   154 00000161 EB14                <1>     jmp short .cehExit
   155                              <1> .viIgnore:
   156 00000163 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   157 00000166 0F8447FFFFFF        <1>     jz .userInput
   158 0000016C EB09                <1>     jmp short .cehExit
   159                              <1> .viRetry:
   160 0000016E F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   161 00000171 0F843CFFFFFF        <1>     jz .userInput
   162                              <1> .cehExit:
   163 00000177 5E                  <1>     pop rsi
   164 00000178 5F                  <1>     pop rdi
   165 00000179 5A                  <1>     pop rdx
   166 0000017A 59                  <1>     pop rcx
   167 0000017B 5B                  <1>     pop rbx
   168 0000017C 48CF                <1>     iretq
   169                              <1> .charError:
   170 0000017E B908000000          <1>     mov ecx, 8  ;8 chars in device name
   171 00000183 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   172                              <1> .ce1:
   173 0000018A AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   174 0000018B 88C2                <1>     mov dl, al  ;Move char into dl
   175 0000018D B402                <1>     mov ah, 02h
   176 0000018F CD41                <1>     int 41h ;Print char
   177 00000191 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   178 00000193 E91BFFFFFF          <1>     jmp .userInput
   179                              <1> 
   180                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   181 00000198 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   181 000001A1 746563742024202020  <1>
   182 000001AA 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   182 000001B3 6E6974202420202020  <1>
   183 000001BC 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   183 000001C5 202420202020202020  <1>
   184 000001CE 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   184 000001D7 6F6D6D616E64202420  <1>
   185 000001E0 446174612024202020- <1>             db "Data $            "       ;Error 4
   185 000001E9 202020202020202020  <1>
   186 000001F2 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   186 000001FB 737420242020202020  <1>
   187 00000204 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   187 0000020D 202020202020202020  <1>
   188 00000216 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   188 0000021F 656469612024202020  <1>
   189 00000228 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   189 00000231 7420466F756E642024  <1>
   190 0000023A 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   190 00000243 706572202420202020  <1>
   191 0000024C 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   191 00000255 6C7420242020202020  <1>
   192 0000025E 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   192 00000267 742024202020202020  <1>
   193 00000270 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   193 00000279 61696C757265202420  <1>
   194                              <1> 
   195 00000282 64726976652024      <1> .drive      db "drive $"
   196 00000289 6572726F7220726561- <1> .readmsg    db "error reading $"
   196 00000292 64696E672024        <1>
   197 00000298 6572726F7220777269- <1> .writemsg   db "error writing $"
   197 000002A1 74696E672024        <1>
   198 000002A7 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   199 000002AA 41626F727424        <1> .abortmsg   db "Abort$" 
   200 000002B0 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   201 000002B7 526574727924        <1> .retrymsg   db "Retry$"
   202 000002BD 4661696C24          <1> .failmsg    db "Fail$"
   203 000002C2 2C2024              <1> .betweenMsg db ", $"
   204 000002C5 3F2024              <1> .endMsg     db "? $"
   205 000002C8 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
    19                                  %include "./Source/Utils/COMMAND/Source/cmdLdr.asm"
    20                              <1> cmdLdr:
    21                              <1>     ;Resize Allocation
    22 000002CC 49F7D8              <1>     neg r8  ;Convert r8 to -r8
    23 000002CF 498D98[29030000]    <1>     lea rbx, qword [endOfAlloc + r8 + 11h]    ;Get bytes for CMD.COM
    24 000002D6 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
    25 000002D9 B44A                <1>     mov ah, 4Ah ;Realloc
    26 000002DB 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    27 000002DE CD41                <1>     int 41h
    28                              <1> ;Open and parse AUTOEXEC.BAT. Build Environment here
    29                              <1> ;Finish by printing INIT string.
    30 000002E0 488D1531000000      <1>     lea rdx, initString
    31 000002E7 B409                <1>     mov ah, 09h
    32 000002E9 CD41                <1>     int 41h ;Print init string
    33 000002EB E910FDFFFF          <1>     jmp commandStart
    34                              <1> ;Static Data Here
    35                              <1> masterEnv:
    36 000002F0 5F3A434F4D4D414E44- <1>     db "_:COMMAND.COM",0
    36 000002F9 2E434F4D00          <1>
    37 000002FE 504154483D00        <1>     db "PATH=",0
    38 00000304 202020202020202020- <1>     db ($ - masterEnv) dup (" ")    ;Pad the environment with spaces
    38 0000030D 202020202020202020- <1>
    38 00000316 2020                <1>
    39                              <1> endOfAlloc:
    40                              <1> initString: 
    41 00000318 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version 1.0",CR,LF
    41 00000321 66696320436F6D7075- <1>
    41 0000032A 746572205265736561- <1>
    41 00000333 726368285229205343- <1>
    41 0000033C 502F444F5328522920- <1>
    41 00000345 56657273696F6E2031- <1>
    41 0000034E 2E300D0A            <1>
    42 00000352 202020202020202020- <1>     db       "          (C)Copyright Scientific Computer Reserach 2022.",CR,LF,"$"
    42 0000035B 20284329436F707972- <1>
    42 00000364 696768742053636965- <1>
    42 0000036D 6E746966696320436F- <1>
    42 00000376 6D7075746572205265- <1>
    42 0000037F 736572616368203230- <1>
    42 00000388 32322E0D0A24        <1>
    42          ------------------  <1>  info: assembly required 1+2+2 passes

