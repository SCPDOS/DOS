     1                                  ;COMMAND.COM main file
     2                                  [map all ./Source/Utils/COMMAND/Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Source/Include/dosMacro.mac"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------------------------------
     9                              <1> ;Generic Macros file
    10                              <1> ;The following instruction extensions allow to conditionally return
    11                              <1> ;The idea was borrowed from the DOS Source Code
    12                              <1> ;
    13                              <1> ;-------------------------------------------------------------------------------
    14                              <1> 
    15                              <1> ;-------------------------------------------------------------------------------
    16                              <1> ;These macros are live and must not be touched
    17                              <1> ;-------------------------------------------------------------------------------
    18                              <1> %macro return 0
    19                              <1> %%_ret:
    20                              <1>     ret
    21                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    22                              <1> %endmacro
    23                              <1> 
    24                              <1> %macro cret 1
    25                              <1> %%_base:
    26                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    27                              <1>     %ifdef retOff
    28                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <1>     %ifdef currSegVBase
    30                              <1>     j%+1 short (retOff+currSegVBase)
    31                              <1>     %else
    32                              <1>     j%+1 short retOff
    33                              <1>     %endif  ;End ifdef currSegVBase
    34                              <1>     %else 
    35                              <1>     j%-1 short %%a
    36                              <1>     return
    37                              <1> %%a:
    38                              <1>     %endif  ;End the distance measurement if
    39                              <1>     %else   
    40                              <1>     j%-1 short %%a
    41                              <1>     return
    42                              <1> %%a:
    43                              <1>     %endif  ;End ifdef retoff
    44                              <1> %endmacro
    45                              <1> 
    46                              <1> %macro retz 0
    47                              <1> cret z
    48                              <1> %endmacro
    49                              <1> 
    50                              <1> %macro retnz 0
    51                              <1> cret nz
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> %macro rete 0
    55                              <1> cret e
    56                              <1> %endmacro
    57                              <1> 
    58                              <1> %macro retne 0
    59                              <1> cret ne
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> %macro retc 0
    63                              <1> cret c
    64                              <1> %endmacro
    65                              <1> 
    66                              <1> %macro retnc 0
    67                              <1> cret nc
    68                              <1> %endmacro
    69                              <1> 
    70                              <1> %macro retb 0
    71                              <1> cret b
    72                              <1> %endmacro
    73                              <1> 
    74                              <1> %macro retnb 0
    75                              <1> cret nb
    76                              <1> %endmacro
    77                              <1> 
    78                              <1> %macro breakpoint 0
    79                              <1> xchg bx, bx
    80                              <1> %endmacro
     7                                  %include "./Source/Include/dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    27 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    32 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Only affects for SUBST drives, not JOIN
    69                              <1> ; Flags: Bit 15 set = Network drive
    70                              <1> ;        Bit 14 set = Physical drive
    71                              <1> ;        Bit 13 set = JOIN'ed drive
    72                              <1> ;        Bit 12 set = SUBST'ed drive
    73                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    74                              <1> endstruc
    75                              <1> ;CDS equates
    76                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    77                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    78                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    79                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    80                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    81                              <1> ;------------------------------------------------------------------------;
    82                              <1> ; The SFT is a way to allow applications to open file handles to files 
    83                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    84                              <1> ; under the first header, and then a second header will be linked to the 
    85                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    86                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    87                              <1> ; using the FCBS= command. Default FCBS=5.
    88                              <1> ;
    89                              <1> ; A file handle describes the file, and the location within the file that
    90                              <1> ; we are reading. The file handle can be manipulated without the file
    91                              <1> ; being in memory, thus allowing the user to access data without needing 
    92                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    93                              <1> ; accessing devices, by treating them as files with their drivers 
    94                              <1> ; responding and translating the manipulations of the file handle itself.
    95                              <1> ; Neither the driver nor the application should see or use the SFT for
    96                              <1> ; the handle, as it is subject to change (and will change when file 
    97                              <1> ; sharing provisions are included). The DOS will make requests to the 
    98                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    99                              <1> ; track of the information in the SFT entry for that handle. 
   100                              <1> ;
   101                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   102                              <1> ; can point to the same file. It all depends on what the applications 
   103                              <1> ; want to do with the File.
   104                              <1> ;
   105                              <1> ; !!!!IMPORTANT!!!!
   106                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   107                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   108                              <1> ;
   109                              <1> ;Each SFT may look like this:
   110                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   111                              <1> ;            |                |
   112                              <1> ;       wNumFiles*sft    wNumFiles*sft
   113                              <1> ;
   114                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   115                              <1> ; System FCBs.
   116                              <1> ;
   117                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   118                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   119                              <1> ;
   120                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   121                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   122                              <1> ;------------------------------------------------------------------------;
   123                              <1> struc sfth   ;System file table header
   124                              <1> ; This is the SFT header.
   125                              <1> ; This structure comes before the start of the first file in the array/table.
   126 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   127 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   128                              <1> endstruc
   129                              <1> 
   130                              <1> struc sft
   131                              <1> ;This is the file struc itself
   132 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   133 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   134 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   135 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   136 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   137 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   138 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   139 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   140 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   141 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   142 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   143 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   144 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   145 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   146 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   147 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   148 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   149 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   150 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   151                              <1> ;                           0 means no record
   152                              <1> endstruc
   153                              <1> ;Open Mode equates
   154                              <1> ;Access modes   Bits[2:0]
   155                              <1> ReadAccess      equ 0h
   156                              <1> WriteAccess     equ 1h
   157                              <1> RWAccess        equ 2h
   158                              <1> ;Bit 3 reserved 0
   159                              <1> ;Sharing modes  Bits[6:4]
   160                              <1> CompatShare     equ 0h
   161                              <1> denyRWShare     equ 10h
   162                              <1> denyWriteShare  equ 20h
   163                              <1> denyReadShare   equ 30h
   164                              <1> denyNoneShare   equ 40h
   165                              <1> netFCBShare     equ 70h
   166                              <1> ;Bit 7 reserved 0
   167                              <1> ;Bits 8-12 reserved 0
   168                              <1> 
   169                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   170                              <1> ;Buffering on writes
   171                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   172                              <1> ;FCB opened file?
   173                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   174                              <1> ;Attribute Byte
   175                              <1> readOnlyFile    equ 1h
   176                              <1> hiddenFile      equ 2h
   177                              <1> systemFile      equ 4h
   178                              <1> volumeLabel     equ 8h
   179                              <1> directoryFile   equ 10h ;Directory entry
   180                              <1> archiveFile     equ 20h
   181                              <1> ;Device Info equates
   182                              <1> ;For a block device, bits [5:0] contain the drive number
   183                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   184                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   185                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   186                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   187                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   188                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   189                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   190                              <1> blokFileToFlush equ 40h ;Set if ANY writes are made to this handle!
   191                              <1> devCharDev      equ 80h ;If set, it is a char device!
   192                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   193                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   194                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   195                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   196                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   197                              <1> 
   198                              <1> ;openAddress   equ DOSSEG:367Ah   
   199                              <1> ;createAddress equ DOSSEG:35E3h   
   200                              <1> ;------------------------------------------------------------------------;
   201                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   202                              <1> ; to an internal buffer, and then copying it to the specified location
   203                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   204                              <1> ; another request for the same sector from the same device is made, so 
   205                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   206                              <1> ; size, selected according to the largest detected sector size during 
   207                              <1> ; the initial loadup.
   208                              <1> ;
   209                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   210                              <1> ;
   211                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   212                              <1> ;------------------------------------------------------------------------;
   213                              <1> 
   214                              <1> struc bufferHdr
   215 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   216 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   217 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   218 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   219 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   220 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   221 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   222 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   223 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   224                              <1>     .dataarea:             ;Points to the start of the data area
   225                              <1> endstruc
   226                              <1> ;Buffer Flag equates
   227                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   228                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   229                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   230                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   231                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   232                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   233                              <1> ;Note! A buffer is marked as referenced only when the application 
   234                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   235                              <1> ;------------------------------------------------------------------------;
   236                              <1> ; Memory control block for each memory arena
   237                              <1> ;------------------------------------------------------------------------;
   238                              <1> struc mcb
   239 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   240 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   241 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   242 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   243                              <1>     .program:
   244                              <1> endstruc
   245                              <1> ;MCB equates
   246                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   247                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   248                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   249                              <1> mcbMarkCtn      equ "M"
   250                              <1> mcbMarkEnd      equ "Z"
   251                              <1> 
   252                              <1> memFirstFit     equ 0   ;First free block goes to application
   253                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   254                              <1> memLastFit      equ 2   ;Last free block goes to application
   255                              <1> 
   256                              <1> ;Owner = Para aligned address => Owning application PSP
   257                              <1> ;...To consider...
   258                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   259                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   260                              <1> ;------------------------------------------------------------------------;
   261                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   262                              <1> ; following order, thus allowing for return values to be placed in the 
   263                              <1> ; registers by accessing the caller register stack frame.
   264                              <1> ;------------------------------------------------------------------------;
   265                              <1> struc callerFrame
   266 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   267 00000008 ????????????????    <1>     .rbx    resq 1    
   268 00000010 ????????????????    <1>     .rcx    resq 1
   269 00000018 ????????????????    <1>     .rdx    resq 1
   270 00000020 ????????????????    <1>     .rsi    resq 1
   271 00000028 ????????????????    <1>     .rdi    resq 1
   272 00000030 ????????????????    <1>     .rbp    resq 1
   273 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   274 00000040 ????????????????    <1>     .r9     resq 1
   275                              <1> ;Pushed by Processor when invoked via Interrupt
   276 00000048 ????????????????    <1>     .rip    resq 1
   277 00000050 ????????????????    <1>     .cs     resq 1
   278 00000058 ????????????????    <1>     .flags  resq 1
   279                              <1> endstruc
   280                              <1> 
   281                              <1> struc dpl
   282                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   283                              <1> ; server calls
   284 00000000 ????????????????    <1>     .rax    resq 1
   285 00000008 ????????????????    <1>     .rbx    resq 1
   286 00000010 ????????????????    <1>     .rcx    resq 1
   287 00000018 ????????????????    <1>     .rdx    resq 1
   288 00000020 ????????????????    <1>     .rsi    resq 1
   289 00000028 ????????????????    <1>     .rdi    resq 1
   290 00000030 ????????????????    <1>     .r8     resq 1
   291 00000038 ????????????????    <1>     .r9     resq 1
   292 00000040 ????????????????    <1>     .align  resq 1
   293 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   294 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   295                              <1> endstruc
   296                              <1> 
   297                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   298 00000000 ????????????????    <1>     .oldRBP         resq 1  
   299 00000008 ??                  <1>     .newBuffers     resb 1  ;New buffers value
   300 00000009 ??                  <1>     .newSFTVal      resb 1
   301 0000000A ??                  <1>     .newFCBSVal     resb 1
   302 0000000B ??                  <1>     .newProtFCBSVal resb 1  ;Number of protected FCBS
   303 0000000C ??                  <1>     .newLastdrive   resb 1
   304 0000000D ??                  <1>     .newStacks      resb 1  ;Ignored for now
   305 0000000E ????                <1>     .newStackSize   resb 2  ;Ignored for now
   306 00000010 ????????            <1>     .newAllocSize   resd 1  ;Used to keep track of reallocation size
   307 00000014 ????????            <1>                     resd 1  ;Alignment byte
   308 00000018 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc fcb
   312                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   313 00000000 ??                  <1>     .driveNum   resb 1
   314 00000001 ????????????????    <1>     .filename   resb 8
   315 00000009 ??????              <1>     .fileext    resb 3
   316 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   317                              <1> ;One block consists of 128 records, of size denoted in the below
   318 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   319 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   320 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   321 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   322 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   323 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   324 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   325 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   326 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   327                              <1>     ;If record size > 64, high byte is ignored.
   328                              <1>     ;Used for random read and write operations to find the right record
   329                              <1> endstruc
   330                              <1> 
   331                              <1> struc filename
   332                              <1> ;8.3 File name struct
   333 00000000 ????????????????    <1>     .fName  resb 8
   334 00000008 ??????              <1>     .fExt   resb 3
   335                              <1> endstruc
   336                              <1> 
   337                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   338 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   339 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   340 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   341 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   342 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   343 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   344 00000016 ????                <1>     .fileTime   resw 1  ;File time
   345 00000018 ????                <1>     .fileDate   resw 1  ;File date
   346 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   347 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   348                              <1> endstruc
   349                              <1> 
   350                              <1> struc psp
   351 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   352 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   353 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   354 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   355 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   356 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   357 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   358 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   359 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   360 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   361 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   362 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   363 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   364 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   365                              <1> ;Extra handle arrays are grouped into a linked list
   366                              <1> ;The below are in the same place as in DOS
   367 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   368 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   369                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   370 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   371 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   372                              <1> endstruc
   373                              <1> 
   374                              <1> struc clkStruc
   375 00000000 ????                <1>     .dateWord   resw 1
   376 00000002 ??                  <1>     .minutes    resb 1
   377 00000003 ??                  <1>     .hours      resb 1
   378 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   379 00000005 ??                  <1>     .seconds    resb 1
   380                              <1> endstruc
   381                              <1> 
   382                              <1> struc countryStruc
   383 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   384                              <1>                         ;0 = month day year hh:mm:ss
   385                              <1>                         ;1 = day month year hh:mm:ss
   386                              <1>                         ;2 = year month day hh:mm:ss
   387 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   388 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   389 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   390 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   391 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   392 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   393                              <1>                         ;0 = Symbol leads, without space
   394                              <1>                         ;1 = Symbol follows, without space
   395                              <1>                         ;2 = Symbol leads, one space
   396                              <1>                         ;3 = Symbol follows, one space
   397                              <1>                         ;4 = Symbol replace decimal separator
   398 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   399 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   400 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   401 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   402 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   403                              <1> endstruc
   404                              <1> 
   405                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   406                              <1> ;for a space of 64Gb
   407                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   408                              <1> dosLowBase  equ 600h    ;Low load address
   409                              <1> 
   410                              <1> ;Critical Error AH bitfield equates
   411                              <1> critRead    equ 0h
   412                              <1> critWrite   equ 1h
   413                              <1> critDOS     equ 0h
   414                              <1> critFAT     equ 2h
   415                              <1> critDir     equ 4h
   416                              <1> critData    equ 6h
   417                              <1> critFailOK  equ 8h
   418                              <1> critRetryOK equ 10h
   419                              <1> critIgnorOK equ 20h
   420                              <1> critCharDev equ 80h
   421                              <1> 
   422                              <1> critIgnore  equ 0
   423                              <1> critRetry   equ 1
   424                              <1> critAbort   equ 2
   425                              <1> critFail    equ 3
   426                              <1> 
   427                              <1> ;MISC ASCII control chars
   428                              <1> NUL equ 00h ;^@         | ASCII Null
   429                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   430                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   431                              <1> BEL equ 07h ;^G         | ASCII Bell
   432                              <1> BSP equ 08h ;^H         | ASCII Backspace
   433                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   434                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   435                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   436                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   437                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   438                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   439                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   440                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   441                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   442                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   443                              <1> SPC equ 20h ;Printable  | ASCII Space
   444                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   445                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   446                              <1> 
   447                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   448                              <1> ;Extended Ascii Codes
   449                              <1> eF1     equ 3Bh ;F1 second byte
   450                              <1> eF2     equ 3Ch ;F2 second byte
   451                              <1> eF3     equ 3Dh ;F3 second byte
   452                              <1> eF4     equ 3Eh ;F4 second byte
   453                              <1> eF5     equ 3Fh ;F5 second byte
   454                              <1> eF6     equ 40h ;F6 second byte
   455                              <1> eF7     equ 41h ;F7 second byte
   456                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   457                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   458                              <1> eIns    equ 52h ;Insert second byte
   459                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   460                              <1> 
   461                              <1> ;Default Configuration for the system
   462                              <1> 
   463                              <1> buffersDefault  equ 30
   464                              <1> filesDefault    equ 20
   465                              <1> fcbsDefault     equ 4
   466                              <1> safeFcbsDeflt   equ 0
   467                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Source/Include/dosError.inc"
     9                              <1> ;DOS Error codes
    10                              <1> 
    11                              <1> ;Extended Error Codes
    12                              <1> errInvFnc   equ 1   ;Invalid function number
    13                              <1> errFnf      equ 2   ;File not found
    14                              <1> errPnf      equ 3   ;Path not found
    15                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    16                              <1> errAccDen   equ 5   ;Access denied (to resource)
    17                              <1> errBadHdl   equ 6   ;Invalid handle
    18                              <1> errMCBbad   equ 7   ;MCB's destroyed
    19                              <1> errNoMem    equ 8   ;Insufficient memory
    20                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    21                              <1> errBadEnv   equ 10  ;Invalid environment
    22                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    23                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    24                              <1> errInvDat   equ 13  ;Invalid data
    25                              <1> ;           equ 14  ;Reserved
    26                              <1> errBadDrv   equ 15  ;Invalid drive specified
    27                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    28                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    29                              <1> errNoFil    equ 18  ;No more files
    30                              <1> ;The following are Driver error codes + 19
    31                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    32                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    33                              <1> errUnkUnt   equ 20  ;Unknown Unit
    34                              <1> errDrvNR    equ 21  ;Drive not ready
    35                              <1> errUnkCmd   equ 22  ;Unknown Command
    36                              <1> errCRCerr   equ 23  ;Data (CRC) error
    37                              <1> errBadRLn   equ 24  ;Bad request structure length
    38                              <1> errSekErr   equ 25  ;Seek error
    39                              <1> errUnkMed   equ 26  ;Unknown media type
    40                              <1> errSecNF    equ 27  ;Sector not Found
    41                              <1> errNoPap    equ 28  ;Printer out of paper
    42                              <1> errWF       equ 29  ;Write fault
    43                              <1> errRF       equ 30  ;Read fault
    44                              <1> errGF       equ 31  ;General fault
    45                              <1> ;----------------------------------------------
    46                              <1> ;The following two go inbetween the Disk errors
    47                              <1> errShrVio   equ 32  ;Sharing violations
    48                              <1> errLokVio   equ 33  ;File Lock violation
    49                              <1> ;----------------------------------------------
    50                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    51                              <1> errNoFCB    equ 35  ;FCB unavailable
    52                              <1> errShrFul   equ 36  ;Sharing buffer full
    53                              <1> 
    54                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    55                              <1> 
    56                              <1> errFilExist equ 80  ;File already exists
    57                              <1> errDirExist equ 82  ;Directory already exists
    58                              <1> errFI44     equ 83  ;Fail on INT 44h
    59                              <1> errRedir    equ 84  ;Too many levels of redirection
    60                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    61                              <1> errBadPass  equ 86  ;Bad password
    62                              <1> errBadParam equ 87  ;Bad parameter passed to request
    63                              <1> errNetWrite equ 88  ;Network Write Fault
    64                              <1> ;-----------------------------------------------------------------------------
    65                              <1> ;Error Loci
    66                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    67                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    68                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    69                              <1> eLocChr     equ 4   ;Serial/Character Device error
    70                              <1> eLocMem     equ 5   ;Related to RAM
    71                              <1> ;-----------------------------------------------------------------------------
    72                              <1> ;Error Actions
    73                              <1> eActRet     equ 1   ;Retry
    74                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    75                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    76                              <1> eActAbt     equ 4   ;Abort with cleanup
    77                              <1> eActKil     equ 5   ;Abort without cleanup
    78                              <1> eActIgn     equ 6   ;Ignore error
    79                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    80                              <1> ;-----------------------------------------------------------------------------
    81                              <1> ;Error classes
    82                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    83                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    84                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    85                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    86                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    87                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    88                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    89                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    90                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    91                              <1> eClsLocked  equ 10  ;Resource Locked
    92                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    93                              <1> eClsClash   equ 12  ;Resource already exists!
    94                              <1> eClsUnk     equ 13  ;Unknown class
     9                                  %include "./Source/Utils/COMMAND/Data/cmdEqu.asm"
    10                              <1> ;Data equates and struct declarations
    11                              <1> 
    12                              <1> cmdBufferL  equ 128 ;Length of a command line buffer
    13                              <1> driveSpecL  equ 2   ;Space for X:
    14                              <1> dirPathL    equ 64  ;Length of a directory path
    15                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
    16                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
    17                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
    18                              <1> fullDirPathL equ driveSpecL + dirPathL
    19                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    20                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    21                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    22                              <1> 
    23                              <1> ;Use PSP FCB's for switch buffers
    24                              <1> fcb1        equ psp.fcb1
    25                              <1> fcb2        equ psp.fcb2
    26                              <1> ;Use the dta as the built command line buffer.
    27                              <1> cmdLineCnt  equ psp.parmList
    28                              <1> cmdLine     equ psp.progTail
    29                              <1> 
    30                              <1> 
    31                              <1> ;Struct Declarations
    32                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    33 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    34 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    35 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    36 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    37 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    38                              <1> endstruc
    39                              <1> 
    40                              <1> struc execProg  ;For use with EXEC-ing a child task
    41 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    42 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    43 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    44 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    45                              <1> endstruc
    46                              <1> 
    47                              <1> ;Directory attribute equates
    48                              <1>     dirReadOnly     equ 01h
    49                              <1>     dirHidden       equ 02h
    50                              <1>     dirSystem       equ 04h
    51                              <1>     dirVolumeID     equ 08h
    52                              <1>     dirDirectory    equ 10h
    53                              <1>     dirArchive      equ 20h
    54                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    55                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    56                              <1>     ;If any of the three bits are set, then ALL three bits are set
    57                              <1>     ; in addition to whatever the user passed to search for.
    58                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    59                              <1>     dirIncFiles     equ dirHidden | dirSystem
    10                                  Segment .data align=1 
    11                                  %include "./Source/Utils/COMMAND/Data/cmdData.asm"
    12                              <1> ;Static Data Area for COMMAND.COM    
    13                              <1> startLbl:   ;Start symbol, this is the entry point
    14 00000000 E93B210000          <1>     jmp cmdLdr
    15 00000005 0000000000000000    <1> stackBottom dq 0    ;Pointer to the top of the stack as allocated by DOS
    16 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
    17 0000000F FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
    18 00000017 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
    19 0000001F 1400                <1> numHdls     dw 20   ;Get number of handles permitted, hardcoded in this version
    20 00000021 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    21 00000023 5C                  <1> pathSep     db "\"  ;Default path sep
    22 00000024 2F                  <1> switchChar  db "/"  ;Default switch char
    23                              <1> ;Static strings, not used in command line parsing
    24 00000025 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    24 0000002E 000000000000000000- <1>
    24 00000037 000000000000000000- <1>
    24 00000040 000000000000000000- <1>
    24 00000049 0000                <1>
    25 0000004B 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    25 00000054 000000000000000000- <1>
    25 0000005D 000000000000000000- <1>
    25 00000066 000000000000000000- <1>
    25 0000006F 000000000000000000- <1>
    25 00000078 000000000000000000- <1>
    25 00000081 000000000000000000- <1>
    25 0000008A 00000000            <1>
    26                              <1> 
    27                              <1> 
    28                              <1> cmdLineStatePtr:
    29 0000008E 00                  <1> cmdStartOff db 0    ;Offset to the first char for this command (may be a space)
    30 0000008F 00                  <1> cmdEndOff   db 0    ;Offset to the terminating char for this command (0Dh or |)
    31 00000090 00                  <1> pipeFlag    db 0    ;If set, we are piping across a command
    32 00000091 0000                <1> pipeHndl    dw 0    ;If pipeFlag set, this var has the handle to the pipe file
    33 00000093 202020202020202020- <1> pipeName    db 11 dup (" ") ;Name of the pipe file we created
    33 0000009C 2020                <1>
    34                              <1> 
    35                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    36                              <1> ;These variables are valid for a SINGLE command in a command line
    37 0000009E 0000                <1> cmdDrvSpec  dw 0    ;Read the first word in to see if the pathspec has drivespec
    38 000000A0 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    39 000000A1 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    40                              <1> ;                    If 2, we are redirecting output to a file, by appending
    41                              <1> ;FLG and SWCH are read as a word when checking if argX is a switch
    42 000000A2 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    43 000000A3 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    44 000000A4 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    45                              <1> 
    46 000000A5 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    47 000000A6 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    48 000000A7 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    49                              <1> 
    50                              <1> cmdStateL equ $ - cmdStatePtr
    51                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    52                              <1> 
    53                              <1> ;Structs and strings
    54                              <1> 
    55 000000A8 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    55 000000B1 00000000000000      <1>
    56 000000B8 2B                  <1> cmdFFBlock  db ffBlock_size ;Internal Find First Block to use as default DTA
    57                              <1> 
    58 000000B9 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    58 000000C2 000000000000000000- <1>
    58 000000CB 000000000000000000- <1>
    58 000000D4 000000000000000000- <1>
    58 000000DD 000000000000000000- <1>
    58 000000E6 000000000000000000- <1>
    58 000000EF 000000000000000000- <1>
    58 000000F8 000000000000000000- <1>
    58 00000101 000000000000000000- <1>
    58 0000010A 000000000000000000- <1>
    58 00000113 000000000000000000- <1>
    58 0000011C 000000000000000000- <1>
    58 00000125 000000000000000000- <1>
    58 0000012E 000000000000000000- <1>
    58 00000137 0000                <1>
    59 00000139 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    59 00000142 000000000000000000- <1>
    59 0000014B 000000000000000000- <1>
    59 00000154 000000000000000000- <1>
    59 0000015D 000000000000000000- <1>
    59 00000166 000000000000000000- <1>
    59 0000016F 000000000000000000- <1>
    59 00000178 000000000000000000- <1>
    59 00000181 000000000000000000- <1>
    59 0000018A 000000000000000000- <1>
    59 00000193 000000000000000000- <1>
    59 0000019C 000000000000000000- <1>
    59 000001A5 000000000000000000- <1>
    59 000001AE 000000000000000000- <1>
    59 000001B7 0000                <1>
    60 000001B9 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)  ;Space for full path to a external command
    60 000001C2 000000000000000000- <1>
    60 000001CB 000000000000000000- <1>
    60 000001D4 000000000000000000- <1>
    60 000001DD 000000000000000000- <1>
    60 000001E6 000000000000000000- <1>
    60 000001EF 000000000000000000- <1>
    60 000001F8 000000000000000000- <1>
    60 00000201 00000000000000      <1>
    61                              <1> 
    62 00000208 000000000000000000- <1> fcbCmdSpec  db fcbNameL dup (0) ;Used to make a FCB style name for the file
    62 00000211 0000                <1>
    63 00000213 000000000000000000- <1> cmdSpec     db fileNameZL dup (0)   ;ASCIIZ command spec for the command name
    63 0000021C 00000000            <1>
    64 00000220 000000000000000000- <1> cmdName     db cmdNameL dup (0) ;Command name string prefixed by length of word
    64 00000229 0000000000          <1>
    65                              <1> 
    66 0000022E 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    66 00000237 000000000000000000- <1>
    66 00000240 000000000000000000- <1>
    66 00000249 000000000000000000- <1>
    66 00000252 000000000000000000- <1>
    66 0000025B 000000000000000000- <1>
    66 00000264 000000000000000000- <1>
    66 0000026D 000000000000000000- <1>
    66 00000276 00000000000000      <1>
    67 0000027D 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    67 00000286 000000000000000000- <1>
    67 0000028F 000000000000000000- <1>
    67 00000298 000000000000000000- <1>
    67 000002A1 000000000000000000- <1>
    67 000002AA 000000000000000000- <1>
    67 000002B3 000000000000000000- <1>
    67 000002BC 000000000000000000- <1>
    67 000002C5 00000000000000      <1>
    68                              <1> 
    69 000002CC 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Contains the pathspec for the search file
    69 000002D5 000000000000000000- <1>
    69 000002DE 000000000000000000- <1>
    69 000002E7 000000000000000000- <1>
    69 000002F0 000000000000000000- <1>
    69 000002F9 000000000000000000- <1>
    69 00000302 000000000000000000- <1>
    69 0000030B 000000000000000000- <1>
    69 00000314 000000000000000000- <1>
    69 0000031D 000000000000000000- <1>
    69 00000326 000000000000000000- <1>
    69 0000032F 000000000000000000- <1>
    69 00000338 000000000000000000- <1>
    69 00000341 000000000000000000- <1>
    69 0000034A 0000                <1>
    70                              <1> ;The above is larger than is needed/supported by DOS to allow for 
    71                              <1> ; users overtyping
    72                              <1> 
    73                              <1> ;Internal Function vars
    74 0000034C 00                  <1> dirPrnType  db 0    ;Print type.    Bit[0] set => /W or /w specified
    75                              <1> ;                                   Bit[1] set => /P or /p specified
    76 0000034D 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    77 0000034E 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    78 0000034F 00                  <1> dirPathOff  db 0
    79 00000350 000000000000000000- <1> dirVolLbl   db 13 dup (0)
    79 00000359 00000000            <1>
    80 0000035D 0000000000000000    <1> dirVolPathBuf db 8 dup (0)  ;Used to build X:\*.*,0 for volume label search
    81 00000365 00                  <1> dirDrv      db 0    ;0 based drive number to use
    82 00000366 00                  <1> dirVolFlg   db 0    
    83                              <1> 
    84                              <1> 
    85 00000367 00                  <1> td1 db 0    ;Minutes/Year
    86 00000368 00                  <1> td2 db 0    ;Hours/Zero
    87 00000369 00                  <1> td3 db 0    ;Hundredths/Day
    88 0000036A 00                  <1> td4 db 0    ;Seconds/Month
    12                                  %include "./Source/Utils/COMMAND/Data/cmdTable.asm"
    13                              <1> ;Function dispatch table
    14                              <1> functionTable:
    15                              <1> ;Use Pascal strings with each row of hte table having three columns:
    16                              <1> ; Col 1, BYTE, Length of command
    17                              <1> ; Col 2, String, String representing the user input
    18                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
    19 0000036B 03444952            <1>     db 3, "DIR"
    20 0000036F 9C0E                <1>     dw dir - startLbl
    21                              <1> 
    22 00000371 024344              <1>     db 2, "CD"
    23 00000374 9E12                <1>     dw chdir - startLbl
    24                              <1> 
    25 00000376 054348444952        <1>     db 5, "CHDIR"
    26 0000037C 9E12                <1>     dw chdir - startLbl
    27                              <1> 
    28 0000037E 024D44              <1>     db 2, "MD"
    29 00000381 5813                <1>     dw mkdir - startLbl
    30                              <1> 
    31 00000383 054D4B444952        <1>     db 5, "MKDIR"
    32 00000389 5813                <1>     dw mkdir - startLbl
    33                              <1> 
    34 0000038B 025244              <1>     db 2, "RD"
    35 0000038E BD13                <1>     dw rmdir - startLbl
    36                              <1> 
    37 00000390 05524D444952        <1>     db 5, "RMDIR"
    38 00000396 BD13                <1>     dw rmdir - startLbl
    39                              <1> 
    40 00000398 0344454C            <1>     db 3, "DEL"
    41 0000039C 2314                <1>     dw erase - startLbl
    42                              <1> 
    43 0000039E 054552415345        <1>     db 5, "ERASE"
    44 000003A4 2314                <1>     dw erase - startLbl
    45                              <1> 
    46 000003A6 0444415445          <1>     db 4, "DATE"
    47 000003AB 2414                <1>     dw date - startLbl
    48                              <1> 
    49 000003AD 0454494D45          <1>     db 4, "TIME"
    50 000003B2 EA14                <1>     dw time - startLbl
    51                              <1> 
    52 000003B4 04434F5059          <1>     db 4, "COPY"
    53 000003B9 2214                <1>     dw copy - startLbl
    54                              <1> 
    55 000003BB 0443545459          <1>     db 4, "CTTY"
    56 000003C0 8215                <1>     dw ctty - startLbl
    57                              <1> 
    58 000003C2 03434C53            <1>     db 3, "CLS"
    59 000003C6 8315                <1>     dw cls - startLbl
    60                              <1> 
    61 000003C8 05425245414B        <1>     db 5, "BREAK"
    62 000003CE F515                <1>     dw break - startLbl
    63                              <1> 
    64 000003D0 06564552494659      <1>     db 6, "VERIFY"
    65 000003D7 7616                <1>     dw verify - startLbl
    66                              <1> 
    67 000003D9 0652454E414D45      <1>     db 6, "RENAME"
    68 000003E0 F316                <1>     dw rename - startLbl
    69                              <1> 
    70 000003E2 08545255454E414D45  <1>     db 8, "TRUENAME"
    71 000003EB F416                <1>     dw truename - startLbl
    72                              <1> 
    73 000003ED 03564552            <1>     db 3, "VER"
    74 000003F1 5217                <1>     dw version - startLbl
    75                              <1> 
    76 000003F3 03564F4C            <1>     db 3, "VOL"
    77 000003F7 3217                <1>     dw volume - startLbl
    78                              <1> 
    79 000003F9 034D454D            <1>     db 3, "MEM"
    80 000003FD 9617                <1>     dw memory - startLbl
    81                              <1> 
    82 000003FF FF                  <1>     db -1   ;End of table
    13                                  %include "./Source/Utils/COMMAND/Data/cmdMsg.asm"
    14                              <1> ;COMMAND.COM Messages and strings
    15 00000400 0D0A24              <1> crlf    db  CR,LF,"$"
    16 00000403 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
    17 00000408 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
    17 00000411 696C65206D69737369- <1>
    17 0000041A 6E670D0A24          <1>
    18 0000041F 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
    18 00000428 6469736B2077697468- <1>
    18 00000431 206261746368206669- <1>
    18 0000043A 6C65                <1>
    19 0000043C 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
    19 00000445 737320616E79206B65- <1>
    19 0000044E 79207768656E207265- <1>
    19 00000457 6164790D0A24        <1>
    20 0000045D 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
    20 00000466 6E64206F722066696C- <1>
    20 0000046F 65206E616D650D0A24  <1>
    21 00000478 4475706C6963617465- <1> dupName db  "Duplicate file name or "
    21 00000481 2066696C65206E616D- <1>
    21 0000048A 65206F7220          <1>
    22 0000048F 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    22 00000498 666F756E640D0A24    <1>
    23 000004A0 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    23 000004A9 656E74206469736B20- <1>
    23 000004B2 73706163650D0A24    <1>
    24 000004BA 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    24 000004C3 7669726F6E6D656E74- <1>
    24 000004CC 2073706163650D0A24  <1>
    25 000004D5 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    25 000004DE 74696F6E206572726F- <1>
    25 000004E7 720D0A24            <1>
    26 000004EB 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    26 000004F4 6F7420626520636F70- <1>
    26 000004FD 696564206F6E746F20- <1>
    26 00000506 697473656C660D0A24  <1>
    27 0000050F 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    27 00000518 662064657374696E61- <1>
    27 00000521 74696F6E206C6F7374- <1>
    27 0000052A 206265666F72652063- <1>
    27 00000533 6F70790D0A24        <1>
    28                              <1> ;Copy end message. First write # files copied then this message 
    29 00000539 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    29 00000542 636F706965640D0A24  <1>
    30                              <1> ;Dir end1 msg. First write # files in dir then this
    31 0000054B 2046696C6528732920- <1> dirOk   db  " File(s) $"
    31 00000554 24                  <1>
    32                              <1> ;Dir end2 msg. First write # bytes free then this message
    33 00000555 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    33 0000055E 65650D0A24          <1>
    34 00000563 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    35                              <1> 
    36 0000056C 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    36 00000575 726976652073706563- <1>
    36 0000057E 696669636174696F6E- <1>
    36 00000587 0D0A24              <1>
    37 0000058A 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    37 00000593 6B6579207768656E20- <1>
    37 0000059C 7265616479202E202E- <1>
    37 000005A5 202E2024            <1>
    38 000005A9 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    38 000005B2 6172616D657465720D- <1>
    38 000005BB 0A24                <1>
    39                              <1> 
    40 000005BD 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    40 000005C6 576564546875467269- <1>
    40 000005CF 536174              <1>
    41 000005D2 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    41 000005DB 206461746524        <1>
    42 000005E1 43757272656E742064- <1> curDate db  "Current date is $"
    42 000005EA 6174652069732024    <1>
    43 000005F2 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    43 000005FB 657720646174652024  <1>
    44 00000604 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    44 0000060D 293A2024            <1>
    45 00000611 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    45 0000061A 293A2024            <1>
    46 0000061E 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    46 00000627 293A2024            <1>
    47 0000062B 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    47 00000634 2074696D6524        <1>
    48 0000063A 43757272656E742074- <1> curTime db  "Current time is $"
    48 00000643 696D652069732024    <1>
    49 0000064B 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    49 00000654 65772074696D653A20- <1>
    49 0000065D 24                  <1>
    50                              <1> 
    51 0000065E 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    51 00000667 7572652028592F4E29- <1>
    51 00000670 3F2024              <1>
    52                              <1> 
    53 00000673 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    53 0000067C 56657273696F6E2024  <1>
    54                              <1> 
    55 00000685 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    55 0000068E 6E2064726976652024  <1>
    56 00000697 2069732024          <1> volOk   db " is $"
    57 0000069C 20686173206E6F206C- <1> volNo   db " has no label$"
    57 000006A5 6162656C24          <1>
    58                              <1> 
    59 000006AA 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    59 000006B3 69726563746F72790D- <1>
    59 000006BC 0A24                <1>
    60 000006BE 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    60 000006C7 206372656174652064- <1>
    60 000006D0 69726563746F72790D- <1>
    60 000006D9 0A24                <1>
    61 000006DB 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    61 000006E4 6174682C206E6F7420- <1>
    61 000006ED 6469726563746F7279- <1>
    61 000006F6 2C0D0A              <1>
    62 000006F9 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    62 00000702 6F7279206E6F742065- <1>
    62 0000070B 6D7074790D0A24      <1>
    63 00000712 204469726563746F72- <1> dirMain db " Directory of  $"
    63 0000071B 79206F66202024      <1>
    64 00000722 4E6F20506174682024  <1> noPath  db "No Path $"
    65 0000072B 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    65 00000734 7269766520696E2073- <1>
    65 0000073D 656172636820706174- <1>
    65 00000746 680D0A24            <1>
    66 0000074A 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    66 00000753 65766963650D0A24    <1>
    67 0000075B 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    67 00000764 20666F756E640D0A24  <1>
    68 0000076D 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    68 00000776 726F720D0A24        <1>
    69 0000077C 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    69 00000785 6F74206265206E6573- <1>
    69 0000078E 7465640D0A24        <1>
    70 00000794 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    70 0000079D 6174652066696C6520- <1>
    70 000007A6 6572726F7220647572- <1>
    70 000007AF 696E6720706970650D- <1>
    70 000007B8 0A24                <1>
    71 000007BA 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    71 000007C3 2062696E6172792072- <1>
    71 000007CC 656164732066726F6D- <1>
    71 000007D5 206120646576696365- <1>
    71 000007DE 0D0A24              <1>
    72 000007E1 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    73 000007E7 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    74 000007EC 425245414B20697320- <1> breakIs db "BREAK is $"
    74 000007F5 24                  <1>
    75 000007F6 564552494659206973- <1> verifyIs    db "VERIFY is $"
    75 000007FF 2024                <1>
    76 00000801 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    77 0000080A 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    77 00000813 617468206F72206669- <1>
    77 0000081C 6C65206E616D650D0A- <1>
    77 00000825 24                  <1>
    78 00000826 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    78 0000082F 756D626572206F6620- <1>
    78 00000838 706172616D65746572- <1>
    78 00000841 730D0A24            <1>
    79 00000845 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    79 0000084E 74696E6720746F2064- <1>
    79 00000857 6576696365          <1>
    80 0000085C 08200800            <1> backSpace   db BSP," ",BSP,NUL
    81                              <1> 
    82 00000860 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    82 00000869 20202020202020546F- <1>
    82 00000872 74616C207379737465- <1>
    82 0000087B 6D206D656D6F72793A- <1>
    82 00000884 2024                <1>
    83 00000886 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    83 0000088F 20202020202020204D- <1>
    83 00000898 656D6F727920757365- <1>
    83 000008A1 6420627920444F533A- <1>
    83 000008AA 2024                <1>
    84 000008AC 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    84 000008B5 656D6F727920757365- <1>
    84 000008BE 64206279206170706C- <1>
    84 000008C7 69636174696F6E733A- <1>
    84 000008D0 2024                <1>
    85 000008D2 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    85 000008DB 656D6F727920726573- <1>
    85 000008E4 657276656420627920- <1>
    85 000008ED 68617264776172653A- <1>
    85 000008F6 2024                <1>
    86 000008F8 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    86 00000901 202020202020202020- <1>
    86 0000090A 2020202020204D656D- <1>
    86 00000913 6F727920667265653A- <1>
    86 0000091C 2024                <1>
    87 0000091E 20627974657324      <1> memByte db " bytes$"
    88 00000925 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    88 0000092E 6F7420417373657274- <1>
    88 00000937 61696E20444F532045- <1>
    88 00000940 6E74727920506F696E- <1>
    88 00000949 7424                <1>
    89 0000094B 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    89 00000954 416C6C6F636174696F- <1>
    89 0000095D 6E204572726F7224    <1>
    90 00000965 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    90 0000096E 4572726F7224        <1>
    91 00000974 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    91 0000097D 68616C74656424      <1>
    92                              <1> 
    93                              <1> 
    94 00000984 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    95 00000988 2020202024          <1> fourSpc  db "    $"
    96 0000098D 20202024            <1> threeSpc db "   $"
    97 00000991 202024              <1> twoSpc   db "  $"
    98                              <1> 
    99 00000994 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    99 0000099D 696679204F4E206F72- <1>
    99 000009A6 204F46460D0A24      <1>
   100 000009AD 504154483D          <1> pathEVar db "PATH="
   101 000009B2 50524F4D50543D      <1> promptEVar  db "PROMPT="
    14                                  %include "./Source/Utils/COMMAND/Source/cmdMain.asm"
    15                              <1> commandStart:
    16                              <1>     ;Resize Allocation, jump here with endpointer in rbx
    17                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
    18                              <1>     ; that the jump to safety won't be gobbled up when multitasking
    19 000009B9 49F7D8              <1>     neg r8  ;Convert r8 to -r8
    20 000009BC 4A8D5C0311          <1>     lea rbx, qword [rbx + r8 + 11h]    ;Get # of bytes for COMMAND.COM
    21 000009C1 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
    22 000009C4 B44A                <1>     mov ah, 4Ah ;Realloc
    23 000009C6 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    24 000009C9 CD41                <1>     int 41h
    25 000009CB EB5A                <1>     jmp short commandMain
    26                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    27 000009CD B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    28 000009D2 CD41                <1>     int 41h
    29 000009D4 66890532F6FFFF      <1>     mov word [returnCode], ax
    30                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    31 000009DB 488D15A0140000      <1>     lea rdx, critErrorHandler
    32 000009E2 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    33 000009E6 B844250000          <1>     mov eax, 2544h
    34 000009EB CD41                <1>     int 41h
    35 000009ED 488D151E170000      <1>     lea rdx, int43h
    36 000009F4 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    37 000009F8 B843250000          <1>     mov eax, 2543h
    38 000009FD CD41                <1>     int 41h
    39 000009FF 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    40 00000A06 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    41 00000A0A B842250000          <1>     mov eax, 2542h
    42 00000A0F CD41                <1>     int 41h
    43                              <1> ;Close all handles from 5->MAX
    44 00000A11 0FB70D07F6FFFF      <1>     movzx ecx, word [numHdls]
    45 00000A18 BB05000000          <1>     mov ebx, 5
    46                              <1> .handleClose:
    47 00000A1D B43E                <1>     mov ah, 3Eh ;File close
    48 00000A1F CD41                <1>     int 41h
    49 00000A21 FFC3                <1>     inc ebx ;Goto next file
    50 00000A23 39CB                <1>     cmp ebx, ecx
    51 00000A25 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    52                              <1> commandMain:
    53                              <1> ;Setup Commandline
    54 00000A27 FA                  <1>     cli
    55 00000A28 488B25D6F5FFFF      <1>     mov rsp, qword [stackBottom]    ;Reset internal stack pointer pos
    56 00000A2F FB                  <1>     sti
    57 00000A30 FC                  <1>     cld ;Ensure stringops are done the right way
    58 00000A31 C60581F6FFFF80      <1>     mov byte [inBuffer], 80h    ;Reset the buffer length
    59                              <1> .inputMain:
    60 00000A38 E818120000          <1>     call clearCommandLineState
    61 00000A3D E89F0E0000          <1>     call printCRLF
    62 00000A42 E8E6110000          <1>     call printPrompt
    63                              <1> 
    64 00000A47 488D156BF6FFFF      <1>     lea rdx, inBuffer
    65 00000A4E B80A0C0000          <1>     mov eax, 0C0Ah  ;Do Buffered input
    66 00000A53 CD41                <1>     int 41h
    67 00000A55 E8870E0000          <1>     call printCRLF  ;Note we have accepted input
    68                              <1> 
    69                              <1> ;First check we had something typed in of length greater than 1
    70                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    71 00000A5A 803D59F6FFFF01      <1>     cmp byte [inBuffer + 1], 1  ;Check input length valid
    72 00000A61 762A                <1>     jbe .dfltErrExit
    73                              <1>     ;Copy over the input text
    74 00000A63 488D354FF6FFFF      <1>     lea rsi, inBuffer
    75 00000A6A 488D3DC8F6FFFF      <1>     lea rdi, cmdBuffer
    76 00000A71 B980000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    77 00000A76 F3A4                <1>     rep movsb
    78 00000A78 31C0                <1>     xor eax, eax
    79 00000A7A 6689050DF6FFFF      <1>     mov word [cmdStartOff], ax  ;Clear start and end Off positions
    80 00000A81 E814000000          <1>     call parseInput
    81 00000A86 E8AD010000          <1>     call doCommandLine
    82 00000A8B EBAB                <1>     jmp short .inputMain
    83                              <1> .dfltErrExit:
    84 00000A8D 488D15C9F9FFFF      <1>     lea rdx, badCmd
    85 00000A94 B409                <1>     mov ah, 09h
    86 00000A96 CD41                <1>     int 41h
    87 00000A98 EB9E                <1>     jmp short .inputMain
    88                              <1> 
    89                              <1> parseInput:
    90                              <1> ;EndOff is set up before entering this part
    91                              <1> ;Copies a nicely formatted version of the input command line
    92                              <1> ; without any redirections to psp.dta
    93 00000A9A 488D359AF6FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
    94 00000AA1 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
    95 00000AA8 0FB61DE0F5FFFF      <1>     movzx ebx, byte [cmdEndOff] ;Get the old end offset
    96 00000AAF 4801DE              <1>     add rsi, rbx    ;Move rsi to the start of this new command
    97 00000AB2 E867110000          <1>     call skipSpaces ;Skip any preceeding spaces
    98 00000AB7 66AD                <1>     lodsw   ;Get the first two chars into ax
    99 00000AB9 668905DEF5FFFF      <1>     mov word [cmdDrvSpec], ax ;Store these chars as if they are the drvspec
   100 00000AC0 4881EE02000000      <1>     sub rsi, 2  ;Go back to the start of the command
   101 00000AC7 56                  <1>     push rsi
   102 00000AC8 57                  <1>     push rdi
   103 00000AC9 488D3DE9F6FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   104 00000AD0 57                  <1>     push rdi
   105 00000AD1 E868030000          <1>     call copyCommandTailItem
   106 00000AD6 5F                  <1>     pop rdi
   107 00000AD7 9C                  <1>     pushfq  ;Save the CF state
   108 00000AD8 E8C9100000          <1>     call strlen
   109 00000ADD FFC9                <1>     dec ecx ;Drop the terminating char from the count
   110 00000ADF 58                  <1>     pop rax ;Get the CF state in al
   111 00000AE0 5F                  <1>     pop rdi
   112 00000AE1 5E                  <1>     pop rsi
   113 00000AE2 F3A4                <1>     rep movsb   ;Now we copy the command into the psp command line
   114 00000AE4 A801                <1>     test al, 1  ;Was CF set?
   115 00000AE6 0F8586000000        <1>     jnz .exit   ;If an embedded CR was found in the filename, exit!
   116                              <1> .cmdLineProcess:
   117 00000AEC E82D110000          <1>     call skipSpaces ;Go to the next char in the input line
   118                              <1> .redirFound:
   119 00000AF1 AC                  <1>     lodsb   ;Get first non-space char (setupRedir skips spaces before ret)
   120 00000AF2 3C0D                <1>     cmp al, CR  ;If this was a CR, we stop processing
   121 00000AF4 747C                <1>     je .exit
   122 00000AF6 E8D6020000          <1>     call checkAndSetupRedir ;If not, check if we have a redir element
   123 00000AFB 7275                <1>     jc .exit    ;CF=CY only if pipe, which is equivalent to CR when processing
   124 00000AFD 74F2                <1>     jz .redirFound  ;If we had a < > or >>, proceed to check if next char CR
   125 00000AFF B020                <1>     mov al, " "
   126 00000B01 AA                  <1>     stosb   ;Store a space to make space for the command file parameter
   127 00000B02 48FFCE              <1>     dec rsi ;Move rsi back to the first char
   128 00000B05 F60596F5FFFFFF      <1>     test byte [arg1Flg], -1
   129 00000B0C 7521                <1>     jnz .arg2
   130                              <1> .arg1:
   131 00000B0E C6058DF5FFFFFF      <1>     mov byte [arg1Flg], -1
   132 00000B15 E804110000          <1>     call skipSpaces
   133 00000B1A 4889F0              <1>     mov rax, rsi
   134 00000B1D 488D1D15F6FFFF      <1>     lea rbx, cmdBuffer
   135 00000B24 4829D8              <1>     sub rax, rbx
   136 00000B27 880576F5FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   137 00000B2D EB2A                <1>     jmp short .argCommon
   138                              <1> .arg2:
   139 00000B2F F6056FF5FFFFFF      <1>     test byte [arg2Flg], -1
   140 00000B36 7521                <1>     jnz .argCommon
   141 00000B38 C60566F5FFFFFF      <1>     mov byte [arg2Flg], -1
   142 00000B3F E8DA100000          <1>     call skipSpaces
   143 00000B44 4889F0              <1>     mov rax, rsi
   144 00000B47 488D1DEBF5FFFF      <1>     lea rbx, cmdBuffer
   145 00000B4E 4829D8              <1>     sub rax, rbx
   146 00000B51 88054FF5FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   147 00000B57 EB00                <1>     jmp short .argCommon
   148                              <1> .argCommon:
   149                              <1>     ;More than two arguments? Do nothing more than just copy it
   150                              <1>     ; over. If we encounter an embedded CR, exit there too
   151 00000B59 E8C0100000          <1>     call skipSpaces
   152 00000B5E 803E0D              <1>     cmp byte [rsi], CR  ;Are we at the end of the commandline?
   153 00000B61 740F                <1>     je .exit
   154                              <1>     ;If not, we copy it over
   155 00000B63 E8D6020000          <1>     call copyCommandTailItem    ;Stores a terminating null we dont want
   156 00000B68 488D7FFF            <1>     lea rdi, qword [rdi - 1]    ;Point back at the inserted terminating null
   157 00000B6C 0F837AFFFFFF        <1>     jnc .cmdLineProcess
   158                              <1> .exit:
   159 00000B72 488D1DC0F5FFFF      <1>     lea rbx, cmdBuffer
   160 00000B79 48FFCE              <1>     dec rsi
   161 00000B7C 4829DE              <1>     sub rsi, rbx    ;Get the offset into the command line
   162 00000B7F 89F3                <1>     mov ebx, esi
   163 00000B81 881D08F5FFFF        <1>     mov byte [cmdEndOff], bl    ;Store the offset to the terminating char
   164 00000B87 B00D                <1>     mov al, CR
   165 00000B89 AA                  <1>     stosb   ;Store the terminating CR in the psp command line
   166                              <1>     ;Now compute the command line length 
   167 00000B8A 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine] 
   168 00000B91 B00D                <1>     mov al, CR
   169 00000B93 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   170 00000B95 FFC9                <1>     dec ecx ;rcx = -1
   171 00000B97 F2AE                <1>     repne scasb
   172 00000B99 F7D1                <1>     not ecx
   173 00000B9B FEC9                <1>     dec cl  ;Dont include terminating CR
   174 00000B9D 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   175 00000BA4 880F                <1>     mov byte [rdi], cl
   176                              <1>     ;Before returning, we copy the command name to cmdName
   177 00000BA6 488D3D0CF6FFFF      <1>     lea rdi, cmdPathSpec
   178 00000BAD 4889FB              <1>     mov rbx, rdi    ;Use rbx as the ptr to the first char in the commandspec
   179 00000BB0 30C0                <1>     xor al, al  ;Search for the terminating null
   180 00000BB2 B94F000000          <1>     mov ecx, fileSpecZL ;Max number of chars the length could be
   181 00000BB7 F2AE                <1>     repne scasb
   182 00000BB9 48FFCF              <1>     dec rdi ;Go to the last char in the command
   183 00000BBC 4889FE              <1>     mov rsi, rdi
   184 00000BBF FD                  <1>     std ;Now we go backwards to where rsi = rbx OR byte [rsi] = pathSep
   185                              <1> .keepSearching:
   186 00000BC0 AC                  <1>     lodsb
   187 00000BC1 3A055CF4FFFF        <1>     cmp al, byte [pathSep]
   188 00000BC7 740B                <1>     je .cmdStartFnd
   189 00000BC9 4839DE              <1>     cmp rsi, rbx
   190 00000BCC 75F2                <1>     jne .keepSearching
   191 00000BCE 48FFCE              <1>     dec rsi ;Go back two to go forwards again
   192 00000BD1 48FFCE              <1>     dec rsi
   193                              <1> .cmdStartFnd:
   194 00000BD4 48FFC6              <1>     inc rsi
   195 00000BD7 48FFC6              <1>     inc rsi ;Go past the pathsep
   196 00000BDA FC                  <1>     cld ;Go the sane way again
   197 00000BDB 488D3D3FF6FFFF      <1>     lea rdi, qword [cmdName + 1]    ;First byte is for the length of the name
   198 00000BE2 57                  <1>     push rdi    ;Cleanse the field before usage (not strictly necessary)
   199 00000BE3 B90E000000          <1>     mov ecx, cmdNameL
   200 00000BE8 30C0                <1>     xor al, al
   201 00000BEA F3AA                <1>     rep stosb
   202 00000BEC 5F                  <1>     pop rdi
   203 00000BED 31C9                <1>     xor ecx, ecx
   204 00000BEF 56                  <1>     push rsi    ;Save the location of the start byte of the command name
   205                              <1> .cmdGetChar:
   206 00000BF0 AC                  <1>     lodsb
   207 00000BF1 84C0                <1>     test al, al ;Did we find the terminating null?
   208 00000BF3 7411                <1>     jz .nameLenFnd
   209 00000BF5 3C2E                <1>     cmp al, "." ;Extension sep also terminates
   210 00000BF7 740D                <1>     je .nameLenFnd
   211 00000BF9 24DF                <1>     and al, 0DFh    ;Else uppercase the char
   212 00000BFB AA                  <1>     stosb   ;and store it
   213 00000BFC FFC1                <1>     inc ecx
   214 00000BFE 81F90B000000        <1>     cmp ecx, 11 ;Max command length is 11
   215 00000C04 72EA                <1>     jb .cmdGetChar
   216                              <1> .nameLenFnd:
   217 00000C06 880D14F6FFFF        <1>     mov byte [cmdName], cl  ;Store the name length now
   218                              <1>     ;Now finally, create a FCB filespec
   219 00000C0C 488D3DF5F5FFFF      <1>     lea rdi, fcbCmdSpec
   220 00000C13 57                  <1>     push rdi
   221 00000C14 B90B000000          <1>     mov ecx, fcbNameL
   222 00000C19 B020                <1>     mov al, " " ;Fill with spaces
   223 00000C1B F3AA                <1>     rep stosb
   224 00000C1D 5F                  <1>     pop rdi
   225 00000C1E 5E                  <1>     pop rsi ;Get back the location of the start byte of the command name
   226 00000C1F E842100000          <1>     call asciiToFCB
   227 00000C24 488D35DDF5FFFF      <1>     lea rsi, fcbCmdSpec
   228 00000C2B 488D3DE1F5FFFF      <1>     lea rdi, cmdSpec
   229 00000C32 E88A100000          <1>     call FCBToAsciiz
   230                              <1>     return
    19                              <2> %%_ret:
    20 00000C37 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   231                              <1> 
   232                              <1> doCommandLine:
   233 00000C38 488D35FCF4FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
   234 00000C3F 488D3D62F4FFFF      <1>     lea rdi, cmdFcb
   235 00000C46 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks
   236 00000C4B CD41                <1>     int 41h
   237 00000C4D 0FB71D4AF4FFFF      <1>     movzx ebx, word [cmdDrvSpec]    ;Get the drive specifier
   238 00000C54 80FF3A              <1>     cmp bh, ":"
   239 00000C57 752E                <1>     jne .noDriveSpecified
   240 00000C59 88DA                <1>     mov dl, bl      ;Move the drive letter in dl
   241 00000C5B 80E2DF              <1>     and dl, 0DFh    ;Make the drive letter upper case
   242 00000C5E 80EA41              <1>     sub dl, "A"     ;And make it a 0 based drive letter
   243 00000C61 3CFF                <1>     cmp al, -1  ;Int 41h returns AL = -1 if bad drive specified
   244 00000C63 7415                <1>     je .badDrive
   245                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   246 00000C65 803DB4F5FFFF02      <1>     cmp byte [cmdName], 2
   247 00000C6C 7519                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   248 00000C6E B40E                <1>     mov ah, 0Eh ;Set drive to dl
   249 00000C70 CD41                <1>     int 41h 
   250 00000C72 B419                <1>     mov ah, 19h
   251 00000C74 CD41                <1>     int 41h     ;Get current drive
   252 00000C76 38D0                <1>     cmp al, dl  ;If the drive was set, all is well
   253                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000C78 74(37)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   254                              <1> .badDrive:
   255 00000C7A 488D15EBF8FFFF      <1>     lea rdx, badDrv
   256 00000C81 B409                <1>     mov ah, 09h
   257 00000C83 CD41                <1>     int 41h
   258 00000C85 F9                  <1>     stc
   259                              <1>     return
    19                              <2> %%_ret:
    20 00000C86 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   260                              <1> .noDriveSpecified:
   261                              <1> ;Now we set the two FCB's in the command line
   262 00000C87 F60514F4FFFFFF      <1>     test byte [arg1Flg], -1
   263 00000C8E 744D                <1>     jz .fcbArgsDone
   264 00000C90 0FB6050CF4FFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   265 00000C97 488D359BF4FFFF      <1>     lea rsi, cmdBuffer
   266 00000C9E 4801C6              <1>     add rsi, rax    ;Point to first argument
   267 00000CA1 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   268 00000CA5 B801290000          <1>     mov eax, 2901h
   269 00000CAA CD41                <1>     int 41h
   270 00000CAC 8805F2F3FFFF        <1>     mov byte [arg1FCBret], al
   271 00000CB2 F605ECF3FFFFFF      <1>     test byte [arg2Flg], -1
   272 00000CB9 7422                <1>     jz .fcbArgsDone
   273 00000CBB 0FB605E4F3FFFF      <1>     movzx eax, byte [arg2Off]
   274 00000CC2 488D3570F4FFFF      <1>     lea rsi, cmdBuffer
   275 00000CC9 4801C6              <1>     add rsi, rax    ;Point to first argument
   276 00000CCC 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   277 00000CD0 B801290000          <1>     mov eax, 2901h
   278 00000CD5 CD41                <1>     int 41h
   279 00000CD7 8805CAF3FFFF        <1>     mov byte [arg2FCBret], al
   280                              <1> .fcbArgsDone:
   281 00000CDD 488D3555F4FFFF      <1>     lea rsi, cmdBuffer
   282 00000CE4 488D1D35F5FFFF      <1>     lea rbx, cmdName
   283 00000CEB B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   284 00000CF0 BAFFFF0000          <1>     mov edx, 0FFFFh
   285 00000CF5 B5FF                <1>     mov ch, -1
   286 00000CF7 CD4F                <1>     int 4Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   287                              <1>             ;        al = 0  if the command should be executed as usual
   288 00000CF9 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   289 00000CFE BAFFFF0000          <1>     mov edx, 0FFFFh
   290 00000D03 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   291 00000D05 CD4F                <1>     int 4Fh
   292 00000D07 741D                <1>     jz .executeInternal
   293                              <1>     ;Here we execute externally and return to the prompt
   294                              <1>     ; as if it was an internal execution
   295 00000D09 488D35A9F3FFFF      <1>     lea rsi, inBuffer ;Point to this built buffer
   296 00000D10 488D1D91F3FFFF      <1>     lea rbx, cmdFcb
   297 00000D17 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   298 00000D1C BAFFFF0000          <1>     mov edx, 0FFFFh
   299 00000D21 B5FF                <1>     mov ch, -1
   300 00000D23 CD4F                <1>     int 4Fh 
   301                              <1>     return
    19                              <2> %%_ret:
    20 00000D25 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   302                              <1> .executeInternal:
   303                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   304                              <1> ;rsi points after the command terminator in the command tail
   305 00000D26 488D1D3EF6FFFF      <1>     lea rbx, functionTable
   306                              <1> .nextEntry:
   307 00000D2D 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   308 00000D30 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   309 00000D33 743D                <1>     je .external      ;If so, check externally now
   310 00000D35 380DE5F4FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   311 00000D3B 7529                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   312                              <1>     ;Here they have the same length so lets see if the name is the same
   313 00000D3D 56                  <1>     push rsi
   314                              <1>     ;ecx has the length to compare
   315 00000D3E 51                  <1>     push rcx
   316 00000D3F 488D7301            <1>     lea rsi, qword [rbx + 1]
   317 00000D43 488D3DD7F4FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   318 00000D4A F3A6                <1>     rep cmpsb   ;Check the strings are equal
   319 00000D4C 59                  <1>     pop rcx
   320 00000D4D 5E                  <1>     pop rsi
   321 00000D4E 7516                <1>     jne .gotoNextEntry
   322                              <1>     ;Here it was found both strings are equal
   323 00000D50 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   324 00000D55 480FB71F            <1>     movzx rbx, word [rdi]
   325 00000D59 488D3DA0F2FFFF      <1>     lea rdi, startLbl
   326 00000D60 4801FB              <1>     add rbx, rdi
   327 00000D63 FFD3                <1>     call rbx    ;Call this function...
   328                              <1>     return  ;... and return
    19                              <2> %%_ret:
    20 00000D65 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   329                              <1> .gotoNextEntry:
   330 00000D66 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   331 00000D6D 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   332 00000D70 EBBB                <1>     jmp short .nextEntry
   333                              <1> 
   334                              <1> .external:
   335                              <1> ;Here we must search the CWD or all path componants before failing
   336                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
   337 00000D72 E925000000          <1>     jmp .dfltErrExit    ;Catch all for now
   338 00000D77 8B0534F3FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   339 00000D7D 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   340 00000D82 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   341 00000D87 3D20202020          <1>     cmp eax, "    " ;Only if we have four spaces do we proceed here
   342 00000D8C 741A                <1>     je .noExt
   343 00000D8E E817000000          <1>     call checkExtensionExec ;ZF=ZE => Executable
   344 00000D93 7507                <1>     jnz .dfltErrExit
   345                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
   346 00000D95 7205                <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
   347                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
   348                              <1>     ;So it is a com or exe that we are searching for for now
   349                              <1>     
   350 00000D97 E900000000          <1>     jmp .dfltErrExit
   351                              <1> .dfltErrExit:
   352 00000D9C 488D15BAF6FFFF      <1>     lea rdx, badCmd
   353 00000DA3 B409                <1>     mov ah, 09h
   354 00000DA5 CD41                <1>     int 41h
   355                              <1>     return
    19                              <2> %%_ret:
    20 00000DA7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   356                              <1> .noExt:
   357                              <1>     ;Here we must search for the first file with a valid extension.
   358                              <1>     ;Use bl as flags. bl[0] => COM found, bl[1] => EXE found, bl[2] => BAT found
   359 00000DA8 31DB                <1>     xor ebx, ebx
   360                              <1>     ;If relative path, search CWD. If absolute path, search absolute path.
   361                              <1>     ;If nothing, only then loop through each dir in the path for provided
   362                              <1>     ; pathspec (relative case), or filename (absolute case)
   363                              <1> 
   364                              <1> 
   365                              <1> 
   366                              <1> checkExtensionExec:
   367                              <1> ;Checks the extension field of cmdFcb is .COM, .EXE, .BAT in that order
   368                              <1> ;Returns: ZF=ZE if executable. ZF=NZ if not executable.
   369                              <1> ;         If ZF=ZE and CF=CY => Batch file
   370 00000DAA 8B0501F3FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   371 00000DB0 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   372 00000DB5 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   373 00000DBA 3D434F4D20          <1>     cmp eax, "COM "
   374                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000DBF 74(A7)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   375 00000DC1 3D45584520          <1>     cmp eax, "EXE "
   376                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000DC6 74(A7)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   377 00000DC8 3D42415420          <1>     cmp eax, "BAT "
   378                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000DCD 75(A7)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   379 00000DCF F9                  <1>     stc
   380                              <1>     return
    19                              <2> %%_ret:
    20 00000DD0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   381                              <1> 
   382                              <1> checkAndSetupRedir:
   383                              <1> ;Checks and sets up redir as appropriate
   384                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   385                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   386                              <1> ;Output: ZF=NZ => No redir
   387                              <1> ;        ZF=ZY => Redir
   388                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   389                              <1> ;CF=CY if pipe set or an embedded CR found
   390 00000DD1 57                  <1>     push rdi
   391 00000DD2 3C3C                <1>     cmp al, "<"
   392 00000DD4 740B                <1>     je .inputRedir
   393 00000DD6 3C3E                <1>     cmp al, ">"
   394 00000DD8 742A                <1>     je .outputRedir
   395 00000DDA 3C7C                <1>     cmp al, "|"
   396 00000DDC 7454                <1>     je .pipeSetup
   397 00000DDE F8                  <1>     clc
   398                              <1> .redirExit:
   399 00000DDF 5F                  <1>     pop rdi
   400                              <1>     return
    19                              <2> %%_ret:
    20 00000DE0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   401                              <1> .inputRedir:
   402 00000DE1 C605B8F2FFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   403 00000DE8 488D3D3FF4FFFF      <1>     lea rdi, rdrInFilespec
   404 00000DEF E82A0E0000          <1>     call skipSpaces ;Skip spaces between < and the filespec
   405 00000DF4 E845000000          <1>     call copyCommandTailItem
   406 00000DF9 72E4                <1>     jc .redirExit
   407 00000DFB E81E0E0000          <1>     call skipSpaces
   408 00000E00 30C0                <1>     xor al, al
   409 00000E02 EBDB                <1>     jmp short .redirExit
   410                              <1> .outputRedir:
   411 00000E04 C60596F2FFFF01      <1>     mov byte [redirOut], 1
   412 00000E0B 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   413 00000E0E 7506                <1>     jne .notDouble
   414 00000E10 FE058BF2FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   415                              <1> .notDouble:
   416 00000E16 488D3D60F4FFFF      <1>     lea rdi, rdrOutFilespec
   417 00000E1D E8FC0D0000          <1>     call skipSpaces
   418 00000E22 E817000000          <1>     call copyCommandTailItem
   419 00000E27 72B6                <1>     jc .redirExit
   420 00000E29 E8F00D0000          <1>     call skipSpaces
   421 00000E2E 30C0                <1>     xor al, al
   422 00000E30 EBAD                <1>     jmp short .redirExit
   423                              <1> .pipeSetup:
   424 00000E32 C60557F2FFFFFF      <1>     mov byte [pipeFlag], -1
   425 00000E39 30C0                <1>     xor al, al
   426 00000E3B F9                  <1>     stc
   427 00000E3C 5F                  <1>     pop rdi
   428                              <1>     return
    19                              <2> %%_ret:
    20 00000E3D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   429                              <1> 
   430                              <1> copyCommandTailItem:
   431                              <1> ;Copies a sentence from the command tail until a terminator is found.
   432                              <1> ;Stores a terminating null in the destination
   433                              <1> ;Input: rsi = Start of the item to copy
   434                              <1> ;       rdi = Location for copy
   435                              <1> ;Output: Sentence copied with a null terminator inserted.
   436                              <1> ; If CF=CY, embedded CR encountered
   437 00000E3E AC                  <1>     lodsb
   438 00000E3F 3C0D                <1>     cmp al, CR
   439 00000E41 741A                <1>     je .endOfInput
   440 00000E43 E8A20D0000          <1>     call isALterminator
   441 00000E48 741A                <1>     jz .exit
   442 00000E4A 3A05D3F1FFFF        <1>     cmp al, byte [pathSep]
   443 00000E50 7412                <1>     je .exit
   444 00000E52 3A05CCF1FFFF        <1>     cmp al, byte [switchChar]
   445 00000E58 740A                <1>     je .exit
   446 00000E5A AA                  <1>     stosb
   447 00000E5B EBE1                <1>     jmp short copyCommandTailItem
   448                              <1> .endOfInput:
   449 00000E5D E802000000          <1>     call .exit
   450 00000E62 F9                  <1>     stc 
   451                              <1>     return
    19                              <2> %%_ret:
    20 00000E63 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   452                              <1> .exit:
   453 00000E64 30C0                <1>     xor al, al
   454 00000E66 AA                  <1>     stosb
   455                              <1>     return
    19                              <2> %%_ret:
    20 00000E67 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   456                              <1> 
   457                              <1> 
   458                              <1> int4Eh:   ;Interrupt interface for parsing and executing command lines
   459                              <1> ;Input: rsi points to the count byte of a command line
   460 00000E68 4150                <1>     push r8
   461 00000E6A 4151                <1>     push r9
   462 00000E6C B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   463 00000E6E CD41                <1>     int 41h
   464 00000E70 52                  <1>     push rdx    ;Save on the stack
   465 00000E71 488D1D88F0FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   466 00000E78 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   467 00000E7A CD41                <1>     int 41h
   468 00000E7C 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   469 00000E7F 4989D9              <1>     mov r9, rbx
   470 00000E82 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   471 00000E89 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   472 00000E8E F348A5              <1>     rep movsq   ;Copy command line over
   473                              <1>     ;call doCommandLine
   474 00000E91 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   475 00000E92 B450                <1>     mov ah, 50h ;Set Current PSP
   476 00000E94 CD41                <1>     int 41h
   477 00000E96 4159                <1>     pop r9
   478 00000E98 4158                <1>     pop r8
   479 00000E9A 48CF                <1>     iretq
    15                                  %include "./Source/Utils/COMMAND/Source/cmdFunc.asm"
    16                              <1> dir:
    17 00000E9C C605A9F4FFFF00      <1>     mov byte [dirPrnType], 0    ;Clear DIR flags
    18 00000EA3 C605A3F4FFFF00      <1>     mov byte [dirLineCtr], 0
    19 00000EAA C6059DF4FFFF00      <1>     mov byte [dirFileCtr], 0
    20 00000EB1 C60597F4FFFF00      <1>     mov byte [dirPathOff], 0    
    21 00000EB8 C60591F4FFFFFF      <1>     mov byte [dirVolLbl], -1    ;Mark as no label
    22                              <1>     ;Start by scanning for the switches
    23 00000EBF 488D3D74F2FFFF      <1>     lea rdi, cmdBuffer + 1  ;Goto command line input chars count
    24 00000EC6 0FB60F              <1>     movzx ecx, byte [rdi]   ;Get number of chars typed
    25 00000EC9 48FFC7              <1>     inc rdi ;Goto first char typed in
    26 00000ECC 4889FE              <1>     mov rsi, rdi    ;Use rsi as start of buffer counter
    27 00000ECF 8A054FF1FFFF        <1>     mov al, byte [switchChar]   ;Scan for switchchars
    28                              <1> .switchScan:
    29 00000ED5 F2AE                <1>     repne scasb ;Scan for a switchchar
    30 00000ED7 67E322              <1>     jecxz .switchScanDone
    31 00000EDA 8A07                <1>     mov al, byte [rdi]  ;Get the byte pointed to by rdi
    32 00000EDC 24DF                <1>     and al, 0DFh    ;UC it
    33 00000EDE 3C57                <1>     cmp al, "W" ;Wide print mode?
    34 00000EE0 7509                <1>     jne .notWideSw
    35 00000EE2 800D63F4FFFF01      <1>     or byte [dirPrnType], 1 ;Set the correct bit
    36 00000EE9 EBEA                <1>     jmp short .switchScan
    37                              <1> .notWideSw:
    38 00000EEB 3C50                <1>     cmp al, "P" ;Pause mode?
    39 00000EED 0F859F030000        <1>     jne .badParam   ;If a switch other than /P or /W, fail
    40 00000EF3 800D52F4FFFF02      <1>     or byte [dirPrnType], 2 ;Set correct bit
    41 00000EFA EBD9                <1>     jmp short .switchScan
    42                              <1> .switchScanDone:
    43                              <1> ;If no args, only switches, we search CWD
    44                              <1> ;If one arg, search that 
    45                              <1> ;If more than one, fail
    46 00000EFC 488D3D38F2FFFF      <1>     lea rdi, cmdBuffer + 2
    47 00000F03 4889FE              <1>     mov rsi, rdi
    48 00000F06 E8130D0000          <1>     call skipSpaces ;Skip leading spaces
    49 00000F0B 4881C603000000      <1>     add rsi, 3  ;Go past the DIR (always three chars)
    50 00000F12 803E0D              <1>     cmp byte [rsi], CR
    51 00000F15 7436                <1>     je .eocReached
    52                              <1> .pathSearch:
    53 00000F17 E8020D0000          <1>     call skipSpaces ;Now skip intermediate spaces to next non-space
    54 00000F1C 8A0502F1FFFF        <1>     mov al, byte [switchChar]   ;Is this a switch?
    55 00000F22 3806                <1>     cmp byte [rsi], al
    56 00000F24 741B                <1>     je .pathSearchSwitch    ;If a switch, skip it, find switch terminator
    57 00000F26 803D22F4FFFF00      <1>     cmp byte [dirPathOff], 0    ;Did we previously get an argument?
    58 00000F2D 0F855F030000        <1>     jne .badParam ;If so, error
    59 00000F33 4889F0              <1>     mov rax, rsi    ;Else, compute the offset in the cmdBuffer
    60 00000F36 4829F8              <1>     sub rax, rdi    ;Offset from the cmdBuffer + 2
    61 00000F39 0402                <1>     add al, 2       ;Make it an offset from cmdBuffer
    62 00000F3B 88050EF4FFFF        <1>     mov byte [dirPathOff], al   ;And save it!
    63                              <1> .pathSearchSwitch:
    64 00000F41 E86F0C0000          <1>     call findTerminatorOrEOC
    65 00000F46 7205                <1>     jc .eocReached
    66 00000F48 48FFC6              <1>     inc rsi ;Go to next char
    67 00000F4B EBCA                <1>     jmp short .pathSearch
    68                              <1> .eocReached:
    69 00000F4D 803DFBF3FFFF00      <1>     cmp byte [dirPathOff], 0
    70 00000F54 7405                <1>     je .dirCWD
    71 00000F56 E937030000          <1>     jmp .badParam   ;Temp measure
    72                              <1> .dirCWD:
    73                              <1>     ;Build current working dir and append a \*.* to it 
    74                              <1>     ;First we search the root for a label
    75 00000F5B 488D3DFBF3FFFF      <1>     lea rdi, dirVolPathBuf
    76 00000F62 488D3563F3FFFF      <1>     lea rsi, searchSpec ;Will need to create the same X:\ here too
    77 00000F69 E8330C0000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
    78                              <1> .dirVolEP:
    79 00000F6E 8805F1F3FFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
    80 00000F74 0441                <1>     add al, "A"
    81 00000F76 B43A                <1>     mov ah, ":" ;ax has X: now to store 
    82 00000F78 66AB                <1>     stosw
    83 00000F7A 8A05A3F0FFFF        <1>     mov al, byte [pathSep]
    84 00000F80 AA                  <1>     stosb
    85 00000F81 B82A2E2A00          <1>     mov eax, 002A2E2Ah  ;*.*,0
    86 00000F86 AB                  <1>     stosd
    87 00000F87 B42F                <1>     mov ah, 2Fh ;Get current DTA in rbx
    88 00000F89 CD41                <1>     int 41h 
    89 00000F8B 53                  <1>     push rbx    ;Preserve it on the stack
    90 00000F8C 488D1525F1FFFF      <1>     lea rdx, cmdFFBlock
    91 00000F93 B41A                <1>     mov ah, 1Ah ;Set DTA to internal ffblock
    92 00000F95 CD41                <1>     int 41h
    93 00000F97 488D15BFF3FFFF      <1>     lea rdx, dirVolPathBuf
    94 00000F9E 66B90800            <1>     mov cx, dirVolumeID
    95 00000FA2 B44E                <1>     mov ah, 4Eh ;Find first
    96 00000FA4 CD41                <1>     int 41h
    97 00000FA6 7221                <1>     jc .skipVolLbl
    98 00000FA8 488D3527F1FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
    99 00000FAF 488D3D9AF3FFFF      <1>     lea rdi, dirVolLbl
   100 00000FB6 B90B000000          <1>     mov ecx, 11 ;Get the 11 chars of the volume label
   101                              <1> .dirLblCopy:
   102 00000FBB AC                  <1>     lodsb   ;Get the first char
   103 00000FBC 3C00                <1>     cmp al, 0
   104 00000FBE 7409                <1>     je .skipVolLbl  ;Jump with CF=NC
   105 00000FC0 3C2E                <1>     cmp al, "."
   106 00000FC2 7401                <1>     je .dirLblSkipStore
   107 00000FC4 AA                  <1>     stosb
   108                              <1> .dirLblSkipStore:
   109 00000FC5 FFC9                <1>     dec ecx
   110 00000FC7 75F2                <1>     jnz .dirLblCopy
   111                              <1>     ;Fallthru with CF=NC
   112                              <1> .skipVolLbl:
   113                              <1> ;Print volume label information now
   114 00000FC9 E818010000          <1>     call .dirPrintVolInfo   ;Propagates the CF if CF was set
   115 00000FCE F60591F3FFFFFF      <1>     test byte [dirVolFlg], -1
   116 00000FD5 0F8505010000        <1>     jnz .dirVolExit ;If we just wanted to print the volume label, now exit
   117 00000FDB 488D357BF3FFFF      <1>     lea rsi, dirVolPathBuf
   118 00000FE2 488D3DE3F2FFFF      <1>     lea rdi, searchSpec 
   119 00000FE9 B903000000          <1>     mov ecx, 3  ;Now copy the X:\ over
   120 00000FEE F3A4                <1>     rep movsb
   121 00000FF0 B447                <1>     mov ah, 47h ;Get Current Working Directory
   122 00000FF2 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   123 00000FF5 8A15D1F2FFFF        <1>     mov dl, byte [searchSpec]
   124 00000FFB 80EA40              <1>     sub dl, "@" ;Get 1 based drive letter
   125 00000FFE CD41                <1>     int 41h ;Overrwrite it with the current directory
   126 00001000 488D3DC5F2FFFF      <1>     lea rdi, searchSpec
   127 00001007 E89A0B0000          <1>     call strlen
   128 0000100C FFC9                <1>     dec ecx
   129 0000100E C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   130 00001012 488D15F9F6FFFF      <1>     lea rdx, dirMain
   131 00001019 B409                <1>     mov ah, 09h
   132 0000101B CD41                <1>     int 41h
   133 0000101D 4889FA              <1>     mov rdx, rdi    ;Print the current directory we are working on
   134 00001020 B409                <1>     mov ah, 09h
   135 00001022 CD41                <1>     int 41h
   136 00001024 488D15D5F3FFFF      <1>     lea rdx, crlf
   137 0000102B B409                <1>     mov ah, 09h
   138 0000102D CD41                <1>     int 41h
   139 0000102F 488D15CAF3FFFF      <1>     lea rdx, crlf   ;Add an extra free line
   140 00001036 B409                <1>     mov ah, 09h
   141 00001038 CD41                <1>     int 41h
   142                              <1>     ;Now we search for the files
   143 0000103A 8A05E3EFFFFF        <1>     mov al, byte [pathSep]
   144 00001040 38440FFF            <1>     cmp byte [rdi + rcx - 1], al
   145 00001044 7405                <1>     je .noAddSlash  ;Deals with special case of root dir
   146 00001046 88040F              <1>     mov byte [rdi + rcx], al
   147 00001049 FFC1                <1>     inc ecx
   148                              <1> .noAddSlash:
   149 0000104B C7040F2A2E2A00      <1>     mov dword [rdi + rcx], 002A2E2Ah ;and add a *.*,0
   150 00001052 4889FA              <1>     mov rdx, rdi    ;Ptr to search for in rdx
   151 00001055 B911000000          <1>     mov ecx, dirReadOnly | dirDirectory
   152 0000105A B44E                <1>     mov ah, 4Eh ;Find first
   153 0000105C CD41                <1>     int 41h
   154 0000105E 720B                <1>     jc .dirNoMoreFiles
   155                              <1> .findNext:
   156 00001060 E8F0000000          <1>     call .dirPrintFileData  ;Print the file information
   157 00001065 B44F                <1>     mov ah, 4Fh
   158 00001067 CD41                <1>     int 41h
   159 00001069 73F5                <1>     jnc .findNext 
   160                              <1> .dirNoMoreFiles:
   161 0000106B 5A                  <1>     pop rdx 
   162 0000106C B41A                <1>     mov ah, 1Ah ;Return back the original DTA
   163 0000106E CD41                <1>     int 41h
   164 00001070 F605D5F2FFFF01      <1>     test byte [dirPrnType], 1
   165 00001077 740B                <1>     jz .dirNoEndNewLine
   166 00001079 488D1580F3FFFF      <1>     lea rdx, crlf   ;Only need this for /W
   167 00001080 B409                <1>     mov ah, 09h
   168 00001082 CD41                <1>     int 41h
   169                              <1> .dirNoEndNewLine:
   170                              <1>     ;Now we print the number of files and the number of bytes on the disk
   171 00001084 B908000000          <1>     mov ecx, 8  ;Print 8 spaces
   172 00001089 B220                <1>     mov dl, " "
   173                              <1> .dirNumOffSpc:
   174 0000108B B402                <1>     mov ah, 02h
   175 0000108D CD41                <1>     int 41h
   176 0000108F FFC9                <1>     dec ecx
   177 00001091 75F8                <1>     jnz .dirNumOffSpc
   178 00001093 0FB605B4F2FFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   179 0000109A E8300D0000          <1>     call printDecimalWord
   180 0000109F 488D15A5F4FFFF      <1>     lea rdx, dirOk
   181 000010A6 B409                <1>     mov ah, 09h
   182 000010A8 CD41                <1>     int 41h
   183 000010AA 488D15DCF8FFFF      <1>     lea rdx, threeSpc
   184 000010B1 B409                <1>     mov ah, 09h
   185 000010B3 CD41                <1>     int 41h
   186 000010B5 B800360000          <1>     mov eax, 3600h ;Get disk info
   187 000010BA 8A15A5F2FFFF        <1>     mov dl, byte [dirDrv]
   188 000010C0 CD41                <1>     int 41h ;Get disk free space info
   189 000010C2 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   190 000010C5 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   191 000010C8 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   192 000010CA F7E1                <1>     mul ecx ;Get bytes per cluster
   193 000010CC 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   194                              <1>     ;rax now has the number of free bytes on the disk
   195 000010CF E8FB0C0000          <1>     call printDecimalWord
   196 000010D4 488D157AF4FFFF      <1>     lea rdx, bytesOk
   197 000010DB B409                <1>     mov ah, 09h
   198 000010DD CD41                <1>     int 41h
   199                              <1>     return
    19                              <2> %%_ret:
    20 000010DF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   200                              <1> .dirVolExit:
   201 000010E0 5A                  <1>     pop rdx 
   202 000010E1 B41A                <1>     mov ah, 1Ah ;Return back the original DTA
   203 000010E3 CD41                <1>     int 41h
   204                              <1>     return
    19                              <2> %%_ret:
    20 000010E5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   205                              <1> 
   206                              <1> .dirPrintVolInfo:
   207 000010E6 9C                  <1>     pushfq
   208 000010E7 488D1512F3FFFF      <1>     lea rdx, crlf
   209 000010EE B409                <1>     mov ah, 09h
   210 000010F0 CD41                <1>     int 41h
   211 000010F2 488D158CF5FFFF      <1>     lea rdx, volMes
   212 000010F9 B409                <1>     mov ah, 09h
   213 000010FB CD41                <1>     int 41h
   214 000010FD 8A155AF2FFFF        <1>     mov dl, byte [dirVolPathBuf]   ;Print the drive letter out
   215 00001103 B402                <1>     mov ah, 02h
   216 00001105 CD41                <1>     int 41h
   217 00001107 9D                  <1>     popfq
   218 00001108 7317                <1>     jnc .dirVolIDOk
   219 0000110A 488D158BF5FFFF      <1>     lea rdx, volNo
   220 00001111 B409                <1>     mov ah, 09h
   221 00001113 CD41                <1>     int 41h
   222 00001115 488D15E4F2FFFF      <1>     lea rdx, crlf
   223 0000111C B409                <1>     mov ah, 09h
   224 0000111E CD41                <1>     int 41h
   225                              <1>     return
    19                              <2> %%_ret:
    20 00001120 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   226                              <1> .dirVolIDOk:
   227 00001121 488D156FF5FFFF      <1>     lea rdx, volOk
   228 00001128 B409                <1>     mov ah, 09h
   229 0000112A CD41                <1>     int 41h
   230 0000112C 488D3D1DF2FFFF      <1>     lea rdi, dirVolLbl
   231 00001133 E86E0A0000          <1>     call strlen
   232 00001138 FFC9                <1>     dec ecx
   233 0000113A C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   234 0000113E 488D150BF2FFFF      <1>     lea rdx, dirVolLbl
   235 00001145 B409                <1>     mov ah, 09h
   236 00001147 CD41                <1>     int 41h
   237 00001149 488D15B0F2FFFF      <1>     lea rdx, crlf
   238 00001150 B409                <1>     mov ah, 09h
   239 00001152 CD41                <1>     int 41h
   240                              <1>     return
    19                              <2> %%_ret:
    20 00001154 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   241                              <1> 
   242                              <1> .dirPrintFileData:
   243                              <1> ;Use fcbCmdSpec to build the file name with space
   244                              <1> ;Start by print the name (same for both cases)
   245 00001155 488D357AEFFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   246 0000115C 488D3DA5F0FFFF      <1>     lea rdi, fcbCmdSpec
   247 00001163 E80F0B0000          <1>     call asciiFilenameToFCB
   248 00001168 488D1599F0FFFF      <1>     lea rdx, fcbCmdSpec
   249 0000116F B908000000          <1>     mov ecx, 8  ;Print 8 chars
   250 00001174 BB01000000          <1>     mov ebx, 1  ;STDOUT
   251 00001179 B440                <1>     mov ah, 40h ;Write handle
   252 0000117B CD41                <1>     int 41h
   253 0000117D 52                  <1>     push rdx
   254 0000117E B220                <1>     mov dl, " "
   255 00001180 B402                <1>     mov ah, 02h ;Print char
   256 00001182 CD41                <1>     int 41h
   257 00001184 5A                  <1>     pop rdx
   258 00001185 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   259 0000118C B903000000          <1>     mov ecx, 3  ;Print three chars
   260 00001191 BB01000000          <1>     mov ebx, 1  ;STDOUT
   261 00001196 B440                <1>     mov ah, 40h ;Write handle
   262 00001198 CD41                <1>     int 41h
   263 0000119A F605ABF1FFFF01      <1>     test byte [dirPrnType], 1
   264 000011A1 0F85A8000000        <1>     jnz .widePrint
   265                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   266                              <1>     ;Now check if a DIR
   267 000011A7 F6051FEFFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   268 000011AE 7418                <1>     jz .dirPrintNotDir
   269 000011B0 488D15ACF3FFFF      <1>     lea rdx, dirLbl
   270 000011B7 B409                <1>     mov ah, 09h
   271 000011B9 CD41                <1>     int 41h
   272 000011BB 488D15CBF7FFFF      <1>     lea rdx, threeSpc
   273 000011C2 B409                <1>     mov ah, 09h
   274 000011C4 CD41                <1>     int 41h
   275 000011C6 EB4F                <1>     jmp short .dirPrintFileDT
   276                              <1> .dirPrintNotDir:
   277                              <1> ;Here we print the file size
   278 000011C8 B220                <1>     mov dl, " "
   279 000011CA B402                <1>     mov ah, 02h
   280 000011CC CD41                <1>     int 41h
   281 000011CE 8B05FEEEFFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   282 000011D4 E8670C0000          <1>     call getDecimalWord
   283 000011D9 4889CB              <1>     mov rbx, rcx
   284 000011DC 51                  <1>     push rcx
   285 000011DD 480FCB              <1>     bswap rbx
   286 000011E0 B908000000          <1>     mov ecx, 8
   287                              <1> .dirPrintFileSizePrep:
   288 000011E5 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   289 000011E7 7514                <1>     jne .dirPrintFileSize
   290 000011E9 B402                <1>     mov ah, 02h
   291 000011EB B220                <1>     mov dl, " "
   292 000011ED CD41                <1>     int 41h
   293 000011EF 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   294 000011F3 FFC9                <1>     dec ecx
   295 000011F5 81F901000000        <1>     cmp ecx, 1
   296 000011FB 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   297                              <1> .dirPrintFileSize:
   298 000011FD 5B                  <1>     pop rbx
   299                              <1> .dirPrintFileSizeLoop:
   300 000011FE 88DA                <1>     mov dl, bl
   301 00001200 B402                <1>     mov ah, 02h
   302 00001202 CD41                <1>     int 41h
   303 00001204 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   304 00001208 FFC9                <1>     dec ecx
   305 0000120A 75F2                <1>     jnz .dirPrintFileSizeLoop
   306 0000120C 488D157EF7FFFF      <1>     lea rdx, twoSpc
   307 00001213 B409                <1>     mov ah, 09h
   308 00001215 CD41                <1>     int 41h
   309                              <1> .dirPrintFileDT:
   310 00001217 B220                <1>     mov dl, " "
   311 00001219 B402                <1>     mov ah, 02h
   312 0000121B CD41                <1>     int 41h
   313 0000121D 0FB705ACEEFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   314 00001224 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   315 00001226 E8CC060000          <1>     call printDate
   316 0000122B 488D155FF7FFFF      <1>     lea rdx, twoSpc
   317 00001232 B409                <1>     mov ah, 09h
   318 00001234 CD41                <1>     int 41h
   319 00001236 0FB70591EEFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   320 0000123D E8D7070000          <1>     call printTime
   321 00001242 488D15B7F1FFFF      <1>     lea rdx, crlf
   322 00001249 B409                <1>     mov ah, 09h
   323 0000124B CD41                <1>     int 41h
   324 0000124D EB0B                <1>     jmp short .dirPrintNameExit
   325                              <1> .widePrint:
   326                              <1> ;If /W, print name space ext space space space space
   327 0000124F 488D1532F7FFFF      <1>     lea rdx, fourSpc
   328 00001256 B409                <1>     mov ah, 09h ;Print string
   329 00001258 CD41                <1>     int 41h
   330                              <1> .dirPrintNameExit:
   331 0000125A FE05EEF0FFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   332 00001260 FE05E7F0FFFF        <1>     inc byte [dirLineCtr]
   333 00001266 803DE0F0FFFF17      <1>     cmp byte [dirLineCtr], 23
   334                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 0000126D 7401                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 0000126F C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   335 00001270 488D1513F3FFFF      <1>     lea rdx, pauseMes
   336 00001277 B409                <1>     mov ah, 09h
   337 00001279 CD41                <1>     int 41h
   338 0000127B B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   339 0000127D CD41                <1>     int 41h
   340 0000127F C605C7F0FFFF00      <1>     mov byte [dirLineCtr], 0
   341 00001286 488D1573F1FFFF      <1>     lea rdx, crlf   ;Force new line
   342 0000128D B409                <1>     mov ah, 09h
   343 0000128F CD41                <1>     int 41h
   344                              <1>     return
    19                              <2> %%_ret:
    20 00001291 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   345                              <1>     
   346                              <1> .badParam:
   347 00001292 488D1510F3FFFF      <1>     lea rdx, badParm
   348 00001299 B409                <1>     mov ah, 09h
   349 0000129B CD41                <1>     int 41h
   350                              <1>     return
    19                              <2> %%_ret:
    20 0000129D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   351                              <1> 
   352                              <1> chdir:
   353 0000129E F605FDEDFFFFFF      <1>     test byte [arg1Flg], -1
   354 000012A5 754D                <1>     jnz .changeDir
   355                              <1>     ;Print CWD
   356                              <1> .printCWD:
   357 000012A7 E84E080000          <1>     call putCWDInPrompt ;Exactly the same procedure
   358 000012AC E830060000          <1>     call printCRLF
   359                              <1>     return
    19                              <2> %%_ret:
    20 000012B1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   360                              <1> .printDiskCWD:
   361                              <1> ;Print CWD for a specified drive
   362 000012B2 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   363 000012B6 88D0                <1>     mov al, dl
   364 000012B8 0440                <1>     add al, "@" ;Get the UC letter
   365 000012BA B43A                <1>     mov ah, ":"
   366 000012BC 488D3D09F0FFFF      <1>     lea rdi, searchSpec
   367 000012C3 66AB                <1>     stosw   ;Store X:, rdi+=2
   368 000012C5 8A0558EDFFFF        <1>     mov al, byte [pathSep]
   369 000012CB AA                  <1>     stosb   ;Store pathSep, inc rdi
   370 000012CC B447                <1>     mov ah, 47h ;Get Current Working Directory
   371 000012CE 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   372 000012D1 CD41                <1>     int 41h
   373 000012D3 E8CE080000          <1>     call strlen
   374 000012D8 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   375 000012DE B440                <1>     mov ah, 40h ;Write to handle
   376 000012E0 BB01000000          <1>     mov ebx, 1  ;STDOUT
   377 000012E5 488D15E0EFFFFF      <1>     lea rdx, searchSpec
   378 000012EC CD41                <1>     int 41h
   379 000012EE E8EE050000          <1>     call printCRLF
   380                              <1>     return
    19                              <2> %%_ret:
    20 000012F3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   381                              <1> .changeDir:
   382 000012F4 8A05AAEDFFFF        <1>     mov al, byte [arg1FCBret]
   383 000012FA 3CFF                <1>     cmp al, -1 
   384 000012FC 743C                <1>     je .badDrv  ;IF the drive is good, but FCB name blank, either X: or \ 
   385 000012FE 4180785D20          <1>     cmp byte [r8 + fcb1 + fcb.filename], " "
   386 00001303 7520                <1>     jne .getFQPath
   387                              <1>     ;Now we double check that on the command line we have . or ..
   388 00001305 0FB60597EDFFFF      <1>     movzx eax, byte [arg1Off]
   389 0000130C 488D3526EEFFFF      <1>     lea rsi, cmdBuffer
   390 00001313 4801C6              <1>     add rsi, rax
   391 00001316 8A0507EDFFFF        <1>     mov al, byte [pathSep]
   392 0000131C 3806                <1>     cmp byte [rsi], al  ;Is the first char a pathsep?
   393 0000131E 7405                <1>     je .getFQPath
   394 00001320 803E2E              <1>     cmp byte [rsi], "."
   395 00001323 758D                <1>     jne .printDiskCWD
   396                              <1>     ;If the path is . or .., its acceptable, else fail
   397                              <1> .getFQPath:
   398 00001325 E8D7090000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   399 0000132A 721D                <1>     jc .badDir  ;If this returns CF=CY, its a badDir
   400 0000132C 488D1599EFFFFF      <1>     lea rdx, searchSpec
   401 00001333 B43B                <1>     mov ah, 3Bh ;CHDIR
   402 00001335 CD41                <1>     int 41h
   403 00001337 7210                <1>     jc .badDir
   404                              <1>     return
    19                              <2> %%_ret:
    20 00001339 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   405                              <1> 
   406                              <1> .badDrv:
   407 0000133A 488D152BF2FFFF      <1>     lea rdx, badDrv
   408 00001341 B800090000          <1>     mov eax, 0900h
   409 00001346 CD41                <1>     int 41h
   410                              <1>     return
    19                              <2> %%_ret:
    20 00001348 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   411                              <1> .badDir:
   412 00001349 488D155AF3FFFF      <1>     lea rdx, badDir
   413 00001350 B800090000          <1>     mov eax, 0900h
   414 00001355 CD41                <1>     int 41h
   415                              <1>     return
    19                              <2> %%_ret:
    20 00001357 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   416                              <1> 
   417                              <1> 
   418                              <1> mkdir:
   419 00001358 F60543EDFFFFFF      <1>     test byte [arg1Flg], -1
   420 0000135F 744D                <1>     jz .badParams
   421 00001361 F6053DEDFFFFFF      <1>     test byte [arg2Flg], -1
   422 00001368 7544                <1>     jnz .badParams
   423                              <1>     ;We have exactly one argument
   424 0000136A 8A0534EDFFFF        <1>     mov al, byte [arg1FCBret]
   425 00001370 3CFF                <1>     cmp al, -1 
   426 00001372 742B                <1>     je .badDrv  ;If a drive was specified and was bad, jump
   427 00001374 E888090000          <1>     call buildCommandPath
   428 00001379 7215                <1>     jc .badMake
   429 0000137B 488D154AEFFFFF      <1>     lea rdx, searchSpec
   430 00001382 B800390000          <1>     mov eax, 3900h  ;MKDIR
   431 00001387 CD41                <1>     int 41h
   432 00001389 7205                <1>     jc .badMake   ;Return if not carry
   433 0000138B B40D                <1>     mov ah, 0Dh
   434 0000138D CD41                <1>     int 41h ;Flush to disk
   435                              <1>     return
    19                              <2> %%_ret:
    20 0000138F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   436                              <1> .badMake:   ;Else, bad make
   437 00001390 488D1527F3FFFF      <1>     lea rdx, badMD
   438 00001397 B800090000          <1>     mov eax, 0900h
   439 0000139C CD41                <1>     int 41h
   440                              <1>     return
    19                              <2> %%_ret:
    20 0000139E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   441                              <1> .badDrv:
   442 0000139F 488D15C6F1FFFF      <1>     lea rdx, badDrv
   443 000013A6 B800090000          <1>     mov eax, 0900h
   444 000013AB CD41                <1>     int 41h
   445                              <1>     return
    19                              <2> %%_ret:
    20 000013AD C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   446                              <1> .badParams:
   447 000013AE 488D1571F4FFFF      <1>     lea rdx, badArgs
   448 000013B5 B800090000          <1>     mov eax, 0900h
   449 000013BA CD41                <1>     int 41h
   450                              <1>     return
    19                              <2> %%_ret:
    20 000013BC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   451                              <1> 
   452                              <1> rmdir:
   453 000013BD F605DEECFFFFFF      <1>     test byte [arg1Flg], -1
   454 000013C4 744D                <1>     jz .badParams
   455 000013C6 F605D8ECFFFFFF      <1>     test byte [arg2Flg], -1
   456 000013CD 7544                <1>     jnz .badParams
   457                              <1>     ;We have exactly one argument
   458 000013CF 8A05CFECFFFF        <1>     mov al, byte [arg1FCBret]
   459 000013D5 3CFF                <1>     cmp al, -1 
   460 000013D7 742B                <1>     je .badDrv  ;If a drive was specified and was bad, jump
   461 000013D9 E823090000          <1>     call buildCommandPath
   462 000013DE 7215                <1>     jc .badRemove
   463 000013E0 488D15E5EEFFFF      <1>     lea rdx, searchSpec
   464 000013E7 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   465 000013EC CD41                <1>     int 41h
   466 000013EE 7205                <1>     jc .badRemove   ;Return if not carry
   467 000013F0 B40D                <1>     mov ah, 0Dh
   468 000013F2 CD41                <1>     int 41h ;Flush to disk
   469                              <1>     return
    19                              <2> %%_ret:
    20 000013F4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   470                              <1> .badRemove:   ;Else, bad make
   471 000013F5 488D15DFF2FFFF      <1>     lea rdx, badRD
   472 000013FC B800090000          <1>     mov eax, 0900h
   473 00001401 CD41                <1>     int 41h
   474                              <1>     return
    19                              <2> %%_ret:
    20 00001403 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   475                              <1> .badDrv:
   476 00001404 488D1561F1FFFF      <1>     lea rdx, badDrv
   477 0000140B B800090000          <1>     mov eax, 0900h
   478 00001410 CD41                <1>     int 41h
   479                              <1>     return
    19                              <2> %%_ret:
    20 00001412 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   480                              <1> .badParams:
   481 00001413 488D150CF4FFFF      <1>     lea rdx, badArgs
   482 0000141A B800090000          <1>     mov eax, 0900h
   483 0000141F CD41                <1>     int 41h
   484                              <1>     return
    19                              <2> %%_ret:
    20 00001421 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   485                              <1> copy:
   486                              <1>     return
    19                              <2> %%_ret:
    20 00001422 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   487                              <1> erase:
   488                              <1>     return
    19                              <2> %%_ret:
    20 00001423 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   489                              <1> date:
   490 00001424 488D15B6F1FFFF      <1>     lea rdx, curDate
   491 0000142B B409                <1>     mov ah, 09h
   492 0000142D CD41                <1>     int 41h
   493 0000142F B42A                <1>     mov ah, 2Ah ;DOS get date
   494 00001431 CD41                <1>     int 41h
   495                              <1> 	;AL = day of the week (0=Sunday)
   496                              <1> 	;CX = year (1980-2099)
   497                              <1> 	;DH = month (1-12)
   498                              <1> 	;DL = day (1-31)
   499 00001433 66890D2DEFFFFF      <1>     mov word [td1], cx
   500 0000143A 881529EFFFFF        <1>     mov byte [td3], dl
   501 00001440 883524EFFFFF        <1>     mov byte [td4], dh
   502 00001446 0FB6C0              <1>     movzx eax, al
   503 00001449 89C3                <1>     mov ebx, eax
   504 0000144B D1E3                <1>     shl ebx, 1   ;Multiply by 2
   505 0000144D 01D8                <1>     add eax, ebx ;Make it 3 times 
   506 0000144F 488D1567F1FFFF      <1>     lea rdx, dayName
   507 00001456 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   508 0000145A B903000000          <1>     mov ecx, 3  ;Print three chars
   509 0000145F BB01000000          <1>     mov ebx, 1  ;STDOUT
   510 00001464 B440                <1>     mov ah, 40h ;Write to handle
   511 00001466 CD41                <1>     int 41h
   512 00001468 B220                <1>     mov dl, " "
   513 0000146A B402                <1>     mov ah, 02h
   514 0000146C CD41                <1>     int 41h
   515                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   516                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   517                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   518 0000146E 0FB705F2EEFFFF      <1>     movzx eax, word [td1]   ;Get this word
   519 00001475 C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   520 00001478 0FB61DEBEEFFFF      <1>     movzx ebx, byte [td4]
   521 0000147F C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   522 00001482 09D8                <1>     or eax, ebx ;Add this date to eax
   523 00001484 0FB61DDEEEFFFF      <1>     movzx ebx, byte [td3]
   524 0000148B 09D8                <1>     or eax, ebx
   525 0000148D BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   526 00001492 E860040000          <1>     call printDate
   527                              <1> 
   528 00001497 488D1554F1FFFF      <1>     lea rdx, newDate
   529 0000149E B409                <1>     mov ah, 09h
   530 000014A0 CD41                <1>     int 41h
   531 000014A2 488D1568F1FFFF      <1>     lea rdx, ukDate
   532 000014A9 488D0554F1FFFF      <1>     lea rax, usDate
   533 000014B0 488D1D67F1FFFF      <1>     lea rbx, jpDate
   534 000014B7 803D67EBFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   535 000014BE 480F47D3            <1>     cmova rdx, rbx
   536 000014C2 480F42D0            <1>     cmovb rdx, rax
   537 000014C6 B409                <1>     mov ah, 09h
   538 000014C8 CD41                <1>     int 41h
   539                              <1> 
   540 000014CA 498D9080000000      <1>     lea rdx, qword [r8 + cmdLineCnt]
   541 000014D1 B40A                <1>     mov ah, 0Ah
   542 000014D3 CD41                <1>     int 41h
   543 000014D5 52                  <1>     push rdx
   544 000014D6 488D1523EFFFFF      <1>     lea rdx, crlf
   545 000014DD B409                <1>     mov ah, 09h
   546 000014DF CD41                <1>     int 41h
   547 000014E1 5A                  <1>     pop rdx
   548 000014E2 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   549                              <1>     rete    ;Exit!
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 000014E6 7501                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 000014E8 C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   550                              <1>     return
    19                              <2> %%_ret:
    20 000014E9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   551                              <1> 
   552                              <1> time:
   553 000014EA 488D1549F1FFFF      <1>     lea rdx, curTime
   554 000014F1 B409                <1>     mov ah, 09h
   555 000014F3 CD41                <1>     int 41h
   556 000014F5 B42C                <1>     mov ah, 2Ch ;DOS get time
   557 000014F7 CD41                <1>     int 41h
   558                              <1>     ;CH = hour (0-23)
   559                              <1> 	;CL = minutes (0-59)
   560                              <1> 	;DH = seconds (0-59)
   561                              <1> 	;DL = hundredths (0-99)
   562 000014F9 880D68EEFFFF        <1>     mov byte [td1], cl
   563 000014FF 882D63EEFFFF        <1>     mov byte [td2], ch
   564 00001505 88155EEEFFFF        <1>     mov byte [td3], dl
   565 0000150B 883559EEFFFF        <1>     mov byte [td4], dh
   566 00001511 0FB6C5              <1>     movzx eax, ch
   567 00001514 E872050000          <1>     call printTime.printHours
   568                              <1> 
   569 00001519 8A1513EBFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   570 0000151F B402                <1>     mov ah, 02h
   571 00001521 CD41                <1>     int 41h
   572                              <1> 
   573 00001523 0FB6053DEEFFFF      <1>     movzx eax, byte [td1]   ;Minutes
   574 0000152A E84C050000          <1>     call printTime.printMinutesAlt
   575                              <1> 
   576 0000152F 8A15FDEAFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   577 00001535 B402                <1>     mov ah, 02h
   578 00001537 CD41                <1>     int 41h
   579                              <1> 
   580 00001539 0FB6052AEEFFFF      <1>     movzx eax, byte [td4]   ;Seconds
   581 00001540 E836050000          <1>     call printTime.printMinutesAlt
   582                              <1> 
   583 00001545 B22E                <1>     mov dl, "."
   584 00001547 B402                <1>     mov ah, 02h
   585 00001549 CD41                <1>     int 41h
   586                              <1> 
   587 0000154B 0FB60517EEFFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   588 00001552 E824050000          <1>     call printTime.printMinutesAlt
   589                              <1> 
   590 00001557 488D15EDF0FFFF      <1>     lea rdx, newTime
   591 0000155E B409                <1>     mov ah, 09h
   592 00001560 CD41                <1>     int 41h
   593                              <1> 
   594 00001562 498D9080000000      <1>     lea rdx, qword [r8 + cmdLineCnt]
   595 00001569 B40A                <1>     mov ah, 0Ah
   596 0000156B CD41                <1>     int 41h
   597 0000156D 52                  <1>     push rdx
   598 0000156E 488D158BEEFFFF      <1>     lea rdx, crlf
   599 00001575 B409                <1>     mov ah, 09h
   600 00001577 CD41                <1>     int 41h
   601 00001579 5A                  <1>     pop rdx
   602 0000157A 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   603                              <1>     rete    ;Exit!
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 0000157E 7501                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 00001580 C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   604                              <1>     return
    19                              <2> %%_ret:
    20 00001581 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   605                              <1> ctty:
   606                              <1>     return
    19                              <2> %%_ret:
    20 00001582 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   607                              <1> cls:  
   608 00001583 B800440000          <1>     mov eax, 4400h  ;Get device info
   609 00001588 BB01000000          <1>     mov ebx, 1      ;for handle 1
   610 0000158D CD41                <1>     int 41h         ;in dx
   611 0000158F F7C280000000        <1>     test edx, devCharDev
   612 00001595 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   613 00001597 F7C210000000        <1>     test edx, charDevFastOut
   614 0000159D 743E                <1>     jz .doAnsi
   615                              <1>     ;Test if Int 49h uses Int 30h
   616                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   617                              <1>     ;Int 49h MUST be terminated with a IRETQ, within 1024 bytes
   618 0000159F B849350000          <1>     mov eax, 3549h  ;Get the vector for interrupt 49h
   619 000015A4 CD41                <1>     int 41h
   620                              <1> .biosCheck:
   621 000015A6 66813BCD30          <1>     cmp word [rbx], 30CDh
   622 000015AB 740C                <1>     je .biosConfirmed
   623 000015AD 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   624 000015B2 7429                <1>     je .doAnsi
   625 000015B4 48FFC3              <1>     inc rbx
   626 000015B7 EBED                <1>     jmp short .biosCheck
   627                              <1> .biosConfirmed:
   628                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   629 000015B9 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   630 000015BB 31DB                <1>     xor ebx, ebx
   631 000015BD CD30                <1>     int 30h
   632 000015BF B40F                <1>     mov ah, 0Fh ;Get screen mode
   633 000015C1 CD30                <1>     int 30h
   634 000015C3 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   635 000015C6 FECA                <1>     dec dl
   636 000015C8 B619                <1>     mov dh, 25  ;Number of rows is standard
   637 000015CA 31C0                <1>     xor eax, eax
   638 000015CC 89C1                <1>     mov ecx, eax
   639 000015CE B707                <1>     mov bh, 7   ;Screen attributes
   640 000015D0 B406                <1>     mov ah, 6   ;Scroll
   641 000015D2 CD30                <1>     int 30h
   642 000015D4 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   643 000015D6 B700                <1>     mov bh, 0   ;Page 0
   644 000015D8 B402                <1>     mov ah, 2
   645 000015DA CD30                <1>     int 30h
   646                              <1>     return
    19                              <2> %%_ret:
    20 000015DC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   647                              <1> .doAnsi:
   648                              <1> ;If an ANSI driver is not installed, this will simply insert blank lines
   649                              <1> ;4 chars in the ansi routine
   650                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   651                              <1> ; understand ANSI codes
   652 000015DD 488D35A0F3FFFF      <1>     lea rsi, ansiCls
   653 000015E4 B904000000          <1>     mov ecx, 4
   654 000015E9 B406                <1>     mov ah, 06h ;Raw char output
   655                              <1> .ansiLp:
   656 000015EB AC                  <1>     lodsb   ;Get the char in 
   657 000015EC 88C2                <1>     mov dl, al
   658 000015EE CD41                <1>     int 41h
   659 000015F0 FFC9                <1>     dec ecx
   660 000015F2 75F7                <1>     jnz .ansiLp
   661                              <1>     return
    19                              <2> %%_ret:
    20 000015F4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   662                              <1> 
   663                              <1> break:
   664 000015F5 F605A6EAFFFFFF      <1>     test byte [arg1Flg], -1
   665 000015FC 752D                <1>     jnz .argumentProvided
   666                              <1>     ;Here we just get the status of break
   667 000015FE B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   668 00001603 CD41                <1>     int 41h
   669 00001605 88D3                <1>     mov bl, dl
   670 00001607 488D15DEF1FFFF      <1>     lea rdx, breakIs
   671 0000160E B409                <1>     mov ah, 09h
   672 00001610 CD41                <1>     int 41h
   673 00001612 488D15CEF1FFFF      <1>     lea rdx, onMes
   674 00001619 488D0DC1F1FFFF      <1>     lea rcx, offMes
   675 00001620 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   676 00001622 480F44D1            <1>     cmovz rdx, rcx
   677 00001626 B409                <1>     mov ah, 09h
   678 00001628 CD41                <1>     int 41h
   679                              <1>     return
    19                              <2> %%_ret:
    20 0000162A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   680                              <1> .argumentProvided:
   681 0000162B 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   682 0000162F AD                  <1>     lodsd   ;Read the word
   683 00001630 89C3                <1>     mov ebx, eax
   684 00001632 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   685 00001637 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   686 0000163A 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   687 0000163F 7416                <1>     je .maybeOn
   688 00001641 663D4F46            <1>     cmp ax, "OF"
   689 00001645 7523                <1>     jne .badArgument
   690 00001647 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   691 0000164C 6681FB4620          <1>     cmp bx, "F "
   692 00001651 7517                <1>     jne .badArgument
   693                              <1>     ;Set off
   694 00001653 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   695 00001655 EB0B                <1>     jmp short .setBreak
   696                              <1> .maybeOn:
   697 00001657 663D4F4E            <1>     cmp ax, "ON"
   698 0000165B 750D                <1>     jne .badArgument
   699                              <1>     ;Set on
   700 0000165D BA01000000          <1>     mov edx, 1
   701                              <1> .setBreak:
   702 00001662 B801330000          <1>     mov eax, 3301h  ;Set break
   703 00001667 CD41                <1>     int 41h
   704                              <1>     return
    19                              <2> %%_ret:
    20 00001669 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   705                              <1> .badArgument:
   706 0000166A 488D1523F3FFFF      <1>     lea rdx, badOnOff
   707 00001671 B409                <1>     mov ah, 09h
   708 00001673 CD41                <1>     int 41h
   709                              <1>     return
    19                              <2> %%_ret:
    20 00001675 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   710                              <1> 
   711                              <1> verify:
   712 00001676 F60525EAFFFFFF      <1>     test byte [arg1Flg], -1
   713 0000167D 752D                <1>     jnz .argumentProvided
   714                              <1>     ;Here we just get the status of break
   715 0000167F B800540000          <1>     mov eax, 5400h  ;Get verify status in al
   716 00001684 CD41                <1>     int 41h
   717 00001686 88C3                <1>     mov bl, al
   718 00001688 488D1567F1FFFF      <1>     lea rdx, verifyIs
   719 0000168F B409                <1>     mov ah, 09h
   720 00001691 CD41                <1>     int 41h
   721 00001693 488D154DF1FFFF      <1>     lea rdx, onMes
   722 0000169A 488D0D40F1FFFF      <1>     lea rcx, offMes
   723 000016A1 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   724 000016A3 480F44D1            <1>     cmovz rdx, rcx
   725 000016A7 B409                <1>     mov ah, 09h
   726 000016A9 CD41                <1>     int 41h
   727                              <1>     return
    19                              <2> %%_ret:
    20 000016AB C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   728                              <1> .argumentProvided:
   729 000016AC 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   730 000016B0 AD                  <1>     lodsd   ;Read the word
   731 000016B1 89C3                <1>     mov ebx, eax
   732 000016B3 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   733 000016B8 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   734 000016BB 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   735 000016C0 7416                <1>     je .maybeOn
   736 000016C2 663D4F46            <1>     cmp ax, "OF"
   737 000016C6 751F                <1>     jne .badArgument
   738 000016C8 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   739 000016CD 6681FB4620          <1>     cmp bx, "F "
   740 000016D2 7513                <1>     jne .badArgument
   741                              <1>     ;Set off
   742 000016D4 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
   743 000016D6 EB0A                <1>     jmp short .setVerify
   744                              <1> .maybeOn:
   745 000016D8 663D4F4E            <1>     cmp ax, "ON"
   746 000016DC 7509                <1>     jne .badArgument
   747                              <1>     ;Set on
   748 000016DE 31C0                <1>     xor eax, eax
   749 000016E0 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
   750                              <1> .setVerify:
   751 000016E2 B42E                <1>     mov ah, 2Eh  ;Set Verify
   752 000016E4 CD41                <1>     int 41h
   753                              <1>     return
    19                              <2> %%_ret:
    20 000016E6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   754                              <1> .badArgument:
   755 000016E7 488D15A6F2FFFF      <1>     lea rdx, badOnOff
   756 000016EE B409                <1>     mov ah, 09h
   757 000016F0 CD41                <1>     int 41h
   758                              <1>     return
    19                              <2> %%_ret:
    20 000016F2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   759                              <1> 
   760                              <1> rename:
   761                              <1>     return
    19                              <2> %%_ret:
    20 000016F3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   762                              <1> truename:
   763 000016F4 F605A7E9FFFFFF      <1>     test byte [arg1Flg], -1
   764 000016FB 750C                <1>     jnz .argumentProvided
   765 000016FD 488D1522F1FFFF      <1>     lea rdx, badArgs
   766 00001704 B409                <1>     mov ah, 09h
   767 00001706 CD41                <1>     int 41h
   768                              <1>     return
    19                              <2> %%_ret:
    20 00001708 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   769                              <1> .argumentProvided:
   770 00001709 E8F3050000          <1>     call buildCommandPath
   771                              <1>     ;Explicitly call Truename if we remove truename from this function
   772 0000170E 488D3DB7EBFFFF      <1>     lea rdi, searchSpec
   773 00001715 E88C040000          <1>     call strlen
   774 0000171A FFC9                <1>     dec ecx ;Don't print terminating null
   775 0000171C 488D15A9EBFFFF      <1>     lea rdx, searchSpec
   776 00001723 BB01000000          <1>     mov ebx, 01
   777 00001728 B440                <1>     mov ah, 40h
   778 0000172A CD41                <1>     int 41h
   779 0000172C E8B0010000          <1>     call printCRLF
   780                              <1>     return
    19                              <2> %%_ret:
    20 00001731 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   781                              <1> 
   782                              <1> volume:
   783 00001732 C6052DECFFFFFF      <1>     mov byte [dirVolFlg], -1    ;Set this flag
   784 00001739 488D3D1DECFFFF      <1>     lea rdi, dirVolPathBuf
   785 00001740 E85C040000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   786 00001745 E811F8FFFF          <1>     call dir.dirCWD ;Use the hard work already done
   787 0000174A C60515ECFFFF00      <1>     mov byte [dirVolFlg], 0
   788                              <1>     return
    19                              <2> %%_ret:
    20 00001751 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   789                              <1> 
   790                              <1> version:
   791 00001752 488D15A7ECFFFF      <1>     lea rdx, crlf
   792 00001759 B409                <1>     mov ah, 09h
   793 0000175B CD41                <1>     int 41h
   794 0000175D 488D150FEFFFFF      <1>     lea rdx, dosVer
   795 00001764 B409                <1>     mov ah, 09h
   796 00001766 CD41                <1>     int 41h
   797 00001768 E80C000000          <1>     call .printVersionNumber
   798 0000176D 488D158CECFFFF      <1>     lea rdx, crlf
   799 00001774 B409                <1>     mov ah, 09h
   800 00001776 CD41                <1>     int 41h
   801                              <1>     return
    19                              <2> %%_ret:
    20 00001778 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   802                              <1> .printVersionNumber:
   803 00001779 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
   804 0000177B CD41                <1>     int 41h
   805 0000177D 50                  <1>     push rax
   806 0000177E 0FB6C0              <1>     movzx eax, al
   807 00001781 E849060000          <1>     call printDecimalWord
   808 00001786 B22E                <1>     mov dl, "."
   809 00001788 B402                <1>     mov ah, 02h
   810 0000178A CD41                <1>     int 41h
   811 0000178C 58                  <1>     pop rax
   812 0000178D 0FB6C4              <1>     movzx eax, ah
   813 00001790 E83A060000          <1>     call printDecimalWord
   814                              <1>     return
    19                              <2> %%_ret:
    20 00001795 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   815                              <1> 
   816                              <1> 
   817                              <1> memory:
   818 00001796 488B1D7AE8FFFF      <1>     mov rbx, qword [sysVars]
   819 0000179D 4885DB              <1>     test rbx, rbx
   820 000017A0 7510                <1>     jnz .sysvarsOK
   821 000017A2 488D157CF1FFFF      <1>     lea rdx, memBad0
   822 000017A9 B409                <1>     mov ah, 09h
   823 000017AB CD41                <1>     int 41h
   824 000017AD E9C0060000          <1>     jmp freezePC.altEP
   825                              <1> .sysvarsOK:
   826                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
   827                              <1>     ; and rcx to store Application memory
   828 000017B2 31F6                <1>     xor esi, esi
   829 000017B4 31FF                <1>     xor edi, edi
   830 000017B6 31ED                <1>     xor ebp, ebp
   831 000017B8 31C9                <1>     xor ecx, ecx
   832 000017BA 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
   833 000017BE 488B1B              <1>     mov rbx, qword [rbx]
   834                              <1> .memLp:
   835 000017C1 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
   836 000017C4 7409                <1>     je .validMCB
   837 000017C6 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
   838 000017C9 0F8501010000        <1>     jne .badMCBFound
   839                              <1> .validMCB:
   840 000017CF 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
   841 000017D2 48C1E004            <1>     shl rax, 4  ;Convert to bytes
   842 000017D6 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
   843 000017DE 7505                <1>     jne .notDOS
   844 000017E0 4801C6              <1>     add rsi, rax    ;Add to DOS count
   845 000017E3 EB21                <1>     jmp short .gotoNext
   846                              <1> .notDOS:
   847 000017E5 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
   848 000017ED 7505                <1>     jne .notFree
   849 000017EF 4801C7              <1>     add rdi, rax    ;Add to Free space count
   850 000017F2 EB12                <1>     jmp short .gotoNext
   851                              <1> .notFree:
   852 000017F4 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
   853 000017FC 7505                <1>     jne .notHole
   854 000017FE 4801C5              <1>     add rbp, rax    ;Add to Hole count
   855 00001801 EB03                <1>     jmp short .gotoNext
   856                              <1> .notHole:
   857 00001803 4801C1              <1>     add rcx, rax    ;Add to Application count
   858                              <1> .gotoNext:
   859 00001806 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
   860 00001809 7407                <1>     je .endOfWalk
   861 0000180B 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
   862 00001810 EBAF                <1>     jmp short .memLp
   863                              <1> .endOfWalk:
   864                              <1>     
   865 00001812 488D156DF0FFFF      <1>     lea rdx, memDOS
   866 00001819 B409                <1>     mov ah, 09h
   867 0000181B CD41                <1>     int 41h
   868 0000181D 4889F0              <1>     mov rax, rsi
   869 00001820 E89D000000          <1>     call .mcbPrintAmount
   870 00001825 488D15F2F0FFFF      <1>     lea rdx, memByte
   871 0000182C B409                <1>     mov ah, 09h
   872 0000182E CD41                <1>     int 41h
   873                              <1> 
   874 00001830 4885ED              <1>     test rbp, rbp
   875 00001833 741E                <1>     jz .skipHole
   876 00001835 488D1596F0FFFF      <1>     lea rdx, memHole
   877 0000183C B409                <1>     mov ah, 09h
   878 0000183E CD41                <1>     int 41h
   879 00001840 4889E8              <1>     mov rax, rbp
   880 00001843 E87A000000          <1>     call .mcbPrintAmount
   881 00001848 488D15CFF0FFFF      <1>     lea rdx, memByte
   882 0000184F B409                <1>     mov ah, 09h
   883 00001851 CD41                <1>     int 41h
   884                              <1> .skipHole:
   885                              <1> 
   886 00001853 488D1552F0FFFF      <1>     lea rdx, memApp
   887 0000185A B409                <1>     mov ah, 09h
   888 0000185C CD41                <1>     int 41h
   889 0000185E 4889C8              <1>     mov rax, rcx
   890 00001861 E85C000000          <1>     call .mcbPrintAmount
   891 00001866 488D15B1F0FFFF      <1>     lea rdx, memByte
   892 0000186D B409                <1>     mov ah, 09h
   893 0000186F CD41                <1>     int 41h
   894                              <1> 
   895 00001871 488D1580F0FFFF      <1>     lea rdx, memFree
   896 00001878 B409                <1>     mov ah, 09h
   897 0000187A CD41                <1>     int 41h
   898 0000187C 4889F8              <1>     mov rax, rdi
   899 0000187F E83E000000          <1>     call .mcbPrintAmount
   900 00001884 488D1593F0FFFF      <1>     lea rdx, memByte
   901 0000188B B409                <1>     mov ah, 09h
   902 0000188D CD41                <1>     int 41h
   903                              <1> 
   904 0000188F 488D15CAEFFFFF      <1>     lea rdx, memSys
   905 00001896 B409                <1>     mov ah, 09h
   906 00001898 CD41                <1>     int 41h
   907 0000189A 4889F0              <1>     mov rax, rsi
   908 0000189D 4801F8              <1>     add rax, rdi
   909 000018A0 4801C8              <1>     add rax, rcx
   910 000018A3 4801E8              <1>     add rax, rbp
   911 000018A6 E817000000          <1>     call .mcbPrintAmount
   912 000018AB 488D156CF0FFFF      <1>     lea rdx, memByte
   913 000018B2 B409                <1>     mov ah, 09h
   914 000018B4 CD41                <1>     int 41h
   915                              <1> 
   916 000018B6 488D1543EBFFFF      <1>     lea rdx, crlf
   917 000018BD B409                <1>     mov ah, 09h
   918 000018BF CD41                <1>     int 41h
   919                              <1>     return
    19                              <2> %%_ret:
    20 000018C1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   920                              <1> 
   921                              <1> .mcbPrintAmount:
   922 000018C2 51                  <1>     push rcx
   923 000018C3 56                  <1>     push rsi
   924 000018C4 57                  <1>     push rdi
   925 000018C5 55                  <1>     push rbp
   926 000018C6 E804050000          <1>     call printDecimalWord
   927 000018CB 5D                  <1>     pop rbp
   928 000018CC 5F                  <1>     pop rdi
   929 000018CD 5E                  <1>     pop rsi
   930 000018CE 59                  <1>     pop rcx
   931                              <1>     return
    19                              <2> %%_ret:
    20 000018CF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   932                              <1> .badMCBFound:
   933 000018D0 488D158EF0FFFF      <1>     lea rdx, memBad2
   934 000018D7 B409                <1>     mov ah, 09h
   935 000018D9 CD41                <1>     int 41h
   936 000018DB E992050000          <1>     jmp freezePC.altEP
   937                              <1> launchChild:
   938                              <1> ;We run EXEC on this and the child task will return via applicationReturn
   939                              <1>     return
    19                              <2> %%_ret:
    20 000018E0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   940                              <1> 
    16                                  %include "./Source/Utils/COMMAND/Source/cmdUtils.asm"
    17                              <1> ;Misc functions and subroutines for command.com
    18                              <1> 
    19                              <1> printCRLF:
    20 000018E1 488D1518EBFFFF      <1>     lea rdx, crlf
    21 000018E8 BB02000000          <1>     mov ebx, 2
    22 000018ED B440                <1>     mov ah, 40h ;Print a new line
    23 000018EF B902000000          <1>     mov ecx, 2  ;Two chars to write
    24 000018F4 CD41                <1>     int 41h
    25                              <1>     return
    19                              <2> %%_ret:
    20 000018F6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    26                              <1> printDate:
    27                              <1> ;Input: eax = Packed Date
    28                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
    29                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
    30                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
    31                              <1> ;       ebx = 0 => Print two digit year
    32                              <1> ;       ebx = 1 => Print four digit year
    33 000018F7 53                  <1>     push rbx
    34 000018F8 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    35 000018FA 803D24E7FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    36 00001901 7240                <1>     jb .usDate
    37 00001903 777C                <1>     ja .jpnDate
    38                              <1> ;European: DD/MM/YY
    39 00001905 251F000000          <1>     and eax, 1Fh    ;Save day bits
    40 0000190A E8B0000000          <1>     call .printFirst
    41 0000190F 8A151BE7FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    42 00001915 B402                <1>     mov ah, 02h
    43 00001917 CD41                <1>     int 41h
    44                              <1> 
    45 00001919 89C8                <1>     mov eax, ecx
    46 0000191B 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    47 00001920 C1E805              <1>     shr eax, 5
    48 00001923 E8B3000000          <1>     call .printSecond
    49                              <1> 
    50 00001928 8A1502E7FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    51 0000192E B402                <1>     mov ah, 02h
    52 00001930 CD41                <1>     int 41h
    53                              <1> 
    54 00001932 89C8                <1>     mov eax, ecx
    55 00001934 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    56 00001939 C1E809              <1>     shr eax, 9
    57 0000193C 5B                  <1>     pop rbx ;Get the year signature back
    58 0000193D E8A9000000          <1>     call .printYear
    59                              <1>     return
    19                              <2> %%_ret:
    20 00001942 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    60                              <1> .usDate:
    61                              <1> ;US: MM/DD/YY
    62 00001943 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    63 00001948 C1E805              <1>     shr eax, 5
    64 0000194B E86F000000          <1>     call .printFirst
    65                              <1> 
    66 00001950 8A15DAE6FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    67 00001956 B402                <1>     mov ah, 02h
    68 00001958 CD41                <1>     int 41h
    69                              <1> 
    70 0000195A 89C8                <1>     mov eax, ecx
    71 0000195C 251F000000          <1>     and eax, 1Fh    ;Save day bits
    72 00001961 E875000000          <1>     call .printSecond
    73                              <1> 
    74 00001966 8A15C4E6FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    75 0000196C B402                <1>     mov ah, 02h
    76 0000196E CD41                <1>     int 41h
    77                              <1> 
    78 00001970 89C8                <1>     mov eax, ecx
    79 00001972 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    80 00001977 C1E809              <1>     shr eax, 9
    81 0000197A 5B                  <1>     pop rbx ;Get the year signature back
    82 0000197B E86B000000          <1>     call .printYear
    83                              <1>     return
    19                              <2> %%_ret:
    20 00001980 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    84                              <1> .jpnDate:
    85                              <1> ;Japan: YY/MM/DD
    86 00001981 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    87 00001986 C1E809              <1>     shr eax, 9
    88 00001989 5B                  <1>     pop rbx ;Get the year signature back
    89 0000198A E85C000000          <1>     call .printYear
    90                              <1> 
    91 0000198F 8A159BE6FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    92 00001995 B402                <1>     mov ah, 02h
    93 00001997 CD41                <1>     int 41h
    94                              <1> 
    95 00001999 89C8                <1>     mov eax, ecx
    96 0000199B 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    97 000019A0 C1E805              <1>     shr eax, 5
    98 000019A3 E833000000          <1>     call .printSecond
    99                              <1> 
   100 000019A8 8A1582E6FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
   101 000019AE B402                <1>     mov ah, 02h
   102 000019B0 CD41                <1>     int 41h
   103                              <1> 
   104 000019B2 89C8                <1>     mov eax, ecx
   105 000019B4 251F000000          <1>     and eax, 1Fh    ;Save day bits
   106 000019B9 E81D000000          <1>     call .printSecond
   107                              <1>     return
    19                              <2> %%_ret:
    20 000019BE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   108                              <1> 
   109                              <1> ;Each of these require eax setup correctly
   110                              <1> .printFirst:
   111 000019BF 51                  <1>     push rcx
   112 000019C0 E87B040000          <1>     call getDecimalWord
   113 000019C5 84ED                <1>     test ch, ch ;Do we have an upper digit?
   114 000019C7 7504                <1>     jnz .skipSpace
   115 000019C9 88CD                <1>     mov ch, cl
   116 000019CB B120                <1>     mov cl, " "
   117                              <1> .skipSpace:
   118 000019CD 88CA                <1>     mov dl, cl
   119 000019CF B402                <1>     mov ah, 02h
   120 000019D1 CD41                <1>     int 41h
   121 000019D3 88EA                <1>     mov dl, ch
   122 000019D5 B402                <1>     mov ah, 02h
   123 000019D7 CD41                <1>     int 41h
   124 000019D9 59                  <1>     pop rcx
   125                              <1>     return
    19                              <2> %%_ret:
    20 000019DA C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   126                              <1> .printSecond:
   127 000019DB 51                  <1>     push rcx
   128 000019DC E85F040000          <1>     call getDecimalWord
   129 000019E1 84ED                <1>     test ch, ch ;Do we have an upper digit?
   130 000019E3 75E8                <1>     jnz .skipSpace
   131 000019E5 88CD                <1>     mov ch, cl
   132 000019E7 B130                <1>     mov cl, "0"
   133 000019E9 EBE2                <1>     jmp short .skipSpace
   134                              <1> .printYear:
   135 000019EB 05BC070000          <1>     add eax, 1980
   136 000019F0 51                  <1>     push rcx
   137 000019F1 53                  <1>     push rbx
   138 000019F2 E849040000          <1>     call getDecimalWord ;Get unpacked in rcx
   139 000019F7 5B                  <1>     pop rbx
   140 000019F8 84DB                <1>     test bl, bl
   141 000019FA 740C                <1>     jz .twoDigitYear
   142 000019FC 88CA                <1>     mov dl, cl  ;Print the first digit
   143 000019FE B402                <1>     mov ah, 02h
   144 00001A00 CD41                <1>     int 41h
   145 00001A02 88EA                <1>     mov dl, ch  ;Print the second digit
   146 00001A04 B402                <1>     mov ah, 02h
   147 00001A06 CD41                <1>     int 41h
   148                              <1> .twoDigitYear:
   149 00001A08 C1E910              <1>     shr ecx, 10h    ;Get high word low
   150 00001A0B 88CA                <1>     mov dl, cl  ;Print the upper digit
   151 00001A0D B402                <1>     mov ah, 02h
   152 00001A0F CD41                <1>     int 41h
   153 00001A11 88EA                <1>     mov dl, ch  ;Print the lower digit
   154 00001A13 B402                <1>     mov ah, 02h
   155 00001A15 CD41                <1>     int 41h
   156 00001A17 59                  <1>     pop rcx
   157                              <1>     return
    19                              <2> %%_ret:
    20 00001A18 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   158                              <1> 
   159                              <1> 
   160                              <1> printTime:
   161                              <1> ;Input: eax = Packed Time
   162                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   163                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   164 00001A19 89C1                <1>     mov ecx, eax
   165 00001A1B 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   166 00001A20 C1E80B              <1>     shr eax, 11
   167 00001A23 803D0CE6FFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   168 00001A2A 750B                <1>     jne .ampm
   169 00001A2C E85A000000          <1>     call .printHours
   170 00001A31 E831000000          <1>     call .printMinutes
   171                              <1>     return
    19                              <2> %%_ret:
    20 00001A36 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   172                              <1> .ampm:
   173 00001A37 3D0C000000          <1>     cmp eax, 12
   174 00001A3C 7713                <1>     ja .pm
   175 00001A3E 7416                <1>     je .pm2
   176 00001A40 E846000000          <1>     call .printHours
   177 00001A45 E81D000000          <1>     call .printMinutes
   178 00001A4A B261                <1>     mov dl, "a"
   179 00001A4C B402                <1>     mov ah, 02h
   180 00001A4E CD41                <1>     int 41h
   181                              <1>     return
    19                              <2> %%_ret:
    20 00001A50 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   182                              <1> .pm:
   183 00001A51 2D0C000000          <1>     sub eax, 12
   184                              <1> .pm2:
   185 00001A56 E830000000          <1>     call .printHours
   186 00001A5B E807000000          <1>     call .printMinutes
   187 00001A60 B270                <1>     mov dl, "p"
   188 00001A62 B402                <1>     mov ah, 02h
   189 00001A64 CD41                <1>     int 41h
   190                              <1>     return
    19                              <2> %%_ret:
    20 00001A66 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   191                              <1> .printMinutes:
   192 00001A67 8A15C5E5FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   193 00001A6D B402                <1>     mov ah, 02h
   194 00001A6F CD41                <1>     int 41h
   195                              <1> 
   196 00001A71 89C8                <1>     mov eax, ecx
   197 00001A73 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   198 00001A78 C1E805              <1>     shr eax, 5
   199                              <1> .printMinutesAlt:
   200 00001A7B 51                  <1>     push rcx
   201 00001A7C E8BF030000          <1>     call getDecimalWord
   202 00001A81 84ED                <1>     test ch, ch ;Do we have an upper digit?
   203 00001A83 7514                <1>     jnz .skipSpace
   204 00001A85 88CD                <1>     mov ch, cl
   205 00001A87 B130                <1>     mov cl, "0"
   206 00001A89 EB0E                <1>     jmp short .skipSpace
   207                              <1> .printHours:
   208 00001A8B 51                  <1>     push rcx
   209 00001A8C E8AF030000          <1>     call getDecimalWord
   210 00001A91 84ED                <1>     test ch, ch ;Do we have an upper digit?
   211 00001A93 7504                <1>     jnz .skipSpace
   212 00001A95 88CD                <1>     mov ch, cl
   213 00001A97 B120                <1>     mov cl, " "
   214                              <1> .skipSpace:
   215 00001A99 88CA                <1>     mov dl, cl
   216 00001A9B B402                <1>     mov ah, 02h
   217 00001A9D CD41                <1>     int 41h
   218 00001A9F 88EA                <1>     mov dl, ch
   219 00001AA1 B402                <1>     mov ah, 02h
   220 00001AA3 CD41                <1>     int 41h
   221 00001AA5 59                  <1>     pop rcx
   222                              <1>     return
    19                              <2> %%_ret:
    20 00001AA6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   223                              <1> 
   224                              <1> 
   225                              <1> putVersionInPrompt:
   226 00001AA7 488D15C5EBFFFF      <1>     lea rdx, dosVer
   227 00001AAE B409                <1>     mov ah, 09h ;Print String
   228 00001AB0 CD41                <1>     int 41h
   229 00001AB2 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   230 00001AB4 CD41                <1>     int 41h
   231 00001AB6 50                  <1>     push rax    ;Save minor version
   232 00001AB7 E89C000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   233 00001ABC E8B4000000          <1>     call printPackedBCD ;Print al
   234 00001AC1 B22E                <1>     mov dl, "."
   235 00001AC3 B402                <1>     mov ah, 02h
   236 00001AC5 CD41                <1>     int 41h
   237 00001AC7 58                  <1>     pop rax
   238 00001AC8 88E0                <1>     mov al, ah  ;Get the minor version low
   239 00001ACA E889000000          <1>     call hexToBCD
   240 00001ACF E8A1000000          <1>     call printPackedBCD
   241                              <1>     return
    19                              <2> %%_ret:
    20 00001AD4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   242                              <1> putEscInPrompt:
   243 00001AD5 B21B                <1>     mov dl, ESC
   244 00001AD7 EB1C                <1>     jmp short outChar
   245                              <1> 
   246                              <1> putMoneyInPrompt:
   247 00001AD9 B224                <1>     mov dl, "$"
   248 00001ADB EB18                <1>     jmp short outChar
   249                              <1> 
   250                              <1> putEquInPrompt:
   251 00001ADD B23D                <1>     mov dl, "="
   252 00001ADF EB14                <1>     jmp short outChar
   253                              <1> 
   254                              <1> putPipeInPrompt:
   255 00001AE1 B27C                <1>     mov dl, "|"
   256 00001AE3 EB10                <1>     jmp short outChar
   257                              <1> 
   258                              <1> putGTinPrompt:
   259 00001AE5 B23E                <1>     mov dl, ">"
   260 00001AE7 EB0C                <1>     jmp short outChar
   261                              <1> 
   262                              <1> putLTinPrompt:
   263 00001AE9 B23C                <1>     mov dl, "<"
   264 00001AEB EB08                <1>     jmp short outChar
   265                              <1> 
   266                              <1> putDriveInPrompt:
   267 00001AED B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   268 00001AEF CD41                <1>     int 41h
   269 00001AF1 0441                <1>     add al, "A" ;Convert to letter
   270 00001AF3 88C2                <1>     mov dl, al
   271                              <1> outChar:
   272 00001AF5 B402                <1>     mov ah, 02h ;Echo to STDOUT
   273 00001AF7 CD41                <1>     int 41h
   274                              <1>     return
    19                              <2> %%_ret:
    20 00001AF9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   275                              <1> putCWDInPrompt:
   276 00001AFA 488D3D4AE5FFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   277 00001B01 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   278 00001B03 CD41                <1>     int 41h
   279 00001B05 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   280 00001B07 FEC2                <1>     inc dl
   281 00001B09 0441                <1>     add al, "A" ;Convert to letter
   282 00001B0B B43A                <1>     mov ah, ":"
   283 00001B0D 66AB                <1>     stosw   ;Store X:, rdi+=2
   284 00001B0F 8A050EE5FFFF        <1>     mov al, byte [pathSep]
   285 00001B15 AA                  <1>     stosb   ;Store pathSep, inc rdi
   286 00001B16 B447                <1>     mov ah, 47h ;Get Current Working Directory
   287 00001B18 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   288 00001B1B CD41                <1>     int 41h
   289 00001B1D E884000000          <1>     call strlen
   290 00001B22 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   291                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   292 00001B28 B440                <1>     mov ah, 40h ;Write to handle
   293 00001B2A BB01000000          <1>     mov ebx, 1  ;STDOUT
   294 00001B2F 488D1515E5FFFF      <1>     lea rdx, currDirStr
   295 00001B36 CD41                <1>     int 41h
   296                              <1>     return
    19                              <2> %%_ret:
    20 00001B38 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   297                              <1> 
   298                              <1> BCDtoHex:
   299                              <1> ;Converts a BCD value to a Hex byte
   300                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   301 00001B39 51                  <1>     push rcx
   302 00001B3A 0FB6C0              <1>     movzx eax, al   ;Zero extend
   303 00001B3D 89C1                <1>     mov ecx, eax    ;Save al in ecx
   304 00001B3F 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   305 00001B44 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   306 00001B4A C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   307                              <1> .bth:
   308 00001B4D 050A000000          <1>     add eax, 10
   309 00001B52 FFC9                <1>     dec ecx
   310 00001B54 75F7                <1>     jnz .bth
   311 00001B56 59                  <1>     pop rcx
   312 00001B57 C3                  <1>     ret
   313                              <1> 
   314                              <1> hexToBCD:
   315                              <1> ;Converts a Hex byte into two BCD digits
   316                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   317 00001B58 51                  <1>     push rcx
   318 00001B59 0FB6C0              <1>     movzx eax, al   ;Zero extend
   319 00001B5C 31C9                <1>     xor ecx, ecx
   320                              <1> .htb0:
   321 00001B5E 3D0A000000          <1>     cmp eax, 10
   322 00001B63 7209                <1>     jb .htb1
   323 00001B65 2D0A000000          <1>     sub eax, 10
   324 00001B6A FFC1                <1>     inc ecx
   325 00001B6C EBF0                <1>     jmp short .htb0
   326                              <1> .htb1:
   327 00001B6E C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   328 00001B71 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   329 00001B73 59                  <1>     pop rcx
   330 00001B74 C3                  <1>     ret
   331                              <1> 
   332                              <1> printPackedBCD:
   333                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   334                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   335                              <1> ;Preserves all registers
   336 00001B75 50                  <1>     push rax
   337 00001B76 52                  <1>     push rdx
   338 00001B77 88C4                <1>     mov ah, al
   339 00001B79 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   340 00001B7B 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   341 00001B7E 7508                <1>     jnz .upperNybble
   342 00001B80 B220                <1>     mov dl, " "
   343 00001B82 B402                <1>     mov ah, 02h
   344 00001B84 CD41                <1>     int 41h
   345 00001B86 EB0E                <1>     jmp short .lowerNybble
   346                              <1> .upperNybble:
   347 00001B88 50                  <1>     push rax
   348 00001B89 C0EC04              <1>     shr ah, 4
   349 00001B8C 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   350 00001B8F 88E2                <1>     mov dl, ah
   351 00001B91 B402                <1>     mov ah, 02h ;Print DL
   352 00001B93 CD41                <1>     int 41h
   353 00001B95 58                  <1>     pop rax
   354                              <1> .lowerNybble:
   355 00001B96 0430                <1>     add al, "0"
   356 00001B98 88C2                <1>     mov dl, al
   357 00001B9A B402                <1>     mov ah, 02h ;Print DL
   358 00001B9C CD41                <1>     int 41h
   359 00001B9E 5A                  <1>     pop rdx
   360 00001B9F 58                  <1>     pop rax
   361                              <1>     return
    19                              <2> %%_ret:
    20 00001BA0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   362                              <1> 
   363                              <1> getCurrentDrive:
   364                              <1> ;Returns the current drive in al
   365 00001BA1 B419                <1>     mov ah, 19h
   366 00001BA3 CD41                <1>     int 41h
   367                              <1>     return
    19                              <2> %%_ret:
    20 00001BA5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   368                              <1> 
   369                              <1> strlen:
   370                              <1> ;Gets the length of a ASCIIZ string
   371                              <1> ;Input: rdi = Source buffer
   372                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   373 00001BA6 50                  <1>     push rax
   374 00001BA7 57                  <1>     push rdi
   375 00001BA8 30C0                <1>     xor al, al
   376 00001BAA 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   377 00001BAC FFC9                <1>     dec ecx ;rcx = -1
   378 00001BAE F2AE                <1>     repne scasb
   379 00001BB0 F7D1                <1>     not ecx
   380 00001BB2 5F                  <1>     pop rdi
   381 00001BB3 58                  <1>     pop rax
   382                              <1>     return
    19                              <2> %%_ret:
    20 00001BB4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   383                              <1> 
   384                              <1> findTerminatorOrEOC:
   385                              <1> ;Advances rsi to the next string terminator char or the next End of command
   386                              <1> ; char
   387                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   388                              <1> ;If a end of command char found, also sets CF
   389 00001BB5 AC                  <1>     lodsb
   390 00001BB6 3C0D                <1>     cmp al, CR
   391 00001BB8 7419                <1>     je .endOfInput
   392 00001BBA E82B000000          <1>     call isALterminator
   393 00001BBF 7419                <1>     jz .exit
   394 00001BC1 3A055CE4FFFF        <1>     cmp al, byte [pathSep]
   395 00001BC7 7411                <1>     je .exit
   396 00001BC9 3A0555E4FFFF        <1>     cmp al, byte [switchChar]
   397 00001BCF 7409                <1>     je .exit
   398 00001BD1 EBE2                <1>     jmp short findTerminatorOrEOC
   399                              <1> .endOfInput:
   400 00001BD3 E802000000          <1>     call .exit
   401 00001BD8 F9                  <1>     stc 
   402                              <1>     return
    19                              <2> %%_ret:
    20 00001BD9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   403                              <1> .exit:
   404 00001BDA 48FFCE              <1>     dec rsi ;Point to the terminating char
   405                              <1>     return
    19                              <2> %%_ret:
    20 00001BDD C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   406                              <1> 
   407                              <1> findTerminator:
   408                              <1> ;Advances rsi to the next string terminator char
   409                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   410 00001BDE AC                  <1>     lodsb
   411 00001BDF E806000000          <1>     call isALterminator
   412 00001BE4 75F8                <1>     jnz findTerminator
   413 00001BE6 48FFCE              <1>     dec rsi
   414                              <1>     return
    19                              <2> %%_ret:
    20 00001BE9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   415                              <1> isALterminator:
   416                              <1> ;Returns: ZF=NZ if al is not a terminator (Not including CR)
   417                              <1> ;         ZF=ZY if al is a terminator
   418 00001BEA 3C20                <1>     cmp al, " "
   419                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001BEC 74(E9)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   420 00001BEE 3C3B                <1>     cmp al, ";"
   421                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001BF0 74(E9)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   422 00001BF2 3C3D                <1>     cmp al, "="
   423                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001BF4 74(E9)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   424 00001BF6 3C2C                <1>     cmp al, ","
   425                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001BF8 74(E9)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   426 00001BFA 3C09                <1>     cmp al, TAB
   427                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001BFC 74(E9)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   428 00001BFE 3C0A                <1>     cmp al, LF
   429                              <1>     return
    19                              <2> %%_ret:
    20 00001C00 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   430                              <1> 
   431                              <1> findEndOfCommand:
   432                              <1> ;Moves rsi to the | or CR that terminates this command
   433 00001C01 AC                  <1>     lodsb
   434 00001C02 E806000000          <1>     call isALEndOfCommand
   435 00001C07 75F8                <1>     jnz findEndOfCommand
   436 00001C09 48FFCE              <1>     dec rsi
   437                              <1>     return
    19                              <2> %%_ret:
    20 00001C0C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   438                              <1> isALEndOfCommand:
   439 00001C0D 3C7C                <1>     cmp al, "|"
   440                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001C0F 74(0C)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   441 00001C11 3C0D                <1>     cmp al, CR
   442                              <1>     return
    19                              <2> %%_ret:
    20 00001C13 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   443                              <1> 
   444                              <1> scanForRedir:
   445                              <1> ;Returns: AL = 0 => No redirection, terminate with CR
   446                              <1> ;         AL = 1 => Redirection, type <
   447                              <1> ;         AL = 10 => Redir, type >
   448                              <1> ;         AL = 20 => Redir, type >>
   449                              <1> ;If multiple redirs found, the last one of that type counts.
   450 00001C14 56                  <1>     push rsi
   451 00001C15 55                  <1>     push rbp
   452 00001C16 30E4                <1>     xor ah, ah
   453                              <1> .lp:
   454 00001C18 AC                  <1>     lodsb
   455 00001C19 3C3E                <1>     cmp al, ">"
   456                              <1> .exit:
   457 00001C1B 5D                  <1>     pop rbp
   458 00001C1C 5E                  <1>     pop rsi
   459                              <1>     return
    19                              <2> %%_ret:
    20 00001C1D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   460                              <1> 
   461                              <1> 
   462                              <1> skipSpaces:
   463                              <1> ;Also skips tabs
   464                              <1> ;Input: rsi must point to the start of the data string
   465                              <1> ;Output: rsi points to the first non-space char
   466 00001C1E 803E20              <1>     cmp byte [rsi], " "
   467 00001C21 7405                <1>     je .skip    ;If equal to a space, skip it
   468 00001C23 803E09              <1>     cmp byte [rsi], TAB
   469                              <1>     retne   ;If not equal to a tab or space, return
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001C26 75(1D)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   470                              <1> .skip:
   471 00001C28 48FFC6              <1>     inc rsi
   472 00001C2B EBF1                <1>     jmp short skipSpaces
   473                              <1> 
   474                              <1> printPrompt:
   475 00001C2D 66813DEBE3FFFFFFFF  <1>     cmp word [promptPtr], -1
   476 00001C36 750B                <1>     jne .validPrompt
   477                              <1>     ;Here we print the default prompt
   478 00001C38 E8BDFEFFFF          <1>     call putCWDInPrompt
   479 00001C3D E8A3FEFFFF          <1>     call putGTinPrompt
   480                              <1>     return
    19                              <2> %%_ret:
    20 00001C42 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   481                              <1> .validPrompt:
   482                              <1>     return
    19                              <2> %%_ret:
    20 00001C43 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   483                              <1> 
   484                              <1> clearCommandState:
   485                              <1> ;Clears the command state
   486 00001C44 488D3D53E4FFFF      <1>     lea rdi, cmdStatePtr
   487 00001C4B B90A000000          <1>     mov ecx, cmdStateL
   488 00001C50 31C0                <1>     xor eax, eax
   489 00001C52 F3AA                <1>     rep stosb
   490                              <1>     return
    19                              <2> %%_ret:
    20 00001C54 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   491                              <1> 
   492                              <1> clearCommandLineState:
   493                              <1> ;Clears the command line state after a 0Dh encountered
   494 00001C55 488D3D32E4FFFF      <1>     lea rdi, cmdLineStatePtr
   495 00001C5C B91A000000          <1>     mov ecx, cmdLineStateL
   496 00001C61 31C0                <1>     xor eax, eax
   497 00001C63 F3AA                <1>     rep stosb
   498                              <1>     return
    19                              <2> %%_ret:
    20 00001C65 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   499                              <1> 
   500                              <1> asciiToFCB:
   501                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   502                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   503                              <1> ;Also doesn't check if chars are valid
   504                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   505                              <1> ;Name is space padded.
   506                              <1> ;Input: rsi = ASCII string buffer
   507                              <1> ;       rdi = FCB name buffer
   508                              <1> ;Output: al = Char that terminated the source string 
   509 00001C66 53                  <1>     push rbx    
   510 00001C67 57                  <1>     push rdi
   511 00001C68 B90B000000          <1>     mov ecx, 11
   512 00001C6D B020                <1>     mov al, " "
   513 00001C6F F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   514 00001C71 5F                  <1>     pop rdi
   515 00001C72 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   516 00001C75 EB1D                <1>     jmp short asciiFilenameToFCB.processName
   517                              <1> asciiFilenameToFCB:
   518                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   519                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   520                              <1> ;Also doesn't check if chars are valid
   521                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   522                              <1> ;Name is space padded.
   523                              <1> ;Input: rsi = ASCII string buffer
   524                              <1> ;       rdi = FCB name buffer
   525                              <1> ;Output: al = Char that terminated the source string 
   526 00001C77 53                  <1>     push rbx    
   527 00001C78 57                  <1>     push rdi
   528 00001C79 B90B000000          <1>     mov ecx, 11
   529 00001C7E B020                <1>     mov al, " "
   530 00001C80 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   531 00001C82 5F                  <1>     pop rdi
   532 00001C83 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   533                              <1>     ;Preprocess for Dir Searches
   534 00001C86 803E2E              <1>     cmp byte [rsi], "."
   535 00001C89 7509                <1>     jne .processName
   536 00001C8B A4                  <1>     movsb   ;Store the first dot
   537 00001C8C 803E2E              <1>     cmp byte [rsi], "."
   538 00001C8F 752C                <1>     jne .exitBadChar
   539 00001C91 A4                  <1>     movsb
   540 00001C92 EB29                <1>     jmp short .exitBadChar
   541                              <1> .processName:
   542 00001C94 AC                  <1>     lodsb   ;Get the char in al
   543 00001C95 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   544 00001C97 7426                <1>     jz .exit
   545 00001C99 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   546 00001C9B 7407                <1>     je .extSpace
   547 00001C9D 3C2E                <1>     cmp al, "."
   548 00001C9F 740C                <1>     je .ext
   549 00001CA1 AA                  <1>     stosb   ;Store the char
   550 00001CA2 EBF0                <1>     jmp short .processName
   551                              <1> .extSpace:
   552                              <1> ;Now we scan for a period in the name
   553 00001CA4 AC                  <1>     lodsb   ;Get a char and increase rsi
   554 00001CA5 84C0                <1>     test al, al
   555 00001CA7 7416                <1>     jz .exit
   556 00001CA9 3C2E                <1>     cmp al, "."     ;If al is not a period...
   557 00001CAB 75F7                <1>     jne .extSpace   ; keep searching
   558                              <1> .ext:
   559 00001CAD 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   560                              <1> .processExt:
   561 00001CB1 AC                  <1>     lodsb
   562 00001CB2 84C0                <1>     test al, al
   563 00001CB4 7409                <1>     jz .exit
   564 00001CB6 3C20                <1>     cmp al, " "
   565 00001CB8 7405                <1>     je .exit
   566 00001CBA AA                  <1>     stosb
   567 00001CBB EBF4                <1>     jmp short .processExt
   568                              <1> .exitBadChar:
   569 00001CBD 30C0                <1>     xor al, al  ;Return a null terminator
   570                              <1> .exit:
   571 00001CBF 5B                  <1>     pop rbx
   572                              <1>     return
    19                              <2> %%_ret:
    20 00001CC0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   573                              <1> 
   574                              <1> FCBToAsciiz:
   575                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   576                              <1> ;Name is space padded too
   577                              <1> ;Input: rsi = FCB name buffer
   578                              <1> ;       rdi = ASCIIZ string buffer
   579 00001CC1 B908000000          <1>     mov ecx, 8
   580 00001CC6 F3A4                <1>     rep movsb   ;Move the name over
   581                              <1> .scanNameSpace:
   582 00001CC8 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   583 00001CCC 750D                <1>     jne .ext
   584 00001CCE 48FFCF              <1>     dec rdi
   585 00001CD1 FFC1                <1>     inc ecx
   586 00001CD3 81F908000000        <1>     cmp ecx, 8
   587 00001CD9 72ED                <1>     jb .scanNameSpace
   588                              <1> .ext:
   589 00001CDB 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   590 00001CE0 7506                <1>     jne .validExt
   591 00001CE2 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   592 00001CE6 7415                <1>     je .exit
   593                              <1> .validExt:
   594 00001CE8 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   595 00001CEA AA                  <1>     stosb
   596 00001CEB B903000000          <1>     mov ecx, 3
   597 00001CF0 F3A4                <1>     rep movsb   ;Move the three extension chars over
   598                              <1> .scanExtSpace:
   599 00001CF2 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   600 00001CF6 7505                <1>     jne .exit
   601 00001CF8 48FFCF              <1>     dec rdi
   602 00001CFB EBF5                <1>     jmp short .scanExtSpace
   603                              <1> .exit:
   604 00001CFD 31C0                <1>     xor eax, eax
   605 00001CFF AA                  <1>     stosb   ;Store a null at the end
   606                              <1>     return
    19                              <2> %%_ret:
    20 00001D00 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   607                              <1> 
   608                              <1> buildCommandPath:
   609                              <1> ;Based on the first argument on the command line
   610                              <1> ; will build a full ASCIIZ path in searchSpec to the file/dir specified
   611                              <1>     ;If this is a relative path, will handle correctly (tho unnecessary)
   612 00001D01 0FB6059BE3FFFF      <1>     movzx eax, byte [arg1Off]
   613 00001D08 488D352AE4FFFF      <1>     lea rsi, cmdBuffer
   614 00001D0F 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   615 00001D12 8A3D0BE3FFFF        <1>     mov bh, byte [pathSep]
   616 00001D18 B33A                <1>     mov bl, ":"
   617 00001D1A 383E                <1>     cmp byte [rsi], bh  ;Is the first char relative to root?
   618 00001D1C 7458                <1>     je .absoluteCurrent
   619 00001D1E 66395E01            <1>     cmp word [rsi + 1], bx    ;This checks if absolute or relative
   620 00001D22 746D                <1>     je .absolutePath
   621 00001D24 385E01              <1>     cmp byte [rsi + 1], bl  ;Check if a drive separator
   622 00001D27 7409                <1>     je .relativeGiven
   623                              <1> ;No drive letter given, must get Current Drive
   624 00001D29 E873FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   625 00001D2E 0441                <1>     add al, "A"
   626 00001D30 EB0B                <1>     jmp short .relativeCommon
   627                              <1> .relativeGiven:
   628                              <1> ;Drive letter pointed to by AL
   629 00001D32 8A06                <1>     mov al, byte [rsi]  ;Get drive letter in al
   630 00001D34 24DF                <1>     and al, 0DFh    ;Convert to UC
   631 00001D36 4881C602000000      <1>     add rsi, 2  ;Skip the given drive letter and the colon
   632                              <1> .relativeCommon:
   633                              <1>     ;al has drive letter
   634 00001D3D 88C2                <1>     mov dl, al  ;Save drive letter in dl
   635 00001D3F 80EA40              <1>     sub dl, "@" ;Get 1 based drive number in dl
   636 00001D42 B43A                <1>     mov ah, ":" ;Get the colon in too
   637 00001D44 488D3D81E5FFFF      <1>     lea rdi, searchSpec ;Start building our search path here
   638 00001D4B 66AB                <1>     stosw   ;Store X:
   639 00001D4D 8A05D0E2FFFF        <1>     mov al, byte [pathSep]
   640 00001D53 AA                  <1>     stosb   ;Store pathSep
   641 00001D54 56                  <1>     push rsi    ;Save user input string
   642 00001D55 4889FE              <1>     mov rsi, rdi    ;Put the current directory here for this drive
   643 00001D58 B447                <1>     mov ah, 47h ;Get Current Working Directory, dl has drive number
   644 00001D5A CD41                <1>     int 41h ;Won't fail as drive letter in dl confirmed ok
   645 00001D5C 5E                  <1>     pop rsi
   646                              <1>     ;Now want to find terminating null
   647 00001D5D 30C0                <1>     xor al, al
   648 00001D5F 31C9                <1>     xor ecx, ecx
   649 00001D61 FFC9                <1>     dec ecx
   650 00001D63 F2AE                <1>     repne scasb ;Search for the terminating null
   651 00001D65 48FFCF              <1>     dec rdi ;Go back one once found
   652 00001D68 8A05B5E2FFFF        <1>     mov al, byte [pathSep]
   653 00001D6E 3847FF              <1>     cmp byte [rdi - 1], al
   654 00001D71 7425                <1>     je .buildPath ;If the previous char is a pathsep, skip storing another
   655 00001D73 AA                  <1>     stosb   ;Store the pathsep
   656 00001D74 EB22                <1>     jmp short .buildPath  ;Now we copy the user string over and good to go
   657                              <1> .absoluteCurrent:
   658 00001D76 E826FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   659 00001D7B 0441                <1>     add al, "A"
   660 00001D7D B43A                <1>     mov ah, ":" ;ax has X: now to store 
   661 00001D7F 488D3D46E5FFFF      <1>     lea rdi, searchSpec
   662 00001D86 66AB                <1>     stosw
   663 00001D88 8A0595E2FFFF        <1>     mov al, byte [pathSep]
   664 00001D8E AA                  <1>     stosb
   665 00001D8F EB07                <1>     jmp short .buildPath
   666                              <1> .absolutePath:
   667 00001D91 488D3D34E5FFFF      <1>     lea rdi, searchSpec
   668                              <1> .buildPath:
   669 00001D98 E8A1F0FFFF          <1>     call copyCommandTailItem    ;Terminates with a 0 for free
   670 00001D9D 488D3528E5FFFF      <1>     lea rsi, searchSpec
   671 00001DA4 488D3D21E5FFFF      <1>     lea rdi, searchSpec
   672 00001DAB B460                <1>     mov ah, 60h ;Truename it to avoid issues
   673 00001DAD CD41                <1>     int 41h
   674                              <1>     retc    ;Return if an error with CF=CY
    63                              <2> cret c
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 00001DAF 7301                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 00001DB1 C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   675                              <1>     ;Here we do one final check to ensure we dont end up with a A: but A:"\"
   676 00001DB2 30C0                <1>     xor al, al
   677 00001DB4 31C9                <1>     xor ecx, ecx
   678 00001DB6 FFC9                <1>     dec ecx
   679 00001DB8 F2AE                <1>     repne scasb
   680 00001DBA 48FFCF              <1>     dec rdi ;Go back to the final non-null char
   681 00001DBD 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is the final non-null char a colon?
   682 00001DC1 750A                <1>     jne .okExit   ;Return if not
   683 00001DC3 31C0                <1>     xor eax, eax
   684 00001DC5 8A0558E2FFFF        <1>     mov al, byte [pathSep]  ;IF it is, insert a pathsep
   685 00001DCB 66AB                <1>     stosw   ;Store the terminating 0 after the pathsep
   686                              <1> .okExit:
   687 00001DCD F8                  <1>     clc
   688                              <1>     return
    19                              <2> %%_ret:
    20 00001DCE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   689                              <1> printDecimalWord:
   690                              <1> ;Takes qword in rax and print it's decimal representation
   691                              <1> ;Takes the qword in eax and prints its decimal representation
   692 00001DCF 31C9                <1>     xor ecx, ecx
   693 00001DD1 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   694 00001DD3 85C0                <1>     test eax, eax
   695 00001DD5 750C                <1>     jnz .notZero
   696 00001DD7 B930000000          <1>     mov ecx, "0"
   697 00001DDC BD01000000          <1>     mov ebp, 1  ;Print one digit
   698 00001DE1 EB3E                <1>     jmp short .dpfb2
   699                              <1> .notZero:
   700 00001DE3 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   701 00001DE5 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   702                              <1> .dpfb0:
   703 00001DEA FFC5                <1>     inc ebp
   704 00001DEC 81FD08000000        <1>     cmp ebp, 8
   705 00001DF2 7206                <1>     jb .dpfb00
   706 00001DF4 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   707 00001DF8 EB04                <1>     jmp short .dpfb01
   708                              <1> .dpfb00:
   709 00001DFA 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   710                              <1> .dpfb01:
   711 00001DFE 31D2                <1>     xor edx, edx
   712 00001E00 48F7F6              <1>     div rsi
   713 00001E03 80C230              <1>     add dl, '0'
   714 00001E06 80FA39              <1>     cmp dl, '9'
   715 00001E09 7603                <1>     jbe .dpfb1
   716 00001E0B 80C207              <1>     add dl, 'A'-'0'-10
   717                              <1> .dpfb1:
   718 00001E0E 81FD08000000        <1>     cmp ebp, 8
   719 00001E14 7204                <1>     jb .dpfb10
   720 00001E16 88D3                <1>     mov bl, dl ;Add the bottom bits
   721 00001E18 EB02                <1>     jmp short .dpfb11
   722                              <1> .dpfb10:
   723 00001E1A 88D1                <1>     mov cl, dl    ;Save remainder byte
   724                              <1> .dpfb11:
   725 00001E1C 4885C0              <1>     test rax, rax
   726 00001E1F 75C9                <1>     jnz .dpfb0
   727                              <1> .dpfb2:
   728 00001E21 81FD08000000        <1>     cmp ebp, 8
   729 00001E27 7208                <1>     jb .dpfb20
   730 00001E29 88DA                <1>     mov dl, bl
   731 00001E2B 48C1EB08            <1>     shr rbx, 8
   732 00001E2F EB06                <1>     jmp short .dpfb21
   733                              <1> .dpfb20:
   734 00001E31 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   735 00001E33 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   736                              <1> .dpfb21:
   737 00001E37 B402                <1>     mov ah, 02h
   738 00001E39 CD41                <1>     int 41h
   739 00001E3B FFCD                <1>     dec ebp
   740 00001E3D 75E2                <1>     jnz .dpfb2
   741                              <1>     return
    19                              <2> %%_ret:
    20 00001E3F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   742                              <1> 
   743                              <1> getDecimalWord:
   744                              <1> ;Works on MAX A dword in eax
   745                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   746 00001E40 31C9                <1>     xor ecx, ecx
   747 00001E42 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   748 00001E44 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   749                              <1> .dpfb0:
   750 00001E49 FFC5                <1>     inc ebp
   751 00001E4B 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   752 00001E4F 31D2                <1>     xor edx, edx
   753 00001E51 48F7F3              <1>     div rbx
   754 00001E54 80C230              <1>     add dl, '0'
   755 00001E57 80FA39              <1>     cmp dl, '9'
   756 00001E5A 7603                <1>     jbe .dpfb1
   757 00001E5C 80C207              <1>     add dl, 'A'-'0'-10
   758                              <1> .dpfb1:
   759 00001E5F 88D1                <1>     mov cl, dl    ;Save remainder byte
   760 00001E61 4885C0              <1>     test rax, rax
   761 00001E64 75E3                <1>     jnz .dpfb0
   762                              <1>     return
    19                              <2> %%_ret:
    20 00001E66 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   763                              <1> 
   764                              <1> freezePC:
   765 00001E67 488D15DDEAFFFF      <1>     lea rdx, memBad1
   766 00001E6E B409                <1>     mov ah, 09h
   767 00001E70 CD41                <1>     int 41h
   768                              <1> .altEP:
   769 00001E72 488D15FBEAFFFF      <1>     lea rdx, memBad3
   770 00001E79 B409                <1>     mov ah, 09h
   771 00001E7B CD41                <1>     int 41h
   772                              <1> .lp:
   773 00001E7D F390                <1>     pause
   774 00001E7F F4                  <1>     hlt
   775 00001E80 EBFB                <1>     jmp short .lp
    17                                  %include "./Source/Utils/COMMAND/Source/int44h.asm"
    18                              <1> critErrorHandler:   ;Int 44h
    19                              <1> ;User Stack in usage here, must be swapped to before this is called
    20                              <1> ;Entered with:  
    21                              <1> ;               AH = Critical Error Bitfield
    22                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    23                              <1> ;               Bit 6 - Reserved
    24                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    25                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    26                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    27                              <1> ;               Bits [2-1] = Affected Disk Error
    28                              <1> ;                     0 0   DOS area
    29                              <1> ;                     0 1   FAT area
    30                              <1> ;                     1 0   Directory area
    31                              <1> ;                     1 1   Data area
    32                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    33                              <1> ;               AL  = Failing drive number if AH[7] = 0
    34                              <1> ;               DIL = Error code for errorMsg
    35                              <1> ;               RSI = EA of Device Header for which device the error occured
    36                              <1> ;Return:
    37                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    38                              <1> ;                  = 1 - Retry the Operation    (Retry)
    39                              <1> ;                  = 2 - Terminate the Program  (Abort)
    40                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    41 00001E82 53                  <1>     push rbx
    42 00001E83 51                  <1>     push rcx
    43 00001E84 52                  <1>     push rdx
    44 00001E85 57                  <1>     push rdi
    45 00001E86 56                  <1>     push rsi
    46 00001E87 FC                  <1>     cld         ;Make String ops go forward
    47                              <1> 
    48 00001E88 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    49 00001E8B 488D156EE5FFFF      <1>     lea rdx, crlf
    50 00001E92 B409                <1>     mov ah, 09h ;Print String
    51 00001E94 CD41                <1>     int 41h
    52                              <1> 
    53 00001E96 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    54 00001E9C B90C000000          <1>     mov ecx, 0Ch
    55 00001EA1 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    56 00001EA3 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    57 00001EA6 480FB7FF            <1>     movzx rdi, di
    58 00001EAA 4889FA              <1>     mov rdx, rdi    ;Copy error code
    59 00001EAD 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    60 00001EB1 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    61 00001EB4 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    62 00001EB7 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    63 00001EBE 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    64 00001EC2 B409                <1>     mov ah, 09h ;Print String
    65 00001EC4 CD41                <1>     int 41h     ;Call DOS to print first part of message
    66                              <1> 
    67 00001EC6 488D1505020000      <1>     lea rdx, qword [.readmsg]
    68 00001ECD 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    69 00001ED4 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    70 00001ED7 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    71 00001EDB B409                <1>     mov ah, 09h ;Print String
    72 00001EDD CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    73                              <1> 
    74 00001EDF F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    75 00001EE2 0F85DF000000        <1>     jnz .charError
    76                              <1> ;Disk error continues here
    77 00001EE8 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    78 00001EEF B409                <1>     mov ah, 09h
    79 00001EF1 CD41                <1>     int 41h
    80 00001EF3 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    81 00001EF5 80C241              <1>     add dl, "A" ;Add ASCII code
    82 00001EF8 B402                <1>     mov ah, 02h ;Print char in dl
    83 00001EFA CD41                <1>     int 41h
    84                              <1> .userInput:
    85 00001EFC 488D15FDE4FFFF      <1>     lea rdx, crlf  ;Print new line
    86 00001F03 B409                <1>     mov ah, 09h
    87 00001F05 CD41                <1>     int 41h
    88                              <1> ;Abort, Retry, Ignore, Fail is word order
    89                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    90                              <1> .userAbort:
    91                              <1> ;Abort is always an option
    92 00001F07 488D15E2010000      <1>     lea rdx, qword [.abortmsg]
    93 00001F0E B409                <1>     mov ah, 09h
    94 00001F10 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
    95                              <1> .userRetry:
    96 00001F12 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    97 00001F15 7416                <1>     jz .userIgnore    ;If clear, dont print message
    98 00001F17 488D15EA010000      <1>     lea rdx, qword [.betweenMsg]
    99 00001F1E B409                <1>     mov ah, 09h
   100 00001F20 CD41                <1>     int 41h
   101 00001F22 488D15D4010000      <1>     lea rdx, qword [.retrymsg]
   102 00001F29 B409                <1>     mov ah, 09h
   103 00001F2B CD41                <1>     int 41h
   104                              <1> .userIgnore:
   105 00001F2D F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   106 00001F30 7416                <1>     jz .userFail
   107 00001F32 488D15CF010000      <1>     lea rdx, qword [.betweenMsg]
   108 00001F39 B409                <1>     mov ah, 09h
   109 00001F3B CD41                <1>     int 41h
   110 00001F3D 488D15B2010000      <1>     lea rdx, qword [.ignoremsg]
   111 00001F44 B409                <1>     mov ah, 09h
   112 00001F46 CD41                <1>     int 41h
   113                              <1> .userFail:
   114 00001F48 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   115 00001F4B 7416                <1>     jz .userMsgEnd
   116 00001F4D 488D15B4010000      <1>     lea rdx, qword [.betweenMsg]
   117 00001F54 B409                <1>     mov ah, 09h
   118 00001F56 CD41                <1>     int 41h
   119 00001F58 488D15A4010000      <1>     lea rdx, qword [.failmsg]
   120 00001F5F B409                <1>     mov ah, 09h
   121 00001F61 CD41                <1>     int 41h
   122                              <1> .userMsgEnd:
   123 00001F63 488D15A1010000      <1>     lea rdx, qword [.endMsg]
   124 00001F6A B409                <1>     mov ah, 09h
   125 00001F6C CD41                <1>     int 41h
   126                              <1> ;Get user input now 
   127 00001F6E 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   128 00001F70 488D3D97010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   129 00001F77 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   130 00001F79 CD41                <1>     int 41h ;Get char in al
   131 00001F7B 3C61                <1>     cmp al, "a" ;Chack if lowercase
   132 00001F7D 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   133 00001F7F 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   134                              <1> .uip1:
   135 00001F81 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   136 00001F82 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   137 00001F84 FFC1                <1>     inc ecx
   138 00001F86 81F904000000        <1>     cmp ecx, 4
   139 00001F8C 75F3                <1>     jne .uip1
   140 00001F8E E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   141                              <1> .validInput:
   142 00001F93 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   143                              <1> ;Now check if the input is permitted
   144 00001F95 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   145 00001F97 7427                <1>     je .cehExit
   146 00001F99 84C0                <1>     test al, al ;Check if 0 => Ignore
   147 00001F9B 740F                <1>     je .viIgnore
   148 00001F9D 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   149 00001F9F 7416                <1>     je .viRetry
   150                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   151 00001FA1 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   152 00001FA4 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   153 00001FAA EB14                <1>     jmp short .cehExit
   154                              <1> .viIgnore:
   155 00001FAC F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   156 00001FAF 0F8447FFFFFF        <1>     jz .userInput
   157 00001FB5 EB09                <1>     jmp short .cehExit
   158                              <1> .viRetry:
   159 00001FB7 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   160 00001FBA 0F843CFFFFFF        <1>     jz .userInput
   161                              <1> .cehExit:
   162 00001FC0 5E                  <1>     pop rsi
   163 00001FC1 5F                  <1>     pop rdi
   164 00001FC2 5A                  <1>     pop rdx
   165 00001FC3 59                  <1>     pop rcx
   166 00001FC4 5B                  <1>     pop rbx
   167 00001FC5 48CF                <1>     iretq
   168                              <1> .charError:
   169 00001FC7 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   170 00001FCC 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   171                              <1> .ce1:
   172 00001FD3 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   173 00001FD4 88C2                <1>     mov dl, al  ;Move char into dl
   174 00001FD6 B402                <1>     mov ah, 02h
   175 00001FD8 CD41                <1>     int 41h ;Print char
   176 00001FDA E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   177 00001FDC E91BFFFFFF          <1>     jmp .userInput
   178                              <1> 
   179                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   180 00001FE1 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   180 00001FEA 746563742024202020  <1>
   181 00001FF3 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   181 00001FFC 6E6974202420202020  <1>
   182 00002005 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   182 0000200E 202420202020202020  <1>
   183 00002017 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   183 00002020 6F6D6D616E64202420  <1>
   184 00002029 446174612024202020- <1>             db "Data $            "       ;Error 4
   184 00002032 202020202020202020  <1>
   185 0000203B 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   185 00002044 737420242020202020  <1>
   186 0000204D 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   186 00002056 202020202020202020  <1>
   187 0000205F 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   187 00002068 656469612024202020  <1>
   188 00002071 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   188 0000207A 7420466F756E642024  <1>
   189 00002083 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   189 0000208C 706572202420202020  <1>
   190 00002095 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   190 0000209E 6C7420242020202020  <1>
   191 000020A7 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   191 000020B0 742024202020202020  <1>
   192 000020B9 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   192 000020C2 61696C757265202420  <1>
   193                              <1> 
   194 000020CB 64726976652024      <1> .drive      db "drive $"
   195 000020D2 6572726F7220726561- <1> .readmsg    db "error reading $"
   195 000020DB 64696E672024        <1>
   196 000020E1 6572726F7220777269- <1> .writemsg   db "error writing $"
   196 000020EA 74696E672024        <1>
   197 000020F0 41626F727424        <1> .abortmsg   db "Abort$" 
   198 000020F6 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   199 000020FD 526574727924        <1> .retrymsg   db "Retry$"
   200 00002103 4661696C24          <1> .failmsg    db "Fail$"
   201 00002108 2C2024              <1> .betweenMsg db ", $"
   202 0000210B 3F2024              <1> .endMsg     db "? $"
   203 0000210E 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   204                              <1> 
   205                              <1> int43h:
   206 00002112 F9                  <1>     stc     ;Set CF to kill the task
   207 00002113 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    18                                  %include "./Source/Utils/COMMAND/Data/cmdEnv.asm"
    19                              <1>     
    20                              <1> masterEnv:  ;Yeet this is this is a child command processor
    21 00002116 5F3A434F4D4D414E44- <1>     db "_:COMMAND.COM",0
    21 0000211F 2E434F4D00          <1>
    22 00002124 504154483D0000      <1>     db "PATH=",0,0
    23 0000212B 202020202020202020- <1>     db ($ - masterEnv) dup (" ")    ;Pad the environment with spaces
    23 00002134 202020202020202020- <1>
    23 0000213D 202020              <1>
    24                              <1> endOfAlloc: ;Symbol to find the start of where I can yeet 
    19                                  %include "./Source/Utils/COMMAND/Source/cmdLdr.asm"
    20                              <1> cmdLdr:
    21                              <1> ;First check if the version is ok. If not, return.
    22 00002140 B430                <1>     mov ah, 30h
    23 00002142 CD41                <1>     int 41h
    24 00002144 3C01                <1>     cmp al, 01h ;Version 1
    25 00002146 760D                <1>     jbe .okVersion
    26 00002148 488D1590010000      <1>     lea rdx, badVerStr
    27 0000214F B409                <1>     mov ah, 09h
    28 00002151 CD41                <1>     int 41h
    29 00002153 CD40                <1>     int 40h ;Exit to caller or DOS to print bad command interpreter line
    30                              <1> .okVersion:
    31                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    32 00002155 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    33 00002159 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    34 0000215D 488905ABDEFFFF      <1>     mov qword [realParent], rax ;Preserve the real parent address
    35                              <1> ;Setup Int 43h and Int 44h
    36 00002164 488D1517FDFFFF      <1>     lea rdx, critErrorHandler
    37 0000216B 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    38 0000216F B844250000          <1>     mov eax, 2544h
    39 00002174 CD41                <1>     int 41h
    40 00002176 488D1595FFFFFF      <1>     lea rdx, int43h
    41 0000217D 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    42 00002181 B843250000          <1>     mov eax, 2543h
    43 00002186 CD41                <1>     int 41h
    44 00002188 488D153EE8FFFF      <1>     lea rdx, applicationReturn
    45 0000218F 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    46 00002193 B842250000          <1>     mov eax, 2542h
    47 00002198 CD41                <1>     int 41h
    48                              <1> ;Get a pointer to DOS Sysvars
    49 0000219A B452                <1>     mov ah, 52h ;Get sysvars
    50 0000219C CD41                <1>     int 41h
    51 0000219E 48891D72DEFFFF      <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    52                              <1> ;Call for simple internationalisation data
    53 000021A5 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    54 000021AA CD41                <1>     int 41h
    55 000021AC 3CFF                <1>     cmp al, -1
    56 000021AE 7412                <1>     je .skipSwitch
    57 000021B0 88156EDEFFFF        <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    58 000021B6 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    59 000021B9 7507                <1>     jne .skipSwitch
    60 000021BB C60561DEFFFF2F      <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    61                              <1> .skipSwitch:
    62 000021C2 B800380000          <1>     mov eax, 3800h  ;Get current country data
    63 000021C7 488D1557DEFFFF      <1>     lea rdx, ctryData
    64 000021CE CD41                <1>     int 41h ;Write the data to the internal country table
    65                              <1> ;Now determine if this is the master copy of COMMAND.COM
    66                              <1> ;Check if Int 4Eh has the same address as Int 4Dh. If so, we are master.
    67 000021D0 B84E350000          <1>     mov eax, 354Eh  ;Get int 4Eh address
    68 000021D5 CD41                <1>     int 41h
    69 000021D7 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    70 000021DA B84D350000          <1>     mov eax, 354Dh  ;Get int 4Dh address
    71 000021DF CD41                <1>     int 41h
    72 000021E1 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    73 000021E4 7555                <1>     jne .skipMaster
    74                              <1> ;Ok so we are master command.com
    75                              <1> ;Now make myself the real parent
    76 000021E6 4C890522DEFFFF      <1>     mov qword [realParent], r8
    77                              <1> ;Set master environment as mine
    78 000021ED 488D0522FFFFFF      <1>     lea rax, masterEnv
    79 000021F4 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    80                              <1> ;Set current Drive in COMSPEC
    81 000021F8 B019                <1>     mov al, 19h ;Get current Drive
    82 000021FA CD41                <1>     int 41h
    83 000021FC 0441                <1>     add al, "A"
    84 000021FE 880512FFFFFF        <1>     mov byte [masterEnv], al
    85                              <1> ;Set Int 4Eh up
    86 00002204 488D155DECFFFF      <1>     lea rdx, int4Eh
    87 0000220B B84E250000          <1>     mov eax, 254Eh ;Set this as Int 4Eh
    88 00002210 CD41                <1>     int 41h
    89                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    90                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    91 00002212 488D15E7E1FFFF      <1>     lea rdx, crlf
    92 00002219 B409                <1>     mov ah, 09h
    93 0000221B CD41                <1>     int 41h
    94 0000221D E8C8F2FFFF          <1>     call time
    95 00002222 E8FDF1FFFF          <1>     call date
    96 00002227 488D15D2E1FFFF      <1>     lea rdx, crlf
    97 0000222E B409                <1>     mov ah, 09h
    98 00002230 CD41                <1>     int 41h
    99 00002232 488D1D07FFFFFF      <1>     lea rbx, endOfAlloc ;Save the Master Environment
   100 00002239 EB07                <1>     jmp short .printInit
   101                              <1> .skipMaster:
   102 0000223B 488D1DD4FEFFFF      <1>     lea rbx, masterEnv  ;This is the base address to jettison
   103                              <1> .printInit:
   104                              <1> ;Finish by printing INIT string.
   105 00002242 53                  <1>     push rbx
   106 00002243 488D1521000000      <1>     lea rdx, initString
   107 0000224A B409                <1>     mov ah, 09h
   108 0000224C CD41                <1>     int 41h ;Print init string
   109 0000224E E826F5FFFF          <1>     call version.printVersionNumber
   110 00002253 488D1547000000      <1>     lea rdx, initString2
   111 0000225A B409                <1>     mov ah, 09h
   112 0000225C CD41                <1>     int 41h ;Print init string
   113 0000225E 5B                  <1>     pop rbx
   114 0000225F 4889259FDDFFFF      <1>     mov qword [stackBottom], rsp    ;Use this to save where to reset rsp to
   115 00002266 E94EE7FFFF          <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   116                              <1> ;Loader Data here
   117                              <1> initString: 
   118 0000226B 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   118 00002274 66696320436F6D7075- <1>
   118 0000227D 746572205265736561- <1>
   118 00002286 726368285229205343- <1>
   118 0000228F 502F444F5328522920- <1>
   118 00002298 56657273696F6E2024  <1>
   119                              <1> initString2:
   120 000022A1 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Reserach 2022.",CR,LF,"$"
   120 000022AA 202020284329436F70- <1>
   120 000022B3 797269676874205363- <1>
   120 000022BC 69656E746966696320- <1>
   120 000022C5 436F6D707574657220- <1>
   120 000022CE 526573657261636820- <1>
   120 000022D7 323032322E0D0A24    <1>
   121 000022DF 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   121 000022E8 20444F532076657273- <1>
   121 000022F1 696F6E0D0A24        <1>
   121          ------------------  <1>  info: assembly required 1+2+2 passes

