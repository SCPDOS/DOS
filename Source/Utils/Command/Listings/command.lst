     1                                  ;COMMAND.COM main file
     2                                  [map all ./Source/Utils/COMMAND/Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Source/Include/dosMacro.mac"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------------------------------
     9                              <1> ;Generic Macros file
    10                              <1> ;The following instruction extensions allow to conditionally return
    11                              <1> ;The idea was borrowed from the DOS Source Code
    12                              <1> ;
    13                              <1> ;-------------------------------------------------------------------------------
    14                              <1> 
    15                              <1> ;-------------------------------------------------------------------------------
    16                              <1> ;These macros are live and must not be touched
    17                              <1> ;-------------------------------------------------------------------------------
    18                              <1> %macro return 0
    19                              <1> %%_ret:
    20                              <1>     ret
    21                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    22                              <1> %endmacro
    23                              <1> 
    24                              <1> %macro cret 1
    25                              <1> %%_base:
    26                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    27                              <1>     %ifdef retOff
    28                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <1>     %ifdef currSegVBase
    30                              <1>     j%+1 short (retOff+currSegVBase)
    31                              <1>     %else
    32                              <1>     j%+1 short retOff
    33                              <1>     %endif  ;End ifdef currSegVBase
    34                              <1>     %else 
    35                              <1>     j%-1 short %%a
    36                              <1>     return
    37                              <1> %%a:
    38                              <1>     %endif  ;End the distance measurement if
    39                              <1>     %else   
    40                              <1>     j%-1 short %%a
    41                              <1>     return
    42                              <1> %%a:
    43                              <1>     %endif  ;End ifdef retoff
    44                              <1> %endmacro
    45                              <1> 
    46                              <1> %macro retz 0
    47                              <1> cret z
    48                              <1> %endmacro
    49                              <1> 
    50                              <1> %macro retnz 0
    51                              <1> cret nz
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> %macro rete 0
    55                              <1> cret e
    56                              <1> %endmacro
    57                              <1> 
    58                              <1> %macro retne 0
    59                              <1> cret ne
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> %macro retc 0
    63                              <1> cret c
    64                              <1> %endmacro
    65                              <1> 
    66                              <1> %macro retnc 0
    67                              <1> cret nc
    68                              <1> %endmacro
    69                              <1> 
    70                              <1> %macro retb 0
    71                              <1> cret b
    72                              <1> %endmacro
    73                              <1> 
    74                              <1> %macro retnb 0
    75                              <1> cret nb
    76                              <1> %endmacro
    77                              <1> 
    78                              <1> %macro reta 0
    79                              <1> cret a
    80                              <1> %endmacro
    81                              <1> 
    82                              <1> %macro retna 0
    83                              <1> cret na
    84                              <1> %endmacro
    85                              <1> 
    86                              <1> %macro breakpoint 0
    87                              <1> xchg bx, bx
    88                              <1> %endmacro
     7                                  %include "./Source/Include/dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    27 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    32 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Only affects for SUBST drives, not JOIN
    69                              <1> ; Flags: Bit 15 set = Network drive
    70                              <1> ;        Bit 14 set = Physical drive
    71                              <1> ;        Bit 13 set = JOIN'ed drive
    72                              <1> ;        Bit 12 set = SUBST'ed drive
    73                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    74                              <1> endstruc
    75                              <1> ;CDS equates
    76                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    77                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    78                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    79                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    80                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    81                              <1> ;------------------------------------------------------------------------;
    82                              <1> ; The SFT is a way to allow applications to open file handles to files 
    83                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    84                              <1> ; under the first header, and then a second header will be linked to the 
    85                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    86                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    87                              <1> ; using the FCBS= command. Default FCBS=5.
    88                              <1> ;
    89                              <1> ; A file handle describes the file, and the location within the file that
    90                              <1> ; we are reading. The file handle can be manipulated without the file
    91                              <1> ; being in memory, thus allowing the user to access data without needing 
    92                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    93                              <1> ; accessing devices, by treating them as files with their drivers 
    94                              <1> ; responding and translating the manipulations of the file handle itself.
    95                              <1> ; Neither the driver nor the application should see or use the SFT for
    96                              <1> ; the handle, as it is subject to change (and will change when file 
    97                              <1> ; sharing provisions are included). The DOS will make requests to the 
    98                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    99                              <1> ; track of the information in the SFT entry for that handle. 
   100                              <1> ;
   101                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   102                              <1> ; can point to the same file. It all depends on what the applications 
   103                              <1> ; want to do with the File.
   104                              <1> ;
   105                              <1> ; !!!!IMPORTANT!!!!
   106                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   107                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   108                              <1> ;
   109                              <1> ;Each SFT may look like this:
   110                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   111                              <1> ;            |                |
   112                              <1> ;       wNumFiles*sft    wNumFiles*sft
   113                              <1> ;
   114                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   115                              <1> ; System FCBs.
   116                              <1> ;
   117                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   118                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   119                              <1> ;
   120                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   121                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   122                              <1> ;------------------------------------------------------------------------;
   123                              <1> struc sfth   ;System file table header
   124                              <1> ; This is the SFT header.
   125                              <1> ; This structure comes before the start of the first file in the array/table.
   126 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   127 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   128                              <1> endstruc
   129                              <1> 
   130                              <1> struc sft
   131                              <1> ;This is the file struc itself
   132 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   133 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   134 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   135 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   136 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   137 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   138 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   139 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   140 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   141 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   142 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   143 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   144 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   145 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   146 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   147 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   148 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   149 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   150 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   151                              <1> ;                           0 means no record
   152                              <1> endstruc
   153                              <1> ;Open Mode equates
   154                              <1> ;Access modes   Bits[2:0]
   155                              <1> ReadAccess      equ 0h
   156                              <1> WriteAccess     equ 1h
   157                              <1> RWAccess        equ 2h
   158                              <1> ;Bit 3 reserved 0
   159                              <1> ;Sharing modes  Bits[6:4]
   160                              <1> CompatShare     equ 0h
   161                              <1> denyRWShare     equ 10h
   162                              <1> denyWriteShare  equ 20h
   163                              <1> denyReadShare   equ 30h
   164                              <1> denyNoneShare   equ 40h
   165                              <1> netFCBShare     equ 70h
   166                              <1> noInherit       equ 80h
   167                              <1> ;Bits 8-12 reserved 0
   168                              <1> 
   169                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   170                              <1> ;Buffering on writes
   171                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   172                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   173                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   174                              <1> ;Attribute Byte
   175                              <1> readOnlyFile    equ 1h
   176                              <1> hiddenFile      equ 2h
   177                              <1> systemFile      equ 4h
   178                              <1> volumeLabel     equ 8h
   179                              <1> directoryFile   equ 10h ;Directory entry
   180                              <1> archiveFile     equ 20h
   181                              <1> ;Device Info equates
   182                              <1> ;For a block device, bits [5:0] contain the drive number
   183                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   184                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   185                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   186                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   187                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   188                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   189                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   190                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   191                              <1> devCharDev      equ 80h ;If set, it is a char device!
   192                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   193                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   194                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   195                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   196                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   197                              <1>  
   198                              <1> ;------------------------------------------------------------------------;
   199                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   200                              <1> ; to an internal buffer, and then copying it to the specified location
   201                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   202                              <1> ; another request for the same sector from the same device is made, so 
   203                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   204                              <1> ; size, selected according to the largest detected sector size during 
   205                              <1> ; the initial loadup.
   206                              <1> ;
   207                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   208                              <1> ;
   209                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   210                              <1> ;------------------------------------------------------------------------;
   211                              <1> 
   212                              <1> struc bufferHdr
   213 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   214 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   215 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   216 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   217 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   218 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   219 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   220 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   221 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   222                              <1>     .dataarea:             ;Points to the start of the data area
   223                              <1> endstruc
   224                              <1> ;Buffer Flag equates
   225                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   226                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   227                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   228                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   229                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   230                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   231                              <1> ;Note! A buffer is marked as referenced only when the application 
   232                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> ; Memory control block for each memory arena
   235                              <1> ;------------------------------------------------------------------------;
   236                              <1> struc mcb
   237 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   238 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   239 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   240 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbMarkCtn      equ "M"
   248                              <1> mcbMarkEnd      equ "Z"
   249                              <1> 
   250                              <1> memFirstFit     equ 0   ;First free block goes to application
   251                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   252                              <1> memLastFit      equ 2   ;Last free block goes to application
   253                              <1> 
   254                              <1> ;Owner = Para aligned address => Owning application PSP
   255                              <1> ;...To consider...
   256                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   257                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   258                              <1> ;------------------------------------------------------------------------;
   259                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   260                              <1> ; following order, thus allowing for return values to be placed in the 
   261                              <1> ; registers by accessing the caller register stack frame.
   262                              <1> ;------------------------------------------------------------------------;
   263                              <1> struc callerFrame
   264 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   265 00000008 ????????????????    <1>     .rbx    resq 1    
   266 00000010 ????????????????    <1>     .rcx    resq 1
   267 00000018 ????????????????    <1>     .rdx    resq 1
   268 00000020 ????????????????    <1>     .rsi    resq 1
   269 00000028 ????????????????    <1>     .rdi    resq 1
   270 00000030 ????????????????    <1>     .rbp    resq 1
   271 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   272 00000040 ????????????????    <1>     .r9     resq 1
   273                              <1> ;Pushed by Processor when invoked via Interrupt
   274 00000048 ????????????????    <1>     .rip    resq 1
   275 00000050 ????????????????    <1>     .cs     resq 1
   276 00000058 ????????????????    <1>     .flags  resq 1
   277                              <1> endstruc
   278                              <1> 
   279                              <1> struc dpl
   280                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   281                              <1> ; server calls
   282 00000000 ????????????????    <1>     .rax    resq 1
   283 00000008 ????????????????    <1>     .rbx    resq 1
   284 00000010 ????????????????    <1>     .rcx    resq 1
   285 00000018 ????????????????    <1>     .rdx    resq 1
   286 00000020 ????????????????    <1>     .rsi    resq 1
   287 00000028 ????????????????    <1>     .rdi    resq 1
   288 00000030 ????????????????    <1>     .r8     resq 1
   289 00000038 ????????????????    <1>     .r9     resq 1
   290 00000040 ????????????????    <1>     .align  resq 1
   291 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   292 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   293                              <1> endstruc
   294                              <1> 
   295                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   296 00000000 ????????????????    <1>     .oldRBP         resq 1  
   297 00000008 ??                  <1>     .newBuffers     resb 1  ;New buffers value
   298 00000009 ??                  <1>     .newSFTVal      resb 1
   299 0000000A ??                  <1>     .newFCBSVal     resb 1
   300 0000000B ??                  <1>     .newProtFCBSVal resb 1  ;Number of protected FCBS
   301 0000000C ??                  <1>     .newLastdrive   resb 1
   302 0000000D ??                  <1>     .newStacks      resb 1  ;Ignored for now
   303 0000000E ????                <1>     .newStackSize   resb 2  ;Ignored for now
   304 00000010 ????????            <1>     .newAllocSize   resd 1  ;Used to keep track of reallocation size
   305 00000014 ????????            <1>                     resd 1  ;Alignment byte
   306 00000018 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   307                              <1> endstruc
   308                              <1> 
   309                              <1> struc filename
   310                              <1> ;8.3 File name struct
   311 00000000 ????????????????    <1>     .fName  resb 8
   312 00000008 ??????              <1>     .fExt   resb 3
   313                              <1> endstruc
   314                              <1> 
   315                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   316 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   317 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   318 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   319 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   320 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   321 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   322 00000016 ????                <1>     .fileTime   resw 1  ;File time
   323 00000018 ????                <1>     .fileDate   resw 1  ;File date
   324 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   325 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   326                              <1> endstruc
   327                              <1> 
   328                              <1> struc psp
   329 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   330 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   331 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   332 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   333 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   334 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   335 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   336 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   337 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   338 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   339 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   340 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   341 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   342 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   343                              <1> ;Extra handle arrays are grouped into a linked list
   344                              <1> ;The below are in the same place as in DOS
   345 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   346 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   347                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   348 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   349 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   350                              <1> endstruc
   351                              <1> 
   352                              <1> struc clkStruc
   353 00000000 ????                <1>     .dateWord   resw 1
   354 00000002 ??                  <1>     .minutes    resb 1
   355 00000003 ??                  <1>     .hours      resb 1
   356 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   357 00000005 ??                  <1>     .seconds    resb 1
   358                              <1> endstruc
   359                              <1> 
   360                              <1> struc countryStruc
   361 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   362                              <1>                         ;0 = month day year hh:mm:ss
   363                              <1>                         ;1 = day month year hh:mm:ss
   364                              <1>                         ;2 = year month day hh:mm:ss
   365 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   366 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   367 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   368 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   369 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   370 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   371                              <1>                         ;0 = Symbol leads, without space
   372                              <1>                         ;1 = Symbol follows, without space
   373                              <1>                         ;2 = Symbol leads, one space
   374                              <1>                         ;3 = Symbol follows, one space
   375                              <1>                         ;4 = Symbol replace decimal separator
   376 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   377 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   378 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   379 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   380 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   381                              <1> endstruc
   382                              <1> 
   383                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   384                              <1> ;for a space of 64Gb
   385                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   386                              <1> dosLowBase  equ 600h    ;Low load address
   387                              <1> 
   388                              <1> ;Critical Error AH bitfield equates
   389                              <1> critRead    equ 0h
   390                              <1> critWrite   equ 1h
   391                              <1> critDOS     equ 0h
   392                              <1> critFAT     equ 2h
   393                              <1> critDir     equ 4h
   394                              <1> critData    equ 6h
   395                              <1> critFailOK  equ 8h
   396                              <1> critRetryOK equ 10h
   397                              <1> critIgnorOK equ 20h
   398                              <1> critCharDev equ 80h
   399                              <1> 
   400                              <1> critIgnore  equ 0
   401                              <1> critRetry   equ 1
   402                              <1> critAbort   equ 2
   403                              <1> critFail    equ 3
   404                              <1> 
   405                              <1> ;MISC ASCII control chars
   406                              <1> NUL equ 00h ;^@         | ASCII Null
   407                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   408                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   409                              <1> BEL equ 07h ;^G         | ASCII Bell
   410                              <1> BSP equ 08h ;^H         | ASCII Backspace
   411                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   412                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   413                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   414                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   415                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   416                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   417                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   418                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   419                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   420                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   421                              <1> SPC equ 20h ;Printable  | ASCII Space
   422                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   423                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   424                              <1> 
   425                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   426                              <1> ;Extended Ascii Codes
   427                              <1> eF1     equ 3Bh ;F1 second byte
   428                              <1> eF2     equ 3Ch ;F2 second byte
   429                              <1> eF3     equ 3Dh ;F3 second byte
   430                              <1> eF4     equ 3Eh ;F4 second byte
   431                              <1> eF5     equ 3Fh ;F5 second byte
   432                              <1> eF6     equ 40h ;F6 second byte
   433                              <1> eF7     equ 41h ;F7 second byte
   434                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   435                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   436                              <1> eIns    equ 52h ;Insert second byte
   437                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   438                              <1> 
   439                              <1> ;Default Configuration for the system
   440                              <1> 
   441                              <1> buffersDefault  equ 30
   442                              <1> filesDefault    equ 20
   443                              <1> fcbsDefault     equ 4
   444                              <1> safeFcbsDeflt   equ 0
   445                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Source/Include/fcbStruc.inc"
     9                              <1> ;FCB related structures
    10                              <1> 
    11                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
    12                              <1> ;This field also used for random read/write ops to find the right record
    13                              <1> struc fcb
    14 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    15 00000001 ????????????????    <1>     .filename   resb 8
    16 00000009 ??????              <1>     .fileext    resb 3
    17 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    18                              <1> ;One block consists of 128 records, of size denoted in the below
    19 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    20 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    21 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    22 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    23                              <1>     ;----------------------------------------
    24                              <1>     ;Internal Records
    25 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    26 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    27 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    28                              <1>     ;----------------------------------------
    29 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    30 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    31                              <1> endstruc
    32                              <1> 
    33                              <1> struc exFcb
    34 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    35 00000001 ??????????          <1>     .reserved   resb 5  
    36 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    37 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    38 00000008 ????????????????    <1>     .filename   resb 8
    39 00000010 ??????              <1>     .fileext    resb 3
    40 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    41                              <1> ;One block consists of 128 records, of size denoted in the below
    42 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    43 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    44 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    45 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    46                              <1>     ;----------------------------------------
    47                              <1>     ;Internal Records
    48 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    49 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    50 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    51                              <1>     ;----------------------------------------
    52 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    53 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    54                              <1> endstruc
    55                              <1> 
    56                              <1> struc renameFcb
    57                              <1> ;Used for accessing the names and drive letter for renaming
    58                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    59 00000000 ??                  <1>     .driveNum   resb 1
    60 00000001 ????????????????    <1>     .filename   resb 8
    61 00000009 ??????              <1>     .fileext    resb 3
    62 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    63 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    64 00000011 ????????????????    <1>     .newName    resb 8
    65 00000019 ??????              <1>     .newExt     resb 3
    66 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    67                              <1> endstruc
    68                              <1> 
    69                              <1> ;FCBmode equates:
    70                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    71                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    72                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    73                              <1> fcbShareOn  equ 80h
    74                              <1> fcbCharDev  equ 40h
    75                              <1> fcbLocal    equ 40h
    76                              <1> 
    77                              <1> ;Structures of the special 6 bytes
    78                              <1> 
    79                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    80                              <1> struc noShare   
    81 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    82 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    83 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    84 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    85                              <1> endstruc
    86                              <1> 
    87                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    88                              <1> struc shareLocal    
    89 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    90 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    91 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    92                              <1> endstruc
    93                              <1> 
    94                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    95                              <1> struc shareNet
    96                              <1> ;All three fields too small for FAT32
    97 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    98 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    99 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   100                              <1> endstruc
     9                                  %include "./Source/Include/dosError.inc"
    10                              <1> ;DOS Error codes
    11                              <1> 
    12                              <1> ;Extended Error Codes
    13                              <1> errInvFnc   equ 1   ;Invalid function number
    14                              <1> errFnf      equ 2   ;File not found
    15                              <1> errPnf      equ 3   ;Path not found
    16                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    17                              <1> errAccDen   equ 5   ;Access denied (to resource)
    18                              <1> errBadHdl   equ 6   ;Invalid handle
    19                              <1> errMCBbad   equ 7   ;MCB's destroyed
    20                              <1> errNoMem    equ 8   ;Insufficient memory
    21                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    22                              <1> errBadEnv   equ 10  ;Invalid environment
    23                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    24                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    25                              <1> errInvDat   equ 13  ;Invalid data
    26                              <1> ;           equ 14  ;Reserved
    27                              <1> errBadDrv   equ 15  ;Invalid drive specified
    28                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    29                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    30                              <1> errNoFil    equ 18  ;No more files, no match found
    31                              <1> ;The following are Driver error codes + 19
    32                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    33                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    34                              <1> errUnkUnt   equ 20  ;Unknown Unit
    35                              <1> errDrvNR    equ 21  ;Drive not ready
    36                              <1> errUnkCmd   equ 22  ;Unknown Command
    37                              <1> errCRCerr   equ 23  ;Data (CRC) error
    38                              <1> errBadRLn   equ 24  ;Bad request structure length
    39                              <1> errSekErr   equ 25  ;Seek error
    40                              <1> errUnkMed   equ 26  ;Unknown media type
    41                              <1> errSecNF    equ 27  ;Sector not Found
    42                              <1> errNoPap    equ 28  ;Printer out of paper
    43                              <1> errWF       equ 29  ;Write fault
    44                              <1> errRF       equ 30  ;Read fault
    45                              <1> errGF       equ 31  ;General fault
    46                              <1> ;----------------------------------------------
    47                              <1> ;The following two go inbetween the Disk errors
    48                              <1> errShrVio   equ 32  ;Sharing violations
    49                              <1> errLokVio   equ 33  ;File Lock violation
    50                              <1> ;----------------------------------------------
    51                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    52                              <1> errNoFCB    equ 35  ;FCB unavailable
    53                              <1> errShrFul   equ 36  ;Sharing buffer full
    54                              <1> 
    55                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    56                              <1> 
    57                              <1> errFilExist equ 80  ;File already exists
    58                              <1> errDirExist equ 82  ;Directory already exists
    59                              <1> errFI44     equ 83  ;Fail on INT 44h
    60                              <1> errRedir    equ 84  ;Too many levels of redirection
    61                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    62                              <1> errBadPass  equ 86  ;Bad password
    63                              <1> errBadParam equ 87  ;Bad parameter passed to request
    64                              <1> errNetWrite equ 88  ;Network Write Fault
    65                              <1> ;-----------------------------------------------------------------------------
    66                              <1> ;Error Loci
    67                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    68                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    69                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    70                              <1> eLocChr     equ 4   ;Serial/Character Device error
    71                              <1> eLocMem     equ 5   ;Related to RAM
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error Actions
    74                              <1> eActRet     equ 1   ;Retry
    75                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    76                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    77                              <1> eActAbt     equ 4   ;Abort with cleanup
    78                              <1> eActKil     equ 5   ;Abort without cleanup
    79                              <1> eActIgn     equ 6   ;Ignore error
    80                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    81                              <1> ;-----------------------------------------------------------------------------
    82                              <1> ;Error classes
    83                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    84                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    85                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    86                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    87                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    88                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    89                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    90                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    91                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    92                              <1> eClsLocked  equ 10  ;Resource Locked
    93                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    94                              <1> eClsClash   equ 12  ;Resource already exists!
    95                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Source/Utils/COMMAND/Data/cmdEqu.asm"
    11                              <1> ;Data equates and struct declarations
    12                              <1> 
    13                              <1> cmdBufferL  equ 128 ;Length of a command line buffer
    14                              <1> driveSpecL  equ 2   ;Space for X:
    15                              <1> dirPathL    equ 64  ;Length of a directory path
    16                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
    17                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
    18                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
    19                              <1> fullDirPathL equ driveSpecL + dirPathL
    20                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    21                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    22                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    23                              <1> 
    24                              <1> ;Use PSP FCB's for switch buffers
    25                              <1> fcb1        equ psp.fcb1
    26                              <1> fcb2        equ psp.fcb2
    27                              <1> ;Use the dta as the built command line buffer.
    28                              <1> cmdLineCnt  equ psp.parmList
    29                              <1> cmdLine     equ psp.progTail
    30                              <1> 
    31                              <1> 
    32                              <1> ;Struct Declarations
    33                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    34 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    35 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    36 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    37 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    38 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    39                              <1> endstruc
    40                              <1> 
    41                              <1> struc execProg  ;For use with EXEC-ing a child task
    42 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    43 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    44 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    45 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    46                              <1> endstruc
    47                              <1> 
    48                              <1> ;Directory attribute equates
    49                              <1>     dirReadOnly     equ 01h
    50                              <1>     dirHidden       equ 02h
    51                              <1>     dirSystem       equ 04h
    52                              <1>     dirVolumeID     equ 08h
    53                              <1>     dirDirectory    equ 10h
    54                              <1>     dirArchive      equ 20h
    55                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    56                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    57                              <1>     ;If any of the three bits are set, then ALL three bits are set
    58                              <1>     ; in addition to whatever the user passed to search for.
    59                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    60                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Source/Utils/COMMAND/Data/cmdData.asm"
    13                              <1> ;Static Data Area for COMMAND.COM    
    14                              <1> startLbl:   ;Start symbol, this is the entry point
    15 00000000 E973260000          <1>     jmp cmdLdr
    16 00000005 0000000000000000    <1> stackBottom dq 0    ;Pointer to the top of the stack as allocated by DOS
    17 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
    18 0000000F FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
    19 00000017 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
    20 0000001F 1400                <1> numHdls     dw 20   ;Get number of handles permitted, hardcoded in this version
    21 00000021 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    22 00000023 5C                  <1> pathSep     db "\"  ;Default path sep
    23 00000024 2F                  <1> switchChar  db "/"  ;Default switch char
    24 00000025 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    25 00000026 0000000000000000    <1> parentInt42 dq 0    ;Stores the parent values to restore upon exiting if it can
    26                              <1> ;Static strings, not used in command line parsing
    27 0000002E 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    27 00000037 000000000000000000- <1>
    27 00000040 000000000000000000- <1>
    27 00000049 000000000000000000- <1>
    27 00000052 0000                <1>
    28 00000054 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    28 0000005D 000000000000000000- <1>
    28 00000066 000000000000000000- <1>
    28 0000006F 000000000000000000- <1>
    28 00000078 000000000000000000- <1>
    28 00000081 000000000000000000- <1>
    28 0000008A 000000000000000000- <1>
    28 00000093 00000000            <1>
    29                              <1> 
    30                              <1> 
    31                              <1> cmdLineStatePtr:
    32 00000097 00                  <1> cmdStartOff db 0    ;Offset to the first char for this command (may be a space)
    33 00000098 00                  <1> cmdEndOff   db 0    ;Offset to the terminating char for this command (0Dh or |)
    34 00000099 00                  <1> pipeFlag    db 0    ;If set, we are piping across a command
    35 0000009A 0000                <1> pipeHndl    dw 0    ;If pipeFlag set, this var has the handle to the pipe file
    36 0000009C 000000000000000000- <1> pipeName    db 13 dup 0, ;Space for name of the pipe file we created.
    36 000000A5 00000000            <1>
    37                              <1> 
    38                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    39                              <1> ;These variables are valid for a SINGLE command in a command line
    40 000000A9 0000                <1> cmdDrvSpec  dw 0    ;Read the first word in to see if the pathspec has drivespec
    41 000000AB 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    42 000000AC 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    43                              <1> ;                    If 2, we are redirecting output to a file, by appending
    44                              <1> ;FLG and SWCH are read as a word when checking if argX is a switch
    45 000000AD 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    46 000000AE 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    47 000000AF 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    48                              <1> 
    49 000000B0 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    50 000000B1 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    51 000000B2 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    52                              <1> 
    53                              <1> cmdStateL equ $ - cmdStatePtr
    54                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    55                              <1> 
    56                              <1> ;Structs and strings
    57                              <1> 
    58 000000B3 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    58 000000BC 00000000000000      <1>
    59 000000C3 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    59 000000CC 000000000000000000- <1>
    59 000000D5 000000000000000000- <1>
    59 000000DE 000000000000000000- <1>
    59 000000E7 00000000000000      <1>
    60                              <1> 
    61 000000EE 000000000000000000- <1> launchBlock db execProg_size dup (0)
    61 000000F7 000000000000000000- <1>
    61 00000100 000000000000000000- <1>
    61 00000109 0000000000          <1>
    62                              <1> 
    63 0000010E 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    63 00000117 000000000000000000- <1>
    63 00000120 000000000000000000- <1>
    63 00000129 000000000000000000- <1>
    63 00000132 000000000000000000- <1>
    63 0000013B 000000000000000000- <1>
    63 00000144 000000000000000000- <1>
    63 0000014D 000000000000000000- <1>
    63 00000156 000000000000000000- <1>
    63 0000015F 000000000000000000- <1>
    63 00000168 000000000000000000- <1>
    63 00000171 000000000000000000- <1>
    63 0000017A 000000000000000000- <1>
    63 00000183 000000000000000000- <1>
    63 0000018C 0000                <1>
    64 0000018E 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    64 00000197 000000000000000000- <1>
    64 000001A0 000000000000000000- <1>
    64 000001A9 000000000000000000- <1>
    64 000001B2 000000000000000000- <1>
    64 000001BB 000000000000000000- <1>
    64 000001C4 000000000000000000- <1>
    64 000001CD 000000000000000000- <1>
    64 000001D6 000000000000000000- <1>
    64 000001DF 000000000000000000- <1>
    64 000001E8 000000000000000000- <1>
    64 000001F1 000000000000000000- <1>
    64 000001FA 000000000000000000- <1>
    64 00000203 000000000000000000- <1>
    64 0000020C 0000                <1>
    65 0000020E 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)  ;Space for full path to a external command
    65 00000217 000000000000000000- <1>
    65 00000220 000000000000000000- <1>
    65 00000229 000000000000000000- <1>
    65 00000232 000000000000000000- <1>
    65 0000023B 000000000000000000- <1>
    65 00000244 000000000000000000- <1>
    65 0000024D 000000000000000000- <1>
    65 00000256 00000000000000      <1>
    66                              <1> 
    67 0000025D 000000000000000000- <1> fcbCmdSpec  db fcbNameL dup (0) ;Used to make a FCB style name for the file
    67 00000266 0000                <1>
    68 00000268 000000000000000000- <1> cmdSpec     db fileNameZL dup (0)   ;ASCIIZ command spec for the command name
    68 00000271 00000000            <1>
    69 00000275 000000000000000000- <1> cmdName     db cmdNameL dup (0) ;Command name string prefixed by length of word
    69 0000027E 0000000000          <1>
    70                              <1> 
    71 00000283 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    71 0000028C 000000000000000000- <1>
    71 00000295 000000000000000000- <1>
    71 0000029E 000000000000000000- <1>
    71 000002A7 000000000000000000- <1>
    71 000002B0 000000000000000000- <1>
    71 000002B9 000000000000000000- <1>
    71 000002C2 000000000000000000- <1>
    71 000002CB 00000000000000      <1>
    72 000002D2 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    72 000002DB 000000000000000000- <1>
    72 000002E4 000000000000000000- <1>
    72 000002ED 000000000000000000- <1>
    72 000002F6 000000000000000000- <1>
    72 000002FF 000000000000000000- <1>
    72 00000308 000000000000000000- <1>
    72 00000311 000000000000000000- <1>
    72 0000031A 00000000000000      <1>
    73                              <1> 
    74 00000321 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Contains the pathspec for the search file
    74 0000032A 000000000000000000- <1>
    74 00000333 000000000000000000- <1>
    74 0000033C 000000000000000000- <1>
    74 00000345 000000000000000000- <1>
    74 0000034E 000000000000000000- <1>
    74 00000357 000000000000000000- <1>
    74 00000360 000000000000000000- <1>
    74 00000369 000000000000000000- <1>
    74 00000372 000000000000000000- <1>
    74 0000037B 000000000000000000- <1>
    74 00000384 000000000000000000- <1>
    74 0000038D 000000000000000000- <1>
    74 00000396 000000000000000000- <1>
    74 0000039F 0000                <1>
    75                              <1> ;The above is larger than is needed/supported by DOS to allow for 
    76                              <1> ; users overtyping
    77                              <1> 
    78                              <1> ;Internal Function vars
    79                              <1> ;Dir Vars
    80 000003A1 00                  <1> dirPrnType  db 0    ;Print type.    Bit[0] set => /W or /w specified
    81                              <1> ;                                   Bit[1] set => /P or /p specified
    82 000003A2 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    83 000003A3 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    84 000003A4 00                  <1> dirDrv      db 0    ;0 based drive number to use
    85 000003A5 000000000000000000- <1> dirOldCWD   db cmdBufferL dup (0)   ;Space for CWD and any overspill 
    85 000003AE 000000000000000000- <1>
    85 000003B7 000000000000000000- <1>
    85 000003C0 000000000000000000- <1>
    85 000003C9 000000000000000000- <1>
    85 000003D2 000000000000000000- <1>
    85 000003DB 000000000000000000- <1>
    85 000003E4 000000000000000000- <1>
    85 000003ED 000000000000000000- <1>
    85 000003F6 000000000000000000- <1>
    85 000003FF 000000000000000000- <1>
    85 00000408 000000000000000000- <1>
    85 00000411 000000000000000000- <1>
    85 0000041A 000000000000000000- <1>
    85 00000423 0000                <1>
    86 00000425 000000000000000000- <1> dirPathArg  db cmdBufferL dup (0)   ;Copy the pathspec argument here if any
    86 0000042E 000000000000000000- <1>
    86 00000437 000000000000000000- <1>
    86 00000440 000000000000000000- <1>
    86 00000449 000000000000000000- <1>
    86 00000452 000000000000000000- <1>
    86 0000045B 000000000000000000- <1>
    86 00000464 000000000000000000- <1>
    86 0000046D 000000000000000000- <1>
    86 00000476 000000000000000000- <1>
    86 0000047F 000000000000000000- <1>
    86 00000488 000000000000000000- <1>
    86 00000491 000000000000000000- <1>
    86 0000049A 000000000000000000- <1>
    86 000004A3 0000                <1>
    87 000004A5 3F3F3F3F3F3F3F3F    <1> dirSrchPat  db 8 dup ("?")    ;We copy the search pattern here
    88 000004AD 2E                  <1> dirSPExt    db "."
    89 000004AE 3F3F3F              <1>             db 3 dup ("?")
    90                              <1> 
    91                              <1> ;Volume Vars
    92 000004B1 000000000000000000- <1> volLblSpc   db 13 dup (0)
    92 000004BA 00000000            <1>
    93 000004BE 00                  <1> volPathBuf  db 0 ;Drive LETTER goes here
    94 000004BF 3A5C2A2E2A00        <1>             db ":\*.*",0  ;This remains to build X:\*.*,0 for vol label search
    95                              <1> 
    96                              <1> ;Time/Date vars
    97 000004C5 00                  <1> td1 db 0    ;Minutes/Year
    98 000004C6 00                  <1> td2 db 0    ;Hours/Zero
    99 000004C7 00                  <1> td3 db 0    ;Hundredths/Day
   100 000004C8 00                  <1> td4 db 0    ;Seconds/Month
    13                                  %include "./Source/Utils/COMMAND/Data/cmdTable.asm"
    14                              <1> ;Function dispatch table
    15                              <1> functionTable:
    16                              <1> ;Use Pascal strings with each row of hte table having three columns:
    17                              <1> ; Col 1, BYTE, Length of command
    18                              <1> ; Col 2, String, String representing the user input
    19                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
    20 000004C9 03444952            <1>     db 3, "DIR"
    21 000004CD 6D10                <1>     dw dir - startLbl
    22                              <1> 
    23 000004CF 024344              <1>     db 2, "CD"
    24 000004D2 0514                <1>     dw chdir - startLbl
    25                              <1> 
    26 000004D4 054348444952        <1>     db 5, "CHDIR"
    27 000004DA 0514                <1>     dw chdir - startLbl
    28                              <1> 
    29 000004DC 024D44              <1>     db 2, "MD"
    30 000004DF AD14                <1>     dw mkdir - startLbl
    31                              <1> 
    32 000004E1 054D4B444952        <1>     db 5, "MKDIR"
    33 000004E7 AD14                <1>     dw mkdir - startLbl
    34                              <1> 
    35 000004E9 025244              <1>     db 2, "RD"
    36 000004EC F914                <1>     dw rmdir - startLbl
    37                              <1> 
    38 000004EE 05524D444952        <1>     db 5, "RMDIR"
    39 000004F4 F914                <1>     dw rmdir - startLbl
    40                              <1> 
    41 000004F6 0344454C            <1>     db 3, "DEL"
    42 000004FA 4615                <1>     dw erase - startLbl
    43                              <1> 
    44 000004FC 054552415345        <1>     db 5, "ERASE"
    45 00000502 4615                <1>     dw erase - startLbl
    46                              <1> 
    47 00000504 0444415445          <1>     db 4, "DATE"
    48 00000509 6F15                <1>     dw date - startLbl
    49                              <1> 
    50 0000050B 0454494D45          <1>     db 4, "TIME"
    51 00000510 3516                <1>     dw time - startLbl
    52                              <1> 
    53 00000512 04434F5059          <1>     db 4, "COPY"
    54 00000517 4515                <1>     dw copy - startLbl
    55                              <1> 
    56 00000519 0443545459          <1>     db 4, "CTTY"
    57 0000051E CD16                <1>     dw ctty - startLbl
    58                              <1> 
    59 00000520 03434C53            <1>     db 3, "CLS"
    60 00000524 6817                <1>     dw cls - startLbl
    61                              <1> 
    62 00000526 05425245414B        <1>     db 5, "BREAK"
    63 0000052C DA17                <1>     dw break - startLbl
    64                              <1> 
    65 0000052E 06564552494659      <1>     db 6, "VERIFY"
    66 00000535 5B18                <1>     dw verify - startLbl
    67                              <1> 
    68 00000537 0652454E414D45      <1>     db 6, "RENAME"
    69 0000053E D818                <1>     dw rename - startLbl
    70                              <1> 
    71 00000540 08545255454E414D45  <1>     db 8, "TRUENAME"
    72 00000549 0C19                <1>     dw truename - startLbl
    73                              <1> 
    74 0000054B 03564552            <1>     db 3, "VER"
    75 0000054F 551A                <1>     dw version - startLbl
    76                              <1> 
    77 00000551 03564F4C            <1>     db 3, "VOL"
    78 00000555 4219                <1>     dw volume - startLbl
    79                              <1> 
    80 00000557 034D454D            <1>     db 3, "MEM"
    81 0000055B 991A                <1>     dw memory - startLbl
    82                              <1> 
    83 0000055D 0445584954          <1>     db 4, "EXIT"
    84 00000562 7B1C                <1>     dw exit - startLbl
    85                              <1> 
    86 00000564 0454595045          <1>     db 4, "TYPE"
    87 00000569 E31B                <1>     dw type - startLbl
    88                              <1> 
    89 0000056B 05544F554348        <1>     db 5, "TOUCH"
    90 00000571 D918                <1>     dw touch - startLbl
    91                              <1> 
    92 00000573 FF                  <1>     db -1   ;End of table
    14                                  %include "./Source/Utils/COMMAND/Data/cmdMsg.asm"
    15                              <1> ;COMMAND.COM Messages and strings
    16 00000574 0D0A24              <1> crlf    db  CR,LF,"$"
    17 00000577 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
    18 0000057C 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
    18 00000585 696C65206D69737369- <1>
    18 0000058E 6E670D0A24          <1>
    19 00000593 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
    19 0000059C 6469736B2077697468- <1>
    19 000005A5 206261746368206669- <1>
    19 000005AE 6C65                <1>
    20 000005B0 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
    20 000005B9 737320616E79206B65- <1>
    20 000005C2 79207768656E207265- <1>
    20 000005CB 6164790D0A24        <1>
    21 000005D1 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
    21 000005DA 6E64206F722066696C- <1>
    21 000005E3 65206E616D650D0A24  <1>
    22 000005EC 4475706C6963617465- <1> dupName db  "Duplicate file name or "
    22 000005F5 2066696C65206E616D- <1>
    22 000005FE 65206F7220          <1>
    23 00000603 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    23 0000060C 666F756E640D0A24    <1>
    24 00000614 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    24 0000061D 656E74206469736B20- <1>
    24 00000626 73706163650D0A24    <1>
    25 0000062E 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    25 00000637 7669726F6E6D656E74- <1>
    25 00000640 2073706163650D0A24  <1>
    26 00000649 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    26 00000652 74696F6E206572726F- <1>
    26 0000065B 720D0A24            <1>
    27 0000065F 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    27 00000668 6F7420626520636F70- <1>
    27 00000671 696564206F6E746F20- <1>
    27 0000067A 697473656C660D0A24  <1>
    28 00000683 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    28 0000068C 662064657374696E61- <1>
    28 00000695 74696F6E206C6F7374- <1>
    28 0000069E 206265666F72652063- <1>
    28 000006A7 6F70790D0A24        <1>
    29                              <1> ;Copy end message. First write # files copied then this message 
    30 000006AD 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    30 000006B6 636F706965640D0A24  <1>
    31                              <1> ;Dir end1 msg. First write # files in dir then this
    32 000006BF 2046696C6528732920- <1> dirOk   db  " File(s) $"
    32 000006C8 24                  <1>
    33                              <1> ;Dir end2 msg. First write # bytes free then this message
    34 000006C9 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    34 000006D2 65650D0A24          <1>
    35 000006D7 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    36                              <1> 
    37 000006E0 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    37 000006E9 726976652073706563- <1>
    37 000006F2 696669636174696F6E- <1>
    37 000006FB 0D0A24              <1>
    38 000006FE 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    38 00000707 6B6579207768656E20- <1>
    38 00000710 7265616479202E202E- <1>
    38 00000719 202E2024            <1>
    39 0000071D 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    39 00000726 6172616D657465720D- <1>
    39 0000072F 0A24                <1>
    40                              <1> 
    41 00000731 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    41 0000073A 576564546875467269- <1>
    41 00000743 536174              <1>
    42 00000746 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    42 0000074F 206461746524        <1>
    43 00000755 43757272656E742064- <1> curDate db  "Current date is $"
    43 0000075E 6174652069732024    <1>
    44 00000766 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    44 0000076F 657720646174652024  <1>
    45 00000778 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    45 00000781 293A2024            <1>
    46 00000785 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    46 0000078E 293A2024            <1>
    47 00000792 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    47 0000079B 293A2024            <1>
    48 0000079F 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    48 000007A8 2074696D6524        <1>
    49 000007AE 43757272656E742074- <1> curTime db  "Current time is $"
    49 000007B7 696D652069732024    <1>
    50 000007BF 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    50 000007C8 65772074696D653A20- <1>
    50 000007D1 24                  <1>
    51                              <1> 
    52 000007D2 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    52 000007DB 7572652028592F4E29- <1>
    52 000007E4 3F2024              <1>
    53                              <1> 
    54 000007E7 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    54 000007F0 56657273696F6E2024  <1>
    55                              <1> 
    56 000007F9 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    56 00000802 6E2064726976652024  <1>
    57 0000080B 2069732024          <1> volOk   db " is $"
    58 00000810 20686173206E6F206C- <1> volNo   db " has no label$"
    58 00000819 6162656C24          <1>
    59                              <1> 
    60 0000081E 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    60 00000827 69726563746F72790D- <1>
    60 00000830 0A24                <1>
    61 00000832 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    61 0000083B 206372656174652064- <1>
    61 00000844 69726563746F72790D- <1>
    61 0000084D 0A24                <1>
    62 0000084F 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    62 00000858 6174682C206E6F7420- <1>
    62 00000861 6469726563746F7279- <1>
    62 0000086A 2C0D0A              <1>
    63 0000086D 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    63 00000876 6F7279206E6F742065- <1>
    63 0000087F 6D7074790D0A24      <1>
    64 00000886 204469726563746F72- <1> dirMain db " Directory of  $"
    64 0000088F 79206F66202024      <1>
    65 00000896 4E6F20506174682024  <1> noPath  db "No Path $"
    66 0000089F 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    66 000008A8 7269766520696E2073- <1>
    66 000008B1 656172636820706174- <1>
    66 000008BA 680D0A24            <1>
    67 000008BE 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    67 000008C7 65766963650D0A24    <1>
    68 000008CF 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    68 000008D8 20666F756E640D0A24  <1>
    69 000008E1 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    69 000008EA 726F720D0A24        <1>
    70 000008F0 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    70 000008F9 6F74206265206E6573- <1>
    70 00000902 7465640D0A24        <1>
    71 00000908 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    71 00000911 6174652066696C6520- <1>
    71 0000091A 6572726F7220647572- <1>
    71 00000923 696E6720706970650D- <1>
    71 0000092C 0A24                <1>
    72 0000092E 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    72 00000937 2062696E6172792072- <1>
    72 00000940 656164732066726F6D- <1>
    72 00000949 206120646576696365- <1>
    72 00000952 0D0A24              <1>
    73 00000955 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    74 0000095B 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    75 00000960 425245414B20697320- <1> breakIs db "BREAK is $"
    75 00000969 24                  <1>
    76 0000096A 564552494659206973- <1> verifyIs    db "VERIFY is $"
    76 00000973 2024                <1>
    77 00000975 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    78 0000097E 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    78 00000987 617468206F72206669- <1>
    78 00000990 6C65206E616D650D0A- <1>
    78 00000999 24                  <1>
    79 0000099A 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    79 000009A3 756D626572206F6620- <1>
    79 000009AC 706172616D65746572- <1>
    79 000009B5 730D0A24            <1>
    80 000009B9 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    80 000009C2 74696E6720746F2064- <1>
    80 000009CB 6576696365          <1>
    81 000009D0 08200800            <1> backSpace   db BSP," ",BSP,NUL
    82                              <1> 
    83 000009D4 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    83 000009DD 20202020202020546F- <1>
    83 000009E6 74616C207379737465- <1>
    83 000009EF 6D206D656D6F72793A- <1>
    83 000009F8 2024                <1>
    84 000009FA 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    84 00000A03 20202020202020204D- <1>
    84 00000A0C 656D6F727920757365- <1>
    84 00000A15 6420627920444F533A- <1>
    84 00000A1E 2024                <1>
    85 00000A20 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    85 00000A29 656D6F727920757365- <1>
    85 00000A32 64206279206170706C- <1>
    85 00000A3B 69636174696F6E733A- <1>
    85 00000A44 2024                <1>
    86 00000A46 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    86 00000A4F 656D6F727920726573- <1>
    86 00000A58 657276656420627920- <1>
    86 00000A61 68617264776172653A- <1>
    86 00000A6A 2024                <1>
    87 00000A6C 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    87 00000A75 202020202020202020- <1>
    87 00000A7E 2020202020204D656D- <1>
    87 00000A87 6F727920667265653A- <1>
    87 00000A90 2024                <1>
    88 00000A92 20627974657324      <1> memByte db " bytes$"
    89 00000A99 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    89 00000AA2 6F7420417373657274- <1>
    89 00000AAB 61696E20444F532045- <1>
    89 00000AB4 6E74727920506F696E- <1>
    89 00000ABD 7424                <1>
    90 00000ABF 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    90 00000AC8 416C6C6F636174696F- <1>
    90 00000AD1 6E204572726F7224    <1>
    91 00000AD9 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    91 00000AE2 4572726F7224        <1>
    92 00000AE8 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    92 00000AF1 68616C74656424      <1>
    93                              <1> 
    94                              <1> 
    95 00000AF8 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    96 00000AFC 2020202024          <1> fourSpc  db "    $"
    97 00000B01 20202024            <1> threeSpc db "   $"
    98 00000B05 202024              <1> twoSpc   db "  $"
    99                              <1> 
   100 00000B08 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
   100 00000B11 696679204F4E206F72- <1>
   100 00000B1A 204F46460D0A24      <1>
   101 00000B21 504154483D          <1> pathEVar db "PATH="
   102 00000B26 50524F4D50543D      <1> promptEVar  db "PROMPT="
    15                                  %include "./Source/Utils/COMMAND/Source/cmdMain.asm"
    16                              <1> commandStart:
    17                              <1>     ;Resize Allocation, jump here with endpointer in rbx
    18                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
    19                              <1>     ; that the jump to safety won't be gobbled up when multitasking
    20 00000B2D 49F7D8              <1>     neg r8  ;Convert r8 to -r8
    21 00000B30 4A8D5C0311          <1>     lea rbx, qword [rbx + r8 + 11h]    ;Get # of bytes for COMMAND.COM
    22 00000B35 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
    23 00000B38 B44A                <1>     mov ah, 4Ah ;Realloc
    24 00000B3A 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    25 00000B3D CD41                <1>     int 41h
    26 00000B3F EB5A                <1>     jmp short commandMain
    27                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    28 00000B41 B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    29 00000B46 CD41                <1>     int 41h
    30 00000B48 668905BEF4FFFF      <1>     mov word [returnCode], ax
    31                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    32 00000B4F 488D1564180000      <1>     lea rdx, critErrorHandler
    33 00000B56 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    34 00000B5A B844250000          <1>     mov eax, 2544h
    35 00000B5F CD41                <1>     int 41h
    36 00000B61 488D15E21A0000      <1>     lea rdx, int43h
    37 00000B68 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    38 00000B6C B843250000          <1>     mov eax, 2543h
    39 00000B71 CD41                <1>     int 41h
    40 00000B73 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    41 00000B7A 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    42 00000B7E B842250000          <1>     mov eax, 2542h
    43 00000B83 CD41                <1>     int 41h
    44                              <1> ;Close all handles from 5->MAX
    45 00000B85 0FB70D93F4FFFF      <1>     movzx ecx, word [numHdls]
    46 00000B8C BB05000000          <1>     mov ebx, 5
    47                              <1> .handleClose:
    48 00000B91 B43E                <1>     mov ah, 3Eh ;File close
    49 00000B93 CD41                <1>     int 41h
    50 00000B95 FFC3                <1>     inc ebx ;Goto next file
    51 00000B97 39CB                <1>     cmp ebx, ecx
    52 00000B99 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    53                              <1> commandMain:
    54                              <1> ;Setup Commandline
    55 00000B9B FA                  <1>     cli
    56 00000B9C 488B2562F4FFFF      <1>     mov rsp, qword [stackBottom]    ;Reset internal stack pointer pos
    57 00000BA3 FB                  <1>     sti
    58 00000BA4 FC                  <1>     cld ;Ensure stringops are done the right way
    59 00000BA5 C60562F5FFFF80      <1>     mov byte [inBuffer], 80h    ;Reset the buffer length
    60                              <1> .inputMain:
    61 00000BAC E8BD150000          <1>     call clearCommandLineState
    62 00000BB1 E844120000          <1>     call printCRLF
    63 00000BB6 E88B150000          <1>     call printPrompt
    64                              <1> 
    65 00000BBB 488D154CF5FFFF      <1>     lea rdx, inBuffer
    66 00000BC2 B80A0C0000          <1>     mov eax, 0C0Ah  ;Do Buffered input
    67 00000BC7 CD41                <1>     int 41h
    68 00000BC9 E82C120000          <1>     call printCRLF  ;Note we have accepted input
    69                              <1> 
    70                              <1> ;First check we had something typed in of length greater than 1
    71                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    72 00000BCE 803D3AF5FFFF01      <1>     cmp byte [inBuffer + 1], 1  ;Check input length valid
    73 00000BD5 742C                <1>     je .dfltErrExit
    74 00000BD7 72D3                <1>     jb .inputMain
    75                              <1>     ;Copy over the input text
    76 00000BD9 488D352EF5FFFF      <1>     lea rsi, inBuffer
    77 00000BE0 488D3DA7F5FFFF      <1>     lea rdi, cmdBuffer
    78 00000BE7 B980000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    79 00000BEC F3A4                <1>     rep movsb
    80 00000BEE 31C0                <1>     xor eax, eax
    81 00000BF0 668905A0F4FFFF      <1>     mov word [cmdStartOff], ax  ;Clear start and end Off positions
    82 00000BF7 E814000000          <1>     call parseInput
    83 00000BFC E8AD010000          <1>     call doCommandLine
    84 00000C01 EBA9                <1>     jmp short .inputMain
    85                              <1> .dfltErrExit:
    86 00000C03 488D15C7F9FFFF      <1>     lea rdx, badCmd
    87 00000C0A B409                <1>     mov ah, 09h
    88 00000C0C CD41                <1>     int 41h
    89 00000C0E EB9C                <1>     jmp short .inputMain
    90                              <1> 
    91                              <1> parseInput:
    92                              <1> ;EndOff is set up before entering this part
    93                              <1> ;Copies a nicely formatted version of the input command line
    94                              <1> ; without any redirections to psp.dta
    95 00000C10 488D3579F5FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
    96 00000C17 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
    97 00000C1E 0FB61D73F4FFFF      <1>     movzx ebx, byte [cmdEndOff] ;Get the old end offset
    98 00000C25 4801DE              <1>     add rsi, rbx    ;Move rsi to the start of this new command
    99 00000C28 E80A150000          <1>     call skipSpaces ;Skip any preceeding spaces
   100 00000C2D 66AD                <1>     lodsw   ;Get the first two chars into ax
   101 00000C2F 66890573F4FFFF      <1>     mov word [cmdDrvSpec], ax ;Store these chars as if they are the drvspec
   102 00000C36 4881EE02000000      <1>     sub rsi, 2  ;Go back to the start of the command
   103 00000C3D 56                  <1>     push rsi
   104 00000C3E 57                  <1>     push rdi
   105 00000C3F 488D3DC8F5FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   106 00000C46 57                  <1>     push rdi
   107 00000C47 E845030000          <1>     call copyCommandTailItemProgram
   108 00000C4C 5F                  <1>     pop rdi
   109 00000C4D 9C                  <1>     pushfq  ;Save the CF state
   110 00000C4E E86C140000          <1>     call strlen
   111 00000C53 FFC9                <1>     dec ecx ;Drop the terminating char from the count
   112 00000C55 58                  <1>     pop rax ;Get the CF state in al
   113 00000C56 5F                  <1>     pop rdi
   114 00000C57 5E                  <1>     pop rsi
   115 00000C58 F3A4                <1>     rep movsb   ;Now we copy the command into the psp command line
   116 00000C5A A801                <1>     test al, 1  ;Was CF set?
   117 00000C5C 0F8586000000        <1>     jnz .exit   ;If an embedded CR was found in the filename, exit!
   118                              <1> .cmdLineProcess:
   119 00000C62 E8D0140000          <1>     call skipSpaces ;Go to the next char in the input line
   120                              <1> .redirFound:
   121 00000C67 AC                  <1>     lodsb   ;Get first non-space char (setupRedir skips spaces before ret)
   122 00000C68 3C0D                <1>     cmp al, CR  ;If this was a CR, we stop processing
   123 00000C6A 747C                <1>     je .exit
   124 00000C6C E8B3020000          <1>     call checkAndSetupRedir ;If not, check if we have a redir element
   125 00000C71 7275                <1>     jc .exit    ;CF=CY only if pipe, which is equivalent to CR when processing
   126 00000C73 74F2                <1>     jz .redirFound  ;If we had a < > or >>, proceed to check if next char CR
   127 00000C75 B020                <1>     mov al, " "
   128 00000C77 AA                  <1>     stosb   ;Store a space to make space for the command file parameter
   129 00000C78 48FFCE              <1>     dec rsi ;Move rsi back to the first char
   130 00000C7B F6052BF4FFFFFF      <1>     test byte [arg1Flg], -1
   131 00000C82 7521                <1>     jnz .arg2
   132                              <1> .arg1:
   133 00000C84 C60522F4FFFFFF      <1>     mov byte [arg1Flg], -1
   134 00000C8B E8A7140000          <1>     call skipSpaces
   135 00000C90 4889F0              <1>     mov rax, rsi
   136 00000C93 488D1DF4F4FFFF      <1>     lea rbx, cmdBuffer
   137 00000C9A 4829D8              <1>     sub rax, rbx
   138 00000C9D 88050BF4FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   139 00000CA3 EB2A                <1>     jmp short .argCommon
   140                              <1> .arg2:
   141 00000CA5 F60504F4FFFFFF      <1>     test byte [arg2Flg], -1
   142 00000CAC 7521                <1>     jnz .argCommon
   143 00000CAE C605FBF3FFFFFF      <1>     mov byte [arg2Flg], -1
   144 00000CB5 E87D140000          <1>     call skipSpaces
   145 00000CBA 4889F0              <1>     mov rax, rsi
   146 00000CBD 488D1DCAF4FFFF      <1>     lea rbx, cmdBuffer
   147 00000CC4 4829D8              <1>     sub rax, rbx
   148 00000CC7 8805E4F3FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   149 00000CCD EB00                <1>     jmp short .argCommon
   150                              <1> .argCommon:
   151                              <1>     ;More than two arguments? Do nothing more than just copy it
   152                              <1>     ; over. If we encounter an embedded CR, exit there too
   153 00000CCF E863140000          <1>     call skipSpaces
   154 00000CD4 803E0D              <1>     cmp byte [rsi], CR  ;Are we at the end of the commandline?
   155 00000CD7 740F                <1>     je .exit
   156                              <1>     ;If not, we copy it over
   157 00000CD9 E8DD020000          <1>     call copyCommandTailItem    ;Stores a terminating null we dont want
   158 00000CDE 488D7FFF            <1>     lea rdi, qword [rdi - 1]    ;Point back at the inserted terminating null
   159 00000CE2 0F837AFFFFFF        <1>     jnc .cmdLineProcess
   160                              <1> .exit:
   161 00000CE8 488D1D9FF4FFFF      <1>     lea rbx, cmdBuffer
   162 00000CEF 48FFCE              <1>     dec rsi
   163 00000CF2 4829DE              <1>     sub rsi, rbx    ;Get the offset into the command line
   164 00000CF5 89F3                <1>     mov ebx, esi
   165 00000CF7 881D9BF3FFFF        <1>     mov byte [cmdEndOff], bl    ;Store the offset to the terminating char
   166 00000CFD B00D                <1>     mov al, CR
   167 00000CFF AA                  <1>     stosb   ;Store the terminating CR in the psp command line
   168                              <1>     ;Now compute the command line length 
   169 00000D00 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine] 
   170 00000D07 B00D                <1>     mov al, CR
   171 00000D09 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   172 00000D0B FFC9                <1>     dec ecx ;rcx = -1
   173 00000D0D F2AE                <1>     repne scasb
   174 00000D0F F7D1                <1>     not ecx
   175 00000D11 FEC9                <1>     dec cl  ;Dont include terminating CR
   176 00000D13 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   177 00000D1A 880F                <1>     mov byte [rdi], cl
   178                              <1>     ;Before returning, we copy the command name to cmdName
   179 00000D1C 488D3DEBF4FFFF      <1>     lea rdi, cmdPathSpec
   180 00000D23 4889FB              <1>     mov rbx, rdi    ;Use rbx as the ptr to the first char in the commandspec
   181 00000D26 30C0                <1>     xor al, al  ;Search for the terminating null
   182 00000D28 B94F000000          <1>     mov ecx, fileSpecZL ;Max number of chars the length could be
   183 00000D2D F2AE                <1>     repne scasb
   184 00000D2F 48FFCF              <1>     dec rdi ;Go to the last char in the command
   185 00000D32 4889FE              <1>     mov rsi, rdi
   186 00000D35 FD                  <1>     std ;Now we go backwards to where rsi = rbx OR byte [rsi] = pathSep
   187                              <1> .keepSearching:
   188 00000D36 AC                  <1>     lodsb
   189 00000D37 3A05E6F2FFFF        <1>     cmp al, byte [pathSep]
   190 00000D3D 740B                <1>     je .cmdStartFnd
   191 00000D3F 4839DE              <1>     cmp rsi, rbx
   192 00000D42 75F2                <1>     jne .keepSearching
   193 00000D44 48FFCE              <1>     dec rsi ;Go back two to go forwards again
   194 00000D47 48FFCE              <1>     dec rsi
   195                              <1> .cmdStartFnd:
   196 00000D4A 48FFC6              <1>     inc rsi
   197 00000D4D 48FFC6              <1>     inc rsi ;Go past the pathsep
   198 00000D50 FC                  <1>     cld ;Go the sane way again
   199 00000D51 488D3D1EF5FFFF      <1>     lea rdi, qword [cmdName + 1]    ;First byte is for the length of the name
   200 00000D58 57                  <1>     push rdi    ;Cleanse the field before usage (not strictly necessary)
   201 00000D59 B90E000000          <1>     mov ecx, cmdNameL
   202 00000D5E 30C0                <1>     xor al, al
   203 00000D60 F3AA                <1>     rep stosb
   204 00000D62 5F                  <1>     pop rdi
   205 00000D63 31C9                <1>     xor ecx, ecx
   206 00000D65 56                  <1>     push rsi    ;Save the location of the start byte of the command name
   207                              <1> .cmdGetChar:
   208 00000D66 AC                  <1>     lodsb
   209 00000D67 84C0                <1>     test al, al ;Did we find the terminating null?
   210 00000D69 7411                <1>     jz .nameLenFnd
   211 00000D6B 3C2E                <1>     cmp al, "." ;Extension sep also terminates
   212 00000D6D 740D                <1>     je .nameLenFnd
   213 00000D6F 24DF                <1>     and al, 0DFh    ;Else uppercase the char
   214 00000D71 AA                  <1>     stosb   ;and store it
   215 00000D72 FFC1                <1>     inc ecx
   216 00000D74 81F90B000000        <1>     cmp ecx, 11 ;Max command length is 11
   217 00000D7A 72EA                <1>     jb .cmdGetChar
   218                              <1> .nameLenFnd:
   219 00000D7C 880DF3F4FFFF        <1>     mov byte [cmdName], cl  ;Store the name length now
   220                              <1>     ;Now finally, create a FCB filespec
   221 00000D82 488D3DD4F4FFFF      <1>     lea rdi, fcbCmdSpec
   222 00000D89 57                  <1>     push rdi
   223 00000D8A B90B000000          <1>     mov ecx, fcbNameL
   224 00000D8F B020                <1>     mov al, " " ;Fill with spaces
   225 00000D91 F3AA                <1>     rep stosb
   226 00000D93 5F                  <1>     pop rdi
   227 00000D94 5E                  <1>     pop rsi ;Get back the location of the start byte of the command name
   228 00000D95 E8E5130000          <1>     call asciiToFCB
   229 00000D9A 488D35BCF4FFFF      <1>     lea rsi, fcbCmdSpec
   230 00000DA1 488D3DC0F4FFFF      <1>     lea rdi, cmdSpec
   231 00000DA8 E82D140000          <1>     call FCBToAsciiz
   232                              <1>     return
    19                              <2> %%_ret:
    20 00000DAD C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   233                              <1> 
   234                              <1> doCommandLine:
   235 00000DAE 488D35DBF3FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
   236 00000DB5 488D3DF7F2FFFF      <1>     lea rdi, cmdFcb
   237 00000DBC B801290000          <1>     mov eax, 2901h  ;Skip leading blanks
   238 00000DC1 CD41                <1>     int 41h
   239 00000DC3 0FB71DDFF2FFFF      <1>     movzx ebx, word [cmdDrvSpec]    ;Get the drive specifier
   240 00000DCA 80FF3A              <1>     cmp bh, ":"
   241 00000DCD 752E                <1>     jne .noDriveSpecified
   242 00000DCF 88DA                <1>     mov dl, bl      ;Move the drive letter in dl
   243 00000DD1 80E2DF              <1>     and dl, 0DFh    ;Make the drive letter upper case
   244 00000DD4 80EA41              <1>     sub dl, "A"     ;And make it a 0 based drive letter
   245 00000DD7 3CFF                <1>     cmp al, -1  ;Int 41h returns AL = -1 if bad drive specified
   246 00000DD9 7415                <1>     je .badDrive
   247                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   248 00000DDB 803D93F4FFFF02      <1>     cmp byte [cmdName], 2
   249 00000DE2 7519                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   250 00000DE4 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   251 00000DE6 CD41                <1>     int 41h 
   252 00000DE8 B419                <1>     mov ah, 19h
   253 00000DEA CD41                <1>     int 41h     ;Get current drive
   254 00000DEC 38D0                <1>     cmp al, dl  ;If the drive was set, all is well
   255                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000DEE 74(AD)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   256                              <1> .badDrive:
   257 00000DF0 488D15E9F8FFFF      <1>     lea rdx, badDrv
   258 00000DF7 B409                <1>     mov ah, 09h
   259 00000DF9 CD41                <1>     int 41h
   260 00000DFB F9                  <1>     stc
   261                              <1>     return
    19                              <2> %%_ret:
    20 00000DFC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   262                              <1> .noDriveSpecified:
   263                              <1> ;Now we set the two FCB's in the command line
   264 00000DFD F605A9F2FFFFFF      <1>     test byte [arg1Flg], -1
   265 00000E04 744D                <1>     jz .fcbArgsDone
   266 00000E06 0FB605A1F2FFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   267 00000E0D 488D357AF3FFFF      <1>     lea rsi, cmdBuffer
   268 00000E14 4801C6              <1>     add rsi, rax    ;Point to first argument
   269 00000E17 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   270 00000E1B B801290000          <1>     mov eax, 2901h
   271 00000E20 CD41                <1>     int 41h
   272 00000E22 880587F2FFFF        <1>     mov byte [arg1FCBret], al
   273 00000E28 F60581F2FFFFFF      <1>     test byte [arg2Flg], -1
   274 00000E2F 7422                <1>     jz .fcbArgsDone
   275 00000E31 0FB60579F2FFFF      <1>     movzx eax, byte [arg2Off]
   276 00000E38 488D354FF3FFFF      <1>     lea rsi, cmdBuffer
   277 00000E3F 4801C6              <1>     add rsi, rax    ;Point to first argument
   278 00000E42 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   279 00000E46 B801290000          <1>     mov eax, 2901h
   280 00000E4B CD41                <1>     int 41h
   281 00000E4D 88055FF2FFFF        <1>     mov byte [arg2FCBret], al
   282                              <1> .fcbArgsDone:
   283 00000E53 488D3534F3FFFF      <1>     lea rsi, cmdBuffer
   284 00000E5A 488D1D14F4FFFF      <1>     lea rbx, cmdName
   285 00000E61 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   286 00000E66 BAFFFF0000          <1>     mov edx, 0FFFFh
   287 00000E6B B5FF                <1>     mov ch, -1
   288 00000E6D CD4F                <1>     int 4Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   289                              <1>             ;        al = 0  if the command should be executed as usual
   290 00000E6F B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   291 00000E74 BAFFFF0000          <1>     mov edx, 0FFFFh
   292 00000E79 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   293 00000E7B CD4F                <1>     int 4Fh
   294 00000E7D 741D                <1>     jz .executeInternal
   295                              <1>     ;Here we execute externally and return to the prompt
   296                              <1>     ; as if it was an internal execution
   297 00000E7F 488D3588F2FFFF      <1>     lea rsi, inBuffer ;Point to this built buffer
   298 00000E86 488D1D26F2FFFF      <1>     lea rbx, cmdFcb
   299 00000E8D B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   300 00000E92 BAFFFF0000          <1>     mov edx, 0FFFFh
   301 00000E97 B5FF                <1>     mov ch, -1
   302 00000E99 CD4F                <1>     int 4Fh 
   303                              <1>     return
    19                              <2> %%_ret:
    20 00000E9B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   304                              <1> .executeInternal:
   305                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   306                              <1> ;rsi points after the command terminator in the command tail
   307 00000E9C 488D1D26F6FFFF      <1>     lea rbx, functionTable
   308                              <1> .nextEntry:
   309 00000EA3 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   310 00000EA6 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   311 00000EA9 0F84020E0000        <1>     je launchChild      ;If so, check externally now
   312 00000EAF 380DC0F3FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   313 00000EB5 7529                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   314                              <1>     ;Here they have the same length so lets see if the name is the same
   315 00000EB7 56                  <1>     push rsi
   316                              <1>     ;ecx has the length to compare
   317 00000EB8 51                  <1>     push rcx
   318 00000EB9 488D7301            <1>     lea rsi, qword [rbx + 1]
   319 00000EBD 488D3DB2F3FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   320 00000EC4 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   321 00000EC6 59                  <1>     pop rcx
   322 00000EC7 5E                  <1>     pop rsi
   323 00000EC8 7516                <1>     jne .gotoNextEntry
   324                              <1>     ;Here it was found both strings are equal
   325 00000ECA 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   326 00000ECF 480FB71F            <1>     movzx rbx, word [rdi]
   327 00000ED3 488D3D26F1FFFF      <1>     lea rdi, startLbl
   328 00000EDA 4801FB              <1>     add rbx, rdi
   329 00000EDD FFD3                <1>     call rbx    ;Call this function...
   330                              <1>     return  ;... and return
    19                              <2> %%_ret:
    20 00000EDF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   331                              <1> .gotoNextEntry:
   332 00000EE0 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   333 00000EE7 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   334 00000EEA EBB7                <1>     jmp short .nextEntry
   335                              <1> .dfltErrExit:
   336 00000EEC 488D15DEF6FFFF      <1>     lea rdx, badCmd
   337 00000EF3 B409                <1>     mov ah, 09h
   338 00000EF5 CD41                <1>     int 41h
   339                              <1>     return
    19                              <2> %%_ret:
    20 00000EF7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   340                              <1> 
   341                              <1> 
   342                              <1> checkExtensionExec:
   343                              <1> ;Checks the extension field of cmdFcb is .COM, .EXE, .BAT in that order
   344                              <1> ;Returns: ZF=ZE if executable. ZF=NZ if not executable.
   345                              <1> ;         If ZF=ZE and CF=CY => Batch file
   346 00000EF8 8B05BEF1FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   347 00000EFE 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   348 00000F03 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   349 00000F08 25DFDFDFFF          <1>     and eax, 0FFDFDFDFh ;Uppercase the three letters
   350 00000F0D 3D434F4D20          <1>     cmp eax, "COM "
   351                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000F12 74(F7)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   352 00000F14 3D45584520          <1>     cmp eax, "EXE "
   353                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000F19 74(F7)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   354 00000F1B 3D42415420          <1>     cmp eax, "BAT "
   355                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000F20 75(F7)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   356 00000F22 F9                  <1>     stc
   357                              <1>     return
    19                              <2> %%_ret:
    20 00000F23 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   358                              <1> 
   359                              <1> checkAndSetupRedir:
   360                              <1> ;Checks and sets up redir as appropriate
   361                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   362                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   363                              <1> ;Output: ZF=NZ => No redir
   364                              <1> ;        ZF=ZY => Redir
   365                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   366                              <1> ;CF=CY if pipe set or an embedded CR found
   367 00000F24 57                  <1>     push rdi
   368 00000F25 3C3C                <1>     cmp al, "<"
   369 00000F27 740B                <1>     je .inputRedir
   370 00000F29 3C3E                <1>     cmp al, ">"
   371 00000F2B 742A                <1>     je .outputRedir
   372 00000F2D 3C7C                <1>     cmp al, "|"
   373 00000F2F 7454                <1>     je .pipeSetup
   374 00000F31 F8                  <1>     clc
   375                              <1> .redirExit:
   376 00000F32 5F                  <1>     pop rdi
   377                              <1>     return
    19                              <2> %%_ret:
    20 00000F33 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   378                              <1> .inputRedir:
   379 00000F34 C60570F1FFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   380 00000F3B 488D3D41F3FFFF      <1>     lea rdi, rdrInFilespec
   381 00000F42 E8F0110000          <1>     call skipSpaces ;Skip spaces between < and the filespec
   382 00000F47 E86F000000          <1>     call copyCommandTailItem
   383 00000F4C 72E4                <1>     jc .redirExit
   384 00000F4E E8E4110000          <1>     call skipSpaces
   385 00000F53 30C0                <1>     xor al, al
   386 00000F55 EBDB                <1>     jmp short .redirExit
   387                              <1> .outputRedir:
   388 00000F57 C6054EF1FFFF01      <1>     mov byte [redirOut], 1
   389 00000F5E 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   390 00000F61 7506                <1>     jne .notDouble
   391 00000F63 FE0543F1FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   392                              <1> .notDouble:
   393 00000F69 488D3D62F3FFFF      <1>     lea rdi, rdrOutFilespec
   394 00000F70 E8C2110000          <1>     call skipSpaces
   395 00000F75 E841000000          <1>     call copyCommandTailItem
   396 00000F7A 72B6                <1>     jc .redirExit
   397 00000F7C E8B6110000          <1>     call skipSpaces
   398 00000F81 30C0                <1>     xor al, al
   399 00000F83 EBAD                <1>     jmp short .redirExit
   400                              <1> .pipeSetup:
   401 00000F85 C6050DF1FFFFFF      <1>     mov byte [pipeFlag], -1
   402 00000F8C 30C0                <1>     xor al, al
   403 00000F8E F9                  <1>     stc
   404 00000F8F 5F                  <1>     pop rdi
   405                              <1>     return
    19                              <2> %%_ret:
    20 00000F90 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   406                              <1> 
   407                              <1> copyCommandTailItemProgram:
   408                              <1> ;Copies a program name from the command tail until a terminator is found.
   409                              <1> ;Stores a terminating null in the destination
   410                              <1> ;Input: rsi = Start of the item to copy
   411                              <1> ;       rdi = Location for copy
   412                              <1> ;Output: Sentence copied with a null terminator inserted.
   413                              <1> ; If CF=CY, embedded CR encountered
   414 00000F91 AC                  <1>     lodsb
   415 00000F92 3C0D                <1>     cmp al, CR
   416 00000F94 741A                <1>     je .endOfInput
   417 00000F96 E868110000          <1>     call isALterminator
   418 00000F9B 741A                <1>     jz .exit
   419 00000F9D 3A0580F0FFFF        <1>     cmp al, byte [pathSep]
   420 00000FA3 7412                <1>     je .exit
   421 00000FA5 3A0579F0FFFF        <1>     cmp al, byte [switchChar]
   422 00000FAB 740A                <1>     je .exit
   423 00000FAD AA                  <1>     stosb
   424 00000FAE EBE1                <1>     jmp short copyCommandTailItemProgram
   425                              <1> .endOfInput:
   426 00000FB0 E802000000          <1>     call .exit
   427 00000FB5 F9                  <1>     stc 
   428                              <1>     return
    19                              <2> %%_ret:
    20 00000FB6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   429                              <1> .exit:
   430 00000FB7 30C0                <1>     xor al, al
   431 00000FB9 AA                  <1>     stosb
   432                              <1>     return
    19                              <2> %%_ret:
    20 00000FBA C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   433                              <1> 
   434                              <1> copyCommandTailItem:
   435                              <1> ;Copies a sentence from the command tail until a terminator is found.
   436                              <1> ;Stores a terminating null in the destination
   437                              <1> ;Input: rsi = Start of the item to copy
   438                              <1> ;       rdi = Location for copy
   439                              <1> ;Output: Sentence copied with a null terminator inserted.
   440                              <1> ; If CF=CY, embedded CR encountered
   441 00000FBB AC                  <1>     lodsb
   442 00000FBC 3C0D                <1>     cmp al, CR
   443 00000FBE 743A                <1>     je .endOfInput
   444 00000FC0 E83E110000          <1>     call isALterminator
   445 00000FC5 743A                <1>     jz .exit
   446 00000FC7 3A0556F0FFFF        <1>     cmp al, byte [pathSep]
   447 00000FCD 740B                <1>     je .pathSep
   448 00000FCF 3A054FF0FFFF        <1>     cmp al, byte [switchChar]
   449 00000FD5 742A                <1>     je .exit
   450 00000FD7 AA                  <1>     stosb
   451 00000FD8 EBE1                <1>     jmp short copyCommandTailItem
   452                              <1> .pathSep:
   453                              <1> ;We look ahead, if the last char is a pathsep, we ignore it
   454 00000FDA AC                  <1>     lodsb   ;Get the next char, increment rsi by one
   455 00000FDB E823110000          <1>     call isALterminator
   456 00000FE0 741F                <1>     jz .exit
   457 00000FE2 3C0D                <1>     cmp al, CR
   458 00000FE4 7414                <1>     je .endOfInput
   459 00000FE6 3A0538F0FFFF        <1>     cmp al, byte [switchChar]
   460 00000FEC 7413                <1>     je .exit
   461 00000FEE 8A052FF0FFFF        <1>     mov al, byte [pathSep]
   462 00000FF4 AA                  <1>     stosb   ;Else store the pathsep
   463 00000FF5 48FFCE              <1>     dec rsi ;Move rsi back a piece
   464 00000FF8 EBC1                <1>     jmp short copyCommandTailItem
   465                              <1> .endOfInput:
   466 00000FFA E802000000          <1>     call .exit
   467 00000FFF F9                  <1>     stc 
   468                              <1>     return
    19                              <2> %%_ret:
    20 00001000 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   469                              <1> .exit:
   470 00001001 30C0                <1>     xor al, al
   471 00001003 AA                  <1>     stosb
   472                              <1>     return
    19                              <2> %%_ret:
    20 00001004 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   473                              <1> 
   474                              <1> 
   475                              <1> int4Eh:   ;Interrupt interface for parsing and executing command lines
   476                              <1> ;Input: rsi points to the count byte of a command line
   477 00001005 4150                <1>     push r8
   478 00001007 4151                <1>     push r9
   479 00001009 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   480 0000100B CD41                <1>     int 41h
   481 0000100D 52                  <1>     push rdx    ;Save on the stack
   482 0000100E 488D1DEBEEFFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   483 00001015 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   484 00001017 CD41                <1>     int 41h
   485 00001019 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   486 0000101C 4989D9              <1>     mov r9, rbx
   487 0000101F 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   488 00001026 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   489 0000102B F348A5              <1>     rep movsq   ;Copy command line over
   490                              <1>     ;call doCommandLine
   491 0000102E 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   492 0000102F B450                <1>     mov ah, 50h ;Set Current PSP
   493 00001031 CD41                <1>     int 41h
   494 00001033 4159                <1>     pop r9
   495 00001035 4158                <1>     pop r8
   496 00001037 48CF                <1>     iretq
    16                                  %include "./Source/Utils/COMMAND/Source/cmdFunc.asm"
    17                              <1> ;Note! Each function must setup the DTA to use for itself.
    18                              <1> ;There is no requirement to preserve the DTA across a call.
    19                              <1> ;Only the Int 4Eh entry point will preserve the callers DTA.
    20                              <1> 
    21                              <1> ;Common Error Messages, jumped to to return from
    22                              <1> badParamError:
    23 00001039 488D15DDF6FFFF      <1>     lea rdx, badParm
    24 00001040 EB22                <1>     jmp short badCmn
    25                              <1> badDriveError:
    26 00001042 488D1597F6FFFF      <1>     lea rdx, badDrv
    27 00001049 EB19                <1>     jmp short badCmn
    28                              <1> badArgError:
    29 0000104B 488D1548F9FFFF      <1>     lea rdx, badArgs
    30 00001052 EB10                <1>     jmp short badCmn
    31                              <1> badFileError:
    32 00001054 488D1523F9FFFF      <1>     lea rdx, badSpec
    33 0000105B EB07                <1>     jmp short badCmn
    34                              <1> badDirError:
    35 0000105D 488D15BAF7FFFF      <1>     lea rdx, badDir
    36                              <1> badCmn:
    37 00001064 B800090000          <1>     mov eax, 0900h
    38 00001069 CD41                <1>     int 41h
    39 0000106B F9                  <1>     stc ;Return with CY => Error occured
    40                              <1>     return
    19                              <2> %%_ret:
    20 0000106C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    41                              <1> 
    42                              <1> dir:
    43 0000106D C6052DF3FFFF00      <1>     mov byte [dirPrnType], 0    ;Clear DIR flags
    44 00001074 C60527F3FFFF00      <1>     mov byte [dirLineCtr], 0
    45 0000107B C60521F3FFFF00      <1>     mov byte [dirFileCtr], 0
    46 00001082 C6059CF3FFFF00      <1>     mov byte [dirPathArg], 0    ;Null terminate the start of the buffer
    47 00001089 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    47 00001092 3F                  <1>
    48 00001093 488D3D0BF4FFFF      <1>     lea rdi, dirSrchPat ;Start also by initialising the search pattern
    49 0000109A 48AB                <1>     stosq
    50 0000109C 48FFC7              <1>     inc rdi ;Go past dot
    51 0000109F 668907              <1>     mov word [rdi], ax
    52 000010A2 884702              <1>     mov byte [rdi + 2], al
    53                              <1>     ;Start by scanning for the switches
    54 000010A5 488D3DE3F0FFFF      <1>     lea rdi, cmdBuffer + 1  ;Goto command line input chars count
    55 000010AC 0FB60F              <1>     movzx ecx, byte [rdi]   ;Get number of chars typed
    56 000010AF 48FFC7              <1>     inc rdi ;Goto first char typed in
    57 000010B2 4889FE              <1>     mov rsi, rdi    ;Use rsi as start of buffer counter
    58 000010B5 8A0569EFFFFF        <1>     mov al, byte [switchChar]   ;Scan for switchchars
    59                              <1> .switchScan:
    60 000010BB F2AE                <1>     repne scasb ;Scan for a switchchar
    61 000010BD 67E322              <1>     jecxz .switchScanDone
    62 000010C0 8A07                <1>     mov al, byte [rdi]  ;Get the byte pointed to by rdi
    63 000010C2 24DF                <1>     and al, 0DFh    ;UC it
    64 000010C4 3C57                <1>     cmp al, "W" ;Wide print mode?
    65 000010C6 7509                <1>     jne .notWideSw
    66 000010C8 800DD2F2FFFF01      <1>     or byte [dirPrnType], 1 ;Set the correct bit
    67 000010CF EBEA                <1>     jmp short .switchScan
    68                              <1> .notWideSw:
    69 000010D1 3C50                <1>     cmp al, "P" ;Pause mode?
    70 000010D3 0F8560FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    71 000010D9 800DC1F2FFFF02      <1>     or byte [dirPrnType], 2 ;Set correct bit
    72 000010E0 EBD9                <1>     jmp short .switchScan
    73                              <1> .switchScanDone:
    74                              <1> ;If no args, only switches, we search CWD
    75                              <1> ;If one arg, search that 
    76                              <1> ;If more than one, fail
    77 000010E2 488D35A7F0FFFF      <1>     lea rsi, cmdBuffer + 2
    78 000010E9 E849100000          <1>     call skipSpaces ;Skip leading spaces
    79 000010EE 4881C603000000      <1>     add rsi, 3  ;Go past the DIR (always three chars)
    80                              <1> .loop:
    81 000010F5 E83D100000          <1>     call skipSpaces ;Skip spaces after
    82 000010FA AC                  <1>     lodsb   ;Get first non space char
    83 000010FB E826100000          <1>     call isALEndOfCommand   ;If this is the end char CR or "|", exit
    84 00001100 7442                <1>     jz .eocNoNull
    85 00001102 3A051CEFFFFF        <1>     cmp al, byte [switchChar]  ;Is al a switch char?
    86 00001108 7509                <1>     jne .notSwitch
    87                              <1>     ;Now we skip the switch if it was a switch
    88 0000110A E8BF0F0000          <1>     call findTerminatorOrEOC    ;Go past the switch
    89 0000110F 7233                <1>     jc .eocNoNull  ;If we reach the EOC, exit,
    90 00001111 EBE2                <1>     jmp short .loop
    91                              <1> .notSwitch:
    92                              <1>     ;If not a switch, should be a path. Copy to buffer and keep searching
    93 00001113 803D0BF3FFFF00      <1>     cmp byte [dirPathArg], 0    ;If a second path provided, error
    94 0000111A 0F852BFFFFFF        <1>     jne badArgError
    95 00001120 488D3DFEF2FFFF      <1>     lea rdi, dirPathArg ;Store the path to search here AS WRITTEN BY USER
    96 00001127 48FFCE              <1>     dec rsi ;Go back to the start of the string
    97                              <1> .nameCopy:
    98 0000112A AC                  <1>     lodsb
    99 0000112B E8F60F0000          <1>     call isALEndOfCommand
   100 00001130 740F                <1>     jz .eocReached
   101 00001132 E8CC0F0000          <1>     call isALterminator
   102 00001137 7403                <1>     jz .terminateCopy
   103 00001139 AA                  <1>     stosb
   104 0000113A EBEE                <1>     jmp short .nameCopy
   105                              <1> .terminateCopy:
   106 0000113C 31C0                <1>     xor eax, eax
   107 0000113E AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   108 0000113F EBB4                <1>     jmp short .loop ;Now search if another 
   109                              <1> .eocReached:
   110 00001141 31C0                <1>     xor eax, eax
   111 00001143 AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   112                              <1> .eocNoNull:
   113 00001144 803DDAF2FFFF00      <1>     cmp byte [dirPathArg], 0    ;If no path provided, use CWD for current drive
   114 0000114B 7434                <1>     je .currentDrv
   115                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   116 0000114D 488D35D1F2FFFF      <1>     lea rsi, dirPathArg
   117 00001154 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   118 00001158 7527                <1>     jne .currentDrv
   119                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   120 0000115A 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   121 0000115F 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   122 00001163 B801290000          <1>     mov eax, 2901h   ;Parse filename
   123 00001168 CD41                <1>     int 41h
   124 0000116A 3CFF                <1>     cmp al, -1
   125 0000116C 0F84D0FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   126                              <1>     ;Else the drive in the fcb is valid
   127 00001172 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   128 00001177 FEC8                <1>     dec al  ;Convert to 0 based drive number
   129 00001179 880525F2FFFF        <1>     mov byte [dirDrv], al
   130 0000117F EB0B                <1>     jmp short .dirPrintVol
   131                              <1> .currentDrv:
   132 00001181 E8340F0000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   133 00001186 880518F2FFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   134                              <1> .dirPrintVol:
   135 0000118C 0FB60511F2FFFF      <1>     movzx eax, byte [dirDrv] 
   136 00001193 E806080000          <1>     call volume.dirEP
   137 00001198 803D86F2FFFF00      <1>     cmp byte [dirPathArg], 0    ;Null path here, 
   138 0000119F 7409                <1>     je .printCWD
   139 000011A1 803D80F2FFFF00      <1>     cmp byte [dirPathArg + 3], 0    ;Was this X:,0?
   140 000011A8 7400                <1>     je .printCWD
   141                              <1>     ;Here we have a path
   142                              <1>     ;Temp measure, we just fall through ignoring the path provided
   143                              <1> .printCWD:
   144 000011AA 8A15F4F1FFFF        <1>     mov dl, byte [dirDrv]
   145 000011B0 88D0                <1>     mov al, dl
   146 000011B2 0441                <1>     add al, "A"
   147 000011B4 B43A                <1>     mov ah, ":"
   148 000011B6 66890564F1FFFF      <1>     mov word [searchSpec], ax
   149 000011BD 8A0560EEFFFF        <1>     mov al, byte [pathSep]
   150 000011C3 88055AF1FFFF        <1>     mov byte [searchSpec + 2], al
   151 000011C9 488D3554F1FFFF      <1>     lea rsi, searchSpec + 3  ;Make space for a X:"\"
   152 000011D0 B447                <1>     mov ah, 47h ;Get Current Working Directory
   153 000011D2 FEC2                <1>     inc dl  ;Convert to 1 based number
   154 000011D4 CD41                <1>     int 41h
   155 000011D6 488D3D44F1FFFF      <1>     lea rdi, searchSpec
   156 000011DD E8DD0E0000          <1>     call strlen
   157 000011E2 FFC9                <1>     dec ecx
   158 000011E4 C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   159 000011E8 488D1597F6FFFF      <1>     lea rdx, dirMain
   160 000011EF B409                <1>     mov ah, 09h
   161 000011F1 CD41                <1>     int 41h
   162 000011F3 4889FA              <1>     mov rdx, rdi    ;Print the current directory we are working on
   163 000011F6 B409                <1>     mov ah, 09h
   164 000011F8 CD41                <1>     int 41h
   165 000011FA 488D1576F3FFFF      <1>     lea rdx, crlf2
   166 00001201 B409                <1>     mov ah, 09h
   167 00001203 CD41                <1>     int 41h
   168 00001205 E801000000          <1>     call .searchForFile
   169                              <1>     return
    19                              <2> %%_ret:
    20 0000120A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   170                              <1>     ;If we get no path spec or just a X: path spec then we 
   171                              <1>     ; search the current working directory for that pathspec
   172                              <1>     ;If we get an actual pathspec, we first save the CWD for that drive
   173                              <1>     ; and then we try to make the pathspec the CWD. 
   174                              <1>     ;   If it works, we then search *.* in that folder and return the og CWD.
   175                              <1>     ;   If it fails, we then search one level up, for the search pattern
   176                              <1>     ;    that we compute.
   177                              <1> 
   178                              <1>     
   179                              <1>     ;Now we need to print the path to the folder we will be searching in
   180                              <1> .searchForFile:
   181                              <1>     ;Now we search for the files
   182                              <1>     ;RCX must have the number of chars to the end of the pathspec
   183 0000120B 488D3D0FF1FFFF      <1>     lea rdi, searchSpec
   184 00001212 8A050BEEFFFF        <1>     mov al, byte [pathSep]
   185 00001218 38440FFF            <1>     cmp byte [rdi + rcx - 1], al
   186 0000121C 7405                <1>     je .noAddSlash  ;Deals with special case of root dir
   187 0000121E 88040F              <1>     mov byte [rdi + rcx], al
   188 00001221 FFC1                <1>     inc ecx
   189                              <1> .noAddSlash:
   190 00001223 488D3C0F            <1>     lea rdi, qword [rdi + rcx]
   191 00001227 488D3577F2FFFF      <1>     lea rsi, dirSrchPat
   192 0000122E 4889FA              <1>     mov rdx, rdi    ;Ptr to search for in rdx
   193 00001231 48A5                <1>     movsq
   194 00001233 A5                  <1>     movsd
   195 00001234 30C0                <1>     xor al, al
   196 00001236 AA                  <1>     stosb   ;Store the terminating null
   197 00001237 B911000000          <1>     mov ecx, dirReadOnly | dirDirectory
   198 0000123C B44E                <1>     mov ah, 4Eh ;Find first
   199 0000123E CD41                <1>     int 41h
   200 00001240 720B                <1>     jc .dirNoMoreFiles
   201                              <1> .findNext:
   202 00001242 E878000000          <1>     call .dirPrintFileData  ;Print the file information
   203 00001247 B44F                <1>     mov ah, 4Fh
   204 00001249 CD41                <1>     int 41h
   205 0000124B 73F5                <1>     jnc .findNext 
   206                              <1> .dirNoMoreFiles:
   207 0000124D F6054DF1FFFF01      <1>     test byte [dirPrnType], 1
   208 00001254 740B                <1>     jz .dirNoEndNewLine
   209 00001256 488D1517F3FFFF      <1>     lea rdx, crlf   ;Only need this for /W
   210 0000125D B409                <1>     mov ah, 09h
   211 0000125F CD41                <1>     int 41h
   212                              <1> .dirNoEndNewLine:
   213                              <1>     ;Now we print the number of files and the number of bytes on the disk
   214 00001261 488D1594F8FFFF      <1>     lea rdx, fourSpc
   215 00001268 B409                <1>     mov ah, 09h
   216 0000126A CD41                <1>     int 41h
   217 0000126C B409                <1>     mov ah, 09h ;Print four Spaces twice
   218 0000126E CD41                <1>     int 41h
   219 00001270 0FB6052CF1FFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   220 00001277 E83C100000          <1>     call printDecimalWord
   221 0000127C 488D153CF4FFFF      <1>     lea rdx, dirOk
   222 00001283 B409                <1>     mov ah, 09h
   223 00001285 CD41                <1>     int 41h
   224 00001287 488D1573F8FFFF      <1>     lea rdx, threeSpc
   225 0000128E B409                <1>     mov ah, 09h
   226 00001290 CD41                <1>     int 41h
   227 00001292 B800360000          <1>     mov eax, 3600h ;Get disk info
   228 00001297 8A1507F1FFFF        <1>     mov dl, byte [dirDrv]
   229 0000129D FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   230 0000129F CD41                <1>     int 41h ;Get disk free space info
   231 000012A1 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   232 000012A4 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   233 000012A7 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   234 000012A9 F7E1                <1>     mul ecx ;Get bytes per cluster
   235 000012AB 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   236                              <1>     ;rax now has the number of free bytes on the disk
   237 000012AE E805100000          <1>     call printDecimalWord
   238 000012B3 488D150FF4FFFF      <1>     lea rdx, bytesOk
   239 000012BA B409                <1>     mov ah, 09h
   240 000012BC CD41                <1>     int 41h
   241                              <1>     return
    19                              <2> %%_ret:
    20 000012BE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   242                              <1> 
   243                              <1> .dirPrintFileData:
   244                              <1> ;Use fcbCmdSpec to build the file name with space
   245                              <1> ;Start by print the name (same for both cases)
   246                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   247 000012BF F60512EEFFFF06      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles
   248                              <1>     retnz   ;Simply return if either bit is set
    51                              <2> cret nz
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000012C6 75(BE)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   249 000012C8 488D3512EEFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   250 000012CF 488D3D87EFFFFF      <1>     lea rdi, fcbCmdSpec
   251 000012D6 E8B50E0000          <1>     call asciiFilenameToFCB
   252 000012DB 488D157BEFFFFF      <1>     lea rdx, fcbCmdSpec
   253 000012E2 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   254 000012E7 BB01000000          <1>     mov ebx, 1  ;STDOUT
   255 000012EC B440                <1>     mov ah, 40h ;Write handle
   256 000012EE CD41                <1>     int 41h
   257 000012F0 52                  <1>     push rdx
   258 000012F1 B220                <1>     mov dl, " "
   259 000012F3 B402                <1>     mov ah, 02h ;Print char
   260 000012F5 CD41                <1>     int 41h
   261 000012F7 5A                  <1>     pop rdx
   262 000012F8 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   263 000012FF B903000000          <1>     mov ecx, 3  ;Print three chars
   264 00001304 BB01000000          <1>     mov ebx, 1  ;STDOUT
   265 00001309 B440                <1>     mov ah, 40h ;Write handle
   266 0000130B CD41                <1>     int 41h
   267 0000130D F6058DF0FFFF01      <1>     test byte [dirPrnType], 1
   268 00001314 0F85A8000000        <1>     jnz .widePrint
   269                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   270                              <1>     ;Now check if a DIR
   271 0000131A F605B7EDFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   272 00001321 7418                <1>     jz .dirPrintNotDir
   273 00001323 488D15ADF3FFFF      <1>     lea rdx, dirLbl
   274 0000132A B409                <1>     mov ah, 09h
   275 0000132C CD41                <1>     int 41h
   276 0000132E 488D15CCF7FFFF      <1>     lea rdx, threeSpc
   277 00001335 B409                <1>     mov ah, 09h
   278 00001337 CD41                <1>     int 41h
   279 00001339 EB4F                <1>     jmp short .dirPrintFileDT
   280                              <1> .dirPrintNotDir:
   281                              <1> ;Here we print the file size
   282 0000133B B220                <1>     mov dl, " "
   283 0000133D B402                <1>     mov ah, 02h
   284 0000133F CD41                <1>     int 41h
   285 00001341 8B0596EDFFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   286 00001347 E8DD0F0000          <1>     call getDecimalWord
   287 0000134C 4889CB              <1>     mov rbx, rcx
   288 0000134F 51                  <1>     push rcx
   289 00001350 480FCB              <1>     bswap rbx
   290 00001353 B908000000          <1>     mov ecx, 8
   291                              <1> .dirPrintFileSizePrep:
   292 00001358 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   293 0000135A 7514                <1>     jne .dirPrintFileSize
   294 0000135C B402                <1>     mov ah, 02h
   295 0000135E B220                <1>     mov dl, " "
   296 00001360 CD41                <1>     int 41h
   297 00001362 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   298 00001366 FFC9                <1>     dec ecx
   299 00001368 81F901000000        <1>     cmp ecx, 1
   300 0000136E 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   301                              <1> .dirPrintFileSize:
   302 00001370 5B                  <1>     pop rbx
   303                              <1> .dirPrintFileSizeLoop:
   304 00001371 88DA                <1>     mov dl, bl
   305 00001373 B402                <1>     mov ah, 02h
   306 00001375 CD41                <1>     int 41h
   307 00001377 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   308 0000137B FFC9                <1>     dec ecx
   309 0000137D 75F2                <1>     jnz .dirPrintFileSizeLoop
   310 0000137F 488D157FF7FFFF      <1>     lea rdx, twoSpc
   311 00001386 B409                <1>     mov ah, 09h
   312 00001388 CD41                <1>     int 41h
   313                              <1> .dirPrintFileDT:
   314 0000138A B220                <1>     mov dl, " "
   315 0000138C B402                <1>     mov ah, 02h
   316 0000138E CD41                <1>     int 41h
   317 00001390 0FB70544EDFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   318 00001397 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   319 00001399 E8720A0000          <1>     call printDate
   320 0000139E 488D1560F7FFFF      <1>     lea rdx, twoSpc
   321 000013A5 B409                <1>     mov ah, 09h
   322 000013A7 CD41                <1>     int 41h
   323 000013A9 0FB70529EDFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   324 000013B0 E87D0B0000          <1>     call printTime
   325 000013B5 488D15B8F1FFFF      <1>     lea rdx, crlf
   326 000013BC B409                <1>     mov ah, 09h
   327 000013BE CD41                <1>     int 41h
   328 000013C0 EB0B                <1>     jmp short .dirPrintNameExit
   329                              <1> .widePrint:
   330                              <1> ;If /W, print name space ext space space space space
   331 000013C2 488D1533F7FFFF      <1>     lea rdx, fourSpc
   332 000013C9 B409                <1>     mov ah, 09h ;Print string
   333 000013CB CD41                <1>     int 41h
   334                              <1> .dirPrintNameExit:
   335 000013CD FE05D0EFFFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   336 000013D3 FE05C9EFFFFF        <1>     inc byte [dirLineCtr]
   337 000013D9 803DC2EFFFFF17      <1>     cmp byte [dirLineCtr], 23
   338                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 000013E0 7401                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 000013E2 C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   339 000013E3 488D1514F3FFFF      <1>     lea rdx, pauseMes
   340 000013EA B409                <1>     mov ah, 09h
   341 000013EC CD41                <1>     int 41h
   342 000013EE B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   343 000013F0 CD41                <1>     int 41h
   344 000013F2 C605A9EFFFFF00      <1>     mov byte [dirLineCtr], 0
   345 000013F9 488D1574F1FFFF      <1>     lea rdx, crlf   ;Force new line
   346 00001400 B409                <1>     mov ah, 09h
   347 00001402 CD41                <1>     int 41h
   348                              <1>     return
    19                              <2> %%_ret:
    20 00001404 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   349                              <1> 
   350                              <1> chdir:
   351 00001405 F605A1ECFFFFFF      <1>     test byte [arg1Flg], -1
   352 0000140C 754D                <1>     jnz .changeDir
   353                              <1>     ;Print CWD
   354                              <1> .printCWD:
   355 0000140E E8000C0000          <1>     call putCWDInPrompt ;Exactly the same procedure
   356 00001413 E8E2090000          <1>     call printCRLF
   357                              <1>     return
    19                              <2> %%_ret:
    20 00001418 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   358                              <1> .printDiskCWD:
   359                              <1> ;Print CWD for a specified drive
   360 00001419 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   361 0000141D 88D0                <1>     mov al, dl
   362 0000141F 0440                <1>     add al, "@" ;Get the UC letter
   363 00001421 B43A                <1>     mov ah, ":"
   364 00001423 488D3DF7EEFFFF      <1>     lea rdi, searchSpec
   365 0000142A 66AB                <1>     stosw   ;Store X:, rdi+=2
   366 0000142C 8A05F1EBFFFF        <1>     mov al, byte [pathSep]
   367 00001432 AA                  <1>     stosb   ;Store pathSep, inc rdi
   368 00001433 B447                <1>     mov ah, 47h ;Get Current Working Directory
   369 00001435 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   370 00001438 CD41                <1>     int 41h
   371 0000143A E8800C0000          <1>     call strlen
   372 0000143F 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   373 00001445 B440                <1>     mov ah, 40h ;Write to handle
   374 00001447 BB01000000          <1>     mov ebx, 1  ;STDOUT
   375 0000144C 488D15CEEEFFFF      <1>     lea rdx, searchSpec
   376 00001453 CD41                <1>     int 41h
   377 00001455 E8A0090000          <1>     call printCRLF
   378                              <1>     return
    19                              <2> %%_ret:
    20 0000145A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   379                              <1> .changeDir:
   380 0000145B 8A054EECFFFF        <1>     mov al, byte [arg1FCBret]
   381 00001461 3CFF                <1>     cmp al, -1 
   382 00001463 0F84D9FBFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   383 00001469 4180785D20          <1>     cmp byte [r8 + fcb1 + fcb.filename], " "
   384 0000146E 7520                <1>     jne .getFQPath
   385                              <1>     ;Now we double check that on the command line we have . or ..
   386 00001470 0FB60537ECFFFF      <1>     movzx eax, byte [arg1Off]
   387 00001477 488D3510EDFFFF      <1>     lea rsi, cmdBuffer
   388 0000147E 4801C6              <1>     add rsi, rax
   389 00001481 8A059CEBFFFF        <1>     mov al, byte [pathSep]
   390 00001487 3806                <1>     cmp byte [rsi], al  ;Is the first char a pathsep?
   391 00001489 7405                <1>     je .getFQPath
   392 0000148B 803E2E              <1>     cmp byte [rsi], "."
   393 0000148E 7589                <1>     jne .printDiskCWD
   394                              <1>     ;If the path is . or .., its acceptable, else fail
   395                              <1> .getFQPath:
   396 00001490 E8850D0000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   397 00001495 0F82C2FBFFFF        <1>     jc badDirError  ;If this returns CF=CY, its a badDir
   398 0000149B 488D157FEEFFFF      <1>     lea rdx, searchSpec
   399 000014A2 B43B                <1>     mov ah, 3Bh ;CHDIR
   400 000014A4 CD41                <1>     int 41h
   401 000014A6 0F82B1FBFFFF        <1>     jc badDirError
   402                              <1>     return
    19                              <2> %%_ret:
    20 000014AC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   403                              <1> 
   404                              <1> mkdir:
   405 000014AD F605F9EBFFFFFF      <1>     test byte [arg1Flg], -1
   406 000014B4 0F8491FBFFFF        <1>     jz badArgError
   407 000014BA F605EFEBFFFFFF      <1>     test byte [arg2Flg], -1
   408 000014C1 0F8584FBFFFF        <1>     jnz badArgError
   409                              <1>     ;We have exactly one argument
   410 000014C7 8A05E2EBFFFF        <1>     mov al, byte [arg1FCBret]
   411 000014CD 3CFF                <1>     cmp al, -1 
   412 000014CF 0F846DFBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   413 000014D5 E8400D0000          <1>     call buildCommandPath
   414 000014DA 488D1540EEFFFF      <1>     lea rdx, searchSpec
   415 000014E1 B800390000          <1>     mov eax, 3900h  ;MKDIR
   416 000014E6 CD41                <1>     int 41h
   417                              <1>     retnc
    67                              <2> cret nc
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000014E8 73(AC)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   418                              <1> .badMake:   ;Else, bad make
   419 000014EA 488D1541F3FFFF      <1>     lea rdx, badMD
   420 000014F1 B800090000          <1>     mov eax, 0900h
   421 000014F6 CD41                <1>     int 41h
   422                              <1>     return
    19                              <2> %%_ret:
    20 000014F8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   423                              <1> 
   424                              <1> rmdir:
   425 000014F9 F605ADEBFFFFFF      <1>     test byte [arg1Flg], -1
   426 00001500 0F8445FBFFFF        <1>     jz badArgError
   427 00001506 F605A3EBFFFFFF      <1>     test byte [arg2Flg], -1
   428 0000150D 0F8538FBFFFF        <1>     jnz badArgError
   429                              <1>     ;We have exactly one argument
   430 00001513 8A0596EBFFFF        <1>     mov al, byte [arg1FCBret]
   431 00001519 3CFF                <1>     cmp al, -1 
   432 0000151B 0F8421FBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   433 00001521 E8F40C0000          <1>     call buildCommandPath
   434 00001526 488D15F4EDFFFF      <1>     lea rdx, searchSpec
   435 0000152D B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   436 00001532 CD41                <1>     int 41h
   437                              <1>     retnc   ;Return if not carry
    67                              <2> cret nc
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001534 73(F8)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   438                              <1> .badRemove:   ;Else, bad make
   439 00001536 488D1512F3FFFF      <1>     lea rdx, badRD
   440 0000153D B800090000          <1>     mov eax, 0900h
   441 00001542 CD41                <1>     int 41h
   442                              <1>     return
    19                              <2> %%_ret:
    20 00001544 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   443                              <1> 
   444                              <1> copy:
   445                              <1>     return
    19                              <2> %%_ret:
    20 00001545 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   446                              <1> erase:
   447 00001546 F60560EBFFFFFF      <1>     test byte [arg1Flg], -1
   448 0000154D 0F84F8FAFFFF        <1>     jz badArgError
   449 00001553 E8C20C0000          <1>     call buildCommandPath
   450 00001558 488D15C2EDFFFF      <1>     lea rdx, searchSpec
   451 0000155F B800410000          <1>     mov eax, 4100h  ;Delete File 
   452 00001564 31C9                <1>     xor ecx, ecx
   453 00001566 CD41                <1>     int 41h
   454 00001568 0F82DDFAFFFF        <1>     jc badArgError
   455                              <1>     return
    19                              <2> %%_ret:
    20 0000156E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   456                              <1> date:
   457 0000156F 488D15DFF1FFFF      <1>     lea rdx, curDate
   458 00001576 B409                <1>     mov ah, 09h
   459 00001578 CD41                <1>     int 41h
   460 0000157A B42A                <1>     mov ah, 2Ah ;DOS get date
   461 0000157C CD41                <1>     int 41h
   462                              <1> 	;AL = day of the week (0=Sunday)
   463                              <1> 	;CX = year (1980-2099)
   464                              <1> 	;DH = month (1-12)
   465                              <1> 	;DL = day (1-31)
   466 0000157E 66890D40EFFFFF      <1>     mov word [td1], cx
   467 00001585 88153CEFFFFF        <1>     mov byte [td3], dl
   468 0000158B 883537EFFFFF        <1>     mov byte [td4], dh
   469 00001591 0FB6C0              <1>     movzx eax, al
   470 00001594 89C3                <1>     mov ebx, eax
   471 00001596 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   472 00001598 01D8                <1>     add eax, ebx ;Make it 3 times 
   473 0000159A 488D1590F1FFFF      <1>     lea rdx, dayName
   474 000015A1 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   475 000015A5 B903000000          <1>     mov ecx, 3  ;Print three chars
   476 000015AA BB01000000          <1>     mov ebx, 1  ;STDOUT
   477 000015AF B440                <1>     mov ah, 40h ;Write to handle
   478 000015B1 CD41                <1>     int 41h
   479 000015B3 B220                <1>     mov dl, " "
   480 000015B5 B402                <1>     mov ah, 02h
   481 000015B7 CD41                <1>     int 41h
   482                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   483                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   484                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   485 000015B9 0FB70505EFFFFF      <1>     movzx eax, word [td1]   ;Get this word
   486 000015C0 C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   487 000015C3 0FB61DFEEEFFFF      <1>     movzx ebx, byte [td4]
   488 000015CA C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   489 000015CD 09D8                <1>     or eax, ebx ;Add this date to eax
   490 000015CF 0FB61DF1EEFFFF      <1>     movzx ebx, byte [td3]
   491 000015D6 09D8                <1>     or eax, ebx
   492 000015D8 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   493 000015DD E82E080000          <1>     call printDate
   494                              <1> 
   495 000015E2 488D157DF1FFFF      <1>     lea rdx, newDate
   496 000015E9 B409                <1>     mov ah, 09h
   497 000015EB CD41                <1>     int 41h
   498 000015ED 488D1591F1FFFF      <1>     lea rdx, ukDate
   499 000015F4 488D057DF1FFFF      <1>     lea rax, usDate
   500 000015FB 488D1D90F1FFFF      <1>     lea rbx, jpDate
   501 00001602 803D25EAFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   502 00001609 480F47D3            <1>     cmova rdx, rbx
   503 0000160D 480F42D0            <1>     cmovb rdx, rax
   504 00001611 B409                <1>     mov ah, 09h
   505 00001613 CD41                <1>     int 41h
   506                              <1> 
   507 00001615 498D9080000000      <1>     lea rdx, qword [r8 + cmdLineCnt]
   508 0000161C B40A                <1>     mov ah, 0Ah
   509 0000161E CD41                <1>     int 41h
   510 00001620 52                  <1>     push rdx
   511 00001621 488D154CEFFFFF      <1>     lea rdx, crlf
   512 00001628 B409                <1>     mov ah, 09h
   513 0000162A CD41                <1>     int 41h
   514 0000162C 5A                  <1>     pop rdx
   515 0000162D 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   516                              <1>     rete    ;Exit!
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 00001631 7501                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 00001633 C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   517                              <1>     return
    19                              <2> %%_ret:
    20 00001634 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   518                              <1> 
   519                              <1> time:
   520 00001635 488D1572F1FFFF      <1>     lea rdx, curTime
   521 0000163C B409                <1>     mov ah, 09h
   522 0000163E CD41                <1>     int 41h
   523 00001640 B42C                <1>     mov ah, 2Ch ;DOS get time
   524 00001642 CD41                <1>     int 41h
   525                              <1>     ;CH = hour (0-23)
   526                              <1> 	;CL = minutes (0-59)
   527                              <1> 	;DH = seconds (0-59)
   528                              <1> 	;DL = hundredths (0-99)
   529 00001644 880D7BEEFFFF        <1>     mov byte [td1], cl
   530 0000164A 882D76EEFFFF        <1>     mov byte [td2], ch
   531 00001650 881571EEFFFF        <1>     mov byte [td3], dl
   532 00001656 88356CEEFFFF        <1>     mov byte [td4], dh
   533 0000165C 0FB6C5              <1>     movzx eax, ch
   534 0000165F E840090000          <1>     call printTime.printHours
   535                              <1> 
   536 00001664 8A15D1E9FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   537 0000166A B402                <1>     mov ah, 02h
   538 0000166C CD41                <1>     int 41h
   539                              <1> 
   540 0000166E 0FB60550EEFFFF      <1>     movzx eax, byte [td1]   ;Minutes
   541 00001675 E81A090000          <1>     call printTime.printMinutesAlt
   542                              <1> 
   543 0000167A 8A15BBE9FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   544 00001680 B402                <1>     mov ah, 02h
   545 00001682 CD41                <1>     int 41h
   546                              <1> 
   547 00001684 0FB6053DEEFFFF      <1>     movzx eax, byte [td4]   ;Seconds
   548 0000168B E804090000          <1>     call printTime.printMinutesAlt
   549                              <1> 
   550 00001690 B22E                <1>     mov dl, "."
   551 00001692 B402                <1>     mov ah, 02h
   552 00001694 CD41                <1>     int 41h
   553                              <1> 
   554 00001696 0FB6052AEEFFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   555 0000169D E8F2080000          <1>     call printTime.printMinutesAlt
   556                              <1> 
   557 000016A2 488D1516F1FFFF      <1>     lea rdx, newTime
   558 000016A9 B409                <1>     mov ah, 09h
   559 000016AB CD41                <1>     int 41h
   560                              <1> 
   561 000016AD 498D9080000000      <1>     lea rdx, qword [r8 + cmdLineCnt]
   562 000016B4 B40A                <1>     mov ah, 0Ah
   563 000016B6 CD41                <1>     int 41h
   564 000016B8 52                  <1>     push rdx
   565 000016B9 488D15B4EEFFFF      <1>     lea rdx, crlf
   566 000016C0 B409                <1>     mov ah, 09h
   567 000016C2 CD41                <1>     int 41h
   568 000016C4 5A                  <1>     pop rdx
   569 000016C5 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   570                              <1>     rete    ;Exit!
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 000016C9 7501                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 000016CB C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   571                              <1>     return
    19                              <2> %%_ret:
    20 000016CC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   572                              <1> ctty:
   573 000016CD F605D9E9FFFFFF      <1>     test byte [arg1Flg], -1
   574 000016D4 0F8471F9FFFF        <1>     jz badArgError
   575 000016DA F605CFE9FFFFFF      <1>     test byte [arg2Flg], -1
   576 000016E1 0F8564F9FFFF        <1>     jnz badArgError
   577 000016E7 488D35A0EAFFFF      <1>     lea rsi, cmdBuffer
   578 000016EE 0FB605B9E9FFFF      <1>     movzx eax, byte [arg1Off]
   579 000016F5 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
   580 000016F8 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
   581 000016FC 750F                <1>     jne .noDrive
   582 000016FE 0FB605AAE9FFFF      <1>     movzx eax, byte [arg1FCBret]
   583 00001705 3CFF                <1>     cmp al, -1
   584 00001707 0F8435F9FFFF        <1>     je badDriveError
   585                              <1> .noDrive:
   586                              <1>     ;Now we open the provided file
   587 0000170D E88B0C0000          <1>     call copyArgumentToSearchSpec
   588 00001712 488D1508ECFFFF      <1>     lea rdx, searchSpec
   589 00001719 B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
   590 0000171E CD41                <1>     int 41h
   591 00001720 0F822EF9FFFF        <1>     jc badFileError
   592 00001726 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
   593 00001729 B800440000          <1>     mov eax, 4400h  ;Get device word
   594 0000172E CD41                <1>     int 41h
   595 00001730 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
   596 00001733 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
   597                              <1>     ;Now we set this handle to be STDIO
   598 00001735 80CA03              <1>     or dl, 3    ;Set STDIO bits
   599 00001738 30F6                <1>     xor dh, dh
   600 0000173A B801440000          <1>     mov eax, 4401h  ;Now we set the device word
   601 0000173F CD41                <1>     int 41h
   602                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
   603 00001741 31C9                <1>     xor ecx, ecx    ;STDIN
   604 00001743 B446                <1>     mov ah, 46h
   605 00001745 CD41                <1>     int 41h
   606 00001747 FFC1                <1>     inc ecx         ;STDOUT
   607 00001749 B446                <1>     mov ah, 46h
   608 0000174B CD41                <1>     int 41h
   609 0000174D FFC1                <1>     inc ecx         ;STDERR
   610 0000174F B446                <1>     mov ah, 46h
   611 00001751 CD41                <1>     int 41h
   612 00001753 B43E                <1>     mov ah, 3Eh ;Now we close the original handle
   613 00001755 CD41                <1>     int 41h
   614                              <1>     return
    19                              <2> %%_ret:
    20 00001757 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   615                              <1> .badCharDev:
   616 00001758 488D155FF1FFFF      <1>     lea rdx, badDev
   617 0000175F B409                <1>     mov ah, 09h
   618 00001761 CD41                <1>     int 41h
   619 00001763 B43E                <1>     mov ah, 3Eh ;Close opened handle
   620 00001765 CD41                <1>     int 41h
   621                              <1>     return
    19                              <2> %%_ret:
    20 00001767 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   622                              <1> 
   623                              <1> cls:  
   624 00001768 B800440000          <1>     mov eax, 4400h  ;Get device info
   625 0000176D BB01000000          <1>     mov ebx, 1      ;for handle 1
   626 00001772 CD41                <1>     int 41h         ;in dx
   627 00001774 F7C280000000        <1>     test edx, devCharDev
   628 0000177A 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   629 0000177C F7C210000000        <1>     test edx, charDevFastOut
   630 00001782 743E                <1>     jz .doAnsi
   631                              <1>     ;Test if Int 49h uses Int 30h
   632                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   633                              <1>     ;Int 49h MUST be terminated with a IRETQ, within 1024 bytes
   634 00001784 B849350000          <1>     mov eax, 3549h  ;Get the vector for interrupt 49h
   635 00001789 CD41                <1>     int 41h
   636                              <1> .biosCheck:
   637 0000178B 66813BCD30          <1>     cmp word [rbx], 30CDh
   638 00001790 740C                <1>     je .biosConfirmed
   639 00001792 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   640 00001797 7429                <1>     je .doAnsi
   641 00001799 48FFC3              <1>     inc rbx
   642 0000179C EBED                <1>     jmp short .biosCheck
   643                              <1> .biosConfirmed:
   644                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   645 0000179E B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   646 000017A0 31DB                <1>     xor ebx, ebx
   647 000017A2 CD30                <1>     int 30h
   648 000017A4 B40F                <1>     mov ah, 0Fh ;Get screen mode
   649 000017A6 CD30                <1>     int 30h
   650 000017A8 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   651 000017AB FECA                <1>     dec dl
   652 000017AD B619                <1>     mov dh, 25  ;Number of rows is standard
   653 000017AF 31C0                <1>     xor eax, eax
   654 000017B1 89C1                <1>     mov ecx, eax
   655 000017B3 B707                <1>     mov bh, 7   ;Screen attributes
   656 000017B5 B406                <1>     mov ah, 6   ;Scroll
   657 000017B7 CD30                <1>     int 30h
   658 000017B9 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   659 000017BB B700                <1>     mov bh, 0   ;Page 0
   660 000017BD B402                <1>     mov ah, 2
   661 000017BF CD30                <1>     int 30h
   662                              <1>     return
    19                              <2> %%_ret:
    20 000017C1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   663                              <1> .doAnsi:
   664                              <1> ;If an ANSI driver is not installed, this will simply insert blank lines
   665                              <1> ;4 chars in the ansi routine
   666                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   667                              <1> ; understand ANSI codes
   668 000017C2 488D352FF3FFFF      <1>     lea rsi, ansiCls
   669 000017C9 B904000000          <1>     mov ecx, 4
   670 000017CE B406                <1>     mov ah, 06h ;Raw char output
   671                              <1> .ansiLp:
   672 000017D0 AC                  <1>     lodsb   ;Get the char in 
   673 000017D1 88C2                <1>     mov dl, al
   674 000017D3 CD41                <1>     int 41h
   675 000017D5 FFC9                <1>     dec ecx
   676 000017D7 75F7                <1>     jnz .ansiLp
   677                              <1>     return
    19                              <2> %%_ret:
    20 000017D9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   678                              <1> 
   679                              <1> break:
   680 000017DA F605CCE8FFFFFF      <1>     test byte [arg1Flg], -1
   681 000017E1 752D                <1>     jnz .argumentProvided
   682                              <1>     ;Here we just get the status of break
   683 000017E3 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   684 000017E8 CD41                <1>     int 41h
   685 000017EA 88D3                <1>     mov bl, dl
   686 000017EC 488D156DF1FFFF      <1>     lea rdx, breakIs
   687 000017F3 B409                <1>     mov ah, 09h
   688 000017F5 CD41                <1>     int 41h
   689 000017F7 488D155DF1FFFF      <1>     lea rdx, onMes
   690 000017FE 488D0D50F1FFFF      <1>     lea rcx, offMes
   691 00001805 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   692 00001807 480F44D1            <1>     cmovz rdx, rcx
   693 0000180B B409                <1>     mov ah, 09h
   694 0000180D CD41                <1>     int 41h
   695                              <1>     return
    19                              <2> %%_ret:
    20 0000180F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   696                              <1> .argumentProvided:
   697 00001810 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   698 00001814 AD                  <1>     lodsd   ;Read the word
   699 00001815 89C3                <1>     mov ebx, eax
   700 00001817 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   701 0000181C C1EB10              <1>     shr ebx, 10h     ;Get high word low
   702 0000181F 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   703 00001824 7416                <1>     je .maybeOn
   704 00001826 663D4F46            <1>     cmp ax, "OF"
   705 0000182A 7523                <1>     jne .badOnOff
   706 0000182C 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   707 00001831 6681FB4620          <1>     cmp bx, "F "
   708 00001836 7517                <1>     jne .badOnOff
   709                              <1>     ;Set off
   710 00001838 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   711 0000183A EB0B                <1>     jmp short .setBreak
   712                              <1> .maybeOn:
   713 0000183C 663D4F4E            <1>     cmp ax, "ON"
   714 00001840 750D                <1>     jne .badOnOff
   715                              <1>     ;Set on
   716 00001842 BA01000000          <1>     mov edx, 1
   717                              <1> .setBreak:
   718 00001847 B801330000          <1>     mov eax, 3301h  ;Set break
   719 0000184C CD41                <1>     int 41h
   720                              <1>     return
    19                              <2> %%_ret:
    20 0000184E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   721                              <1> .badOnOff:
   722 0000184F 488D15B2F2FFFF      <1>     lea rdx, badOnOff
   723 00001856 B409                <1>     mov ah, 09h
   724 00001858 CD41                <1>     int 41h
   725                              <1>     return
    19                              <2> %%_ret:
    20 0000185A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   726                              <1> 
   727                              <1> verify:
   728 0000185B F6054BE8FFFFFF      <1>     test byte [arg1Flg], -1
   729 00001862 752D                <1>     jnz .argumentProvided
   730                              <1>     ;Here we just get the status of break
   731 00001864 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
   732 00001869 CD41                <1>     int 41h
   733 0000186B 88C3                <1>     mov bl, al
   734 0000186D 488D15F6F0FFFF      <1>     lea rdx, verifyIs
   735 00001874 B409                <1>     mov ah, 09h
   736 00001876 CD41                <1>     int 41h
   737 00001878 488D15DCF0FFFF      <1>     lea rdx, onMes
   738 0000187F 488D0DCFF0FFFF      <1>     lea rcx, offMes
   739 00001886 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   740 00001888 480F44D1            <1>     cmovz rdx, rcx
   741 0000188C B409                <1>     mov ah, 09h
   742 0000188E CD41                <1>     int 41h
   743                              <1>     return
    19                              <2> %%_ret:
    20 00001890 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   744                              <1> .argumentProvided:
   745 00001891 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   746 00001895 AD                  <1>     lodsd   ;Read the word
   747 00001896 89C3                <1>     mov ebx, eax
   748 00001898 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   749 0000189D C1EB10              <1>     shr ebx, 10h     ;Get high word low
   750 000018A0 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   751 000018A5 7416                <1>     je .maybeOn
   752 000018A7 663D4F46            <1>     cmp ax, "OF"
   753 000018AB 751F                <1>     jne .badOnOff
   754 000018AD 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   755 000018B2 6681FB4620          <1>     cmp bx, "F "
   756 000018B7 7513                <1>     jne .badOnOff
   757                              <1>     ;Set off
   758 000018B9 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
   759 000018BB EB0A                <1>     jmp short .setVerify
   760                              <1> .maybeOn:
   761 000018BD 663D4F4E            <1>     cmp ax, "ON"
   762 000018C1 7509                <1>     jne .badOnOff
   763                              <1>     ;Set on
   764 000018C3 31C0                <1>     xor eax, eax
   765 000018C5 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
   766                              <1> .setVerify:
   767 000018C7 B42E                <1>     mov ah, 2Eh  ;Set Verify
   768 000018C9 CD41                <1>     int 41h
   769                              <1>     return
    19                              <2> %%_ret:
    20 000018CB C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   770                              <1> .badOnOff:
   771 000018CC 488D1535F2FFFF      <1>     lea rdx, badOnOff
   772 000018D3 B409                <1>     mov ah, 09h
   773 000018D5 CD41                <1>     int 41h
   774                              <1>     return
    19                              <2> %%_ret:
    20 000018D7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   775                              <1> 
   776                              <1> rename:
   777                              <1>     return
    19                              <2> %%_ret:
    20 000018D8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   778                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   779                              <1> touch:
   780                              <1> ;Temporarily used to create files
   781 000018D9 F605CDE7FFFFFF      <1>     test byte [arg1Flg], -1
   782 000018E0 0F8465F7FFFF        <1>     jz badArgError
   783 000018E6 E82F090000          <1>     call buildCommandPath
   784 000018EB 488D152FEAFFFF      <1>     lea rdx, searchSpec
   785 000018F2 B8003C0000          <1>     mov eax, 3C00h  ;Create file 
   786 000018F7 31C9                <1>     xor ecx, ecx
   787 000018F9 CD41                <1>     int 41h
   788 000018FB 0F824AF7FFFF        <1>     jc badArgError
   789 00001901 0FB7D8              <1>     movzx ebx, ax
   790 00001904 B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
   791 00001909 CD41                <1>     int 41h
   792                              <1>     return
    19                              <2> %%_ret:
    20 0000190B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   793                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   794                              <1> truename:
   795 0000190C F6059AE7FFFFFF      <1>     test byte [arg1Flg], -1
   796 00001913 0F8432F7FFFF        <1>     jz badArgError
   797 00001919 E8FC080000          <1>     call buildCommandPath
   798                              <1>     ;Explicitly call Truename if we remove truename from this function
   799 0000191E 488D3DFCE9FFFF      <1>     lea rdi, searchSpec
   800 00001925 E895070000          <1>     call strlen
   801 0000192A FFC9                <1>     dec ecx ;Don't print terminating null
   802 0000192C 488D15EEE9FFFF      <1>     lea rdx, searchSpec
   803 00001933 BB01000000          <1>     mov ebx, 01
   804 00001938 B440                <1>     mov ah, 40h
   805 0000193A CD41                <1>     int 41h
   806 0000193C E8B9040000          <1>     call printCRLF
   807                              <1>     return
    19                              <2> %%_ret:
    20 00001941 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   808                              <1> 
   809                              <1> volume:
   810 00001942 488D3547E8FFFF      <1>     lea rsi, cmdBuffer + 2  ;Get the command buffer
   811 00001949 E8E9070000          <1>     call skipSpaces
   812 0000194E 4881C603000000      <1>     add rsi, 3  ;Go past the VOL command
   813 00001955 E8DD070000          <1>     call skipSpaces
   814 0000195A AC                  <1>     lodsb   ;Get the first char, and point rsi to next char
   815 0000195B E8C6070000          <1>     call isALEndOfCommand   ;If this char is end of command, use current drive
   816 00001960 7507                <1>     jnz .checkDriveLetter
   817 00001962 E853070000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
   818 00001967 EB35                <1>     jmp short .dirEP
   819                              <1> .checkDriveLetter:
   820 00001969 803E3A              <1>     cmp byte [rsi], ":" ;If this is not a :, fail
   821 0000196C 0F85D0F6FFFF        <1>     jne badDriveError
   822 00001972 4889F7              <1>     mov rdi, rsi    ;Save start of drive spec in rsi
   823 00001975 48FFC6              <1>     inc rsi  ;Go past the X: spec
   824 00001978 E8BA070000          <1>     call skipSpaces
   825 0000197D AC                  <1>     lodsb   ;Get the non-space char in al
   826 0000197E E8A3070000          <1>     call isALEndOfCommand   ;The next non-space char must be terminator
   827 00001983 0F85B9F6FFFF        <1>     jne badDriveError
   828                              <1> ;This argument should've been parsed into FCB1 so use that result
   829 00001989 8A0520E7FFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
   830 0000198F A8FF                <1>     test al, -1
   831 00001991 0F85ABF6FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
   832 00001997 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
   833 0000199C FFC8                <1>     dec eax ;Convert to 0 based number
   834                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al
   835 0000199E 0541000000          <1>     add eax, "A" ;Get ASCII representation of 0 based number
   836 000019A3 880515EBFFFF        <1>     mov byte [volPathBuf], al   ;Store ASCII letter here
   837 000019A9 488D1513E7FFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   838 000019B0 B41A                <1>     mov ah, 1Ah
   839 000019B2 CD41                <1>     int 41h
   840 000019B4 488D1503EBFFFF      <1>     lea rdx, volPathBuf
   841 000019BB 66B90800            <1>     mov cx, dirVolumeID
   842 000019BF B44E                <1>     mov ah, 4Eh ;Find first
   843 000019C1 CD41                <1>     int 41h
   844 000019C3 7221                <1>     jc .skipVolLbl
   845 000019C5 488D3515E7FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   846 000019CC 488D3DDEEAFFFF      <1>     lea rdi, volLblSpc
   847 000019D3 B90B000000          <1>     mov ecx, 11 ;Get the 11 chars of the volume label
   848                              <1> .dirLblCopy:
   849 000019D8 AC                  <1>     lodsb   ;Get the first char
   850 000019D9 3C00                <1>     cmp al, 0
   851 000019DB 7409                <1>     je .skipVolLbl  ;Jump with CF=NC
   852 000019DD 3C2E                <1>     cmp al, "."
   853 000019DF 7401                <1>     je .dirLblSkipStore
   854 000019E1 AA                  <1>     stosb
   855                              <1> .dirLblSkipStore:
   856 000019E2 FFC9                <1>     dec ecx
   857 000019E4 75F2                <1>     jnz .dirLblCopy
   858                              <1>     ;Fallthru with CF=NC
   859                              <1> .skipVolLbl:
   860                              <1> ;Print volume label information now
   861                              <1> ;Propagates the CF if CF was set    
   862 000019E6 9C                  <1>     pushfq
   863 000019E7 488D1586EBFFFF      <1>     lea rdx, crlf
   864 000019EE B409                <1>     mov ah, 09h
   865 000019F0 CD41                <1>     int 41h
   866 000019F2 488D1500EEFFFF      <1>     lea rdx, volMes
   867 000019F9 B409                <1>     mov ah, 09h
   868 000019FB CD41                <1>     int 41h
   869 000019FD 8A15BBEAFFFF        <1>     mov dl, byte [volPathBuf]   ;Print the drive letter out
   870 00001A03 B402                <1>     mov ah, 02h
   871 00001A05 CD41                <1>     int 41h
   872 00001A07 9D                  <1>     popfq
   873 00001A08 7317                <1>     jnc .volIDOk
   874 00001A0A 488D15FFEDFFFF      <1>     lea rdx, volNo
   875 00001A11 B409                <1>     mov ah, 09h
   876 00001A13 CD41                <1>     int 41h
   877 00001A15 488D1558EBFFFF      <1>     lea rdx, crlf
   878 00001A1C B409                <1>     mov ah, 09h
   879 00001A1E CD41                <1>     int 41h
   880                              <1>     return
    19                              <2> %%_ret:
    20 00001A20 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   881                              <1> .volIDOk:
   882 00001A21 488D15E3EDFFFF      <1>     lea rdx, volOk
   883 00001A28 B409                <1>     mov ah, 09h
   884 00001A2A CD41                <1>     int 41h
   885 00001A2C 488D3D7EEAFFFF      <1>     lea rdi, volLblSpc
   886 00001A33 E887060000          <1>     call strlen
   887 00001A38 FFC9                <1>     dec ecx
   888 00001A3A C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   889 00001A3E 488D156CEAFFFF      <1>     lea rdx, volLblSpc
   890 00001A45 B409                <1>     mov ah, 09h
   891 00001A47 CD41                <1>     int 41h
   892 00001A49 488D1524EBFFFF      <1>     lea rdx, crlf
   893 00001A50 B409                <1>     mov ah, 09h
   894 00001A52 CD41                <1>     int 41h
   895                              <1>     return
    19                              <2> %%_ret:
    20 00001A54 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   896                              <1> 
   897                              <1> version:
   898 00001A55 488D1518EBFFFF      <1>     lea rdx, crlf
   899 00001A5C B409                <1>     mov ah, 09h
   900 00001A5E CD41                <1>     int 41h
   901 00001A60 488D1580EDFFFF      <1>     lea rdx, dosVer
   902 00001A67 B409                <1>     mov ah, 09h
   903 00001A69 CD41                <1>     int 41h
   904 00001A6B E80C000000          <1>     call .printVersionNumber
   905 00001A70 488D15FDEAFFFF      <1>     lea rdx, crlf
   906 00001A77 B409                <1>     mov ah, 09h
   907 00001A79 CD41                <1>     int 41h
   908                              <1>     return
    19                              <2> %%_ret:
    20 00001A7B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   909                              <1> .printVersionNumber:
   910 00001A7C B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
   911 00001A7E CD41                <1>     int 41h
   912 00001A80 50                  <1>     push rax
   913 00001A81 0FB6C0              <1>     movzx eax, al
   914 00001A84 E82F080000          <1>     call printDecimalWord
   915 00001A89 B22E                <1>     mov dl, "."
   916 00001A8B B402                <1>     mov ah, 02h
   917 00001A8D CD41                <1>     int 41h
   918 00001A8F 58                  <1>     pop rax
   919 00001A90 0FB6C4              <1>     movzx eax, ah
   920 00001A93 E820080000          <1>     call printDecimalWord
   921                              <1>     return
    19                              <2> %%_ret:
    20 00001A98 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   922                              <1> 
   923                              <1> 
   924                              <1> memory:
   925 00001A99 488B1D77E5FFFF      <1>     mov rbx, qword [sysVars]
   926 00001AA0 4885DB              <1>     test rbx, rbx
   927 00001AA3 7510                <1>     jnz .sysvarsOK
   928 00001AA5 488D15EDEFFFFF      <1>     lea rdx, memBad0
   929 00001AAC B409                <1>     mov ah, 09h
   930 00001AAE CD41                <1>     int 41h
   931 00001AB0 E9A6080000          <1>     jmp freezePC.altEP
   932                              <1> .sysvarsOK:
   933                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
   934                              <1>     ; and rcx to store Application memory
   935 00001AB5 31F6                <1>     xor esi, esi
   936 00001AB7 31FF                <1>     xor edi, edi
   937 00001AB9 31ED                <1>     xor ebp, ebp
   938 00001ABB 31C9                <1>     xor ecx, ecx
   939 00001ABD 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
   940 00001AC1 488B1B              <1>     mov rbx, qword [rbx]
   941                              <1> .memLp:
   942 00001AC4 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
   943 00001AC7 7409                <1>     je .validMCB
   944 00001AC9 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
   945 00001ACC 0F8501010000        <1>     jne .badMCBFound
   946                              <1> .validMCB:
   947 00001AD2 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
   948 00001AD5 48C1E004            <1>     shl rax, 4  ;Convert to bytes
   949 00001AD9 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
   950 00001AE1 7505                <1>     jne .notDOS
   951 00001AE3 4801C6              <1>     add rsi, rax    ;Add to DOS count
   952 00001AE6 EB21                <1>     jmp short .gotoNext
   953                              <1> .notDOS:
   954 00001AE8 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
   955 00001AF0 7505                <1>     jne .notFree
   956 00001AF2 4801C7              <1>     add rdi, rax    ;Add to Free space count
   957 00001AF5 EB12                <1>     jmp short .gotoNext
   958                              <1> .notFree:
   959 00001AF7 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
   960 00001AFF 7505                <1>     jne .notHole
   961 00001B01 4801C5              <1>     add rbp, rax    ;Add to Hole count
   962 00001B04 EB03                <1>     jmp short .gotoNext
   963                              <1> .notHole:
   964 00001B06 4801C1              <1>     add rcx, rax    ;Add to Application count
   965                              <1> .gotoNext:
   966 00001B09 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
   967 00001B0C 7407                <1>     je .endOfWalk
   968 00001B0E 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
   969 00001B13 EBAF                <1>     jmp short .memLp
   970                              <1> .endOfWalk:
   971                              <1>     
   972 00001B15 488D15DEEEFFFF      <1>     lea rdx, memDOS
   973 00001B1C B409                <1>     mov ah, 09h
   974 00001B1E CD41                <1>     int 41h
   975 00001B20 4889F0              <1>     mov rax, rsi
   976 00001B23 E89D000000          <1>     call .mcbPrintAmount
   977 00001B28 488D1563EFFFFF      <1>     lea rdx, memByte
   978 00001B2F B409                <1>     mov ah, 09h
   979 00001B31 CD41                <1>     int 41h
   980                              <1> 
   981 00001B33 4885ED              <1>     test rbp, rbp
   982 00001B36 741E                <1>     jz .skipHole
   983 00001B38 488D1507EFFFFF      <1>     lea rdx, memHole
   984 00001B3F B409                <1>     mov ah, 09h
   985 00001B41 CD41                <1>     int 41h
   986 00001B43 4889E8              <1>     mov rax, rbp
   987 00001B46 E87A000000          <1>     call .mcbPrintAmount
   988 00001B4B 488D1540EFFFFF      <1>     lea rdx, memByte
   989 00001B52 B409                <1>     mov ah, 09h
   990 00001B54 CD41                <1>     int 41h
   991                              <1> .skipHole:
   992                              <1> 
   993 00001B56 488D15C3EEFFFF      <1>     lea rdx, memApp
   994 00001B5D B409                <1>     mov ah, 09h
   995 00001B5F CD41                <1>     int 41h
   996 00001B61 4889C8              <1>     mov rax, rcx
   997 00001B64 E85C000000          <1>     call .mcbPrintAmount
   998 00001B69 488D1522EFFFFF      <1>     lea rdx, memByte
   999 00001B70 B409                <1>     mov ah, 09h
  1000 00001B72 CD41                <1>     int 41h
  1001                              <1> 
  1002 00001B74 488D15F1EEFFFF      <1>     lea rdx, memFree
  1003 00001B7B B409                <1>     mov ah, 09h
  1004 00001B7D CD41                <1>     int 41h
  1005 00001B7F 4889F8              <1>     mov rax, rdi
  1006 00001B82 E83E000000          <1>     call .mcbPrintAmount
  1007 00001B87 488D1504EFFFFF      <1>     lea rdx, memByte
  1008 00001B8E B409                <1>     mov ah, 09h
  1009 00001B90 CD41                <1>     int 41h
  1010                              <1> 
  1011 00001B92 488D153BEEFFFF      <1>     lea rdx, memSys
  1012 00001B99 B409                <1>     mov ah, 09h
  1013 00001B9B CD41                <1>     int 41h
  1014 00001B9D 4889F0              <1>     mov rax, rsi
  1015 00001BA0 4801F8              <1>     add rax, rdi
  1016 00001BA3 4801C8              <1>     add rax, rcx
  1017 00001BA6 4801E8              <1>     add rax, rbp
  1018 00001BA9 E817000000          <1>     call .mcbPrintAmount
  1019 00001BAE 488D15DDEEFFFF      <1>     lea rdx, memByte
  1020 00001BB5 B409                <1>     mov ah, 09h
  1021 00001BB7 CD41                <1>     int 41h
  1022                              <1> 
  1023 00001BB9 488D15B4E9FFFF      <1>     lea rdx, crlf
  1024 00001BC0 B409                <1>     mov ah, 09h
  1025 00001BC2 CD41                <1>     int 41h
  1026                              <1>     return
    19                              <2> %%_ret:
    20 00001BC4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1027                              <1> 
  1028                              <1> .mcbPrintAmount:
  1029 00001BC5 51                  <1>     push rcx
  1030 00001BC6 56                  <1>     push rsi
  1031 00001BC7 57                  <1>     push rdi
  1032 00001BC8 55                  <1>     push rbp
  1033 00001BC9 E8EA060000          <1>     call printDecimalWord
  1034 00001BCE 5D                  <1>     pop rbp
  1035 00001BCF 5F                  <1>     pop rdi
  1036 00001BD0 5E                  <1>     pop rsi
  1037 00001BD1 59                  <1>     pop rcx
  1038                              <1>     return
    19                              <2> %%_ret:
    20 00001BD2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1039                              <1> .badMCBFound:
  1040 00001BD3 488D15FFEEFFFF      <1>     lea rdx, memBad2
  1041 00001BDA B409                <1>     mov ah, 09h
  1042 00001BDC CD41                <1>     int 41h
  1043 00001BDE E978070000          <1>     jmp freezePC.altEP
  1044                              <1> 
  1045                              <1> type:
  1046 00001BE3 F605C3E4FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1047 00001BEA 0F845BF4FFFF        <1>     jz badArgError
  1048 00001BF0 F605B9E4FFFFFF      <1>     test byte [arg2Flg], -1
  1049 00001BF7 0F854EF4FFFF        <1>     jnz badArgError         ;If this set, error
  1050 00001BFD 488D358AE5FFFF      <1>     lea rsi, cmdBuffer
  1051 00001C04 0FB605A3E4FFFF      <1>     movzx eax, byte [arg1Off]
  1052 00001C0B 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1053 00001C0E 803E0D              <1>     cmp byte [rsi], CR
  1054 00001C11 0F8434F4FFFF        <1>     je badArgError
  1055 00001C17 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1056 00001C1B 750F                <1>     jne .noDrive
  1057 00001C1D 0FB6058BE4FFFF      <1>     movzx eax, byte [arg1FCBret]
  1058 00001C24 3CFF                <1>     cmp al, -1
  1059 00001C26 0F8416F4FFFF        <1>     je badDriveError
  1060                              <1> .noDrive:
  1061                              <1>     ;Now we open the provided file
  1062 00001C2C E86C070000          <1>     call copyArgumentToSearchSpec
  1063 00001C31 488D15E9E6FFFF      <1>     lea rdx, searchSpec
  1064 00001C38 B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1065 00001C3D CD41                <1>     int 41h
  1066 00001C3F 0F820FF4FFFF        <1>     jc badFileError
  1067 00001C45 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1068 00001C4C 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1069                              <1> .lp:
  1070 00001C4F B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1071 00001C54 B43F                <1>     mov ah, 3Fh ;Read handle
  1072 00001C56 CD41                <1>     int 41h
  1073 00001C58 89C1                <1>     mov ecx, eax
  1074 00001C5A 67E317              <1>     jecxz .exit
  1075 00001C5D 53                  <1>     push rbx    ;Save the original in handle
  1076 00001C5E BB01000000          <1>     mov ebx, 1  ;STDOUT
  1077 00001C63 B440                <1>     mov ah, 40h
  1078 00001C65 CD41                <1>     int 41h
  1079 00001C67 5B                  <1>     pop rbx ;Get back the original read handle
  1080 00001C68 720F                <1>     jc .exitBad
  1081 00001C6A 39C8                <1>     cmp eax, ecx
  1082 00001C6C 74E1                <1>     je .lp
  1083 00001C6E FFC9                <1>     dec ecx ;One less for a ^Z
  1084 00001C70 39C8                <1>     cmp eax, ecx
  1085 00001C72 7505                <1>     jne .exitBad
  1086                              <1> .exit:
  1087 00001C74 B43E                <1>     mov ah, 3Eh ;Close handle
  1088 00001C76 CD41                <1>     int 41h
  1089                              <1>     return
    19                              <2> %%_ret:
    20 00001C78 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1090                              <1> .exitBad:
  1091                              <1>     ;Print a disk error message... use a table to build the message but for
  1092                              <1>     ; now, just exit
  1093                              <1>     ;If it is a char device, don't print a error
  1094 00001C79 EBF9                <1>     jmp short .exit
  1095                              <1> 
  1096                              <1> exit:
  1097 00001C7B F605A3E3FFFFFF      <1>     test byte [permaSwitch], -1
  1098                              <1>     retnz   ;Return if the flag is set
    51                              <2> cret nz
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001C82 75(78)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
  1099 00001C84 488B0584E3FFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1100 00001C8B 483DFFFFFFFF        <1>     cmp rax, -1
  1101                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001C91 74(78)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
  1102 00001C93 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1103                              <1> 
  1104 00001C97 488B1588E3FFFF      <1>     mov rdx, qword [parentInt42]
  1105 00001C9E 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
  1106 00001CA2 B842250000          <1>     mov eax, 2542h
  1107 00001CA7 CD41                <1>     int 41h
  1108                              <1> 
  1109 00001CA9 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1110 00001CAE CD41                <1>     int 41h
  1111                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    19                              <2> %%_ret:
    20 00001CB0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1112                              <1> 
  1113                              <1> launchChild:
  1114                              <1> ;We run EXEC on this and the child task will return via applicationReturn
  1115                              <1> ;Here we must search the CWD or all path componants before failing
  1116                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
  1117 00001CB1 488D150BE4FFFF      <1>     lea rdx, cmdFFBlock
  1118 00001CB8 B41A                <1>     mov ah, 1Ah     ;Set DTA for task
  1119 00001CBA CD41                <1>     int 41h
  1120                              <1> 
  1121 00001CBC 8B05FAE3FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
  1122 00001CC2 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1123 00001CC7 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1124 00001CCC 3D20202020          <1>     cmp eax, "    " ;Only if we have four spaces do we proceed here
  1125 00001CD1 741D                <1>     je .noExt
  1126 00001CD3 E820F2FFFF          <1>     call checkExtensionExec ;ZF=ZE => Executable
  1127 00001CD8 0F8510010000        <1>     jnz .dfltErrExit
  1128                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1129 00001CDE 0F820A010000        <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
  1130                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1131                              <1>     ;So it is a com or exe that we are searching for for now
  1132 00001CE4 488D3D23E5FFFF      <1>     lea rdi, cmdPathSpec
  1133 00001CEB 4889FA              <1>     mov rdx, rdi
  1134 00001CEE EB24                <1>     jmp short .search
  1135                              <1> .noExt:
  1136                              <1>     ;If the filename has no extension, append a .*
  1137                              <1>     ;Use bl as flags. bl[0] => COM found, bl[1] => EXE found, bl[2] => BAT found
  1138 00001CF0 31DB                <1>     xor ebx, ebx
  1139 00001CF2 488D3D15E5FFFF      <1>     lea rdi, cmdPathSpec
  1140 00001CF9 4889FA              <1>     mov rdx, rdi
  1141 00001CFC 31C0                <1>     xor eax, eax
  1142 00001CFE B9FFFFFFFF          <1>     mov ecx, -1
  1143 00001D03 F2AE                <1>     repne scasb
  1144 00001D05 48FFCF              <1>     dec rdi ;Point to the terminating null
  1145 00001D08 4889FD              <1>     mov rbp, rdi    ;Temporarily store the ptr to the . in rbp
  1146 00001D0B 66B82E2A            <1>     mov ax, ".*"
  1147 00001D0F 66AB                <1>     stosw
  1148 00001D11 30C0                <1>     xor al, al  ;Store terminating null
  1149 00001D13 AA                  <1>     stosb
  1150                              <1> .search:
  1151 00001D14 B906000000          <1>     mov ecx, dirIncFiles
  1152 00001D19 B44E                <1>     mov ah, 4Eh ;Find First File
  1153 00001D1B CD41                <1>     int 41h
  1154 00001D1D 0F82CB000000        <1>     jc .dfltErrExit
  1155 00001D23 E879000000          <1>     call .noExtCheckExt
  1156                              <1> .moreSearch:
  1157 00001D28 B44F                <1>     mov ah, 4Fh
  1158 00001D2A CD41                <1>     int 41h
  1159 00001D2C 7207                <1>     jc .noMoreFiles
  1160 00001D2E E86E000000          <1>     call .noExtCheckExt
  1161 00001D33 EBF3                <1>     jmp short .moreSearch
  1162                              <1> .noMoreFiles:
  1163 00001D35 85DB                <1>     test ebx, ebx
  1164 00001D37 0F84B1000000        <1>     jz .dfltErrExit
  1165                              <1> ;So we have a valid executable
  1166 00001D3D 4889EF              <1>     mov rdi, rbp    ;Get back ptr to the .*,0
  1167 00001D40 F7C301000000        <1>     test ebx, 1
  1168 00001D46 7407                <1>     jz .launchexebat
  1169 00001D48 B82E434F4D          <1>     mov eax, ".COM"
  1170 00001D4D EB14                <1>     jmp short .launch
  1171                              <1> .launchexebat:
  1172 00001D4F F7C302000000        <1>     test ebx, 2
  1173 00001D55 7407                <1>     jz .launchbat
  1174 00001D57 B82E455845          <1>     mov eax, ".EXE"
  1175 00001D5C EB05                <1>     jmp short .launch
  1176                              <1> .launchbat:
  1177                              <1> ;Temporary For BAT
  1178 00001D5E E98B000000          <1>     jmp .dfltErrExit
  1179                              <1> .launch:
  1180 00001D63 AB                  <1>     stosd
  1181 00001D64 30C0                <1>     xor al, al
  1182 00001D66 AA                  <1>     stosb   ;Store the terminating null
  1183 00001D67 488D1D80E3FFFF      <1>     lea rbx, launchBlock
  1184 00001D6E 31C0                <1>     xor eax, eax
  1185 00001D70 488903              <1>     mov qword [rbx + execProg.pEnv], rax    ;Tell DOS to copy my current Env
  1186 00001D73 498D8080000000      <1>     lea rax, qword [r8 + cmdLineCnt]
  1187 00001D7A 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1188 00001D7E 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1189 00001D82 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1190 00001D86 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1191 00001D8A 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1192 00001D8E 488D1579E4FFFF      <1>     lea rdx, cmdPathSpec
  1193 00001D95 B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1194 00001D9A CD41                <1>     int 41h
  1195 00001D9C E94D000000          <1>     jmp .dfltErrExit    ;If something goes wrong, error out
  1196                              <1> .noExtCheckExt:
  1197                              <1>     ;mov eax, dword [cmdFFBlock + ffBlock.asciizName + filename.fExt]
  1198 00001DA1 488D3539E3FFFF      <1>     lea rsi, dword [cmdFFBlock + ffBlock.asciizName]
  1199 00001DA8 488D3DAEE4FFFF      <1>     lea rdi, fcbCmdSpec
  1200 00001DAF E8DC030000          <1>     call asciiFilenameToFCB
  1201 00001DB4 8B05ABE4FFFF        <1>     mov eax, dword [fcbCmdSpec + filename.fExt]
  1202 00001DBA 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1203 00001DBF 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1204 00001DC4 3D434F4D20          <1>     cmp eax, "COM "
  1205 00001DC9 7507                <1>     jne .neceexe
  1206 00001DCB 81CB01000000        <1>     or ebx, 1
  1207                              <1>     return
    19                              <2> %%_ret:
    20 00001DD1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1208                              <1> .neceexe:
  1209 00001DD2 3D45584520          <1>     cmp eax, "EXE "
  1210 00001DD7 7507                <1>     jne .necebat
  1211 00001DD9 81CB02000000        <1>     or ebx, 2
  1212                              <1>     return
    19                              <2> %%_ret:
    20 00001DDF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1213                              <1> .necebat:
  1214 00001DE0 3D42415420          <1>     cmp eax, "BAT "
  1215                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001DE5 75(DF)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
  1216 00001DE7 81CB04000000        <1>     or ebx, 4
  1217                              <1>     return
    19                              <2> %%_ret:
    20 00001DED C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1218                              <1> 
  1219                              <1> .dfltErrExit:
  1220 00001DEE 488D15DCE7FFFF      <1>     lea rdx, badCmd
  1221 00001DF5 B409                <1>     mov ah, 09h
  1222 00001DF7 CD41                <1>     int 41h
  1223                              <1>     return
    19                              <2> %%_ret:
    20 00001DF9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    17                                  %include "./Source/Utils/COMMAND/Source/cmdUtils.asm"
    18                              <1> ;Misc functions and subroutines for command.com
    19                              <1> 
    20                              <1> printCRLF:
    21 00001DFA 488D1573E7FFFF      <1>     lea rdx, crlf
    22 00001E01 BB02000000          <1>     mov ebx, 2
    23 00001E06 B440                <1>     mov ah, 40h ;Print a new line
    24 00001E08 B902000000          <1>     mov ecx, 2  ;Two chars to write
    25 00001E0D CD41                <1>     int 41h
    26                              <1>     return
    19                              <2> %%_ret:
    20 00001E0F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    27                              <1> printDate:
    28                              <1> ;Input: eax = Packed Date
    29                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
    30                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
    31                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
    32                              <1> ;       ebx = 0 => Print two digit year
    33                              <1> ;       ebx = 1 => Print four digit year
    34 00001E10 53                  <1>     push rbx
    35 00001E11 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    36 00001E13 803D14E2FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    37 00001E1A 7240                <1>     jb .usDate
    38 00001E1C 777C                <1>     ja .jpnDate
    39                              <1> ;European: DD/MM/YY
    40 00001E1E 251F000000          <1>     and eax, 1Fh    ;Save day bits
    41 00001E23 E8B0000000          <1>     call .printFirst
    42 00001E28 8A150BE2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    43 00001E2E B402                <1>     mov ah, 02h
    44 00001E30 CD41                <1>     int 41h
    45                              <1> 
    46 00001E32 89C8                <1>     mov eax, ecx
    47 00001E34 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    48 00001E39 C1E805              <1>     shr eax, 5
    49 00001E3C E8B3000000          <1>     call .printSecond
    50                              <1> 
    51 00001E41 8A15F2E1FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    52 00001E47 B402                <1>     mov ah, 02h
    53 00001E49 CD41                <1>     int 41h
    54                              <1> 
    55 00001E4B 89C8                <1>     mov eax, ecx
    56 00001E4D 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    57 00001E52 C1E809              <1>     shr eax, 9
    58 00001E55 5B                  <1>     pop rbx ;Get the year signature back
    59 00001E56 E8A9000000          <1>     call .printYear
    60                              <1>     return
    19                              <2> %%_ret:
    20 00001E5B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    61                              <1> .usDate:
    62                              <1> ;US: MM/DD/YY
    63 00001E5C 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    64 00001E61 C1E805              <1>     shr eax, 5
    65 00001E64 E86F000000          <1>     call .printFirst
    66                              <1> 
    67 00001E69 8A15CAE1FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    68 00001E6F B402                <1>     mov ah, 02h
    69 00001E71 CD41                <1>     int 41h
    70                              <1> 
    71 00001E73 89C8                <1>     mov eax, ecx
    72 00001E75 251F000000          <1>     and eax, 1Fh    ;Save day bits
    73 00001E7A E875000000          <1>     call .printSecond
    74                              <1> 
    75 00001E7F 8A15B4E1FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    76 00001E85 B402                <1>     mov ah, 02h
    77 00001E87 CD41                <1>     int 41h
    78                              <1> 
    79 00001E89 89C8                <1>     mov eax, ecx
    80 00001E8B 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    81 00001E90 C1E809              <1>     shr eax, 9
    82 00001E93 5B                  <1>     pop rbx ;Get the year signature back
    83 00001E94 E86B000000          <1>     call .printYear
    84                              <1>     return
    19                              <2> %%_ret:
    20 00001E99 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    85                              <1> .jpnDate:
    86                              <1> ;Japan: YY/MM/DD
    87 00001E9A 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    88 00001E9F C1E809              <1>     shr eax, 9
    89 00001EA2 5B                  <1>     pop rbx ;Get the year signature back
    90 00001EA3 E85C000000          <1>     call .printYear
    91                              <1> 
    92 00001EA8 8A158BE1FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    93 00001EAE B402                <1>     mov ah, 02h
    94 00001EB0 CD41                <1>     int 41h
    95                              <1> 
    96 00001EB2 89C8                <1>     mov eax, ecx
    97 00001EB4 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    98 00001EB9 C1E805              <1>     shr eax, 5
    99 00001EBC E833000000          <1>     call .printSecond
   100                              <1> 
   101 00001EC1 8A1572E1FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
   102 00001EC7 B402                <1>     mov ah, 02h
   103 00001EC9 CD41                <1>     int 41h
   104                              <1> 
   105 00001ECB 89C8                <1>     mov eax, ecx
   106 00001ECD 251F000000          <1>     and eax, 1Fh    ;Save day bits
   107 00001ED2 E81D000000          <1>     call .printSecond
   108                              <1>     return
    19                              <2> %%_ret:
    20 00001ED7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   109                              <1> 
   110                              <1> ;Each of these require eax setup correctly
   111                              <1> .printFirst:
   112 00001ED8 51                  <1>     push rcx
   113 00001ED9 E84B040000          <1>     call getDecimalWord
   114 00001EDE 84ED                <1>     test ch, ch ;Do we have an upper digit?
   115 00001EE0 7504                <1>     jnz .skipSpace
   116 00001EE2 88CD                <1>     mov ch, cl
   117 00001EE4 B120                <1>     mov cl, " "
   118                              <1> .skipSpace:
   119 00001EE6 88CA                <1>     mov dl, cl
   120 00001EE8 B402                <1>     mov ah, 02h
   121 00001EEA CD41                <1>     int 41h
   122 00001EEC 88EA                <1>     mov dl, ch
   123 00001EEE B402                <1>     mov ah, 02h
   124 00001EF0 CD41                <1>     int 41h
   125 00001EF2 59                  <1>     pop rcx
   126                              <1>     return
    19                              <2> %%_ret:
    20 00001EF3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   127                              <1> .printSecond:
   128 00001EF4 51                  <1>     push rcx
   129 00001EF5 E82F040000          <1>     call getDecimalWord
   130 00001EFA 84ED                <1>     test ch, ch ;Do we have an upper digit?
   131 00001EFC 75E8                <1>     jnz .skipSpace
   132 00001EFE 88CD                <1>     mov ch, cl
   133 00001F00 B130                <1>     mov cl, "0"
   134 00001F02 EBE2                <1>     jmp short .skipSpace
   135                              <1> .printYear:
   136 00001F04 05BC070000          <1>     add eax, 1980
   137 00001F09 51                  <1>     push rcx
   138 00001F0A 53                  <1>     push rbx
   139 00001F0B E819040000          <1>     call getDecimalWord ;Get unpacked in rcx
   140 00001F10 5B                  <1>     pop rbx
   141 00001F11 84DB                <1>     test bl, bl
   142 00001F13 740C                <1>     jz .twoDigitYear
   143 00001F15 88CA                <1>     mov dl, cl  ;Print the first digit
   144 00001F17 B402                <1>     mov ah, 02h
   145 00001F19 CD41                <1>     int 41h
   146 00001F1B 88EA                <1>     mov dl, ch  ;Print the second digit
   147 00001F1D B402                <1>     mov ah, 02h
   148 00001F1F CD41                <1>     int 41h
   149                              <1> .twoDigitYear:
   150 00001F21 C1E910              <1>     shr ecx, 10h    ;Get high word low
   151 00001F24 88CA                <1>     mov dl, cl  ;Print the upper digit
   152 00001F26 B402                <1>     mov ah, 02h
   153 00001F28 CD41                <1>     int 41h
   154 00001F2A 88EA                <1>     mov dl, ch  ;Print the lower digit
   155 00001F2C B402                <1>     mov ah, 02h
   156 00001F2E CD41                <1>     int 41h
   157 00001F30 59                  <1>     pop rcx
   158                              <1>     return
    19                              <2> %%_ret:
    20 00001F31 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   159                              <1> 
   160                              <1> 
   161                              <1> printTime:
   162                              <1> ;Input: eax = Packed Time
   163                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   164                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   165 00001F32 89C1                <1>     mov ecx, eax
   166 00001F34 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   167 00001F39 C1E80B              <1>     shr eax, 11
   168 00001F3C 803DFCE0FFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   169 00001F43 750B                <1>     jne .ampm
   170 00001F45 E85A000000          <1>     call .printHours
   171 00001F4A E831000000          <1>     call .printMinutes
   172                              <1>     return
    19                              <2> %%_ret:
    20 00001F4F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   173                              <1> .ampm:
   174 00001F50 3D0C000000          <1>     cmp eax, 12
   175 00001F55 7713                <1>     ja .pm
   176 00001F57 7416                <1>     je .pm2
   177 00001F59 E846000000          <1>     call .printHours
   178 00001F5E E81D000000          <1>     call .printMinutes
   179 00001F63 B261                <1>     mov dl, "a"
   180 00001F65 B402                <1>     mov ah, 02h
   181 00001F67 CD41                <1>     int 41h
   182                              <1>     return
    19                              <2> %%_ret:
    20 00001F69 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   183                              <1> .pm:
   184 00001F6A 2D0C000000          <1>     sub eax, 12
   185                              <1> .pm2:
   186 00001F6F E830000000          <1>     call .printHours
   187 00001F74 E807000000          <1>     call .printMinutes
   188 00001F79 B270                <1>     mov dl, "p"
   189 00001F7B B402                <1>     mov ah, 02h
   190 00001F7D CD41                <1>     int 41h
   191                              <1>     return
    19                              <2> %%_ret:
    20 00001F7F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   192                              <1> .printMinutes:
   193 00001F80 8A15B5E0FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   194 00001F86 B402                <1>     mov ah, 02h
   195 00001F88 CD41                <1>     int 41h
   196                              <1> 
   197 00001F8A 89C8                <1>     mov eax, ecx
   198 00001F8C 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   199 00001F91 C1E805              <1>     shr eax, 5
   200                              <1> .printMinutesAlt:
   201 00001F94 51                  <1>     push rcx
   202 00001F95 E88F030000          <1>     call getDecimalWord
   203 00001F9A 84ED                <1>     test ch, ch ;Do we have an upper digit?
   204 00001F9C 7514                <1>     jnz .skipSpace
   205 00001F9E 88CD                <1>     mov ch, cl
   206 00001FA0 B130                <1>     mov cl, "0"
   207 00001FA2 EB0E                <1>     jmp short .skipSpace
   208                              <1> .printHours:
   209 00001FA4 51                  <1>     push rcx
   210 00001FA5 E87F030000          <1>     call getDecimalWord
   211 00001FAA 84ED                <1>     test ch, ch ;Do we have an upper digit?
   212 00001FAC 7504                <1>     jnz .skipSpace
   213 00001FAE 88CD                <1>     mov ch, cl
   214 00001FB0 B120                <1>     mov cl, " "
   215                              <1> .skipSpace:
   216 00001FB2 88CA                <1>     mov dl, cl
   217 00001FB4 B402                <1>     mov ah, 02h
   218 00001FB6 CD41                <1>     int 41h
   219 00001FB8 88EA                <1>     mov dl, ch
   220 00001FBA B402                <1>     mov ah, 02h
   221 00001FBC CD41                <1>     int 41h
   222 00001FBE 59                  <1>     pop rcx
   223                              <1>     return
    19                              <2> %%_ret:
    20 00001FBF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   224                              <1> 
   225                              <1> 
   226                              <1> putVersionInPrompt:
   227 00001FC0 488D1520E8FFFF      <1>     lea rdx, dosVer
   228 00001FC7 B409                <1>     mov ah, 09h ;Print String
   229 00001FC9 CD41                <1>     int 41h
   230 00001FCB B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   231 00001FCD CD41                <1>     int 41h
   232 00001FCF 50                  <1>     push rax    ;Save minor version
   233 00001FD0 E89C000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   234 00001FD5 E8B4000000          <1>     call printPackedBCD ;Print al
   235 00001FDA B22E                <1>     mov dl, "."
   236 00001FDC B402                <1>     mov ah, 02h
   237 00001FDE CD41                <1>     int 41h
   238 00001FE0 58                  <1>     pop rax
   239 00001FE1 88E0                <1>     mov al, ah  ;Get the minor version low
   240 00001FE3 E889000000          <1>     call hexToBCD
   241 00001FE8 E8A1000000          <1>     call printPackedBCD
   242                              <1>     return
    19                              <2> %%_ret:
    20 00001FED C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   243                              <1> putEscInPrompt:
   244 00001FEE B21B                <1>     mov dl, ESC
   245 00001FF0 EB1C                <1>     jmp short outChar
   246                              <1> 
   247                              <1> putMoneyInPrompt:
   248 00001FF2 B224                <1>     mov dl, "$"
   249 00001FF4 EB18                <1>     jmp short outChar
   250                              <1> 
   251                              <1> putEquInPrompt:
   252 00001FF6 B23D                <1>     mov dl, "="
   253 00001FF8 EB14                <1>     jmp short outChar
   254                              <1> 
   255                              <1> putPipeInPrompt:
   256 00001FFA B27C                <1>     mov dl, "|"
   257 00001FFC EB10                <1>     jmp short outChar
   258                              <1> 
   259                              <1> putGTinPrompt:
   260 00001FFE B23E                <1>     mov dl, ">"
   261 00002000 EB0C                <1>     jmp short outChar
   262                              <1> 
   263                              <1> putLTinPrompt:
   264 00002002 B23C                <1>     mov dl, "<"
   265 00002004 EB08                <1>     jmp short outChar
   266                              <1> 
   267                              <1> putDriveInPrompt:
   268 00002006 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   269 00002008 CD41                <1>     int 41h
   270 0000200A 0441                <1>     add al, "A" ;Convert to letter
   271 0000200C 88C2                <1>     mov dl, al
   272                              <1> outChar:
   273 0000200E B402                <1>     mov ah, 02h ;Echo to STDOUT
   274 00002010 CD41                <1>     int 41h
   275                              <1>     return
    19                              <2> %%_ret:
    20 00002012 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   276                              <1> putCWDInPrompt:
   277 00002013 488D3D3AE0FFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   278 0000201A B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   279 0000201C CD41                <1>     int 41h
   280 0000201E 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   281 00002020 FEC2                <1>     inc dl
   282 00002022 0441                <1>     add al, "A" ;Convert to letter
   283 00002024 B43A                <1>     mov ah, ":"
   284 00002026 66AB                <1>     stosw   ;Store X:, rdi+=2
   285 00002028 8A05F5DFFFFF        <1>     mov al, byte [pathSep]
   286 0000202E AA                  <1>     stosb   ;Store pathSep, inc rdi
   287 0000202F B447                <1>     mov ah, 47h ;Get Current Working Directory
   288 00002031 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   289 00002034 CD41                <1>     int 41h
   290 00002036 E884000000          <1>     call strlen
   291 0000203B 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   292                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   293 00002041 B440                <1>     mov ah, 40h ;Write to handle
   294 00002043 BB01000000          <1>     mov ebx, 1  ;STDOUT
   295 00002048 488D1505E0FFFF      <1>     lea rdx, currDirStr
   296 0000204F CD41                <1>     int 41h
   297                              <1>     return
    19                              <2> %%_ret:
    20 00002051 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   298                              <1> 
   299                              <1> BCDtoHex:
   300                              <1> ;Converts a BCD value to a Hex byte
   301                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   302 00002052 51                  <1>     push rcx
   303 00002053 0FB6C0              <1>     movzx eax, al   ;Zero extend
   304 00002056 89C1                <1>     mov ecx, eax    ;Save al in ecx
   305 00002058 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   306 0000205D 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   307 00002063 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   308                              <1> .bth:
   309 00002066 050A000000          <1>     add eax, 10
   310 0000206B FFC9                <1>     dec ecx
   311 0000206D 75F7                <1>     jnz .bth
   312 0000206F 59                  <1>     pop rcx
   313 00002070 C3                  <1>     ret
   314                              <1> 
   315                              <1> hexToBCD:
   316                              <1> ;Converts a Hex byte into two BCD digits
   317                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   318 00002071 51                  <1>     push rcx
   319 00002072 0FB6C0              <1>     movzx eax, al   ;Zero extend
   320 00002075 31C9                <1>     xor ecx, ecx
   321                              <1> .htb0:
   322 00002077 3D0A000000          <1>     cmp eax, 10
   323 0000207C 7209                <1>     jb .htb1
   324 0000207E 2D0A000000          <1>     sub eax, 10
   325 00002083 FFC1                <1>     inc ecx
   326 00002085 EBF0                <1>     jmp short .htb0
   327                              <1> .htb1:
   328 00002087 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   329 0000208A 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   330 0000208C 59                  <1>     pop rcx
   331 0000208D C3                  <1>     ret
   332                              <1> 
   333                              <1> printPackedBCD:
   334                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   335                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   336                              <1> ;Preserves all registers
   337 0000208E 50                  <1>     push rax
   338 0000208F 52                  <1>     push rdx
   339 00002090 88C4                <1>     mov ah, al
   340 00002092 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   341 00002094 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   342 00002097 7508                <1>     jnz .upperNybble
   343 00002099 B220                <1>     mov dl, " "
   344 0000209B B402                <1>     mov ah, 02h
   345 0000209D CD41                <1>     int 41h
   346 0000209F EB0E                <1>     jmp short .lowerNybble
   347                              <1> .upperNybble:
   348 000020A1 50                  <1>     push rax
   349 000020A2 C0EC04              <1>     shr ah, 4
   350 000020A5 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   351 000020A8 88E2                <1>     mov dl, ah
   352 000020AA B402                <1>     mov ah, 02h ;Print DL
   353 000020AC CD41                <1>     int 41h
   354 000020AE 58                  <1>     pop rax
   355                              <1> .lowerNybble:
   356 000020AF 0430                <1>     add al, "0"
   357 000020B1 88C2                <1>     mov dl, al
   358 000020B3 B402                <1>     mov ah, 02h ;Print DL
   359 000020B5 CD41                <1>     int 41h
   360 000020B7 5A                  <1>     pop rdx
   361 000020B8 58                  <1>     pop rax
   362                              <1>     return
    19                              <2> %%_ret:
    20 000020B9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   363                              <1> 
   364                              <1> getCurrentDrive:
   365                              <1> ;Returns the 0 based current drive in al
   366 000020BA B419                <1>     mov ah, 19h
   367 000020BC CD41                <1>     int 41h
   368                              <1>     return
    19                              <2> %%_ret:
    20 000020BE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   369                              <1> 
   370                              <1> strlen:
   371                              <1> ;Gets the length of a ASCIIZ string
   372                              <1> ;Input: rdi = Source buffer
   373                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   374 000020BF 50                  <1>     push rax
   375 000020C0 57                  <1>     push rdi
   376 000020C1 30C0                <1>     xor al, al
   377 000020C3 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   378 000020C5 FFC9                <1>     dec ecx ;rcx = -1
   379 000020C7 F2AE                <1>     repne scasb
   380 000020C9 F7D1                <1>     not ecx
   381 000020CB 5F                  <1>     pop rdi
   382 000020CC 58                  <1>     pop rax
   383                              <1>     return
    19                              <2> %%_ret:
    20 000020CD C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   384                              <1> 
   385                              <1> findTerminatorOrEOC:
   386                              <1> ;Advances rsi to the next string terminator char or the next End of command
   387                              <1> ; char
   388                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   389                              <1> ;If a end of command char found, also sets CF
   390 000020CE AC                  <1>     lodsb
   391 000020CF 3C0D                <1>     cmp al, CR
   392 000020D1 7419                <1>     je .endOfInput
   393 000020D3 E82B000000          <1>     call isALterminator
   394 000020D8 7419                <1>     jz .exit
   395 000020DA 3A0543DFFFFF        <1>     cmp al, byte [pathSep]
   396 000020E0 7411                <1>     je .exit
   397 000020E2 3A053CDFFFFF        <1>     cmp al, byte [switchChar]
   398 000020E8 7409                <1>     je .exit
   399 000020EA EBE2                <1>     jmp short findTerminatorOrEOC
   400                              <1> .endOfInput:
   401 000020EC E802000000          <1>     call .exit
   402 000020F1 F9                  <1>     stc 
   403                              <1>     return
    19                              <2> %%_ret:
    20 000020F2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   404                              <1> .exit:
   405 000020F3 48FFCE              <1>     dec rsi ;Point to the terminating char
   406                              <1>     return
    19                              <2> %%_ret:
    20 000020F6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   407                              <1> 
   408                              <1> findTerminator:
   409                              <1> ;Advances rsi to the next string terminator char
   410                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   411 000020F7 AC                  <1>     lodsb
   412 000020F8 E806000000          <1>     call isALterminator
   413 000020FD 75F8                <1>     jnz findTerminator
   414 000020FF 48FFCE              <1>     dec rsi
   415                              <1>     return
    19                              <2> %%_ret:
    20 00002102 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   416                              <1> isALterminator:
   417                              <1> ;Returns: ZF=NZ if al is not a terminator (Not including CR)
   418                              <1> ;         ZF=ZY if al is a terminator
   419 00002103 3C20                <1>     cmp al, " "
   420                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002105 74(02)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   421 00002107 3C3B                <1>     cmp al, ";"
   422                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002109 74(02)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   423 0000210B 3C3D                <1>     cmp al, "="
   424                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000210D 74(02)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   425 0000210F 3C2C                <1>     cmp al, ","
   426                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002111 74(02)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   427 00002113 3C09                <1>     cmp al, TAB
   428                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002115 74(02)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   429 00002117 3C0A                <1>     cmp al, LF
   430                              <1>     return
    19                              <2> %%_ret:
    20 00002119 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   431                              <1> 
   432                              <1> findEndOfCommand:
   433                              <1> ;Moves rsi to the | or CR that terminates this command
   434 0000211A AC                  <1>     lodsb
   435 0000211B E806000000          <1>     call isALEndOfCommand
   436 00002120 75F8                <1>     jnz findEndOfCommand
   437 00002122 48FFCE              <1>     dec rsi
   438                              <1>     return
    19                              <2> %%_ret:
    20 00002125 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   439                              <1> isALEndOfCommand:
   440 00002126 3C7C                <1>     cmp al, "|"
   441                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002128 74(25)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   442 0000212A 3C0D                <1>     cmp al, CR
   443                              <1>     return
    19                              <2> %%_ret:
    20 0000212C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   444                              <1> 
   445                              <1> scanForRedir:
   446                              <1> ;Returns: AL = 0 => No redirection, terminate with CR
   447                              <1> ;         AL = 1 => Redirection, type <
   448                              <1> ;         AL = 10 => Redir, type >
   449                              <1> ;         AL = 20 => Redir, type >>
   450                              <1> ;If multiple redirs found, the last one of that type counts.
   451 0000212D 56                  <1>     push rsi
   452 0000212E 55                  <1>     push rbp
   453 0000212F 30E4                <1>     xor ah, ah
   454                              <1> .lp:
   455 00002131 AC                  <1>     lodsb
   456 00002132 3C3E                <1>     cmp al, ">"
   457                              <1> .exit:
   458 00002134 5D                  <1>     pop rbp
   459 00002135 5E                  <1>     pop rsi
   460                              <1>     return
    19                              <2> %%_ret:
    20 00002136 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   461                              <1> 
   462                              <1> 
   463                              <1> skipSpaces:
   464                              <1> ;Also skips tabs
   465                              <1> ;Input: rsi must point to the start of the data string
   466                              <1> ;Output: rsi points to the first non-space char
   467 00002137 803E20              <1>     cmp byte [rsi], " "
   468 0000213A 7405                <1>     je .skip    ;If equal to a space, skip it
   469 0000213C 803E09              <1>     cmp byte [rsi], TAB
   470                              <1>     retne   ;If not equal to a tab or space, return
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000213F 75(36)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   471                              <1> .skip:
   472 00002141 48FFC6              <1>     inc rsi
   473 00002144 EBF1                <1>     jmp short skipSpaces
   474                              <1> 
   475                              <1> printPrompt:
   476 00002146 66813DD2DEFFFFFFFF  <1>     cmp word [promptPtr], -1
   477 0000214F 750B                <1>     jne .validPrompt
   478                              <1>     ;Here we print the default prompt
   479 00002151 E8BDFEFFFF          <1>     call putCWDInPrompt
   480 00002156 E8A3FEFFFF          <1>     call putGTinPrompt
   481                              <1>     return
    19                              <2> %%_ret:
    20 0000215B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   482                              <1> .validPrompt:
   483                              <1>     return
    19                              <2> %%_ret:
    20 0000215C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   484                              <1> 
   485                              <1> clearCommandState:
   486                              <1> ;Clears the command state
   487 0000215D 488D3D45DFFFFF      <1>     lea rdi, cmdStatePtr
   488 00002164 B90A000000          <1>     mov ecx, cmdStateL
   489 00002169 31C0                <1>     xor eax, eax
   490 0000216B F3AA                <1>     rep stosb
   491                              <1>     return
    19                              <2> %%_ret:
    20 0000216D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   492                              <1> 
   493                              <1> clearCommandLineState:
   494                              <1> ;Clears the command line state after a 0Dh encountered
   495 0000216E 488D3D22DFFFFF      <1>     lea rdi, cmdLineStatePtr
   496 00002175 B91C000000          <1>     mov ecx, cmdLineStateL
   497 0000217A 31C0                <1>     xor eax, eax
   498 0000217C F3AA                <1>     rep stosb
   499                              <1>     return
    19                              <2> %%_ret:
    20 0000217E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   500                              <1> 
   501                              <1> asciiToFCB:
   502                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   503                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   504                              <1> ;Also doesn't check if chars are valid
   505                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   506                              <1> ;Name is space padded.
   507                              <1> ;Input: rsi = ASCII string buffer
   508                              <1> ;       rdi = FCB name buffer
   509                              <1> ;Output: al = Char that terminated the source string 
   510 0000217F 53                  <1>     push rbx    
   511 00002180 57                  <1>     push rdi
   512 00002181 B90B000000          <1>     mov ecx, 11
   513 00002186 B020                <1>     mov al, " "
   514 00002188 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   515 0000218A 5F                  <1>     pop rdi
   516 0000218B 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   517 0000218E EB1D                <1>     jmp short asciiFilenameToFCB.processName
   518                              <1> asciiFilenameToFCB:
   519                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   520                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   521                              <1> ;Also doesn't check if chars are valid
   522                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   523                              <1> ;Name is space padded.
   524                              <1> ;Input: rsi = ASCII string buffer
   525                              <1> ;       rdi = FCB name buffer
   526                              <1> ;Output: al = Char that terminated the source string 
   527 00002190 53                  <1>     push rbx    
   528 00002191 57                  <1>     push rdi
   529 00002192 B90B000000          <1>     mov ecx, 11
   530 00002197 B020                <1>     mov al, " "
   531 00002199 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   532 0000219B 5F                  <1>     pop rdi
   533 0000219C 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   534                              <1>     ;Preprocess for Dir Searches
   535 0000219F 803E2E              <1>     cmp byte [rsi], "."
   536 000021A2 7509                <1>     jne .processName
   537 000021A4 A4                  <1>     movsb   ;Store the first dot
   538 000021A5 803E2E              <1>     cmp byte [rsi], "."
   539 000021A8 752C                <1>     jne .exitBadChar
   540 000021AA A4                  <1>     movsb
   541 000021AB EB29                <1>     jmp short .exitBadChar
   542                              <1> .processName:
   543 000021AD AC                  <1>     lodsb   ;Get the char in al
   544 000021AE 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   545 000021B0 7426                <1>     jz .exit
   546 000021B2 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   547 000021B4 7407                <1>     je .extSpace
   548 000021B6 3C2E                <1>     cmp al, "."
   549 000021B8 740C                <1>     je .ext
   550 000021BA AA                  <1>     stosb   ;Store the char
   551 000021BB EBF0                <1>     jmp short .processName
   552                              <1> .extSpace:
   553                              <1> ;Now we scan for a period in the name
   554 000021BD AC                  <1>     lodsb   ;Get a char and increase rsi
   555 000021BE 84C0                <1>     test al, al
   556 000021C0 7416                <1>     jz .exit
   557 000021C2 3C2E                <1>     cmp al, "."     ;If al is not a period...
   558 000021C4 75F7                <1>     jne .extSpace   ; keep searching
   559                              <1> .ext:
   560 000021C6 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   561                              <1> .processExt:
   562 000021CA AC                  <1>     lodsb
   563 000021CB 84C0                <1>     test al, al
   564 000021CD 7409                <1>     jz .exit
   565 000021CF 3C20                <1>     cmp al, " "
   566 000021D1 7405                <1>     je .exit
   567 000021D3 AA                  <1>     stosb
   568 000021D4 EBF4                <1>     jmp short .processExt
   569                              <1> .exitBadChar:
   570 000021D6 30C0                <1>     xor al, al  ;Return a null terminator
   571                              <1> .exit:
   572 000021D8 5B                  <1>     pop rbx
   573                              <1>     return
    19                              <2> %%_ret:
    20 000021D9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   574                              <1> 
   575                              <1> FCBToAsciiz:
   576                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   577                              <1> ;Name is space padded too
   578                              <1> ;Input: rsi = FCB name buffer
   579                              <1> ;       rdi = ASCIIZ string buffer
   580 000021DA B908000000          <1>     mov ecx, 8
   581 000021DF F3A4                <1>     rep movsb   ;Move the name over
   582                              <1> .scanNameSpace:
   583 000021E1 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   584 000021E5 750D                <1>     jne .ext
   585 000021E7 48FFCF              <1>     dec rdi
   586 000021EA FFC1                <1>     inc ecx
   587 000021EC 81F908000000        <1>     cmp ecx, 8
   588 000021F2 72ED                <1>     jb .scanNameSpace
   589                              <1> .ext:
   590 000021F4 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   591 000021F9 7506                <1>     jne .validExt
   592 000021FB 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   593 000021FF 7415                <1>     je .exit
   594                              <1> .validExt:
   595 00002201 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   596 00002203 AA                  <1>     stosb
   597 00002204 B903000000          <1>     mov ecx, 3
   598 00002209 F3A4                <1>     rep movsb   ;Move the three extension chars over
   599                              <1> .scanExtSpace:
   600 0000220B 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   601 0000220F 7505                <1>     jne .exit
   602 00002211 48FFCF              <1>     dec rdi
   603 00002214 EBF5                <1>     jmp short .scanExtSpace
   604                              <1> .exit:
   605 00002216 31C0                <1>     xor eax, eax
   606 00002218 AA                  <1>     stosb   ;Store a null at the end
   607                              <1>     return
    19                              <2> %%_ret:
    20 00002219 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   608                              <1> 
   609                              <1> buildCommandPath:
   610                              <1> ;Based on the first argument on the command line
   611                              <1> ; will build a full ASCIIZ path in searchSpec to the file/dir specified
   612                              <1>     ;If this is a relative path, will handle correctly (tho unnecessary)
   613 0000221A 0FB6058DDEFFFF      <1>     movzx eax, byte [arg1Off]
   614 00002221 488D3566DFFFFF      <1>     lea rsi, cmdBuffer
   615 00002228 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   616 0000222B 8A3DF2DDFFFF        <1>     mov bh, byte [pathSep]
   617 00002231 B33A                <1>     mov bl, ":"
   618 00002233 383E                <1>     cmp byte [rsi], bh  ;Is the first char relative to root?
   619 00002235 7458                <1>     je .absoluteCurrent
   620 00002237 66395E01            <1>     cmp word [rsi + 1], bx    ;This checks if absolute or relative
   621 0000223B 746D                <1>     je .absolutePath
   622 0000223D 385E01              <1>     cmp byte [rsi + 1], bl  ;Check if a drive separator
   623 00002240 7409                <1>     je .relativeGiven
   624                              <1> ;No drive letter given, must get Current Drive
   625 00002242 E873FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   626 00002247 0441                <1>     add al, "A"
   627 00002249 EB0B                <1>     jmp short .relativeCommon
   628                              <1> .relativeGiven:
   629                              <1> ;Drive letter pointed to by AL
   630 0000224B 8A06                <1>     mov al, byte [rsi]  ;Get drive letter in al
   631 0000224D 24DF                <1>     and al, 0DFh    ;Convert to UC
   632 0000224F 4881C602000000      <1>     add rsi, 2  ;Skip the given drive letter and the colon
   633                              <1> .relativeCommon:
   634                              <1>     ;al has drive letter
   635 00002256 88C2                <1>     mov dl, al  ;Save drive letter in dl
   636 00002258 80EA40              <1>     sub dl, "@" ;Get 1 based drive number in dl
   637 0000225B B43A                <1>     mov ah, ":" ;Get the colon in too
   638 0000225D 488D3DBDE0FFFF      <1>     lea rdi, searchSpec ;Start building our search path here
   639 00002264 66AB                <1>     stosw   ;Store X:
   640 00002266 8A05B7DDFFFF        <1>     mov al, byte [pathSep]
   641 0000226C AA                  <1>     stosb   ;Store pathSep
   642 0000226D 56                  <1>     push rsi    ;Save user input string
   643 0000226E 4889FE              <1>     mov rsi, rdi    ;Put the current directory here for this drive
   644 00002271 B447                <1>     mov ah, 47h ;Get Current Working Directory, dl has drive number
   645 00002273 CD41                <1>     int 41h ;Won't fail as drive letter in dl confirmed ok
   646 00002275 5E                  <1>     pop rsi
   647                              <1>     ;Now want to find terminating null
   648 00002276 30C0                <1>     xor al, al
   649 00002278 31C9                <1>     xor ecx, ecx
   650 0000227A FFC9                <1>     dec ecx
   651 0000227C F2AE                <1>     repne scasb ;Search for the terminating null
   652 0000227E 48FFCF              <1>     dec rdi ;Go back one once found
   653 00002281 8A059CDDFFFF        <1>     mov al, byte [pathSep]
   654 00002287 3847FF              <1>     cmp byte [rdi - 1], al
   655 0000228A 7425                <1>     je .buildPath ;If the previous char is a pathsep, skip storing another
   656 0000228C AA                  <1>     stosb   ;Store the pathsep
   657 0000228D EB22                <1>     jmp short .buildPath  ;Now we copy the user string over and good to go
   658                              <1> .absoluteCurrent:
   659 0000228F E826FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   660 00002294 0441                <1>     add al, "A"
   661 00002296 B43A                <1>     mov ah, ":" ;ax has X: now to store 
   662 00002298 488D3D82E0FFFF      <1>     lea rdi, searchSpec
   663 0000229F 66AB                <1>     stosw
   664 000022A1 8A057CDDFFFF        <1>     mov al, byte [pathSep]
   665 000022A7 AA                  <1>     stosb
   666 000022A8 EB07                <1>     jmp short .buildPath
   667                              <1> .absolutePath:
   668 000022AA 488D3D70E0FFFF      <1>     lea rdi, searchSpec
   669                              <1> .buildPath:
   670 000022B1 E805EDFFFF          <1>     call copyCommandTailItem    ;Terminates with a 0 for free
   671 000022B6 F8                  <1>     clc ;I dont care if i encounter an embedded CR rn
   672                              <1>     return
    19                              <2> %%_ret:
    20 000022B7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   673                              <1>     
   674                              <1> printDecimalWord:
   675                              <1> ;Takes qword in rax and print it's decimal representation
   676                              <1> ;Takes the qword in eax and prints its decimal representation
   677 000022B8 31C9                <1>     xor ecx, ecx
   678 000022BA 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   679 000022BC 85C0                <1>     test eax, eax
   680 000022BE 750C                <1>     jnz .notZero
   681 000022C0 B930000000          <1>     mov ecx, "0"
   682 000022C5 BD01000000          <1>     mov ebp, 1  ;Print one digit
   683 000022CA EB3E                <1>     jmp short .dpfb2
   684                              <1> .notZero:
   685 000022CC 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   686 000022CE BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   687                              <1> .dpfb0:
   688 000022D3 FFC5                <1>     inc ebp
   689 000022D5 81FD08000000        <1>     cmp ebp, 8
   690 000022DB 7206                <1>     jb .dpfb00
   691 000022DD 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   692 000022E1 EB04                <1>     jmp short .dpfb01
   693                              <1> .dpfb00:
   694 000022E3 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   695                              <1> .dpfb01:
   696 000022E7 31D2                <1>     xor edx, edx
   697 000022E9 48F7F6              <1>     div rsi
   698 000022EC 80C230              <1>     add dl, '0'
   699 000022EF 80FA39              <1>     cmp dl, '9'
   700 000022F2 7603                <1>     jbe .dpfb1
   701 000022F4 80C207              <1>     add dl, 'A'-'0'-10
   702                              <1> .dpfb1:
   703 000022F7 81FD08000000        <1>     cmp ebp, 8
   704 000022FD 7204                <1>     jb .dpfb10
   705 000022FF 88D3                <1>     mov bl, dl ;Add the bottom bits
   706 00002301 EB02                <1>     jmp short .dpfb11
   707                              <1> .dpfb10:
   708 00002303 88D1                <1>     mov cl, dl    ;Save remainder byte
   709                              <1> .dpfb11:
   710 00002305 4885C0              <1>     test rax, rax
   711 00002308 75C9                <1>     jnz .dpfb0
   712                              <1> .dpfb2:
   713 0000230A 81FD08000000        <1>     cmp ebp, 8
   714 00002310 7208                <1>     jb .dpfb20
   715 00002312 88DA                <1>     mov dl, bl
   716 00002314 48C1EB08            <1>     shr rbx, 8
   717 00002318 EB06                <1>     jmp short .dpfb21
   718                              <1> .dpfb20:
   719 0000231A 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   720 0000231C 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   721                              <1> .dpfb21:
   722 00002320 B402                <1>     mov ah, 02h
   723 00002322 CD41                <1>     int 41h
   724 00002324 FFCD                <1>     dec ebp
   725 00002326 75E2                <1>     jnz .dpfb2
   726                              <1>     return
    19                              <2> %%_ret:
    20 00002328 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   727                              <1> 
   728                              <1> getDecimalWord:
   729                              <1> ;Works on MAX A dword in eax
   730                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   731 00002329 31C9                <1>     xor ecx, ecx
   732 0000232B 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   733 0000232D BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   734                              <1> .dpfb0:
   735 00002332 FFC5                <1>     inc ebp
   736 00002334 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   737 00002338 31D2                <1>     xor edx, edx
   738 0000233A 48F7F3              <1>     div rbx
   739 0000233D 80C230              <1>     add dl, '0'
   740 00002340 80FA39              <1>     cmp dl, '9'
   741 00002343 7603                <1>     jbe .dpfb1
   742 00002345 80C207              <1>     add dl, 'A'-'0'-10
   743                              <1> .dpfb1:
   744 00002348 88D1                <1>     mov cl, dl    ;Save remainder byte
   745 0000234A 4885C0              <1>     test rax, rax
   746 0000234D 75E3                <1>     jnz .dpfb0
   747                              <1>     return
    19                              <2> %%_ret:
    20 0000234F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   748                              <1> 
   749                              <1> freezePC:
   750 00002350 488D1568E7FFFF      <1>     lea rdx, memBad1
   751 00002357 B409                <1>     mov ah, 09h
   752 00002359 CD41                <1>     int 41h
   753                              <1> .altEP:
   754 0000235B 488D1586E7FFFF      <1>     lea rdx, memBad3
   755 00002362 B409                <1>     mov ah, 09h
   756 00002364 CD41                <1>     int 41h
   757                              <1> .lp:
   758 00002366 F390                <1>     pause
   759 00002368 F4                  <1>     hlt
   760 00002369 EBFB                <1>     jmp short .lp
   761                              <1> 
   762                              <1> getFilenamePtrFromFilespec:
   763                              <1> ;Gets a pointer to the first char of a filename from a asciiz pathspec
   764                              <1> ;Input: rsi = Pathspec to search
   765                              <1> ;Output: rsi = Points to the first char of the filename
   766 0000236B 4889F3              <1>     mov rbx, rsi
   767 0000236E 31C0                <1>     xor eax, eax
   768 00002370 4889F7              <1>     mov rdi, rsi    ;Go to the source string 
   769 00002373 E847FDFFFF          <1>     call strlen     ;Get it's length
   770 00002378 FFC9                <1>     dec ecx ;Dont include terminating null
   771 0000237A 741F                <1>     jz .exitBad ;Was the string of length zero? Exit bad if so
   772 0000237C 4801CE              <1>     add rsi, rcx    ;Goto last char in path (not null)
   773                              <1> .lp:
   774 0000237F 4839F3              <1>     cmp rbx, rsi    ;Is rdi pointing to the start of the string?
   775                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002382 74(4F)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   776 00002384 8A06                <1>     mov al, byte [rsi]  ;Get the char we currently are at
   777 00002386 3C3A                <1>     cmp al, ":" ;X: ?
   778 00002388 740D                <1>     je .pointFilename
   779 0000238A 3A0593DCFFFF        <1>     cmp al, byte [pathSep]  ;Is al pathSep?
   780 00002390 7405                <1>     je .pointFilename
   781 00002392 48FFCE              <1>     dec rsi ;Not a terminator, go back a char
   782 00002395 EBE8                <1>     jmp short .lp
   783                              <1> .pointFilename:
   784 00002397 48FFC6              <1>     inc rsi ;Now point to the first char of the pathname
   785                              <1>     return
    19                              <2> %%_ret:
    20 0000239A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   786                              <1> .exitBad:
   787 0000239B F9                  <1>     stc
   788                              <1> .exit:
   789                              <1>     return
    19                              <2> %%_ret:
    20 0000239C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   790                              <1> 
   791                              <1> 
   792                              <1> copyArgumentToSearchSpec:
   793                              <1> ;Works similarly to the build searchpath but is simpler
   794                              <1> ;Null terminates
   795 0000239D 488D3D7DDFFFFF      <1>     lea rdi, searchSpec
   796                              <1> .copyPath:
   797 000023A4 AC                  <1>     lodsb
   798 000023A5 E87CFDFFFF          <1>     call isALEndOfCommand
   799 000023AA 740A                <1>     jz .finishCopy
   800 000023AC E852FDFFFF          <1>     call isALterminator
   801 000023B1 7403                <1>     jz .finishCopy
   802 000023B3 AA                  <1>     stosb
   803 000023B4 EBEE                <1>     jmp short .copyPath
   804                              <1> .finishCopy:
   805 000023B6 31C0                <1>     xor eax, eax
   806 000023B8 AA                  <1>     stosb
   807                              <1>     return
    19                              <2> %%_ret:
    20 000023B9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    18                                  %include "./Source/Utils/COMMAND/Source/int44h.asm"
    19                              <1> critErrorHandler:   ;Int 44h
    20                              <1> ;User Stack in usage here, must be swapped to before this is called
    21                              <1> ;Entered with:  
    22                              <1> ;               AH = Critical Error Bitfield
    23                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    24                              <1> ;               Bit 6 - Reserved
    25                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    26                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    27                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    28                              <1> ;               Bits [2-1] = Affected Disk Error
    29                              <1> ;                     0 0   DOS area
    30                              <1> ;                     0 1   FAT area
    31                              <1> ;                     1 0   Directory area
    32                              <1> ;                     1 1   Data area
    33                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    34                              <1> ;               AL  = Failing drive number if AH[7] = 0
    35                              <1> ;               DIL = Error code for errorMsg
    36                              <1> ;               RSI = EA of Device Header for which device the error occured
    37                              <1> ;Return:
    38                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    39                              <1> ;                  = 1 - Retry the Operation    (Retry)
    40                              <1> ;                  = 2 - Terminate the Program  (Abort)
    41                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    42 000023BA 53                  <1>     push rbx
    43 000023BB 51                  <1>     push rcx
    44 000023BC 52                  <1>     push rdx
    45 000023BD 57                  <1>     push rdi
    46 000023BE 56                  <1>     push rsi
    47 000023BF FC                  <1>     cld         ;Make String ops go forward
    48                              <1> 
    49 000023C0 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    50 000023C3 488D15AAE1FFFF      <1>     lea rdx, crlf
    51 000023CA B409                <1>     mov ah, 09h ;Print String
    52 000023CC CD41                <1>     int 41h
    53                              <1> 
    54 000023CE 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    55 000023D4 B90C000000          <1>     mov ecx, 0Ch
    56 000023D9 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    57 000023DB 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    58 000023DE 480FB7FF            <1>     movzx rdi, di
    59 000023E2 4889FA              <1>     mov rdx, rdi    ;Copy error code
    60 000023E5 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    61 000023E9 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    62 000023EC 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    63 000023EF 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    64 000023F6 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    65 000023FA B409                <1>     mov ah, 09h ;Print String
    66 000023FC CD41                <1>     int 41h     ;Call DOS to print first part of message
    67                              <1> 
    68 000023FE 488D1505020000      <1>     lea rdx, qword [.readmsg]
    69 00002405 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    70 0000240C F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    71 0000240F 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    72 00002413 B409                <1>     mov ah, 09h ;Print String
    73 00002415 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    74                              <1> 
    75 00002417 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    76 0000241A 0F85DF000000        <1>     jnz .charError
    77                              <1> ;Disk error continues here
    78 00002420 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    79 00002427 B409                <1>     mov ah, 09h
    80 00002429 CD41                <1>     int 41h
    81 0000242B 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    82 0000242D 80C241              <1>     add dl, "A" ;Add ASCII code
    83 00002430 B402                <1>     mov ah, 02h ;Print char in dl
    84 00002432 CD41                <1>     int 41h
    85                              <1> .userInput:
    86 00002434 488D1539E1FFFF      <1>     lea rdx, crlf  ;Print new line
    87 0000243B B409                <1>     mov ah, 09h
    88 0000243D CD41                <1>     int 41h
    89                              <1> ;Abort, Retry, Ignore, Fail is word order
    90                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    91                              <1> .userAbort:
    92                              <1> ;Abort is always an option
    93 0000243F 488D15E2010000      <1>     lea rdx, qword [.abortmsg]
    94 00002446 B409                <1>     mov ah, 09h
    95 00002448 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
    96                              <1> .userRetry:
    97 0000244A F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    98 0000244D 7416                <1>     jz .userIgnore    ;If clear, dont print message
    99 0000244F 488D15EA010000      <1>     lea rdx, qword [.betweenMsg]
   100 00002456 B409                <1>     mov ah, 09h
   101 00002458 CD41                <1>     int 41h
   102 0000245A 488D15D4010000      <1>     lea rdx, qword [.retrymsg]
   103 00002461 B409                <1>     mov ah, 09h
   104 00002463 CD41                <1>     int 41h
   105                              <1> .userIgnore:
   106 00002465 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   107 00002468 7416                <1>     jz .userFail
   108 0000246A 488D15CF010000      <1>     lea rdx, qword [.betweenMsg]
   109 00002471 B409                <1>     mov ah, 09h
   110 00002473 CD41                <1>     int 41h
   111 00002475 488D15B2010000      <1>     lea rdx, qword [.ignoremsg]
   112 0000247C B409                <1>     mov ah, 09h
   113 0000247E CD41                <1>     int 41h
   114                              <1> .userFail:
   115 00002480 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   116 00002483 7416                <1>     jz .userMsgEnd
   117 00002485 488D15B4010000      <1>     lea rdx, qword [.betweenMsg]
   118 0000248C B409                <1>     mov ah, 09h
   119 0000248E CD41                <1>     int 41h
   120 00002490 488D15A4010000      <1>     lea rdx, qword [.failmsg]
   121 00002497 B409                <1>     mov ah, 09h
   122 00002499 CD41                <1>     int 41h
   123                              <1> .userMsgEnd:
   124 0000249B 488D15A1010000      <1>     lea rdx, qword [.endMsg]
   125 000024A2 B409                <1>     mov ah, 09h
   126 000024A4 CD41                <1>     int 41h
   127                              <1> ;Get user input now 
   128 000024A6 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   129 000024A8 488D3D97010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   130 000024AF B401                <1>     mov ah, 01h ;STDIN without Console Echo
   131 000024B1 CD41                <1>     int 41h ;Get char in al
   132 000024B3 3C61                <1>     cmp al, "a" ;Chack if lowercase
   133 000024B5 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   134 000024B7 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   135                              <1> .uip1:
   136 000024B9 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   137 000024BA 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   138 000024BC FFC1                <1>     inc ecx
   139 000024BE 81F904000000        <1>     cmp ecx, 4
   140 000024C4 75F3                <1>     jne .uip1
   141 000024C6 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   142                              <1> .validInput:
   143 000024CB 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   144                              <1> ;Now check if the input is permitted
   145 000024CD 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   146 000024CF 7427                <1>     je .cehExit
   147 000024D1 84C0                <1>     test al, al ;Check if 0 => Ignore
   148 000024D3 740F                <1>     je .viIgnore
   149 000024D5 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   150 000024D7 7416                <1>     je .viRetry
   151                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   152 000024D9 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   153 000024DC 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   154 000024E2 EB14                <1>     jmp short .cehExit
   155                              <1> .viIgnore:
   156 000024E4 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   157 000024E7 0F8447FFFFFF        <1>     jz .userInput
   158 000024ED EB09                <1>     jmp short .cehExit
   159                              <1> .viRetry:
   160 000024EF F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   161 000024F2 0F843CFFFFFF        <1>     jz .userInput
   162                              <1> .cehExit:
   163 000024F8 5E                  <1>     pop rsi
   164 000024F9 5F                  <1>     pop rdi
   165 000024FA 5A                  <1>     pop rdx
   166 000024FB 59                  <1>     pop rcx
   167 000024FC 5B                  <1>     pop rbx
   168 000024FD 48CF                <1>     iretq
   169                              <1> .charError:
   170 000024FF B908000000          <1>     mov ecx, 8  ;8 chars in device name
   171 00002504 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   172                              <1> .ce1:
   173 0000250B AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   174 0000250C 88C2                <1>     mov dl, al  ;Move char into dl
   175 0000250E B402                <1>     mov ah, 02h
   176 00002510 CD41                <1>     int 41h ;Print char
   177 00002512 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   178 00002514 E91BFFFFFF          <1>     jmp .userInput
   179                              <1> 
   180                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   181 00002519 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   181 00002522 746563742024202020  <1>
   182 0000252B 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   182 00002534 6E6974202420202020  <1>
   183 0000253D 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   183 00002546 202420202020202020  <1>
   184 0000254F 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   184 00002558 6F6D6D616E64202420  <1>
   185 00002561 446174612024202020- <1>             db "Data $            "       ;Error 4
   185 0000256A 202020202020202020  <1>
   186 00002573 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   186 0000257C 737420242020202020  <1>
   187 00002585 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   187 0000258E 202020202020202020  <1>
   188 00002597 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   188 000025A0 656469612024202020  <1>
   189 000025A9 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   189 000025B2 7420466F756E642024  <1>
   190 000025BB 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   190 000025C4 706572202420202020  <1>
   191 000025CD 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   191 000025D6 6C7420242020202020  <1>
   192 000025DF 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   192 000025E8 742024202020202020  <1>
   193 000025F1 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   193 000025FA 61696C757265202420  <1>
   194                              <1> 
   195 00002603 64726976652024      <1> .drive      db "drive $"
   196 0000260A 6572726F7220726561- <1> .readmsg    db "error reading $"
   196 00002613 64696E672024        <1>
   197 00002619 6572726F7220777269- <1> .writemsg   db "error writing $"
   197 00002622 74696E672024        <1>
   198 00002628 41626F727424        <1> .abortmsg   db "Abort$" 
   199 0000262E 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   200 00002635 526574727924        <1> .retrymsg   db "Retry$"
   201 0000263B 4661696C24          <1> .failmsg    db "Fail$"
   202 00002640 2C2024              <1> .betweenMsg db ", $"
   203 00002643 3F2024              <1> .endMsg     db "? $"
   204 00002646 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   205                              <1> 
   206                              <1> int43h:
   207 0000264A F9                  <1>     stc     ;Set CF to kill the task
   208 0000264B C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    19                                  %include "./Source/Utils/COMMAND/Data/cmdEnv.asm"
    20                              <1>     
    21                              <1> masterEnv:  ;Yeet this is this is a child command processor
    22 0000264E 5F3A434F4D4D414E44- <1>     db "_:COMMAND.COM",0
    22 00002657 2E434F4D00          <1>
    23 0000265C 504154483D0000      <1>     db "PATH=",0,0  ;Terminate with two null bytes
    24 00002663 202020202020202020- <1>     db ($ - masterEnv) dup (" ")    ;Pad the environment with spaces
    24 0000266C 202020202020202020- <1>
    24 00002675 202020              <1>
    25                              <1> endOfAlloc: ;Symbol to find the start of where I can yeet 
    20                                  %include "./Source/Utils/COMMAND/Source/cmdLdr.asm"
    21                              <1> cmdLdr:
    22                              <1> ;First check if the version is ok. If not, return.
    23 00002678 B430                <1>     mov ah, 30h
    24 0000267A CD41                <1>     int 41h
    25 0000267C 3C01                <1>     cmp al, 01h ;Version 1
    26 0000267E 760D                <1>     jbe .okVersion
    27 00002680 488D15CD010000      <1>     lea rdx, badVerStr
    28 00002687 B409                <1>     mov ah, 09h
    29 00002689 CD41                <1>     int 41h
    30 0000268B CD40                <1>     int 40h ;Exit to caller or DOS to print bad command interpreter line
    31                              <1> .okVersion:
    32                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    33 0000268D 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    34 00002691 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    35 00002695 48890573D9FFFF      <1>     mov qword [realParent], rax ;Preserve the real parent address
    36                              <1> ;Setup Int 42h, Int 43h and Int 44h
    37 0000269C 498B400A            <1>     mov rax, qword [r8 + psp.oldInt42h] ;Preserve the original addresses
    38 000026A0 4889057FD9FFFF      <1>     mov qword [parentInt42], rax
    39                              <1> 
    40 000026A7 488D150CFDFFFF      <1>     lea rdx, critErrorHandler
    41 000026AE 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    42 000026B2 B844250000          <1>     mov eax, 2544h
    43 000026B7 CD41                <1>     int 41h
    44 000026B9 488D158AFFFFFF      <1>     lea rdx, int43h
    45 000026C0 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    46 000026C4 B843250000          <1>     mov eax, 2543h
    47 000026C9 CD41                <1>     int 41h
    48 000026CB 488D156FE4FFFF      <1>     lea rdx, applicationReturn
    49 000026D2 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    50 000026D6 B842250000          <1>     mov eax, 2542h
    51 000026DB CD41                <1>     int 41h
    52                              <1> ;Get a pointer to DOS Sysvars
    53 000026DD B452                <1>     mov ah, 52h ;Get sysvars
    54 000026DF CD41                <1>     int 41h
    55 000026E1 48891D2FD9FFFF      <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    56                              <1> ;Call for simple internationalisation data
    57 000026E8 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    58 000026ED CD41                <1>     int 41h
    59 000026EF 3CFF                <1>     cmp al, -1
    60 000026F1 7412                <1>     je .skipSwitch
    61 000026F3 88152BD9FFFF        <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    62 000026F9 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    63 000026FC 7507                <1>     jne .skipSwitch
    64 000026FE C6051ED9FFFF2F      <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    65                              <1> .skipSwitch:
    66 00002705 B800380000          <1>     mov eax, 3800h  ;Get current country data
    67 0000270A 488D151DD9FFFF      <1>     lea rdx, ctryData
    68 00002711 CD41                <1>     int 41h ;Write the data to the internal country table
    69                              <1> ;Now determine if this is the master copy of COMMAND.COM
    70                              <1> ;Check if Int 4Eh has the same address as Int 4Dh. If so, we are master.
    71 00002713 B84E350000          <1>     mov eax, 354Eh  ;Get int 4Eh address
    72 00002718 CD41                <1>     int 41h
    73 0000271A 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    74 0000271D B84D350000          <1>     mov eax, 354Dh  ;Get int 4Dh address
    75 00002722 CD41                <1>     int 41h
    76 00002724 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    77 00002727 755C                <1>     jne .skipMaster
    78                              <1> ;Ok so we are master command.com
    79                              <1> ;Now make myself the real parent
    80 00002729 C605F5D8FFFFFF      <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    81 00002730 4C8905D8D8FFFF      <1>     mov qword [realParent], r8
    82                              <1> ;Set master environment as mine
    83 00002737 488D0510FFFFFF      <1>     lea rax, masterEnv
    84 0000273E 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    85                              <1> ;Set current Drive in COMSPEC
    86 00002742 B019                <1>     mov al, 19h ;Get current Drive
    87 00002744 CD41                <1>     int 41h
    88 00002746 0441                <1>     add al, "A"
    89 00002748 880500FFFFFF        <1>     mov byte [masterEnv], al
    90                              <1> ;Set Int 4Eh up
    91 0000274E 488D15B0E8FFFF      <1>     lea rdx, int4Eh
    92 00002755 B84E250000          <1>     mov eax, 254Eh ;Set this as Int 4Eh
    93 0000275A CD41                <1>     int 41h
    94                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    95                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    96 0000275C 488D1511DEFFFF      <1>     lea rdx, crlf
    97 00002763 B409                <1>     mov ah, 09h
    98 00002765 CD41                <1>     int 41h
    99 00002767 E8C9EEFFFF          <1>     call time
   100 0000276C E8FEEDFFFF          <1>     call date
   101 00002771 488D15FCDDFFFF      <1>     lea rdx, crlf
   102 00002778 B409                <1>     mov ah, 09h
   103 0000277A CD41                <1>     int 41h
   104 0000277C 488D1DF5FEFFFF      <1>     lea rbx, endOfAlloc ;Save the Master Environment
   105 00002783 EB32                <1>     jmp short .printInit
   106                              <1> .skipMaster:
   107 00002785 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
   108 0000278C 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
   109 00002794 0FB60589D8FFFF      <1>     movzx eax, byte [switchChar]
   110 0000279B F2AE                <1>     repne scasb
   111 0000279D 67E310              <1>     jecxz .noSwitches
   112 000027A0 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
   113 000027A3 24DF                <1>     and al, 0DFh    ;Convert to UC
   114 000027A5 3C50                <1>     cmp al, "P" ;Is it permanent switch?
   115 000027A7 7507                <1>     jne .noSwitches
   116 000027A9 C60575D8FFFFFF      <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
   117                              <1> .noSwitches:
   118 000027B0 488D1D97FEFFFF      <1>     lea rbx, masterEnv  ;This is the base address to jettison
   119                              <1> .printInit:
   120                              <1> ;Finish by printing INIT string.
   121 000027B7 53                  <1>     push rbx
   122 000027B8 488D1521000000      <1>     lea rdx, initString
   123 000027BF B409                <1>     mov ah, 09h
   124 000027C1 CD41                <1>     int 41h ;Print init string
   125 000027C3 E8B4F2FFFF          <1>     call version.printVersionNumber
   126 000027C8 488D1547000000      <1>     lea rdx, initString2
   127 000027CF B409                <1>     mov ah, 09h
   128 000027D1 CD41                <1>     int 41h ;Print init string
   129 000027D3 5B                  <1>     pop rbx
   130 000027D4 4889252AD8FFFF      <1>     mov qword [stackBottom], rsp    ;Use this to save where to reset rsp to
   131 000027DB E94DE3FFFF          <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   132                              <1> ;Loader Data here
   133                              <1> initString: 
   134 000027E0 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   134 000027E9 66696320436F6D7075- <1>
   134 000027F2 746572205265736561- <1>
   134 000027FB 726368285229205343- <1>
   134 00002804 502F444F5328522920- <1>
   134 0000280D 56657273696F6E2024  <1>
   135                              <1> initString2:
   136 00002816 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Reserach 2022.",CR,LF,"$"
   136 0000281F 202020284329436F70- <1>
   136 00002828 797269676874205363- <1>
   136 00002831 69656E746966696320- <1>
   136 0000283A 436F6D707574657220- <1>
   136 00002843 526573657261636820- <1>
   136 0000284C 323032322E0D0A24    <1>
   137 00002854 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   137 0000285D 20444F532076657273- <1>
   137 00002866 696F6E0D0A24        <1>
   137          ------------------  <1>  info: assembly required 1+2+2 passes

