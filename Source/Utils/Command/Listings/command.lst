     1                                  ;COMMAND.COM main file
     2                                  [map all ./Source/Utils/COMMAND/Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Source/Include/dosMacro.mac"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------------------------------
     9                              <1> ;Generic Macros file
    10                              <1> ;The following instruction extensions allow to conditionally return
    11                              <1> ;The idea was borrowed from the DOS Source Code
    12                              <1> ;
    13                              <1> ;-------------------------------------------------------------------------------
    14                              <1> 
    15                              <1> ;-------------------------------------------------------------------------------
    16                              <1> ;These macros are live and must not be touched
    17                              <1> ;-------------------------------------------------------------------------------
    18                              <1> %macro return 0
    19                              <1> %%_ret:
    20                              <1>     ret
    21                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    22                              <1> %endmacro
    23                              <1> 
    24                              <1> %macro cret 1
    25                              <1> %%_base:
    26                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    27                              <1>     %ifdef retOff
    28                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <1>     %ifdef currSegVBase
    30                              <1>     j%+1 short (retOff+currSegVBase)
    31                              <1>     %else
    32                              <1>     j%+1 short retOff
    33                              <1>     %endif  ;End ifdef currSegVBase
    34                              <1>     %else 
    35                              <1>     j%-1 short %%a
    36                              <1>     return
    37                              <1> %%a:
    38                              <1>     %endif  ;End the distance measurement if
    39                              <1>     %else   
    40                              <1>     j%-1 short %%a
    41                              <1>     return
    42                              <1> %%a:
    43                              <1>     %endif  ;End ifdef retoff
    44                              <1> %endmacro
    45                              <1> 
    46                              <1> %macro retz 0
    47                              <1> cret z
    48                              <1> %endmacro
    49                              <1> 
    50                              <1> %macro retnz 0
    51                              <1> cret nz
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> %macro rete 0
    55                              <1> cret e
    56                              <1> %endmacro
    57                              <1> 
    58                              <1> %macro retne 0
    59                              <1> cret ne
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> %macro retc 0
    63                              <1> cret c
    64                              <1> %endmacro
    65                              <1> 
    66                              <1> %macro retnc 0
    67                              <1> cret nc
    68                              <1> %endmacro
    69                              <1> 
    70                              <1> %macro retb 0
    71                              <1> cret b
    72                              <1> %endmacro
    73                              <1> 
    74                              <1> %macro retnb 0
    75                              <1> cret nb
    76                              <1> %endmacro
    77                              <1> 
    78                              <1> %macro breakpoint 0
    79                              <1> xchg bx, bx
    80                              <1> %endmacro
     7                                  %include "./Source/Include/dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    27 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    32 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Only affects for SUBST drives, not JOIN
    69                              <1> ; Flags: Bit 15 set = Network drive
    70                              <1> ;        Bit 14 set = Physical drive
    71                              <1> ;        Bit 13 set = JOIN'ed drive
    72                              <1> ;        Bit 12 set = SUBST'ed drive
    73                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    74                              <1> endstruc
    75                              <1> ;CDS equates
    76                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    77                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    78                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    79                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    80                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    81                              <1> ;------------------------------------------------------------------------;
    82                              <1> ; The SFT is a way to allow applications to open file handles to files 
    83                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    84                              <1> ; under the first header, and then a second header will be linked to the 
    85                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    86                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    87                              <1> ; using the FCBS= command. Default FCBS=5.
    88                              <1> ;
    89                              <1> ; A file handle describes the file, and the location within the file that
    90                              <1> ; we are reading. The file handle can be manipulated without the file
    91                              <1> ; being in memory, thus allowing the user to access data without needing 
    92                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    93                              <1> ; accessing devices, by treating them as files with their drivers 
    94                              <1> ; responding and translating the manipulations of the file handle itself.
    95                              <1> ; Neither the driver nor the application should see or use the SFT for
    96                              <1> ; the handle, as it is subject to change (and will change when file 
    97                              <1> ; sharing provisions are included). The DOS will make requests to the 
    98                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    99                              <1> ; track of the information in the SFT entry for that handle. 
   100                              <1> ;
   101                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   102                              <1> ; can point to the same file. It all depends on what the applications 
   103                              <1> ; want to do with the File.
   104                              <1> ;
   105                              <1> ; !!!!IMPORTANT!!!!
   106                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   107                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   108                              <1> ;
   109                              <1> ;Each SFT may look like this:
   110                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   111                              <1> ;            |                |
   112                              <1> ;       wNumFiles*sft    wNumFiles*sft
   113                              <1> ;
   114                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   115                              <1> ; System FCBs.
   116                              <1> ;
   117                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   118                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   119                              <1> ;
   120                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   121                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   122                              <1> ;------------------------------------------------------------------------;
   123                              <1> struc sfth   ;System file table header
   124                              <1> ; This is the SFT header.
   125                              <1> ; This structure comes before the start of the first file in the array/table.
   126 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   127 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   128                              <1> endstruc
   129                              <1> 
   130                              <1> struc sft
   131                              <1> ;This is the file struc itself
   132 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   133 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   134 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   135 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   136 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   137 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   138 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   139 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   140 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   141 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   142 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   143 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   144 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   145 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   146 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   147 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   148 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   149 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   150 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   151                              <1> ;                           0 means no record
   152                              <1> endstruc
   153                              <1> ;Open Mode equates
   154                              <1> ;Access modes   Bits[2:0]
   155                              <1> ReadAccess      equ 0h
   156                              <1> WriteAccess     equ 1h
   157                              <1> RWAccess        equ 2h
   158                              <1> ;Bit 3 reserved 0
   159                              <1> ;Sharing modes  Bits[6:4]
   160                              <1> CompatShare     equ 0h
   161                              <1> denyRWShare     equ 10h
   162                              <1> denyWriteShare  equ 20h
   163                              <1> denyReadShare   equ 30h
   164                              <1> denyNoneShare   equ 40h
   165                              <1> netFCBShare     equ 70h
   166                              <1> ;Bit 7 reserved 0
   167                              <1> ;Bits 8-12 reserved 0
   168                              <1> 
   169                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   170                              <1> ;Buffering on writes
   171                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   172                              <1> ;FCB opened file?
   173                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   174                              <1> ;Attribute Byte
   175                              <1> readOnlyFile    equ 1h
   176                              <1> hiddenFile      equ 2h
   177                              <1> systemFile      equ 4h
   178                              <1> volumeLabel     equ 8h
   179                              <1> directoryFile   equ 10h ;Directory entry
   180                              <1> archiveFile     equ 20h
   181                              <1> ;Device Info equates
   182                              <1> ;For a block device, bits [5:0] contain the drive number
   183                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   184                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   185                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   186                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   187                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   188                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   189                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   190                              <1> blokFileToFlush equ 40h ;Set if ANY writes are made to this handle!
   191                              <1> devCharDev      equ 80h ;If set, it is a char device!
   192                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   193                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   194                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   195                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   196                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   197                              <1> 
   198                              <1> ;openAddress   equ DOSSEG:367Ah   
   199                              <1> ;createAddress equ DOSSEG:35E3h   
   200                              <1> ;------------------------------------------------------------------------;
   201                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   202                              <1> ; to an internal buffer, and then copying it to the specified location
   203                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   204                              <1> ; another request for the same sector from the same device is made, so 
   205                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   206                              <1> ; size, selected according to the largest detected sector size during 
   207                              <1> ; the initial loadup.
   208                              <1> ;
   209                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   210                              <1> ;
   211                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   212                              <1> ;------------------------------------------------------------------------;
   213                              <1> 
   214                              <1> struc bufferHdr
   215 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   216 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   217 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   218 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   219 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   220 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   221 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   222 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   223 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   224                              <1>     .dataarea:             ;Points to the start of the data area
   225                              <1> endstruc
   226                              <1> ;Buffer Flag equates
   227                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   228                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   229                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   230                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   231                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   232                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   233                              <1> ;Note! A buffer is marked as referenced only when the application 
   234                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   235                              <1> ;------------------------------------------------------------------------;
   236                              <1> ; Memory control block for each memory arena
   237                              <1> ;------------------------------------------------------------------------;
   238                              <1> struc mcb
   239 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   240 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   241 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   242 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   243                              <1>     .program:
   244                              <1> endstruc
   245                              <1> ;MCB equates
   246                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   247                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   248                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   249                              <1> mcbMarkCtn      equ "M"
   250                              <1> mcbMarkEnd      equ "Z"
   251                              <1> 
   252                              <1> memFirstFit     equ 0   ;First free block goes to application
   253                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   254                              <1> memLastFit      equ 2   ;Last free block goes to application
   255                              <1> 
   256                              <1> ;Owner = Para aligned address => Owning application PSP
   257                              <1> ;...To consider...
   258                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   259                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   260                              <1> ;------------------------------------------------------------------------;
   261                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   262                              <1> ; following order, thus allowing for return values to be placed in the 
   263                              <1> ; registers by accessing the caller register stack frame.
   264                              <1> ;------------------------------------------------------------------------;
   265                              <1> struc callerFrame
   266 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   267 00000008 ????????????????    <1>     .rbx    resq 1    
   268 00000010 ????????????????    <1>     .rcx    resq 1
   269 00000018 ????????????????    <1>     .rdx    resq 1
   270 00000020 ????????????????    <1>     .rsi    resq 1
   271 00000028 ????????????????    <1>     .rdi    resq 1
   272 00000030 ????????????????    <1>     .rbp    resq 1
   273 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   274 00000040 ????????????????    <1>     .r9     resq 1
   275                              <1> ;Pushed by Processor when invoked via Interrupt
   276 00000048 ????????????????    <1>     .rip    resq 1
   277 00000050 ????????????????    <1>     .cs     resq 1
   278 00000058 ????????????????    <1>     .flags  resq 1
   279                              <1> endstruc
   280                              <1> 
   281                              <1> struc dpl
   282                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   283                              <1> ; server calls
   284 00000000 ????????????????    <1>     .rax    resq 1
   285 00000008 ????????????????    <1>     .rbx    resq 1
   286 00000010 ????????????????    <1>     .rcx    resq 1
   287 00000018 ????????????????    <1>     .rdx    resq 1
   288 00000020 ????????????????    <1>     .rsi    resq 1
   289 00000028 ????????????????    <1>     .rdi    resq 1
   290 00000030 ????????????????    <1>     .r8     resq 1
   291 00000038 ????????????????    <1>     .r9     resq 1
   292 00000040 ????????????????    <1>     .align  resq 1
   293 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   294 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   295                              <1> endstruc
   296                              <1> 
   297                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   298 00000000 ????????????????    <1>     .oldRBP         resq 1  
   299 00000008 ??                  <1>     .newBuffers     resb 1  ;New buffers value
   300 00000009 ??                  <1>     .newSFTVal      resb 1
   301 0000000A ??                  <1>     .newFCBSVal     resb 1
   302 0000000B ??                  <1>     .newProtFCBSVal resb 1  ;Number of protected FCBS
   303 0000000C ??                  <1>     .newLastdrive   resb 1
   304 0000000D ??                  <1>     .newStacks      resb 1  ;Ignored for now
   305 0000000E ????                <1>     .newStackSize   resb 2  ;Ignored for now
   306 00000010 ????????            <1>     .newAllocSize   resd 1  ;Used to keep track of reallocation size
   307 00000014 ????????            <1>                     resd 1  ;Alignment byte
   308 00000018 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc fcb
   312                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   313 00000000 ??                  <1>     .driveNum   resb 1
   314 00000001 ????????????????    <1>     .filename   resb 8
   315 00000009 ??????              <1>     .fileext    resb 3
   316 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   317                              <1> ;One block consists of 128 records, of size denoted in the below
   318 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   319 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   320 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   321 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   322 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   323 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   324 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   325 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   326 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   327                              <1>     ;If record size > 64, high byte is ignored.
   328                              <1>     ;Used for random read and write operations to find the right record
   329                              <1> endstruc
   330                              <1> 
   331                              <1> struc filename
   332                              <1> ;8.3 File name struct
   333 00000000 ????????????????    <1>     .fName  resb 8
   334 00000008 ??????              <1>     .fExt   resb 3
   335                              <1> endstruc
   336                              <1> 
   337                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   338 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   339 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   340 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   341 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   342 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   343 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   344 00000016 ????                <1>     .fileTime   resw 1  ;File time
   345 00000018 ????                <1>     .fileDate   resw 1  ;File date
   346 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   347 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   348                              <1> endstruc
   349                              <1> 
   350                              <1> struc psp
   351 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   352 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   353 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   354 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   355 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   356 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   357 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   358 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   359 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   360 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   361 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   362 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   363 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   364 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   365                              <1> ;Extra handle arrays are grouped into a linked list
   366                              <1> ;The below are in the same place as in DOS
   367 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   368 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   369                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   370 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   371 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   372                              <1> endstruc
   373                              <1> 
   374                              <1> struc clkStruc
   375 00000000 ????                <1>     .dateWord   resw 1
   376 00000002 ??                  <1>     .minutes    resb 1
   377 00000003 ??                  <1>     .hours      resb 1
   378 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   379 00000005 ??                  <1>     .seconds    resb 1
   380                              <1> endstruc
   381                              <1> 
   382                              <1> struc countryStruc
   383 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   384                              <1>                         ;0 = month day year hh:mm:ss
   385                              <1>                         ;1 = day month year hh:mm:ss
   386                              <1>                         ;2 = year month day hh:mm:ss
   387 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   388 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   389 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   390 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   391 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   392 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   393                              <1>                         ;0 = Symbol leads, without space
   394                              <1>                         ;1 = Symbol follows, without space
   395                              <1>                         ;2 = Symbol leads, one space
   396                              <1>                         ;3 = Symbol follows, one space
   397                              <1>                         ;4 = Symbol replace decimal separator
   398 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   399 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   400 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   401 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   402 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   403                              <1> endstruc
   404                              <1> 
   405                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   406                              <1> ;for a space of 64Gb
   407                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   408                              <1> dosLowBase  equ 600h    ;Low load address
   409                              <1> 
   410                              <1> ;Critical Error AH bitfield equates
   411                              <1> critRead    equ 0h
   412                              <1> critWrite   equ 1h
   413                              <1> critDOS     equ 0h
   414                              <1> critFAT     equ 2h
   415                              <1> critDir     equ 4h
   416                              <1> critData    equ 6h
   417                              <1> critFailOK  equ 8h
   418                              <1> critRetryOK equ 10h
   419                              <1> critIgnorOK equ 20h
   420                              <1> critCharDev equ 80h
   421                              <1> 
   422                              <1> critIgnore  equ 0
   423                              <1> critRetry   equ 1
   424                              <1> critAbort   equ 2
   425                              <1> critFail    equ 3
   426                              <1> 
   427                              <1> ;MISC ASCII control chars
   428                              <1> NUL equ 00h ;^@         | ASCII Null
   429                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   430                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   431                              <1> BEL equ 07h ;^G         | ASCII Bell
   432                              <1> BSP equ 08h ;^H         | ASCII Backspace
   433                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   434                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   435                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   436                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   437                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   438                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   439                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   440                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   441                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   442                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   443                              <1> SPC equ 20h ;Printable  | ASCII Space
   444                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   445                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   446                              <1> 
   447                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   448                              <1> ;Extended Ascii Codes
   449                              <1> eF1     equ 3Bh ;F1 second byte
   450                              <1> eF2     equ 3Ch ;F2 second byte
   451                              <1> eF3     equ 3Dh ;F3 second byte
   452                              <1> eF4     equ 3Eh ;F4 second byte
   453                              <1> eF5     equ 3Fh ;F5 second byte
   454                              <1> eF6     equ 40h ;F6 second byte
   455                              <1> eF7     equ 41h ;F7 second byte
   456                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   457                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   458                              <1> eIns    equ 52h ;Insert second byte
   459                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   460                              <1> 
   461                              <1> ;Default Configuration for the system
   462                              <1> 
   463                              <1> buffersDefault  equ 30
   464                              <1> filesDefault    equ 20
   465                              <1> fcbsDefault     equ 4
   466                              <1> safeFcbsDeflt   equ 0
   467                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Source/Include/dosError.inc"
     9                              <1> ;DOS Error codes
    10                              <1> 
    11                              <1> ;Extended Error Codes
    12                              <1> errInvFnc   equ 1   ;Invalid function number
    13                              <1> errFnf      equ 2   ;File not found
    14                              <1> errPnf      equ 3   ;Path not found
    15                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    16                              <1> errAccDen   equ 5   ;Access denied (to resource)
    17                              <1> errBadHdl   equ 6   ;Invalid handle
    18                              <1> errMCBbad   equ 7   ;MCB's destroyed
    19                              <1> errNoMem    equ 8   ;Insufficient memory
    20                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    21                              <1> errBadEnv   equ 10  ;Invalid environment
    22                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    23                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    24                              <1> errInvDat   equ 13  ;Invalid data
    25                              <1> ;           equ 14  ;Reserved
    26                              <1> errBadDrv   equ 15  ;Invalid drive specified
    27                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    28                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    29                              <1> errNoFil    equ 18  ;No more files
    30                              <1> ;The following are Driver error codes + 19
    31                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    32                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    33                              <1> errUnkUnt   equ 20  ;Unknown Unit
    34                              <1> errDrvNR    equ 21  ;Drive not ready
    35                              <1> errUnkCmd   equ 22  ;Unknown Command
    36                              <1> errCRCerr   equ 23  ;Data (CRC) error
    37                              <1> errBadRLn   equ 24  ;Bad request structure length
    38                              <1> errSekErr   equ 25  ;Seek error
    39                              <1> errUnkMed   equ 26  ;Unknown media type
    40                              <1> errSecNF    equ 27  ;Sector not Found
    41                              <1> errNoPap    equ 28  ;Printer out of paper
    42                              <1> errWF       equ 29  ;Write fault
    43                              <1> errRF       equ 30  ;Read fault
    44                              <1> errGF       equ 31  ;General fault
    45                              <1> ;----------------------------------------------
    46                              <1> ;The following two go inbetween the Disk errors
    47                              <1> errShrVio   equ 32  ;Sharing violations
    48                              <1> errLokVio   equ 33  ;File Lock violation
    49                              <1> ;----------------------------------------------
    50                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    51                              <1> errNoFCB    equ 35  ;FCB unavailable
    52                              <1> errShrFul   equ 36  ;Sharing buffer full
    53                              <1> 
    54                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    55                              <1> 
    56                              <1> errFilExist equ 80  ;File already exists
    57                              <1> errDirExist equ 82  ;Directory already exists
    58                              <1> errFI44     equ 83  ;Fail on INT 44h
    59                              <1> errRedir    equ 84  ;Too many levels of redirection
    60                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    61                              <1> errBadPass  equ 86  ;Bad password
    62                              <1> errBadParam equ 87  ;Bad parameter passed to request
    63                              <1> errNetWrite equ 88  ;Network Write Fault
    64                              <1> ;-----------------------------------------------------------------------------
    65                              <1> ;Error Loci
    66                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    67                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    68                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    69                              <1> eLocChr     equ 4   ;Serial/Character Device error
    70                              <1> eLocMem     equ 5   ;Related to RAM
    71                              <1> ;-----------------------------------------------------------------------------
    72                              <1> ;Error Actions
    73                              <1> eActRet     equ 1   ;Retry
    74                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    75                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    76                              <1> eActAbt     equ 4   ;Abort with cleanup
    77                              <1> eActKil     equ 5   ;Abort without cleanup
    78                              <1> eActIgn     equ 6   ;Ignore error
    79                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    80                              <1> ;-----------------------------------------------------------------------------
    81                              <1> ;Error classes
    82                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    83                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    84                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    85                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    86                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    87                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    88                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    89                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    90                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    91                              <1> eClsLocked  equ 10  ;Resource Locked
    92                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    93                              <1> eClsClash   equ 12  ;Resource already exists!
    94                              <1> eClsUnk     equ 13  ;Unknown class
     9                                  %include "./Source/Utils/COMMAND/Data/cmdEqu.asm"
    10                              <1> ;Data equates and struct declarations
    11                              <1> 
    12                              <1> cmdBufferL  equ 128 ;Length of a command line buffer
    13                              <1> driveSpecL  equ 2   ;Space for X:
    14                              <1> dirPathL    equ 64  ;Length of a directory path
    15                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
    16                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
    17                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
    18                              <1> fullDirPathL equ driveSpecL + dirPathL
    19                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    20                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    21                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    22                              <1> 
    23                              <1> ;Use PSP FCB's for switch buffers
    24                              <1> fcb1        equ psp.fcb1
    25                              <1> fcb2        equ psp.fcb2
    26                              <1> ;Use the dta as the built command line buffer.
    27                              <1> cmdLineCnt  equ psp.parmList
    28                              <1> cmdLine     equ psp.progTail
    29                              <1> 
    30                              <1> 
    31                              <1> ;Struct Declarations
    32                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    33 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    34 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    35 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    36 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    37 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    38                              <1> endstruc
    39                              <1> 
    40                              <1> struc execProg  ;For use with EXEC-ing a child task
    41 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    42 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    43 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    44 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    45                              <1> endstruc
    46                              <1> 
    47                              <1> ;Directory attribute equates
    48                              <1>     dirReadOnly     equ 01h
    49                              <1>     dirHidden       equ 02h
    50                              <1>     dirSystem       equ 04h
    51                              <1>     dirVolumeID     equ 08h
    52                              <1>     dirDirectory    equ 10h
    53                              <1>     dirArchive      equ 20h
    54                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    55                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    56                              <1>     ;If any of the three bits are set, then ALL three bits are set
    57                              <1>     ; in addition to whatever the user passed to search for.
    58                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    59                              <1>     dirIncFiles     equ dirHidden | dirSystem
    10                                  Segment .data align=1 
    11                                  %include "./Source/Utils/COMMAND/Data/cmdData.asm"
    12                              <1> ;Static Data Area for COMMAND.COM    
    13                              <1> startLbl:   ;Start symbol, this is the entry point
    14 00000000 E91B1A0000          <1>     jmp cmdLdr
    15 00000005 0000000000000000    <1> stackBottom dq 0    ;Pointer to the top of the stack as allocated by DOS
    16 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
    17 0000000F FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
    18 00000017 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
    19 0000001F 1400                <1> numHdls     dw 20   ;Get number of handles permitted, hardcoded in this version
    20 00000021 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    21 00000023 5C                  <1> pathSep     db "\"  ;Default path sep
    22 00000024 2F                  <1> switchChar  db "/"  ;Default switch char
    23                              <1> ;Static strings, not used in command line parsing
    24 00000025 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    24 0000002E 000000000000000000- <1>
    24 00000037 000000000000000000- <1>
    24 00000040 000000000000000000- <1>
    24 00000049 0000                <1>
    25 0000004B 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    25 00000054 000000000000000000- <1>
    25 0000005D 000000000000000000- <1>
    25 00000066 000000000000000000- <1>
    25 0000006F 000000000000000000- <1>
    25 00000078 000000000000000000- <1>
    25 00000081 000000000000000000- <1>
    25 0000008A 00000000            <1>
    26                              <1> 
    27                              <1> 
    28                              <1> cmdLineStatePtr:
    29 0000008E 00                  <1> cmdStartOff db 0    ;Offset to the first char for this command (may be a space)
    30 0000008F 00                  <1> cmdEndOff   db 0    ;Offset to the terminating char for this command (0Dh or |)
    31 00000090 00                  <1> pipeFlag    db 0    ;If set, we are piping across a command
    32 00000091 0000                <1> pipeHndl    dw 0    ;If pipeFlag set, this var has the handle to the pipe file
    33 00000093 202020202020202020- <1> pipeName    db 11 dup (" ") ;Name of the pipe file we created
    33 0000009C 2020                <1>
    34                              <1> 
    35                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    36                              <1> ;These variables are valid for a SINGLE command in a command line
    37 0000009E 0000                <1> cmdDrvSpec  dw 0    ;Read the first word in to see if the pathspec has drivespec
    38 000000A0 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    39 000000A1 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    40                              <1> ;                    If 2, we are redirecting output to a file, by appending
    41                              <1> ;FLG and SWCH are read as a word when checking if argX is a switch
    42 000000A2 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    43 000000A3 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    44 000000A4 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    45                              <1> 
    46 000000A5 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    47 000000A6 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    48 000000A7 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    49                              <1> 
    50                              <1> cmdStateL equ $ - cmdStatePtr
    51                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    52                              <1> 
    53                              <1> ;Structs and strings
    54                              <1> 
    55 000000A8 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    55 000000B1 00000000000000      <1>
    56 000000B8 2B                  <1> cmdFFBlock  db ffBlock_size ;Internal Find First Block to use as default DTA
    57                              <1> 
    58 000000B9 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    58 000000C2 000000000000000000- <1>
    58 000000CB 000000000000000000- <1>
    58 000000D4 000000000000000000- <1>
    58 000000DD 000000000000000000- <1>
    58 000000E6 000000000000000000- <1>
    58 000000EF 000000000000000000- <1>
    58 000000F8 000000000000000000- <1>
    58 00000101 000000000000000000- <1>
    58 0000010A 000000000000000000- <1>
    58 00000113 000000000000000000- <1>
    58 0000011C 000000000000000000- <1>
    58 00000125 000000000000000000- <1>
    58 0000012E 000000000000000000- <1>
    58 00000137 0000                <1>
    59 00000139 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    59 00000142 000000000000000000- <1>
    59 0000014B 000000000000000000- <1>
    59 00000154 000000000000000000- <1>
    59 0000015D 000000000000000000- <1>
    59 00000166 000000000000000000- <1>
    59 0000016F 000000000000000000- <1>
    59 00000178 000000000000000000- <1>
    59 00000181 000000000000000000- <1>
    59 0000018A 000000000000000000- <1>
    59 00000193 000000000000000000- <1>
    59 0000019C 000000000000000000- <1>
    59 000001A5 000000000000000000- <1>
    59 000001AE 000000000000000000- <1>
    59 000001B7 0000                <1>
    60 000001B9 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)  ;Space for full path to a external command
    60 000001C2 000000000000000000- <1>
    60 000001CB 000000000000000000- <1>
    60 000001D4 000000000000000000- <1>
    60 000001DD 000000000000000000- <1>
    60 000001E6 000000000000000000- <1>
    60 000001EF 000000000000000000- <1>
    60 000001F8 000000000000000000- <1>
    60 00000201 00000000000000      <1>
    61                              <1> 
    62 00000208 000000000000000000- <1> fcbCmdSpec  db fcbNameL dup (0) ;Used to make a FCB style name for the file
    62 00000211 0000                <1>
    63 00000213 000000000000000000- <1> cmdSpec     db fileNameZL dup (0)   ;ASCIIZ command spec for the command name
    63 0000021C 00000000            <1>
    64 00000220 000000000000000000- <1> cmdName     db cmdNameL dup (0) ;Command name string prefixed by length of word
    64 00000229 0000000000          <1>
    65                              <1> 
    66 0000022E 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    66 00000237 000000000000000000- <1>
    66 00000240 000000000000000000- <1>
    66 00000249 000000000000000000- <1>
    66 00000252 000000000000000000- <1>
    66 0000025B 000000000000000000- <1>
    66 00000264 000000000000000000- <1>
    66 0000026D 000000000000000000- <1>
    66 00000276 00000000000000      <1>
    67 0000027D 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    67 00000286 000000000000000000- <1>
    67 0000028F 000000000000000000- <1>
    67 00000298 000000000000000000- <1>
    67 000002A1 000000000000000000- <1>
    67 000002AA 000000000000000000- <1>
    67 000002B3 000000000000000000- <1>
    67 000002BC 000000000000000000- <1>
    67 000002C5 00000000000000      <1>
    68                              <1> 
    69 000002CC 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Contains the pathspec for the search file
    69 000002D5 000000000000000000- <1>
    69 000002DE 000000000000000000- <1>
    69 000002E7 000000000000000000- <1>
    69 000002F0 000000000000000000- <1>
    69 000002F9 000000000000000000- <1>
    69 00000302 000000000000000000- <1>
    69 0000030B 000000000000000000- <1>
    69 00000314 000000000000000000- <1>
    69 0000031D 000000000000000000- <1>
    69 00000326 000000000000000000- <1>
    69 0000032F 000000000000000000- <1>
    69 00000338 000000000000000000- <1>
    69 00000341 000000000000000000- <1>
    69 0000034A 0000                <1>
    70                              <1> ;The above is larger than is needed/supported by DOS to allow for 
    71                              <1> ; users overtyping
    72                              <1> 
    73                              <1> ;Internal Function vars
    74 0000034C 00                  <1> dirPrnType  db 0    ;Print type.    Bit[0] set => /W or /w specified
    75                              <1> ;                                   Bit[1] set => /P or /p specified
    76 0000034D 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    77 0000034E 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    78 0000034F 00                  <1> dirPathOff  db 0
    79 00000350 000000000000000000- <1> dirVolLbl   db 13 dup (0)
    79 00000359 00000000            <1>
    80 0000035D 0000000000000000    <1> dirVolPathBuf db 8 dup (0)  ;Used to build X:\*.*,0 for volume label search
    81 00000365 00                  <1> dirDrv      db 0    ;0 based drive number to use
    12                                  %include "./Source/Utils/COMMAND/Data/cmdTable.asm"
    13                              <1> ;Function dispatch table
    14                              <1> functionTable:
    15                              <1> ;Use Pascal strings with each row of hte table having three columns:
    16                              <1> ; Col 1, BYTE, Length of command
    17                              <1> ; Col 2, String, String representing the user input
    18                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
    19 00000366 03444952            <1>     db 3, "DIR"
    20 0000036A 2E0D                <1>     dw dir - startLbl
    21                              <1> 
    22 0000036C 024344              <1>     db 2, "CD"
    23 0000036F FF10                <1>     dw chdir - startLbl
    24                              <1> 
    25 00000371 054348444952        <1>     db 5, "CHDIR"
    26 00000377 FF10                <1>     dw chdir - startLbl
    27                              <1> 
    28 00000379 024D44              <1>     db 2, "MD"
    29 0000037C B911                <1>     dw mkdir - startLbl
    30                              <1> 
    31 0000037E 054D4B444952        <1>     db 5, "MKDIR"
    32 00000384 B911                <1>     dw mkdir - startLbl
    33                              <1> 
    34 00000386 025244              <1>     db 2, "RD"
    35 00000389 1E12                <1>     dw rmdir - startLbl
    36                              <1> 
    37 0000038B 05524D444952        <1>     db 5, "RMDIR"
    38 00000391 1E12                <1>     dw rmdir - startLbl
    39                              <1> 
    40 00000393 0344454C            <1>     db 3, "DEL"
    41 00000397 8412                <1>     dw erase - startLbl
    42                              <1> 
    43 00000399 054552415345        <1>     db 5, "ERASE"
    44 0000039F 8412                <1>     dw erase - startLbl
    45                              <1> 
    46 000003A1 0444415445          <1>     db 4, "DATE"
    47 000003A6 8512                <1>     dw date - startLbl
    48                              <1> 
    49 000003A8 0454494D45          <1>     db 4, "TIME"
    50 000003AD 8612                <1>     dw time - startLbl
    51                              <1> 
    52 000003AF 04434F5059          <1>     db 4, "COPY"
    53 000003B4 8312                <1>     dw copy - startLbl
    54                              <1> 
    55 000003B6 0443545459          <1>     db 4, "CTTY"
    56 000003BB 8712                <1>     dw ctty - startLbl
    57                              <1> 
    58 000003BD 03434C53            <1>     db 3, "CLS"
    59 000003C1 8812                <1>     dw cls - startLbl
    60                              <1> 
    61 000003C3 05425245414B        <1>     db 5, "BREAK"
    62 000003C9 FA12                <1>     dw break - startLbl
    63                              <1> 
    64 000003CB 0652454E414D45      <1>     db 6, "RENAME"
    65 000003D2 7B13                <1>     dw rename - startLbl
    66                              <1> 
    67 000003D4 08545255454E414D45  <1>     db 8, "TRUENAME"
    68 000003DD 7C13                <1>     dw truename - startLbl
    69                              <1> 
    70 000003DF FF                  <1>     db -1   ;End of table
    13                                  %include "./Source/Utils/COMMAND/Data/cmdMsg.asm"
    14                              <1> ;COMMAND.COM Messages and strings
    15 000003E0 0D0A24              <1> crlf    db  CR,LF,"$"
    16 000003E3 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
    16 000003EC 696C65206D69737369- <1>
    16 000003F5 6E670D0A24          <1>
    17 000003FA 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
    17 00000403 6469736B2077697468- <1>
    17 0000040C 206261746368206669- <1>
    17 00000415 6C65                <1>
    18 00000417 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
    18 00000420 737320616E79206B65- <1>
    18 00000429 79207768656E207265- <1>
    18 00000432 6164790D0A24        <1>
    19 00000438 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
    19 00000441 6E64206F722066696C- <1>
    19 0000044A 65206E616D650D0A24  <1>
    20 00000453 4475706C6963617465- <1> dupName db  "Duplicate file name or "
    20 0000045C 2066696C65206E616D- <1>
    20 00000465 65206F7220          <1>
    21 0000046A 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    21 00000473 666F756E640D0A24    <1>
    22 0000047B 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    22 00000484 656E74206469736B20- <1>
    22 0000048D 73706163650D0A24    <1>
    23 00000495 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    23 0000049E 7669726F6E6D656E74- <1>
    23 000004A7 2073706163650D0A24  <1>
    24 000004B0 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    24 000004B9 74696F6E206572726F- <1>
    24 000004C2 720D0A24            <1>
    25 000004C6 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    25 000004CF 6F7420626520636F70- <1>
    25 000004D8 696564206F6E746F20- <1>
    25 000004E1 697473656C660D0A24  <1>
    26 000004EA 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    26 000004F3 662064657374696E61- <1>
    26 000004FC 74696F6E206C6F7374- <1>
    26 00000505 206265666F72652063- <1>
    26 0000050E 6F70790D0A24        <1>
    27                              <1> ;Copy end message. First write # files copied then this message 
    28 00000514 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    28 0000051D 636F706965640D0A24  <1>
    29                              <1> ;Dir end1 msg. First write # files in dir then this
    30 00000526 2046696C6528732920- <1> dirOk   db  " File(s) $"
    30 0000052F 24                  <1>
    31                              <1> ;Dir end2 msg. First write # bytes free then this message
    32 00000530 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    32 00000539 65650D0A24          <1>
    33 0000053E 203C4449523E202020- <1> dirLbl  db  " <DIR>   $"
    33 00000547 24                  <1>
    34                              <1> 
    35 00000548 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    35 00000551 726976652073706563- <1>
    35 0000055A 696669636174696F6E- <1>
    35 00000563 0D0A24              <1>
    36 00000566 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    36 0000056F 6B6579207768656E20- <1>
    36 00000578 7265616479202E202E- <1>
    36 00000581 202E2024            <1>
    37 00000585 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    37 0000058E 6172616D657465720D- <1>
    37 00000597 0A24                <1>
    38                              <1> 
    39 00000599 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    39 000005A2 576564546875467269- <1>
    39 000005AB 536174              <1>
    40 000005AE 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    40 000005B7 206461746524        <1>
    41 000005BD 43757272656E742064- <1> curDate db  "Current date is $"
    41 000005C6 6174652069732024    <1>
    42 000005CE 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date: $"
    42 000005D7 657720646174653A20- <1>
    42 000005E0 24                  <1>
    43 000005E1 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    43 000005EA 2074696D6524        <1>
    44 000005F0 43757272656E742074- <1> curTime db  "Current time is $"
    44 000005F9 696D652069732024    <1>
    45 00000601 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    45 0000060A 65772074696D653A20- <1>
    45 00000613 24                  <1>
    46                              <1> 
    47 00000614 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    47 0000061D 7572652028592F4E29- <1>
    47 00000626 3F2024              <1>
    48                              <1> 
    49 00000629 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    49 00000632 56657273696F6E2024  <1>
    50                              <1> dosVerL equ $ - dosVer
    51                              <1> 
    52 0000063B 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    52 00000644 6E2064726976652024  <1>
    53 0000064D 2069732024          <1> volOk   db " is $"
    54 00000652 20686173206E6F206C- <1> volNo   db " has no label$"
    54 0000065B 6162656C24          <1>
    55                              <1> 
    56 00000660 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    56 00000669 69726563746F72790D- <1>
    56 00000672 0A24                <1>
    57 00000674 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    57 0000067D 206372656174652064- <1>
    57 00000686 69726563746F72790D- <1>
    57 0000068F 0A24                <1>
    58 00000691 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    58 0000069A 6174682C206E6F7420- <1>
    58 000006A3 6469726563746F7279- <1>
    58 000006AC 2C0D0A              <1>
    59 000006AF 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    59 000006B8 6F7279206E6F742065- <1>
    59 000006C1 6D7074790D0A24      <1>
    60 000006C8 204469726563746F72- <1> dirMain db " Directory of  $"
    60 000006D1 79206F66202024      <1>
    61 000006D8 4E6F20506174682024  <1> noPath  db "No Path $"
    62 000006E1 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    62 000006EA 7269766520696E2073- <1>
    62 000006F3 656172636820706174- <1>
    62 000006FC 680D0A24            <1>
    63 00000700 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    63 00000709 65766963650D0A24    <1>
    64 00000711 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    64 0000071A 20666F756E640D0A24  <1>
    65 00000723 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    65 0000072C 726F720D0A24        <1>
    66 00000732 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    66 0000073B 6F74206265206E6573- <1>
    66 00000744 7465640D0A24        <1>
    67 0000074A 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    67 00000753 6174652066696C6520- <1>
    67 0000075C 6572726F7220647572- <1>
    67 00000765 696E6720706970650D- <1>
    67 0000076E 0A24                <1>
    68 00000770 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    68 00000779 2062696E6172792072- <1>
    68 00000782 656164732066726F6D- <1>
    68 0000078B 206120646576696365- <1>
    68 00000794 0D0A24              <1>
    69 00000797 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    70 0000079D 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    71 000007A2 425245414B20697320- <1> breakIs db "BREAK is $"
    71 000007AB 24                  <1>
    72 000007AC 564552494659206973- <1> verifyIs    db "VERIFY is $"
    72 000007B5 2024                <1>
    73 000007B7 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    74 000007C0 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    74 000007C9 617468206F72206669- <1>
    74 000007D2 6C65206E616D650D0A- <1>
    74 000007DB 24                  <1>
    75 000007DC 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    75 000007E5 756D626572206F6620- <1>
    75 000007EE 706172616D65746572- <1>
    75 000007F7 730D0A24            <1>
    76 000007FB 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    76 00000804 74696E6720746F2064- <1>
    76 0000080D 6576696365          <1>
    77 00000812 08200800            <1> backSpace   db BSP," ",BSP,NUL
    78                              <1> 
    79 00000816 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    80 0000081A 2020202024          <1> fourSpc  db "    $"
    81 0000081F 20202024            <1> threeSpc db "   $"
    82 00000823 202024              <1> twoSpc   db "  $"
    83                              <1> 
    84 00000826 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    84 0000082F 696679204F4E206F72- <1>
    84 00000838 204F46460D0A24      <1>
    85 0000083F 504154483D          <1> pathEVar db "PATH="
    86 00000844 50524F4D50543D      <1> promptEVar  db "PROMPT="
    14                                  %include "./Source/Utils/COMMAND/Source/cmdMain.asm"
    15                              <1> commandStart:
    16                              <1>     ;Resize Allocation, jump here with endpointer in rbx
    17                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
    18                              <1>     ; that the jump to safety won't be gobbled up when multitasking
    19 0000084B 49F7D8              <1>     neg r8  ;Convert r8 to -r8
    20 0000084E 4A8D5C0311          <1>     lea rbx, qword [rbx + r8 + 11h]    ;Get # of bytes for COMMAND.COM
    21 00000853 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
    22 00000856 B44A                <1>     mov ah, 4Ah ;Realloc
    23 00000858 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    24 0000085B CD41                <1>     int 41h
    25 0000085D EB5A                <1>     jmp short commandMain
    26                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    27 0000085F B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    28 00000864 CD41                <1>     int 41h
    29 00000866 668905A0F7FFFF      <1>     mov word [returnCode], ax
    30                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    31 0000086D 488D15EE0E0000      <1>     lea rdx, critErrorHandler
    32 00000874 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    33 00000878 B844250000          <1>     mov eax, 2544h
    34 0000087D CD41                <1>     int 41h
    35 0000087F 488D156C110000      <1>     lea rdx, int43h
    36 00000886 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    37 0000088A B843250000          <1>     mov eax, 2543h
    38 0000088F CD41                <1>     int 41h
    39 00000891 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    40 00000898 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    41 0000089C B842250000          <1>     mov eax, 2542h
    42 000008A1 CD41                <1>     int 41h
    43                              <1> ;Close all handles from 5->MAX
    44 000008A3 0FB70D75F7FFFF      <1>     movzx ecx, word [numHdls]
    45 000008AA BB05000000          <1>     mov ebx, 5
    46                              <1> .handleClose:
    47 000008AF B43E                <1>     mov ah, 3Eh ;File close
    48 000008B1 CD41                <1>     int 41h
    49 000008B3 FFC3                <1>     inc ebx ;Goto next file
    50 000008B5 39CB                <1>     cmp ebx, ecx
    51 000008B7 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    52                              <1> commandMain:
    53                              <1> ;Setup Commandline
    54 000008B9 FA                  <1>     cli
    55 000008BA 488B2544F7FFFF      <1>     mov rsp, qword [stackBottom]    ;Reset internal stack pointer pos
    56 000008C1 FB                  <1>     sti
    57 000008C2 FC                  <1>     cld ;Ensure stringops are done the right way
    58 000008C3 C605EFF7FFFF80      <1>     mov byte [inBuffer], 80h    ;Reset the buffer length
    59                              <1> .inputMain:
    60 000008CA E8B20C0000          <1>     call clearCommandLineState
    61 000008CF E8E70A0000          <1>     call printCRLF
    62 000008D4 E8800C0000          <1>     call printPrompt
    63                              <1> 
    64 000008D9 488D15D9F7FFFF      <1>     lea rdx, inBuffer
    65 000008E0 B80A0C0000          <1>     mov eax, 0C0Ah  ;Do Buffered input
    66 000008E5 CD41                <1>     int 41h
    67 000008E7 E8CF0A0000          <1>     call printCRLF  ;Note we have accepted input
    68                              <1> 
    69                              <1> ;First check we had something typed in of length greater than 1
    70                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    71 000008EC 803DC7F7FFFF01      <1>     cmp byte [inBuffer + 1], 1  ;Check input length valid
    72 000008F3 762A                <1>     jbe .dfltErrExit
    73                              <1>     ;Copy over the input text
    74 000008F5 488D35BDF7FFFF      <1>     lea rsi, inBuffer
    75 000008FC 488D3D36F8FFFF      <1>     lea rdi, cmdBuffer
    76 00000903 B980000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    77 00000908 F3A4                <1>     rep movsb
    78 0000090A 31C0                <1>     xor eax, eax
    79 0000090C 6689057BF7FFFF      <1>     mov word [cmdStartOff], ax  ;Clear start and end Off positions
    80 00000913 E814000000          <1>     call parseInput
    81 00000918 E8AD010000          <1>     call doCommandLine
    82 0000091D EBAB                <1>     jmp short .inputMain
    83                              <1> .dfltErrExit:
    84 0000091F 488D1512FBFFFF      <1>     lea rdx, badCmd
    85 00000926 B409                <1>     mov ah, 09h
    86 00000928 CD41                <1>     int 41h
    87 0000092A EB9E                <1>     jmp short .inputMain
    88                              <1> 
    89                              <1> parseInput:
    90                              <1> ;EndOff is set up before entering this part
    91                              <1> ;Copies a nicely formatted version of the input command line
    92                              <1> ; without any redirections to psp.dta
    93 0000092C 488D3508F8FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
    94 00000933 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
    95 0000093A 0FB61D4EF7FFFF      <1>     movzx ebx, byte [cmdEndOff] ;Get the old end offset
    96 00000941 4801DE              <1>     add rsi, rbx    ;Move rsi to the start of this new command
    97 00000944 E8010C0000          <1>     call skipSpaces ;Skip any preceeding spaces
    98 00000949 66AD                <1>     lodsw   ;Get the first two chars into ax
    99 0000094B 6689054CF7FFFF      <1>     mov word [cmdDrvSpec], ax ;Store these chars as if they are the drvspec
   100 00000952 4881EE02000000      <1>     sub rsi, 2  ;Go back to the start of the command
   101 00000959 56                  <1>     push rsi
   102 0000095A 57                  <1>     push rdi
   103 0000095B 488D3D57F8FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   104 00000962 57                  <1>     push rdi
   105 00000963 E868030000          <1>     call copyCommandTailItem
   106 00000968 5F                  <1>     pop rdi
   107 00000969 9C                  <1>     pushfq  ;Save the CF state
   108 0000096A E8630B0000          <1>     call strlen
   109 0000096F FFC9                <1>     dec ecx ;Drop the terminating char from the count
   110 00000971 58                  <1>     pop rax ;Get the CF state in al
   111 00000972 5F                  <1>     pop rdi
   112 00000973 5E                  <1>     pop rsi
   113 00000974 F3A4                <1>     rep movsb   ;Now we copy the command into the psp command line
   114 00000976 A801                <1>     test al, 1  ;Was CF set?
   115 00000978 0F8586000000        <1>     jnz .exit   ;If an embedded CR was found in the filename, exit!
   116                              <1> .cmdLineProcess:
   117 0000097E E8C70B0000          <1>     call skipSpaces ;Go to the next char in the input line
   118                              <1> .redirFound:
   119 00000983 AC                  <1>     lodsb   ;Get first non-space char (setupRedir skips spaces before ret)
   120 00000984 3C0D                <1>     cmp al, CR  ;If this was a CR, we stop processing
   121 00000986 747C                <1>     je .exit
   122 00000988 E8D6020000          <1>     call checkAndSetupRedir ;If not, check if we have a redir element
   123 0000098D 7275                <1>     jc .exit    ;CF=CY only if pipe, which is equivalent to CR when processing
   124 0000098F 74F2                <1>     jz .redirFound  ;If we had a < > or >>, proceed to check if next char CR
   125 00000991 B020                <1>     mov al, " "
   126 00000993 AA                  <1>     stosb   ;Store a space to make space for the command file parameter
   127 00000994 48FFCE              <1>     dec rsi ;Move rsi back to the first char
   128 00000997 F60504F7FFFFFF      <1>     test byte [arg1Flg], -1
   129 0000099E 7521                <1>     jnz .arg2
   130                              <1> .arg1:
   131 000009A0 C605FBF6FFFFFF      <1>     mov byte [arg1Flg], -1
   132 000009A7 E89E0B0000          <1>     call skipSpaces
   133 000009AC 4889F0              <1>     mov rax, rsi
   134 000009AF 488D1D83F7FFFF      <1>     lea rbx, cmdBuffer
   135 000009B6 4829D8              <1>     sub rax, rbx
   136 000009B9 8805E4F6FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   137 000009BF EB2A                <1>     jmp short .argCommon
   138                              <1> .arg2:
   139 000009C1 F605DDF6FFFFFF      <1>     test byte [arg2Flg], -1
   140 000009C8 7521                <1>     jnz .argCommon
   141 000009CA C605D4F6FFFFFF      <1>     mov byte [arg2Flg], -1
   142 000009D1 E8740B0000          <1>     call skipSpaces
   143 000009D6 4889F0              <1>     mov rax, rsi
   144 000009D9 488D1D59F7FFFF      <1>     lea rbx, cmdBuffer
   145 000009E0 4829D8              <1>     sub rax, rbx
   146 000009E3 8805BDF6FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   147 000009E9 EB00                <1>     jmp short .argCommon
   148                              <1> .argCommon:
   149                              <1>     ;More than two arguments? Do nothing more than just copy it
   150                              <1>     ; over. If we encounter an embedded CR, exit there too
   151 000009EB E85A0B0000          <1>     call skipSpaces
   152 000009F0 803E0D              <1>     cmp byte [rsi], CR  ;Are we at the end of the commandline?
   153 000009F3 740F                <1>     je .exit
   154                              <1>     ;If not, we copy it over
   155 000009F5 E8D6020000          <1>     call copyCommandTailItem    ;Stores a terminating null we dont want
   156 000009FA 488D7FFF            <1>     lea rdi, qword [rdi - 1]    ;Point back at the inserted terminating null
   157 000009FE 0F837AFFFFFF        <1>     jnc .cmdLineProcess
   158                              <1> .exit:
   159 00000A04 488D1D2EF7FFFF      <1>     lea rbx, cmdBuffer
   160 00000A0B 48FFCE              <1>     dec rsi
   161 00000A0E 4829DE              <1>     sub rsi, rbx    ;Get the offset into the command line
   162 00000A11 89F3                <1>     mov ebx, esi
   163 00000A13 881D76F6FFFF        <1>     mov byte [cmdEndOff], bl    ;Store the offset to the terminating char
   164 00000A19 B00D                <1>     mov al, CR
   165 00000A1B AA                  <1>     stosb   ;Store the terminating CR in the psp command line
   166                              <1>     ;Now compute the command line length 
   167 00000A1C 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine] 
   168 00000A23 B00D                <1>     mov al, CR
   169 00000A25 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   170 00000A27 FFC9                <1>     dec ecx ;rcx = -1
   171 00000A29 F2AE                <1>     repne scasb
   172 00000A2B F7D1                <1>     not ecx
   173 00000A2D FEC9                <1>     dec cl  ;Dont include terminating CR
   174 00000A2F 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   175 00000A36 880F                <1>     mov byte [rdi], cl
   176                              <1>     ;Before returning, we copy the command name to cmdName
   177 00000A38 488D3D7AF7FFFF      <1>     lea rdi, cmdPathSpec
   178 00000A3F 4889FB              <1>     mov rbx, rdi    ;Use rbx as the ptr to the first char in the commandspec
   179 00000A42 30C0                <1>     xor al, al  ;Search for the terminating null
   180 00000A44 B94F000000          <1>     mov ecx, fileSpecZL ;Max number of chars the length could be
   181 00000A49 F2AE                <1>     repne scasb
   182 00000A4B 48FFCF              <1>     dec rdi ;Go to the last char in the command
   183 00000A4E 4889FE              <1>     mov rsi, rdi
   184 00000A51 FD                  <1>     std ;Now we go backwards to where rsi = rbx OR byte [rsi] = pathSep
   185                              <1> .keepSearching:
   186 00000A52 AC                  <1>     lodsb
   187 00000A53 3A05CAF5FFFF        <1>     cmp al, byte [pathSep]
   188 00000A59 740B                <1>     je .cmdStartFnd
   189 00000A5B 4839DE              <1>     cmp rsi, rbx
   190 00000A5E 75F2                <1>     jne .keepSearching
   191 00000A60 48FFCE              <1>     dec rsi ;Go back two to go forwards again
   192 00000A63 48FFCE              <1>     dec rsi
   193                              <1> .cmdStartFnd:
   194 00000A66 48FFC6              <1>     inc rsi
   195 00000A69 48FFC6              <1>     inc rsi ;Go past the pathsep
   196 00000A6C FC                  <1>     cld ;Go the sane way again
   197 00000A6D 488D3DADF7FFFF      <1>     lea rdi, qword [cmdName + 1]    ;First byte is for the length of the name
   198 00000A74 57                  <1>     push rdi    ;Cleanse the field before usage (not strictly necessary)
   199 00000A75 B90E000000          <1>     mov ecx, cmdNameL
   200 00000A7A 30C0                <1>     xor al, al
   201 00000A7C F3AA                <1>     rep stosb
   202 00000A7E 5F                  <1>     pop rdi
   203 00000A7F 31C9                <1>     xor ecx, ecx
   204 00000A81 56                  <1>     push rsi    ;Save the location of the start byte of the command name
   205                              <1> .cmdGetChar:
   206 00000A82 AC                  <1>     lodsb
   207 00000A83 84C0                <1>     test al, al ;Did we find the terminating null?
   208 00000A85 7411                <1>     jz .nameLenFnd
   209 00000A87 3C2E                <1>     cmp al, "." ;Extension sep also terminates
   210 00000A89 740D                <1>     je .nameLenFnd
   211 00000A8B 24DF                <1>     and al, 0DFh    ;Else uppercase the char
   212 00000A8D AA                  <1>     stosb   ;and store it
   213 00000A8E FFC1                <1>     inc ecx
   214 00000A90 81F90B000000        <1>     cmp ecx, 11 ;Max command length is 11
   215 00000A96 72EA                <1>     jb .cmdGetChar
   216                              <1> .nameLenFnd:
   217 00000A98 880D82F7FFFF        <1>     mov byte [cmdName], cl  ;Store the name length now
   218                              <1>     ;Now finally, create a FCB filespec
   219 00000A9E 488D3D63F7FFFF      <1>     lea rdi, fcbCmdSpec
   220 00000AA5 57                  <1>     push rdi
   221 00000AA6 B90B000000          <1>     mov ecx, fcbNameL
   222 00000AAB B020                <1>     mov al, " " ;Fill with spaces
   223 00000AAD F3AA                <1>     rep stosb
   224 00000AAF 5F                  <1>     pop rdi
   225 00000AB0 5E                  <1>     pop rsi ;Get back the location of the start byte of the command name
   226 00000AB1 E8DC0A0000          <1>     call asciiToFCB
   227 00000AB6 488D354BF7FFFF      <1>     lea rsi, fcbCmdSpec
   228 00000ABD 488D3D4FF7FFFF      <1>     lea rdi, cmdSpec
   229 00000AC4 E8240B0000          <1>     call FCBToAsciiz
   230                              <1>     return
    19                              <2> %%_ret:
    20 00000AC9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   231                              <1> 
   232                              <1> doCommandLine:
   233 00000ACA 488D356AF6FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
   234 00000AD1 488D3DD0F5FFFF      <1>     lea rdi, cmdFcb
   235 00000AD8 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks
   236 00000ADD CD41                <1>     int 41h
   237 00000ADF 0FB71DB8F5FFFF      <1>     movzx ebx, word [cmdDrvSpec]    ;Get the drive specifier
   238 00000AE6 80FF3A              <1>     cmp bh, ":"
   239 00000AE9 752E                <1>     jne .noDriveSpecified
   240 00000AEB 88DA                <1>     mov dl, bl      ;Move the drive letter in dl
   241 00000AED 80E2DF              <1>     and dl, 0DFh    ;Make the drive letter upper case
   242 00000AF0 80EA41              <1>     sub dl, "A"     ;And make it a 0 based drive letter
   243 00000AF3 3CFF                <1>     cmp al, -1  ;Int 41h returns AL = -1 if bad drive specified
   244 00000AF5 7415                <1>     je .badDrive
   245                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   246 00000AF7 803D22F7FFFF02      <1>     cmp byte [cmdName], 2
   247 00000AFE 7519                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   248 00000B00 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   249 00000B02 CD41                <1>     int 41h 
   250 00000B04 B419                <1>     mov ah, 19h
   251 00000B06 CD41                <1>     int 41h     ;Get current drive
   252 00000B08 38D0                <1>     cmp al, dl  ;If the drive was set, all is well
   253                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000B0A 74(C9)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   254                              <1> .badDrive:
   255 00000B0C 488D1535FAFFFF      <1>     lea rdx, badDrv
   256 00000B13 B409                <1>     mov ah, 09h
   257 00000B15 CD41                <1>     int 41h
   258 00000B17 F9                  <1>     stc
   259                              <1>     return
    19                              <2> %%_ret:
    20 00000B18 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   260                              <1> .noDriveSpecified:
   261                              <1> ;Now we set the two FCB's in the command line
   262 00000B19 F60582F5FFFFFF      <1>     test byte [arg1Flg], -1
   263 00000B20 744D                <1>     jz .fcbArgsDone
   264 00000B22 0FB6057AF5FFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   265 00000B29 488D3509F6FFFF      <1>     lea rsi, cmdBuffer
   266 00000B30 4801C6              <1>     add rsi, rax    ;Point to first argument
   267 00000B33 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   268 00000B37 B801290000          <1>     mov eax, 2901h
   269 00000B3C CD41                <1>     int 41h
   270 00000B3E 880560F5FFFF        <1>     mov byte [arg1FCBret], al
   271 00000B44 F6055AF5FFFFFF      <1>     test byte [arg2Flg], -1
   272 00000B4B 7422                <1>     jz .fcbArgsDone
   273 00000B4D 0FB60552F5FFFF      <1>     movzx eax, byte [arg2Off]
   274 00000B54 488D35DEF5FFFF      <1>     lea rsi, cmdBuffer
   275 00000B5B 4801C6              <1>     add rsi, rax    ;Point to first argument
   276 00000B5E 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   277 00000B62 B801290000          <1>     mov eax, 2901h
   278 00000B67 CD41                <1>     int 41h
   279 00000B69 880538F5FFFF        <1>     mov byte [arg2FCBret], al
   280                              <1> .fcbArgsDone:
   281 00000B6F 488D35C3F5FFFF      <1>     lea rsi, cmdBuffer
   282 00000B76 488D1DA3F6FFFF      <1>     lea rbx, cmdName
   283 00000B7D B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   284 00000B82 BAFFFF0000          <1>     mov edx, 0FFFFh
   285 00000B87 B5FF                <1>     mov ch, -1
   286 00000B89 CD4F                <1>     int 4Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   287                              <1>             ;        al = 0  if the command should be executed as usual
   288 00000B8B B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   289 00000B90 BAFFFF0000          <1>     mov edx, 0FFFFh
   290 00000B95 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   291 00000B97 CD4F                <1>     int 4Fh
   292 00000B99 741D                <1>     jz .executeInternal
   293                              <1>     ;Here we execute externally and return to the prompt
   294                              <1>     ; as if it was an internal execution
   295 00000B9B 488D3517F5FFFF      <1>     lea rsi, inBuffer ;Point to this built buffer
   296 00000BA2 488D1DFFF4FFFF      <1>     lea rbx, cmdFcb
   297 00000BA9 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   298 00000BAE BAFFFF0000          <1>     mov edx, 0FFFFh
   299 00000BB3 B5FF                <1>     mov ch, -1
   300 00000BB5 CD4F                <1>     int 4Fh 
   301                              <1>     return
    19                              <2> %%_ret:
    20 00000BB7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   302                              <1> .executeInternal:
   303                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   304                              <1> ;rsi points after the command terminator in the command tail
   305 00000BB8 488D1DA7F7FFFF      <1>     lea rbx, functionTable
   306                              <1> .nextEntry:
   307 00000BBF 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   308 00000BC2 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   309 00000BC5 743D                <1>     je .external      ;If so, check externally now
   310 00000BC7 380D53F6FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   311 00000BCD 7529                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   312                              <1>     ;Here they have the same length so lets see if the name is the same
   313 00000BCF 56                  <1>     push rsi
   314                              <1>     ;ecx has the length to compare
   315 00000BD0 51                  <1>     push rcx
   316 00000BD1 488D7301            <1>     lea rsi, qword [rbx + 1]
   317 00000BD5 488D3D45F6FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   318 00000BDC F3A6                <1>     rep cmpsb   ;Check the strings are equal
   319 00000BDE 59                  <1>     pop rcx
   320 00000BDF 5E                  <1>     pop rsi
   321 00000BE0 7516                <1>     jne .gotoNextEntry
   322                              <1>     ;Here it was found both strings are equal
   323 00000BE2 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   324 00000BE7 480FB71F            <1>     movzx rbx, word [rdi]
   325 00000BEB 488D3D0EF4FFFF      <1>     lea rdi, startLbl
   326 00000BF2 4801FB              <1>     add rbx, rdi
   327 00000BF5 FFD3                <1>     call rbx    ;Call this function...
   328                              <1>     return  ;... and return
    19                              <2> %%_ret:
    20 00000BF7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   329                              <1> .gotoNextEntry:
   330 00000BF8 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   331 00000BFF 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   332 00000C02 EBBB                <1>     jmp short .nextEntry
   333                              <1> 
   334                              <1> .external:
   335                              <1> ;Here we must search the CWD or all path componants before failing
   336                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
   337 00000C04 E925000000          <1>     jmp .dfltErrExit    ;Catch all for now
   338 00000C09 8B05A2F4FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   339 00000C0F 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   340 00000C14 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   341 00000C19 3D20202020          <1>     cmp eax, "    " ;Only if we have four spaces do we proceed here
   342 00000C1E 741A                <1>     je .noExt
   343 00000C20 E817000000          <1>     call checkExtensionExec ;ZF=ZE => Executable
   344 00000C25 7507                <1>     jnz .dfltErrExit
   345                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
   346 00000C27 7205                <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
   347                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
   348                              <1>     ;So it is a com or exe that we are searching for for now
   349                              <1>     
   350 00000C29 E900000000          <1>     jmp .dfltErrExit
   351                              <1> .dfltErrExit:
   352 00000C2E 488D1503F8FFFF      <1>     lea rdx, badCmd
   353 00000C35 B409                <1>     mov ah, 09h
   354 00000C37 CD41                <1>     int 41h
   355                              <1>     return
    19                              <2> %%_ret:
    20 00000C39 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   356                              <1> .noExt:
   357                              <1>     ;Here we must search for the first file with a valid extension.
   358                              <1>     ;Use bl as flags. bl[0] => COM found, bl[1] => EXE found, bl[2] => BAT found
   359 00000C3A 31DB                <1>     xor ebx, ebx
   360                              <1>     ;If relative path, search CWD. If absolute path, search absolute path.
   361                              <1>     ;If nothing, only then loop through each dir in the path for provided
   362                              <1>     ; pathspec (relative case), or filename (absolute case)
   363                              <1> 
   364                              <1> 
   365                              <1> 
   366                              <1> checkExtensionExec:
   367                              <1> ;Checks the extension field of cmdFcb is .COM, .EXE, .BAT in that order
   368                              <1> ;Returns: ZF=ZE if executable. ZF=NZ if not executable.
   369                              <1> ;         If ZF=ZE and CF=CY => Batch file
   370 00000C3C 8B056FF4FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   371 00000C42 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   372 00000C47 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   373 00000C4C 3D434F4D20          <1>     cmp eax, "COM "
   374                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000C51 74(39)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   375 00000C53 3D45584520          <1>     cmp eax, "EXE "
   376                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000C58 74(39)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   377 00000C5A 3D42415420          <1>     cmp eax, "BAT "
   378                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000C5F 75(39)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   379 00000C61 F9                  <1>     stc
   380                              <1>     return
    19                              <2> %%_ret:
    20 00000C62 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   381                              <1> 
   382                              <1> checkAndSetupRedir:
   383                              <1> ;Checks and sets up redir as appropriate
   384                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   385                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   386                              <1> ;Output: ZF=NZ => No redir
   387                              <1> ;        ZF=ZY => Redir
   388                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   389                              <1> ;CF=CY if pipe set or an embedded CR found
   390 00000C63 57                  <1>     push rdi
   391 00000C64 3C3C                <1>     cmp al, "<"
   392 00000C66 740B                <1>     je .inputRedir
   393 00000C68 3C3E                <1>     cmp al, ">"
   394 00000C6A 742A                <1>     je .outputRedir
   395 00000C6C 3C7C                <1>     cmp al, "|"
   396 00000C6E 7454                <1>     je .pipeSetup
   397 00000C70 F8                  <1>     clc
   398                              <1> .redirExit:
   399 00000C71 5F                  <1>     pop rdi
   400                              <1>     return
    19                              <2> %%_ret:
    20 00000C72 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   401                              <1> .inputRedir:
   402 00000C73 C60526F4FFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   403 00000C7A 488D3DADF5FFFF      <1>     lea rdi, rdrInFilespec
   404 00000C81 E8C4080000          <1>     call skipSpaces ;Skip spaces between < and the filespec
   405 00000C86 E845000000          <1>     call copyCommandTailItem
   406 00000C8B 72E4                <1>     jc .redirExit
   407 00000C8D E8B8080000          <1>     call skipSpaces
   408 00000C92 30C0                <1>     xor al, al
   409 00000C94 EBDB                <1>     jmp short .redirExit
   410                              <1> .outputRedir:
   411 00000C96 C60504F4FFFF01      <1>     mov byte [redirOut], 1
   412 00000C9D 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   413 00000CA0 7506                <1>     jne .notDouble
   414 00000CA2 FE05F9F3FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   415                              <1> .notDouble:
   416 00000CA8 488D3DCEF5FFFF      <1>     lea rdi, rdrOutFilespec
   417 00000CAF E896080000          <1>     call skipSpaces
   418 00000CB4 E817000000          <1>     call copyCommandTailItem
   419 00000CB9 72B6                <1>     jc .redirExit
   420 00000CBB E88A080000          <1>     call skipSpaces
   421 00000CC0 30C0                <1>     xor al, al
   422 00000CC2 EBAD                <1>     jmp short .redirExit
   423                              <1> .pipeSetup:
   424 00000CC4 C605C5F3FFFFFF      <1>     mov byte [pipeFlag], -1
   425 00000CCB 30C0                <1>     xor al, al
   426 00000CCD F9                  <1>     stc
   427 00000CCE 5F                  <1>     pop rdi
   428                              <1>     return
    19                              <2> %%_ret:
    20 00000CCF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   429                              <1> 
   430                              <1> copyCommandTailItem:
   431                              <1> ;Copies a sentence from the command tail until a terminator is found.
   432                              <1> ;Stores a terminating null in the destination
   433                              <1> ;Input: rsi = Start of the item to copy
   434                              <1> ;       rdi = Location for copy
   435                              <1> ;Output: Sentence copied with a null terminator inserted.
   436                              <1> ; If CF=CY, embedded CR encountered
   437 00000CD0 AC                  <1>     lodsb
   438 00000CD1 3C0D                <1>     cmp al, CR
   439 00000CD3 741A                <1>     je .endOfInput
   440 00000CD5 E83C080000          <1>     call isALterminator
   441 00000CDA 741A                <1>     jz .exit
   442 00000CDC 3A0541F3FFFF        <1>     cmp al, byte [pathSep]
   443 00000CE2 7412                <1>     je .exit
   444 00000CE4 3A053AF3FFFF        <1>     cmp al, byte [switchChar]
   445 00000CEA 740A                <1>     je .exit
   446 00000CEC AA                  <1>     stosb
   447 00000CED EBE1                <1>     jmp short copyCommandTailItem
   448                              <1> .endOfInput:
   449 00000CEF E802000000          <1>     call .exit
   450 00000CF4 F9                  <1>     stc 
   451                              <1>     return
    19                              <2> %%_ret:
    20 00000CF5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   452                              <1> .exit:
   453 00000CF6 30C0                <1>     xor al, al
   454 00000CF8 AA                  <1>     stosb
   455                              <1>     return
    19                              <2> %%_ret:
    20 00000CF9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   456                              <1> 
   457                              <1> 
   458                              <1> int4Eh:   ;Interrupt interface for parsing and executing command lines
   459                              <1> ;Input: rsi points to the count byte of a command line
   460 00000CFA 4150                <1>     push r8
   461 00000CFC 4151                <1>     push r9
   462 00000CFE B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   463 00000D00 CD41                <1>     int 41h
   464 00000D02 52                  <1>     push rdx    ;Save on the stack
   465 00000D03 488D1DF6F1FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   466 00000D0A B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   467 00000D0C CD41                <1>     int 41h
   468 00000D0E 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   469 00000D11 4989D9              <1>     mov r9, rbx
   470 00000D14 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   471 00000D1B B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   472 00000D20 F348A5              <1>     rep movsq   ;Copy command line over
   473                              <1>     ;call doCommandLine
   474 00000D23 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   475 00000D24 B450                <1>     mov ah, 50h ;Set Current PSP
   476 00000D26 CD41                <1>     int 41h
   477 00000D28 4159                <1>     pop r9
   478 00000D2A 4158                <1>     pop r8
   479 00000D2C 48CF                <1>     iretq
    15                                  %include "./Source/Utils/COMMAND/Source/cmdFunc.asm"
    16                              <1> dir:
    17 00000D2E C60517F6FFFF00      <1>     mov byte [dirPrnType], 0    ;Clear DIR flags
    18 00000D35 C60511F6FFFF00      <1>     mov byte [dirLineCtr], 0
    19 00000D3C C6050BF6FFFF00      <1>     mov byte [dirFileCtr], 0
    20 00000D43 C60505F6FFFF00      <1>     mov byte [dirPathOff], 0    
    21 00000D4A C605FFF5FFFFFF      <1>     mov byte [dirVolLbl], -1    ;Mark as no label
    22                              <1>     ;Start by scanning for the switches
    23 00000D51 488D3DE2F3FFFF      <1>     lea rdi, cmdBuffer + 1  ;Goto command line input chars count
    24 00000D58 0FB60F              <1>     movzx ecx, byte [rdi]   ;Get number of chars typed
    25 00000D5B 48FFC7              <1>     inc rdi ;Goto first char typed in
    26 00000D5E 4889FE              <1>     mov rsi, rdi    ;Use rsi as start of buffer counter
    27 00000D61 8A05BDF2FFFF        <1>     mov al, byte [switchChar]   ;Scan for switchchars
    28                              <1> .switchScan:
    29 00000D67 F2AE                <1>     repne scasb ;Scan for a switchchar
    30 00000D69 67E322              <1>     jecxz .switchScanDone
    31 00000D6C 8A07                <1>     mov al, byte [rdi]  ;Get the byte pointed to by rdi
    32 00000D6E 24DF                <1>     and al, 0DFh    ;UC it
    33 00000D70 3C57                <1>     cmp al, "W" ;Wide print mode?
    34 00000D72 7509                <1>     jne .notWideSw
    35 00000D74 800DD1F5FFFF01      <1>     or byte [dirPrnType], 1 ;Set the correct bit
    36 00000D7B EBEA                <1>     jmp short .switchScan
    37                              <1> .notWideSw:
    38 00000D7D 3C50                <1>     cmp al, "P" ;Pause mode?
    39 00000D7F 0F856E030000        <1>     jne .badParam   ;If a switch other than /P or /W, fail
    40 00000D85 800DC0F5FFFF02      <1>     or byte [dirPrnType], 2 ;Set correct bit
    41 00000D8C EBD9                <1>     jmp short .switchScan
    42                              <1> .switchScanDone:
    43                              <1> ;If no args, only switches, we search CWD
    44                              <1> ;If one arg, search that 
    45                              <1> ;If more than one, fail
    46 00000D8E 488D3DA6F3FFFF      <1>     lea rdi, cmdBuffer + 2
    47 00000D95 4889FE              <1>     mov rsi, rdi
    48 00000D98 E8AD070000          <1>     call skipSpaces ;Skip leading spaces
    49 00000D9D 4881C603000000      <1>     add rsi, 3  ;Go past the DIR (always three chars)
    50 00000DA4 803E0D              <1>     cmp byte [rsi], CR
    51 00000DA7 7436                <1>     je .eocReached
    52                              <1> .pathSearch:
    53 00000DA9 E89C070000          <1>     call skipSpaces ;Now skip intermediate spaces to next non-space
    54 00000DAE 8A0570F2FFFF        <1>     mov al, byte [switchChar]   ;Is this a switch?
    55 00000DB4 3806                <1>     cmp byte [rsi], al
    56 00000DB6 741B                <1>     je .pathSearchSwitch    ;If a switch, skip it, find switch terminator
    57 00000DB8 803D90F5FFFF00      <1>     cmp byte [dirPathOff], 0    ;Did we previously get an argument?
    58 00000DBF 0F852E030000        <1>     jne .badParam ;If so, error
    59 00000DC5 4889F0              <1>     mov rax, rsi    ;Else, compute the offset in the cmdBuffer
    60 00000DC8 4829F8              <1>     sub rax, rdi    ;Offset from the cmdBuffer + 2
    61 00000DCB 0402                <1>     add al, 2       ;Make it an offset from cmdBuffer
    62 00000DCD 88057CF5FFFF        <1>     mov byte [dirPathOff], al   ;And save it!
    63                              <1> .pathSearchSwitch:
    64 00000DD3 E809070000          <1>     call findTerminatorOrEOC
    65 00000DD8 7205                <1>     jc .eocReached
    66 00000DDA 48FFC6              <1>     inc rsi ;Go to next char
    67 00000DDD EBCA                <1>     jmp short .pathSearch
    68                              <1> .eocReached:
    69 00000DDF 803D69F5FFFF00      <1>     cmp byte [dirPathOff], 0
    70 00000DE6 7405                <1>     je .dirCWD
    71 00000DE8 E906030000          <1>     jmp .badParam   ;Temp measure
    72                              <1> .dirCWD:
    73                              <1>     ;Build current working dir and append a \*.* to it 
    74                              <1>     ;First we search the root for a label
    75 00000DED 488D3D69F5FFFF      <1>     lea rdi, dirVolPathBuf
    76 00000DF4 488D35D1F4FFFF      <1>     lea rsi, searchSpec ;Will need to create the same X:\ here too
    77 00000DFB E8CD060000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
    78 00000E00 88055FF5FFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
    79 00000E06 0441                <1>     add al, "A"
    80 00000E08 B43A                <1>     mov ah, ":" ;ax has X: now to store 
    81 00000E0A 66AB                <1>     stosw
    82 00000E0C 668906              <1>     mov word [rsi], ax
    83 00000E0F 4881C602000000      <1>     add rsi, 2
    84 00000E16 8A0507F2FFFF        <1>     mov al, byte [pathSep]
    85 00000E1C AA                  <1>     stosb
    86 00000E1D 8806                <1>     mov byte [rsi], al
    87 00000E1F B82A2E2A00          <1>     mov eax, 002A2E2Ah  ;*.*,0
    88 00000E24 AB                  <1>     stosd
    89 00000E25 B42F                <1>     mov ah, 2Fh ;Get current DTA in rbx
    90 00000E27 CD41                <1>     int 41h 
    91 00000E29 53                  <1>     push rbx    ;Preserve it on the stack
    92 00000E2A 488D1587F2FFFF      <1>     lea rdx, cmdFFBlock
    93 00000E31 B41A                <1>     mov ah, 1Ah ;Set DTA to internal ffblock
    94 00000E33 CD41                <1>     int 41h
    95 00000E35 488D1521F5FFFF      <1>     lea rdx, dirVolPathBuf
    96 00000E3C 66B90800            <1>     mov cx, dirVolumeID
    97 00000E40 B44E                <1>     mov ah, 4Eh ;Find first
    98 00000E42 CD41                <1>     int 41h
    99 00000E44 7221                <1>     jc .skipVolLbl
   100 00000E46 488D3589F2FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   101 00000E4D 488D3DFCF4FFFF      <1>     lea rdi, dirVolLbl
   102 00000E54 B90B000000          <1>     mov ecx, 11 ;Get the 11 chars of the volume label
   103                              <1> .dirLblCopy:
   104 00000E59 AC                  <1>     lodsb   ;Get the first char
   105 00000E5A 3C00                <1>     cmp al, 0
   106 00000E5C 7409                <1>     je .skipVolLbl
   107 00000E5E 3C2E                <1>     cmp al, "."
   108 00000E60 7401                <1>     je .dirLblSkipStore
   109 00000E62 AA                  <1>     stosb
   110                              <1> .dirLblSkipStore:
   111 00000E63 FFC9                <1>     dec ecx
   112 00000E65 75F2                <1>     jnz .dirLblCopy
   113                              <1> .skipVolLbl:
   114                              <1> ;Print volume label information now
   115 00000E67 E8F8000000          <1>     call .dirPrintVolInfo
   116 00000E6C 488D3D5CF4FFFF      <1>     lea rdi, searchSpec + 3 ;Go to the fourth char in the field
   117 00000E73 B447                <1>     mov ah, 47h ;Get Current Working Directory
   118 00000E75 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   119 00000E78 8A154EF4FFFF        <1>     mov dl, byte [searchSpec]
   120 00000E7E 80EA40              <1>     sub dl, "@" ;Get 1 based drive letter
   121 00000E81 CD41                <1>     int 41h ;Overrwrite it with the current directory
   122 00000E83 488D3D42F4FFFF      <1>     lea rdi, searchSpec
   123 00000E8A E843060000          <1>     call strlen
   124 00000E8F FFC9                <1>     dec ecx
   125 00000E91 C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   126 00000E95 488D152CF8FFFF      <1>     lea rdx, dirMain
   127 00000E9C B409                <1>     mov ah, 09h
   128 00000E9E CD41                <1>     int 41h
   129 00000EA0 4889FA              <1>     mov rdx, rdi    ;Print the current directory we are working on
   130 00000EA3 B409                <1>     mov ah, 09h
   131 00000EA5 CD41                <1>     int 41h
   132 00000EA7 488D1532F5FFFF      <1>     lea rdx, crlf
   133 00000EAE B409                <1>     mov ah, 09h
   134 00000EB0 CD41                <1>     int 41h
   135 00000EB2 488D1527F5FFFF      <1>     lea rdx, crlf   ;Add an extra free line
   136 00000EB9 B409                <1>     mov ah, 09h
   137 00000EBB CD41                <1>     int 41h
   138                              <1>     ;Now we search for the files
   139 00000EBD 8A0560F1FFFF        <1>     mov al, byte [pathSep]
   140 00000EC3 38440FFF            <1>     cmp byte [rdi + rcx - 1], al
   141 00000EC7 7405                <1>     je .noAddSlash  ;Deals with special case of root dir
   142 00000EC9 88040F              <1>     mov byte [rdi + rcx], al
   143 00000ECC FFC1                <1>     inc ecx
   144                              <1> .noAddSlash:
   145 00000ECE C7040F2A2E2A00      <1>     mov dword [rdi + rcx], 002A2E2Ah ;and add a *.*,0
   146 00000ED5 4889FA              <1>     mov rdx, rdi    ;Ptr to search for in rdx
   147 00000ED8 B911000000          <1>     mov ecx, dirReadOnly | dirDirectory
   148 00000EDD B44E                <1>     mov ah, 4Eh ;Find first
   149 00000EDF CD41                <1>     int 41h
   150 00000EE1 720B                <1>     jc .dirNoMoreFiles
   151                              <1> .findNext:
   152 00000EE3 E8F0000000          <1>     call .dirPrintFileData  ;Print the file information
   153 00000EE8 B44F                <1>     mov ah, 4Fh
   154 00000EEA CD41                <1>     int 41h
   155 00000EEC 73F5                <1>     jnc .findNext 
   156                              <1> .dirNoMoreFiles:
   157 00000EEE 5A                  <1>     pop rdx 
   158 00000EEF B41A                <1>     mov ah, 1Ah ;Return back the original DTA
   159 00000EF1 CD41                <1>     int 41h
   160 00000EF3 F60552F4FFFF01      <1>     test byte [dirPrnType], 1
   161 00000EFA 740B                <1>     jz .dirNoEndNewLine
   162 00000EFC 488D15DDF4FFFF      <1>     lea rdx, crlf   ;Only need this for /W
   163 00000F03 B409                <1>     mov ah, 09h
   164 00000F05 CD41                <1>     int 41h
   165                              <1> .dirNoEndNewLine:
   166                              <1>     ;Now we print the number of files and the number of bytes on the disk
   167 00000F07 B908000000          <1>     mov ecx, 8  ;Print 8 spaces
   168 00000F0C B220                <1>     mov dl, " "
   169                              <1> .dirNumOffSpc:
   170 00000F0E B402                <1>     mov ah, 02h
   171 00000F10 CD41                <1>     int 41h
   172 00000F12 FFC9                <1>     dec ecx
   173 00000F14 75F8                <1>     jnz .dirNumOffSpc
   174 00000F16 31D2                <1>     xor edx, edx
   175 00000F18 0FB6052FF4FFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   176 00000F1F E8D7070000          <1>     call printDecimalWord
   177 00000F24 488D15FBF5FFFF      <1>     lea rdx, dirOk
   178 00000F2B B409                <1>     mov ah, 09h
   179 00000F2D CD41                <1>     int 41h
   180 00000F2F 488D15E9F8FFFF      <1>     lea rdx, threeSpc
   181 00000F36 B409                <1>     mov ah, 09h
   182 00000F38 CD41                <1>     int 41h
   183 00000F3A B800360000          <1>     mov eax, 3600h ;Get disk info
   184 00000F3F 8A1520F4FFFF        <1>     mov dl, byte [dirDrv]
   185 00000F45 CD41                <1>     int 41h ;Get disk free space info
   186 00000F47 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   187 00000F4A 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   188 00000F4D 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   189 00000F4F F7E1                <1>     mul ecx ;Get bytes per cluster
   190 00000F51 F7E3                <1>     mul ebx ;Multiply to the number of free clusters on the disk
   191                              <1>     ;edx:eax now has the number of free bytes on the disk
   192 00000F53 E8A3070000          <1>     call printDecimalWord
   193 00000F58 488D15D1F5FFFF      <1>     lea rdx, bytesOk
   194 00000F5F B409                <1>     mov ah, 09h
   195 00000F61 CD41                <1>     int 41h
   196                              <1>     return
    19                              <2> %%_ret:
    20 00000F63 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   197                              <1> 
   198                              <1> .dirPrintVolInfo:
   199 00000F64 488D1575F4FFFF      <1>     lea rdx, crlf
   200 00000F6B B409                <1>     mov ah, 09h
   201 00000F6D CD41                <1>     int 41h
   202 00000F6F 488D15C5F6FFFF      <1>     lea rdx, volMes
   203 00000F76 B409                <1>     mov ah, 09h
   204 00000F78 CD41                <1>     int 41h
   205 00000F7A 8A15DDF3FFFF        <1>     mov dl, byte [dirVolPathBuf]   ;Print the drive letter out
   206 00000F80 B402                <1>     mov ah, 02h
   207 00000F82 CD41                <1>     int 41h
   208 00000F84 803DC4F3FFFFFF      <1>     cmp byte [dirPathOff], -1   ;No volume ID marker
   209 00000F8B 7517                <1>     jne .dirVolIDOk
   210 00000F8D 488D15BEF6FFFF      <1>     lea rdx, volNo
   211 00000F94 B409                <1>     mov ah, 09h
   212 00000F96 CD41                <1>     int 41h
   213 00000F98 488D1541F4FFFF      <1>     lea rdx, crlf
   214 00000F9F B409                <1>     mov ah, 09h
   215 00000FA1 CD41                <1>     int 41h
   216                              <1>     return
    19                              <2> %%_ret:
    20 00000FA3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   217                              <1> .dirVolIDOk:
   218 00000FA4 488D15A2F6FFFF      <1>     lea rdx, volOk
   219 00000FAB B409                <1>     mov ah, 09h
   220 00000FAD CD41                <1>     int 41h
   221 00000FAF 488D3D9AF3FFFF      <1>     lea rdi, dirVolLbl
   222 00000FB6 E817050000          <1>     call strlen
   223 00000FBB FFC9                <1>     dec ecx
   224 00000FBD C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   225 00000FC1 488D1588F3FFFF      <1>     lea rdx, dirVolLbl
   226 00000FC8 B409                <1>     mov ah, 09h
   227 00000FCA CD41                <1>     int 41h
   228 00000FCC 488D150DF4FFFF      <1>     lea rdx, crlf
   229 00000FD3 B409                <1>     mov ah, 09h
   230 00000FD5 CD41                <1>     int 41h
   231                              <1>     return
    19                              <2> %%_ret:
    20 00000FD7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   232                              <1> 
   233                              <1> .dirPrintFileData:
   234                              <1> ;Use fcbCmdSpec to build the file name with space
   235                              <1> ;Start by print the name (same for both cases)
   236 00000FD8 488D35F7F0FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   237 00000FDF 488D3D22F2FFFF      <1>     lea rdi, fcbCmdSpec
   238 00000FE6 E8B8050000          <1>     call asciiFilenameToFCB
   239 00000FEB 488D1516F2FFFF      <1>     lea rdx, fcbCmdSpec
   240 00000FF2 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   241 00000FF7 BB01000000          <1>     mov ebx, 1  ;STDOUT
   242 00000FFC B440                <1>     mov ah, 40h ;Write handle
   243 00000FFE CD41                <1>     int 41h
   244 00001000 52                  <1>     push rdx
   245 00001001 B220                <1>     mov dl, " "
   246 00001003 B402                <1>     mov ah, 02h ;Print char
   247 00001005 CD41                <1>     int 41h
   248 00001007 5A                  <1>     pop rdx
   249 00001008 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   250 0000100F B903000000          <1>     mov ecx, 3  ;Print three chars
   251 00001014 BB01000000          <1>     mov ebx, 1  ;STDOUT
   252 00001019 B440                <1>     mov ah, 40h ;Write handle
   253 0000101B CD41                <1>     int 41h
   254 0000101D F60528F3FFFF01      <1>     test byte [dirPrnType], 1
   255 00001024 0F8586000000        <1>     jnz .widePrint
   256                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   257                              <1>     ;Now check if a DIR
   258 0000102A F6059CF0FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   259 00001031 7418                <1>     jz .dirPrintNotDir
   260 00001033 488D1504F5FFFF      <1>     lea rdx, dirLbl
   261 0000103A B409                <1>     mov ah, 09h
   262 0000103C CD41                <1>     int 41h
   263 0000103E 488D15DAF7FFFF      <1>     lea rdx, threeSpc
   264 00001045 B409                <1>     mov ah, 09h
   265 00001047 CD41                <1>     int 41h
   266 00001049 EB4D                <1>     jmp short .dirPrintFileDT
   267                              <1> .dirPrintNotDir:
   268                              <1> ;Here we print the file size
   269 0000104B B220                <1>     mov dl, " "
   270 0000104D B402                <1>     mov ah, 02h
   271 0000104F CD41                <1>     int 41h
   272 00001051 8B057BF0FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   273 00001057 E8DF060000          <1>     call getDecimalWord
   274 0000105C 4889CB              <1>     mov rbx, rcx
   275 0000105F 480FCB              <1>     bswap rbx
   276 00001062 B908000000          <1>     mov ecx, 8
   277                              <1> .dirPrintFileSizePrep:
   278 00001067 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   279 00001069 7514                <1>     jne .dirPrintFileSize
   280 0000106B B402                <1>     mov ah, 02h
   281 0000106D B220                <1>     mov dl, " "
   282 0000106F CD41                <1>     int 41h
   283 00001071 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   284 00001075 FFC9                <1>     dec ecx
   285 00001077 81F901000000        <1>     cmp ecx, 1
   286 0000107D 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   287                              <1> .dirPrintFileSize:
   288 0000107F 88DA                <1>     mov dl, bl
   289 00001081 B402                <1>     mov ah, 02h
   290 00001083 CD41                <1>     int 41h
   291 00001085 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   292 00001089 FFC9                <1>     dec ecx
   293 0000108B 75F2                <1>     jnz .dirPrintFileSize
   294 0000108D 488D158BF7FFFF      <1>     lea rdx, threeSpc
   295 00001094 B409                <1>     mov ah, 09h
   296 00001096 CD41                <1>     int 41h
   297                              <1> .dirPrintFileDT:
   298 00001098 488D1584F7FFFF      <1>     lea rdx, twoSpc
   299 0000109F B409                <1>     mov ah, 09h
   300 000010A1 CD41                <1>     int 41h
   301                              <1>     ;Here we print the DATE AND TIME eventually
   302 000010A3 488D1536F3FFFF      <1>     lea rdx, crlf
   303 000010AA B409                <1>     mov ah, 09h
   304 000010AC CD41                <1>     int 41h
   305 000010AE EB0B                <1>     jmp short .dirPrintNameExit
   306                              <1> .widePrint:
   307                              <1> ;If /W, print name space ext space space space space
   308 000010B0 488D1563F7FFFF      <1>     lea rdx, fourSpc
   309 000010B7 B409                <1>     mov ah, 09h ;Print string
   310 000010B9 CD41                <1>     int 41h
   311                              <1> .dirPrintNameExit:
   312 000010BB FE058DF2FFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   313 000010C1 FE0586F2FFFF        <1>     inc byte [dirLineCtr]
   314 000010C7 803D7FF2FFFF17      <1>     cmp byte [dirLineCtr], 23
   315                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 000010CE 7401                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 000010D0 C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   316 000010D1 488D158EF4FFFF      <1>     lea rdx, pauseMes
   317 000010D8 B409                <1>     mov ah, 09h
   318 000010DA CD41                <1>     int 41h
   319 000010DC B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   320 000010DE CD41                <1>     int 41h
   321 000010E0 C60566F2FFFF00      <1>     mov byte [dirLineCtr], 0
   322 000010E7 488D15F2F2FFFF      <1>     lea rdx, crlf   ;Force new line
   323 000010EE B409                <1>     mov ah, 09h
   324 000010F0 CD41                <1>     int 41h
   325                              <1>     return
    19                              <2> %%_ret:
    20 000010F2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   326                              <1>     
   327                              <1> .badParam:
   328 000010F3 488D158BF4FFFF      <1>     lea rdx, badParm
   329 000010FA B409                <1>     mov ah, 09h
   330 000010FC CD41                <1>     int 41h
   331                              <1>     return
    19                              <2> %%_ret:
    20 000010FE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   332                              <1> 
   333                              <1> chdir:
   334 000010FF F6059CEFFFFFFF      <1>     test byte [arg1Flg], -1
   335 00001106 754D                <1>     jnz .changeDir
   336                              <1>     ;Print CWD
   337                              <1> .printCWD:
   338 00001108 E819030000          <1>     call putCWDInPrompt ;Exactly the same procedure
   339 0000110D E8A9020000          <1>     call printCRLF
   340                              <1>     return
    19                              <2> %%_ret:
    20 00001112 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   341                              <1> .printDiskCWD:
   342                              <1> ;Print CWD for a specified drive
   343 00001113 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   344 00001117 88D0                <1>     mov al, dl
   345 00001119 0440                <1>     add al, "@" ;Get the UC letter
   346 0000111B B43A                <1>     mov ah, ":"
   347 0000111D 488D3DA8F1FFFF      <1>     lea rdi, searchSpec
   348 00001124 66AB                <1>     stosw   ;Store X:, rdi+=2
   349 00001126 8A05F7EEFFFF        <1>     mov al, byte [pathSep]
   350 0000112C AA                  <1>     stosb   ;Store pathSep, inc rdi
   351 0000112D B447                <1>     mov ah, 47h ;Get Current Working Directory
   352 0000112F 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   353 00001132 CD41                <1>     int 41h
   354 00001134 E899030000          <1>     call strlen
   355 00001139 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   356 0000113F B440                <1>     mov ah, 40h ;Write to handle
   357 00001141 BB01000000          <1>     mov ebx, 1  ;STDOUT
   358 00001146 488D157FF1FFFF      <1>     lea rdx, searchSpec
   359 0000114D CD41                <1>     int 41h
   360 0000114F E867020000          <1>     call printCRLF
   361                              <1>     return
    19                              <2> %%_ret:
    20 00001154 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   362                              <1> .changeDir:
   363 00001155 8A0549EFFFFF        <1>     mov al, byte [arg1FCBret]
   364 0000115B 3CFF                <1>     cmp al, -1 
   365 0000115D 743C                <1>     je .badDrv  ;IF the drive is good, but FCB name blank, either X: or \ 
   366 0000115F 4180785D20          <1>     cmp byte [r8 + fcb1 + fcb.filename], " "
   367 00001164 7520                <1>     jne .getFQPath
   368                              <1>     ;Now we double check that on the command line we have . or ..
   369 00001166 0FB60536EFFFFF      <1>     movzx eax, byte [arg1Off]
   370 0000116D 488D35C5EFFFFF      <1>     lea rsi, cmdBuffer
   371 00001174 4801C6              <1>     add rsi, rax
   372 00001177 8A05A6EEFFFF        <1>     mov al, byte [pathSep]
   373 0000117D 3806                <1>     cmp byte [rsi], al  ;Is the first char a pathsep?
   374 0000117F 7405                <1>     je .getFQPath
   375 00001181 803E2E              <1>     cmp byte [rsi], "."
   376 00001184 758D                <1>     jne .printDiskCWD
   377                              <1>     ;If the path is . or .., its acceptable, else fail
   378                              <1> .getFQPath:
   379 00001186 E8A2040000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   380 0000118B 721D                <1>     jc .badDir  ;If this returns CF=CY, its a badDir
   381 0000118D 488D1538F1FFFF      <1>     lea rdx, searchSpec
   382 00001194 B43B                <1>     mov ah, 3Bh ;CHDIR
   383 00001196 CD41                <1>     int 41h
   384 00001198 7210                <1>     jc .badDir
   385                              <1>     return
    19                              <2> %%_ret:
    20 0000119A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   386                              <1> 
   387                              <1> .badDrv:
   388 0000119B 488D15A6F3FFFF      <1>     lea rdx, badDrv
   389 000011A2 B800090000          <1>     mov eax, 0900h
   390 000011A7 CD41                <1>     int 41h
   391                              <1>     return
    19                              <2> %%_ret:
    20 000011A9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   392                              <1> .badDir:
   393 000011AA 488D15AFF4FFFF      <1>     lea rdx, badDir
   394 000011B1 B800090000          <1>     mov eax, 0900h
   395 000011B6 CD41                <1>     int 41h
   396                              <1>     return
    19                              <2> %%_ret:
    20 000011B8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   397                              <1> 
   398                              <1> 
   399                              <1> mkdir:
   400 000011B9 F605E2EEFFFFFF      <1>     test byte [arg1Flg], -1
   401 000011C0 744D                <1>     jz .badParams
   402 000011C2 F605DCEEFFFFFF      <1>     test byte [arg2Flg], -1
   403 000011C9 7544                <1>     jnz .badParams
   404                              <1>     ;We have exactly one argument
   405 000011CB 8A05D3EEFFFF        <1>     mov al, byte [arg1FCBret]
   406 000011D1 3CFF                <1>     cmp al, -1 
   407 000011D3 742B                <1>     je .badDrv  ;If a drive was specified and was bad, jump
   408 000011D5 E853040000          <1>     call buildCommandPath
   409 000011DA 7215                <1>     jc .badMake
   410 000011DC 488D15E9F0FFFF      <1>     lea rdx, searchSpec
   411 000011E3 B800390000          <1>     mov eax, 3900h  ;MKDIR
   412 000011E8 CD41                <1>     int 41h
   413 000011EA 7205                <1>     jc .badMake   ;Return if not carry
   414 000011EC B40D                <1>     mov ah, 0Dh
   415 000011EE CD41                <1>     int 41h ;Flush to disk
   416                              <1>     return
    19                              <2> %%_ret:
    20 000011F0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   417                              <1> .badMake:   ;Else, bad make
   418 000011F1 488D157CF4FFFF      <1>     lea rdx, badMD
   419 000011F8 B800090000          <1>     mov eax, 0900h
   420 000011FD CD41                <1>     int 41h
   421                              <1>     return
    19                              <2> %%_ret:
    20 000011FF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   422                              <1> .badDrv:
   423 00001200 488D1541F3FFFF      <1>     lea rdx, badDrv
   424 00001207 B800090000          <1>     mov eax, 0900h
   425 0000120C CD41                <1>     int 41h
   426                              <1>     return
    19                              <2> %%_ret:
    20 0000120E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   427                              <1> .badParams:
   428 0000120F 488D15C6F5FFFF      <1>     lea rdx, badArgs
   429 00001216 B800090000          <1>     mov eax, 0900h
   430 0000121B CD41                <1>     int 41h
   431                              <1>     return
    19                              <2> %%_ret:
    20 0000121D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   432                              <1> 
   433                              <1> rmdir:
   434 0000121E F6057DEEFFFFFF      <1>     test byte [arg1Flg], -1
   435 00001225 744D                <1>     jz .badParams
   436 00001227 F60577EEFFFFFF      <1>     test byte [arg2Flg], -1
   437 0000122E 7544                <1>     jnz .badParams
   438                              <1>     ;We have exactly one argument
   439 00001230 8A056EEEFFFF        <1>     mov al, byte [arg1FCBret]
   440 00001236 3CFF                <1>     cmp al, -1 
   441 00001238 742B                <1>     je .badDrv  ;If a drive was specified and was bad, jump
   442 0000123A E8EE030000          <1>     call buildCommandPath
   443 0000123F 7215                <1>     jc .badRemove
   444 00001241 488D1584F0FFFF      <1>     lea rdx, searchSpec
   445 00001248 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   446 0000124D CD41                <1>     int 41h
   447 0000124F 7205                <1>     jc .badRemove   ;Return if not carry
   448 00001251 B40D                <1>     mov ah, 0Dh
   449 00001253 CD41                <1>     int 41h ;Flush to disk
   450                              <1>     return
    19                              <2> %%_ret:
    20 00001255 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   451                              <1> .badRemove:   ;Else, bad make
   452 00001256 488D1534F4FFFF      <1>     lea rdx, badRD
   453 0000125D B800090000          <1>     mov eax, 0900h
   454 00001262 CD41                <1>     int 41h
   455                              <1>     return
    19                              <2> %%_ret:
    20 00001264 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   456                              <1> .badDrv:
   457 00001265 488D15DCF2FFFF      <1>     lea rdx, badDrv
   458 0000126C B800090000          <1>     mov eax, 0900h
   459 00001271 CD41                <1>     int 41h
   460                              <1>     return
    19                              <2> %%_ret:
    20 00001273 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   461                              <1> .badParams:
   462 00001274 488D1561F5FFFF      <1>     lea rdx, badArgs
   463 0000127B B800090000          <1>     mov eax, 0900h
   464 00001280 CD41                <1>     int 41h
   465                              <1>     return
    19                              <2> %%_ret:
    20 00001282 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   466                              <1> copy:
   467                              <1>     return
    19                              <2> %%_ret:
    20 00001283 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   468                              <1> erase:
   469                              <1>     return
    19                              <2> %%_ret:
    20 00001284 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   470                              <1> date:
   471                              <1>     return
    19                              <2> %%_ret:
    20 00001285 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   472                              <1> time:
   473                              <1>     return
    19                              <2> %%_ret:
    20 00001286 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   474                              <1> ctty:
   475                              <1>     return
    19                              <2> %%_ret:
    20 00001287 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   476                              <1> cls:  
   477 00001288 B800440000          <1>     mov eax, 4400h  ;Get device info
   478 0000128D BB01000000          <1>     mov ebx, 1      ;for handle 1
   479 00001292 CD41                <1>     int 41h         ;in dx
   480 00001294 F7C280000000        <1>     test edx, devCharDev
   481 0000129A 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   482 0000129C F7C210000000        <1>     test edx, charDevFastOut
   483 000012A2 743E                <1>     jz .doAnsi
   484                              <1>     ;Test if Int 49h uses Int 30h
   485                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   486                              <1>     ;Int 49h MUST be terminated with a IRETQ, within 1024 bytes
   487 000012A4 B849350000          <1>     mov eax, 3549h  ;Get the vector for interrupt 49h
   488 000012A9 CD41                <1>     int 41h
   489                              <1> .biosCheck:
   490 000012AB 66813BCD30          <1>     cmp word [rbx], 30CDh
   491 000012B0 740C                <1>     je .biosConfirmed
   492 000012B2 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   493 000012B7 7429                <1>     je .doAnsi
   494 000012B9 48FFC3              <1>     inc rbx
   495 000012BC EBED                <1>     jmp short .biosCheck
   496                              <1> .biosConfirmed:
   497                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   498 000012BE B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   499 000012C0 31DB                <1>     xor ebx, ebx
   500 000012C2 CD30                <1>     int 30h
   501 000012C4 B40F                <1>     mov ah, 0Fh ;Get screen mode
   502 000012C6 CD30                <1>     int 30h
   503 000012C8 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   504 000012CB FECA                <1>     dec dl
   505 000012CD B619                <1>     mov dh, 25  ;Number of rows is standard
   506 000012CF 31C0                <1>     xor eax, eax
   507 000012D1 89C1                <1>     mov ecx, eax
   508 000012D3 B707                <1>     mov bh, 7   ;Screen attributes
   509 000012D5 B406                <1>     mov ah, 6   ;Scroll
   510 000012D7 CD30                <1>     int 30h
   511 000012D9 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   512 000012DB B700                <1>     mov bh, 0   ;Page 0
   513 000012DD B402                <1>     mov ah, 2
   514 000012DF CD30                <1>     int 30h
   515                              <1>     return
    19                              <2> %%_ret:
    20 000012E1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   516                              <1> .doAnsi:
   517                              <1> ;If an ANSI driver is not installed, this will simply insert blank lines
   518                              <1> ;4 chars in the ansi routine
   519                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   520                              <1> ; understand ANSI codes
   521 000012E2 488D352DF5FFFF      <1>     lea rsi, ansiCls
   522 000012E9 B904000000          <1>     mov ecx, 4
   523 000012EE B406                <1>     mov ah, 06h ;Raw char output
   524                              <1> .ansiLp:
   525 000012F0 AC                  <1>     lodsb   ;Get the char in 
   526 000012F1 88C2                <1>     mov dl, al
   527 000012F3 CD41                <1>     int 41h
   528 000012F5 FFC9                <1>     dec ecx
   529 000012F7 75F7                <1>     jnz .ansiLp
   530                              <1>     return
    19                              <2> %%_ret:
    20 000012F9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   531                              <1> 
   532                              <1> break:
   533 000012FA F605A1EDFFFFFF      <1>     test byte [arg1Flg], -1
   534 00001301 752D                <1>     jnz .argumentProvided
   535                              <1>     ;Here we just get the status of break
   536 00001303 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   537 00001308 CD41                <1>     int 41h
   538 0000130A 88D3                <1>     mov bl, dl
   539 0000130C 488D158FF4FFFF      <1>     lea rdx, breakIs
   540 00001313 B409                <1>     mov ah, 09h
   541 00001315 CD41                <1>     int 41h
   542 00001317 488D157FF4FFFF      <1>     lea rdx, onMes
   543 0000131E 488D0D72F4FFFF      <1>     lea rcx, offMes
   544 00001325 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   545 00001327 480F44D1            <1>     cmovz rdx, rcx
   546 0000132B B409                <1>     mov ah, 09h
   547 0000132D CD41                <1>     int 41h
   548                              <1>     return
    19                              <2> %%_ret:
    20 0000132F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   549                              <1> .argumentProvided:
   550 00001330 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   551 00001334 AD                  <1>     lodsd   ;Read the word
   552 00001335 89C3                <1>     mov ebx, eax
   553 00001337 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   554 0000133C C1EB10              <1>     shr ebx, 10h     ;Get high word low
   555 0000133F 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   556 00001344 7416                <1>     je .maybeOn
   557 00001346 663D4F46            <1>     cmp ax, "OF"
   558 0000134A 7523                <1>     jne .badArgument
   559 0000134C 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   560 00001351 6681FB4620          <1>     cmp bx, "F "
   561 00001356 7517                <1>     jne .badArgument
   562                              <1>     ;Set off
   563 00001358 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   564 0000135A EB0B                <1>     jmp short .setBreak
   565                              <1> .maybeOn:
   566 0000135C 663D4F4E            <1>     cmp ax, "ON"
   567 00001360 750D                <1>     jne .badArgument
   568                              <1>     ;Set on
   569 00001362 BA01000000          <1>     mov edx, 1
   570                              <1> .setBreak:
   571 00001367 B801330000          <1>     mov eax, 3301h  ;Set break
   572 0000136C CD41                <1>     int 41h
   573                              <1>     return
    19                              <2> %%_ret:
    20 0000136E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   574                              <1> .badArgument:
   575 0000136F 488D15B0F4FFFF      <1>     lea rdx, badOnOff
   576 00001376 B409                <1>     mov ah, 09h
   577 00001378 CD41                <1>     int 41h
   578                              <1>     return
    19                              <2> %%_ret:
    20 0000137A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   579                              <1> 
   580                              <1> rename:
   581                              <1>     return
    19                              <2> %%_ret:
    20 0000137B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   582                              <1> truename:
   583 0000137C F6051FEDFFFFFF      <1>     test byte [arg1Flg], -1
   584 00001383 750C                <1>     jnz .argumentProvided
   585 00001385 488D1550F4FFFF      <1>     lea rdx, badArgs
   586 0000138C B409                <1>     mov ah, 09h
   587 0000138E CD41                <1>     int 41h
   588                              <1>     return
    19                              <2> %%_ret:
    20 00001390 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   589                              <1> .argumentProvided:
   590 00001391 E897020000          <1>     call buildCommandPath
   591                              <1>     ;Explicitly call Truename if we remove truename from this function
   592 00001396 488D3D2FEFFFFF      <1>     lea rdi, searchSpec
   593 0000139D E830010000          <1>     call strlen
   594 000013A2 FFC9                <1>     dec ecx ;Don't print terminating null
   595 000013A4 488D1521EFFFFF      <1>     lea rdx, searchSpec
   596 000013AB BB01000000          <1>     mov ebx, 01
   597 000013B0 B440                <1>     mov ah, 40h
   598 000013B2 CD41                <1>     int 41h
   599 000013B4 E802000000          <1>     call printCRLF
   600                              <1>     return
    19                              <2> %%_ret:
    20 000013B9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   601                              <1> 
   602                              <1> 
   603                              <1> launchChild:
   604                              <1> ;We run EXEC on this and the child task will return via applicationReturn
   605                              <1>     return
    19                              <2> %%_ret:
    20 000013BA C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   606                              <1> 
    16                                  %include "./Source/Utils/COMMAND/Source/cmdUtils.asm"
    17                              <1> ;Misc functions and subroutines for command.com
    18                              <1> 
    19                              <1> printCRLF:
    20 000013BB 488D151EF0FFFF      <1>     lea rdx, crlf
    21 000013C2 BB02000000          <1>     mov ebx, 2
    22 000013C7 B440                <1>     mov ah, 40h ;Print a new line
    23 000013C9 B902000000          <1>     mov ecx, 2  ;Two chars to write
    24 000013CE CD41                <1>     int 41h
    25                              <1>     return
    19                              <2> %%_ret:
    20 000013D0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    26                              <1> printDate:
    27                              <1>     ;al = day of the week (0=Sunday)
    28                              <1> 	;cl = year (1980-2099)
    29                              <1> 	;dh = month (1-12)
    30                              <1> 	;dl = day (1-31)
    31                              <1> printFileDate:
    32                              <1> 	;cl = year (1980-2099)
    33                              <1> 	;dh = month (1-12)
    34                              <1> 	;dl = day (1-31)
    35                              <1>     return
    19                              <2> %%_ret:
    20 000013D1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    36                              <1> printTime:
    37                              <1>     return
    19                              <2> %%_ret:
    20 000013D2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    38                              <1> putVersionInPrompt:
    39 000013D3 488D154FF2FFFF      <1>     lea rdx, dosVer
    40 000013DA B409                <1>     mov ah, 09h ;Print String
    41 000013DC CD41                <1>     int 41h
    42 000013DE B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
    43 000013E0 CD41                <1>     int 41h
    44 000013E2 50                  <1>     push rax    ;Save minor version
    45 000013E3 E89C000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
    46 000013E8 E8B4000000          <1>     call printPackedBCD ;Print al
    47 000013ED B22E                <1>     mov dl, "."
    48 000013EF B402                <1>     mov ah, 02h
    49 000013F1 CD41                <1>     int 41h
    50 000013F3 58                  <1>     pop rax
    51 000013F4 88E0                <1>     mov al, ah  ;Get the minor version low
    52 000013F6 E889000000          <1>     call hexToBCD
    53 000013FB E8A1000000          <1>     call printPackedBCD
    54                              <1>     return
    19                              <2> %%_ret:
    20 00001400 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    55                              <1> putEscInPrompt:
    56 00001401 B21B                <1>     mov dl, ESC
    57 00001403 EB1C                <1>     jmp short outChar
    58                              <1> 
    59                              <1> putMoneyInPrompt:
    60 00001405 B224                <1>     mov dl, "$"
    61 00001407 EB18                <1>     jmp short outChar
    62                              <1> 
    63                              <1> putEquInPrompt:
    64 00001409 B23D                <1>     mov dl, "="
    65 0000140B EB14                <1>     jmp short outChar
    66                              <1> 
    67                              <1> putPipeInPrompt:
    68 0000140D B27C                <1>     mov dl, "|"
    69 0000140F EB10                <1>     jmp short outChar
    70                              <1> 
    71                              <1> putGTinPrompt:
    72 00001411 B23E                <1>     mov dl, ">"
    73 00001413 EB0C                <1>     jmp short outChar
    74                              <1> 
    75                              <1> putLTinPrompt:
    76 00001415 B23C                <1>     mov dl, "<"
    77 00001417 EB08                <1>     jmp short outChar
    78                              <1> 
    79                              <1> putDriveInPrompt:
    80 00001419 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
    81 0000141B CD41                <1>     int 41h
    82 0000141D 0441                <1>     add al, "A" ;Convert to letter
    83 0000141F 88C2                <1>     mov dl, al
    84                              <1> outChar:
    85 00001421 B402                <1>     mov ah, 02h ;Echo to STDOUT
    86 00001423 CD41                <1>     int 41h
    87                              <1>     return
    19                              <2> %%_ret:
    20 00001425 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    88                              <1> putCWDInPrompt:
    89 00001426 488D3D1EECFFFF      <1>     lea rdi, currDirStr ;Update the current directory string
    90 0000142D B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
    91 0000142F CD41                <1>     int 41h
    92 00001431 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
    93 00001433 FEC2                <1>     inc dl
    94 00001435 0441                <1>     add al, "A" ;Convert to letter
    95 00001437 B43A                <1>     mov ah, ":"
    96 00001439 66AB                <1>     stosw   ;Store X:, rdi+=2
    97 0000143B 8A05E2EBFFFF        <1>     mov al, byte [pathSep]
    98 00001441 AA                  <1>     stosb   ;Store pathSep, inc rdi
    99 00001442 B447                <1>     mov ah, 47h ;Get Current Working Directory
   100 00001444 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   101 00001447 CD41                <1>     int 41h
   102 00001449 E884000000          <1>     call strlen
   103 0000144E 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   104                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   105 00001454 B440                <1>     mov ah, 40h ;Write to handle
   106 00001456 BB01000000          <1>     mov ebx, 1  ;STDOUT
   107 0000145B 488D15E9EBFFFF      <1>     lea rdx, currDirStr
   108 00001462 CD41                <1>     int 41h
   109                              <1>     return
    19                              <2> %%_ret:
    20 00001464 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   110                              <1> 
   111                              <1> BCDtoHex:
   112                              <1> ;Converts a BCD value to a Hex byte
   113                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   114 00001465 51                  <1>     push rcx
   115 00001466 0FB6C0              <1>     movzx eax, al   ;Zero extend
   116 00001469 89C1                <1>     mov ecx, eax    ;Save al in ecx
   117 0000146B 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   118 00001470 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   119 00001476 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   120                              <1> .bth:
   121 00001479 050A000000          <1>     add eax, 10
   122 0000147E FFC9                <1>     dec ecx
   123 00001480 75F7                <1>     jnz .bth
   124 00001482 59                  <1>     pop rcx
   125 00001483 C3                  <1>     ret
   126                              <1> 
   127                              <1> hexToBCD:
   128                              <1> ;Converts a Hex byte into two BCD digits
   129                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   130 00001484 51                  <1>     push rcx
   131 00001485 0FB6C0              <1>     movzx eax, al   ;Zero extend
   132 00001488 31C9                <1>     xor ecx, ecx
   133                              <1> .htb0:
   134 0000148A 3D0A000000          <1>     cmp eax, 10
   135 0000148F 7209                <1>     jb .htb1
   136 00001491 2D0A000000          <1>     sub eax, 10
   137 00001496 FFC1                <1>     inc ecx
   138 00001498 EBF0                <1>     jmp short .htb0
   139                              <1> .htb1:
   140 0000149A C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   141 0000149D 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   142 0000149F 59                  <1>     pop rcx
   143 000014A0 C3                  <1>     ret
   144                              <1> 
   145                              <1> printPackedBCD:
   146                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   147                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   148                              <1> ;Preserves all registers
   149 000014A1 50                  <1>     push rax
   150 000014A2 52                  <1>     push rdx
   151 000014A3 88C4                <1>     mov ah, al
   152 000014A5 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   153 000014A7 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   154 000014AA 7508                <1>     jnz .upperNybble
   155 000014AC B220                <1>     mov dl, " "
   156 000014AE B402                <1>     mov ah, 02h
   157 000014B0 CD41                <1>     int 41h
   158 000014B2 EB0E                <1>     jmp short .lowerNybble
   159                              <1> .upperNybble:
   160 000014B4 50                  <1>     push rax
   161 000014B5 C0EC04              <1>     shr ah, 4
   162 000014B8 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   163 000014BB 88E2                <1>     mov dl, ah
   164 000014BD B402                <1>     mov ah, 02h ;Print DL
   165 000014BF CD41                <1>     int 41h
   166 000014C1 58                  <1>     pop rax
   167                              <1> .lowerNybble:
   168 000014C2 0430                <1>     add al, "0"
   169 000014C4 88C2                <1>     mov dl, al
   170 000014C6 B402                <1>     mov ah, 02h ;Print DL
   171 000014C8 CD41                <1>     int 41h
   172 000014CA 5A                  <1>     pop rdx
   173 000014CB 58                  <1>     pop rax
   174                              <1>     return
    19                              <2> %%_ret:
    20 000014CC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   175                              <1> 
   176                              <1> getCurrentDrive:
   177                              <1> ;Returns the current drive in al
   178 000014CD B419                <1>     mov ah, 19h
   179 000014CF CD41                <1>     int 41h
   180                              <1>     return
    19                              <2> %%_ret:
    20 000014D1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   181                              <1> 
   182                              <1> strlen:
   183                              <1> ;Gets the length of a ASCIIZ string
   184                              <1> ;Input: rdi = Source buffer
   185                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   186 000014D2 50                  <1>     push rax
   187 000014D3 57                  <1>     push rdi
   188 000014D4 30C0                <1>     xor al, al
   189 000014D6 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   190 000014D8 FFC9                <1>     dec ecx ;rcx = -1
   191 000014DA F2AE                <1>     repne scasb
   192 000014DC F7D1                <1>     not ecx
   193 000014DE 5F                  <1>     pop rdi
   194 000014DF 58                  <1>     pop rax
   195                              <1>     return
    19                              <2> %%_ret:
    20 000014E0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   196                              <1> 
   197                              <1> findTerminatorOrEOC:
   198                              <1> ;Advances rsi to the next string terminator char or the next End of command
   199                              <1> ; char
   200                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   201                              <1> ;If a end of command char found, also sets CF
   202 000014E1 AC                  <1>     lodsb
   203 000014E2 3C0D                <1>     cmp al, CR
   204 000014E4 7419                <1>     je .endOfInput
   205 000014E6 E82B000000          <1>     call isALterminator
   206 000014EB 7419                <1>     jz .exit
   207 000014ED 3A0530EBFFFF        <1>     cmp al, byte [pathSep]
   208 000014F3 7411                <1>     je .exit
   209 000014F5 3A0529EBFFFF        <1>     cmp al, byte [switchChar]
   210 000014FB 7409                <1>     je .exit
   211 000014FD EBE2                <1>     jmp short findTerminatorOrEOC
   212                              <1> .endOfInput:
   213 000014FF E802000000          <1>     call .exit
   214 00001504 F9                  <1>     stc 
   215                              <1>     return
    19                              <2> %%_ret:
    20 00001505 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   216                              <1> .exit:
   217 00001506 48FFCE              <1>     dec rsi ;Point to the terminating char
   218                              <1>     return
    19                              <2> %%_ret:
    20 00001509 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   219                              <1> 
   220                              <1> findTerminator:
   221                              <1> ;Advances rsi to the next string terminator char
   222                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   223 0000150A AC                  <1>     lodsb
   224 0000150B E806000000          <1>     call isALterminator
   225 00001510 75F8                <1>     jnz findTerminator
   226 00001512 48FFCE              <1>     dec rsi
   227                              <1>     return
    19                              <2> %%_ret:
    20 00001515 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   228                              <1> isALterminator:
   229                              <1> ;Returns: ZF=NZ if al is not a terminator (Not including CR)
   230                              <1> ;         ZF=ZY if al is a terminator
   231 00001516 3C20                <1>     cmp al, " "
   232                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001518 74(15)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   233 0000151A 3C3B                <1>     cmp al, ";"
   234                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000151C 74(15)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   235 0000151E 3C3D                <1>     cmp al, "="
   236                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001520 74(15)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   237 00001522 3C2C                <1>     cmp al, ","
   238                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001524 74(15)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   239 00001526 3C09                <1>     cmp al, TAB
   240                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001528 74(15)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   241 0000152A 3C0A                <1>     cmp al, LF
   242                              <1>     return
    19                              <2> %%_ret:
    20 0000152C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   243                              <1> 
   244                              <1> findEndOfCommand:
   245                              <1> ;Moves rsi to the | or CR that terminates this command
   246 0000152D AC                  <1>     lodsb
   247 0000152E E806000000          <1>     call isALEndOfCommand
   248 00001533 75F8                <1>     jnz findEndOfCommand
   249 00001535 48FFCE              <1>     dec rsi
   250                              <1>     return
    19                              <2> %%_ret:
    20 00001538 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   251                              <1> isALEndOfCommand:
   252 00001539 3C7C                <1>     cmp al, "|"
   253                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000153B 74(38)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   254 0000153D 3C0D                <1>     cmp al, CR
   255                              <1>     return
    19                              <2> %%_ret:
    20 0000153F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   256                              <1> 
   257                              <1> scanForRedir:
   258                              <1> ;Returns: AL = 0 => No redirection, terminate with CR
   259                              <1> ;         AL = 1 => Redirection, type <
   260                              <1> ;         AL = 10 => Redir, type >
   261                              <1> ;         AL = 20 => Redir, type >>
   262                              <1> ;If multiple redirs found, the last one of that type counts.
   263 00001540 56                  <1>     push rsi
   264 00001541 55                  <1>     push rbp
   265 00001542 30E4                <1>     xor ah, ah
   266                              <1> .lp:
   267 00001544 AC                  <1>     lodsb
   268 00001545 3C3E                <1>     cmp al, ">"
   269                              <1> .exit:
   270 00001547 5D                  <1>     pop rbp
   271 00001548 5E                  <1>     pop rsi
   272                              <1>     return
    19                              <2> %%_ret:
    20 00001549 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   273                              <1> 
   274                              <1> 
   275                              <1> skipSpaces:
   276                              <1> ;Also skips tabs
   277                              <1> ;Input: rsi must point to the start of the data string
   278                              <1> ;Output: rsi points to the first non-space char
   279 0000154A 803E20              <1>     cmp byte [rsi], " "
   280 0000154D 7405                <1>     je .skip    ;If equal to a space, skip it
   281 0000154F 803E09              <1>     cmp byte [rsi], TAB
   282                              <1>     retne   ;If not equal to a tab or space, return
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001552 75(49)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   283                              <1> .skip:
   284 00001554 48FFC6              <1>     inc rsi
   285 00001557 EBF1                <1>     jmp short skipSpaces
   286                              <1> 
   287                              <1> printPrompt:
   288 00001559 66813DBFEAFFFFFFFF  <1>     cmp word [promptPtr], -1
   289 00001562 750B                <1>     jne .validPrompt
   290                              <1>     ;Here we print the default prompt
   291 00001564 E8BDFEFFFF          <1>     call putCWDInPrompt
   292 00001569 E8A3FEFFFF          <1>     call putGTinPrompt
   293                              <1>     return
    19                              <2> %%_ret:
    20 0000156E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   294                              <1> .validPrompt:
   295                              <1>     return
    19                              <2> %%_ret:
    20 0000156F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   296                              <1> 
   297                              <1> clearCommandState:
   298                              <1> ;Clears the command state
   299 00001570 488D3D27EBFFFF      <1>     lea rdi, cmdStatePtr
   300 00001577 B90A000000          <1>     mov ecx, cmdStateL
   301 0000157C 31C0                <1>     xor eax, eax
   302 0000157E F3AA                <1>     rep stosb
   303                              <1>     return
    19                              <2> %%_ret:
    20 00001580 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   304                              <1> 
   305                              <1> clearCommandLineState:
   306                              <1> ;Clears the command line state after a 0Dh encountered
   307 00001581 488D3D06EBFFFF      <1>     lea rdi, cmdLineStatePtr
   308 00001588 B91A000000          <1>     mov ecx, cmdLineStateL
   309 0000158D 31C0                <1>     xor eax, eax
   310 0000158F F3AA                <1>     rep stosb
   311                              <1>     return
    19                              <2> %%_ret:
    20 00001591 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   312                              <1> 
   313                              <1> asciiToFCB:
   314                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   315                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   316                              <1> ;Also doesn't check if chars are valid
   317                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   318                              <1> ;Name is space padded.
   319                              <1> ;Input: rsi = ASCII string buffer
   320                              <1> ;       rdi = FCB name buffer
   321                              <1> ;Output: al = Char that terminated the source string 
   322 00001592 53                  <1>     push rbx    
   323 00001593 57                  <1>     push rdi
   324 00001594 B90B000000          <1>     mov ecx, 11
   325 00001599 B020                <1>     mov al, " "
   326 0000159B F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   327 0000159D 5F                  <1>     pop rdi
   328 0000159E 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   329 000015A1 EB1D                <1>     jmp short asciiFilenameToFCB.processName
   330                              <1> asciiFilenameToFCB:
   331                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   332                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   333                              <1> ;Also doesn't check if chars are valid
   334                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   335                              <1> ;Name is space padded.
   336                              <1> ;Input: rsi = ASCII string buffer
   337                              <1> ;       rdi = FCB name buffer
   338                              <1> ;Output: al = Char that terminated the source string 
   339 000015A3 53                  <1>     push rbx    
   340 000015A4 57                  <1>     push rdi
   341 000015A5 B90B000000          <1>     mov ecx, 11
   342 000015AA B020                <1>     mov al, " "
   343 000015AC F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   344 000015AE 5F                  <1>     pop rdi
   345 000015AF 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   346                              <1>     ;Preprocess for Dir Searches
   347 000015B2 803E2E              <1>     cmp byte [rsi], "."
   348 000015B5 7509                <1>     jne .processName
   349 000015B7 A4                  <1>     movsb   ;Store the first dot
   350 000015B8 803E2E              <1>     cmp byte [rsi], "."
   351 000015BB 752C                <1>     jne .exitBadChar
   352 000015BD A4                  <1>     movsb
   353 000015BE EB29                <1>     jmp short .exitBadChar
   354                              <1> .processName:
   355 000015C0 AC                  <1>     lodsb   ;Get the char in al
   356 000015C1 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   357 000015C3 7426                <1>     jz .exit
   358 000015C5 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   359 000015C7 7407                <1>     je .extSpace
   360 000015C9 3C2E                <1>     cmp al, "."
   361 000015CB 740C                <1>     je .ext
   362 000015CD AA                  <1>     stosb   ;Store the char
   363 000015CE EBF0                <1>     jmp short .processName
   364                              <1> .extSpace:
   365                              <1> ;Now we scan for a period in the name
   366 000015D0 AC                  <1>     lodsb   ;Get a char and increase rsi
   367 000015D1 84C0                <1>     test al, al
   368 000015D3 7416                <1>     jz .exit
   369 000015D5 3C2E                <1>     cmp al, "."     ;If al is not a period...
   370 000015D7 75F7                <1>     jne .extSpace   ; keep searching
   371                              <1> .ext:
   372 000015D9 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   373                              <1> .processExt:
   374 000015DD AC                  <1>     lodsb
   375 000015DE 84C0                <1>     test al, al
   376 000015E0 7409                <1>     jz .exit
   377 000015E2 3C20                <1>     cmp al, " "
   378 000015E4 7405                <1>     je .exit
   379 000015E6 AA                  <1>     stosb
   380 000015E7 EBF4                <1>     jmp short .processExt
   381                              <1> .exitBadChar:
   382 000015E9 30C0                <1>     xor al, al  ;Return a null terminator
   383                              <1> .exit:
   384 000015EB 5B                  <1>     pop rbx
   385                              <1>     return
    19                              <2> %%_ret:
    20 000015EC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   386                              <1> 
   387                              <1> FCBToAsciiz:
   388                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   389                              <1> ;Name is space padded too
   390                              <1> ;Input: rsi = FCB name buffer
   391                              <1> ;       rdi = ASCIIZ string buffer
   392 000015ED B908000000          <1>     mov ecx, 8
   393 000015F2 F3A4                <1>     rep movsb   ;Move the name over
   394                              <1> .scanNameSpace:
   395 000015F4 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   396 000015F8 750D                <1>     jne .ext
   397 000015FA 48FFCF              <1>     dec rdi
   398 000015FD FFC1                <1>     inc ecx
   399 000015FF 81F908000000        <1>     cmp ecx, 8
   400 00001605 72ED                <1>     jb .scanNameSpace
   401                              <1> .ext:
   402 00001607 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   403 0000160C 7506                <1>     jne .validExt
   404 0000160E 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   405 00001612 7415                <1>     je .exit
   406                              <1> .validExt:
   407 00001614 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   408 00001616 AA                  <1>     stosb
   409 00001617 B903000000          <1>     mov ecx, 3
   410 0000161C F3A4                <1>     rep movsb   ;Move the three extension chars over
   411                              <1> .scanExtSpace:
   412 0000161E 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   413 00001622 7505                <1>     jne .exit
   414 00001624 48FFCF              <1>     dec rdi
   415 00001627 EBF5                <1>     jmp short .scanExtSpace
   416                              <1> .exit:
   417 00001629 31C0                <1>     xor eax, eax
   418 0000162B AA                  <1>     stosb   ;Store a null at the end
   419                              <1>     return
    19                              <2> %%_ret:
    20 0000162C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   420                              <1> 
   421                              <1> buildCommandPath:
   422                              <1> ;Based on the first argument on the command line
   423                              <1> ; will build a full ASCIIZ path in searchSpec to the file/dir specified
   424                              <1>     ;If this is a relative path, will handle correctly (tho unnecessary)
   425 0000162D 0FB6056FEAFFFF      <1>     movzx eax, byte [arg1Off]
   426 00001634 488D35FEEAFFFF      <1>     lea rsi, cmdBuffer
   427 0000163B 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   428 0000163E 8A3DDFE9FFFF        <1>     mov bh, byte [pathSep]
   429 00001644 B33A                <1>     mov bl, ":"
   430 00001646 383E                <1>     cmp byte [rsi], bh  ;Is the first char relative to root?
   431 00001648 7458                <1>     je .absoluteCurrent
   432 0000164A 66395E01            <1>     cmp word [rsi + 1], bx    ;This checks if absolute or relative
   433 0000164E 746D                <1>     je .absolutePath
   434 00001650 385E01              <1>     cmp byte [rsi + 1], bl  ;Check if a drive separator
   435 00001653 7409                <1>     je .relativeGiven
   436                              <1> ;No drive letter given, must get Current Drive
   437 00001655 E873FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   438 0000165A 0441                <1>     add al, "A"
   439 0000165C EB0B                <1>     jmp short .relativeCommon
   440                              <1> .relativeGiven:
   441                              <1> ;Drive letter pointed to by AL
   442 0000165E 8A06                <1>     mov al, byte [rsi]  ;Get drive letter in al
   443 00001660 24DF                <1>     and al, 0DFh    ;Convert to UC
   444 00001662 4881C602000000      <1>     add rsi, 2  ;Skip the given drive letter and the colon
   445                              <1> .relativeCommon:
   446                              <1>     ;al has drive letter
   447 00001669 88C2                <1>     mov dl, al  ;Save drive letter in dl
   448 0000166B 80EA40              <1>     sub dl, "@" ;Get 1 based drive number in dl
   449 0000166E B43A                <1>     mov ah, ":" ;Get the colon in too
   450 00001670 488D3D55ECFFFF      <1>     lea rdi, searchSpec ;Start building our search path here
   451 00001677 66AB                <1>     stosw   ;Store X:
   452 00001679 8A05A4E9FFFF        <1>     mov al, byte [pathSep]
   453 0000167F AA                  <1>     stosb   ;Store pathSep
   454 00001680 56                  <1>     push rsi    ;Save user input string
   455 00001681 4889FE              <1>     mov rsi, rdi    ;Put the current directory here for this drive
   456 00001684 B447                <1>     mov ah, 47h ;Get Current Working Directory, dl has drive number
   457 00001686 CD41                <1>     int 41h ;Won't fail as drive letter in dl confirmed ok
   458 00001688 5E                  <1>     pop rsi
   459                              <1>     ;Now want to find terminating null
   460 00001689 30C0                <1>     xor al, al
   461 0000168B 31C9                <1>     xor ecx, ecx
   462 0000168D FFC9                <1>     dec ecx
   463 0000168F F2AE                <1>     repne scasb ;Search for the terminating null
   464 00001691 48FFCF              <1>     dec rdi ;Go back one once found
   465 00001694 8A0589E9FFFF        <1>     mov al, byte [pathSep]
   466 0000169A 3847FF              <1>     cmp byte [rdi - 1], al
   467 0000169D 7425                <1>     je .buildPath ;If the previous char is a pathsep, skip storing another
   468 0000169F AA                  <1>     stosb   ;Store the pathsep
   469 000016A0 EB22                <1>     jmp short .buildPath  ;Now we copy the user string over and good to go
   470                              <1> .absoluteCurrent:
   471 000016A2 E826FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   472 000016A7 0441                <1>     add al, "A"
   473 000016A9 B43A                <1>     mov ah, ":" ;ax has X: now to store 
   474 000016AB 488D3D1AECFFFF      <1>     lea rdi, searchSpec
   475 000016B2 66AB                <1>     stosw
   476 000016B4 8A0569E9FFFF        <1>     mov al, byte [pathSep]
   477 000016BA AA                  <1>     stosb
   478 000016BB EB07                <1>     jmp short .buildPath
   479                              <1> .absolutePath:
   480 000016BD 488D3D08ECFFFF      <1>     lea rdi, searchSpec
   481                              <1> .buildPath:
   482 000016C4 E807F6FFFF          <1>     call copyCommandTailItem    ;Terminates with a 0 for free
   483 000016C9 488D35FCEBFFFF      <1>     lea rsi, searchSpec
   484 000016D0 488D3DF5EBFFFF      <1>     lea rdi, searchSpec
   485 000016D7 B460                <1>     mov ah, 60h ;Truename it to avoid issues
   486 000016D9 CD41                <1>     int 41h
   487                              <1>     retc    ;Return if an error with CF=CY
    63                              <2> cret c
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 000016DB 7301                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 000016DD C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   488                              <1>     ;Here we do one final check to ensure we dont end up with a A: but A:"\"
   489 000016DE 30C0                <1>     xor al, al
   490 000016E0 31C9                <1>     xor ecx, ecx
   491 000016E2 FFC9                <1>     dec ecx
   492 000016E4 F2AE                <1>     repne scasb
   493 000016E6 48FFCF              <1>     dec rdi ;Go back to the final non-null char
   494 000016E9 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is the final non-null char a colon?
   495 000016ED 750A                <1>     jne .okExit   ;Return if not
   496 000016EF 31C0                <1>     xor eax, eax
   497 000016F1 8A052CE9FFFF        <1>     mov al, byte [pathSep]  ;IF it is, insert a pathsep
   498 000016F7 66AB                <1>     stosw   ;Store the terminating 0 after the pathsep
   499                              <1> .okExit:
   500 000016F9 F8                  <1>     clc
   501                              <1>     return
    19                              <2> %%_ret:
    20 000016FA C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   502                              <1> printDecimalWord:
   503                              <1> ;Takes qword in edx:eax and print it's decimal representation
   504 000016FB 52                  <1>     push rdx    ;Save upper qword for later
   505                              <1> ;Takes the qword in eax and prints its decimal representation
   506 000016FC 31C9                <1>     xor ecx, ecx
   507 000016FE 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   508 00001700 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   509                              <1> .dpfb0:
   510 00001705 FFC5                <1>     inc ebp
   511 00001707 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   512 0000170B 31D2                <1>     xor edx, edx
   513 0000170D 48F7F3              <1>     div rbx
   514 00001710 80C230              <1>     add dl, '0'
   515 00001713 80FA39              <1>     cmp dl, '9'
   516 00001716 7603                <1>     jbe .dpfb1
   517 00001718 80C207              <1>     add dl, 'A'-'0'-10
   518                              <1> .dpfb1:
   519 0000171B 88D1                <1>     mov cl, dl    ;Save remainder byte
   520 0000171D 4885C0              <1>     test rax, rax
   521 00001720 75E3                <1>     jnz .dpfb0
   522                              <1> .dpfb2:
   523 00001722 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   524 00001724 B402                <1>     mov ah, 02h
   525 00001726 CD41                <1>     int 41h
   526 00001728 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   527 0000172C FFCD                <1>     dec ebp
   528 0000172E 75F2                <1>     jnz .dpfb2
   529 00001730 5A                  <1>     pop rdx
   530 00001731 85D2                <1>     test edx, edx   ;If this is zero, we are done
   531                              <1>     retz    ;Return
    47                              <2> cret z
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001733 74(FA)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   532 00001735 89D0                <1>     mov eax, edx    ;Else move it to eax
   533 00001737 31D2                <1>     xor edx, edx    ;And clear it
   534 00001739 EBC0                <1>     jmp short printDecimalWord
   535                              <1> 
   536                              <1> getDecimalWord:
   537                              <1> ;Works on MAX A dword in eax
   538                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   539 0000173B 31C9                <1>     xor ecx, ecx
   540 0000173D 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   541 0000173F BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   542                              <1> .dpfb0:
   543 00001744 FFC5                <1>     inc ebp
   544 00001746 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   545 0000174A 31D2                <1>     xor edx, edx
   546 0000174C 48F7F3              <1>     div rbx
   547 0000174F 80C230              <1>     add dl, '0'
   548 00001752 80FA39              <1>     cmp dl, '9'
   549 00001755 7603                <1>     jbe .dpfb1
   550 00001757 80C207              <1>     add dl, 'A'-'0'-10
   551                              <1> .dpfb1:
   552 0000175A 88D1                <1>     mov cl, dl    ;Save remainder byte
   553 0000175C 4885C0              <1>     test rax, rax
   554 0000175F 75E3                <1>     jnz .dpfb0
   555                              <1>     return
    19                              <2> %%_ret:
    20 00001761 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    17                                  %include "./Source/Utils/COMMAND/Source/int44h.asm"
    18                              <1> critErrorHandler:   ;Int 44h
    19                              <1> ;User Stack in usage here, must be swapped to before this is called
    20                              <1> ;Entered with:  
    21                              <1> ;               AH = Critical Error Bitfield
    22                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    23                              <1> ;               Bit 6 - Reserved
    24                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    25                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    26                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    27                              <1> ;               Bits [2-1] = Affected Disk Error
    28                              <1> ;                     0 0   DOS area
    29                              <1> ;                     0 1   FAT area
    30                              <1> ;                     1 0   Directory area
    31                              <1> ;                     1 1   Data area
    32                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    33                              <1> ;               AL  = Failing drive number if AH[7] = 0
    34                              <1> ;               DIL = Error code for errorMsg
    35                              <1> ;               RSI = EA of Device Header for which device the error occured
    36                              <1> ;Return:
    37                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    38                              <1> ;                  = 1 - Retry the Operation    (Retry)
    39                              <1> ;                  = 2 - Terminate the Program  (Abort)
    40                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    41 00001762 53                  <1>     push rbx
    42 00001763 51                  <1>     push rcx
    43 00001764 52                  <1>     push rdx
    44 00001765 57                  <1>     push rdi
    45 00001766 56                  <1>     push rsi
    46 00001767 FC                  <1>     cld         ;Make String ops go forward
    47                              <1> 
    48 00001768 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    49 0000176B 488D156EECFFFF      <1>     lea rdx, crlf
    50 00001772 B409                <1>     mov ah, 09h ;Print String
    51 00001774 CD41                <1>     int 41h
    52                              <1> 
    53 00001776 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    54 0000177C B90C000000          <1>     mov ecx, 0Ch
    55 00001781 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    56 00001783 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    57 00001786 480FB7FF            <1>     movzx rdi, di
    58 0000178A 4889FA              <1>     mov rdx, rdi    ;Copy error code
    59 0000178D 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    60 00001791 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    61 00001794 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    62 00001797 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    63 0000179E 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    64 000017A2 B409                <1>     mov ah, 09h ;Print String
    65 000017A4 CD41                <1>     int 41h     ;Call DOS to print first part of message
    66                              <1> 
    67 000017A6 488D1505020000      <1>     lea rdx, qword [.readmsg]
    68 000017AD 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    69 000017B4 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    70 000017B7 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    71 000017BB B409                <1>     mov ah, 09h ;Print String
    72 000017BD CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    73                              <1> 
    74 000017BF F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    75 000017C2 0F85DF000000        <1>     jnz .charError
    76                              <1> ;Disk error continues here
    77 000017C8 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    78 000017CF B409                <1>     mov ah, 09h
    79 000017D1 CD41                <1>     int 41h
    80 000017D3 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    81 000017D5 80C241              <1>     add dl, "A" ;Add ASCII code
    82 000017D8 B402                <1>     mov ah, 02h ;Print char in dl
    83 000017DA CD41                <1>     int 41h
    84                              <1> .userInput:
    85 000017DC 488D15FDEBFFFF      <1>     lea rdx, crlf  ;Print new line
    86 000017E3 B409                <1>     mov ah, 09h
    87 000017E5 CD41                <1>     int 41h
    88                              <1> ;Abort, Retry, Ignore, Fail is word order
    89                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    90                              <1> .userAbort:
    91                              <1> ;Abort is always an option
    92 000017E7 488D15E2010000      <1>     lea rdx, qword [.abortmsg]
    93 000017EE B409                <1>     mov ah, 09h
    94 000017F0 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
    95                              <1> .userRetry:
    96 000017F2 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    97 000017F5 7416                <1>     jz .userIgnore    ;If clear, dont print message
    98 000017F7 488D15EA010000      <1>     lea rdx, qword [.betweenMsg]
    99 000017FE B409                <1>     mov ah, 09h
   100 00001800 CD41                <1>     int 41h
   101 00001802 488D15D4010000      <1>     lea rdx, qword [.retrymsg]
   102 00001809 B409                <1>     mov ah, 09h
   103 0000180B CD41                <1>     int 41h
   104                              <1> .userIgnore:
   105 0000180D F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   106 00001810 7416                <1>     jz .userFail
   107 00001812 488D15CF010000      <1>     lea rdx, qword [.betweenMsg]
   108 00001819 B409                <1>     mov ah, 09h
   109 0000181B CD41                <1>     int 41h
   110 0000181D 488D15B2010000      <1>     lea rdx, qword [.ignoremsg]
   111 00001824 B409                <1>     mov ah, 09h
   112 00001826 CD41                <1>     int 41h
   113                              <1> .userFail:
   114 00001828 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   115 0000182B 7416                <1>     jz .userMsgEnd
   116 0000182D 488D15B4010000      <1>     lea rdx, qword [.betweenMsg]
   117 00001834 B409                <1>     mov ah, 09h
   118 00001836 CD41                <1>     int 41h
   119 00001838 488D15A4010000      <1>     lea rdx, qword [.failmsg]
   120 0000183F B409                <1>     mov ah, 09h
   121 00001841 CD41                <1>     int 41h
   122                              <1> .userMsgEnd:
   123 00001843 488D15A1010000      <1>     lea rdx, qword [.endMsg]
   124 0000184A B409                <1>     mov ah, 09h
   125 0000184C CD41                <1>     int 41h
   126                              <1> ;Get user input now 
   127 0000184E 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   128 00001850 488D3D97010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   129 00001857 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   130 00001859 CD41                <1>     int 41h ;Get char in al
   131 0000185B 3C61                <1>     cmp al, "a" ;Chack if lowercase
   132 0000185D 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   133 0000185F 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   134                              <1> .uip1:
   135 00001861 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   136 00001862 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   137 00001864 FFC1                <1>     inc ecx
   138 00001866 81F904000000        <1>     cmp ecx, 4
   139 0000186C 75F3                <1>     jne .uip1
   140 0000186E E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   141                              <1> .validInput:
   142 00001873 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   143                              <1> ;Now check if the input is permitted
   144 00001875 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   145 00001877 7427                <1>     je .cehExit
   146 00001879 84C0                <1>     test al, al ;Check if 0 => Ignore
   147 0000187B 740F                <1>     je .viIgnore
   148 0000187D 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   149 0000187F 7416                <1>     je .viRetry
   150                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   151 00001881 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   152 00001884 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   153 0000188A EB14                <1>     jmp short .cehExit
   154                              <1> .viIgnore:
   155 0000188C F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   156 0000188F 0F8447FFFFFF        <1>     jz .userInput
   157 00001895 EB09                <1>     jmp short .cehExit
   158                              <1> .viRetry:
   159 00001897 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   160 0000189A 0F843CFFFFFF        <1>     jz .userInput
   161                              <1> .cehExit:
   162 000018A0 5E                  <1>     pop rsi
   163 000018A1 5F                  <1>     pop rdi
   164 000018A2 5A                  <1>     pop rdx
   165 000018A3 59                  <1>     pop rcx
   166 000018A4 5B                  <1>     pop rbx
   167 000018A5 48CF                <1>     iretq
   168                              <1> .charError:
   169 000018A7 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   170 000018AC 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   171                              <1> .ce1:
   172 000018B3 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   173 000018B4 88C2                <1>     mov dl, al  ;Move char into dl
   174 000018B6 B402                <1>     mov ah, 02h
   175 000018B8 CD41                <1>     int 41h ;Print char
   176 000018BA E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   177 000018BC E91BFFFFFF          <1>     jmp .userInput
   178                              <1> 
   179                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   180 000018C1 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   180 000018CA 746563742024202020  <1>
   181 000018D3 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   181 000018DC 6E6974202420202020  <1>
   182 000018E5 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   182 000018EE 202420202020202020  <1>
   183 000018F7 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   183 00001900 6F6D6D616E64202420  <1>
   184 00001909 446174612024202020- <1>             db "Data $            "       ;Error 4
   184 00001912 202020202020202020  <1>
   185 0000191B 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   185 00001924 737420242020202020  <1>
   186 0000192D 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   186 00001936 202020202020202020  <1>
   187 0000193F 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   187 00001948 656469612024202020  <1>
   188 00001951 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   188 0000195A 7420466F756E642024  <1>
   189 00001963 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   189 0000196C 706572202420202020  <1>
   190 00001975 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   190 0000197E 6C7420242020202020  <1>
   191 00001987 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   191 00001990 742024202020202020  <1>
   192 00001999 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   192 000019A2 61696C757265202420  <1>
   193                              <1> 
   194 000019AB 64726976652024      <1> .drive      db "drive $"
   195 000019B2 6572726F7220726561- <1> .readmsg    db "error reading $"
   195 000019BB 64696E672024        <1>
   196 000019C1 6572726F7220777269- <1> .writemsg   db "error writing $"
   196 000019CA 74696E672024        <1>
   197 000019D0 41626F727424        <1> .abortmsg   db "Abort$" 
   198 000019D6 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   199 000019DD 526574727924        <1> .retrymsg   db "Retry$"
   200 000019E3 4661696C24          <1> .failmsg    db "Fail$"
   201 000019E8 2C2024              <1> .betweenMsg db ", $"
   202 000019EB 3F2024              <1> .endMsg     db "? $"
   203 000019EE 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   204                              <1> 
   205                              <1> int43h:
   206 000019F2 F9                  <1>     stc     ;Set CF to kill the task
   207 000019F3 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    18                                  %include "./Source/Utils/COMMAND/Data/cmdEnv.asm"
    19                              <1>     
    20                              <1> masterEnv:  ;Yeet this is this is a child command processor
    21 000019F6 5F3A434F4D4D414E44- <1>     db "_:COMMAND.COM",0
    21 000019FF 2E434F4D00          <1>
    22 00001A04 504154483D0000      <1>     db "PATH=",0,0
    23 00001A0B 202020202020202020- <1>     db ($ - masterEnv) dup (" ")    ;Pad the environment with spaces
    23 00001A14 202020202020202020- <1>
    23 00001A1D 202020              <1>
    24                              <1> endOfAlloc: ;Symbol to find the start of where I can yeet 
    19                                  %include "./Source/Utils/COMMAND/Source/cmdLdr.asm"
    20                              <1> cmdLdr:
    21                              <1> ;First check if the version is ok. If not, return.
    22 00001A20 B430                <1>     mov ah, 30h
    23 00001A22 CD41                <1>     int 41h
    24 00001A24 3C01                <1>     cmp al, 01h ;Version 1
    25 00001A26 760D                <1>     jbe .okVersion
    26 00001A28 488D1560010000      <1>     lea rdx, badVerStr
    27 00001A2F B409                <1>     mov ah, 09h
    28 00001A31 CD41                <1>     int 41h
    29 00001A33 CD40                <1>     int 40h ;Exit to caller or DOS to print bad command interpreter line
    30                              <1> .okVersion:
    31                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    32 00001A35 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    33 00001A39 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    34 00001A3D 488905CBE5FFFF      <1>     mov qword [realParent], rax ;Preserve the real parent address
    35                              <1> ;Setup Int 43h and Int 44h
    36 00001A44 488D1517FDFFFF      <1>     lea rdx, critErrorHandler
    37 00001A4B 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    38 00001A4F B844250000          <1>     mov eax, 2544h
    39 00001A54 CD41                <1>     int 41h
    40 00001A56 488D1595FFFFFF      <1>     lea rdx, int43h
    41 00001A5D 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    42 00001A61 B843250000          <1>     mov eax, 2543h
    43 00001A66 CD41                <1>     int 41h
    44 00001A68 488D15F0EDFFFF      <1>     lea rdx, applicationReturn
    45 00001A6F 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    46 00001A73 B842250000          <1>     mov eax, 2542h
    47 00001A78 CD41                <1>     int 41h
    48                              <1> ;Get a pointer to DOS Sysvars
    49 00001A7A B452                <1>     mov ah, 52h ;Get sysvars
    50 00001A7C CD41                <1>     int 41h
    51 00001A7E 48891D92E5FFFF      <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    52                              <1> ;Call for simple internationalisation data
    53 00001A85 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    54 00001A8A CD41                <1>     int 41h
    55 00001A8C 3CFF                <1>     cmp al, -1
    56 00001A8E 7412                <1>     je .skipSwitch
    57 00001A90 88158EE5FFFF        <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    58 00001A96 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    59 00001A99 7507                <1>     jne .skipSwitch
    60 00001A9B C60581E5FFFF2F      <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    61                              <1> .skipSwitch:
    62 00001AA2 B800380000          <1>     mov eax, 3800h  ;Get current country data
    63 00001AA7 488D1577E5FFFF      <1>     lea rdx, ctryData
    64 00001AAE CD41                <1>     int 41h ;Write the data to the internal country table
    65                              <1> ;Now determine if this is the master copy of COMMAND.COM
    66                              <1> ;Check if Int 4Eh has the same address as Int 4Dh. If so, we are master.
    67 00001AB0 B84E350000          <1>     mov eax, 354Eh  ;Get int 4Eh address
    68 00001AB5 CD41                <1>     int 41h
    69 00001AB7 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    70 00001ABA B84D350000          <1>     mov eax, 354Dh  ;Get int 4Dh address
    71 00001ABF CD41                <1>     int 41h
    72 00001AC1 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    73 00001AC4 7535                <1>     jne .skipMaster
    74                              <1> ;Ok so we are master command.com
    75                              <1> ;Now make myself the real parent
    76 00001AC6 4C890542E5FFFF      <1>     mov qword [realParent], r8
    77                              <1> ;Set master environment as mine
    78 00001ACD 488D0522FFFFFF      <1>     lea rax, masterEnv
    79 00001AD4 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    80                              <1> ;Set current Drive in COMSPEC
    81 00001AD8 B019                <1>     mov al, 19h ;Get current Drive
    82 00001ADA CD41                <1>     int 41h
    83 00001ADC 0441                <1>     add al, "A"
    84 00001ADE 880512FFFFFF        <1>     mov byte [masterEnv], al
    85                              <1> ;Set Int 4Eh up
    86 00001AE4 488D150FF2FFFF      <1>     lea rdx, int4Eh
    87 00001AEB B84E250000          <1>     mov eax, 254Eh ;Set this as Int 4Eh
    88 00001AF0 CD41                <1>     int 41h
    89                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    90                              <1>     
    91 00001AF2 488D1D27FFFFFF      <1>     lea rbx, endOfAlloc ;Save the Master Environment
    92 00001AF9 EB07                <1>     jmp short .printInit
    93                              <1> .skipMaster:
    94 00001AFB 488D1DF4FEFFFF      <1>     lea rbx, masterEnv  ;This is the base address to jettison
    95                              <1> .printInit:
    96                              <1> ;Finish by printing INIT string.
    97 00001B02 488D1510000000      <1>     lea rdx, initString
    98 00001B09 B409                <1>     mov ah, 09h
    99 00001B0B CD41                <1>     int 41h ;Print init string
   100 00001B0D 488925F1E4FFFF      <1>     mov qword [stackBottom], rsp    ;Use this to save where to reset rsp to
   101 00001B14 E932EDFFFF          <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   102                              <1> ;Loader Data here
   103                              <1> initString: 
   104 00001B19 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version 1.0",CR,LF
   104 00001B22 66696320436F6D7075- <1>
   104 00001B2B 746572205265736561- <1>
   104 00001B34 726368285229205343- <1>
   104 00001B3D 502F444F5328522920- <1>
   104 00001B46 56657273696F6E2031- <1>
   104 00001B4F 2E300D0A            <1>
   105 00001B53 202020202020202020- <1>     db       "          (C)Copyright Scientific Computer Reserach 2022.",CR,LF,"$"
   105 00001B5C 20284329436F707972- <1>
   105 00001B65 696768742053636965- <1>
   105 00001B6E 6E746966696320436F- <1>
   105 00001B77 6D7075746572205265- <1>
   105 00001B80 736572616368203230- <1>
   105 00001B89 32322E0D0A24        <1>
   106 00001B8F 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   106 00001B98 20444F532076657273- <1>
   106 00001BA1 696F6E0D0A24        <1>
   106          ------------------  <1>  info: assembly required 1+3+2 passes

