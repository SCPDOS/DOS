     1                                  ;COMMAND.COM main file
     2                                  [map all ./Source/Utils/COMMAND/Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Source/Include/dosMacro.mac"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------------------------------
     9                              <1> ;Generic Macros file
    10                              <1> ;The following instruction extensions allow to conditionally return
    11                              <1> ;The idea was borrowed from the DOS Source Code
    12                              <1> ;
    13                              <1> ;-------------------------------------------------------------------------------
    14                              <1> 
    15                              <1> ;-------------------------------------------------------------------------------
    16                              <1> ;These macros are live and must not be touched
    17                              <1> ;-------------------------------------------------------------------------------
    18                              <1> %macro return 0
    19                              <1> %%_ret:
    20                              <1>     ret
    21                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    22                              <1> %endmacro
    23                              <1> 
    24                              <1> %macro cret 1
    25                              <1> %%_base:
    26                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    27                              <1>     %ifdef retOff
    28                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <1>     %ifdef currSegVBase
    30                              <1>     j%+1 short (retOff+currSegVBase)
    31                              <1>     %else
    32                              <1>     j%+1 short retOff
    33                              <1>     %endif  ;End ifdef currSegVBase
    34                              <1>     %else 
    35                              <1>     j%-1 short %%a
    36                              <1>     return
    37                              <1> %%a:
    38                              <1>     %endif  ;End the distance measurement if
    39                              <1>     %else   
    40                              <1>     j%-1 short %%a
    41                              <1>     return
    42                              <1> %%a:
    43                              <1>     %endif  ;End ifdef retoff
    44                              <1> %endmacro
    45                              <1> 
    46                              <1> %macro retz 0
    47                              <1> cret z
    48                              <1> %endmacro
    49                              <1> 
    50                              <1> %macro retnz 0
    51                              <1> cret nz
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> %macro rete 0
    55                              <1> cret e
    56                              <1> %endmacro
    57                              <1> 
    58                              <1> %macro retne 0
    59                              <1> cret ne
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> %macro retc 0
    63                              <1> cret c
    64                              <1> %endmacro
    65                              <1> 
    66                              <1> %macro retnc 0
    67                              <1> cret nc
    68                              <1> %endmacro
    69                              <1> 
    70                              <1> %macro retb 0
    71                              <1> cret b
    72                              <1> %endmacro
    73                              <1> 
    74                              <1> %macro retnb 0
    75                              <1> cret nb
    76                              <1> %endmacro
    77                              <1> 
    78                              <1> %macro breakpoint 0
    79                              <1> xchg bx, bx
    80                              <1> %endmacro
     7                                  %include "./Source/Include/driverStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous SCP/DOS      ;
    11                              <1> ; device driver related structures.                     ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    15                              <1> 
    16 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    17 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    18 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    19 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    20 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    21                              <1> 
    22                              <1> endstruc
    23                              <1> 
    24                              <1> ;Command Code equates
    25                              <1>     drvINIT         equ 0
    26                              <1>     drvMEDCHK       equ 1
    27                              <1>     drvBUILDBPB     equ 2
    28                              <1>     drvIOCTLREAD    equ 3
    29                              <1>     drvREAD         equ 4
    30                              <1>     drvNONDESTREAD  equ 5
    31                              <1>     drvINSTATUS     equ 6
    32                              <1>     drvFLUSHINBUF   equ 7
    33                              <1>     drvWRITE        equ 8
    34                              <1>     drvWRITEVERIFY  equ 9
    35                              <1>     drvOUTSTATUS    equ 10
    36                              <1>     drvFLUSHOUTBUF  equ 11
    37                              <1>     drvIOCTLWRITE   equ 12
    38                              <1>     drvOPEN         equ 13
    39                              <1>     drvCLOSE        equ 14
    40                              <1>     drvREMMEDCHECK  equ 15
    41                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    42                              <1>     drvIOCTL        equ 19
    43                              <1>     drvGETDRVMAP    equ 23
    44                              <1>     drvSETDRVMAP    equ 24
    45                              <1>     
    46                              <1> ;Driver Error equates 
    47                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    48                              <1>     drvBadUnit      equ 1   ;Unknown unit
    49                              <1>     drvNotReady     equ 2   ;Device not ready
    50                              <1>     drvBadCmd       equ 3   ;Unknown command
    51                              <1>     drvCRCErr       equ 4   ;CRC Error
    52                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    53                              <1>     drvBadSeek      equ 6   ;Seek error
    54                              <1>     drvBadMed       equ 7   ;Unknown media
    55                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    56                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    57                              <1>     drvWriteFault   equ 10  ;Write Fault
    58                              <1>     drvReadFault    equ 11  ;Read Fault
    59                              <1>     drvGenFault     equ 12  ;General Fault
    60                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    61                              <1> 
    62                              <1> ;Driver status word status bit meanings
    63                              <1>     drvErrStatus    equ 8000h  
    64                              <1>     drvDonStatus    equ 0100h
    65                              <1>     drvBsyStatus    equ 0200h
    66                              <1> 
    67                              <1> ;Driver Attribute Word bit meanings
    68                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    69                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    70                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    71                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    72                              <1>     devDrvFastOut  equ 10h ;If set, device supports INT 49h
    73                              <1>     devDrvExtFun   equ 40h ;If set, functions 13, 17, 18 supported (must be)
    74                              <1>     devDrvIOCTL2   equ 80h ;If set, IOCTL function 19 supported
    75                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    76                              <1>     devDrvIOCTL    equ 4000h ;If set, Generic IOCTL supported
    77                              <1>     devDrvChar     equ 8000h ;If set, Char device
    78                              <1> ;Bit 0 1=console input
    79                              <1> ;    1 1=console output (character devices)
    80                              <1> ;    2 1=NUL device
    81                              <1> ;    3 1=CLOCK device
    82                              <1> ;    4 1=INT 49 output (CON)
    83                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    84                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    85                              <1> ;   11 1=open/close/removable media supported (3.0+)
    86                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    87                              <1> ;      1=media descriptor in FAT required (block devices)
    88                              <1> ;   14 1=IOCTL supported
    89                              <1> ;   15 0=block device
    90                              <1> ;      1=character device
    91                              <1> 
    92                              <1> ;Driver structures
    93                              <1> 
    94                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    95                              <1> 
    96                              <1>     .hdrlen resb 1  ;Length of the request header
    97                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    98                              <1>     .cmdcde resb 1  ;Command code
    99                              <1>     .status resw 1  ;Status word
   100                              <1>     .devptr resq 1  ;Device queue pointer field
   101                              <1> 
   102                              <1> %endmacro
   103                              <1> 
   104                              <1> struc drvReqHdr
   105                              <1>     drvReqHdrM
    95                              <2> 
    96 00000000 ??                  <2>  .hdrlen resb 1
    97 00000001 ??                  <2>  .unitnm resb 1
    98 00000002 ??                  <2>  .cmdcde resb 1
    99 00000003 ????                <2>  .status resw 1
   100 00000005 ????????????????    <2>  .devptr resq 1
   101                              <2> 
   106                              <1> endstruc
   107                              <1> 
   108                              <1> struc initReqPkt  ;Init Request Packet
   109                              <1> 
   110                              <1>     drvReqHdrM   ;Common Driver Header Macro
    95                              <2> 
    96 00000000 ??                  <2>  .hdrlen resb 1
    97 00000001 ??                  <2>  .unitnm resb 1
    98 00000002 ??                  <2>  .cmdcde resb 1
    99 00000003 ????                <2>  .status resw 1
   100 00000005 ????????????????    <2>  .devptr resq 1
   101                              <2> 
   111 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
   112 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
   113 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
   114 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
   115                              <1> 
   116                              <1> endstruc
   117                              <1> 
   118                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   119                              <1> 
   120                              <1>     drvReqHdrM    ;Common Driver Header Macro
    95                              <2> 
    96 00000000 ??                  <2>  .hdrlen resb 1
    97 00000001 ??                  <2>  .unitnm resb 1
    98 00000002 ??                  <2>  .cmdcde resb 1
    99 00000003 ????                <2>  .status resw 1
   100 00000005 ????????????????    <2>  .devptr resq 1
   101                              <2> 
   121 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   122 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
   123 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
   124                              <1> 
   125                              <1> endstruc
   126                              <1> 
   127                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   128                              <1> 
   129                              <1>     drvReqHdrM    ;Common Driver Header Macro
    95                              <2> 
    96 00000000 ??                  <2>  .hdrlen resb 1
    97 00000001 ??                  <2>  .unitnm resb 1
    98 00000002 ??                  <2>  .cmdcde resb 1
    99 00000003 ????                <2>  .status resw 1
   100 00000005 ????????????????    <2>  .devptr resq 1
   101                              <2> 
   130 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   131 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   132 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   133                              <1> 
   134                              <1> endstruc
   135                              <1> 
   136                              <1> struc ioReqPkt   ;IO Request Packet
   137                              <1> 
   138                              <1>     drvReqHdrM    ;Common Driver Header Macro
    95                              <2> 
    96 00000000 ??                  <2>  .hdrlen resb 1
    97 00000001 ??                  <2>  .unitnm resb 1
    98 00000002 ??                  <2>  .cmdcde resb 1
    99 00000003 ????                <2>  .status resw 1
   100 00000005 ????????????????    <2>  .devptr resq 1
   101                              <2> 
   139 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   140 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   141 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   142 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   143 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   144                              <1> 
   145                              <1> endstruc
   146                              <1> 
   147                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   148                              <1>     
   149                              <1>     drvReqHdrM    ;Common Driver Header Macro
    95                              <2> 
    96 00000000 ??                  <2>  .hdrlen resb 1
    97 00000001 ??                  <2>  .unitnm resb 1
    98 00000002 ??                  <2>  .cmdcde resb 1
    99 00000003 ????                <2>  .status resw 1
   100 00000005 ????????????????    <2>  .devptr resq 1
   101                              <2> 
   150 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   151                              <1> 
   152                              <1> endstruc
   153                              <1> 
   154                              <1> struc statusReqPkt   ;Status Request Packet
   155                              <1> 
   156                              <1>     drvReqHdrM    ;Common Driver Header Macro
    95                              <2> 
    96 00000000 ??                  <2>  .hdrlen resb 1
    97 00000001 ??                  <2>  .unitnm resb 1
    98 00000002 ??                  <2>  .cmdcde resb 1
    99 00000003 ????                <2>  .status resw 1
   100 00000005 ????????????????    <2>  .devptr resq 1
   101                              <2> 
   157                              <1> 
   158                              <1> endstruc
   159                              <1> 
   160                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   161                              <1> 
   162                              <1>     drvReqHdrM    ;Common Driver Header Macro
    95                              <2> 
    96 00000000 ??                  <2>  .hdrlen resb 1
    97 00000001 ??                  <2>  .unitnm resb 1
    98 00000002 ??                  <2>  .cmdcde resb 1
    99 00000003 ????                <2>  .status resw 1
   100 00000005 ????????????????    <2>  .devptr resq 1
   101                              <2> 
   163                              <1>      
   164                              <1> endstruc
   165                              <1> 
   166                              <1> struc openReqPkt ;Open Device Request Packet
   167                              <1> 
   168                              <1>     drvReqHdrM    ;Common Driver Header Macro
    95                              <2> 
    96 00000000 ??                  <2>  .hdrlen resb 1
    97 00000001 ??                  <2>  .unitnm resb 1
    98 00000002 ??                  <2>  .cmdcde resb 1
    99 00000003 ????                <2>  .status resw 1
   100 00000005 ????????????????    <2>  .devptr resq 1
   101                              <2> 
   169                              <1>      
   170                              <1> endstruc
   171                              <1> 
   172                              <1> struc closeReqPkt ;Close Device Request Packet
   173                              <1> 
   174                              <1>     drvReqHdrM    ;Common Driver Header Macro
    95                              <2> 
    96 00000000 ??                  <2>  .hdrlen resb 1
    97 00000001 ??                  <2>  .unitnm resb 1
    98 00000002 ??                  <2>  .cmdcde resb 1
    99 00000003 ????                <2>  .status resw 1
   100 00000005 ????????????????    <2>  .devptr resq 1
   101                              <2> 
   175                              <1>      
   176                              <1> endstruc
   177                              <1> 
   178                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   179                              <1> 
   180                              <1>     drvReqHdrM    ;Common Driver Header Macro
    95                              <2> 
    96 00000000 ??                  <2>  .hdrlen resb 1
    97 00000001 ??                  <2>  .unitnm resb 1
    98 00000002 ??                  <2>  .cmdcde resb 1
    99 00000003 ????                <2>  .status resw 1
   100 00000005 ????????????????    <2>  .devptr resq 1
   101                              <2> 
   181                              <1>      
   182                              <1> endstruc
   183                              <1> 
   184                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   185                              <1> 
   186                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    95                              <2> 
    96 00000000 ??                  <2>  .hdrlen resb 1
    97 00000001 ??                  <2>  .unitnm resb 1
    98 00000002 ??                  <2>  .cmdcde resb 1
    99 00000003 ????                <2>  .status resw 1
   100 00000005 ????????????????    <2>  .devptr resq 1
   101                              <2> 
   187 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   188 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   189 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   190 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   191 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   192                              <1> 
   193                              <1> endstruc
   194                              <1> 
   195                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   196                              <1>     
   197                              <1>     drvReqHdrM    ;Common Driver Header Macro
    95                              <2> 
    96 00000000 ??                  <2>  .hdrlen resb 1
    97 00000001 ??                  <2>  .unitnm resb 1
    98 00000002 ??                  <2>  .cmdcde resb 1
    99 00000003 ????                <2>  .status resw 1
   100 00000005 ????????????????    <2>  .devptr resq 1
   101                              <2> 
   198                              <1> 
   199                              <1> endstruc
   200                              <1> 
   201                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   202                              <1>     
   203                              <1>     drvReqHdrM    ;Common Driver Header Macro
    95                              <2> 
    96 00000000 ??                  <2>  .hdrlen resb 1
    97 00000001 ??                  <2>  .unitnm resb 1
    98 00000002 ??                  <2>  .cmdcde resb 1
    99 00000003 ????                <2>  .status resw 1
   100 00000005 ????????????????    <2>  .devptr resq 1
   101                              <2> 
   204                              <1> 
   205                              <1> endstruc
     8                                  %include "./Source/Include/fatStruc.inc"
     9                              <1> 
    10                              <1> ;-------------------------------------------------------;
    11                              <1> ; This include file contains miscellaneous FAT driver   ;
    12                              <1> ; structures. exFAT will have it's own files at a later ;
    13                              <1> ; stage.                                                ;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;-------------------------------------------------------;
    16                              <1> ;-------------------------------------------------------;
    17                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    18                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    19                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    20                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    21                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    22                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    23                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    24                              <1> ;-------------------------------------------------------;
    25                              <1> 
    26                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    27                              <1> 
    28 00000000 ??????              <1>     .jmpBoot    resb 3 
    29 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    30 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    31 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    32 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    33 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    34 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    35 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    36 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    37 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    38 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    39 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    40 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    41 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    42                              <1> 
    43 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    44 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    45 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    46 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    47 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    48 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    49                              <1> 
    50                              <1> endstruc
    51                              <1> 
    52                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    53                              <1> 
    54 00000000 ??????              <1>     .jmpBoot    resb 3
    55 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    56 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    57 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    58 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    59 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    60 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    61 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    62 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    63 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    64 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    65 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    66 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    67 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    68                              <1> 
    69 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    70 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    71 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    72 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    73 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    74 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    75 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    76                              <1> 
    77 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    78 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    79 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    80 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    81 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    82 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    83                              <1> 
    84                              <1> endstruc
    85                              <1> 
    86                              <1> struc mbr
    87 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    88 000001B8 ????????            <1>     .diskID     resb 4
    89 000001BC ????                <1>     .reserved   resb 2
    90 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    91 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    92 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    93 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    94 000001FE ????                <1>     .mbrSig     resb 2
    95                              <1> endstruc
    96                              <1> 
    97                              <1> struc mbrEntry
    98 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    99 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
   100 00000004 ??                  <1>     .ptnType    resb 1
   101 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   102 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   103 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   104                              <1> endstruc
   105                              <1> 
   106                              <1> struc ebr
   107 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   108 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   109 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   110 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   111 000001FE ????                <1>     .mbrSig     resb 2
   112                              <1> endstruc
   113                              <1> 
   114                              <1> 
   115                              <1> struc fatDirEntry
   116                              <1> 
   117 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name w/o fullstop
   118 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   119 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   120 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   121 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   122 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   123 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   124 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   125 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   126 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   127 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   128 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   129                              <1> 
   130                              <1> endstruc
   131                              <1> ;Directory attribute equates
   132                              <1>     dirReadOnly     equ 01h
   133                              <1>     dirHidden       equ 02h
   134                              <1>     dirSystem       equ 04h
   135                              <1>     dirVolumeID     equ 08h
   136                              <1>     dirDirectory    equ 10h
   137                              <1>     dirArchive      equ 20h
   138                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   139                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   140                              <1>     ;If any of the three bits are set, then ALL three bits are set
   141                              <1>     ; in addition to whatever the user passed to search for.
   142                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   143                              <1>     dirIncFiles     equ dirHidden | dirSystem
   144                              <1> 
   145                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   146                              <1> 
   147 00000000 ??????              <1>     .jmpBoot                resb 3 
   148 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   149 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   150 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   151 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   152 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   153 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   154 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   155 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   156 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   157 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   158 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   159 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   160 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   161 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   162 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   163 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   164 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   165 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   166                              <1> 
   167                              <1> endstruc
   168                              <1> 
   169                              <1> struc FSInfo
   170                              <1> 
   171 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   172 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   173 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   174 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   175 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   176 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   177 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   178                              <1> 
   179                              <1> endstruc
   180                              <1> 
   181                              <1> %macro defaultBPB 0
   182                              <1>     db 0E9h
   183                              <1>     db 00h
   184                              <1>     db 90h
   185                              <1>     db 'SCPDOSv1'
   186                              <1>     dw 0200h                       
   187                              <1>     db 01h                         
   188                              <1>     dw 0001h                           
   189                              <1>     db 02h                              
   190                              <1>     dw 00E0h            
   191                              <1>     dw 0B40h   
   192                              <1>     db 0F0h                   
   193                              <1>     dw 0009h                   
   194                              <1>     dw 0012h                     
   195                              <1>     dw 0002h                  
   196                              <1>     dd 0                 
   197                              <1>     dd 0 
   198                              <1>     db 00h
   199                              <1>     db 00h
   200                              <1>     db 29h
   201                              <1>     dd 0
   202                              <1>     db 'NO NAME    '
   203                              <1>     db 'FAT12   '
   204                              <1>     db 58 dup 0 ;Size padding for a FAT12/16 BPB to make it 120 bytes long
   205                              <1> %endmacro
     9                                  %include "./Source/Include/dosStruc.inc"
    10                              <1> 
    11                              <1> ;-------------------------------------------------------;
    12                              <1> ; This include file contains miscellaneous internal     ;
    13                              <1> ; SCP/DOS structures.                                   ;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> 
    16                              <1> ;------------------------------------------------------------------------;
    17                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    18                              <1> ; its file system structure. This is used to locate files and structures
    19                              <1> ; on the device itself and to translate file requests to cluster chains
    20                              <1> ; to LBAs to pass to the disk driver..
    21                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    22                              <1> ; drivers Initialise routine has been called.
    23                              <1> ;------------------------------------------------------------------------;
    24                              <1> struc dpb        ;Drive Parameter Block
    25                              <1> 
    26 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    27 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    28 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    29 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    30 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    31 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    32 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    33 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    34 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    35 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    36 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    37 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    38                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    39 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    40 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    41 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    42 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    43 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    44 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    45                              <1> 
    46                              <1> endstruc
    47                              <1> 
    48                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    49                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    52                              <1> ; All disk pathing requests go via the CDS for that drive.
    53                              <1> ; The default drive is the last accessed drive, this number is stored
    54                              <1> ; in the DOS data area.
    55                              <1> ; The CDS is stored as an array with the offset into the array being 
    56                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    57                              <1> ;
    58                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    59                              <1> ;------------------------------------------------------------------------;
    60                              <1> struc cds       ;Current Directory structure
    61 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    62 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    63 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    64 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    65 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    66 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    67                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    68                              <1> ; another, we save the number of chars to skip to that deep level).
    69                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    70                              <1> ; Only affects for SUBST drives, not JOIN
    71                              <1> ; Flags: Bit 15 set = Network drive
    72                              <1> ;        Bit 14 set = Physical drive
    73                              <1> ;        Bit 13 set = JOIN'ed drive
    74                              <1> ;        Bit 12 set = SUBST'ed drive
    75                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    76                              <1> endstruc
    77                              <1> ;CDS equates
    78                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    79                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    80                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    81                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    82                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    83                              <1> ;------------------------------------------------------------------------;
    84                              <1> ; The SFT is a way to allow applications to open file handles to files 
    85                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    86                              <1> ; under the first header, and then a second header will be linked to the 
    87                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    88                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    89                              <1> ; using the FCBS= command. Default FCBS=5.
    90                              <1> ;
    91                              <1> ; A file handle describes the file, and the location within the file that
    92                              <1> ; we are reading. The file handle can be manipulated without the file
    93                              <1> ; being in memory, thus allowing the user to access data without needing 
    94                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    95                              <1> ; accessing devices, by treating them as files with their drivers 
    96                              <1> ; responding and translating the manipulations of the file handle itself.
    97                              <1> ; Neither the driver nor the application should see or use the SFT for
    98                              <1> ; the handle, as it is subject to change (and will change when file 
    99                              <1> ; sharing provisions are included). The DOS will make requests to the 
   100                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
   101                              <1> ; track of the information in the SFT entry for that handle. 
   102                              <1> ;
   103                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   104                              <1> ; can point to the same file. It all depends on what the applications 
   105                              <1> ; want to do with the File.
   106                              <1> ;
   107                              <1> ; !!!!IMPORTANT!!!!
   108                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   109                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   110                              <1> ;
   111                              <1> ;Each SFT may look like this:
   112                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   113                              <1> ;            |                |
   114                              <1> ;       wNumFiles*sft    wNumFiles*sft
   115                              <1> ;
   116                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   117                              <1> ; System FCBs.
   118                              <1> ;
   119                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   120                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   121                              <1> ;
   122                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   123                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   124                              <1> ;------------------------------------------------------------------------;
   125                              <1> struc sfth   ;System file table header
   126                              <1> ; This is the SFT header.
   127                              <1> ; This structure comes before the start of the first file in the array/table.
   128 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   129 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   130                              <1> endstruc
   131                              <1> 
   132                              <1> struc sft
   133                              <1> ;This is the file struc itself
   134 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   135 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   136 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   137 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   138 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   139 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   140 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   141 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   142 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   143 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   144 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   145 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   146 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   147 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   148 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   149 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   150 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   151 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   152 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   153                              <1> ;                           0 means no record
   154                              <1> endstruc
   155                              <1> ;Open Mode equates
   156                              <1> ;Access modes   Bits[2:0]
   157                              <1> ReadAccess      equ 0h
   158                              <1> WriteAccess     equ 1h
   159                              <1> RWAccess        equ 2h
   160                              <1> ;Bit 3 reserved 0
   161                              <1> ;Sharing modes  Bits[6:4]
   162                              <1> CompatShare     equ 0h
   163                              <1> denyRWShare     equ 10h
   164                              <1> denyWriteShare  equ 20h
   165                              <1> denyReadShare   equ 30h
   166                              <1> denyNoneShare   equ 40h
   167                              <1> netFCBShare     equ 70h
   168                              <1> ;Bit 7 reserved 0
   169                              <1> ;Bits 8-12 reserved 0
   170                              <1> 
   171                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   172                              <1> ;Buffering on writes
   173                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   174                              <1> ;FCB opened file?
   175                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   176                              <1> ;Attribute Byte
   177                              <1> readOnlyFile    equ 1h
   178                              <1> hiddenFile      equ 2h
   179                              <1> systemFile      equ 4h
   180                              <1> volumeLabel     equ 8h
   181                              <1> directoryFile   equ 10h ;Directory entry
   182                              <1> archiveFile     equ 20h
   183                              <1> ;Device Info equates
   184                              <1> ;For a block device, bits [5:0] contain the drive number
   185                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   186                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   187                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   188                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   189                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   190                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   191                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   192                              <1> blokFileToFlush equ 40h ;Set if ANY writes are made to this handle!
   193                              <1> devCharDev      equ 80h ;If set, it is a char device!
   194                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   195                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   196                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   197                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   198                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   199                              <1> 
   200                              <1> ;openAddress   equ DOSSEG:367Ah   
   201                              <1> ;createAddress equ DOSSEG:35E3h   
   202                              <1> ;------------------------------------------------------------------------;
   203                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   204                              <1> ; to an internal buffer, and then copying it to the specified location
   205                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   206                              <1> ; another request for the same sector from the same device is made, so 
   207                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   208                              <1> ; size, selected according to the largest detected sector size during 
   209                              <1> ; the initial loadup.
   210                              <1> ;
   211                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   212                              <1> ;
   213                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   214                              <1> ;------------------------------------------------------------------------;
   215                              <1> 
   216                              <1> struc bufferHdr
   217 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   218 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   219 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   220 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   221 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   222 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   223 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   224 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   225 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   226                              <1>     .dataarea:             ;Points to the start of the data area
   227                              <1> endstruc
   228                              <1> ;Buffer Flag equates
   229                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   230                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   231                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   232                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   233                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   234                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   235                              <1> ;Note! A buffer is marked as referenced only when the application 
   236                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   237                              <1> ;------------------------------------------------------------------------;
   238                              <1> ; Memory control block for each memory arena
   239                              <1> ;------------------------------------------------------------------------;
   240                              <1> struc mcb
   241 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   242 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   243 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   244 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   245                              <1>     .program:
   246                              <1> endstruc
   247                              <1> ;MCB equates
   248                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   249                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   250                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   251                              <1> mcbMarkCtn      equ "M"
   252                              <1> mcbMarkEnd      equ "Z"
   253                              <1> 
   254                              <1> memFirstFit     equ 0   ;First free block goes to application
   255                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   256                              <1> memLastFit      equ 2   ;Last free block goes to application
   257                              <1> 
   258                              <1> ;Owner = Para aligned address => Owning application PSP
   259                              <1> ;...To consider...
   260                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   261                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   262                              <1> ;------------------------------------------------------------------------;
   263                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   264                              <1> ; following order, thus allowing for return values to be placed in the 
   265                              <1> ; registers by accessing the caller register stack frame.
   266                              <1> ;------------------------------------------------------------------------;
   267                              <1> struc callerFrame
   268 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   269 00000008 ????????????????    <1>     .rbx    resq 1    
   270 00000010 ????????????????    <1>     .rcx    resq 1
   271 00000018 ????????????????    <1>     .rdx    resq 1
   272 00000020 ????????????????    <1>     .rsi    resq 1
   273 00000028 ????????????????    <1>     .rdi    resq 1
   274 00000030 ????????????????    <1>     .rbp    resq 1
   275 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   276 00000040 ????????????????    <1>     .r9     resq 1
   277                              <1> ;Pushed by Processor when invoked via Interrupt
   278 00000048 ????????????????    <1>     .rip    resq 1
   279 00000050 ????????????????    <1>     .cs     resq 1
   280 00000058 ????????????????    <1>     .flags  resq 1
   281                              <1> endstruc
   282                              <1> 
   283                              <1> struc dpl
   284                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   285                              <1> ; server calls
   286 00000000 ????????????????    <1>     .rax    resq 1
   287 00000008 ????????????????    <1>     .rbx    resq 1
   288 00000010 ????????????????    <1>     .rcx    resq 1
   289 00000018 ????????????????    <1>     .rdx    resq 1
   290 00000020 ????????????????    <1>     .rsi    resq 1
   291 00000028 ????????????????    <1>     .rdi    resq 1
   292 00000030 ????????????????    <1>     .r8     resq 1
   293 00000038 ????????????????    <1>     .r9     resq 1
   294 00000040 ????????????????    <1>     .align  resq 1
   295 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   296 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   297                              <1> endstruc
   298                              <1> 
   299                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   300 00000000 ????????????????    <1>     .oldRBP         resq 1  
   301 00000008 ??                  <1>     .newBuffers     resb 1  ;New buffers value
   302 00000009 ??                  <1>     .newSFTVal      resb 1
   303 0000000A ??                  <1>     .newFCBSVal     resb 1
   304 0000000B ??                  <1>     .newProtFCBSVal resb 1  ;Number of protected FCBS
   305 0000000C ??                  <1>     .newLastdrive   resb 1
   306 0000000D ??                  <1>     .newStacks      resb 1  ;Ignored for now
   307 0000000E ????                <1>     .newStackSize   resb 2  ;Ignored for now
   308 00000010 ????????            <1>     .newAllocSize   resd 1  ;Used to keep track of reallocation size
   309 00000014 ????????            <1>                     resd 1  ;Alignment byte
   310 00000018 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   311                              <1> endstruc
   312                              <1> 
   313                              <1> struc fcb
   314                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   315 00000000 ??                  <1>     .driveNum   resb 1
   316 00000001 ????????????????    <1>     .filename   resb 8
   317 00000009 ??????              <1>     .fileext    resb 3
   318 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   319                              <1> ;One block consists of 128 records, of size denoted in the below
   320 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   321 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   322 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   323 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   324 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   325 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   326 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   327 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   328 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   329                              <1>     ;If record size > 64, high byte is ignored.
   330                              <1>     ;Used for random read and write operations to find the right record
   331                              <1> endstruc
   332                              <1> 
   333                              <1> struc filename
   334                              <1> ;8.3 File name struct
   335 00000000 ????????????????    <1>     .fName  resb 8
   336 00000008 ??????              <1>     .fExt   resb 3
   337                              <1> endstruc
   338                              <1> 
   339                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   340 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   341 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   342 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   343 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   344 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   345 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   346 00000016 ????                <1>     .fileTime   resw 1  ;File time
   347 00000018 ????                <1>     .fileDate   resw 1  ;File date
   348 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   349 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   350                              <1> endstruc
   351                              <1> 
   352                              <1> struc psp
   353 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   354 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   355 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   356 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   357 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   358 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   359 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   360 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   361 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   362 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   363 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   364 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   365 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   366 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   367                              <1> ;Extra handle arrays are grouped into a linked list
   368                              <1> ;The below are in the same place as in DOS
   369 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   370 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   371                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   372 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   373 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   374                              <1> endstruc
   375                              <1> 
   376                              <1> struc clkStruc
   377 00000000 ????                <1>     .dateWord   resw 1
   378 00000002 ??                  <1>     .minutes    resb 1
   379 00000003 ??                  <1>     .hours      resb 1
   380 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   381 00000005 ??                  <1>     .seconds    resb 1
   382                              <1> endstruc
   383                              <1> 
   384                              <1> struc countryStruc
   385 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   386                              <1>                         ;0 = month day year hh:mm:ss
   387                              <1>                         ;1 = day month year hh:mm:ss
   388                              <1>                         ;2 = year month day hh:mm:ss
   389 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   390 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   391 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   392 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   393 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   394 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   395                              <1>                         ;0 = Symbol leads, without space
   396                              <1>                         ;1 = Symbol follows, without space
   397                              <1>                         ;2 = Symbol leads, one space
   398                              <1>                         ;3 = Symbol follows, one space
   399                              <1>                         ;4 = Symbol replace decimal separator
   400 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   401 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   402 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   403 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   404 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   405                              <1> endstruc
   406                              <1> 
   407                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   408                              <1> ;for a space of 64Gb
   409                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   410                              <1> dosLowBase  equ 600h    ;Low load address
   411                              <1> 
   412                              <1> ;Critical Error AH bitfield equates
   413                              <1> critRead    equ 0h
   414                              <1> critWrite   equ 1h
   415                              <1> critDOS     equ 0h
   416                              <1> critFAT     equ 2h
   417                              <1> critDir     equ 4h
   418                              <1> critData    equ 6h
   419                              <1> critFailOK  equ 8h
   420                              <1> critRetryOK equ 10h
   421                              <1> critIgnorOK equ 20h
   422                              <1> critCharDev equ 80h
   423                              <1> 
   424                              <1> critIgnore  equ 0
   425                              <1> critRetry   equ 1
   426                              <1> critAbort   equ 2
   427                              <1> critFail    equ 3
   428                              <1> 
   429                              <1> ;MISC ASCII control chars
   430                              <1> NUL equ 00h ;^@         | ASCII Null
   431                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   432                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   433                              <1> BEL equ 07h ;^G         | ASCII Bell
   434                              <1> BSP equ 08h ;^H         | ASCII Backspace
   435                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   436                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   437                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   438                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   439                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   440                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   441                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   442                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   443                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   444                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   445                              <1> SPC equ 20h ;Printable  | ASCII Space
   446                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   447                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   448                              <1> 
   449                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   450                              <1> ;Extended Ascii Codes
   451                              <1> eF1     equ 3Bh ;F1 second byte
   452                              <1> eF2     equ 3Ch ;F2 second byte
   453                              <1> eF3     equ 3Dh ;F3 second byte
   454                              <1> eF4     equ 3Eh ;F4 second byte
   455                              <1> eF5     equ 3Fh ;F5 second byte
   456                              <1> eF6     equ 40h ;F6 second byte
   457                              <1> eF7     equ 41h ;F7 second byte
   458                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   459                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   460                              <1> eIns    equ 52h ;Insert second byte
   461                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   462                              <1> 
   463                              <1> ;Default Configuration for the system
   464                              <1> 
   465                              <1> buffersDefault  equ 30
   466                              <1> filesDefault    equ 20
   467                              <1> fcbsDefault     equ 4
   468                              <1> safeFcbsDeflt   equ 0
   469                              <1> lastDriveDeflt  equ 5   
    10                                  %include "./Source/Include/dosError.inc"
    11                              <1> ;DOS Error codes
    12                              <1> 
    13                              <1> ;Extended Error Codes
    14                              <1> errInvFnc   equ 1   ;Invalid function number
    15                              <1> errFnf      equ 2   ;File not found
    16                              <1> errPnf      equ 3   ;Path not found
    17                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    18                              <1> errAccDen   equ 5   ;Access denied (to resource)
    19                              <1> errBadHdl   equ 6   ;Invalid handle
    20                              <1> errMCBbad   equ 7   ;MCB's destroyed
    21                              <1> errNoMem    equ 8   ;Insufficient memory
    22                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    23                              <1> errBadEnv   equ 10  ;Invalid environment
    24                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    25                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    26                              <1> errInvDat   equ 13  ;Invalid data
    27                              <1> ;           equ 14  ;Reserved
    28                              <1> errBadDrv   equ 15  ;Invalid drive specified
    29                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    30                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    31                              <1> errNoFil    equ 18  ;No more files
    32                              <1> ;The following are Driver error codes + 19
    33                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    34                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    35                              <1> errUnkUnt   equ 20  ;Unknown Unit
    36                              <1> errDrvNR    equ 21  ;Drive not ready
    37                              <1> errUnkCmd   equ 22  ;Unknown Command
    38                              <1> errCRCerr   equ 23  ;Data (CRC) error
    39                              <1> errBadRLn   equ 24  ;Bad request structure length
    40                              <1> errSekErr   equ 25  ;Seek error
    41                              <1> errUnkMed   equ 26  ;Unknown media type
    42                              <1> errSecNF    equ 27  ;Sector not Found
    43                              <1> errNoPap    equ 28  ;Printer out of paper
    44                              <1> errWF       equ 29  ;Write fault
    45                              <1> errRF       equ 30  ;Read fault
    46                              <1> errGF       equ 31  ;General fault
    47                              <1> ;----------------------------------------------
    48                              <1> ;The following two go inbetween the Disk errors
    49                              <1> errShrVio   equ 32  ;Sharing violations
    50                              <1> errLokVio   equ 33  ;File Lock violation
    51                              <1> ;----------------------------------------------
    52                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    53                              <1> errNoFCB    equ 35  ;FCB unavailable
    54                              <1> errShrFul   equ 36  ;Sharing buffer full
    55                              <1> 
    56                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    57                              <1> 
    58                              <1> errFilExist equ 80  ;File already exists
    59                              <1> errDirExist equ 82  ;Directory already exists
    60                              <1> errFI44     equ 83  ;Fail on INT 44h
    61                              <1> errRedir    equ 84  ;Too many levels of redirection
    62                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    63                              <1> errBadPass  equ 86  ;Bad password
    64                              <1> errBadParam equ 87  ;Bad parameter passed to request
    65                              <1> errNetWrite equ 88  ;Network Write Fault
    66                              <1> ;-----------------------------------------------------------------------------
    67                              <1> ;Error Loci
    68                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    69                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    70                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    71                              <1> eLocChr     equ 4   ;Serial/Character Device error
    72                              <1> eLocMem     equ 5   ;Related to RAM
    73                              <1> ;-----------------------------------------------------------------------------
    74                              <1> ;Error Actions
    75                              <1> eActRet     equ 1   ;Retry
    76                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    77                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    78                              <1> eActAbt     equ 4   ;Abort with cleanup
    79                              <1> eActKil     equ 5   ;Abort without cleanup
    80                              <1> eActIgn     equ 6   ;Ignore error
    81                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    82                              <1> ;-----------------------------------------------------------------------------
    83                              <1> ;Error classes
    84                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    85                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    86                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    87                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    88                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    89                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    90                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    91                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    92                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    93                              <1> eClsLocked  equ 10  ;Resource Locked
    94                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    95                              <1> eClsClash   equ 12  ;Resource already exists!
    96                              <1> eClsUnk     equ 13  ;Unknown class
    11                                  Segment .data align=1 
    12                                  %include "./Source/Utils/COMMAND/Data/cmdData.asm"
    13                              <1> ;Static Data Area for COMMAND.COM    
    14                              <1> startLbl:
    15 00000000 E93A0D0000          <1>     jmp cmdLdr
    16 00000005 0000000000000000    <1> stackBottom dq 0    ;Pointer to the top of the stack as allocated by DOS
    17 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
    18 0000000F FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
    19 00000017 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
    20 0000001F 1400                <1> numHdls     dw 20   ;Get number of handles permitted, hardcoded in this version
    21 00000021 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    22 00000023 5C                  <1> pathSep     db "\"  ;Default path sep
    23 00000024 2F                  <1> switchChar  db "/"  ;Default switch char
    24 00000025 0000000000000000    <1> stringPtr   dq 0    ;Pointer to the the buffer to use for string processing
    25                              <1> ;Structs
    26 0000002D 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    26 00000036 000000000000000000- <1>
    26 0000003F 000000000000000000- <1>
    26 00000048 000000000000000000- <1>
    26 00000051 0000                <1>
    27 00000053 80                  <1> cmdLine     db 80h  ;This buffer is 80h long
    28 00000054 000000000000000000- <1>             db 7Fh dup (0)
    28 0000005D 000000000000000000- <1>
    28 00000066 000000000000000000- <1>
    28 0000006F 000000000000000000- <1>
    28 00000078 000000000000000000- <1>
    28 00000081 000000000000000000- <1>
    28 0000008A 000000000000000000- <1>
    28 00000093 000000000000000000- <1>
    28 0000009C 000000000000000000- <1>
    28 000000A5 000000000000000000- <1>
    28 000000AE 000000000000000000- <1>
    28 000000B7 000000000000000000- <1>
    28 000000C0 000000000000000000- <1>
    28 000000C9 000000000000000000- <1>
    28 000000D2 00                  <1>
    29 000000D3 000000000000000000- <1> fcb1        db fcb_size dup (0) ;Reserve space for two FCB's
    29 000000DC 000000000000000000- <1>
    29 000000E5 000000000000000000- <1>
    29 000000EE 000000000000000000- <1>
    29 000000F7 00                  <1>
    30 000000F8 000000000000000000- <1> fcb2        db fcb_size dup (0) 
    30 00000101 000000000000000000- <1>
    30 0000010A 000000000000000000- <1>
    30 00000113 000000000000000000- <1>
    30 0000011C 00                  <1>
    31                              <1> 
    32                              <1> ;strBuf is used to pass the full command line to installed commands
    33 0000011D 000000000000000000- <1> strBuf      db 80h dup (0)  ;This is the main buffer to build command strings
    33 00000126 000000000000000000- <1>
    33 0000012F 000000000000000000- <1>
    33 00000138 000000000000000000- <1>
    33 00000141 000000000000000000- <1>
    33 0000014A 000000000000000000- <1>
    33 00000153 000000000000000000- <1>
    33 0000015C 000000000000000000- <1>
    33 00000165 000000000000000000- <1>
    33 0000016E 000000000000000000- <1>
    33 00000177 000000000000000000- <1>
    33 00000180 000000000000000000- <1>
    33 00000189 000000000000000000- <1>
    33 00000192 000000000000000000- <1>
    33 0000019B 0000                <1>
    34 0000019D 00                  <1> cmdName     db 0    ;Number of valid chars in the cmdName
    35 0000019E 202020202020202020- <1>             db filename_size dup (" ")  ;Space padded, +1 for the .
    35 000001A7 2020                <1>
    36                              <1> functionTable:
    37                              <1> ;Use Pascal strings with each row of hte table having three columns:
    38                              <1> ; Col 1, BYTE, Length of command
    39                              <1> ; Col 2, String, String representing the user input
    40                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
    41 000001A9 03444952            <1>     db 3, "DIR"
    42 000001AD F508                <1>     dw dir - startLbl
    43                              <1> 
    44 000001AF 024344              <1>     db 2, "CD"
    45 000001B2 FA08                <1>     dw chdir - startLbl
    46                              <1> 
    47 000001B4 054348444952        <1>     db 5, "CHDIR"
    48 000001BA FA08                <1>     dw chdir - startLbl
    49                              <1> 
    50 000001BC 024D44              <1>     db 2, "MD"
    51 000001BF FA08                <1>     dw mkdir - startLbl
    52                              <1> 
    53 000001C1 054D4B444952        <1>     db 5, "MKDIR"
    54 000001C7 FA08                <1>     dw mkdir - startLbl
    55                              <1> 
    56 000001C9 025244              <1>     db 2, "RD"
    57 000001CC FA08                <1>     dw rmdir - startLbl
    58                              <1> 
    59 000001CE 05524D444952        <1>     db 5, "RMDIR"
    60 000001D4 FA08                <1>     dw rmdir - startLbl
    61                              <1> 
    62 000001D6 0344454C            <1>     db 3, "DEL"
    63 000001DA FA08                <1>     dw erase - startLbl
    64                              <1> 
    65 000001DC 054552415345        <1>     db 5, "ERASE"
    66 000001E2 FA08                <1>     dw erase - startLbl
    67                              <1> 
    68 000001E4 0444415445          <1>     db 4, "DATE"
    69 000001E9 FA08                <1>     dw date - startLbl
    70                              <1> 
    71 000001EB 0454494D45          <1>     db 4, "TIME"
    72 000001F0 FA08                <1>     dw time - startLbl
    73                              <1> 
    74 000001F2 04434F5059          <1>     db 4, "COPY"
    75 000001F7 FA08                <1>     dw copy - startLbl
    76                              <1> 
    77 000001F9 0443545459          <1>     db 4, "CTTY"
    78 000001FE FA08                <1>     dw ctty - startLbl
    79                              <1> 
    80 00000200 03434C53            <1>     db 3, "CLS"
    81 00000204 FA08                <1>     dw cls - startLbl
    82                              <1> 
    83 00000206 05425245414B        <1>     db 5, "BREAK"
    84 0000020C 6C09                <1>     dw break - startLbl
    85                              <1> 
    86 0000020E 0752454E414D45      <1>     db 7, "RENAME"
    87 00000215 6C09                <1>     dw rename - startLbl
    88                              <1> 
    89 00000217 FF                  <1>     db -1   ;End of table
    90                              <1> 
    91                              <1> 
    92                              <1> ;COMMAND.COM Messages and strings
    93 00000218 0D0A24              <1> crlf    db  CR,LF,"$"
    94 0000021B 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
    94 00000224 696C65206D69737369- <1>
    94 0000022D 6E670D0A24          <1>
    95 00000232 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
    95 0000023B 6469736B2077697468- <1>
    95 00000244 206261746368206669- <1>
    95 0000024D 6C65                <1>
    96 0000024F 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
    96 00000258 737320616E79206B65- <1>
    96 00000261 79207768656E207265- <1>
    96 0000026A 6164790D0A24        <1>
    97 00000270 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
    97 00000279 6E64206F722066696C- <1>
    97 00000282 65206E616D650D0A24  <1>
    98 0000028B 4475706C6963617465- <1> dupName db  "Duplicate file name or "
    98 00000294 2066696C65206E616D- <1>
    98 0000029D 65206F7220          <1>
    99 000002A2 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    99 000002AB 666F756E640D0A24    <1>
   100 000002B3 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
   100 000002BC 656E74206469736B20- <1>
   100 000002C5 73706163650D0A24    <1>
   101 000002CD 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
   101 000002D6 7669726F6E6D656E74- <1>
   101 000002DF 2073706163650D0A24  <1>
   102 000002E8 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
   102 000002F1 74696F6E206572726F- <1>
   102 000002FA 720D0A24            <1>
   103 000002FE 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
   103 00000307 6F7420626520636F70- <1>
   103 00000310 696564206F6E746F20- <1>
   103 00000319 697473656C660D0A24  <1>
   104 00000322 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
   104 0000032B 662064657374696E61- <1>
   104 00000334 74696F6E206C6F7374- <1>
   104 0000033D 206265666F72652063- <1>
   104 00000346 6F70790D0A24        <1>
   105                              <1> ;Copy end message. First write # files copied then this message 
   106 0000034C 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
   106 00000355 636F706965640D0A24  <1>
   107                              <1> ;Dir end1 msg. First write # files in dir then this
   108 0000035E 2046696C6528732920- <1> dirOk   db  " File(s) ", "$"
   108 00000367 24                  <1>
   109                              <1> ;Dir end2 msg. First write # bytes free then this message
   110 00000368 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
   110 00000371 65650D0A24          <1>
   111 00000376 203C4449523E202020- <1> dirLbl  db  " <DIR>   $"
   111 0000037F 24                  <1>
   112                              <1> 
   113 00000380 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
   113 00000389 726976652073706563- <1>
   113 00000392 696669636174696F6E- <1>
   113 0000039B 0D0A24              <1>
   114 0000039E 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
   114 000003A7 6B6579207768656E20- <1>
   114 000003B0 7265616479202E202E- <1>
   114 000003B9 202E2024            <1>
   115 000003BD 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
   115 000003C6 6172616D657465720D- <1>
   115 000003CF 0A24                <1>
   116                              <1> 
   117 000003D1 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
   117 000003DA 576564546875467269- <1>
   117 000003E3 536174              <1>
   118 000003E6 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
   118 000003EF 206461746524        <1>
   119 000003F5 43757272656E742064- <1> curDate db  "Current date is $"
   119 000003FE 6174652069732024    <1>
   120 00000406 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date: $"
   120 0000040F 657720646174653A20- <1>
   120 00000418 24                  <1>
   121 00000419 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
   121 00000422 2074696D6524        <1>
   122 00000428 43757272656E742074- <1> curTime db  "Current time is $"
   122 00000431 696D652069732024    <1>
   123 00000439 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
   123 00000442 65772074696D653A20- <1>
   123 0000044B 24                  <1>
   124                              <1> 
   125 0000044C 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
   125 00000455 7572652028592F4E29- <1>
   125 0000045E 3F2024              <1>
   126                              <1> 
   127 00000461 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
   127 0000046A 56657273696F6E2024  <1>
   128                              <1> dosVerL equ $ - dosVer
   129                              <1> 
   130 00000473 20566F6C756D652069- <1> volMes  db " Volume in drive $"
   130 0000047C 6E2064726976652024  <1>
   131 00000485 2069732024          <1> volOk   db " is $"
   132 0000048A 20686173206E6F206C- <1> volNo   db " has no label$"
   132 00000493 6162656C24          <1>
   133                              <1> 
   134 00000498 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
   134 000004A1 69726563746F72790D- <1>
   134 000004AA 0A24                <1>
   135 000004AC 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
   135 000004B5 206372656174652064- <1>
   135 000004BE 69726563746F72790D- <1>
   135 000004C7 0A24                <1>
   136 000004C9 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
   136 000004D2 6174682C206E6F7420- <1>
   136 000004DB 6469726563746F7279- <1>
   136 000004E4 2C0D0A              <1>
   137 000004E7 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
   137 000004F0 6F7279206E6F742065- <1>
   137 000004F9 6D7074790D0A24      <1>
   138 00000500 204469726563746F72- <1> dirMain db " Directory of $"
   138 00000509 79206F662024        <1>
   139 0000050F 4E6F20506174682024  <1> noPath  db "No Path $"
   140 00000518 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
   140 00000521 7269766520696E2073- <1>
   140 0000052A 656172636820706174- <1>
   140 00000533 680D0A24            <1>
   141 00000537 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
   141 00000540 65766963650D0A24    <1>
   142 00000548 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
   142 00000551 20666F756E640D0A24  <1>
   143 0000055A 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
   143 00000563 726F720D0A24        <1>
   144 00000569 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
   144 00000572 6F74206265206E6573- <1>
   144 0000057B 7465640D0A24        <1>
   145 00000581 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
   145 0000058A 6174652066696C6520- <1>
   145 00000593 6572726F7220647572- <1>
   145 0000059C 696E6720706970650D- <1>
   145 000005A5 0A24                <1>
   146 000005A7 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
   146 000005B0 2062696E6172792072- <1>
   146 000005B9 656164732066726F6D- <1>
   146 000005C2 206120646576696365- <1>
   146 000005CB 0D0A24              <1>
   147 000005CE 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
   148 000005D4 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
   149 000005D9 425245414B20697320- <1> breakIs db "BREAK is $"
   149 000005E2 24                  <1>
   150 000005E3 564552494659206973- <1> verifyIs    db "VERIFY is $"
   150 000005EC 2024                <1>
   151 000005EE 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
   152 000005F7 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
   152 00000600 617468206F72206669- <1>
   152 00000609 6C65206E616D650D0A- <1>
   152 00000612 24                  <1>
   153 00000613 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
   153 0000061C 756D626572206F6620- <1>
   153 00000625 706172616D65746572- <1>
   153 0000062E 730D0A24            <1>
   154 00000632 4572726F7220777269- <1> devWriteErr db "Error writing to device"
   154 0000063B 74696E6720746F2064- <1>
   154 00000644 6576696365          <1>
   155 00000649 08200800            <1> backSpace   db BSP," ",BSP,NUL
   156                              <1> 
   157 0000064D 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
   158                              <1> 
   159 00000651 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
   159 0000065A 696679204F4E206F72- <1>
   159 00000663 204F46460D0A24      <1>
   160 0000066A 504154483D          <1> pathEVar db "PATH="
   161 0000066F 50524F4D50543D      <1> promptEVar  db "PROMPT="
    13                                  %include "./Source/Utils/COMMAND/Source/cmdMain.asm"
    14                              <1> commandStart:
    15                              <1>     ;Resize Allocation, jump here with endpointer in rbx
    16                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
    17                              <1>     ; that the jump to safety won't be gobbled up when multitasking
    18 00000676 49F7D8              <1>     neg r8  ;Convert r8 to -r8
    19 00000679 4A8D5C0311          <1>     lea rbx, qword [rbx + r8 + 11h]    ;Get # of bytes for COMMAND.COM
    20 0000067E C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
    21 00000681 B44A                <1>     mov ah, 4Ah ;Realloc
    22 00000683 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    23 00000686 CD41                <1>     int 41h
    24 00000688 EB5A                <1>     jmp short commandMain
    25                              <1> applicationReturn:  ;Return point from a task
    26 0000068A B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    27 0000068F CD41                <1>     int 41h
    28 00000691 66890575F9FFFF      <1>     mov word [returnCode], ax
    29                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    30 00000698 488D15E2030000      <1>     lea rdx, critErrorHandler
    31 0000069F 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    32 000006A3 B844250000          <1>     mov eax, 2544h
    33 000006A8 CD41                <1>     int 41h
    34 000006AA 488D1560060000      <1>     lea rdx, int43h
    35 000006B1 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    36 000006B5 B843250000          <1>     mov eax, 2543h
    37 000006BA CD41                <1>     int 41h
    38 000006BC 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    39 000006C3 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    40 000006C7 B842250000          <1>     mov eax, 2542h
    41 000006CC CD41                <1>     int 41h
    42                              <1> ;Close all handles from 5->MAX
    43 000006CE 0FB70D4AF9FFFF      <1>     movzx ecx, word [numHdls]
    44 000006D5 BB05000000          <1>     mov ebx, 5
    45                              <1> .handleClose:
    46 000006DA B43E                <1>     mov ah, 3Eh ;File close
    47 000006DC CD41                <1>     int 41h
    48 000006DE FFC3                <1>     inc ebx ;Goto next file
    49 000006E0 39CB                <1>     cmp ebx, ecx
    50 000006E2 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    51                              <1> commandMain:
    52                              <1> ;Setup Commandline
    53 000006E4 FA                  <1>     cli
    54 000006E5 488B2519F9FFFF      <1>     mov rsp, qword [stackBottom]    ;Reset internal stack pointer pos
    55 000006EC FB                  <1>     sti
    56 000006ED FC                  <1>     cld ;Ensure stringops are done the right way
    57                              <1> .inputMain:
    58 000006EE E879020000          <1>     call printCRLF
    59 000006F3 E821000000          <1>     call printPrompt
    60                              <1> 
    61 000006F8 488D1554F9FFFF      <1>     lea rdx, cmdLine
    62 000006FF B80A0C0000          <1>     mov eax, 0C0Ah  ;Do Buffered input
    63 00000704 CD41                <1>     int 41h
    64 00000706 E861020000          <1>     call printCRLF  ;Note we have accepted input
    65                              <1> 
    66 0000070B 488D3542F9FFFF      <1>     lea rsi, qword [cmdLine + 1]    ;Point at count byte
    67 00000712 E82A000000          <1>     call doCommandLine
    68 00000717 EBD5                <1>     jmp short .inputMain
    69                              <1> 
    70                              <1> printPrompt:
    71 00000719 66813DFFF8FFFFFFFF  <1>     cmp word [promptPtr], -1
    72 00000722 750B                <1>     jne .validPrompt
    73                              <1>     ;Here we print the default prompt
    74 00000724 E8AD020000          <1>     call putCWDInPrompt
    75 00000729 E893020000          <1>     call putGTinPrompt
    76                              <1>     return
    19                              <2> %%_ret:
    20 0000072E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    77                              <1> .validPrompt:
    78                              <1>     return
    19                              <2> %%_ret:
    20 0000072F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    79                              <1> 
    80                              <1> 
    81                              <1> int4Eh:   ;Interrupt interface for parsing and executing command lines
    82 00000730 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
    83 00000732 CD41                <1>     int 41h
    84 00000734 52                  <1>     push rdx
    85 00000735 E807000000          <1>     call doCommandLine
    86 0000073A 5B                  <1>     pop rbx ;Get Old current PSP in rbx
    87 0000073B B450                <1>     mov ah, 50h ;Set Current PSP
    88 0000073D CD41                <1>     int 41h
    89 0000073F 48CF                <1>     iretq
    90                              <1> doCommandLine:    ;And this is how we enter it normally
    91                              <1> ;rsi must be pointing to the count byte (byte 1) of the 41h/0Ah string
    92                              <1> ; and the string must be CR (0Dh) terminated (not accounted for in the count)
    93 00000741 488935DDF8FFFF      <1>     mov qword [stringPtr], rsi  ;Store to recover later
    94 00000748 803E00              <1>     cmp byte [rsi], 0   ;If the string has length 0, empty string
    95                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000074B 74(2F)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
    96 0000074D 31DB                <1>     xor ebx, ebx    ;Use bx to count how many arguments are found
    97 0000074F 48FFC6              <1>     inc rsi ;Goto first char in string
    98 00000752 488D3D7AF9FFFF      <1>     lea rdi, fcb1   ;Parse into fcb
    99 00000759 B801290000          <1>     mov eax, 2901h ;Parse FCB and skip leading spaces
   100 0000075E CD41                <1>     int 41h
   101 00000760 3C01                <1>     cmp al, 1   ;Command cannot have wildcards in the name
   102 00000762 7428                <1>     je .dfltErrExit
   103 00000764 803E0D              <1>     cmp byte [rsi], CR  ;Are we at a carriage return, i.e. end of string?
   104 00000767 742F                <1>     je .endOneField     ;After one iteration, if we reached CR, now process
   105                              <1>     ;If the terminator is pathsep, build a pathstring
   106 00000769 8A05B4F8FFFF        <1>     mov al, byte [pathSep]
   107 0000076F 3806                <1>     cmp byte [rsi], al
   108 00000771 754B                <1>     jne .commandCase
   109                              <1>     ;Path resolving here
   110                              <1>     ;Go to the end of the path to see if we have a .COM, .EXE or .BAT
   111                              <1> .resolve:
   112 00000773 48FFC6              <1>     inc rsi ;Go past the terminator
   113 00000776 B801290000          <1>     mov eax, 2901h ;Parse FCB and skip leading spaces
   114 0000077B CD41                <1>     int 41h
   115 0000077D 8A05A0F8FFFF        <1>     mov al, byte [pathSep]
   116 00000783 3806                <1>     cmp byte [rsi], al  ;Keep going if pathsep
   117 00000785 74EC                <1>     je .resolve
   118                              <1>     ;We stop looping if we are at the end of the path.
   119 00000787 E90D010000          <1>     jmp .external
   120                              <1> .dfltErrExit:
   121 0000078C 488D15DDFAFFFF      <1>     lea rdx, badCmd
   122 00000793 B409                <1>     mov ah, 09h
   123 00000795 CD41                <1>     int 41h
   124                              <1>     return
    19                              <2> %%_ret:
    20 00000797 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   125                              <1> .endOneField:
   126                              <1> ;rsi points to the CR
   127 00000798 807F0120            <1>     cmp byte [rdi + fcb.filename], " "  ;Filename cannot begin with space
   128 0000079C 7520                <1>     jne .commandCase
   129                              <1>     ;Here we have an empty filename, but a drive letter may have been specified
   130 0000079E 3CFF                <1>     cmp al, -1
   131 000007A0 7410                <1>     je .badDrive
   132 000007A2 8A17                <1>     mov dl, byte [rdi + fcb.driveNum]  ;1 based drive letter
   133 000007A4 FECA                <1>     dec dl  ;Convert to 0 based drive letter
   134 000007A6 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   135 000007A8 CD41                <1>     int 41h 
   136 000007AA B419                <1>     mov ah, 19h
   137 000007AC CD41                <1>     int 41h     ;Get current drive
   138 000007AE 38D0                <1>     cmp al, dl  ;If the drive was set, all is well
   139                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000007B0 74(97)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   140                              <1> .badDrive:
   141 000007B2 488D15C7FBFFFF      <1>     lea rdx, badDrv
   142 000007B9 B409                <1>     mov ah, 09h
   143 000007BB CD41                <1>     int 41h
   144                              <1>     return
    19                              <2> %%_ret:
    20 000007BD C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   145                              <1> .commandCase:
   146                              <1> ;Here we check if the word was an installed or internal command before 
   147                              <1> ; attempting to launching it as an external command
   148 000007BE 53                  <1>     push rbx
   149 000007BF 56                  <1>     push rsi    ;Save rsi's current position in the command tail on stack
   150 000007C0 57                  <1>     push rdi
   151 000007C1 488D3D55F9FFFF      <1>     lea rdi, strBuf
   152 000007C8 C60780              <1>     mov byte [rdi], 80h ;Length of the buffer
   153 000007CB 488B3553F8FFFF      <1>     mov rsi, qword [stringPtr]  ;Get the string buffer, starting at char 1
   154 000007D2 0FB60E              <1>     movzx ecx, byte [rsi]   ;Get number of chars in the string
   155 000007D5 FFC1                <1>     inc ecx ;Include the terminating CR
   156 000007D7 F3A4                <1>     rep movsb   ;Move command line to the internal buffer
   157                              <1>     ;Now move the name from the FCB to the buffer
   158 000007D9 488D35F4F8FFFF      <1>     lea rsi, qword [fcb1 + fcb.filename]
   159 000007E0 31C9                <1>     xor ecx, ecx
   160 000007E2 488D1DB4F9FFFF      <1>     lea rbx, cmdName    ;Point to the count byte
   161                              <1> .copyNameToBuffer:
   162 000007E9 48FFC3              <1>     inc rbx
   163 000007EC AC                  <1>     lodsb
   164 000007ED 3C20                <1>     cmp al ," "
   165 000007EF 740C                <1>     je .endOfCopy
   166 000007F1 8803                <1>     mov byte [rbx], al
   167 000007F3 FFC1                <1>     inc ecx
   168 000007F5 81F90B000000        <1>     cmp ecx, 11
   169 000007FB 72EC                <1>     jb .copyNameToBuffer
   170                              <1> .endOfCopy:
   171 000007FD 488D1D99F9FFFF      <1>     lea rbx, cmdName
   172 00000804 880B                <1>     mov byte [rbx], cl  ;Store the byte count here
   173 00000806 488D3510F9FFFF      <1>     lea rsi, strBuf ;Point to this built buffer
   174 0000080D B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   175 00000812 BAFFFF0000          <1>     mov edx, 0FFFFh
   176 00000817 B5FF                <1>     mov ch, -1
   177 00000819 CD4F                <1>     int 4Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   178                              <1>             ;        al = 0  if the command should be executed as usual
   179 0000081B B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   180 00000820 BAFFFF0000          <1>     mov edx, 0FFFFh
   181 00000825 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   182 00000827 CD4F                <1>     int 4Fh
   183 00000829 5F                  <1>     pop rdi
   184 0000082A 5E                  <1>     pop rsi ;Get back rsi's position in command tail (after command name)
   185 0000082B 5B                  <1>     pop rbx
   186 0000082C 84C0                <1>     test al, al
   187 0000082E 741D                <1>     jz .executeInternal
   188                              <1>     ;Here we execute externally and return to the prompt
   189                              <1>     ; as if it was an internal execution
   190 00000830 488D35E6F8FFFF      <1>     lea rsi, strBuf ;Point to this built buffer
   191 00000837 488D1D5FF9FFFF      <1>     lea rbx, cmdName
   192 0000083E B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   193 00000843 BAFFFF0000          <1>     mov edx, 0FFFFh
   194 00000848 B5FF                <1>     mov ch, -1
   195 0000084A CD4F                <1>     int 4Fh 
   196                              <1>     return
    19                              <2> %%_ret:
    20 0000084C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   197                              <1> .executeInternal:
   198                              <1> ;Now we compare the name in the cmdName field to our commmand list
   199                              <1> ;rsi points after the command terminator in the command tail
   200 0000084D 488D1D55F9FFFF      <1>     lea rbx, functionTable
   201                              <1> .nextEntry:
   202 00000854 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   203 00000857 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   204 0000085A 743D                <1>     je .external      ;If so, check externally now
   205 0000085C 380D3BF9FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   206 00000862 7529                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   207                              <1>     ;Here they have the same length so lets see if the name is the same
   208 00000864 56                  <1>     push rsi
   209                              <1>     ;ecx has the length to compare
   210 00000865 51                  <1>     push rcx
   211 00000866 488D7301            <1>     lea rsi, qword [rbx + 1]
   212 0000086A 488D3D2DF9FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   213 00000871 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   214 00000873 59                  <1>     pop rcx
   215 00000874 5E                  <1>     pop rsi
   216 00000875 7516                <1>     jne .gotoNextEntry
   217                              <1>     ;Here it was found both strings are equal
   218 00000877 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   219 0000087C 480FB71F            <1>     movzx rbx, word [rdi]
   220 00000880 488D3D79F7FFFF      <1>     lea rdi, startLbl
   221 00000887 4801FB              <1>     add rbx, rdi
   222 0000088A FFD3                <1>     call rbx    ;Call this function...
   223                              <1>     return  ;... and return
    19                              <2> %%_ret:
    20 0000088C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   224                              <1> .gotoNextEntry:
   225 0000088D 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   226 00000894 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   227 00000897 EBBB                <1>     jmp short .nextEntry
   228                              <1> 
   229                              <1> .external:
   230                              <1> ;Here we must search the CWD or all path componants before failing
   231                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
   232 00000899 E81B000000          <1>     call checkExtensionExec ;ZF=ZE => Executable
   233 0000089E 0F85E8FEFFFF        <1>     jnz .dfltErrExit
   234                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
   235 000008A4 0F82E2FEFFFF        <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
   236                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
   237                              <1>     ;So it is a com or exe that we are searching for
   238 000008AA E9DDFEFFFF          <1>     jmp .dfltErrExit
   239                              <1> 
   240                              <1> 
   241                              <1> skipSpaces:
   242                              <1> ;Input: rsi must point to the start of the data string
   243                              <1> ;Output: rsi points to the first non-space char
   244 000008AF 803E20              <1>     cmp byte [rsi], " "
   245                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000008B2 75(8C)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   246 000008B4 48FFC6              <1>     inc rsi
   247 000008B7 EBF6                <1>     jmp short skipSpaces
   248                              <1> 
   249                              <1> checkExtensionExec:
   250                              <1> ;Checks the extension field of fcb1 is .COM, .EXE, .BAT in that order
   251                              <1> ;Returns: ZF=ZE if executable. ZF=NZ if not executable.
   252                              <1> ;         If ZF=ZE and CF=CY => Batch file
   253 000008B9 803D1CF8FFFF43      <1>     cmp byte [fcb1 + fcb.fileext], "C"
   254 000008C0 750A                <1>     jne .notCOM
   255 000008C2 66813D12F8FFFF4F4D  <1>     cmp word [fcb1 + fcb.fileext + 1], "OM"
   256                              <1>     return
    19                              <2> %%_ret:
    20 000008CB C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   257                              <1> .notCOM:
   258 000008CC 803D09F8FFFF45      <1>     cmp byte [fcb1 + fcb.fileext], "E"
   259 000008D3 750A                <1>     jne .batFile
   260 000008D5 66813DFFF7FFFF5845  <1>     cmp word [fcb1 + fcb.fileext + 1], "XE"
   261                              <1>     return
    19                              <2> %%_ret:
    20 000008DE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   262                              <1> .batFile:
   263 000008DF 803DF6F7FFFF42      <1>     cmp byte [fcb1 + fcb.fileext], "B"
   264                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000008E6 75(DE)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   265 000008E8 66813DECF7FFFF4154  <1>     cmp word [fcb1 + fcb.fileext + 1], "AT"
   266                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000008F1 75(DE)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   267 000008F3 F9                  <1>     stc
   268                              <1>     return
    19                              <2> %%_ret:
    20 000008F4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    14                                  %include "./Source/Utils/COMMAND/Source/cmdFunc.asm"
    15                              <1> dir:
    16                              <1>     ;If a particular path is given, we search for it.
    17                              <1>     ;Else, if rsi is pointing at CR, . or " " we search in CWD for *.*
    18 000008F5 803E0D              <1>     cmp byte [rsi], CR
    19 000008F8 7400                <1>     je .searchCWD
    20                              <1> 
    21                              <1> .searchCWD:
    22                              <1> chdir:
    23                              <1> mkdir:
    24                              <1> rmdir:
    25                              <1> erase:
    26                              <1> date:
    27                              <1> time:
    28                              <1> copy:
    29                              <1> ctty:
    30                              <1> cls:  
    31 000008FA B800440000          <1>     mov eax, 4400h  ;Get device info
    32 000008FF BB01000000          <1>     mov ebx, 1      ;for handle 1
    33 00000904 CD41                <1>     int 41h         ;in dx
    34 00000906 F7C280000000        <1>     test edx, devCharDev
    35 0000090C 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
    36 0000090E F7C210000000        <1>     test edx, charDevFastOut
    37 00000914 743E                <1>     jz .doAnsi
    38                              <1>     ;Test if Int 49h uses Int 30h
    39                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
    40                              <1>     ;Int 49h MUST be terminated with a IRETQ, within 1024 bytes
    41 00000916 B849350000          <1>     mov eax, 3549h  ;Get the vector for interrupt 49h
    42 0000091B CD41                <1>     int 41h
    43                              <1> .biosCheck:
    44 0000091D 66813BCD30          <1>     cmp word [rbx], 30CDh
    45 00000922 740C                <1>     je .biosConfirmed
    46 00000924 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
    47 00000929 7429                <1>     je .doAnsi
    48 0000092B 48FFC3              <1>     inc rbx
    49 0000092E EBED                <1>     jmp short .biosCheck
    50                              <1> .biosConfirmed:
    51                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
    52 00000930 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
    53 00000932 31DB                <1>     xor ebx, ebx
    54 00000934 CD30                <1>     int 30h
    55 00000936 B40F                <1>     mov ah, 0Fh ;Get screen mode
    56 00000938 CD30                <1>     int 30h
    57 0000093A 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
    58 0000093D FECA                <1>     dec dl
    59 0000093F B619                <1>     mov dh, 25  ;Number of rows is standard
    60 00000941 31C0                <1>     xor eax, eax
    61 00000943 89C1                <1>     mov ecx, eax
    62 00000945 B707                <1>     mov bh, 7   ;Screen attributes
    63 00000947 B406                <1>     mov ah, 6   ;Scroll
    64 00000949 CD30                <1>     int 30h
    65 0000094B 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
    66 0000094D B700                <1>     mov bh, 0   ;Page 0
    67 0000094F B402                <1>     mov ah, 2
    68 00000951 CD30                <1>     int 30h
    69                              <1>     return
    19                              <2> %%_ret:
    20 00000953 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    70                              <1> .doAnsi:
    71                              <1> ;If an ANSI driver is not installed, this will simply insert blank lines
    72                              <1> ;4 chars in the ansi routine
    73                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
    74                              <1> ; understand ANSI codes
    75 00000954 488D35F2FCFFFF      <1>     lea rsi, ansiCls
    76 0000095B B904000000          <1>     mov ecx, 4
    77 00000960 B406                <1>     mov ah, 06h ;Raw char output
    78                              <1> .ansiLp:
    79 00000962 AC                  <1>     lodsb   ;Get the char in 
    80 00000963 88C2                <1>     mov dl, al
    81 00000965 CD41                <1>     int 41h
    82 00000967 FFC9                <1>     dec ecx
    83 00000969 75F7                <1>     jnz .ansiLp
    84                              <1>     return
    19                              <2> %%_ret:
    20 0000096B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    85                              <1> 
    86                              <1> break:
    87                              <1> rename:
    88                              <1> launchChild:
    89                              <1> ;We run EXEC on this and the child task will return via applicationReturn
    15                                  %include "./Source/Utils/COMMAND/Source/cmdUtils.asm"
    16                              <1> ;Misc functions and subroutines for command.com
    17                              <1> 
    18                              <1> printCRLF:
    19 0000096C 488D15A5F8FFFF      <1>     lea rdx, crlf
    20 00000973 BB02000000          <1>     mov ebx, 2
    21 00000978 B440                <1>     mov ah, 40h ;Print a new line
    22 0000097A B902000000          <1>     mov ecx, 2  ;Two chars to write
    23 0000097F CD41                <1>     int 41h
    24                              <1>     return
    19                              <2> %%_ret:
    20 00000981 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    25                              <1> 
    26                              <1> putDateInPrompt:
    27                              <1> putTimeInPrompt:
    28                              <1>     return
    19                              <2> %%_ret:
    20 00000982 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    29                              <1> 
    30                              <1> putVersionInPrompt:
    31 00000983 488D15D7FAFFFF      <1>     lea rdx, dosVer
    32 0000098A B409                <1>     mov ah, 09h ;Print String
    33 0000098C CD41                <1>     int 41h
    34 0000098E B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
    35 00000990 CD41                <1>     int 41h
    36 00000992 50                  <1>     push rax    ;Save minor version
    37 00000993 E89C000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
    38 00000998 E8B4000000          <1>     call printPackedBCD ;Print al
    39 0000099D B22E                <1>     mov dl, "."
    40 0000099F B402                <1>     mov ah, 02h
    41 000009A1 CD41                <1>     int 41h
    42 000009A3 58                  <1>     pop rax
    43 000009A4 88E0                <1>     mov al, ah  ;Get the minor version low
    44 000009A6 E889000000          <1>     call hexToBCD
    45 000009AB E8A1000000          <1>     call printPackedBCD
    46                              <1>     return
    19                              <2> %%_ret:
    20 000009B0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    47                              <1> putEscInPrompt:
    48 000009B1 B21B                <1>     mov dl, ESC
    49 000009B3 EB1C                <1>     jmp short outChar
    50                              <1> 
    51                              <1> putMoneyInPrompt:
    52 000009B5 B224                <1>     mov dl, "$"
    53 000009B7 EB18                <1>     jmp short outChar
    54                              <1> 
    55                              <1> putEquInPrompt:
    56 000009B9 B23D                <1>     mov dl, "="
    57 000009BB EB14                <1>     jmp short outChar
    58                              <1> 
    59                              <1> putPipeInPrompt:
    60 000009BD B27C                <1>     mov dl, "|"
    61 000009BF EB10                <1>     jmp short outChar
    62                              <1> 
    63                              <1> putGTinPrompt:
    64 000009C1 B23E                <1>     mov dl, ">"
    65 000009C3 EB0C                <1>     jmp short outChar
    66                              <1> 
    67                              <1> putLTinPrompt:
    68 000009C5 B23C                <1>     mov dl, "<"
    69 000009C7 EB08                <1>     jmp short outChar
    70                              <1> 
    71                              <1> putDriveInPrompt:
    72 000009C9 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
    73 000009CB CD41                <1>     int 41h
    74 000009CD 0441                <1>     add al, "A" ;Convert to letter
    75 000009CF 88C2                <1>     mov dl, al
    76                              <1> outChar:
    77 000009D1 B402                <1>     mov ah, 02h ;Echo to STDOUT
    78 000009D3 CD41                <1>     int 41h
    79                              <1>     return
    19                              <2> %%_ret:
    20 000009D5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    80                              <1> putCWDInPrompt:
    81 000009D6 488D3D40F7FFFF      <1>     lea rdi, strBuf
    82 000009DD B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
    83 000009DF CD41                <1>     int 41h
    84 000009E1 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
    85 000009E3 FEC2                <1>     inc dl
    86 000009E5 0441                <1>     add al, "A" ;Convert to letter
    87 000009E7 B43A                <1>     mov ah, ":"
    88 000009E9 66AB                <1>     stosw   ;Store X:, rdi+=2
    89 000009EB 8A0532F6FFFF        <1>     mov al, byte [pathSep]
    90 000009F1 AA                  <1>     stosb   ;Store pathSep, inc rdi
    91 000009F2 B447                <1>     mov ah, 47h ;Get Current Working Directory
    92 000009F4 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
    93 000009F7 CD41                <1>     int 41h
    94 000009F9 E874000000          <1>     call strlen
    95 000009FE 81C102000000        <1>     add ecx, 2 ;Add two for the X:
    96                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
    97 00000A04 B440                <1>     mov ah, 40h ;Write to handle
    98 00000A06 BB01000000          <1>     mov ebx, 1  ;STDOUT
    99 00000A0B 488D150BF7FFFF      <1>     lea rdx, strBuf
   100 00000A12 CD41                <1>     int 41h
   101                              <1>     return
    19                              <2> %%_ret:
    20 00000A14 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   102                              <1> 
   103                              <1> BCDtoHex:
   104                              <1> ;Converts a BCD value to a Hex byte
   105                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   106 00000A15 51                  <1>     push rcx
   107 00000A16 0FB6C0              <1>     movzx eax, al   ;Zero extend
   108 00000A19 89C1                <1>     mov ecx, eax    ;Save al in ecx
   109 00000A1B 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   110 00000A20 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   111 00000A26 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   112                              <1> .bth:
   113 00000A29 050A000000          <1>     add eax, 10
   114 00000A2E FFC9                <1>     dec ecx
   115 00000A30 75F7                <1>     jnz .bth
   116 00000A32 59                  <1>     pop rcx
   117 00000A33 C3                  <1>     ret
   118                              <1> 
   119                              <1> hexToBCD:
   120                              <1> ;Converts a Hex byte into two BCD digits
   121                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   122 00000A34 51                  <1>     push rcx
   123 00000A35 0FB6C0              <1>     movzx eax, al   ;Zero extend
   124 00000A38 31C9                <1>     xor ecx, ecx
   125                              <1> .htb0:
   126 00000A3A 3D0A000000          <1>     cmp eax, 10
   127 00000A3F 7209                <1>     jb .htb1
   128 00000A41 2D0A000000          <1>     sub eax, 10
   129 00000A46 FFC1                <1>     inc ecx
   130 00000A48 EBF0                <1>     jmp short .htb0
   131                              <1> .htb1:
   132 00000A4A C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   133 00000A4D 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   134 00000A4F 59                  <1>     pop rcx
   135 00000A50 C3                  <1>     ret
   136                              <1> printPackedBCD:
   137                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   138                              <1> ; then prints al[3:0]
   139                              <1> ;Preserves all registers
   140 00000A51 50                  <1>     push rax
   141 00000A52 52                  <1>     push rdx
   142 00000A53 88C4                <1>     mov ah, al
   143 00000A55 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   144 00000A57 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   145 00000A5A 740B                <1>     jz .skipUpperNybble
   146 00000A5C 50                  <1>     push rax
   147 00000A5D 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   148 00000A60 88E2                <1>     mov dl, ah
   149 00000A62 B402                <1>     mov ah, 02h ;Print DL
   150 00000A64 CD41                <1>     int 41h
   151 00000A66 58                  <1>     pop rax
   152                              <1> .skipUpperNybble:
   153 00000A67 0430                <1>     add al, "0"
   154 00000A69 88C2                <1>     mov dl, al
   155 00000A6B B402                <1>     mov ah, 02h ;Print DL
   156 00000A6D CD41                <1>     int 41h
   157 00000A6F 5A                  <1>     pop rdx
   158 00000A70 58                  <1>     pop rax
   159                              <1>     return
    19                              <2> %%_ret:
    20 00000A71 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   160                              <1> 
   161                              <1> strlen:
   162                              <1> ;Gets the length of a ASCIIZ string
   163                              <1> ;Input: rdi = Source buffer
   164                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   165 00000A72 50                  <1>     push rax
   166 00000A73 57                  <1>     push rdi
   167 00000A74 30C0                <1>     xor al, al
   168 00000A76 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   169 00000A78 FFC9                <1>     dec ecx ;rcx = -1
   170 00000A7A F2AE                <1>     repne scasb
   171 00000A7C F7D1                <1>     not ecx
   172 00000A7E 5F                  <1>     pop rdi
   173 00000A7F 58                  <1>     pop rax
   174                              <1>     return
    19                              <2> %%_ret:
    20 00000A80 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    16                                  %include "./Source/Utils/COMMAND/Source/int44h.asm"
    17                              <1> critErrorHandler:   ;Int 44h
    18                              <1> ;User Stack in usage here, must be swapped to before this is called
    19                              <1> ;Entered with:  
    20                              <1> ;               AH = Critical Error Bitfield
    21                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    22                              <1> ;               Bit 6 - Reserved
    23                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    24                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    25                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    26                              <1> ;               Bits [2-1] = Affected Disk Error
    27                              <1> ;                     0 0   DOS area
    28                              <1> ;                     0 1   FAT area
    29                              <1> ;                     1 0   Directory area
    30                              <1> ;                     1 1   Data area
    31                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    32                              <1> ;               AL  = Failing drive number if AH[7] = 0
    33                              <1> ;               DIL = Error code for errorMsg
    34                              <1> ;               RSI = EA of Device Header for which device the error occured
    35                              <1> ;Return:
    36                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    37                              <1> ;                  = 1 - Retry the Operation    (Retry)
    38                              <1> ;                  = 2 - Terminate the Program  (Abort)
    39                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    40 00000A81 53                  <1>     push rbx
    41 00000A82 51                  <1>     push rcx
    42 00000A83 52                  <1>     push rdx
    43 00000A84 57                  <1>     push rdi
    44 00000A85 56                  <1>     push rsi
    45 00000A86 FC                  <1>     cld         ;Make String ops go forward
    46                              <1> 
    47 00000A87 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    48 00000A8A 488D1587F7FFFF      <1>     lea rdx, crlf
    49 00000A91 B409                <1>     mov ah, 09h ;Print String
    50 00000A93 CD41                <1>     int 41h
    51                              <1> 
    52 00000A95 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    53 00000A9B B90C000000          <1>     mov ecx, 0Ch
    54 00000AA0 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    55 00000AA2 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    56 00000AA5 480FB7FF            <1>     movzx rdi, di
    57 00000AA9 4889FA              <1>     mov rdx, rdi    ;Copy error code
    58 00000AAC 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    59 00000AB0 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    60 00000AB3 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    61 00000AB6 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    62 00000ABD 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    63 00000AC1 B409                <1>     mov ah, 09h ;Print String
    64 00000AC3 CD41                <1>     int 41h     ;Call DOS to print first part of message
    65                              <1> 
    66 00000AC5 488D1505020000      <1>     lea rdx, qword [.readmsg]
    67 00000ACC 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    68 00000AD3 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    69 00000AD6 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    70 00000ADA B409                <1>     mov ah, 09h ;Print String
    71 00000ADC CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    72                              <1> 
    73 00000ADE F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    74 00000AE1 0F85DF000000        <1>     jnz .charError
    75                              <1> ;Disk error continues here
    76 00000AE7 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    77 00000AEE B409                <1>     mov ah, 09h
    78 00000AF0 CD41                <1>     int 41h
    79 00000AF2 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    80 00000AF4 80C241              <1>     add dl, "A" ;Add ASCII code
    81 00000AF7 B402                <1>     mov ah, 02h ;Print char in dl
    82 00000AF9 CD41                <1>     int 41h
    83                              <1> .userInput:
    84 00000AFB 488D1516F7FFFF      <1>     lea rdx, crlf  ;Print new line
    85 00000B02 B409                <1>     mov ah, 09h
    86 00000B04 CD41                <1>     int 41h
    87                              <1> ;Abort, Retry, Ignore, Fail is word order
    88                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    89                              <1> .userAbort:
    90                              <1> ;Abort is always an option
    91 00000B06 488D15E2010000      <1>     lea rdx, qword [.abortmsg]
    92 00000B0D B409                <1>     mov ah, 09h
    93 00000B0F CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
    94                              <1> .userRetry:
    95 00000B11 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    96 00000B14 7416                <1>     jz .userIgnore    ;If clear, dont print message
    97 00000B16 488D15EA010000      <1>     lea rdx, qword [.betweenMsg]
    98 00000B1D B409                <1>     mov ah, 09h
    99 00000B1F CD41                <1>     int 41h
   100 00000B21 488D15D4010000      <1>     lea rdx, qword [.retrymsg]
   101 00000B28 B409                <1>     mov ah, 09h
   102 00000B2A CD41                <1>     int 41h
   103                              <1> .userIgnore:
   104 00000B2C F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   105 00000B2F 7416                <1>     jz .userFail
   106 00000B31 488D15CF010000      <1>     lea rdx, qword [.betweenMsg]
   107 00000B38 B409                <1>     mov ah, 09h
   108 00000B3A CD41                <1>     int 41h
   109 00000B3C 488D15B2010000      <1>     lea rdx, qword [.ignoremsg]
   110 00000B43 B409                <1>     mov ah, 09h
   111 00000B45 CD41                <1>     int 41h
   112                              <1> .userFail:
   113 00000B47 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   114 00000B4A 7416                <1>     jz .userMsgEnd
   115 00000B4C 488D15B4010000      <1>     lea rdx, qword [.betweenMsg]
   116 00000B53 B409                <1>     mov ah, 09h
   117 00000B55 CD41                <1>     int 41h
   118 00000B57 488D15A4010000      <1>     lea rdx, qword [.failmsg]
   119 00000B5E B409                <1>     mov ah, 09h
   120 00000B60 CD41                <1>     int 41h
   121                              <1> .userMsgEnd:
   122 00000B62 488D15A1010000      <1>     lea rdx, qword [.endMsg]
   123 00000B69 B409                <1>     mov ah, 09h
   124 00000B6B CD41                <1>     int 41h
   125                              <1> ;Get user input now 
   126 00000B6D 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   127 00000B6F 488D3D97010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   128 00000B76 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   129 00000B78 CD41                <1>     int 41h ;Get char in al
   130 00000B7A 3C61                <1>     cmp al, "a" ;Chack if lowercase
   131 00000B7C 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   132 00000B7E 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   133                              <1> .uip1:
   134 00000B80 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   135 00000B81 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   136 00000B83 FFC1                <1>     inc ecx
   137 00000B85 81F904000000        <1>     cmp ecx, 4
   138 00000B8B 75F3                <1>     jne .uip1
   139 00000B8D E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   140                              <1> .validInput:
   141 00000B92 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   142                              <1> ;Now check if the input is permitted
   143 00000B94 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   144 00000B96 7427                <1>     je .cehExit
   145 00000B98 84C0                <1>     test al, al ;Check if 0 => Ignore
   146 00000B9A 740F                <1>     je .viIgnore
   147 00000B9C 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   148 00000B9E 7416                <1>     je .viRetry
   149                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   150 00000BA0 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   151 00000BA3 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   152 00000BA9 EB14                <1>     jmp short .cehExit
   153                              <1> .viIgnore:
   154 00000BAB F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   155 00000BAE 0F8447FFFFFF        <1>     jz .userInput
   156 00000BB4 EB09                <1>     jmp short .cehExit
   157                              <1> .viRetry:
   158 00000BB6 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   159 00000BB9 0F843CFFFFFF        <1>     jz .userInput
   160                              <1> .cehExit:
   161 00000BBF 5E                  <1>     pop rsi
   162 00000BC0 5F                  <1>     pop rdi
   163 00000BC1 5A                  <1>     pop rdx
   164 00000BC2 59                  <1>     pop rcx
   165 00000BC3 5B                  <1>     pop rbx
   166 00000BC4 48CF                <1>     iretq
   167                              <1> .charError:
   168 00000BC6 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   169 00000BCB 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   170                              <1> .ce1:
   171 00000BD2 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   172 00000BD3 88C2                <1>     mov dl, al  ;Move char into dl
   173 00000BD5 B402                <1>     mov ah, 02h
   174 00000BD7 CD41                <1>     int 41h ;Print char
   175 00000BD9 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   176 00000BDB E91BFFFFFF          <1>     jmp .userInput
   177                              <1> 
   178                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   179 00000BE0 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   179 00000BE9 746563742024202020  <1>
   180 00000BF2 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   180 00000BFB 6E6974202420202020  <1>
   181 00000C04 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   181 00000C0D 202420202020202020  <1>
   182 00000C16 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   182 00000C1F 6F6D6D616E64202420  <1>
   183 00000C28 446174612024202020- <1>             db "Data $            "       ;Error 4
   183 00000C31 202020202020202020  <1>
   184 00000C3A 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   184 00000C43 737420242020202020  <1>
   185 00000C4C 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   185 00000C55 202020202020202020  <1>
   186 00000C5E 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   186 00000C67 656469612024202020  <1>
   187 00000C70 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   187 00000C79 7420466F756E642024  <1>
   188 00000C82 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   188 00000C8B 706572202420202020  <1>
   189 00000C94 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   189 00000C9D 6C7420242020202020  <1>
   190 00000CA6 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   190 00000CAF 742024202020202020  <1>
   191 00000CB8 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   191 00000CC1 61696C757265202420  <1>
   192                              <1> 
   193 00000CCA 64726976652024      <1> .drive      db "drive $"
   194 00000CD1 6572726F7220726561- <1> .readmsg    db "error reading $"
   194 00000CDA 64696E672024        <1>
   195 00000CE0 6572726F7220777269- <1> .writemsg   db "error writing $"
   195 00000CE9 74696E672024        <1>
   196 00000CEF 41626F727424        <1> .abortmsg   db "Abort$" 
   197 00000CF5 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   198 00000CFC 526574727924        <1> .retrymsg   db "Retry$"
   199 00000D02 4661696C24          <1> .failmsg    db "Fail$"
   200 00000D07 2C2024              <1> .betweenMsg db ", $"
   201 00000D0A 3F2024              <1> .endMsg     db "? $"
   202 00000D0D 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   203                              <1> 
   204                              <1> int43h:
   205 00000D11 F9                  <1>     stc     ;Set CF to kill the task
   206 00000D12 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    17                                  %include "./Source/Utils/COMMAND/Data/cmdEnv.asm"
    18                              <1>     
    19                              <1> masterEnv:  ;Yeet this is this is a child command processor
    20 00000D15 5F3A434F4D4D414E44- <1>     db "_:COMMAND.COM",0
    20 00000D1E 2E434F4D00          <1>
    21 00000D23 504154483D0000      <1>     db "PATH=",0,0
    22 00000D2A 202020202020202020- <1>     db ($ - masterEnv) dup (" ")    ;Pad the environment with NOPs
    22 00000D33 202020202020202020- <1>
    22 00000D3C 202020              <1>
    23                              <1> endOfAlloc: ;Symbol to find the start of where I can yeet 
    18                                  %include "./Source/Utils/COMMAND/Source/cmdLdr.asm"
    19                              <1> cmdLdr:
    20                              <1> ;First check if the version is ok. If not, return.
    21 00000D3F B430                <1>     mov ah, 30h
    22 00000D41 CD41                <1>     int 41h
    23 00000D43 3C01                <1>     cmp al, 01h ;Version 1
    24 00000D45 760D                <1>     jbe .okVersion
    25 00000D47 488D1560010000      <1>     lea rdx, badVerStr
    26 00000D4E B409                <1>     mov ah, 09h
    27 00000D50 CD41                <1>     int 41h
    28 00000D52 CD40                <1>     int 40h ;Exit to caller or DOS to print bad command interpreter line
    29                              <1> .okVersion:
    30                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    31 00000D54 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    32 00000D58 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    33 00000D5C 488905ACF2FFFF      <1>     mov qword [realParent], rax ;Preserve the real parent address
    34                              <1> ;Setup Int 43h and Int 44h
    35 00000D63 488D1517FDFFFF      <1>     lea rdx, critErrorHandler
    36 00000D6A 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    37 00000D6E B844250000          <1>     mov eax, 2544h
    38 00000D73 CD41                <1>     int 41h
    39 00000D75 488D1595FFFFFF      <1>     lea rdx, int43h
    40 00000D7C 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    41 00000D80 B843250000          <1>     mov eax, 2543h
    42 00000D85 CD41                <1>     int 41h
    43 00000D87 488D15FCF8FFFF      <1>     lea rdx, applicationReturn
    44 00000D8E 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    45 00000D92 B842250000          <1>     mov eax, 2542h
    46 00000D97 CD41                <1>     int 41h
    47                              <1> ;Get a pointer to DOS Sysvars
    48 00000D99 B452                <1>     mov ah, 52h ;Get sysvars
    49 00000D9B CD41                <1>     int 41h
    50 00000D9D 48891D73F2FFFF      <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    51                              <1> ;Call for simple internationalisation data
    52 00000DA4 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    53 00000DA9 CD41                <1>     int 41h
    54 00000DAB 3CFF                <1>     cmp al, -1
    55 00000DAD 7412                <1>     je .skipSwitch
    56 00000DAF 88156FF2FFFF        <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    57 00000DB5 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    58 00000DB8 7507                <1>     jne .skipSwitch
    59 00000DBA C60562F2FFFF2F      <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    60                              <1> .skipSwitch:
    61 00000DC1 B800380000          <1>     mov eax, 3800h  ;Get current country data
    62 00000DC6 488D1560F2FFFF      <1>     lea rdx, ctryData
    63 00000DCD CD41                <1>     int 41h ;Write the data to the internal country table
    64                              <1> ;Now determine if this is the master copy of COMMAND.COM
    65                              <1> ;Check if Int 4Eh has the same address as Int 4Dh. If so, we are master.
    66 00000DCF B84E350000          <1>     mov eax, 354Eh  ;Get int 4Eh address
    67 00000DD4 CD41                <1>     int 41h
    68 00000DD6 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    69 00000DD9 B84D350000          <1>     mov eax, 354Dh  ;Get int 4Dh address
    70 00000DDE CD41                <1>     int 41h
    71 00000DE0 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    72 00000DE3 7535                <1>     jne .skipMaster
    73                              <1> ;Ok so we are master command.com
    74                              <1> ;Now make myself the real parent
    75 00000DE5 4C890523F2FFFF      <1>     mov qword [realParent], r8
    76                              <1> ;Set master environment as mine
    77 00000DEC 488D0522FFFFFF      <1>     lea rax, masterEnv
    78 00000DF3 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    79                              <1> ;Set current Drive in COMSPEC
    80 00000DF7 B019                <1>     mov al, 19h ;Get current Drive
    81 00000DF9 CD41                <1>     int 41h
    82 00000DFB 0441                <1>     add al, "A"
    83 00000DFD 880512FFFFFF        <1>     mov byte [masterEnv], al
    84                              <1> ;Set Int 4Eh up
    85 00000E03 488D1526F9FFFF      <1>     lea rdx, int4Eh
    86 00000E0A B84E250000          <1>     mov eax, 254Eh ;Set this as Int 4Eh
    87 00000E0F CD41                <1>     int 41h
    88                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    89                              <1>     
    90 00000E11 488D1D27FFFFFF      <1>     lea rbx, endOfAlloc ;Save the Master Environment
    91 00000E18 EB07                <1>     jmp short .printInit
    92                              <1> .skipMaster:
    93 00000E1A 488D1DF4FEFFFF      <1>     lea rbx, masterEnv  ;This is the base address to jettison
    94                              <1> .printInit:
    95                              <1> ;Finish by printing INIT string.
    96 00000E21 488D1510000000      <1>     lea rdx, initString
    97 00000E28 B409                <1>     mov ah, 09h
    98 00000E2A CD41                <1>     int 41h ;Print init string
    99 00000E2C 488925D2F1FFFF      <1>     mov qword [stackBottom], rsp    ;Use this to save where to reset rsp to
   100 00000E33 E93EF8FFFF          <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   101                              <1> ;Loader Data here
   102                              <1> initString: 
   103 00000E38 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version 1.0",CR,LF
   103 00000E41 66696320436F6D7075- <1>
   103 00000E4A 746572205265736561- <1>
   103 00000E53 726368285229205343- <1>
   103 00000E5C 502F444F5328522920- <1>
   103 00000E65 56657273696F6E2031- <1>
   103 00000E6E 2E300D0A            <1>
   104 00000E72 202020202020202020- <1>     db       "          (C)Copyright Scientific Computer Reserach 2022.",CR,LF,"$"
   104 00000E7B 20284329436F707972- <1>
   104 00000E84 696768742053636965- <1>
   104 00000E8D 6E746966696320436F- <1>
   104 00000E96 6D7075746572205265- <1>
   104 00000E9F 736572616368203230- <1>
   104 00000EA8 32322E0D0A24        <1>
   105 00000EAE 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   105 00000EB7 20444F532076657273- <1>
   105 00000EC0 696F6E0D0A24        <1>
   105          ------------------  <1>  info: assembly required 1+2+2 passes

