     1                                  ;COMMAND.COM main file
     2                                  [map all ./Source/Utils/COMMAND/Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Source/Include/dosMacro.mac"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------------------------------
     9                              <1> ;Generic Macros file
    10                              <1> ;The following instruction extensions allow to conditionally return
    11                              <1> ;The idea was borrowed from the DOS Source Code
    12                              <1> ;
    13                              <1> ;-------------------------------------------------------------------------------
    14                              <1> 
    15                              <1> ;-------------------------------------------------------------------------------
    16                              <1> ;These macros are live and must not be touched
    17                              <1> ;-------------------------------------------------------------------------------
    18                              <1> %macro return 0
    19                              <1> %%_ret:
    20                              <1>     ret
    21                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    22                              <1> %endmacro
    23                              <1> 
    24                              <1> %macro cret 1
    25                              <1> %%_base:
    26                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    27                              <1>     %ifdef retOff
    28                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <1>     %ifdef currSegVBase
    30                              <1>     j%+1 short (retOff+currSegVBase)
    31                              <1>     %else
    32                              <1>     j%+1 short retOff
    33                              <1>     %endif  ;End ifdef currSegVBase
    34                              <1>     %else 
    35                              <1>     j%-1 short %%a
    36                              <1>     return
    37                              <1> %%a:
    38                              <1>     %endif  ;End the distance measurement if
    39                              <1>     %else   
    40                              <1>     j%-1 short %%a
    41                              <1>     return
    42                              <1> %%a:
    43                              <1>     %endif  ;End ifdef retoff
    44                              <1> %endmacro
    45                              <1> 
    46                              <1> %macro retz 0
    47                              <1> cret z
    48                              <1> %endmacro
    49                              <1> 
    50                              <1> %macro retnz 0
    51                              <1> cret nz
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> %macro rete 0
    55                              <1> cret e
    56                              <1> %endmacro
    57                              <1> 
    58                              <1> %macro retne 0
    59                              <1> cret ne
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> %macro retc 0
    63                              <1> cret c
    64                              <1> %endmacro
    65                              <1> 
    66                              <1> %macro retnc 0
    67                              <1> cret nc
    68                              <1> %endmacro
    69                              <1> 
    70                              <1> %macro retb 0
    71                              <1> cret b
    72                              <1> %endmacro
    73                              <1> 
    74                              <1> %macro retnb 0
    75                              <1> cret nb
    76                              <1> %endmacro
    77                              <1> 
    78                              <1> %macro breakpoint 0
    79                              <1> xchg bx, bx
    80                              <1> %endmacro
     7                                  %include "./Source/Include/dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    27 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    32 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Only affects for SUBST drives, not JOIN
    69                              <1> ; Flags: Bit 15 set = Network drive
    70                              <1> ;        Bit 14 set = Physical drive
    71                              <1> ;        Bit 13 set = JOIN'ed drive
    72                              <1> ;        Bit 12 set = SUBST'ed drive
    73                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    74                              <1> endstruc
    75                              <1> ;CDS equates
    76                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    77                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    78                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    79                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    80                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    81                              <1> ;------------------------------------------------------------------------;
    82                              <1> ; The SFT is a way to allow applications to open file handles to files 
    83                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    84                              <1> ; under the first header, and then a second header will be linked to the 
    85                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    86                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    87                              <1> ; using the FCBS= command. Default FCBS=5.
    88                              <1> ;
    89                              <1> ; A file handle describes the file, and the location within the file that
    90                              <1> ; we are reading. The file handle can be manipulated without the file
    91                              <1> ; being in memory, thus allowing the user to access data without needing 
    92                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    93                              <1> ; accessing devices, by treating them as files with their drivers 
    94                              <1> ; responding and translating the manipulations of the file handle itself.
    95                              <1> ; Neither the driver nor the application should see or use the SFT for
    96                              <1> ; the handle, as it is subject to change (and will change when file 
    97                              <1> ; sharing provisions are included). The DOS will make requests to the 
    98                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    99                              <1> ; track of the information in the SFT entry for that handle. 
   100                              <1> ;
   101                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   102                              <1> ; can point to the same file. It all depends on what the applications 
   103                              <1> ; want to do with the File.
   104                              <1> ;
   105                              <1> ; !!!!IMPORTANT!!!!
   106                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   107                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   108                              <1> ;
   109                              <1> ;Each SFT may look like this:
   110                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   111                              <1> ;            |                |
   112                              <1> ;       wNumFiles*sft    wNumFiles*sft
   113                              <1> ;
   114                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   115                              <1> ; System FCBs.
   116                              <1> ;
   117                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   118                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   119                              <1> ;
   120                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   121                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   122                              <1> ;------------------------------------------------------------------------;
   123                              <1> struc sfth   ;System file table header
   124                              <1> ; This is the SFT header.
   125                              <1> ; This structure comes before the start of the first file in the array/table.
   126 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   127 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   128                              <1> endstruc
   129                              <1> 
   130                              <1> struc sft
   131                              <1> ;This is the file struc itself
   132 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   133 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   134 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   135 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   136 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   137 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   138 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   139 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   140 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   141 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   142 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   143 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   144 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   145 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   146 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   147 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   148 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   149 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   150 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   151                              <1> ;                           0 means no record
   152                              <1> endstruc
   153                              <1> ;Open Mode equates
   154                              <1> ;Access modes   Bits[2:0]
   155                              <1> ReadAccess      equ 0h
   156                              <1> WriteAccess     equ 1h
   157                              <1> RWAccess        equ 2h
   158                              <1> ;Bit 3 reserved 0
   159                              <1> ;Sharing modes  Bits[6:4]
   160                              <1> CompatShare     equ 0h
   161                              <1> denyRWShare     equ 10h
   162                              <1> denyWriteShare  equ 20h
   163                              <1> denyReadShare   equ 30h
   164                              <1> denyNoneShare   equ 40h
   165                              <1> netFCBShare     equ 70h
   166                              <1> ;Bit 7 reserved 0
   167                              <1> ;Bits 8-12 reserved 0
   168                              <1> 
   169                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   170                              <1> ;Buffering on writes
   171                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   172                              <1> ;FCB opened file?
   173                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   174                              <1> ;Attribute Byte
   175                              <1> readOnlyFile    equ 1h
   176                              <1> hiddenFile      equ 2h
   177                              <1> systemFile      equ 4h
   178                              <1> volumeLabel     equ 8h
   179                              <1> directoryFile   equ 10h ;Directory entry
   180                              <1> archiveFile     equ 20h
   181                              <1> ;Device Info equates
   182                              <1> ;For a block device, bits [5:0] contain the drive number
   183                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   184                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   185                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   186                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   187                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   188                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   189                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   190                              <1> blokFileToFlush equ 40h ;Set if ANY writes are made to this handle!
   191                              <1> devCharDev      equ 80h ;If set, it is a char device!
   192                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   193                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   194                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   195                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   196                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   197                              <1> 
   198                              <1> ;openAddress   equ DOSSEG:367Ah   
   199                              <1> ;createAddress equ DOSSEG:35E3h   
   200                              <1> ;------------------------------------------------------------------------;
   201                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   202                              <1> ; to an internal buffer, and then copying it to the specified location
   203                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   204                              <1> ; another request for the same sector from the same device is made, so 
   205                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   206                              <1> ; size, selected according to the largest detected sector size during 
   207                              <1> ; the initial loadup.
   208                              <1> ;
   209                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   210                              <1> ;
   211                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   212                              <1> ;------------------------------------------------------------------------;
   213                              <1> 
   214                              <1> struc bufferHdr
   215 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   216 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   217 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   218 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   219 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   220 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   221 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   222 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   223 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   224                              <1>     .dataarea:             ;Points to the start of the data area
   225                              <1> endstruc
   226                              <1> ;Buffer Flag equates
   227                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   228                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   229                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   230                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   231                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   232                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   233                              <1> ;Note! A buffer is marked as referenced only when the application 
   234                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   235                              <1> ;------------------------------------------------------------------------;
   236                              <1> ; Memory control block for each memory arena
   237                              <1> ;------------------------------------------------------------------------;
   238                              <1> struc mcb
   239 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   240 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   241 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   242 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   243                              <1>     .program:
   244                              <1> endstruc
   245                              <1> ;MCB equates
   246                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   247                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   248                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   249                              <1> mcbMarkCtn      equ "M"
   250                              <1> mcbMarkEnd      equ "Z"
   251                              <1> 
   252                              <1> memFirstFit     equ 0   ;First free block goes to application
   253                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   254                              <1> memLastFit      equ 2   ;Last free block goes to application
   255                              <1> 
   256                              <1> ;Owner = Para aligned address => Owning application PSP
   257                              <1> ;...To consider...
   258                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   259                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   260                              <1> ;------------------------------------------------------------------------;
   261                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   262                              <1> ; following order, thus allowing for return values to be placed in the 
   263                              <1> ; registers by accessing the caller register stack frame.
   264                              <1> ;------------------------------------------------------------------------;
   265                              <1> struc callerFrame
   266 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   267 00000008 ????????????????    <1>     .rbx    resq 1    
   268 00000010 ????????????????    <1>     .rcx    resq 1
   269 00000018 ????????????????    <1>     .rdx    resq 1
   270 00000020 ????????????????    <1>     .rsi    resq 1
   271 00000028 ????????????????    <1>     .rdi    resq 1
   272 00000030 ????????????????    <1>     .rbp    resq 1
   273 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   274 00000040 ????????????????    <1>     .r9     resq 1
   275                              <1> ;Pushed by Processor when invoked via Interrupt
   276 00000048 ????????????????    <1>     .rip    resq 1
   277 00000050 ????????????????    <1>     .cs     resq 1
   278 00000058 ????????????????    <1>     .flags  resq 1
   279                              <1> endstruc
   280                              <1> 
   281                              <1> struc dpl
   282                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   283                              <1> ; server calls
   284 00000000 ????????????????    <1>     .rax    resq 1
   285 00000008 ????????????????    <1>     .rbx    resq 1
   286 00000010 ????????????????    <1>     .rcx    resq 1
   287 00000018 ????????????????    <1>     .rdx    resq 1
   288 00000020 ????????????????    <1>     .rsi    resq 1
   289 00000028 ????????????????    <1>     .rdi    resq 1
   290 00000030 ????????????????    <1>     .r8     resq 1
   291 00000038 ????????????????    <1>     .r9     resq 1
   292 00000040 ????????????????    <1>     .align  resq 1
   293 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   294 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   295                              <1> endstruc
   296                              <1> 
   297                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   298 00000000 ????????????????    <1>     .oldRBP         resq 1  
   299 00000008 ??                  <1>     .newBuffers     resb 1  ;New buffers value
   300 00000009 ??                  <1>     .newSFTVal      resb 1
   301 0000000A ??                  <1>     .newFCBSVal     resb 1
   302 0000000B ??                  <1>     .newProtFCBSVal resb 1  ;Number of protected FCBS
   303 0000000C ??                  <1>     .newLastdrive   resb 1
   304 0000000D ??                  <1>     .newStacks      resb 1  ;Ignored for now
   305 0000000E ????                <1>     .newStackSize   resb 2  ;Ignored for now
   306 00000010 ????????            <1>     .newAllocSize   resd 1  ;Used to keep track of reallocation size
   307 00000014 ????????            <1>                     resd 1  ;Alignment byte
   308 00000018 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc fcb
   312                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   313 00000000 ??                  <1>     .driveNum   resb 1
   314 00000001 ????????????????    <1>     .filename   resb 8
   315 00000009 ??????              <1>     .fileext    resb 3
   316 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   317                              <1> ;One block consists of 128 records, of size denoted in the below
   318 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   319 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   320 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   321 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   322 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   323 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   324 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   325 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   326 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   327                              <1>     ;If record size > 64, high byte is ignored.
   328                              <1>     ;Used for random read and write operations to find the right record
   329                              <1> endstruc
   330                              <1> 
   331                              <1> struc filename
   332                              <1> ;8.3 File name struct
   333 00000000 ????????????????    <1>     .fName  resb 8
   334 00000008 ??????              <1>     .fExt   resb 3
   335                              <1> endstruc
   336                              <1> 
   337                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   338 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   339 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   340 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   341 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   342 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   343 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   344 00000016 ????                <1>     .fileTime   resw 1  ;File time
   345 00000018 ????                <1>     .fileDate   resw 1  ;File date
   346 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   347 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   348                              <1> endstruc
   349                              <1> 
   350                              <1> struc psp
   351 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   352 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   353 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   354 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   355 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   356 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   357 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   358 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   359 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   360 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   361 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   362 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   363 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   364 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   365                              <1> ;Extra handle arrays are grouped into a linked list
   366                              <1> ;The below are in the same place as in DOS
   367 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   368 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   369                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   370 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   371 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   372                              <1> endstruc
   373                              <1> 
   374                              <1> struc clkStruc
   375 00000000 ????                <1>     .dateWord   resw 1
   376 00000002 ??                  <1>     .minutes    resb 1
   377 00000003 ??                  <1>     .hours      resb 1
   378 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   379 00000005 ??                  <1>     .seconds    resb 1
   380                              <1> endstruc
   381                              <1> 
   382                              <1> struc countryStruc
   383 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   384                              <1>                         ;0 = month day year hh:mm:ss
   385                              <1>                         ;1 = day month year hh:mm:ss
   386                              <1>                         ;2 = year month day hh:mm:ss
   387 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   388 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   389 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   390 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   391 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   392 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   393                              <1>                         ;0 = Symbol leads, without space
   394                              <1>                         ;1 = Symbol follows, without space
   395                              <1>                         ;2 = Symbol leads, one space
   396                              <1>                         ;3 = Symbol follows, one space
   397                              <1>                         ;4 = Symbol replace decimal separator
   398 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   399 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   400 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   401 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   402 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   403                              <1> endstruc
   404                              <1> 
   405                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   406                              <1> ;for a space of 64Gb
   407                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   408                              <1> dosLowBase  equ 600h    ;Low load address
   409                              <1> 
   410                              <1> ;Critical Error AH bitfield equates
   411                              <1> critRead    equ 0h
   412                              <1> critWrite   equ 1h
   413                              <1> critDOS     equ 0h
   414                              <1> critFAT     equ 2h
   415                              <1> critDir     equ 4h
   416                              <1> critData    equ 6h
   417                              <1> critFailOK  equ 8h
   418                              <1> critRetryOK equ 10h
   419                              <1> critIgnorOK equ 20h
   420                              <1> critCharDev equ 80h
   421                              <1> 
   422                              <1> critIgnore  equ 0
   423                              <1> critRetry   equ 1
   424                              <1> critAbort   equ 2
   425                              <1> critFail    equ 3
   426                              <1> 
   427                              <1> ;MISC ASCII control chars
   428                              <1> NUL equ 00h ;^@         | ASCII Null
   429                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   430                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   431                              <1> BEL equ 07h ;^G         | ASCII Bell
   432                              <1> BSP equ 08h ;^H         | ASCII Backspace
   433                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   434                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   435                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   436                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   437                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   438                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   439                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   440                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   441                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   442                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   443                              <1> SPC equ 20h ;Printable  | ASCII Space
   444                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   445                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   446                              <1> 
   447                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   448                              <1> ;Extended Ascii Codes
   449                              <1> eF1     equ 3Bh ;F1 second byte
   450                              <1> eF2     equ 3Ch ;F2 second byte
   451                              <1> eF3     equ 3Dh ;F3 second byte
   452                              <1> eF4     equ 3Eh ;F4 second byte
   453                              <1> eF5     equ 3Fh ;F5 second byte
   454                              <1> eF6     equ 40h ;F6 second byte
   455                              <1> eF7     equ 41h ;F7 second byte
   456                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   457                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   458                              <1> eIns    equ 52h ;Insert second byte
   459                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   460                              <1> 
   461                              <1> ;Default Configuration for the system
   462                              <1> 
   463                              <1> buffersDefault  equ 30
   464                              <1> filesDefault    equ 20
   465                              <1> fcbsDefault     equ 4
   466                              <1> safeFcbsDeflt   equ 0
   467                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Source/Include/dosError.inc"
     9                              <1> ;DOS Error codes
    10                              <1> 
    11                              <1> ;Extended Error Codes
    12                              <1> errInvFnc   equ 1   ;Invalid function number
    13                              <1> errFnf      equ 2   ;File not found
    14                              <1> errPnf      equ 3   ;Path not found
    15                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    16                              <1> errAccDen   equ 5   ;Access denied (to resource)
    17                              <1> errBadHdl   equ 6   ;Invalid handle
    18                              <1> errMCBbad   equ 7   ;MCB's destroyed
    19                              <1> errNoMem    equ 8   ;Insufficient memory
    20                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    21                              <1> errBadEnv   equ 10  ;Invalid environment
    22                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    23                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    24                              <1> errInvDat   equ 13  ;Invalid data
    25                              <1> ;           equ 14  ;Reserved
    26                              <1> errBadDrv   equ 15  ;Invalid drive specified
    27                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    28                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    29                              <1> errNoFil    equ 18  ;No more files
    30                              <1> ;The following are Driver error codes + 19
    31                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    32                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    33                              <1> errUnkUnt   equ 20  ;Unknown Unit
    34                              <1> errDrvNR    equ 21  ;Drive not ready
    35                              <1> errUnkCmd   equ 22  ;Unknown Command
    36                              <1> errCRCerr   equ 23  ;Data (CRC) error
    37                              <1> errBadRLn   equ 24  ;Bad request structure length
    38                              <1> errSekErr   equ 25  ;Seek error
    39                              <1> errUnkMed   equ 26  ;Unknown media type
    40                              <1> errSecNF    equ 27  ;Sector not Found
    41                              <1> errNoPap    equ 28  ;Printer out of paper
    42                              <1> errWF       equ 29  ;Write fault
    43                              <1> errRF       equ 30  ;Read fault
    44                              <1> errGF       equ 31  ;General fault
    45                              <1> ;----------------------------------------------
    46                              <1> ;The following two go inbetween the Disk errors
    47                              <1> errShrVio   equ 32  ;Sharing violations
    48                              <1> errLokVio   equ 33  ;File Lock violation
    49                              <1> ;----------------------------------------------
    50                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    51                              <1> errNoFCB    equ 35  ;FCB unavailable
    52                              <1> errShrFul   equ 36  ;Sharing buffer full
    53                              <1> 
    54                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    55                              <1> 
    56                              <1> errFilExist equ 80  ;File already exists
    57                              <1> errDirExist equ 82  ;Directory already exists
    58                              <1> errFI44     equ 83  ;Fail on INT 44h
    59                              <1> errRedir    equ 84  ;Too many levels of redirection
    60                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    61                              <1> errBadPass  equ 86  ;Bad password
    62                              <1> errBadParam equ 87  ;Bad parameter passed to request
    63                              <1> errNetWrite equ 88  ;Network Write Fault
    64                              <1> ;-----------------------------------------------------------------------------
    65                              <1> ;Error Loci
    66                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    67                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    68                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    69                              <1> eLocChr     equ 4   ;Serial/Character Device error
    70                              <1> eLocMem     equ 5   ;Related to RAM
    71                              <1> ;-----------------------------------------------------------------------------
    72                              <1> ;Error Actions
    73                              <1> eActRet     equ 1   ;Retry
    74                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    75                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    76                              <1> eActAbt     equ 4   ;Abort with cleanup
    77                              <1> eActKil     equ 5   ;Abort without cleanup
    78                              <1> eActIgn     equ 6   ;Ignore error
    79                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    80                              <1> ;-----------------------------------------------------------------------------
    81                              <1> ;Error classes
    82                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    83                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    84                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    85                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    86                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    87                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    88                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    89                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    90                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    91                              <1> eClsLocked  equ 10  ;Resource Locked
    92                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    93                              <1> eClsClash   equ 12  ;Resource already exists!
    94                              <1> eClsUnk     equ 13  ;Unknown class
     9                                  %include "./Source/Utils/COMMAND/Data/cmdEqu.asm"
    10                              <1> ;Data equates and struct declarations
    11                              <1> 
    12                              <1> cmdBufferL  equ 128 ;Length of a command line buffer
    13                              <1> driveSpecL  equ 2   ;Space for X:
    14                              <1> dirPathL    equ 64  ;Length of a directory path
    15                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
    16                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
    17                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
    18                              <1> fullDirPathL equ driveSpecL + dirPathL
    19                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    20                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    21                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    22                              <1> 
    23                              <1> ;Use PSP FCB's for switch buffers
    24                              <1> fcb1        equ psp.fcb1
    25                              <1> fcb2        equ psp.fcb2
    26                              <1> ;Use the dta as the built command line buffer.
    27                              <1> cmdLineCnt  equ psp.parmList
    28                              <1> cmdLine     equ psp.progTail
    29                              <1> 
    30                              <1> 
    31                              <1> ;Struct Declarations
    32                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    33 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    34 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    35 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    36 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    37 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    38                              <1> endstruc
    39                              <1> 
    40                              <1> struc execProg  ;For use with EXEC-ing a child task
    41 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    42 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    43 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    44 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    45                              <1> endstruc
    46                              <1> 
    47                              <1> ;Directory attribute equates
    48                              <1>     dirReadOnly     equ 01h
    49                              <1>     dirHidden       equ 02h
    50                              <1>     dirSystem       equ 04h
    51                              <1>     dirVolumeID     equ 08h
    52                              <1>     dirDirectory    equ 10h
    53                              <1>     dirArchive      equ 20h
    54                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    55                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    56                              <1>     ;If any of the three bits are set, then ALL three bits are set
    57                              <1>     ; in addition to whatever the user passed to search for.
    58                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    59                              <1>     dirIncFiles     equ dirHidden | dirSystem
    10                                  Segment .data align=1 
    11                                  %include "./Source/Utils/COMMAND/Data/cmdData.asm"
    12                              <1> ;Static Data Area for COMMAND.COM    
    13                              <1> startLbl:   ;Start symbol, this is the entry point
    14 00000000 E91F1A0000          <1>     jmp cmdLdr
    15 00000005 0000000000000000    <1> stackBottom dq 0    ;Pointer to the top of the stack as allocated by DOS
    16 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
    17 0000000F FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
    18 00000017 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
    19 0000001F 1400                <1> numHdls     dw 20   ;Get number of handles permitted, hardcoded in this version
    20 00000021 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    21 00000023 5C                  <1> pathSep     db "\"  ;Default path sep
    22 00000024 2F                  <1> switchChar  db "/"  ;Default switch char
    23                              <1> ;Static strings, not used in command line parsing
    24 00000025 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    24 0000002E 000000000000000000- <1>
    24 00000037 000000000000000000- <1>
    24 00000040 000000000000000000- <1>
    24 00000049 0000                <1>
    25 0000004B 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    25 00000054 000000000000000000- <1>
    25 0000005D 000000000000000000- <1>
    25 00000066 000000000000000000- <1>
    25 0000006F 000000000000000000- <1>
    25 00000078 000000000000000000- <1>
    25 00000081 000000000000000000- <1>
    25 0000008A 00000000            <1>
    26                              <1> 
    27                              <1> 
    28                              <1> cmdLineStatePtr:
    29 0000008E 00                  <1> cmdStartOff db 0    ;Offset to the first char for this command (may be a space)
    30 0000008F 00                  <1> cmdEndOff   db 0    ;Offset to the terminating char for this command (0Dh or |)
    31 00000090 00                  <1> pipeFlag    db 0    ;If set, we are piping across a command
    32 00000091 0000                <1> pipeHndl    dw 0    ;If pipeFlag set, this var has the handle to the pipe file
    33 00000093 202020202020202020- <1> pipeName    db 11 dup (" ") ;Name of the pipe file we created
    33 0000009C 2020                <1>
    34                              <1> 
    35                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    36                              <1> ;These variables are valid for a SINGLE command in a command line
    37 0000009E 0000                <1> cmdDrvSpec  dw 0    ;Read the first word in to see if the pathspec has drivespec
    38 000000A0 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    39 000000A1 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    40                              <1> ;                    If 2, we are redirecting output to a file, by appending
    41                              <1> ;FLG and SWCH are read as a word when checking if argX is a switch
    42 000000A2 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    43 000000A3 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    44 000000A4 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    45                              <1> 
    46 000000A5 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    47 000000A6 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    48 000000A7 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    49                              <1> 
    50                              <1> cmdStateL equ $ - cmdStatePtr
    51                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    52                              <1> 
    53                              <1> ;Structs and strings
    54                              <1> 
    55 000000A8 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    55 000000B1 00000000000000      <1>
    56 000000B8 2B                  <1> cmdFFBlock  db ffBlock_size ;Internal Find First Block to use as default DTA
    57                              <1> 
    58 000000B9 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    58 000000C2 000000000000000000- <1>
    58 000000CB 000000000000000000- <1>
    58 000000D4 000000000000000000- <1>
    58 000000DD 000000000000000000- <1>
    58 000000E6 000000000000000000- <1>
    58 000000EF 000000000000000000- <1>
    58 000000F8 000000000000000000- <1>
    58 00000101 000000000000000000- <1>
    58 0000010A 000000000000000000- <1>
    58 00000113 000000000000000000- <1>
    58 0000011C 000000000000000000- <1>
    58 00000125 000000000000000000- <1>
    58 0000012E 000000000000000000- <1>
    58 00000137 0000                <1>
    59 00000139 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    59 00000142 000000000000000000- <1>
    59 0000014B 000000000000000000- <1>
    59 00000154 000000000000000000- <1>
    59 0000015D 000000000000000000- <1>
    59 00000166 000000000000000000- <1>
    59 0000016F 000000000000000000- <1>
    59 00000178 000000000000000000- <1>
    59 00000181 000000000000000000- <1>
    59 0000018A 000000000000000000- <1>
    59 00000193 000000000000000000- <1>
    59 0000019C 000000000000000000- <1>
    59 000001A5 000000000000000000- <1>
    59 000001AE 000000000000000000- <1>
    59 000001B7 0000                <1>
    60 000001B9 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)  ;Space for full path to a external command
    60 000001C2 000000000000000000- <1>
    60 000001CB 000000000000000000- <1>
    60 000001D4 000000000000000000- <1>
    60 000001DD 000000000000000000- <1>
    60 000001E6 000000000000000000- <1>
    60 000001EF 000000000000000000- <1>
    60 000001F8 000000000000000000- <1>
    60 00000201 00000000000000      <1>
    61                              <1> 
    62 00000208 000000000000000000- <1> fcbCmdSpec  db fcbNameL dup (0) ;Used to make a FCB style name for the file
    62 00000211 0000                <1>
    63 00000213 000000000000000000- <1> cmdSpec     db fileNameZL dup (0)   ;ASCIIZ command spec for the command name
    63 0000021C 00000000            <1>
    64 00000220 000000000000000000- <1> cmdName     db cmdNameL dup (0) ;Command name string prefixed by length of word
    64 00000229 0000000000          <1>
    65                              <1> 
    66 0000022E 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    66 00000237 000000000000000000- <1>
    66 00000240 000000000000000000- <1>
    66 00000249 000000000000000000- <1>
    66 00000252 000000000000000000- <1>
    66 0000025B 000000000000000000- <1>
    66 00000264 000000000000000000- <1>
    66 0000026D 000000000000000000- <1>
    66 00000276 00000000000000      <1>
    67 0000027D 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    67 00000286 000000000000000000- <1>
    67 0000028F 000000000000000000- <1>
    67 00000298 000000000000000000- <1>
    67 000002A1 000000000000000000- <1>
    67 000002AA 000000000000000000- <1>
    67 000002B3 000000000000000000- <1>
    67 000002BC 000000000000000000- <1>
    67 000002C5 00000000000000      <1>
    68                              <1> 
    69 000002CC 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Contains the pathspec for the search file
    69 000002D5 000000000000000000- <1>
    69 000002DE 000000000000000000- <1>
    69 000002E7 000000000000000000- <1>
    69 000002F0 000000000000000000- <1>
    69 000002F9 000000000000000000- <1>
    69 00000302 000000000000000000- <1>
    69 0000030B 000000000000000000- <1>
    69 00000314 000000000000000000- <1>
    69 0000031D 000000000000000000- <1>
    69 00000326 000000000000000000- <1>
    69 0000032F 000000000000000000- <1>
    69 00000338 000000000000000000- <1>
    69 00000341 000000000000000000- <1>
    69 0000034A 0000                <1>
    70                              <1> ;The above is larger than is needed/supported by DOS to allow for 
    71                              <1> ; users overtyping
    72                              <1> 
    73                              <1> ;Internal Function vars
    74 0000034C 00                  <1> dirPrnType  db 0    ;Print type.    Bit[0] set => /W or /w specified
    75                              <1> ;                                   Bit[1] set => /P or /p specified
    76 0000034D 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    77 0000034E 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    78 0000034F 00                  <1> dirPathOff  db 0
    79 00000350 000000000000000000- <1> dirVolLbl   db 13 dup (0)
    79 00000359 00000000            <1>
    80                              <1> dirBytes:
    81 0000035D 000000000000000000- <1> dirVolPathBuf db 16 dup (0)  ;Used to build X:\*.*,0 for volume label search
    81 00000366 00000000000000      <1>
    82 0000036D 00                  <1> dirDrv      db 0    ;0 based drive number to use
    12                                  %include "./Source/Utils/COMMAND/Data/cmdTable.asm"
    13                              <1> ;Function dispatch table
    14                              <1> functionTable:
    15                              <1> ;Use Pascal strings with each row of hte table having three columns:
    16                              <1> ; Col 1, BYTE, Length of command
    17                              <1> ; Col 2, String, String representing the user input
    18                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
    19 0000036E 03444952            <1>     db 3, "DIR"
    20 00000372 360D                <1>     dw dir - startLbl
    21                              <1> 
    22 00000374 024344              <1>     db 2, "CD"
    23 00000377 0711                <1>     dw chdir - startLbl
    24                              <1> 
    25 00000379 054348444952        <1>     db 5, "CHDIR"
    26 0000037F 0711                <1>     dw chdir - startLbl
    27                              <1> 
    28 00000381 024D44              <1>     db 2, "MD"
    29 00000384 C111                <1>     dw mkdir - startLbl
    30                              <1> 
    31 00000386 054D4B444952        <1>     db 5, "MKDIR"
    32 0000038C C111                <1>     dw mkdir - startLbl
    33                              <1> 
    34 0000038E 025244              <1>     db 2, "RD"
    35 00000391 2612                <1>     dw rmdir - startLbl
    36                              <1> 
    37 00000393 05524D444952        <1>     db 5, "RMDIR"
    38 00000399 2612                <1>     dw rmdir - startLbl
    39                              <1> 
    40 0000039B 0344454C            <1>     db 3, "DEL"
    41 0000039F 8B12                <1>     dw erase - startLbl
    42                              <1> 
    43 000003A1 054552415345        <1>     db 5, "ERASE"
    44 000003A7 8B12                <1>     dw erase - startLbl
    45                              <1> 
    46 000003A9 0444415445          <1>     db 4, "DATE"
    47 000003AE 8B12                <1>     dw date - startLbl
    48                              <1> 
    49 000003B0 0454494D45          <1>     db 4, "TIME"
    50 000003B5 8B12                <1>     dw time - startLbl
    51                              <1> 
    52 000003B7 04434F5059          <1>     db 4, "COPY"
    53 000003BC 8B12                <1>     dw copy - startLbl
    54                              <1> 
    55 000003BE 0443545459          <1>     db 4, "CTTY"
    56 000003C3 8B12                <1>     dw ctty - startLbl
    57                              <1> 
    58 000003C5 03434C53            <1>     db 3, "CLS"
    59 000003C9 8C12                <1>     dw cls - startLbl
    60                              <1> 
    61 000003CB 05425245414B        <1>     db 5, "BREAK"
    62 000003D1 FE12                <1>     dw break - startLbl
    63                              <1> 
    64 000003D3 0652454E414D45      <1>     db 6, "RENAME"
    65 000003DA 7F13                <1>     dw rename - startLbl
    66                              <1> 
    67 000003DC 08545255454E414D45  <1>     db 8, "TRUENAME"
    68 000003E5 8013                <1>     dw truename - startLbl
    69                              <1> 
    70 000003E7 FF                  <1>     db -1   ;End of table
    13                                  %include "./Source/Utils/COMMAND/Data/cmdMsg.asm"
    14                              <1> ;COMMAND.COM Messages and strings
    15 000003E8 0D0A24              <1> crlf    db  CR,LF,"$"
    16 000003EB 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
    16 000003F4 696C65206D69737369- <1>
    16 000003FD 6E670D0A24          <1>
    17 00000402 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
    17 0000040B 6469736B2077697468- <1>
    17 00000414 206261746368206669- <1>
    17 0000041D 6C65                <1>
    18 0000041F 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
    18 00000428 737320616E79206B65- <1>
    18 00000431 79207768656E207265- <1>
    18 0000043A 6164790D0A24        <1>
    19 00000440 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
    19 00000449 6E64206F722066696C- <1>
    19 00000452 65206E616D650D0A24  <1>
    20 0000045B 4475706C6963617465- <1> dupName db  "Duplicate file name or "
    20 00000464 2066696C65206E616D- <1>
    20 0000046D 65206F7220          <1>
    21 00000472 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    21 0000047B 666F756E640D0A24    <1>
    22 00000483 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    22 0000048C 656E74206469736B20- <1>
    22 00000495 73706163650D0A24    <1>
    23 0000049D 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    23 000004A6 7669726F6E6D656E74- <1>
    23 000004AF 2073706163650D0A24  <1>
    24 000004B8 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    24 000004C1 74696F6E206572726F- <1>
    24 000004CA 720D0A24            <1>
    25 000004CE 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    25 000004D7 6F7420626520636F70- <1>
    25 000004E0 696564206F6E746F20- <1>
    25 000004E9 697473656C660D0A24  <1>
    26 000004F2 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    26 000004FB 662064657374696E61- <1>
    26 00000504 74696F6E206C6F7374- <1>
    26 0000050D 206265666F72652063- <1>
    26 00000516 6F70790D0A24        <1>
    27                              <1> ;Copy end message. First write # files copied then this message 
    28 0000051C 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    28 00000525 636F706965640D0A24  <1>
    29                              <1> ;Dir end1 msg. First write # files in dir then this
    30 0000052E 2046696C6528732920- <1> dirOk   db  " File(s) $"
    30 00000537 24                  <1>
    31                              <1> ;Dir end2 msg. First write # bytes free then this message
    32 00000538 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    32 00000541 65650D0A24          <1>
    33 00000546 203C4449523E202020- <1> dirLbl  db  " <DIR>   $"
    33 0000054F 24                  <1>
    34                              <1> 
    35 00000550 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    35 00000559 726976652073706563- <1>
    35 00000562 696669636174696F6E- <1>
    35 0000056B 0D0A24              <1>
    36 0000056E 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    36 00000577 6B6579207768656E20- <1>
    36 00000580 7265616479202E202E- <1>
    36 00000589 202E2024            <1>
    37 0000058D 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    37 00000596 6172616D657465720D- <1>
    37 0000059F 0A24                <1>
    38                              <1> 
    39 000005A1 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    39 000005AA 576564546875467269- <1>
    39 000005B3 536174              <1>
    40 000005B6 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    40 000005BF 206461746524        <1>
    41 000005C5 43757272656E742064- <1> curDate db  "Current date is $"
    41 000005CE 6174652069732024    <1>
    42 000005D6 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date: $"
    42 000005DF 657720646174653A20- <1>
    42 000005E8 24                  <1>
    43 000005E9 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    43 000005F2 2074696D6524        <1>
    44 000005F8 43757272656E742074- <1> curTime db  "Current time is $"
    44 00000601 696D652069732024    <1>
    45 00000609 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    45 00000612 65772074696D653A20- <1>
    45 0000061B 24                  <1>
    46                              <1> 
    47 0000061C 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    47 00000625 7572652028592F4E29- <1>
    47 0000062E 3F2024              <1>
    48                              <1> 
    49 00000631 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    49 0000063A 56657273696F6E2024  <1>
    50                              <1> dosVerL equ $ - dosVer
    51                              <1> 
    52 00000643 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    52 0000064C 6E2064726976652024  <1>
    53 00000655 2069732024          <1> volOk   db " is $"
    54 0000065A 20686173206E6F206C- <1> volNo   db " has no label$"
    54 00000663 6162656C24          <1>
    55                              <1> 
    56 00000668 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    56 00000671 69726563746F72790D- <1>
    56 0000067A 0A24                <1>
    57 0000067C 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    57 00000685 206372656174652064- <1>
    57 0000068E 69726563746F72790D- <1>
    57 00000697 0A24                <1>
    58 00000699 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    58 000006A2 6174682C206E6F7420- <1>
    58 000006AB 6469726563746F7279- <1>
    58 000006B4 2C0D0A              <1>
    59 000006B7 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    59 000006C0 6F7279206E6F742065- <1>
    59 000006C9 6D7074790D0A24      <1>
    60 000006D0 204469726563746F72- <1> dirMain db " Directory of  $"
    60 000006D9 79206F66202024      <1>
    61 000006E0 4E6F20506174682024  <1> noPath  db "No Path $"
    62 000006E9 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    62 000006F2 7269766520696E2073- <1>
    62 000006FB 656172636820706174- <1>
    62 00000704 680D0A24            <1>
    63 00000708 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    63 00000711 65766963650D0A24    <1>
    64 00000719 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    64 00000722 20666F756E640D0A24  <1>
    65 0000072B 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    65 00000734 726F720D0A24        <1>
    66 0000073A 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    66 00000743 6F74206265206E6573- <1>
    66 0000074C 7465640D0A24        <1>
    67 00000752 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    67 0000075B 6174652066696C6520- <1>
    67 00000764 6572726F7220647572- <1>
    67 0000076D 696E6720706970650D- <1>
    67 00000776 0A24                <1>
    68 00000778 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    68 00000781 2062696E6172792072- <1>
    68 0000078A 656164732066726F6D- <1>
    68 00000793 206120646576696365- <1>
    68 0000079C 0D0A24              <1>
    69 0000079F 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    70 000007A5 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    71 000007AA 425245414B20697320- <1> breakIs db "BREAK is $"
    71 000007B3 24                  <1>
    72 000007B4 564552494659206973- <1> verifyIs    db "VERIFY is $"
    72 000007BD 2024                <1>
    73 000007BF 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    74 000007C8 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    74 000007D1 617468206F72206669- <1>
    74 000007DA 6C65206E616D650D0A- <1>
    74 000007E3 24                  <1>
    75 000007E4 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    75 000007ED 756D626572206F6620- <1>
    75 000007F6 706172616D65746572- <1>
    75 000007FF 730D0A24            <1>
    76 00000803 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    76 0000080C 74696E6720746F2064- <1>
    76 00000815 6576696365          <1>
    77 0000081A 08200800            <1> backSpace   db BSP," ",BSP,NUL
    78                              <1> 
    79 0000081E 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    80 00000822 2020202024          <1> fourSpc  db "    $"
    81 00000827 20202024            <1> threeSpc db "   $"
    82 0000082B 202024              <1> twoSpc   db "  $"
    83                              <1> 
    84 0000082E 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    84 00000837 696679204F4E206F72- <1>
    84 00000840 204F46460D0A24      <1>
    85 00000847 504154483D          <1> pathEVar db "PATH="
    86 0000084C 50524F4D50543D      <1> promptEVar  db "PROMPT="
    14                                  %include "./Source/Utils/COMMAND/Source/cmdMain.asm"
    15                              <1> commandStart:
    16                              <1>     ;Resize Allocation, jump here with endpointer in rbx
    17                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
    18                              <1>     ; that the jump to safety won't be gobbled up when multitasking
    19 00000853 49F7D8              <1>     neg r8  ;Convert r8 to -r8
    20 00000856 4A8D5C0311          <1>     lea rbx, qword [rbx + r8 + 11h]    ;Get # of bytes for COMMAND.COM
    21 0000085B C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
    22 0000085E B44A                <1>     mov ah, 4Ah ;Realloc
    23 00000860 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    24 00000863 CD41                <1>     int 41h
    25 00000865 EB5A                <1>     jmp short commandMain
    26                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    27 00000867 B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    28 0000086C CD41                <1>     int 41h
    29 0000086E 66890598F7FFFF      <1>     mov word [returnCode], ax
    30                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    31 00000875 488D15EA0E0000      <1>     lea rdx, critErrorHandler
    32 0000087C 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    33 00000880 B844250000          <1>     mov eax, 2544h
    34 00000885 CD41                <1>     int 41h
    35 00000887 488D1568110000      <1>     lea rdx, int43h
    36 0000088E 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    37 00000892 B843250000          <1>     mov eax, 2543h
    38 00000897 CD41                <1>     int 41h
    39 00000899 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    40 000008A0 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    41 000008A4 B842250000          <1>     mov eax, 2542h
    42 000008A9 CD41                <1>     int 41h
    43                              <1> ;Close all handles from 5->MAX
    44 000008AB 0FB70D6DF7FFFF      <1>     movzx ecx, word [numHdls]
    45 000008B2 BB05000000          <1>     mov ebx, 5
    46                              <1> .handleClose:
    47 000008B7 B43E                <1>     mov ah, 3Eh ;File close
    48 000008B9 CD41                <1>     int 41h
    49 000008BB FFC3                <1>     inc ebx ;Goto next file
    50 000008BD 39CB                <1>     cmp ebx, ecx
    51 000008BF 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    52                              <1> commandMain:
    53                              <1> ;Setup Commandline
    54 000008C1 FA                  <1>     cli
    55 000008C2 488B253CF7FFFF      <1>     mov rsp, qword [stackBottom]    ;Reset internal stack pointer pos
    56 000008C9 FB                  <1>     sti
    57 000008CA FC                  <1>     cld ;Ensure stringops are done the right way
    58 000008CB C605E7F7FFFF80      <1>     mov byte [inBuffer], 80h    ;Reset the buffer length
    59                              <1> .inputMain:
    60 000008D2 E8AE0C0000          <1>     call clearCommandLineState
    61 000008D7 E8E30A0000          <1>     call printCRLF
    62 000008DC E87C0C0000          <1>     call printPrompt
    63                              <1> 
    64 000008E1 488D15D1F7FFFF      <1>     lea rdx, inBuffer
    65 000008E8 B80A0C0000          <1>     mov eax, 0C0Ah  ;Do Buffered input
    66 000008ED CD41                <1>     int 41h
    67 000008EF E8CB0A0000          <1>     call printCRLF  ;Note we have accepted input
    68                              <1> 
    69                              <1> ;First check we had something typed in of length greater than 1
    70                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    71 000008F4 803DBFF7FFFF01      <1>     cmp byte [inBuffer + 1], 1  ;Check input length valid
    72 000008FB 762A                <1>     jbe .dfltErrExit
    73                              <1>     ;Copy over the input text
    74 000008FD 488D35B5F7FFFF      <1>     lea rsi, inBuffer
    75 00000904 488D3D2EF8FFFF      <1>     lea rdi, cmdBuffer
    76 0000090B B980000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    77 00000910 F3A4                <1>     rep movsb
    78 00000912 31C0                <1>     xor eax, eax
    79 00000914 66890573F7FFFF      <1>     mov word [cmdStartOff], ax  ;Clear start and end Off positions
    80 0000091B E814000000          <1>     call parseInput
    81 00000920 E8AD010000          <1>     call doCommandLine
    82 00000925 EBAB                <1>     jmp short .inputMain
    83                              <1> .dfltErrExit:
    84 00000927 488D1512FBFFFF      <1>     lea rdx, badCmd
    85 0000092E B409                <1>     mov ah, 09h
    86 00000930 CD41                <1>     int 41h
    87 00000932 EB9E                <1>     jmp short .inputMain
    88                              <1> 
    89                              <1> parseInput:
    90                              <1> ;EndOff is set up before entering this part
    91                              <1> ;Copies a nicely formatted version of the input command line
    92                              <1> ; without any redirections to psp.dta
    93 00000934 488D3500F8FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
    94 0000093B 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
    95 00000942 0FB61D46F7FFFF      <1>     movzx ebx, byte [cmdEndOff] ;Get the old end offset
    96 00000949 4801DE              <1>     add rsi, rbx    ;Move rsi to the start of this new command
    97 0000094C E8FD0B0000          <1>     call skipSpaces ;Skip any preceeding spaces
    98 00000951 66AD                <1>     lodsw   ;Get the first two chars into ax
    99 00000953 66890544F7FFFF      <1>     mov word [cmdDrvSpec], ax ;Store these chars as if they are the drvspec
   100 0000095A 4881EE02000000      <1>     sub rsi, 2  ;Go back to the start of the command
   101 00000961 56                  <1>     push rsi
   102 00000962 57                  <1>     push rdi
   103 00000963 488D3D4FF8FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   104 0000096A 57                  <1>     push rdi
   105 0000096B E868030000          <1>     call copyCommandTailItem
   106 00000970 5F                  <1>     pop rdi
   107 00000971 9C                  <1>     pushfq  ;Save the CF state
   108 00000972 E85F0B0000          <1>     call strlen
   109 00000977 FFC9                <1>     dec ecx ;Drop the terminating char from the count
   110 00000979 58                  <1>     pop rax ;Get the CF state in al
   111 0000097A 5F                  <1>     pop rdi
   112 0000097B 5E                  <1>     pop rsi
   113 0000097C F3A4                <1>     rep movsb   ;Now we copy the command into the psp command line
   114 0000097E A801                <1>     test al, 1  ;Was CF set?
   115 00000980 0F8586000000        <1>     jnz .exit   ;If an embedded CR was found in the filename, exit!
   116                              <1> .cmdLineProcess:
   117 00000986 E8C30B0000          <1>     call skipSpaces ;Go to the next char in the input line
   118                              <1> .redirFound:
   119 0000098B AC                  <1>     lodsb   ;Get first non-space char (setupRedir skips spaces before ret)
   120 0000098C 3C0D                <1>     cmp al, CR  ;If this was a CR, we stop processing
   121 0000098E 747C                <1>     je .exit
   122 00000990 E8D6020000          <1>     call checkAndSetupRedir ;If not, check if we have a redir element
   123 00000995 7275                <1>     jc .exit    ;CF=CY only if pipe, which is equivalent to CR when processing
   124 00000997 74F2                <1>     jz .redirFound  ;If we had a < > or >>, proceed to check if next char CR
   125 00000999 B020                <1>     mov al, " "
   126 0000099B AA                  <1>     stosb   ;Store a space to make space for the command file parameter
   127 0000099C 48FFCE              <1>     dec rsi ;Move rsi back to the first char
   128 0000099F F605FCF6FFFFFF      <1>     test byte [arg1Flg], -1
   129 000009A6 7521                <1>     jnz .arg2
   130                              <1> .arg1:
   131 000009A8 C605F3F6FFFFFF      <1>     mov byte [arg1Flg], -1
   132 000009AF E89A0B0000          <1>     call skipSpaces
   133 000009B4 4889F0              <1>     mov rax, rsi
   134 000009B7 488D1D7BF7FFFF      <1>     lea rbx, cmdBuffer
   135 000009BE 4829D8              <1>     sub rax, rbx
   136 000009C1 8805DCF6FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   137 000009C7 EB2A                <1>     jmp short .argCommon
   138                              <1> .arg2:
   139 000009C9 F605D5F6FFFFFF      <1>     test byte [arg2Flg], -1
   140 000009D0 7521                <1>     jnz .argCommon
   141 000009D2 C605CCF6FFFFFF      <1>     mov byte [arg2Flg], -1
   142 000009D9 E8700B0000          <1>     call skipSpaces
   143 000009DE 4889F0              <1>     mov rax, rsi
   144 000009E1 488D1D51F7FFFF      <1>     lea rbx, cmdBuffer
   145 000009E8 4829D8              <1>     sub rax, rbx
   146 000009EB 8805B5F6FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   147 000009F1 EB00                <1>     jmp short .argCommon
   148                              <1> .argCommon:
   149                              <1>     ;More than two arguments? Do nothing more than just copy it
   150                              <1>     ; over. If we encounter an embedded CR, exit there too
   151 000009F3 E8560B0000          <1>     call skipSpaces
   152 000009F8 803E0D              <1>     cmp byte [rsi], CR  ;Are we at the end of the commandline?
   153 000009FB 740F                <1>     je .exit
   154                              <1>     ;If not, we copy it over
   155 000009FD E8D6020000          <1>     call copyCommandTailItem    ;Stores a terminating null we dont want
   156 00000A02 488D7FFF            <1>     lea rdi, qword [rdi - 1]    ;Point back at the inserted terminating null
   157 00000A06 0F837AFFFFFF        <1>     jnc .cmdLineProcess
   158                              <1> .exit:
   159 00000A0C 488D1D26F7FFFF      <1>     lea rbx, cmdBuffer
   160 00000A13 48FFCE              <1>     dec rsi
   161 00000A16 4829DE              <1>     sub rsi, rbx    ;Get the offset into the command line
   162 00000A19 89F3                <1>     mov ebx, esi
   163 00000A1B 881D6EF6FFFF        <1>     mov byte [cmdEndOff], bl    ;Store the offset to the terminating char
   164 00000A21 B00D                <1>     mov al, CR
   165 00000A23 AA                  <1>     stosb   ;Store the terminating CR in the psp command line
   166                              <1>     ;Now compute the command line length 
   167 00000A24 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine] 
   168 00000A2B B00D                <1>     mov al, CR
   169 00000A2D 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   170 00000A2F FFC9                <1>     dec ecx ;rcx = -1
   171 00000A31 F2AE                <1>     repne scasb
   172 00000A33 F7D1                <1>     not ecx
   173 00000A35 FEC9                <1>     dec cl  ;Dont include terminating CR
   174 00000A37 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   175 00000A3E 880F                <1>     mov byte [rdi], cl
   176                              <1>     ;Before returning, we copy the command name to cmdName
   177 00000A40 488D3D72F7FFFF      <1>     lea rdi, cmdPathSpec
   178 00000A47 4889FB              <1>     mov rbx, rdi    ;Use rbx as the ptr to the first char in the commandspec
   179 00000A4A 30C0                <1>     xor al, al  ;Search for the terminating null
   180 00000A4C B94F000000          <1>     mov ecx, fileSpecZL ;Max number of chars the length could be
   181 00000A51 F2AE                <1>     repne scasb
   182 00000A53 48FFCF              <1>     dec rdi ;Go to the last char in the command
   183 00000A56 4889FE              <1>     mov rsi, rdi
   184 00000A59 FD                  <1>     std ;Now we go backwards to where rsi = rbx OR byte [rsi] = pathSep
   185                              <1> .keepSearching:
   186 00000A5A AC                  <1>     lodsb
   187 00000A5B 3A05C2F5FFFF        <1>     cmp al, byte [pathSep]
   188 00000A61 740B                <1>     je .cmdStartFnd
   189 00000A63 4839DE              <1>     cmp rsi, rbx
   190 00000A66 75F2                <1>     jne .keepSearching
   191 00000A68 48FFCE              <1>     dec rsi ;Go back two to go forwards again
   192 00000A6B 48FFCE              <1>     dec rsi
   193                              <1> .cmdStartFnd:
   194 00000A6E 48FFC6              <1>     inc rsi
   195 00000A71 48FFC6              <1>     inc rsi ;Go past the pathsep
   196 00000A74 FC                  <1>     cld ;Go the sane way again
   197 00000A75 488D3DA5F7FFFF      <1>     lea rdi, qword [cmdName + 1]    ;First byte is for the length of the name
   198 00000A7C 57                  <1>     push rdi    ;Cleanse the field before usage (not strictly necessary)
   199 00000A7D B90E000000          <1>     mov ecx, cmdNameL
   200 00000A82 30C0                <1>     xor al, al
   201 00000A84 F3AA                <1>     rep stosb
   202 00000A86 5F                  <1>     pop rdi
   203 00000A87 31C9                <1>     xor ecx, ecx
   204 00000A89 56                  <1>     push rsi    ;Save the location of the start byte of the command name
   205                              <1> .cmdGetChar:
   206 00000A8A AC                  <1>     lodsb
   207 00000A8B 84C0                <1>     test al, al ;Did we find the terminating null?
   208 00000A8D 7411                <1>     jz .nameLenFnd
   209 00000A8F 3C2E                <1>     cmp al, "." ;Extension sep also terminates
   210 00000A91 740D                <1>     je .nameLenFnd
   211 00000A93 24DF                <1>     and al, 0DFh    ;Else uppercase the char
   212 00000A95 AA                  <1>     stosb   ;and store it
   213 00000A96 FFC1                <1>     inc ecx
   214 00000A98 81F90B000000        <1>     cmp ecx, 11 ;Max command length is 11
   215 00000A9E 72EA                <1>     jb .cmdGetChar
   216                              <1> .nameLenFnd:
   217 00000AA0 880D7AF7FFFF        <1>     mov byte [cmdName], cl  ;Store the name length now
   218                              <1>     ;Now finally, create a FCB filespec
   219 00000AA6 488D3D5BF7FFFF      <1>     lea rdi, fcbCmdSpec
   220 00000AAD 57                  <1>     push rdi
   221 00000AAE B90B000000          <1>     mov ecx, fcbNameL
   222 00000AB3 B020                <1>     mov al, " " ;Fill with spaces
   223 00000AB5 F3AA                <1>     rep stosb
   224 00000AB7 5F                  <1>     pop rdi
   225 00000AB8 5E                  <1>     pop rsi ;Get back the location of the start byte of the command name
   226 00000AB9 E8D80A0000          <1>     call asciiToFCB
   227 00000ABE 488D3543F7FFFF      <1>     lea rsi, fcbCmdSpec
   228 00000AC5 488D3D47F7FFFF      <1>     lea rdi, cmdSpec
   229 00000ACC E8200B0000          <1>     call FCBToAsciiz
   230                              <1>     return
    19                              <2> %%_ret:
    20 00000AD1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   231                              <1> 
   232                              <1> doCommandLine:
   233 00000AD2 488D3562F6FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
   234 00000AD9 488D3DC8F5FFFF      <1>     lea rdi, cmdFcb
   235 00000AE0 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks
   236 00000AE5 CD41                <1>     int 41h
   237 00000AE7 0FB71DB0F5FFFF      <1>     movzx ebx, word [cmdDrvSpec]    ;Get the drive specifier
   238 00000AEE 80FF3A              <1>     cmp bh, ":"
   239 00000AF1 752E                <1>     jne .noDriveSpecified
   240 00000AF3 88DA                <1>     mov dl, bl      ;Move the drive letter in dl
   241 00000AF5 80E2DF              <1>     and dl, 0DFh    ;Make the drive letter upper case
   242 00000AF8 80EA41              <1>     sub dl, "A"     ;And make it a 0 based drive letter
   243 00000AFB 3CFF                <1>     cmp al, -1  ;Int 41h returns AL = -1 if bad drive specified
   244 00000AFD 7415                <1>     je .badDrive
   245                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   246 00000AFF 803D1AF7FFFF02      <1>     cmp byte [cmdName], 2
   247 00000B06 7519                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   248 00000B08 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   249 00000B0A CD41                <1>     int 41h 
   250 00000B0C B419                <1>     mov ah, 19h
   251 00000B0E CD41                <1>     int 41h     ;Get current drive
   252 00000B10 38D0                <1>     cmp al, dl  ;If the drive was set, all is well
   253                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000B12 74(D1)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   254                              <1> .badDrive:
   255 00000B14 488D1535FAFFFF      <1>     lea rdx, badDrv
   256 00000B1B B409                <1>     mov ah, 09h
   257 00000B1D CD41                <1>     int 41h
   258 00000B1F F9                  <1>     stc
   259                              <1>     return
    19                              <2> %%_ret:
    20 00000B20 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   260                              <1> .noDriveSpecified:
   261                              <1> ;Now we set the two FCB's in the command line
   262 00000B21 F6057AF5FFFFFF      <1>     test byte [arg1Flg], -1
   263 00000B28 744D                <1>     jz .fcbArgsDone
   264 00000B2A 0FB60572F5FFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   265 00000B31 488D3501F6FFFF      <1>     lea rsi, cmdBuffer
   266 00000B38 4801C6              <1>     add rsi, rax    ;Point to first argument
   267 00000B3B 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   268 00000B3F B801290000          <1>     mov eax, 2901h
   269 00000B44 CD41                <1>     int 41h
   270 00000B46 880558F5FFFF        <1>     mov byte [arg1FCBret], al
   271 00000B4C F60552F5FFFFFF      <1>     test byte [arg2Flg], -1
   272 00000B53 7422                <1>     jz .fcbArgsDone
   273 00000B55 0FB6054AF5FFFF      <1>     movzx eax, byte [arg2Off]
   274 00000B5C 488D35D6F5FFFF      <1>     lea rsi, cmdBuffer
   275 00000B63 4801C6              <1>     add rsi, rax    ;Point to first argument
   276 00000B66 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   277 00000B6A B801290000          <1>     mov eax, 2901h
   278 00000B6F CD41                <1>     int 41h
   279 00000B71 880530F5FFFF        <1>     mov byte [arg2FCBret], al
   280                              <1> .fcbArgsDone:
   281 00000B77 488D35BBF5FFFF      <1>     lea rsi, cmdBuffer
   282 00000B7E 488D1D9BF6FFFF      <1>     lea rbx, cmdName
   283 00000B85 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   284 00000B8A BAFFFF0000          <1>     mov edx, 0FFFFh
   285 00000B8F B5FF                <1>     mov ch, -1
   286 00000B91 CD4F                <1>     int 4Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   287                              <1>             ;        al = 0  if the command should be executed as usual
   288 00000B93 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   289 00000B98 BAFFFF0000          <1>     mov edx, 0FFFFh
   290 00000B9D 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   291 00000B9F CD4F                <1>     int 4Fh
   292 00000BA1 741D                <1>     jz .executeInternal
   293                              <1>     ;Here we execute externally and return to the prompt
   294                              <1>     ; as if it was an internal execution
   295 00000BA3 488D350FF5FFFF      <1>     lea rsi, inBuffer ;Point to this built buffer
   296 00000BAA 488D1DF7F4FFFF      <1>     lea rbx, cmdFcb
   297 00000BB1 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   298 00000BB6 BAFFFF0000          <1>     mov edx, 0FFFFh
   299 00000BBB B5FF                <1>     mov ch, -1
   300 00000BBD CD4F                <1>     int 4Fh 
   301                              <1>     return
    19                              <2> %%_ret:
    20 00000BBF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   302                              <1> .executeInternal:
   303                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   304                              <1> ;rsi points after the command terminator in the command tail
   305 00000BC0 488D1DA7F7FFFF      <1>     lea rbx, functionTable
   306                              <1> .nextEntry:
   307 00000BC7 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   308 00000BCA 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   309 00000BCD 743D                <1>     je .external      ;If so, check externally now
   310 00000BCF 380D4BF6FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   311 00000BD5 7529                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   312                              <1>     ;Here they have the same length so lets see if the name is the same
   313 00000BD7 56                  <1>     push rsi
   314                              <1>     ;ecx has the length to compare
   315 00000BD8 51                  <1>     push rcx
   316 00000BD9 488D7301            <1>     lea rsi, qword [rbx + 1]
   317 00000BDD 488D3D3DF6FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   318 00000BE4 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   319 00000BE6 59                  <1>     pop rcx
   320 00000BE7 5E                  <1>     pop rsi
   321 00000BE8 7516                <1>     jne .gotoNextEntry
   322                              <1>     ;Here it was found both strings are equal
   323 00000BEA 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   324 00000BEF 480FB71F            <1>     movzx rbx, word [rdi]
   325 00000BF3 488D3D06F4FFFF      <1>     lea rdi, startLbl
   326 00000BFA 4801FB              <1>     add rbx, rdi
   327 00000BFD FFD3                <1>     call rbx    ;Call this function...
   328                              <1>     return  ;... and return
    19                              <2> %%_ret:
    20 00000BFF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   329                              <1> .gotoNextEntry:
   330 00000C00 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   331 00000C07 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   332 00000C0A EBBB                <1>     jmp short .nextEntry
   333                              <1> 
   334                              <1> .external:
   335                              <1> ;Here we must search the CWD or all path componants before failing
   336                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
   337 00000C0C E925000000          <1>     jmp .dfltErrExit    ;Catch all for now
   338 00000C11 8B059AF4FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   339 00000C17 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   340 00000C1C 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   341 00000C21 3D20202020          <1>     cmp eax, "    " ;Only if we have four spaces do we proceed here
   342 00000C26 741A                <1>     je .noExt
   343 00000C28 E817000000          <1>     call checkExtensionExec ;ZF=ZE => Executable
   344 00000C2D 7507                <1>     jnz .dfltErrExit
   345                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
   346 00000C2F 7205                <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
   347                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
   348                              <1>     ;So it is a com or exe that we are searching for for now
   349                              <1>     
   350 00000C31 E900000000          <1>     jmp .dfltErrExit
   351                              <1> .dfltErrExit:
   352 00000C36 488D1503F8FFFF      <1>     lea rdx, badCmd
   353 00000C3D B409                <1>     mov ah, 09h
   354 00000C3F CD41                <1>     int 41h
   355                              <1>     return
    19                              <2> %%_ret:
    20 00000C41 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   356                              <1> .noExt:
   357                              <1>     ;Here we must search for the first file with a valid extension.
   358                              <1>     ;Use bl as flags. bl[0] => COM found, bl[1] => EXE found, bl[2] => BAT found
   359 00000C42 31DB                <1>     xor ebx, ebx
   360                              <1>     ;If relative path, search CWD. If absolute path, search absolute path.
   361                              <1>     ;If nothing, only then loop through each dir in the path for provided
   362                              <1>     ; pathspec (relative case), or filename (absolute case)
   363                              <1> 
   364                              <1> 
   365                              <1> 
   366                              <1> checkExtensionExec:
   367                              <1> ;Checks the extension field of cmdFcb is .COM, .EXE, .BAT in that order
   368                              <1> ;Returns: ZF=ZE if executable. ZF=NZ if not executable.
   369                              <1> ;         If ZF=ZE and CF=CY => Batch file
   370 00000C44 8B0567F4FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   371 00000C4A 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   372 00000C4F 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   373 00000C54 3D434F4D20          <1>     cmp eax, "COM "
   374                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000C59 74(41)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   375 00000C5B 3D45584520          <1>     cmp eax, "EXE "
   376                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000C60 74(41)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   377 00000C62 3D42415420          <1>     cmp eax, "BAT "
   378                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000C67 75(41)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   379 00000C69 F9                  <1>     stc
   380                              <1>     return
    19                              <2> %%_ret:
    20 00000C6A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   381                              <1> 
   382                              <1> checkAndSetupRedir:
   383                              <1> ;Checks and sets up redir as appropriate
   384                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   385                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   386                              <1> ;Output: ZF=NZ => No redir
   387                              <1> ;        ZF=ZY => Redir
   388                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   389                              <1> ;CF=CY if pipe set or an embedded CR found
   390 00000C6B 57                  <1>     push rdi
   391 00000C6C 3C3C                <1>     cmp al, "<"
   392 00000C6E 740B                <1>     je .inputRedir
   393 00000C70 3C3E                <1>     cmp al, ">"
   394 00000C72 742A                <1>     je .outputRedir
   395 00000C74 3C7C                <1>     cmp al, "|"
   396 00000C76 7454                <1>     je .pipeSetup
   397 00000C78 F8                  <1>     clc
   398                              <1> .redirExit:
   399 00000C79 5F                  <1>     pop rdi
   400                              <1>     return
    19                              <2> %%_ret:
    20 00000C7A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   401                              <1> .inputRedir:
   402 00000C7B C6051EF4FFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   403 00000C82 488D3DA5F5FFFF      <1>     lea rdi, rdrInFilespec
   404 00000C89 E8C0080000          <1>     call skipSpaces ;Skip spaces between < and the filespec
   405 00000C8E E845000000          <1>     call copyCommandTailItem
   406 00000C93 72E4                <1>     jc .redirExit
   407 00000C95 E8B4080000          <1>     call skipSpaces
   408 00000C9A 30C0                <1>     xor al, al
   409 00000C9C EBDB                <1>     jmp short .redirExit
   410                              <1> .outputRedir:
   411 00000C9E C605FCF3FFFF01      <1>     mov byte [redirOut], 1
   412 00000CA5 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   413 00000CA8 7506                <1>     jne .notDouble
   414 00000CAA FE05F1F3FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   415                              <1> .notDouble:
   416 00000CB0 488D3DC6F5FFFF      <1>     lea rdi, rdrOutFilespec
   417 00000CB7 E892080000          <1>     call skipSpaces
   418 00000CBC E817000000          <1>     call copyCommandTailItem
   419 00000CC1 72B6                <1>     jc .redirExit
   420 00000CC3 E886080000          <1>     call skipSpaces
   421 00000CC8 30C0                <1>     xor al, al
   422 00000CCA EBAD                <1>     jmp short .redirExit
   423                              <1> .pipeSetup:
   424 00000CCC C605BDF3FFFFFF      <1>     mov byte [pipeFlag], -1
   425 00000CD3 30C0                <1>     xor al, al
   426 00000CD5 F9                  <1>     stc
   427 00000CD6 5F                  <1>     pop rdi
   428                              <1>     return
    19                              <2> %%_ret:
    20 00000CD7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   429                              <1> 
   430                              <1> copyCommandTailItem:
   431                              <1> ;Copies a sentence from the command tail until a terminator is found.
   432                              <1> ;Stores a terminating null in the destination
   433                              <1> ;Input: rsi = Start of the item to copy
   434                              <1> ;       rdi = Location for copy
   435                              <1> ;Output: Sentence copied with a null terminator inserted.
   436                              <1> ; If CF=CY, embedded CR encountered
   437 00000CD8 AC                  <1>     lodsb
   438 00000CD9 3C0D                <1>     cmp al, CR
   439 00000CDB 741A                <1>     je .endOfInput
   440 00000CDD E838080000          <1>     call isALterminator
   441 00000CE2 741A                <1>     jz .exit
   442 00000CE4 3A0539F3FFFF        <1>     cmp al, byte [pathSep]
   443 00000CEA 7412                <1>     je .exit
   444 00000CEC 3A0532F3FFFF        <1>     cmp al, byte [switchChar]
   445 00000CF2 740A                <1>     je .exit
   446 00000CF4 AA                  <1>     stosb
   447 00000CF5 EBE1                <1>     jmp short copyCommandTailItem
   448                              <1> .endOfInput:
   449 00000CF7 E802000000          <1>     call .exit
   450 00000CFC F9                  <1>     stc 
   451                              <1>     return
    19                              <2> %%_ret:
    20 00000CFD C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   452                              <1> .exit:
   453 00000CFE 30C0                <1>     xor al, al
   454 00000D00 AA                  <1>     stosb
   455                              <1>     return
    19                              <2> %%_ret:
    20 00000D01 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   456                              <1> 
   457                              <1> 
   458                              <1> int4Eh:   ;Interrupt interface for parsing and executing command lines
   459                              <1> ;Input: rsi points to the count byte of a command line
   460 00000D02 4150                <1>     push r8
   461 00000D04 4151                <1>     push r9
   462 00000D06 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   463 00000D08 CD41                <1>     int 41h
   464 00000D0A 52                  <1>     push rdx    ;Save on the stack
   465 00000D0B 488D1DEEF1FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   466 00000D12 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   467 00000D14 CD41                <1>     int 41h
   468 00000D16 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   469 00000D19 4989D9              <1>     mov r9, rbx
   470 00000D1C 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   471 00000D23 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   472 00000D28 F348A5              <1>     rep movsq   ;Copy command line over
   473                              <1>     ;call doCommandLine
   474 00000D2B 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   475 00000D2C B450                <1>     mov ah, 50h ;Set Current PSP
   476 00000D2E CD41                <1>     int 41h
   477 00000D30 4159                <1>     pop r9
   478 00000D32 4158                <1>     pop r8
   479 00000D34 48CF                <1>     iretq
    15                                  %include "./Source/Utils/COMMAND/Source/cmdFunc.asm"
    16                              <1> dir:
    17 00000D36 C6050FF6FFFF00      <1>     mov byte [dirPrnType], 0    ;Clear DIR flags
    18 00000D3D C60509F6FFFF00      <1>     mov byte [dirLineCtr], 0
    19 00000D44 C60503F6FFFF00      <1>     mov byte [dirFileCtr], 0
    20 00000D4B C605FDF5FFFF00      <1>     mov byte [dirPathOff], 0    
    21 00000D52 C605F7F5FFFFFF      <1>     mov byte [dirVolLbl], -1    ;Mark as no label
    22                              <1>     ;Start by scanning for the switches
    23 00000D59 488D3DDAF3FFFF      <1>     lea rdi, cmdBuffer + 1  ;Goto command line input chars count
    24 00000D60 0FB60F              <1>     movzx ecx, byte [rdi]   ;Get number of chars typed
    25 00000D63 48FFC7              <1>     inc rdi ;Goto first char typed in
    26 00000D66 4889FE              <1>     mov rsi, rdi    ;Use rsi as start of buffer counter
    27 00000D69 8A05B5F2FFFF        <1>     mov al, byte [switchChar]   ;Scan for switchchars
    28                              <1> .switchScan:
    29 00000D6F F2AE                <1>     repne scasb ;Scan for a switchchar
    30 00000D71 67E322              <1>     jecxz .switchScanDone
    31 00000D74 8A07                <1>     mov al, byte [rdi]  ;Get the byte pointed to by rdi
    32 00000D76 24DF                <1>     and al, 0DFh    ;UC it
    33 00000D78 3C57                <1>     cmp al, "W" ;Wide print mode?
    34 00000D7A 7509                <1>     jne .notWideSw
    35 00000D7C 800DC9F5FFFF01      <1>     or byte [dirPrnType], 1 ;Set the correct bit
    36 00000D83 EBEA                <1>     jmp short .switchScan
    37                              <1> .notWideSw:
    38 00000D85 3C50                <1>     cmp al, "P" ;Pause mode?
    39 00000D87 0F856E030000        <1>     jne .badParam   ;If a switch other than /P or /W, fail
    40 00000D8D 800DB8F5FFFF02      <1>     or byte [dirPrnType], 2 ;Set correct bit
    41 00000D94 EBD9                <1>     jmp short .switchScan
    42                              <1> .switchScanDone:
    43                              <1> ;If no args, only switches, we search CWD
    44                              <1> ;If one arg, search that 
    45                              <1> ;If more than one, fail
    46 00000D96 488D3D9EF3FFFF      <1>     lea rdi, cmdBuffer + 2
    47 00000D9D 4889FE              <1>     mov rsi, rdi
    48 00000DA0 E8A9070000          <1>     call skipSpaces ;Skip leading spaces
    49 00000DA5 4881C603000000      <1>     add rsi, 3  ;Go past the DIR (always three chars)
    50 00000DAC 803E0D              <1>     cmp byte [rsi], CR
    51 00000DAF 7436                <1>     je .eocReached
    52                              <1> .pathSearch:
    53 00000DB1 E898070000          <1>     call skipSpaces ;Now skip intermediate spaces to next non-space
    54 00000DB6 8A0568F2FFFF        <1>     mov al, byte [switchChar]   ;Is this a switch?
    55 00000DBC 3806                <1>     cmp byte [rsi], al
    56 00000DBE 741B                <1>     je .pathSearchSwitch    ;If a switch, skip it, find switch terminator
    57 00000DC0 803D88F5FFFF00      <1>     cmp byte [dirPathOff], 0    ;Did we previously get an argument?
    58 00000DC7 0F852E030000        <1>     jne .badParam ;If so, error
    59 00000DCD 4889F0              <1>     mov rax, rsi    ;Else, compute the offset in the cmdBuffer
    60 00000DD0 4829F8              <1>     sub rax, rdi    ;Offset from the cmdBuffer + 2
    61 00000DD3 0402                <1>     add al, 2       ;Make it an offset from cmdBuffer
    62 00000DD5 880574F5FFFF        <1>     mov byte [dirPathOff], al   ;And save it!
    63                              <1> .pathSearchSwitch:
    64 00000DDB E805070000          <1>     call findTerminatorOrEOC
    65 00000DE0 7205                <1>     jc .eocReached
    66 00000DE2 48FFC6              <1>     inc rsi ;Go to next char
    67 00000DE5 EBCA                <1>     jmp short .pathSearch
    68                              <1> .eocReached:
    69 00000DE7 803D61F5FFFF00      <1>     cmp byte [dirPathOff], 0
    70 00000DEE 7405                <1>     je .dirCWD
    71 00000DF0 E906030000          <1>     jmp .badParam   ;Temp measure
    72                              <1> .dirCWD:
    73                              <1>     ;Build current working dir and append a \*.* to it 
    74                              <1>     ;First we search the root for a label
    75 00000DF5 488D3D61F5FFFF      <1>     lea rdi, dirVolPathBuf
    76 00000DFC 488D35C9F4FFFF      <1>     lea rsi, searchSpec ;Will need to create the same X:\ here too
    77 00000E03 E8C9060000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
    78 00000E08 88055FF5FFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
    79 00000E0E 0441                <1>     add al, "A"
    80 00000E10 B43A                <1>     mov ah, ":" ;ax has X: now to store 
    81 00000E12 66AB                <1>     stosw
    82 00000E14 668906              <1>     mov word [rsi], ax
    83 00000E17 4881C602000000      <1>     add rsi, 2
    84 00000E1E 8A05FFF1FFFF        <1>     mov al, byte [pathSep]
    85 00000E24 AA                  <1>     stosb
    86 00000E25 8806                <1>     mov byte [rsi], al
    87 00000E27 B82A2E2A00          <1>     mov eax, 002A2E2Ah  ;*.*,0
    88 00000E2C AB                  <1>     stosd
    89 00000E2D B42F                <1>     mov ah, 2Fh ;Get current DTA in rbx
    90 00000E2F CD41                <1>     int 41h 
    91 00000E31 53                  <1>     push rbx    ;Preserve it on the stack
    92 00000E32 488D157FF2FFFF      <1>     lea rdx, cmdFFBlock
    93 00000E39 B41A                <1>     mov ah, 1Ah ;Set DTA to internal ffblock
    94 00000E3B CD41                <1>     int 41h
    95 00000E3D 488D1519F5FFFF      <1>     lea rdx, dirVolPathBuf
    96 00000E44 66B90800            <1>     mov cx, dirVolumeID
    97 00000E48 B44E                <1>     mov ah, 4Eh ;Find first
    98 00000E4A CD41                <1>     int 41h
    99 00000E4C 7221                <1>     jc .skipVolLbl
   100 00000E4E 488D3581F2FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   101 00000E55 488D3DF4F4FFFF      <1>     lea rdi, dirVolLbl
   102 00000E5C B90B000000          <1>     mov ecx, 11 ;Get the 11 chars of the volume label
   103                              <1> .dirLblCopy:
   104 00000E61 AC                  <1>     lodsb   ;Get the first char
   105 00000E62 3C00                <1>     cmp al, 0
   106 00000E64 7409                <1>     je .skipVolLbl
   107 00000E66 3C2E                <1>     cmp al, "."
   108 00000E68 7401                <1>     je .dirLblSkipStore
   109 00000E6A AA                  <1>     stosb
   110                              <1> .dirLblSkipStore:
   111 00000E6B FFC9                <1>     dec ecx
   112 00000E6D 75F2                <1>     jnz .dirLblCopy
   113                              <1> .skipVolLbl:
   114                              <1> ;Print volume label information now
   115 00000E6F E8F8000000          <1>     call .dirPrintVolInfo
   116 00000E74 488D3D54F4FFFF      <1>     lea rdi, searchSpec + 3 ;Go to the fourth char in the field
   117 00000E7B B447                <1>     mov ah, 47h ;Get Current Working Directory
   118 00000E7D 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   119 00000E80 8A1546F4FFFF        <1>     mov dl, byte [searchSpec]
   120 00000E86 80EA40              <1>     sub dl, "@" ;Get 1 based drive letter
   121 00000E89 CD41                <1>     int 41h ;Overrwrite it with the current directory
   122 00000E8B 488D3D3AF4FFFF      <1>     lea rdi, searchSpec
   123 00000E92 E83F060000          <1>     call strlen
   124 00000E97 FFC9                <1>     dec ecx
   125 00000E99 C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   126 00000E9D 488D152CF8FFFF      <1>     lea rdx, dirMain
   127 00000EA4 B409                <1>     mov ah, 09h
   128 00000EA6 CD41                <1>     int 41h
   129 00000EA8 4889FA              <1>     mov rdx, rdi    ;Print the current directory we are working on
   130 00000EAB B409                <1>     mov ah, 09h
   131 00000EAD CD41                <1>     int 41h
   132 00000EAF 488D1532F5FFFF      <1>     lea rdx, crlf
   133 00000EB6 B409                <1>     mov ah, 09h
   134 00000EB8 CD41                <1>     int 41h
   135 00000EBA 488D1527F5FFFF      <1>     lea rdx, crlf   ;Add an extra free line
   136 00000EC1 B409                <1>     mov ah, 09h
   137 00000EC3 CD41                <1>     int 41h
   138                              <1>     ;Now we search for the files
   139 00000EC5 8A0558F1FFFF        <1>     mov al, byte [pathSep]
   140 00000ECB 38440FFF            <1>     cmp byte [rdi + rcx - 1], al
   141 00000ECF 7405                <1>     je .noAddSlash  ;Deals with special case of root dir
   142 00000ED1 88040F              <1>     mov byte [rdi + rcx], al
   143 00000ED4 FFC1                <1>     inc ecx
   144                              <1> .noAddSlash:
   145 00000ED6 C7040F2A2E2A00      <1>     mov dword [rdi + rcx], 002A2E2Ah ;and add a *.*,0
   146 00000EDD 4889FA              <1>     mov rdx, rdi    ;Ptr to search for in rdx
   147 00000EE0 B911000000          <1>     mov ecx, dirReadOnly | dirDirectory
   148 00000EE5 B44E                <1>     mov ah, 4Eh ;Find first
   149 00000EE7 CD41                <1>     int 41h
   150 00000EE9 720B                <1>     jc .dirNoMoreFiles
   151                              <1> .findNext:
   152 00000EEB E8F0000000          <1>     call .dirPrintFileData  ;Print the file information
   153 00000EF0 B44F                <1>     mov ah, 4Fh
   154 00000EF2 CD41                <1>     int 41h
   155 00000EF4 73F5                <1>     jnc .findNext 
   156                              <1> .dirNoMoreFiles:
   157 00000EF6 5A                  <1>     pop rdx 
   158 00000EF7 B41A                <1>     mov ah, 1Ah ;Return back the original DTA
   159 00000EF9 CD41                <1>     int 41h
   160 00000EFB F6054AF4FFFF01      <1>     test byte [dirPrnType], 1
   161 00000F02 740B                <1>     jz .dirNoEndNewLine
   162 00000F04 488D15DDF4FFFF      <1>     lea rdx, crlf   ;Only need this for /W
   163 00000F0B B409                <1>     mov ah, 09h
   164 00000F0D CD41                <1>     int 41h
   165                              <1> .dirNoEndNewLine:
   166                              <1>     ;Now we print the number of files and the number of bytes on the disk
   167 00000F0F B908000000          <1>     mov ecx, 8  ;Print 8 spaces
   168 00000F14 B220                <1>     mov dl, " "
   169                              <1> .dirNumOffSpc:
   170 00000F16 B402                <1>     mov ah, 02h
   171 00000F18 CD41                <1>     int 41h
   172 00000F1A FFC9                <1>     dec ecx
   173 00000F1C 75F8                <1>     jnz .dirNumOffSpc
   174 00000F1E 31D2                <1>     xor edx, edx
   175 00000F20 0FB60527F4FFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   176 00000F27 E8D3070000          <1>     call printDecimalWord
   177 00000F2C 488D15FBF5FFFF      <1>     lea rdx, dirOk
   178 00000F33 B409                <1>     mov ah, 09h
   179 00000F35 CD41                <1>     int 41h
   180 00000F37 488D15E9F8FFFF      <1>     lea rdx, threeSpc
   181 00000F3E B409                <1>     mov ah, 09h
   182 00000F40 CD41                <1>     int 41h
   183 00000F42 B800360000          <1>     mov eax, 3600h ;Get disk info
   184 00000F47 8A1520F4FFFF        <1>     mov dl, byte [dirDrv]
   185 00000F4D CD41                <1>     int 41h ;Get disk free space info
   186 00000F4F 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   187 00000F52 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   188 00000F55 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   189 00000F57 F7E1                <1>     mul ecx ;Get bytes per cluster
   190 00000F59 F7E3                <1>     mul ebx ;Multiply to the number of free clusters on the disk
   191                              <1>     ;edx:eax now has the number of free bytes on the disk
   192 00000F5B E89F070000          <1>     call printDecimalWord
   193 00000F60 488D15D1F5FFFF      <1>     lea rdx, bytesOk
   194 00000F67 B409                <1>     mov ah, 09h
   195 00000F69 CD41                <1>     int 41h
   196                              <1>     return
    19                              <2> %%_ret:
    20 00000F6B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   197                              <1> 
   198                              <1> .dirPrintVolInfo:
   199 00000F6C 488D1575F4FFFF      <1>     lea rdx, crlf
   200 00000F73 B409                <1>     mov ah, 09h
   201 00000F75 CD41                <1>     int 41h
   202 00000F77 488D15C5F6FFFF      <1>     lea rdx, volMes
   203 00000F7E B409                <1>     mov ah, 09h
   204 00000F80 CD41                <1>     int 41h
   205 00000F82 8A15D5F3FFFF        <1>     mov dl, byte [dirVolPathBuf]   ;Print the drive letter out
   206 00000F88 B402                <1>     mov ah, 02h
   207 00000F8A CD41                <1>     int 41h
   208 00000F8C 803DBCF3FFFFFF      <1>     cmp byte [dirPathOff], -1   ;No volume ID marker
   209 00000F93 7517                <1>     jne .dirVolIDOk
   210 00000F95 488D15BEF6FFFF      <1>     lea rdx, volNo
   211 00000F9C B409                <1>     mov ah, 09h
   212 00000F9E CD41                <1>     int 41h
   213 00000FA0 488D1541F4FFFF      <1>     lea rdx, crlf
   214 00000FA7 B409                <1>     mov ah, 09h
   215 00000FA9 CD41                <1>     int 41h
   216                              <1>     return
    19                              <2> %%_ret:
    20 00000FAB C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   217                              <1> .dirVolIDOk:
   218 00000FAC 488D15A2F6FFFF      <1>     lea rdx, volOk
   219 00000FB3 B409                <1>     mov ah, 09h
   220 00000FB5 CD41                <1>     int 41h
   221 00000FB7 488D3D92F3FFFF      <1>     lea rdi, dirVolLbl
   222 00000FBE E813050000          <1>     call strlen
   223 00000FC3 FFC9                <1>     dec ecx
   224 00000FC5 C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   225 00000FC9 488D1580F3FFFF      <1>     lea rdx, dirVolLbl
   226 00000FD0 B409                <1>     mov ah, 09h
   227 00000FD2 CD41                <1>     int 41h
   228 00000FD4 488D150DF4FFFF      <1>     lea rdx, crlf
   229 00000FDB B409                <1>     mov ah, 09h
   230 00000FDD CD41                <1>     int 41h
   231                              <1>     return
    19                              <2> %%_ret:
    20 00000FDF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   232                              <1> 
   233                              <1> .dirPrintFileData:
   234                              <1> ;Use fcbCmdSpec to build the file name with space
   235                              <1> ;Start by print the name (same for both cases)
   236 00000FE0 488D35EFF0FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   237 00000FE7 488D3D1AF2FFFF      <1>     lea rdi, fcbCmdSpec
   238 00000FEE E8B4050000          <1>     call asciiFilenameToFCB
   239 00000FF3 488D150EF2FFFF      <1>     lea rdx, fcbCmdSpec
   240 00000FFA B908000000          <1>     mov ecx, 8  ;Print 8 chars
   241 00000FFF BB01000000          <1>     mov ebx, 1  ;STDOUT
   242 00001004 B440                <1>     mov ah, 40h ;Write handle
   243 00001006 CD41                <1>     int 41h
   244 00001008 52                  <1>     push rdx
   245 00001009 B220                <1>     mov dl, " "
   246 0000100B B402                <1>     mov ah, 02h ;Print char
   247 0000100D CD41                <1>     int 41h
   248 0000100F 5A                  <1>     pop rdx
   249 00001010 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   250 00001017 B903000000          <1>     mov ecx, 3  ;Print three chars
   251 0000101C BB01000000          <1>     mov ebx, 1  ;STDOUT
   252 00001021 B440                <1>     mov ah, 40h ;Write handle
   253 00001023 CD41                <1>     int 41h
   254 00001025 F60520F3FFFF01      <1>     test byte [dirPrnType], 1
   255 0000102C 0F8586000000        <1>     jnz .widePrint
   256                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   257                              <1>     ;Now check if a DIR
   258 00001032 F60594F0FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   259 00001039 7418                <1>     jz .dirPrintNotDir
   260 0000103B 488D1504F5FFFF      <1>     lea rdx, dirLbl
   261 00001042 B409                <1>     mov ah, 09h
   262 00001044 CD41                <1>     int 41h
   263 00001046 488D15DAF7FFFF      <1>     lea rdx, threeSpc
   264 0000104D B409                <1>     mov ah, 09h
   265 0000104F CD41                <1>     int 41h
   266 00001051 EB4D                <1>     jmp short .dirPrintFileDT
   267                              <1> .dirPrintNotDir:
   268                              <1> ;Here we print the file size
   269 00001053 B220                <1>     mov dl, " "
   270 00001055 B402                <1>     mov ah, 02h
   271 00001057 CD41                <1>     int 41h
   272 00001059 8B0573F0FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   273 0000105F E8DB060000          <1>     call getDecimalWord
   274 00001064 4889CB              <1>     mov rbx, rcx
   275 00001067 480FCB              <1>     bswap rbx
   276 0000106A B908000000          <1>     mov ecx, 8
   277                              <1> .dirPrintFileSizePrep:
   278 0000106F 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   279 00001071 7514                <1>     jne .dirPrintFileSize
   280 00001073 B402                <1>     mov ah, 02h
   281 00001075 B220                <1>     mov dl, " "
   282 00001077 CD41                <1>     int 41h
   283 00001079 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   284 0000107D FFC9                <1>     dec ecx
   285 0000107F 81F901000000        <1>     cmp ecx, 1
   286 00001085 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   287                              <1> .dirPrintFileSize:
   288 00001087 88DA                <1>     mov dl, bl
   289 00001089 B402                <1>     mov ah, 02h
   290 0000108B CD41                <1>     int 41h
   291 0000108D 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   292 00001091 FFC9                <1>     dec ecx
   293 00001093 75F2                <1>     jnz .dirPrintFileSize
   294 00001095 488D158BF7FFFF      <1>     lea rdx, threeSpc
   295 0000109C B409                <1>     mov ah, 09h
   296 0000109E CD41                <1>     int 41h
   297                              <1> .dirPrintFileDT:
   298 000010A0 488D1584F7FFFF      <1>     lea rdx, twoSpc
   299 000010A7 B409                <1>     mov ah, 09h
   300 000010A9 CD41                <1>     int 41h
   301                              <1>     ;Here we print the DATE AND TIME eventually
   302 000010AB 488D1536F3FFFF      <1>     lea rdx, crlf
   303 000010B2 B409                <1>     mov ah, 09h
   304 000010B4 CD41                <1>     int 41h
   305 000010B6 EB0B                <1>     jmp short .dirPrintNameExit
   306                              <1> .widePrint:
   307                              <1> ;If /W, print name space ext space space space space
   308 000010B8 488D1563F7FFFF      <1>     lea rdx, fourSpc
   309 000010BF B409                <1>     mov ah, 09h ;Print string
   310 000010C1 CD41                <1>     int 41h
   311                              <1> .dirPrintNameExit:
   312 000010C3 FE0585F2FFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   313 000010C9 FE057EF2FFFF        <1>     inc byte [dirLineCtr]
   314 000010CF 803D77F2FFFF17      <1>     cmp byte [dirLineCtr], 23
   315                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 000010D6 7401                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 000010D8 C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   316 000010D9 488D158EF4FFFF      <1>     lea rdx, pauseMes
   317 000010E0 B409                <1>     mov ah, 09h
   318 000010E2 CD41                <1>     int 41h
   319 000010E4 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   320 000010E6 CD41                <1>     int 41h
   321 000010E8 C6055EF2FFFF00      <1>     mov byte [dirLineCtr], 0
   322 000010EF 488D15F2F2FFFF      <1>     lea rdx, crlf   ;Force new line
   323 000010F6 B409                <1>     mov ah, 09h
   324 000010F8 CD41                <1>     int 41h
   325                              <1>     return
    19                              <2> %%_ret:
    20 000010FA C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   326                              <1>     
   327                              <1> .badParam:
   328 000010FB 488D158BF4FFFF      <1>     lea rdx, badParm
   329 00001102 B409                <1>     mov ah, 09h
   330 00001104 CD41                <1>     int 41h
   331                              <1>     return
    19                              <2> %%_ret:
    20 00001106 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   332                              <1> 
   333                              <1> chdir:
   334 00001107 F60594EFFFFFFF      <1>     test byte [arg1Flg], -1
   335 0000110E 754D                <1>     jnz .changeDir
   336                              <1>     ;Print CWD
   337                              <1> .printCWD:
   338 00001110 E815030000          <1>     call putCWDInPrompt ;Exactly the same procedure
   339 00001115 E8A5020000          <1>     call printCRLF
   340                              <1>     return
    19                              <2> %%_ret:
    20 0000111A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   341                              <1> .printDiskCWD:
   342                              <1> ;Print CWD for a specified drive
   343 0000111B 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   344 0000111F 88D0                <1>     mov al, dl
   345 00001121 0440                <1>     add al, "@" ;Get the UC letter
   346 00001123 B43A                <1>     mov ah, ":"
   347 00001125 488D3DA0F1FFFF      <1>     lea rdi, searchSpec
   348 0000112C 66AB                <1>     stosw   ;Store X:, rdi+=2
   349 0000112E 8A05EFEEFFFF        <1>     mov al, byte [pathSep]
   350 00001134 AA                  <1>     stosb   ;Store pathSep, inc rdi
   351 00001135 B447                <1>     mov ah, 47h ;Get Current Working Directory
   352 00001137 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   353 0000113A CD41                <1>     int 41h
   354 0000113C E895030000          <1>     call strlen
   355 00001141 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   356 00001147 B440                <1>     mov ah, 40h ;Write to handle
   357 00001149 BB01000000          <1>     mov ebx, 1  ;STDOUT
   358 0000114E 488D1577F1FFFF      <1>     lea rdx, searchSpec
   359 00001155 CD41                <1>     int 41h
   360 00001157 E863020000          <1>     call printCRLF
   361                              <1>     return
    19                              <2> %%_ret:
    20 0000115C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   362                              <1> .changeDir:
   363 0000115D 8A0541EFFFFF        <1>     mov al, byte [arg1FCBret]
   364 00001163 3CFF                <1>     cmp al, -1 
   365 00001165 743C                <1>     je .badDrv  ;IF the drive is good, but FCB name blank, either X: or \ 
   366 00001167 4180785D20          <1>     cmp byte [r8 + fcb1 + fcb.filename], " "
   367 0000116C 7520                <1>     jne .getFQPath
   368                              <1>     ;Now we double check that on the command line we have . or ..
   369 0000116E 0FB6052EEFFFFF      <1>     movzx eax, byte [arg1Off]
   370 00001175 488D35BDEFFFFF      <1>     lea rsi, cmdBuffer
   371 0000117C 4801C6              <1>     add rsi, rax
   372 0000117F 8A059EEEFFFF        <1>     mov al, byte [pathSep]
   373 00001185 3806                <1>     cmp byte [rsi], al  ;Is the first char a pathsep?
   374 00001187 7405                <1>     je .getFQPath
   375 00001189 803E2E              <1>     cmp byte [rsi], "."
   376 0000118C 758D                <1>     jne .printDiskCWD
   377                              <1>     ;If the path is . or .., its acceptable, else fail
   378                              <1> .getFQPath:
   379 0000118E E89E040000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   380 00001193 721D                <1>     jc .badDir  ;If this returns CF=CY, its a badDir
   381 00001195 488D1530F1FFFF      <1>     lea rdx, searchSpec
   382 0000119C B43B                <1>     mov ah, 3Bh ;CHDIR
   383 0000119E CD41                <1>     int 41h
   384 000011A0 7210                <1>     jc .badDir
   385                              <1>     return
    19                              <2> %%_ret:
    20 000011A2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   386                              <1> 
   387                              <1> .badDrv:
   388 000011A3 488D15A6F3FFFF      <1>     lea rdx, badDrv
   389 000011AA B800090000          <1>     mov eax, 0900h
   390 000011AF CD41                <1>     int 41h
   391                              <1>     return
    19                              <2> %%_ret:
    20 000011B1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   392                              <1> .badDir:
   393 000011B2 488D15AFF4FFFF      <1>     lea rdx, badDir
   394 000011B9 B800090000          <1>     mov eax, 0900h
   395 000011BE CD41                <1>     int 41h
   396                              <1>     return
    19                              <2> %%_ret:
    20 000011C0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   397                              <1> 
   398                              <1> 
   399                              <1> mkdir:
   400 000011C1 F605DAEEFFFFFF      <1>     test byte [arg1Flg], -1
   401 000011C8 744D                <1>     jz .badParams
   402 000011CA F605D4EEFFFFFF      <1>     test byte [arg2Flg], -1
   403 000011D1 7544                <1>     jnz .badParams
   404                              <1>     ;We have exactly one argument
   405 000011D3 8A05CBEEFFFF        <1>     mov al, byte [arg1FCBret]
   406 000011D9 3CFF                <1>     cmp al, -1 
   407 000011DB 742B                <1>     je .badDrv  ;If a drive was specified and was bad, jump
   408 000011DD E84F040000          <1>     call buildCommandPath
   409 000011E2 7215                <1>     jc .badMake
   410 000011E4 488D15E1F0FFFF      <1>     lea rdx, searchSpec
   411 000011EB B800390000          <1>     mov eax, 3900h  ;MKDIR
   412 000011F0 CD41                <1>     int 41h
   413 000011F2 7205                <1>     jc .badMake   ;Return if not carry
   414 000011F4 B40D                <1>     mov ah, 0Dh
   415 000011F6 CD41                <1>     int 41h ;Flush to disk
   416                              <1>     return
    19                              <2> %%_ret:
    20 000011F8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   417                              <1> .badMake:   ;Else, bad make
   418 000011F9 488D157CF4FFFF      <1>     lea rdx, badMD
   419 00001200 B800090000          <1>     mov eax, 0900h
   420 00001205 CD41                <1>     int 41h
   421                              <1>     return
    19                              <2> %%_ret:
    20 00001207 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   422                              <1> .badDrv:
   423 00001208 488D1541F3FFFF      <1>     lea rdx, badDrv
   424 0000120F B800090000          <1>     mov eax, 0900h
   425 00001214 CD41                <1>     int 41h
   426                              <1>     return
    19                              <2> %%_ret:
    20 00001216 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   427                              <1> .badParams:
   428 00001217 488D15C6F5FFFF      <1>     lea rdx, badArgs
   429 0000121E B800090000          <1>     mov eax, 0900h
   430 00001223 CD41                <1>     int 41h
   431                              <1>     return
    19                              <2> %%_ret:
    20 00001225 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   432                              <1> 
   433                              <1> rmdir:
   434 00001226 F60575EEFFFFFF      <1>     test byte [arg1Flg], -1
   435 0000122D 744D                <1>     jz .badParams
   436 0000122F F6056FEEFFFFFF      <1>     test byte [arg2Flg], -1
   437 00001236 7544                <1>     jnz .badParams
   438                              <1>     ;We have exactly one argument
   439 00001238 8A0566EEFFFF        <1>     mov al, byte [arg1FCBret]
   440 0000123E 3CFF                <1>     cmp al, -1 
   441 00001240 742B                <1>     je .badDrv  ;If a drive was specified and was bad, jump
   442 00001242 E8EA030000          <1>     call buildCommandPath
   443 00001247 7215                <1>     jc .badRemove
   444 00001249 488D157CF0FFFF      <1>     lea rdx, searchSpec
   445 00001250 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   446 00001255 CD41                <1>     int 41h
   447 00001257 7205                <1>     jc .badRemove   ;Return if not carry
   448 00001259 B40D                <1>     mov ah, 0Dh
   449 0000125B CD41                <1>     int 41h ;Flush to disk
   450                              <1>     return
    19                              <2> %%_ret:
    20 0000125D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   451                              <1> .badRemove:   ;Else, bad make
   452 0000125E 488D1534F4FFFF      <1>     lea rdx, badRD
   453 00001265 B800090000          <1>     mov eax, 0900h
   454 0000126A CD41                <1>     int 41h
   455                              <1>     return
    19                              <2> %%_ret:
    20 0000126C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   456                              <1> .badDrv:
   457 0000126D 488D15DCF2FFFF      <1>     lea rdx, badDrv
   458 00001274 B800090000          <1>     mov eax, 0900h
   459 00001279 CD41                <1>     int 41h
   460                              <1>     return
    19                              <2> %%_ret:
    20 0000127B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   461                              <1> .badParams:
   462 0000127C 488D1561F5FFFF      <1>     lea rdx, badArgs
   463 00001283 B800090000          <1>     mov eax, 0900h
   464 00001288 CD41                <1>     int 41h
   465                              <1>     return
    19                              <2> %%_ret:
    20 0000128A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   466                              <1> erase:
   467                              <1> date:
   468                              <1> time:
   469                              <1> copy:
   470                              <1> ctty:
   471                              <1>     return
    19                              <2> %%_ret:
    20 0000128B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   472                              <1> cls:  
   473 0000128C B800440000          <1>     mov eax, 4400h  ;Get device info
   474 00001291 BB01000000          <1>     mov ebx, 1      ;for handle 1
   475 00001296 CD41                <1>     int 41h         ;in dx
   476 00001298 F7C280000000        <1>     test edx, devCharDev
   477 0000129E 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   478 000012A0 F7C210000000        <1>     test edx, charDevFastOut
   479 000012A6 743E                <1>     jz .doAnsi
   480                              <1>     ;Test if Int 49h uses Int 30h
   481                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   482                              <1>     ;Int 49h MUST be terminated with a IRETQ, within 1024 bytes
   483 000012A8 B849350000          <1>     mov eax, 3549h  ;Get the vector for interrupt 49h
   484 000012AD CD41                <1>     int 41h
   485                              <1> .biosCheck:
   486 000012AF 66813BCD30          <1>     cmp word [rbx], 30CDh
   487 000012B4 740C                <1>     je .biosConfirmed
   488 000012B6 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   489 000012BB 7429                <1>     je .doAnsi
   490 000012BD 48FFC3              <1>     inc rbx
   491 000012C0 EBED                <1>     jmp short .biosCheck
   492                              <1> .biosConfirmed:
   493                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   494 000012C2 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   495 000012C4 31DB                <1>     xor ebx, ebx
   496 000012C6 CD30                <1>     int 30h
   497 000012C8 B40F                <1>     mov ah, 0Fh ;Get screen mode
   498 000012CA CD30                <1>     int 30h
   499 000012CC 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   500 000012CF FECA                <1>     dec dl
   501 000012D1 B619                <1>     mov dh, 25  ;Number of rows is standard
   502 000012D3 31C0                <1>     xor eax, eax
   503 000012D5 89C1                <1>     mov ecx, eax
   504 000012D7 B707                <1>     mov bh, 7   ;Screen attributes
   505 000012D9 B406                <1>     mov ah, 6   ;Scroll
   506 000012DB CD30                <1>     int 30h
   507 000012DD 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   508 000012DF B700                <1>     mov bh, 0   ;Page 0
   509 000012E1 B402                <1>     mov ah, 2
   510 000012E3 CD30                <1>     int 30h
   511                              <1>     return
    19                              <2> %%_ret:
    20 000012E5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   512                              <1> .doAnsi:
   513                              <1> ;If an ANSI driver is not installed, this will simply insert blank lines
   514                              <1> ;4 chars in the ansi routine
   515                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   516                              <1> ; understand ANSI codes
   517 000012E6 488D3531F5FFFF      <1>     lea rsi, ansiCls
   518 000012ED B904000000          <1>     mov ecx, 4
   519 000012F2 B406                <1>     mov ah, 06h ;Raw char output
   520                              <1> .ansiLp:
   521 000012F4 AC                  <1>     lodsb   ;Get the char in 
   522 000012F5 88C2                <1>     mov dl, al
   523 000012F7 CD41                <1>     int 41h
   524 000012F9 FFC9                <1>     dec ecx
   525 000012FB 75F7                <1>     jnz .ansiLp
   526                              <1>     return
    19                              <2> %%_ret:
    20 000012FD C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   527                              <1> 
   528                              <1> break:
   529 000012FE F6059DEDFFFFFF      <1>     test byte [arg1Flg], -1
   530 00001305 752D                <1>     jnz .argumentProvided
   531                              <1>     ;Here we just get the status of break
   532 00001307 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   533 0000130C CD41                <1>     int 41h
   534 0000130E 88D3                <1>     mov bl, dl
   535 00001310 488D1593F4FFFF      <1>     lea rdx, breakIs
   536 00001317 B409                <1>     mov ah, 09h
   537 00001319 CD41                <1>     int 41h
   538 0000131B 488D1583F4FFFF      <1>     lea rdx, onMes
   539 00001322 488D0D76F4FFFF      <1>     lea rcx, offMes
   540 00001329 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   541 0000132B 480F44D1            <1>     cmovz rdx, rcx
   542 0000132F B409                <1>     mov ah, 09h
   543 00001331 CD41                <1>     int 41h
   544                              <1>     return
    19                              <2> %%_ret:
    20 00001333 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   545                              <1> .argumentProvided:
   546 00001334 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   547 00001338 AD                  <1>     lodsd   ;Read the word
   548 00001339 89C3                <1>     mov ebx, eax
   549 0000133B 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   550 00001340 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   551 00001343 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   552 00001348 7416                <1>     je .maybeOn
   553 0000134A 663D4F46            <1>     cmp ax, "OF"
   554 0000134E 7523                <1>     jne .badArgument
   555 00001350 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   556 00001355 6681FB4620          <1>     cmp bx, "F "
   557 0000135A 7517                <1>     jne .badArgument
   558                              <1>     ;Set off
   559 0000135C 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   560 0000135E EB0B                <1>     jmp short .setBreak
   561                              <1> .maybeOn:
   562 00001360 663D4F4E            <1>     cmp ax, "ON"
   563 00001364 750D                <1>     jne .badArgument
   564                              <1>     ;Set on
   565 00001366 BA01000000          <1>     mov edx, 1
   566                              <1> .setBreak:
   567 0000136B B801330000          <1>     mov eax, 3301h  ;Set break
   568 00001370 CD41                <1>     int 41h
   569                              <1>     return
    19                              <2> %%_ret:
    20 00001372 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   570                              <1> .badArgument:
   571 00001373 488D15B4F4FFFF      <1>     lea rdx, badOnOff
   572 0000137A B409                <1>     mov ah, 09h
   573 0000137C CD41                <1>     int 41h
   574                              <1>     return
    19                              <2> %%_ret:
    20 0000137E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   575                              <1> 
   576                              <1> rename:
   577                              <1>     return
    19                              <2> %%_ret:
    20 0000137F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   578                              <1> truename:
   579 00001380 F6051BEDFFFFFF      <1>     test byte [arg1Flg], -1
   580 00001387 750C                <1>     jnz .argumentProvided
   581 00001389 488D1554F4FFFF      <1>     lea rdx, badArgs
   582 00001390 B409                <1>     mov ah, 09h
   583 00001392 CD41                <1>     int 41h
   584                              <1>     return
    19                              <2> %%_ret:
    20 00001394 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   585                              <1> .argumentProvided:
   586 00001395 E897020000          <1>     call buildCommandPath
   587                              <1>     ;Explicitly call Truename if we remove truename from this function
   588 0000139A 488D3D2BEFFFFF      <1>     lea rdi, searchSpec
   589 000013A1 E830010000          <1>     call strlen
   590 000013A6 FFC9                <1>     dec ecx ;Don't print terminating null
   591 000013A8 488D151DEFFFFF      <1>     lea rdx, searchSpec
   592 000013AF BB01000000          <1>     mov ebx, 01
   593 000013B4 B440                <1>     mov ah, 40h
   594 000013B6 CD41                <1>     int 41h
   595 000013B8 E802000000          <1>     call printCRLF
   596                              <1>     return
    19                              <2> %%_ret:
    20 000013BD C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   597                              <1> 
   598                              <1> 
   599                              <1> launchChild:
   600                              <1> ;We run EXEC on this and the child task will return via applicationReturn
   601                              <1>     return
    19                              <2> %%_ret:
    20 000013BE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   602                              <1> 
    16                                  %include "./Source/Utils/COMMAND/Source/cmdUtils.asm"
    17                              <1> ;Misc functions and subroutines for command.com
    18                              <1> 
    19                              <1> printCRLF:
    20 000013BF 488D1522F0FFFF      <1>     lea rdx, crlf
    21 000013C6 BB02000000          <1>     mov ebx, 2
    22 000013CB B440                <1>     mov ah, 40h ;Print a new line
    23 000013CD B902000000          <1>     mov ecx, 2  ;Two chars to write
    24 000013D2 CD41                <1>     int 41h
    25                              <1>     return
    19                              <2> %%_ret:
    20 000013D4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    26                              <1> printDate:
    27                              <1>     ;al = day of the week (0=Sunday)
    28                              <1> 	;cl = year (1980-2099)
    29                              <1> 	;dh = month (1-12)
    30                              <1> 	;dl = day (1-31)
    31                              <1> printFileDate:
    32                              <1> 	;cl = year (1980-2099)
    33                              <1> 	;dh = month (1-12)
    34                              <1> 	;dl = day (1-31)
    35                              <1>     return
    19                              <2> %%_ret:
    20 000013D5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    36                              <1> printTime:
    37                              <1>     return
    19                              <2> %%_ret:
    20 000013D6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    38                              <1> putVersionInPrompt:
    39 000013D7 488D1553F2FFFF      <1>     lea rdx, dosVer
    40 000013DE B409                <1>     mov ah, 09h ;Print String
    41 000013E0 CD41                <1>     int 41h
    42 000013E2 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
    43 000013E4 CD41                <1>     int 41h
    44 000013E6 50                  <1>     push rax    ;Save minor version
    45 000013E7 E89C000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
    46 000013EC E8B4000000          <1>     call printPackedBCD ;Print al
    47 000013F1 B22E                <1>     mov dl, "."
    48 000013F3 B402                <1>     mov ah, 02h
    49 000013F5 CD41                <1>     int 41h
    50 000013F7 58                  <1>     pop rax
    51 000013F8 88E0                <1>     mov al, ah  ;Get the minor version low
    52 000013FA E889000000          <1>     call hexToBCD
    53 000013FF E8A1000000          <1>     call printPackedBCD
    54                              <1>     return
    19                              <2> %%_ret:
    20 00001404 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    55                              <1> putEscInPrompt:
    56 00001405 B21B                <1>     mov dl, ESC
    57 00001407 EB1C                <1>     jmp short outChar
    58                              <1> 
    59                              <1> putMoneyInPrompt:
    60 00001409 B224                <1>     mov dl, "$"
    61 0000140B EB18                <1>     jmp short outChar
    62                              <1> 
    63                              <1> putEquInPrompt:
    64 0000140D B23D                <1>     mov dl, "="
    65 0000140F EB14                <1>     jmp short outChar
    66                              <1> 
    67                              <1> putPipeInPrompt:
    68 00001411 B27C                <1>     mov dl, "|"
    69 00001413 EB10                <1>     jmp short outChar
    70                              <1> 
    71                              <1> putGTinPrompt:
    72 00001415 B23E                <1>     mov dl, ">"
    73 00001417 EB0C                <1>     jmp short outChar
    74                              <1> 
    75                              <1> putLTinPrompt:
    76 00001419 B23C                <1>     mov dl, "<"
    77 0000141B EB08                <1>     jmp short outChar
    78                              <1> 
    79                              <1> putDriveInPrompt:
    80 0000141D B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
    81 0000141F CD41                <1>     int 41h
    82 00001421 0441                <1>     add al, "A" ;Convert to letter
    83 00001423 88C2                <1>     mov dl, al
    84                              <1> outChar:
    85 00001425 B402                <1>     mov ah, 02h ;Echo to STDOUT
    86 00001427 CD41                <1>     int 41h
    87                              <1>     return
    19                              <2> %%_ret:
    20 00001429 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    88                              <1> putCWDInPrompt:
    89 0000142A 488D3D1AECFFFF      <1>     lea rdi, currDirStr ;Update the current directory string
    90 00001431 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
    91 00001433 CD41                <1>     int 41h
    92 00001435 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
    93 00001437 FEC2                <1>     inc dl
    94 00001439 0441                <1>     add al, "A" ;Convert to letter
    95 0000143B B43A                <1>     mov ah, ":"
    96 0000143D 66AB                <1>     stosw   ;Store X:, rdi+=2
    97 0000143F 8A05DEEBFFFF        <1>     mov al, byte [pathSep]
    98 00001445 AA                  <1>     stosb   ;Store pathSep, inc rdi
    99 00001446 B447                <1>     mov ah, 47h ;Get Current Working Directory
   100 00001448 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   101 0000144B CD41                <1>     int 41h
   102 0000144D E884000000          <1>     call strlen
   103 00001452 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   104                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   105 00001458 B440                <1>     mov ah, 40h ;Write to handle
   106 0000145A BB01000000          <1>     mov ebx, 1  ;STDOUT
   107 0000145F 488D15E5EBFFFF      <1>     lea rdx, currDirStr
   108 00001466 CD41                <1>     int 41h
   109                              <1>     return
    19                              <2> %%_ret:
    20 00001468 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   110                              <1> 
   111                              <1> BCDtoHex:
   112                              <1> ;Converts a BCD value to a Hex byte
   113                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   114 00001469 51                  <1>     push rcx
   115 0000146A 0FB6C0              <1>     movzx eax, al   ;Zero extend
   116 0000146D 89C1                <1>     mov ecx, eax    ;Save al in ecx
   117 0000146F 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   118 00001474 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   119 0000147A C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   120                              <1> .bth:
   121 0000147D 050A000000          <1>     add eax, 10
   122 00001482 FFC9                <1>     dec ecx
   123 00001484 75F7                <1>     jnz .bth
   124 00001486 59                  <1>     pop rcx
   125 00001487 C3                  <1>     ret
   126                              <1> 
   127                              <1> hexToBCD:
   128                              <1> ;Converts a Hex byte into two BCD digits
   129                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   130 00001488 51                  <1>     push rcx
   131 00001489 0FB6C0              <1>     movzx eax, al   ;Zero extend
   132 0000148C 31C9                <1>     xor ecx, ecx
   133                              <1> .htb0:
   134 0000148E 3D0A000000          <1>     cmp eax, 10
   135 00001493 7209                <1>     jb .htb1
   136 00001495 2D0A000000          <1>     sub eax, 10
   137 0000149A FFC1                <1>     inc ecx
   138 0000149C EBF0                <1>     jmp short .htb0
   139                              <1> .htb1:
   140 0000149E C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   141 000014A1 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   142 000014A3 59                  <1>     pop rcx
   143 000014A4 C3                  <1>     ret
   144                              <1> 
   145                              <1> printPackedBCD:
   146                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   147                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   148                              <1> ;Preserves all registers
   149 000014A5 50                  <1>     push rax
   150 000014A6 52                  <1>     push rdx
   151 000014A7 88C4                <1>     mov ah, al
   152 000014A9 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   153 000014AB 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   154 000014AE 7508                <1>     jnz .upperNybble
   155 000014B0 B220                <1>     mov dl, " "
   156 000014B2 B402                <1>     mov ah, 02h
   157 000014B4 CD41                <1>     int 41h
   158 000014B6 EB0E                <1>     jmp short .lowerNybble
   159                              <1> .upperNybble:
   160 000014B8 50                  <1>     push rax
   161 000014B9 C0EC04              <1>     shr ah, 4
   162 000014BC 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   163 000014BF 88E2                <1>     mov dl, ah
   164 000014C1 B402                <1>     mov ah, 02h ;Print DL
   165 000014C3 CD41                <1>     int 41h
   166 000014C5 58                  <1>     pop rax
   167                              <1> .lowerNybble:
   168 000014C6 0430                <1>     add al, "0"
   169 000014C8 88C2                <1>     mov dl, al
   170 000014CA B402                <1>     mov ah, 02h ;Print DL
   171 000014CC CD41                <1>     int 41h
   172 000014CE 5A                  <1>     pop rdx
   173 000014CF 58                  <1>     pop rax
   174                              <1>     return
    19                              <2> %%_ret:
    20 000014D0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   175                              <1> 
   176                              <1> getCurrentDrive:
   177                              <1> ;Returns the current drive in al
   178 000014D1 B419                <1>     mov ah, 19h
   179 000014D3 CD41                <1>     int 41h
   180                              <1>     return
    19                              <2> %%_ret:
    20 000014D5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   181                              <1> 
   182                              <1> strlen:
   183                              <1> ;Gets the length of a ASCIIZ string
   184                              <1> ;Input: rdi = Source buffer
   185                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   186 000014D6 50                  <1>     push rax
   187 000014D7 57                  <1>     push rdi
   188 000014D8 30C0                <1>     xor al, al
   189 000014DA 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   190 000014DC FFC9                <1>     dec ecx ;rcx = -1
   191 000014DE F2AE                <1>     repne scasb
   192 000014E0 F7D1                <1>     not ecx
   193 000014E2 5F                  <1>     pop rdi
   194 000014E3 58                  <1>     pop rax
   195                              <1>     return
    19                              <2> %%_ret:
    20 000014E4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   196                              <1> 
   197                              <1> findTerminatorOrEOC:
   198                              <1> ;Advances rsi to the next string terminator char or the next End of command
   199                              <1> ; char
   200                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   201                              <1> ;If a end of command char found, also sets CF
   202 000014E5 AC                  <1>     lodsb
   203 000014E6 3C0D                <1>     cmp al, CR
   204 000014E8 7419                <1>     je .endOfInput
   205 000014EA E82B000000          <1>     call isALterminator
   206 000014EF 7419                <1>     jz .exit
   207 000014F1 3A052CEBFFFF        <1>     cmp al, byte [pathSep]
   208 000014F7 7411                <1>     je .exit
   209 000014F9 3A0525EBFFFF        <1>     cmp al, byte [switchChar]
   210 000014FF 7409                <1>     je .exit
   211 00001501 EBE2                <1>     jmp short findTerminatorOrEOC
   212                              <1> .endOfInput:
   213 00001503 E802000000          <1>     call .exit
   214 00001508 F9                  <1>     stc 
   215                              <1>     return
    19                              <2> %%_ret:
    20 00001509 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   216                              <1> .exit:
   217 0000150A 48FFCE              <1>     dec rsi ;Point to the terminating char
   218                              <1>     return
    19                              <2> %%_ret:
    20 0000150D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   219                              <1> 
   220                              <1> findTerminator:
   221                              <1> ;Advances rsi to the next string terminator char
   222                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   223 0000150E AC                  <1>     lodsb
   224 0000150F E806000000          <1>     call isALterminator
   225 00001514 75F8                <1>     jnz findTerminator
   226 00001516 48FFCE              <1>     dec rsi
   227                              <1>     return
    19                              <2> %%_ret:
    20 00001519 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   228                              <1> isALterminator:
   229                              <1> ;Returns: ZF=NZ if al is not a terminator (Not including CR)
   230                              <1> ;         ZF=ZY if al is a terminator
   231 0000151A 3C20                <1>     cmp al, " "
   232                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000151C 74(19)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   233 0000151E 3C3B                <1>     cmp al, ";"
   234                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001520 74(19)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   235 00001522 3C3D                <1>     cmp al, "="
   236                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001524 74(19)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   237 00001526 3C2C                <1>     cmp al, ","
   238                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001528 74(19)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   239 0000152A 3C09                <1>     cmp al, TAB
   240                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000152C 74(19)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   241 0000152E 3C0A                <1>     cmp al, LF
   242                              <1>     return
    19                              <2> %%_ret:
    20 00001530 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   243                              <1> 
   244                              <1> findEndOfCommand:
   245                              <1> ;Moves rsi to the | or CR that terminates this command
   246 00001531 AC                  <1>     lodsb
   247 00001532 E806000000          <1>     call isALEndOfCommand
   248 00001537 75F8                <1>     jnz findEndOfCommand
   249 00001539 48FFCE              <1>     dec rsi
   250                              <1>     return
    19                              <2> %%_ret:
    20 0000153C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   251                              <1> isALEndOfCommand:
   252 0000153D 3C7C                <1>     cmp al, "|"
   253                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000153F 74(3C)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   254 00001541 3C0D                <1>     cmp al, CR
   255                              <1>     return
    19                              <2> %%_ret:
    20 00001543 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   256                              <1> 
   257                              <1> scanForRedir:
   258                              <1> ;Returns: AL = 0 => No redirection, terminate with CR
   259                              <1> ;         AL = 1 => Redirection, type <
   260                              <1> ;         AL = 10 => Redir, type >
   261                              <1> ;         AL = 20 => Redir, type >>
   262                              <1> ;If multiple redirs found, the last one of that type counts.
   263 00001544 56                  <1>     push rsi
   264 00001545 55                  <1>     push rbp
   265 00001546 30E4                <1>     xor ah, ah
   266                              <1> .lp:
   267 00001548 AC                  <1>     lodsb
   268 00001549 3C3E                <1>     cmp al, ">"
   269                              <1> .exit:
   270 0000154B 5D                  <1>     pop rbp
   271 0000154C 5E                  <1>     pop rsi
   272                              <1>     return
    19                              <2> %%_ret:
    20 0000154D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   273                              <1> 
   274                              <1> 
   275                              <1> skipSpaces:
   276                              <1> ;Also skips tabs
   277                              <1> ;Input: rsi must point to the start of the data string
   278                              <1> ;Output: rsi points to the first non-space char
   279 0000154E 803E20              <1>     cmp byte [rsi], " "
   280 00001551 7405                <1>     je .skip    ;If equal to a space, skip it
   281 00001553 803E09              <1>     cmp byte [rsi], TAB
   282                              <1>     retne   ;If not equal to a tab or space, return
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001556 75(4D)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   283                              <1> .skip:
   284 00001558 48FFC6              <1>     inc rsi
   285 0000155B EBF1                <1>     jmp short skipSpaces
   286                              <1> 
   287                              <1> printPrompt:
   288 0000155D 66813DBBEAFFFFFFFF  <1>     cmp word [promptPtr], -1
   289 00001566 750B                <1>     jne .validPrompt
   290                              <1>     ;Here we print the default prompt
   291 00001568 E8BDFEFFFF          <1>     call putCWDInPrompt
   292 0000156D E8A3FEFFFF          <1>     call putGTinPrompt
   293                              <1>     return
    19                              <2> %%_ret:
    20 00001572 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   294                              <1> .validPrompt:
   295                              <1>     return
    19                              <2> %%_ret:
    20 00001573 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   296                              <1> 
   297                              <1> clearCommandState:
   298                              <1> ;Clears the command state
   299 00001574 488D3D23EBFFFF      <1>     lea rdi, cmdStatePtr
   300 0000157B B90A000000          <1>     mov ecx, cmdStateL
   301 00001580 31C0                <1>     xor eax, eax
   302 00001582 F3AA                <1>     rep stosb
   303                              <1>     return
    19                              <2> %%_ret:
    20 00001584 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   304                              <1> 
   305                              <1> clearCommandLineState:
   306                              <1> ;Clears the command line state after a 0Dh encountered
   307 00001585 488D3D02EBFFFF      <1>     lea rdi, cmdLineStatePtr
   308 0000158C B91A000000          <1>     mov ecx, cmdLineStateL
   309 00001591 31C0                <1>     xor eax, eax
   310 00001593 F3AA                <1>     rep stosb
   311                              <1>     return
    19                              <2> %%_ret:
    20 00001595 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   312                              <1> 
   313                              <1> asciiToFCB:
   314                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   315                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   316                              <1> ;Also doesn't check if chars are valid
   317                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   318                              <1> ;Name is space padded.
   319                              <1> ;Input: rsi = ASCII string buffer
   320                              <1> ;       rdi = FCB name buffer
   321                              <1> ;Output: al = Char that terminated the source string 
   322 00001596 53                  <1>     push rbx    
   323 00001597 57                  <1>     push rdi
   324 00001598 B90B000000          <1>     mov ecx, 11
   325 0000159D B020                <1>     mov al, " "
   326 0000159F F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   327 000015A1 5F                  <1>     pop rdi
   328 000015A2 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   329 000015A5 EB1D                <1>     jmp short asciiFilenameToFCB.processName
   330                              <1> asciiFilenameToFCB:
   331                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   332                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   333                              <1> ;Also doesn't check if chars are valid
   334                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   335                              <1> ;Name is space padded.
   336                              <1> ;Input: rsi = ASCII string buffer
   337                              <1> ;       rdi = FCB name buffer
   338                              <1> ;Output: al = Char that terminated the source string 
   339 000015A7 53                  <1>     push rbx    
   340 000015A8 57                  <1>     push rdi
   341 000015A9 B90B000000          <1>     mov ecx, 11
   342 000015AE B020                <1>     mov al, " "
   343 000015B0 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   344 000015B2 5F                  <1>     pop rdi
   345 000015B3 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   346                              <1>     ;Preprocess for Dir Searches
   347 000015B6 803E2E              <1>     cmp byte [rsi], "."
   348 000015B9 7509                <1>     jne .processName
   349 000015BB A4                  <1>     movsb   ;Store the first dot
   350 000015BC 803E2E              <1>     cmp byte [rsi], "."
   351 000015BF 752C                <1>     jne .exitBadChar
   352 000015C1 A4                  <1>     movsb
   353 000015C2 EB29                <1>     jmp short .exitBadChar
   354                              <1> .processName:
   355 000015C4 AC                  <1>     lodsb   ;Get the char in al
   356 000015C5 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   357 000015C7 7426                <1>     jz .exit
   358 000015C9 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   359 000015CB 7407                <1>     je .extSpace
   360 000015CD 3C2E                <1>     cmp al, "."
   361 000015CF 740C                <1>     je .ext
   362 000015D1 AA                  <1>     stosb   ;Store the char
   363 000015D2 EBF0                <1>     jmp short .processName
   364                              <1> .extSpace:
   365                              <1> ;Now we scan for a period in the name
   366 000015D4 AC                  <1>     lodsb   ;Get a char and increase rsi
   367 000015D5 84C0                <1>     test al, al
   368 000015D7 7416                <1>     jz .exit
   369 000015D9 3C2E                <1>     cmp al, "."     ;If al is not a period...
   370 000015DB 75F7                <1>     jne .extSpace   ; keep searching
   371                              <1> .ext:
   372 000015DD 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   373                              <1> .processExt:
   374 000015E1 AC                  <1>     lodsb
   375 000015E2 84C0                <1>     test al, al
   376 000015E4 7409                <1>     jz .exit
   377 000015E6 3C20                <1>     cmp al, " "
   378 000015E8 7405                <1>     je .exit
   379 000015EA AA                  <1>     stosb
   380 000015EB EBF4                <1>     jmp short .processExt
   381                              <1> .exitBadChar:
   382 000015ED 30C0                <1>     xor al, al  ;Return a null terminator
   383                              <1> .exit:
   384 000015EF 5B                  <1>     pop rbx
   385                              <1>     return
    19                              <2> %%_ret:
    20 000015F0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   386                              <1> 
   387                              <1> FCBToAsciiz:
   388                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   389                              <1> ;Name is space padded too
   390                              <1> ;Input: rsi = FCB name buffer
   391                              <1> ;       rdi = ASCIIZ string buffer
   392 000015F1 B908000000          <1>     mov ecx, 8
   393 000015F6 F3A4                <1>     rep movsb   ;Move the name over
   394                              <1> .scanNameSpace:
   395 000015F8 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   396 000015FC 750D                <1>     jne .ext
   397 000015FE 48FFCF              <1>     dec rdi
   398 00001601 FFC1                <1>     inc ecx
   399 00001603 81F908000000        <1>     cmp ecx, 8
   400 00001609 72ED                <1>     jb .scanNameSpace
   401                              <1> .ext:
   402 0000160B 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   403 00001610 7506                <1>     jne .validExt
   404 00001612 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   405 00001616 7415                <1>     je .exit
   406                              <1> .validExt:
   407 00001618 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   408 0000161A AA                  <1>     stosb
   409 0000161B B903000000          <1>     mov ecx, 3
   410 00001620 F3A4                <1>     rep movsb   ;Move the three extension chars over
   411                              <1> .scanExtSpace:
   412 00001622 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   413 00001626 7505                <1>     jne .exit
   414 00001628 48FFCF              <1>     dec rdi
   415 0000162B EBF5                <1>     jmp short .scanExtSpace
   416                              <1> .exit:
   417 0000162D 31C0                <1>     xor eax, eax
   418 0000162F AA                  <1>     stosb   ;Store a null at the end
   419                              <1>     return
    19                              <2> %%_ret:
    20 00001630 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   420                              <1> 
   421                              <1> buildCommandPath:
   422                              <1> ;Based on the first argument on the command line
   423                              <1> ; will build a full ASCIIZ path in searchSpec to the file/dir specified
   424                              <1>     ;If this is a relative path, will handle correctly (tho unnecessary)
   425 00001631 0FB6056BEAFFFF      <1>     movzx eax, byte [arg1Off]
   426 00001638 488D35FAEAFFFF      <1>     lea rsi, cmdBuffer
   427 0000163F 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   428 00001642 8A3DDBE9FFFF        <1>     mov bh, byte [pathSep]
   429 00001648 B33A                <1>     mov bl, ":"
   430 0000164A 383E                <1>     cmp byte [rsi], bh  ;Is the first char relative to root?
   431 0000164C 7458                <1>     je .absoluteCurrent
   432 0000164E 66395E01            <1>     cmp word [rsi + 1], bx    ;This checks if absolute or relative
   433 00001652 746D                <1>     je .absolutePath
   434 00001654 385E01              <1>     cmp byte [rsi + 1], bl  ;Check if a drive separator
   435 00001657 7409                <1>     je .relativeGiven
   436                              <1> ;No drive letter given, must get Current Drive
   437 00001659 E873FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   438 0000165E 0441                <1>     add al, "A"
   439 00001660 EB0B                <1>     jmp short .relativeCommon
   440                              <1> .relativeGiven:
   441                              <1> ;Drive letter pointed to by AL
   442 00001662 8A06                <1>     mov al, byte [rsi]  ;Get drive letter in al
   443 00001664 24DF                <1>     and al, 0DFh    ;Convert to UC
   444 00001666 4881C602000000      <1>     add rsi, 2  ;Skip the given drive letter and the colon
   445                              <1> .relativeCommon:
   446                              <1>     ;al has drive letter
   447 0000166D 88C2                <1>     mov dl, al  ;Save drive letter in dl
   448 0000166F 80EA40              <1>     sub dl, "@" ;Get 1 based drive number in dl
   449 00001672 B43A                <1>     mov ah, ":" ;Get the colon in too
   450 00001674 488D3D51ECFFFF      <1>     lea rdi, searchSpec ;Start building our search path here
   451 0000167B 66AB                <1>     stosw   ;Store X:
   452 0000167D 8A05A0E9FFFF        <1>     mov al, byte [pathSep]
   453 00001683 AA                  <1>     stosb   ;Store pathSep
   454 00001684 56                  <1>     push rsi    ;Save user input string
   455 00001685 4889FE              <1>     mov rsi, rdi    ;Put the current directory here for this drive
   456 00001688 B447                <1>     mov ah, 47h ;Get Current Working Directory, dl has drive number
   457 0000168A CD41                <1>     int 41h ;Won't fail as drive letter in dl confirmed ok
   458 0000168C 5E                  <1>     pop rsi
   459                              <1>     ;Now want to find terminating null
   460 0000168D 30C0                <1>     xor al, al
   461 0000168F 31C9                <1>     xor ecx, ecx
   462 00001691 FFC9                <1>     dec ecx
   463 00001693 F2AE                <1>     repne scasb ;Search for the terminating null
   464 00001695 48FFCF              <1>     dec rdi ;Go back one once found
   465 00001698 8A0585E9FFFF        <1>     mov al, byte [pathSep]
   466 0000169E 3847FF              <1>     cmp byte [rdi - 1], al
   467 000016A1 7425                <1>     je .buildPath ;If the previous char is a pathsep, skip storing another
   468 000016A3 AA                  <1>     stosb   ;Store the pathsep
   469 000016A4 EB22                <1>     jmp short .buildPath  ;Now we copy the user string over and good to go
   470                              <1> .absoluteCurrent:
   471 000016A6 E826FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   472 000016AB 0441                <1>     add al, "A"
   473 000016AD B43A                <1>     mov ah, ":" ;ax has X: now to store 
   474 000016AF 488D3D16ECFFFF      <1>     lea rdi, searchSpec
   475 000016B6 66AB                <1>     stosw
   476 000016B8 8A0565E9FFFF        <1>     mov al, byte [pathSep]
   477 000016BE AA                  <1>     stosb
   478 000016BF EB07                <1>     jmp short .buildPath
   479                              <1> .absolutePath:
   480 000016C1 488D3D04ECFFFF      <1>     lea rdi, searchSpec
   481                              <1> .buildPath:
   482 000016C8 E80BF6FFFF          <1>     call copyCommandTailItem    ;Terminates with a 0 for free
   483 000016CD 488D35F8EBFFFF      <1>     lea rsi, searchSpec
   484 000016D4 488D3DF1EBFFFF      <1>     lea rdi, searchSpec
   485 000016DB B460                <1>     mov ah, 60h ;Truename it to avoid issues
   486 000016DD CD41                <1>     int 41h
   487                              <1>     retc    ;Return if an error with CF=CY
    63                              <2> cret c
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 000016DF 7301                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 000016E1 C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   488                              <1>     ;Here we do one final check to ensure we dont end up with a A: but A:"\"
   489 000016E2 30C0                <1>     xor al, al
   490 000016E4 31C9                <1>     xor ecx, ecx
   491 000016E6 FFC9                <1>     dec ecx
   492 000016E8 F2AE                <1>     repne scasb
   493 000016EA 48FFCF              <1>     dec rdi ;Go back to the final non-null char
   494 000016ED 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is the final non-null char a colon?
   495 000016F1 750A                <1>     jne .okExit   ;Return if not
   496 000016F3 31C0                <1>     xor eax, eax
   497 000016F5 8A0528E9FFFF        <1>     mov al, byte [pathSep]  ;IF it is, insert a pathsep
   498 000016FB 66AB                <1>     stosw   ;Store the terminating 0 after the pathsep
   499                              <1> .okExit:
   500 000016FD F8                  <1>     clc
   501                              <1>     return
    19                              <2> %%_ret:
    20 000016FE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   502                              <1> printDecimalWord:
   503                              <1> ;Takes qword in edx:eax and print it's decimal representation
   504 000016FF 52                  <1>     push rdx    ;Save upper qword for later
   505                              <1> ;Takes the qword in eax and prints its decimal representation
   506 00001700 31C9                <1>     xor ecx, ecx
   507 00001702 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   508 00001704 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   509                              <1> .dpfb0:
   510 00001709 FFC5                <1>     inc ebp
   511 0000170B 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   512 0000170F 31D2                <1>     xor edx, edx
   513 00001711 48F7F3              <1>     div rbx
   514 00001714 80C230              <1>     add dl, '0'
   515 00001717 80FA39              <1>     cmp dl, '9'
   516 0000171A 7603                <1>     jbe .dpfb1
   517 0000171C 80C207              <1>     add dl, 'A'-'0'-10
   518                              <1> .dpfb1:
   519 0000171F 88D1                <1>     mov cl, dl    ;Save remainder byte
   520 00001721 4885C0              <1>     test rax, rax
   521 00001724 75E3                <1>     jnz .dpfb0
   522                              <1> .dpfb2:
   523 00001726 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   524 00001728 B402                <1>     mov ah, 02h
   525 0000172A CD41                <1>     int 41h
   526 0000172C 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   527 00001730 FFCD                <1>     dec ebp
   528 00001732 75F2                <1>     jnz .dpfb2
   529 00001734 5A                  <1>     pop rdx
   530 00001735 85D2                <1>     test edx, edx   ;If this is zero, we are done
   531                              <1>     retz    ;Return
    47                              <2> cret z
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001737 74(FE)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   532 00001739 89D0                <1>     mov eax, edx    ;Else move it to eax
   533 0000173B 31D2                <1>     xor edx, edx    ;And clear it
   534 0000173D EBC0                <1>     jmp short printDecimalWord
   535                              <1> 
   536                              <1> getDecimalWord:
   537                              <1> ;Works on MAX A dword in eax
   538                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   539 0000173F 31C9                <1>     xor ecx, ecx
   540 00001741 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   541 00001743 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   542                              <1> .dpfb0:
   543 00001748 FFC5                <1>     inc ebp
   544 0000174A 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   545 0000174E 31D2                <1>     xor edx, edx
   546 00001750 48F7F3              <1>     div rbx
   547 00001753 80C230              <1>     add dl, '0'
   548 00001756 80FA39              <1>     cmp dl, '9'
   549 00001759 7603                <1>     jbe .dpfb1
   550 0000175B 80C207              <1>     add dl, 'A'-'0'-10
   551                              <1> .dpfb1:
   552 0000175E 88D1                <1>     mov cl, dl    ;Save remainder byte
   553 00001760 4885C0              <1>     test rax, rax
   554 00001763 75E3                <1>     jnz .dpfb0
   555                              <1>     return
    19                              <2> %%_ret:
    20 00001765 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    17                                  %include "./Source/Utils/COMMAND/Source/int44h.asm"
    18                              <1> critErrorHandler:   ;Int 44h
    19                              <1> ;User Stack in usage here, must be swapped to before this is called
    20                              <1> ;Entered with:  
    21                              <1> ;               AH = Critical Error Bitfield
    22                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    23                              <1> ;               Bit 6 - Reserved
    24                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    25                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    26                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    27                              <1> ;               Bits [2-1] = Affected Disk Error
    28                              <1> ;                     0 0   DOS area
    29                              <1> ;                     0 1   FAT area
    30                              <1> ;                     1 0   Directory area
    31                              <1> ;                     1 1   Data area
    32                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    33                              <1> ;               AL  = Failing drive number if AH[7] = 0
    34                              <1> ;               DIL = Error code for errorMsg
    35                              <1> ;               RSI = EA of Device Header for which device the error occured
    36                              <1> ;Return:
    37                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    38                              <1> ;                  = 1 - Retry the Operation    (Retry)
    39                              <1> ;                  = 2 - Terminate the Program  (Abort)
    40                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    41 00001766 53                  <1>     push rbx
    42 00001767 51                  <1>     push rcx
    43 00001768 52                  <1>     push rdx
    44 00001769 57                  <1>     push rdi
    45 0000176A 56                  <1>     push rsi
    46 0000176B FC                  <1>     cld         ;Make String ops go forward
    47                              <1> 
    48 0000176C 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    49 0000176F 488D1572ECFFFF      <1>     lea rdx, crlf
    50 00001776 B409                <1>     mov ah, 09h ;Print String
    51 00001778 CD41                <1>     int 41h
    52                              <1> 
    53 0000177A 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    54 00001780 B90C000000          <1>     mov ecx, 0Ch
    55 00001785 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    56 00001787 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    57 0000178A 480FB7FF            <1>     movzx rdi, di
    58 0000178E 4889FA              <1>     mov rdx, rdi    ;Copy error code
    59 00001791 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    60 00001795 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    61 00001798 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    62 0000179B 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    63 000017A2 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    64 000017A6 B409                <1>     mov ah, 09h ;Print String
    65 000017A8 CD41                <1>     int 41h     ;Call DOS to print first part of message
    66                              <1> 
    67 000017AA 488D1505020000      <1>     lea rdx, qword [.readmsg]
    68 000017B1 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    69 000017B8 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    70 000017BB 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    71 000017BF B409                <1>     mov ah, 09h ;Print String
    72 000017C1 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    73                              <1> 
    74 000017C3 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    75 000017C6 0F85DF000000        <1>     jnz .charError
    76                              <1> ;Disk error continues here
    77 000017CC 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    78 000017D3 B409                <1>     mov ah, 09h
    79 000017D5 CD41                <1>     int 41h
    80 000017D7 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    81 000017D9 80C241              <1>     add dl, "A" ;Add ASCII code
    82 000017DC B402                <1>     mov ah, 02h ;Print char in dl
    83 000017DE CD41                <1>     int 41h
    84                              <1> .userInput:
    85 000017E0 488D1501ECFFFF      <1>     lea rdx, crlf  ;Print new line
    86 000017E7 B409                <1>     mov ah, 09h
    87 000017E9 CD41                <1>     int 41h
    88                              <1> ;Abort, Retry, Ignore, Fail is word order
    89                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    90                              <1> .userAbort:
    91                              <1> ;Abort is always an option
    92 000017EB 488D15E2010000      <1>     lea rdx, qword [.abortmsg]
    93 000017F2 B409                <1>     mov ah, 09h
    94 000017F4 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
    95                              <1> .userRetry:
    96 000017F6 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    97 000017F9 7416                <1>     jz .userIgnore    ;If clear, dont print message
    98 000017FB 488D15EA010000      <1>     lea rdx, qword [.betweenMsg]
    99 00001802 B409                <1>     mov ah, 09h
   100 00001804 CD41                <1>     int 41h
   101 00001806 488D15D4010000      <1>     lea rdx, qword [.retrymsg]
   102 0000180D B409                <1>     mov ah, 09h
   103 0000180F CD41                <1>     int 41h
   104                              <1> .userIgnore:
   105 00001811 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   106 00001814 7416                <1>     jz .userFail
   107 00001816 488D15CF010000      <1>     lea rdx, qword [.betweenMsg]
   108 0000181D B409                <1>     mov ah, 09h
   109 0000181F CD41                <1>     int 41h
   110 00001821 488D15B2010000      <1>     lea rdx, qword [.ignoremsg]
   111 00001828 B409                <1>     mov ah, 09h
   112 0000182A CD41                <1>     int 41h
   113                              <1> .userFail:
   114 0000182C F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   115 0000182F 7416                <1>     jz .userMsgEnd
   116 00001831 488D15B4010000      <1>     lea rdx, qword [.betweenMsg]
   117 00001838 B409                <1>     mov ah, 09h
   118 0000183A CD41                <1>     int 41h
   119 0000183C 488D15A4010000      <1>     lea rdx, qword [.failmsg]
   120 00001843 B409                <1>     mov ah, 09h
   121 00001845 CD41                <1>     int 41h
   122                              <1> .userMsgEnd:
   123 00001847 488D15A1010000      <1>     lea rdx, qword [.endMsg]
   124 0000184E B409                <1>     mov ah, 09h
   125 00001850 CD41                <1>     int 41h
   126                              <1> ;Get user input now 
   127 00001852 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   128 00001854 488D3D97010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   129 0000185B B401                <1>     mov ah, 01h ;STDIN without Console Echo
   130 0000185D CD41                <1>     int 41h ;Get char in al
   131 0000185F 3C61                <1>     cmp al, "a" ;Chack if lowercase
   132 00001861 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   133 00001863 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   134                              <1> .uip1:
   135 00001865 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   136 00001866 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   137 00001868 FFC1                <1>     inc ecx
   138 0000186A 81F904000000        <1>     cmp ecx, 4
   139 00001870 75F3                <1>     jne .uip1
   140 00001872 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   141                              <1> .validInput:
   142 00001877 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   143                              <1> ;Now check if the input is permitted
   144 00001879 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   145 0000187B 7427                <1>     je .cehExit
   146 0000187D 84C0                <1>     test al, al ;Check if 0 => Ignore
   147 0000187F 740F                <1>     je .viIgnore
   148 00001881 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   149 00001883 7416                <1>     je .viRetry
   150                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   151 00001885 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   152 00001888 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   153 0000188E EB14                <1>     jmp short .cehExit
   154                              <1> .viIgnore:
   155 00001890 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   156 00001893 0F8447FFFFFF        <1>     jz .userInput
   157 00001899 EB09                <1>     jmp short .cehExit
   158                              <1> .viRetry:
   159 0000189B F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   160 0000189E 0F843CFFFFFF        <1>     jz .userInput
   161                              <1> .cehExit:
   162 000018A4 5E                  <1>     pop rsi
   163 000018A5 5F                  <1>     pop rdi
   164 000018A6 5A                  <1>     pop rdx
   165 000018A7 59                  <1>     pop rcx
   166 000018A8 5B                  <1>     pop rbx
   167 000018A9 48CF                <1>     iretq
   168                              <1> .charError:
   169 000018AB B908000000          <1>     mov ecx, 8  ;8 chars in device name
   170 000018B0 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   171                              <1> .ce1:
   172 000018B7 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   173 000018B8 88C2                <1>     mov dl, al  ;Move char into dl
   174 000018BA B402                <1>     mov ah, 02h
   175 000018BC CD41                <1>     int 41h ;Print char
   176 000018BE E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   177 000018C0 E91BFFFFFF          <1>     jmp .userInput
   178                              <1> 
   179                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   180 000018C5 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   180 000018CE 746563742024202020  <1>
   181 000018D7 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   181 000018E0 6E6974202420202020  <1>
   182 000018E9 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   182 000018F2 202420202020202020  <1>
   183 000018FB 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   183 00001904 6F6D6D616E64202420  <1>
   184 0000190D 446174612024202020- <1>             db "Data $            "       ;Error 4
   184 00001916 202020202020202020  <1>
   185 0000191F 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   185 00001928 737420242020202020  <1>
   186 00001931 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   186 0000193A 202020202020202020  <1>
   187 00001943 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   187 0000194C 656469612024202020  <1>
   188 00001955 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   188 0000195E 7420466F756E642024  <1>
   189 00001967 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   189 00001970 706572202420202020  <1>
   190 00001979 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   190 00001982 6C7420242020202020  <1>
   191 0000198B 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   191 00001994 742024202020202020  <1>
   192 0000199D 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   192 000019A6 61696C757265202420  <1>
   193                              <1> 
   194 000019AF 64726976652024      <1> .drive      db "drive $"
   195 000019B6 6572726F7220726561- <1> .readmsg    db "error reading $"
   195 000019BF 64696E672024        <1>
   196 000019C5 6572726F7220777269- <1> .writemsg   db "error writing $"
   196 000019CE 74696E672024        <1>
   197 000019D4 41626F727424        <1> .abortmsg   db "Abort$" 
   198 000019DA 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   199 000019E1 526574727924        <1> .retrymsg   db "Retry$"
   200 000019E7 4661696C24          <1> .failmsg    db "Fail$"
   201 000019EC 2C2024              <1> .betweenMsg db ", $"
   202 000019EF 3F2024              <1> .endMsg     db "? $"
   203 000019F2 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   204                              <1> 
   205                              <1> int43h:
   206 000019F6 F9                  <1>     stc     ;Set CF to kill the task
   207 000019F7 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    18                                  %include "./Source/Utils/COMMAND/Data/cmdEnv.asm"
    19                              <1>     
    20                              <1> masterEnv:  ;Yeet this is this is a child command processor
    21 000019FA 5F3A434F4D4D414E44- <1>     db "_:COMMAND.COM",0
    21 00001A03 2E434F4D00          <1>
    22 00001A08 504154483D0000      <1>     db "PATH=",0,0
    23 00001A0F 202020202020202020- <1>     db ($ - masterEnv) dup (" ")    ;Pad the environment with spaces
    23 00001A18 202020202020202020- <1>
    23 00001A21 202020              <1>
    24                              <1> endOfAlloc: ;Symbol to find the start of where I can yeet 
    19                                  %include "./Source/Utils/COMMAND/Source/cmdLdr.asm"
    20                              <1> cmdLdr:
    21                              <1> ;First check if the version is ok. If not, return.
    22 00001A24 B430                <1>     mov ah, 30h
    23 00001A26 CD41                <1>     int 41h
    24 00001A28 3C01                <1>     cmp al, 01h ;Version 1
    25 00001A2A 760D                <1>     jbe .okVersion
    26 00001A2C 488D1560010000      <1>     lea rdx, badVerStr
    27 00001A33 B409                <1>     mov ah, 09h
    28 00001A35 CD41                <1>     int 41h
    29 00001A37 CD40                <1>     int 40h ;Exit to caller or DOS to print bad command interpreter line
    30                              <1> .okVersion:
    31                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    32 00001A39 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    33 00001A3D 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    34 00001A41 488905C7E5FFFF      <1>     mov qword [realParent], rax ;Preserve the real parent address
    35                              <1> ;Setup Int 43h and Int 44h
    36 00001A48 488D1517FDFFFF      <1>     lea rdx, critErrorHandler
    37 00001A4F 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    38 00001A53 B844250000          <1>     mov eax, 2544h
    39 00001A58 CD41                <1>     int 41h
    40 00001A5A 488D1595FFFFFF      <1>     lea rdx, int43h
    41 00001A61 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    42 00001A65 B843250000          <1>     mov eax, 2543h
    43 00001A6A CD41                <1>     int 41h
    44 00001A6C 488D15F4EDFFFF      <1>     lea rdx, applicationReturn
    45 00001A73 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    46 00001A77 B842250000          <1>     mov eax, 2542h
    47 00001A7C CD41                <1>     int 41h
    48                              <1> ;Get a pointer to DOS Sysvars
    49 00001A7E B452                <1>     mov ah, 52h ;Get sysvars
    50 00001A80 CD41                <1>     int 41h
    51 00001A82 48891D8EE5FFFF      <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    52                              <1> ;Call for simple internationalisation data
    53 00001A89 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    54 00001A8E CD41                <1>     int 41h
    55 00001A90 3CFF                <1>     cmp al, -1
    56 00001A92 7412                <1>     je .skipSwitch
    57 00001A94 88158AE5FFFF        <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    58 00001A9A 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    59 00001A9D 7507                <1>     jne .skipSwitch
    60 00001A9F C6057DE5FFFF2F      <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    61                              <1> .skipSwitch:
    62 00001AA6 B800380000          <1>     mov eax, 3800h  ;Get current country data
    63 00001AAB 488D1573E5FFFF      <1>     lea rdx, ctryData
    64 00001AB2 CD41                <1>     int 41h ;Write the data to the internal country table
    65                              <1> ;Now determine if this is the master copy of COMMAND.COM
    66                              <1> ;Check if Int 4Eh has the same address as Int 4Dh. If so, we are master.
    67 00001AB4 B84E350000          <1>     mov eax, 354Eh  ;Get int 4Eh address
    68 00001AB9 CD41                <1>     int 41h
    69 00001ABB 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    70 00001ABE B84D350000          <1>     mov eax, 354Dh  ;Get int 4Dh address
    71 00001AC3 CD41                <1>     int 41h
    72 00001AC5 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    73 00001AC8 7535                <1>     jne .skipMaster
    74                              <1> ;Ok so we are master command.com
    75                              <1> ;Now make myself the real parent
    76 00001ACA 4C89053EE5FFFF      <1>     mov qword [realParent], r8
    77                              <1> ;Set master environment as mine
    78 00001AD1 488D0522FFFFFF      <1>     lea rax, masterEnv
    79 00001AD8 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    80                              <1> ;Set current Drive in COMSPEC
    81 00001ADC B019                <1>     mov al, 19h ;Get current Drive
    82 00001ADE CD41                <1>     int 41h
    83 00001AE0 0441                <1>     add al, "A"
    84 00001AE2 880512FFFFFF        <1>     mov byte [masterEnv], al
    85                              <1> ;Set Int 4Eh up
    86 00001AE8 488D1513F2FFFF      <1>     lea rdx, int4Eh
    87 00001AEF B84E250000          <1>     mov eax, 254Eh ;Set this as Int 4Eh
    88 00001AF4 CD41                <1>     int 41h
    89                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    90                              <1>     
    91 00001AF6 488D1D27FFFFFF      <1>     lea rbx, endOfAlloc ;Save the Master Environment
    92 00001AFD EB07                <1>     jmp short .printInit
    93                              <1> .skipMaster:
    94 00001AFF 488D1DF4FEFFFF      <1>     lea rbx, masterEnv  ;This is the base address to jettison
    95                              <1> .printInit:
    96                              <1> ;Finish by printing INIT string.
    97 00001B06 488D1510000000      <1>     lea rdx, initString
    98 00001B0D B409                <1>     mov ah, 09h
    99 00001B0F CD41                <1>     int 41h ;Print init string
   100 00001B11 488925EDE4FFFF      <1>     mov qword [stackBottom], rsp    ;Use this to save where to reset rsp to
   101 00001B18 E936EDFFFF          <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   102                              <1> ;Loader Data here
   103                              <1> initString: 
   104 00001B1D 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version 1.0",CR,LF
   104 00001B26 66696320436F6D7075- <1>
   104 00001B2F 746572205265736561- <1>
   104 00001B38 726368285229205343- <1>
   104 00001B41 502F444F5328522920- <1>
   104 00001B4A 56657273696F6E2031- <1>
   104 00001B53 2E300D0A            <1>
   105 00001B57 202020202020202020- <1>     db       "          (C)Copyright Scientific Computer Reserach 2022.",CR,LF,"$"
   105 00001B60 20284329436F707972- <1>
   105 00001B69 696768742053636965- <1>
   105 00001B72 6E746966696320436F- <1>
   105 00001B7B 6D7075746572205265- <1>
   105 00001B84 736572616368203230- <1>
   105 00001B8D 32322E0D0A24        <1>
   106 00001B93 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   106 00001B9C 20444F532076657273- <1>
   106 00001BA5 696F6E0D0A24        <1>
   106          ------------------  <1>  info: assembly required 1+3+2 passes

