     1                                  ;COMMAND.COM main file
     2                                  [map all ./Source/Utils/COMMAND/Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Source/Include/dosMacro.mac"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------------------------------
     9                              <1> ;Generic Macros file
    10                              <1> ;The following instruction extensions allow to conditionally return
    11                              <1> ;The idea was borrowed from the DOS Source Code
    12                              <1> ;
    13                              <1> ;-------------------------------------------------------------------------------
    14                              <1> 
    15                              <1> ;-------------------------------------------------------------------------------
    16                              <1> ;These macros are live and must not be touched
    17                              <1> ;-------------------------------------------------------------------------------
    18                              <1> %macro return 0
    19                              <1> %%_ret:
    20                              <1>     ret
    21                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    22                              <1> %endmacro
    23                              <1> 
    24                              <1> %macro cret 1
    25                              <1> %%_base:
    26                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    27                              <1>     %ifdef retOff
    28                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <1>     %ifdef currSegVBase
    30                              <1>     j%+1 short (retOff+currSegVBase)
    31                              <1>     %else
    32                              <1>     j%+1 short retOff
    33                              <1>     %endif  ;End ifdef currSegVBase
    34                              <1>     %else 
    35                              <1>     j%-1 short %%a
    36                              <1>     return
    37                              <1> %%a:
    38                              <1>     %endif  ;End the distance measurement if
    39                              <1>     %else   
    40                              <1>     j%-1 short %%a
    41                              <1>     return
    42                              <1> %%a:
    43                              <1>     %endif  ;End ifdef retoff
    44                              <1> %endmacro
    45                              <1> 
    46                              <1> %macro retz 0
    47                              <1> cret z
    48                              <1> %endmacro
    49                              <1> 
    50                              <1> %macro retnz 0
    51                              <1> cret nz
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> %macro rete 0
    55                              <1> cret e
    56                              <1> %endmacro
    57                              <1> 
    58                              <1> %macro retne 0
    59                              <1> cret ne
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> %macro retc 0
    63                              <1> cret c
    64                              <1> %endmacro
    65                              <1> 
    66                              <1> %macro retnc 0
    67                              <1> cret nc
    68                              <1> %endmacro
    69                              <1> 
    70                              <1> %macro retb 0
    71                              <1> cret b
    72                              <1> %endmacro
    73                              <1> 
    74                              <1> %macro retnb 0
    75                              <1> cret nb
    76                              <1> %endmacro
    77                              <1> 
    78                              <1> %macro reta 0
    79                              <1> cret a
    80                              <1> %endmacro
    81                              <1> 
    82                              <1> %macro retna 0
    83                              <1> cret na
    84                              <1> %endmacro
    85                              <1> 
    86                              <1> %macro breakpoint 0
    87                              <1> xchg bx, bx
    88                              <1> %endmacro
     7                                  %include "./Source/Include/dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    27 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    32 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Only affects for SUBST drives, not JOIN
    69                              <1> ; Flags: Bit 15 set = Network drive
    70                              <1> ;        Bit 14 set = Physical drive
    71                              <1> ;        Bit 13 set = JOIN'ed drive
    72                              <1> ;        Bit 12 set = SUBST'ed drive
    73                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    74                              <1> endstruc
    75                              <1> ;CDS equates
    76                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    77                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    78                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    79                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    80                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    81                              <1> ;------------------------------------------------------------------------;
    82                              <1> ; The SFT is a way to allow applications to open file handles to files 
    83                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    84                              <1> ; under the first header, and then a second header will be linked to the 
    85                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    86                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    87                              <1> ; using the FCBS= command. Default FCBS=5.
    88                              <1> ;
    89                              <1> ; A file handle describes the file, and the location within the file that
    90                              <1> ; we are reading. The file handle can be manipulated without the file
    91                              <1> ; being in memory, thus allowing the user to access data without needing 
    92                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    93                              <1> ; accessing devices, by treating them as files with their drivers 
    94                              <1> ; responding and translating the manipulations of the file handle itself.
    95                              <1> ; Neither the driver nor the application should see or use the SFT for
    96                              <1> ; the handle, as it is subject to change (and will change when file 
    97                              <1> ; sharing provisions are included). The DOS will make requests to the 
    98                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    99                              <1> ; track of the information in the SFT entry for that handle. 
   100                              <1> ;
   101                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   102                              <1> ; can point to the same file. It all depends on what the applications 
   103                              <1> ; want to do with the File.
   104                              <1> ;
   105                              <1> ; !!!!IMPORTANT!!!!
   106                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   107                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   108                              <1> ;
   109                              <1> ;Each SFT may look like this:
   110                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   111                              <1> ;            |                |
   112                              <1> ;       wNumFiles*sft    wNumFiles*sft
   113                              <1> ;
   114                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   115                              <1> ; System FCBs.
   116                              <1> ;
   117                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   118                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   119                              <1> ;
   120                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   121                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   122                              <1> ;------------------------------------------------------------------------;
   123                              <1> struc sfth   ;System file table header
   124                              <1> ; This is the SFT header.
   125                              <1> ; This structure comes before the start of the first file in the array/table.
   126 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   127 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   128                              <1> endstruc
   129                              <1> 
   130                              <1> struc sft
   131                              <1> ;This is the file struc itself
   132 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   133 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   134 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   135 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   136 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   137 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   138 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   139 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   140 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   141 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   142 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   143 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   144 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   145 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   146 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   147 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   148 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   149 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   150 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   151                              <1> ;                           0 means no record
   152                              <1> endstruc
   153                              <1> ;Open Mode equates
   154                              <1> ;Access modes   Bits[2:0]
   155                              <1> ReadAccess      equ 0h
   156                              <1> WriteAccess     equ 1h
   157                              <1> RWAccess        equ 2h
   158                              <1> ;Bit 3 reserved 0
   159                              <1> ;Sharing modes  Bits[6:4]
   160                              <1> CompatShare     equ 0h
   161                              <1> denyRWShare     equ 10h
   162                              <1> denyWriteShare  equ 20h
   163                              <1> denyReadShare   equ 30h
   164                              <1> denyNoneShare   equ 40h
   165                              <1> netFCBShare     equ 70h
   166                              <1> noInherit       equ 80h
   167                              <1> ;Bits 8-12 reserved 0
   168                              <1> 
   169                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   170                              <1> ;Buffering on writes
   171                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   172                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   173                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   174                              <1> ;Attribute Byte
   175                              <1> readOnlyFile    equ 1h
   176                              <1> hiddenFile      equ 2h
   177                              <1> systemFile      equ 4h
   178                              <1> volumeLabel     equ 8h
   179                              <1> directoryFile   equ 10h ;Directory entry
   180                              <1> archiveFile     equ 20h
   181                              <1> ;Device Info equates
   182                              <1> ;For a block device, bits [5:0] contain the drive number
   183                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   184                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   185                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   186                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   187                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   188                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   189                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   190                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   191                              <1> devCharDev      equ 80h ;If set, it is a char device!
   192                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   193                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   194                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   195                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   196                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   197                              <1>  
   198                              <1> ;------------------------------------------------------------------------;
   199                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   200                              <1> ; to an internal buffer, and then copying it to the specified location
   201                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   202                              <1> ; another request for the same sector from the same device is made, so 
   203                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   204                              <1> ; size, selected according to the largest detected sector size during 
   205                              <1> ; the initial loadup.
   206                              <1> ;
   207                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   208                              <1> ;
   209                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   210                              <1> ;------------------------------------------------------------------------;
   211                              <1> 
   212                              <1> struc bufferHdr
   213 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   214 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   215 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   216 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   217 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   218 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   219 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   220 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   221 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   222                              <1>     .dataarea:             ;Points to the start of the data area
   223                              <1> endstruc
   224                              <1> ;Buffer Flag equates
   225                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   226                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   227                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   228                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   229                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   230                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   231                              <1> ;Note! A buffer is marked as referenced only when the application 
   232                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> ; Memory control block for each memory arena
   235                              <1> ;------------------------------------------------------------------------;
   236                              <1> struc mcb
   237 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   238 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   239 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   240 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbMarkCtn      equ "M"
   248                              <1> mcbMarkEnd      equ "Z"
   249                              <1> 
   250                              <1> memFirstFit     equ 0   ;First free block goes to application
   251                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   252                              <1> memLastFit      equ 2   ;Last free block goes to application
   253                              <1> 
   254                              <1> ;Owner = Para aligned address => Owning application PSP
   255                              <1> ;...To consider...
   256                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   257                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   258                              <1> ;------------------------------------------------------------------------;
   259                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   260                              <1> ; following order, thus allowing for return values to be placed in the 
   261                              <1> ; registers by accessing the caller register stack frame.
   262                              <1> ;------------------------------------------------------------------------;
   263                              <1> struc callerFrame
   264 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   265 00000008 ????????????????    <1>     .rbx    resq 1    
   266 00000010 ????????????????    <1>     .rcx    resq 1
   267 00000018 ????????????????    <1>     .rdx    resq 1
   268 00000020 ????????????????    <1>     .rsi    resq 1
   269 00000028 ????????????????    <1>     .rdi    resq 1
   270 00000030 ????????????????    <1>     .rbp    resq 1
   271 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   272 00000040 ????????????????    <1>     .r9     resq 1
   273                              <1> ;Pushed by Processor when invoked via Interrupt
   274 00000048 ????????????????    <1>     .rip    resq 1
   275 00000050 ????????????????    <1>     .cs     resq 1
   276 00000058 ????????????????    <1>     .flags  resq 1
   277                              <1> endstruc
   278                              <1> 
   279                              <1> struc dpl
   280                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   281                              <1> ; server calls
   282 00000000 ????????????????    <1>     .rax    resq 1
   283 00000008 ????????????????    <1>     .rbx    resq 1
   284 00000010 ????????????????    <1>     .rcx    resq 1
   285 00000018 ????????????????    <1>     .rdx    resq 1
   286 00000020 ????????????????    <1>     .rsi    resq 1
   287 00000028 ????????????????    <1>     .rdi    resq 1
   288 00000030 ????????????????    <1>     .r8     resq 1
   289 00000038 ????????????????    <1>     .r9     resq 1
   290 00000040 ????????????????    <1>     .align  resq 1
   291 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   292 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   293                              <1> endstruc
   294                              <1> 
   295                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   296 00000000 ????????????????    <1>     .oldRBP         resq 1  
   297 00000008 ??                  <1>     .newBuffers     resb 1  ;New buffers value
   298 00000009 ??                  <1>     .newSFTVal      resb 1
   299 0000000A ??                  <1>     .newFCBSVal     resb 1
   300 0000000B ??                  <1>     .newProtFCBSVal resb 1  ;Number of protected FCBS
   301 0000000C ??                  <1>     .newLastdrive   resb 1
   302 0000000D ??                  <1>     .newStacks      resb 1  ;Ignored for now
   303 0000000E ????                <1>     .newStackSize   resb 2  ;Ignored for now
   304 00000010 ????????            <1>     .newAllocSize   resd 1  ;Used to keep track of reallocation size
   305 00000014 ????????            <1>                     resd 1  ;Alignment byte
   306 00000018 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   307                              <1> endstruc
   308                              <1> 
   309                              <1> struc filename
   310                              <1> ;8.3 File name struct
   311 00000000 ????????????????    <1>     .fName  resb 8
   312 00000008 ??????              <1>     .fExt   resb 3
   313                              <1> endstruc
   314                              <1> 
   315                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   316 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   317 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   318 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   319 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   320 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   321 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   322 00000016 ????                <1>     .fileTime   resw 1  ;File time
   323 00000018 ????                <1>     .fileDate   resw 1  ;File date
   324 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   325 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   326                              <1> endstruc
   327                              <1> 
   328                              <1> struc psp
   329 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   330 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   331 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   332 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   333 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   334 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   335 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   336 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   337 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   338 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   339 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   340 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   341 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   342 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   343                              <1> ;Extra handle arrays are grouped into a linked list
   344                              <1> ;The below are in the same place as in DOS
   345 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   346 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   347                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   348 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   349 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   350                              <1> endstruc
   351                              <1> 
   352                              <1> struc clkStruc
   353 00000000 ????                <1>     .dateWord   resw 1
   354 00000002 ??                  <1>     .minutes    resb 1
   355 00000003 ??                  <1>     .hours      resb 1
   356 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   357 00000005 ??                  <1>     .seconds    resb 1
   358                              <1> endstruc
   359                              <1> 
   360                              <1> struc countryStruc
   361 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   362                              <1>                         ;0 = month day year hh:mm:ss
   363                              <1>                         ;1 = day month year hh:mm:ss
   364                              <1>                         ;2 = year month day hh:mm:ss
   365 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   366 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   367 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   368 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   369 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   370 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   371                              <1>                         ;0 = Symbol leads, without space
   372                              <1>                         ;1 = Symbol follows, without space
   373                              <1>                         ;2 = Symbol leads, one space
   374                              <1>                         ;3 = Symbol follows, one space
   375                              <1>                         ;4 = Symbol replace decimal separator
   376 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   377 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   378 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   379 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   380 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   381                              <1> endstruc
   382                              <1> 
   383                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   384                              <1> ;for a space of 64Gb
   385                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   386                              <1> dosLowBase  equ 600h    ;Low load address
   387                              <1> 
   388                              <1> ;Critical Error AH bitfield equates
   389                              <1> critRead    equ 0h
   390                              <1> critWrite   equ 1h
   391                              <1> critDOS     equ 0h
   392                              <1> critFAT     equ 2h
   393                              <1> critDir     equ 4h
   394                              <1> critData    equ 6h
   395                              <1> critFailOK  equ 8h
   396                              <1> critRetryOK equ 10h
   397                              <1> critIgnorOK equ 20h
   398                              <1> critCharDev equ 80h
   399                              <1> 
   400                              <1> critIgnore  equ 0
   401                              <1> critRetry   equ 1
   402                              <1> critAbort   equ 2
   403                              <1> critFail    equ 3
   404                              <1> 
   405                              <1> ;MISC ASCII control chars
   406                              <1> NUL equ 00h ;^@         | ASCII Null
   407                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   408                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   409                              <1> BEL equ 07h ;^G         | ASCII Bell
   410                              <1> BSP equ 08h ;^H         | ASCII Backspace
   411                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   412                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   413                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   414                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   415                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   416                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   417                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   418                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   419                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   420                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   421                              <1> SPC equ 20h ;Printable  | ASCII Space
   422                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   423                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   424                              <1> 
   425                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   426                              <1> ;Extended Ascii Codes
   427                              <1> eF1     equ 3Bh ;F1 second byte
   428                              <1> eF2     equ 3Ch ;F2 second byte
   429                              <1> eF3     equ 3Dh ;F3 second byte
   430                              <1> eF4     equ 3Eh ;F4 second byte
   431                              <1> eF5     equ 3Fh ;F5 second byte
   432                              <1> eF6     equ 40h ;F6 second byte
   433                              <1> eF7     equ 41h ;F7 second byte
   434                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   435                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   436                              <1> eIns    equ 52h ;Insert second byte
   437                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   438                              <1> 
   439                              <1> ;Default Configuration for the system
   440                              <1> 
   441                              <1> buffersDefault  equ 30
   442                              <1> filesDefault    equ 20
   443                              <1> fcbsDefault     equ 4
   444                              <1> safeFcbsDeflt   equ 0
   445                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Source/Include/fcbStruc.inc"
     9                              <1> ;FCB related structures
    10                              <1> 
    11                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
    12                              <1> ;This field also used for random read/write ops to find the right record
    13                              <1> struc fcb
    14 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    15 00000001 ????????????????    <1>     .filename   resb 8
    16 00000009 ??????              <1>     .fileext    resb 3
    17 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    18                              <1> ;One block consists of 128 records, of size denoted in the below
    19 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    20 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    21 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    22 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    23                              <1>     ;----------------------------------------
    24                              <1>     ;Internal Records
    25 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    26 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    27 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    28                              <1>     ;----------------------------------------
    29 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    30 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    31                              <1> endstruc
    32                              <1> 
    33                              <1> struc exFcb
    34 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    35 00000001 ??????????          <1>     .reserved   resb 5  
    36 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    37 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    38 00000008 ????????????????    <1>     .filename   resb 8
    39 00000010 ??????              <1>     .fileext    resb 3
    40 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    41                              <1> ;One block consists of 128 records, of size denoted in the below
    42 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    43 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    44 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    45 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    46                              <1>     ;----------------------------------------
    47                              <1>     ;Internal Records
    48 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    49 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    50 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    51                              <1>     ;----------------------------------------
    52 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    53 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    54                              <1> endstruc
    55                              <1> 
    56                              <1> struc renameFcb
    57                              <1> ;Used for accessing the names and drive letter for renaming
    58                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    59 00000000 ??                  <1>     .driveNum   resb 1
    60 00000001 ????????????????    <1>     .filename   resb 8
    61 00000009 ??????              <1>     .fileext    resb 3
    62 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    63 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    64 00000011 ????????????????    <1>     .newName    resb 8
    65 00000019 ??????              <1>     .newExt     resb 3
    66 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    67                              <1> endstruc
    68                              <1> 
    69                              <1> ;FCBmode equates:
    70                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    71                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    72                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    73                              <1> fcbShareOn  equ 80h
    74                              <1> fcbCharDev  equ 40h
    75                              <1> fcbLocal    equ 40h
    76                              <1> 
    77                              <1> ;Structures of the special 6 bytes
    78                              <1> 
    79                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    80                              <1> struc noShare   
    81 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    82 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    83 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    84 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    85                              <1> endstruc
    86                              <1> 
    87                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    88                              <1> struc shareLocal    
    89 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    90 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    91 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    92                              <1> endstruc
    93                              <1> 
    94                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    95                              <1> struc shareNet
    96                              <1> ;All three fields too small for FAT32
    97 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    98 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    99 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   100                              <1> endstruc
     9                                  %include "./Source/Include/dosError.inc"
    10                              <1> ;DOS Error codes
    11                              <1> 
    12                              <1> ;Extended Error Codes
    13                              <1> errInvFnc   equ 1   ;Invalid function number
    14                              <1> errFnf      equ 2   ;File not found
    15                              <1> errPnf      equ 3   ;Path not found
    16                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    17                              <1> errAccDen   equ 5   ;Access denied (to resource)
    18                              <1> errBadHdl   equ 6   ;Invalid handle
    19                              <1> errMCBbad   equ 7   ;MCB's destroyed
    20                              <1> errNoMem    equ 8   ;Insufficient memory
    21                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    22                              <1> errBadEnv   equ 10  ;Invalid environment
    23                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    24                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    25                              <1> errInvDat   equ 13  ;Invalid data
    26                              <1> ;           equ 14  ;Reserved
    27                              <1> errBadDrv   equ 15  ;Invalid drive specified
    28                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    29                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    30                              <1> errNoFil    equ 18  ;No more files, no match found
    31                              <1> ;The following are Driver error codes + 19
    32                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    33                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    34                              <1> errUnkUnt   equ 20  ;Unknown Unit
    35                              <1> errDrvNR    equ 21  ;Drive not ready
    36                              <1> errUnkCmd   equ 22  ;Unknown Command
    37                              <1> errCRCerr   equ 23  ;Data (CRC) error
    38                              <1> errBadRLn   equ 24  ;Bad request structure length
    39                              <1> errSekErr   equ 25  ;Seek error
    40                              <1> errUnkMed   equ 26  ;Unknown media type
    41                              <1> errSecNF    equ 27  ;Sector not Found
    42                              <1> errNoPap    equ 28  ;Printer out of paper
    43                              <1> errWF       equ 29  ;Write fault
    44                              <1> errRF       equ 30  ;Read fault
    45                              <1> errGF       equ 31  ;General fault
    46                              <1> ;----------------------------------------------
    47                              <1> ;The following two go inbetween the Disk errors
    48                              <1> errShrVio   equ 32  ;Sharing violations
    49                              <1> errLokVio   equ 33  ;File Lock violation
    50                              <1> ;----------------------------------------------
    51                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    52                              <1> errNoFCB    equ 35  ;FCB unavailable
    53                              <1> errShrFul   equ 36  ;Sharing buffer full
    54                              <1> 
    55                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    56                              <1> 
    57                              <1> errFilExist equ 80  ;File already exists
    58                              <1> errDirExist equ 82  ;Directory already exists
    59                              <1> errFI44     equ 83  ;Fail on INT 44h
    60                              <1> errRedir    equ 84  ;Too many levels of redirection
    61                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    62                              <1> errBadPass  equ 86  ;Bad password
    63                              <1> errBadParam equ 87  ;Bad parameter passed to request
    64                              <1> errNetWrite equ 88  ;Network Write Fault
    65                              <1> ;-----------------------------------------------------------------------------
    66                              <1> ;Error Loci
    67                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    68                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    69                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    70                              <1> eLocChr     equ 4   ;Serial/Character Device error
    71                              <1> eLocMem     equ 5   ;Related to RAM
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error Actions
    74                              <1> eActRet     equ 1   ;Retry
    75                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    76                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    77                              <1> eActAbt     equ 4   ;Abort with cleanup
    78                              <1> eActKil     equ 5   ;Abort without cleanup
    79                              <1> eActIgn     equ 6   ;Ignore error
    80                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    81                              <1> ;-----------------------------------------------------------------------------
    82                              <1> ;Error classes
    83                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    84                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    85                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    86                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    87                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    88                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    89                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    90                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    91                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    92                              <1> eClsLocked  equ 10  ;Resource Locked
    93                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    94                              <1> eClsClash   equ 12  ;Resource already exists!
    95                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Source/Utils/COMMAND/Data/cmdEqu.asm"
    11                              <1> ;Data equates and struct declarations
    12                              <1> 
    13                              <1> cmdBufferL  equ 128 ;Length of a command line buffer
    14                              <1> driveSpecL  equ 2   ;Space for X:
    15                              <1> dirPathL    equ 64  ;Length of a directory path
    16                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
    17                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
    18                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
    19                              <1> fullDirPathL equ driveSpecL + dirPathL
    20                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    21                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    22                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    23                              <1> 
    24                              <1> ;Use PSP FCB's for switch buffers
    25                              <1> fcb1        equ psp.fcb1
    26                              <1> fcb2        equ psp.fcb2
    27                              <1> ;Use the dta as the built command line buffer.
    28                              <1> cmdLineCnt  equ psp.parmList
    29                              <1> cmdLine     equ psp.progTail
    30                              <1> 
    31                              <1> 
    32                              <1> ;Struct Declarations
    33                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    34 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    35 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    36 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    37 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    38 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    39                              <1> endstruc
    40                              <1> 
    41                              <1> struc execProg  ;For use with EXEC-ing a child task
    42 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    43 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    44 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    45 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    46                              <1> endstruc
    47                              <1> 
    48                              <1> ;Directory attribute equates
    49                              <1>     dirReadOnly     equ 01h
    50                              <1>     dirHidden       equ 02h
    51                              <1>     dirSystem       equ 04h
    52                              <1>     dirVolumeID     equ 08h
    53                              <1>     dirDirectory    equ 10h
    54                              <1>     dirArchive      equ 20h
    55                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    56                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    57                              <1>     ;If any of the three bits are set, then ALL three bits are set
    58                              <1>     ; in addition to whatever the user passed to search for.
    59                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    60                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Source/Utils/COMMAND/Data/cmdData.asm"
    13                              <1> ;Static Data Area for COMMAND.COM    
    14                              <1> startLbl:   ;Start symbol, this is the entry point
    15 00000000 E993270000          <1>     jmp cmdLdr
    16 00000005 0000000000000000    <1> stackBottom dq 0    ;Pointer to the top of the stack as allocated by DOS
    17 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
    18 0000000F FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
    19 00000017 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
    20 0000001F 1400                <1> numHdls     dw 20   ;Get number of handles permitted, hardcoded in this version
    21 00000021 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    22 00000023 5C                  <1> pathSep     db "\"  ;Default path sep
    23 00000024 2F                  <1> switchChar  db "/"  ;Default switch char
    24 00000025 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    25 00000026 0000000000000000    <1> parentInt42 dq 0    ;Stores the parent values to restore upon exiting if it can
    26                              <1> ;Static strings, not used in command line parsing
    27 0000002E 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    27 00000037 000000000000000000- <1>
    27 00000040 000000000000000000- <1>
    27 00000049 000000000000000000- <1>
    27 00000052 0000                <1>
    28 00000054 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    28 0000005D 000000000000000000- <1>
    28 00000066 000000000000000000- <1>
    28 0000006F 000000000000000000- <1>
    28 00000078 000000000000000000- <1>
    28 00000081 000000000000000000- <1>
    28 0000008A 000000000000000000- <1>
    28 00000093 00000000            <1>
    29                              <1> 
    30                              <1> 
    31                              <1> cmdLineStatePtr:
    32 00000097 00                  <1> cmdStartOff db 0    ;Offset to the first char for this command (may be a space)
    33 00000098 00                  <1> cmdEndOff   db 0    ;Offset to the terminating char for this command (0Dh or |)
    34 00000099 00                  <1> pipeFlag    db 0    ;If set, we are piping across a command
    35 0000009A 0000                <1> pipeHndl    dw 0    ;If pipeFlag set, this var has the handle to the pipe file
    36 0000009C 000000000000000000- <1> pipeName    db 13 dup 0, ;Space for name of the pipe file we created.
    36 000000A5 00000000            <1>
    37                              <1> 
    38                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    39                              <1> ;These variables are valid for a SINGLE command in a command line
    40 000000A9 0000                <1> cmdDrvSpec  dw 0    ;Read the first word in to see if the pathspec has drivespec
    41 000000AB 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    42 000000AC 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    43                              <1> ;                    If 2, we are redirecting output to a file, by appending
    44                              <1> ;FLG and SWCH are read as a word when checking if argX is a switch
    45 000000AD 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    46 000000AE 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    47 000000AF 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    48                              <1> 
    49 000000B0 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    50 000000B1 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    51 000000B2 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    52                              <1> 
    53                              <1> cmdStateL equ $ - cmdStatePtr
    54                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    55                              <1> 
    56                              <1> ;Structs and strings
    57                              <1> 
    58 000000B3 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    58 000000BC 00000000000000      <1>
    59 000000C3 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    59 000000CC 000000000000000000- <1>
    59 000000D5 000000000000000000- <1>
    59 000000DE 000000000000000000- <1>
    59 000000E7 00000000000000      <1>
    60                              <1> 
    61 000000EE 000000000000000000- <1> launchBlock db execProg_size dup (0)
    61 000000F7 000000000000000000- <1>
    61 00000100 000000000000000000- <1>
    61 00000109 0000000000          <1>
    62                              <1> 
    63 0000010E 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    63 00000117 000000000000000000- <1>
    63 00000120 000000000000000000- <1>
    63 00000129 000000000000000000- <1>
    63 00000132 000000000000000000- <1>
    63 0000013B 000000000000000000- <1>
    63 00000144 000000000000000000- <1>
    63 0000014D 000000000000000000- <1>
    63 00000156 000000000000000000- <1>
    63 0000015F 000000000000000000- <1>
    63 00000168 000000000000000000- <1>
    63 00000171 000000000000000000- <1>
    63 0000017A 000000000000000000- <1>
    63 00000183 000000000000000000- <1>
    63 0000018C 0000                <1>
    64 0000018E 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    64 00000197 000000000000000000- <1>
    64 000001A0 000000000000000000- <1>
    64 000001A9 000000000000000000- <1>
    64 000001B2 000000000000000000- <1>
    64 000001BB 000000000000000000- <1>
    64 000001C4 000000000000000000- <1>
    64 000001CD 000000000000000000- <1>
    64 000001D6 000000000000000000- <1>
    64 000001DF 000000000000000000- <1>
    64 000001E8 000000000000000000- <1>
    64 000001F1 000000000000000000- <1>
    64 000001FA 000000000000000000- <1>
    64 00000203 000000000000000000- <1>
    64 0000020C 0000                <1>
    65 0000020E 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)  ;Space for full path to a external command
    65 00000217 000000000000000000- <1>
    65 00000220 000000000000000000- <1>
    65 00000229 000000000000000000- <1>
    65 00000232 000000000000000000- <1>
    65 0000023B 000000000000000000- <1>
    65 00000244 000000000000000000- <1>
    65 0000024D 000000000000000000- <1>
    65 00000256 00000000000000      <1>
    66                              <1> 
    67 0000025D 000000000000000000- <1> fcbCmdSpec  db fcbNameL dup (0) ;Used to make a FCB style name for the file
    67 00000266 0000                <1>
    68 00000268 000000000000000000- <1> cmdSpec     db fileNameZL dup (0)   ;ASCIIZ command spec for the command name
    68 00000271 00000000            <1>
    69 00000275 000000000000000000- <1> cmdName     db cmdNameL dup (0) ;Command name string prefixed by length of word
    69 0000027E 0000000000          <1>
    70                              <1> 
    71 00000283 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    71 0000028C 000000000000000000- <1>
    71 00000295 000000000000000000- <1>
    71 0000029E 000000000000000000- <1>
    71 000002A7 000000000000000000- <1>
    71 000002B0 000000000000000000- <1>
    71 000002B9 000000000000000000- <1>
    71 000002C2 000000000000000000- <1>
    71 000002CB 00000000000000      <1>
    72 000002D2 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    72 000002DB 000000000000000000- <1>
    72 000002E4 000000000000000000- <1>
    72 000002ED 000000000000000000- <1>
    72 000002F6 000000000000000000- <1>
    72 000002FF 000000000000000000- <1>
    72 00000308 000000000000000000- <1>
    72 00000311 000000000000000000- <1>
    72 0000031A 00000000000000      <1>
    73                              <1> 
    74 00000321 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Contains the pathspec for the search file
    74 0000032A 000000000000000000- <1>
    74 00000333 000000000000000000- <1>
    74 0000033C 000000000000000000- <1>
    74 00000345 000000000000000000- <1>
    74 0000034E 000000000000000000- <1>
    74 00000357 000000000000000000- <1>
    74 00000360 000000000000000000- <1>
    74 00000369 000000000000000000- <1>
    74 00000372 000000000000000000- <1>
    74 0000037B 000000000000000000- <1>
    74 00000384 000000000000000000- <1>
    74 0000038D 000000000000000000- <1>
    74 00000396 000000000000000000- <1>
    74 0000039F 0000                <1>
    75                              <1> ;The above is larger than is needed/supported by DOS to allow for 
    76                              <1> ; users overtyping
    77                              <1> 
    78                              <1> ;Internal Function vars
    79                              <1> ;Dir Vars
    80 000003A1 00                  <1> dirPrnType  db 0    ;Print type.    Bit[0] set => /W or /w specified
    81                              <1> ;                                   Bit[1] set => /P or /p specified
    82 000003A2 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    83 000003A3 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    84 000003A4 00                  <1> dirDrv      db 0    ;0 based drive number to use
    85 000003A5 000000000000000000- <1> dirOldCWD   db cmdBufferL dup (0)   ;Space for CWD and any overspill 
    85 000003AE 000000000000000000- <1>
    85 000003B7 000000000000000000- <1>
    85 000003C0 000000000000000000- <1>
    85 000003C9 000000000000000000- <1>
    85 000003D2 000000000000000000- <1>
    85 000003DB 000000000000000000- <1>
    85 000003E4 000000000000000000- <1>
    85 000003ED 000000000000000000- <1>
    85 000003F6 000000000000000000- <1>
    85 000003FF 000000000000000000- <1>
    85 00000408 000000000000000000- <1>
    85 00000411 000000000000000000- <1>
    85 0000041A 000000000000000000- <1>
    85 00000423 0000                <1>
    86 00000425 000000000000000000- <1> dirPathArg  db cmdBufferL dup (0)   ;Copy the pathspec argument here if any
    86 0000042E 000000000000000000- <1>
    86 00000437 000000000000000000- <1>
    86 00000440 000000000000000000- <1>
    86 00000449 000000000000000000- <1>
    86 00000452 000000000000000000- <1>
    86 0000045B 000000000000000000- <1>
    86 00000464 000000000000000000- <1>
    86 0000046D 000000000000000000- <1>
    86 00000476 000000000000000000- <1>
    86 0000047F 000000000000000000- <1>
    86 00000488 000000000000000000- <1>
    86 00000491 000000000000000000- <1>
    86 0000049A 000000000000000000- <1>
    86 000004A3 0000                <1>
    87 000004A5 3F3F3F3F3F3F3F3F    <1> dirSrchPat  db 8 dup ("?")    ;We copy the search pattern here
    88 000004AD 2E                  <1> dirSPExt    db "."
    89 000004AE 3F3F3F              <1>             db 3 dup ("?")
    90                              <1> 
    91                              <1> ;Volume Vars
    92 000004B1 000000000000000000- <1> volLblSpc   db 13 dup (0)
    92 000004BA 00000000            <1>
    93 000004BE 00                  <1> volPathBuf  db 0 ;Drive LETTER goes here
    94 000004BF 3A5C2A2E2A00        <1>             db ":\*.*",0  ;This remains to build X:\*.*,0 for vol label search
    95                              <1> 
    96                              <1> ;Time/Date vars
    97 000004C5 00                  <1> td1 db 0    ;Minutes/Year
    98 000004C6 00                  <1> td2 db 0    ;Hours/Zero
    99 000004C7 00                  <1> td3 db 0    ;Hundredths/Day
   100 000004C8 00                  <1> td4 db 0    ;Seconds/Month
   101                              <1> 
   102                              <1> ;Rename Buffers
   103 000004C9 000000000000000000- <1> sourcePath  db cmdBufferL dup (0)
   103 000004D2 000000000000000000- <1>
   103 000004DB 000000000000000000- <1>
   103 000004E4 000000000000000000- <1>
   103 000004ED 000000000000000000- <1>
   103 000004F6 000000000000000000- <1>
   103 000004FF 000000000000000000- <1>
   103 00000508 000000000000000000- <1>
   103 00000511 000000000000000000- <1>
   103 0000051A 000000000000000000- <1>
   103 00000523 000000000000000000- <1>
   103 0000052C 000000000000000000- <1>
   103 00000535 000000000000000000- <1>
   103 0000053E 000000000000000000- <1>
   103 00000547 0000                <1>
   104 00000549 000000000000000000- <1> destPath    db cmdBufferL dup (0)
   104 00000552 000000000000000000- <1>
   104 0000055B 000000000000000000- <1>
   104 00000564 000000000000000000- <1>
   104 0000056D 000000000000000000- <1>
   104 00000576 000000000000000000- <1>
   104 0000057F 000000000000000000- <1>
   104 00000588 000000000000000000- <1>
   104 00000591 000000000000000000- <1>
   104 0000059A 000000000000000000- <1>
   104 000005A3 000000000000000000- <1>
   104 000005AC 000000000000000000- <1>
   104 000005B5 000000000000000000- <1>
   104 000005BE 000000000000000000- <1>
   104 000005C7 0000                <1>
    13                                  %include "./Source/Utils/COMMAND/Data/cmdTable.asm"
    14                              <1> ;Function dispatch table
    15                              <1> functionTable:
    16                              <1> ;Use Pascal strings with each row of hte table having three columns:
    17                              <1> ; Col 1, BYTE, Length of command
    18                              <1> ; Col 2, String, String representing the user input
    19                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
    20 000005C9 03444952            <1>     db 3, "DIR"
    21 000005CD 8511                <1>     dw dir - startLbl
    22                              <1> 
    23 000005CF 024344              <1>     db 2, "CD"
    24 000005D2 1D15                <1>     dw chdir - startLbl
    25                              <1> 
    26 000005D4 054348444952        <1>     db 5, "CHDIR"
    27 000005DA 1D15                <1>     dw chdir - startLbl
    28                              <1> 
    29 000005DC 024D44              <1>     db 2, "MD"
    30 000005DF C515                <1>     dw mkdir - startLbl
    31                              <1> 
    32 000005E1 054D4B444952        <1>     db 5, "MKDIR"
    33 000005E7 C515                <1>     dw mkdir - startLbl
    34                              <1> 
    35 000005E9 025244              <1>     db 2, "RD"
    36 000005EC 1116                <1>     dw rmdir - startLbl
    37                              <1> 
    38 000005EE 05524D444952        <1>     db 5, "RMDIR"
    39 000005F4 1116                <1>     dw rmdir - startLbl
    40                              <1> 
    41 000005F6 0344454C            <1>     db 3, "DEL"
    42 000005FA 5E16                <1>     dw erase - startLbl
    43                              <1> 
    44 000005FC 054552415345        <1>     db 5, "ERASE"
    45 00000602 5E16                <1>     dw erase - startLbl
    46                              <1> 
    47 00000604 0444415445          <1>     db 4, "DATE"
    48 00000609 8716                <1>     dw date - startLbl
    49                              <1> 
    50 0000060B 0454494D45          <1>     db 4, "TIME"
    51 00000610 4D17                <1>     dw time - startLbl
    52                              <1> 
    53 00000612 04434F5059          <1>     db 4, "COPY"
    54 00000617 5D16                <1>     dw copy - startLbl
    55                              <1> 
    56 00000619 0443545459          <1>     db 4, "CTTY"
    57 0000061E E517                <1>     dw ctty - startLbl
    58                              <1> 
    59 00000620 03434C53            <1>     db 3, "CLS"
    60 00000624 8018                <1>     dw cls - startLbl
    61                              <1> 
    62 00000626 05425245414B        <1>     db 5, "BREAK"
    63 0000062C F218                <1>     dw break - startLbl
    64                              <1> 
    65 0000062E 06564552494659      <1>     db 6, "VERIFY"
    66 00000635 7319                <1>     dw verify - startLbl
    67                              <1> 
    68 00000637 0652454E414D45      <1>     db 6, "RENAME"
    69 0000063E F019                <1>     dw rename - startLbl
    70                              <1> 
    71 00000640 08545255454E414D45  <1>     db 8, "TRUENAME"
    72 00000649 2C1A                <1>     dw truename - startLbl
    73                              <1> 
    74 0000064B 03564552            <1>     db 3, "VER"
    75 0000064F 751B                <1>     dw version - startLbl
    76                              <1> 
    77 00000651 03564F4C            <1>     db 3, "VOL"
    78 00000655 621A                <1>     dw volume - startLbl
    79                              <1> 
    80 00000657 034D454D            <1>     db 3, "MEM"
    81 0000065B B91B                <1>     dw memory - startLbl
    82                              <1> 
    83 0000065D 0445584954          <1>     db 4, "EXIT"
    84 00000662 9B1D                <1>     dw exit - startLbl
    85                              <1> 
    86 00000664 0454595045          <1>     db 4, "TYPE"
    87 00000669 031D                <1>     dw type - startLbl
    88                              <1> 
    89 0000066B 05544F554348        <1>     db 5, "TOUCH"
    90 00000671 F119                <1>     dw touch - startLbl
    91                              <1> 
    92 00000673 FF                  <1>     db -1   ;End of table
    14                                  %include "./Source/Utils/COMMAND/Data/cmdMsg.asm"
    15                              <1> ;COMMAND.COM Messages and strings
    16 00000674 0D0A24              <1> crlf    db  CR,LF,"$"
    17 00000677 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
    18 0000067C 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
    18 00000685 696C65206D69737369- <1>
    18 0000068E 6E670D0A24          <1>
    19 00000693 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
    19 0000069C 6469736B2077697468- <1>
    19 000006A5 206261746368206669- <1>
    19 000006AE 6C65                <1>
    20 000006B0 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
    20 000006B9 737320616E79206B65- <1>
    20 000006C2 79207768656E207265- <1>
    20 000006CB 6164790D0A24        <1>
    21 000006D1 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
    21 000006DA 6E64206F722066696C- <1>
    21 000006E3 65206E616D650D0A24  <1>
    22 000006EC 4475706C6963617465- <1> dupName db  "Duplicate file name or "
    22 000006F5 2066696C65206E616D- <1>
    22 000006FE 65206F7220          <1>
    23 00000703 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    23 0000070C 666F756E640D0A24    <1>
    24 00000714 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    24 0000071D 656E74206469736B20- <1>
    24 00000726 73706163650D0A24    <1>
    25 0000072E 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    25 00000737 7669726F6E6D656E74- <1>
    25 00000740 2073706163650D0A24  <1>
    26 00000749 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    26 00000752 74696F6E206572726F- <1>
    26 0000075B 720D0A24            <1>
    27 0000075F 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    27 00000768 6F7420626520636F70- <1>
    27 00000771 696564206F6E746F20- <1>
    27 0000077A 697473656C660D0A24  <1>
    28 00000783 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    28 0000078C 662064657374696E61- <1>
    28 00000795 74696F6E206C6F7374- <1>
    28 0000079E 206265666F72652063- <1>
    28 000007A7 6F70790D0A24        <1>
    29                              <1> ;Copy end message. First write # files copied then this message 
    30 000007AD 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    30 000007B6 636F706965640D0A24  <1>
    31                              <1> ;Dir end1 msg. First write # files in dir then this
    32 000007BF 2046696C6528732920- <1> dirOk   db  " File(s) $"
    32 000007C8 24                  <1>
    33                              <1> ;Dir end2 msg. First write # bytes free then this message
    34 000007C9 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    34 000007D2 65650D0A24          <1>
    35 000007D7 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    36                              <1> 
    37 000007E0 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    37 000007E9 726976652073706563- <1>
    37 000007F2 696669636174696F6E- <1>
    37 000007FB 0D0A24              <1>
    38 000007FE 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    38 00000807 6B6579207768656E20- <1>
    38 00000810 7265616479202E202E- <1>
    38 00000819 202E2024            <1>
    39 0000081D 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    39 00000826 6172616D657465720D- <1>
    39 0000082F 0A24                <1>
    40                              <1> 
    41 00000831 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    41 0000083A 576564546875467269- <1>
    41 00000843 536174              <1>
    42 00000846 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    42 0000084F 206461746524        <1>
    43 00000855 43757272656E742064- <1> curDate db  "Current date is $"
    43 0000085E 6174652069732024    <1>
    44 00000866 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    44 0000086F 657720646174652024  <1>
    45 00000878 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    45 00000881 293A2024            <1>
    46 00000885 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    46 0000088E 293A2024            <1>
    47 00000892 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    47 0000089B 293A2024            <1>
    48 0000089F 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    48 000008A8 2074696D6524        <1>
    49 000008AE 43757272656E742074- <1> curTime db  "Current time is $"
    49 000008B7 696D652069732024    <1>
    50 000008BF 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    50 000008C8 65772074696D653A20- <1>
    50 000008D1 24                  <1>
    51                              <1> 
    52 000008D2 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    52 000008DB 7572652028592F4E29- <1>
    52 000008E4 3F2024              <1>
    53                              <1> 
    54 000008E7 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    54 000008F0 56657273696F6E2024  <1>
    55                              <1> 
    56 000008F9 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    56 00000902 6E2064726976652024  <1>
    57 0000090B 2069732024          <1> volOk   db " is $"
    58 00000910 20686173206E6F206C- <1> volNo   db " has no label$"
    58 00000919 6162656C24          <1>
    59                              <1> 
    60 0000091E 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    60 00000927 69726563746F72790D- <1>
    60 00000930 0A24                <1>
    61 00000932 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    61 0000093B 206372656174652064- <1>
    61 00000944 69726563746F72790D- <1>
    61 0000094D 0A24                <1>
    62 0000094F 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    62 00000958 6174682C206E6F7420- <1>
    62 00000961 6469726563746F7279- <1>
    62 0000096A 2C0D0A              <1>
    63 0000096D 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    63 00000976 6F7279206E6F742065- <1>
    63 0000097F 6D7074790D0A24      <1>
    64 00000986 204469726563746F72- <1> dirMain db " Directory of  $"
    64 0000098F 79206F66202024      <1>
    65 00000996 4E6F20506174682024  <1> noPath  db "No Path $"
    66 0000099F 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    66 000009A8 7269766520696E2073- <1>
    66 000009B1 656172636820706174- <1>
    66 000009BA 680D0A24            <1>
    67 000009BE 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    67 000009C7 65766963650D0A24    <1>
    68 000009CF 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    68 000009D8 20666F756E640D0A24  <1>
    69 000009E1 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    69 000009EA 726F720D0A24        <1>
    70 000009F0 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    70 000009F9 6F74206265206E6573- <1>
    70 00000A02 7465640D0A24        <1>
    71 00000A08 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    71 00000A11 6174652066696C6520- <1>
    71 00000A1A 6572726F7220647572- <1>
    71 00000A23 696E6720706970650D- <1>
    71 00000A2C 0A24                <1>
    72 00000A2E 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    72 00000A37 2062696E6172792072- <1>
    72 00000A40 656164732066726F6D- <1>
    72 00000A49 206120646576696365- <1>
    72 00000A52 0D0A24              <1>
    73 00000A55 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    74 00000A5B 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    75 00000A60 425245414B20697320- <1> breakIs db "BREAK is $"
    75 00000A69 24                  <1>
    76 00000A6A 564552494659206973- <1> verifyIs    db "VERIFY is $"
    76 00000A73 2024                <1>
    77 00000A75 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    78 00000A7E 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    78 00000A87 617468206F72206669- <1>
    78 00000A90 6C65206E616D650D0A- <1>
    78 00000A99 24                  <1>
    79 00000A9A 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    79 00000AA3 756D626572206F6620- <1>
    79 00000AAC 706172616D65746572- <1>
    79 00000AB5 730D0A24            <1>
    80 00000AB9 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    80 00000AC2 74696E6720746F2064- <1>
    80 00000ACB 6576696365          <1>
    81 00000AD0 08200800            <1> backSpace   db BSP," ",BSP,NUL
    82                              <1> 
    83 00000AD4 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    83 00000ADD 20202020202020546F- <1>
    83 00000AE6 74616C207379737465- <1>
    83 00000AEF 6D206D656D6F72793A- <1>
    83 00000AF8 2024                <1>
    84 00000AFA 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    84 00000B03 20202020202020204D- <1>
    84 00000B0C 656D6F727920757365- <1>
    84 00000B15 6420627920444F533A- <1>
    84 00000B1E 2024                <1>
    85 00000B20 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    85 00000B29 656D6F727920757365- <1>
    85 00000B32 64206279206170706C- <1>
    85 00000B3B 69636174696F6E733A- <1>
    85 00000B44 2024                <1>
    86 00000B46 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    86 00000B4F 656D6F727920726573- <1>
    86 00000B58 657276656420627920- <1>
    86 00000B61 68617264776172653A- <1>
    86 00000B6A 2024                <1>
    87 00000B6C 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    87 00000B75 202020202020202020- <1>
    87 00000B7E 2020202020204D656D- <1>
    87 00000B87 6F727920667265653A- <1>
    87 00000B90 2024                <1>
    88 00000B92 20627974657324      <1> memByte db " bytes$"
    89 00000B99 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    89 00000BA2 6F7420417373657274- <1>
    89 00000BAB 61696E20444F532045- <1>
    89 00000BB4 6E74727920506F696E- <1>
    89 00000BBD 7424                <1>
    90 00000BBF 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    90 00000BC8 416C6C6F636174696F- <1>
    90 00000BD1 6E204572726F7224    <1>
    91 00000BD9 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    91 00000BE2 4572726F7224        <1>
    92 00000BE8 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    92 00000BF1 68616C74656424      <1>
    93                              <1> 
    94 00000BF8 556E61626C6520746F- <1> touchErr db "Unable to create file",CR,LF,"$"
    94 00000C01 206372656174652066- <1>
    94 00000C0A 696C650D0A24        <1>
    95                              <1> 
    96                              <1> 
    97 00000C10 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    98 00000C14 2020202024          <1> fourSpc  db "    $"
    99 00000C19 20202024            <1> threeSpc db "   $"
   100 00000C1D 202024              <1> twoSpc   db "  $"
   101                              <1> 
   102 00000C20 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
   102 00000C29 696679204F4E206F72- <1>
   102 00000C32 204F46460D0A24      <1>
   103 00000C39 504154483D          <1> pathEVar db "PATH="
   104 00000C3E 50524F4D50543D      <1> promptEVar  db "PROMPT="
    15                                  %include "./Source/Utils/COMMAND/Source/cmdMain.asm"
    16                              <1> commandStart:
    17                              <1>     ;Resize Allocation, jump here with endpointer in rbx
    18                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
    19                              <1>     ; that the jump to safety won't be gobbled up when multitasking
    20 00000C45 49F7D8              <1>     neg r8  ;Convert r8 to -r8
    21 00000C48 4A8D5C0311          <1>     lea rbx, qword [rbx + r8 + 11h]    ;Get # of bytes for COMMAND.COM
    22 00000C4D C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
    23 00000C50 B44A                <1>     mov ah, 4Ah ;Realloc
    24 00000C52 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    25 00000C55 CD41                <1>     int 41h
    26 00000C57 EB5A                <1>     jmp short commandMain
    27                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    28 00000C59 B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    29 00000C5E CD41                <1>     int 41h
    30 00000C60 668905A6F3FFFF      <1>     mov word [returnCode], ax
    31                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    32 00000C67 488D156C180000      <1>     lea rdx, critErrorHandler
    33 00000C6E 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    34 00000C72 B844250000          <1>     mov eax, 2544h
    35 00000C77 CD41                <1>     int 41h
    36 00000C79 488D15EA1A0000      <1>     lea rdx, int43h
    37 00000C80 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    38 00000C84 B843250000          <1>     mov eax, 2543h
    39 00000C89 CD41                <1>     int 41h
    40 00000C8B 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    41 00000C92 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    42 00000C96 B842250000          <1>     mov eax, 2542h
    43 00000C9B CD41                <1>     int 41h
    44                              <1> ;Close all handles from 5->MAX
    45 00000C9D 0FB70D7BF3FFFF      <1>     movzx ecx, word [numHdls]
    46 00000CA4 BB05000000          <1>     mov ebx, 5
    47                              <1> .handleClose:
    48 00000CA9 B43E                <1>     mov ah, 3Eh ;File close
    49 00000CAB CD41                <1>     int 41h
    50 00000CAD FFC3                <1>     inc ebx ;Goto next file
    51 00000CAF 39CB                <1>     cmp ebx, ecx
    52 00000CB1 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    53                              <1> commandMain:
    54                              <1> ;Setup Commandline
    55 00000CB3 FA                  <1>     cli
    56 00000CB4 488B254AF3FFFF      <1>     mov rsp, qword [stackBottom]    ;Reset internal stack pointer pos
    57 00000CBB FB                  <1>     sti
    58 00000CBC FC                  <1>     cld ;Ensure stringops are done the right way
    59 00000CBD C6054AF4FFFF80      <1>     mov byte [inBuffer], 80h    ;Reset the buffer length
    60                              <1> .inputMain:
    61 00000CC4 E8C5150000          <1>     call clearCommandLineState
    62 00000CC9 E84C120000          <1>     call printCRLF
    63 00000CCE E893150000          <1>     call printPrompt
    64                              <1> 
    65 00000CD3 488D1534F4FFFF      <1>     lea rdx, inBuffer
    66 00000CDA B80A0C0000          <1>     mov eax, 0C0Ah  ;Do Buffered input
    67 00000CDF CD41                <1>     int 41h
    68 00000CE1 E834120000          <1>     call printCRLF  ;Note we have accepted input
    69                              <1> 
    70                              <1> ;First check we had something typed in of length greater than 1
    71                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    72 00000CE6 803D22F4FFFF01      <1>     cmp byte [inBuffer + 1], 1  ;Check input length valid
    73 00000CED 742C                <1>     je .dfltErrExit
    74 00000CEF 72D3                <1>     jb .inputMain
    75                              <1>     ;Copy over the input text
    76 00000CF1 488D3516F4FFFF      <1>     lea rsi, inBuffer
    77 00000CF8 488D3D8FF4FFFF      <1>     lea rdi, cmdBuffer
    78 00000CFF B980000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    79 00000D04 F3A4                <1>     rep movsb
    80 00000D06 31C0                <1>     xor eax, eax
    81 00000D08 66890588F3FFFF      <1>     mov word [cmdStartOff], ax  ;Clear start and end Off positions
    82 00000D0F E814000000          <1>     call parseInput
    83 00000D14 E8AD010000          <1>     call doCommandLine
    84 00000D19 EBA9                <1>     jmp short .inputMain
    85                              <1> .dfltErrExit:
    86 00000D1B 488D15AFF9FFFF      <1>     lea rdx, badCmd
    87 00000D22 B409                <1>     mov ah, 09h
    88 00000D24 CD41                <1>     int 41h
    89 00000D26 EB9C                <1>     jmp short .inputMain
    90                              <1> 
    91                              <1> parseInput:
    92                              <1> ;EndOff is set up before entering this part
    93                              <1> ;Copies a nicely formatted version of the input command line
    94                              <1> ; without any redirections to psp.dta
    95 00000D28 488D3561F4FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
    96 00000D2F 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
    97 00000D36 0FB61D5BF3FFFF      <1>     movzx ebx, byte [cmdEndOff] ;Get the old end offset
    98 00000D3D 4801DE              <1>     add rsi, rbx    ;Move rsi to the start of this new command
    99 00000D40 E812150000          <1>     call skipSpaces ;Skip any preceeding spaces
   100 00000D45 66AD                <1>     lodsw   ;Get the first two chars into ax
   101 00000D47 6689055BF3FFFF      <1>     mov word [cmdDrvSpec], ax ;Store these chars as if they are the drvspec
   102 00000D4E 4881EE02000000      <1>     sub rsi, 2  ;Go back to the start of the command
   103 00000D55 56                  <1>     push rsi
   104 00000D56 57                  <1>     push rdi
   105 00000D57 488D3DB0F4FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   106 00000D5E 57                  <1>     push rdi
   107 00000D5F E845030000          <1>     call copyCommandTailItemProgram
   108 00000D64 5F                  <1>     pop rdi
   109 00000D65 9C                  <1>     pushfq  ;Save the CF state
   110 00000D66 E874140000          <1>     call strlen
   111 00000D6B FFC9                <1>     dec ecx ;Drop the terminating char from the count
   112 00000D6D 58                  <1>     pop rax ;Get the CF state in al
   113 00000D6E 5F                  <1>     pop rdi
   114 00000D6F 5E                  <1>     pop rsi
   115 00000D70 F3A4                <1>     rep movsb   ;Now we copy the command into the psp command line
   116 00000D72 A801                <1>     test al, 1  ;Was CF set?
   117 00000D74 0F8586000000        <1>     jnz .exit   ;If an embedded CR was found in the filename, exit!
   118                              <1> .cmdLineProcess:
   119 00000D7A E8D8140000          <1>     call skipSpaces ;Go to the next char in the input line
   120                              <1> .redirFound:
   121 00000D7F AC                  <1>     lodsb   ;Get first non-space char (setupRedir skips spaces before ret)
   122 00000D80 3C0D                <1>     cmp al, CR  ;If this was a CR, we stop processing
   123 00000D82 747C                <1>     je .exit
   124 00000D84 E8B3020000          <1>     call checkAndSetupRedir ;If not, check if we have a redir element
   125 00000D89 7275                <1>     jc .exit    ;CF=CY only if pipe, which is equivalent to CR when processing
   126 00000D8B 74F2                <1>     jz .redirFound  ;If we had a < > or >>, proceed to check if next char CR
   127 00000D8D B020                <1>     mov al, " "
   128 00000D8F AA                  <1>     stosb   ;Store a space to make space for the command file parameter
   129 00000D90 48FFCE              <1>     dec rsi ;Move rsi back to the first char
   130 00000D93 F60513F3FFFFFF      <1>     test byte [arg1Flg], -1
   131 00000D9A 7521                <1>     jnz .arg2
   132                              <1> .arg1:
   133 00000D9C C6050AF3FFFFFF      <1>     mov byte [arg1Flg], -1
   134 00000DA3 E8AF140000          <1>     call skipSpaces
   135 00000DA8 4889F0              <1>     mov rax, rsi
   136 00000DAB 488D1DDCF3FFFF      <1>     lea rbx, cmdBuffer
   137 00000DB2 4829D8              <1>     sub rax, rbx
   138 00000DB5 8805F3F2FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   139 00000DBB EB2A                <1>     jmp short .argCommon
   140                              <1> .arg2:
   141 00000DBD F605ECF2FFFFFF      <1>     test byte [arg2Flg], -1
   142 00000DC4 7521                <1>     jnz .argCommon
   143 00000DC6 C605E3F2FFFFFF      <1>     mov byte [arg2Flg], -1
   144 00000DCD E885140000          <1>     call skipSpaces
   145 00000DD2 4889F0              <1>     mov rax, rsi
   146 00000DD5 488D1DB2F3FFFF      <1>     lea rbx, cmdBuffer
   147 00000DDC 4829D8              <1>     sub rax, rbx
   148 00000DDF 8805CCF2FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   149 00000DE5 EB00                <1>     jmp short .argCommon
   150                              <1> .argCommon:
   151                              <1>     ;More than two arguments? Do nothing more than just copy it
   152                              <1>     ; over. If we encounter an embedded CR, exit there too
   153 00000DE7 E86B140000          <1>     call skipSpaces
   154 00000DEC 803E0D              <1>     cmp byte [rsi], CR  ;Are we at the end of the commandline?
   155 00000DEF 740F                <1>     je .exit
   156                              <1>     ;If not, we copy it over
   157 00000DF1 E8DD020000          <1>     call copyCommandTailItem    ;Stores a terminating null we dont want
   158 00000DF6 488D7FFF            <1>     lea rdi, qword [rdi - 1]    ;Point back at the inserted terminating null
   159 00000DFA 0F837AFFFFFF        <1>     jnc .cmdLineProcess
   160                              <1> .exit:
   161 00000E00 488D1D87F3FFFF      <1>     lea rbx, cmdBuffer
   162 00000E07 48FFCE              <1>     dec rsi
   163 00000E0A 4829DE              <1>     sub rsi, rbx    ;Get the offset into the command line
   164 00000E0D 89F3                <1>     mov ebx, esi
   165 00000E0F 881D83F2FFFF        <1>     mov byte [cmdEndOff], bl    ;Store the offset to the terminating char
   166 00000E15 B00D                <1>     mov al, CR
   167 00000E17 AA                  <1>     stosb   ;Store the terminating CR in the psp command line
   168                              <1>     ;Now compute the command line length 
   169 00000E18 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine] 
   170 00000E1F B00D                <1>     mov al, CR
   171 00000E21 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   172 00000E23 FFC9                <1>     dec ecx ;rcx = -1
   173 00000E25 F2AE                <1>     repne scasb
   174 00000E27 F7D1                <1>     not ecx
   175 00000E29 FEC9                <1>     dec cl  ;Dont include terminating CR
   176 00000E2B 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   177 00000E32 880F                <1>     mov byte [rdi], cl
   178                              <1>     ;Before returning, we copy the command name to cmdName
   179 00000E34 488D3DD3F3FFFF      <1>     lea rdi, cmdPathSpec
   180 00000E3B 4889FB              <1>     mov rbx, rdi    ;Use rbx as the ptr to the first char in the commandspec
   181 00000E3E 30C0                <1>     xor al, al  ;Search for the terminating null
   182 00000E40 B94F000000          <1>     mov ecx, fileSpecZL ;Max number of chars the length could be
   183 00000E45 F2AE                <1>     repne scasb
   184 00000E47 48FFCF              <1>     dec rdi ;Go to the last char in the command
   185 00000E4A 4889FE              <1>     mov rsi, rdi
   186 00000E4D FD                  <1>     std ;Now we go backwards to where rsi = rbx OR byte [rsi] = pathSep
   187                              <1> .keepSearching:
   188 00000E4E AC                  <1>     lodsb
   189 00000E4F 3A05CEF1FFFF        <1>     cmp al, byte [pathSep]
   190 00000E55 740B                <1>     je .cmdStartFnd
   191 00000E57 4839DE              <1>     cmp rsi, rbx
   192 00000E5A 75F2                <1>     jne .keepSearching
   193 00000E5C 48FFCE              <1>     dec rsi ;Go back two to go forwards again
   194 00000E5F 48FFCE              <1>     dec rsi
   195                              <1> .cmdStartFnd:
   196 00000E62 48FFC6              <1>     inc rsi
   197 00000E65 48FFC6              <1>     inc rsi ;Go past the pathsep
   198 00000E68 FC                  <1>     cld ;Go the sane way again
   199 00000E69 488D3D06F4FFFF      <1>     lea rdi, qword [cmdName + 1]    ;First byte is for the length of the name
   200 00000E70 57                  <1>     push rdi    ;Cleanse the field before usage (not strictly necessary)
   201 00000E71 B90E000000          <1>     mov ecx, cmdNameL
   202 00000E76 30C0                <1>     xor al, al
   203 00000E78 F3AA                <1>     rep stosb
   204 00000E7A 5F                  <1>     pop rdi
   205 00000E7B 31C9                <1>     xor ecx, ecx
   206 00000E7D 56                  <1>     push rsi    ;Save the location of the start byte of the command name
   207                              <1> .cmdGetChar:
   208 00000E7E AC                  <1>     lodsb
   209 00000E7F 84C0                <1>     test al, al ;Did we find the terminating null?
   210 00000E81 7411                <1>     jz .nameLenFnd
   211 00000E83 3C2E                <1>     cmp al, "." ;Extension sep also terminates
   212 00000E85 740D                <1>     je .nameLenFnd
   213 00000E87 24DF                <1>     and al, 0DFh    ;Else uppercase the char
   214 00000E89 AA                  <1>     stosb   ;and store it
   215 00000E8A FFC1                <1>     inc ecx
   216 00000E8C 81F90B000000        <1>     cmp ecx, 11 ;Max command length is 11
   217 00000E92 72EA                <1>     jb .cmdGetChar
   218                              <1> .nameLenFnd:
   219 00000E94 880DDBF3FFFF        <1>     mov byte [cmdName], cl  ;Store the name length now
   220                              <1>     ;Now finally, create a FCB filespec
   221 00000E9A 488D3DBCF3FFFF      <1>     lea rdi, fcbCmdSpec
   222 00000EA1 57                  <1>     push rdi
   223 00000EA2 B90B000000          <1>     mov ecx, fcbNameL
   224 00000EA7 B020                <1>     mov al, " " ;Fill with spaces
   225 00000EA9 F3AA                <1>     rep stosb
   226 00000EAB 5F                  <1>     pop rdi
   227 00000EAC 5E                  <1>     pop rsi ;Get back the location of the start byte of the command name
   228 00000EAD E8ED130000          <1>     call asciiToFCB
   229 00000EB2 488D35A4F3FFFF      <1>     lea rsi, fcbCmdSpec
   230 00000EB9 488D3DA8F3FFFF      <1>     lea rdi, cmdSpec
   231 00000EC0 E835140000          <1>     call FCBToAsciiz
   232                              <1>     return
    19                              <2> %%_ret:
    20 00000EC5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   233                              <1> 
   234                              <1> doCommandLine:
   235 00000EC6 488D35C3F2FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
   236 00000ECD 488D3DDFF1FFFF      <1>     lea rdi, cmdFcb
   237 00000ED4 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks
   238 00000ED9 CD41                <1>     int 41h
   239 00000EDB 0FB71DC7F1FFFF      <1>     movzx ebx, word [cmdDrvSpec]    ;Get the drive specifier
   240 00000EE2 80FF3A              <1>     cmp bh, ":"
   241 00000EE5 752E                <1>     jne .noDriveSpecified
   242 00000EE7 88DA                <1>     mov dl, bl      ;Move the drive letter in dl
   243 00000EE9 80E2DF              <1>     and dl, 0DFh    ;Make the drive letter upper case
   244 00000EEC 80EA41              <1>     sub dl, "A"     ;And make it a 0 based drive letter
   245 00000EEF 3CFF                <1>     cmp al, -1  ;Int 41h returns AL = -1 if bad drive specified
   246 00000EF1 7415                <1>     je .badDrive
   247                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   248 00000EF3 803D7BF3FFFF02      <1>     cmp byte [cmdName], 2
   249 00000EFA 7519                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   250 00000EFC B40E                <1>     mov ah, 0Eh ;Set drive to dl
   251 00000EFE CD41                <1>     int 41h 
   252 00000F00 B419                <1>     mov ah, 19h
   253 00000F02 CD41                <1>     int 41h     ;Get current drive
   254 00000F04 38D0                <1>     cmp al, dl  ;If the drive was set, all is well
   255                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000F06 74(C5)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   256                              <1> .badDrive:
   257 00000F08 488D15D1F8FFFF      <1>     lea rdx, badDrv
   258 00000F0F B409                <1>     mov ah, 09h
   259 00000F11 CD41                <1>     int 41h
   260 00000F13 F9                  <1>     stc
   261                              <1>     return
    19                              <2> %%_ret:
    20 00000F14 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   262                              <1> .noDriveSpecified:
   263                              <1> ;Now we set the two FCB's in the command line
   264 00000F15 F60591F1FFFFFF      <1>     test byte [arg1Flg], -1
   265 00000F1C 744D                <1>     jz .fcbArgsDone
   266 00000F1E 0FB60589F1FFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   267 00000F25 488D3562F2FFFF      <1>     lea rsi, cmdBuffer
   268 00000F2C 4801C6              <1>     add rsi, rax    ;Point to first argument
   269 00000F2F 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   270 00000F33 B801290000          <1>     mov eax, 2901h
   271 00000F38 CD41                <1>     int 41h
   272 00000F3A 88056FF1FFFF        <1>     mov byte [arg1FCBret], al
   273 00000F40 F60569F1FFFFFF      <1>     test byte [arg2Flg], -1
   274 00000F47 7422                <1>     jz .fcbArgsDone
   275 00000F49 0FB60561F1FFFF      <1>     movzx eax, byte [arg2Off]
   276 00000F50 488D3537F2FFFF      <1>     lea rsi, cmdBuffer
   277 00000F57 4801C6              <1>     add rsi, rax    ;Point to first argument
   278 00000F5A 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   279 00000F5E B801290000          <1>     mov eax, 2901h
   280 00000F63 CD41                <1>     int 41h
   281 00000F65 880547F1FFFF        <1>     mov byte [arg2FCBret], al
   282                              <1> .fcbArgsDone:
   283 00000F6B 488D351CF2FFFF      <1>     lea rsi, cmdBuffer
   284 00000F72 488D1DFCF2FFFF      <1>     lea rbx, cmdName
   285 00000F79 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   286 00000F7E BAFFFF0000          <1>     mov edx, 0FFFFh
   287 00000F83 B5FF                <1>     mov ch, -1
   288 00000F85 CD4F                <1>     int 4Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   289                              <1>             ;        al = 0  if the command should be executed as usual
   290 00000F87 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   291 00000F8C BAFFFF0000          <1>     mov edx, 0FFFFh
   292 00000F91 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   293 00000F93 CD4F                <1>     int 4Fh
   294 00000F95 741D                <1>     jz .executeInternal
   295                              <1>     ;Here we execute externally and return to the prompt
   296                              <1>     ; as if it was an internal execution
   297 00000F97 488D3570F1FFFF      <1>     lea rsi, inBuffer ;Point to this built buffer
   298 00000F9E 488D1D0EF1FFFF      <1>     lea rbx, cmdFcb
   299 00000FA5 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   300 00000FAA BAFFFF0000          <1>     mov edx, 0FFFFh
   301 00000FAF B5FF                <1>     mov ch, -1
   302 00000FB1 CD4F                <1>     int 4Fh 
   303                              <1>     return
    19                              <2> %%_ret:
    20 00000FB3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   304                              <1> .executeInternal:
   305                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   306                              <1> ;rsi points after the command terminator in the command tail
   307 00000FB4 488D1D0EF6FFFF      <1>     lea rbx, functionTable
   308                              <1> .nextEntry:
   309 00000FBB 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   310 00000FBE 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   311 00000FC1 0F840A0E0000        <1>     je launchChild      ;If so, check externally now
   312 00000FC7 380DA8F2FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   313 00000FCD 7529                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   314                              <1>     ;Here they have the same length so lets see if the name is the same
   315 00000FCF 56                  <1>     push rsi
   316                              <1>     ;ecx has the length to compare
   317 00000FD0 51                  <1>     push rcx
   318 00000FD1 488D7301            <1>     lea rsi, qword [rbx + 1]
   319 00000FD5 488D3D9AF2FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   320 00000FDC F3A6                <1>     rep cmpsb   ;Check the strings are equal
   321 00000FDE 59                  <1>     pop rcx
   322 00000FDF 5E                  <1>     pop rsi
   323 00000FE0 7516                <1>     jne .gotoNextEntry
   324                              <1>     ;Here it was found both strings are equal
   325 00000FE2 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   326 00000FE7 480FB71F            <1>     movzx rbx, word [rdi]
   327 00000FEB 488D3D0EF0FFFF      <1>     lea rdi, startLbl
   328 00000FF2 4801FB              <1>     add rbx, rdi
   329 00000FF5 FFD3                <1>     call rbx    ;Call this function...
   330                              <1>     return  ;... and return
    19                              <2> %%_ret:
    20 00000FF7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   331                              <1> .gotoNextEntry:
   332 00000FF8 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   333 00000FFF 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   334 00001002 EBB7                <1>     jmp short .nextEntry
   335                              <1> .dfltErrExit:
   336 00001004 488D15C6F6FFFF      <1>     lea rdx, badCmd
   337 0000100B B409                <1>     mov ah, 09h
   338 0000100D CD41                <1>     int 41h
   339                              <1>     return
    19                              <2> %%_ret:
    20 0000100F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   340                              <1> 
   341                              <1> 
   342                              <1> checkExtensionExec:
   343                              <1> ;Checks the extension field of cmdFcb is .COM, .EXE, .BAT in that order
   344                              <1> ;Returns: ZF=ZE if executable. ZF=NZ if not executable.
   345                              <1> ;         If ZF=ZE and CF=CY => Batch file
   346 00001010 8B05A6F0FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   347 00001016 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   348 0000101B 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   349 00001020 25DFDFDFFF          <1>     and eax, 0FFDFDFDFh ;Uppercase the three letters
   350 00001025 3D434F4D20          <1>     cmp eax, "COM "
   351                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000102A 74(0F)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   352 0000102C 3D45584520          <1>     cmp eax, "EXE "
   353                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001031 74(0F)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   354 00001033 3D42415420          <1>     cmp eax, "BAT "
   355                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001038 75(0F)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   356 0000103A F9                  <1>     stc
   357                              <1>     return
    19                              <2> %%_ret:
    20 0000103B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   358                              <1> 
   359                              <1> checkAndSetupRedir:
   360                              <1> ;Checks and sets up redir as appropriate
   361                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   362                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   363                              <1> ;Output: ZF=NZ => No redir
   364                              <1> ;        ZF=ZY => Redir
   365                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   366                              <1> ;CF=CY if pipe set or an embedded CR found
   367 0000103C 57                  <1>     push rdi
   368 0000103D 3C3C                <1>     cmp al, "<"
   369 0000103F 740B                <1>     je .inputRedir
   370 00001041 3C3E                <1>     cmp al, ">"
   371 00001043 742A                <1>     je .outputRedir
   372 00001045 3C7C                <1>     cmp al, "|"
   373 00001047 7454                <1>     je .pipeSetup
   374 00001049 F8                  <1>     clc
   375                              <1> .redirExit:
   376 0000104A 5F                  <1>     pop rdi
   377                              <1>     return
    19                              <2> %%_ret:
    20 0000104B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   378                              <1> .inputRedir:
   379 0000104C C60558F0FFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   380 00001053 488D3D29F2FFFF      <1>     lea rdi, rdrInFilespec
   381 0000105A E8F8110000          <1>     call skipSpaces ;Skip spaces between < and the filespec
   382 0000105F E86F000000          <1>     call copyCommandTailItem
   383 00001064 72E4                <1>     jc .redirExit
   384 00001066 E8EC110000          <1>     call skipSpaces
   385 0000106B 30C0                <1>     xor al, al
   386 0000106D EBDB                <1>     jmp short .redirExit
   387                              <1> .outputRedir:
   388 0000106F C60536F0FFFF01      <1>     mov byte [redirOut], 1
   389 00001076 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   390 00001079 7506                <1>     jne .notDouble
   391 0000107B FE052BF0FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   392                              <1> .notDouble:
   393 00001081 488D3D4AF2FFFF      <1>     lea rdi, rdrOutFilespec
   394 00001088 E8CA110000          <1>     call skipSpaces
   395 0000108D E841000000          <1>     call copyCommandTailItem
   396 00001092 72B6                <1>     jc .redirExit
   397 00001094 E8BE110000          <1>     call skipSpaces
   398 00001099 30C0                <1>     xor al, al
   399 0000109B EBAD                <1>     jmp short .redirExit
   400                              <1> .pipeSetup:
   401 0000109D C605F5EFFFFFFF      <1>     mov byte [pipeFlag], -1
   402 000010A4 30C0                <1>     xor al, al
   403 000010A6 F9                  <1>     stc
   404 000010A7 5F                  <1>     pop rdi
   405                              <1>     return
    19                              <2> %%_ret:
    20 000010A8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   406                              <1> 
   407                              <1> copyCommandTailItemProgram:
   408                              <1> ;Copies a program name from the command tail until a terminator is found.
   409                              <1> ;Stores a terminating null in the destination
   410                              <1> ;Input: rsi = Start of the item to copy
   411                              <1> ;       rdi = Location for copy
   412                              <1> ;Output: Sentence copied with a null terminator inserted.
   413                              <1> ; If CF=CY, embedded CR encountered
   414 000010A9 AC                  <1>     lodsb
   415 000010AA 3C0D                <1>     cmp al, CR
   416 000010AC 741A                <1>     je .endOfInput
   417 000010AE E870110000          <1>     call isALterminator
   418 000010B3 741A                <1>     jz .exit
   419 000010B5 3A0568EFFFFF        <1>     cmp al, byte [pathSep]
   420 000010BB 7412                <1>     je .exit
   421 000010BD 3A0561EFFFFF        <1>     cmp al, byte [switchChar]
   422 000010C3 740A                <1>     je .exit
   423 000010C5 AA                  <1>     stosb
   424 000010C6 EBE1                <1>     jmp short copyCommandTailItemProgram
   425                              <1> .endOfInput:
   426 000010C8 E802000000          <1>     call .exit
   427 000010CD F9                  <1>     stc 
   428                              <1>     return
    19                              <2> %%_ret:
    20 000010CE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   429                              <1> .exit:
   430 000010CF 30C0                <1>     xor al, al
   431 000010D1 AA                  <1>     stosb
   432                              <1>     return
    19                              <2> %%_ret:
    20 000010D2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   433                              <1> 
   434                              <1> copyCommandTailItem:
   435                              <1> ;Copies a sentence from the command tail until a terminator is found.
   436                              <1> ;Stores a terminating null in the destination
   437                              <1> ;Input: rsi = Start of the item to copy
   438                              <1> ;       rdi = Location for copy
   439                              <1> ;Output: Sentence copied with a null terminator inserted.
   440                              <1> ; If CF=CY, embedded CR encountered
   441 000010D3 AC                  <1>     lodsb
   442 000010D4 3C0D                <1>     cmp al, CR
   443 000010D6 743A                <1>     je .endOfInput
   444 000010D8 E846110000          <1>     call isALterminator
   445 000010DD 743A                <1>     jz .exit
   446 000010DF 3A053EEFFFFF        <1>     cmp al, byte [pathSep]
   447 000010E5 740B                <1>     je .pathSep
   448 000010E7 3A0537EFFFFF        <1>     cmp al, byte [switchChar]
   449 000010ED 742A                <1>     je .exit
   450 000010EF AA                  <1>     stosb
   451 000010F0 EBE1                <1>     jmp short copyCommandTailItem
   452                              <1> .pathSep:
   453                              <1> ;We look ahead, if the last char is a pathsep, we ignore it
   454 000010F2 AC                  <1>     lodsb   ;Get the next char, increment rsi by one
   455 000010F3 E82B110000          <1>     call isALterminator
   456 000010F8 741F                <1>     jz .exit
   457 000010FA 3C0D                <1>     cmp al, CR
   458 000010FC 7414                <1>     je .endOfInput
   459 000010FE 3A0520EFFFFF        <1>     cmp al, byte [switchChar]
   460 00001104 7413                <1>     je .exit
   461 00001106 8A0517EFFFFF        <1>     mov al, byte [pathSep]
   462 0000110C AA                  <1>     stosb   ;Else store the pathsep
   463 0000110D 48FFCE              <1>     dec rsi ;Move rsi back a piece
   464 00001110 EBC1                <1>     jmp short copyCommandTailItem
   465                              <1> .endOfInput:
   466 00001112 E802000000          <1>     call .exit
   467 00001117 F9                  <1>     stc 
   468                              <1>     return
    19                              <2> %%_ret:
    20 00001118 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   469                              <1> .exit:
   470 00001119 30C0                <1>     xor al, al
   471 0000111B AA                  <1>     stosb
   472                              <1>     return
    19                              <2> %%_ret:
    20 0000111C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   473                              <1> 
   474                              <1> 
   475                              <1> int4Eh:   ;Interrupt interface for parsing and executing command lines
   476                              <1> ;Input: rsi points to the count byte of a command line
   477 0000111D 4150                <1>     push r8
   478 0000111F 4151                <1>     push r9
   479 00001121 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   480 00001123 CD41                <1>     int 41h
   481 00001125 52                  <1>     push rdx    ;Save on the stack
   482 00001126 488D1DD3EDFFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   483 0000112D B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   484 0000112F CD41                <1>     int 41h
   485 00001131 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   486 00001134 4989D9              <1>     mov r9, rbx
   487 00001137 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   488 0000113E B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   489 00001143 F348A5              <1>     rep movsq   ;Copy command line over
   490                              <1>     ;call doCommandLine
   491 00001146 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   492 00001147 B450                <1>     mov ah, 50h ;Set Current PSP
   493 00001149 CD41                <1>     int 41h
   494 0000114B 4159                <1>     pop r9
   495 0000114D 4158                <1>     pop r8
   496 0000114F 48CF                <1>     iretq
    16                                  %include "./Source/Utils/COMMAND/Source/cmdFunc.asm"
    17                              <1> ;Note! Each function must setup the DTA to use for itself.
    18                              <1> ;There is no requirement to preserve the DTA across a call.
    19                              <1> ;Only the Int 4Eh entry point will preserve the callers DTA.
    20                              <1> 
    21                              <1> ;Common Error Messages, jumped to to return from
    22                              <1> badParamError:
    23 00001151 488D15C5F6FFFF      <1>     lea rdx, badParm
    24 00001158 EB22                <1>     jmp short badCmn
    25                              <1> badDriveError:
    26 0000115A 488D157FF6FFFF      <1>     lea rdx, badDrv
    27 00001161 EB19                <1>     jmp short badCmn
    28                              <1> badArgError:
    29 00001163 488D1530F9FFFF      <1>     lea rdx, badArgs
    30 0000116A EB10                <1>     jmp short badCmn
    31                              <1> badFileError:
    32 0000116C 488D150BF9FFFF      <1>     lea rdx, badSpec
    33 00001173 EB07                <1>     jmp short badCmn
    34                              <1> badDirError:
    35 00001175 488D15A2F7FFFF      <1>     lea rdx, badDir
    36                              <1> badCmn:
    37 0000117C B800090000          <1>     mov eax, 0900h
    38 00001181 CD41                <1>     int 41h
    39 00001183 F9                  <1>     stc ;Return with CY => Error occured
    40                              <1>     return
    19                              <2> %%_ret:
    20 00001184 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    41                              <1> 
    42                              <1> dir:
    43 00001185 C60515F2FFFF00      <1>     mov byte [dirPrnType], 0    ;Clear DIR flags
    44 0000118C C6050FF2FFFF00      <1>     mov byte [dirLineCtr], 0
    45 00001193 C60509F2FFFF00      <1>     mov byte [dirFileCtr], 0
    46 0000119A C60584F2FFFF00      <1>     mov byte [dirPathArg], 0    ;Null terminate the start of the buffer
    47 000011A1 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    47 000011AA 3F                  <1>
    48 000011AB 488D3DF3F2FFFF      <1>     lea rdi, dirSrchPat ;Start also by initialising the search pattern
    49 000011B2 48AB                <1>     stosq
    50 000011B4 48FFC7              <1>     inc rdi ;Go past dot
    51 000011B7 668907              <1>     mov word [rdi], ax
    52 000011BA 884702              <1>     mov byte [rdi + 2], al
    53                              <1>     ;Start by scanning for the switches
    54 000011BD 488D3DCBEFFFFF      <1>     lea rdi, cmdBuffer + 1  ;Goto command line input chars count
    55 000011C4 0FB60F              <1>     movzx ecx, byte [rdi]   ;Get number of chars typed
    56 000011C7 48FFC7              <1>     inc rdi ;Goto first char typed in
    57 000011CA 4889FE              <1>     mov rsi, rdi    ;Use rsi as start of buffer counter
    58 000011CD 8A0551EEFFFF        <1>     mov al, byte [switchChar]   ;Scan for switchchars
    59                              <1> .switchScan:
    60 000011D3 F2AE                <1>     repne scasb ;Scan for a switchchar
    61 000011D5 67E322              <1>     jecxz .switchScanDone
    62 000011D8 8A07                <1>     mov al, byte [rdi]  ;Get the byte pointed to by rdi
    63 000011DA 24DF                <1>     and al, 0DFh    ;UC it
    64 000011DC 3C57                <1>     cmp al, "W" ;Wide print mode?
    65 000011DE 7509                <1>     jne .notWideSw
    66 000011E0 800DBAF1FFFF01      <1>     or byte [dirPrnType], 1 ;Set the correct bit
    67 000011E7 EBEA                <1>     jmp short .switchScan
    68                              <1> .notWideSw:
    69 000011E9 3C50                <1>     cmp al, "P" ;Pause mode?
    70 000011EB 0F8560FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    71 000011F1 800DA9F1FFFF02      <1>     or byte [dirPrnType], 2 ;Set correct bit
    72 000011F8 EBD9                <1>     jmp short .switchScan
    73                              <1> .switchScanDone:
    74                              <1> ;If no args, only switches, we search CWD
    75                              <1> ;If one arg, search that 
    76                              <1> ;If more than one, fail
    77 000011FA 488D358FEFFFFF      <1>     lea rsi, cmdBuffer + 2
    78 00001201 E851100000          <1>     call skipSpaces ;Skip leading spaces
    79 00001206 4881C603000000      <1>     add rsi, 3  ;Go past the DIR (always three chars)
    80                              <1> .loop:
    81 0000120D E845100000          <1>     call skipSpaces ;Skip spaces after
    82 00001212 AC                  <1>     lodsb   ;Get first non space char
    83 00001213 E82E100000          <1>     call isALEndOfCommand   ;If this is the end char CR or "|", exit
    84 00001218 7442                <1>     jz .eocNoNull
    85 0000121A 3A0504EEFFFF        <1>     cmp al, byte [switchChar]  ;Is al a switch char?
    86 00001220 7509                <1>     jne .notSwitch
    87                              <1>     ;Now we skip the switch if it was a switch
    88 00001222 E8C70F0000          <1>     call findTerminatorOrEOC    ;Go past the switch
    89 00001227 7233                <1>     jc .eocNoNull  ;If we reach the EOC, exit,
    90 00001229 EBE2                <1>     jmp short .loop
    91                              <1> .notSwitch:
    92                              <1>     ;If not a switch, should be a path. Copy to buffer and keep searching
    93 0000122B 803DF3F1FFFF00      <1>     cmp byte [dirPathArg], 0    ;If a second path provided, error
    94 00001232 0F852BFFFFFF        <1>     jne badArgError
    95 00001238 488D3DE6F1FFFF      <1>     lea rdi, dirPathArg ;Store the path to search here AS WRITTEN BY USER
    96 0000123F 48FFCE              <1>     dec rsi ;Go back to the start of the string
    97                              <1> .nameCopy:
    98 00001242 AC                  <1>     lodsb
    99 00001243 E8FE0F0000          <1>     call isALEndOfCommand
   100 00001248 740F                <1>     jz .eocReached
   101 0000124A E8D40F0000          <1>     call isALterminator
   102 0000124F 7403                <1>     jz .terminateCopy
   103 00001251 AA                  <1>     stosb
   104 00001252 EBEE                <1>     jmp short .nameCopy
   105                              <1> .terminateCopy:
   106 00001254 31C0                <1>     xor eax, eax
   107 00001256 AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   108 00001257 EBB4                <1>     jmp short .loop ;Now search if another 
   109                              <1> .eocReached:
   110 00001259 31C0                <1>     xor eax, eax
   111 0000125B AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   112                              <1> .eocNoNull:
   113 0000125C 803DC2F1FFFF00      <1>     cmp byte [dirPathArg], 0    ;If no path provided, use CWD for current drive
   114 00001263 7434                <1>     je .currentDrv
   115                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   116 00001265 488D35B9F1FFFF      <1>     lea rsi, dirPathArg
   117 0000126C 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   118 00001270 7527                <1>     jne .currentDrv
   119                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   120 00001272 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   121 00001277 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   122 0000127B B801290000          <1>     mov eax, 2901h   ;Parse filename
   123 00001280 CD41                <1>     int 41h
   124 00001282 3CFF                <1>     cmp al, -1
   125 00001284 0F84D0FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   126                              <1>     ;Else the drive in the fcb is valid
   127 0000128A 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   128 0000128F FEC8                <1>     dec al  ;Convert to 0 based drive number
   129 00001291 88050DF1FFFF        <1>     mov byte [dirDrv], al
   130 00001297 EB0B                <1>     jmp short .dirPrintVol
   131                              <1> .currentDrv:
   132 00001299 E83C0F0000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   133 0000129E 880500F1FFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   134                              <1> .dirPrintVol:
   135 000012A4 0FB605F9F0FFFF      <1>     movzx eax, byte [dirDrv] 
   136 000012AB E80E080000          <1>     call volume.dirEP
   137 000012B0 803D6EF1FFFF00      <1>     cmp byte [dirPathArg], 0    ;Null path here, 
   138 000012B7 7409                <1>     je .printCWD
   139 000012B9 803D68F1FFFF00      <1>     cmp byte [dirPathArg + 3], 0    ;Was this X:,0?
   140 000012C0 7400                <1>     je .printCWD
   141                              <1>     ;Here we have a path
   142                              <1>     ;Temp measure, we just fall through ignoring the path provided
   143                              <1> .printCWD:
   144 000012C2 8A15DCF0FFFF        <1>     mov dl, byte [dirDrv]
   145 000012C8 88D0                <1>     mov al, dl
   146 000012CA 0441                <1>     add al, "A"
   147 000012CC B43A                <1>     mov ah, ":"
   148 000012CE 6689054CF0FFFF      <1>     mov word [searchSpec], ax
   149 000012D5 8A0548EDFFFF        <1>     mov al, byte [pathSep]
   150 000012DB 880542F0FFFF        <1>     mov byte [searchSpec + 2], al
   151 000012E1 488D353CF0FFFF      <1>     lea rsi, searchSpec + 3  ;Make space for a X:"\"
   152 000012E8 B447                <1>     mov ah, 47h ;Get Current Working Directory
   153 000012EA FEC2                <1>     inc dl  ;Convert to 1 based number
   154 000012EC CD41                <1>     int 41h
   155 000012EE 488D3D2CF0FFFF      <1>     lea rdi, searchSpec
   156 000012F5 E8E50E0000          <1>     call strlen
   157 000012FA FFC9                <1>     dec ecx
   158 000012FC C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   159 00001300 488D157FF6FFFF      <1>     lea rdx, dirMain
   160 00001307 B409                <1>     mov ah, 09h
   161 00001309 CD41                <1>     int 41h
   162 0000130B 4889FA              <1>     mov rdx, rdi    ;Print the current directory we are working on
   163 0000130E B409                <1>     mov ah, 09h
   164 00001310 CD41                <1>     int 41h
   165 00001312 488D155EF3FFFF      <1>     lea rdx, crlf2
   166 00001319 B409                <1>     mov ah, 09h
   167 0000131B CD41                <1>     int 41h
   168 0000131D E801000000          <1>     call .searchForFile
   169                              <1>     return
    19                              <2> %%_ret:
    20 00001322 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   170                              <1>     ;If we get no path spec or just a X: path spec then we 
   171                              <1>     ; search the current working directory for that pathspec
   172                              <1>     ;If we get an actual pathspec, we first save the CWD for that drive
   173                              <1>     ; and then we try to make the pathspec the CWD. 
   174                              <1>     ;   If it works, we then search *.* in that folder and return the og CWD.
   175                              <1>     ;   If it fails, we then search one level up, for the search pattern
   176                              <1>     ;    that we compute.
   177                              <1> 
   178                              <1>     
   179                              <1>     ;Now we need to print the path to the folder we will be searching in
   180                              <1> .searchForFile:
   181                              <1>     ;Now we search for the files
   182                              <1>     ;RCX must have the number of chars to the end of the pathspec
   183 00001323 488D3DF7EFFFFF      <1>     lea rdi, searchSpec
   184 0000132A 8A05F3ECFFFF        <1>     mov al, byte [pathSep]
   185 00001330 38440FFF            <1>     cmp byte [rdi + rcx - 1], al
   186 00001334 7405                <1>     je .noAddSlash  ;Deals with special case of root dir
   187 00001336 88040F              <1>     mov byte [rdi + rcx], al
   188 00001339 FFC1                <1>     inc ecx
   189                              <1> .noAddSlash:
   190 0000133B 488D3C0F            <1>     lea rdi, qword [rdi + rcx]
   191 0000133F 488D355FF1FFFF      <1>     lea rsi, dirSrchPat
   192 00001346 4889FA              <1>     mov rdx, rdi    ;Ptr to search for in rdx
   193 00001349 48A5                <1>     movsq
   194 0000134B A5                  <1>     movsd
   195 0000134C 30C0                <1>     xor al, al
   196 0000134E AA                  <1>     stosb   ;Store the terminating null
   197 0000134F B911000000          <1>     mov ecx, dirReadOnly | dirDirectory
   198 00001354 B44E                <1>     mov ah, 4Eh ;Find first
   199 00001356 CD41                <1>     int 41h
   200 00001358 720B                <1>     jc .dirNoMoreFiles
   201                              <1> .findNext:
   202 0000135A E878000000          <1>     call .dirPrintFileData  ;Print the file information
   203 0000135F B44F                <1>     mov ah, 4Fh
   204 00001361 CD41                <1>     int 41h
   205 00001363 73F5                <1>     jnc .findNext 
   206                              <1> .dirNoMoreFiles:
   207 00001365 F60535F0FFFF01      <1>     test byte [dirPrnType], 1
   208 0000136C 740B                <1>     jz .dirNoEndNewLine
   209 0000136E 488D15FFF2FFFF      <1>     lea rdx, crlf   ;Only need this for /W
   210 00001375 B409                <1>     mov ah, 09h
   211 00001377 CD41                <1>     int 41h
   212                              <1> .dirNoEndNewLine:
   213                              <1>     ;Now we print the number of files and the number of bytes on the disk
   214 00001379 488D1594F8FFFF      <1>     lea rdx, fourSpc
   215 00001380 B409                <1>     mov ah, 09h
   216 00001382 CD41                <1>     int 41h
   217 00001384 B409                <1>     mov ah, 09h ;Print four Spaces twice
   218 00001386 CD41                <1>     int 41h
   219 00001388 0FB60514F0FFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   220 0000138F E844100000          <1>     call printDecimalWord
   221 00001394 488D1524F4FFFF      <1>     lea rdx, dirOk
   222 0000139B B409                <1>     mov ah, 09h
   223 0000139D CD41                <1>     int 41h
   224 0000139F 488D1573F8FFFF      <1>     lea rdx, threeSpc
   225 000013A6 B409                <1>     mov ah, 09h
   226 000013A8 CD41                <1>     int 41h
   227 000013AA B800360000          <1>     mov eax, 3600h ;Get disk info
   228 000013AF 8A15EFEFFFFF        <1>     mov dl, byte [dirDrv]
   229 000013B5 FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   230 000013B7 CD41                <1>     int 41h ;Get disk free space info
   231 000013B9 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   232 000013BC 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   233 000013BF 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   234 000013C1 F7E1                <1>     mul ecx ;Get bytes per cluster
   235 000013C3 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   236                              <1>     ;rax now has the number of free bytes on the disk
   237 000013C6 E80D100000          <1>     call printDecimalWord
   238 000013CB 488D15F7F3FFFF      <1>     lea rdx, bytesOk
   239 000013D2 B409                <1>     mov ah, 09h
   240 000013D4 CD41                <1>     int 41h
   241                              <1>     return
    19                              <2> %%_ret:
    20 000013D6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   242                              <1> 
   243                              <1> .dirPrintFileData:
   244                              <1> ;Use fcbCmdSpec to build the file name with space
   245                              <1> ;Start by print the name (same for both cases)
   246                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   247 000013D7 F605FAECFFFF06      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles
   248                              <1>     retnz   ;Simply return if either bit is set
    51                              <2> cret nz
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000013DE 75(D6)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   249 000013E0 488D35FAECFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   250 000013E7 488D3D6FEEFFFF      <1>     lea rdi, fcbCmdSpec
   251 000013EE E8BD0E0000          <1>     call asciiFilenameToFCB
   252 000013F3 488D1563EEFFFF      <1>     lea rdx, fcbCmdSpec
   253 000013FA B908000000          <1>     mov ecx, 8  ;Print 8 chars
   254 000013FF BB01000000          <1>     mov ebx, 1  ;STDOUT
   255 00001404 B440                <1>     mov ah, 40h ;Write handle
   256 00001406 CD41                <1>     int 41h
   257 00001408 52                  <1>     push rdx
   258 00001409 B220                <1>     mov dl, " "
   259 0000140B B402                <1>     mov ah, 02h ;Print char
   260 0000140D CD41                <1>     int 41h
   261 0000140F 5A                  <1>     pop rdx
   262 00001410 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   263 00001417 B903000000          <1>     mov ecx, 3  ;Print three chars
   264 0000141C BB01000000          <1>     mov ebx, 1  ;STDOUT
   265 00001421 B440                <1>     mov ah, 40h ;Write handle
   266 00001423 CD41                <1>     int 41h
   267 00001425 F60575EFFFFF01      <1>     test byte [dirPrnType], 1
   268 0000142C 0F85A8000000        <1>     jnz .widePrint
   269                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   270                              <1>     ;Now check if a DIR
   271 00001432 F6059FECFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   272 00001439 7418                <1>     jz .dirPrintNotDir
   273 0000143B 488D1595F3FFFF      <1>     lea rdx, dirLbl
   274 00001442 B409                <1>     mov ah, 09h
   275 00001444 CD41                <1>     int 41h
   276 00001446 488D15CCF7FFFF      <1>     lea rdx, threeSpc
   277 0000144D B409                <1>     mov ah, 09h
   278 0000144F CD41                <1>     int 41h
   279 00001451 EB4F                <1>     jmp short .dirPrintFileDT
   280                              <1> .dirPrintNotDir:
   281                              <1> ;Here we print the file size
   282 00001453 B220                <1>     mov dl, " "
   283 00001455 B402                <1>     mov ah, 02h
   284 00001457 CD41                <1>     int 41h
   285 00001459 8B057EECFFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   286 0000145F E8E50F0000          <1>     call getDecimalWord
   287 00001464 4889CB              <1>     mov rbx, rcx
   288 00001467 51                  <1>     push rcx
   289 00001468 480FCB              <1>     bswap rbx
   290 0000146B B908000000          <1>     mov ecx, 8
   291                              <1> .dirPrintFileSizePrep:
   292 00001470 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   293 00001472 7514                <1>     jne .dirPrintFileSize
   294 00001474 B402                <1>     mov ah, 02h
   295 00001476 B220                <1>     mov dl, " "
   296 00001478 CD41                <1>     int 41h
   297 0000147A 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   298 0000147E FFC9                <1>     dec ecx
   299 00001480 81F901000000        <1>     cmp ecx, 1
   300 00001486 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   301                              <1> .dirPrintFileSize:
   302 00001488 5B                  <1>     pop rbx
   303                              <1> .dirPrintFileSizeLoop:
   304 00001489 88DA                <1>     mov dl, bl
   305 0000148B B402                <1>     mov ah, 02h
   306 0000148D CD41                <1>     int 41h
   307 0000148F 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   308 00001493 FFC9                <1>     dec ecx
   309 00001495 75F2                <1>     jnz .dirPrintFileSizeLoop
   310 00001497 488D157FF7FFFF      <1>     lea rdx, twoSpc
   311 0000149E B409                <1>     mov ah, 09h
   312 000014A0 CD41                <1>     int 41h
   313                              <1> .dirPrintFileDT:
   314 000014A2 B220                <1>     mov dl, " "
   315 000014A4 B402                <1>     mov ah, 02h
   316 000014A6 CD41                <1>     int 41h
   317 000014A8 0FB7052CECFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   318 000014AF 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   319 000014B1 E87A0A0000          <1>     call printDate
   320 000014B6 488D1560F7FFFF      <1>     lea rdx, twoSpc
   321 000014BD B409                <1>     mov ah, 09h
   322 000014BF CD41                <1>     int 41h
   323 000014C1 0FB70511ECFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   324 000014C8 E8850B0000          <1>     call printTime
   325 000014CD 488D15A0F1FFFF      <1>     lea rdx, crlf
   326 000014D4 B409                <1>     mov ah, 09h
   327 000014D6 CD41                <1>     int 41h
   328 000014D8 EB0B                <1>     jmp short .dirPrintNameExit
   329                              <1> .widePrint:
   330                              <1> ;If /W, print name space ext space space space space
   331 000014DA 488D1533F7FFFF      <1>     lea rdx, fourSpc
   332 000014E1 B409                <1>     mov ah, 09h ;Print string
   333 000014E3 CD41                <1>     int 41h
   334                              <1> .dirPrintNameExit:
   335 000014E5 FE05B8EEFFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   336 000014EB FE05B1EEFFFF        <1>     inc byte [dirLineCtr]
   337 000014F1 803DAAEEFFFF17      <1>     cmp byte [dirLineCtr], 23
   338                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 000014F8 7401                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 000014FA C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   339 000014FB 488D15FCF2FFFF      <1>     lea rdx, pauseMes
   340 00001502 B409                <1>     mov ah, 09h
   341 00001504 CD41                <1>     int 41h
   342 00001506 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   343 00001508 CD41                <1>     int 41h
   344 0000150A C60591EEFFFF00      <1>     mov byte [dirLineCtr], 0
   345 00001511 488D155CF1FFFF      <1>     lea rdx, crlf   ;Force new line
   346 00001518 B409                <1>     mov ah, 09h
   347 0000151A CD41                <1>     int 41h
   348                              <1>     return
    19                              <2> %%_ret:
    20 0000151C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   349                              <1> 
   350                              <1> chdir:
   351 0000151D F60589EBFFFFFF      <1>     test byte [arg1Flg], -1
   352 00001524 754D                <1>     jnz .changeDir
   353                              <1>     ;Print CWD
   354                              <1> .printCWD:
   355 00001526 E8080C0000          <1>     call putCWDInPrompt ;Exactly the same procedure
   356 0000152B E8EA090000          <1>     call printCRLF
   357                              <1>     return
    19                              <2> %%_ret:
    20 00001530 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   358                              <1> .printDiskCWD:
   359                              <1> ;Print CWD for a specified drive
   360 00001531 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   361 00001535 88D0                <1>     mov al, dl
   362 00001537 0440                <1>     add al, "@" ;Get the UC letter
   363 00001539 B43A                <1>     mov ah, ":"
   364 0000153B 488D3DDFEDFFFF      <1>     lea rdi, searchSpec
   365 00001542 66AB                <1>     stosw   ;Store X:, rdi+=2
   366 00001544 8A05D9EAFFFF        <1>     mov al, byte [pathSep]
   367 0000154A AA                  <1>     stosb   ;Store pathSep, inc rdi
   368 0000154B B447                <1>     mov ah, 47h ;Get Current Working Directory
   369 0000154D 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   370 00001550 CD41                <1>     int 41h
   371 00001552 E8880C0000          <1>     call strlen
   372 00001557 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   373 0000155D B440                <1>     mov ah, 40h ;Write to handle
   374 0000155F BB01000000          <1>     mov ebx, 1  ;STDOUT
   375 00001564 488D15B6EDFFFF      <1>     lea rdx, searchSpec
   376 0000156B CD41                <1>     int 41h
   377 0000156D E8A8090000          <1>     call printCRLF
   378                              <1>     return
    19                              <2> %%_ret:
    20 00001572 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   379                              <1> .changeDir:
   380 00001573 8A0536EBFFFF        <1>     mov al, byte [arg1FCBret]
   381 00001579 3CFF                <1>     cmp al, -1 
   382 0000157B 0F84D9FBFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   383 00001581 4180785D20          <1>     cmp byte [r8 + fcb1 + fcb.filename], " "
   384 00001586 7520                <1>     jne .getFQPath
   385                              <1>     ;Now we double check that on the command line we have . or ..
   386 00001588 0FB6051FEBFFFF      <1>     movzx eax, byte [arg1Off]
   387 0000158F 488D35F8EBFFFF      <1>     lea rsi, cmdBuffer
   388 00001596 4801C6              <1>     add rsi, rax
   389 00001599 8A0584EAFFFF        <1>     mov al, byte [pathSep]
   390 0000159F 3806                <1>     cmp byte [rsi], al  ;Is the first char a pathsep?
   391 000015A1 7405                <1>     je .getFQPath
   392 000015A3 803E2E              <1>     cmp byte [rsi], "."
   393 000015A6 7589                <1>     jne .printDiskCWD
   394                              <1>     ;If the path is . or .., its acceptable, else fail
   395                              <1> .getFQPath:
   396 000015A8 E88D0D0000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   397 000015AD 0F82C2FBFFFF        <1>     jc badDirError  ;If this returns CF=CY, its a badDir
   398 000015B3 488D1567EDFFFF      <1>     lea rdx, searchSpec
   399 000015BA B43B                <1>     mov ah, 3Bh ;CHDIR
   400 000015BC CD41                <1>     int 41h
   401 000015BE 0F82B1FBFFFF        <1>     jc badDirError
   402                              <1>     return
    19                              <2> %%_ret:
    20 000015C4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   403                              <1> 
   404                              <1> mkdir:
   405 000015C5 F605E1EAFFFFFF      <1>     test byte [arg1Flg], -1
   406 000015CC 0F8491FBFFFF        <1>     jz badArgError
   407 000015D2 F605D7EAFFFFFF      <1>     test byte [arg2Flg], -1
   408 000015D9 0F8584FBFFFF        <1>     jnz badArgError
   409                              <1>     ;We have exactly one argument
   410 000015DF 8A05CAEAFFFF        <1>     mov al, byte [arg1FCBret]
   411 000015E5 3CFF                <1>     cmp al, -1 
   412 000015E7 0F846DFBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   413 000015ED E8480D0000          <1>     call buildCommandPath
   414 000015F2 488D1528EDFFFF      <1>     lea rdx, searchSpec
   415 000015F9 B800390000          <1>     mov eax, 3900h  ;MKDIR
   416 000015FE CD41                <1>     int 41h
   417                              <1>     retnc
    67                              <2> cret nc
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001600 73(C4)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   418                              <1> .badMake:   ;Else, bad make
   419 00001602 488D1529F3FFFF      <1>     lea rdx, badMD
   420 00001609 B800090000          <1>     mov eax, 0900h
   421 0000160E CD41                <1>     int 41h
   422                              <1>     return
    19                              <2> %%_ret:
    20 00001610 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   423                              <1> 
   424                              <1> rmdir:
   425 00001611 F60595EAFFFFFF      <1>     test byte [arg1Flg], -1
   426 00001618 0F8445FBFFFF        <1>     jz badArgError
   427 0000161E F6058BEAFFFFFF      <1>     test byte [arg2Flg], -1
   428 00001625 0F8538FBFFFF        <1>     jnz badArgError
   429                              <1>     ;We have exactly one argument
   430 0000162B 8A057EEAFFFF        <1>     mov al, byte [arg1FCBret]
   431 00001631 3CFF                <1>     cmp al, -1 
   432 00001633 0F8421FBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   433 00001639 E8FC0C0000          <1>     call buildCommandPath
   434 0000163E 488D15DCECFFFF      <1>     lea rdx, searchSpec
   435 00001645 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   436 0000164A CD41                <1>     int 41h
   437                              <1>     retnc   ;Return if not carry
    67                              <2> cret nc
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000164C 73(10)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   438                              <1> .badRemove:   ;Else, bad make
   439 0000164E 488D15FAF2FFFF      <1>     lea rdx, badRD
   440 00001655 B800090000          <1>     mov eax, 0900h
   441 0000165A CD41                <1>     int 41h
   442                              <1>     return
    19                              <2> %%_ret:
    20 0000165C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   443                              <1> 
   444                              <1> copy:
   445                              <1>     return
    19                              <2> %%_ret:
    20 0000165D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   446                              <1> erase:
   447 0000165E F60548EAFFFFFF      <1>     test byte [arg1Flg], -1
   448 00001665 0F84F8FAFFFF        <1>     jz badArgError
   449 0000166B E8CA0C0000          <1>     call buildCommandPath
   450 00001670 488D15AAECFFFF      <1>     lea rdx, searchSpec
   451 00001677 B800410000          <1>     mov eax, 4100h  ;Delete File 
   452 0000167C 31C9                <1>     xor ecx, ecx
   453 0000167E CD41                <1>     int 41h
   454 00001680 0F82DDFAFFFF        <1>     jc badArgError
   455                              <1>     return
    19                              <2> %%_ret:
    20 00001686 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   456                              <1> date:
   457 00001687 488D15C7F1FFFF      <1>     lea rdx, curDate
   458 0000168E B409                <1>     mov ah, 09h
   459 00001690 CD41                <1>     int 41h
   460 00001692 B42A                <1>     mov ah, 2Ah ;DOS get date
   461 00001694 CD41                <1>     int 41h
   462                              <1> 	;AL = day of the week (0=Sunday)
   463                              <1> 	;CX = year (1980-2099)
   464                              <1> 	;DH = month (1-12)
   465                              <1> 	;DL = day (1-31)
   466 00001696 66890D28EEFFFF      <1>     mov word [td1], cx
   467 0000169D 881524EEFFFF        <1>     mov byte [td3], dl
   468 000016A3 88351FEEFFFF        <1>     mov byte [td4], dh
   469 000016A9 0FB6C0              <1>     movzx eax, al
   470 000016AC 89C3                <1>     mov ebx, eax
   471 000016AE D1E3                <1>     shl ebx, 1   ;Multiply by 2
   472 000016B0 01D8                <1>     add eax, ebx ;Make it 3 times 
   473 000016B2 488D1578F1FFFF      <1>     lea rdx, dayName
   474 000016B9 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   475 000016BD B903000000          <1>     mov ecx, 3  ;Print three chars
   476 000016C2 BB01000000          <1>     mov ebx, 1  ;STDOUT
   477 000016C7 B440                <1>     mov ah, 40h ;Write to handle
   478 000016C9 CD41                <1>     int 41h
   479 000016CB B220                <1>     mov dl, " "
   480 000016CD B402                <1>     mov ah, 02h
   481 000016CF CD41                <1>     int 41h
   482                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   483                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   484                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   485 000016D1 0FB705EDEDFFFF      <1>     movzx eax, word [td1]   ;Get this word
   486 000016D8 C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   487 000016DB 0FB61DE6EDFFFF      <1>     movzx ebx, byte [td4]
   488 000016E2 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   489 000016E5 09D8                <1>     or eax, ebx ;Add this date to eax
   490 000016E7 0FB61DD9EDFFFF      <1>     movzx ebx, byte [td3]
   491 000016EE 09D8                <1>     or eax, ebx
   492 000016F0 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   493 000016F5 E836080000          <1>     call printDate
   494                              <1> 
   495 000016FA 488D1565F1FFFF      <1>     lea rdx, newDate
   496 00001701 B409                <1>     mov ah, 09h
   497 00001703 CD41                <1>     int 41h
   498 00001705 488D1579F1FFFF      <1>     lea rdx, ukDate
   499 0000170C 488D0565F1FFFF      <1>     lea rax, usDate
   500 00001713 488D1D78F1FFFF      <1>     lea rbx, jpDate
   501 0000171A 803D0DE9FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   502 00001721 480F47D3            <1>     cmova rdx, rbx
   503 00001725 480F42D0            <1>     cmovb rdx, rax
   504 00001729 B409                <1>     mov ah, 09h
   505 0000172B CD41                <1>     int 41h
   506                              <1> 
   507 0000172D 498D9080000000      <1>     lea rdx, qword [r8 + cmdLineCnt]
   508 00001734 B40A                <1>     mov ah, 0Ah
   509 00001736 CD41                <1>     int 41h
   510 00001738 52                  <1>     push rdx
   511 00001739 488D1534EFFFFF      <1>     lea rdx, crlf
   512 00001740 B409                <1>     mov ah, 09h
   513 00001742 CD41                <1>     int 41h
   514 00001744 5A                  <1>     pop rdx
   515 00001745 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   516                              <1>     rete    ;Exit!
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 00001749 7501                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 0000174B C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   517                              <1>     return
    19                              <2> %%_ret:
    20 0000174C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   518                              <1> 
   519                              <1> time:
   520 0000174D 488D155AF1FFFF      <1>     lea rdx, curTime
   521 00001754 B409                <1>     mov ah, 09h
   522 00001756 CD41                <1>     int 41h
   523 00001758 B42C                <1>     mov ah, 2Ch ;DOS get time
   524 0000175A CD41                <1>     int 41h
   525                              <1>     ;CH = hour (0-23)
   526                              <1> 	;CL = minutes (0-59)
   527                              <1> 	;DH = seconds (0-59)
   528                              <1> 	;DL = hundredths (0-99)
   529 0000175C 880D63EDFFFF        <1>     mov byte [td1], cl
   530 00001762 882D5EEDFFFF        <1>     mov byte [td2], ch
   531 00001768 881559EDFFFF        <1>     mov byte [td3], dl
   532 0000176E 883554EDFFFF        <1>     mov byte [td4], dh
   533 00001774 0FB6C5              <1>     movzx eax, ch
   534 00001777 E848090000          <1>     call printTime.printHours
   535                              <1> 
   536 0000177C 8A15B9E8FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   537 00001782 B402                <1>     mov ah, 02h
   538 00001784 CD41                <1>     int 41h
   539                              <1> 
   540 00001786 0FB60538EDFFFF      <1>     movzx eax, byte [td1]   ;Minutes
   541 0000178D E822090000          <1>     call printTime.printMinutesAlt
   542                              <1> 
   543 00001792 8A15A3E8FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   544 00001798 B402                <1>     mov ah, 02h
   545 0000179A CD41                <1>     int 41h
   546                              <1> 
   547 0000179C 0FB60525EDFFFF      <1>     movzx eax, byte [td4]   ;Seconds
   548 000017A3 E80C090000          <1>     call printTime.printMinutesAlt
   549                              <1> 
   550 000017A8 B22E                <1>     mov dl, "."
   551 000017AA B402                <1>     mov ah, 02h
   552 000017AC CD41                <1>     int 41h
   553                              <1> 
   554 000017AE 0FB60512EDFFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   555 000017B5 E8FA080000          <1>     call printTime.printMinutesAlt
   556                              <1> 
   557 000017BA 488D15FEF0FFFF      <1>     lea rdx, newTime
   558 000017C1 B409                <1>     mov ah, 09h
   559 000017C3 CD41                <1>     int 41h
   560                              <1> 
   561 000017C5 498D9080000000      <1>     lea rdx, qword [r8 + cmdLineCnt]
   562 000017CC B40A                <1>     mov ah, 0Ah
   563 000017CE CD41                <1>     int 41h
   564 000017D0 52                  <1>     push rdx
   565 000017D1 488D159CEEFFFF      <1>     lea rdx, crlf
   566 000017D8 B409                <1>     mov ah, 09h
   567 000017DA CD41                <1>     int 41h
   568 000017DC 5A                  <1>     pop rdx
   569 000017DD 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   570                              <1>     rete    ;Exit!
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 000017E1 7501                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 000017E3 C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   571                              <1>     return
    19                              <2> %%_ret:
    20 000017E4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   572                              <1> ctty:
   573 000017E5 F605C1E8FFFFFF      <1>     test byte [arg1Flg], -1
   574 000017EC 0F8471F9FFFF        <1>     jz badArgError
   575 000017F2 F605B7E8FFFFFF      <1>     test byte [arg2Flg], -1
   576 000017F9 0F8564F9FFFF        <1>     jnz badArgError
   577 000017FF 488D3588E9FFFF      <1>     lea rsi, cmdBuffer
   578 00001806 0FB605A1E8FFFF      <1>     movzx eax, byte [arg1Off]
   579 0000180D 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
   580 00001810 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
   581 00001814 750F                <1>     jne .noDrive
   582 00001816 0FB60592E8FFFF      <1>     movzx eax, byte [arg1FCBret]
   583 0000181D 3CFF                <1>     cmp al, -1
   584 0000181F 0F8435F9FFFF        <1>     je badDriveError
   585                              <1> .noDrive:
   586                              <1>     ;Now we open the provided file
   587 00001825 E8930C0000          <1>     call copyArgumentToSearchSpec
   588 0000182A 488D15F0EAFFFF      <1>     lea rdx, searchSpec
   589 00001831 B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
   590 00001836 CD41                <1>     int 41h
   591 00001838 0F822EF9FFFF        <1>     jc badFileError
   592 0000183E 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
   593 00001841 B800440000          <1>     mov eax, 4400h  ;Get device word
   594 00001846 CD41                <1>     int 41h
   595 00001848 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
   596 0000184B 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
   597                              <1>     ;Now we set this handle to be STDIO
   598 0000184D 80CA03              <1>     or dl, 3    ;Set STDIO bits
   599 00001850 30F6                <1>     xor dh, dh
   600 00001852 B801440000          <1>     mov eax, 4401h  ;Now we set the device word
   601 00001857 CD41                <1>     int 41h
   602                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
   603 00001859 31C9                <1>     xor ecx, ecx    ;STDIN
   604 0000185B B446                <1>     mov ah, 46h
   605 0000185D CD41                <1>     int 41h
   606 0000185F FFC1                <1>     inc ecx         ;STDOUT
   607 00001861 B446                <1>     mov ah, 46h
   608 00001863 CD41                <1>     int 41h
   609 00001865 FFC1                <1>     inc ecx         ;STDERR
   610 00001867 B446                <1>     mov ah, 46h
   611 00001869 CD41                <1>     int 41h
   612 0000186B B43E                <1>     mov ah, 3Eh ;Now we close the original handle
   613 0000186D CD41                <1>     int 41h
   614                              <1>     return
    19                              <2> %%_ret:
    20 0000186F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   615                              <1> .badCharDev:
   616 00001870 488D1547F1FFFF      <1>     lea rdx, badDev
   617 00001877 B409                <1>     mov ah, 09h
   618 00001879 CD41                <1>     int 41h
   619 0000187B B43E                <1>     mov ah, 3Eh ;Close opened handle
   620 0000187D CD41                <1>     int 41h
   621                              <1>     return
    19                              <2> %%_ret:
    20 0000187F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   622                              <1> 
   623                              <1> cls:  
   624 00001880 B800440000          <1>     mov eax, 4400h  ;Get device info
   625 00001885 BB01000000          <1>     mov ebx, 1      ;for handle 1
   626 0000188A CD41                <1>     int 41h         ;in dx
   627 0000188C F7C280000000        <1>     test edx, devCharDev
   628 00001892 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   629 00001894 F7C210000000        <1>     test edx, charDevFastOut
   630 0000189A 743E                <1>     jz .doAnsi
   631                              <1>     ;Test if Int 49h uses Int 30h
   632                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   633                              <1>     ;Int 49h MUST be terminated with a IRETQ, within 1024 bytes
   634 0000189C B849350000          <1>     mov eax, 3549h  ;Get the vector for interrupt 49h
   635 000018A1 CD41                <1>     int 41h
   636                              <1> .biosCheck:
   637 000018A3 66813BCD30          <1>     cmp word [rbx], 30CDh
   638 000018A8 740C                <1>     je .biosConfirmed
   639 000018AA 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   640 000018AF 7429                <1>     je .doAnsi
   641 000018B1 48FFC3              <1>     inc rbx
   642 000018B4 EBED                <1>     jmp short .biosCheck
   643                              <1> .biosConfirmed:
   644                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   645 000018B6 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   646 000018B8 31DB                <1>     xor ebx, ebx
   647 000018BA CD30                <1>     int 30h
   648 000018BC B40F                <1>     mov ah, 0Fh ;Get screen mode
   649 000018BE CD30                <1>     int 30h
   650 000018C0 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   651 000018C3 FECA                <1>     dec dl
   652 000018C5 B619                <1>     mov dh, 25  ;Number of rows is standard
   653 000018C7 31C0                <1>     xor eax, eax
   654 000018C9 89C1                <1>     mov ecx, eax
   655 000018CB B707                <1>     mov bh, 7   ;Screen attributes
   656 000018CD B406                <1>     mov ah, 6   ;Scroll
   657 000018CF CD30                <1>     int 30h
   658 000018D1 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   659 000018D3 B700                <1>     mov bh, 0   ;Page 0
   660 000018D5 B402                <1>     mov ah, 2
   661 000018D7 CD30                <1>     int 30h
   662                              <1>     return
    19                              <2> %%_ret:
    20 000018D9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   663                              <1> .doAnsi:
   664                              <1> ;If an ANSI driver is not installed, this will simply insert blank lines
   665                              <1> ;4 chars in the ansi routine
   666                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   667                              <1> ; understand ANSI codes
   668 000018DA 488D352FF3FFFF      <1>     lea rsi, ansiCls
   669 000018E1 B904000000          <1>     mov ecx, 4
   670 000018E6 B406                <1>     mov ah, 06h ;Raw char output
   671                              <1> .ansiLp:
   672 000018E8 AC                  <1>     lodsb   ;Get the char in 
   673 000018E9 88C2                <1>     mov dl, al
   674 000018EB CD41                <1>     int 41h
   675 000018ED FFC9                <1>     dec ecx
   676 000018EF 75F7                <1>     jnz .ansiLp
   677                              <1>     return
    19                              <2> %%_ret:
    20 000018F1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   678                              <1> 
   679                              <1> break:
   680 000018F2 F605B4E7FFFFFF      <1>     test byte [arg1Flg], -1
   681 000018F9 752D                <1>     jnz .argumentProvided
   682                              <1>     ;Here we just get the status of break
   683 000018FB B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   684 00001900 CD41                <1>     int 41h
   685 00001902 88D3                <1>     mov bl, dl
   686 00001904 488D1555F1FFFF      <1>     lea rdx, breakIs
   687 0000190B B409                <1>     mov ah, 09h
   688 0000190D CD41                <1>     int 41h
   689 0000190F 488D1545F1FFFF      <1>     lea rdx, onMes
   690 00001916 488D0D38F1FFFF      <1>     lea rcx, offMes
   691 0000191D 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   692 0000191F 480F44D1            <1>     cmovz rdx, rcx
   693 00001923 B409                <1>     mov ah, 09h
   694 00001925 CD41                <1>     int 41h
   695                              <1>     return
    19                              <2> %%_ret:
    20 00001927 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   696                              <1> .argumentProvided:
   697 00001928 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   698 0000192C AD                  <1>     lodsd   ;Read the word
   699 0000192D 89C3                <1>     mov ebx, eax
   700 0000192F 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   701 00001934 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   702 00001937 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   703 0000193C 7416                <1>     je .maybeOn
   704 0000193E 663D4F46            <1>     cmp ax, "OF"
   705 00001942 7523                <1>     jne .badOnOff
   706 00001944 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   707 00001949 6681FB4620          <1>     cmp bx, "F "
   708 0000194E 7517                <1>     jne .badOnOff
   709                              <1>     ;Set off
   710 00001950 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   711 00001952 EB0B                <1>     jmp short .setBreak
   712                              <1> .maybeOn:
   713 00001954 663D4F4E            <1>     cmp ax, "ON"
   714 00001958 750D                <1>     jne .badOnOff
   715                              <1>     ;Set on
   716 0000195A BA01000000          <1>     mov edx, 1
   717                              <1> .setBreak:
   718 0000195F B801330000          <1>     mov eax, 3301h  ;Set break
   719 00001964 CD41                <1>     int 41h
   720                              <1>     return
    19                              <2> %%_ret:
    20 00001966 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   721                              <1> .badOnOff:
   722 00001967 488D15B2F2FFFF      <1>     lea rdx, badOnOff
   723 0000196E B409                <1>     mov ah, 09h
   724 00001970 CD41                <1>     int 41h
   725                              <1>     return
    19                              <2> %%_ret:
    20 00001972 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   726                              <1> 
   727                              <1> verify:
   728 00001973 F60533E7FFFFFF      <1>     test byte [arg1Flg], -1
   729 0000197A 752D                <1>     jnz .argumentProvided
   730                              <1>     ;Here we just get the status of break
   731 0000197C B800540000          <1>     mov eax, 5400h  ;Get verify status in al
   732 00001981 CD41                <1>     int 41h
   733 00001983 88C3                <1>     mov bl, al
   734 00001985 488D15DEF0FFFF      <1>     lea rdx, verifyIs
   735 0000198C B409                <1>     mov ah, 09h
   736 0000198E CD41                <1>     int 41h
   737 00001990 488D15C4F0FFFF      <1>     lea rdx, onMes
   738 00001997 488D0DB7F0FFFF      <1>     lea rcx, offMes
   739 0000199E 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   740 000019A0 480F44D1            <1>     cmovz rdx, rcx
   741 000019A4 B409                <1>     mov ah, 09h
   742 000019A6 CD41                <1>     int 41h
   743                              <1>     return
    19                              <2> %%_ret:
    20 000019A8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   744                              <1> .argumentProvided:
   745 000019A9 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   746 000019AD AD                  <1>     lodsd   ;Read the word
   747 000019AE 89C3                <1>     mov ebx, eax
   748 000019B0 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   749 000019B5 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   750 000019B8 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   751 000019BD 7416                <1>     je .maybeOn
   752 000019BF 663D4F46            <1>     cmp ax, "OF"
   753 000019C3 751F                <1>     jne .badOnOff
   754 000019C5 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   755 000019CA 6681FB4620          <1>     cmp bx, "F "
   756 000019CF 7513                <1>     jne .badOnOff
   757                              <1>     ;Set off
   758 000019D1 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
   759 000019D3 EB0A                <1>     jmp short .setVerify
   760                              <1> .maybeOn:
   761 000019D5 663D4F4E            <1>     cmp ax, "ON"
   762 000019D9 7509                <1>     jne .badOnOff
   763                              <1>     ;Set on
   764 000019DB 31C0                <1>     xor eax, eax
   765 000019DD FFC0                <1>     inc eax ;AL=1 => VERIFY is on
   766                              <1> .setVerify:
   767 000019DF B42E                <1>     mov ah, 2Eh  ;Set Verify
   768 000019E1 CD41                <1>     int 41h
   769                              <1>     return
    19                              <2> %%_ret:
    20 000019E3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   770                              <1> .badOnOff:
   771 000019E4 488D1535F2FFFF      <1>     lea rdx, badOnOff
   772 000019EB B409                <1>     mov ah, 09h
   773 000019ED CD41                <1>     int 41h
   774                              <1>     return
    19                              <2> %%_ret:
    20 000019EF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   775                              <1> 
   776                              <1> rename:
   777                              <1>     return
    19                              <2> %%_ret:
    20 000019F0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   778                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   779                              <1> touch:
   780                              <1> ;Temporarily used to create files
   781 000019F1 F605B5E6FFFFFF      <1>     test byte [arg1Flg], -1
   782 000019F8 0F8465F7FFFF        <1>     jz badArgError
   783 000019FE E837090000          <1>     call buildCommandPath
   784 00001A03 488D1517E9FFFF      <1>     lea rdx, searchSpec
   785 00001A0A B8003C0000          <1>     mov eax, 3C00h  ;Create file 
   786 00001A0F 31C9                <1>     xor ecx, ecx
   787 00001A11 CD41                <1>     int 41h
   788 00001A13 720B                <1>     jc .touchError
   789 00001A15 0FB7D8              <1>     movzx ebx, ax
   790 00001A18 B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
   791 00001A1D CD41                <1>     int 41h
   792                              <1>     return
    19                              <2> %%_ret:
    20 00001A1F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   793                              <1> .touchError:
   794 00001A20 488D15D1F1FFFF      <1>     lea rdx, touchErr
   795 00001A27 E950F7FFFF          <1>     jmp badCmn
   796                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   797                              <1> truename:
   798 00001A2C F6057AE6FFFFFF      <1>     test byte [arg1Flg], -1
   799 00001A33 0F842AF7FFFF        <1>     jz badArgError
   800 00001A39 E8FC080000          <1>     call buildCommandPath
   801                              <1>     ;Explicitly call Truename if we remove truename from this function
   802 00001A3E 488D3DDCE8FFFF      <1>     lea rdi, searchSpec
   803 00001A45 E895070000          <1>     call strlen
   804 00001A4A FFC9                <1>     dec ecx ;Don't print terminating null
   805 00001A4C 488D15CEE8FFFF      <1>     lea rdx, searchSpec
   806 00001A53 BB01000000          <1>     mov ebx, 01
   807 00001A58 B440                <1>     mov ah, 40h
   808 00001A5A CD41                <1>     int 41h
   809 00001A5C E8B9040000          <1>     call printCRLF
   810                              <1>     return
    19                              <2> %%_ret:
    20 00001A61 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   811                              <1> 
   812                              <1> volume:
   813 00001A62 488D3527E7FFFF      <1>     lea rsi, cmdBuffer + 2  ;Get the command buffer
   814 00001A69 E8E9070000          <1>     call skipSpaces
   815 00001A6E 4881C603000000      <1>     add rsi, 3  ;Go past the VOL command
   816 00001A75 E8DD070000          <1>     call skipSpaces
   817 00001A7A AC                  <1>     lodsb   ;Get the first char, and point rsi to next char
   818 00001A7B E8C6070000          <1>     call isALEndOfCommand   ;If this char is end of command, use current drive
   819 00001A80 7507                <1>     jnz .checkDriveLetter
   820 00001A82 E853070000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
   821 00001A87 EB35                <1>     jmp short .dirEP
   822                              <1> .checkDriveLetter:
   823 00001A89 803E3A              <1>     cmp byte [rsi], ":" ;If this is not a :, fail
   824 00001A8C 0F85C8F6FFFF        <1>     jne badDriveError
   825 00001A92 4889F7              <1>     mov rdi, rsi    ;Save start of drive spec in rsi
   826 00001A95 48FFC6              <1>     inc rsi  ;Go past the X: spec
   827 00001A98 E8BA070000          <1>     call skipSpaces
   828 00001A9D AC                  <1>     lodsb   ;Get the non-space char in al
   829 00001A9E E8A3070000          <1>     call isALEndOfCommand   ;The next non-space char must be terminator
   830 00001AA3 0F85B1F6FFFF        <1>     jne badDriveError
   831                              <1> ;This argument should've been parsed into FCB1 so use that result
   832 00001AA9 8A0500E6FFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
   833 00001AAF A8FF                <1>     test al, -1
   834 00001AB1 0F85A3F6FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
   835 00001AB7 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
   836 00001ABC FFC8                <1>     dec eax ;Convert to 0 based number
   837                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al
   838 00001ABE 0541000000          <1>     add eax, "A" ;Get ASCII representation of 0 based number
   839 00001AC3 8805F5E9FFFF        <1>     mov byte [volPathBuf], al   ;Store ASCII letter here
   840 00001AC9 488D15F3E5FFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   841 00001AD0 B41A                <1>     mov ah, 1Ah
   842 00001AD2 CD41                <1>     int 41h
   843 00001AD4 488D15E3E9FFFF      <1>     lea rdx, volPathBuf
   844 00001ADB 66B90800            <1>     mov cx, dirVolumeID
   845 00001ADF B44E                <1>     mov ah, 4Eh ;Find first
   846 00001AE1 CD41                <1>     int 41h
   847 00001AE3 7221                <1>     jc .skipVolLbl
   848 00001AE5 488D35F5E5FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   849 00001AEC 488D3DBEE9FFFF      <1>     lea rdi, volLblSpc
   850 00001AF3 B90B000000          <1>     mov ecx, 11 ;Get the 11 chars of the volume label
   851                              <1> .dirLblCopy:
   852 00001AF8 AC                  <1>     lodsb   ;Get the first char
   853 00001AF9 3C00                <1>     cmp al, 0
   854 00001AFB 7409                <1>     je .skipVolLbl  ;Jump with CF=NC
   855 00001AFD 3C2E                <1>     cmp al, "."
   856 00001AFF 7401                <1>     je .dirLblSkipStore
   857 00001B01 AA                  <1>     stosb
   858                              <1> .dirLblSkipStore:
   859 00001B02 FFC9                <1>     dec ecx
   860 00001B04 75F2                <1>     jnz .dirLblCopy
   861                              <1>     ;Fallthru with CF=NC
   862                              <1> .skipVolLbl:
   863                              <1> ;Print volume label information now
   864                              <1> ;Propagates the CF if CF was set    
   865 00001B06 9C                  <1>     pushfq
   866 00001B07 488D1566EBFFFF      <1>     lea rdx, crlf
   867 00001B0E B409                <1>     mov ah, 09h
   868 00001B10 CD41                <1>     int 41h
   869 00001B12 488D15E0EDFFFF      <1>     lea rdx, volMes
   870 00001B19 B409                <1>     mov ah, 09h
   871 00001B1B CD41                <1>     int 41h
   872 00001B1D 8A159BE9FFFF        <1>     mov dl, byte [volPathBuf]   ;Print the drive letter out
   873 00001B23 B402                <1>     mov ah, 02h
   874 00001B25 CD41                <1>     int 41h
   875 00001B27 9D                  <1>     popfq
   876 00001B28 7317                <1>     jnc .volIDOk
   877 00001B2A 488D15DFEDFFFF      <1>     lea rdx, volNo
   878 00001B31 B409                <1>     mov ah, 09h
   879 00001B33 CD41                <1>     int 41h
   880 00001B35 488D1538EBFFFF      <1>     lea rdx, crlf
   881 00001B3C B409                <1>     mov ah, 09h
   882 00001B3E CD41                <1>     int 41h
   883                              <1>     return
    19                              <2> %%_ret:
    20 00001B40 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   884                              <1> .volIDOk:
   885 00001B41 488D15C3EDFFFF      <1>     lea rdx, volOk
   886 00001B48 B409                <1>     mov ah, 09h
   887 00001B4A CD41                <1>     int 41h
   888 00001B4C 488D3D5EE9FFFF      <1>     lea rdi, volLblSpc
   889 00001B53 E887060000          <1>     call strlen
   890 00001B58 FFC9                <1>     dec ecx
   891 00001B5A C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   892 00001B5E 488D154CE9FFFF      <1>     lea rdx, volLblSpc
   893 00001B65 B409                <1>     mov ah, 09h
   894 00001B67 CD41                <1>     int 41h
   895 00001B69 488D1504EBFFFF      <1>     lea rdx, crlf
   896 00001B70 B409                <1>     mov ah, 09h
   897 00001B72 CD41                <1>     int 41h
   898                              <1>     return
    19                              <2> %%_ret:
    20 00001B74 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   899                              <1> 
   900                              <1> version:
   901 00001B75 488D15F8EAFFFF      <1>     lea rdx, crlf
   902 00001B7C B409                <1>     mov ah, 09h
   903 00001B7E CD41                <1>     int 41h
   904 00001B80 488D1560EDFFFF      <1>     lea rdx, dosVer
   905 00001B87 B409                <1>     mov ah, 09h
   906 00001B89 CD41                <1>     int 41h
   907 00001B8B E80C000000          <1>     call .printVersionNumber
   908 00001B90 488D15DDEAFFFF      <1>     lea rdx, crlf
   909 00001B97 B409                <1>     mov ah, 09h
   910 00001B99 CD41                <1>     int 41h
   911                              <1>     return
    19                              <2> %%_ret:
    20 00001B9B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   912                              <1> .printVersionNumber:
   913 00001B9C B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
   914 00001B9E CD41                <1>     int 41h
   915 00001BA0 50                  <1>     push rax
   916 00001BA1 0FB6C0              <1>     movzx eax, al
   917 00001BA4 E82F080000          <1>     call printDecimalWord
   918 00001BA9 B22E                <1>     mov dl, "."
   919 00001BAB B402                <1>     mov ah, 02h
   920 00001BAD CD41                <1>     int 41h
   921 00001BAF 58                  <1>     pop rax
   922 00001BB0 0FB6C4              <1>     movzx eax, ah
   923 00001BB3 E820080000          <1>     call printDecimalWord
   924                              <1>     return
    19                              <2> %%_ret:
    20 00001BB8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   925                              <1> 
   926                              <1> 
   927                              <1> memory:
   928 00001BB9 488B1D57E4FFFF      <1>     mov rbx, qword [sysVars]
   929 00001BC0 4885DB              <1>     test rbx, rbx
   930 00001BC3 7510                <1>     jnz .sysvarsOK
   931 00001BC5 488D15CDEFFFFF      <1>     lea rdx, memBad0
   932 00001BCC B409                <1>     mov ah, 09h
   933 00001BCE CD41                <1>     int 41h
   934 00001BD0 E9A6080000          <1>     jmp freezePC.altEP
   935                              <1> .sysvarsOK:
   936                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
   937                              <1>     ; and rcx to store Application memory
   938 00001BD5 31F6                <1>     xor esi, esi
   939 00001BD7 31FF                <1>     xor edi, edi
   940 00001BD9 31ED                <1>     xor ebp, ebp
   941 00001BDB 31C9                <1>     xor ecx, ecx
   942 00001BDD 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
   943 00001BE1 488B1B              <1>     mov rbx, qword [rbx]
   944                              <1> .memLp:
   945 00001BE4 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
   946 00001BE7 7409                <1>     je .validMCB
   947 00001BE9 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
   948 00001BEC 0F8501010000        <1>     jne .badMCBFound
   949                              <1> .validMCB:
   950 00001BF2 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
   951 00001BF5 48C1E004            <1>     shl rax, 4  ;Convert to bytes
   952 00001BF9 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
   953 00001C01 7505                <1>     jne .notDOS
   954 00001C03 4801C6              <1>     add rsi, rax    ;Add to DOS count
   955 00001C06 EB21                <1>     jmp short .gotoNext
   956                              <1> .notDOS:
   957 00001C08 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
   958 00001C10 7505                <1>     jne .notFree
   959 00001C12 4801C7              <1>     add rdi, rax    ;Add to Free space count
   960 00001C15 EB12                <1>     jmp short .gotoNext
   961                              <1> .notFree:
   962 00001C17 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
   963 00001C1F 7505                <1>     jne .notHole
   964 00001C21 4801C5              <1>     add rbp, rax    ;Add to Hole count
   965 00001C24 EB03                <1>     jmp short .gotoNext
   966                              <1> .notHole:
   967 00001C26 4801C1              <1>     add rcx, rax    ;Add to Application count
   968                              <1> .gotoNext:
   969 00001C29 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
   970 00001C2C 7407                <1>     je .endOfWalk
   971 00001C2E 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
   972 00001C33 EBAF                <1>     jmp short .memLp
   973                              <1> .endOfWalk:
   974                              <1>     
   975 00001C35 488D15BEEEFFFF      <1>     lea rdx, memDOS
   976 00001C3C B409                <1>     mov ah, 09h
   977 00001C3E CD41                <1>     int 41h
   978 00001C40 4889F0              <1>     mov rax, rsi
   979 00001C43 E89D000000          <1>     call .mcbPrintAmount
   980 00001C48 488D1543EFFFFF      <1>     lea rdx, memByte
   981 00001C4F B409                <1>     mov ah, 09h
   982 00001C51 CD41                <1>     int 41h
   983                              <1> 
   984 00001C53 4885ED              <1>     test rbp, rbp
   985 00001C56 741E                <1>     jz .skipHole
   986 00001C58 488D15E7EEFFFF      <1>     lea rdx, memHole
   987 00001C5F B409                <1>     mov ah, 09h
   988 00001C61 CD41                <1>     int 41h
   989 00001C63 4889E8              <1>     mov rax, rbp
   990 00001C66 E87A000000          <1>     call .mcbPrintAmount
   991 00001C6B 488D1520EFFFFF      <1>     lea rdx, memByte
   992 00001C72 B409                <1>     mov ah, 09h
   993 00001C74 CD41                <1>     int 41h
   994                              <1> .skipHole:
   995                              <1> 
   996 00001C76 488D15A3EEFFFF      <1>     lea rdx, memApp
   997 00001C7D B409                <1>     mov ah, 09h
   998 00001C7F CD41                <1>     int 41h
   999 00001C81 4889C8              <1>     mov rax, rcx
  1000 00001C84 E85C000000          <1>     call .mcbPrintAmount
  1001 00001C89 488D1502EFFFFF      <1>     lea rdx, memByte
  1002 00001C90 B409                <1>     mov ah, 09h
  1003 00001C92 CD41                <1>     int 41h
  1004                              <1> 
  1005 00001C94 488D15D1EEFFFF      <1>     lea rdx, memFree
  1006 00001C9B B409                <1>     mov ah, 09h
  1007 00001C9D CD41                <1>     int 41h
  1008 00001C9F 4889F8              <1>     mov rax, rdi
  1009 00001CA2 E83E000000          <1>     call .mcbPrintAmount
  1010 00001CA7 488D15E4EEFFFF      <1>     lea rdx, memByte
  1011 00001CAE B409                <1>     mov ah, 09h
  1012 00001CB0 CD41                <1>     int 41h
  1013                              <1> 
  1014 00001CB2 488D151BEEFFFF      <1>     lea rdx, memSys
  1015 00001CB9 B409                <1>     mov ah, 09h
  1016 00001CBB CD41                <1>     int 41h
  1017 00001CBD 4889F0              <1>     mov rax, rsi
  1018 00001CC0 4801F8              <1>     add rax, rdi
  1019 00001CC3 4801C8              <1>     add rax, rcx
  1020 00001CC6 4801E8              <1>     add rax, rbp
  1021 00001CC9 E817000000          <1>     call .mcbPrintAmount
  1022 00001CCE 488D15BDEEFFFF      <1>     lea rdx, memByte
  1023 00001CD5 B409                <1>     mov ah, 09h
  1024 00001CD7 CD41                <1>     int 41h
  1025                              <1> 
  1026 00001CD9 488D1594E9FFFF      <1>     lea rdx, crlf
  1027 00001CE0 B409                <1>     mov ah, 09h
  1028 00001CE2 CD41                <1>     int 41h
  1029                              <1>     return
    19                              <2> %%_ret:
    20 00001CE4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1030                              <1> 
  1031                              <1> .mcbPrintAmount:
  1032 00001CE5 51                  <1>     push rcx
  1033 00001CE6 56                  <1>     push rsi
  1034 00001CE7 57                  <1>     push rdi
  1035 00001CE8 55                  <1>     push rbp
  1036 00001CE9 E8EA060000          <1>     call printDecimalWord
  1037 00001CEE 5D                  <1>     pop rbp
  1038 00001CEF 5F                  <1>     pop rdi
  1039 00001CF0 5E                  <1>     pop rsi
  1040 00001CF1 59                  <1>     pop rcx
  1041                              <1>     return
    19                              <2> %%_ret:
    20 00001CF2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1042                              <1> .badMCBFound:
  1043 00001CF3 488D15DFEEFFFF      <1>     lea rdx, memBad2
  1044 00001CFA B409                <1>     mov ah, 09h
  1045 00001CFC CD41                <1>     int 41h
  1046 00001CFE E978070000          <1>     jmp freezePC.altEP
  1047                              <1> 
  1048                              <1> type:
  1049 00001D03 F605A3E3FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1050 00001D0A 0F8453F4FFFF        <1>     jz badArgError
  1051 00001D10 F60599E3FFFFFF      <1>     test byte [arg2Flg], -1
  1052 00001D17 0F8546F4FFFF        <1>     jnz badArgError         ;If this set, error
  1053 00001D1D 488D356AE4FFFF      <1>     lea rsi, cmdBuffer
  1054 00001D24 0FB60583E3FFFF      <1>     movzx eax, byte [arg1Off]
  1055 00001D2B 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1056 00001D2E 803E0D              <1>     cmp byte [rsi], CR
  1057 00001D31 0F842CF4FFFF        <1>     je badArgError
  1058 00001D37 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1059 00001D3B 750F                <1>     jne .noDrive
  1060 00001D3D 0FB6056BE3FFFF      <1>     movzx eax, byte [arg1FCBret]
  1061 00001D44 3CFF                <1>     cmp al, -1
  1062 00001D46 0F840EF4FFFF        <1>     je badDriveError
  1063                              <1> .noDrive:
  1064                              <1>     ;Now we open the provided file
  1065 00001D4C E86C070000          <1>     call copyArgumentToSearchSpec
  1066 00001D51 488D15C9E5FFFF      <1>     lea rdx, searchSpec
  1067 00001D58 B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1068 00001D5D CD41                <1>     int 41h
  1069 00001D5F 0F8207F4FFFF        <1>     jc badFileError
  1070 00001D65 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1071 00001D6C 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1072                              <1> .lp:
  1073 00001D6F B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1074 00001D74 B43F                <1>     mov ah, 3Fh ;Read handle
  1075 00001D76 CD41                <1>     int 41h
  1076 00001D78 89C1                <1>     mov ecx, eax
  1077 00001D7A 67E317              <1>     jecxz .exit
  1078 00001D7D 53                  <1>     push rbx    ;Save the original in handle
  1079 00001D7E BB01000000          <1>     mov ebx, 1  ;STDOUT
  1080 00001D83 B440                <1>     mov ah, 40h
  1081 00001D85 CD41                <1>     int 41h
  1082 00001D87 5B                  <1>     pop rbx ;Get back the original read handle
  1083 00001D88 720F                <1>     jc .exitBad
  1084 00001D8A 39C8                <1>     cmp eax, ecx
  1085 00001D8C 74E1                <1>     je .lp
  1086 00001D8E FFC9                <1>     dec ecx ;One less for a ^Z
  1087 00001D90 39C8                <1>     cmp eax, ecx
  1088 00001D92 7505                <1>     jne .exitBad
  1089                              <1> .exit:
  1090 00001D94 B43E                <1>     mov ah, 3Eh ;Close handle
  1091 00001D96 CD41                <1>     int 41h
  1092                              <1>     return
    19                              <2> %%_ret:
    20 00001D98 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1093                              <1> .exitBad:
  1094                              <1>     ;Print a disk error message... use a table to build the message but for
  1095                              <1>     ; now, just exit
  1096                              <1>     ;If it is a char device, don't print a error
  1097 00001D99 EBF9                <1>     jmp short .exit
  1098                              <1> 
  1099                              <1> exit:
  1100 00001D9B F60583E2FFFFFF      <1>     test byte [permaSwitch], -1
  1101                              <1>     retnz   ;Return if the flag is set
    51                              <2> cret nz
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001DA2 75(98)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
  1102 00001DA4 488B0564E2FFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1103 00001DAB 483DFFFFFFFF        <1>     cmp rax, -1
  1104                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001DB1 74(98)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
  1105 00001DB3 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1106                              <1> 
  1107 00001DB7 488B1568E2FFFF      <1>     mov rdx, qword [parentInt42]
  1108 00001DBE 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
  1109 00001DC2 B842250000          <1>     mov eax, 2542h
  1110 00001DC7 CD41                <1>     int 41h
  1111                              <1> 
  1112 00001DC9 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1113 00001DCE CD41                <1>     int 41h
  1114                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    19                              <2> %%_ret:
    20 00001DD0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1115                              <1> 
  1116                              <1> launchChild:
  1117                              <1> ;We run EXEC on this and the child task will return via applicationReturn
  1118                              <1> ;Here we must search the CWD or all path componants before failing
  1119                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
  1120 00001DD1 488D15EBE2FFFF      <1>     lea rdx, cmdFFBlock
  1121 00001DD8 B41A                <1>     mov ah, 1Ah     ;Set DTA for task
  1122 00001DDA CD41                <1>     int 41h
  1123                              <1> 
  1124 00001DDC 8B05DAE2FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
  1125 00001DE2 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1126 00001DE7 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1127 00001DEC 3D20202020          <1>     cmp eax, "    " ;Only if we have four spaces do we proceed here
  1128 00001DF1 741D                <1>     je .noExt
  1129 00001DF3 E818F2FFFF          <1>     call checkExtensionExec ;ZF=ZE => Executable
  1130 00001DF8 0F8510010000        <1>     jnz .dfltErrExit
  1131                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1132 00001DFE 0F820A010000        <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
  1133                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1134                              <1>     ;So it is a com or exe that we are searching for for now
  1135 00001E04 488D3D03E4FFFF      <1>     lea rdi, cmdPathSpec
  1136 00001E0B 4889FA              <1>     mov rdx, rdi
  1137 00001E0E EB24                <1>     jmp short .search
  1138                              <1> .noExt:
  1139                              <1>     ;If the filename has no extension, append a .*
  1140                              <1>     ;Use bl as flags. bl[0] => COM found, bl[1] => EXE found, bl[2] => BAT found
  1141 00001E10 31DB                <1>     xor ebx, ebx
  1142 00001E12 488D3DF5E3FFFF      <1>     lea rdi, cmdPathSpec
  1143 00001E19 4889FA              <1>     mov rdx, rdi
  1144 00001E1C 31C0                <1>     xor eax, eax
  1145 00001E1E B9FFFFFFFF          <1>     mov ecx, -1
  1146 00001E23 F2AE                <1>     repne scasb
  1147 00001E25 48FFCF              <1>     dec rdi ;Point to the terminating null
  1148 00001E28 4889FD              <1>     mov rbp, rdi    ;Temporarily store the ptr to the . in rbp
  1149 00001E2B 66B82E2A            <1>     mov ax, ".*"
  1150 00001E2F 66AB                <1>     stosw
  1151 00001E31 30C0                <1>     xor al, al  ;Store terminating null
  1152 00001E33 AA                  <1>     stosb
  1153                              <1> .search:
  1154 00001E34 B906000000          <1>     mov ecx, dirIncFiles
  1155 00001E39 B44E                <1>     mov ah, 4Eh ;Find First File
  1156 00001E3B CD41                <1>     int 41h
  1157 00001E3D 0F82CB000000        <1>     jc .dfltErrExit
  1158 00001E43 E879000000          <1>     call .noExtCheckExt
  1159                              <1> .moreSearch:
  1160 00001E48 B44F                <1>     mov ah, 4Fh
  1161 00001E4A CD41                <1>     int 41h
  1162 00001E4C 7207                <1>     jc .noMoreFiles
  1163 00001E4E E86E000000          <1>     call .noExtCheckExt
  1164 00001E53 EBF3                <1>     jmp short .moreSearch
  1165                              <1> .noMoreFiles:
  1166 00001E55 85DB                <1>     test ebx, ebx
  1167 00001E57 0F84B1000000        <1>     jz .dfltErrExit
  1168                              <1> ;So we have a valid executable
  1169 00001E5D 4889EF              <1>     mov rdi, rbp    ;Get back ptr to the .*,0
  1170 00001E60 F7C301000000        <1>     test ebx, 1
  1171 00001E66 7407                <1>     jz .launchexebat
  1172 00001E68 B82E434F4D          <1>     mov eax, ".COM"
  1173 00001E6D EB14                <1>     jmp short .launch
  1174                              <1> .launchexebat:
  1175 00001E6F F7C302000000        <1>     test ebx, 2
  1176 00001E75 7407                <1>     jz .launchbat
  1177 00001E77 B82E455845          <1>     mov eax, ".EXE"
  1178 00001E7C EB05                <1>     jmp short .launch
  1179                              <1> .launchbat:
  1180                              <1> ;Temporary For BAT
  1181 00001E7E E98B000000          <1>     jmp .dfltErrExit
  1182                              <1> .launch:
  1183 00001E83 AB                  <1>     stosd
  1184 00001E84 30C0                <1>     xor al, al
  1185 00001E86 AA                  <1>     stosb   ;Store the terminating null
  1186 00001E87 488D1D60E2FFFF      <1>     lea rbx, launchBlock
  1187 00001E8E 31C0                <1>     xor eax, eax
  1188 00001E90 488903              <1>     mov qword [rbx + execProg.pEnv], rax    ;Tell DOS to copy my current Env
  1189 00001E93 498D8080000000      <1>     lea rax, qword [r8 + cmdLineCnt]
  1190 00001E9A 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1191 00001E9E 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1192 00001EA2 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1193 00001EA6 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1194 00001EAA 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1195 00001EAE 488D1559E3FFFF      <1>     lea rdx, cmdPathSpec
  1196 00001EB5 B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1197 00001EBA CD41                <1>     int 41h
  1198 00001EBC E94D000000          <1>     jmp .dfltErrExit    ;If something goes wrong, error out
  1199                              <1> .noExtCheckExt:
  1200                              <1>     ;mov eax, dword [cmdFFBlock + ffBlock.asciizName + filename.fExt]
  1201 00001EC1 488D3519E2FFFF      <1>     lea rsi, dword [cmdFFBlock + ffBlock.asciizName]
  1202 00001EC8 488D3D8EE3FFFF      <1>     lea rdi, fcbCmdSpec
  1203 00001ECF E8DC030000          <1>     call asciiFilenameToFCB
  1204 00001ED4 8B058BE3FFFF        <1>     mov eax, dword [fcbCmdSpec + filename.fExt]
  1205 00001EDA 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1206 00001EDF 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1207 00001EE4 3D434F4D20          <1>     cmp eax, "COM "
  1208 00001EE9 7507                <1>     jne .neceexe
  1209 00001EEB 81CB01000000        <1>     or ebx, 1
  1210                              <1>     return
    19                              <2> %%_ret:
    20 00001EF1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1211                              <1> .neceexe:
  1212 00001EF2 3D45584520          <1>     cmp eax, "EXE "
  1213 00001EF7 7507                <1>     jne .necebat
  1214 00001EF9 81CB02000000        <1>     or ebx, 2
  1215                              <1>     return
    19                              <2> %%_ret:
    20 00001EFF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1216                              <1> .necebat:
  1217 00001F00 3D42415420          <1>     cmp eax, "BAT "
  1218                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001F05 75(FF)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
  1219 00001F07 81CB04000000        <1>     or ebx, 4
  1220                              <1>     return
    19                              <2> %%_ret:
    20 00001F0D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1221                              <1> 
  1222                              <1> .dfltErrExit:
  1223 00001F0E 488D15BCE7FFFF      <1>     lea rdx, badCmd
  1224 00001F15 B409                <1>     mov ah, 09h
  1225 00001F17 CD41                <1>     int 41h
  1226                              <1>     return
    19                              <2> %%_ret:
    20 00001F19 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    17                                  %include "./Source/Utils/COMMAND/Source/cmdUtils.asm"
    18                              <1> ;Misc functions and subroutines for command.com
    19                              <1> 
    20                              <1> printCRLF:
    21 00001F1A 488D1553E7FFFF      <1>     lea rdx, crlf
    22 00001F21 BB02000000          <1>     mov ebx, 2
    23 00001F26 B440                <1>     mov ah, 40h ;Print a new line
    24 00001F28 B902000000          <1>     mov ecx, 2  ;Two chars to write
    25 00001F2D CD41                <1>     int 41h
    26                              <1>     return
    19                              <2> %%_ret:
    20 00001F2F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    27                              <1> printDate:
    28                              <1> ;Input: eax = Packed Date
    29                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
    30                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
    31                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
    32                              <1> ;       ebx = 0 => Print two digit year
    33                              <1> ;       ebx = 1 => Print four digit year
    34 00001F30 53                  <1>     push rbx
    35 00001F31 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    36 00001F33 803DF4E0FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    37 00001F3A 7240                <1>     jb .usDate
    38 00001F3C 777C                <1>     ja .jpnDate
    39                              <1> ;European: DD/MM/YY
    40 00001F3E 251F000000          <1>     and eax, 1Fh    ;Save day bits
    41 00001F43 E8B0000000          <1>     call .printFirst
    42 00001F48 8A15EBE0FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    43 00001F4E B402                <1>     mov ah, 02h
    44 00001F50 CD41                <1>     int 41h
    45                              <1> 
    46 00001F52 89C8                <1>     mov eax, ecx
    47 00001F54 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    48 00001F59 C1E805              <1>     shr eax, 5
    49 00001F5C E8B3000000          <1>     call .printSecond
    50                              <1> 
    51 00001F61 8A15D2E0FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    52 00001F67 B402                <1>     mov ah, 02h
    53 00001F69 CD41                <1>     int 41h
    54                              <1> 
    55 00001F6B 89C8                <1>     mov eax, ecx
    56 00001F6D 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    57 00001F72 C1E809              <1>     shr eax, 9
    58 00001F75 5B                  <1>     pop rbx ;Get the year signature back
    59 00001F76 E8A9000000          <1>     call .printYear
    60                              <1>     return
    19                              <2> %%_ret:
    20 00001F7B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    61                              <1> .usDate:
    62                              <1> ;US: MM/DD/YY
    63 00001F7C 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    64 00001F81 C1E805              <1>     shr eax, 5
    65 00001F84 E86F000000          <1>     call .printFirst
    66                              <1> 
    67 00001F89 8A15AAE0FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    68 00001F8F B402                <1>     mov ah, 02h
    69 00001F91 CD41                <1>     int 41h
    70                              <1> 
    71 00001F93 89C8                <1>     mov eax, ecx
    72 00001F95 251F000000          <1>     and eax, 1Fh    ;Save day bits
    73 00001F9A E875000000          <1>     call .printSecond
    74                              <1> 
    75 00001F9F 8A1594E0FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    76 00001FA5 B402                <1>     mov ah, 02h
    77 00001FA7 CD41                <1>     int 41h
    78                              <1> 
    79 00001FA9 89C8                <1>     mov eax, ecx
    80 00001FAB 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    81 00001FB0 C1E809              <1>     shr eax, 9
    82 00001FB3 5B                  <1>     pop rbx ;Get the year signature back
    83 00001FB4 E86B000000          <1>     call .printYear
    84                              <1>     return
    19                              <2> %%_ret:
    20 00001FB9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    85                              <1> .jpnDate:
    86                              <1> ;Japan: YY/MM/DD
    87 00001FBA 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    88 00001FBF C1E809              <1>     shr eax, 9
    89 00001FC2 5B                  <1>     pop rbx ;Get the year signature back
    90 00001FC3 E85C000000          <1>     call .printYear
    91                              <1> 
    92 00001FC8 8A156BE0FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    93 00001FCE B402                <1>     mov ah, 02h
    94 00001FD0 CD41                <1>     int 41h
    95                              <1> 
    96 00001FD2 89C8                <1>     mov eax, ecx
    97 00001FD4 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    98 00001FD9 C1E805              <1>     shr eax, 5
    99 00001FDC E833000000          <1>     call .printSecond
   100                              <1> 
   101 00001FE1 8A1552E0FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
   102 00001FE7 B402                <1>     mov ah, 02h
   103 00001FE9 CD41                <1>     int 41h
   104                              <1> 
   105 00001FEB 89C8                <1>     mov eax, ecx
   106 00001FED 251F000000          <1>     and eax, 1Fh    ;Save day bits
   107 00001FF2 E81D000000          <1>     call .printSecond
   108                              <1>     return
    19                              <2> %%_ret:
    20 00001FF7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   109                              <1> 
   110                              <1> ;Each of these require eax setup correctly
   111                              <1> .printFirst:
   112 00001FF8 51                  <1>     push rcx
   113 00001FF9 E84B040000          <1>     call getDecimalWord
   114 00001FFE 84ED                <1>     test ch, ch ;Do we have an upper digit?
   115 00002000 7504                <1>     jnz .skipSpace
   116 00002002 88CD                <1>     mov ch, cl
   117 00002004 B120                <1>     mov cl, " "
   118                              <1> .skipSpace:
   119 00002006 88CA                <1>     mov dl, cl
   120 00002008 B402                <1>     mov ah, 02h
   121 0000200A CD41                <1>     int 41h
   122 0000200C 88EA                <1>     mov dl, ch
   123 0000200E B402                <1>     mov ah, 02h
   124 00002010 CD41                <1>     int 41h
   125 00002012 59                  <1>     pop rcx
   126                              <1>     return
    19                              <2> %%_ret:
    20 00002013 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   127                              <1> .printSecond:
   128 00002014 51                  <1>     push rcx
   129 00002015 E82F040000          <1>     call getDecimalWord
   130 0000201A 84ED                <1>     test ch, ch ;Do we have an upper digit?
   131 0000201C 75E8                <1>     jnz .skipSpace
   132 0000201E 88CD                <1>     mov ch, cl
   133 00002020 B130                <1>     mov cl, "0"
   134 00002022 EBE2                <1>     jmp short .skipSpace
   135                              <1> .printYear:
   136 00002024 05BC070000          <1>     add eax, 1980
   137 00002029 51                  <1>     push rcx
   138 0000202A 53                  <1>     push rbx
   139 0000202B E819040000          <1>     call getDecimalWord ;Get unpacked in rcx
   140 00002030 5B                  <1>     pop rbx
   141 00002031 84DB                <1>     test bl, bl
   142 00002033 740C                <1>     jz .twoDigitYear
   143 00002035 88CA                <1>     mov dl, cl  ;Print the first digit
   144 00002037 B402                <1>     mov ah, 02h
   145 00002039 CD41                <1>     int 41h
   146 0000203B 88EA                <1>     mov dl, ch  ;Print the second digit
   147 0000203D B402                <1>     mov ah, 02h
   148 0000203F CD41                <1>     int 41h
   149                              <1> .twoDigitYear:
   150 00002041 C1E910              <1>     shr ecx, 10h    ;Get high word low
   151 00002044 88CA                <1>     mov dl, cl  ;Print the upper digit
   152 00002046 B402                <1>     mov ah, 02h
   153 00002048 CD41                <1>     int 41h
   154 0000204A 88EA                <1>     mov dl, ch  ;Print the lower digit
   155 0000204C B402                <1>     mov ah, 02h
   156 0000204E CD41                <1>     int 41h
   157 00002050 59                  <1>     pop rcx
   158                              <1>     return
    19                              <2> %%_ret:
    20 00002051 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   159                              <1> 
   160                              <1> 
   161                              <1> printTime:
   162                              <1> ;Input: eax = Packed Time
   163                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   164                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   165 00002052 89C1                <1>     mov ecx, eax
   166 00002054 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   167 00002059 C1E80B              <1>     shr eax, 11
   168 0000205C 803DDCDFFFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   169 00002063 750B                <1>     jne .ampm
   170 00002065 E85A000000          <1>     call .printHours
   171 0000206A E831000000          <1>     call .printMinutes
   172                              <1>     return
    19                              <2> %%_ret:
    20 0000206F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   173                              <1> .ampm:
   174 00002070 3D0C000000          <1>     cmp eax, 12
   175 00002075 7713                <1>     ja .pm
   176 00002077 7416                <1>     je .pm2
   177 00002079 E846000000          <1>     call .printHours
   178 0000207E E81D000000          <1>     call .printMinutes
   179 00002083 B261                <1>     mov dl, "a"
   180 00002085 B402                <1>     mov ah, 02h
   181 00002087 CD41                <1>     int 41h
   182                              <1>     return
    19                              <2> %%_ret:
    20 00002089 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   183                              <1> .pm:
   184 0000208A 2D0C000000          <1>     sub eax, 12
   185                              <1> .pm2:
   186 0000208F E830000000          <1>     call .printHours
   187 00002094 E807000000          <1>     call .printMinutes
   188 00002099 B270                <1>     mov dl, "p"
   189 0000209B B402                <1>     mov ah, 02h
   190 0000209D CD41                <1>     int 41h
   191                              <1>     return
    19                              <2> %%_ret:
    20 0000209F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   192                              <1> .printMinutes:
   193 000020A0 8A1595DFFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   194 000020A6 B402                <1>     mov ah, 02h
   195 000020A8 CD41                <1>     int 41h
   196                              <1> 
   197 000020AA 89C8                <1>     mov eax, ecx
   198 000020AC 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   199 000020B1 C1E805              <1>     shr eax, 5
   200                              <1> .printMinutesAlt:
   201 000020B4 51                  <1>     push rcx
   202 000020B5 E88F030000          <1>     call getDecimalWord
   203 000020BA 84ED                <1>     test ch, ch ;Do we have an upper digit?
   204 000020BC 7514                <1>     jnz .skipSpace
   205 000020BE 88CD                <1>     mov ch, cl
   206 000020C0 B130                <1>     mov cl, "0"
   207 000020C2 EB0E                <1>     jmp short .skipSpace
   208                              <1> .printHours:
   209 000020C4 51                  <1>     push rcx
   210 000020C5 E87F030000          <1>     call getDecimalWord
   211 000020CA 84ED                <1>     test ch, ch ;Do we have an upper digit?
   212 000020CC 7504                <1>     jnz .skipSpace
   213 000020CE 88CD                <1>     mov ch, cl
   214 000020D0 B120                <1>     mov cl, " "
   215                              <1> .skipSpace:
   216 000020D2 88CA                <1>     mov dl, cl
   217 000020D4 B402                <1>     mov ah, 02h
   218 000020D6 CD41                <1>     int 41h
   219 000020D8 88EA                <1>     mov dl, ch
   220 000020DA B402                <1>     mov ah, 02h
   221 000020DC CD41                <1>     int 41h
   222 000020DE 59                  <1>     pop rcx
   223                              <1>     return
    19                              <2> %%_ret:
    20 000020DF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   224                              <1> 
   225                              <1> 
   226                              <1> putVersionInPrompt:
   227 000020E0 488D1500E8FFFF      <1>     lea rdx, dosVer
   228 000020E7 B409                <1>     mov ah, 09h ;Print String
   229 000020E9 CD41                <1>     int 41h
   230 000020EB B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   231 000020ED CD41                <1>     int 41h
   232 000020EF 50                  <1>     push rax    ;Save minor version
   233 000020F0 E89C000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   234 000020F5 E8B4000000          <1>     call printPackedBCD ;Print al
   235 000020FA B22E                <1>     mov dl, "."
   236 000020FC B402                <1>     mov ah, 02h
   237 000020FE CD41                <1>     int 41h
   238 00002100 58                  <1>     pop rax
   239 00002101 88E0                <1>     mov al, ah  ;Get the minor version low
   240 00002103 E889000000          <1>     call hexToBCD
   241 00002108 E8A1000000          <1>     call printPackedBCD
   242                              <1>     return
    19                              <2> %%_ret:
    20 0000210D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   243                              <1> putEscInPrompt:
   244 0000210E B21B                <1>     mov dl, ESC
   245 00002110 EB1C                <1>     jmp short outChar
   246                              <1> 
   247                              <1> putMoneyInPrompt:
   248 00002112 B224                <1>     mov dl, "$"
   249 00002114 EB18                <1>     jmp short outChar
   250                              <1> 
   251                              <1> putEquInPrompt:
   252 00002116 B23D                <1>     mov dl, "="
   253 00002118 EB14                <1>     jmp short outChar
   254                              <1> 
   255                              <1> putPipeInPrompt:
   256 0000211A B27C                <1>     mov dl, "|"
   257 0000211C EB10                <1>     jmp short outChar
   258                              <1> 
   259                              <1> putGTinPrompt:
   260 0000211E B23E                <1>     mov dl, ">"
   261 00002120 EB0C                <1>     jmp short outChar
   262                              <1> 
   263                              <1> putLTinPrompt:
   264 00002122 B23C                <1>     mov dl, "<"
   265 00002124 EB08                <1>     jmp short outChar
   266                              <1> 
   267                              <1> putDriveInPrompt:
   268 00002126 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   269 00002128 CD41                <1>     int 41h
   270 0000212A 0441                <1>     add al, "A" ;Convert to letter
   271 0000212C 88C2                <1>     mov dl, al
   272                              <1> outChar:
   273 0000212E B402                <1>     mov ah, 02h ;Echo to STDOUT
   274 00002130 CD41                <1>     int 41h
   275                              <1>     return
    19                              <2> %%_ret:
    20 00002132 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   276                              <1> putCWDInPrompt:
   277 00002133 488D3D1ADFFFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   278 0000213A B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   279 0000213C CD41                <1>     int 41h
   280 0000213E 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   281 00002140 FEC2                <1>     inc dl
   282 00002142 0441                <1>     add al, "A" ;Convert to letter
   283 00002144 B43A                <1>     mov ah, ":"
   284 00002146 66AB                <1>     stosw   ;Store X:, rdi+=2
   285 00002148 8A05D5DEFFFF        <1>     mov al, byte [pathSep]
   286 0000214E AA                  <1>     stosb   ;Store pathSep, inc rdi
   287 0000214F B447                <1>     mov ah, 47h ;Get Current Working Directory
   288 00002151 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   289 00002154 CD41                <1>     int 41h
   290 00002156 E884000000          <1>     call strlen
   291 0000215B 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   292                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   293 00002161 B440                <1>     mov ah, 40h ;Write to handle
   294 00002163 BB01000000          <1>     mov ebx, 1  ;STDOUT
   295 00002168 488D15E5DEFFFF      <1>     lea rdx, currDirStr
   296 0000216F CD41                <1>     int 41h
   297                              <1>     return
    19                              <2> %%_ret:
    20 00002171 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   298                              <1> 
   299                              <1> BCDtoHex:
   300                              <1> ;Converts a BCD value to a Hex byte
   301                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   302 00002172 51                  <1>     push rcx
   303 00002173 0FB6C0              <1>     movzx eax, al   ;Zero extend
   304 00002176 89C1                <1>     mov ecx, eax    ;Save al in ecx
   305 00002178 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   306 0000217D 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   307 00002183 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   308                              <1> .bth:
   309 00002186 050A000000          <1>     add eax, 10
   310 0000218B FFC9                <1>     dec ecx
   311 0000218D 75F7                <1>     jnz .bth
   312 0000218F 59                  <1>     pop rcx
   313 00002190 C3                  <1>     ret
   314                              <1> 
   315                              <1> hexToBCD:
   316                              <1> ;Converts a Hex byte into two BCD digits
   317                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   318 00002191 51                  <1>     push rcx
   319 00002192 0FB6C0              <1>     movzx eax, al   ;Zero extend
   320 00002195 31C9                <1>     xor ecx, ecx
   321                              <1> .htb0:
   322 00002197 3D0A000000          <1>     cmp eax, 10
   323 0000219C 7209                <1>     jb .htb1
   324 0000219E 2D0A000000          <1>     sub eax, 10
   325 000021A3 FFC1                <1>     inc ecx
   326 000021A5 EBF0                <1>     jmp short .htb0
   327                              <1> .htb1:
   328 000021A7 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   329 000021AA 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   330 000021AC 59                  <1>     pop rcx
   331 000021AD C3                  <1>     ret
   332                              <1> 
   333                              <1> printPackedBCD:
   334                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   335                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   336                              <1> ;Preserves all registers
   337 000021AE 50                  <1>     push rax
   338 000021AF 52                  <1>     push rdx
   339 000021B0 88C4                <1>     mov ah, al
   340 000021B2 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   341 000021B4 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   342 000021B7 7508                <1>     jnz .upperNybble
   343 000021B9 B220                <1>     mov dl, " "
   344 000021BB B402                <1>     mov ah, 02h
   345 000021BD CD41                <1>     int 41h
   346 000021BF EB0E                <1>     jmp short .lowerNybble
   347                              <1> .upperNybble:
   348 000021C1 50                  <1>     push rax
   349 000021C2 C0EC04              <1>     shr ah, 4
   350 000021C5 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   351 000021C8 88E2                <1>     mov dl, ah
   352 000021CA B402                <1>     mov ah, 02h ;Print DL
   353 000021CC CD41                <1>     int 41h
   354 000021CE 58                  <1>     pop rax
   355                              <1> .lowerNybble:
   356 000021CF 0430                <1>     add al, "0"
   357 000021D1 88C2                <1>     mov dl, al
   358 000021D3 B402                <1>     mov ah, 02h ;Print DL
   359 000021D5 CD41                <1>     int 41h
   360 000021D7 5A                  <1>     pop rdx
   361 000021D8 58                  <1>     pop rax
   362                              <1>     return
    19                              <2> %%_ret:
    20 000021D9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   363                              <1> 
   364                              <1> getCurrentDrive:
   365                              <1> ;Returns the 0 based current drive in al
   366 000021DA B419                <1>     mov ah, 19h
   367 000021DC CD41                <1>     int 41h
   368                              <1>     return
    19                              <2> %%_ret:
    20 000021DE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   369                              <1> 
   370                              <1> strlen:
   371                              <1> ;Gets the length of a ASCIIZ string
   372                              <1> ;Input: rdi = Source buffer
   373                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   374 000021DF 50                  <1>     push rax
   375 000021E0 57                  <1>     push rdi
   376 000021E1 30C0                <1>     xor al, al
   377 000021E3 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   378 000021E5 FFC9                <1>     dec ecx ;rcx = -1
   379 000021E7 F2AE                <1>     repne scasb
   380 000021E9 F7D1                <1>     not ecx
   381 000021EB 5F                  <1>     pop rdi
   382 000021EC 58                  <1>     pop rax
   383                              <1>     return
    19                              <2> %%_ret:
    20 000021ED C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   384                              <1> 
   385                              <1> findTerminatorOrEOC:
   386                              <1> ;Advances rsi to the next string terminator char or the next End of command
   387                              <1> ; char
   388                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   389                              <1> ;If a end of command char found, also sets CF
   390 000021EE AC                  <1>     lodsb
   391 000021EF 3C0D                <1>     cmp al, CR
   392 000021F1 7419                <1>     je .endOfInput
   393 000021F3 E82B000000          <1>     call isALterminator
   394 000021F8 7419                <1>     jz .exit
   395 000021FA 3A0523DEFFFF        <1>     cmp al, byte [pathSep]
   396 00002200 7411                <1>     je .exit
   397 00002202 3A051CDEFFFF        <1>     cmp al, byte [switchChar]
   398 00002208 7409                <1>     je .exit
   399 0000220A EBE2                <1>     jmp short findTerminatorOrEOC
   400                              <1> .endOfInput:
   401 0000220C E802000000          <1>     call .exit
   402 00002211 F9                  <1>     stc 
   403                              <1>     return
    19                              <2> %%_ret:
    20 00002212 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   404                              <1> .exit:
   405 00002213 48FFCE              <1>     dec rsi ;Point to the terminating char
   406                              <1>     return
    19                              <2> %%_ret:
    20 00002216 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   407                              <1> 
   408                              <1> findTerminator:
   409                              <1> ;Advances rsi to the next string terminator char
   410                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   411 00002217 AC                  <1>     lodsb
   412 00002218 E806000000          <1>     call isALterminator
   413 0000221D 75F8                <1>     jnz findTerminator
   414 0000221F 48FFCE              <1>     dec rsi
   415                              <1>     return
    19                              <2> %%_ret:
    20 00002222 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   416                              <1> isALterminator:
   417                              <1> ;Returns: ZF=NZ if al is not a terminator (Not including CR)
   418                              <1> ;         ZF=ZY if al is a terminator
   419 00002223 3C20                <1>     cmp al, " "
   420                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002225 74(22)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   421 00002227 3C3B                <1>     cmp al, ";"
   422                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002229 74(22)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   423 0000222B 3C3D                <1>     cmp al, "="
   424                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000222D 74(22)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   425 0000222F 3C2C                <1>     cmp al, ","
   426                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002231 74(22)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   427 00002233 3C09                <1>     cmp al, TAB
   428                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002235 74(22)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   429 00002237 3C0A                <1>     cmp al, LF
   430                              <1>     return
    19                              <2> %%_ret:
    20 00002239 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   431                              <1> 
   432                              <1> findEndOfCommand:
   433                              <1> ;Moves rsi to the | or CR that terminates this command
   434 0000223A AC                  <1>     lodsb
   435 0000223B E806000000          <1>     call isALEndOfCommand
   436 00002240 75F8                <1>     jnz findEndOfCommand
   437 00002242 48FFCE              <1>     dec rsi
   438                              <1>     return
    19                              <2> %%_ret:
    20 00002245 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   439                              <1> isALEndOfCommand:
   440 00002246 3C7C                <1>     cmp al, "|"
   441                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002248 74(45)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   442 0000224A 3C0D                <1>     cmp al, CR
   443                              <1>     return
    19                              <2> %%_ret:
    20 0000224C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   444                              <1> 
   445                              <1> scanForRedir:
   446                              <1> ;Returns: AL = 0 => No redirection, terminate with CR
   447                              <1> ;         AL = 1 => Redirection, type <
   448                              <1> ;         AL = 10 => Redir, type >
   449                              <1> ;         AL = 20 => Redir, type >>
   450                              <1> ;If multiple redirs found, the last one of that type counts.
   451 0000224D 56                  <1>     push rsi
   452 0000224E 55                  <1>     push rbp
   453 0000224F 30E4                <1>     xor ah, ah
   454                              <1> .lp:
   455 00002251 AC                  <1>     lodsb
   456 00002252 3C3E                <1>     cmp al, ">"
   457                              <1> .exit:
   458 00002254 5D                  <1>     pop rbp
   459 00002255 5E                  <1>     pop rsi
   460                              <1>     return
    19                              <2> %%_ret:
    20 00002256 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   461                              <1> 
   462                              <1> 
   463                              <1> skipSpaces:
   464                              <1> ;Also skips tabs
   465                              <1> ;Input: rsi must point to the start of the data string
   466                              <1> ;Output: rsi points to the first non-space char
   467 00002257 803E20              <1>     cmp byte [rsi], " "
   468 0000225A 7405                <1>     je .skip    ;If equal to a space, skip it
   469 0000225C 803E09              <1>     cmp byte [rsi], TAB
   470                              <1>     retne   ;If not equal to a tab or space, return
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000225F 75(56)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   471                              <1> .skip:
   472 00002261 48FFC6              <1>     inc rsi
   473 00002264 EBF1                <1>     jmp short skipSpaces
   474                              <1> 
   475                              <1> printPrompt:
   476 00002266 66813DB2DDFFFFFFFF  <1>     cmp word [promptPtr], -1
   477 0000226F 750B                <1>     jne .validPrompt
   478                              <1>     ;Here we print the default prompt
   479 00002271 E8BDFEFFFF          <1>     call putCWDInPrompt
   480 00002276 E8A3FEFFFF          <1>     call putGTinPrompt
   481                              <1>     return
    19                              <2> %%_ret:
    20 0000227B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   482                              <1> .validPrompt:
   483                              <1>     return
    19                              <2> %%_ret:
    20 0000227C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   484                              <1> 
   485                              <1> clearCommandState:
   486                              <1> ;Clears the command state
   487 0000227D 488D3D25DEFFFF      <1>     lea rdi, cmdStatePtr
   488 00002284 B90A000000          <1>     mov ecx, cmdStateL
   489 00002289 31C0                <1>     xor eax, eax
   490 0000228B F3AA                <1>     rep stosb
   491                              <1>     return
    19                              <2> %%_ret:
    20 0000228D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   492                              <1> 
   493                              <1> clearCommandLineState:
   494                              <1> ;Clears the command line state after a 0Dh encountered
   495 0000228E 488D3D02DEFFFF      <1>     lea rdi, cmdLineStatePtr
   496 00002295 B91C000000          <1>     mov ecx, cmdLineStateL
   497 0000229A 31C0                <1>     xor eax, eax
   498 0000229C F3AA                <1>     rep stosb
   499                              <1>     return
    19                              <2> %%_ret:
    20 0000229E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   500                              <1> 
   501                              <1> asciiToFCB:
   502                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   503                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   504                              <1> ;Also doesn't check if chars are valid
   505                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   506                              <1> ;Name is space padded.
   507                              <1> ;Input: rsi = ASCII string buffer
   508                              <1> ;       rdi = FCB name buffer
   509                              <1> ;Output: al = Char that terminated the source string 
   510 0000229F 53                  <1>     push rbx    
   511 000022A0 57                  <1>     push rdi
   512 000022A1 B90B000000          <1>     mov ecx, 11
   513 000022A6 B020                <1>     mov al, " "
   514 000022A8 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   515 000022AA 5F                  <1>     pop rdi
   516 000022AB 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   517 000022AE EB1D                <1>     jmp short asciiFilenameToFCB.processName
   518                              <1> asciiFilenameToFCB:
   519                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   520                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   521                              <1> ;Also doesn't check if chars are valid
   522                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   523                              <1> ;Name is space padded.
   524                              <1> ;Input: rsi = ASCII string buffer
   525                              <1> ;       rdi = FCB name buffer
   526                              <1> ;Output: al = Char that terminated the source string 
   527 000022B0 53                  <1>     push rbx    
   528 000022B1 57                  <1>     push rdi
   529 000022B2 B90B000000          <1>     mov ecx, 11
   530 000022B7 B020                <1>     mov al, " "
   531 000022B9 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   532 000022BB 5F                  <1>     pop rdi
   533 000022BC 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   534                              <1>     ;Preprocess for Dir Searches
   535 000022BF 803E2E              <1>     cmp byte [rsi], "."
   536 000022C2 7509                <1>     jne .processName
   537 000022C4 A4                  <1>     movsb   ;Store the first dot
   538 000022C5 803E2E              <1>     cmp byte [rsi], "."
   539 000022C8 752C                <1>     jne .exitBadChar
   540 000022CA A4                  <1>     movsb
   541 000022CB EB29                <1>     jmp short .exitBadChar
   542                              <1> .processName:
   543 000022CD AC                  <1>     lodsb   ;Get the char in al
   544 000022CE 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   545 000022D0 7426                <1>     jz .exit
   546 000022D2 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   547 000022D4 7407                <1>     je .extSpace
   548 000022D6 3C2E                <1>     cmp al, "."
   549 000022D8 740C                <1>     je .ext
   550 000022DA AA                  <1>     stosb   ;Store the char
   551 000022DB EBF0                <1>     jmp short .processName
   552                              <1> .extSpace:
   553                              <1> ;Now we scan for a period in the name
   554 000022DD AC                  <1>     lodsb   ;Get a char and increase rsi
   555 000022DE 84C0                <1>     test al, al
   556 000022E0 7416                <1>     jz .exit
   557 000022E2 3C2E                <1>     cmp al, "."     ;If al is not a period...
   558 000022E4 75F7                <1>     jne .extSpace   ; keep searching
   559                              <1> .ext:
   560 000022E6 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   561                              <1> .processExt:
   562 000022EA AC                  <1>     lodsb
   563 000022EB 84C0                <1>     test al, al
   564 000022ED 7409                <1>     jz .exit
   565 000022EF 3C20                <1>     cmp al, " "
   566 000022F1 7405                <1>     je .exit
   567 000022F3 AA                  <1>     stosb
   568 000022F4 EBF4                <1>     jmp short .processExt
   569                              <1> .exitBadChar:
   570 000022F6 30C0                <1>     xor al, al  ;Return a null terminator
   571                              <1> .exit:
   572 000022F8 5B                  <1>     pop rbx
   573                              <1>     return
    19                              <2> %%_ret:
    20 000022F9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   574                              <1> 
   575                              <1> FCBToAsciiz:
   576                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   577                              <1> ;Name is space padded too
   578                              <1> ;Input: rsi = FCB name buffer
   579                              <1> ;       rdi = ASCIIZ string buffer
   580 000022FA B908000000          <1>     mov ecx, 8
   581 000022FF F3A4                <1>     rep movsb   ;Move the name over
   582                              <1> .scanNameSpace:
   583 00002301 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   584 00002305 750D                <1>     jne .ext
   585 00002307 48FFCF              <1>     dec rdi
   586 0000230A FFC1                <1>     inc ecx
   587 0000230C 81F908000000        <1>     cmp ecx, 8
   588 00002312 72ED                <1>     jb .scanNameSpace
   589                              <1> .ext:
   590 00002314 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   591 00002319 7506                <1>     jne .validExt
   592 0000231B 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   593 0000231F 7415                <1>     je .exit
   594                              <1> .validExt:
   595 00002321 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   596 00002323 AA                  <1>     stosb
   597 00002324 B903000000          <1>     mov ecx, 3
   598 00002329 F3A4                <1>     rep movsb   ;Move the three extension chars over
   599                              <1> .scanExtSpace:
   600 0000232B 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   601 0000232F 7505                <1>     jne .exit
   602 00002331 48FFCF              <1>     dec rdi
   603 00002334 EBF5                <1>     jmp short .scanExtSpace
   604                              <1> .exit:
   605 00002336 31C0                <1>     xor eax, eax
   606 00002338 AA                  <1>     stosb   ;Store a null at the end
   607                              <1>     return
    19                              <2> %%_ret:
    20 00002339 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   608                              <1> 
   609                              <1> buildCommandPath:
   610                              <1> ;Based on the first argument on the command line
   611                              <1> ; will build a full ASCIIZ path in searchSpec to the file/dir specified
   612                              <1>     ;If this is a relative path, will handle correctly (tho unnecessary)
   613 0000233A 0FB6056DDDFFFF      <1>     movzx eax, byte [arg1Off]
   614 00002341 488D3546DEFFFF      <1>     lea rsi, cmdBuffer
   615 00002348 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   616 0000234B 8A3DD2DCFFFF        <1>     mov bh, byte [pathSep]
   617 00002351 B33A                <1>     mov bl, ":"
   618 00002353 383E                <1>     cmp byte [rsi], bh  ;Is the first char relative to root?
   619 00002355 7458                <1>     je .absoluteCurrent
   620 00002357 66395E01            <1>     cmp word [rsi + 1], bx    ;This checks if absolute or relative
   621 0000235B 746D                <1>     je .absolutePath
   622 0000235D 385E01              <1>     cmp byte [rsi + 1], bl  ;Check if a drive separator
   623 00002360 7409                <1>     je .relativeGiven
   624                              <1> ;No drive letter given, must get Current Drive
   625 00002362 E873FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   626 00002367 0441                <1>     add al, "A"
   627 00002369 EB0B                <1>     jmp short .relativeCommon
   628                              <1> .relativeGiven:
   629                              <1> ;Drive letter pointed to by AL
   630 0000236B 8A06                <1>     mov al, byte [rsi]  ;Get drive letter in al
   631 0000236D 24DF                <1>     and al, 0DFh    ;Convert to UC
   632 0000236F 4881C602000000      <1>     add rsi, 2  ;Skip the given drive letter and the colon
   633                              <1> .relativeCommon:
   634                              <1>     ;al has drive letter
   635 00002376 88C2                <1>     mov dl, al  ;Save drive letter in dl
   636 00002378 80EA40              <1>     sub dl, "@" ;Get 1 based drive number in dl
   637 0000237B B43A                <1>     mov ah, ":" ;Get the colon in too
   638 0000237D 488D3D9DDFFFFF      <1>     lea rdi, searchSpec ;Start building our search path here
   639 00002384 66AB                <1>     stosw   ;Store X:
   640 00002386 8A0597DCFFFF        <1>     mov al, byte [pathSep]
   641 0000238C AA                  <1>     stosb   ;Store pathSep
   642 0000238D 56                  <1>     push rsi    ;Save user input string
   643 0000238E 4889FE              <1>     mov rsi, rdi    ;Put the current directory here for this drive
   644 00002391 B447                <1>     mov ah, 47h ;Get Current Working Directory, dl has drive number
   645 00002393 CD41                <1>     int 41h ;Won't fail as drive letter in dl confirmed ok
   646 00002395 5E                  <1>     pop rsi
   647                              <1>     ;Now want to find terminating null
   648 00002396 30C0                <1>     xor al, al
   649 00002398 31C9                <1>     xor ecx, ecx
   650 0000239A FFC9                <1>     dec ecx
   651 0000239C F2AE                <1>     repne scasb ;Search for the terminating null
   652 0000239E 48FFCF              <1>     dec rdi ;Go back one once found
   653 000023A1 8A057CDCFFFF        <1>     mov al, byte [pathSep]
   654 000023A7 3847FF              <1>     cmp byte [rdi - 1], al
   655 000023AA 7425                <1>     je .buildPath ;If the previous char is a pathsep, skip storing another
   656 000023AC AA                  <1>     stosb   ;Store the pathsep
   657 000023AD EB22                <1>     jmp short .buildPath  ;Now we copy the user string over and good to go
   658                              <1> .absoluteCurrent:
   659 000023AF E826FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   660 000023B4 0441                <1>     add al, "A"
   661 000023B6 B43A                <1>     mov ah, ":" ;ax has X: now to store 
   662 000023B8 488D3D62DFFFFF      <1>     lea rdi, searchSpec
   663 000023BF 66AB                <1>     stosw
   664 000023C1 8A055CDCFFFF        <1>     mov al, byte [pathSep]
   665 000023C7 AA                  <1>     stosb
   666 000023C8 EB07                <1>     jmp short .buildPath
   667                              <1> .absolutePath:
   668 000023CA 488D3D50DFFFFF      <1>     lea rdi, searchSpec
   669                              <1> .buildPath:
   670 000023D1 E8FDECFFFF          <1>     call copyCommandTailItem    ;Terminates with a 0 for free
   671 000023D6 F8                  <1>     clc ;I dont care if i encounter an embedded CR rn
   672                              <1>     return
    19                              <2> %%_ret:
    20 000023D7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   673                              <1>     
   674                              <1> printDecimalWord:
   675                              <1> ;Takes qword in rax and print it's decimal representation
   676                              <1> ;Takes the qword in eax and prints its decimal representation
   677 000023D8 31C9                <1>     xor ecx, ecx
   678 000023DA 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   679 000023DC 85C0                <1>     test eax, eax
   680 000023DE 750C                <1>     jnz .notZero
   681 000023E0 B930000000          <1>     mov ecx, "0"
   682 000023E5 BD01000000          <1>     mov ebp, 1  ;Print one digit
   683 000023EA EB3E                <1>     jmp short .dpfb2
   684                              <1> .notZero:
   685 000023EC 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   686 000023EE BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   687                              <1> .dpfb0:
   688 000023F3 FFC5                <1>     inc ebp
   689 000023F5 81FD08000000        <1>     cmp ebp, 8
   690 000023FB 7206                <1>     jb .dpfb00
   691 000023FD 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   692 00002401 EB04                <1>     jmp short .dpfb01
   693                              <1> .dpfb00:
   694 00002403 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   695                              <1> .dpfb01:
   696 00002407 31D2                <1>     xor edx, edx
   697 00002409 48F7F6              <1>     div rsi
   698 0000240C 80C230              <1>     add dl, '0'
   699 0000240F 80FA39              <1>     cmp dl, '9'
   700 00002412 7603                <1>     jbe .dpfb1
   701 00002414 80C207              <1>     add dl, 'A'-'0'-10
   702                              <1> .dpfb1:
   703 00002417 81FD08000000        <1>     cmp ebp, 8
   704 0000241D 7204                <1>     jb .dpfb10
   705 0000241F 88D3                <1>     mov bl, dl ;Add the bottom bits
   706 00002421 EB02                <1>     jmp short .dpfb11
   707                              <1> .dpfb10:
   708 00002423 88D1                <1>     mov cl, dl    ;Save remainder byte
   709                              <1> .dpfb11:
   710 00002425 4885C0              <1>     test rax, rax
   711 00002428 75C9                <1>     jnz .dpfb0
   712                              <1> .dpfb2:
   713 0000242A 81FD08000000        <1>     cmp ebp, 8
   714 00002430 7208                <1>     jb .dpfb20
   715 00002432 88DA                <1>     mov dl, bl
   716 00002434 48C1EB08            <1>     shr rbx, 8
   717 00002438 EB06                <1>     jmp short .dpfb21
   718                              <1> .dpfb20:
   719 0000243A 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   720 0000243C 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   721                              <1> .dpfb21:
   722 00002440 B402                <1>     mov ah, 02h
   723 00002442 CD41                <1>     int 41h
   724 00002444 FFCD                <1>     dec ebp
   725 00002446 75E2                <1>     jnz .dpfb2
   726                              <1>     return
    19                              <2> %%_ret:
    20 00002448 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   727                              <1> 
   728                              <1> getDecimalWord:
   729                              <1> ;Works on MAX A dword in eax
   730                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   731 00002449 31C9                <1>     xor ecx, ecx
   732 0000244B 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   733 0000244D BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   734                              <1> .dpfb0:
   735 00002452 FFC5                <1>     inc ebp
   736 00002454 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   737 00002458 31D2                <1>     xor edx, edx
   738 0000245A 48F7F3              <1>     div rbx
   739 0000245D 80C230              <1>     add dl, '0'
   740 00002460 80FA39              <1>     cmp dl, '9'
   741 00002463 7603                <1>     jbe .dpfb1
   742 00002465 80C207              <1>     add dl, 'A'-'0'-10
   743                              <1> .dpfb1:
   744 00002468 88D1                <1>     mov cl, dl    ;Save remainder byte
   745 0000246A 4885C0              <1>     test rax, rax
   746 0000246D 75E3                <1>     jnz .dpfb0
   747                              <1>     return
    19                              <2> %%_ret:
    20 0000246F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   748                              <1> 
   749                              <1> freezePC:
   750 00002470 488D1548E7FFFF      <1>     lea rdx, memBad1
   751 00002477 B409                <1>     mov ah, 09h
   752 00002479 CD41                <1>     int 41h
   753                              <1> .altEP:
   754 0000247B 488D1566E7FFFF      <1>     lea rdx, memBad3
   755 00002482 B409                <1>     mov ah, 09h
   756 00002484 CD41                <1>     int 41h
   757                              <1> .lp:
   758 00002486 F390                <1>     pause
   759 00002488 F4                  <1>     hlt
   760 00002489 EBFB                <1>     jmp short .lp
   761                              <1> 
   762                              <1> getFilenamePtrFromFilespec:
   763                              <1> ;Gets a pointer to the first char of a filename from a asciiz pathspec
   764                              <1> ;Input: rsi = Pathspec to search
   765                              <1> ;Output: rsi = Points to the first char of the filename
   766 0000248B 4889F3              <1>     mov rbx, rsi
   767 0000248E 31C0                <1>     xor eax, eax
   768 00002490 4889F7              <1>     mov rdi, rsi    ;Go to the source string 
   769 00002493 E847FDFFFF          <1>     call strlen     ;Get it's length
   770 00002498 FFC9                <1>     dec ecx ;Dont include terminating null
   771 0000249A 741F                <1>     jz .exitBad ;Was the string of length zero? Exit bad if so
   772 0000249C 4801CE              <1>     add rsi, rcx    ;Goto last char in path (not null)
   773                              <1> .lp:
   774 0000249F 4839F3              <1>     cmp rbx, rsi    ;Is rdi pointing to the start of the string?
   775                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000024A2 74(6F)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   776 000024A4 8A06                <1>     mov al, byte [rsi]  ;Get the char we currently are at
   777 000024A6 3C3A                <1>     cmp al, ":" ;X: ?
   778 000024A8 740D                <1>     je .pointFilename
   779 000024AA 3A0573DBFFFF        <1>     cmp al, byte [pathSep]  ;Is al pathSep?
   780 000024B0 7405                <1>     je .pointFilename
   781 000024B2 48FFCE              <1>     dec rsi ;Not a terminator, go back a char
   782 000024B5 EBE8                <1>     jmp short .lp
   783                              <1> .pointFilename:
   784 000024B7 48FFC6              <1>     inc rsi ;Now point to the first char of the pathname
   785                              <1>     return
    19                              <2> %%_ret:
    20 000024BA C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   786                              <1> .exitBad:
   787 000024BB F9                  <1>     stc
   788                              <1> .exit:
   789                              <1>     return
    19                              <2> %%_ret:
    20 000024BC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   790                              <1> 
   791                              <1> 
   792                              <1> copyArgumentToSearchSpec:
   793                              <1> ;Works similarly to the build searchpath but is simpler
   794                              <1> ;Null terminates
   795 000024BD 488D3D5DDEFFFF      <1>     lea rdi, searchSpec
   796                              <1> .copyPath:
   797 000024C4 AC                  <1>     lodsb
   798 000024C5 E87CFDFFFF          <1>     call isALEndOfCommand
   799 000024CA 740A                <1>     jz .finishCopy
   800 000024CC E852FDFFFF          <1>     call isALterminator
   801 000024D1 7403                <1>     jz .finishCopy
   802 000024D3 AA                  <1>     stosb
   803 000024D4 EBEE                <1>     jmp short .copyPath
   804                              <1> .finishCopy:
   805 000024D6 31C0                <1>     xor eax, eax
   806 000024D8 AA                  <1>     stosb
   807                              <1>     return
    19                              <2> %%_ret:
    20 000024D9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    18                                  %include "./Source/Utils/COMMAND/Source/int44h.asm"
    19                              <1> critErrorHandler:   ;Int 44h
    20                              <1> ;User Stack in usage here, must be swapped to before this is called
    21                              <1> ;Entered with:  
    22                              <1> ;               AH = Critical Error Bitfield
    23                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    24                              <1> ;               Bit 6 - Reserved
    25                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    26                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    27                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    28                              <1> ;               Bits [2-1] = Affected Disk Error
    29                              <1> ;                     0 0   DOS area
    30                              <1> ;                     0 1   FAT area
    31                              <1> ;                     1 0   Directory area
    32                              <1> ;                     1 1   Data area
    33                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    34                              <1> ;               AL  = Failing drive number if AH[7] = 0
    35                              <1> ;               DIL = Error code for errorMsg
    36                              <1> ;               RSI = EA of Device Header for which device the error occured
    37                              <1> ;Return:
    38                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    39                              <1> ;                  = 1 - Retry the Operation    (Retry)
    40                              <1> ;                  = 2 - Terminate the Program  (Abort)
    41                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    42 000024DA 53                  <1>     push rbx
    43 000024DB 51                  <1>     push rcx
    44 000024DC 52                  <1>     push rdx
    45 000024DD 57                  <1>     push rdi
    46 000024DE 56                  <1>     push rsi
    47 000024DF FC                  <1>     cld         ;Make String ops go forward
    48                              <1> 
    49 000024E0 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    50 000024E3 488D158AE1FFFF      <1>     lea rdx, crlf
    51 000024EA B409                <1>     mov ah, 09h ;Print String
    52 000024EC CD41                <1>     int 41h
    53                              <1> 
    54 000024EE 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    55 000024F4 B90C000000          <1>     mov ecx, 0Ch
    56 000024F9 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    57 000024FB 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    58 000024FE 480FB7FF            <1>     movzx rdi, di
    59 00002502 4889FA              <1>     mov rdx, rdi    ;Copy error code
    60 00002505 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    61 00002509 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    62 0000250C 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    63 0000250F 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    64 00002516 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    65 0000251A B409                <1>     mov ah, 09h ;Print String
    66 0000251C CD41                <1>     int 41h     ;Call DOS to print first part of message
    67                              <1> 
    68 0000251E 488D1505020000      <1>     lea rdx, qword [.readmsg]
    69 00002525 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    70 0000252C F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    71 0000252F 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    72 00002533 B409                <1>     mov ah, 09h ;Print String
    73 00002535 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    74                              <1> 
    75 00002537 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    76 0000253A 0F85DF000000        <1>     jnz .charError
    77                              <1> ;Disk error continues here
    78 00002540 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    79 00002547 B409                <1>     mov ah, 09h
    80 00002549 CD41                <1>     int 41h
    81 0000254B 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    82 0000254D 80C241              <1>     add dl, "A" ;Add ASCII code
    83 00002550 B402                <1>     mov ah, 02h ;Print char in dl
    84 00002552 CD41                <1>     int 41h
    85                              <1> .userInput:
    86 00002554 488D1519E1FFFF      <1>     lea rdx, crlf  ;Print new line
    87 0000255B B409                <1>     mov ah, 09h
    88 0000255D CD41                <1>     int 41h
    89                              <1> ;Abort, Retry, Ignore, Fail is word order
    90                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    91                              <1> .userAbort:
    92                              <1> ;Abort is always an option
    93 0000255F 488D15E2010000      <1>     lea rdx, qword [.abortmsg]
    94 00002566 B409                <1>     mov ah, 09h
    95 00002568 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
    96                              <1> .userRetry:
    97 0000256A F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    98 0000256D 7416                <1>     jz .userIgnore    ;If clear, dont print message
    99 0000256F 488D15EA010000      <1>     lea rdx, qword [.betweenMsg]
   100 00002576 B409                <1>     mov ah, 09h
   101 00002578 CD41                <1>     int 41h
   102 0000257A 488D15D4010000      <1>     lea rdx, qword [.retrymsg]
   103 00002581 B409                <1>     mov ah, 09h
   104 00002583 CD41                <1>     int 41h
   105                              <1> .userIgnore:
   106 00002585 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   107 00002588 7416                <1>     jz .userFail
   108 0000258A 488D15CF010000      <1>     lea rdx, qword [.betweenMsg]
   109 00002591 B409                <1>     mov ah, 09h
   110 00002593 CD41                <1>     int 41h
   111 00002595 488D15B2010000      <1>     lea rdx, qword [.ignoremsg]
   112 0000259C B409                <1>     mov ah, 09h
   113 0000259E CD41                <1>     int 41h
   114                              <1> .userFail:
   115 000025A0 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   116 000025A3 7416                <1>     jz .userMsgEnd
   117 000025A5 488D15B4010000      <1>     lea rdx, qword [.betweenMsg]
   118 000025AC B409                <1>     mov ah, 09h
   119 000025AE CD41                <1>     int 41h
   120 000025B0 488D15A4010000      <1>     lea rdx, qword [.failmsg]
   121 000025B7 B409                <1>     mov ah, 09h
   122 000025B9 CD41                <1>     int 41h
   123                              <1> .userMsgEnd:
   124 000025BB 488D15A1010000      <1>     lea rdx, qword [.endMsg]
   125 000025C2 B409                <1>     mov ah, 09h
   126 000025C4 CD41                <1>     int 41h
   127                              <1> ;Get user input now 
   128 000025C6 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   129 000025C8 488D3D97010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   130 000025CF B401                <1>     mov ah, 01h ;STDIN without Console Echo
   131 000025D1 CD41                <1>     int 41h ;Get char in al
   132 000025D3 3C61                <1>     cmp al, "a" ;Chack if lowercase
   133 000025D5 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   134 000025D7 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   135                              <1> .uip1:
   136 000025D9 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   137 000025DA 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   138 000025DC FFC1                <1>     inc ecx
   139 000025DE 81F904000000        <1>     cmp ecx, 4
   140 000025E4 75F3                <1>     jne .uip1
   141 000025E6 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   142                              <1> .validInput:
   143 000025EB 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   144                              <1> ;Now check if the input is permitted
   145 000025ED 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   146 000025EF 7427                <1>     je .cehExit
   147 000025F1 84C0                <1>     test al, al ;Check if 0 => Ignore
   148 000025F3 740F                <1>     je .viIgnore
   149 000025F5 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   150 000025F7 7416                <1>     je .viRetry
   151                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   152 000025F9 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   153 000025FC 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   154 00002602 EB14                <1>     jmp short .cehExit
   155                              <1> .viIgnore:
   156 00002604 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   157 00002607 0F8447FFFFFF        <1>     jz .userInput
   158 0000260D EB09                <1>     jmp short .cehExit
   159                              <1> .viRetry:
   160 0000260F F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   161 00002612 0F843CFFFFFF        <1>     jz .userInput
   162                              <1> .cehExit:
   163 00002618 5E                  <1>     pop rsi
   164 00002619 5F                  <1>     pop rdi
   165 0000261A 5A                  <1>     pop rdx
   166 0000261B 59                  <1>     pop rcx
   167 0000261C 5B                  <1>     pop rbx
   168 0000261D 48CF                <1>     iretq
   169                              <1> .charError:
   170 0000261F B908000000          <1>     mov ecx, 8  ;8 chars in device name
   171 00002624 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   172                              <1> .ce1:
   173 0000262B AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   174 0000262C 88C2                <1>     mov dl, al  ;Move char into dl
   175 0000262E B402                <1>     mov ah, 02h
   176 00002630 CD41                <1>     int 41h ;Print char
   177 00002632 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   178 00002634 E91BFFFFFF          <1>     jmp .userInput
   179                              <1> 
   180                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   181 00002639 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   181 00002642 746563742024202020  <1>
   182 0000264B 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   182 00002654 6E6974202420202020  <1>
   183 0000265D 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   183 00002666 202420202020202020  <1>
   184 0000266F 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   184 00002678 6F6D6D616E64202420  <1>
   185 00002681 446174612024202020- <1>             db "Data $            "       ;Error 4
   185 0000268A 202020202020202020  <1>
   186 00002693 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   186 0000269C 737420242020202020  <1>
   187 000026A5 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   187 000026AE 202020202020202020  <1>
   188 000026B7 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   188 000026C0 656469612024202020  <1>
   189 000026C9 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   189 000026D2 7420466F756E642024  <1>
   190 000026DB 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   190 000026E4 706572202420202020  <1>
   191 000026ED 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   191 000026F6 6C7420242020202020  <1>
   192 000026FF 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   192 00002708 742024202020202020  <1>
   193 00002711 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   193 0000271A 61696C757265202420  <1>
   194                              <1> 
   195 00002723 64726976652024      <1> .drive      db "drive $"
   196 0000272A 6572726F7220726561- <1> .readmsg    db "error reading $"
   196 00002733 64696E672024        <1>
   197 00002739 6572726F7220777269- <1> .writemsg   db "error writing $"
   197 00002742 74696E672024        <1>
   198 00002748 41626F727424        <1> .abortmsg   db "Abort$" 
   199 0000274E 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   200 00002755 526574727924        <1> .retrymsg   db "Retry$"
   201 0000275B 4661696C24          <1> .failmsg    db "Fail$"
   202 00002760 2C2024              <1> .betweenMsg db ", $"
   203 00002763 3F2024              <1> .endMsg     db "? $"
   204 00002766 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   205                              <1> 
   206                              <1> int43h:
   207 0000276A F9                  <1>     stc     ;Set CF to kill the task
   208 0000276B C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    19                                  %include "./Source/Utils/COMMAND/Data/cmdEnv.asm"
    20                              <1>     
    21                              <1> masterEnv:  ;Yeet this is this is a child command processor
    22 0000276E 5F3A434F4D4D414E44- <1>     db "_:COMMAND.COM",0
    22 00002777 2E434F4D00          <1>
    23 0000277C 504154483D0000      <1>     db "PATH=",0,0  ;Terminate with two null bytes
    24 00002783 202020202020202020- <1>     db ($ - masterEnv) dup (" ")    ;Pad the environment with spaces
    24 0000278C 202020202020202020- <1>
    24 00002795 202020              <1>
    25                              <1> endOfAlloc: ;Symbol to find the start of where I can yeet 
    20                                  %include "./Source/Utils/COMMAND/Source/cmdLdr.asm"
    21                              <1> cmdLdr:
    22                              <1> ;First check if the version is ok. If not, return.
    23 00002798 B430                <1>     mov ah, 30h
    24 0000279A CD41                <1>     int 41h
    25 0000279C 3C01                <1>     cmp al, 01h ;Version 1
    26 0000279E 760D                <1>     jbe .okVersion
    27 000027A0 488D15CD010000      <1>     lea rdx, badVerStr
    28 000027A7 B409                <1>     mov ah, 09h
    29 000027A9 CD41                <1>     int 41h
    30 000027AB CD40                <1>     int 40h ;Exit to caller or DOS to print bad command interpreter line
    31                              <1> .okVersion:
    32                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    33 000027AD 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    34 000027B1 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    35 000027B5 48890553D8FFFF      <1>     mov qword [realParent], rax ;Preserve the real parent address
    36                              <1> ;Setup Int 42h, Int 43h and Int 44h
    37 000027BC 498B400A            <1>     mov rax, qword [r8 + psp.oldInt42h] ;Preserve the original addresses
    38 000027C0 4889055FD8FFFF      <1>     mov qword [parentInt42], rax
    39                              <1> 
    40 000027C7 488D150CFDFFFF      <1>     lea rdx, critErrorHandler
    41 000027CE 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    42 000027D2 B844250000          <1>     mov eax, 2544h
    43 000027D7 CD41                <1>     int 41h
    44 000027D9 488D158AFFFFFF      <1>     lea rdx, int43h
    45 000027E0 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    46 000027E4 B843250000          <1>     mov eax, 2543h
    47 000027E9 CD41                <1>     int 41h
    48 000027EB 488D1567E4FFFF      <1>     lea rdx, applicationReturn
    49 000027F2 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    50 000027F6 B842250000          <1>     mov eax, 2542h
    51 000027FB CD41                <1>     int 41h
    52                              <1> ;Get a pointer to DOS Sysvars
    53 000027FD B452                <1>     mov ah, 52h ;Get sysvars
    54 000027FF CD41                <1>     int 41h
    55 00002801 48891D0FD8FFFF      <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    56                              <1> ;Call for simple internationalisation data
    57 00002808 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    58 0000280D CD41                <1>     int 41h
    59 0000280F 3CFF                <1>     cmp al, -1
    60 00002811 7412                <1>     je .skipSwitch
    61 00002813 88150BD8FFFF        <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    62 00002819 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    63 0000281C 7507                <1>     jne .skipSwitch
    64 0000281E C605FED7FFFF2F      <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    65                              <1> .skipSwitch:
    66 00002825 B800380000          <1>     mov eax, 3800h  ;Get current country data
    67 0000282A 488D15FDD7FFFF      <1>     lea rdx, ctryData
    68 00002831 CD41                <1>     int 41h ;Write the data to the internal country table
    69                              <1> ;Now determine if this is the master copy of COMMAND.COM
    70                              <1> ;Check if Int 4Eh has the same address as Int 4Dh. If so, we are master.
    71 00002833 B84E350000          <1>     mov eax, 354Eh  ;Get int 4Eh address
    72 00002838 CD41                <1>     int 41h
    73 0000283A 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    74 0000283D B84D350000          <1>     mov eax, 354Dh  ;Get int 4Dh address
    75 00002842 CD41                <1>     int 41h
    76 00002844 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    77 00002847 755C                <1>     jne .skipMaster
    78                              <1> ;Ok so we are master command.com
    79                              <1> ;Now make myself the real parent
    80 00002849 C605D5D7FFFFFF      <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    81 00002850 4C8905B8D7FFFF      <1>     mov qword [realParent], r8
    82                              <1> ;Set master environment as mine
    83 00002857 488D0510FFFFFF      <1>     lea rax, masterEnv
    84 0000285E 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    85                              <1> ;Set current Drive in COMSPEC
    86 00002862 B019                <1>     mov al, 19h ;Get current Drive
    87 00002864 CD41                <1>     int 41h
    88 00002866 0441                <1>     add al, "A"
    89 00002868 880500FFFFFF        <1>     mov byte [masterEnv], al
    90                              <1> ;Set Int 4Eh up
    91 0000286E 488D15A8E8FFFF      <1>     lea rdx, int4Eh
    92 00002875 B84E250000          <1>     mov eax, 254Eh ;Set this as Int 4Eh
    93 0000287A CD41                <1>     int 41h
    94                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    95                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    96 0000287C 488D15F1DDFFFF      <1>     lea rdx, crlf
    97 00002883 B409                <1>     mov ah, 09h
    98 00002885 CD41                <1>     int 41h
    99 00002887 E8C1EEFFFF          <1>     call time
   100 0000288C E8F6EDFFFF          <1>     call date
   101 00002891 488D15DCDDFFFF      <1>     lea rdx, crlf
   102 00002898 B409                <1>     mov ah, 09h
   103 0000289A CD41                <1>     int 41h
   104 0000289C 488D1DF5FEFFFF      <1>     lea rbx, endOfAlloc ;Save the Master Environment
   105 000028A3 EB32                <1>     jmp short .printInit
   106                              <1> .skipMaster:
   107 000028A5 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
   108 000028AC 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
   109 000028B4 0FB60569D7FFFF      <1>     movzx eax, byte [switchChar]
   110 000028BB F2AE                <1>     repne scasb
   111 000028BD 67E310              <1>     jecxz .noSwitches
   112 000028C0 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
   113 000028C3 24DF                <1>     and al, 0DFh    ;Convert to UC
   114 000028C5 3C50                <1>     cmp al, "P" ;Is it permanent switch?
   115 000028C7 7507                <1>     jne .noSwitches
   116 000028C9 C60555D7FFFFFF      <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
   117                              <1> .noSwitches:
   118 000028D0 488D1D97FEFFFF      <1>     lea rbx, masterEnv  ;This is the base address to jettison
   119                              <1> .printInit:
   120                              <1> ;Finish by printing INIT string.
   121 000028D7 53                  <1>     push rbx
   122 000028D8 488D1521000000      <1>     lea rdx, initString
   123 000028DF B409                <1>     mov ah, 09h
   124 000028E1 CD41                <1>     int 41h ;Print init string
   125 000028E3 E8B4F2FFFF          <1>     call version.printVersionNumber
   126 000028E8 488D1547000000      <1>     lea rdx, initString2
   127 000028EF B409                <1>     mov ah, 09h
   128 000028F1 CD41                <1>     int 41h ;Print init string
   129 000028F3 5B                  <1>     pop rbx
   130 000028F4 4889250AD7FFFF      <1>     mov qword [stackBottom], rsp    ;Use this to save where to reset rsp to
   131 000028FB E945E3FFFF          <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   132                              <1> ;Loader Data here
   133                              <1> initString: 
   134 00002900 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   134 00002909 66696320436F6D7075- <1>
   134 00002912 746572205265736561- <1>
   134 0000291B 726368285229205343- <1>
   134 00002924 502F444F5328522920- <1>
   134 0000292D 56657273696F6E2024  <1>
   135                              <1> initString2:
   136 00002936 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Reserach 2022.",CR,LF,"$"
   136 0000293F 202020284329436F70- <1>
   136 00002948 797269676874205363- <1>
   136 00002951 69656E746966696320- <1>
   136 0000295A 436F6D707574657220- <1>
   136 00002963 526573657261636820- <1>
   136 0000296C 323032322E0D0A24    <1>
   137 00002974 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   137 0000297D 20444F532076657273- <1>
   137 00002986 696F6E0D0A24        <1>
   137          ------------------  <1>  info: assembly required 1+2+2 passes

