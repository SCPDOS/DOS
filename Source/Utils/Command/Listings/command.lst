     1                                  ;COMMAND.COM main file
     2                                  [map all ./Source/Utils/COMMAND/Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Source/Include/dosMacro.mac"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------------------------------
     9                              <1> ;Generic Macros file
    10                              <1> ;The following instruction extensions allow to conditionally return
    11                              <1> ;The idea was borrowed from the DOS Source Code
    12                              <1> ;
    13                              <1> ;-------------------------------------------------------------------------------
    14                              <1> 
    15                              <1> ;-------------------------------------------------------------------------------
    16                              <1> ;These macros are live and must not be touched
    17                              <1> ;-------------------------------------------------------------------------------
    18                              <1> %macro return 0
    19                              <1> %%_ret:
    20                              <1>     ret
    21                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    22                              <1> %endmacro
    23                              <1> 
    24                              <1> %macro cret 1
    25                              <1> %%_base:
    26                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    27                              <1>     %ifdef retOff
    28                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <1>     %ifdef currSegVBase
    30                              <1>     j%+1 short (retOff+currSegVBase)
    31                              <1>     %else
    32                              <1>     j%+1 short retOff
    33                              <1>     %endif  ;End ifdef currSegVBase
    34                              <1>     %else 
    35                              <1>     j%-1 short %%a
    36                              <1>     return
    37                              <1> %%a:
    38                              <1>     %endif  ;End the distance measurement if
    39                              <1>     %else   
    40                              <1>     j%-1 short %%a
    41                              <1>     return
    42                              <1> %%a:
    43                              <1>     %endif  ;End ifdef retoff
    44                              <1> %endmacro
    45                              <1> 
    46                              <1> %macro retz 0
    47                              <1> cret z
    48                              <1> %endmacro
    49                              <1> 
    50                              <1> %macro retnz 0
    51                              <1> cret nz
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> %macro rete 0
    55                              <1> cret e
    56                              <1> %endmacro
    57                              <1> 
    58                              <1> %macro retne 0
    59                              <1> cret ne
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> %macro retc 0
    63                              <1> cret c
    64                              <1> %endmacro
    65                              <1> 
    66                              <1> %macro retnc 0
    67                              <1> cret nc
    68                              <1> %endmacro
    69                              <1> 
    70                              <1> %macro retb 0
    71                              <1> cret b
    72                              <1> %endmacro
    73                              <1> 
    74                              <1> %macro retnb 0
    75                              <1> cret nb
    76                              <1> %endmacro
    77                              <1> 
    78                              <1> %macro breakpoint 0
    79                              <1> xchg bx, bx
    80                              <1> %endmacro
     7                                  %include "./Source/Include/dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    27 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    32 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Only affects for SUBST drives, not JOIN
    69                              <1> ; Flags: Bit 15 set = Network drive
    70                              <1> ;        Bit 14 set = Physical drive
    71                              <1> ;        Bit 13 set = JOIN'ed drive
    72                              <1> ;        Bit 12 set = SUBST'ed drive
    73                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    74                              <1> endstruc
    75                              <1> ;CDS equates
    76                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    77                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    78                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    79                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    80                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    81                              <1> ;------------------------------------------------------------------------;
    82                              <1> ; The SFT is a way to allow applications to open file handles to files 
    83                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    84                              <1> ; under the first header, and then a second header will be linked to the 
    85                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    86                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    87                              <1> ; using the FCBS= command. Default FCBS=5.
    88                              <1> ;
    89                              <1> ; A file handle describes the file, and the location within the file that
    90                              <1> ; we are reading. The file handle can be manipulated without the file
    91                              <1> ; being in memory, thus allowing the user to access data without needing 
    92                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    93                              <1> ; accessing devices, by treating them as files with their drivers 
    94                              <1> ; responding and translating the manipulations of the file handle itself.
    95                              <1> ; Neither the driver nor the application should see or use the SFT for
    96                              <1> ; the handle, as it is subject to change (and will change when file 
    97                              <1> ; sharing provisions are included). The DOS will make requests to the 
    98                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    99                              <1> ; track of the information in the SFT entry for that handle. 
   100                              <1> ;
   101                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   102                              <1> ; can point to the same file. It all depends on what the applications 
   103                              <1> ; want to do with the File.
   104                              <1> ;
   105                              <1> ; !!!!IMPORTANT!!!!
   106                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   107                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   108                              <1> ;
   109                              <1> ;Each SFT may look like this:
   110                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   111                              <1> ;            |                |
   112                              <1> ;       wNumFiles*sft    wNumFiles*sft
   113                              <1> ;
   114                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   115                              <1> ; System FCBs.
   116                              <1> ;
   117                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   118                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   119                              <1> ;
   120                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   121                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   122                              <1> ;------------------------------------------------------------------------;
   123                              <1> struc sfth   ;System file table header
   124                              <1> ; This is the SFT header.
   125                              <1> ; This structure comes before the start of the first file in the array/table.
   126 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   127 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   128                              <1> endstruc
   129                              <1> 
   130                              <1> struc sft
   131                              <1> ;This is the file struc itself
   132 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   133 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   134 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   135 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   136 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   137 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   138 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   139 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   140 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   141 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   142 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   143 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   144 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   145 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   146 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   147 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   148 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   149 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   150 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   151                              <1> ;                           0 means no record
   152                              <1> endstruc
   153                              <1> ;Open Mode equates
   154                              <1> ;Access modes   Bits[2:0]
   155                              <1> ReadAccess      equ 0h
   156                              <1> WriteAccess     equ 1h
   157                              <1> RWAccess        equ 2h
   158                              <1> ;Bit 3 reserved 0
   159                              <1> ;Sharing modes  Bits[6:4]
   160                              <1> CompatShare     equ 0h
   161                              <1> denyRWShare     equ 10h
   162                              <1> denyWriteShare  equ 20h
   163                              <1> denyReadShare   equ 30h
   164                              <1> denyNoneShare   equ 40h
   165                              <1> netFCBShare     equ 70h
   166                              <1> ;Bit 7 reserved 0
   167                              <1> ;Bits 8-12 reserved 0
   168                              <1> 
   169                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   170                              <1> ;Buffering on writes
   171                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   172                              <1> ;FCB opened file?
   173                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   174                              <1> ;Attribute Byte
   175                              <1> readOnlyFile    equ 1h
   176                              <1> hiddenFile      equ 2h
   177                              <1> systemFile      equ 4h
   178                              <1> volumeLabel     equ 8h
   179                              <1> directoryFile   equ 10h ;Directory entry
   180                              <1> archiveFile     equ 20h
   181                              <1> ;Device Info equates
   182                              <1> ;For a block device, bits [5:0] contain the drive number
   183                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   184                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   185                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   186                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   187                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   188                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   189                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   190                              <1> blokFileToFlush equ 40h ;Set if ANY writes are made to this handle!
   191                              <1> devCharDev      equ 80h ;If set, it is a char device!
   192                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   193                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   194                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   195                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   196                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   197                              <1> 
   198                              <1> ;openAddress   equ DOSSEG:367Ah   
   199                              <1> ;createAddress equ DOSSEG:35E3h   
   200                              <1> ;------------------------------------------------------------------------;
   201                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   202                              <1> ; to an internal buffer, and then copying it to the specified location
   203                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   204                              <1> ; another request for the same sector from the same device is made, so 
   205                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   206                              <1> ; size, selected according to the largest detected sector size during 
   207                              <1> ; the initial loadup.
   208                              <1> ;
   209                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   210                              <1> ;
   211                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   212                              <1> ;------------------------------------------------------------------------;
   213                              <1> 
   214                              <1> struc bufferHdr
   215 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   216 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   217 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   218 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   219 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   220 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   221 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   222 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   223 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   224                              <1>     .dataarea:             ;Points to the start of the data area
   225                              <1> endstruc
   226                              <1> ;Buffer Flag equates
   227                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   228                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   229                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   230                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   231                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   232                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   233                              <1> ;Note! A buffer is marked as referenced only when the application 
   234                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   235                              <1> ;------------------------------------------------------------------------;
   236                              <1> ; Memory control block for each memory arena
   237                              <1> ;------------------------------------------------------------------------;
   238                              <1> struc mcb
   239 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   240 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   241 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   242 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   243                              <1>     .program:
   244                              <1> endstruc
   245                              <1> ;MCB equates
   246                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   247                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   248                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   249                              <1> mcbMarkCtn      equ "M"
   250                              <1> mcbMarkEnd      equ "Z"
   251                              <1> 
   252                              <1> memFirstFit     equ 0   ;First free block goes to application
   253                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   254                              <1> memLastFit      equ 2   ;Last free block goes to application
   255                              <1> 
   256                              <1> ;Owner = Para aligned address => Owning application PSP
   257                              <1> ;...To consider...
   258                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   259                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   260                              <1> ;------------------------------------------------------------------------;
   261                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   262                              <1> ; following order, thus allowing for return values to be placed in the 
   263                              <1> ; registers by accessing the caller register stack frame.
   264                              <1> ;------------------------------------------------------------------------;
   265                              <1> struc callerFrame
   266 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   267 00000008 ????????????????    <1>     .rbx    resq 1    
   268 00000010 ????????????????    <1>     .rcx    resq 1
   269 00000018 ????????????????    <1>     .rdx    resq 1
   270 00000020 ????????????????    <1>     .rsi    resq 1
   271 00000028 ????????????????    <1>     .rdi    resq 1
   272 00000030 ????????????????    <1>     .rbp    resq 1
   273 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   274 00000040 ????????????????    <1>     .r9     resq 1
   275                              <1> ;Pushed by Processor when invoked via Interrupt
   276 00000048 ????????????????    <1>     .rip    resq 1
   277 00000050 ????????????????    <1>     .cs     resq 1
   278 00000058 ????????????????    <1>     .flags  resq 1
   279                              <1> endstruc
   280                              <1> 
   281                              <1> struc dpl
   282                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   283                              <1> ; server calls
   284 00000000 ????????????????    <1>     .rax    resq 1
   285 00000008 ????????????????    <1>     .rbx    resq 1
   286 00000010 ????????????????    <1>     .rcx    resq 1
   287 00000018 ????????????????    <1>     .rdx    resq 1
   288 00000020 ????????????????    <1>     .rsi    resq 1
   289 00000028 ????????????????    <1>     .rdi    resq 1
   290 00000030 ????????????????    <1>     .r8     resq 1
   291 00000038 ????????????????    <1>     .r9     resq 1
   292 00000040 ????????????????    <1>     .align  resq 1
   293 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   294 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   295                              <1> endstruc
   296                              <1> 
   297                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   298 00000000 ????????????????    <1>     .oldRBP         resq 1  
   299 00000008 ??                  <1>     .newBuffers     resb 1  ;New buffers value
   300 00000009 ??                  <1>     .newSFTVal      resb 1
   301 0000000A ??                  <1>     .newFCBSVal     resb 1
   302 0000000B ??                  <1>     .newProtFCBSVal resb 1  ;Number of protected FCBS
   303 0000000C ??                  <1>     .newLastdrive   resb 1
   304 0000000D ??                  <1>     .newStacks      resb 1  ;Ignored for now
   305 0000000E ????                <1>     .newStackSize   resb 2  ;Ignored for now
   306 00000010 ????????            <1>     .newAllocSize   resd 1  ;Used to keep track of reallocation size
   307 00000014 ????????            <1>                     resd 1  ;Alignment byte
   308 00000018 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc fcb
   312                              <1> ;Similar to a DOS 2.0 FCB.
   313 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
   314 00000001 ????????????????    <1>     .filename   resb 8
   315 00000009 ??????              <1>     .fileext    resb 3
   316 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   317                              <1> ;One block consists of 128 records, of size denoted in the below
   318 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   319 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   320 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   321 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   322 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   323 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   324 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   325 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   326 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   327                              <1>     ;If record size > 64, high byte is ignored.
   328                              <1>     ;Used for random read and write operations to find the right record
   329                              <1> endstruc
   330                              <1> 
   331                              <1> struc filename
   332                              <1> ;8.3 File name struct
   333 00000000 ????????????????    <1>     .fName  resb 8
   334 00000008 ??????              <1>     .fExt   resb 3
   335                              <1> endstruc
   336                              <1> 
   337                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   338 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   339 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   340 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   341 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   342 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   343 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   344 00000016 ????                <1>     .fileTime   resw 1  ;File time
   345 00000018 ????                <1>     .fileDate   resw 1  ;File date
   346 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   347 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   348                              <1> endstruc
   349                              <1> 
   350                              <1> struc psp
   351 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   352 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   353 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   354 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   355 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   356 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   357 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   358 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   359 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   360 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   361 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   362 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   363 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   364 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   365                              <1> ;Extra handle arrays are grouped into a linked list
   366                              <1> ;The below are in the same place as in DOS
   367 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   368 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   369                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   370 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   371 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   372                              <1> endstruc
   373                              <1> 
   374                              <1> struc clkStruc
   375 00000000 ????                <1>     .dateWord   resw 1
   376 00000002 ??                  <1>     .minutes    resb 1
   377 00000003 ??                  <1>     .hours      resb 1
   378 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   379 00000005 ??                  <1>     .seconds    resb 1
   380                              <1> endstruc
   381                              <1> 
   382                              <1> struc countryStruc
   383 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   384                              <1>                         ;0 = month day year hh:mm:ss
   385                              <1>                         ;1 = day month year hh:mm:ss
   386                              <1>                         ;2 = year month day hh:mm:ss
   387 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   388 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   389 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   390 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   391 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   392 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   393                              <1>                         ;0 = Symbol leads, without space
   394                              <1>                         ;1 = Symbol follows, without space
   395                              <1>                         ;2 = Symbol leads, one space
   396                              <1>                         ;3 = Symbol follows, one space
   397                              <1>                         ;4 = Symbol replace decimal separator
   398 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   399 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   400 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   401 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   402 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   403                              <1> endstruc
   404                              <1> 
   405                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   406                              <1> ;for a space of 64Gb
   407                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   408                              <1> dosLowBase  equ 600h    ;Low load address
   409                              <1> 
   410                              <1> ;Critical Error AH bitfield equates
   411                              <1> critRead    equ 0h
   412                              <1> critWrite   equ 1h
   413                              <1> critDOS     equ 0h
   414                              <1> critFAT     equ 2h
   415                              <1> critDir     equ 4h
   416                              <1> critData    equ 6h
   417                              <1> critFailOK  equ 8h
   418                              <1> critRetryOK equ 10h
   419                              <1> critIgnorOK equ 20h
   420                              <1> critCharDev equ 80h
   421                              <1> 
   422                              <1> critIgnore  equ 0
   423                              <1> critRetry   equ 1
   424                              <1> critAbort   equ 2
   425                              <1> critFail    equ 3
   426                              <1> 
   427                              <1> ;MISC ASCII control chars
   428                              <1> NUL equ 00h ;^@         | ASCII Null
   429                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   430                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   431                              <1> BEL equ 07h ;^G         | ASCII Bell
   432                              <1> BSP equ 08h ;^H         | ASCII Backspace
   433                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   434                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   435                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   436                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   437                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   438                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   439                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   440                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   441                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   442                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   443                              <1> SPC equ 20h ;Printable  | ASCII Space
   444                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   445                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   446                              <1> 
   447                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   448                              <1> ;Extended Ascii Codes
   449                              <1> eF1     equ 3Bh ;F1 second byte
   450                              <1> eF2     equ 3Ch ;F2 second byte
   451                              <1> eF3     equ 3Dh ;F3 second byte
   452                              <1> eF4     equ 3Eh ;F4 second byte
   453                              <1> eF5     equ 3Fh ;F5 second byte
   454                              <1> eF6     equ 40h ;F6 second byte
   455                              <1> eF7     equ 41h ;F7 second byte
   456                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   457                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   458                              <1> eIns    equ 52h ;Insert second byte
   459                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   460                              <1> 
   461                              <1> ;Default Configuration for the system
   462                              <1> 
   463                              <1> buffersDefault  equ 30
   464                              <1> filesDefault    equ 20
   465                              <1> fcbsDefault     equ 4
   466                              <1> safeFcbsDeflt   equ 0
   467                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Source/Include/dosError.inc"
     9                              <1> ;DOS Error codes
    10                              <1> 
    11                              <1> ;Extended Error Codes
    12                              <1> errInvFnc   equ 1   ;Invalid function number
    13                              <1> errFnf      equ 2   ;File not found
    14                              <1> errPnf      equ 3   ;Path not found
    15                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    16                              <1> errAccDen   equ 5   ;Access denied (to resource)
    17                              <1> errBadHdl   equ 6   ;Invalid handle
    18                              <1> errMCBbad   equ 7   ;MCB's destroyed
    19                              <1> errNoMem    equ 8   ;Insufficient memory
    20                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    21                              <1> errBadEnv   equ 10  ;Invalid environment
    22                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    23                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    24                              <1> errInvDat   equ 13  ;Invalid data
    25                              <1> ;           equ 14  ;Reserved
    26                              <1> errBadDrv   equ 15  ;Invalid drive specified
    27                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    28                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    29                              <1> errNoFil    equ 18  ;No more files
    30                              <1> ;The following are Driver error codes + 19
    31                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    32                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    33                              <1> errUnkUnt   equ 20  ;Unknown Unit
    34                              <1> errDrvNR    equ 21  ;Drive not ready
    35                              <1> errUnkCmd   equ 22  ;Unknown Command
    36                              <1> errCRCerr   equ 23  ;Data (CRC) error
    37                              <1> errBadRLn   equ 24  ;Bad request structure length
    38                              <1> errSekErr   equ 25  ;Seek error
    39                              <1> errUnkMed   equ 26  ;Unknown media type
    40                              <1> errSecNF    equ 27  ;Sector not Found
    41                              <1> errNoPap    equ 28  ;Printer out of paper
    42                              <1> errWF       equ 29  ;Write fault
    43                              <1> errRF       equ 30  ;Read fault
    44                              <1> errGF       equ 31  ;General fault
    45                              <1> ;----------------------------------------------
    46                              <1> ;The following two go inbetween the Disk errors
    47                              <1> errShrVio   equ 32  ;Sharing violations
    48                              <1> errLokVio   equ 33  ;File Lock violation
    49                              <1> ;----------------------------------------------
    50                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    51                              <1> errNoFCB    equ 35  ;FCB unavailable
    52                              <1> errShrFul   equ 36  ;Sharing buffer full
    53                              <1> 
    54                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    55                              <1> 
    56                              <1> errFilExist equ 80  ;File already exists
    57                              <1> errDirExist equ 82  ;Directory already exists
    58                              <1> errFI44     equ 83  ;Fail on INT 44h
    59                              <1> errRedir    equ 84  ;Too many levels of redirection
    60                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    61                              <1> errBadPass  equ 86  ;Bad password
    62                              <1> errBadParam equ 87  ;Bad parameter passed to request
    63                              <1> errNetWrite equ 88  ;Network Write Fault
    64                              <1> ;-----------------------------------------------------------------------------
    65                              <1> ;Error Loci
    66                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    67                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    68                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    69                              <1> eLocChr     equ 4   ;Serial/Character Device error
    70                              <1> eLocMem     equ 5   ;Related to RAM
    71                              <1> ;-----------------------------------------------------------------------------
    72                              <1> ;Error Actions
    73                              <1> eActRet     equ 1   ;Retry
    74                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    75                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    76                              <1> eActAbt     equ 4   ;Abort with cleanup
    77                              <1> eActKil     equ 5   ;Abort without cleanup
    78                              <1> eActIgn     equ 6   ;Ignore error
    79                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    80                              <1> ;-----------------------------------------------------------------------------
    81                              <1> ;Error classes
    82                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    83                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    84                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    85                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    86                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    87                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    88                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    89                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    90                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    91                              <1> eClsLocked  equ 10  ;Resource Locked
    92                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    93                              <1> eClsClash   equ 12  ;Resource already exists!
    94                              <1> eClsUnk     equ 13  ;Unknown class
     9                                  %include "./Source/Utils/COMMAND/Data/cmdEqu.asm"
    10                              <1> ;Data equates and struct declarations
    11                              <1> 
    12                              <1> cmdBufferL  equ 128 ;Length of a command line buffer
    13                              <1> driveSpecL  equ 2   ;Space for X:
    14                              <1> dirPathL    equ 64  ;Length of a directory path
    15                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
    16                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
    17                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
    18                              <1> fullDirPathL equ driveSpecL + dirPathL
    19                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    20                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    21                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    22                              <1> 
    23                              <1> ;Use PSP FCB's for switch buffers
    24                              <1> fcb1        equ psp.fcb1
    25                              <1> fcb2        equ psp.fcb2
    26                              <1> ;Use the dta as the built command line buffer.
    27                              <1> cmdLineCnt  equ psp.parmList
    28                              <1> cmdLine     equ psp.progTail
    29                              <1> 
    30                              <1> 
    31                              <1> ;Struct Declarations
    32                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    33 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    34 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    35 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    36 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    37 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    38                              <1> endstruc
    39                              <1> 
    40                              <1> struc execProg  ;For use with EXEC-ing a child task
    41 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    42 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    43 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    44 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    45                              <1> endstruc
    46                              <1> 
    47                              <1> ;Directory attribute equates
    48                              <1>     dirReadOnly     equ 01h
    49                              <1>     dirHidden       equ 02h
    50                              <1>     dirSystem       equ 04h
    51                              <1>     dirVolumeID     equ 08h
    52                              <1>     dirDirectory    equ 10h
    53                              <1>     dirArchive      equ 20h
    54                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    55                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    56                              <1>     ;If any of the three bits are set, then ALL three bits are set
    57                              <1>     ; in addition to whatever the user passed to search for.
    58                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    59                              <1>     dirIncFiles     equ dirHidden | dirSystem
    10                                  Segment .data align=1 
    11                                  %include "./Source/Utils/COMMAND/Data/cmdData.asm"
    12                              <1> ;Static Data Area for COMMAND.COM    
    13                              <1> startLbl:   ;Start symbol, this is the entry point
    14 00000000 E952240000          <1>     jmp cmdLdr
    15 00000005 0000000000000000    <1> stackBottom dq 0    ;Pointer to the top of the stack as allocated by DOS
    16 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
    17 0000000F FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
    18 00000017 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
    19 0000001F 1400                <1> numHdls     dw 20   ;Get number of handles permitted, hardcoded in this version
    20 00000021 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    21 00000023 5C                  <1> pathSep     db "\"  ;Default path sep
    22 00000024 2F                  <1> switchChar  db "/"  ;Default switch char
    23                              <1> ;Static strings, not used in command line parsing
    24 00000025 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    24 0000002E 000000000000000000- <1>
    24 00000037 000000000000000000- <1>
    24 00000040 000000000000000000- <1>
    24 00000049 0000                <1>
    25 0000004B 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    25 00000054 000000000000000000- <1>
    25 0000005D 000000000000000000- <1>
    25 00000066 000000000000000000- <1>
    25 0000006F 000000000000000000- <1>
    25 00000078 000000000000000000- <1>
    25 00000081 000000000000000000- <1>
    25 0000008A 00000000            <1>
    26                              <1> 
    27                              <1> 
    28                              <1> cmdLineStatePtr:
    29 0000008E 00                  <1> cmdStartOff db 0    ;Offset to the first char for this command (may be a space)
    30 0000008F 00                  <1> cmdEndOff   db 0    ;Offset to the terminating char for this command (0Dh or |)
    31 00000090 00                  <1> pipeFlag    db 0    ;If set, we are piping across a command
    32 00000091 0000                <1> pipeHndl    dw 0    ;If pipeFlag set, this var has the handle to the pipe file
    33 00000093 202020202020202020- <1> pipeName    db 11 dup (" ") ;Name of the pipe file we created
    33 0000009C 2020                <1>
    34                              <1> 
    35                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    36                              <1> ;These variables are valid for a SINGLE command in a command line
    37 0000009E 0000                <1> cmdDrvSpec  dw 0    ;Read the first word in to see if the pathspec has drivespec
    38 000000A0 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    39 000000A1 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    40                              <1> ;                    If 2, we are redirecting output to a file, by appending
    41                              <1> ;FLG and SWCH are read as a word when checking if argX is a switch
    42 000000A2 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    43 000000A3 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    44 000000A4 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    45                              <1> 
    46 000000A5 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    47 000000A6 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    48 000000A7 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    49                              <1> 
    50                              <1> cmdStateL equ $ - cmdStatePtr
    51                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    52                              <1> 
    53                              <1> ;Structs and strings
    54                              <1> 
    55 000000A8 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    55 000000B1 00000000000000      <1>
    56 000000B8 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    56 000000C1 000000000000000000- <1>
    56 000000CA 000000000000000000- <1>
    56 000000D3 000000000000000000- <1>
    56 000000DC 00000000000000      <1>
    57                              <1> 
    58 000000E3 000000000000000000- <1> launchBlock db execProg_size dup (0)
    58 000000EC 000000000000000000- <1>
    58 000000F5 000000000000000000- <1>
    58 000000FE 0000000000          <1>
    59                              <1> 
    60 00000103 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    60 0000010C 000000000000000000- <1>
    60 00000115 000000000000000000- <1>
    60 0000011E 000000000000000000- <1>
    60 00000127 000000000000000000- <1>
    60 00000130 000000000000000000- <1>
    60 00000139 000000000000000000- <1>
    60 00000142 000000000000000000- <1>
    60 0000014B 000000000000000000- <1>
    60 00000154 000000000000000000- <1>
    60 0000015D 000000000000000000- <1>
    60 00000166 000000000000000000- <1>
    60 0000016F 000000000000000000- <1>
    60 00000178 000000000000000000- <1>
    60 00000181 0000                <1>
    61 00000183 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    61 0000018C 000000000000000000- <1>
    61 00000195 000000000000000000- <1>
    61 0000019E 000000000000000000- <1>
    61 000001A7 000000000000000000- <1>
    61 000001B0 000000000000000000- <1>
    61 000001B9 000000000000000000- <1>
    61 000001C2 000000000000000000- <1>
    61 000001CB 000000000000000000- <1>
    61 000001D4 000000000000000000- <1>
    61 000001DD 000000000000000000- <1>
    61 000001E6 000000000000000000- <1>
    61 000001EF 000000000000000000- <1>
    61 000001F8 000000000000000000- <1>
    61 00000201 0000                <1>
    62 00000203 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)  ;Space for full path to a external command
    62 0000020C 000000000000000000- <1>
    62 00000215 000000000000000000- <1>
    62 0000021E 000000000000000000- <1>
    62 00000227 000000000000000000- <1>
    62 00000230 000000000000000000- <1>
    62 00000239 000000000000000000- <1>
    62 00000242 000000000000000000- <1>
    62 0000024B 00000000000000      <1>
    63                              <1> 
    64 00000252 000000000000000000- <1> fcbCmdSpec  db fcbNameL dup (0) ;Used to make a FCB style name for the file
    64 0000025B 0000                <1>
    65 0000025D 000000000000000000- <1> cmdSpec     db fileNameZL dup (0)   ;ASCIIZ command spec for the command name
    65 00000266 00000000            <1>
    66 0000026A 000000000000000000- <1> cmdName     db cmdNameL dup (0) ;Command name string prefixed by length of word
    66 00000273 0000000000          <1>
    67                              <1> 
    68 00000278 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    68 00000281 000000000000000000- <1>
    68 0000028A 000000000000000000- <1>
    68 00000293 000000000000000000- <1>
    68 0000029C 000000000000000000- <1>
    68 000002A5 000000000000000000- <1>
    68 000002AE 000000000000000000- <1>
    68 000002B7 000000000000000000- <1>
    68 000002C0 00000000000000      <1>
    69 000002C7 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    69 000002D0 000000000000000000- <1>
    69 000002D9 000000000000000000- <1>
    69 000002E2 000000000000000000- <1>
    69 000002EB 000000000000000000- <1>
    69 000002F4 000000000000000000- <1>
    69 000002FD 000000000000000000- <1>
    69 00000306 000000000000000000- <1>
    69 0000030F 00000000000000      <1>
    70                              <1> 
    71 00000316 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Contains the pathspec for the search file
    71 0000031F 000000000000000000- <1>
    71 00000328 000000000000000000- <1>
    71 00000331 000000000000000000- <1>
    71 0000033A 000000000000000000- <1>
    71 00000343 000000000000000000- <1>
    71 0000034C 000000000000000000- <1>
    71 00000355 000000000000000000- <1>
    71 0000035E 000000000000000000- <1>
    71 00000367 000000000000000000- <1>
    71 00000370 000000000000000000- <1>
    71 00000379 000000000000000000- <1>
    71 00000382 000000000000000000- <1>
    71 0000038B 000000000000000000- <1>
    71 00000394 0000                <1>
    72                              <1> ;The above is larger than is needed/supported by DOS to allow for 
    73                              <1> ; users overtyping
    74                              <1> 
    75                              <1> ;Internal Function vars
    76                              <1> ;Dir Vars
    77 00000396 00                  <1> dirPrnType  db 0    ;Print type.    Bit[0] set => /W or /w specified
    78                              <1> ;                                   Bit[1] set => /P or /p specified
    79 00000397 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    80 00000398 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    81 00000399 00                  <1> dirDrv      db 0    ;0 based drive number to use
    82 0000039A 000000000000000000- <1> dirOldCWD   db cmdBufferL dup (0)   ;Space for CWD and any overspill 
    82 000003A3 000000000000000000- <1>
    82 000003AC 000000000000000000- <1>
    82 000003B5 000000000000000000- <1>
    82 000003BE 000000000000000000- <1>
    82 000003C7 000000000000000000- <1>
    82 000003D0 000000000000000000- <1>
    82 000003D9 000000000000000000- <1>
    82 000003E2 000000000000000000- <1>
    82 000003EB 000000000000000000- <1>
    82 000003F4 000000000000000000- <1>
    82 000003FD 000000000000000000- <1>
    82 00000406 000000000000000000- <1>
    82 0000040F 000000000000000000- <1>
    82 00000418 0000                <1>
    83 0000041A 000000000000000000- <1> dirPathArg  db cmdBufferL dup (0)   ;Copy the pathspec argument here if any
    83 00000423 000000000000000000- <1>
    83 0000042C 000000000000000000- <1>
    83 00000435 000000000000000000- <1>
    83 0000043E 000000000000000000- <1>
    83 00000447 000000000000000000- <1>
    83 00000450 000000000000000000- <1>
    83 00000459 000000000000000000- <1>
    83 00000462 000000000000000000- <1>
    83 0000046B 000000000000000000- <1>
    83 00000474 000000000000000000- <1>
    83 0000047D 000000000000000000- <1>
    83 00000486 000000000000000000- <1>
    83 0000048F 000000000000000000- <1>
    83 00000498 0000                <1>
    84 0000049A 3F3F3F3F3F3F3F3F    <1> dirSrchPat  db 8 dup ("?")    ;We copy the search pattern here
    85 000004A2 2E                  <1> dirSPExt    db "."
    86 000004A3 3F3F3F              <1>             db 3 dup ("?")
    87                              <1> 
    88                              <1> ;Volume Vars
    89 000004A6 000000000000000000- <1> volLblSpc   db 13 dup (0)
    89 000004AF 00000000            <1>
    90 000004B3 00                  <1> volPathBuf  db 0 ;Drive LETTER goes here
    91 000004B4 3A5C2A2E2A00        <1>             db ":\*.*",0  ;This remains to build X:\*.*,0 for vol label search
    92                              <1> 
    93                              <1> ;Time/Date vars
    94 000004BA 00                  <1> td1 db 0    ;Minutes/Year
    95 000004BB 00                  <1> td2 db 0    ;Hours/Zero
    96 000004BC 00                  <1> td3 db 0    ;Hundredths/Day
    97 000004BD 00                  <1> td4 db 0    ;Seconds/Month
    12                                  %include "./Source/Utils/COMMAND/Data/cmdTable.asm"
    13                              <1> ;Function dispatch table
    14                              <1> functionTable:
    15                              <1> ;Use Pascal strings with each row of hte table having three columns:
    16                              <1> ; Col 1, BYTE, Length of command
    17                              <1> ; Col 2, String, String representing the user input
    18                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
    19 000004BE 03444952            <1>     db 3, "DIR"
    20 000004C2 F90F                <1>     dw dir - startLbl
    21                              <1> 
    22 000004C4 024344              <1>     db 2, "CD"
    23 000004C7 8613                <1>     dw chdir - startLbl
    24                              <1> 
    25 000004C9 054348444952        <1>     db 5, "CHDIR"
    26 000004CF 8613                <1>     dw chdir - startLbl
    27                              <1> 
    28 000004D1 024D44              <1>     db 2, "MD"
    29 000004D4 2E14                <1>     dw mkdir - startLbl
    30                              <1> 
    31 000004D6 054D4B444952        <1>     db 5, "MKDIR"
    32 000004DC 2E14                <1>     dw mkdir - startLbl
    33                              <1> 
    34 000004DE 025244              <1>     db 2, "RD"
    35 000004E1 8114                <1>     dw rmdir - startLbl
    36                              <1> 
    37 000004E3 05524D444952        <1>     db 5, "RMDIR"
    38 000004E9 8114                <1>     dw rmdir - startLbl
    39                              <1> 
    40 000004EB 0344454C            <1>     db 3, "DEL"
    41 000004EF D514                <1>     dw erase - startLbl
    42                              <1> 
    43 000004F1 054552415345        <1>     db 5, "ERASE"
    44 000004F7 D514                <1>     dw erase - startLbl
    45                              <1> 
    46 000004F9 0444415445          <1>     db 4, "DATE"
    47 000004FE D614                <1>     dw date - startLbl
    48                              <1> 
    49 00000500 0454494D45          <1>     db 4, "TIME"
    50 00000505 9C15                <1>     dw time - startLbl
    51                              <1> 
    52 00000507 04434F5059          <1>     db 4, "COPY"
    53 0000050C D414                <1>     dw copy - startLbl
    54                              <1> 
    55 0000050E 0443545459          <1>     db 4, "CTTY"
    56 00000513 3416                <1>     dw ctty - startLbl
    57                              <1> 
    58 00000515 03434C53            <1>     db 3, "CLS"
    59 00000519 3516                <1>     dw cls - startLbl
    60                              <1> 
    61 0000051B 05425245414B        <1>     db 5, "BREAK"
    62 00000521 A716                <1>     dw break - startLbl
    63                              <1> 
    64 00000523 06564552494659      <1>     db 6, "VERIFY"
    65 0000052A 2817                <1>     dw verify - startLbl
    66                              <1> 
    67 0000052C 0652454E414D45      <1>     db 6, "RENAME"
    68 00000533 A517                <1>     dw rename - startLbl
    69                              <1> 
    70 00000535 08545255454E414D45  <1>     db 8, "TRUENAME"
    71 0000053E A617                <1>     dw truename - startLbl
    72                              <1> 
    73 00000540 03564552            <1>     db 3, "VER"
    74 00000544 EF18                <1>     dw version - startLbl
    75                              <1> 
    76 00000546 03564F4C            <1>     db 3, "VOL"
    77 0000054A DC17                <1>     dw volume - startLbl
    78                              <1> 
    79 0000054C 034D454D            <1>     db 3, "MEM"
    80 00000550 3319                <1>     dw memory - startLbl
    81                              <1> 
    82 00000552 FF                  <1>     db -1   ;End of table
    13                                  %include "./Source/Utils/COMMAND/Data/cmdMsg.asm"
    14                              <1> ;COMMAND.COM Messages and strings
    15 00000553 0D0A24              <1> crlf    db  CR,LF,"$"
    16 00000556 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
    17 0000055B 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
    17 00000564 696C65206D69737369- <1>
    17 0000056D 6E670D0A24          <1>
    18 00000572 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
    18 0000057B 6469736B2077697468- <1>
    18 00000584 206261746368206669- <1>
    18 0000058D 6C65                <1>
    19 0000058F 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
    19 00000598 737320616E79206B65- <1>
    19 000005A1 79207768656E207265- <1>
    19 000005AA 6164790D0A24        <1>
    20 000005B0 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
    20 000005B9 6E64206F722066696C- <1>
    20 000005C2 65206E616D650D0A24  <1>
    21 000005CB 4475706C6963617465- <1> dupName db  "Duplicate file name or "
    21 000005D4 2066696C65206E616D- <1>
    21 000005DD 65206F7220          <1>
    22 000005E2 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    22 000005EB 666F756E640D0A24    <1>
    23 000005F3 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    23 000005FC 656E74206469736B20- <1>
    23 00000605 73706163650D0A24    <1>
    24 0000060D 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    24 00000616 7669726F6E6D656E74- <1>
    24 0000061F 2073706163650D0A24  <1>
    25 00000628 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    25 00000631 74696F6E206572726F- <1>
    25 0000063A 720D0A24            <1>
    26 0000063E 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    26 00000647 6F7420626520636F70- <1>
    26 00000650 696564206F6E746F20- <1>
    26 00000659 697473656C660D0A24  <1>
    27 00000662 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    27 0000066B 662064657374696E61- <1>
    27 00000674 74696F6E206C6F7374- <1>
    27 0000067D 206265666F72652063- <1>
    27 00000686 6F70790D0A24        <1>
    28                              <1> ;Copy end message. First write # files copied then this message 
    29 0000068C 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    29 00000695 636F706965640D0A24  <1>
    30                              <1> ;Dir end1 msg. First write # files in dir then this
    31 0000069E 2046696C6528732920- <1> dirOk   db  " File(s) $"
    31 000006A7 24                  <1>
    32                              <1> ;Dir end2 msg. First write # bytes free then this message
    33 000006A8 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    33 000006B1 65650D0A24          <1>
    34 000006B6 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    35                              <1> 
    36 000006BF 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    36 000006C8 726976652073706563- <1>
    36 000006D1 696669636174696F6E- <1>
    36 000006DA 0D0A24              <1>
    37 000006DD 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    37 000006E6 6B6579207768656E20- <1>
    37 000006EF 7265616479202E202E- <1>
    37 000006F8 202E2024            <1>
    38 000006FC 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    38 00000705 6172616D657465720D- <1>
    38 0000070E 0A24                <1>
    39                              <1> 
    40 00000710 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    40 00000719 576564546875467269- <1>
    40 00000722 536174              <1>
    41 00000725 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    41 0000072E 206461746524        <1>
    42 00000734 43757272656E742064- <1> curDate db  "Current date is $"
    42 0000073D 6174652069732024    <1>
    43 00000745 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    43 0000074E 657720646174652024  <1>
    44 00000757 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    44 00000760 293A2024            <1>
    45 00000764 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    45 0000076D 293A2024            <1>
    46 00000771 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    46 0000077A 293A2024            <1>
    47 0000077E 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    47 00000787 2074696D6524        <1>
    48 0000078D 43757272656E742074- <1> curTime db  "Current time is $"
    48 00000796 696D652069732024    <1>
    49 0000079E 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    49 000007A7 65772074696D653A20- <1>
    49 000007B0 24                  <1>
    50                              <1> 
    51 000007B1 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    51 000007BA 7572652028592F4E29- <1>
    51 000007C3 3F2024              <1>
    52                              <1> 
    53 000007C6 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    53 000007CF 56657273696F6E2024  <1>
    54                              <1> 
    55 000007D8 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    55 000007E1 6E2064726976652024  <1>
    56 000007EA 2069732024          <1> volOk   db " is $"
    57 000007EF 20686173206E6F206C- <1> volNo   db " has no label$"
    57 000007F8 6162656C24          <1>
    58                              <1> 
    59 000007FD 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    59 00000806 69726563746F72790D- <1>
    59 0000080F 0A24                <1>
    60 00000811 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    60 0000081A 206372656174652064- <1>
    60 00000823 69726563746F72790D- <1>
    60 0000082C 0A24                <1>
    61 0000082E 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    61 00000837 6174682C206E6F7420- <1>
    61 00000840 6469726563746F7279- <1>
    61 00000849 2C0D0A              <1>
    62 0000084C 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    62 00000855 6F7279206E6F742065- <1>
    62 0000085E 6D7074790D0A24      <1>
    63 00000865 204469726563746F72- <1> dirMain db " Directory of  $"
    63 0000086E 79206F66202024      <1>
    64 00000875 4E6F20506174682024  <1> noPath  db "No Path $"
    65 0000087E 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    65 00000887 7269766520696E2073- <1>
    65 00000890 656172636820706174- <1>
    65 00000899 680D0A24            <1>
    66 0000089D 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    66 000008A6 65766963650D0A24    <1>
    67 000008AE 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    67 000008B7 20666F756E640D0A24  <1>
    68 000008C0 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    68 000008C9 726F720D0A24        <1>
    69 000008CF 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    69 000008D8 6F74206265206E6573- <1>
    69 000008E1 7465640D0A24        <1>
    70 000008E7 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    70 000008F0 6174652066696C6520- <1>
    70 000008F9 6572726F7220647572- <1>
    70 00000902 696E6720706970650D- <1>
    70 0000090B 0A24                <1>
    71 0000090D 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    71 00000916 2062696E6172792072- <1>
    71 0000091F 656164732066726F6D- <1>
    71 00000928 206120646576696365- <1>
    71 00000931 0D0A24              <1>
    72 00000934 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    73 0000093A 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    74 0000093F 425245414B20697320- <1> breakIs db "BREAK is $"
    74 00000948 24                  <1>
    75 00000949 564552494659206973- <1> verifyIs    db "VERIFY is $"
    75 00000952 2024                <1>
    76 00000954 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    77 0000095D 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    77 00000966 617468206F72206669- <1>
    77 0000096F 6C65206E616D650D0A- <1>
    77 00000978 24                  <1>
    78 00000979 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    78 00000982 756D626572206F6620- <1>
    78 0000098B 706172616D65746572- <1>
    78 00000994 730D0A24            <1>
    79 00000998 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    79 000009A1 74696E6720746F2064- <1>
    79 000009AA 6576696365          <1>
    80 000009AF 08200800            <1> backSpace   db BSP," ",BSP,NUL
    81                              <1> 
    82 000009B3 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    82 000009BC 20202020202020546F- <1>
    82 000009C5 74616C207379737465- <1>
    82 000009CE 6D206D656D6F72793A- <1>
    82 000009D7 2024                <1>
    83 000009D9 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    83 000009E2 20202020202020204D- <1>
    83 000009EB 656D6F727920757365- <1>
    83 000009F4 6420627920444F533A- <1>
    83 000009FD 2024                <1>
    84 000009FF 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    84 00000A08 656D6F727920757365- <1>
    84 00000A11 64206279206170706C- <1>
    84 00000A1A 69636174696F6E733A- <1>
    84 00000A23 2024                <1>
    85 00000A25 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    85 00000A2E 656D6F727920726573- <1>
    85 00000A37 657276656420627920- <1>
    85 00000A40 68617264776172653A- <1>
    85 00000A49 2024                <1>
    86 00000A4B 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    86 00000A54 202020202020202020- <1>
    86 00000A5D 2020202020204D656D- <1>
    86 00000A66 6F727920667265653A- <1>
    86 00000A6F 2024                <1>
    87 00000A71 20627974657324      <1> memByte db " bytes$"
    88 00000A78 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    88 00000A81 6F7420417373657274- <1>
    88 00000A8A 61696E20444F532045- <1>
    88 00000A93 6E74727920506F696E- <1>
    88 00000A9C 7424                <1>
    89 00000A9E 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    89 00000AA7 416C6C6F636174696F- <1>
    89 00000AB0 6E204572726F7224    <1>
    90 00000AB8 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    90 00000AC1 4572726F7224        <1>
    91 00000AC7 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    91 00000AD0 68616C74656424      <1>
    92                              <1> 
    93                              <1> 
    94 00000AD7 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    95 00000ADB 2020202024          <1> fourSpc  db "    $"
    96 00000AE0 20202024            <1> threeSpc db "   $"
    97 00000AE4 202024              <1> twoSpc   db "  $"
    98                              <1> 
    99 00000AE7 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    99 00000AF0 696679204F4E206F72- <1>
    99 00000AF9 204F46460D0A24      <1>
   100 00000B00 504154483D          <1> pathEVar db "PATH="
   101 00000B05 50524F4D50543D      <1> promptEVar  db "PROMPT="
    14                                  %include "./Source/Utils/COMMAND/Source/cmdMain.asm"
    15                              <1> commandStart:
    16                              <1>     ;Resize Allocation, jump here with endpointer in rbx
    17                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
    18                              <1>     ; that the jump to safety won't be gobbled up when multitasking
    19 00000B0C 49F7D8              <1>     neg r8  ;Convert r8 to -r8
    20 00000B0F 4A8D5C0311          <1>     lea rbx, qword [rbx + r8 + 11h]    ;Get # of bytes for COMMAND.COM
    21 00000B14 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
    22 00000B17 B44A                <1>     mov ah, 4Ah ;Realloc
    23 00000B19 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    24 00000B1C CD41                <1>     int 41h
    25 00000B1E EB5A                <1>     jmp short commandMain
    26                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    27 00000B20 B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    28 00000B25 CD41                <1>     int 41h
    29 00000B27 668905DFF4FFFF      <1>     mov word [returnCode], ax
    30                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    31 00000B2E 488D1564160000      <1>     lea rdx, critErrorHandler
    32 00000B35 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    33 00000B39 B844250000          <1>     mov eax, 2544h
    34 00000B3E CD41                <1>     int 41h
    35 00000B40 488D15E2180000      <1>     lea rdx, int43h
    36 00000B47 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    37 00000B4B B843250000          <1>     mov eax, 2543h
    38 00000B50 CD41                <1>     int 41h
    39 00000B52 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    40 00000B59 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    41 00000B5D B842250000          <1>     mov eax, 2542h
    42 00000B62 CD41                <1>     int 41h
    43                              <1> ;Close all handles from 5->MAX
    44 00000B64 0FB70DB4F4FFFF      <1>     movzx ecx, word [numHdls]
    45 00000B6B BB05000000          <1>     mov ebx, 5
    46                              <1> .handleClose:
    47 00000B70 B43E                <1>     mov ah, 3Eh ;File close
    48 00000B72 CD41                <1>     int 41h
    49 00000B74 FFC3                <1>     inc ebx ;Goto next file
    50 00000B76 39CB                <1>     cmp ebx, ecx
    51 00000B78 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    52                              <1> commandMain:
    53                              <1> ;Setup Commandline
    54 00000B7A FA                  <1>     cli
    55 00000B7B 488B2583F4FFFF      <1>     mov rsp, qword [stackBottom]    ;Reset internal stack pointer pos
    56 00000B82 FB                  <1>     sti
    57 00000B83 FC                  <1>     cld ;Ensure stringops are done the right way
    58 00000B84 C60578F5FFFF80      <1>     mov byte [inBuffer], 80h    ;Reset the buffer length
    59                              <1> .inputMain:
    60 00000B8B E8AA130000          <1>     call clearCommandLineState
    61 00000B90 E831100000          <1>     call printCRLF
    62 00000B95 E878130000          <1>     call printPrompt
    63                              <1> 
    64 00000B9A 488D1562F5FFFF      <1>     lea rdx, inBuffer
    65 00000BA1 B80A0C0000          <1>     mov eax, 0C0Ah  ;Do Buffered input
    66 00000BA6 CD41                <1>     int 41h
    67 00000BA8 E819100000          <1>     call printCRLF  ;Note we have accepted input
    68                              <1> 
    69                              <1> ;First check we had something typed in of length greater than 1
    70                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    71 00000BAD 803D50F5FFFF01      <1>     cmp byte [inBuffer + 1], 1  ;Check input length valid
    72 00000BB4 742C                <1>     je .dfltErrExit
    73 00000BB6 72D3                <1>     jb .inputMain
    74                              <1>     ;Copy over the input text
    75 00000BB8 488D3544F5FFFF      <1>     lea rsi, inBuffer
    76 00000BBF 488D3DBDF5FFFF      <1>     lea rdi, cmdBuffer
    77 00000BC6 B980000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    78 00000BCB F3A4                <1>     rep movsb
    79 00000BCD 31C0                <1>     xor eax, eax
    80 00000BCF 668905B8F4FFFF      <1>     mov word [cmdStartOff], ax  ;Clear start and end Off positions
    81 00000BD6 E814000000          <1>     call parseInput
    82 00000BDB E8AD010000          <1>     call doCommandLine
    83 00000BE0 EBA9                <1>     jmp short .inputMain
    84                              <1> .dfltErrExit:
    85 00000BE2 488D15C7F9FFFF      <1>     lea rdx, badCmd
    86 00000BE9 B409                <1>     mov ah, 09h
    87 00000BEB CD41                <1>     int 41h
    88 00000BED EB9C                <1>     jmp short .inputMain
    89                              <1> 
    90                              <1> parseInput:
    91                              <1> ;EndOff is set up before entering this part
    92                              <1> ;Copies a nicely formatted version of the input command line
    93                              <1> ; without any redirections to psp.dta
    94 00000BEF 488D358FF5FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
    95 00000BF6 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
    96 00000BFD 0FB61D8BF4FFFF      <1>     movzx ebx, byte [cmdEndOff] ;Get the old end offset
    97 00000C04 4801DE              <1>     add rsi, rbx    ;Move rsi to the start of this new command
    98 00000C07 E8F7120000          <1>     call skipSpaces ;Skip any preceeding spaces
    99 00000C0C 66AD                <1>     lodsw   ;Get the first two chars into ax
   100 00000C0E 66890589F4FFFF      <1>     mov word [cmdDrvSpec], ax ;Store these chars as if they are the drvspec
   101 00000C15 4881EE02000000      <1>     sub rsi, 2  ;Go back to the start of the command
   102 00000C1C 56                  <1>     push rsi
   103 00000C1D 57                  <1>     push rdi
   104 00000C1E 488D3DDEF5FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   105 00000C25 57                  <1>     push rdi
   106 00000C26 E845030000          <1>     call copyCommandTailItem
   107 00000C2B 5F                  <1>     pop rdi
   108 00000C2C 9C                  <1>     pushfq  ;Save the CF state
   109 00000C2D E859120000          <1>     call strlen
   110 00000C32 FFC9                <1>     dec ecx ;Drop the terminating char from the count
   111 00000C34 58                  <1>     pop rax ;Get the CF state in al
   112 00000C35 5F                  <1>     pop rdi
   113 00000C36 5E                  <1>     pop rsi
   114 00000C37 F3A4                <1>     rep movsb   ;Now we copy the command into the psp command line
   115 00000C39 A801                <1>     test al, 1  ;Was CF set?
   116 00000C3B 0F8586000000        <1>     jnz .exit   ;If an embedded CR was found in the filename, exit!
   117                              <1> .cmdLineProcess:
   118 00000C41 E8BD120000          <1>     call skipSpaces ;Go to the next char in the input line
   119                              <1> .redirFound:
   120 00000C46 AC                  <1>     lodsb   ;Get first non-space char (setupRedir skips spaces before ret)
   121 00000C47 3C0D                <1>     cmp al, CR  ;If this was a CR, we stop processing
   122 00000C49 747C                <1>     je .exit
   123 00000C4B E8B3020000          <1>     call checkAndSetupRedir ;If not, check if we have a redir element
   124 00000C50 7275                <1>     jc .exit    ;CF=CY only if pipe, which is equivalent to CR when processing
   125 00000C52 74F2                <1>     jz .redirFound  ;If we had a < > or >>, proceed to check if next char CR
   126 00000C54 B020                <1>     mov al, " "
   127 00000C56 AA                  <1>     stosb   ;Store a space to make space for the command file parameter
   128 00000C57 48FFCE              <1>     dec rsi ;Move rsi back to the first char
   129 00000C5A F60541F4FFFFFF      <1>     test byte [arg1Flg], -1
   130 00000C61 7521                <1>     jnz .arg2
   131                              <1> .arg1:
   132 00000C63 C60538F4FFFFFF      <1>     mov byte [arg1Flg], -1
   133 00000C6A E894120000          <1>     call skipSpaces
   134 00000C6F 4889F0              <1>     mov rax, rsi
   135 00000C72 488D1D0AF5FFFF      <1>     lea rbx, cmdBuffer
   136 00000C79 4829D8              <1>     sub rax, rbx
   137 00000C7C 880521F4FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   138 00000C82 EB2A                <1>     jmp short .argCommon
   139                              <1> .arg2:
   140 00000C84 F6051AF4FFFFFF      <1>     test byte [arg2Flg], -1
   141 00000C8B 7521                <1>     jnz .argCommon
   142 00000C8D C60511F4FFFFFF      <1>     mov byte [arg2Flg], -1
   143 00000C94 E86A120000          <1>     call skipSpaces
   144 00000C99 4889F0              <1>     mov rax, rsi
   145 00000C9C 488D1DE0F4FFFF      <1>     lea rbx, cmdBuffer
   146 00000CA3 4829D8              <1>     sub rax, rbx
   147 00000CA6 8805FAF3FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   148 00000CAC EB00                <1>     jmp short .argCommon
   149                              <1> .argCommon:
   150                              <1>     ;More than two arguments? Do nothing more than just copy it
   151                              <1>     ; over. If we encounter an embedded CR, exit there too
   152 00000CAE E850120000          <1>     call skipSpaces
   153 00000CB3 803E0D              <1>     cmp byte [rsi], CR  ;Are we at the end of the commandline?
   154 00000CB6 740F                <1>     je .exit
   155                              <1>     ;If not, we copy it over
   156 00000CB8 E8B3020000          <1>     call copyCommandTailItem    ;Stores a terminating null we dont want
   157 00000CBD 488D7FFF            <1>     lea rdi, qword [rdi - 1]    ;Point back at the inserted terminating null
   158 00000CC1 0F837AFFFFFF        <1>     jnc .cmdLineProcess
   159                              <1> .exit:
   160 00000CC7 488D1DB5F4FFFF      <1>     lea rbx, cmdBuffer
   161 00000CCE 48FFCE              <1>     dec rsi
   162 00000CD1 4829DE              <1>     sub rsi, rbx    ;Get the offset into the command line
   163 00000CD4 89F3                <1>     mov ebx, esi
   164 00000CD6 881DB3F3FFFF        <1>     mov byte [cmdEndOff], bl    ;Store the offset to the terminating char
   165 00000CDC B00D                <1>     mov al, CR
   166 00000CDE AA                  <1>     stosb   ;Store the terminating CR in the psp command line
   167                              <1>     ;Now compute the command line length 
   168 00000CDF 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine] 
   169 00000CE6 B00D                <1>     mov al, CR
   170 00000CE8 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   171 00000CEA FFC9                <1>     dec ecx ;rcx = -1
   172 00000CEC F2AE                <1>     repne scasb
   173 00000CEE F7D1                <1>     not ecx
   174 00000CF0 FEC9                <1>     dec cl  ;Dont include terminating CR
   175 00000CF2 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   176 00000CF9 880F                <1>     mov byte [rdi], cl
   177                              <1>     ;Before returning, we copy the command name to cmdName
   178 00000CFB 488D3D01F5FFFF      <1>     lea rdi, cmdPathSpec
   179 00000D02 4889FB              <1>     mov rbx, rdi    ;Use rbx as the ptr to the first char in the commandspec
   180 00000D05 30C0                <1>     xor al, al  ;Search for the terminating null
   181 00000D07 B94F000000          <1>     mov ecx, fileSpecZL ;Max number of chars the length could be
   182 00000D0C F2AE                <1>     repne scasb
   183 00000D0E 48FFCF              <1>     dec rdi ;Go to the last char in the command
   184 00000D11 4889FE              <1>     mov rsi, rdi
   185 00000D14 FD                  <1>     std ;Now we go backwards to where rsi = rbx OR byte [rsi] = pathSep
   186                              <1> .keepSearching:
   187 00000D15 AC                  <1>     lodsb
   188 00000D16 3A0507F3FFFF        <1>     cmp al, byte [pathSep]
   189 00000D1C 740B                <1>     je .cmdStartFnd
   190 00000D1E 4839DE              <1>     cmp rsi, rbx
   191 00000D21 75F2                <1>     jne .keepSearching
   192 00000D23 48FFCE              <1>     dec rsi ;Go back two to go forwards again
   193 00000D26 48FFCE              <1>     dec rsi
   194                              <1> .cmdStartFnd:
   195 00000D29 48FFC6              <1>     inc rsi
   196 00000D2C 48FFC6              <1>     inc rsi ;Go past the pathsep
   197 00000D2F FC                  <1>     cld ;Go the sane way again
   198 00000D30 488D3D34F5FFFF      <1>     lea rdi, qword [cmdName + 1]    ;First byte is for the length of the name
   199 00000D37 57                  <1>     push rdi    ;Cleanse the field before usage (not strictly necessary)
   200 00000D38 B90E000000          <1>     mov ecx, cmdNameL
   201 00000D3D 30C0                <1>     xor al, al
   202 00000D3F F3AA                <1>     rep stosb
   203 00000D41 5F                  <1>     pop rdi
   204 00000D42 31C9                <1>     xor ecx, ecx
   205 00000D44 56                  <1>     push rsi    ;Save the location of the start byte of the command name
   206                              <1> .cmdGetChar:
   207 00000D45 AC                  <1>     lodsb
   208 00000D46 84C0                <1>     test al, al ;Did we find the terminating null?
   209 00000D48 7411                <1>     jz .nameLenFnd
   210 00000D4A 3C2E                <1>     cmp al, "." ;Extension sep also terminates
   211 00000D4C 740D                <1>     je .nameLenFnd
   212 00000D4E 24DF                <1>     and al, 0DFh    ;Else uppercase the char
   213 00000D50 AA                  <1>     stosb   ;and store it
   214 00000D51 FFC1                <1>     inc ecx
   215 00000D53 81F90B000000        <1>     cmp ecx, 11 ;Max command length is 11
   216 00000D59 72EA                <1>     jb .cmdGetChar
   217                              <1> .nameLenFnd:
   218 00000D5B 880D09F5FFFF        <1>     mov byte [cmdName], cl  ;Store the name length now
   219                              <1>     ;Now finally, create a FCB filespec
   220 00000D61 488D3DEAF4FFFF      <1>     lea rdi, fcbCmdSpec
   221 00000D68 57                  <1>     push rdi
   222 00000D69 B90B000000          <1>     mov ecx, fcbNameL
   223 00000D6E B020                <1>     mov al, " " ;Fill with spaces
   224 00000D70 F3AA                <1>     rep stosb
   225 00000D72 5F                  <1>     pop rdi
   226 00000D73 5E                  <1>     pop rsi ;Get back the location of the start byte of the command name
   227 00000D74 E8D2110000          <1>     call asciiToFCB
   228 00000D79 488D35D2F4FFFF      <1>     lea rsi, fcbCmdSpec
   229 00000D80 488D3DD6F4FFFF      <1>     lea rdi, cmdSpec
   230 00000D87 E81A120000          <1>     call FCBToAsciiz
   231                              <1>     return
    19                              <2> %%_ret:
    20 00000D8C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   232                              <1> 
   233                              <1> doCommandLine:
   234 00000D8D 488D35F1F3FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
   235 00000D94 488D3D0DF3FFFF      <1>     lea rdi, cmdFcb
   236 00000D9B B801290000          <1>     mov eax, 2901h  ;Skip leading blanks
   237 00000DA0 CD41                <1>     int 41h
   238 00000DA2 0FB71DF5F2FFFF      <1>     movzx ebx, word [cmdDrvSpec]    ;Get the drive specifier
   239 00000DA9 80FF3A              <1>     cmp bh, ":"
   240 00000DAC 752E                <1>     jne .noDriveSpecified
   241 00000DAE 88DA                <1>     mov dl, bl      ;Move the drive letter in dl
   242 00000DB0 80E2DF              <1>     and dl, 0DFh    ;Make the drive letter upper case
   243 00000DB3 80EA41              <1>     sub dl, "A"     ;And make it a 0 based drive letter
   244 00000DB6 3CFF                <1>     cmp al, -1  ;Int 41h returns AL = -1 if bad drive specified
   245 00000DB8 7415                <1>     je .badDrive
   246                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   247 00000DBA 803DA9F4FFFF02      <1>     cmp byte [cmdName], 2
   248 00000DC1 7519                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   249 00000DC3 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   250 00000DC5 CD41                <1>     int 41h 
   251 00000DC7 B419                <1>     mov ah, 19h
   252 00000DC9 CD41                <1>     int 41h     ;Get current drive
   253 00000DCB 38D0                <1>     cmp al, dl  ;If the drive was set, all is well
   254                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000DCD 74(8C)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   255                              <1> .badDrive:
   256 00000DCF 488D15E9F8FFFF      <1>     lea rdx, badDrv
   257 00000DD6 B409                <1>     mov ah, 09h
   258 00000DD8 CD41                <1>     int 41h
   259 00000DDA F9                  <1>     stc
   260                              <1>     return
    19                              <2> %%_ret:
    20 00000DDB C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   261                              <1> .noDriveSpecified:
   262                              <1> ;Now we set the two FCB's in the command line
   263 00000DDC F605BFF2FFFFFF      <1>     test byte [arg1Flg], -1
   264 00000DE3 744D                <1>     jz .fcbArgsDone
   265 00000DE5 0FB605B7F2FFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   266 00000DEC 488D3590F3FFFF      <1>     lea rsi, cmdBuffer
   267 00000DF3 4801C6              <1>     add rsi, rax    ;Point to first argument
   268 00000DF6 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   269 00000DFA B801290000          <1>     mov eax, 2901h
   270 00000DFF CD41                <1>     int 41h
   271 00000E01 88059DF2FFFF        <1>     mov byte [arg1FCBret], al
   272 00000E07 F60597F2FFFFFF      <1>     test byte [arg2Flg], -1
   273 00000E0E 7422                <1>     jz .fcbArgsDone
   274 00000E10 0FB6058FF2FFFF      <1>     movzx eax, byte [arg2Off]
   275 00000E17 488D3565F3FFFF      <1>     lea rsi, cmdBuffer
   276 00000E1E 4801C6              <1>     add rsi, rax    ;Point to first argument
   277 00000E21 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   278 00000E25 B801290000          <1>     mov eax, 2901h
   279 00000E2A CD41                <1>     int 41h
   280 00000E2C 880575F2FFFF        <1>     mov byte [arg2FCBret], al
   281                              <1> .fcbArgsDone:
   282 00000E32 488D354AF3FFFF      <1>     lea rsi, cmdBuffer
   283 00000E39 488D1D2AF4FFFF      <1>     lea rbx, cmdName
   284 00000E40 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   285 00000E45 BAFFFF0000          <1>     mov edx, 0FFFFh
   286 00000E4A B5FF                <1>     mov ch, -1
   287 00000E4C CD4F                <1>     int 4Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   288                              <1>             ;        al = 0  if the command should be executed as usual
   289 00000E4E B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   290 00000E53 BAFFFF0000          <1>     mov edx, 0FFFFh
   291 00000E58 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   292 00000E5A CD4F                <1>     int 4Fh
   293 00000E5C 741D                <1>     jz .executeInternal
   294                              <1>     ;Here we execute externally and return to the prompt
   295                              <1>     ; as if it was an internal execution
   296 00000E5E 488D359EF2FFFF      <1>     lea rsi, inBuffer ;Point to this built buffer
   297 00000E65 488D1D3CF2FFFF      <1>     lea rbx, cmdFcb
   298 00000E6C B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   299 00000E71 BAFFFF0000          <1>     mov edx, 0FFFFh
   300 00000E76 B5FF                <1>     mov ch, -1
   301 00000E78 CD4F                <1>     int 4Fh 
   302                              <1>     return
    19                              <2> %%_ret:
    20 00000E7A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   303                              <1> .executeInternal:
   304                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   305                              <1> ;rsi points after the command terminator in the command tail
   306 00000E7B 488D1D3CF6FFFF      <1>     lea rbx, functionTable
   307                              <1> .nextEntry:
   308 00000E82 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   309 00000E85 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   310 00000E88 0F84EF0B0000        <1>     je launchChild      ;If so, check externally now
   311 00000E8E 380DD6F3FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   312 00000E94 7529                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   313                              <1>     ;Here they have the same length so lets see if the name is the same
   314 00000E96 56                  <1>     push rsi
   315                              <1>     ;ecx has the length to compare
   316 00000E97 51                  <1>     push rcx
   317 00000E98 488D7301            <1>     lea rsi, qword [rbx + 1]
   318 00000E9C 488D3DC8F3FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   319 00000EA3 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   320 00000EA5 59                  <1>     pop rcx
   321 00000EA6 5E                  <1>     pop rsi
   322 00000EA7 7516                <1>     jne .gotoNextEntry
   323                              <1>     ;Here it was found both strings are equal
   324 00000EA9 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   325 00000EAE 480FB71F            <1>     movzx rbx, word [rdi]
   326 00000EB2 488D3D47F1FFFF      <1>     lea rdi, startLbl
   327 00000EB9 4801FB              <1>     add rbx, rdi
   328 00000EBC FFD3                <1>     call rbx    ;Call this function...
   329                              <1>     return  ;... and return
    19                              <2> %%_ret:
    20 00000EBE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   330                              <1> .gotoNextEntry:
   331 00000EBF 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   332 00000EC6 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   333 00000EC9 EBB7                <1>     jmp short .nextEntry
   334                              <1> .dfltErrExit:
   335 00000ECB 488D15DEF6FFFF      <1>     lea rdx, badCmd
   336 00000ED2 B409                <1>     mov ah, 09h
   337 00000ED4 CD41                <1>     int 41h
   338                              <1>     return
    19                              <2> %%_ret:
    20 00000ED6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   339                              <1> 
   340                              <1> 
   341                              <1> checkExtensionExec:
   342                              <1> ;Checks the extension field of cmdFcb is .COM, .EXE, .BAT in that order
   343                              <1> ;Returns: ZF=ZE if executable. ZF=NZ if not executable.
   344                              <1> ;         If ZF=ZE and CF=CY => Batch file
   345 00000ED7 8B05D4F1FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   346 00000EDD 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   347 00000EE2 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   348 00000EE7 25DFDFDFFF          <1>     and eax, 0FFDFDFDFh ;Uppercase the three letters
   349 00000EEC 3D434F4D20          <1>     cmp eax, "COM "
   350                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000EF1 74(D6)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   351 00000EF3 3D45584520          <1>     cmp eax, "EXE "
   352                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000EF8 74(D6)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   353 00000EFA 3D42415420          <1>     cmp eax, "BAT "
   354                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000EFF 75(D6)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   355 00000F01 F9                  <1>     stc
   356                              <1>     return
    19                              <2> %%_ret:
    20 00000F02 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   357                              <1> 
   358                              <1> checkAndSetupRedir:
   359                              <1> ;Checks and sets up redir as appropriate
   360                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   361                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   362                              <1> ;Output: ZF=NZ => No redir
   363                              <1> ;        ZF=ZY => Redir
   364                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   365                              <1> ;CF=CY if pipe set or an embedded CR found
   366 00000F03 57                  <1>     push rdi
   367 00000F04 3C3C                <1>     cmp al, "<"
   368 00000F06 740B                <1>     je .inputRedir
   369 00000F08 3C3E                <1>     cmp al, ">"
   370 00000F0A 742A                <1>     je .outputRedir
   371 00000F0C 3C7C                <1>     cmp al, "|"
   372 00000F0E 7454                <1>     je .pipeSetup
   373 00000F10 F8                  <1>     clc
   374                              <1> .redirExit:
   375 00000F11 5F                  <1>     pop rdi
   376                              <1>     return
    19                              <2> %%_ret:
    20 00000F12 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   377                              <1> .inputRedir:
   378 00000F13 C60586F1FFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   379 00000F1A 488D3D57F3FFFF      <1>     lea rdi, rdrInFilespec
   380 00000F21 E8DD0F0000          <1>     call skipSpaces ;Skip spaces between < and the filespec
   381 00000F26 E845000000          <1>     call copyCommandTailItem
   382 00000F2B 72E4                <1>     jc .redirExit
   383 00000F2D E8D10F0000          <1>     call skipSpaces
   384 00000F32 30C0                <1>     xor al, al
   385 00000F34 EBDB                <1>     jmp short .redirExit
   386                              <1> .outputRedir:
   387 00000F36 C60564F1FFFF01      <1>     mov byte [redirOut], 1
   388 00000F3D 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   389 00000F40 7506                <1>     jne .notDouble
   390 00000F42 FE0559F1FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   391                              <1> .notDouble:
   392 00000F48 488D3D78F3FFFF      <1>     lea rdi, rdrOutFilespec
   393 00000F4F E8AF0F0000          <1>     call skipSpaces
   394 00000F54 E817000000          <1>     call copyCommandTailItem
   395 00000F59 72B6                <1>     jc .redirExit
   396 00000F5B E8A30F0000          <1>     call skipSpaces
   397 00000F60 30C0                <1>     xor al, al
   398 00000F62 EBAD                <1>     jmp short .redirExit
   399                              <1> .pipeSetup:
   400 00000F64 C60525F1FFFFFF      <1>     mov byte [pipeFlag], -1
   401 00000F6B 30C0                <1>     xor al, al
   402 00000F6D F9                  <1>     stc
   403 00000F6E 5F                  <1>     pop rdi
   404                              <1>     return
    19                              <2> %%_ret:
    20 00000F6F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   405                              <1> 
   406                              <1> copyCommandTailItem:
   407                              <1> ;Copies a sentence from the command tail until a terminator is found.
   408                              <1> ;Stores a terminating null in the destination
   409                              <1> ;Input: rsi = Start of the item to copy
   410                              <1> ;       rdi = Location for copy
   411                              <1> ;Output: Sentence copied with a null terminator inserted.
   412                              <1> ; If CF=CY, embedded CR encountered
   413 00000F70 AC                  <1>     lodsb
   414 00000F71 3C0D                <1>     cmp al, CR
   415 00000F73 741A                <1>     je .endOfInput
   416 00000F75 E8550F0000          <1>     call isALterminator
   417 00000F7A 741A                <1>     jz .exit
   418 00000F7C 3A05A1F0FFFF        <1>     cmp al, byte [pathSep]
   419 00000F82 7412                <1>     je .exit
   420 00000F84 3A059AF0FFFF        <1>     cmp al, byte [switchChar]
   421 00000F8A 740A                <1>     je .exit
   422 00000F8C AA                  <1>     stosb
   423 00000F8D EBE1                <1>     jmp short copyCommandTailItem
   424                              <1> .endOfInput:
   425 00000F8F E802000000          <1>     call .exit
   426 00000F94 F9                  <1>     stc 
   427                              <1>     return
    19                              <2> %%_ret:
    20 00000F95 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   428                              <1> .exit:
   429 00000F96 30C0                <1>     xor al, al
   430 00000F98 AA                  <1>     stosb
   431                              <1>     return
    19                              <2> %%_ret:
    20 00000F99 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   432                              <1> 
   433                              <1> 
   434                              <1> int4Eh:   ;Interrupt interface for parsing and executing command lines
   435                              <1> ;Input: rsi points to the count byte of a command line
   436 00000F9A 4150                <1>     push r8
   437 00000F9C 4151                <1>     push r9
   438 00000F9E B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   439 00000FA0 CD41                <1>     int 41h
   440 00000FA2 52                  <1>     push rdx    ;Save on the stack
   441 00000FA3 488D1D56EFFFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   442 00000FAA B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   443 00000FAC CD41                <1>     int 41h
   444 00000FAE 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   445 00000FB1 4989D9              <1>     mov r9, rbx
   446 00000FB4 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   447 00000FBB B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   448 00000FC0 F348A5              <1>     rep movsq   ;Copy command line over
   449                              <1>     ;call doCommandLine
   450 00000FC3 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   451 00000FC4 B450                <1>     mov ah, 50h ;Set Current PSP
   452 00000FC6 CD41                <1>     int 41h
   453 00000FC8 4159                <1>     pop r9
   454 00000FCA 4158                <1>     pop r8
   455 00000FCC 48CF                <1>     iretq
    15                                  %include "./Source/Utils/COMMAND/Source/cmdFunc.asm"
    16                              <1> ;Note! Each function must setup the DTA to use for itself.
    17                              <1> ;There is no requirement to preserve the DTA across a call.
    18                              <1> ;Only the Int 4Eh entry point will preserve the callers DTA.
    19                              <1> 
    20                              <1> ;Common Error Messages, jumped to to return from
    21                              <1> badParamError:
    22 00000FCE 488D1527F7FFFF      <1>     lea rdx, badParm
    23 00000FD5 EB19                <1>     jmp short badCmn
    24                              <1> badDriveError:
    25 00000FD7 488D15E1F6FFFF      <1>     lea rdx, badDrv
    26 00000FDE EB10                <1>     jmp short badCmn
    27                              <1> badArgError:
    28 00000FE0 488D1592F9FFFF      <1>     lea rdx, badArgs
    29 00000FE7 EB07                <1>     jmp short badCmn
    30                              <1> badDirError:
    31 00000FE9 488D150DF8FFFF      <1>     lea rdx, badDir
    32                              <1> badCmn:
    33 00000FF0 B800090000          <1>     mov eax, 0900h
    34 00000FF5 CD41                <1>     int 41h
    35 00000FF7 F9                  <1>     stc ;Return with CY => Error occured
    36                              <1>     return
    19                              <2> %%_ret:
    20 00000FF8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    37                              <1> 
    38                              <1> dir:
    39 00000FF9 C60596F3FFFF00      <1>     mov byte [dirPrnType], 0    ;Clear DIR flags
    40 00001000 C60590F3FFFF00      <1>     mov byte [dirLineCtr], 0
    41 00001007 C6058AF3FFFF00      <1>     mov byte [dirFileCtr], 0
    42 0000100E C60505F4FFFF00      <1>     mov byte [dirPathArg], 0    ;Null terminate the start of the buffer
    43 00001015 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    43 0000101E 3F                  <1>
    44 0000101F 488D3D74F4FFFF      <1>     lea rdi, dirSrchPat ;Start also by initialising the search pattern
    45 00001026 48AB                <1>     stosq
    46 00001028 48FFC7              <1>     inc rdi ;Go past dot
    47 0000102B 668907              <1>     mov word [rdi], ax
    48 0000102E 884702              <1>     mov byte [rdi + 2], al
    49                              <1>     ;Start by scanning for the switches
    50 00001031 488D3D4CF1FFFF      <1>     lea rdi, cmdBuffer + 1  ;Goto command line input chars count
    51 00001038 0FB60F              <1>     movzx ecx, byte [rdi]   ;Get number of chars typed
    52 0000103B 48FFC7              <1>     inc rdi ;Goto first char typed in
    53 0000103E 4889FE              <1>     mov rsi, rdi    ;Use rsi as start of buffer counter
    54 00001041 8A05DDEFFFFF        <1>     mov al, byte [switchChar]   ;Scan for switchchars
    55                              <1> .switchScan:
    56 00001047 F2AE                <1>     repne scasb ;Scan for a switchchar
    57 00001049 67E322              <1>     jecxz .switchScanDone
    58 0000104C 8A07                <1>     mov al, byte [rdi]  ;Get the byte pointed to by rdi
    59 0000104E 24DF                <1>     and al, 0DFh    ;UC it
    60 00001050 3C57                <1>     cmp al, "W" ;Wide print mode?
    61 00001052 7509                <1>     jne .notWideSw
    62 00001054 800D3BF3FFFF01      <1>     or byte [dirPrnType], 1 ;Set the correct bit
    63 0000105B EBEA                <1>     jmp short .switchScan
    64                              <1> .notWideSw:
    65 0000105D 3C50                <1>     cmp al, "P" ;Pause mode?
    66 0000105F 0F8569FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    67 00001065 800D2AF3FFFF02      <1>     or byte [dirPrnType], 2 ;Set correct bit
    68 0000106C EBD9                <1>     jmp short .switchScan
    69                              <1> .switchScanDone:
    70                              <1> ;If no args, only switches, we search CWD
    71                              <1> ;If one arg, search that 
    72                              <1> ;If more than one, fail
    73 0000106E 488D3510F1FFFF      <1>     lea rsi, cmdBuffer + 2
    74 00001075 E8890E0000          <1>     call skipSpaces ;Skip leading spaces
    75 0000107A 4881C603000000      <1>     add rsi, 3  ;Go past the DIR (always three chars)
    76                              <1> .loop:
    77 00001081 E87D0E0000          <1>     call skipSpaces ;Skip spaces after
    78 00001086 AC                  <1>     lodsb   ;Get first non space char
    79 00001087 E8660E0000          <1>     call isALEndOfCommand   ;If this is the end char CR or "|", exit
    80 0000108C 7442                <1>     jz .eocNoNull
    81 0000108E 3A0590EFFFFF        <1>     cmp al, byte [switchChar]  ;Is al a switch char?
    82 00001094 7509                <1>     jne .notSwitch
    83                              <1>     ;Now we skip the switch if it was a switch
    84 00001096 E8FF0D0000          <1>     call findTerminatorOrEOC    ;Go past the switch
    85 0000109B 7233                <1>     jc .eocNoNull  ;If we reach the EOC, exit,
    86 0000109D EBE2                <1>     jmp short .loop
    87                              <1> .notSwitch:
    88                              <1>     ;If not a switch, should be a path. Copy to buffer and keep searching
    89 0000109F 803D74F3FFFF00      <1>     cmp byte [dirPathArg], 0    ;If a second path provided, error
    90 000010A6 0F8534FFFFFF        <1>     jne badArgError
    91 000010AC 488D3D67F3FFFF      <1>     lea rdi, dirPathArg ;Store the path to search here AS WRITTEN BY USER
    92 000010B3 48FFCE              <1>     dec rsi ;Go back to the start of the string
    93                              <1> .nameCopy:
    94 000010B6 AC                  <1>     lodsb
    95 000010B7 E8360E0000          <1>     call isALEndOfCommand
    96 000010BC 740F                <1>     jz .eocReached
    97 000010BE E80C0E0000          <1>     call isALterminator
    98 000010C3 7403                <1>     jz .terminateCopy
    99 000010C5 AA                  <1>     stosb
   100 000010C6 EBEE                <1>     jmp short .nameCopy
   101                              <1> .terminateCopy:
   102 000010C8 31C0                <1>     xor eax, eax
   103 000010CA AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   104 000010CB EBB4                <1>     jmp short .loop ;Now search if another 
   105                              <1> .eocReached:
   106 000010CD 31C0                <1>     xor eax, eax
   107 000010CF AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   108                              <1> .eocNoNull:
   109 000010D0 803D43F3FFFF00      <1>     cmp byte [dirPathArg], 0    ;If no path provided, use CWD for current drive
   110 000010D7 7434                <1>     je .currentDrv
   111                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   112 000010D9 488D353AF3FFFF      <1>     lea rsi, dirPathArg
   113 000010E0 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   114 000010E4 7527                <1>     jne .currentDrv
   115                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   116 000010E6 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   117 000010EB 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   118 000010EF B801290000          <1>     mov eax, 2901h   ;Parse filename
   119 000010F4 CD41                <1>     int 41h
   120 000010F6 3CFF                <1>     cmp al, -1
   121 000010F8 0F84D9FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   122                              <1>     ;Else the drive in the fcb is valid
   123 000010FE 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   124 00001103 FEC8                <1>     dec al  ;Convert to 0 based drive number
   125 00001105 88058EF2FFFF        <1>     mov byte [dirDrv], al
   126 0000110B EB0B                <1>     jmp short .dirPrintVol
   127                              <1> .currentDrv:
   128 0000110D E8740D0000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   129 00001112 880581F2FFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   130                              <1> .dirPrintVol:
   131 00001118 0FB6057AF2FFFF      <1>     movzx eax, byte [dirDrv] 
   132 0000111F E814070000          <1>     call volume.dirEP
   133 00001124 803DEFF2FFFF00      <1>     cmp byte [dirPathArg], 0    ;Null path here, 
   134 0000112B 7409                <1>     je .printCWD
   135 0000112D 803DE9F2FFFF00      <1>     cmp byte [dirPathArg + 3], 0    ;Was this X:,0?
   136 00001134 7400                <1>     je .printCWD
   137                              <1>     ;Here we have a path
   138                              <1>     ;Temp measure, we just fall through ignoring the path provided
   139                              <1> .printCWD:
   140 00001136 8A155DF2FFFF        <1>     mov dl, byte [dirDrv]
   141 0000113C 88D0                <1>     mov al, dl
   142 0000113E 0441                <1>     add al, "A"
   143 00001140 B43A                <1>     mov ah, ":"
   144 00001142 668905CDF1FFFF      <1>     mov word [searchSpec], ax
   145 00001149 8A05D4EEFFFF        <1>     mov al, byte [pathSep]
   146 0000114F 8805C3F1FFFF        <1>     mov byte [searchSpec + 2], al
   147 00001155 488D35BDF1FFFF      <1>     lea rsi, searchSpec + 3  ;Make space for a X:"\"
   148 0000115C B447                <1>     mov ah, 47h ;Get Current Working Directory
   149 0000115E FEC2                <1>     inc dl  ;Convert to 1 based number
   150 00001160 CD41                <1>     int 41h
   151 00001162 488D3DADF1FFFF      <1>     lea rdi, searchSpec
   152 00001169 E81D0D0000          <1>     call strlen
   153 0000116E FFC9                <1>     dec ecx
   154 00001170 C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   155 00001174 488D15EAF6FFFF      <1>     lea rdx, dirMain
   156 0000117B B409                <1>     mov ah, 09h
   157 0000117D CD41                <1>     int 41h
   158 0000117F 4889FA              <1>     mov rdx, rdi    ;Print the current directory we are working on
   159 00001182 B409                <1>     mov ah, 09h
   160 00001184 CD41                <1>     int 41h
   161 00001186 488D15C9F3FFFF      <1>     lea rdx, crlf2
   162 0000118D B409                <1>     mov ah, 09h
   163 0000118F CD41                <1>     int 41h
   164 00001191 E801000000          <1>     call .searchForFile
   165                              <1>     return
    19                              <2> %%_ret:
    20 00001196 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   166                              <1>     ;If we get no path spec or just a X: path spec then we 
   167                              <1>     ; search the current working directory for that pathspec
   168                              <1>     ;If we get an actual pathspec, we first save the CWD for that drive
   169                              <1>     ; and then we try to make the pathspec the CWD. 
   170                              <1>     ;   If it works, we then search *.* in that folder and return the og CWD.
   171                              <1>     ;   If it fails, we then search one level up, for the search pattern
   172                              <1>     ;    that we compute.
   173                              <1> 
   174                              <1>     
   175                              <1>     ;Now we need to print the path to the folder we will be searching in
   176                              <1> .searchForFile:
   177                              <1>     ;Now we search for the files
   178                              <1>     ;RCX must have the number of chars to the end of the pathspec
   179 00001197 488D3D78F1FFFF      <1>     lea rdi, searchSpec
   180 0000119E 8A057FEEFFFF        <1>     mov al, byte [pathSep]
   181 000011A4 38440FFF            <1>     cmp byte [rdi + rcx - 1], al
   182 000011A8 7405                <1>     je .noAddSlash  ;Deals with special case of root dir
   183 000011AA 88040F              <1>     mov byte [rdi + rcx], al
   184 000011AD FFC1                <1>     inc ecx
   185                              <1> .noAddSlash:
   186 000011AF 488D3C0F            <1>     lea rdi, qword [rdi + rcx]
   187 000011B3 488D35E0F2FFFF      <1>     lea rsi, dirSrchPat
   188 000011BA 4889FA              <1>     mov rdx, rdi    ;Ptr to search for in rdx
   189 000011BD 48A5                <1>     movsq
   190 000011BF A5                  <1>     movsd
   191 000011C0 30C0                <1>     xor al, al
   192 000011C2 AA                  <1>     stosb   ;Store the terminating null
   193 000011C3 B911000000          <1>     mov ecx, dirReadOnly | dirDirectory
   194 000011C8 B44E                <1>     mov ah, 4Eh ;Find first
   195 000011CA CD41                <1>     int 41h
   196 000011CC 720B                <1>     jc .dirNoMoreFiles
   197                              <1> .findNext:
   198 000011CE E876000000          <1>     call .dirPrintFileData  ;Print the file information
   199 000011D3 B44F                <1>     mov ah, 4Fh
   200 000011D5 CD41                <1>     int 41h
   201 000011D7 73F5                <1>     jnc .findNext 
   202                              <1> .dirNoMoreFiles:
   203 000011D9 F605B6F1FFFF01      <1>     test byte [dirPrnType], 1
   204 000011E0 740B                <1>     jz .dirNoEndNewLine
   205 000011E2 488D156AF3FFFF      <1>     lea rdx, crlf   ;Only need this for /W
   206 000011E9 B409                <1>     mov ah, 09h
   207 000011EB CD41                <1>     int 41h
   208                              <1> .dirNoEndNewLine:
   209                              <1>     ;Now we print the number of files and the number of bytes on the disk
   210 000011ED 488D15E7F8FFFF      <1>     lea rdx, fourSpc
   211 000011F4 B409                <1>     mov ah, 09h
   212 000011F6 CD41                <1>     int 41h
   213 000011F8 B409                <1>     mov ah, 09h ;Print four Spaces twice
   214 000011FA CD41                <1>     int 41h
   215 000011FC 0FB60595F1FFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   216 00001203 E8AC0E0000          <1>     call printDecimalWord
   217 00001208 488D158FF4FFFF      <1>     lea rdx, dirOk
   218 0000120F B409                <1>     mov ah, 09h
   219 00001211 CD41                <1>     int 41h
   220 00001213 488D15C6F8FFFF      <1>     lea rdx, threeSpc
   221 0000121A B409                <1>     mov ah, 09h
   222 0000121C CD41                <1>     int 41h
   223 0000121E B800360000          <1>     mov eax, 3600h ;Get disk info
   224 00001223 8A1570F1FFFF        <1>     mov dl, byte [dirDrv]
   225 00001229 CD41                <1>     int 41h ;Get disk free space info
   226 0000122B 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   227 0000122E 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   228 00001231 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   229 00001233 F7E1                <1>     mul ecx ;Get bytes per cluster
   230 00001235 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   231                              <1>     ;rax now has the number of free bytes on the disk
   232 00001238 E8770E0000          <1>     call printDecimalWord
   233 0000123D 488D1564F4FFFF      <1>     lea rdx, bytesOk
   234 00001244 B409                <1>     mov ah, 09h
   235 00001246 CD41                <1>     int 41h
   236                              <1>     return
    19                              <2> %%_ret:
    20 00001248 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   237                              <1> 
   238                              <1> .dirPrintFileData:
   239                              <1> ;Use fcbCmdSpec to build the file name with space
   240                              <1> ;Start by print the name (same for both cases)
   241 00001249 488D3586EEFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   242 00001250 488D3DFBEFFFFF      <1>     lea rdi, fcbCmdSpec
   243 00001257 E8000D0000          <1>     call asciiFilenameToFCB
   244 0000125C 488D15EFEFFFFF      <1>     lea rdx, fcbCmdSpec
   245 00001263 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   246 00001268 BB01000000          <1>     mov ebx, 1  ;STDOUT
   247 0000126D B440                <1>     mov ah, 40h ;Write handle
   248 0000126F CD41                <1>     int 41h
   249 00001271 52                  <1>     push rdx
   250 00001272 B220                <1>     mov dl, " "
   251 00001274 B402                <1>     mov ah, 02h ;Print char
   252 00001276 CD41                <1>     int 41h
   253 00001278 5A                  <1>     pop rdx
   254 00001279 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   255 00001280 B903000000          <1>     mov ecx, 3  ;Print three chars
   256 00001285 BB01000000          <1>     mov ebx, 1  ;STDOUT
   257 0000128A B440                <1>     mov ah, 40h ;Write handle
   258 0000128C CD41                <1>     int 41h
   259 0000128E F60501F1FFFF01      <1>     test byte [dirPrnType], 1
   260 00001295 0F85A8000000        <1>     jnz .widePrint
   261                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   262                              <1>     ;Now check if a DIR
   263 0000129B F6052BEEFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   264 000012A2 7418                <1>     jz .dirPrintNotDir
   265 000012A4 488D150BF4FFFF      <1>     lea rdx, dirLbl
   266 000012AB B409                <1>     mov ah, 09h
   267 000012AD CD41                <1>     int 41h
   268 000012AF 488D152AF8FFFF      <1>     lea rdx, threeSpc
   269 000012B6 B409                <1>     mov ah, 09h
   270 000012B8 CD41                <1>     int 41h
   271 000012BA EB4F                <1>     jmp short .dirPrintFileDT
   272                              <1> .dirPrintNotDir:
   273                              <1> ;Here we print the file size
   274 000012BC B220                <1>     mov dl, " "
   275 000012BE B402                <1>     mov ah, 02h
   276 000012C0 CD41                <1>     int 41h
   277 000012C2 8B050AEEFFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   278 000012C8 E8580E0000          <1>     call getDecimalWord
   279 000012CD 4889CB              <1>     mov rbx, rcx
   280 000012D0 51                  <1>     push rcx
   281 000012D1 480FCB              <1>     bswap rbx
   282 000012D4 B908000000          <1>     mov ecx, 8
   283                              <1> .dirPrintFileSizePrep:
   284 000012D9 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   285 000012DB 7514                <1>     jne .dirPrintFileSize
   286 000012DD B402                <1>     mov ah, 02h
   287 000012DF B220                <1>     mov dl, " "
   288 000012E1 CD41                <1>     int 41h
   289 000012E3 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   290 000012E7 FFC9                <1>     dec ecx
   291 000012E9 81F901000000        <1>     cmp ecx, 1
   292 000012EF 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   293                              <1> .dirPrintFileSize:
   294 000012F1 5B                  <1>     pop rbx
   295                              <1> .dirPrintFileSizeLoop:
   296 000012F2 88DA                <1>     mov dl, bl
   297 000012F4 B402                <1>     mov ah, 02h
   298 000012F6 CD41                <1>     int 41h
   299 000012F8 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   300 000012FC FFC9                <1>     dec ecx
   301 000012FE 75F2                <1>     jnz .dirPrintFileSizeLoop
   302 00001300 488D15DDF7FFFF      <1>     lea rdx, twoSpc
   303 00001307 B409                <1>     mov ah, 09h
   304 00001309 CD41                <1>     int 41h
   305                              <1> .dirPrintFileDT:
   306 0000130B B220                <1>     mov dl, " "
   307 0000130D B402                <1>     mov ah, 02h
   308 0000130F CD41                <1>     int 41h
   309 00001311 0FB705B8EDFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   310 00001318 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   311 0000131A E8BD080000          <1>     call printDate
   312 0000131F 488D15BEF7FFFF      <1>     lea rdx, twoSpc
   313 00001326 B409                <1>     mov ah, 09h
   314 00001328 CD41                <1>     int 41h
   315 0000132A 0FB7059DEDFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   316 00001331 E8C8090000          <1>     call printTime
   317 00001336 488D1516F2FFFF      <1>     lea rdx, crlf
   318 0000133D B409                <1>     mov ah, 09h
   319 0000133F CD41                <1>     int 41h
   320 00001341 EB0B                <1>     jmp short .dirPrintNameExit
   321                              <1> .widePrint:
   322                              <1> ;If /W, print name space ext space space space space
   323 00001343 488D1591F7FFFF      <1>     lea rdx, fourSpc
   324 0000134A B409                <1>     mov ah, 09h ;Print string
   325 0000134C CD41                <1>     int 41h
   326                              <1> .dirPrintNameExit:
   327 0000134E FE0544F0FFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   328 00001354 FE053DF0FFFF        <1>     inc byte [dirLineCtr]
   329 0000135A 803D36F0FFFF17      <1>     cmp byte [dirLineCtr], 23
   330                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 00001361 7401                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 00001363 C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   331 00001364 488D1572F3FFFF      <1>     lea rdx, pauseMes
   332 0000136B B409                <1>     mov ah, 09h
   333 0000136D CD41                <1>     int 41h
   334 0000136F B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   335 00001371 CD41                <1>     int 41h
   336 00001373 C6051DF0FFFF00      <1>     mov byte [dirLineCtr], 0
   337 0000137A 488D15D2F1FFFF      <1>     lea rdx, crlf   ;Force new line
   338 00001381 B409                <1>     mov ah, 09h
   339 00001383 CD41                <1>     int 41h
   340                              <1>     return
    19                              <2> %%_ret:
    20 00001385 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   341                              <1> 
   342                              <1> chdir:
   343 00001386 F60515EDFFFFFF      <1>     test byte [arg1Flg], -1
   344 0000138D 754D                <1>     jnz .changeDir
   345                              <1>     ;Print CWD
   346                              <1> .printCWD:
   347 0000138F E84B0A0000          <1>     call putCWDInPrompt ;Exactly the same procedure
   348 00001394 E82D080000          <1>     call printCRLF
   349                              <1>     return
    19                              <2> %%_ret:
    20 00001399 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   350                              <1> .printDiskCWD:
   351                              <1> ;Print CWD for a specified drive
   352 0000139A 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   353 0000139E 88D0                <1>     mov al, dl
   354 000013A0 0440                <1>     add al, "@" ;Get the UC letter
   355 000013A2 B43A                <1>     mov ah, ":"
   356 000013A4 488D3D6BEFFFFF      <1>     lea rdi, searchSpec
   357 000013AB 66AB                <1>     stosw   ;Store X:, rdi+=2
   358 000013AD 8A0570ECFFFF        <1>     mov al, byte [pathSep]
   359 000013B3 AA                  <1>     stosb   ;Store pathSep, inc rdi
   360 000013B4 B447                <1>     mov ah, 47h ;Get Current Working Directory
   361 000013B6 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   362 000013B9 CD41                <1>     int 41h
   363 000013BB E8CB0A0000          <1>     call strlen
   364 000013C0 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   365 000013C6 B440                <1>     mov ah, 40h ;Write to handle
   366 000013C8 BB01000000          <1>     mov ebx, 1  ;STDOUT
   367 000013CD 488D1542EFFFFF      <1>     lea rdx, searchSpec
   368 000013D4 CD41                <1>     int 41h
   369 000013D6 E8EB070000          <1>     call printCRLF
   370                              <1>     return
    19                              <2> %%_ret:
    20 000013DB C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   371                              <1> .changeDir:
   372 000013DC 8A05C2ECFFFF        <1>     mov al, byte [arg1FCBret]
   373 000013E2 3CFF                <1>     cmp al, -1 
   374 000013E4 0F84EDFBFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   375 000013EA 4180785D20          <1>     cmp byte [r8 + fcb1 + fcb.filename], " "
   376 000013EF 7520                <1>     jne .getFQPath
   377                              <1>     ;Now we double check that on the command line we have . or ..
   378 000013F1 0FB605ABECFFFF      <1>     movzx eax, byte [arg1Off]
   379 000013F8 488D3584EDFFFF      <1>     lea rsi, cmdBuffer
   380 000013FF 4801C6              <1>     add rsi, rax
   381 00001402 8A051BECFFFF        <1>     mov al, byte [pathSep]
   382 00001408 3806                <1>     cmp byte [rsi], al  ;Is the first char a pathsep?
   383 0000140A 7405                <1>     je .getFQPath
   384 0000140C 803E2E              <1>     cmp byte [rsi], "."
   385 0000140F 7589                <1>     jne .printDiskCWD
   386                              <1>     ;If the path is . or .., its acceptable, else fail
   387                              <1> .getFQPath:
   388 00001411 E8D00B0000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   389 00001416 0F82CDFBFFFF        <1>     jc badDirError  ;If this returns CF=CY, its a badDir
   390 0000141C 488D15F3EEFFFF      <1>     lea rdx, searchSpec
   391 00001423 B43B                <1>     mov ah, 3Bh ;CHDIR
   392 00001425 CD41                <1>     int 41h
   393 00001427 0F82BCFBFFFF        <1>     jc badDirError
   394                              <1>     return
    19                              <2> %%_ret:
    20 0000142D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   395                              <1> 
   396                              <1> mkdir:
   397 0000142E F6056DECFFFFFF      <1>     test byte [arg1Flg], -1
   398 00001435 0F84A5FBFFFF        <1>     jz badArgError
   399 0000143B F60563ECFFFFFF      <1>     test byte [arg2Flg], -1
   400 00001442 0F8598FBFFFF        <1>     jnz badArgError
   401                              <1>     ;We have exactly one argument
   402 00001448 8A0556ECFFFF        <1>     mov al, byte [arg1FCBret]
   403 0000144E 3CFF                <1>     cmp al, -1 
   404 00001450 0F8481FBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   405 00001456 E88B0B0000          <1>     call buildCommandPath
   406 0000145B 7215                <1>     jc .badMake
   407 0000145D 488D15B2EEFFFF      <1>     lea rdx, searchSpec
   408 00001464 B800390000          <1>     mov eax, 3900h  ;MKDIR
   409 00001469 CD41                <1>     int 41h
   410 0000146B 7205                <1>     jc .badMake   ;Return if not carry
   411 0000146D B40D                <1>     mov ah, 0Dh
   412 0000146F CD41                <1>     int 41h ;Flush to disk
   413                              <1>     return
    19                              <2> %%_ret:
    20 00001471 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   414                              <1> .badMake:   ;Else, bad make
   415 00001472 488D1598F3FFFF      <1>     lea rdx, badMD
   416 00001479 B800090000          <1>     mov eax, 0900h
   417 0000147E CD41                <1>     int 41h
   418                              <1>     return
    19                              <2> %%_ret:
    20 00001480 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   419                              <1> 
   420                              <1> rmdir:
   421 00001481 F6051AECFFFFFF      <1>     test byte [arg1Flg], -1
   422 00001488 0F8452FBFFFF        <1>     jz badArgError
   423 0000148E F60510ECFFFFFF      <1>     test byte [arg2Flg], -1
   424 00001495 0F8545FBFFFF        <1>     jnz badArgError
   425                              <1>     ;We have exactly one argument
   426 0000149B 8A0503ECFFFF        <1>     mov al, byte [arg1FCBret]
   427 000014A1 3CFF                <1>     cmp al, -1 
   428 000014A3 0F842EFBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   429 000014A9 E8380B0000          <1>     call buildCommandPath
   430 000014AE 7215                <1>     jc .badRemove
   431 000014B0 488D155FEEFFFF      <1>     lea rdx, searchSpec
   432 000014B7 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   433 000014BC CD41                <1>     int 41h
   434 000014BE 7205                <1>     jc .badRemove   ;Return if not carry
   435 000014C0 B40D                <1>     mov ah, 0Dh
   436 000014C2 CD41                <1>     int 41h ;Flush to disk
   437                              <1>     return
    19                              <2> %%_ret:
    20 000014C4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   438                              <1> .badRemove:   ;Else, bad make
   439 000014C5 488D1562F3FFFF      <1>     lea rdx, badRD
   440 000014CC B800090000          <1>     mov eax, 0900h
   441 000014D1 CD41                <1>     int 41h
   442                              <1>     return
    19                              <2> %%_ret:
    20 000014D3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   443                              <1> 
   444                              <1> copy:
   445                              <1>     return
    19                              <2> %%_ret:
    20 000014D4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   446                              <1> erase:
   447                              <1>     return
    19                              <2> %%_ret:
    20 000014D5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   448                              <1> date:
   449 000014D6 488D1557F2FFFF      <1>     lea rdx, curDate
   450 000014DD B409                <1>     mov ah, 09h
   451 000014DF CD41                <1>     int 41h
   452 000014E1 B42A                <1>     mov ah, 2Ah ;DOS get date
   453 000014E3 CD41                <1>     int 41h
   454                              <1> 	;AL = day of the week (0=Sunday)
   455                              <1> 	;CX = year (1980-2099)
   456                              <1> 	;DH = month (1-12)
   457                              <1> 	;DL = day (1-31)
   458 000014E5 66890DCEEFFFFF      <1>     mov word [td1], cx
   459 000014EC 8815CAEFFFFF        <1>     mov byte [td3], dl
   460 000014F2 8835C5EFFFFF        <1>     mov byte [td4], dh
   461 000014F8 0FB6C0              <1>     movzx eax, al
   462 000014FB 89C3                <1>     mov ebx, eax
   463 000014FD D1E3                <1>     shl ebx, 1   ;Multiply by 2
   464 000014FF 01D8                <1>     add eax, ebx ;Make it 3 times 
   465 00001501 488D1508F2FFFF      <1>     lea rdx, dayName
   466 00001508 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   467 0000150C B903000000          <1>     mov ecx, 3  ;Print three chars
   468 00001511 BB01000000          <1>     mov ebx, 1  ;STDOUT
   469 00001516 B440                <1>     mov ah, 40h ;Write to handle
   470 00001518 CD41                <1>     int 41h
   471 0000151A B220                <1>     mov dl, " "
   472 0000151C B402                <1>     mov ah, 02h
   473 0000151E CD41                <1>     int 41h
   474                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   475                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   476                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   477 00001520 0FB70593EFFFFF      <1>     movzx eax, word [td1]   ;Get this word
   478 00001527 C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   479 0000152A 0FB61D8CEFFFFF      <1>     movzx ebx, byte [td4]
   480 00001531 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   481 00001534 09D8                <1>     or eax, ebx ;Add this date to eax
   482 00001536 0FB61D7FEFFFFF      <1>     movzx ebx, byte [td3]
   483 0000153D 09D8                <1>     or eax, ebx
   484 0000153F BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   485 00001544 E893060000          <1>     call printDate
   486                              <1> 
   487 00001549 488D15F5F1FFFF      <1>     lea rdx, newDate
   488 00001550 B409                <1>     mov ah, 09h
   489 00001552 CD41                <1>     int 41h
   490 00001554 488D1509F2FFFF      <1>     lea rdx, ukDate
   491 0000155B 488D05F5F1FFFF      <1>     lea rax, usDate
   492 00001562 488D1D08F2FFFF      <1>     lea rbx, jpDate
   493 00001569 803DB5EAFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   494 00001570 480F47D3            <1>     cmova rdx, rbx
   495 00001574 480F42D0            <1>     cmovb rdx, rax
   496 00001578 B409                <1>     mov ah, 09h
   497 0000157A CD41                <1>     int 41h
   498                              <1> 
   499 0000157C 498D9080000000      <1>     lea rdx, qword [r8 + cmdLineCnt]
   500 00001583 B40A                <1>     mov ah, 0Ah
   501 00001585 CD41                <1>     int 41h
   502 00001587 52                  <1>     push rdx
   503 00001588 488D15C4EFFFFF      <1>     lea rdx, crlf
   504 0000158F B409                <1>     mov ah, 09h
   505 00001591 CD41                <1>     int 41h
   506 00001593 5A                  <1>     pop rdx
   507 00001594 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   508                              <1>     rete    ;Exit!
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 00001598 7501                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 0000159A C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   509                              <1>     return
    19                              <2> %%_ret:
    20 0000159B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   510                              <1> 
   511                              <1> time:
   512 0000159C 488D15EAF1FFFF      <1>     lea rdx, curTime
   513 000015A3 B409                <1>     mov ah, 09h
   514 000015A5 CD41                <1>     int 41h
   515 000015A7 B42C                <1>     mov ah, 2Ch ;DOS get time
   516 000015A9 CD41                <1>     int 41h
   517                              <1>     ;CH = hour (0-23)
   518                              <1> 	;CL = minutes (0-59)
   519                              <1> 	;DH = seconds (0-59)
   520                              <1> 	;DL = hundredths (0-99)
   521 000015AB 880D09EFFFFF        <1>     mov byte [td1], cl
   522 000015B1 882D04EFFFFF        <1>     mov byte [td2], ch
   523 000015B7 8815FFEEFFFF        <1>     mov byte [td3], dl
   524 000015BD 8835FAEEFFFF        <1>     mov byte [td4], dh
   525 000015C3 0FB6C5              <1>     movzx eax, ch
   526 000015C6 E8A5070000          <1>     call printTime.printHours
   527                              <1> 
   528 000015CB 8A1561EAFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   529 000015D1 B402                <1>     mov ah, 02h
   530 000015D3 CD41                <1>     int 41h
   531                              <1> 
   532 000015D5 0FB605DEEEFFFF      <1>     movzx eax, byte [td1]   ;Minutes
   533 000015DC E87F070000          <1>     call printTime.printMinutesAlt
   534                              <1> 
   535 000015E1 8A154BEAFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   536 000015E7 B402                <1>     mov ah, 02h
   537 000015E9 CD41                <1>     int 41h
   538                              <1> 
   539 000015EB 0FB605CBEEFFFF      <1>     movzx eax, byte [td4]   ;Seconds
   540 000015F2 E869070000          <1>     call printTime.printMinutesAlt
   541                              <1> 
   542 000015F7 B22E                <1>     mov dl, "."
   543 000015F9 B402                <1>     mov ah, 02h
   544 000015FB CD41                <1>     int 41h
   545                              <1> 
   546 000015FD 0FB605B8EEFFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   547 00001604 E857070000          <1>     call printTime.printMinutesAlt
   548                              <1> 
   549 00001609 488D158EF1FFFF      <1>     lea rdx, newTime
   550 00001610 B409                <1>     mov ah, 09h
   551 00001612 CD41                <1>     int 41h
   552                              <1> 
   553 00001614 498D9080000000      <1>     lea rdx, qword [r8 + cmdLineCnt]
   554 0000161B B40A                <1>     mov ah, 0Ah
   555 0000161D CD41                <1>     int 41h
   556 0000161F 52                  <1>     push rdx
   557 00001620 488D152CEFFFFF      <1>     lea rdx, crlf
   558 00001627 B409                <1>     mov ah, 09h
   559 00001629 CD41                <1>     int 41h
   560 0000162B 5A                  <1>     pop rdx
   561 0000162C 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   562                              <1>     rete    ;Exit!
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 00001630 7501                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 00001632 C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   563                              <1>     return
    19                              <2> %%_ret:
    20 00001633 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   564                              <1> ctty:
   565                              <1>     return
    19                              <2> %%_ret:
    20 00001634 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   566                              <1> cls:  
   567 00001635 B800440000          <1>     mov eax, 4400h  ;Get device info
   568 0000163A BB01000000          <1>     mov ebx, 1      ;for handle 1
   569 0000163F CD41                <1>     int 41h         ;in dx
   570 00001641 F7C280000000        <1>     test edx, devCharDev
   571 00001647 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   572 00001649 F7C210000000        <1>     test edx, charDevFastOut
   573 0000164F 743E                <1>     jz .doAnsi
   574                              <1>     ;Test if Int 49h uses Int 30h
   575                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   576                              <1>     ;Int 49h MUST be terminated with a IRETQ, within 1024 bytes
   577 00001651 B849350000          <1>     mov eax, 3549h  ;Get the vector for interrupt 49h
   578 00001656 CD41                <1>     int 41h
   579                              <1> .biosCheck:
   580 00001658 66813BCD30          <1>     cmp word [rbx], 30CDh
   581 0000165D 740C                <1>     je .biosConfirmed
   582 0000165F 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   583 00001664 7429                <1>     je .doAnsi
   584 00001666 48FFC3              <1>     inc rbx
   585 00001669 EBED                <1>     jmp short .biosCheck
   586                              <1> .biosConfirmed:
   587                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   588 0000166B B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   589 0000166D 31DB                <1>     xor ebx, ebx
   590 0000166F CD30                <1>     int 30h
   591 00001671 B40F                <1>     mov ah, 0Fh ;Get screen mode
   592 00001673 CD30                <1>     int 30h
   593 00001675 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   594 00001678 FECA                <1>     dec dl
   595 0000167A B619                <1>     mov dh, 25  ;Number of rows is standard
   596 0000167C 31C0                <1>     xor eax, eax
   597 0000167E 89C1                <1>     mov ecx, eax
   598 00001680 B707                <1>     mov bh, 7   ;Screen attributes
   599 00001682 B406                <1>     mov ah, 6   ;Scroll
   600 00001684 CD30                <1>     int 30h
   601 00001686 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   602 00001688 B700                <1>     mov bh, 0   ;Page 0
   603 0000168A B402                <1>     mov ah, 2
   604 0000168C CD30                <1>     int 30h
   605                              <1>     return
    19                              <2> %%_ret:
    20 0000168E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   606                              <1> .doAnsi:
   607                              <1> ;If an ANSI driver is not installed, this will simply insert blank lines
   608                              <1> ;4 chars in the ansi routine
   609                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   610                              <1> ; understand ANSI codes
   611 0000168F 488D3541F4FFFF      <1>     lea rsi, ansiCls
   612 00001696 B904000000          <1>     mov ecx, 4
   613 0000169B B406                <1>     mov ah, 06h ;Raw char output
   614                              <1> .ansiLp:
   615 0000169D AC                  <1>     lodsb   ;Get the char in 
   616 0000169E 88C2                <1>     mov dl, al
   617 000016A0 CD41                <1>     int 41h
   618 000016A2 FFC9                <1>     dec ecx
   619 000016A4 75F7                <1>     jnz .ansiLp
   620                              <1>     return
    19                              <2> %%_ret:
    20 000016A6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   621                              <1> 
   622                              <1> break:
   623 000016A7 F605F4E9FFFFFF      <1>     test byte [arg1Flg], -1
   624 000016AE 752D                <1>     jnz .argumentProvided
   625                              <1>     ;Here we just get the status of break
   626 000016B0 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   627 000016B5 CD41                <1>     int 41h
   628 000016B7 88D3                <1>     mov bl, dl
   629 000016B9 488D157FF2FFFF      <1>     lea rdx, breakIs
   630 000016C0 B409                <1>     mov ah, 09h
   631 000016C2 CD41                <1>     int 41h
   632 000016C4 488D156FF2FFFF      <1>     lea rdx, onMes
   633 000016CB 488D0D62F2FFFF      <1>     lea rcx, offMes
   634 000016D2 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   635 000016D4 480F44D1            <1>     cmovz rdx, rcx
   636 000016D8 B409                <1>     mov ah, 09h
   637 000016DA CD41                <1>     int 41h
   638                              <1>     return
    19                              <2> %%_ret:
    20 000016DC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   639                              <1> .argumentProvided:
   640 000016DD 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   641 000016E1 AD                  <1>     lodsd   ;Read the word
   642 000016E2 89C3                <1>     mov ebx, eax
   643 000016E4 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   644 000016E9 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   645 000016EC 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   646 000016F1 7416                <1>     je .maybeOn
   647 000016F3 663D4F46            <1>     cmp ax, "OF"
   648 000016F7 7523                <1>     jne .badOnOff
   649 000016F9 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   650 000016FE 6681FB4620          <1>     cmp bx, "F "
   651 00001703 7517                <1>     jne .badOnOff
   652                              <1>     ;Set off
   653 00001705 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   654 00001707 EB0B                <1>     jmp short .setBreak
   655                              <1> .maybeOn:
   656 00001709 663D4F4E            <1>     cmp ax, "ON"
   657 0000170D 750D                <1>     jne .badOnOff
   658                              <1>     ;Set on
   659 0000170F BA01000000          <1>     mov edx, 1
   660                              <1> .setBreak:
   661 00001714 B801330000          <1>     mov eax, 3301h  ;Set break
   662 00001719 CD41                <1>     int 41h
   663                              <1>     return
    19                              <2> %%_ret:
    20 0000171B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   664                              <1> .badOnOff:
   665 0000171C 488D15C4F3FFFF      <1>     lea rdx, badOnOff
   666 00001723 B409                <1>     mov ah, 09h
   667 00001725 CD41                <1>     int 41h
   668                              <1>     return
    19                              <2> %%_ret:
    20 00001727 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   669                              <1> 
   670                              <1> verify:
   671 00001728 F60573E9FFFFFF      <1>     test byte [arg1Flg], -1
   672 0000172F 752D                <1>     jnz .argumentProvided
   673                              <1>     ;Here we just get the status of break
   674 00001731 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
   675 00001736 CD41                <1>     int 41h
   676 00001738 88C3                <1>     mov bl, al
   677 0000173A 488D1508F2FFFF      <1>     lea rdx, verifyIs
   678 00001741 B409                <1>     mov ah, 09h
   679 00001743 CD41                <1>     int 41h
   680 00001745 488D15EEF1FFFF      <1>     lea rdx, onMes
   681 0000174C 488D0DE1F1FFFF      <1>     lea rcx, offMes
   682 00001753 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   683 00001755 480F44D1            <1>     cmovz rdx, rcx
   684 00001759 B409                <1>     mov ah, 09h
   685 0000175B CD41                <1>     int 41h
   686                              <1>     return
    19                              <2> %%_ret:
    20 0000175D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   687                              <1> .argumentProvided:
   688 0000175E 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   689 00001762 AD                  <1>     lodsd   ;Read the word
   690 00001763 89C3                <1>     mov ebx, eax
   691 00001765 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   692 0000176A C1EB10              <1>     shr ebx, 10h     ;Get high word low
   693 0000176D 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   694 00001772 7416                <1>     je .maybeOn
   695 00001774 663D4F46            <1>     cmp ax, "OF"
   696 00001778 751F                <1>     jne .badOnOff
   697 0000177A 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   698 0000177F 6681FB4620          <1>     cmp bx, "F "
   699 00001784 7513                <1>     jne .badOnOff
   700                              <1>     ;Set off
   701 00001786 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
   702 00001788 EB0A                <1>     jmp short .setVerify
   703                              <1> .maybeOn:
   704 0000178A 663D4F4E            <1>     cmp ax, "ON"
   705 0000178E 7509                <1>     jne .badOnOff
   706                              <1>     ;Set on
   707 00001790 31C0                <1>     xor eax, eax
   708 00001792 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
   709                              <1> .setVerify:
   710 00001794 B42E                <1>     mov ah, 2Eh  ;Set Verify
   711 00001796 CD41                <1>     int 41h
   712                              <1>     return
    19                              <2> %%_ret:
    20 00001798 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   713                              <1> .badOnOff:
   714 00001799 488D1547F3FFFF      <1>     lea rdx, badOnOff
   715 000017A0 B409                <1>     mov ah, 09h
   716 000017A2 CD41                <1>     int 41h
   717                              <1>     return
    19                              <2> %%_ret:
    20 000017A4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   718                              <1> 
   719                              <1> rename:
   720                              <1>     return
    19                              <2> %%_ret:
    20 000017A5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   721                              <1> truename:
   722 000017A6 F605F5E8FFFFFF      <1>     test byte [arg1Flg], -1
   723 000017AD 0F842DF8FFFF        <1>     jz badArgError
   724 000017B3 E82E080000          <1>     call buildCommandPath
   725                              <1>     ;Explicitly call Truename if we remove truename from this function
   726 000017B8 488D3D57EBFFFF      <1>     lea rdi, searchSpec
   727 000017BF E8C7060000          <1>     call strlen
   728 000017C4 FFC9                <1>     dec ecx ;Don't print terminating null
   729 000017C6 488D1549EBFFFF      <1>     lea rdx, searchSpec
   730 000017CD BB01000000          <1>     mov ebx, 01
   731 000017D2 B440                <1>     mov ah, 40h
   732 000017D4 CD41                <1>     int 41h
   733 000017D6 E8EB030000          <1>     call printCRLF
   734                              <1>     return
    19                              <2> %%_ret:
    20 000017DB C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   735                              <1> 
   736                              <1> volume:
   737 000017DC 488D35A2E9FFFF      <1>     lea rsi, cmdBuffer + 2  ;Get the command buffer
   738 000017E3 E81B070000          <1>     call skipSpaces
   739 000017E8 4881C603000000      <1>     add rsi, 3  ;Go past the VOL command
   740 000017EF E80F070000          <1>     call skipSpaces
   741 000017F4 AC                  <1>     lodsb   ;Get the first char, and point rsi to next char
   742 000017F5 E8F8060000          <1>     call isALEndOfCommand   ;If this char is end of command, use current drive
   743 000017FA 7507                <1>     jnz .checkDriveLetter
   744 000017FC E885060000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
   745 00001801 EB35                <1>     jmp short .dirEP
   746                              <1> .checkDriveLetter:
   747 00001803 803E3A              <1>     cmp byte [rsi], ":" ;If this is not a :, fail
   748 00001806 0F85CBF7FFFF        <1>     jne badDriveError
   749 0000180C 4889F7              <1>     mov rdi, rsi    ;Save start of drive spec in rsi
   750 0000180F 48FFC6              <1>     inc rsi  ;Go past the X: spec
   751 00001812 E8EC060000          <1>     call skipSpaces
   752 00001817 AC                  <1>     lodsb   ;Get the non-space char in al
   753 00001818 E8D5060000          <1>     call isALEndOfCommand   ;The next non-space char must be terminator
   754 0000181D 0F85B4F7FFFF        <1>     jne badDriveError
   755                              <1> ;This argument should've been parsed into FCB1 so use that result
   756 00001823 8A057BE8FFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
   757 00001829 A8FF                <1>     test al, -1
   758 0000182B 0F85A6F7FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
   759 00001831 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
   760 00001836 FFC8                <1>     dec eax ;Convert to 0 based number
   761                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al
   762 00001838 0541000000          <1>     add eax, "A" ;Get ASCII representation of 0 based number
   763 0000183D 880570ECFFFF        <1>     mov byte [volPathBuf], al   ;Store ASCII letter here
   764 00001843 488D156EE8FFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   765 0000184A B41A                <1>     mov ah, 1Ah
   766 0000184C CD41                <1>     int 41h
   767 0000184E 488D155EECFFFF      <1>     lea rdx, volPathBuf
   768 00001855 66B90800            <1>     mov cx, dirVolumeID
   769 00001859 B44E                <1>     mov ah, 4Eh ;Find first
   770 0000185B CD41                <1>     int 41h
   771 0000185D 7221                <1>     jc .skipVolLbl
   772 0000185F 488D3570E8FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   773 00001866 488D3D39ECFFFF      <1>     lea rdi, volLblSpc
   774 0000186D B90B000000          <1>     mov ecx, 11 ;Get the 11 chars of the volume label
   775                              <1> .dirLblCopy:
   776 00001872 AC                  <1>     lodsb   ;Get the first char
   777 00001873 3C00                <1>     cmp al, 0
   778 00001875 7409                <1>     je .skipVolLbl  ;Jump with CF=NC
   779 00001877 3C2E                <1>     cmp al, "."
   780 00001879 7401                <1>     je .dirLblSkipStore
   781 0000187B AA                  <1>     stosb
   782                              <1> .dirLblSkipStore:
   783 0000187C FFC9                <1>     dec ecx
   784 0000187E 75F2                <1>     jnz .dirLblCopy
   785                              <1>     ;Fallthru with CF=NC
   786                              <1> .skipVolLbl:
   787                              <1> ;Print volume label information now
   788                              <1> ;Propagates the CF if CF was set    
   789 00001880 9C                  <1>     pushfq
   790 00001881 488D15CBECFFFF      <1>     lea rdx, crlf
   791 00001888 B409                <1>     mov ah, 09h
   792 0000188A CD41                <1>     int 41h
   793 0000188C 488D1545EFFFFF      <1>     lea rdx, volMes
   794 00001893 B409                <1>     mov ah, 09h
   795 00001895 CD41                <1>     int 41h
   796 00001897 8A1516ECFFFF        <1>     mov dl, byte [volPathBuf]   ;Print the drive letter out
   797 0000189D B402                <1>     mov ah, 02h
   798 0000189F CD41                <1>     int 41h
   799 000018A1 9D                  <1>     popfq
   800 000018A2 7317                <1>     jnc .volIDOk
   801 000018A4 488D1544EFFFFF      <1>     lea rdx, volNo
   802 000018AB B409                <1>     mov ah, 09h
   803 000018AD CD41                <1>     int 41h
   804 000018AF 488D159DECFFFF      <1>     lea rdx, crlf
   805 000018B6 B409                <1>     mov ah, 09h
   806 000018B8 CD41                <1>     int 41h
   807                              <1>     return
    19                              <2> %%_ret:
    20 000018BA C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   808                              <1> .volIDOk:
   809 000018BB 488D1528EFFFFF      <1>     lea rdx, volOk
   810 000018C2 B409                <1>     mov ah, 09h
   811 000018C4 CD41                <1>     int 41h
   812 000018C6 488D3DD9EBFFFF      <1>     lea rdi, volLblSpc
   813 000018CD E8B9050000          <1>     call strlen
   814 000018D2 FFC9                <1>     dec ecx
   815 000018D4 C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   816 000018D8 488D15C7EBFFFF      <1>     lea rdx, volLblSpc
   817 000018DF B409                <1>     mov ah, 09h
   818 000018E1 CD41                <1>     int 41h
   819 000018E3 488D1569ECFFFF      <1>     lea rdx, crlf
   820 000018EA B409                <1>     mov ah, 09h
   821 000018EC CD41                <1>     int 41h
   822                              <1>     return
    19                              <2> %%_ret:
    20 000018EE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   823                              <1> 
   824                              <1> version:
   825 000018EF 488D155DECFFFF      <1>     lea rdx, crlf
   826 000018F6 B409                <1>     mov ah, 09h
   827 000018F8 CD41                <1>     int 41h
   828 000018FA 488D15C5EEFFFF      <1>     lea rdx, dosVer
   829 00001901 B409                <1>     mov ah, 09h
   830 00001903 CD41                <1>     int 41h
   831 00001905 E80C000000          <1>     call .printVersionNumber
   832 0000190A 488D1542ECFFFF      <1>     lea rdx, crlf
   833 00001911 B409                <1>     mov ah, 09h
   834 00001913 CD41                <1>     int 41h
   835                              <1>     return
    19                              <2> %%_ret:
    20 00001915 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   836                              <1> .printVersionNumber:
   837 00001916 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
   838 00001918 CD41                <1>     int 41h
   839 0000191A 50                  <1>     push rax
   840 0000191B 0FB6C0              <1>     movzx eax, al
   841 0000191E E891070000          <1>     call printDecimalWord
   842 00001923 B22E                <1>     mov dl, "."
   843 00001925 B402                <1>     mov ah, 02h
   844 00001927 CD41                <1>     int 41h
   845 00001929 58                  <1>     pop rax
   846 0000192A 0FB6C4              <1>     movzx eax, ah
   847 0000192D E882070000          <1>     call printDecimalWord
   848                              <1>     return
    19                              <2> %%_ret:
    20 00001932 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   849                              <1> 
   850                              <1> 
   851                              <1> memory:
   852 00001933 488B1DDDE6FFFF      <1>     mov rbx, qword [sysVars]
   853 0000193A 4885DB              <1>     test rbx, rbx
   854 0000193D 7510                <1>     jnz .sysvarsOK
   855 0000193F 488D1532F1FFFF      <1>     lea rdx, memBad0
   856 00001946 B409                <1>     mov ah, 09h
   857 00001948 CD41                <1>     int 41h
   858 0000194A E908080000          <1>     jmp freezePC.altEP
   859                              <1> .sysvarsOK:
   860                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
   861                              <1>     ; and rcx to store Application memory
   862 0000194F 31F6                <1>     xor esi, esi
   863 00001951 31FF                <1>     xor edi, edi
   864 00001953 31ED                <1>     xor ebp, ebp
   865 00001955 31C9                <1>     xor ecx, ecx
   866 00001957 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
   867 0000195B 488B1B              <1>     mov rbx, qword [rbx]
   868                              <1> .memLp:
   869 0000195E 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
   870 00001961 7409                <1>     je .validMCB
   871 00001963 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
   872 00001966 0F8501010000        <1>     jne .badMCBFound
   873                              <1> .validMCB:
   874 0000196C 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
   875 0000196F 48C1E004            <1>     shl rax, 4  ;Convert to bytes
   876 00001973 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
   877 0000197B 7505                <1>     jne .notDOS
   878 0000197D 4801C6              <1>     add rsi, rax    ;Add to DOS count
   879 00001980 EB21                <1>     jmp short .gotoNext
   880                              <1> .notDOS:
   881 00001982 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
   882 0000198A 7505                <1>     jne .notFree
   883 0000198C 4801C7              <1>     add rdi, rax    ;Add to Free space count
   884 0000198F EB12                <1>     jmp short .gotoNext
   885                              <1> .notFree:
   886 00001991 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
   887 00001999 7505                <1>     jne .notHole
   888 0000199B 4801C5              <1>     add rbp, rax    ;Add to Hole count
   889 0000199E EB03                <1>     jmp short .gotoNext
   890                              <1> .notHole:
   891 000019A0 4801C1              <1>     add rcx, rax    ;Add to Application count
   892                              <1> .gotoNext:
   893 000019A3 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
   894 000019A6 7407                <1>     je .endOfWalk
   895 000019A8 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
   896 000019AD EBAF                <1>     jmp short .memLp
   897                              <1> .endOfWalk:
   898                              <1>     
   899 000019AF 488D1523F0FFFF      <1>     lea rdx, memDOS
   900 000019B6 B409                <1>     mov ah, 09h
   901 000019B8 CD41                <1>     int 41h
   902 000019BA 4889F0              <1>     mov rax, rsi
   903 000019BD E89D000000          <1>     call .mcbPrintAmount
   904 000019C2 488D15A8F0FFFF      <1>     lea rdx, memByte
   905 000019C9 B409                <1>     mov ah, 09h
   906 000019CB CD41                <1>     int 41h
   907                              <1> 
   908 000019CD 4885ED              <1>     test rbp, rbp
   909 000019D0 741E                <1>     jz .skipHole
   910 000019D2 488D154CF0FFFF      <1>     lea rdx, memHole
   911 000019D9 B409                <1>     mov ah, 09h
   912 000019DB CD41                <1>     int 41h
   913 000019DD 4889E8              <1>     mov rax, rbp
   914 000019E0 E87A000000          <1>     call .mcbPrintAmount
   915 000019E5 488D1585F0FFFF      <1>     lea rdx, memByte
   916 000019EC B409                <1>     mov ah, 09h
   917 000019EE CD41                <1>     int 41h
   918                              <1> .skipHole:
   919                              <1> 
   920 000019F0 488D1508F0FFFF      <1>     lea rdx, memApp
   921 000019F7 B409                <1>     mov ah, 09h
   922 000019F9 CD41                <1>     int 41h
   923 000019FB 4889C8              <1>     mov rax, rcx
   924 000019FE E85C000000          <1>     call .mcbPrintAmount
   925 00001A03 488D1567F0FFFF      <1>     lea rdx, memByte
   926 00001A0A B409                <1>     mov ah, 09h
   927 00001A0C CD41                <1>     int 41h
   928                              <1> 
   929 00001A0E 488D1536F0FFFF      <1>     lea rdx, memFree
   930 00001A15 B409                <1>     mov ah, 09h
   931 00001A17 CD41                <1>     int 41h
   932 00001A19 4889F8              <1>     mov rax, rdi
   933 00001A1C E83E000000          <1>     call .mcbPrintAmount
   934 00001A21 488D1549F0FFFF      <1>     lea rdx, memByte
   935 00001A28 B409                <1>     mov ah, 09h
   936 00001A2A CD41                <1>     int 41h
   937                              <1> 
   938 00001A2C 488D1580EFFFFF      <1>     lea rdx, memSys
   939 00001A33 B409                <1>     mov ah, 09h
   940 00001A35 CD41                <1>     int 41h
   941 00001A37 4889F0              <1>     mov rax, rsi
   942 00001A3A 4801F8              <1>     add rax, rdi
   943 00001A3D 4801C8              <1>     add rax, rcx
   944 00001A40 4801E8              <1>     add rax, rbp
   945 00001A43 E817000000          <1>     call .mcbPrintAmount
   946 00001A48 488D1522F0FFFF      <1>     lea rdx, memByte
   947 00001A4F B409                <1>     mov ah, 09h
   948 00001A51 CD41                <1>     int 41h
   949                              <1> 
   950 00001A53 488D15F9EAFFFF      <1>     lea rdx, crlf
   951 00001A5A B409                <1>     mov ah, 09h
   952 00001A5C CD41                <1>     int 41h
   953                              <1>     return
    19                              <2> %%_ret:
    20 00001A5E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   954                              <1> 
   955                              <1> .mcbPrintAmount:
   956 00001A5F 51                  <1>     push rcx
   957 00001A60 56                  <1>     push rsi
   958 00001A61 57                  <1>     push rdi
   959 00001A62 55                  <1>     push rbp
   960 00001A63 E84C060000          <1>     call printDecimalWord
   961 00001A68 5D                  <1>     pop rbp
   962 00001A69 5F                  <1>     pop rdi
   963 00001A6A 5E                  <1>     pop rsi
   964 00001A6B 59                  <1>     pop rcx
   965                              <1>     return
    19                              <2> %%_ret:
    20 00001A6C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   966                              <1> .badMCBFound:
   967 00001A6D 488D1544F0FFFF      <1>     lea rdx, memBad2
   968 00001A74 B409                <1>     mov ah, 09h
   969 00001A76 CD41                <1>     int 41h
   970 00001A78 E9DA060000          <1>     jmp freezePC.altEP
   971                              <1> launchChild:
   972                              <1> ;We run EXEC on this and the child task will return via applicationReturn
   973                              <1> ;Here we must search the CWD or all path componants before failing
   974                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
   975 00001A7D 488D1534E6FFFF      <1>     lea rdx, cmdFFBlock
   976 00001A84 B41A                <1>     mov ah, 1Ah     ;Set DTA for task
   977 00001A86 CD41                <1>     int 41h
   978                              <1> 
   979 00001A88 8B0523E6FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   980 00001A8E 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   981 00001A93 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   982 00001A98 3D20202020          <1>     cmp eax, "    " ;Only if we have four spaces do we proceed here
   983 00001A9D 741D                <1>     je .noExt
   984 00001A9F E833F4FFFF          <1>     call checkExtensionExec ;ZF=ZE => Executable
   985 00001AA4 0F8510010000        <1>     jnz .dfltErrExit
   986                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
   987 00001AAA 0F820A010000        <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
   988                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
   989                              <1>     ;So it is a com or exe that we are searching for for now
   990 00001AB0 488D3D4CE7FFFF      <1>     lea rdi, cmdPathSpec
   991 00001AB7 4889FA              <1>     mov rdx, rdi
   992 00001ABA EB24                <1>     jmp short .search
   993                              <1> .noExt:
   994                              <1>     ;If the filename has no extension, append a .*
   995                              <1>     ;Use bl as flags. bl[0] => COM found, bl[1] => EXE found, bl[2] => BAT found
   996 00001ABC 31DB                <1>     xor ebx, ebx
   997 00001ABE 488D3D3EE7FFFF      <1>     lea rdi, cmdPathSpec
   998 00001AC5 4889FA              <1>     mov rdx, rdi
   999 00001AC8 31C0                <1>     xor eax, eax
  1000 00001ACA B9FFFFFFFF          <1>     mov ecx, -1
  1001 00001ACF F2AE                <1>     repne scasb
  1002 00001AD1 48FFCF              <1>     dec rdi ;Point to the terminating null
  1003 00001AD4 4889FD              <1>     mov rbp, rdi    ;Temporarily store the ptr to the . in rbp
  1004 00001AD7 66B82E2A            <1>     mov ax, ".*"
  1005 00001ADB 66AB                <1>     stosw
  1006 00001ADD 30C0                <1>     xor al, al  ;Store terminating null
  1007 00001ADF AA                  <1>     stosb
  1008                              <1> .search:
  1009 00001AE0 B906000000          <1>     mov ecx, dirIncFiles
  1010 00001AE5 B44E                <1>     mov ah, 4Eh ;Find First File
  1011 00001AE7 CD41                <1>     int 41h
  1012 00001AE9 0F82CB000000        <1>     jc .dfltErrExit
  1013 00001AEF E879000000          <1>     call .noExtCheckExt
  1014                              <1> .moreSearch:
  1015 00001AF4 B44F                <1>     mov ah, 4Fh
  1016 00001AF6 CD41                <1>     int 41h
  1017 00001AF8 7207                <1>     jc .noMoreFiles
  1018 00001AFA E86E000000          <1>     call .noExtCheckExt
  1019 00001AFF EBF3                <1>     jmp short .moreSearch
  1020                              <1> .noMoreFiles:
  1021 00001B01 85DB                <1>     test ebx, ebx
  1022 00001B03 0F84B1000000        <1>     jz .dfltErrExit
  1023                              <1> ;So we have a valid executable
  1024 00001B09 4889EF              <1>     mov rdi, rbp    ;Get back ptr to the .*,0
  1025 00001B0C F7C301000000        <1>     test ebx, 1
  1026 00001B12 7407                <1>     jz .launchexebat
  1027 00001B14 B82E434F4D          <1>     mov eax, ".COM"
  1028 00001B19 EB14                <1>     jmp short .launch
  1029                              <1> .launchexebat:
  1030 00001B1B F7C302000000        <1>     test ebx, 2
  1031 00001B21 7407                <1>     jz .launchbat
  1032 00001B23 B82E455845          <1>     mov eax, ".EXE"
  1033 00001B28 EB05                <1>     jmp short .launch
  1034                              <1> .launchbat:
  1035                              <1> ;Temporary For BAT
  1036 00001B2A E98B000000          <1>     jmp .dfltErrExit
  1037                              <1> .launch:
  1038 00001B2F AB                  <1>     stosd
  1039 00001B30 30C0                <1>     xor al, al
  1040 00001B32 AA                  <1>     stosb   ;Store the terminating null
  1041 00001B33 488D1DA9E5FFFF      <1>     lea rbx, launchBlock
  1042 00001B3A 31C0                <1>     xor eax, eax
  1043 00001B3C 488903              <1>     mov qword [rbx + execProg.pEnv], rax    ;Tell DOS to copy my current Env
  1044 00001B3F 498D8080000000      <1>     lea rax, qword [r8 + cmdLineCnt]
  1045 00001B46 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1046 00001B4A 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1047 00001B4E 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1048 00001B52 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1049 00001B56 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1050 00001B5A 488D15A2E6FFFF      <1>     lea rdx, cmdPathSpec
  1051 00001B61 B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1052 00001B66 CD41                <1>     int 41h
  1053 00001B68 E94D000000          <1>     jmp .dfltErrExit    ;If something goes wrong, error out
  1054                              <1> .noExtCheckExt:
  1055                              <1>     ;mov eax, dword [cmdFFBlock + ffBlock.asciizName + filename.fExt]
  1056 00001B6D 488D3562E5FFFF      <1>     lea rsi, dword [cmdFFBlock + ffBlock.asciizName]
  1057 00001B74 488D3DD7E6FFFF      <1>     lea rdi, fcbCmdSpec
  1058 00001B7B E8DC030000          <1>     call asciiFilenameToFCB
  1059 00001B80 8B05D4E6FFFF        <1>     mov eax, dword [fcbCmdSpec + filename.fExt]
  1060 00001B86 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1061 00001B8B 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1062 00001B90 3D434F4D20          <1>     cmp eax, "COM "
  1063 00001B95 7507                <1>     jne .neceexe
  1064 00001B97 81CB01000000        <1>     or ebx, 1
  1065                              <1>     return
    19                              <2> %%_ret:
    20 00001B9D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1066                              <1> .neceexe:
  1067 00001B9E 3D45584520          <1>     cmp eax, "EXE "
  1068 00001BA3 7507                <1>     jne .necebat
  1069 00001BA5 81CB02000000        <1>     or ebx, 2
  1070                              <1>     return
    19                              <2> %%_ret:
    20 00001BAB C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1071                              <1> .necebat:
  1072 00001BAC 3D42415420          <1>     cmp eax, "BAT "
  1073                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001BB1 75(AB)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
  1074 00001BB3 81CB04000000        <1>     or ebx, 4
  1075                              <1>     return
    19                              <2> %%_ret:
    20 00001BB9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1076                              <1> 
  1077                              <1> .dfltErrExit:
  1078 00001BBA 488D15EFE9FFFF      <1>     lea rdx, badCmd
  1079 00001BC1 B409                <1>     mov ah, 09h
  1080 00001BC3 CD41                <1>     int 41h
  1081                              <1>     return
    19                              <2> %%_ret:
    20 00001BC5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    16                                  %include "./Source/Utils/COMMAND/Source/cmdUtils.asm"
    17                              <1> ;Misc functions and subroutines for command.com
    18                              <1> 
    19                              <1> printCRLF:
    20 00001BC6 488D1586E9FFFF      <1>     lea rdx, crlf
    21 00001BCD BB02000000          <1>     mov ebx, 2
    22 00001BD2 B440                <1>     mov ah, 40h ;Print a new line
    23 00001BD4 B902000000          <1>     mov ecx, 2  ;Two chars to write
    24 00001BD9 CD41                <1>     int 41h
    25                              <1>     return
    19                              <2> %%_ret:
    20 00001BDB C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    26                              <1> printDate:
    27                              <1> ;Input: eax = Packed Date
    28                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
    29                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
    30                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
    31                              <1> ;       ebx = 0 => Print two digit year
    32                              <1> ;       ebx = 1 => Print four digit year
    33 00001BDC 53                  <1>     push rbx
    34 00001BDD 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    35 00001BDF 803D3FE4FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    36 00001BE6 7240                <1>     jb .usDate
    37 00001BE8 777C                <1>     ja .jpnDate
    38                              <1> ;European: DD/MM/YY
    39 00001BEA 251F000000          <1>     and eax, 1Fh    ;Save day bits
    40 00001BEF E8B0000000          <1>     call .printFirst
    41 00001BF4 8A1536E4FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    42 00001BFA B402                <1>     mov ah, 02h
    43 00001BFC CD41                <1>     int 41h
    44                              <1> 
    45 00001BFE 89C8                <1>     mov eax, ecx
    46 00001C00 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    47 00001C05 C1E805              <1>     shr eax, 5
    48 00001C08 E8B3000000          <1>     call .printSecond
    49                              <1> 
    50 00001C0D 8A151DE4FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    51 00001C13 B402                <1>     mov ah, 02h
    52 00001C15 CD41                <1>     int 41h
    53                              <1> 
    54 00001C17 89C8                <1>     mov eax, ecx
    55 00001C19 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    56 00001C1E C1E809              <1>     shr eax, 9
    57 00001C21 5B                  <1>     pop rbx ;Get the year signature back
    58 00001C22 E8A9000000          <1>     call .printYear
    59                              <1>     return
    19                              <2> %%_ret:
    20 00001C27 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    60                              <1> .usDate:
    61                              <1> ;US: MM/DD/YY
    62 00001C28 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    63 00001C2D C1E805              <1>     shr eax, 5
    64 00001C30 E86F000000          <1>     call .printFirst
    65                              <1> 
    66 00001C35 8A15F5E3FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    67 00001C3B B402                <1>     mov ah, 02h
    68 00001C3D CD41                <1>     int 41h
    69                              <1> 
    70 00001C3F 89C8                <1>     mov eax, ecx
    71 00001C41 251F000000          <1>     and eax, 1Fh    ;Save day bits
    72 00001C46 E875000000          <1>     call .printSecond
    73                              <1> 
    74 00001C4B 8A15DFE3FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    75 00001C51 B402                <1>     mov ah, 02h
    76 00001C53 CD41                <1>     int 41h
    77                              <1> 
    78 00001C55 89C8                <1>     mov eax, ecx
    79 00001C57 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    80 00001C5C C1E809              <1>     shr eax, 9
    81 00001C5F 5B                  <1>     pop rbx ;Get the year signature back
    82 00001C60 E86B000000          <1>     call .printYear
    83                              <1>     return
    19                              <2> %%_ret:
    20 00001C65 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    84                              <1> .jpnDate:
    85                              <1> ;Japan: YY/MM/DD
    86 00001C66 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    87 00001C6B C1E809              <1>     shr eax, 9
    88 00001C6E 5B                  <1>     pop rbx ;Get the year signature back
    89 00001C6F E85C000000          <1>     call .printYear
    90                              <1> 
    91 00001C74 8A15B6E3FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    92 00001C7A B402                <1>     mov ah, 02h
    93 00001C7C CD41                <1>     int 41h
    94                              <1> 
    95 00001C7E 89C8                <1>     mov eax, ecx
    96 00001C80 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    97 00001C85 C1E805              <1>     shr eax, 5
    98 00001C88 E833000000          <1>     call .printSecond
    99                              <1> 
   100 00001C8D 8A159DE3FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
   101 00001C93 B402                <1>     mov ah, 02h
   102 00001C95 CD41                <1>     int 41h
   103                              <1> 
   104 00001C97 89C8                <1>     mov eax, ecx
   105 00001C99 251F000000          <1>     and eax, 1Fh    ;Save day bits
   106 00001C9E E81D000000          <1>     call .printSecond
   107                              <1>     return
    19                              <2> %%_ret:
    20 00001CA3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   108                              <1> 
   109                              <1> ;Each of these require eax setup correctly
   110                              <1> .printFirst:
   111 00001CA4 51                  <1>     push rcx
   112 00001CA5 E87B040000          <1>     call getDecimalWord
   113 00001CAA 84ED                <1>     test ch, ch ;Do we have an upper digit?
   114 00001CAC 7504                <1>     jnz .skipSpace
   115 00001CAE 88CD                <1>     mov ch, cl
   116 00001CB0 B120                <1>     mov cl, " "
   117                              <1> .skipSpace:
   118 00001CB2 88CA                <1>     mov dl, cl
   119 00001CB4 B402                <1>     mov ah, 02h
   120 00001CB6 CD41                <1>     int 41h
   121 00001CB8 88EA                <1>     mov dl, ch
   122 00001CBA B402                <1>     mov ah, 02h
   123 00001CBC CD41                <1>     int 41h
   124 00001CBE 59                  <1>     pop rcx
   125                              <1>     return
    19                              <2> %%_ret:
    20 00001CBF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   126                              <1> .printSecond:
   127 00001CC0 51                  <1>     push rcx
   128 00001CC1 E85F040000          <1>     call getDecimalWord
   129 00001CC6 84ED                <1>     test ch, ch ;Do we have an upper digit?
   130 00001CC8 75E8                <1>     jnz .skipSpace
   131 00001CCA 88CD                <1>     mov ch, cl
   132 00001CCC B130                <1>     mov cl, "0"
   133 00001CCE EBE2                <1>     jmp short .skipSpace
   134                              <1> .printYear:
   135 00001CD0 05BC070000          <1>     add eax, 1980
   136 00001CD5 51                  <1>     push rcx
   137 00001CD6 53                  <1>     push rbx
   138 00001CD7 E849040000          <1>     call getDecimalWord ;Get unpacked in rcx
   139 00001CDC 5B                  <1>     pop rbx
   140 00001CDD 84DB                <1>     test bl, bl
   141 00001CDF 740C                <1>     jz .twoDigitYear
   142 00001CE1 88CA                <1>     mov dl, cl  ;Print the first digit
   143 00001CE3 B402                <1>     mov ah, 02h
   144 00001CE5 CD41                <1>     int 41h
   145 00001CE7 88EA                <1>     mov dl, ch  ;Print the second digit
   146 00001CE9 B402                <1>     mov ah, 02h
   147 00001CEB CD41                <1>     int 41h
   148                              <1> .twoDigitYear:
   149 00001CED C1E910              <1>     shr ecx, 10h    ;Get high word low
   150 00001CF0 88CA                <1>     mov dl, cl  ;Print the upper digit
   151 00001CF2 B402                <1>     mov ah, 02h
   152 00001CF4 CD41                <1>     int 41h
   153 00001CF6 88EA                <1>     mov dl, ch  ;Print the lower digit
   154 00001CF8 B402                <1>     mov ah, 02h
   155 00001CFA CD41                <1>     int 41h
   156 00001CFC 59                  <1>     pop rcx
   157                              <1>     return
    19                              <2> %%_ret:
    20 00001CFD C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   158                              <1> 
   159                              <1> 
   160                              <1> printTime:
   161                              <1> ;Input: eax = Packed Time
   162                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   163                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   164 00001CFE 89C1                <1>     mov ecx, eax
   165 00001D00 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   166 00001D05 C1E80B              <1>     shr eax, 11
   167 00001D08 803D27E3FFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   168 00001D0F 750B                <1>     jne .ampm
   169 00001D11 E85A000000          <1>     call .printHours
   170 00001D16 E831000000          <1>     call .printMinutes
   171                              <1>     return
    19                              <2> %%_ret:
    20 00001D1B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   172                              <1> .ampm:
   173 00001D1C 3D0C000000          <1>     cmp eax, 12
   174 00001D21 7713                <1>     ja .pm
   175 00001D23 7416                <1>     je .pm2
   176 00001D25 E846000000          <1>     call .printHours
   177 00001D2A E81D000000          <1>     call .printMinutes
   178 00001D2F B261                <1>     mov dl, "a"
   179 00001D31 B402                <1>     mov ah, 02h
   180 00001D33 CD41                <1>     int 41h
   181                              <1>     return
    19                              <2> %%_ret:
    20 00001D35 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   182                              <1> .pm:
   183 00001D36 2D0C000000          <1>     sub eax, 12
   184                              <1> .pm2:
   185 00001D3B E830000000          <1>     call .printHours
   186 00001D40 E807000000          <1>     call .printMinutes
   187 00001D45 B270                <1>     mov dl, "p"
   188 00001D47 B402                <1>     mov ah, 02h
   189 00001D49 CD41                <1>     int 41h
   190                              <1>     return
    19                              <2> %%_ret:
    20 00001D4B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   191                              <1> .printMinutes:
   192 00001D4C 8A15E0E2FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   193 00001D52 B402                <1>     mov ah, 02h
   194 00001D54 CD41                <1>     int 41h
   195                              <1> 
   196 00001D56 89C8                <1>     mov eax, ecx
   197 00001D58 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   198 00001D5D C1E805              <1>     shr eax, 5
   199                              <1> .printMinutesAlt:
   200 00001D60 51                  <1>     push rcx
   201 00001D61 E8BF030000          <1>     call getDecimalWord
   202 00001D66 84ED                <1>     test ch, ch ;Do we have an upper digit?
   203 00001D68 7514                <1>     jnz .skipSpace
   204 00001D6A 88CD                <1>     mov ch, cl
   205 00001D6C B130                <1>     mov cl, "0"
   206 00001D6E EB0E                <1>     jmp short .skipSpace
   207                              <1> .printHours:
   208 00001D70 51                  <1>     push rcx
   209 00001D71 E8AF030000          <1>     call getDecimalWord
   210 00001D76 84ED                <1>     test ch, ch ;Do we have an upper digit?
   211 00001D78 7504                <1>     jnz .skipSpace
   212 00001D7A 88CD                <1>     mov ch, cl
   213 00001D7C B120                <1>     mov cl, " "
   214                              <1> .skipSpace:
   215 00001D7E 88CA                <1>     mov dl, cl
   216 00001D80 B402                <1>     mov ah, 02h
   217 00001D82 CD41                <1>     int 41h
   218 00001D84 88EA                <1>     mov dl, ch
   219 00001D86 B402                <1>     mov ah, 02h
   220 00001D88 CD41                <1>     int 41h
   221 00001D8A 59                  <1>     pop rcx
   222                              <1>     return
    19                              <2> %%_ret:
    20 00001D8B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   223                              <1> 
   224                              <1> 
   225                              <1> putVersionInPrompt:
   226 00001D8C 488D1533EAFFFF      <1>     lea rdx, dosVer
   227 00001D93 B409                <1>     mov ah, 09h ;Print String
   228 00001D95 CD41                <1>     int 41h
   229 00001D97 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   230 00001D99 CD41                <1>     int 41h
   231 00001D9B 50                  <1>     push rax    ;Save minor version
   232 00001D9C E89C000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   233 00001DA1 E8B4000000          <1>     call printPackedBCD ;Print al
   234 00001DA6 B22E                <1>     mov dl, "."
   235 00001DA8 B402                <1>     mov ah, 02h
   236 00001DAA CD41                <1>     int 41h
   237 00001DAC 58                  <1>     pop rax
   238 00001DAD 88E0                <1>     mov al, ah  ;Get the minor version low
   239 00001DAF E889000000          <1>     call hexToBCD
   240 00001DB4 E8A1000000          <1>     call printPackedBCD
   241                              <1>     return
    19                              <2> %%_ret:
    20 00001DB9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   242                              <1> putEscInPrompt:
   243 00001DBA B21B                <1>     mov dl, ESC
   244 00001DBC EB1C                <1>     jmp short outChar
   245                              <1> 
   246                              <1> putMoneyInPrompt:
   247 00001DBE B224                <1>     mov dl, "$"
   248 00001DC0 EB18                <1>     jmp short outChar
   249                              <1> 
   250                              <1> putEquInPrompt:
   251 00001DC2 B23D                <1>     mov dl, "="
   252 00001DC4 EB14                <1>     jmp short outChar
   253                              <1> 
   254                              <1> putPipeInPrompt:
   255 00001DC6 B27C                <1>     mov dl, "|"
   256 00001DC8 EB10                <1>     jmp short outChar
   257                              <1> 
   258                              <1> putGTinPrompt:
   259 00001DCA B23E                <1>     mov dl, ">"
   260 00001DCC EB0C                <1>     jmp short outChar
   261                              <1> 
   262                              <1> putLTinPrompt:
   263 00001DCE B23C                <1>     mov dl, "<"
   264 00001DD0 EB08                <1>     jmp short outChar
   265                              <1> 
   266                              <1> putDriveInPrompt:
   267 00001DD2 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   268 00001DD4 CD41                <1>     int 41h
   269 00001DD6 0441                <1>     add al, "A" ;Convert to letter
   270 00001DD8 88C2                <1>     mov dl, al
   271                              <1> outChar:
   272 00001DDA B402                <1>     mov ah, 02h ;Echo to STDOUT
   273 00001DDC CD41                <1>     int 41h
   274                              <1>     return
    19                              <2> %%_ret:
    20 00001DDE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   275                              <1> putCWDInPrompt:
   276 00001DDF 488D3D65E2FFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   277 00001DE6 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   278 00001DE8 CD41                <1>     int 41h
   279 00001DEA 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   280 00001DEC FEC2                <1>     inc dl
   281 00001DEE 0441                <1>     add al, "A" ;Convert to letter
   282 00001DF0 B43A                <1>     mov ah, ":"
   283 00001DF2 66AB                <1>     stosw   ;Store X:, rdi+=2
   284 00001DF4 8A0529E2FFFF        <1>     mov al, byte [pathSep]
   285 00001DFA AA                  <1>     stosb   ;Store pathSep, inc rdi
   286 00001DFB B447                <1>     mov ah, 47h ;Get Current Working Directory
   287 00001DFD 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   288 00001E00 CD41                <1>     int 41h
   289 00001E02 E884000000          <1>     call strlen
   290 00001E07 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   291                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   292 00001E0D B440                <1>     mov ah, 40h ;Write to handle
   293 00001E0F BB01000000          <1>     mov ebx, 1  ;STDOUT
   294 00001E14 488D1530E2FFFF      <1>     lea rdx, currDirStr
   295 00001E1B CD41                <1>     int 41h
   296                              <1>     return
    19                              <2> %%_ret:
    20 00001E1D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   297                              <1> 
   298                              <1> BCDtoHex:
   299                              <1> ;Converts a BCD value to a Hex byte
   300                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   301 00001E1E 51                  <1>     push rcx
   302 00001E1F 0FB6C0              <1>     movzx eax, al   ;Zero extend
   303 00001E22 89C1                <1>     mov ecx, eax    ;Save al in ecx
   304 00001E24 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   305 00001E29 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   306 00001E2F C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   307                              <1> .bth:
   308 00001E32 050A000000          <1>     add eax, 10
   309 00001E37 FFC9                <1>     dec ecx
   310 00001E39 75F7                <1>     jnz .bth
   311 00001E3B 59                  <1>     pop rcx
   312 00001E3C C3                  <1>     ret
   313                              <1> 
   314                              <1> hexToBCD:
   315                              <1> ;Converts a Hex byte into two BCD digits
   316                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   317 00001E3D 51                  <1>     push rcx
   318 00001E3E 0FB6C0              <1>     movzx eax, al   ;Zero extend
   319 00001E41 31C9                <1>     xor ecx, ecx
   320                              <1> .htb0:
   321 00001E43 3D0A000000          <1>     cmp eax, 10
   322 00001E48 7209                <1>     jb .htb1
   323 00001E4A 2D0A000000          <1>     sub eax, 10
   324 00001E4F FFC1                <1>     inc ecx
   325 00001E51 EBF0                <1>     jmp short .htb0
   326                              <1> .htb1:
   327 00001E53 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   328 00001E56 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   329 00001E58 59                  <1>     pop rcx
   330 00001E59 C3                  <1>     ret
   331                              <1> 
   332                              <1> printPackedBCD:
   333                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   334                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   335                              <1> ;Preserves all registers
   336 00001E5A 50                  <1>     push rax
   337 00001E5B 52                  <1>     push rdx
   338 00001E5C 88C4                <1>     mov ah, al
   339 00001E5E 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   340 00001E60 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   341 00001E63 7508                <1>     jnz .upperNybble
   342 00001E65 B220                <1>     mov dl, " "
   343 00001E67 B402                <1>     mov ah, 02h
   344 00001E69 CD41                <1>     int 41h
   345 00001E6B EB0E                <1>     jmp short .lowerNybble
   346                              <1> .upperNybble:
   347 00001E6D 50                  <1>     push rax
   348 00001E6E C0EC04              <1>     shr ah, 4
   349 00001E71 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   350 00001E74 88E2                <1>     mov dl, ah
   351 00001E76 B402                <1>     mov ah, 02h ;Print DL
   352 00001E78 CD41                <1>     int 41h
   353 00001E7A 58                  <1>     pop rax
   354                              <1> .lowerNybble:
   355 00001E7B 0430                <1>     add al, "0"
   356 00001E7D 88C2                <1>     mov dl, al
   357 00001E7F B402                <1>     mov ah, 02h ;Print DL
   358 00001E81 CD41                <1>     int 41h
   359 00001E83 5A                  <1>     pop rdx
   360 00001E84 58                  <1>     pop rax
   361                              <1>     return
    19                              <2> %%_ret:
    20 00001E85 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   362                              <1> 
   363                              <1> getCurrentDrive:
   364                              <1> ;Returns the 0 based current drive in al
   365 00001E86 B419                <1>     mov ah, 19h
   366 00001E88 CD41                <1>     int 41h
   367                              <1>     return
    19                              <2> %%_ret:
    20 00001E8A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   368                              <1> 
   369                              <1> strlen:
   370                              <1> ;Gets the length of a ASCIIZ string
   371                              <1> ;Input: rdi = Source buffer
   372                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   373 00001E8B 50                  <1>     push rax
   374 00001E8C 57                  <1>     push rdi
   375 00001E8D 30C0                <1>     xor al, al
   376 00001E8F 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   377 00001E91 FFC9                <1>     dec ecx ;rcx = -1
   378 00001E93 F2AE                <1>     repne scasb
   379 00001E95 F7D1                <1>     not ecx
   380 00001E97 5F                  <1>     pop rdi
   381 00001E98 58                  <1>     pop rax
   382                              <1>     return
    19                              <2> %%_ret:
    20 00001E99 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   383                              <1> 
   384                              <1> findTerminatorOrEOC:
   385                              <1> ;Advances rsi to the next string terminator char or the next End of command
   386                              <1> ; char
   387                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   388                              <1> ;If a end of command char found, also sets CF
   389 00001E9A AC                  <1>     lodsb
   390 00001E9B 3C0D                <1>     cmp al, CR
   391 00001E9D 7419                <1>     je .endOfInput
   392 00001E9F E82B000000          <1>     call isALterminator
   393 00001EA4 7419                <1>     jz .exit
   394 00001EA6 3A0577E1FFFF        <1>     cmp al, byte [pathSep]
   395 00001EAC 7411                <1>     je .exit
   396 00001EAE 3A0570E1FFFF        <1>     cmp al, byte [switchChar]
   397 00001EB4 7409                <1>     je .exit
   398 00001EB6 EBE2                <1>     jmp short findTerminatorOrEOC
   399                              <1> .endOfInput:
   400 00001EB8 E802000000          <1>     call .exit
   401 00001EBD F9                  <1>     stc 
   402                              <1>     return
    19                              <2> %%_ret:
    20 00001EBE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   403                              <1> .exit:
   404 00001EBF 48FFCE              <1>     dec rsi ;Point to the terminating char
   405                              <1>     return
    19                              <2> %%_ret:
    20 00001EC2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   406                              <1> 
   407                              <1> findTerminator:
   408                              <1> ;Advances rsi to the next string terminator char
   409                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   410 00001EC3 AC                  <1>     lodsb
   411 00001EC4 E806000000          <1>     call isALterminator
   412 00001EC9 75F8                <1>     jnz findTerminator
   413 00001ECB 48FFCE              <1>     dec rsi
   414                              <1>     return
    19                              <2> %%_ret:
    20 00001ECE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   415                              <1> isALterminator:
   416                              <1> ;Returns: ZF=NZ if al is not a terminator (Not including CR)
   417                              <1> ;         ZF=ZY if al is a terminator
   418 00001ECF 3C20                <1>     cmp al, " "
   419                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001ED1 74(CE)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   420 00001ED3 3C3B                <1>     cmp al, ";"
   421                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001ED5 74(CE)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   422 00001ED7 3C3D                <1>     cmp al, "="
   423                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001ED9 74(CE)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   424 00001EDB 3C2C                <1>     cmp al, ","
   425                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001EDD 74(CE)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   426 00001EDF 3C09                <1>     cmp al, TAB
   427                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001EE1 74(CE)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   428 00001EE3 3C0A                <1>     cmp al, LF
   429                              <1>     return
    19                              <2> %%_ret:
    20 00001EE5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   430                              <1> 
   431                              <1> findEndOfCommand:
   432                              <1> ;Moves rsi to the | or CR that terminates this command
   433 00001EE6 AC                  <1>     lodsb
   434 00001EE7 E806000000          <1>     call isALEndOfCommand
   435 00001EEC 75F8                <1>     jnz findEndOfCommand
   436 00001EEE 48FFCE              <1>     dec rsi
   437                              <1>     return
    19                              <2> %%_ret:
    20 00001EF1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   438                              <1> isALEndOfCommand:
   439 00001EF2 3C7C                <1>     cmp al, "|"
   440                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001EF4 74(F1)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   441 00001EF6 3C0D                <1>     cmp al, CR
   442                              <1>     return
    19                              <2> %%_ret:
    20 00001EF8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   443                              <1> 
   444                              <1> scanForRedir:
   445                              <1> ;Returns: AL = 0 => No redirection, terminate with CR
   446                              <1> ;         AL = 1 => Redirection, type <
   447                              <1> ;         AL = 10 => Redir, type >
   448                              <1> ;         AL = 20 => Redir, type >>
   449                              <1> ;If multiple redirs found, the last one of that type counts.
   450 00001EF9 56                  <1>     push rsi
   451 00001EFA 55                  <1>     push rbp
   452 00001EFB 30E4                <1>     xor ah, ah
   453                              <1> .lp:
   454 00001EFD AC                  <1>     lodsb
   455 00001EFE 3C3E                <1>     cmp al, ">"
   456                              <1> .exit:
   457 00001F00 5D                  <1>     pop rbp
   458 00001F01 5E                  <1>     pop rsi
   459                              <1>     return
    19                              <2> %%_ret:
    20 00001F02 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   460                              <1> 
   461                              <1> 
   462                              <1> skipSpaces:
   463                              <1> ;Also skips tabs
   464                              <1> ;Input: rsi must point to the start of the data string
   465                              <1> ;Output: rsi points to the first non-space char
   466 00001F03 803E20              <1>     cmp byte [rsi], " "
   467 00001F06 7405                <1>     je .skip    ;If equal to a space, skip it
   468 00001F08 803E09              <1>     cmp byte [rsi], TAB
   469                              <1>     retne   ;If not equal to a tab or space, return
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001F0B 75(02)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   470                              <1> .skip:
   471 00001F0D 48FFC6              <1>     inc rsi
   472 00001F10 EBF1                <1>     jmp short skipSpaces
   473                              <1> 
   474                              <1> printPrompt:
   475 00001F12 66813D06E1FFFFFFFF  <1>     cmp word [promptPtr], -1
   476 00001F1B 750B                <1>     jne .validPrompt
   477                              <1>     ;Here we print the default prompt
   478 00001F1D E8BDFEFFFF          <1>     call putCWDInPrompt
   479 00001F22 E8A3FEFFFF          <1>     call putGTinPrompt
   480                              <1>     return
    19                              <2> %%_ret:
    20 00001F27 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   481                              <1> .validPrompt:
   482                              <1>     return
    19                              <2> %%_ret:
    20 00001F28 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   483                              <1> 
   484                              <1> clearCommandState:
   485                              <1> ;Clears the command state
   486 00001F29 488D3D6EE1FFFF      <1>     lea rdi, cmdStatePtr
   487 00001F30 B90A000000          <1>     mov ecx, cmdStateL
   488 00001F35 31C0                <1>     xor eax, eax
   489 00001F37 F3AA                <1>     rep stosb
   490                              <1>     return
    19                              <2> %%_ret:
    20 00001F39 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   491                              <1> 
   492                              <1> clearCommandLineState:
   493                              <1> ;Clears the command line state after a 0Dh encountered
   494 00001F3A 488D3D4DE1FFFF      <1>     lea rdi, cmdLineStatePtr
   495 00001F41 B91A000000          <1>     mov ecx, cmdLineStateL
   496 00001F46 31C0                <1>     xor eax, eax
   497 00001F48 F3AA                <1>     rep stosb
   498                              <1>     return
    19                              <2> %%_ret:
    20 00001F4A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   499                              <1> 
   500                              <1> asciiToFCB:
   501                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   502                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   503                              <1> ;Also doesn't check if chars are valid
   504                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   505                              <1> ;Name is space padded.
   506                              <1> ;Input: rsi = ASCII string buffer
   507                              <1> ;       rdi = FCB name buffer
   508                              <1> ;Output: al = Char that terminated the source string 
   509 00001F4B 53                  <1>     push rbx    
   510 00001F4C 57                  <1>     push rdi
   511 00001F4D B90B000000          <1>     mov ecx, 11
   512 00001F52 B020                <1>     mov al, " "
   513 00001F54 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   514 00001F56 5F                  <1>     pop rdi
   515 00001F57 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   516 00001F5A EB1D                <1>     jmp short asciiFilenameToFCB.processName
   517                              <1> asciiFilenameToFCB:
   518                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   519                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   520                              <1> ;Also doesn't check if chars are valid
   521                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   522                              <1> ;Name is space padded.
   523                              <1> ;Input: rsi = ASCII string buffer
   524                              <1> ;       rdi = FCB name buffer
   525                              <1> ;Output: al = Char that terminated the source string 
   526 00001F5C 53                  <1>     push rbx    
   527 00001F5D 57                  <1>     push rdi
   528 00001F5E B90B000000          <1>     mov ecx, 11
   529 00001F63 B020                <1>     mov al, " "
   530 00001F65 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   531 00001F67 5F                  <1>     pop rdi
   532 00001F68 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   533                              <1>     ;Preprocess for Dir Searches
   534 00001F6B 803E2E              <1>     cmp byte [rsi], "."
   535 00001F6E 7509                <1>     jne .processName
   536 00001F70 A4                  <1>     movsb   ;Store the first dot
   537 00001F71 803E2E              <1>     cmp byte [rsi], "."
   538 00001F74 752C                <1>     jne .exitBadChar
   539 00001F76 A4                  <1>     movsb
   540 00001F77 EB29                <1>     jmp short .exitBadChar
   541                              <1> .processName:
   542 00001F79 AC                  <1>     lodsb   ;Get the char in al
   543 00001F7A 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   544 00001F7C 7426                <1>     jz .exit
   545 00001F7E 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   546 00001F80 7407                <1>     je .extSpace
   547 00001F82 3C2E                <1>     cmp al, "."
   548 00001F84 740C                <1>     je .ext
   549 00001F86 AA                  <1>     stosb   ;Store the char
   550 00001F87 EBF0                <1>     jmp short .processName
   551                              <1> .extSpace:
   552                              <1> ;Now we scan for a period in the name
   553 00001F89 AC                  <1>     lodsb   ;Get a char and increase rsi
   554 00001F8A 84C0                <1>     test al, al
   555 00001F8C 7416                <1>     jz .exit
   556 00001F8E 3C2E                <1>     cmp al, "."     ;If al is not a period...
   557 00001F90 75F7                <1>     jne .extSpace   ; keep searching
   558                              <1> .ext:
   559 00001F92 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   560                              <1> .processExt:
   561 00001F96 AC                  <1>     lodsb
   562 00001F97 84C0                <1>     test al, al
   563 00001F99 7409                <1>     jz .exit
   564 00001F9B 3C20                <1>     cmp al, " "
   565 00001F9D 7405                <1>     je .exit
   566 00001F9F AA                  <1>     stosb
   567 00001FA0 EBF4                <1>     jmp short .processExt
   568                              <1> .exitBadChar:
   569 00001FA2 30C0                <1>     xor al, al  ;Return a null terminator
   570                              <1> .exit:
   571 00001FA4 5B                  <1>     pop rbx
   572                              <1>     return
    19                              <2> %%_ret:
    20 00001FA5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   573                              <1> 
   574                              <1> FCBToAsciiz:
   575                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   576                              <1> ;Name is space padded too
   577                              <1> ;Input: rsi = FCB name buffer
   578                              <1> ;       rdi = ASCIIZ string buffer
   579 00001FA6 B908000000          <1>     mov ecx, 8
   580 00001FAB F3A4                <1>     rep movsb   ;Move the name over
   581                              <1> .scanNameSpace:
   582 00001FAD 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   583 00001FB1 750D                <1>     jne .ext
   584 00001FB3 48FFCF              <1>     dec rdi
   585 00001FB6 FFC1                <1>     inc ecx
   586 00001FB8 81F908000000        <1>     cmp ecx, 8
   587 00001FBE 72ED                <1>     jb .scanNameSpace
   588                              <1> .ext:
   589 00001FC0 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   590 00001FC5 7506                <1>     jne .validExt
   591 00001FC7 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   592 00001FCB 7415                <1>     je .exit
   593                              <1> .validExt:
   594 00001FCD B02E                <1>     mov al, "." ;We have a valid extension, store a period
   595 00001FCF AA                  <1>     stosb
   596 00001FD0 B903000000          <1>     mov ecx, 3
   597 00001FD5 F3A4                <1>     rep movsb   ;Move the three extension chars over
   598                              <1> .scanExtSpace:
   599 00001FD7 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   600 00001FDB 7505                <1>     jne .exit
   601 00001FDD 48FFCF              <1>     dec rdi
   602 00001FE0 EBF5                <1>     jmp short .scanExtSpace
   603                              <1> .exit:
   604 00001FE2 31C0                <1>     xor eax, eax
   605 00001FE4 AA                  <1>     stosb   ;Store a null at the end
   606                              <1>     return
    19                              <2> %%_ret:
    20 00001FE5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   607                              <1> 
   608                              <1> buildCommandPath:
   609                              <1> ;Based on the first argument on the command line
   610                              <1> ; will build a full ASCIIZ path in searchSpec to the file/dir specified
   611                              <1>     ;If this is a relative path, will handle correctly (tho unnecessary)
   612 00001FE6 0FB605B6E0FFFF      <1>     movzx eax, byte [arg1Off]
   613 00001FED 488D358FE1FFFF      <1>     lea rsi, cmdBuffer
   614 00001FF4 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   615 00001FF7 8A3D26E0FFFF        <1>     mov bh, byte [pathSep]
   616 00001FFD B33A                <1>     mov bl, ":"
   617 00001FFF 383E                <1>     cmp byte [rsi], bh  ;Is the first char relative to root?
   618 00002001 7458                <1>     je .absoluteCurrent
   619 00002003 66395E01            <1>     cmp word [rsi + 1], bx    ;This checks if absolute or relative
   620 00002007 746D                <1>     je .absolutePath
   621 00002009 385E01              <1>     cmp byte [rsi + 1], bl  ;Check if a drive separator
   622 0000200C 7409                <1>     je .relativeGiven
   623                              <1> ;No drive letter given, must get Current Drive
   624 0000200E E873FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   625 00002013 0441                <1>     add al, "A"
   626 00002015 EB0B                <1>     jmp short .relativeCommon
   627                              <1> .relativeGiven:
   628                              <1> ;Drive letter pointed to by AL
   629 00002017 8A06                <1>     mov al, byte [rsi]  ;Get drive letter in al
   630 00002019 24DF                <1>     and al, 0DFh    ;Convert to UC
   631 0000201B 4881C602000000      <1>     add rsi, 2  ;Skip the given drive letter and the colon
   632                              <1> .relativeCommon:
   633                              <1>     ;al has drive letter
   634 00002022 88C2                <1>     mov dl, al  ;Save drive letter in dl
   635 00002024 80EA40              <1>     sub dl, "@" ;Get 1 based drive number in dl
   636 00002027 B43A                <1>     mov ah, ":" ;Get the colon in too
   637 00002029 488D3DE6E2FFFF      <1>     lea rdi, searchSpec ;Start building our search path here
   638 00002030 66AB                <1>     stosw   ;Store X:
   639 00002032 8A05EBDFFFFF        <1>     mov al, byte [pathSep]
   640 00002038 AA                  <1>     stosb   ;Store pathSep
   641 00002039 56                  <1>     push rsi    ;Save user input string
   642 0000203A 4889FE              <1>     mov rsi, rdi    ;Put the current directory here for this drive
   643 0000203D B447                <1>     mov ah, 47h ;Get Current Working Directory, dl has drive number
   644 0000203F CD41                <1>     int 41h ;Won't fail as drive letter in dl confirmed ok
   645 00002041 5E                  <1>     pop rsi
   646                              <1>     ;Now want to find terminating null
   647 00002042 30C0                <1>     xor al, al
   648 00002044 31C9                <1>     xor ecx, ecx
   649 00002046 FFC9                <1>     dec ecx
   650 00002048 F2AE                <1>     repne scasb ;Search for the terminating null
   651 0000204A 48FFCF              <1>     dec rdi ;Go back one once found
   652 0000204D 8A05D0DFFFFF        <1>     mov al, byte [pathSep]
   653 00002053 3847FF              <1>     cmp byte [rdi - 1], al
   654 00002056 7425                <1>     je .buildPath ;If the previous char is a pathsep, skip storing another
   655 00002058 AA                  <1>     stosb   ;Store the pathsep
   656 00002059 EB22                <1>     jmp short .buildPath  ;Now we copy the user string over and good to go
   657                              <1> .absoluteCurrent:
   658 0000205B E826FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   659 00002060 0441                <1>     add al, "A"
   660 00002062 B43A                <1>     mov ah, ":" ;ax has X: now to store 
   661 00002064 488D3DABE2FFFF      <1>     lea rdi, searchSpec
   662 0000206B 66AB                <1>     stosw
   663 0000206D 8A05B0DFFFFF        <1>     mov al, byte [pathSep]
   664 00002073 AA                  <1>     stosb
   665 00002074 EB07                <1>     jmp short .buildPath
   666                              <1> .absolutePath:
   667 00002076 488D3D99E2FFFF      <1>     lea rdi, searchSpec
   668                              <1> .buildPath:
   669 0000207D E8EEEEFFFF          <1>     call copyCommandTailItem    ;Terminates with a 0 for free
   670 00002082 488D358DE2FFFF      <1>     lea rsi, searchSpec
   671 00002089 488D3D86E2FFFF      <1>     lea rdi, searchSpec
   672 00002090 B460                <1>     mov ah, 60h ;Truename it to avoid issues
   673 00002092 CD41                <1>     int 41h
   674                              <1>     retc    ;Return if an error with CF=CY
    63                              <2> cret c
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 00002094 7301                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 00002096 C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   675                              <1>     ;Here we do one final check to ensure we dont end up with a A: but A:"\"
   676 00002097 30C0                <1>     xor al, al
   677 00002099 31C9                <1>     xor ecx, ecx
   678 0000209B FFC9                <1>     dec ecx
   679 0000209D F2AE                <1>     repne scasb
   680 0000209F 48FFCF              <1>     dec rdi ;Go back to the final non-null char
   681 000020A2 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is the final non-null char a colon?
   682 000020A6 750A                <1>     jne .okExit   ;Return if not
   683 000020A8 31C0                <1>     xor eax, eax
   684 000020AA 8A0573DFFFFF        <1>     mov al, byte [pathSep]  ;IF it is, insert a pathsep
   685 000020B0 66AB                <1>     stosw   ;Store the terminating 0 after the pathsep
   686                              <1> .okExit:
   687 000020B2 F8                  <1>     clc
   688                              <1>     return
    19                              <2> %%_ret:
    20 000020B3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   689                              <1> printDecimalWord:
   690                              <1> ;Takes qword in rax and print it's decimal representation
   691                              <1> ;Takes the qword in eax and prints its decimal representation
   692 000020B4 31C9                <1>     xor ecx, ecx
   693 000020B6 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   694 000020B8 85C0                <1>     test eax, eax
   695 000020BA 750C                <1>     jnz .notZero
   696 000020BC B930000000          <1>     mov ecx, "0"
   697 000020C1 BD01000000          <1>     mov ebp, 1  ;Print one digit
   698 000020C6 EB3E                <1>     jmp short .dpfb2
   699                              <1> .notZero:
   700 000020C8 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   701 000020CA BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   702                              <1> .dpfb0:
   703 000020CF FFC5                <1>     inc ebp
   704 000020D1 81FD08000000        <1>     cmp ebp, 8
   705 000020D7 7206                <1>     jb .dpfb00
   706 000020D9 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   707 000020DD EB04                <1>     jmp short .dpfb01
   708                              <1> .dpfb00:
   709 000020DF 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   710                              <1> .dpfb01:
   711 000020E3 31D2                <1>     xor edx, edx
   712 000020E5 48F7F6              <1>     div rsi
   713 000020E8 80C230              <1>     add dl, '0'
   714 000020EB 80FA39              <1>     cmp dl, '9'
   715 000020EE 7603                <1>     jbe .dpfb1
   716 000020F0 80C207              <1>     add dl, 'A'-'0'-10
   717                              <1> .dpfb1:
   718 000020F3 81FD08000000        <1>     cmp ebp, 8
   719 000020F9 7204                <1>     jb .dpfb10
   720 000020FB 88D3                <1>     mov bl, dl ;Add the bottom bits
   721 000020FD EB02                <1>     jmp short .dpfb11
   722                              <1> .dpfb10:
   723 000020FF 88D1                <1>     mov cl, dl    ;Save remainder byte
   724                              <1> .dpfb11:
   725 00002101 4885C0              <1>     test rax, rax
   726 00002104 75C9                <1>     jnz .dpfb0
   727                              <1> .dpfb2:
   728 00002106 81FD08000000        <1>     cmp ebp, 8
   729 0000210C 7208                <1>     jb .dpfb20
   730 0000210E 88DA                <1>     mov dl, bl
   731 00002110 48C1EB08            <1>     shr rbx, 8
   732 00002114 EB06                <1>     jmp short .dpfb21
   733                              <1> .dpfb20:
   734 00002116 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   735 00002118 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   736                              <1> .dpfb21:
   737 0000211C B402                <1>     mov ah, 02h
   738 0000211E CD41                <1>     int 41h
   739 00002120 FFCD                <1>     dec ebp
   740 00002122 75E2                <1>     jnz .dpfb2
   741                              <1>     return
    19                              <2> %%_ret:
    20 00002124 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   742                              <1> 
   743                              <1> getDecimalWord:
   744                              <1> ;Works on MAX A dword in eax
   745                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   746 00002125 31C9                <1>     xor ecx, ecx
   747 00002127 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   748 00002129 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   749                              <1> .dpfb0:
   750 0000212E FFC5                <1>     inc ebp
   751 00002130 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   752 00002134 31D2                <1>     xor edx, edx
   753 00002136 48F7F3              <1>     div rbx
   754 00002139 80C230              <1>     add dl, '0'
   755 0000213C 80FA39              <1>     cmp dl, '9'
   756 0000213F 7603                <1>     jbe .dpfb1
   757 00002141 80C207              <1>     add dl, 'A'-'0'-10
   758                              <1> .dpfb1:
   759 00002144 88D1                <1>     mov cl, dl    ;Save remainder byte
   760 00002146 4885C0              <1>     test rax, rax
   761 00002149 75E3                <1>     jnz .dpfb0
   762                              <1>     return
    19                              <2> %%_ret:
    20 0000214B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   763                              <1> 
   764                              <1> freezePC:
   765 0000214C 488D154BE9FFFF      <1>     lea rdx, memBad1
   766 00002153 B409                <1>     mov ah, 09h
   767 00002155 CD41                <1>     int 41h
   768                              <1> .altEP:
   769 00002157 488D1569E9FFFF      <1>     lea rdx, memBad3
   770 0000215E B409                <1>     mov ah, 09h
   771 00002160 CD41                <1>     int 41h
   772                              <1> .lp:
   773 00002162 F390                <1>     pause
   774 00002164 F4                  <1>     hlt
   775 00002165 EBFB                <1>     jmp short .lp
   776                              <1> 
   777                              <1> getFilenamePtrFromFilespec:
   778                              <1> ;Gets a pointer to the first char of a filename from a asciiz pathspec
   779                              <1> ;Input: rsi = Pathspec to search
   780                              <1> ;Output: rsi = Points to the first char of the filename
   781 00002167 4889F3              <1>     mov rbx, rsi
   782 0000216A 31C0                <1>     xor eax, eax
   783 0000216C 4889F7              <1>     mov rdi, rsi    ;Go to the source string 
   784 0000216F E817FDFFFF          <1>     call strlen     ;Get it's length
   785 00002174 FFC9                <1>     dec ecx ;Dont include terminating null
   786 00002176 741F                <1>     jz .exitBad ;Was the string of length zero? Exit bad if so
   787 00002178 4801CE              <1>     add rsi, rcx    ;Goto last char in path (not null)
   788                              <1> .lp:
   789 0000217B 4839F3              <1>     cmp rbx, rsi    ;Is rdi pointing to the start of the string?
   790                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000217E 74(4B)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   791 00002180 8A06                <1>     mov al, byte [rsi]  ;Get the char we currently are at
   792 00002182 3C3A                <1>     cmp al, ":" ;X: ?
   793 00002184 740D                <1>     je .pointFilename
   794 00002186 3A0597DEFFFF        <1>     cmp al, byte [pathSep]  ;Is al pathSep?
   795 0000218C 7405                <1>     je .pointFilename
   796 0000218E 48FFCE              <1>     dec rsi ;Not a terminator, go back a char
   797 00002191 EBE8                <1>     jmp short .lp
   798                              <1> .pointFilename:
   799 00002193 48FFC6              <1>     inc rsi ;Now point to the first char of the pathname
   800                              <1>     return
    19                              <2> %%_ret:
    20 00002196 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   801                              <1> .exitBad:
   802 00002197 F9                  <1>     stc
   803                              <1> .exit:
   804                              <1>     return
    19                              <2> %%_ret:
    20 00002198 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    17                                  %include "./Source/Utils/COMMAND/Source/int44h.asm"
    18                              <1> critErrorHandler:   ;Int 44h
    19                              <1> ;User Stack in usage here, must be swapped to before this is called
    20                              <1> ;Entered with:  
    21                              <1> ;               AH = Critical Error Bitfield
    22                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    23                              <1> ;               Bit 6 - Reserved
    24                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    25                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    26                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    27                              <1> ;               Bits [2-1] = Affected Disk Error
    28                              <1> ;                     0 0   DOS area
    29                              <1> ;                     0 1   FAT area
    30                              <1> ;                     1 0   Directory area
    31                              <1> ;                     1 1   Data area
    32                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    33                              <1> ;               AL  = Failing drive number if AH[7] = 0
    34                              <1> ;               DIL = Error code for errorMsg
    35                              <1> ;               RSI = EA of Device Header for which device the error occured
    36                              <1> ;Return:
    37                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    38                              <1> ;                  = 1 - Retry the Operation    (Retry)
    39                              <1> ;                  = 2 - Terminate the Program  (Abort)
    40                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    41 00002199 53                  <1>     push rbx
    42 0000219A 51                  <1>     push rcx
    43 0000219B 52                  <1>     push rdx
    44 0000219C 57                  <1>     push rdi
    45 0000219D 56                  <1>     push rsi
    46 0000219E FC                  <1>     cld         ;Make String ops go forward
    47                              <1> 
    48 0000219F 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    49 000021A2 488D15AAE3FFFF      <1>     lea rdx, crlf
    50 000021A9 B409                <1>     mov ah, 09h ;Print String
    51 000021AB CD41                <1>     int 41h
    52                              <1> 
    53 000021AD 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    54 000021B3 B90C000000          <1>     mov ecx, 0Ch
    55 000021B8 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    56 000021BA 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    57 000021BD 480FB7FF            <1>     movzx rdi, di
    58 000021C1 4889FA              <1>     mov rdx, rdi    ;Copy error code
    59 000021C4 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    60 000021C8 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    61 000021CB 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    62 000021CE 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    63 000021D5 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    64 000021D9 B409                <1>     mov ah, 09h ;Print String
    65 000021DB CD41                <1>     int 41h     ;Call DOS to print first part of message
    66                              <1> 
    67 000021DD 488D1505020000      <1>     lea rdx, qword [.readmsg]
    68 000021E4 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    69 000021EB F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    70 000021EE 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    71 000021F2 B409                <1>     mov ah, 09h ;Print String
    72 000021F4 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    73                              <1> 
    74 000021F6 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    75 000021F9 0F85DF000000        <1>     jnz .charError
    76                              <1> ;Disk error continues here
    77 000021FF 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    78 00002206 B409                <1>     mov ah, 09h
    79 00002208 CD41                <1>     int 41h
    80 0000220A 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    81 0000220C 80C241              <1>     add dl, "A" ;Add ASCII code
    82 0000220F B402                <1>     mov ah, 02h ;Print char in dl
    83 00002211 CD41                <1>     int 41h
    84                              <1> .userInput:
    85 00002213 488D1539E3FFFF      <1>     lea rdx, crlf  ;Print new line
    86 0000221A B409                <1>     mov ah, 09h
    87 0000221C CD41                <1>     int 41h
    88                              <1> ;Abort, Retry, Ignore, Fail is word order
    89                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    90                              <1> .userAbort:
    91                              <1> ;Abort is always an option
    92 0000221E 488D15E2010000      <1>     lea rdx, qword [.abortmsg]
    93 00002225 B409                <1>     mov ah, 09h
    94 00002227 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
    95                              <1> .userRetry:
    96 00002229 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    97 0000222C 7416                <1>     jz .userIgnore    ;If clear, dont print message
    98 0000222E 488D15EA010000      <1>     lea rdx, qword [.betweenMsg]
    99 00002235 B409                <1>     mov ah, 09h
   100 00002237 CD41                <1>     int 41h
   101 00002239 488D15D4010000      <1>     lea rdx, qword [.retrymsg]
   102 00002240 B409                <1>     mov ah, 09h
   103 00002242 CD41                <1>     int 41h
   104                              <1> .userIgnore:
   105 00002244 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   106 00002247 7416                <1>     jz .userFail
   107 00002249 488D15CF010000      <1>     lea rdx, qword [.betweenMsg]
   108 00002250 B409                <1>     mov ah, 09h
   109 00002252 CD41                <1>     int 41h
   110 00002254 488D15B2010000      <1>     lea rdx, qword [.ignoremsg]
   111 0000225B B409                <1>     mov ah, 09h
   112 0000225D CD41                <1>     int 41h
   113                              <1> .userFail:
   114 0000225F F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   115 00002262 7416                <1>     jz .userMsgEnd
   116 00002264 488D15B4010000      <1>     lea rdx, qword [.betweenMsg]
   117 0000226B B409                <1>     mov ah, 09h
   118 0000226D CD41                <1>     int 41h
   119 0000226F 488D15A4010000      <1>     lea rdx, qword [.failmsg]
   120 00002276 B409                <1>     mov ah, 09h
   121 00002278 CD41                <1>     int 41h
   122                              <1> .userMsgEnd:
   123 0000227A 488D15A1010000      <1>     lea rdx, qword [.endMsg]
   124 00002281 B409                <1>     mov ah, 09h
   125 00002283 CD41                <1>     int 41h
   126                              <1> ;Get user input now 
   127 00002285 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   128 00002287 488D3D97010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   129 0000228E B401                <1>     mov ah, 01h ;STDIN without Console Echo
   130 00002290 CD41                <1>     int 41h ;Get char in al
   131 00002292 3C61                <1>     cmp al, "a" ;Chack if lowercase
   132 00002294 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   133 00002296 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   134                              <1> .uip1:
   135 00002298 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   136 00002299 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   137 0000229B FFC1                <1>     inc ecx
   138 0000229D 81F904000000        <1>     cmp ecx, 4
   139 000022A3 75F3                <1>     jne .uip1
   140 000022A5 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   141                              <1> .validInput:
   142 000022AA 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   143                              <1> ;Now check if the input is permitted
   144 000022AC 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   145 000022AE 7427                <1>     je .cehExit
   146 000022B0 84C0                <1>     test al, al ;Check if 0 => Ignore
   147 000022B2 740F                <1>     je .viIgnore
   148 000022B4 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   149 000022B6 7416                <1>     je .viRetry
   150                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   151 000022B8 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   152 000022BB 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   153 000022C1 EB14                <1>     jmp short .cehExit
   154                              <1> .viIgnore:
   155 000022C3 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   156 000022C6 0F8447FFFFFF        <1>     jz .userInput
   157 000022CC EB09                <1>     jmp short .cehExit
   158                              <1> .viRetry:
   159 000022CE F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   160 000022D1 0F843CFFFFFF        <1>     jz .userInput
   161                              <1> .cehExit:
   162 000022D7 5E                  <1>     pop rsi
   163 000022D8 5F                  <1>     pop rdi
   164 000022D9 5A                  <1>     pop rdx
   165 000022DA 59                  <1>     pop rcx
   166 000022DB 5B                  <1>     pop rbx
   167 000022DC 48CF                <1>     iretq
   168                              <1> .charError:
   169 000022DE B908000000          <1>     mov ecx, 8  ;8 chars in device name
   170 000022E3 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   171                              <1> .ce1:
   172 000022EA AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   173 000022EB 88C2                <1>     mov dl, al  ;Move char into dl
   174 000022ED B402                <1>     mov ah, 02h
   175 000022EF CD41                <1>     int 41h ;Print char
   176 000022F1 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   177 000022F3 E91BFFFFFF          <1>     jmp .userInput
   178                              <1> 
   179                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   180 000022F8 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   180 00002301 746563742024202020  <1>
   181 0000230A 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   181 00002313 6E6974202420202020  <1>
   182 0000231C 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   182 00002325 202420202020202020  <1>
   183 0000232E 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   183 00002337 6F6D6D616E64202420  <1>
   184 00002340 446174612024202020- <1>             db "Data $            "       ;Error 4
   184 00002349 202020202020202020  <1>
   185 00002352 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   185 0000235B 737420242020202020  <1>
   186 00002364 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   186 0000236D 202020202020202020  <1>
   187 00002376 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   187 0000237F 656469612024202020  <1>
   188 00002388 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   188 00002391 7420466F756E642024  <1>
   189 0000239A 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   189 000023A3 706572202420202020  <1>
   190 000023AC 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   190 000023B5 6C7420242020202020  <1>
   191 000023BE 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   191 000023C7 742024202020202020  <1>
   192 000023D0 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   192 000023D9 61696C757265202420  <1>
   193                              <1> 
   194 000023E2 64726976652024      <1> .drive      db "drive $"
   195 000023E9 6572726F7220726561- <1> .readmsg    db "error reading $"
   195 000023F2 64696E672024        <1>
   196 000023F8 6572726F7220777269- <1> .writemsg   db "error writing $"
   196 00002401 74696E672024        <1>
   197 00002407 41626F727424        <1> .abortmsg   db "Abort$" 
   198 0000240D 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   199 00002414 526574727924        <1> .retrymsg   db "Retry$"
   200 0000241A 4661696C24          <1> .failmsg    db "Fail$"
   201 0000241F 2C2024              <1> .betweenMsg db ", $"
   202 00002422 3F2024              <1> .endMsg     db "? $"
   203 00002425 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   204                              <1> 
   205                              <1> int43h:
   206 00002429 F9                  <1>     stc     ;Set CF to kill the task
   207 0000242A C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    18                                  %include "./Source/Utils/COMMAND/Data/cmdEnv.asm"
    19                              <1>     
    20                              <1> masterEnv:  ;Yeet this is this is a child command processor
    21 0000242D 5F3A434F4D4D414E44- <1>     db "_:COMMAND.COM",0
    21 00002436 2E434F4D00          <1>
    22 0000243B 504154483D0000      <1>     db "PATH=",0,0  ;Terminate with two null bytes
    23 00002442 202020202020202020- <1>     db ($ - masterEnv) dup (" ")    ;Pad the environment with spaces
    23 0000244B 202020202020202020- <1>
    23 00002454 202020              <1>
    24                              <1> endOfAlloc: ;Symbol to find the start of where I can yeet 
    19                                  %include "./Source/Utils/COMMAND/Source/cmdLdr.asm"
    20                              <1> cmdLdr:
    21                              <1> ;First check if the version is ok. If not, return.
    22 00002457 B430                <1>     mov ah, 30h
    23 00002459 CD41                <1>     int 41h
    24 0000245B 3C01                <1>     cmp al, 01h ;Version 1
    25 0000245D 760D                <1>     jbe .okVersion
    26 0000245F 488D1590010000      <1>     lea rdx, badVerStr
    27 00002466 B409                <1>     mov ah, 09h
    28 00002468 CD41                <1>     int 41h
    29 0000246A CD40                <1>     int 40h ;Exit to caller or DOS to print bad command interpreter line
    30                              <1> .okVersion:
    31                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    32 0000246C 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    33 00002470 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    34 00002474 48890594DBFFFF      <1>     mov qword [realParent], rax ;Preserve the real parent address
    35                              <1> ;Setup Int 43h and Int 44h
    36 0000247B 488D1517FDFFFF      <1>     lea rdx, critErrorHandler
    37 00002482 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    38 00002486 B844250000          <1>     mov eax, 2544h
    39 0000248B CD41                <1>     int 41h
    40 0000248D 488D1595FFFFFF      <1>     lea rdx, int43h
    41 00002494 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    42 00002498 B843250000          <1>     mov eax, 2543h
    43 0000249D CD41                <1>     int 41h
    44 0000249F 488D157AE6FFFF      <1>     lea rdx, applicationReturn
    45 000024A6 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    46 000024AA B842250000          <1>     mov eax, 2542h
    47 000024AF CD41                <1>     int 41h
    48                              <1> ;Get a pointer to DOS Sysvars
    49 000024B1 B452                <1>     mov ah, 52h ;Get sysvars
    50 000024B3 CD41                <1>     int 41h
    51 000024B5 48891D5BDBFFFF      <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    52                              <1> ;Call for simple internationalisation data
    53 000024BC B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    54 000024C1 CD41                <1>     int 41h
    55 000024C3 3CFF                <1>     cmp al, -1
    56 000024C5 7412                <1>     je .skipSwitch
    57 000024C7 881557DBFFFF        <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    58 000024CD 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    59 000024D0 7507                <1>     jne .skipSwitch
    60 000024D2 C6054ADBFFFF2F      <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    61                              <1> .skipSwitch:
    62 000024D9 B800380000          <1>     mov eax, 3800h  ;Get current country data
    63 000024DE 488D1540DBFFFF      <1>     lea rdx, ctryData
    64 000024E5 CD41                <1>     int 41h ;Write the data to the internal country table
    65                              <1> ;Now determine if this is the master copy of COMMAND.COM
    66                              <1> ;Check if Int 4Eh has the same address as Int 4Dh. If so, we are master.
    67 000024E7 B84E350000          <1>     mov eax, 354Eh  ;Get int 4Eh address
    68 000024EC CD41                <1>     int 41h
    69 000024EE 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    70 000024F1 B84D350000          <1>     mov eax, 354Dh  ;Get int 4Dh address
    71 000024F6 CD41                <1>     int 41h
    72 000024F8 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    73 000024FB 7555                <1>     jne .skipMaster
    74                              <1> ;Ok so we are master command.com
    75                              <1> ;Now make myself the real parent
    76 000024FD 4C89050BDBFFFF      <1>     mov qword [realParent], r8
    77                              <1> ;Set master environment as mine
    78 00002504 488D0522FFFFFF      <1>     lea rax, masterEnv
    79 0000250B 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    80                              <1> ;Set current Drive in COMSPEC
    81 0000250F B019                <1>     mov al, 19h ;Get current Drive
    82 00002511 CD41                <1>     int 41h
    83 00002513 0441                <1>     add al, "A"
    84 00002515 880512FFFFFF        <1>     mov byte [masterEnv], al
    85                              <1> ;Set Int 4Eh up
    86 0000251B 488D1578EAFFFF      <1>     lea rdx, int4Eh
    87 00002522 B84E250000          <1>     mov eax, 254Eh ;Set this as Int 4Eh
    88 00002527 CD41                <1>     int 41h
    89                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    90                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    91 00002529 488D1523E0FFFF      <1>     lea rdx, crlf
    92 00002530 B409                <1>     mov ah, 09h
    93 00002532 CD41                <1>     int 41h
    94 00002534 E863F0FFFF          <1>     call time
    95 00002539 E898EFFFFF          <1>     call date
    96 0000253E 488D150EE0FFFF      <1>     lea rdx, crlf
    97 00002545 B409                <1>     mov ah, 09h
    98 00002547 CD41                <1>     int 41h
    99 00002549 488D1D07FFFFFF      <1>     lea rbx, endOfAlloc ;Save the Master Environment
   100 00002550 EB07                <1>     jmp short .printInit
   101                              <1> .skipMaster:
   102 00002552 488D1DD4FEFFFF      <1>     lea rbx, masterEnv  ;This is the base address to jettison
   103                              <1> .printInit:
   104                              <1> ;Finish by printing INIT string.
   105 00002559 53                  <1>     push rbx
   106 0000255A 488D1521000000      <1>     lea rdx, initString
   107 00002561 B409                <1>     mov ah, 09h
   108 00002563 CD41                <1>     int 41h ;Print init string
   109 00002565 E8ACF3FFFF          <1>     call version.printVersionNumber
   110 0000256A 488D1547000000      <1>     lea rdx, initString2
   111 00002571 B409                <1>     mov ah, 09h
   112 00002573 CD41                <1>     int 41h ;Print init string
   113 00002575 5B                  <1>     pop rbx
   114 00002576 48892588DAFFFF      <1>     mov qword [stackBottom], rsp    ;Use this to save where to reset rsp to
   115 0000257D E98AE5FFFF          <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   116                              <1> ;Loader Data here
   117                              <1> initString: 
   118 00002582 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   118 0000258B 66696320436F6D7075- <1>
   118 00002594 746572205265736561- <1>
   118 0000259D 726368285229205343- <1>
   118 000025A6 502F444F5328522920- <1>
   118 000025AF 56657273696F6E2024  <1>
   119                              <1> initString2:
   120 000025B8 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Reserach 2022.",CR,LF,"$"
   120 000025C1 202020284329436F70- <1>
   120 000025CA 797269676874205363- <1>
   120 000025D3 69656E746966696320- <1>
   120 000025DC 436F6D707574657220- <1>
   120 000025E5 526573657261636820- <1>
   120 000025EE 323032322E0D0A24    <1>
   121 000025F6 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   121 000025FF 20444F532076657273- <1>
   121 00002608 696F6E0D0A24        <1>
   121          ------------------  <1>  info: assembly required 1+2+2 passes

