     1                                  ;COMMAND.COM main file
     2                                  [map all ./Utils/COMMAND/Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Source/Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     7                                  %include "./Source/Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    18 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    19 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    20 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    21 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    22 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    23 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    24 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    25 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    26 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    27 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    31 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    32 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    33 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    57 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    58                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    59                              <1> ; another, we save the number of chars to skip to that deep level).
    60                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    61                              <1> ; Only affects for SUBST drives, not JOIN
    62                              <1> ; Flags: Bit 15 set = Network drive
    63                              <1> ;        Bit 14 set = Physical drive
    64                              <1> ;        Bit 13 set = JOIN'ed drive
    65                              <1> ;        Bit 12 set = SUBST'ed drive
    66                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    67                              <1> endstruc
    68                              <1> ;CDS equates
    69                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    70                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    71                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    72                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    73                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    74                              <1> ;------------------------------------------------------------------------;
    75                              <1> ; The SFT is a way to allow applications to open file handles to files 
    76                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    77                              <1> ; under the first header, and then a second header will be linked to the 
    78                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    79                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    80                              <1> ; using the FCBS= command. Default FCBS=5.
    81                              <1> ;
    82                              <1> ; A file handle describes the file, and the location within the file that
    83                              <1> ; we are reading. The file handle can be manipulated without the file
    84                              <1> ; being in memory, thus allowing the user to access data without needing 
    85                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    86                              <1> ; accessing devices, by treating them as files with their drivers 
    87                              <1> ; responding and translating the manipulations of the file handle itself.
    88                              <1> ; Neither the driver nor the application should see or use the SFT for
    89                              <1> ; the handle, as it is subject to change (and will change when file 
    90                              <1> ; sharing provisions are included). The DOS will make requests to the 
    91                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    92                              <1> ; track of the information in the SFT entry for that handle. 
    93                              <1> ;
    94                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    95                              <1> ; can point to the same file. It all depends on what the applications 
    96                              <1> ; want to do with the File.
    97                              <1> ;
    98                              <1> ; !!!!IMPORTANT!!!!
    99                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   100                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   101                              <1> ;
   102                              <1> ;Each SFT may look like this:
   103                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   104                              <1> ;            |                |
   105                              <1> ;       wNumFiles*sft    wNumFiles*sft
   106                              <1> ;
   107                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   108                              <1> ; System FCBs.
   109                              <1> ;
   110                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   111                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   112                              <1> ;
   113                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   114                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   115                              <1> ;------------------------------------------------------------------------;
   116                              <1> struc sfth   ;System file table header
   117                              <1> ; This is the SFT header.
   118                              <1> ; This structure comes before the start of the first file in the array/table.
   119 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   120 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   121                              <1> endstruc
   122                              <1> 
   123                              <1> struc sft
   124                              <1> ;This is the file struc itself
   125 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   126 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   127 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   128 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   129 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   130 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   131 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   132 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   133 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   134 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   135 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   136 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   137 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   138 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   139 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   140 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   141 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   142 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   143 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   144                              <1> ;                           0 means no record
   145                              <1> endstruc
   146                              <1> ;Open Mode equates
   147                              <1> ;Access modes   Bits[2:0]
   148                              <1> ReadAccess      equ 0h
   149                              <1> WriteAccess     equ 1h
   150                              <1> RWAccess        equ 2h
   151                              <1> ;Bit 3 reserved 0
   152                              <1> ;Sharing modes  Bits[6:4]
   153                              <1> CompatShare     equ 0h
   154                              <1> denyRWShare     equ 10h
   155                              <1> denyWriteShare  equ 20h
   156                              <1> denyReadShare   equ 30h
   157                              <1> denyNoneShare   equ 40h
   158                              <1> netFCBShare     equ 70h
   159                              <1> noInherit       equ 80h
   160                              <1> ;Bits 8-12 reserved 0
   161                              <1> 
   162                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   163                              <1> ;Buffering on writes
   164                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   165                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   166                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   167                              <1> ;Attribute Byte
   168                              <1> readOnlyFile    equ 1h
   169                              <1> hiddenFile      equ 2h
   170                              <1> systemFile      equ 4h
   171                              <1> volumeLabel     equ 8h
   172                              <1> directoryFile   equ 10h ;Directory entry
   173                              <1> archiveFile     equ 20h
   174                              <1> ;Device Info equates
   175                              <1> ;For a block device, bits [5:0] contain the drive number
   176                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   177                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   178                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   179                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   180                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   181                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   182                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   183                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   184                              <1> devCharDev      equ 80h ;If set, it is a char device!
   185                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   186                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   187                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   188                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   189                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   190                              <1>  
   191                              <1> ;------------------------------------------------------------------------;
   192                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   193                              <1> ; to an internal buffer, and then copying it to the specified location
   194                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   195                              <1> ; another request for the same sector from the same device is made, so 
   196                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   197                              <1> ; size, selected according to the largest detected sector size during 
   198                              <1> ; the initial loadup.
   199                              <1> ;
   200                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   201                              <1> ;
   202                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   203                              <1> ;------------------------------------------------------------------------;
   204                              <1> 
   205                              <1> struc bufferHdr
   206 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   207 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   208 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   209 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   210 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   211 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   212 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   213 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   214 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   215                              <1>     .dataarea:             ;Points to the start of the data area
   216                              <1> endstruc
   217                              <1> ;Buffer Flag equates
   218                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   219                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   220                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   221                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   222                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   223                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   224                              <1> ;Note! A buffer is marked as referenced only when the application 
   225                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   226                              <1> ;------------------------------------------------------------------------;
   227                              <1> ; Memory control block for each memory arena
   228                              <1> ;------------------------------------------------------------------------;
   229                              <1> struc mcb
   230 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   231 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   232 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   233 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   234                              <1>     .program:
   235                              <1> endstruc
   236                              <1> ;MCB equates
   237                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   238                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   239                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   240                              <1> mcbMarkCtn      equ "M"
   241                              <1> mcbMarkEnd      equ "Z"
   242                              <1> 
   243                              <1> memFirstFit     equ 0   ;First free block goes to application
   244                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   245                              <1> memLastFit      equ 2   ;Last free block goes to application
   246                              <1> 
   247                              <1> ;Owner = Para aligned address => Owning application PSP
   248                              <1> ;...To consider...
   249                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   250                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   251                              <1> ;------------------------------------------------------------------------;
   252                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   253                              <1> ; following order, thus allowing for return values to be placed in the 
   254                              <1> ; registers by accessing the caller register stack frame.
   255                              <1> ;------------------------------------------------------------------------;
   256                              <1> struc callerFrame
   257 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   258 00000008 ????????????????    <1>     .rbx    resq 1    
   259 00000010 ????????????????    <1>     .rcx    resq 1
   260 00000018 ????????????????    <1>     .rdx    resq 1
   261 00000020 ????????????????    <1>     .rsi    resq 1
   262 00000028 ????????????????    <1>     .rdi    resq 1
   263 00000030 ????????????????    <1>     .rbp    resq 1
   264 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   265 00000040 ????????????????    <1>     .r9     resq 1
   266                              <1> ;Pushed by Processor when invoked via Interrupt
   267 00000048 ????????????????    <1>     .rip    resq 1
   268 00000050 ????????????????    <1>     .cs     resq 1
   269 00000058 ????????????????    <1>     .flags  resq 1
   270                              <1> endstruc
   271                              <1> 
   272                              <1> struc dpl
   273                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   274                              <1> ; server calls
   275 00000000 ????????????????    <1>     .rax    resq 1
   276 00000008 ????????????????    <1>     .rbx    resq 1
   277 00000010 ????????????????    <1>     .rcx    resq 1
   278 00000018 ????????????????    <1>     .rdx    resq 1
   279 00000020 ????????????????    <1>     .rsi    resq 1
   280 00000028 ????????????????    <1>     .rdi    resq 1
   281 00000030 ????????????????    <1>     .r8     resq 1
   282 00000038 ????????????????    <1>     .r9     resq 1
   283 00000040 ????????????????    <1>     .align  resq 1
   284 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   285 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   286                              <1> endstruc
   287                              <1> 
   288                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   289 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   290 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   291 00000010 ????????????????    <1>     .newSFTVal      resq 1
   292 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   293 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   294 00000028 ????????????????    <1>     .newLastdrive   resq 1
   295 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   296 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   297 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   298 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   299 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   300 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   301 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   302                              <1> endstruc
   303                              <1> 
   304                              <1> struc filename
   305                              <1> ;8.3 File name struct
   306 00000000 ????????????????    <1>     .fName  resb 8
   307 00000008 ??????              <1>     .fExt   resb 3
   308                              <1> endstruc
   309                              <1> 
   310                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   311 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   312 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   313 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   314 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   315 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   316 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   317 00000016 ????                <1>     .fileTime   resw 1  ;File time
   318 00000018 ????                <1>     .fileDate   resw 1  ;File date
   319 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   320 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   321                              <1> endstruc
   322                              <1> 
   323                              <1> struc psp
   324 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   325 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   326 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes
   327 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   328 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   329 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   330 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   331                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   332 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   333 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   334 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   335 0000004E ????                <1>     .jftSize    resw 1  ;JFT array size, 20 => PSP JFT in use
   336 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   337 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   338 0000005B ??                  <1>                 resb 1  ;Reserved byte
   339                              <1> ;If xtraHdlSz > 20, then the QWORD at .jobFileTbl becomes a pointer
   340                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   341                              <1> ;If xtraHdlSz < 20 (DOS will never set it so), then it is considered as 20
   342                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   343                              <1> ; always used and xtraHdlSz.
   344                              <1> ;Will need to add two SYSCALLS for future expansion:
   345                              <1> ;       1) Get Program Environment Pointer
   346                              <1> ;       2) Get Command Line arguments pointer
   347                              <1> ;The below are in the same place as in DOS.
   348                              <1>     .cmdLineArgPtr: ;Symbol for future use
   349 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB,    argument 1 
   350 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB,   argument 2
   351                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   352 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   353 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   354                              <1> endstruc
   355                              <1> 
   356                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   357                              <1> 
   358                              <1> struc clkStruc
   359 00000000 ????                <1>     .dateWord   resw 1
   360 00000002 ??                  <1>     .minutes    resb 1
   361 00000003 ??                  <1>     .hours      resb 1
   362 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   363 00000005 ??                  <1>     .seconds    resb 1
   364                              <1> endstruc
   365                              <1> 
   366                              <1> struc countryStruc
   367 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   368                              <1>                         ;0 = month day year hh:mm:ss
   369                              <1>                         ;1 = day month year hh:mm:ss
   370                              <1>                         ;2 = year month day hh:mm:ss
   371 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   372 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   373 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   374 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   375 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   376 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   377                              <1>                         ;0 = Symbol leads, without space
   378                              <1>                         ;1 = Symbol follows, without space
   379                              <1>                         ;2 = Symbol leads, one space
   380                              <1>                         ;3 = Symbol follows, one space
   381                              <1>                         ;4 = Symbol replace decimal separator
   382 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   383 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   384 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   385 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   386 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   387                              <1> endstruc
   388                              <1> 
   389                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   390                              <1> ;for a space of 64Gb
   391                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   392                              <1> dosLowBase  equ 600h    ;Low load address
   393                              <1> 
   394                              <1> ;Critical Error AH bitfield equates
   395                              <1> critRead    equ 0h
   396                              <1> critWrite   equ 1h
   397                              <1> critDOS     equ 0h
   398                              <1> critFAT     equ 2h
   399                              <1> critDir     equ 4h
   400                              <1> critData    equ 6h
   401                              <1> critFailOK  equ 8h
   402                              <1> critRetryOK equ 10h
   403                              <1> critIgnorOK equ 20h
   404                              <1> critCharDev equ 80h
   405                              <1> 
   406                              <1> critIgnore  equ 0
   407                              <1> critRetry   equ 1
   408                              <1> critAbort   equ 2
   409                              <1> critFail    equ 3
   410                              <1> 
   411                              <1> ;MISC ASCII control chars
   412                              <1> NUL equ 00h ;^@         | ASCII Null
   413                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   414                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   415                              <1> BEL equ 07h ;^G         | ASCII Bell
   416                              <1> BSP equ 08h ;^H         | ASCII Backspace
   417                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   418                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   419                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   420                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   421                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   422                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   423                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   424                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   425                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   426                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   427                              <1> SPC equ 20h ;Printable  | ASCII Space
   428                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   429                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   430                              <1> 
   431                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   432                              <1> ;Extended Ascii Codes
   433                              <1> eF1     equ 3Bh ;F1 second byte
   434                              <1> eF2     equ 3Ch ;F2 second byte
   435                              <1> eF3     equ 3Dh ;F3 second byte
   436                              <1> eF4     equ 3Eh ;F4 second byte
   437                              <1> eF5     equ 3Fh ;F5 second byte
   438                              <1> eF6     equ 40h ;F6 second byte
   439                              <1> eF7     equ 41h ;F7 second byte
   440                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   441                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   442                              <1> eIns    equ 52h ;Insert second byte
   443                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   444                              <1> 
   445                              <1> ;Default Configuration for the system
   446                              <1> 
   447                              <1> buffersDefault  equ 30
   448                              <1> filesDefault    equ 20
   449                              <1> fcbsDefault     equ 4
   450                              <1> safeFcbsDeflt   equ 0
   451                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Source/Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> ;FCBmode equates:
    62                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    63                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    64                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    65                              <1> fcbShareOn  equ 80h
    66                              <1> fcbCharDev  equ 40h
    67                              <1> fcbLocal    equ 40h
    68                              <1> 
    69                              <1> ;Structures of the special 6 bytes
    70                              <1> 
    71                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    72                              <1> struc noShare   
    73 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    74 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    75 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    76 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    77                              <1> endstruc
    78                              <1> 
    79                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    80                              <1> struc shareLocal    
    81 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    82 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    83 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    84                              <1> endstruc
    85                              <1> 
    86                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    87                              <1> struc shareNet
    88                              <1> ;All three fields too small for FAT32
    89 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    90 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    91 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
    92                              <1> endstruc
     9                                  %include "./Source/Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI44     equ 83  ;Fail on INT 44h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Utils/COMMAND/Data/cmdEqu.asm"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 128 ;Length of a command line buffer
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdLineCnt  equ psp.parmList
    19                              <1> cmdLine     equ psp.progTail
    20                              <1> 
    21                              <1> 
    22                              <1> ;Struct Declarations
    23                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    24 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    25 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    26 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    27 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    28 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    29                              <1> endstruc
    30                              <1> 
    31                              <1> struc execProg  ;For use with EXEC-ing a child task
    32 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    33 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    34 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    35 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    36                              <1> endstruc
    37                              <1> 
    38                              <1> ;Directory attribute equates
    39                              <1>     dirReadOnly     equ 01h
    40                              <1>     dirHidden       equ 02h
    41                              <1>     dirSystem       equ 04h
    42                              <1>     dirVolumeID     equ 08h
    43                              <1>     dirDirectory    equ 10h
    44                              <1>     dirArchive      equ 20h
    45                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    46                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    47                              <1>     ;If any of the three bits are set, then ALL three bits are set
    48                              <1>     ; in addition to whatever the user passed to search for.
    49                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    50                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Utils/COMMAND/Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9(00000000)        <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
     8 0000001F 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted, hardcoded in this version
    10 00000029 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    11 0000002B 5C                  <1> pathSep     db "\"  ;Default path sep
    12 0000002C 2F                  <1> switchChar  db "/"  ;Default switch char
    13 0000002D 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    14 0000002E 0000000000000000    <1> parentInt42 dq 0    ;Stores the parent values to restore upon exiting if it can
    15                              <1> ;Static strings, not used in command line parsing
    16 00000036 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    16 0000003F 000000000000000000- <1>
    16 00000048 000000000000000000- <1>
    16 00000051 000000000000000000- <1>
    16 0000005A 0000                <1>
    17 0000005C 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    17 00000065 000000000000000000- <1>
    17 0000006E 000000000000000000- <1>
    17 00000077 000000000000000000- <1>
    17 00000080 000000000000000000- <1>
    17 00000089 000000000000000000- <1>
    17 00000092 000000000000000000- <1>
    17 0000009B 00000000            <1>
    18                              <1> 
    19                              <1> 
    20                              <1> cmdLineStatePtr:
    21 0000009F 00                  <1> cmdStartOff db 0    ;Offset to the first char for this command (may be a space)
    22 000000A0 00                  <1> cmdEndOff   db 0    ;Offset to the terminating char for this command (0Dh or |)
    23 000000A1 00                  <1> newPipeFlag db 0    ;If set, we fired up a new pipe for this command
    24 000000A2 00                  <1> pipeNumber  db 0    ;Count of active pipes (1 if a | b or 2 if a | b | c ...)
    25 000000A3 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    26 000000A5 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    27                              <1> 
    28                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    29                              <1> ;These variables are valid for a SINGLE command in a command line
    30 000000A7 0000                <1> cmdDrvSpec  dw 0    ;Read the first word in to see if the pathspec has drivespec
    31 000000A9 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    32 000000AA 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    33                              <1> ;                    If 2, we are redirecting output to a file, by appending
    34 000000AB FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    35 000000AD FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    36                              <1> 
    37 000000AF 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    38 000000B0 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    39 000000B1 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    40                              <1> 
    41 000000B2 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    42 000000B3 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    43 000000B4 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    44                              <1> 
    45                              <1> cmdStateL equ $ - cmdStatePtr
    46                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    47                              <1> 
    48                              <1> ;Structs and strings
    49                              <1> 
    50 000000B5 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    50 000000BE 00000000000000      <1>
    51 000000C5 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    51 000000CE 000000000000000000- <1>
    51 000000D7 000000000000000000- <1>
    51 000000E0 000000000000000000- <1>
    51 000000E9 00000000000000      <1>
    52                              <1> 
    53 000000F0 000000000000000000- <1> launchBlock db execProg_size dup (0)
    53 000000F9 000000000000000000- <1>
    53 00000102 000000000000000000- <1>
    53 0000010B 0000000000          <1>
    54                              <1> 
    55 00000110 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    55 00000119 000000000000000000- <1>
    55 00000122 000000000000000000- <1>
    55 0000012B 000000000000000000- <1>
    55 00000134 000000000000000000- <1>
    55 0000013D 000000000000000000- <1>
    55 00000146 000000000000000000- <1>
    55 0000014F 000000000000000000- <1>
    55 00000158 000000000000000000- <1>
    55 00000161 000000000000000000- <1>
    55 0000016A 000000000000000000- <1>
    55 00000173 000000000000000000- <1>
    55 0000017C 000000000000000000- <1>
    55 00000185 000000000000000000- <1>
    55 0000018E 0000                <1>
    56 00000190 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    56 00000199 000000000000000000- <1>
    56 000001A2 000000000000000000- <1>
    56 000001AB 000000000000000000- <1>
    56 000001B4 000000000000000000- <1>
    56 000001BD 000000000000000000- <1>
    56 000001C6 000000000000000000- <1>
    56 000001CF 000000000000000000- <1>
    56 000001D8 000000000000000000- <1>
    56 000001E1 000000000000000000- <1>
    56 000001EA 000000000000000000- <1>
    56 000001F3 000000000000000000- <1>
    56 000001FC 000000000000000000- <1>
    56 00000205 000000000000000000- <1>
    56 0000020E 0000                <1>
    57 00000210 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)  ;Space for full path to a external command
    57 00000219 000000000000000000- <1>
    57 00000222 000000000000000000- <1>
    57 0000022B 000000000000000000- <1>
    57 00000234 000000000000000000- <1>
    57 0000023D 000000000000000000- <1>
    57 00000246 000000000000000000- <1>
    57 0000024F 000000000000000000- <1>
    57 00000258 00000000000000      <1>
    58                              <1> 
    59 0000025F 000000000000000000- <1> fcbCmdSpec  db fcbNameL dup (0) ;Used to make a FCB style name for the file
    59 00000268 0000                <1>
    60 0000026A 000000000000000000- <1> cmdSpec     db fileNameZL dup (0)   ;ASCIIZ command spec for the command name
    60 00000273 00000000            <1>
    61 00000277 000000000000000000- <1> cmdName     db cmdNameL dup (0) ;Command name string prefixed by length of word
    61 00000280 0000000000          <1>
    62                              <1> 
    63 00000285 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    63 0000028E 000000000000000000- <1>
    63 00000297 000000000000000000- <1>
    63 000002A0 000000000000000000- <1>
    63 000002A9 000000000000000000- <1>
    63 000002B2 000000000000000000- <1>
    63 000002BB 000000000000000000- <1>
    63 000002C4 000000000000000000- <1>
    63 000002CD 00000000000000      <1>
    64 000002D4 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    64 000002DD 000000000000000000- <1>
    64 000002E6 000000000000000000- <1>
    64 000002EF 000000000000000000- <1>
    64 000002F8 000000000000000000- <1>
    64 00000301 000000000000000000- <1>
    64 0000030A 000000000000000000- <1>
    64 00000313 000000000000000000- <1>
    64 0000031C 00000000000000      <1>
    65                              <1> 
    66                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    67 00000323 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    67 0000032C 000000000000000000- <1>
    67 00000335 000000000000000000- <1>
    67 0000033E 000000000000000000- <1>
    67 00000347 000000000000000000- <1>
    67 00000350 000000000000000000- <1>
    67 00000359 000000000000000000- <1>
    67 00000362 000000000000000000- <1>
    67 0000036B 00000000000000      <1>
    68 00000372 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    68 0000037B 000000000000000000- <1>
    68 00000384 000000000000000000- <1>
    68 0000038D 000000000000000000- <1>
    68 00000396 000000000000000000- <1>
    68 0000039F 000000000000000000- <1>
    68 000003A8 000000000000000000- <1>
    68 000003B1 000000000000000000- <1>
    68 000003BA 00000000000000      <1>
    69                              <1> 
    70 000003C1 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    71 000003C9 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    72                              <1> 
    73 000003D1 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Contains the pathspec for the search file
    73 000003DA 000000000000000000- <1>
    73 000003E3 000000000000000000- <1>
    73 000003EC 000000000000000000- <1>
    73 000003F5 000000000000000000- <1>
    73 000003FE 000000000000000000- <1>
    73 00000407 000000000000000000- <1>
    73 00000410 000000000000000000- <1>
    73 00000419 000000000000000000- <1>
    73 00000422 000000000000000000- <1>
    73 0000042B 000000000000000000- <1>
    73 00000434 000000000000000000- <1>
    73 0000043D 000000000000000000- <1>
    73 00000446 000000000000000000- <1>
    73 0000044F 0000                <1>
    74                              <1> ;The above is larger than is needed/supported by DOS to allow for 
    75                              <1> ; users overtyping
    76                              <1> 
    77                              <1> ;Internal Function vars
    78                              <1> ;Dir Vars
    79 00000451 00                  <1> dirPrnType  db 0    ;Print type.    Bit[0] set => /W or /w specified
    80                              <1> ;                                   Bit[1] set => /P or /p specified
    81 00000452 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    82 00000453 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    83 00000454 00                  <1> dirDrv      db 0    ;0 based drive number to use
    84 00000455 000000000000000000- <1> dirOldCWD   db cmdBufferL dup (0)   ;Space for CWD and any overspill 
    84 0000045E 000000000000000000- <1>
    84 00000467 000000000000000000- <1>
    84 00000470 000000000000000000- <1>
    84 00000479 000000000000000000- <1>
    84 00000482 000000000000000000- <1>
    84 0000048B 000000000000000000- <1>
    84 00000494 000000000000000000- <1>
    84 0000049D 000000000000000000- <1>
    84 000004A6 000000000000000000- <1>
    84 000004AF 000000000000000000- <1>
    84 000004B8 000000000000000000- <1>
    84 000004C1 000000000000000000- <1>
    84 000004CA 000000000000000000- <1>
    84 000004D3 0000                <1>
    85 000004D5 000000000000000000- <1> dirPathArg  db cmdBufferL dup (0)   ;Copy the pathspec argument here if any
    85 000004DE 000000000000000000- <1>
    85 000004E7 000000000000000000- <1>
    85 000004F0 000000000000000000- <1>
    85 000004F9 000000000000000000- <1>
    85 00000502 000000000000000000- <1>
    85 0000050B 000000000000000000- <1>
    85 00000514 000000000000000000- <1>
    85 0000051D 000000000000000000- <1>
    85 00000526 000000000000000000- <1>
    85 0000052F 000000000000000000- <1>
    85 00000538 000000000000000000- <1>
    85 00000541 000000000000000000- <1>
    85 0000054A 000000000000000000- <1>
    85 00000553 0000                <1>
    86 00000555 3F3F3F3F3F3F3F3F    <1> dirSrchPat  db 8 dup ("?")    ;We copy the search pattern here
    87 0000055D 2E                  <1> dirSPExt    db "."
    88 0000055E 3F3F3F              <1>             db 3 dup ("?")
    89                              <1> 
    90                              <1> ;Volume Vars
    91 00000561 000000000000000000- <1> volLblSpc   db 13 dup (0)
    91 0000056A 00000000            <1>
    92 0000056E 00                  <1> volPathBuf  db 0 ;Drive LETTER goes here
    93 0000056F 3A5C2A2E2A00        <1>             db ":\*.*",0  ;This remains to build X:\*.*,0 for vol label search
    94                              <1> 
    95                              <1> ;Time/Date vars
    96 00000575 00                  <1> td1 db 0    ;Minutes/Year
    97 00000576 00                  <1> td2 db 0    ;Hours/Zero
    98 00000577 00                  <1> td3 db 0    ;Hundredths/Day
    99 00000578 00                  <1> td4 db 0    ;Seconds/Month
   100                              <1> 
   101                              <1> ;Rename/Copy Buffers
   102 00000579 000000000000000000- <1> sourcePath  db cmdBufferL dup (0)
   102 00000582 000000000000000000- <1>
   102 0000058B 000000000000000000- <1>
   102 00000594 000000000000000000- <1>
   102 0000059D 000000000000000000- <1>
   102 000005A6 000000000000000000- <1>
   102 000005AF 000000000000000000- <1>
   102 000005B8 000000000000000000- <1>
   102 000005C1 000000000000000000- <1>
   102 000005CA 000000000000000000- <1>
   102 000005D3 000000000000000000- <1>
   102 000005DC 000000000000000000- <1>
   102 000005E5 000000000000000000- <1>
   102 000005EE 000000000000000000- <1>
   102 000005F7 0000                <1>
   103 000005F9 000000000000000000- <1> destPath    db cmdBufferL dup (0)
   103 00000602 000000000000000000- <1>
   103 0000060B 000000000000000000- <1>
   103 00000614 000000000000000000- <1>
   103 0000061D 000000000000000000- <1>
   103 00000626 000000000000000000- <1>
   103 0000062F 000000000000000000- <1>
   103 00000638 000000000000000000- <1>
   103 00000641 000000000000000000- <1>
   103 0000064A 000000000000000000- <1>
   103 00000653 000000000000000000- <1>
   103 0000065C 000000000000000000- <1>
   103 00000665 000000000000000000- <1>
   103 0000066E 000000000000000000- <1>
   103 00000677 0000                <1>
   104                              <1> ;Copy Handles
   105 00000679 FFFF                <1> sourceHdl   dw -1
   106 0000067B FFFF                <1> destHdl     dw -1
   107                              <1> 
   108 0000067D 000000000000000000- <1> copyBuffer  db 128 dup (0)  ;Copy up to 128 bytes at a time
   108 00000686 000000000000000000- <1>
   108 0000068F 000000000000000000- <1>
   108 00000698 000000000000000000- <1>
   108 000006A1 000000000000000000- <1>
   108 000006AA 000000000000000000- <1>
   108 000006B3 000000000000000000- <1>
   108 000006BC 000000000000000000- <1>
   108 000006C5 000000000000000000- <1>
   108 000006CE 000000000000000000- <1>
   108 000006D7 000000000000000000- <1>
   108 000006E0 000000000000000000- <1>
   108 000006E9 000000000000000000- <1>
   108 000006F2 000000000000000000- <1>
   108 000006FB 0000                <1>
    13                                  %include "./Utils/COMMAND/Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 000006FD 03444952            <1>     db 3, "DIR"
     8 00000701 F616                <1>     dw dir - startLbl
     9                              <1> 
    10 00000703 024344              <1>     db 2, "CD"
    11 00000706 941A                <1>     dw chdir - startLbl
    12                              <1> 
    13 00000708 054348444952        <1>     db 5, "CHDIR"
    14 0000070E 941A                <1>     dw chdir - startLbl
    15                              <1> 
    16 00000710 024D44              <1>     db 2, "MD"
    17 00000713 3C1B                <1>     dw mkdir - startLbl
    18                              <1> 
    19 00000715 054D4B444952        <1>     db 5, "MKDIR"
    20 0000071B 3C1B                <1>     dw mkdir - startLbl
    21                              <1> 
    22 0000071D 025244              <1>     db 2, "RD"
    23 00000720 881B                <1>     dw rmdir - startLbl
    24                              <1> 
    25 00000722 05524D444952        <1>     db 5, "RMDIR"
    26 00000728 881B                <1>     dw rmdir - startLbl
    27                              <1> 
    28 0000072A 0344454C            <1>     db 3, "DEL"
    29 0000072E 7B1D                <1>     dw erase - startLbl
    30                              <1> 
    31 00000730 054552415345        <1>     db 5, "ERASE"
    32 00000736 7B1D                <1>     dw erase - startLbl
    33                              <1> 
    34 00000738 0444415445          <1>     db 4, "DATE"
    35 0000073D A41D                <1>     dw date - startLbl
    36                              <1> 
    37 0000073F 0454494D45          <1>     db 4, "TIME"
    38 00000744 6A1E                <1>     dw time - startLbl
    39                              <1> 
    40 00000746 04434F5059          <1>     db 4, "COPY"
    41 0000074B D41B                <1>     dw copy - startLbl
    42                              <1> 
    43 0000074D 0443545459          <1>     db 4, "CTTY"
    44 00000752 021F                <1>     dw ctty - startLbl
    45                              <1> 
    46 00000754 03434C53            <1>     db 3, "CLS"
    47 00000758 9D1F                <1>     dw cls - startLbl
    48                              <1> 
    49 0000075A 05425245414B        <1>     db 5, "BREAK"
    50 00000760 0F20                <1>     dw break - startLbl
    51                              <1> 
    52 00000762 06564552494659      <1>     db 6, "VERIFY"
    53 00000769 9020                <1>     dw verify - startLbl
    54                              <1> 
    55 0000076B 0652454E414D45      <1>     db 6, "RENAME"
    56 00000772 0D21                <1>     dw rename - startLbl
    57                              <1> 
    58 00000774 044D4F5645          <1>     db 4, "MOVE"
    59 00000779 0D21                <1>     dw rename - startLbl
    60                              <1>     
    61 0000077B 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 00000784 1522                <1>     dw truename - startLbl
    63                              <1> 
    64 00000786 03564552            <1>     db 3, "VER"
    65 0000078A 5E23                <1>     dw version - startLbl
    66                              <1> 
    67 0000078C 03564F4C            <1>     db 3, "VOL"
    68 00000790 4B22                <1>     dw volume - startLbl
    69                              <1> 
    70 00000792 034D454D            <1>     db 3, "MEM"
    71 00000796 A223                <1>     dw memory - startLbl
    72                              <1> 
    73 00000798 0445584954          <1>     db 4, "EXIT"
    74 0000079D 8425                <1>     dw exit - startLbl
    75                              <1> 
    76 0000079F 0454595045          <1>     db 4, "TYPE"
    77 000007A4 EC24                <1>     dw type - startLbl
    78                              <1> 
    79 000007A6 05544F554348        <1>     db 5, "TOUCH"
    80 000007AC DA21                <1>     dw touch - startLbl
    81                              <1> 
    82 000007AE FF                  <1>     db -1   ;End of table
    14                                  %include "./Utils/COMMAND/Data/cmdMsg.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 000007AF 0D0A24              <1> crlf    db  CR,LF,"$"
     3 000007B2 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 000007B7 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 000007C0 696C65206D69737369- <1>
     4 000007C9 6E670D0A24          <1>
     5 000007CE 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 000007D7 6469736B2077697468- <1>
     5 000007E0 206261746368206669- <1>
     5 000007E9 6C65                <1>
     6 000007EB 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 000007F4 737320616E79206B65- <1>
     6 000007FD 79207768656E207265- <1>
     6 00000806 6164790D0A24        <1>
     7 0000080C 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     7 00000815 6E64206F722066696C- <1>
     7 0000081E 65206E616D650D0A24  <1>
     8 00000827 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     8 00000830 2066696C65206E616D- <1>
     8 00000839 65206F7220          <1>
     9 0000083E 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
     9 00000847 666F756E640D0A24    <1>
    10 0000084F 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    10 00000858 656E74206469736B20- <1>
    10 00000861 73706163650D0A24    <1>
    11 00000869 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    11 00000872 7669726F6E6D656E74- <1>
    11 0000087B 2073706163650D0A24  <1>
    12 00000884 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    12 0000088D 74696F6E206572726F- <1>
    12 00000896 720D0A24            <1>
    13 0000089A 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    13 000008A3 6F7420626520636F70- <1>
    13 000008AC 696564206F6E746F20- <1>
    13 000008B5 697473656C660D0A24  <1>
    14 000008BE 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    14 000008C7 662064657374696E61- <1>
    14 000008D0 74696F6E206C6F7374- <1>
    14 000008D9 206265666F72652063- <1>
    14 000008E2 6F70790D0A24        <1>
    15                              <1> ;Copy end message. First write # files copied then this message 
    16 000008E8 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    16 000008F1 636F706965640D0A24  <1>
    17                              <1> ;Dir end1 msg. First write # files in dir then this
    18 000008FA 2046696C6528732920- <1> dirOk   db  " File(s) $"
    18 00000903 24                  <1>
    19                              <1> ;Dir end2 msg. First write # bytes free then this message
    20 00000904 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    20 0000090D 65650D0A24          <1>
    21 00000912 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    22                              <1> 
    23 0000091B 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    23 00000924 726976652073706563- <1>
    23 0000092D 696669636174696F6E- <1>
    23 00000936 0D0A24              <1>
    24 00000939 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    24 00000942 6B6579207768656E20- <1>
    24 0000094B 7265616479202E202E- <1>
    24 00000954 202E2024            <1>
    25 00000958 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    25 00000961 6172616D657465720D- <1>
    25 0000096A 0A24                <1>
    26                              <1> 
    27 0000096C 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    27 00000975 576564546875467269- <1>
    27 0000097E 536174              <1>
    28 00000981 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    28 0000098A 206461746524        <1>
    29 00000990 43757272656E742064- <1> curDate db  "Current date is $"
    29 00000999 6174652069732024    <1>
    30 000009A1 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    30 000009AA 657720646174652024  <1>
    31 000009B3 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    31 000009BC 293A2024            <1>
    32 000009C0 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    32 000009C9 293A2024            <1>
    33 000009CD 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    33 000009D6 293A2024            <1>
    34 000009DA 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    34 000009E3 2074696D6524        <1>
    35 000009E9 43757272656E742074- <1> curTime db  "Current time is $"
    35 000009F2 696D652069732024    <1>
    36 000009FA 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    36 00000A03 65772074696D653A20- <1>
    36 00000A0C 24                  <1>
    37                              <1> 
    38 00000A0D 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    38 00000A16 7572652028592F4E29- <1>
    38 00000A1F 3F2024              <1>
    39                              <1> 
    40 00000A22 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    40 00000A2B 56657273696F6E2024  <1>
    41                              <1> 
    42 00000A34 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    42 00000A3D 6E2064726976652024  <1>
    43 00000A46 2069732024          <1> volOk   db " is $"
    44 00000A4B 20686173206E6F206C- <1> volNo   db " has no label$"
    44 00000A54 6162656C24          <1>
    45                              <1> 
    46 00000A59 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    46 00000A62 69726563746F72790D- <1>
    46 00000A6B 0A24                <1>
    47 00000A6D 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    47 00000A76 206372656174652064- <1>
    47 00000A7F 69726563746F72790D- <1>
    47 00000A88 0A24                <1>
    48 00000A8A 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    48 00000A93 6174682C206E6F7420- <1>
    48 00000A9C 6469726563746F7279- <1>
    48 00000AA5 2C0D0A              <1>
    49 00000AA8 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    49 00000AB1 6F7279206E6F742065- <1>
    49 00000ABA 6D7074790D0A24      <1>
    50 00000AC1 204469726563746F72- <1> dirMain db " Directory of  $"
    50 00000ACA 79206F66202024      <1>
    51 00000AD1 4E6F20506174682024  <1> noPath  db "No Path $"
    52 00000ADA 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    52 00000AE3 7269766520696E2073- <1>
    52 00000AEC 656172636820706174- <1>
    52 00000AF5 680D0A24            <1>
    53 00000AF9 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    53 00000B02 65766963650D0A24    <1>
    54 00000B0A 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    54 00000B13 20666F756E640D0A24  <1>
    55 00000B1C 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    55 00000B25 726F720D0A24        <1>
    56 00000B2B 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    56 00000B34 6F74206265206E6573- <1>
    56 00000B3D 7465640D0A24        <1>
    57 00000B43 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    57 00000B4C 6174652066696C6520- <1>
    57 00000B55 6572726F7220647572- <1>
    57 00000B5E 696E6720706970650D- <1>
    57 00000B67 0A24                <1>
    58 00000B69 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    58 00000B72 2062696E6172792072- <1>
    58 00000B7B 656164732066726F6D- <1>
    58 00000B84 206120646576696365- <1>
    58 00000B8D 0D0A24              <1>
    59 00000B90 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    60 00000B96 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    61 00000B9B 425245414B20697320- <1> breakIs db "BREAK is $"
    61 00000BA4 24                  <1>
    62 00000BA5 564552494659206973- <1> verifyIs    db "VERIFY is $"
    62 00000BAE 2024                <1>
    63 00000BB0 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    64 00000BB9 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    64 00000BC2 617468206F72206669- <1>
    64 00000BCB 6C65206E616D650D0A- <1>
    64 00000BD4 24                  <1>
    65 00000BD5 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    65 00000BDE 756D626572206F6620- <1>
    65 00000BE7 706172616D65746572- <1>
    65 00000BF0 730D0A24            <1>
    66 00000BF4 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    66 00000BFD 74696E6720746F2064- <1>
    66 00000C06 6576696365          <1>
    67 00000C0B 08200800            <1> backSpace   db BSP," ",BSP,NUL
    68                              <1> 
    69 00000C0F 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    69 00000C18 20202020202020546F- <1>
    69 00000C21 74616C207379737465- <1>
    69 00000C2A 6D206D656D6F72793A- <1>
    69 00000C33 2024                <1>
    70 00000C35 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    70 00000C3E 20202020202020204D- <1>
    70 00000C47 656D6F727920757365- <1>
    70 00000C50 6420627920444F533A- <1>
    70 00000C59 2024                <1>
    71 00000C5B 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    71 00000C64 656D6F727920757365- <1>
    71 00000C6D 64206279206170706C- <1>
    71 00000C76 69636174696F6E733A- <1>
    71 00000C7F 2024                <1>
    72 00000C81 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    72 00000C8A 656D6F727920726573- <1>
    72 00000C93 657276656420627920- <1>
    72 00000C9C 68617264776172653A- <1>
    72 00000CA5 2024                <1>
    73 00000CA7 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    73 00000CB0 202020202020202020- <1>
    73 00000CB9 2020202020204D656D- <1>
    73 00000CC2 6F727920667265653A- <1>
    73 00000CCB 2024                <1>
    74 00000CCD 20627974657324      <1> memByte db " bytes$"
    75 00000CD4 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    75 00000CDD 6F7420417373657274- <1>
    75 00000CE6 61696E20444F532045- <1>
    75 00000CEF 6E74727920506F696E- <1>
    75 00000CF8 7424                <1>
    76 00000CFA 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    76 00000D03 416C6C6F636174696F- <1>
    76 00000D0C 6E204572726F7224    <1>
    77 00000D14 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    77 00000D1D 4572726F7224        <1>
    78 00000D23 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    78 00000D2C 68616C74656424      <1>
    79                              <1> 
    80 00000D33 556E61626C6520746F- <1> touchErr db "Unable to create file",CR,LF,"$"
    80 00000D3C 206372656174652066- <1>
    80 00000D45 696C650D0A24        <1>
    81 00000D4B 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    81 00000D54 206372656174652070- <1>
    81 00000D5D 6970650D0A          <1>
    82                              <1> pipeErrMsgL equ $ - pipeErrMsg
    83 00000D62 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    83 00000D6B 6F6E206572726F720D- <1>
    83 00000D74 0A                  <1>
    84                              <1> redirErrMsgL   equ $ - redirErrMsg
    85                              <1> 
    86 00000D75 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    87 00000D79 2020202024          <1> fourSpc  db "    $"
    88 00000D7E 20202024            <1> threeSpc db "   $"
    89 00000D82 202024              <1> twoSpc   db "  $"
    90                              <1> 
    91 00000D85 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    91 00000D8E 696679204F4E206F72- <1>
    91 00000D97 204F46460D0A24      <1>
    92 00000D9E 504154483D          <1> pathEVar db "PATH="
    93 00000DA3 50524F4D50543D      <1> promptEVar  db "PROMPT="
    94                              <1> 
    95                              <1> ;If anything goes wrong with piping or redirecting just close first two 
    96                              <1> ; handles and reopen CON
    97 00000DAA 434F4E00            <1> conName db "CON",0      
    15                                  %include "./Utils/COMMAND/Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     3                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     4                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     5 00000DAE 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     6 00000DB1 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     7 00000DB5 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 00000DB8 B44A                <1>     mov ah, 4Ah ;Realloc
     9 00000DBA 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    10 00000DBD CD41                <1>     int 41h
    11 00000DBF EB6C                <1>     jmp short commandMain
    12                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    13 00000DC1 B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    14 00000DC6 CD41                <1>     int 41h
    15 00000DC8 6689053EF2FFFF      <1>     mov word [returnCode], ax
    16                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    17 00000DCF 488D15011F0000      <1>     lea rdx, critErrorHandler
    18 00000DD6 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    19 00000DDA B844250000          <1>     mov eax, 2544h
    20 00000DDF CD41                <1>     int 41h
    21 00000DE1 488D157F210000      <1>     lea rdx, int43h
    22 00000DE8 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    23 00000DEC B843250000          <1>     mov eax, 2543h
    24 00000DF1 CD41                <1>     int 41h
    25 00000DF3 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    26 00000DFA 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    27 00000DFE B842250000          <1>     mov eax, 2542h
    28 00000E03 CD41                <1>     int 41h
    29 00000E05 F60596F2FFFFFF      <1>     test byte [pipeNumber], -1
    30 00000E0C 0F857F000000        <1>     jnz commandMain.pipeProceed ;Skip the handle closing when pipe active
    31 00000E12 E8BB040000          <1>     call cleanUpRedir   ;Clean up redirection once we are done
    32                              <1> ;Close all handles from 5->MAX
    33 00000E17 0FB70D09F2FFFF      <1>     movzx ecx, word [numHdls]
    34 00000E1E BB05000000          <1>     mov ebx, 5
    35                              <1> .handleClose:
    36 00000E23 B43E                <1>     mov ah, 3Eh ;File close
    37 00000E25 CD41                <1>     int 41h
    38 00000E27 FFC3                <1>     inc ebx ;Goto next file
    39 00000E29 39CB                <1>     cmp ebx, ecx
    40 00000E2B 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    41                              <1> commandMain:
    42                              <1> ;Setup Commandline
    43 00000E2D 488B25D1F1FFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    44 00000E34 FC                  <1>     cld ;Ensure stringops are done the right way
    45 00000E35 C605D4F2FFFF80      <1>     mov byte [inBuffer], 80h    ;Reset the buffer length
    46                              <1> .inputMain:
    47 00000E3C E8361C0000          <1>     call clearCommandLineState
    48 00000E41 E8BD180000          <1>     call printCRLF
    49 00000E46 E8FA1B0000          <1>     call printPrompt
    50                              <1> 
    51 00000E4B 488D15BEF2FFFF      <1>     lea rdx, inBuffer
    52 00000E52 B80A0C0000          <1>     mov eax, 0C0Ah  ;Do Buffered input
    53 00000E57 CD41                <1>     int 41h
    54 00000E59 E8A5180000          <1>     call printCRLF  ;Note we have accepted input
    55                              <1> 
    56                              <1> ;First check we had something typed in of length greater than 1
    57                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    58 00000E5E 803DACF2FFFF01      <1>     cmp byte [inBuffer + 1], 1  ;Check input length valid
    59 00000E65 743F                <1>     je .dfltErrExit
    60 00000E67 72D3                <1>     jb .inputMain
    61                              <1>     ;Copy over the input text
    62 00000E69 488D35A0F2FFFF      <1>     lea rsi, inBuffer
    63 00000E70 488D3D19F3FFFF      <1>     lea rdi, cmdBuffer
    64 00000E77 B980000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    65 00000E7C F3A4                <1>     rep movsb
    66 00000E7E 31C0                <1>     xor eax, eax
    67 00000E80 66890518F2FFFF      <1>     mov word [cmdStartOff], ax  ;Clear start and end Off positions
    68                              <1> .pipeLoop:
    69 00000E87 E827000000          <1>     call parseInput
    70 00000E8C E8C6010000          <1>     call doCommandLine
    71                              <1> .pipeProceed:
    72 00000E91 E83C040000          <1>     call cleanUpRedir
    73 00000E96 F60505F2FFFFFF      <1>     test byte [pipeNumber], -1  ;If we have any pipes active, we proceed here
    74 00000E9D 749D                <1>     jz .inputMain
    75 00000E9F E8B81B0000          <1>     call clearCommandState  ;Else, clear the command state and start again
    76 00000EA4 EBE1                <1>     jmp short .pipeLoop
    77                              <1> .dfltErrExit:
    78 00000EA6 488D155FF9FFFF      <1>     lea rdx, badCmd
    79 00000EAD B409                <1>     mov ah, 09h
    80 00000EAF CD41                <1>     int 41h
    81 00000EB1 EB89                <1>     jmp short .inputMain
    82                              <1> 
    83                              <1> parseInput:
    84                              <1> ;EndOff is set up before entering this part
    85                              <1> ;Copies a nicely formatted version of the input command line
    86                              <1> ; without any redirections to psp.dta
    87 00000EB3 488D35D8F2FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
    88 00000EBA 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
    89 00000EC1 0FB61DD8F1FFFF      <1>     movzx ebx, byte [cmdEndOff] ;Get the old end offset
    90 00000EC8 4801DE              <1>     add rsi, rbx    ;Move rsi to the start of this new command
    91 00000ECB E8661B0000          <1>     call skipSpaces ;Skip any preceeding spaces
    92 00000ED0 66AD                <1>     lodsw   ;Get the first two chars into ax
    93 00000ED2 668905CEF1FFFF      <1>     mov word [cmdDrvSpec], ax ;Store these chars as if they are the drvspec
    94 00000ED9 4881EE02000000      <1>     sub rsi, 2  ;Go back to the start of the command
    95 00000EE0 56                  <1>     push rsi
    96 00000EE1 57                  <1>     push rdi
    97 00000EE2 488D3D27F3FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
    98 00000EE9 57                  <1>     push rdi
    99 00000EEA E811070000          <1>     call copyCommandTailItemProgram
   100 00000EEF 5F                  <1>     pop rdi
   101 00000EF0 9C                  <1>     pushfq  ;Save the CF state
   102 00000EF1 E8D21A0000          <1>     call strlen
   103 00000EF6 FFC9                <1>     dec ecx ;Drop the terminating char from the count
   104 00000EF8 58                  <1>     pop rax ;Get the CF state in al
   105 00000EF9 5F                  <1>     pop rdi
   106 00000EFA 5E                  <1>     pop rsi
   107 00000EFB F3A4                <1>     rep movsb   ;Now we copy the command into the psp command line
   108 00000EFD A801                <1>     test al, 1  ;Was CF set?
   109 00000EFF 0F8586000000        <1>     jnz .exit   ;If an embedded CR was found in the filename, exit!
   110                              <1> .cmdLineProcess:
   111 00000F05 E82C1B0000          <1>     call skipSpaces ;Go to the next char in the input line
   112                              <1> .redirFound:
   113 00000F0A AC                  <1>     lodsb   ;Get first non-space char (setupRedir skips spaces before ret)
   114 00000F0B 3C0D                <1>     cmp al, CR  ;If this was a CR, we stop processing
   115 00000F0D 747C                <1>     je .exit
   116 00000F0F E826050000          <1>     call checkAndSetupRedir ;If not, check if we have a redir element
   117 00000F14 7275                <1>     jc .exit    ;CF=CY only if pipe, which is equivalent to CR when processing
   118 00000F16 74F2                <1>     jz .redirFound  ;If we had a < > or >>, proceed to check if next char CR
   119 00000F18 B020                <1>     mov al, " "
   120 00000F1A AA                  <1>     stosb   ;Store a space to make space for the command file parameter
   121 00000F1B 48FFCE              <1>     dec rsi ;Move rsi back to the first char
   122 00000F1E F6058AF1FFFFFF      <1>     test byte [arg1Flg], -1
   123 00000F25 7521                <1>     jnz .arg2
   124                              <1> .arg1:
   125 00000F27 C60581F1FFFFFF      <1>     mov byte [arg1Flg], -1
   126 00000F2E E8031B0000          <1>     call skipSpaces
   127 00000F33 4889F0              <1>     mov rax, rsi
   128 00000F36 488D1D53F2FFFF      <1>     lea rbx, cmdBuffer
   129 00000F3D 4829D8              <1>     sub rax, rbx
   130 00000F40 88056AF1FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   131 00000F46 EB2A                <1>     jmp short .argCommon
   132                              <1> .arg2:
   133 00000F48 F60563F1FFFFFF      <1>     test byte [arg2Flg], -1
   134 00000F4F 7521                <1>     jnz .argCommon
   135 00000F51 C6055AF1FFFFFF      <1>     mov byte [arg2Flg], -1
   136 00000F58 E8D91A0000          <1>     call skipSpaces
   137 00000F5D 4889F0              <1>     mov rax, rsi
   138 00000F60 488D1D29F2FFFF      <1>     lea rbx, cmdBuffer
   139 00000F67 4829D8              <1>     sub rax, rbx
   140 00000F6A 880543F1FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   141 00000F70 EB00                <1>     jmp short .argCommon
   142                              <1> .argCommon:
   143                              <1>     ;More than two arguments? Do nothing more than just copy it
   144                              <1>     ; over. If we encounter an embedded CR, exit there too
   145 00000F72 E8BF1A0000          <1>     call skipSpaces
   146 00000F77 803E0D              <1>     cmp byte [rsi], CR  ;Are we at the end of the commandline?
   147 00000F7A 740F                <1>     je .exit
   148                              <1>     ;If not, we copy it over
   149 00000F7C E8A9060000          <1>     call copyCommandTailItem    ;Stores a terminating null we dont want
   150 00000F81 488D7FFF            <1>     lea rdi, qword [rdi - 1]    ;Point back at the inserted terminating null
   151 00000F85 0F837AFFFFFF        <1>     jnc .cmdLineProcess
   152                              <1> .exit:
   153 00000F8B 488D1DFEF1FFFF      <1>     lea rbx, cmdBuffer
   154 00000F92 48FFCE              <1>     dec rsi
   155 00000F95 4829DE              <1>     sub rsi, rbx    ;Get the offset into the command line
   156 00000F98 89F3                <1>     mov ebx, esi
   157 00000F9A 881D00F1FFFF        <1>     mov byte [cmdEndOff], bl    ;Store the offset to the terminating char
   158 00000FA0 FE05FAF0FFFF        <1>     inc byte [cmdEndOff] ;Goto  first char past terminating char for next bit
   159 00000FA6 B00D                <1>     mov al, CR
   160 00000FA8 AA                  <1>     stosb   ;Store the terminating CR in the psp command line
   161                              <1>     ;Now compute the command line length 
   162 00000FA9 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine] 
   163 00000FB0 B00D                <1>     mov al, CR
   164 00000FB2 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   165 00000FB4 FFC9                <1>     dec ecx ;rcx = -1
   166 00000FB6 F2AE                <1>     repne scasb
   167 00000FB8 F7D1                <1>     not ecx
   168 00000FBA FEC9                <1>     dec cl  ;Dont include terminating CR
   169 00000FBC 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   170 00000FC3 880F                <1>     mov byte [rdi], cl
   171                              <1>     ;Before returning, we copy the command name to cmdName
   172 00000FC5 488D3D44F2FFFF      <1>     lea rdi, cmdPathSpec
   173 00000FCC 4889FB              <1>     mov rbx, rdi    ;Use rbx as the ptr to the first char in the commandspec
   174 00000FCF 30C0                <1>     xor al, al  ;Search for the terminating null
   175 00000FD1 B94F000000          <1>     mov ecx, fileSpecZL ;Max number of chars the length could be
   176 00000FD6 F2AE                <1>     repne scasb
   177 00000FD8 48FFCF              <1>     dec rdi ;Go to the last char in the command
   178 00000FDB 4889FE              <1>     mov rsi, rdi
   179 00000FDE FD                  <1>     std ;Now we go backwards to where rsi = rbx OR byte [rsi] = pathSep
   180                              <1> .keepSearching:
   181 00000FDF AC                  <1>     lodsb
   182 00000FE0 3A0545F0FFFF        <1>     cmp al, byte [pathSep]
   183 00000FE6 740B                <1>     je .cmdStartFnd
   184 00000FE8 4839DE              <1>     cmp rsi, rbx
   185 00000FEB 75F2                <1>     jne .keepSearching
   186 00000FED 48FFCE              <1>     dec rsi ;Go back two to go forwards again
   187 00000FF0 48FFCE              <1>     dec rsi
   188                              <1> .cmdStartFnd:
   189 00000FF3 48FFC6              <1>     inc rsi
   190 00000FF6 48FFC6              <1>     inc rsi ;Go past the pathsep
   191 00000FF9 FC                  <1>     cld ;Go the sane way again
   192 00000FFA 488D3D77F2FFFF      <1>     lea rdi, qword [cmdName + 1]    ;First byte is for the length of the name
   193 00001001 57                  <1>     push rdi    ;Cleanse the field before usage (not strictly necessary)
   194 00001002 B90E000000          <1>     mov ecx, cmdNameL
   195 00001007 30C0                <1>     xor al, al
   196 00001009 F3AA                <1>     rep stosb
   197 0000100B 5F                  <1>     pop rdi
   198 0000100C 31C9                <1>     xor ecx, ecx
   199 0000100E 56                  <1>     push rsi    ;Save the location of the start byte of the command name
   200                              <1> .cmdGetChar:
   201 0000100F AC                  <1>     lodsb
   202 00001010 84C0                <1>     test al, al ;Did we find the terminating null?
   203 00001012 7411                <1>     jz .nameLenFnd
   204 00001014 3C2E                <1>     cmp al, "." ;Extension sep also terminates
   205 00001016 740D                <1>     je .nameLenFnd
   206 00001018 24DF                <1>     and al, 0DFh    ;Else uppercase the char
   207 0000101A AA                  <1>     stosb   ;and store it
   208 0000101B FFC1                <1>     inc ecx
   209 0000101D 81F90B000000        <1>     cmp ecx, 11 ;Max command length is 11
   210 00001023 72EA                <1>     jb .cmdGetChar
   211                              <1> .nameLenFnd:
   212 00001025 880D4CF2FFFF        <1>     mov byte [cmdName], cl  ;Store the name length now
   213                              <1>     ;Now finally, create a FCB filespec
   214 0000102B 488D3D2DF2FFFF      <1>     lea rdi, fcbCmdSpec
   215 00001032 57                  <1>     push rdi
   216 00001033 B90B000000          <1>     mov ecx, fcbNameL
   217 00001038 B020                <1>     mov al, " " ;Fill with spaces
   218 0000103A F3AA                <1>     rep stosb
   219 0000103C 5F                  <1>     pop rdi
   220 0000103D 5E                  <1>     pop rsi ;Get back the location of the start byte of the command name
   221 0000103E E8591A0000          <1>     call asciiToFCB
   222 00001043 488D3515F2FFFF      <1>     lea rsi, fcbCmdSpec
   223 0000104A 488D3D19F2FFFF      <1>     lea rdi, cmdSpec
   224 00001051 E8A11A0000          <1>     call FCBToAsciiz
   225                              <1>     return
    13                              <2> %%_ret:
    14 00001056 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   226                              <1> 
   227                              <1> doCommandLine:
   228 00001057 488D3534F1FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
   229 0000105E 488D3D50F0FFFF      <1>     lea rdi, cmdFcb
   230 00001065 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks
   231 0000106A CD41                <1>     int 41h
   232 0000106C 0FB71D34F0FFFF      <1>     movzx ebx, word [cmdDrvSpec]    ;Get the drive specifier
   233 00001073 80FF3A              <1>     cmp bh, ":"
   234 00001076 752E                <1>     jne .noDriveSpecified
   235 00001078 88DA                <1>     mov dl, bl      ;Move the drive letter in dl
   236 0000107A 80E2DF              <1>     and dl, 0DFh    ;Make the drive letter upper case
   237 0000107D 80EA41              <1>     sub dl, "A"     ;And make it a 0 based drive letter
   238 00001080 3CFF                <1>     cmp al, -1  ;Int 41h returns AL = -1 if bad drive specified
   239 00001082 7415                <1>     je .badDrive
   240                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   241 00001084 803DECF1FFFF02      <1>     cmp byte [cmdName], 2
   242 0000108B 7519                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   243 0000108D B40E                <1>     mov ah, 0Eh ;Set drive to dl
   244 0000108F CD41                <1>     int 41h 
   245 00001091 B419                <1>     mov ah, 19h
   246 00001093 CD41                <1>     int 41h     ;Get current drive
   247 00001095 38D0                <1>     cmp al, dl  ;If the drive was set, all is well
   248                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001097 74(56)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   249                              <1> .badDrive:
   250 00001099 488D157BF8FFFF      <1>     lea rdx, badDrv
   251 000010A0 B409                <1>     mov ah, 09h
   252 000010A2 CD41                <1>     int 41h
   253 000010A4 F9                  <1>     stc
   254                              <1>     return
    13                              <2> %%_ret:
    14 000010A5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   255                              <1> .noDriveSpecified:
   256                              <1> ;Now we set the two FCB's in the command line
   257 000010A6 F60502F0FFFFFF      <1>     test byte [arg1Flg], -1
   258 000010AD 744D                <1>     jz .fcbArgsDone
   259 000010AF 0FB605FAEFFFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   260 000010B6 488D35D3F0FFFF      <1>     lea rsi, cmdBuffer
   261 000010BD 4801C6              <1>     add rsi, rax    ;Point to first argument
   262 000010C0 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   263 000010C4 B801290000          <1>     mov eax, 2901h
   264 000010C9 CD41                <1>     int 41h
   265 000010CB 8805E0EFFFFF        <1>     mov byte [arg1FCBret], al
   266 000010D1 F605DAEFFFFFFF      <1>     test byte [arg2Flg], -1
   267 000010D8 7422                <1>     jz .fcbArgsDone
   268 000010DA 0FB605D2EFFFFF      <1>     movzx eax, byte [arg2Off]
   269 000010E1 488D35A8F0FFFF      <1>     lea rsi, cmdBuffer
   270 000010E8 4801C6              <1>     add rsi, rax    ;Point to first argument
   271 000010EB 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   272 000010EF B801290000          <1>     mov eax, 2901h
   273 000010F4 CD41                <1>     int 41h
   274 000010F6 8805B8EFFFFF        <1>     mov byte [arg2FCBret], al
   275                              <1> .fcbArgsDone:
   276 000010FC 488D358DF0FFFF      <1>     lea rsi, cmdBuffer
   277 00001103 488D1D6DF1FFFF      <1>     lea rbx, cmdName
   278 0000110A B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   279 0000110F BAFFFF0000          <1>     mov edx, 0FFFFh
   280 00001114 B5FF                <1>     mov ch, -1
   281 00001116 CD4F                <1>     int 4Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   282                              <1>             ;        al = 0  if the command should be executed as usual
   283 00001118 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   284 0000111D BAFFFF0000          <1>     mov edx, 0FFFFh
   285 00001122 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   286 00001124 CD4F                <1>     int 4Fh
   287 00001126 741D                <1>     jz .executeInternal
   288                              <1>     ;Here we execute externally and return to the prompt
   289                              <1>     ; as if it was an internal execution
   290 00001128 488D35E1EFFFFF      <1>     lea rsi, inBuffer ;Point to this built buffer
   291 0000112F 488D1D7FEFFFFF      <1>     lea rbx, cmdFcb
   292 00001136 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   293 0000113B BAFFFF0000          <1>     mov edx, 0FFFFh
   294 00001140 B5FF                <1>     mov ch, -1
   295 00001142 CD4F                <1>     int 4Fh 
   296                              <1>     return
    13                              <2> %%_ret:
    14 00001144 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   297                              <1> .executeInternal:
   298                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   299                              <1> ;rsi points after the command terminator in the command tail
   300 00001145 488D1DB1F5FFFF      <1>     lea rbx, functionTable
   301                              <1> .nextEntry:
   302 0000114C 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   303 0000114F 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   304 00001152 0F8462140000        <1>     je launchChild      ;If so, check externally now
   305 00001158 380D19F1FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   306 0000115E 7529                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   307                              <1>     ;Here they have the same length so lets see if the name is the same
   308 00001160 56                  <1>     push rsi
   309                              <1>     ;ecx has the length to compare
   310 00001161 51                  <1>     push rcx
   311 00001162 488D7301            <1>     lea rsi, qword [rbx + 1]
   312 00001166 488D3D0BF1FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   313 0000116D F3A6                <1>     rep cmpsb   ;Check the strings are equal
   314 0000116F 59                  <1>     pop rcx
   315 00001170 5E                  <1>     pop rsi
   316 00001171 7516                <1>     jne .gotoNextEntry
   317                              <1>     ;Here it was found both strings are equal
   318 00001173 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   319 00001178 480FB71F            <1>     movzx rbx, word [rdi]
   320 0000117C 488D3D7DEEFFFF      <1>     lea rdi, startLbl
   321 00001183 4801FB              <1>     add rbx, rdi
   322 00001186 FFD3                <1>     call rbx    ;Call this function...
   323                              <1>     return  ;... and return
    13                              <2> %%_ret:
    14 00001188 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   324                              <1> .gotoNextEntry:
   325 00001189 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   326 00001190 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   327 00001193 EBB7                <1>     jmp short .nextEntry
   328                              <1> .dfltErrExit:
   329 00001195 488D1570F6FFFF      <1>     lea rdx, badCmd
   330 0000119C B409                <1>     mov ah, 09h
   331 0000119E CD41                <1>     int 41h
   332                              <1>     return
    13                              <2> %%_ret:
    14 000011A0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   333                              <1> 
   334                              <1> 
   335                              <1> checkExtensionExec:
   336                              <1> ;Checks the extension field of cmdFcb is .COM, .EXE, .BAT in that order
   337                              <1> ;Returns: ZF=ZE if executable. ZF=NZ if not executable.
   338                              <1> ;         If ZF=ZE and CF=CY => Batch file
   339 000011A1 8B0517EFFFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   340 000011A7 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   341 000011AC 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   342 000011B1 25DFDFDFFF          <1>     and eax, 0FFDFDFDFh ;Uppercase the three letters
   343 000011B6 3D434F4D20          <1>     cmp eax, "COM "
   344                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000011BB 74(A0)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   345 000011BD 3D45584520          <1>     cmp eax, "EXE "
   346                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000011C2 74(A0)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   347 000011C4 3D42415420          <1>     cmp eax, "BAT "
   348                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000011C9 75(A0)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   349 000011CB F9                  <1>     stc
   350                              <1>     return
    13                              <2> %%_ret:
    14 000011CC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   351                              <1> 
   352                              <1> redirFailure:
   353 000011CD 488D158EFBFFFF      <1>     lea rdx, redirErrMsg
   354 000011D4 B913000000          <1>     mov ecx, redirErrMsgL
   355 000011D9 EB0C                <1>     jmp short redirPipeFailureCommon
   356                              <1> pipeFailure:
   357 000011DB 488D1569FBFFFF      <1>     lea rdx, pipeErrMsg
   358 000011E2 B917000000          <1>     mov ecx, pipeErrMsgL
   359                              <1> redirPipeFailureCommon:
   360                              <1> ;This routine is called if any problems happen during 
   361                              <1> ;This routine tries to close whatever handles are not -1 and delete
   362                              <1> ; pipe files if the pipe count is not 0
   363                              <1> ;It resets all variables and proceeds.
   364 000011E7 B800400000          <1>     mov eax, 4000h  ;Write handle
   365 000011EC BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   366 000011F1 CD41                <1>     int 41h
   367 000011F3 31DB                <1>     xor ebx, ebx    ;Select STDIN
   368 000011F5 E8C8000000          <1>     call .closeHandle
   369 000011FA FFC3                <1>     inc ebx         ;Select STDOUT
   370 000011FC E8C1000000          <1>     call .closeHandle
   371 00001201 B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   372 00001206 488D159DFBFFFF      <1>     lea rdx, conName
   373 0000120D CD41                <1>     int 41h
   374 0000120F 89C3                <1>     mov ebx, eax    ;Move file handle to ebx
   375 00001211 B800450000          <1>     mov eax, 4500h  ;DUP
   376 00001216 CD41                <1>     int 41h
   377 00001218 66C70588EEFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   378 00001221 0FB71D83EEFFFF      <1>     movzx ebx, word [redirSTDIN]
   379 00001228 E895000000          <1>     call .closeHandle
   380                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   381 0000122D 66C70575EEFFFFFFFF  <1>     mov word [redirSTDIN], -1
   382 00001236 0FB71D70EEFFFF      <1>     movzx ebx, word [redirSTDOUT]
   383 0000123D E880000000          <1>     call .closeHandle
   384 00001242 66C70562EEFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   385 0000124B 0FB71D51EEFFFF      <1>     movzx ebx, word [pipeSTDIN]
   386 00001252 E86B000000          <1>     call .closeHandle
   387 00001257 66C70543EEFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   388 00001260 0FB71D3EEEFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   389 00001267 E856000000          <1>     call .closeHandle
   390 0000126C 66C70530EEFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   391 00001275 66C70523EEFFFF0000  <1>     mov word [newPipeFlag], 0  ;Cover the pipe number too
   392 0000127E 488D159EF0FFFF      <1>     lea rdx, qword [pipe1Filespec]
   393 00001285 803A00              <1>     cmp byte [rdx], 0
   394 00001288 7407                <1>     jz .checkOld
   395 0000128A B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   396 0000128F CD41                <1>     int 41h
   397                              <1> .checkOld:
   398 00001291 488D15DAF0FFFF      <1>     lea rdx, qword [pipe2Filespec]
   399 00001298 803A00              <1>     cmp byte [rdx],0
   400 0000129B 7407                <1>     jz .pipeNamesComplete
   401 0000129D B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   402 000012A2 CD41                <1>     int 41h
   403                              <1> .pipeNamesComplete:
   404 000012A4 31C0                <1>     xor eax, eax
   405                              <1>     ;Invalidate the pointers and the paths too
   406 000012A6 48890514F1FFFF      <1>     mov qword [newPipe], rax
   407 000012AD 48890515F1FFFF      <1>     mov qword [oldPipe], rax
   408 000012B4 890569F0FFFF        <1>     mov dword [pipe1Filespec], eax
   409 000012BA 8905B2F0FFFF        <1>     mov dword [pipe2Filespec], eax
   410 000012C0 F9                  <1>     stc
   411                              <1>     return
    13                              <2> %%_ret:
    14 000012C1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   412                              <1> .closeHandle:
   413 000012C2 81FBFFFFFFFF        <1>     cmp ebx, -1
   414                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000012C8 74(C1)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   415 000012CA B8003E0000          <1>     mov eax, 3E00h
   416 000012CF CD41                <1>     int 41h
   417                              <1>     return
    13                              <2> %%_ret:
    14 000012D1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   418                              <1> 
   419                              <1> cleanUpRedir:
   420                              <1> ;Cleans up the redir stuff after we are done.
   421 000012D2 F605D0EDFFFFFF      <1>     test byte [redirIn], -1
   422 000012D9 0F85F0000000        <1>     jnz .redirInClear
   423 000012DF F605C4EDFFFFFF      <1>     test byte [redirOut], -1
   424 000012E6 0F8517010000        <1>     jnz .redirOutClear
   425 000012EC F605AEEDFFFFFF      <1>     test byte [newPipeFlag], -1 ;New pipe active flag set?
   426 000012F3 7554                <1>     jnz .newPipe
   427 000012F5 F605A6EDFFFFFF      <1>     test byte [pipeNumber], -1
   428                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000012FC 74(D1)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   429                              <1> ;Here for final pipe cleanup
   430 000012FE 488B15C4F0FFFF      <1>     mov rdx, [oldPipe]
   431 00001305 B800410000          <1>     mov eax, 4100h
   432 0000130A CD41                <1>     int 41h
   433 0000130C 0F82C9FEFFFF        <1>     jc pipeFailure
   434 00001312 C60200              <1>     mov byte [rdx], 0   ;Invalidate the path too
   435                              <1> ;Now place STDIN handle back where it belongs
   436 00001315 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate ebx in it
   437 00001317 0FB71D85EDFFFF      <1>     movzx ebx, word [pipeSTDIN]
   438 0000131E B800460000          <1>     mov eax, 4600h
   439 00001323 CD41                <1>     int 41h
   440 00001325 0F82B0FEFFFF        <1>     jc pipeFailure
   441 0000132B B8003E0000          <1>     mov eax, 3E00h  ;Now close the duplicate in ebx
   442 00001330 CD41                <1>     int 41h
   443 00001332 0F82A3FEFFFF        <1>     jc pipeFailure
   444 00001338 66C70562EDFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   445 00001341 C6055AEDFFFF00      <1>     mov byte [pipeNumber], 0   ;Make the pipe number 0
   446                              <1>     return
    13                              <2> %%_ret:
    14 00001348 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   447                              <1> .newPipe:
   448 00001349 803D52EDFFFF02      <1>     cmp byte [pipeNumber], 2 ;Do we have two pipes active?
   449 00001350 751D                <1>     jne .noClose    ;If not, skip deleting old pipe
   450                              <1>     ;Here to delete the old pipe file
   451 00001352 488B1570F0FFFF      <1>     mov rdx, [oldPipe]
   452 00001359 B800410000          <1>     mov eax, 4100h
   453 0000135E CD41                <1>     int 41h
   454 00001360 0F8275FEFFFF        <1>     jc pipeFailure
   455 00001366 C60200              <1>     mov byte [rdx], 0   ;Overwrite the first byte of pathname with a zero
   456 00001369 FE0D33EDFFFF        <1>     dec byte [pipeNumber]   ;Decrement the number of active pipes
   457                              <1> .noClose:
   458 0000136F 488B054BF0FFFF      <1>     mov rax, qword [newPipe]   ;Transfer the name pointer
   459 00001376 4889054CF0FFFF      <1>     mov qword [oldPipe], rax
   460 0000137D BB01000000          <1>     mov ebx, 1  ;Now move STDOUT to STDIN
   461 00001382 31C9                <1>     xor ecx, ecx
   462 00001384 B800460000          <1>     mov eax, 4600h
   463 00001389 CD41                <1>     int 41h
   464 0000138B 0F824AFEFFFF        <1>     jc pipeFailure
   465 00001391 B8003E0000          <1>     mov eax, 3E00h  ;And CLOSE STDOUT as it stands
   466 00001396 CD41                <1>     int 41h
   467                              <1> ;Now we reset STDOUT back to what it was initially.
   468 00001398 0FB71D06EDFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   469 0000139F B901000000          <1>     mov ecx, 1
   470 000013A4 B800460000          <1>     mov eax, 4600h
   471 000013A9 CD41                <1>     int 41h
   472 000013AB 0F822AFEFFFF        <1>     jc pipeFailure
   473                              <1> ;And now close the copy
   474 000013B1 B8003E0000          <1>     mov eax, 3E00h
   475 000013B6 CD41                <1>     int 41h
   476 000013B8 0F821DFEFFFF        <1>     jc pipeFailure
   477 000013BE C605DCECFFFF00      <1>     mov byte [newPipeFlag], 0  ;Indicate we are done with pipe command
   478 000013C5 66C705D7ECFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   479                              <1>     return
    13                              <2> %%_ret:
    14 000013CE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   480                              <1> 
   481                              <1> .redirInClear:
   482 000013CF 0FB71DD5ECFFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   483 000013D6 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   484 000013D8 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   485 000013DD CD41                <1>     int 41h
   486 000013DF 0F82E8FDFFFF        <1>     jc redirFailure
   487 000013E5 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   488 000013EA CD41                <1>     int 41h
   489 000013EC 0F82DBFDFFFF        <1>     jc redirFailure
   490 000013F2 66C705B0ECFFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   491 000013FB C605A7ECFFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   492                              <1>     return
    13                              <2> %%_ret:
    14 00001402 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   493                              <1> .redirOutClear:
   494 00001403 0FB71DA3ECFFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   495 0000140A B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   496 0000140F B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   497 00001414 CD41                <1>     int 41h
   498 00001416 0F82B1FDFFFF        <1>     jc redirFailure
   499 0000141C B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   500 00001421 CD41                <1>     int 41h
   501 00001423 0F82A4FDFFFF        <1>     jc redirFailure
   502 00001429 66C7057BECFFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   503 00001432 C60571ECFFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   504                              <1>     return
    13                              <2> %%_ret:
    14 00001439 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   505                              <1> 
   506                              <1> checkAndSetupRedir:
   507                              <1> ;Checks and sets up redir as appropriate
   508                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   509                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   510                              <1> ;Output: ZF=NZ => No redir
   511                              <1> ;        ZF=ZY => Redir
   512                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   513                              <1> ;CF=CY if pipe set or an embedded CR found
   514 0000143A 57                  <1>     push rdi
   515 0000143B 3C3C                <1>     cmp al, "<"
   516 0000143D 740F                <1>     je .inputRedir
   517 0000143F 3C3E                <1>     cmp al, ">"
   518 00001441 7478                <1>     je .outputRedir
   519 00001443 3C7C                <1>     cmp al, "|"
   520 00001445 0F8428010000        <1>     je .pipeSetup
   521 0000144B F8                  <1>     clc
   522                              <1> .redirExit:
   523 0000144C 5F                  <1>     pop rdi
   524                              <1>     return
    13                              <2> %%_ret:
    14 0000144D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   525                              <1> .inputRedir:
   526 0000144E C60554ECFFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   527 00001455 488D3D29EEFFFF      <1>     lea rdi, rdrInFilespec
   528 0000145C E8D5150000          <1>     call skipSpaces ;Skip spaces between < and the filespec
   529 00001461 E8C4010000          <1>     call copyCommandTailItem
   530                              <1>     ;jc .redirExit
   531 00001466 48FFCE              <1>     dec rsi ;Ensure rsi points to the terminating char
   532 00001469 E8C8150000          <1>     call skipSpaces
   533                              <1>     ;Setup the redir here for STDIN
   534 0000146E 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   535 00001470 B800450000          <1>     mov eax, 4500h
   536 00001475 CD41                <1>     int 41h
   537 00001477 0F827D010000        <1>     jc .redirError
   538 0000147D 66890527ECFFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   539 00001484 488D15FAEDFFFF      <1>     lea rdx, rdrInFilespec
   540 0000148B B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   541 00001490 CD41                <1>     int 41h
   542 00001492 0F8262010000        <1>     jc .redirError
   543 00001498 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   544 0000149A 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   545 0000149D B800460000          <1>     mov eax, 4600h
   546 000014A2 CD41                <1>     int 41h
   547 000014A4 0F8250010000        <1>     jc .redirError
   548 000014AA B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   549 000014AF CD41                <1>     int 41h
   550 000014B1 0F8243010000        <1>     jc .redirError
   551 000014B7 30C0                <1>     xor al, al
   552 000014B9 EB91                <1>     jmp short .redirExit
   553                              <1> .outputRedir:
   554 000014BB C605E8EBFFFF01      <1>     mov byte [redirOut], 1
   555 000014C2 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   556 000014C5 7509                <1>     jne .notDouble
   557 000014C7 FE05DDEBFFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   558 000014CD 48FFC6              <1>     inc rsi ;Go past it too
   559                              <1> .notDouble:
   560 000014D0 488D3DFDEDFFFF      <1>     lea rdi, rdrOutFilespec
   561 000014D7 E85A150000          <1>     call skipSpaces
   562 000014DC E849010000          <1>     call copyCommandTailItem
   563                              <1>     ;jc .redirExit
   564 000014E1 48FFCE              <1>     dec rsi ;Ensure rsi points to the terminating char
   565 000014E4 E84D150000          <1>     call skipSpaces
   566                              <1>     ;Setup the redir here for STDOUT
   567 000014E9 BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   568 000014EE B800450000          <1>     mov eax, 4500h
   569 000014F3 CD41                <1>     int 41h
   570 000014F5 0F82FF000000        <1>     jc .redirError
   571 000014FB 668905ABEBFFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   572 00001502 488D15CBEDFFFF      <1>     lea rdx, rdrOutFilespec
   573 00001509 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   574 0000150E CD41                <1>     int 41h
   575 00001510 7312                <1>     jnc .fileExists
   576 00001512 B8003C0000          <1>     mov eax, 3C00h
   577 00001517 B900000000          <1>     mov ecx, 0  ;Make the file with no attributes
   578 0000151C CD41                <1>     int 41h
   579 0000151E 0F82D6000000        <1>     jc .redirError
   580                              <1> .fileExists:
   581 00001524 B901000000          <1>     mov ecx, 1    ;Close STDOUT and duplicate bx into it
   582 00001529 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   583 0000152C B800460000          <1>     mov eax, 4600h  ;DUP2
   584 00001531 CD41                <1>     int 41h
   585 00001533 0F82C1000000        <1>     jc .redirError
   586 00001539 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   587 0000153E CD41                <1>     int 41h
   588 00001540 0F82B4000000        <1>     jc .redirError
   589 00001546 803D5DEBFFFF01      <1>     cmp byte [redirOut], 1
   590 0000154D 7416                <1>     je .dontAppend
   591                              <1>     ;Here we move the file pointer to the end of the file
   592 0000154F 31D2                <1>     xor edx, edx    ;Low order 32 bits
   593 00001551 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   594 00001553 BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   595 00001558 B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   596 0000155D CD41                <1>     int 41h
   597 0000155F 0F8295000000        <1>     jc .redirError
   598                              <1> .dontAppend:
   599 00001565 C6053EEBFFFFFF      <1>     mov byte [redirOut], -1
   600 0000156C 30C0                <1>     xor al, al
   601 0000156E E9D9FEFFFF          <1>     jmp .redirExit
   602                              <1> .pipeSetup:
   603 00001573 488D15A9EDFFFF      <1>     lea rdx, pipe1Filespec
   604 0000157A 803A00              <1>     cmp byte [rdx], 0
   605 0000157D 740C                <1>     jz .pathFound
   606 0000157F 488D15ECEDFFFF      <1>     lea rdx, pipe2Filespec
   607 00001586 803A00              <1>     cmp byte [rdx], 0
   608 00001589 7569                <1>     jnz .pipeError
   609                              <1> .pathFound:
   610 0000158B 4889152FEEFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   611 00001592 E82C140000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   612 00001597 0441                <1>     add al, "A"
   613 00001599 BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   614 0000159E 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   615 000015A0 B902000000          <1>     mov ecx, dirHidden  ;Hidden attributes
   616 000015A5 B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   617 000015AA CD41                <1>     int 41h
   618 000015AC 7246                <1>     jc .pipeError
   619                              <1>     ;AX has the handle for this file now, this will become STDOUT
   620                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   621 000015AE F605EDEAFFFFFF      <1>     test byte [pipeNumber], -1
   622 000015B5 751A                <1>     jnz .notFirstPipe
   623 000015B7 0FB7D0              <1>     movzx edx, ax    ;Save this handle for a minute in dx
   624                              <1>     ;Now DUP STDOUT to save for later
   625 000015BA B800450000          <1>     mov eax, 4500h
   626 000015BF BB01000000          <1>     mov ebx, 1  ;Duplicate STDOUT
   627 000015C4 CD41                <1>     int 41h
   628 000015C6 722C                <1>     jc .pipeError
   629                              <1>     ;Save this handle in the variable
   630 000015C8 668905D6EAFFFF      <1>     mov word [pipeSTDOUT], ax   ;Save this pipe number
   631 000015CF 89D0                <1>     mov eax, edx    ;Get the temp file handle back in eax
   632                              <1> .notFirstPipe:
   633 000015D1 0FB7D8              <1>     movzx ebx, ax
   634 000015D4 B901000000          <1>     mov ecx, 1  ;Close STDOUT and move bx into it
   635 000015D9 B800460000          <1>     mov eax, 4600h  ;DUPlicate temp file handle into STDOUT
   636 000015DE CD41                <1>     int 41h
   637 000015E0 7212                <1>     jc .pipeError
   638 000015E2 C605B8EAFFFFFF      <1>     mov byte [newPipeFlag], -1  ;Mark we have a new pipe active
   639 000015E9 FE05B3EAFFFF        <1>     inc byte [pipeNumber]   ;Start a new pipe
   640 000015EF 30C0                <1>     xor al, al
   641 000015F1 F9                  <1>     stc
   642 000015F2 5F                  <1>     pop rdi
   643                              <1>     return
    13                              <2> %%_ret:
    14 000015F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   644                              <1> .pipeError:
   645 000015F4 5F                  <1>     pop rdi 
   646 000015F5 E9E1FBFFFF          <1>     jmp pipeFailure
   647                              <1> .redirError:
   648 000015FA 5F                  <1>     pop rdi 
   649 000015FB E9CDFBFFFF          <1>     jmp redirFailure
   650                              <1> 
   651                              <1> copyCommandTailItemProgram:
   652                              <1> ;Copies a program name from the command tail until a terminator is found.
   653                              <1> ;Stores a terminating null in the destination
   654                              <1> ;Input: rsi = Start of the item to copy
   655                              <1> ;       rdi = Location for copy
   656                              <1> ;Output: Sentence copied with a null terminator inserted.
   657                              <1> ; If CF=CY, embedded CR encountered
   658 00001600 AC                  <1>     lodsb
   659 00001601 3C0D                <1>     cmp al, CR
   660 00001603 741A                <1>     je .endOfInput
   661 00001605 E802140000          <1>     call isALterminator
   662 0000160A 741A                <1>     jz .exit
   663 0000160C 3A0519EAFFFF        <1>     cmp al, byte [pathSep]
   664 00001612 7412                <1>     je .exit
   665 00001614 3A0512EAFFFF        <1>     cmp al, byte [switchChar]
   666 0000161A 740A                <1>     je .exit
   667 0000161C AA                  <1>     stosb
   668 0000161D EBE1                <1>     jmp short copyCommandTailItemProgram
   669                              <1> .endOfInput:
   670 0000161F E802000000          <1>     call .exit
   671 00001624 F9                  <1>     stc 
   672                              <1>     return
    13                              <2> %%_ret:
    14 00001625 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   673                              <1> .exit:
   674 00001626 30C0                <1>     xor al, al
   675 00001628 AA                  <1>     stosb
   676                              <1>     return
    13                              <2> %%_ret:
    14 00001629 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   677                              <1> 
   678                              <1> copyCommandTailItem:
   679                              <1> ;Copies a sentence from the command tail until a terminator is found.
   680                              <1> ;Stores a terminating null in the destination
   681                              <1> ;Input: rsi = Start of the item to copy
   682                              <1> ;       rdi = Location for copy
   683                              <1> ;Output: Sentence copied with a null terminator inserted.
   684                              <1> ; If CF=CY, embedded CR encountered
   685 0000162A AC                  <1>     lodsb
   686 0000162B 3C0D                <1>     cmp al, CR
   687 0000162D 7442                <1>     je .endOfInput
   688 0000162F E8D8130000          <1>     call isALterminator
   689 00001634 7442                <1>     jz .exit
   690 00001636 3C3C                <1>     cmp al, "<"
   691 00001638 743E                <1>     jz .exit
   692 0000163A 3C3E                <1>     cmp al, ">"
   693 0000163C 743A                <1>     jz .exit
   694 0000163E 3A05E7E9FFFF        <1>     cmp al, byte [pathSep]
   695 00001644 740B                <1>     je .pathSep
   696 00001646 3A05E0E9FFFF        <1>     cmp al, byte [switchChar]
   697 0000164C 742A                <1>     je .exit
   698 0000164E AA                  <1>     stosb
   699 0000164F EBD9                <1>     jmp short copyCommandTailItem
   700                              <1> .pathSep:
   701                              <1> ;We look ahead, if the last char is a pathsep, we ignore it
   702 00001651 AC                  <1>     lodsb   ;Get the next char, increment rsi by one
   703 00001652 E8B5130000          <1>     call isALterminator
   704 00001657 741F                <1>     jz .exit
   705 00001659 3C0D                <1>     cmp al, CR
   706 0000165B 7414                <1>     je .endOfInput
   707 0000165D 3A05C9E9FFFF        <1>     cmp al, byte [switchChar]
   708 00001663 7413                <1>     je .exit
   709 00001665 8A05C0E9FFFF        <1>     mov al, byte [pathSep]
   710 0000166B AA                  <1>     stosb   ;Else store the pathsep
   711 0000166C 48FFCE              <1>     dec rsi ;Move rsi back a piece
   712 0000166F EBB9                <1>     jmp short copyCommandTailItem
   713                              <1> .endOfInput:
   714 00001671 E802000000          <1>     call .exit
   715 00001676 F9                  <1>     stc 
   716                              <1>     return
    13                              <2> %%_ret:
    14 00001677 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   717                              <1> .exit:
   718 00001678 30C0                <1>     xor al, al
   719 0000167A AA                  <1>     stosb
   720                              <1>     return
    13                              <2> %%_ret:
    14 0000167B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   721                              <1> 
   722                              <1> 
   723                              <1> int4Eh:   ;Interrupt interface for parsing and executing command lines
   724                              <1> ;Input: rsi points to the count byte of a command line
   725 0000167C 4150                <1>     push r8
   726 0000167E 4151                <1>     push r9
   727 00001680 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   728 00001682 CD41                <1>     int 41h
   729 00001684 52                  <1>     push rdx    ;Save on the stack
   730 00001685 488D1D74E8FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   731 0000168C B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   732 0000168E CD41                <1>     int 41h
   733 00001690 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   734 00001693 4989D9              <1>     mov r9, rbx
   735 00001696 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   736 0000169D B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   737 000016A2 F348A5              <1>     rep movsq   ;Copy command line over
   738                              <1>     ;call doCommandLine
   739 000016A5 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   740 000016A6 B450                <1>     mov ah, 50h ;Set Current PSP
   741 000016A8 CD41                <1>     int 41h
   742 000016AA 4159                <1>     pop r9
   743 000016AC 4158                <1>     pop r8
   744 000016AE 48CF                <1>     iretq
    16                                  %include "./Utils/COMMAND/Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 4Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> noSelfCopyError:
     7 000016B0 488D15E3F1FFFF      <1>     lea rdx, noSelfCopy
     8 000016B7 EB34                <1>     jmp short badCmn
     9                              <1> badParamError:
    10 000016B9 488D1598F2FFFF      <1>     lea rdx, badParm
    11 000016C0 EB2B                <1>     jmp short badCmn
    12                              <1> badDriveError:
    13 000016C2 488D1552F2FFFF      <1>     lea rdx, badDrv
    14 000016C9 EB22                <1>     jmp short badCmn
    15                              <1> badArgError:
    16 000016CB 488D1503F5FFFF      <1>     lea rdx, badArgs
    17 000016D2 EB19                <1>     jmp short badCmn
    18                              <1> badFileError:
    19 000016D4 488D15DEF4FFFF      <1>     lea rdx, badSpec
    20 000016DB EB10                <1>     jmp short badCmn
    21                              <1> badDupFnf:
    22                              <1> ;Hybrid error message
    23 000016DD 488D1543F1FFFF      <1>     lea rdx, dupName
    24 000016E4 EB07                <1>     jmp short badCmn
    25                              <1> badDirError:
    26 000016E6 488D156CF3FFFF      <1>     lea rdx, badDir
    27                              <1> badCmn:
    28 000016ED B800090000          <1>     mov eax, 0900h
    29 000016F2 CD41                <1>     int 41h
    30 000016F4 F9                  <1>     stc ;Return with CY => Error occured
    31                              <1>     return
    13                              <2> %%_ret:
    14 000016F5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                              <1> 
    33                              <1> dir:
    34                              <1>     ;breakpoint
    35 000016F6 C60554EDFFFF00      <1>     mov byte [dirPrnType], 0    ;Clear DIR flags
    36 000016FD C6054EEDFFFF00      <1>     mov byte [dirLineCtr], 0
    37 00001704 C60548EDFFFF00      <1>     mov byte [dirFileCtr], 0
    38 0000170B C605C3EDFFFF00      <1>     mov byte [dirPathArg], 0    ;Null terminate the start of the buffer
    39 00001712 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    39 0000171B 3F                  <1>
    40 0000171C 488D3D32EEFFFF      <1>     lea rdi, dirSrchPat ;Start also by initialising the search pattern
    41 00001723 48AB                <1>     stosq
    42 00001725 48FFC7              <1>     inc rdi ;Go past dot
    43 00001728 668907              <1>     mov word [rdi], ax
    44 0000172B 884702              <1>     mov byte [rdi + 2], al
    45                              <1>     ;Start by scanning for the switches
    46 0000172E 488D3D5CEAFFFF      <1>     lea rdi, cmdBuffer + 1  ;Goto command line input chars count
    47 00001735 0FB60F              <1>     movzx ecx, byte [rdi]   ;Get number of chars typed
    48 00001738 48FFC7              <1>     inc rdi ;Goto first char typed in
    49 0000173B 4889FE              <1>     mov rsi, rdi    ;Use rsi as start of buffer counter
    50 0000173E 8A05E8E8FFFF        <1>     mov al, byte [switchChar]   ;Scan for switchchars
    51                              <1> .switchScan:
    52 00001744 F2AE                <1>     repne scasb ;Scan for a switchchar
    53 00001746 67E320              <1>     jecxz .switchScanDone
    54 00001749 24DF                <1>     and al, 0DFh    ;UC it
    55 0000174B 3C57                <1>     cmp al, "W" ;Wide print mode?
    56 0000174D 7509                <1>     jne .notWideSw
    57 0000174F 800DFBECFFFF01      <1>     or byte [dirPrnType], 1 ;Set the correct bit
    58 00001756 EBEC                <1>     jmp short .switchScan
    59                              <1> .notWideSw:
    60 00001758 3C50                <1>     cmp al, "P" ;Pause mode?
    61 0000175A 0F8559FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    62 00001760 800DEAECFFFF02      <1>     or byte [dirPrnType], 2 ;Set correct bit
    63 00001767 EBDB                <1>     jmp short .switchScan
    64                              <1> .switchScanDone:
    65                              <1> ;If no args, only switches, we search CWD
    66                              <1> ;If one arg, search that 
    67                              <1> ;If more than one, fail
    68 00001769 488D3522EAFFFF      <1>     lea rsi, cmdBuffer + 2
    69 00001770 E8C1120000          <1>     call skipSpaces ;Skip leading spaces
    70 00001775 4881C603000000      <1>     add rsi, 3  ;Go past the DIR (always three chars)
    71                              <1> .lp:
    72 0000177C E8B5120000          <1>     call skipSpaces ;Skip spaces after
    73 00001781 AC                  <1>     lodsb   ;Get first non space char
    74 00001782 E8A8120000          <1>     call isALEndOfCommand   ;If this is the end char CR or "|", exit
    75 00001787 744A                <1>     jz .eocNoNull
    76 00001789 3C3E                <1>     cmp al, ">"
    77 0000178B 7446                <1>     je .eocNoNull
    78 0000178D 3C3C                <1>     cmp al, "<"
    79 0000178F 7442                <1>     je .eocNoNull
    80 00001791 3A0595E8FFFF        <1>     cmp al, byte [switchChar]  ;Is al a switch char?
    81 00001797 7509                <1>     jne .notSwitch
    82                              <1>     ;Now we skip the switch if it was a switch
    83 00001799 E839120000          <1>     call findTerminatorOrEOC    ;Go past the switch
    84 0000179E 7233                <1>     jc .eocNoNull  ;If we reach the EOC, exit,
    85 000017A0 EBDA                <1>     jmp short .lp
    86                              <1> .notSwitch:
    87                              <1>     ;If not a switch, should be a path. Copy to buffer and keep searching
    88 000017A2 803D2CEDFFFF00      <1>     cmp byte [dirPathArg], 0    ;If a second path provided, error
    89 000017A9 0F851CFFFFFF        <1>     jne badArgError
    90 000017AF 488D3D1FEDFFFF      <1>     lea rdi, dirPathArg ;Store the path to search here AS WRITTEN BY USER
    91 000017B6 48FFCE              <1>     dec rsi ;Go back to the start of the string
    92                              <1> .nameCopy:
    93 000017B9 AC                  <1>     lodsb
    94 000017BA E870120000          <1>     call isALEndOfCommand
    95 000017BF 740F                <1>     jz .eocReached
    96 000017C1 E846120000          <1>     call isALterminator
    97 000017C6 7403                <1>     jz .terminateCopy
    98 000017C8 AA                  <1>     stosb
    99 000017C9 EBEE                <1>     jmp short .nameCopy
   100                              <1> .terminateCopy:
   101 000017CB 31C0                <1>     xor eax, eax
   102 000017CD AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   103 000017CE EBAC                <1>     jmp short .lp ;Now search if another 
   104                              <1> .eocReached:
   105 000017D0 31C0                <1>     xor eax, eax
   106 000017D2 AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   107                              <1> .eocNoNull:
   108 000017D3 803DFBECFFFF00      <1>     cmp byte [dirPathArg], 0    ;If no path provided, use CWD for current drive
   109 000017DA 7434                <1>     je .currentDrv
   110                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   111 000017DC 488D35F2ECFFFF      <1>     lea rsi, dirPathArg
   112 000017E3 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   113 000017E7 7527                <1>     jne .currentDrv
   114                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   115 000017E9 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   116 000017EE 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   117 000017F2 B801290000          <1>     mov eax, 2901h   ;Parse filename
   118 000017F7 CD41                <1>     int 41h
   119 000017F9 3CFF                <1>     cmp al, -1
   120 000017FB 0F84C1FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   121                              <1>     ;Else the drive in the fcb is valid
   122 00001801 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   123 00001806 FEC8                <1>     dec al  ;Convert to 0 based drive number
   124 00001808 880546ECFFFF        <1>     mov byte [dirDrv], al
   125 0000180E EB0B                <1>     jmp short .dirPrintVol
   126                              <1> .currentDrv:
   127 00001810 E8AE110000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   128 00001815 880539ECFFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   129                              <1> .dirPrintVol:
   130 0000181B 0FB60532ECFFFF      <1>     movzx eax, byte [dirDrv] 
   131 00001822 E8800A0000          <1>     call volume.dirEP
   132 00001827 803DA7ECFFFF00      <1>     cmp byte [dirPathArg], 0    ;Null path here, 
   133 0000182E 7409                <1>     je .printCWD
   134 00001830 803DA1ECFFFF00      <1>     cmp byte [dirPathArg + 3], 0    ;Was this X:,0?
   135 00001837 7400                <1>     je .printCWD
   136                              <1>     ;Here we have a path
   137                              <1>     ;Temp measure, we just fall through ignoring the path provided
   138                              <1> .printCWD:
   139 00001839 8A1515ECFFFF        <1>     mov dl, byte [dirDrv]
   140 0000183F 88D0                <1>     mov al, dl
   141 00001841 0441                <1>     add al, "A"
   142 00001843 B43A                <1>     mov ah, ":"
   143 00001845 66890585EBFFFF      <1>     mov word [searchSpec], ax
   144 0000184C 8A05D9E7FFFF        <1>     mov al, byte [pathSep]
   145 00001852 88057BEBFFFF        <1>     mov byte [searchSpec + 2], al
   146 00001858 488D3575EBFFFF      <1>     lea rsi, searchSpec + 3  ;Make space for a X:"\"
   147 0000185F B447                <1>     mov ah, 47h ;Get Current Working Directory
   148 00001861 FEC2                <1>     inc dl  ;Convert to 1 based number
   149 00001863 CD41                <1>     int 41h
   150 00001865 488D3D65EBFFFF      <1>     lea rdi, searchSpec
   151 0000186C E857110000          <1>     call strlen
   152 00001871 FFC9                <1>     dec ecx
   153 00001873 C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   154 00001877 488D1543F2FFFF      <1>     lea rdx, dirMain
   155 0000187E B409                <1>     mov ah, 09h
   156 00001880 CD41                <1>     int 41h
   157 00001882 4889FA              <1>     mov rdx, rdi    ;Print the current directory we are working on
   158 00001885 B409                <1>     mov ah, 09h
   159 00001887 CD41                <1>     int 41h
   160 00001889 488D1522EFFFFF      <1>     lea rdx, crlf2
   161 00001890 B409                <1>     mov ah, 09h
   162 00001892 CD41                <1>     int 41h
   163 00001894 E801000000          <1>     call .searchForFile
   164                              <1>     return
    13                              <2> %%_ret:
    14 00001899 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   165                              <1>     ;If we get no path spec or just a X: path spec then we 
   166                              <1>     ; search the current working directory for that pathspec
   167                              <1>     ;If we get an actual pathspec, we first save the CWD for that drive
   168                              <1>     ; and then we try to make the pathspec the CWD. 
   169                              <1>     ;   If it works, we then search *.* in that folder and return the og CWD.
   170                              <1>     ;   If it fails, we then search one level up, for the search pattern
   171                              <1>     ;    that we compute.
   172                              <1> 
   173                              <1>     
   174                              <1>     ;Now we need to print the path to the folder we will be searching in
   175                              <1> .searchForFile:
   176                              <1>     ;Now we search for the files
   177                              <1>     ;RCX must have the number of chars to the end of the pathspec
   178 0000189A 488D3D30EBFFFF      <1>     lea rdi, searchSpec
   179 000018A1 8A0584E7FFFF        <1>     mov al, byte [pathSep]
   180 000018A7 38440FFF            <1>     cmp byte [rdi + rcx - 1], al
   181 000018AB 7405                <1>     je .noAddSlash  ;Deals with special case of root dir
   182 000018AD 88040F              <1>     mov byte [rdi + rcx], al
   183 000018B0 FFC1                <1>     inc ecx
   184                              <1> .noAddSlash:
   185 000018B2 488D3C0F            <1>     lea rdi, qword [rdi + rcx]
   186 000018B6 488D3598ECFFFF      <1>     lea rsi, dirSrchPat
   187 000018BD 4889FA              <1>     mov rdx, rdi    ;Ptr to search for in rdx
   188 000018C0 48A5                <1>     movsq
   189 000018C2 A5                  <1>     movsd
   190 000018C3 30C0                <1>     xor al, al
   191 000018C5 AA                  <1>     stosb   ;Store the terminating null
   192 000018C6 B911000000          <1>     mov ecx, dirReadOnly | dirDirectory
   193 000018CB B44E                <1>     mov ah, 4Eh ;Find first
   194 000018CD CD41                <1>     int 41h
   195 000018CF 720B                <1>     jc .dirNoMoreFiles
   196                              <1> .findNext:
   197 000018D1 E878000000          <1>     call .dirPrintFileData  ;Print the file information
   198 000018D6 B44F                <1>     mov ah, 4Fh
   199 000018D8 CD41                <1>     int 41h
   200 000018DA 73F5                <1>     jnc .findNext 
   201                              <1> .dirNoMoreFiles:
   202 000018DC F6056EEBFFFF01      <1>     test byte [dirPrnType], 1
   203 000018E3 740B                <1>     jz .dirNoEndNewLine
   204 000018E5 488D15C3EEFFFF      <1>     lea rdx, crlf   ;Only need this for /W
   205 000018EC B409                <1>     mov ah, 09h
   206 000018EE CD41                <1>     int 41h
   207                              <1> .dirNoEndNewLine:
   208                              <1>     ;Now we print the number of files and the number of bytes on the disk
   209 000018F0 488D1582F4FFFF      <1>     lea rdx, fourSpc
   210 000018F7 B409                <1>     mov ah, 09h
   211 000018F9 CD41                <1>     int 41h
   212 000018FB B409                <1>     mov ah, 09h ;Print four Spaces twice
   213 000018FD CD41                <1>     int 41h
   214 000018FF 0FB6054DEBFFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   215 00001906 E8CA120000          <1>     call printDecimalWord
   216 0000190B 488D15E8EFFFFF      <1>     lea rdx, dirOk
   217 00001912 B409                <1>     mov ah, 09h
   218 00001914 CD41                <1>     int 41h
   219 00001916 488D1561F4FFFF      <1>     lea rdx, threeSpc
   220 0000191D B409                <1>     mov ah, 09h
   221 0000191F CD41                <1>     int 41h
   222 00001921 B800360000          <1>     mov eax, 3600h ;Get disk info
   223 00001926 8A1528EBFFFF        <1>     mov dl, byte [dirDrv]
   224 0000192C FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   225 0000192E CD41                <1>     int 41h ;Get disk free space info
   226 00001930 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   227 00001933 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   228 00001936 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   229 00001938 F7E1                <1>     mul ecx ;Get bytes per cluster
   230 0000193A 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   231                              <1>     ;rax now has the number of free bytes on the disk
   232 0000193D E893120000          <1>     call printDecimalWord
   233 00001942 488D15BBEFFFFF      <1>     lea rdx, bytesOk
   234 00001949 B409                <1>     mov ah, 09h
   235 0000194B CD41                <1>     int 41h
   236                              <1>     return
    13                              <2> %%_ret:
    14 0000194D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   237                              <1> 
   238                              <1> .dirPrintFileData:
   239                              <1> ;Use fcbCmdSpec to build the file name with space
   240                              <1> ;Start by print the name (same for both cases)
   241                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   242 0000194E F60585E7FFFF06      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles
   243                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001955 75(4D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   244 00001957 488D3585E7FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   245 0000195E 488D3DFAE8FFFF      <1>     lea rdi, fcbCmdSpec
   246 00001965 E843110000          <1>     call asciiFilenameToFCB
   247 0000196A 488D15EEE8FFFF      <1>     lea rdx, fcbCmdSpec
   248 00001971 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   249 00001976 BB01000000          <1>     mov ebx, 1  ;STDOUT
   250 0000197B B440                <1>     mov ah, 40h ;Write handle
   251 0000197D CD41                <1>     int 41h
   252 0000197F 52                  <1>     push rdx
   253 00001980 B220                <1>     mov dl, " "
   254 00001982 B402                <1>     mov ah, 02h ;Print char
   255 00001984 CD41                <1>     int 41h
   256 00001986 5A                  <1>     pop rdx
   257 00001987 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   258 0000198E B903000000          <1>     mov ecx, 3  ;Print three chars
   259 00001993 BB01000000          <1>     mov ebx, 1  ;STDOUT
   260 00001998 B440                <1>     mov ah, 40h ;Write handle
   261 0000199A CD41                <1>     int 41h
   262 0000199C F605AEEAFFFF01      <1>     test byte [dirPrnType], 1
   263 000019A3 0F85A8000000        <1>     jnz .widePrint
   264                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   265                              <1>     ;Now check if a DIR
   266 000019A9 F6052AE7FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   267 000019B0 7418                <1>     jz .dirPrintNotDir
   268 000019B2 488D1559EFFFFF      <1>     lea rdx, dirLbl
   269 000019B9 B409                <1>     mov ah, 09h
   270 000019BB CD41                <1>     int 41h
   271 000019BD 488D15BAF3FFFF      <1>     lea rdx, threeSpc
   272 000019C4 B409                <1>     mov ah, 09h
   273 000019C6 CD41                <1>     int 41h
   274 000019C8 EB4F                <1>     jmp short .dirPrintFileDT
   275                              <1> .dirPrintNotDir:
   276                              <1> ;Here we print the file size
   277 000019CA B220                <1>     mov dl, " "
   278 000019CC B402                <1>     mov ah, 02h
   279 000019CE CD41                <1>     int 41h
   280 000019D0 8B0509E7FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   281 000019D6 E86B120000          <1>     call getDecimalWord
   282 000019DB 4889CB              <1>     mov rbx, rcx
   283 000019DE 51                  <1>     push rcx
   284 000019DF 480FCB              <1>     bswap rbx
   285 000019E2 B908000000          <1>     mov ecx, 8
   286                              <1> .dirPrintFileSizePrep:
   287 000019E7 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   288 000019E9 7514                <1>     jne .dirPrintFileSize
   289 000019EB B402                <1>     mov ah, 02h
   290 000019ED B220                <1>     mov dl, " "
   291 000019EF CD41                <1>     int 41h
   292 000019F1 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   293 000019F5 FFC9                <1>     dec ecx
   294 000019F7 81F901000000        <1>     cmp ecx, 1
   295 000019FD 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   296                              <1> .dirPrintFileSize:
   297 000019FF 5B                  <1>     pop rbx
   298                              <1> .dirPrintFileSizeLoop:
   299 00001A00 88DA                <1>     mov dl, bl
   300 00001A02 B402                <1>     mov ah, 02h
   301 00001A04 CD41                <1>     int 41h
   302 00001A06 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   303 00001A0A FFC9                <1>     dec ecx
   304 00001A0C 75F2                <1>     jnz .dirPrintFileSizeLoop
   305 00001A0E 488D156DF3FFFF      <1>     lea rdx, twoSpc
   306 00001A15 B409                <1>     mov ah, 09h
   307 00001A17 CD41                <1>     int 41h
   308                              <1> .dirPrintFileDT:
   309 00001A19 B220                <1>     mov dl, " "
   310 00001A1B B402                <1>     mov ah, 02h
   311 00001A1D CD41                <1>     int 41h
   312 00001A1F 0FB705B7E6FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   313 00001A26 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   314 00001A28 E8EC0C0000          <1>     call printDate
   315 00001A2D 488D154EF3FFFF      <1>     lea rdx, twoSpc
   316 00001A34 B409                <1>     mov ah, 09h
   317 00001A36 CD41                <1>     int 41h
   318 00001A38 0FB7059CE6FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   319 00001A3F E8F70D0000          <1>     call printTime
   320 00001A44 488D1564EDFFFF      <1>     lea rdx, crlf
   321 00001A4B B409                <1>     mov ah, 09h
   322 00001A4D CD41                <1>     int 41h
   323 00001A4F EB0B                <1>     jmp short .dirPrintNameExit
   324                              <1> .widePrint:
   325                              <1> ;If /W, print name space ext space space space space
   326 00001A51 488D1521F3FFFF      <1>     lea rdx, fourSpc
   327 00001A58 B409                <1>     mov ah, 09h ;Print string
   328 00001A5A CD41                <1>     int 41h
   329                              <1> .dirPrintNameExit:
   330 00001A5C FE05F1E9FFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   331 00001A62 FE05EAE9FFFF        <1>     inc byte [dirLineCtr]
   332 00001A68 803DE3E9FFFF17      <1>     cmp byte [dirLineCtr], 23
   333                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001A6F 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001A71 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   334 00001A72 488D15C0EEFFFF      <1>     lea rdx, pauseMes
   335 00001A79 B409                <1>     mov ah, 09h
   336 00001A7B CD41                <1>     int 41h
   337 00001A7D B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   338 00001A7F CD41                <1>     int 41h
   339 00001A81 C605CAE9FFFF00      <1>     mov byte [dirLineCtr], 0
   340 00001A88 488D1520EDFFFF      <1>     lea rdx, crlf   ;Force new line
   341 00001A8F B409                <1>     mov ah, 09h
   342 00001A91 CD41                <1>     int 41h
   343                              <1>     return
    13                              <2> %%_ret:
    14 00001A93 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   344                              <1> 
   345                              <1> chdir:
   346 00001A94 F60514E6FFFFFF      <1>     test byte [arg1Flg], -1
   347 00001A9B 754D                <1>     jnz .changeDir
   348                              <1>     ;Print CWD
   349                              <1> .printCWD:
   350 00001A9D E87A0E0000          <1>     call putCWDInPrompt ;Exactly the same procedure
   351 00001AA2 E85C0C0000          <1>     call printCRLF
   352                              <1>     return
    13                              <2> %%_ret:
    14 00001AA7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   353                              <1> .printDiskCWD:
   354                              <1> ;Print CWD for a specified drive
   355 00001AA8 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   356 00001AAC 88D0                <1>     mov al, dl
   357 00001AAE 0440                <1>     add al, "@" ;Get the UC letter
   358 00001AB0 B43A                <1>     mov ah, ":"
   359 00001AB2 488D3D18E9FFFF      <1>     lea rdi, searchSpec
   360 00001AB9 66AB                <1>     stosw   ;Store X:, rdi+=2
   361 00001ABB 8A056AE5FFFF        <1>     mov al, byte [pathSep]
   362 00001AC1 AA                  <1>     stosb   ;Store pathSep, inc rdi
   363 00001AC2 B447                <1>     mov ah, 47h ;Get Current Working Directory
   364 00001AC4 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   365 00001AC7 CD41                <1>     int 41h
   366 00001AC9 E8FA0E0000          <1>     call strlen
   367 00001ACE 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   368 00001AD4 B440                <1>     mov ah, 40h ;Write to handle
   369 00001AD6 BB01000000          <1>     mov ebx, 1  ;STDOUT
   370 00001ADB 488D15EFE8FFFF      <1>     lea rdx, searchSpec
   371 00001AE2 CD41                <1>     int 41h
   372 00001AE4 E81A0C0000          <1>     call printCRLF
   373                              <1>     return
    13                              <2> %%_ret:
    14 00001AE9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   374                              <1> .changeDir:
   375 00001AEA 8A05C1E5FFFF        <1>     mov al, byte [arg1FCBret]
   376 00001AF0 3CFF                <1>     cmp al, -1 
   377 00001AF2 0F84CAFBFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   378 00001AF8 4180785D20          <1>     cmp byte [r8 + fcb1 + fcb.filename], " "
   379 00001AFD 7520                <1>     jne .getFQPath
   380                              <1>     ;Now we double check that on the command line we have . or ..
   381 00001AFF 0FB605AAE5FFFF      <1>     movzx eax, byte [arg1Off]
   382 00001B06 488D3583E6FFFF      <1>     lea rsi, cmdBuffer
   383 00001B0D 4801C6              <1>     add rsi, rax
   384 00001B10 8A0515E5FFFF        <1>     mov al, byte [pathSep]
   385 00001B16 3806                <1>     cmp byte [rsi], al  ;Is the first char a pathsep?
   386 00001B18 7405                <1>     je .getFQPath
   387 00001B1A 803E2E              <1>     cmp byte [rsi], "."
   388 00001B1D 7589                <1>     jne .printDiskCWD
   389                              <1>     ;If the path is . or .., its acceptable, else fail
   390                              <1> .getFQPath:
   391 00001B1F E813100000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   392 00001B24 0F82BCFBFFFF        <1>     jc badDirError  ;If this returns CF=CY, its a badDir
   393 00001B2A 488D15A0E8FFFF      <1>     lea rdx, searchSpec
   394 00001B31 B43B                <1>     mov ah, 3Bh ;CHDIR
   395 00001B33 CD41                <1>     int 41h
   396 00001B35 0F82ABFBFFFF        <1>     jc badDirError
   397                              <1>     return
    13                              <2> %%_ret:
    14 00001B3B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   398                              <1> 
   399                              <1> mkdir:
   400 00001B3C F6056CE5FFFFFF      <1>     test byte [arg1Flg], -1
   401 00001B43 0F8482FBFFFF        <1>     jz badArgError
   402 00001B49 F60562E5FFFFFF      <1>     test byte [arg2Flg], -1
   403 00001B50 0F8575FBFFFF        <1>     jnz badArgError
   404                              <1>     ;We have exactly one argument
   405 00001B56 8A0555E5FFFF        <1>     mov al, byte [arg1FCBret]
   406 00001B5C 3CFF                <1>     cmp al, -1 
   407 00001B5E 0F845EFBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   408 00001B64 E8CE0F0000          <1>     call buildCommandPath
   409 00001B69 488D1561E8FFFF      <1>     lea rdx, searchSpec
   410 00001B70 B800390000          <1>     mov eax, 3900h  ;MKDIR
   411 00001B75 CD41                <1>     int 41h
   412                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001B77 73(3B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   413                              <1> .badMake:   ;Else, bad make
   414 00001B79 488D15EDEEFFFF      <1>     lea rdx, badMD
   415 00001B80 B800090000          <1>     mov eax, 0900h
   416 00001B85 CD41                <1>     int 41h
   417                              <1>     return
    13                              <2> %%_ret:
    14 00001B87 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   418                              <1> 
   419                              <1> rmdir:
   420 00001B88 F60520E5FFFFFF      <1>     test byte [arg1Flg], -1
   421 00001B8F 0F8436FBFFFF        <1>     jz badArgError
   422 00001B95 F60516E5FFFFFF      <1>     test byte [arg2Flg], -1
   423 00001B9C 0F8529FBFFFF        <1>     jnz badArgError
   424                              <1>     ;We have exactly one argument
   425 00001BA2 8A0509E5FFFF        <1>     mov al, byte [arg1FCBret]
   426 00001BA8 3CFF                <1>     cmp al, -1 
   427 00001BAA 0F8412FBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   428 00001BB0 E8820F0000          <1>     call buildCommandPath
   429 00001BB5 488D1515E8FFFF      <1>     lea rdx, searchSpec
   430 00001BBC B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   431 00001BC1 CD41                <1>     int 41h
   432                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001BC3 73(87)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   433                              <1> .badRemove:   ;Else, bad make
   434 00001BC5 488D15BEEEFFFF      <1>     lea rdx, badRD
   435 00001BCC B800090000          <1>     mov eax, 0900h
   436 00001BD1 CD41                <1>     int 41h
   437                              <1>     return
    13                              <2> %%_ret:
    14 00001BD3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   438                              <1> 
   439                              <1> copy:
   440 00001BD4 F605D4E4FFFFFF      <1>     test byte [arg1Flg], -1
   441 00001BDB 0F84EAFAFFFF        <1>     jz badArgError
   442 00001BE1 F605CAE4FFFFFF      <1>     test byte [arg2Flg], -1
   443 00001BE8 0F84DDFAFFFF        <1>     jz badArgError
   444 00001BEE 488D359BE5FFFF      <1>     lea rsi, cmdBuffer
   445 00001BF5 0FB605B4E4FFFF      <1>     movzx eax, byte [arg1Off]
   446 00001BFC 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   447                              <1>     ;rsi points to terminating char
   448 00001BFF AC                  <1>     lodsb   ;Get first char in AL
   449 00001C00 48FFCE              <1>     dec rsi ;Go back to this char
   450 00001C03 E8270E0000          <1>     call isALEndOfCommand
   451 00001C08 0F82ABFAFFFF        <1>     jc badParamError
   452 00001C0E 488D3D64E9FFFF      <1>     lea rdi, sourcePath ;Store this in sourcePath
   453                              <1> .copyName1:
   454 00001C15 AC                  <1>     lodsb
   455 00001C16 E8140E0000          <1>     call isALEndOfCommand
   456 00001C1B 0F8498FAFFFF        <1>     je badParamError
   457 00001C21 E8E60D0000          <1>     call isALterminator
   458 00001C26 7403                <1>     jz .endOfName1
   459 00001C28 AA                  <1>     stosb
   460 00001C29 EBEA                <1>     jmp short .copyName1
   461                              <1> .endOfName1:
   462 00001C2B 31C0                <1>     xor eax, eax
   463 00001C2D AA                  <1>     stosb   ;Store this 0 at rdi
   464 00001C2E 488D355BE5FFFF      <1>     lea rsi, cmdBuffer
   465 00001C35 0FB60577E4FFFF      <1>     movzx eax, byte [arg2Off]
   466 00001C3C 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   467 00001C3F AC                  <1>     lodsb   ;Get first char in AL
   468 00001C40 48FFCE              <1>     dec rsi ;Go back to this char
   469 00001C43 E8E70D0000          <1>     call isALEndOfCommand
   470 00001C48 0F826BFAFFFF        <1>     jc badParamError
   471 00001C4E 488D3DA4E9FFFF      <1>     lea rdi, destPath
   472                              <1> .copyName2:
   473 00001C55 AC                  <1>     lodsb
   474 00001C56 E8D40D0000          <1>     call isALEndOfCommand
   475 00001C5B 740A                <1>     je .endOfName2
   476 00001C5D E8AA0D0000          <1>     call isALterminator
   477 00001C62 7403                <1>     jz .endOfName2
   478 00001C64 AA                  <1>     stosb
   479 00001C65 EBEE                <1>     jmp short .copyName2
   480                              <1> .endOfName2:
   481 00001C67 31C0                <1>     xor eax, eax
   482 00001C69 AA                  <1>     stosb   ;Store this 0 at rdi
   483                              <1> ;Before we open, we check if the two filenames are equal
   484                              <1> ; If so, crap out.
   485 00001C6A 488D3508E9FFFF      <1>     lea rsi, sourcePath
   486 00001C71 488D3D81E9FFFF      <1>     lea rdi, destPath
   487 00001C78 B81E120000          <1>     mov eax, 121Eh
   488 00001C7D CD4F                <1>     int 4Fh
   489 00001C7F 0F849C000000        <1>     jz .sameFilename
   490                              <1>     ;Open source with read permission
   491                              <1>     ;Open destination with write permission
   492 00001C85 488D15EDE8FFFF      <1>     lea rdx, sourcePath
   493 00001C8C B8003D0000          <1>     mov eax, 3D00h  ;Read open
   494 00001C91 CD41                <1>     int 41h
   495 00001C93 0F8220FAFFFF        <1>     jc badParamError
   496 00001C99 668905D9E9FFFF      <1>     mov word [sourceHdl], ax
   497 00001CA0 488D1552E9FFFF      <1>     lea rdx, destPath
   498 00001CA7 B8003C0000          <1>     mov eax, 3C00h  ;Create the file
   499 00001CAC 31C9                <1>     xor ecx, ecx    ;No file attributes
   500 00001CAE CD41                <1>     int 41h
   501 00001CB0 0F8292000000        <1>     jc .badExit
   502 00001CB6 668905BEE9FFFF      <1>     mov word [destHdl], ax
   503 00001CBD 31F6                <1>     xor esi, esi
   504 00001CBF 488D15B7E9FFFF      <1>     lea rdx, copyBuffer
   505                              <1> .copyLoop:
   506 00001CC6 B980000000          <1>     mov ecx, 128
   507 00001CCB 0FB71DA7E9FFFF      <1>     movzx ebx, word [sourceHdl]
   508 00001CD2 B43F                <1>     mov ah, 3Fh ;Read
   509 00001CD4 CD41                <1>     int 41h
   510 00001CD6 7270                <1>     jc .badExit
   511 00001CD8 85C0                <1>     test eax, eax
   512 00001CDA 7418                <1>     jz .okExit
   513 00001CDC 01C6                <1>     add esi, eax
   514                              <1>     ;mov eax, EOF
   515                              <1>     ;mov rdi, rdx
   516                              <1>     ;mov ecx, 128
   517                              <1>     ;repne scasb ;Scan for an EOF
   518                              <1>     ;mov eax, 128
   519                              <1>     ;sub eax, ecx    ;If an EOF found, only print up to it
   520 00001CDE 89C1                <1>     mov ecx, eax
   521 00001CE0 0FB71D94E9FFFF      <1>     movzx ebx, word [destHdl]
   522 00001CE7 B440                <1>     mov ah, 40h ;Write
   523 00001CE9 CD41                <1>     int 41h
   524 00001CEB 725B                <1>     jc .badExit
   525 00001CED 3D80000000          <1>     cmp eax, 128    ;Change this for writing from Char devices in ASCII mode
   526 00001CF2 73D2                <1>     jnb .copyLoop
   527                              <1> .okExit:
   528 00001CF4 E832000000          <1>     call .leaveCopyClose
   529 00001CF9 488D15AFEAFFFF      <1>     lea rdx, crlf
   530 00001D00 B409                <1>     mov ah, 09h
   531 00001D02 CD41                <1>     int 41h
   532 00001D04 488D156EF0FFFF      <1>     lea rdx, fourSpc
   533 00001D0B B409                <1>     mov ah, 09h
   534 00001D0D CD41                <1>     int 41h
   535 00001D0F B402                <1>     mov ah, 02h
   536 00001D11 B231                <1>     mov dl, "1" ;1 File(s) copied
   537 00001D13 CD41                <1>     int 41h
   538 00001D15 488D15CCEBFFFF      <1>     lea rdx, copyOk
   539 00001D1C B409                <1>     mov ah, 09h
   540 00001D1E CD41                <1>     int 41h
   541                              <1>     return
    13                              <2> %%_ret:
    14 00001D20 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   542                              <1> .sameFilename:
   543 00001D21 E805000000          <1>     call .leaveCopyClose ;Close the handles
   544 00001D26 E985F9FFFF          <1>     jmp noSelfCopyError
   545                              <1> .leaveCopyClose:
   546 00001D2B 668B1D47E9FFFF      <1>     mov bx, word [sourceHdl]
   547 00001D32 B8003E0000          <1>     mov eax, 3E00h
   548 00001D37 CD41                <1>     int 41h
   549 00001D39 668B1D3BE9FFFF      <1>     mov bx, word [destHdl]
   550 00001D40 B8003E0000          <1>     mov eax, 3E00h
   551 00001D45 CD41                <1>     int 41h
   552                              <1>     return
    13                              <2> %%_ret:
    14 00001D47 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   553                              <1> .badExit:
   554                              <1> ;Prototypically use badParamError for error reporting... sucks I know
   555 00001D48 668B1D2AE9FFFF      <1>     mov bx, word [sourceHdl]
   556 00001D4F 6681FBFFFF          <1>     cmp bx, -1
   557 00001D54 7407                <1>     je .skipSource
   558 00001D56 B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
   559 00001D5B CD41                <1>     int 41h
   560                              <1> .skipSource:
   561 00001D5D 668B1D17E9FFFF      <1>     mov bx, word [destHdl]
   562 00001D64 6681FBFFFF          <1>     cmp bx, -1
   563 00001D69 0F844AF9FFFF        <1>     je badParamError
   564 00001D6F B8003E0000          <1>     mov eax, 3E00h
   565 00001D74 CD41                <1>     int 41h
   566 00001D76 E93EF9FFFF          <1>     jmp badParamError
   567                              <1> 
   568                              <1> erase:
   569 00001D7B F6052DE3FFFFFF      <1>     test byte [arg1Flg], -1
   570 00001D82 0F8443F9FFFF        <1>     jz badArgError
   571 00001D88 E8AA0D0000          <1>     call buildCommandPath
   572 00001D8D 488D153DE6FFFF      <1>     lea rdx, searchSpec
   573 00001D94 B800410000          <1>     mov eax, 4100h  ;Delete File 
   574 00001D99 31C9                <1>     xor ecx, ecx
   575 00001D9B CD41                <1>     int 41h
   576 00001D9D 0F8228F9FFFF        <1>     jc badArgError
   577                              <1>     return
    13                              <2> %%_ret:
    14 00001DA3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   578                              <1> date:
   579 00001DA4 488D15E5EBFFFF      <1>     lea rdx, curDate
   580 00001DAB B409                <1>     mov ah, 09h
   581 00001DAD CD41                <1>     int 41h
   582 00001DAF B42A                <1>     mov ah, 2Ah ;DOS get date
   583 00001DB1 CD41                <1>     int 41h
   584                              <1> 	;AL = day of the week (0=Sunday)
   585                              <1> 	;CX = year (1980-2099)
   586                              <1> 	;DH = month (1-12)
   587                              <1> 	;DL = day (1-31)
   588 00001DB3 66890DBBE7FFFF      <1>     mov word [td1], cx
   589 00001DBA 8815B7E7FFFF        <1>     mov byte [td3], dl
   590 00001DC0 8835B2E7FFFF        <1>     mov byte [td4], dh
   591 00001DC6 0FB6C0              <1>     movzx eax, al
   592 00001DC9 89C3                <1>     mov ebx, eax
   593 00001DCB D1E3                <1>     shl ebx, 1   ;Multiply by 2
   594 00001DCD 01D8                <1>     add eax, ebx ;Make it 3 times 
   595 00001DCF 488D1596EBFFFF      <1>     lea rdx, dayName
   596 00001DD6 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   597 00001DDA B903000000          <1>     mov ecx, 3  ;Print three chars
   598 00001DDF BB01000000          <1>     mov ebx, 1  ;STDOUT
   599 00001DE4 B440                <1>     mov ah, 40h ;Write to handle
   600 00001DE6 CD41                <1>     int 41h
   601 00001DE8 B220                <1>     mov dl, " "
   602 00001DEA B402                <1>     mov ah, 02h
   603 00001DEC CD41                <1>     int 41h
   604                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   605                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   606                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   607 00001DEE 0FB70580E7FFFF      <1>     movzx eax, word [td1]   ;Get this word
   608 00001DF5 C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   609 00001DF8 0FB61D79E7FFFF      <1>     movzx ebx, byte [td4]
   610 00001DFF C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   611 00001E02 09D8                <1>     or eax, ebx ;Add this date to eax
   612 00001E04 0FB61D6CE7FFFF      <1>     movzx ebx, byte [td3]
   613 00001E0B 09D8                <1>     or eax, ebx
   614 00001E0D BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   615 00001E12 E802090000          <1>     call printDate
   616                              <1> 
   617 00001E17 488D1583EBFFFF      <1>     lea rdx, newDate
   618 00001E1E B409                <1>     mov ah, 09h
   619 00001E20 CD41                <1>     int 41h
   620 00001E22 488D1597EBFFFF      <1>     lea rdx, ukDate
   621 00001E29 488D0583EBFFFF      <1>     lea rax, usDate
   622 00001E30 488D1D96EBFFFF      <1>     lea rbx, jpDate
   623 00001E37 803DF8E1FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   624 00001E3E 480F47D3            <1>     cmova rdx, rbx
   625 00001E42 480F42D0            <1>     cmovb rdx, rax
   626 00001E46 B409                <1>     mov ah, 09h
   627 00001E48 CD41                <1>     int 41h
   628                              <1> 
   629 00001E4A 498D9080000000      <1>     lea rdx, qword [r8 + cmdLineCnt]
   630 00001E51 B40A                <1>     mov ah, 0Ah
   631 00001E53 CD41                <1>     int 41h
   632 00001E55 52                  <1>     push rdx
   633 00001E56 488D1552E9FFFF      <1>     lea rdx, crlf
   634 00001E5D B409                <1>     mov ah, 09h
   635 00001E5F CD41                <1>     int 41h
   636 00001E61 5A                  <1>     pop rdx
   637 00001E62 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   638                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001E66 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001E68 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   639                              <1>     return
    13                              <2> %%_ret:
    14 00001E69 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   640                              <1> 
   641                              <1> time:
   642 00001E6A 488D1578EBFFFF      <1>     lea rdx, curTime
   643 00001E71 B409                <1>     mov ah, 09h
   644 00001E73 CD41                <1>     int 41h
   645 00001E75 B42C                <1>     mov ah, 2Ch ;DOS get time
   646 00001E77 CD41                <1>     int 41h
   647                              <1>     ;CH = hour (0-23)
   648                              <1> 	;CL = minutes (0-59)
   649                              <1> 	;DH = seconds (0-59)
   650                              <1> 	;DL = hundredths (0-99)
   651 00001E79 880DF6E6FFFF        <1>     mov byte [td1], cl
   652 00001E7F 882DF1E6FFFF        <1>     mov byte [td2], ch
   653 00001E85 8815ECE6FFFF        <1>     mov byte [td3], dl
   654 00001E8B 8835E7E6FFFF        <1>     mov byte [td4], dh
   655 00001E91 0FB6C5              <1>     movzx eax, ch
   656 00001E94 E8140A0000          <1>     call printTime.printHours
   657                              <1> 
   658 00001E99 8A15A4E1FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   659 00001E9F B402                <1>     mov ah, 02h
   660 00001EA1 CD41                <1>     int 41h
   661                              <1> 
   662 00001EA3 0FB605CBE6FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   663 00001EAA E8EE090000          <1>     call printTime.printMinutesAlt
   664                              <1> 
   665 00001EAF 8A158EE1FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   666 00001EB5 B402                <1>     mov ah, 02h
   667 00001EB7 CD41                <1>     int 41h
   668                              <1> 
   669 00001EB9 0FB605B8E6FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   670 00001EC0 E8D8090000          <1>     call printTime.printMinutesAlt
   671                              <1> 
   672 00001EC5 B22E                <1>     mov dl, "."
   673 00001EC7 B402                <1>     mov ah, 02h
   674 00001EC9 CD41                <1>     int 41h
   675                              <1> 
   676 00001ECB 0FB605A5E6FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   677 00001ED2 E8C6090000          <1>     call printTime.printMinutesAlt
   678                              <1> 
   679 00001ED7 488D151CEBFFFF      <1>     lea rdx, newTime
   680 00001EDE B409                <1>     mov ah, 09h
   681 00001EE0 CD41                <1>     int 41h
   682                              <1> 
   683 00001EE2 498D9080000000      <1>     lea rdx, qword [r8 + cmdLineCnt]
   684 00001EE9 B40A                <1>     mov ah, 0Ah
   685 00001EEB CD41                <1>     int 41h
   686 00001EED 52                  <1>     push rdx
   687 00001EEE 488D15BAE8FFFF      <1>     lea rdx, crlf
   688 00001EF5 B409                <1>     mov ah, 09h
   689 00001EF7 CD41                <1>     int 41h
   690 00001EF9 5A                  <1>     pop rdx
   691 00001EFA 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   692                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001EFE 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001F00 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   693                              <1>     return
    13                              <2> %%_ret:
    14 00001F01 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   694                              <1> ctty:
   695 00001F02 F605A6E1FFFFFF      <1>     test byte [arg1Flg], -1
   696 00001F09 0F84BCF7FFFF        <1>     jz badArgError
   697 00001F0F F6059CE1FFFFFF      <1>     test byte [arg2Flg], -1
   698 00001F16 0F85AFF7FFFF        <1>     jnz badArgError
   699 00001F1C 488D356DE2FFFF      <1>     lea rsi, cmdBuffer
   700 00001F23 0FB60586E1FFFF      <1>     movzx eax, byte [arg1Off]
   701 00001F2A 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
   702 00001F2D 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
   703 00001F31 750F                <1>     jne .noDrive
   704 00001F33 0FB60577E1FFFF      <1>     movzx eax, byte [arg1FCBret]
   705 00001F3A 3CFF                <1>     cmp al, -1
   706 00001F3C 0F8480F7FFFF        <1>     je badDriveError
   707                              <1> .noDrive:
   708                              <1>     ;Now we open the provided file
   709 00001F42 E8730D0000          <1>     call copyArgumentToSearchSpec
   710 00001F47 488D1583E4FFFF      <1>     lea rdx, searchSpec
   711 00001F4E B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
   712 00001F53 CD41                <1>     int 41h
   713 00001F55 0F8279F7FFFF        <1>     jc badFileError
   714 00001F5B 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
   715 00001F5E B800440000          <1>     mov eax, 4400h  ;Get device word
   716 00001F63 CD41                <1>     int 41h
   717 00001F65 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
   718 00001F68 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
   719                              <1>     ;Now we set this handle to be STDIO
   720 00001F6A 80CA03              <1>     or dl, 3    ;Set STDIO bits
   721 00001F6D 30F6                <1>     xor dh, dh
   722 00001F6F B801440000          <1>     mov eax, 4401h  ;Now we set the device word
   723 00001F74 CD41                <1>     int 41h
   724                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
   725 00001F76 31C9                <1>     xor ecx, ecx    ;STDIN
   726 00001F78 B446                <1>     mov ah, 46h
   727 00001F7A CD41                <1>     int 41h
   728 00001F7C FFC1                <1>     inc ecx         ;STDOUT
   729 00001F7E B446                <1>     mov ah, 46h
   730 00001F80 CD41                <1>     int 41h
   731 00001F82 FFC1                <1>     inc ecx         ;STDERR
   732 00001F84 B446                <1>     mov ah, 46h
   733 00001F86 CD41                <1>     int 41h
   734 00001F88 B43E                <1>     mov ah, 3Eh ;Now we close the original handle
   735 00001F8A CD41                <1>     int 41h
   736                              <1>     return
    13                              <2> %%_ret:
    14 00001F8C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   737                              <1> .badCharDev:
   738 00001F8D 488D1565EBFFFF      <1>     lea rdx, badDev
   739 00001F94 B409                <1>     mov ah, 09h
   740 00001F96 CD41                <1>     int 41h
   741 00001F98 B43E                <1>     mov ah, 3Eh ;Close opened handle
   742 00001F9A CD41                <1>     int 41h
   743                              <1>     return
    13                              <2> %%_ret:
    14 00001F9C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   744                              <1> 
   745                              <1> cls:  
   746 00001F9D B800440000          <1>     mov eax, 4400h  ;Get device info
   747 00001FA2 BB01000000          <1>     mov ebx, 1      ;for handle 1
   748 00001FA7 CD41                <1>     int 41h         ;in dx
   749 00001FA9 F7C280000000        <1>     test edx, devCharDev
   750 00001FAF 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   751 00001FB1 F7C210000000        <1>     test edx, charDevFastOut
   752 00001FB7 743E                <1>     jz .doAnsi
   753                              <1>     ;Test if Int 49h uses Int 30h
   754                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   755                              <1>     ;Int 49h MUST be terminated with a IRETQ, within 1024 bytes
   756 00001FB9 B849350000          <1>     mov eax, 3549h  ;Get the vector for interrupt 49h
   757 00001FBE CD41                <1>     int 41h
   758                              <1> .biosCheck:
   759 00001FC0 66813BCD30          <1>     cmp word [rbx], 30CDh
   760 00001FC5 740C                <1>     je .biosConfirmed
   761 00001FC7 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   762 00001FCC 7429                <1>     je .doAnsi
   763 00001FCE 48FFC3              <1>     inc rbx
   764 00001FD1 EBED                <1>     jmp short .biosCheck
   765                              <1> .biosConfirmed:
   766                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   767 00001FD3 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   768 00001FD5 31DB                <1>     xor ebx, ebx
   769 00001FD7 CD30                <1>     int 30h
   770 00001FD9 B40F                <1>     mov ah, 0Fh ;Get screen mode
   771 00001FDB CD30                <1>     int 30h
   772 00001FDD 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   773 00001FE0 FECA                <1>     dec dl
   774 00001FE2 B619                <1>     mov dh, 25  ;Number of rows is standard
   775 00001FE4 31C0                <1>     xor eax, eax
   776 00001FE6 89C1                <1>     mov ecx, eax
   777 00001FE8 B707                <1>     mov bh, 7   ;Screen attributes
   778 00001FEA B406                <1>     mov ah, 6   ;Scroll
   779 00001FEC CD30                <1>     int 30h
   780 00001FEE 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   781 00001FF0 B700                <1>     mov bh, 0   ;Page 0
   782 00001FF2 B402                <1>     mov ah, 2
   783 00001FF4 CD30                <1>     int 30h
   784                              <1>     return
    13                              <2> %%_ret:
    14 00001FF6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   785                              <1> .doAnsi:
   786                              <1> ;If an ANSI driver is not installed, this will simply insert blank lines
   787                              <1> ;4 chars in the ansi routine
   788                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   789                              <1> ; understand ANSI codes
   790 00001FF7 488D3577EDFFFF      <1>     lea rsi, ansiCls
   791 00001FFE B904000000          <1>     mov ecx, 4
   792 00002003 B406                <1>     mov ah, 06h ;Raw char output
   793                              <1> .ansiLp:
   794 00002005 AC                  <1>     lodsb   ;Get the char in 
   795 00002006 88C2                <1>     mov dl, al
   796 00002008 CD41                <1>     int 41h
   797 0000200A FFC9                <1>     dec ecx
   798 0000200C 75F7                <1>     jnz .ansiLp
   799                              <1>     return
    13                              <2> %%_ret:
    14 0000200E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   800                              <1> 
   801                              <1> break:
   802 0000200F F60599E0FFFFFF      <1>     test byte [arg1Flg], -1
   803 00002016 752D                <1>     jnz .argumentProvided
   804                              <1>     ;Here we just get the status of break
   805 00002018 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   806 0000201D CD41                <1>     int 41h
   807 0000201F 88D3                <1>     mov bl, dl
   808 00002021 488D1573EBFFFF      <1>     lea rdx, breakIs
   809 00002028 B409                <1>     mov ah, 09h
   810 0000202A CD41                <1>     int 41h
   811 0000202C 488D1563EBFFFF      <1>     lea rdx, onMes
   812 00002033 488D0D56EBFFFF      <1>     lea rcx, offMes
   813 0000203A 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   814 0000203C 480F44D1            <1>     cmovz rdx, rcx
   815 00002040 B409                <1>     mov ah, 09h
   816 00002042 CD41                <1>     int 41h
   817                              <1>     return
    13                              <2> %%_ret:
    14 00002044 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   818                              <1> .argumentProvided:
   819 00002045 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   820 00002049 AD                  <1>     lodsd   ;Read the word
   821 0000204A 89C3                <1>     mov ebx, eax
   822 0000204C 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   823 00002051 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   824 00002054 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   825 00002059 7416                <1>     je .maybeOn
   826 0000205B 663D4F46            <1>     cmp ax, "OF"
   827 0000205F 7523                <1>     jne .badOnOff
   828 00002061 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   829 00002066 6681FB4620          <1>     cmp bx, "F "
   830 0000206B 7517                <1>     jne .badOnOff
   831                              <1>     ;Set off
   832 0000206D 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   833 0000206F EB0B                <1>     jmp short .setBreak
   834                              <1> .maybeOn:
   835 00002071 663D4F4E            <1>     cmp ax, "ON"
   836 00002075 750D                <1>     jne .badOnOff
   837                              <1>     ;Set on
   838 00002077 BA01000000          <1>     mov edx, 1
   839                              <1> .setBreak:
   840 0000207C B801330000          <1>     mov eax, 3301h  ;Set break
   841 00002081 CD41                <1>     int 41h
   842                              <1>     return
    13                              <2> %%_ret:
    14 00002083 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   843                              <1> .badOnOff:
   844 00002084 488D15FAECFFFF      <1>     lea rdx, badOnOff
   845 0000208B B409                <1>     mov ah, 09h
   846 0000208D CD41                <1>     int 41h
   847                              <1>     return
    13                              <2> %%_ret:
    14 0000208F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   848                              <1> 
   849                              <1> verify:
   850 00002090 F60518E0FFFFFF      <1>     test byte [arg1Flg], -1
   851 00002097 752D                <1>     jnz .argumentProvided
   852                              <1>     ;Here we just get the status of break
   853 00002099 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
   854 0000209E CD41                <1>     int 41h
   855 000020A0 88C3                <1>     mov bl, al
   856 000020A2 488D15FCEAFFFF      <1>     lea rdx, verifyIs
   857 000020A9 B409                <1>     mov ah, 09h
   858 000020AB CD41                <1>     int 41h
   859 000020AD 488D15E2EAFFFF      <1>     lea rdx, onMes
   860 000020B4 488D0DD5EAFFFF      <1>     lea rcx, offMes
   861 000020BB 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   862 000020BD 480F44D1            <1>     cmovz rdx, rcx
   863 000020C1 B409                <1>     mov ah, 09h
   864 000020C3 CD41                <1>     int 41h
   865                              <1>     return
    13                              <2> %%_ret:
    14 000020C5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   866                              <1> .argumentProvided:
   867 000020C6 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   868 000020CA AD                  <1>     lodsd   ;Read the word
   869 000020CB 89C3                <1>     mov ebx, eax
   870 000020CD 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   871 000020D2 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   872 000020D5 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   873 000020DA 7416                <1>     je .maybeOn
   874 000020DC 663D4F46            <1>     cmp ax, "OF"
   875 000020E0 751F                <1>     jne .badOnOff
   876 000020E2 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   877 000020E7 6681FB4620          <1>     cmp bx, "F "
   878 000020EC 7513                <1>     jne .badOnOff
   879                              <1>     ;Set off
   880 000020EE 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
   881 000020F0 EB0A                <1>     jmp short .setVerify
   882                              <1> .maybeOn:
   883 000020F2 663D4F4E            <1>     cmp ax, "ON"
   884 000020F6 7509                <1>     jne .badOnOff
   885                              <1>     ;Set on
   886 000020F8 31C0                <1>     xor eax, eax
   887 000020FA FFC0                <1>     inc eax ;AL=1 => VERIFY is on
   888                              <1> .setVerify:
   889 000020FC B42E                <1>     mov ah, 2Eh  ;Set Verify
   890 000020FE CD41                <1>     int 41h
   891                              <1>     return
    13                              <2> %%_ret:
    14 00002100 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   892                              <1> .badOnOff:
   893 00002101 488D157DECFFFF      <1>     lea rdx, badOnOff
   894 00002108 B409                <1>     mov ah, 09h
   895 0000210A CD41                <1>     int 41h
   896                              <1>     return
    13                              <2> %%_ret:
    14 0000210C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   897                              <1> 
   898                              <1> rename:
   899 0000210D F6059BDFFFFFFF      <1>     test byte [arg1Flg], -1
   900 00002114 0F84B1F5FFFF        <1>     jz badArgError
   901 0000211A F60591DFFFFFFF      <1>     test byte [arg2Flg], -1
   902 00002121 0F84A4F5FFFF        <1>     jz badArgError
   903 00002127 488D3562E0FFFF      <1>     lea rsi, cmdBuffer
   904 0000212E 0FB6057BDFFFFF      <1>     movzx eax, byte [arg1Off]
   905 00002135 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   906                              <1>     ;rsi points to terminating char
   907 00002138 AC                  <1>     lodsb   ;Get first char in AL
   908 00002139 48FFCE              <1>     dec rsi ;Go back to this char
   909 0000213C E8EE080000          <1>     call isALEndOfCommand
   910 00002141 0F8272F5FFFF        <1>     jc badParamError
   911 00002147 488D3D2BE4FFFF      <1>     lea rdi, sourcePath ;Store this in sourcePath
   912                              <1> .copyName1:
   913 0000214E AC                  <1>     lodsb
   914 0000214F E8DB080000          <1>     call isALEndOfCommand
   915 00002154 0F845FF5FFFF        <1>     je badParamError
   916 0000215A E8AD080000          <1>     call isALterminator
   917 0000215F 7403                <1>     jz .endOfName1
   918 00002161 AA                  <1>     stosb
   919 00002162 EBEA                <1>     jmp short .copyName1
   920                              <1> .endOfName1:
   921 00002164 31C0                <1>     xor eax, eax
   922 00002166 AA                  <1>     stosb   ;Store this 0 at rdi
   923 00002167 488D3522E0FFFF      <1>     lea rsi, cmdBuffer
   924 0000216E 0FB6053EDFFFFF      <1>     movzx eax, byte [arg2Off]
   925 00002175 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   926 00002178 807E013A            <1>     cmp byte [rsi + 1], ":" ;If dest path char 2 is :, must be X:, not allowed
   927 0000217C 0F8437F5FFFF        <1>     je badParamError
   928 00002182 AC                  <1>     lodsb   ;Get first char in AL
   929 00002183 48FFCE              <1>     dec rsi ;Go back to this char
   930 00002186 E8A4080000          <1>     call isALEndOfCommand
   931 0000218B 0F8228F5FFFF        <1>     jc badParamError
   932 00002191 488D3D61E4FFFF      <1>     lea rdi, destPath
   933                              <1> .copyName2:
   934 00002198 AC                  <1>     lodsb
   935 00002199 E891080000          <1>     call isALEndOfCommand
   936 0000219E 740A                <1>     je .endOfName2
   937 000021A0 E867080000          <1>     call isALterminator
   938 000021A5 7403                <1>     jz .endOfName2
   939 000021A7 AA                  <1>     stosb
   940 000021A8 EBEE                <1>     jmp short .copyName2
   941                              <1> .endOfName2:
   942 000021AA 31C0                <1>     xor eax, eax
   943 000021AC AA                  <1>     stosb   ;Store this 0 at rdi
   944 000021AD 488D15C5E3FFFF      <1>     lea rdx, sourcePath
   945 000021B4 488D3D3EE4FFFF      <1>     lea rdi, destPath
   946 000021BB B800560000          <1>     mov eax, 5600h
   947 000021C0 CD41                <1>     int 41h
   948                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000021C2 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000021C4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   949 000021C5 3C0F                <1>     cmp al, errBadDrv
   950 000021C7 0F84F5F4FFFF        <1>     je badDriveError
   951 000021CD 3C0B                <1>     cmp al, errBadFmt
   952 000021CF 0F8411F5FFFF        <1>     je badDirError
   953 000021D5 E903F5FFFF          <1>     jmp badDupFnf
   954                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   955                              <1> touch:
   956                              <1> ;Temporarily used to create files
   957 000021DA F605CEDEFFFFFF      <1>     test byte [arg1Flg], -1
   958 000021E1 0F84E4F4FFFF        <1>     jz badArgError
   959 000021E7 E84B090000          <1>     call buildCommandPath
   960 000021EC 488D15DEE1FFFF      <1>     lea rdx, searchSpec
   961 000021F3 B8003C0000          <1>     mov eax, 3C00h  ;Create file 
   962 000021F8 31C9                <1>     xor ecx, ecx
   963 000021FA CD41                <1>     int 41h
   964 000021FC 720B                <1>     jc .touchError
   965 000021FE 0FB7D8              <1>     movzx ebx, ax
   966 00002201 B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
   967 00002206 CD41                <1>     int 41h
   968                              <1>     return
    13                              <2> %%_ret:
    14 00002208 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   969                              <1> .touchError:
   970 00002209 488D1523EBFFFF      <1>     lea rdx, touchErr
   971 00002210 E9D8F4FFFF          <1>     jmp badCmn
   972                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   973                              <1> truename:
   974 00002215 F60593DEFFFFFF      <1>     test byte [arg1Flg], -1
   975 0000221C 0F84A9F4FFFF        <1>     jz badArgError
   976 00002222 E810090000          <1>     call buildCommandPath
   977                              <1>     ;Explicitly call Truename if we remove truename from this function
   978 00002227 488D3DA3E1FFFF      <1>     lea rdi, searchSpec
   979 0000222E E895070000          <1>     call strlen
   980 00002233 FFC9                <1>     dec ecx ;Don't print terminating null
   981 00002235 488D1595E1FFFF      <1>     lea rdx, searchSpec
   982 0000223C BB01000000          <1>     mov ebx, 01
   983 00002241 B440                <1>     mov ah, 40h
   984 00002243 CD41                <1>     int 41h
   985 00002245 E8B9040000          <1>     call printCRLF
   986                              <1>     return
    13                              <2> %%_ret:
    14 0000224A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   987                              <1> 
   988                              <1> volume:
   989 0000224B 488D3540DFFFFF      <1>     lea rsi, cmdBuffer + 2  ;Get the command buffer
   990 00002252 E8DF070000          <1>     call skipSpaces
   991 00002257 4881C603000000      <1>     add rsi, 3  ;Go past the VOL command
   992 0000225E E8D3070000          <1>     call skipSpaces
   993 00002263 AC                  <1>     lodsb   ;Get the first char, and point rsi to next char
   994 00002264 E8C6070000          <1>     call isALEndOfCommand   ;If this char is end of command, use current drive
   995 00002269 7507                <1>     jnz .checkDriveLetter
   996 0000226B E853070000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
   997 00002270 EB35                <1>     jmp short .dirEP
   998                              <1> .checkDriveLetter:
   999 00002272 803E3A              <1>     cmp byte [rsi], ":" ;If this is not a :, fail
  1000 00002275 0F8547F4FFFF        <1>     jne badDriveError
  1001 0000227B 4889F7              <1>     mov rdi, rsi    ;Save start of drive spec in rsi
  1002 0000227E 48FFC6              <1>     inc rsi  ;Go past the X: spec
  1003 00002281 E8B0070000          <1>     call skipSpaces
  1004 00002286 AC                  <1>     lodsb   ;Get the non-space char in al
  1005 00002287 E8A3070000          <1>     call isALEndOfCommand   ;The next non-space char must be terminator
  1006 0000228C 0F8530F4FFFF        <1>     jne badDriveError
  1007                              <1> ;This argument should've been parsed into FCB1 so use that result
  1008 00002292 8A0519DEFFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1009 00002298 A8FF                <1>     test al, -1
  1010 0000229A 0F8522F4FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1011 000022A0 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1012 000022A5 FFC8                <1>     dec eax ;Convert to 0 based number
  1013                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al
  1014 000022A7 0541000000          <1>     add eax, "A" ;Get ASCII representation of 0 based number
  1015 000022AC 8805BCE2FFFF        <1>     mov byte [volPathBuf], al   ;Store ASCII letter here
  1016 000022B2 488D150CDEFFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
  1017 000022B9 B41A                <1>     mov ah, 1Ah
  1018 000022BB CD41                <1>     int 41h
  1019 000022BD 488D15AAE2FFFF      <1>     lea rdx, volPathBuf
  1020 000022C4 66B90800            <1>     mov cx, dirVolumeID
  1021 000022C8 B44E                <1>     mov ah, 4Eh ;Find first
  1022 000022CA CD41                <1>     int 41h
  1023 000022CC 7221                <1>     jc .skipVolLbl
  1024 000022CE 488D350EDEFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
  1025 000022D5 488D3D85E2FFFF      <1>     lea rdi, volLblSpc
  1026 000022DC B90B000000          <1>     mov ecx, 11 ;Get the 11 chars of the volume label
  1027                              <1> .dirLblCopy:
  1028 000022E1 AC                  <1>     lodsb   ;Get the first char
  1029 000022E2 3C00                <1>     cmp al, 0
  1030 000022E4 7409                <1>     je .skipVolLbl  ;Jump with CF=NC
  1031 000022E6 3C2E                <1>     cmp al, "."
  1032 000022E8 7401                <1>     je .dirLblSkipStore
  1033 000022EA AA                  <1>     stosb
  1034                              <1> .dirLblSkipStore:
  1035 000022EB FFC9                <1>     dec ecx
  1036 000022ED 75F2                <1>     jnz .dirLblCopy
  1037                              <1>     ;Fallthru with CF=NC
  1038                              <1> .skipVolLbl:
  1039                              <1> ;Print volume label information now
  1040                              <1> ;Propagates the CF if CF was set    
  1041 000022EF 9C                  <1>     pushfq
  1042 000022F0 488D15B8E4FFFF      <1>     lea rdx, crlf
  1043 000022F7 B409                <1>     mov ah, 09h
  1044 000022F9 CD41                <1>     int 41h
  1045 000022FB 488D1532E7FFFF      <1>     lea rdx, volMes
  1046 00002302 B409                <1>     mov ah, 09h
  1047 00002304 CD41                <1>     int 41h
  1048 00002306 8A1562E2FFFF        <1>     mov dl, byte [volPathBuf]   ;Print the drive letter out
  1049 0000230C B402                <1>     mov ah, 02h
  1050 0000230E CD41                <1>     int 41h
  1051 00002310 9D                  <1>     popfq
  1052 00002311 7317                <1>     jnc .volIDOk
  1053 00002313 488D1531E7FFFF      <1>     lea rdx, volNo
  1054 0000231A B409                <1>     mov ah, 09h
  1055 0000231C CD41                <1>     int 41h
  1056 0000231E 488D158AE4FFFF      <1>     lea rdx, crlf
  1057 00002325 B409                <1>     mov ah, 09h
  1058 00002327 CD41                <1>     int 41h
  1059                              <1>     return
    13                              <2> %%_ret:
    14 00002329 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1060                              <1> .volIDOk:
  1061 0000232A 488D1515E7FFFF      <1>     lea rdx, volOk
  1062 00002331 B409                <1>     mov ah, 09h
  1063 00002333 CD41                <1>     int 41h
  1064 00002335 488D3D25E2FFFF      <1>     lea rdi, volLblSpc
  1065 0000233C E887060000          <1>     call strlen
  1066 00002341 FFC9                <1>     dec ecx
  1067 00002343 C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
  1068 00002347 488D1513E2FFFF      <1>     lea rdx, volLblSpc
  1069 0000234E B409                <1>     mov ah, 09h
  1070 00002350 CD41                <1>     int 41h
  1071 00002352 488D1556E4FFFF      <1>     lea rdx, crlf
  1072 00002359 B409                <1>     mov ah, 09h
  1073 0000235B CD41                <1>     int 41h
  1074                              <1>     return
    13                              <2> %%_ret:
    14 0000235D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1075                              <1> 
  1076                              <1> version:
  1077 0000235E 488D154AE4FFFF      <1>     lea rdx, crlf
  1078 00002365 B409                <1>     mov ah, 09h
  1079 00002367 CD41                <1>     int 41h
  1080 00002369 488D15B2E6FFFF      <1>     lea rdx, dosVer
  1081 00002370 B409                <1>     mov ah, 09h
  1082 00002372 CD41                <1>     int 41h
  1083 00002374 E80C000000          <1>     call .printVersionNumber
  1084 00002379 488D152FE4FFFF      <1>     lea rdx, crlf
  1085 00002380 B409                <1>     mov ah, 09h
  1086 00002382 CD41                <1>     int 41h
  1087                              <1>     return
    13                              <2> %%_ret:
    14 00002384 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1088                              <1> .printVersionNumber:
  1089 00002385 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1090 00002387 CD41                <1>     int 41h
  1091 00002389 50                  <1>     push rax
  1092 0000238A 0FB6C0              <1>     movzx eax, al
  1093 0000238D E843080000          <1>     call printDecimalWord
  1094 00002392 B22E                <1>     mov dl, "."
  1095 00002394 B402                <1>     mov ah, 02h
  1096 00002396 CD41                <1>     int 41h
  1097 00002398 58                  <1>     pop rax
  1098 00002399 0FB6C4              <1>     movzx eax, ah
  1099 0000239C E834080000          <1>     call printDecimalWord
  1100                              <1>     return
    13                              <2> %%_ret:
    14 000023A1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1101                              <1> 
  1102                              <1> 
  1103                              <1> memory:
  1104 000023A2 488B1D76DCFFFF      <1>     mov rbx, qword [sysVars]
  1105 000023A9 4885DB              <1>     test rbx, rbx
  1106 000023AC 7510                <1>     jnz .sysvarsOK
  1107 000023AE 488D151FE9FFFF      <1>     lea rdx, memBad0
  1108 000023B5 B409                <1>     mov ah, 09h
  1109 000023B7 CD41                <1>     int 41h
  1110 000023B9 E9BA080000          <1>     jmp freezePC.altEP
  1111                              <1> .sysvarsOK:
  1112                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1113                              <1>     ; and rcx to store Application memory
  1114 000023BE 31F6                <1>     xor esi, esi
  1115 000023C0 31FF                <1>     xor edi, edi
  1116 000023C2 31ED                <1>     xor ebp, ebp
  1117 000023C4 31C9                <1>     xor ecx, ecx
  1118 000023C6 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1119 000023CA 488B1B              <1>     mov rbx, qword [rbx]
  1120                              <1> .memLp:
  1121 000023CD 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1122 000023D0 7409                <1>     je .validMCB
  1123 000023D2 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1124 000023D5 0F8501010000        <1>     jne .badMCBFound
  1125                              <1> .validMCB:
  1126 000023DB 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1127 000023DE 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1128 000023E2 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1129 000023EA 7505                <1>     jne .notDOS
  1130 000023EC 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1131 000023EF EB21                <1>     jmp short .gotoNext
  1132                              <1> .notDOS:
  1133 000023F1 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1134 000023F9 7505                <1>     jne .notFree
  1135 000023FB 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1136 000023FE EB12                <1>     jmp short .gotoNext
  1137                              <1> .notFree:
  1138 00002400 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1139 00002408 7505                <1>     jne .notHole
  1140 0000240A 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1141 0000240D EB03                <1>     jmp short .gotoNext
  1142                              <1> .notHole:
  1143 0000240F 4801C1              <1>     add rcx, rax    ;Add to Application count
  1144                              <1> .gotoNext:
  1145 00002412 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1146 00002415 7407                <1>     je .endOfWalk
  1147 00002417 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  1148 0000241C EBAF                <1>     jmp short .memLp
  1149                              <1> .endOfWalk:
  1150                              <1>     
  1151 0000241E 488D1510E8FFFF      <1>     lea rdx, memDOS
  1152 00002425 B409                <1>     mov ah, 09h
  1153 00002427 CD41                <1>     int 41h
  1154 00002429 4889F0              <1>     mov rax, rsi
  1155 0000242C E89D000000          <1>     call .mcbPrintAmount
  1156 00002431 488D1595E8FFFF      <1>     lea rdx, memByte
  1157 00002438 B409                <1>     mov ah, 09h
  1158 0000243A CD41                <1>     int 41h
  1159                              <1> 
  1160 0000243C 4885ED              <1>     test rbp, rbp
  1161 0000243F 741E                <1>     jz .skipHole
  1162 00002441 488D1539E8FFFF      <1>     lea rdx, memHole
  1163 00002448 B409                <1>     mov ah, 09h
  1164 0000244A CD41                <1>     int 41h
  1165 0000244C 4889E8              <1>     mov rax, rbp
  1166 0000244F E87A000000          <1>     call .mcbPrintAmount
  1167 00002454 488D1572E8FFFF      <1>     lea rdx, memByte
  1168 0000245B B409                <1>     mov ah, 09h
  1169 0000245D CD41                <1>     int 41h
  1170                              <1> .skipHole:
  1171                              <1> 
  1172 0000245F 488D15F5E7FFFF      <1>     lea rdx, memApp
  1173 00002466 B409                <1>     mov ah, 09h
  1174 00002468 CD41                <1>     int 41h
  1175 0000246A 4889C8              <1>     mov rax, rcx
  1176 0000246D E85C000000          <1>     call .mcbPrintAmount
  1177 00002472 488D1554E8FFFF      <1>     lea rdx, memByte
  1178 00002479 B409                <1>     mov ah, 09h
  1179 0000247B CD41                <1>     int 41h
  1180                              <1> 
  1181 0000247D 488D1523E8FFFF      <1>     lea rdx, memFree
  1182 00002484 B409                <1>     mov ah, 09h
  1183 00002486 CD41                <1>     int 41h
  1184 00002488 4889F8              <1>     mov rax, rdi
  1185 0000248B E83E000000          <1>     call .mcbPrintAmount
  1186 00002490 488D1536E8FFFF      <1>     lea rdx, memByte
  1187 00002497 B409                <1>     mov ah, 09h
  1188 00002499 CD41                <1>     int 41h
  1189                              <1> 
  1190 0000249B 488D156DE7FFFF      <1>     lea rdx, memSys
  1191 000024A2 B409                <1>     mov ah, 09h
  1192 000024A4 CD41                <1>     int 41h
  1193 000024A6 4889F0              <1>     mov rax, rsi
  1194 000024A9 4801F8              <1>     add rax, rdi
  1195 000024AC 4801C8              <1>     add rax, rcx
  1196 000024AF 4801E8              <1>     add rax, rbp
  1197 000024B2 E817000000          <1>     call .mcbPrintAmount
  1198 000024B7 488D150FE8FFFF      <1>     lea rdx, memByte
  1199 000024BE B409                <1>     mov ah, 09h
  1200 000024C0 CD41                <1>     int 41h
  1201                              <1> 
  1202 000024C2 488D15E6E2FFFF      <1>     lea rdx, crlf
  1203 000024C9 B409                <1>     mov ah, 09h
  1204 000024CB CD41                <1>     int 41h
  1205                              <1>     return
    13                              <2> %%_ret:
    14 000024CD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1206                              <1> 
  1207                              <1> .mcbPrintAmount:
  1208 000024CE 51                  <1>     push rcx
  1209 000024CF 56                  <1>     push rsi
  1210 000024D0 57                  <1>     push rdi
  1211 000024D1 55                  <1>     push rbp
  1212 000024D2 E8FE060000          <1>     call printDecimalWord
  1213 000024D7 5D                  <1>     pop rbp
  1214 000024D8 5F                  <1>     pop rdi
  1215 000024D9 5E                  <1>     pop rsi
  1216 000024DA 59                  <1>     pop rcx
  1217                              <1>     return
    13                              <2> %%_ret:
    14 000024DB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1218                              <1> .badMCBFound:
  1219 000024DC 488D1531E8FFFF      <1>     lea rdx, memBad2
  1220 000024E3 B409                <1>     mov ah, 09h
  1221 000024E5 CD41                <1>     int 41h
  1222 000024E7 E98C070000          <1>     jmp freezePC.altEP
  1223                              <1> 
  1224                              <1> type:
  1225 000024EC F605BCDBFFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1226 000024F3 0F84D2F1FFFF        <1>     jz badArgError
  1227 000024F9 F605B2DBFFFFFF      <1>     test byte [arg2Flg], -1
  1228 00002500 0F85C5F1FFFF        <1>     jnz badArgError         ;If this set, error
  1229 00002506 488D3583DCFFFF      <1>     lea rsi, cmdBuffer
  1230 0000250D 0FB6059CDBFFFF      <1>     movzx eax, byte [arg1Off]
  1231 00002514 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1232 00002517 803E0D              <1>     cmp byte [rsi], CR
  1233 0000251A 0F84ABF1FFFF        <1>     je badArgError
  1234 00002520 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1235 00002524 750F                <1>     jne .noDrive
  1236 00002526 0FB60584DBFFFF      <1>     movzx eax, byte [arg1FCBret]
  1237 0000252D 3CFF                <1>     cmp al, -1
  1238 0000252F 0F848DF1FFFF        <1>     je badDriveError
  1239                              <1> .noDrive:
  1240                              <1>     ;Now we open the provided file
  1241 00002535 E880070000          <1>     call copyArgumentToSearchSpec
  1242 0000253A 488D1590DEFFFF      <1>     lea rdx, searchSpec
  1243 00002541 B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1244 00002546 CD41                <1>     int 41h
  1245 00002548 0F8286F1FFFF        <1>     jc badFileError
  1246 0000254E 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1247 00002555 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1248                              <1> .lp:
  1249 00002558 B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1250 0000255D B43F                <1>     mov ah, 3Fh ;Read handle
  1251 0000255F CD41                <1>     int 41h
  1252 00002561 89C1                <1>     mov ecx, eax
  1253 00002563 67E317              <1>     jecxz .exit
  1254 00002566 53                  <1>     push rbx    ;Save the original in handle
  1255 00002567 BB01000000          <1>     mov ebx, 1  ;STDOUT
  1256 0000256C B440                <1>     mov ah, 40h
  1257 0000256E CD41                <1>     int 41h
  1258 00002570 5B                  <1>     pop rbx ;Get back the original read handle
  1259 00002571 720F                <1>     jc .exitBad
  1260 00002573 39C8                <1>     cmp eax, ecx
  1261 00002575 74E1                <1>     je .lp
  1262 00002577 FFC9                <1>     dec ecx ;One less for a ^Z
  1263 00002579 39C8                <1>     cmp eax, ecx
  1264 0000257B 7505                <1>     jne .exitBad
  1265                              <1> .exit:
  1266 0000257D B43E                <1>     mov ah, 3Eh ;Close handle
  1267 0000257F CD41                <1>     int 41h
  1268                              <1>     return
    13                              <2> %%_ret:
    14 00002581 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1269                              <1> .exitBad:
  1270                              <1>     ;Print a disk error message... use a table to build the message but for
  1271                              <1>     ; now, just exit
  1272                              <1>     ;If it is a char device, don't print a error
  1273 00002582 EBF9                <1>     jmp short .exit
  1274                              <1> 
  1275                              <1> exit:
  1276 00002584 F605A2DAFFFFFF      <1>     test byte [permaSwitch], -1
  1277                              <1>     retnz   ;Return if the flag is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000258B 75(81)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1278 0000258D 488B0583DAFFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1279 00002594 483DFFFFFFFF        <1>     cmp rax, -1
  1280                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000259A 74(81)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1281 0000259C 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1282                              <1> 
  1283 000025A0 488B1587DAFFFF      <1>     mov rdx, qword [parentInt42]
  1284 000025A7 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
  1285 000025AB B842250000          <1>     mov eax, 2542h
  1286 000025B0 CD41                <1>     int 41h
  1287                              <1> 
  1288 000025B2 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1289 000025B7 CD41                <1>     int 41h
  1290                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 000025B9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1291                              <1> 
  1292                              <1> launchChild:
  1293                              <1> ;We run EXEC on this and the child task will return via applicationReturn
  1294                              <1> ;Here we must search the CWD or all path componants before failing
  1295                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
  1296 000025BA 488D1504DBFFFF      <1>     lea rdx, cmdFFBlock
  1297 000025C1 B41A                <1>     mov ah, 1Ah     ;Set DTA for task
  1298 000025C3 CD41                <1>     int 41h
  1299                              <1> 
  1300 000025C5 8B05F3DAFFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
  1301 000025CB 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1302 000025D0 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1303 000025D5 3D20202020          <1>     cmp eax, "    " ;Only if we have four spaces do we proceed here
  1304 000025DA 741D                <1>     je .noExt
  1305 000025DC E8C0EBFFFF          <1>     call checkExtensionExec ;ZF=ZE => Executable
  1306 000025E1 0F8510010000        <1>     jnz .dfltErrExit
  1307                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1308 000025E7 0F820A010000        <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
  1309                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1310                              <1>     ;So it is a com or exe that we are searching for for now
  1311 000025ED 488D3D1CDCFFFF      <1>     lea rdi, cmdPathSpec
  1312 000025F4 4889FA              <1>     mov rdx, rdi
  1313 000025F7 EB24                <1>     jmp short .search
  1314                              <1> .noExt:
  1315                              <1>     ;If the filename has no extension, append a .*
  1316                              <1>     ;Use bl as flags. bl[0] => COM found, bl[1] => EXE found, bl[2] => BAT found
  1317 000025F9 31DB                <1>     xor ebx, ebx
  1318 000025FB 488D3D0EDCFFFF      <1>     lea rdi, cmdPathSpec
  1319 00002602 4889FA              <1>     mov rdx, rdi
  1320 00002605 31C0                <1>     xor eax, eax
  1321 00002607 B9FFFFFFFF          <1>     mov ecx, -1
  1322 0000260C F2AE                <1>     repne scasb
  1323 0000260E 48FFCF              <1>     dec rdi ;Point to the terminating null
  1324 00002611 4889FD              <1>     mov rbp, rdi    ;Temporarily store the ptr to the . in rbp
  1325 00002614 66B82E2A            <1>     mov ax, ".*"
  1326 00002618 66AB                <1>     stosw
  1327 0000261A 30C0                <1>     xor al, al  ;Store terminating null
  1328 0000261C AA                  <1>     stosb
  1329                              <1> .search:
  1330 0000261D B906000000          <1>     mov ecx, dirIncFiles
  1331 00002622 B44E                <1>     mov ah, 4Eh ;Find First File
  1332 00002624 CD41                <1>     int 41h
  1333 00002626 0F82CB000000        <1>     jc .dfltErrExit
  1334 0000262C E879000000          <1>     call .noExtCheckExt
  1335                              <1> .moreSearch:
  1336 00002631 B44F                <1>     mov ah, 4Fh
  1337 00002633 CD41                <1>     int 41h
  1338 00002635 7207                <1>     jc .noMoreFiles
  1339 00002637 E86E000000          <1>     call .noExtCheckExt
  1340 0000263C EBF3                <1>     jmp short .moreSearch
  1341                              <1> .noMoreFiles:
  1342 0000263E 85DB                <1>     test ebx, ebx
  1343 00002640 0F84B1000000        <1>     jz .dfltErrExit
  1344                              <1> ;So we have a valid executable
  1345 00002646 4889EF              <1>     mov rdi, rbp    ;Get back ptr to the .*,0
  1346 00002649 F7C301000000        <1>     test ebx, 1
  1347 0000264F 7407                <1>     jz .launchexebat
  1348 00002651 B82E434F4D          <1>     mov eax, ".COM"
  1349 00002656 EB14                <1>     jmp short .launch
  1350                              <1> .launchexebat:
  1351 00002658 F7C302000000        <1>     test ebx, 2
  1352 0000265E 7407                <1>     jz .launchbat
  1353 00002660 B82E455845          <1>     mov eax, ".EXE"
  1354 00002665 EB05                <1>     jmp short .launch
  1355                              <1> .launchbat:
  1356                              <1> ;Temporary For BAT
  1357 00002667 E98B000000          <1>     jmp .dfltErrExit
  1358                              <1> .launch:
  1359 0000266C AB                  <1>     stosd
  1360 0000266D 30C0                <1>     xor al, al
  1361 0000266F AA                  <1>     stosb   ;Store the terminating null
  1362 00002670 488D1D79DAFFFF      <1>     lea rbx, launchBlock
  1363 00002677 31C0                <1>     xor eax, eax
  1364 00002679 488903              <1>     mov qword [rbx + execProg.pEnv], rax    ;Tell DOS to copy my current Env
  1365 0000267C 498D8080000000      <1>     lea rax, qword [r8 + cmdLineCnt]
  1366 00002683 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1367 00002687 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1368 0000268B 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1369 0000268F 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1370 00002693 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1371 00002697 488D1572DBFFFF      <1>     lea rdx, cmdPathSpec
  1372 0000269E B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1373 000026A3 CD41                <1>     int 41h
  1374 000026A5 E94D000000          <1>     jmp .dfltErrExit    ;If something goes wrong, error out
  1375                              <1> .noExtCheckExt:
  1376                              <1>     ;mov eax, dword [cmdFFBlock + ffBlock.asciizName + filename.fExt]
  1377 000026AA 488D3532DAFFFF      <1>     lea rsi, dword [cmdFFBlock + ffBlock.asciizName]
  1378 000026B1 488D3DA7DBFFFF      <1>     lea rdi, fcbCmdSpec
  1379 000026B8 E8F0030000          <1>     call asciiFilenameToFCB
  1380 000026BD 8B05A4DBFFFF        <1>     mov eax, dword [fcbCmdSpec + filename.fExt]
  1381 000026C3 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1382 000026C8 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1383 000026CD 3D434F4D20          <1>     cmp eax, "COM "
  1384 000026D2 7507                <1>     jne .neceexe
  1385 000026D4 81CB01000000        <1>     or ebx, 1
  1386                              <1>     return
    13                              <2> %%_ret:
    14 000026DA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1387                              <1> .neceexe:
  1388 000026DB 3D45584520          <1>     cmp eax, "EXE "
  1389 000026E0 7507                <1>     jne .necebat
  1390 000026E2 81CB02000000        <1>     or ebx, 2
  1391                              <1>     return
    13                              <2> %%_ret:
    14 000026E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1392                              <1> .necebat:
  1393 000026E9 3D42415420          <1>     cmp eax, "BAT "
  1394                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000026EE 75(E8)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1395 000026F0 81CB04000000        <1>     or ebx, 4
  1396                              <1>     return
    13                              <2> %%_ret:
    14 000026F6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1397                              <1> 
  1398                              <1> .dfltErrExit:
  1399 000026F7 488D150EE1FFFF      <1>     lea rdx, badCmd
  1400 000026FE B409                <1>     mov ah, 09h
  1401 00002700 CD41                <1>     int 41h
  1402                              <1>     return
    13                              <2> %%_ret:
    14 00002702 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    17                                  %include "./Utils/COMMAND/Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printCRLF:
     4 00002703 488D15A5E0FFFF      <1>     lea rdx, crlf
     5 0000270A BB02000000          <1>     mov ebx, 2
     6 0000270F B440                <1>     mov ah, 40h ;Print a new line
     7 00002711 B902000000          <1>     mov ecx, 2  ;Two chars to write
     8 00002716 CD41                <1>     int 41h
     9                              <1>     return
    13                              <2> %%_ret:
    14 00002718 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    10                              <1> printDate:
    11                              <1> ;Input: eax = Packed Date
    12                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
    13                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
    14                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
    15                              <1> ;       ebx = 0 => Print two digit year
    16                              <1> ;       ebx = 1 => Print four digit year
    17 00002719 53                  <1>     push rbx
    18 0000271A 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    19 0000271C 803D13D9FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    20 00002723 7240                <1>     jb .usDate
    21 00002725 777C                <1>     ja .jpnDate
    22                              <1> ;European: DD/MM/YY
    23 00002727 251F000000          <1>     and eax, 1Fh    ;Save day bits
    24 0000272C E8B0000000          <1>     call .printFirst
    25 00002731 8A150AD9FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    26 00002737 B402                <1>     mov ah, 02h
    27 00002739 CD41                <1>     int 41h
    28                              <1> 
    29 0000273B 89C8                <1>     mov eax, ecx
    30 0000273D 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    31 00002742 C1E805              <1>     shr eax, 5
    32 00002745 E8B3000000          <1>     call .printSecond
    33                              <1> 
    34 0000274A 8A15F1D8FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    35 00002750 B402                <1>     mov ah, 02h
    36 00002752 CD41                <1>     int 41h
    37                              <1> 
    38 00002754 89C8                <1>     mov eax, ecx
    39 00002756 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    40 0000275B C1E809              <1>     shr eax, 9
    41 0000275E 5B                  <1>     pop rbx ;Get the year signature back
    42 0000275F E8A9000000          <1>     call .printYear
    43                              <1>     return
    13                              <2> %%_ret:
    14 00002764 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    44                              <1> .usDate:
    45                              <1> ;US: MM/DD/YY
    46 00002765 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    47 0000276A C1E805              <1>     shr eax, 5
    48 0000276D E86F000000          <1>     call .printFirst
    49                              <1> 
    50 00002772 8A15C9D8FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    51 00002778 B402                <1>     mov ah, 02h
    52 0000277A CD41                <1>     int 41h
    53                              <1> 
    54 0000277C 89C8                <1>     mov eax, ecx
    55 0000277E 251F000000          <1>     and eax, 1Fh    ;Save day bits
    56 00002783 E875000000          <1>     call .printSecond
    57                              <1> 
    58 00002788 8A15B3D8FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    59 0000278E B402                <1>     mov ah, 02h
    60 00002790 CD41                <1>     int 41h
    61                              <1> 
    62 00002792 89C8                <1>     mov eax, ecx
    63 00002794 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 00002799 C1E809              <1>     shr eax, 9
    65 0000279C 5B                  <1>     pop rbx ;Get the year signature back
    66 0000279D E86B000000          <1>     call .printYear
    67                              <1>     return
    13                              <2> %%_ret:
    14 000027A2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    68                              <1> .jpnDate:
    69                              <1> ;Japan: YY/MM/DD
    70 000027A3 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    71 000027A8 C1E809              <1>     shr eax, 9
    72 000027AB 5B                  <1>     pop rbx ;Get the year signature back
    73 000027AC E85C000000          <1>     call .printYear
    74                              <1> 
    75 000027B1 8A158AD8FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    76 000027B7 B402                <1>     mov ah, 02h
    77 000027B9 CD41                <1>     int 41h
    78                              <1> 
    79 000027BB 89C8                <1>     mov eax, ecx
    80 000027BD 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    81 000027C2 C1E805              <1>     shr eax, 5
    82 000027C5 E833000000          <1>     call .printSecond
    83                              <1> 
    84 000027CA 8A1571D8FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    85 000027D0 B402                <1>     mov ah, 02h
    86 000027D2 CD41                <1>     int 41h
    87                              <1> 
    88 000027D4 89C8                <1>     mov eax, ecx
    89 000027D6 251F000000          <1>     and eax, 1Fh    ;Save day bits
    90 000027DB E81D000000          <1>     call .printSecond
    91                              <1>     return
    13                              <2> %%_ret:
    14 000027E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    92                              <1> 
    93                              <1> ;Each of these require eax setup correctly
    94                              <1> .printFirst:
    95 000027E1 51                  <1>     push rcx
    96 000027E2 E85F040000          <1>     call getDecimalWord
    97 000027E7 84ED                <1>     test ch, ch ;Do we have an upper digit?
    98 000027E9 7504                <1>     jnz .skipSpace
    99 000027EB 88CD                <1>     mov ch, cl
   100 000027ED B120                <1>     mov cl, " "
   101                              <1> .skipSpace:
   102 000027EF 88CA                <1>     mov dl, cl
   103 000027F1 B402                <1>     mov ah, 02h
   104 000027F3 CD41                <1>     int 41h
   105 000027F5 88EA                <1>     mov dl, ch
   106 000027F7 B402                <1>     mov ah, 02h
   107 000027F9 CD41                <1>     int 41h
   108 000027FB 59                  <1>     pop rcx
   109                              <1>     return
    13                              <2> %%_ret:
    14 000027FC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   110                              <1> .printSecond:
   111 000027FD 51                  <1>     push rcx
   112 000027FE E843040000          <1>     call getDecimalWord
   113 00002803 84ED                <1>     test ch, ch ;Do we have an upper digit?
   114 00002805 75E8                <1>     jnz .skipSpace
   115 00002807 88CD                <1>     mov ch, cl
   116 00002809 B130                <1>     mov cl, "0"
   117 0000280B EBE2                <1>     jmp short .skipSpace
   118                              <1> .printYear:
   119 0000280D 05BC070000          <1>     add eax, 1980
   120 00002812 51                  <1>     push rcx
   121 00002813 53                  <1>     push rbx
   122 00002814 E82D040000          <1>     call getDecimalWord ;Get unpacked in rcx
   123 00002819 5B                  <1>     pop rbx
   124 0000281A 84DB                <1>     test bl, bl
   125 0000281C 740C                <1>     jz .twoDigitYear
   126 0000281E 88CA                <1>     mov dl, cl  ;Print the first digit
   127 00002820 B402                <1>     mov ah, 02h
   128 00002822 CD41                <1>     int 41h
   129 00002824 88EA                <1>     mov dl, ch  ;Print the second digit
   130 00002826 B402                <1>     mov ah, 02h
   131 00002828 CD41                <1>     int 41h
   132                              <1> .twoDigitYear:
   133 0000282A C1E910              <1>     shr ecx, 10h    ;Get high word low
   134 0000282D 88CA                <1>     mov dl, cl  ;Print the upper digit
   135 0000282F B402                <1>     mov ah, 02h
   136 00002831 CD41                <1>     int 41h
   137 00002833 88EA                <1>     mov dl, ch  ;Print the lower digit
   138 00002835 B402                <1>     mov ah, 02h
   139 00002837 CD41                <1>     int 41h
   140 00002839 59                  <1>     pop rcx
   141                              <1>     return
    13                              <2> %%_ret:
    14 0000283A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   142                              <1> 
   143                              <1> 
   144                              <1> printTime:
   145                              <1> ;Input: eax = Packed Time
   146                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   147                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   148 0000283B 89C1                <1>     mov ecx, eax
   149 0000283D 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   150 00002842 C1E80B              <1>     shr eax, 11
   151 00002845 803DFBD7FFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   152 0000284C 750B                <1>     jne .ampm
   153 0000284E E85A000000          <1>     call .printHours
   154 00002853 E831000000          <1>     call .printMinutes
   155                              <1>     return
    13                              <2> %%_ret:
    14 00002858 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   156                              <1> .ampm:
   157 00002859 3D0C000000          <1>     cmp eax, 12
   158 0000285E 7713                <1>     ja .pm
   159 00002860 7416                <1>     je .pm2
   160 00002862 E846000000          <1>     call .printHours
   161 00002867 E81D000000          <1>     call .printMinutes
   162 0000286C B261                <1>     mov dl, "a"
   163 0000286E B402                <1>     mov ah, 02h
   164 00002870 CD41                <1>     int 41h
   165                              <1>     return
    13                              <2> %%_ret:
    14 00002872 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   166                              <1> .pm:
   167 00002873 2D0C000000          <1>     sub eax, 12
   168                              <1> .pm2:
   169 00002878 E830000000          <1>     call .printHours
   170 0000287D E807000000          <1>     call .printMinutes
   171 00002882 B270                <1>     mov dl, "p"
   172 00002884 B402                <1>     mov ah, 02h
   173 00002886 CD41                <1>     int 41h
   174                              <1>     return
    13                              <2> %%_ret:
    14 00002888 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   175                              <1> .printMinutes:
   176 00002889 8A15B4D7FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   177 0000288F B402                <1>     mov ah, 02h
   178 00002891 CD41                <1>     int 41h
   179                              <1> 
   180 00002893 89C8                <1>     mov eax, ecx
   181 00002895 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   182 0000289A C1E805              <1>     shr eax, 5
   183                              <1> .printMinutesAlt:
   184 0000289D 51                  <1>     push rcx
   185 0000289E E8A3030000          <1>     call getDecimalWord
   186 000028A3 84ED                <1>     test ch, ch ;Do we have an upper digit?
   187 000028A5 7514                <1>     jnz .skipSpace
   188 000028A7 88CD                <1>     mov ch, cl
   189 000028A9 B130                <1>     mov cl, "0"
   190 000028AB EB0E                <1>     jmp short .skipSpace
   191                              <1> .printHours:
   192 000028AD 51                  <1>     push rcx
   193 000028AE E893030000          <1>     call getDecimalWord
   194 000028B3 84ED                <1>     test ch, ch ;Do we have an upper digit?
   195 000028B5 7504                <1>     jnz .skipSpace
   196 000028B7 88CD                <1>     mov ch, cl
   197 000028B9 B120                <1>     mov cl, " "
   198                              <1> .skipSpace:
   199 000028BB 88CA                <1>     mov dl, cl
   200 000028BD B402                <1>     mov ah, 02h
   201 000028BF CD41                <1>     int 41h
   202 000028C1 88EA                <1>     mov dl, ch
   203 000028C3 B402                <1>     mov ah, 02h
   204 000028C5 CD41                <1>     int 41h
   205 000028C7 59                  <1>     pop rcx
   206                              <1>     return
    13                              <2> %%_ret:
    14 000028C8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   207                              <1> 
   208                              <1> 
   209                              <1> putVersionInPrompt:
   210 000028C9 488D1552E1FFFF      <1>     lea rdx, dosVer
   211 000028D0 B409                <1>     mov ah, 09h ;Print String
   212 000028D2 CD41                <1>     int 41h
   213 000028D4 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   214 000028D6 CD41                <1>     int 41h
   215 000028D8 50                  <1>     push rax    ;Save minor version
   216 000028D9 E89C000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   217 000028DE E8B4000000          <1>     call printPackedBCD ;Print al
   218 000028E3 B22E                <1>     mov dl, "."
   219 000028E5 B402                <1>     mov ah, 02h
   220 000028E7 CD41                <1>     int 41h
   221 000028E9 58                  <1>     pop rax
   222 000028EA 88E0                <1>     mov al, ah  ;Get the minor version low
   223 000028EC E889000000          <1>     call hexToBCD
   224 000028F1 E8A1000000          <1>     call printPackedBCD
   225                              <1>     return
    13                              <2> %%_ret:
    14 000028F6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   226                              <1> putEscInPrompt:
   227 000028F7 B21B                <1>     mov dl, ESC
   228 000028F9 EB1C                <1>     jmp short outChar
   229                              <1> 
   230                              <1> putMoneyInPrompt:
   231 000028FB B224                <1>     mov dl, "$"
   232 000028FD EB18                <1>     jmp short outChar
   233                              <1> 
   234                              <1> putEquInPrompt:
   235 000028FF B23D                <1>     mov dl, "="
   236 00002901 EB14                <1>     jmp short outChar
   237                              <1> 
   238                              <1> putPipeInPrompt:
   239 00002903 B27C                <1>     mov dl, "|"
   240 00002905 EB10                <1>     jmp short outChar
   241                              <1> 
   242                              <1> putGTinPrompt:
   243 00002907 B23E                <1>     mov dl, ">"
   244 00002909 EB0C                <1>     jmp short outChar
   245                              <1> 
   246                              <1> putLTinPrompt:
   247 0000290B B23C                <1>     mov dl, "<"
   248 0000290D EB08                <1>     jmp short outChar
   249                              <1> 
   250                              <1> putDriveInPrompt:
   251 0000290F B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   252 00002911 CD41                <1>     int 41h
   253 00002913 0441                <1>     add al, "A" ;Convert to letter
   254 00002915 88C2                <1>     mov dl, al
   255                              <1> outChar:
   256 00002917 B402                <1>     mov ah, 02h ;Echo to STDOUT
   257 00002919 CD41                <1>     int 41h
   258                              <1>     return
    13                              <2> %%_ret:
    14 0000291B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   259                              <1> putCWDInPrompt:
   260 0000291C 488D3D39D7FFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   261 00002923 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   262 00002925 CD41                <1>     int 41h
   263 00002927 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   264 00002929 FEC2                <1>     inc dl
   265 0000292B 0441                <1>     add al, "A" ;Convert to letter
   266 0000292D B43A                <1>     mov ah, ":"
   267 0000292F 66AB                <1>     stosw   ;Store X:, rdi+=2
   268 00002931 8A05F4D6FFFF        <1>     mov al, byte [pathSep]
   269 00002937 AA                  <1>     stosb   ;Store pathSep, inc rdi
   270 00002938 B447                <1>     mov ah, 47h ;Get Current Working Directory
   271 0000293A 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   272 0000293D CD41                <1>     int 41h
   273 0000293F E884000000          <1>     call strlen
   274 00002944 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   275                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   276 0000294A B440                <1>     mov ah, 40h ;Write to handle
   277 0000294C BB01000000          <1>     mov ebx, 1  ;STDOUT
   278 00002951 488D1504D7FFFF      <1>     lea rdx, currDirStr
   279 00002958 CD41                <1>     int 41h
   280                              <1>     return
    13                              <2> %%_ret:
    14 0000295A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   281                              <1> 
   282                              <1> BCDtoHex:
   283                              <1> ;Converts a BCD value to a Hex byte
   284                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   285 0000295B 51                  <1>     push rcx
   286 0000295C 0FB6C0              <1>     movzx eax, al   ;Zero extend
   287 0000295F 89C1                <1>     mov ecx, eax    ;Save al in ecx
   288 00002961 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   289 00002966 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   290 0000296C C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   291                              <1> .bth:
   292 0000296F 050A000000          <1>     add eax, 10
   293 00002974 FFC9                <1>     dec ecx
   294 00002976 75F7                <1>     jnz .bth
   295 00002978 59                  <1>     pop rcx
   296 00002979 C3                  <1>     ret
   297                              <1> 
   298                              <1> hexToBCD:
   299                              <1> ;Converts a Hex byte into two BCD digits
   300                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   301 0000297A 51                  <1>     push rcx
   302 0000297B 0FB6C0              <1>     movzx eax, al   ;Zero extend
   303 0000297E 31C9                <1>     xor ecx, ecx
   304                              <1> .htb0:
   305 00002980 3D0A000000          <1>     cmp eax, 10
   306 00002985 7209                <1>     jb .htb1
   307 00002987 2D0A000000          <1>     sub eax, 10
   308 0000298C FFC1                <1>     inc ecx
   309 0000298E EBF0                <1>     jmp short .htb0
   310                              <1> .htb1:
   311 00002990 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   312 00002993 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   313 00002995 59                  <1>     pop rcx
   314 00002996 C3                  <1>     ret
   315                              <1> 
   316                              <1> printPackedBCD:
   317                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   318                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   319                              <1> ;Preserves all registers
   320 00002997 50                  <1>     push rax
   321 00002998 52                  <1>     push rdx
   322 00002999 88C4                <1>     mov ah, al
   323 0000299B 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   324 0000299D 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   325 000029A0 7508                <1>     jnz .upperNybble
   326 000029A2 B220                <1>     mov dl, " "
   327 000029A4 B402                <1>     mov ah, 02h
   328 000029A6 CD41                <1>     int 41h
   329 000029A8 EB0E                <1>     jmp short .lowerNybble
   330                              <1> .upperNybble:
   331 000029AA 50                  <1>     push rax
   332 000029AB C0EC04              <1>     shr ah, 4
   333 000029AE 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   334 000029B1 88E2                <1>     mov dl, ah
   335 000029B3 B402                <1>     mov ah, 02h ;Print DL
   336 000029B5 CD41                <1>     int 41h
   337 000029B7 58                  <1>     pop rax
   338                              <1> .lowerNybble:
   339 000029B8 0430                <1>     add al, "0"
   340 000029BA 88C2                <1>     mov dl, al
   341 000029BC B402                <1>     mov ah, 02h ;Print DL
   342 000029BE CD41                <1>     int 41h
   343 000029C0 5A                  <1>     pop rdx
   344 000029C1 58                  <1>     pop rax
   345                              <1>     return
    13                              <2> %%_ret:
    14 000029C2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   346                              <1> 
   347                              <1> getCurrentDrive:
   348                              <1> ;Returns the 0 based current drive in al
   349 000029C3 B419                <1>     mov ah, 19h
   350 000029C5 CD41                <1>     int 41h
   351                              <1>     return
    13                              <2> %%_ret:
    14 000029C7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   352                              <1> 
   353                              <1> strlen:
   354                              <1> ;Gets the length of a ASCIIZ string
   355                              <1> ;Input: rdi = Source buffer
   356                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   357 000029C8 50                  <1>     push rax
   358 000029C9 57                  <1>     push rdi
   359 000029CA 30C0                <1>     xor al, al
   360 000029CC 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   361 000029CE FFC9                <1>     dec ecx ;rcx = -1
   362 000029D0 F2AE                <1>     repne scasb
   363 000029D2 F7D1                <1>     not ecx
   364 000029D4 5F                  <1>     pop rdi
   365 000029D5 58                  <1>     pop rax
   366                              <1>     return
    13                              <2> %%_ret:
    14 000029D6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   367                              <1> 
   368                              <1> findTerminatorOrEOC:
   369                              <1> ;Advances rsi to the next string terminator char or the next End of command
   370                              <1> ; char
   371                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   372                              <1> ;If a end of command char found, also sets CF
   373 000029D7 AC                  <1>     lodsb
   374 000029D8 3C0D                <1>     cmp al, CR
   375 000029DA 7419                <1>     je .endOfInput
   376 000029DC E82B000000          <1>     call isALterminator
   377 000029E1 7419                <1>     jz .exit
   378 000029E3 3A0542D6FFFF        <1>     cmp al, byte [pathSep]
   379 000029E9 7411                <1>     je .exit
   380 000029EB 3A053BD6FFFF        <1>     cmp al, byte [switchChar]
   381 000029F1 7409                <1>     je .exit
   382 000029F3 EBE2                <1>     jmp short findTerminatorOrEOC
   383                              <1> .endOfInput:
   384 000029F5 E802000000          <1>     call .exit
   385 000029FA F9                  <1>     stc 
   386                              <1>     return
    13                              <2> %%_ret:
    14 000029FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   387                              <1> .exit:
   388 000029FC 48FFCE              <1>     dec rsi ;Point to the terminating char
   389                              <1>     return
    13                              <2> %%_ret:
    14 000029FF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   390                              <1> 
   391                              <1> findTerminator:
   392                              <1> ;Advances rsi to the next string terminator char
   393                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   394 00002A00 AC                  <1>     lodsb
   395 00002A01 E806000000          <1>     call isALterminator
   396 00002A06 75F8                <1>     jnz findTerminator
   397 00002A08 48FFCE              <1>     dec rsi
   398                              <1>     return
    13                              <2> %%_ret:
    14 00002A0B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   399                              <1> isALterminator:
   400                              <1> ;Returns: ZF=NZ if al is not a terminator (Not including CR)
   401                              <1> ;         ZF=ZY if al is a terminator
   402 00002A0C 3C20                <1>     cmp al, " "
   403                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002A0E 74(0B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   404 00002A10 3C3B                <1>     cmp al, ";"
   405                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002A12 74(0B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   406 00002A14 3C3D                <1>     cmp al, "="
   407                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002A16 74(0B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   408 00002A18 3C2C                <1>     cmp al, ","
   409                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002A1A 74(0B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   410 00002A1C 3C09                <1>     cmp al, TAB
   411                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002A1E 74(0B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   412 00002A20 3C0A                <1>     cmp al, LF
   413                              <1>     return
    13                              <2> %%_ret:
    14 00002A22 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   414                              <1> 
   415                              <1> findEndOfCommand:
   416                              <1> ;Moves rsi to the | or CR that terminates this command
   417 00002A23 AC                  <1>     lodsb
   418 00002A24 E806000000          <1>     call isALEndOfCommand
   419 00002A29 75F8                <1>     jnz findEndOfCommand
   420 00002A2B 48FFCE              <1>     dec rsi
   421                              <1>     return
    13                              <2> %%_ret:
    14 00002A2E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   422                              <1> isALEndOfCommand:
   423 00002A2F 3C7C                <1>     cmp al, "|"
   424                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002A31 74(2E)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   425 00002A33 3C0D                <1>     cmp al, CR
   426                              <1>     return
    13                              <2> %%_ret:
    14 00002A35 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   427                              <1> 
   428                              <1> skipSpaces:
   429                              <1> ;Also skips tabs
   430                              <1> ;Input: rsi must point to the start of the data string
   431                              <1> ;Output: rsi points to the first non-space char
   432 00002A36 803E20              <1>     cmp byte [rsi], " "
   433 00002A39 7405                <1>     je .skip    ;If equal to a space, skip it
   434 00002A3B 803E09              <1>     cmp byte [rsi], TAB
   435                              <1>     retne   ;If not equal to a tab or space, return
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002A3E 75(35)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   436                              <1> .skip:
   437 00002A40 48FFC6              <1>     inc rsi
   438 00002A43 EBF1                <1>     jmp short skipSpaces
   439                              <1> 
   440                              <1> printPrompt:
   441 00002A45 66813DDBD5FFFFFFFF  <1>     cmp word [promptPtr], -1
   442 00002A4E 750B                <1>     jne .validPrompt
   443                              <1>     ;Here we print the default prompt
   444 00002A50 E8C7FEFFFF          <1>     call putCWDInPrompt
   445 00002A55 E8ADFEFFFF          <1>     call putGTinPrompt
   446                              <1>     return
    13                              <2> %%_ret:
    14 00002A5A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   447                              <1> .validPrompt:
   448                              <1>     return
    13                              <2> %%_ret:
    14 00002A5B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   449                              <1> 
   450                              <1> clearCommandState:
   451                              <1> ;Clears the command state
   452 00002A5C 488D3D44D6FFFF      <1>     lea rdi, cmdStatePtr
   453 00002A63 B90E000000          <1>     mov ecx, cmdStateL
   454 00002A68 31C0                <1>     xor eax, eax
   455 00002A6A F3AA                <1>     rep stosb
   456 00002A6C C70535D6FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   456 00002A75 FF                  <1>
   457                              <1>     return
    13                              <2> %%_ret:
    14 00002A76 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   458                              <1> 
   459                              <1> clearCommandLineState:
   460                              <1> ;Clears the command line state after a 0Dh encountered
   461 00002A77 488D3D21D6FFFF      <1>     lea rdi, cmdLineStatePtr
   462 00002A7E B916000000          <1>     mov ecx, cmdLineStateL
   463 00002A83 31C0                <1>     xor eax, eax
   464 00002A85 F3AA                <1>     rep stosb
   465 00002A87 C70512D6FFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   465 00002A90 FF                  <1>
   466 00002A91 C70510D6FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   466 00002A9A FF                  <1>
   467                              <1>     return
    13                              <2> %%_ret:
    14 00002A9B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   468                              <1> 
   469                              <1> asciiToFCB:
   470                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   471                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   472                              <1> ;Also doesn't check if chars are valid
   473                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   474                              <1> ;Name is space padded.
   475                              <1> ;Input: rsi = ASCII string buffer
   476                              <1> ;       rdi = FCB name buffer
   477                              <1> ;Output: al = Char that terminated the source string 
   478 00002A9C 53                  <1>     push rbx    
   479 00002A9D 57                  <1>     push rdi
   480 00002A9E B90B000000          <1>     mov ecx, 11
   481 00002AA3 B020                <1>     mov al, " "
   482 00002AA5 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   483 00002AA7 5F                  <1>     pop rdi
   484 00002AA8 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   485 00002AAB EB1D                <1>     jmp short asciiFilenameToFCB.processName
   486                              <1> asciiFilenameToFCB:
   487                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   488                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   489                              <1> ;Also doesn't check if chars are valid
   490                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   491                              <1> ;Name is space padded.
   492                              <1> ;Input: rsi = ASCII string buffer
   493                              <1> ;       rdi = FCB name buffer
   494                              <1> ;Output: al = Char that terminated the source string 
   495 00002AAD 53                  <1>     push rbx    
   496 00002AAE 57                  <1>     push rdi
   497 00002AAF B90B000000          <1>     mov ecx, 11
   498 00002AB4 B020                <1>     mov al, " "
   499 00002AB6 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   500 00002AB8 5F                  <1>     pop rdi
   501 00002AB9 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   502                              <1>     ;Preprocess for Dir Searches
   503 00002ABC 803E2E              <1>     cmp byte [rsi], "."
   504 00002ABF 7509                <1>     jne .processName
   505 00002AC1 A4                  <1>     movsb   ;Store the first dot
   506 00002AC2 803E2E              <1>     cmp byte [rsi], "."
   507 00002AC5 752C                <1>     jne .exitBadChar
   508 00002AC7 A4                  <1>     movsb
   509 00002AC8 EB29                <1>     jmp short .exitBadChar
   510                              <1> .processName:
   511 00002ACA AC                  <1>     lodsb   ;Get the char in al
   512 00002ACB 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   513 00002ACD 7426                <1>     jz .exit
   514 00002ACF 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   515 00002AD1 7407                <1>     je .extSpace
   516 00002AD3 3C2E                <1>     cmp al, "."
   517 00002AD5 740C                <1>     je .ext
   518 00002AD7 AA                  <1>     stosb   ;Store the char
   519 00002AD8 EBF0                <1>     jmp short .processName
   520                              <1> .extSpace:
   521                              <1> ;Now we scan for a period in the name
   522 00002ADA AC                  <1>     lodsb   ;Get a char and increase rsi
   523 00002ADB 84C0                <1>     test al, al
   524 00002ADD 7416                <1>     jz .exit
   525 00002ADF 3C2E                <1>     cmp al, "."     ;If al is not a period...
   526 00002AE1 75F7                <1>     jne .extSpace   ; keep searching
   527                              <1> .ext:
   528 00002AE3 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   529                              <1> .processExt:
   530 00002AE7 AC                  <1>     lodsb
   531 00002AE8 84C0                <1>     test al, al
   532 00002AEA 7409                <1>     jz .exit
   533 00002AEC 3C20                <1>     cmp al, " "
   534 00002AEE 7405                <1>     je .exit
   535 00002AF0 AA                  <1>     stosb
   536 00002AF1 EBF4                <1>     jmp short .processExt
   537                              <1> .exitBadChar:
   538 00002AF3 30C0                <1>     xor al, al  ;Return a null terminator
   539                              <1> .exit:
   540 00002AF5 5B                  <1>     pop rbx
   541                              <1>     return
    13                              <2> %%_ret:
    14 00002AF6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   542                              <1> 
   543                              <1> FCBToAsciiz:
   544                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   545                              <1> ;Name is space padded too
   546                              <1> ;Input: rsi = FCB name buffer
   547                              <1> ;       rdi = ASCIIZ string buffer
   548 00002AF7 B908000000          <1>     mov ecx, 8
   549 00002AFC F3A4                <1>     rep movsb   ;Move the name over
   550                              <1> .scanNameSpace:
   551 00002AFE 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   552 00002B02 750D                <1>     jne .ext
   553 00002B04 48FFCF              <1>     dec rdi
   554 00002B07 FFC1                <1>     inc ecx
   555 00002B09 81F908000000        <1>     cmp ecx, 8
   556 00002B0F 72ED                <1>     jb .scanNameSpace
   557                              <1> .ext:
   558 00002B11 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   559 00002B16 7506                <1>     jne .validExt
   560 00002B18 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   561 00002B1C 7415                <1>     je .exit
   562                              <1> .validExt:
   563 00002B1E B02E                <1>     mov al, "." ;We have a valid extension, store a period
   564 00002B20 AA                  <1>     stosb
   565 00002B21 B903000000          <1>     mov ecx, 3
   566 00002B26 F3A4                <1>     rep movsb   ;Move the three extension chars over
   567                              <1> .scanExtSpace:
   568 00002B28 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   569 00002B2C 7505                <1>     jne .exit
   570 00002B2E 48FFCF              <1>     dec rdi
   571 00002B31 EBF5                <1>     jmp short .scanExtSpace
   572                              <1> .exit:
   573 00002B33 31C0                <1>     xor eax, eax
   574 00002B35 AA                  <1>     stosb   ;Store a null at the end
   575                              <1>     return
    13                              <2> %%_ret:
    14 00002B36 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   576                              <1> 
   577                              <1> buildCommandPath:
   578                              <1> ;Based on the first argument on the command line
   579                              <1> ; will build a full ASCIIZ path in searchSpec to the file/dir specified
   580                              <1>     ;If this is a relative path, will handle correctly (tho unnecessary)
   581 00002B37 0FB60572D5FFFF      <1>     movzx eax, byte [arg1Off]
   582 00002B3E 488D354BD6FFFF      <1>     lea rsi, cmdBuffer
   583 00002B45 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   584 00002B48 8A3DDDD4FFFF        <1>     mov bh, byte [pathSep]
   585 00002B4E B33A                <1>     mov bl, ":"
   586 00002B50 383E                <1>     cmp byte [rsi], bh  ;Is the first char relative to root?
   587 00002B52 7458                <1>     je .absoluteCurrent
   588 00002B54 66395E01            <1>     cmp word [rsi + 1], bx    ;This checks if absolute or relative
   589 00002B58 746D                <1>     je .absolutePath
   590 00002B5A 385E01              <1>     cmp byte [rsi + 1], bl  ;Check if a drive separator
   591 00002B5D 7409                <1>     je .relativeGiven
   592                              <1> ;No drive letter given, must get Current Drive
   593 00002B5F E85FFEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   594 00002B64 0441                <1>     add al, "A"
   595 00002B66 EB0B                <1>     jmp short .relativeCommon
   596                              <1> .relativeGiven:
   597                              <1> ;Drive letter pointed to by AL
   598 00002B68 8A06                <1>     mov al, byte [rsi]  ;Get drive letter in al
   599 00002B6A 24DF                <1>     and al, 0DFh    ;Convert to UC
   600 00002B6C 4881C602000000      <1>     add rsi, 2  ;Skip the given drive letter and the colon
   601                              <1> .relativeCommon:
   602                              <1>     ;al has drive letter
   603 00002B73 88C2                <1>     mov dl, al  ;Save drive letter in dl
   604 00002B75 80EA40              <1>     sub dl, "@" ;Get 1 based drive number in dl
   605 00002B78 B43A                <1>     mov ah, ":" ;Get the colon in too
   606 00002B7A 488D3D50D8FFFF      <1>     lea rdi, searchSpec ;Start building our search path here
   607 00002B81 66AB                <1>     stosw   ;Store X:
   608 00002B83 8A05A2D4FFFF        <1>     mov al, byte [pathSep]
   609 00002B89 AA                  <1>     stosb   ;Store pathSep
   610 00002B8A 56                  <1>     push rsi    ;Save user input string
   611 00002B8B 4889FE              <1>     mov rsi, rdi    ;Put the current directory here for this drive
   612 00002B8E B447                <1>     mov ah, 47h ;Get Current Working Directory, dl has drive number
   613 00002B90 CD41                <1>     int 41h ;Won't fail as drive letter in dl confirmed ok
   614 00002B92 5E                  <1>     pop rsi
   615                              <1>     ;Now want to find terminating null
   616 00002B93 30C0                <1>     xor al, al
   617 00002B95 31C9                <1>     xor ecx, ecx
   618 00002B97 FFC9                <1>     dec ecx
   619 00002B99 F2AE                <1>     repne scasb ;Search for the terminating null
   620 00002B9B 48FFCF              <1>     dec rdi ;Go back one once found
   621 00002B9E 8A0587D4FFFF        <1>     mov al, byte [pathSep]
   622 00002BA4 3847FF              <1>     cmp byte [rdi - 1], al
   623 00002BA7 7425                <1>     je .buildPath ;If the previous char is a pathsep, skip storing another
   624 00002BA9 AA                  <1>     stosb   ;Store the pathsep
   625 00002BAA EB22                <1>     jmp short .buildPath  ;Now we copy the user string over and good to go
   626                              <1> .absoluteCurrent:
   627 00002BAC E812FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   628 00002BB1 0441                <1>     add al, "A"
   629 00002BB3 B43A                <1>     mov ah, ":" ;ax has X: now to store 
   630 00002BB5 488D3D15D8FFFF      <1>     lea rdi, searchSpec
   631 00002BBC 66AB                <1>     stosw
   632 00002BBE 8A0567D4FFFF        <1>     mov al, byte [pathSep]
   633 00002BC4 AA                  <1>     stosb
   634 00002BC5 EB07                <1>     jmp short .buildPath
   635                              <1> .absolutePath:
   636 00002BC7 488D3D03D8FFFF      <1>     lea rdi, searchSpec
   637                              <1> .buildPath:
   638 00002BCE E857EAFFFF          <1>     call copyCommandTailItem    ;Terminates with a 0 for free
   639 00002BD3 F8                  <1>     clc ;I dont care if i encounter an embedded CR rn
   640                              <1>     return
    13                              <2> %%_ret:
    14 00002BD4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   641                              <1>     
   642                              <1> printDecimalWord:
   643                              <1> ;Takes qword in rax and print it's decimal representation
   644                              <1> ;Takes the qword in eax and prints its decimal representation
   645 00002BD5 31C9                <1>     xor ecx, ecx
   646 00002BD7 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   647 00002BD9 85C0                <1>     test eax, eax
   648 00002BDB 750C                <1>     jnz .notZero
   649 00002BDD B930000000          <1>     mov ecx, "0"
   650 00002BE2 BD01000000          <1>     mov ebp, 1  ;Print one digit
   651 00002BE7 EB3E                <1>     jmp short .dpfb2
   652                              <1> .notZero:
   653 00002BE9 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   654 00002BEB BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   655                              <1> .dpfb0:
   656 00002BF0 FFC5                <1>     inc ebp
   657 00002BF2 81FD08000000        <1>     cmp ebp, 8
   658 00002BF8 7206                <1>     jb .dpfb00
   659 00002BFA 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   660 00002BFE EB04                <1>     jmp short .dpfb01
   661                              <1> .dpfb00:
   662 00002C00 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   663                              <1> .dpfb01:
   664 00002C04 31D2                <1>     xor edx, edx
   665 00002C06 48F7F6              <1>     div rsi
   666 00002C09 80C230              <1>     add dl, '0'
   667 00002C0C 80FA39              <1>     cmp dl, '9'
   668 00002C0F 7603                <1>     jbe .dpfb1
   669 00002C11 80C207              <1>     add dl, 'A'-'0'-10
   670                              <1> .dpfb1:
   671 00002C14 81FD08000000        <1>     cmp ebp, 8
   672 00002C1A 7204                <1>     jb .dpfb10
   673 00002C1C 88D3                <1>     mov bl, dl ;Add the bottom bits
   674 00002C1E EB02                <1>     jmp short .dpfb11
   675                              <1> .dpfb10:
   676 00002C20 88D1                <1>     mov cl, dl    ;Save remainder byte
   677                              <1> .dpfb11:
   678 00002C22 4885C0              <1>     test rax, rax
   679 00002C25 75C9                <1>     jnz .dpfb0
   680                              <1> .dpfb2:
   681 00002C27 81FD08000000        <1>     cmp ebp, 8
   682 00002C2D 7208                <1>     jb .dpfb20
   683 00002C2F 88DA                <1>     mov dl, bl
   684 00002C31 48C1EB08            <1>     shr rbx, 8
   685 00002C35 EB06                <1>     jmp short .dpfb21
   686                              <1> .dpfb20:
   687 00002C37 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   688 00002C39 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   689                              <1> .dpfb21:
   690 00002C3D B402                <1>     mov ah, 02h
   691 00002C3F CD41                <1>     int 41h
   692 00002C41 FFCD                <1>     dec ebp
   693 00002C43 75E2                <1>     jnz .dpfb2
   694                              <1>     return
    13                              <2> %%_ret:
    14 00002C45 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   695                              <1> 
   696                              <1> getDecimalWord:
   697                              <1> ;Works on MAX A dword in eax
   698                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   699 00002C46 31C9                <1>     xor ecx, ecx
   700 00002C48 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   701 00002C4A BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   702                              <1> .dpfb0:
   703 00002C4F FFC5                <1>     inc ebp
   704 00002C51 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   705 00002C55 31D2                <1>     xor edx, edx
   706 00002C57 48F7F3              <1>     div rbx
   707 00002C5A 80C230              <1>     add dl, '0'
   708 00002C5D 80FA39              <1>     cmp dl, '9'
   709 00002C60 7603                <1>     jbe .dpfb1
   710 00002C62 80C207              <1>     add dl, 'A'-'0'-10
   711                              <1> .dpfb1:
   712 00002C65 88D1                <1>     mov cl, dl    ;Save remainder byte
   713 00002C67 4885C0              <1>     test rax, rax
   714 00002C6A 75E3                <1>     jnz .dpfb0
   715                              <1>     return
    13                              <2> %%_ret:
    14 00002C6C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   716                              <1> 
   717                              <1> freezePC:
   718 00002C6D 488D1586E0FFFF      <1>     lea rdx, memBad1
   719 00002C74 B409                <1>     mov ah, 09h
   720 00002C76 CD41                <1>     int 41h
   721                              <1> .altEP:
   722 00002C78 488D15A4E0FFFF      <1>     lea rdx, memBad3
   723 00002C7F B409                <1>     mov ah, 09h
   724 00002C81 CD41                <1>     int 41h
   725                              <1> .lp:
   726 00002C83 F390                <1>     pause
   727 00002C85 F4                  <1>     hlt
   728 00002C86 EBFB                <1>     jmp short .lp
   729                              <1> 
   730                              <1> getFilenamePtrFromFilespec:
   731                              <1> ;Gets a pointer to the first char of a filename from a asciiz pathspec
   732                              <1> ;Input: rsi = Pathspec to search
   733                              <1> ;Output: rsi = Points to the first char of the filename
   734 00002C88 4889F3              <1>     mov rbx, rsi
   735 00002C8B 31C0                <1>     xor eax, eax
   736 00002C8D 4889F7              <1>     mov rdi, rsi    ;Go to the source string 
   737 00002C90 E833FDFFFF          <1>     call strlen     ;Get it's length
   738 00002C95 FFC9                <1>     dec ecx ;Dont include terminating null
   739 00002C97 741F                <1>     jz .exitBad ;Was the string of length zero? Exit bad if so
   740 00002C99 4801CE              <1>     add rsi, rcx    ;Goto last char in path (not null)
   741                              <1> .lp:
   742 00002C9C 4839F3              <1>     cmp rbx, rsi    ;Is rdi pointing to the start of the string?
   743                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002C9F 74(6C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   744 00002CA1 8A06                <1>     mov al, byte [rsi]  ;Get the char we currently are at
   745 00002CA3 3C3A                <1>     cmp al, ":" ;X: ?
   746 00002CA5 740D                <1>     je .pointFilename
   747 00002CA7 3A057ED3FFFF        <1>     cmp al, byte [pathSep]  ;Is al pathSep?
   748 00002CAD 7405                <1>     je .pointFilename
   749 00002CAF 48FFCE              <1>     dec rsi ;Not a terminator, go back a char
   750 00002CB2 EBE8                <1>     jmp short .lp
   751                              <1> .pointFilename:
   752 00002CB4 48FFC6              <1>     inc rsi ;Now point to the first char of the pathname
   753                              <1>     return
    13                              <2> %%_ret:
    14 00002CB7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   754                              <1> .exitBad:
   755 00002CB8 F9                  <1>     stc
   756                              <1> .exit:
   757                              <1>     return
    13                              <2> %%_ret:
    14 00002CB9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   758                              <1> 
   759                              <1> 
   760                              <1> copyArgumentToSearchSpec:
   761                              <1> ;Works similarly to the build searchpath but is simpler
   762                              <1> ;Null terminates
   763 00002CBA 488D3D10D7FFFF      <1>     lea rdi, searchSpec
   764                              <1> .copyPath:
   765 00002CC1 AC                  <1>     lodsb
   766 00002CC2 E868FDFFFF          <1>     call isALEndOfCommand
   767 00002CC7 740A                <1>     jz .finishCopy
   768 00002CC9 E83EFDFFFF          <1>     call isALterminator
   769 00002CCE 7403                <1>     jz .finishCopy
   770 00002CD0 AA                  <1>     stosb
   771 00002CD1 EBEE                <1>     jmp short .copyPath
   772                              <1> .finishCopy:
   773 00002CD3 31C0                <1>     xor eax, eax
   774 00002CD5 AA                  <1>     stosb
   775                              <1>     return
    13                              <2> %%_ret:
    14 00002CD6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                                  %include "./Utils/COMMAND/Source/int44h.asm"
     1                              <1> critErrorHandler:   ;Int 44h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 00002CD7 53                  <1>     push rbx
    25 00002CD8 51                  <1>     push rcx
    26 00002CD9 52                  <1>     push rdx
    27 00002CDA 57                  <1>     push rdi
    28 00002CDB 56                  <1>     push rsi
    29 00002CDC FC                  <1>     cld         ;Make String ops go forward
    30                              <1> 
    31 00002CDD 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 00002CE0 488D15C8DAFFFF      <1>     lea rdx, crlf
    33 00002CE7 B409                <1>     mov ah, 09h ;Print String
    34 00002CE9 CD41                <1>     int 41h
    35                              <1> 
    36 00002CEB 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    37 00002CF1 B90C000000          <1>     mov ecx, 0Ch
    38 00002CF6 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    39 00002CF8 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    40 00002CFB 480FB7FF            <1>     movzx rdi, di
    41 00002CFF 4889FA              <1>     mov rdx, rdi    ;Copy error code
    42 00002D02 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    43 00002D06 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    44 00002D09 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    45 00002D0C 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    46 00002D13 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    47 00002D17 B409                <1>     mov ah, 09h ;Print String
    48 00002D19 CD41                <1>     int 41h     ;Call DOS to print first part of message
    49                              <1> 
    50 00002D1B 488D1505020000      <1>     lea rdx, qword [.readmsg]
    51 00002D22 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    52 00002D29 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    53 00002D2C 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    54 00002D30 B409                <1>     mov ah, 09h ;Print String
    55 00002D32 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    56                              <1> 
    57 00002D34 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    58 00002D37 0F85DF000000        <1>     jnz .charError
    59                              <1> ;Disk error continues here
    60 00002D3D 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    61 00002D44 B409                <1>     mov ah, 09h
    62 00002D46 CD41                <1>     int 41h
    63 00002D48 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    64 00002D4A 80C241              <1>     add dl, "A" ;Add ASCII code
    65 00002D4D B402                <1>     mov ah, 02h ;Print char in dl
    66 00002D4F CD41                <1>     int 41h
    67                              <1> .userInput:
    68 00002D51 488D1557DAFFFF      <1>     lea rdx, crlf  ;Print new line
    69 00002D58 B409                <1>     mov ah, 09h
    70 00002D5A CD41                <1>     int 41h
    71                              <1> ;Abort, Retry, Ignore, Fail is word order
    72                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    73                              <1> .userAbort:
    74                              <1> ;Abort is always an option
    75 00002D5C 488D15E2010000      <1>     lea rdx, qword [.abortmsg]
    76 00002D63 B409                <1>     mov ah, 09h
    77 00002D65 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
    78                              <1> .userRetry:
    79 00002D67 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    80 00002D6A 7416                <1>     jz .userIgnore    ;If clear, dont print message
    81 00002D6C 488D15EA010000      <1>     lea rdx, qword [.betweenMsg]
    82 00002D73 B409                <1>     mov ah, 09h
    83 00002D75 CD41                <1>     int 41h
    84 00002D77 488D15D4010000      <1>     lea rdx, qword [.retrymsg]
    85 00002D7E B409                <1>     mov ah, 09h
    86 00002D80 CD41                <1>     int 41h
    87                              <1> .userIgnore:
    88 00002D82 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
    89 00002D85 7416                <1>     jz .userFail
    90 00002D87 488D15CF010000      <1>     lea rdx, qword [.betweenMsg]
    91 00002D8E B409                <1>     mov ah, 09h
    92 00002D90 CD41                <1>     int 41h
    93 00002D92 488D15B2010000      <1>     lea rdx, qword [.ignoremsg]
    94 00002D99 B409                <1>     mov ah, 09h
    95 00002D9B CD41                <1>     int 41h
    96                              <1> .userFail:
    97 00002D9D F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
    98 00002DA0 7416                <1>     jz .userMsgEnd
    99 00002DA2 488D15B4010000      <1>     lea rdx, qword [.betweenMsg]
   100 00002DA9 B409                <1>     mov ah, 09h
   101 00002DAB CD41                <1>     int 41h
   102 00002DAD 488D15A4010000      <1>     lea rdx, qword [.failmsg]
   103 00002DB4 B409                <1>     mov ah, 09h
   104 00002DB6 CD41                <1>     int 41h
   105                              <1> .userMsgEnd:
   106 00002DB8 488D15A1010000      <1>     lea rdx, qword [.endMsg]
   107 00002DBF B409                <1>     mov ah, 09h
   108 00002DC1 CD41                <1>     int 41h
   109                              <1> ;Get user input now 
   110 00002DC3 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   111 00002DC5 488D3D97010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   112 00002DCC B401                <1>     mov ah, 01h ;STDIN without Console Echo
   113 00002DCE CD41                <1>     int 41h ;Get char in al
   114 00002DD0 3C61                <1>     cmp al, "a" ;Chack if lowercase
   115 00002DD2 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   116 00002DD4 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   117                              <1> .uip1:
   118 00002DD6 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   119 00002DD7 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   120 00002DD9 FFC1                <1>     inc ecx
   121 00002DDB 81F904000000        <1>     cmp ecx, 4
   122 00002DE1 75F3                <1>     jne .uip1
   123 00002DE3 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   124                              <1> .validInput:
   125 00002DE8 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   126                              <1> ;Now check if the input is permitted
   127 00002DEA 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   128 00002DEC 7427                <1>     je .cehExit
   129 00002DEE 84C0                <1>     test al, al ;Check if 0 => Ignore
   130 00002DF0 740F                <1>     je .viIgnore
   131 00002DF2 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   132 00002DF4 7416                <1>     je .viRetry
   133                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   134 00002DF6 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   135 00002DF9 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   136 00002DFF EB14                <1>     jmp short .cehExit
   137                              <1> .viIgnore:
   138 00002E01 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   139 00002E04 0F8447FFFFFF        <1>     jz .userInput
   140 00002E0A EB09                <1>     jmp short .cehExit
   141                              <1> .viRetry:
   142 00002E0C F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   143 00002E0F 0F843CFFFFFF        <1>     jz .userInput
   144                              <1> .cehExit:
   145 00002E15 5E                  <1>     pop rsi
   146 00002E16 5F                  <1>     pop rdi
   147 00002E17 5A                  <1>     pop rdx
   148 00002E18 59                  <1>     pop rcx
   149 00002E19 5B                  <1>     pop rbx
   150 00002E1A 48CF                <1>     iretq
   151                              <1> .charError:
   152 00002E1C B908000000          <1>     mov ecx, 8  ;8 chars in device name
   153 00002E21 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   154                              <1> .ce1:
   155 00002E28 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   156 00002E29 88C2                <1>     mov dl, al  ;Move char into dl
   157 00002E2B B402                <1>     mov ah, 02h
   158 00002E2D CD41                <1>     int 41h ;Print char
   159 00002E2F E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   160 00002E31 E91BFFFFFF          <1>     jmp .userInput
   161                              <1> 
   162                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   163 00002E36 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   163 00002E3F 746563742024202020  <1>
   164 00002E48 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   164 00002E51 6E6974202420202020  <1>
   165 00002E5A 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   165 00002E63 202420202020202020  <1>
   166 00002E6C 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   166 00002E75 6F6D6D616E64202420  <1>
   167 00002E7E 446174612024202020- <1>             db "Data $            "       ;Error 4
   167 00002E87 202020202020202020  <1>
   168 00002E90 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   168 00002E99 737420242020202020  <1>
   169 00002EA2 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   169 00002EAB 202020202020202020  <1>
   170 00002EB4 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   170 00002EBD 656469612024202020  <1>
   171 00002EC6 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   171 00002ECF 7420466F756E642024  <1>
   172 00002ED8 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   172 00002EE1 706572202420202020  <1>
   173 00002EEA 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   173 00002EF3 6C7420242020202020  <1>
   174 00002EFC 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   174 00002F05 742024202020202020  <1>
   175 00002F0E 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   175 00002F17 61696C757265202420  <1>
   176                              <1> 
   177 00002F20 64726976652024      <1> .drive      db "drive $"
   178 00002F27 6572726F7220726561- <1> .readmsg    db "error reading $"
   178 00002F30 64696E672024        <1>
   179 00002F36 6572726F7220777269- <1> .writemsg   db "error writing $"
   179 00002F3F 74696E672024        <1>
   180 00002F45 41626F727424        <1> .abortmsg   db "Abort$" 
   181 00002F4B 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   182 00002F52 526574727924        <1> .retrymsg   db "Retry$"
   183 00002F58 4661696C24          <1> .failmsg    db "Fail$"
   184 00002F5D 2C2024              <1> .betweenMsg db ", $"
   185 00002F60 3F2024              <1> .endMsg     db "? $"
   186 00002F63 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   187                              <1> 
   188                              <1> int43h:
   189 00002F67 F605BFD0FFFFFF      <1>     test byte [permaSwitch], -1
   190 00002F6E 7516                <1>     jnz .exit   ;If this is non-zero, just exit as normal
   191                              <1>     ;Else, we juggle parent PSP's
   192 00002F70 50                  <1>     push rax
   193 00002F71 53                  <1>     push rbx
   194 00002F72 488B059ED0FFFF      <1>     mov rax, qword [realParent]
   195 00002F79 488B1D8FD0FFFF      <1>     mov rbx, qword [pspPtr]
   196 00002F80 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
   197 00002F84 5B                  <1>     pop rbx
   198 00002F85 58                  <1>     pop rax
   199                              <1> .exit:
   200 00002F86 F9                  <1>     stc     ;Set CF to kill the task
   201 00002F87 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    19                                  
    20                                  endOfAllocNoMaster: ;End of alloc if not the master cmd
    21                                  %include "./Utils/COMMAND/Data/cmdEnv.asm"
     1                              <1>     
     2                              <1> masterEnv:  ;Yeet this is this is a child command processor
     3 00002F8A 5F3A434F4D4D414E44- <1>     db "_:COMMAND.COM",0
     3 00002F93 2E434F4D00          <1>
     4 00002F98 504154483D0000      <1>     db "PATH=",0,0  ;Terminate with two null bytes
     5 00002F9F 202020202020202020- <1>     db ($ - masterEnv) dup (" ")    ;Pad the environment with spaces
     5 00002FA8 202020202020202020- <1>
     5 00002FB1 202020              <1>
    22                                  endOfAlloc: ;End of alloc if the master cmd
    23                                  ;The stack is always setup one stackSize away from the endOfAlloc, aligned to
    24                                  Segment transient align=1 follows=.data
    25                                  ;This segment always gets ejected post load
    26                                  %include "./Utils/COMMAND/Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00000000 B430                <1>     mov ah, 30h
     4 00000002 CD41                <1>     int 41h
     5 00000004 3C01                <1>     cmp al, 01h ;Version 1
     6 00000006 760D                <1>     jbe .okVersion
     7 00000008 488D15ED010000      <1>     lea rdx, badVerStr
     8 0000000F B409                <1>     mov ah, 09h
     9 00000011 CD41                <1>     int 41h
    10 00000013 CD40                <1>     int 40h ;Exit to caller or DOS to print bad command interpreter line
    11                              <1> .okVersion:
    12                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    13 00000015 4C8905(0F000000)    <1>     mov qword [pspPtr], r8  ;Store PSP ptr in internal var 
    14 0000001C 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    15 00000020 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    16 00000024 488905(17000000)    <1>     mov qword [realParent], rax ;Preserve the real parent address
    17                              <1> ;Setup Int 42h, Int 43h and Int 44h
    18 0000002B 498B400A            <1>     mov rax, qword [r8 + psp.oldInt42h] ;Preserve the original addresses
    19 0000002F 488905(2E000000)    <1>     mov qword [parentInt42], rax
    20                              <1> 
    21 00000036 488D15(D72C0000)    <1>     lea rdx, critErrorHandler
    22 0000003D 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    23 00000041 B844250000          <1>     mov eax, 2544h
    24 00000046 CD41                <1>     int 41h
    25 00000048 488D15(672F0000)    <1>     lea rdx, int43h
    26 0000004F 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    27 00000053 B843250000          <1>     mov eax, 2543h
    28 00000058 CD41                <1>     int 41h
    29 0000005A 488D15(C10D0000)    <1>     lea rdx, applicationReturn
    30 00000061 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    31 00000065 B842250000          <1>     mov eax, 2542h
    32 0000006A CD41                <1>     int 41h
    33                              <1> ;Get a pointer to DOS Sysvars
    34 0000006C B452                <1>     mov ah, 52h ;Get sysvars
    35 0000006E CD41                <1>     int 41h
    36 00000070 48891D(1F000000)    <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    37                              <1> ;Call for simple internationalisation data
    38 00000077 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    39 0000007C CD41                <1>     int 41h
    40 0000007E 3CFF                <1>     cmp al, -1
    41 00000080 7412                <1>     je .skipSwitch
    42 00000082 8815(2C000000)      <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    43 00000088 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    44 0000008B 7507                <1>     jne .skipSwitch
    45 0000008D C605(2B000000)2F    <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    46                              <1> .skipSwitch:
    47 00000094 B800380000          <1>     mov eax, 3800h  ;Get current country data
    48 00000099 488D15(36000000)    <1>     lea rdx, ctryData
    49 000000A0 CD41                <1>     int 41h ;Write the data to the internal country table
    50                              <1> ;Now determine if this is the master copy of COMMAND.COM
    51                              <1> ;Check if Int 4Eh has the same address as Int 4Dh. If so, we are master.
    52 000000A2 B84E350000          <1>     mov eax, 354Eh  ;Get int 4Eh address
    53 000000A7 CD41                <1>     int 41h
    54 000000A9 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    55 000000AC B84D350000          <1>     mov eax, 354Dh  ;Get int 4Dh address
    56 000000B1 CD41                <1>     int 41h
    57 000000B3 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    58 000000B6 755C                <1>     jne .skipMaster
    59                              <1> ;Ok so we are master command.com
    60                              <1> ;Now make myself the real parent
    61 000000B8 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    62 000000BF 4C8905(17000000)    <1>     mov qword [realParent], r8
    63                              <1> ;Set master environment as mine
    64 000000C6 488D05(8A2F0000)    <1>     lea rax, masterEnv
    65 000000CD 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    66                              <1> ;Set current Drive in COMSPEC
    67 000000D1 B019                <1>     mov al, 19h ;Get current Drive
    68 000000D3 CD41                <1>     int 41h
    69 000000D5 0441                <1>     add al, "A"
    70 000000D7 8805(8A2F0000)      <1>     mov byte [masterEnv], al
    71                              <1> ;Set Int 4Eh up
    72 000000DD 488D15(7C160000)    <1>     lea rdx, int4Eh
    73 000000E4 B84E250000          <1>     mov eax, 254Eh ;Set this as Int 4Eh
    74 000000E9 CD41                <1>     int 41h
    75                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    76                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    77 000000EB 488D15(AF070000)    <1>     lea rdx, crlf
    78 000000F2 B409                <1>     mov ah, 09h
    79 000000F4 CD41                <1>     int 41h
    80 000000F6 E8(6A1E0000)        <1>     call time
    81 000000FB E8(A41D0000)        <1>     call date
    82 00000100 488D15(AF070000)    <1>     lea rdx, crlf
    83 00000107 B409                <1>     mov ah, 09h
    84 00000109 CD41                <1>     int 41h
    85 0000010B 488D1D(B42F0000)    <1>     lea rbx, endOfAlloc ;Save the Master Environment
    86 00000112 EB32                <1>     jmp short .printInit
    87                              <1> .skipMaster:
    88 00000114 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
    89 0000011B 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
    90 00000123 0FB605(2C000000)    <1>     movzx eax, byte [switchChar]
    91 0000012A F2AE                <1>     repne scasb
    92 0000012C 67E310              <1>     jecxz .noSwitches
    93 0000012F 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
    94 00000132 24DF                <1>     and al, 0DFh    ;Convert to UC
    95 00000134 3C50                <1>     cmp al, "P" ;Is it permanent switch?
    96 00000136 7507                <1>     jne .noSwitches
    97 00000138 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    98                              <1> .noSwitches:
    99 0000013F 488D1D(8A2F0000)    <1>     lea rbx, endOfAllocNoMaster  ;This is the base address to jettison
   100                              <1> .printInit:
   101                              <1> ;Finish by printing INIT string.
   102 00000146 53                  <1>     push rbx
   103 00000147 488D153A000000      <1>     lea rdx, initString
   104 0000014E B409                <1>     mov ah, 09h
   105 00000150 CD41                <1>     int 41h ;Print init string
   106 00000152 E8(85230000)        <1>     call version.printVersionNumber
   107 00000157 488D1560000000      <1>     lea rdx, initString2
   108 0000015E B409                <1>     mov ah, 09h
   109 00000160 CD41                <1>     int 41h ;Print init string
   110 00000162 5B                  <1>     pop rbx
   111                              <1>     ;Now we add the stack to the alloc and paragraph align
   112 00000163 4881C340000000      <1>     add rbx, stackSize
   113 0000016A 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   114 00000171 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   115 00000175 48C1E304            <1>     shl rbx, 4
   116 00000179 4889DC              <1>     mov rsp, rbx    ;Move the stack pointer to this address
   117 0000017C 48891D(05000000)    <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   118 00000183 E9(AE0D0000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   119                              <1> ;Loader Data here
   120                              <1> initString: 
   121 00000188 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   121 00000191 66696320436F6D7075- <1>
   121 0000019A 746572205265736561- <1>
   121 000001A3 726368285229205343- <1>
   121 000001AC 502F444F5328522920- <1>
   121 000001B5 56657273696F6E2024  <1>
   122                              <1> initString2:
   123 000001BE 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Reserach 2022.",CR,LF,"$"
   123 000001C7 202020284329436F70- <1>
   123 000001D0 797269676874205363- <1>
   123 000001D9 69656E746966696320- <1>
   123 000001E2 436F6D707574657220- <1>
   123 000001EB 526573657261636820- <1>
   123 000001F4 323032322E0D0A24    <1>
   124 000001FC 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   124 00000205 20444F532076657273- <1>
   124 0000020E 696F6E0D0A24        <1>
    27                                  
    28                                  stackSize equ 64
    28          ------------------       info: assembly required 1+3+2 passes

