     1                                  ;COMMAND.COM main file
     2                                  [map all ./Utils/COMMAND/Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Source/Include/dosMacro.mac"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------------------------------
     9                              <1> ;Generic Macros file
    10                              <1> ;The following instruction extensions allow to conditionally return
    11                              <1> ;The idea was borrowed from the DOS Source Code
    12                              <1> ;
    13                              <1> ;-------------------------------------------------------------------------------
    14                              <1> 
    15                              <1> ;-------------------------------------------------------------------------------
    16                              <1> ;These macros are live and must not be touched
    17                              <1> ;-------------------------------------------------------------------------------
    18                              <1> %macro return 0
    19                              <1> %%_ret:
    20                              <1>     ret
    21                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    22                              <1> %endmacro
    23                              <1> 
    24                              <1> %macro cret 1
    25                              <1> %%_base:
    26                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    27                              <1>     %ifdef retOff
    28                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <1>     %ifdef currSegVBase
    30                              <1>     j%+1 short (retOff+currSegVBase)
    31                              <1>     %else
    32                              <1>     j%+1 short retOff
    33                              <1>     %endif  ;End ifdef currSegVBase
    34                              <1>     %else 
    35                              <1>     j%-1 short %%a
    36                              <1>     return
    37                              <1> %%a:
    38                              <1>     %endif  ;End the distance measurement if
    39                              <1>     %else   
    40                              <1>     j%-1 short %%a
    41                              <1>     return
    42                              <1> %%a:
    43                              <1>     %endif  ;End ifdef retoff
    44                              <1> %endmacro
    45                              <1> 
    46                              <1> %macro retz 0
    47                              <1> cret z
    48                              <1> %endmacro
    49                              <1> 
    50                              <1> %macro retnz 0
    51                              <1> cret nz
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> %macro rete 0
    55                              <1> cret e
    56                              <1> %endmacro
    57                              <1> 
    58                              <1> %macro retne 0
    59                              <1> cret ne
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> %macro retc 0
    63                              <1> cret c
    64                              <1> %endmacro
    65                              <1> 
    66                              <1> %macro retnc 0
    67                              <1> cret nc
    68                              <1> %endmacro
    69                              <1> 
    70                              <1> %macro retb 0
    71                              <1> cret b
    72                              <1> %endmacro
    73                              <1> 
    74                              <1> %macro retnb 0
    75                              <1> cret nb
    76                              <1> %endmacro
    77                              <1> 
    78                              <1> %macro reta 0
    79                              <1> cret a
    80                              <1> %endmacro
    81                              <1> 
    82                              <1> %macro retna 0
    83                              <1> cret na
    84                              <1> %endmacro
    85                              <1> 
    86                              <1> %macro breakpoint 0
    87                              <1> xchg bx, bx
    88                              <1> %endmacro
     7                                  %include "./Source/Include/dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    27 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    32 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Only affects for SUBST drives, not JOIN
    69                              <1> ; Flags: Bit 15 set = Network drive
    70                              <1> ;        Bit 14 set = Physical drive
    71                              <1> ;        Bit 13 set = JOIN'ed drive
    72                              <1> ;        Bit 12 set = SUBST'ed drive
    73                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    74                              <1> endstruc
    75                              <1> ;CDS equates
    76                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    77                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    78                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    79                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    80                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    81                              <1> ;------------------------------------------------------------------------;
    82                              <1> ; The SFT is a way to allow applications to open file handles to files 
    83                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    84                              <1> ; under the first header, and then a second header will be linked to the 
    85                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    86                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    87                              <1> ; using the FCBS= command. Default FCBS=5.
    88                              <1> ;
    89                              <1> ; A file handle describes the file, and the location within the file that
    90                              <1> ; we are reading. The file handle can be manipulated without the file
    91                              <1> ; being in memory, thus allowing the user to access data without needing 
    92                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    93                              <1> ; accessing devices, by treating them as files with their drivers 
    94                              <1> ; responding and translating the manipulations of the file handle itself.
    95                              <1> ; Neither the driver nor the application should see or use the SFT for
    96                              <1> ; the handle, as it is subject to change (and will change when file 
    97                              <1> ; sharing provisions are included). The DOS will make requests to the 
    98                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    99                              <1> ; track of the information in the SFT entry for that handle. 
   100                              <1> ;
   101                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   102                              <1> ; can point to the same file. It all depends on what the applications 
   103                              <1> ; want to do with the File.
   104                              <1> ;
   105                              <1> ; !!!!IMPORTANT!!!!
   106                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   107                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   108                              <1> ;
   109                              <1> ;Each SFT may look like this:
   110                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   111                              <1> ;            |                |
   112                              <1> ;       wNumFiles*sft    wNumFiles*sft
   113                              <1> ;
   114                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   115                              <1> ; System FCBs.
   116                              <1> ;
   117                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   118                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   119                              <1> ;
   120                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   121                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   122                              <1> ;------------------------------------------------------------------------;
   123                              <1> struc sfth   ;System file table header
   124                              <1> ; This is the SFT header.
   125                              <1> ; This structure comes before the start of the first file in the array/table.
   126 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   127 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   128                              <1> endstruc
   129                              <1> 
   130                              <1> struc sft
   131                              <1> ;This is the file struc itself
   132 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   133 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   134 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   135 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   136 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   137 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   138 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   139 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   140 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   141 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   142 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   143 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   144 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   145 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   146 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   147 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   148 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   149 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   150 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   151                              <1> ;                           0 means no record
   152                              <1> endstruc
   153                              <1> ;Open Mode equates
   154                              <1> ;Access modes   Bits[2:0]
   155                              <1> ReadAccess      equ 0h
   156                              <1> WriteAccess     equ 1h
   157                              <1> RWAccess        equ 2h
   158                              <1> ;Bit 3 reserved 0
   159                              <1> ;Sharing modes  Bits[6:4]
   160                              <1> CompatShare     equ 0h
   161                              <1> denyRWShare     equ 10h
   162                              <1> denyWriteShare  equ 20h
   163                              <1> denyReadShare   equ 30h
   164                              <1> denyNoneShare   equ 40h
   165                              <1> netFCBShare     equ 70h
   166                              <1> noInherit       equ 80h
   167                              <1> ;Bits 8-12 reserved 0
   168                              <1> 
   169                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   170                              <1> ;Buffering on writes
   171                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   172                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   173                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   174                              <1> ;Attribute Byte
   175                              <1> readOnlyFile    equ 1h
   176                              <1> hiddenFile      equ 2h
   177                              <1> systemFile      equ 4h
   178                              <1> volumeLabel     equ 8h
   179                              <1> directoryFile   equ 10h ;Directory entry
   180                              <1> archiveFile     equ 20h
   181                              <1> ;Device Info equates
   182                              <1> ;For a block device, bits [5:0] contain the drive number
   183                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   184                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   185                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   186                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   187                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   188                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   189                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   190                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   191                              <1> devCharDev      equ 80h ;If set, it is a char device!
   192                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   193                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   194                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   195                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   196                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   197                              <1>  
   198                              <1> ;------------------------------------------------------------------------;
   199                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   200                              <1> ; to an internal buffer, and then copying it to the specified location
   201                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   202                              <1> ; another request for the same sector from the same device is made, so 
   203                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   204                              <1> ; size, selected according to the largest detected sector size during 
   205                              <1> ; the initial loadup.
   206                              <1> ;
   207                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   208                              <1> ;
   209                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   210                              <1> ;------------------------------------------------------------------------;
   211                              <1> 
   212                              <1> struc bufferHdr
   213 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   214 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   215 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   216 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   217 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   218 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   219 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   220 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   221 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   222                              <1>     .dataarea:             ;Points to the start of the data area
   223                              <1> endstruc
   224                              <1> ;Buffer Flag equates
   225                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   226                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   227                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   228                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   229                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   230                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   231                              <1> ;Note! A buffer is marked as referenced only when the application 
   232                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> ; Memory control block for each memory arena
   235                              <1> ;------------------------------------------------------------------------;
   236                              <1> struc mcb
   237 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   238 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   239 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   240 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbMarkCtn      equ "M"
   248                              <1> mcbMarkEnd      equ "Z"
   249                              <1> 
   250                              <1> memFirstFit     equ 0   ;First free block goes to application
   251                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   252                              <1> memLastFit      equ 2   ;Last free block goes to application
   253                              <1> 
   254                              <1> ;Owner = Para aligned address => Owning application PSP
   255                              <1> ;...To consider...
   256                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   257                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   258                              <1> ;------------------------------------------------------------------------;
   259                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   260                              <1> ; following order, thus allowing for return values to be placed in the 
   261                              <1> ; registers by accessing the caller register stack frame.
   262                              <1> ;------------------------------------------------------------------------;
   263                              <1> struc callerFrame
   264 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   265 00000008 ????????????????    <1>     .rbx    resq 1    
   266 00000010 ????????????????    <1>     .rcx    resq 1
   267 00000018 ????????????????    <1>     .rdx    resq 1
   268 00000020 ????????????????    <1>     .rsi    resq 1
   269 00000028 ????????????????    <1>     .rdi    resq 1
   270 00000030 ????????????????    <1>     .rbp    resq 1
   271 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   272 00000040 ????????????????    <1>     .r9     resq 1
   273                              <1> ;Pushed by Processor when invoked via Interrupt
   274 00000048 ????????????????    <1>     .rip    resq 1
   275 00000050 ????????????????    <1>     .cs     resq 1
   276 00000058 ????????????????    <1>     .flags  resq 1
   277                              <1> endstruc
   278                              <1> 
   279                              <1> struc dpl
   280                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   281                              <1> ; server calls
   282 00000000 ????????????????    <1>     .rax    resq 1
   283 00000008 ????????????????    <1>     .rbx    resq 1
   284 00000010 ????????????????    <1>     .rcx    resq 1
   285 00000018 ????????????????    <1>     .rdx    resq 1
   286 00000020 ????????????????    <1>     .rsi    resq 1
   287 00000028 ????????????????    <1>     .rdi    resq 1
   288 00000030 ????????????????    <1>     .r8     resq 1
   289 00000038 ????????????????    <1>     .r9     resq 1
   290 00000040 ????????????????    <1>     .align  resq 1
   291 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   292 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   293                              <1> endstruc
   294                              <1> 
   295                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   296 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   297 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   298 00000010 ????????????????    <1>     .newSFTVal      resq 1
   299 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   300 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   301 00000028 ????????????????    <1>     .newLastdrive   resq 1
   302 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   303 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   304 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   305 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   306 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   307 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   308 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc filename
   312                              <1> ;8.3 File name struct
   313 00000000 ????????????????    <1>     .fName  resb 8
   314 00000008 ??????              <1>     .fExt   resb 3
   315                              <1> endstruc
   316                              <1> 
   317                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   318 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   319 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   320 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   321 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   322 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   323 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   324 00000016 ????                <1>     .fileTime   resw 1  ;File time
   325 00000018 ????                <1>     .fileDate   resw 1  ;File date
   326 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   327 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc psp
   331 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   332 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   333 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   334 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   335 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   336 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   337 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   338 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   339 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   340 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   341 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   342 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   343 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   344 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   345                              <1> ;Extra handle arrays are grouped into a linked list
   346                              <1> ;The below are in the same place as in DOS
   347 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   348 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   349                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   350 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   351 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   352                              <1> endstruc
   353                              <1> 
   354                              <1> struc clkStruc
   355 00000000 ????                <1>     .dateWord   resw 1
   356 00000002 ??                  <1>     .minutes    resb 1
   357 00000003 ??                  <1>     .hours      resb 1
   358 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   359 00000005 ??                  <1>     .seconds    resb 1
   360                              <1> endstruc
   361                              <1> 
   362                              <1> struc countryStruc
   363 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   364                              <1>                         ;0 = month day year hh:mm:ss
   365                              <1>                         ;1 = day month year hh:mm:ss
   366                              <1>                         ;2 = year month day hh:mm:ss
   367 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   368 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   369 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   370 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   371 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   372 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   373                              <1>                         ;0 = Symbol leads, without space
   374                              <1>                         ;1 = Symbol follows, without space
   375                              <1>                         ;2 = Symbol leads, one space
   376                              <1>                         ;3 = Symbol follows, one space
   377                              <1>                         ;4 = Symbol replace decimal separator
   378 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   379 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   380 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   381 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   382 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   383                              <1> endstruc
   384                              <1> 
   385                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   386                              <1> ;for a space of 64Gb
   387                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   388                              <1> dosLowBase  equ 600h    ;Low load address
   389                              <1> 
   390                              <1> ;Critical Error AH bitfield equates
   391                              <1> critRead    equ 0h
   392                              <1> critWrite   equ 1h
   393                              <1> critDOS     equ 0h
   394                              <1> critFAT     equ 2h
   395                              <1> critDir     equ 4h
   396                              <1> critData    equ 6h
   397                              <1> critFailOK  equ 8h
   398                              <1> critRetryOK equ 10h
   399                              <1> critIgnorOK equ 20h
   400                              <1> critCharDev equ 80h
   401                              <1> 
   402                              <1> critIgnore  equ 0
   403                              <1> critRetry   equ 1
   404                              <1> critAbort   equ 2
   405                              <1> critFail    equ 3
   406                              <1> 
   407                              <1> ;MISC ASCII control chars
   408                              <1> NUL equ 00h ;^@         | ASCII Null
   409                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   410                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   411                              <1> BEL equ 07h ;^G         | ASCII Bell
   412                              <1> BSP equ 08h ;^H         | ASCII Backspace
   413                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   414                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   415                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   416                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   417                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   418                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   419                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   420                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   421                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   422                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   423                              <1> SPC equ 20h ;Printable  | ASCII Space
   424                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   425                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   426                              <1> 
   427                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   428                              <1> ;Extended Ascii Codes
   429                              <1> eF1     equ 3Bh ;F1 second byte
   430                              <1> eF2     equ 3Ch ;F2 second byte
   431                              <1> eF3     equ 3Dh ;F3 second byte
   432                              <1> eF4     equ 3Eh ;F4 second byte
   433                              <1> eF5     equ 3Fh ;F5 second byte
   434                              <1> eF6     equ 40h ;F6 second byte
   435                              <1> eF7     equ 41h ;F7 second byte
   436                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   437                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   438                              <1> eIns    equ 52h ;Insert second byte
   439                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   440                              <1> 
   441                              <1> ;Default Configuration for the system
   442                              <1> 
   443                              <1> buffersDefault  equ 30
   444                              <1> filesDefault    equ 20
   445                              <1> fcbsDefault     equ 4
   446                              <1> safeFcbsDeflt   equ 0
   447                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Source/Include/fcbStruc.inc"
     9                              <1> ;FCB related structures
    10                              <1> 
    11                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
    12                              <1> ;This field also used for random read/write ops to find the right record
    13                              <1> struc fcb
    14 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    15 00000001 ????????????????    <1>     .filename   resb 8
    16 00000009 ??????              <1>     .fileext    resb 3
    17 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    18                              <1> ;One block consists of 128 records, of size denoted in the below
    19 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    20 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    21 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    22 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    23                              <1>     ;----------------------------------------
    24                              <1>     ;Internal Records
    25 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    26 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    27 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    28                              <1>     ;----------------------------------------
    29 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    30 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    31                              <1> endstruc
    32                              <1> 
    33                              <1> struc exFcb
    34 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    35 00000001 ??????????          <1>     .reserved   resb 5  
    36 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    37 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    38 00000008 ????????????????    <1>     .filename   resb 8
    39 00000010 ??????              <1>     .fileext    resb 3
    40 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    41                              <1> ;One block consists of 128 records, of size denoted in the below
    42 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    43 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    44 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    45 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    46                              <1>     ;----------------------------------------
    47                              <1>     ;Internal Records
    48 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    49 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    50 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    51                              <1>     ;----------------------------------------
    52 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    53 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    54                              <1> endstruc
    55                              <1> 
    56                              <1> struc renameFcb
    57                              <1> ;Used for accessing the names and drive letter for renaming
    58                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    59 00000000 ??                  <1>     .driveNum   resb 1
    60 00000001 ????????????????    <1>     .filename   resb 8
    61 00000009 ??????              <1>     .fileext    resb 3
    62 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    63 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    64 00000011 ????????????????    <1>     .newName    resb 8
    65 00000019 ??????              <1>     .newExt     resb 3
    66 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    67                              <1> endstruc
    68                              <1> 
    69                              <1> ;FCBmode equates:
    70                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    71                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    72                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    73                              <1> fcbShareOn  equ 80h
    74                              <1> fcbCharDev  equ 40h
    75                              <1> fcbLocal    equ 40h
    76                              <1> 
    77                              <1> ;Structures of the special 6 bytes
    78                              <1> 
    79                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    80                              <1> struc noShare   
    81 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    82 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    83 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    84 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    85                              <1> endstruc
    86                              <1> 
    87                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    88                              <1> struc shareLocal    
    89 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    90 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    91 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    92                              <1> endstruc
    93                              <1> 
    94                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    95                              <1> struc shareNet
    96                              <1> ;All three fields too small for FAT32
    97 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    98 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    99 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   100                              <1> endstruc
     9                                  %include "./Source/Include/dosError.inc"
    10                              <1> ;DOS Error codes
    11                              <1> 
    12                              <1> ;Extended Error Codes
    13                              <1> errInvFnc   equ 1   ;Invalid function number
    14                              <1> errFnf      equ 2   ;File not found
    15                              <1> errPnf      equ 3   ;Path not found
    16                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    17                              <1> errAccDen   equ 5   ;Access denied (to resource)
    18                              <1> errBadHdl   equ 6   ;Invalid handle
    19                              <1> errMCBbad   equ 7   ;MCB's destroyed
    20                              <1> errNoMem    equ 8   ;Insufficient memory
    21                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    22                              <1> errBadEnv   equ 10  ;Invalid environment
    23                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    24                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    25                              <1> errInvDat   equ 13  ;Invalid data
    26                              <1> ;           equ 14  ;Reserved
    27                              <1> errBadDrv   equ 15  ;Invalid drive specified
    28                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    29                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    30                              <1> errNoFil    equ 18  ;No more files, no match found
    31                              <1> ;The following are Driver error codes + 19
    32                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    33                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    34                              <1> errUnkUnt   equ 20  ;Unknown Unit
    35                              <1> errDrvNR    equ 21  ;Drive not ready
    36                              <1> errUnkCmd   equ 22  ;Unknown Command
    37                              <1> errCRCerr   equ 23  ;Data (CRC) error
    38                              <1> errBadRLn   equ 24  ;Bad request structure length
    39                              <1> errSekErr   equ 25  ;Seek error
    40                              <1> errUnkMed   equ 26  ;Unknown media type
    41                              <1> errSecNF    equ 27  ;Sector not Found
    42                              <1> errNoPap    equ 28  ;Printer out of paper
    43                              <1> errWF       equ 29  ;Write fault
    44                              <1> errRF       equ 30  ;Read fault
    45                              <1> errGF       equ 31  ;General fault
    46                              <1> ;----------------------------------------------
    47                              <1> ;The following two go inbetween the Disk errors
    48                              <1> errShrVio   equ 32  ;Sharing violations
    49                              <1> errLokVio   equ 33  ;File Lock violation
    50                              <1> ;----------------------------------------------
    51                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    52                              <1> errNoFCB    equ 35  ;FCB unavailable
    53                              <1> errShrFul   equ 36  ;Sharing buffer full
    54                              <1> 
    55                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    56                              <1> 
    57                              <1> errFilExist equ 80  ;File already exists
    58                              <1> errDirExist equ 82  ;Directory already exists
    59                              <1> errFI44     equ 83  ;Fail on INT 44h
    60                              <1> errRedir    equ 84  ;Too many levels of redirection
    61                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    62                              <1> errBadPass  equ 86  ;Bad password
    63                              <1> errBadParam equ 87  ;Bad parameter passed to request
    64                              <1> errNetWrite equ 88  ;Network Write Fault
    65                              <1> ;-----------------------------------------------------------------------------
    66                              <1> ;Error Loci
    67                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    68                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    69                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    70                              <1> eLocChr     equ 4   ;Serial/Character Device error
    71                              <1> eLocMem     equ 5   ;Related to RAM
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error Actions
    74                              <1> eActRet     equ 1   ;Retry
    75                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    76                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    77                              <1> eActAbt     equ 4   ;Abort with cleanup
    78                              <1> eActKil     equ 5   ;Abort without cleanup
    79                              <1> eActIgn     equ 6   ;Ignore error
    80                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    81                              <1> ;-----------------------------------------------------------------------------
    82                              <1> ;Error classes
    83                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    84                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    85                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    86                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    87                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    88                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    89                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    90                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    91                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    92                              <1> eClsLocked  equ 10  ;Resource Locked
    93                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    94                              <1> eClsClash   equ 12  ;Resource already exists!
    95                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Utils/COMMAND/Data/cmdEqu.asm"
    11                              <1> ;Data equates and struct declarations
    12                              <1> 
    13                              <1> cmdBufferL  equ 128 ;Length of a command line buffer
    14                              <1> driveSpecL  equ 2   ;Space for X:
    15                              <1> dirPathL    equ 64  ;Length of a directory path
    16                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
    17                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
    18                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
    19                              <1> fullDirPathL equ driveSpecL + dirPathL
    20                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    21                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    22                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    23                              <1> 
    24                              <1> ;Use PSP FCB's for switch buffers
    25                              <1> fcb1        equ psp.fcb1
    26                              <1> fcb2        equ psp.fcb2
    27                              <1> ;Use the dta as the built command line buffer.
    28                              <1> cmdLineCnt  equ psp.parmList
    29                              <1> cmdLine     equ psp.progTail
    30                              <1> 
    31                              <1> 
    32                              <1> ;Struct Declarations
    33                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    34 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    35 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    36 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    37 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    38 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    39                              <1> endstruc
    40                              <1> 
    41                              <1> struc execProg  ;For use with EXEC-ing a child task
    42 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    43 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    44 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    45 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    46                              <1> endstruc
    47                              <1> 
    48                              <1> ;Directory attribute equates
    49                              <1>     dirReadOnly     equ 01h
    50                              <1>     dirHidden       equ 02h
    51                              <1>     dirSystem       equ 04h
    52                              <1>     dirVolumeID     equ 08h
    53                              <1>     dirDirectory    equ 10h
    54                              <1>     dirArchive      equ 20h
    55                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    56                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    57                              <1>     ;If any of the three bits are set, then ALL three bits are set
    58                              <1>     ; in addition to whatever the user passed to search for.
    59                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    60                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Utils/COMMAND/Data/cmdData.asm"
    13                              <1> ;Static Data Area for COMMAND.COM    
    14                              <1> startLbl:   ;Start symbol, this is the entry point
    15 00000000 E9B22F0000          <1>     jmp cmdLdr
    16 00000005 0000000000000000    <1> stackBottom dq 0    ;Pointer to the top of the stack as allocated by DOS
    17 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
    18 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
    19 00000017 FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
    20 0000001F 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
    21 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted, hardcoded in this version
    22 00000029 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    23 0000002B 5C                  <1> pathSep     db "\"  ;Default path sep
    24 0000002C 2F                  <1> switchChar  db "/"  ;Default switch char
    25 0000002D 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    26 0000002E 0000000000000000    <1> parentInt42 dq 0    ;Stores the parent values to restore upon exiting if it can
    27                              <1> ;Static strings, not used in command line parsing
    28 00000036 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    28 0000003F 000000000000000000- <1>
    28 00000048 000000000000000000- <1>
    28 00000051 000000000000000000- <1>
    28 0000005A 0000                <1>
    29 0000005C 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    29 00000065 000000000000000000- <1>
    29 0000006E 000000000000000000- <1>
    29 00000077 000000000000000000- <1>
    29 00000080 000000000000000000- <1>
    29 00000089 000000000000000000- <1>
    29 00000092 000000000000000000- <1>
    29 0000009B 00000000            <1>
    30                              <1> 
    31                              <1> 
    32                              <1> cmdLineStatePtr:
    33 0000009F 00                  <1> cmdStartOff db 0    ;Offset to the first char for this command (may be a space)
    34 000000A0 00                  <1> cmdEndOff   db 0    ;Offset to the terminating char for this command (0Dh or |)
    35 000000A1 00                  <1> newPipeFlag db 0    ;If set, we fired up a new pipe for this command
    36 000000A2 00                  <1> pipeNumber  db 0    ;Count of active pipes (1 if a | b or 2 if a | b | c ...)
    37 000000A3 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    38 000000A5 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    39                              <1> 
    40                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    41                              <1> ;These variables are valid for a SINGLE command in a command line
    42 000000A7 0000                <1> cmdDrvSpec  dw 0    ;Read the first word in to see if the pathspec has drivespec
    43 000000A9 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    44 000000AA 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    45                              <1> ;                    If 2, we are redirecting output to a file, by appending
    46 000000AB FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    47 000000AD FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    48                              <1> 
    49 000000AF 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    50 000000B0 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    51 000000B1 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    52                              <1> 
    53 000000B2 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    54 000000B3 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    55 000000B4 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    56                              <1> 
    57                              <1> cmdStateL equ $ - cmdStatePtr
    58                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    59                              <1> 
    60                              <1> ;Structs and strings
    61                              <1> 
    62 000000B5 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    62 000000BE 00000000000000      <1>
    63 000000C5 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    63 000000CE 000000000000000000- <1>
    63 000000D7 000000000000000000- <1>
    63 000000E0 000000000000000000- <1>
    63 000000E9 00000000000000      <1>
    64                              <1> 
    65 000000F0 000000000000000000- <1> launchBlock db execProg_size dup (0)
    65 000000F9 000000000000000000- <1>
    65 00000102 000000000000000000- <1>
    65 0000010B 0000000000          <1>
    66                              <1> 
    67 00000110 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    67 00000119 000000000000000000- <1>
    67 00000122 000000000000000000- <1>
    67 0000012B 000000000000000000- <1>
    67 00000134 000000000000000000- <1>
    67 0000013D 000000000000000000- <1>
    67 00000146 000000000000000000- <1>
    67 0000014F 000000000000000000- <1>
    67 00000158 000000000000000000- <1>
    67 00000161 000000000000000000- <1>
    67 0000016A 000000000000000000- <1>
    67 00000173 000000000000000000- <1>
    67 0000017C 000000000000000000- <1>
    67 00000185 000000000000000000- <1>
    67 0000018E 0000                <1>
    68 00000190 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    68 00000199 000000000000000000- <1>
    68 000001A2 000000000000000000- <1>
    68 000001AB 000000000000000000- <1>
    68 000001B4 000000000000000000- <1>
    68 000001BD 000000000000000000- <1>
    68 000001C6 000000000000000000- <1>
    68 000001CF 000000000000000000- <1>
    68 000001D8 000000000000000000- <1>
    68 000001E1 000000000000000000- <1>
    68 000001EA 000000000000000000- <1>
    68 000001F3 000000000000000000- <1>
    68 000001FC 000000000000000000- <1>
    68 00000205 000000000000000000- <1>
    68 0000020E 0000                <1>
    69 00000210 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)  ;Space for full path to a external command
    69 00000219 000000000000000000- <1>
    69 00000222 000000000000000000- <1>
    69 0000022B 000000000000000000- <1>
    69 00000234 000000000000000000- <1>
    69 0000023D 000000000000000000- <1>
    69 00000246 000000000000000000- <1>
    69 0000024F 000000000000000000- <1>
    69 00000258 00000000000000      <1>
    70                              <1> 
    71 0000025F 000000000000000000- <1> fcbCmdSpec  db fcbNameL dup (0) ;Used to make a FCB style name for the file
    71 00000268 0000                <1>
    72 0000026A 000000000000000000- <1> cmdSpec     db fileNameZL dup (0)   ;ASCIIZ command spec for the command name
    72 00000273 00000000            <1>
    73 00000277 000000000000000000- <1> cmdName     db cmdNameL dup (0) ;Command name string prefixed by length of word
    73 00000280 0000000000          <1>
    74                              <1> 
    75 00000285 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    75 0000028E 000000000000000000- <1>
    75 00000297 000000000000000000- <1>
    75 000002A0 000000000000000000- <1>
    75 000002A9 000000000000000000- <1>
    75 000002B2 000000000000000000- <1>
    75 000002BB 000000000000000000- <1>
    75 000002C4 000000000000000000- <1>
    75 000002CD 00000000000000      <1>
    76 000002D4 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    76 000002DD 000000000000000000- <1>
    76 000002E6 000000000000000000- <1>
    76 000002EF 000000000000000000- <1>
    76 000002F8 000000000000000000- <1>
    76 00000301 000000000000000000- <1>
    76 0000030A 000000000000000000- <1>
    76 00000313 000000000000000000- <1>
    76 0000031C 00000000000000      <1>
    77                              <1> 
    78                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    79 00000323 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    79 0000032C 000000000000000000- <1>
    79 00000335 000000000000000000- <1>
    79 0000033E 000000000000000000- <1>
    79 00000347 000000000000000000- <1>
    79 00000350 000000000000000000- <1>
    79 00000359 000000000000000000- <1>
    79 00000362 000000000000000000- <1>
    79 0000036B 00000000000000      <1>
    80 00000372 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    80 0000037B 000000000000000000- <1>
    80 00000384 000000000000000000- <1>
    80 0000038D 000000000000000000- <1>
    80 00000396 000000000000000000- <1>
    80 0000039F 000000000000000000- <1>
    80 000003A8 000000000000000000- <1>
    80 000003B1 000000000000000000- <1>
    80 000003BA 00000000000000      <1>
    81                              <1> 
    82 000003C1 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    83 000003C9 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    84                              <1> 
    85 000003D1 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Contains the pathspec for the search file
    85 000003DA 000000000000000000- <1>
    85 000003E3 000000000000000000- <1>
    85 000003EC 000000000000000000- <1>
    85 000003F5 000000000000000000- <1>
    85 000003FE 000000000000000000- <1>
    85 00000407 000000000000000000- <1>
    85 00000410 000000000000000000- <1>
    85 00000419 000000000000000000- <1>
    85 00000422 000000000000000000- <1>
    85 0000042B 000000000000000000- <1>
    85 00000434 000000000000000000- <1>
    85 0000043D 000000000000000000- <1>
    85 00000446 000000000000000000- <1>
    85 0000044F 0000                <1>
    86                              <1> ;The above is larger than is needed/supported by DOS to allow for 
    87                              <1> ; users overtyping
    88                              <1> 
    89                              <1> ;Internal Function vars
    90                              <1> ;Dir Vars
    91 00000451 00                  <1> dirPrnType  db 0    ;Print type.    Bit[0] set => /W or /w specified
    92                              <1> ;                                   Bit[1] set => /P or /p specified
    93 00000452 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    94 00000453 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    95 00000454 00                  <1> dirDrv      db 0    ;0 based drive number to use
    96 00000455 000000000000000000- <1> dirOldCWD   db cmdBufferL dup (0)   ;Space for CWD and any overspill 
    96 0000045E 000000000000000000- <1>
    96 00000467 000000000000000000- <1>
    96 00000470 000000000000000000- <1>
    96 00000479 000000000000000000- <1>
    96 00000482 000000000000000000- <1>
    96 0000048B 000000000000000000- <1>
    96 00000494 000000000000000000- <1>
    96 0000049D 000000000000000000- <1>
    96 000004A6 000000000000000000- <1>
    96 000004AF 000000000000000000- <1>
    96 000004B8 000000000000000000- <1>
    96 000004C1 000000000000000000- <1>
    96 000004CA 000000000000000000- <1>
    96 000004D3 0000                <1>
    97 000004D5 000000000000000000- <1> dirPathArg  db cmdBufferL dup (0)   ;Copy the pathspec argument here if any
    97 000004DE 000000000000000000- <1>
    97 000004E7 000000000000000000- <1>
    97 000004F0 000000000000000000- <1>
    97 000004F9 000000000000000000- <1>
    97 00000502 000000000000000000- <1>
    97 0000050B 000000000000000000- <1>
    97 00000514 000000000000000000- <1>
    97 0000051D 000000000000000000- <1>
    97 00000526 000000000000000000- <1>
    97 0000052F 000000000000000000- <1>
    97 00000538 000000000000000000- <1>
    97 00000541 000000000000000000- <1>
    97 0000054A 000000000000000000- <1>
    97 00000553 0000                <1>
    98 00000555 3F3F3F3F3F3F3F3F    <1> dirSrchPat  db 8 dup ("?")    ;We copy the search pattern here
    99 0000055D 2E                  <1> dirSPExt    db "."
   100 0000055E 3F3F3F              <1>             db 3 dup ("?")
   101                              <1> 
   102                              <1> ;Volume Vars
   103 00000561 000000000000000000- <1> volLblSpc   db 13 dup (0)
   103 0000056A 00000000            <1>
   104 0000056E 00                  <1> volPathBuf  db 0 ;Drive LETTER goes here
   105 0000056F 3A5C2A2E2A00        <1>             db ":\*.*",0  ;This remains to build X:\*.*,0 for vol label search
   106                              <1> 
   107                              <1> ;Time/Date vars
   108 00000575 00                  <1> td1 db 0    ;Minutes/Year
   109 00000576 00                  <1> td2 db 0    ;Hours/Zero
   110 00000577 00                  <1> td3 db 0    ;Hundredths/Day
   111 00000578 00                  <1> td4 db 0    ;Seconds/Month
   112                              <1> 
   113                              <1> ;Rename/Copy Buffers
   114 00000579 000000000000000000- <1> sourcePath  db cmdBufferL dup (0)
   114 00000582 000000000000000000- <1>
   114 0000058B 000000000000000000- <1>
   114 00000594 000000000000000000- <1>
   114 0000059D 000000000000000000- <1>
   114 000005A6 000000000000000000- <1>
   114 000005AF 000000000000000000- <1>
   114 000005B8 000000000000000000- <1>
   114 000005C1 000000000000000000- <1>
   114 000005CA 000000000000000000- <1>
   114 000005D3 000000000000000000- <1>
   114 000005DC 000000000000000000- <1>
   114 000005E5 000000000000000000- <1>
   114 000005EE 000000000000000000- <1>
   114 000005F7 0000                <1>
   115 000005F9 000000000000000000- <1> destPath    db cmdBufferL dup (0)
   115 00000602 000000000000000000- <1>
   115 0000060B 000000000000000000- <1>
   115 00000614 000000000000000000- <1>
   115 0000061D 000000000000000000- <1>
   115 00000626 000000000000000000- <1>
   115 0000062F 000000000000000000- <1>
   115 00000638 000000000000000000- <1>
   115 00000641 000000000000000000- <1>
   115 0000064A 000000000000000000- <1>
   115 00000653 000000000000000000- <1>
   115 0000065C 000000000000000000- <1>
   115 00000665 000000000000000000- <1>
   115 0000066E 000000000000000000- <1>
   115 00000677 0000                <1>
   116                              <1> ;Copy Handles
   117 00000679 FFFF                <1> sourceHdl   dw -1
   118 0000067B FFFF                <1> destHdl     dw -1
   119                              <1> 
   120 0000067D 000000000000000000- <1> copyBuffer  db 128 dup (0)  ;Copy up to 128 bytes at a time
   120 00000686 000000000000000000- <1>
   120 0000068F 000000000000000000- <1>
   120 00000698 000000000000000000- <1>
   120 000006A1 000000000000000000- <1>
   120 000006AA 000000000000000000- <1>
   120 000006B3 000000000000000000- <1>
   120 000006BC 000000000000000000- <1>
   120 000006C5 000000000000000000- <1>
   120 000006CE 000000000000000000- <1>
   120 000006D7 000000000000000000- <1>
   120 000006E0 000000000000000000- <1>
   120 000006E9 000000000000000000- <1>
   120 000006F2 000000000000000000- <1>
   120 000006FB 0000                <1>
    13                                  %include "./Utils/COMMAND/Data/cmdTable.asm"
    14                              <1> ;Function dispatch table
    15                              <1> functionTable:
    16                              <1> ;Use Pascal strings with each row of hte table having three columns:
    17                              <1> ; Col 1, BYTE, Length of command
    18                              <1> ; Col 2, String, String representing the user input
    19                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
    20 000006FD 03444952            <1>     db 3, "DIR"
    21 00000701 F916                <1>     dw dir - startLbl
    22                              <1> 
    23 00000703 024344              <1>     db 2, "CD"
    24 00000706 971A                <1>     dw chdir - startLbl
    25                              <1> 
    26 00000708 054348444952        <1>     db 5, "CHDIR"
    27 0000070E 971A                <1>     dw chdir - startLbl
    28                              <1> 
    29 00000710 024D44              <1>     db 2, "MD"
    30 00000713 3F1B                <1>     dw mkdir - startLbl
    31                              <1> 
    32 00000715 054D4B444952        <1>     db 5, "MKDIR"
    33 0000071B 3F1B                <1>     dw mkdir - startLbl
    34                              <1> 
    35 0000071D 025244              <1>     db 2, "RD"
    36 00000720 8B1B                <1>     dw rmdir - startLbl
    37                              <1> 
    38 00000722 05524D444952        <1>     db 5, "RMDIR"
    39 00000728 8B1B                <1>     dw rmdir - startLbl
    40                              <1> 
    41 0000072A 0344454C            <1>     db 3, "DEL"
    42 0000072E 7E1D                <1>     dw erase - startLbl
    43                              <1> 
    44 00000730 054552415345        <1>     db 5, "ERASE"
    45 00000736 7E1D                <1>     dw erase - startLbl
    46                              <1> 
    47 00000738 0444415445          <1>     db 4, "DATE"
    48 0000073D A71D                <1>     dw date - startLbl
    49                              <1> 
    50 0000073F 0454494D45          <1>     db 4, "TIME"
    51 00000744 6D1E                <1>     dw time - startLbl
    52                              <1> 
    53 00000746 04434F5059          <1>     db 4, "COPY"
    54 0000074B D71B                <1>     dw copy - startLbl
    55                              <1> 
    56 0000074D 0443545459          <1>     db 4, "CTTY"
    57 00000752 051F                <1>     dw ctty - startLbl
    58                              <1> 
    59 00000754 03434C53            <1>     db 3, "CLS"
    60 00000758 A01F                <1>     dw cls - startLbl
    61                              <1> 
    62 0000075A 05425245414B        <1>     db 5, "BREAK"
    63 00000760 1220                <1>     dw break - startLbl
    64                              <1> 
    65 00000762 06564552494659      <1>     db 6, "VERIFY"
    66 00000769 9320                <1>     dw verify - startLbl
    67                              <1> 
    68 0000076B 0652454E414D45      <1>     db 6, "RENAME"
    69 00000772 1021                <1>     dw rename - startLbl
    70                              <1> 
    71 00000774 044D4F5645          <1>     db 4, "MOVE"
    72 00000779 1021                <1>     dw rename - startLbl
    73                              <1>     
    74 0000077B 08545255454E414D45  <1>     db 8, "TRUENAME"
    75 00000784 1822                <1>     dw truename - startLbl
    76                              <1> 
    77 00000786 03564552            <1>     db 3, "VER"
    78 0000078A 6123                <1>     dw version - startLbl
    79                              <1> 
    80 0000078C 03564F4C            <1>     db 3, "VOL"
    81 00000790 4E22                <1>     dw volume - startLbl
    82                              <1> 
    83 00000792 034D454D            <1>     db 3, "MEM"
    84 00000796 A523                <1>     dw memory - startLbl
    85                              <1> 
    86 00000798 0445584954          <1>     db 4, "EXIT"
    87 0000079D 8725                <1>     dw exit - startLbl
    88                              <1> 
    89 0000079F 0454595045          <1>     db 4, "TYPE"
    90 000007A4 EF24                <1>     dw type - startLbl
    91                              <1> 
    92 000007A6 05544F554348        <1>     db 5, "TOUCH"
    93 000007AC DD21                <1>     dw touch - startLbl
    94                              <1> 
    95 000007AE FF                  <1>     db -1   ;End of table
    14                                  %include "./Utils/COMMAND/Data/cmdMsg.asm"
    15                              <1> ;COMMAND.COM Messages and strings
    16 000007AF 0D0A24              <1> crlf    db  CR,LF,"$"
    17 000007B2 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
    18 000007B7 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
    18 000007C0 696C65206D69737369- <1>
    18 000007C9 6E670D0A24          <1>
    19 000007CE 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
    19 000007D7 6469736B2077697468- <1>
    19 000007E0 206261746368206669- <1>
    19 000007E9 6C65                <1>
    20 000007EB 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
    20 000007F4 737320616E79206B65- <1>
    20 000007FD 79207768656E207265- <1>
    20 00000806 6164790D0A24        <1>
    21 0000080C 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
    21 00000815 6E64206F722066696C- <1>
    21 0000081E 65206E616D650D0A24  <1>
    22 00000827 4475706C6963617465- <1> dupName db  "Duplicate file name or "
    22 00000830 2066696C65206E616D- <1>
    22 00000839 65206F7220          <1>
    23 0000083E 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    23 00000847 666F756E640D0A24    <1>
    24 0000084F 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    24 00000858 656E74206469736B20- <1>
    24 00000861 73706163650D0A24    <1>
    25 00000869 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    25 00000872 7669726F6E6D656E74- <1>
    25 0000087B 2073706163650D0A24  <1>
    26 00000884 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    26 0000088D 74696F6E206572726F- <1>
    26 00000896 720D0A24            <1>
    27 0000089A 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    27 000008A3 6F7420626520636F70- <1>
    27 000008AC 696564206F6E746F20- <1>
    27 000008B5 697473656C660D0A24  <1>
    28 000008BE 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    28 000008C7 662064657374696E61- <1>
    28 000008D0 74696F6E206C6F7374- <1>
    28 000008D9 206265666F72652063- <1>
    28 000008E2 6F70790D0A24        <1>
    29                              <1> ;Copy end message. First write # files copied then this message 
    30 000008E8 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    30 000008F1 636F706965640D0A24  <1>
    31                              <1> ;Dir end1 msg. First write # files in dir then this
    32 000008FA 2046696C6528732920- <1> dirOk   db  " File(s) $"
    32 00000903 24                  <1>
    33                              <1> ;Dir end2 msg. First write # bytes free then this message
    34 00000904 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    34 0000090D 65650D0A24          <1>
    35 00000912 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    36                              <1> 
    37 0000091B 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    37 00000924 726976652073706563- <1>
    37 0000092D 696669636174696F6E- <1>
    37 00000936 0D0A24              <1>
    38 00000939 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    38 00000942 6B6579207768656E20- <1>
    38 0000094B 7265616479202E202E- <1>
    38 00000954 202E2024            <1>
    39 00000958 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    39 00000961 6172616D657465720D- <1>
    39 0000096A 0A24                <1>
    40                              <1> 
    41 0000096C 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    41 00000975 576564546875467269- <1>
    41 0000097E 536174              <1>
    42 00000981 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    42 0000098A 206461746524        <1>
    43 00000990 43757272656E742064- <1> curDate db  "Current date is $"
    43 00000999 6174652069732024    <1>
    44 000009A1 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    44 000009AA 657720646174652024  <1>
    45 000009B3 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    45 000009BC 293A2024            <1>
    46 000009C0 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    46 000009C9 293A2024            <1>
    47 000009CD 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    47 000009D6 293A2024            <1>
    48 000009DA 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    48 000009E3 2074696D6524        <1>
    49 000009E9 43757272656E742074- <1> curTime db  "Current time is $"
    49 000009F2 696D652069732024    <1>
    50 000009FA 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    50 00000A03 65772074696D653A20- <1>
    50 00000A0C 24                  <1>
    51                              <1> 
    52 00000A0D 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    52 00000A16 7572652028592F4E29- <1>
    52 00000A1F 3F2024              <1>
    53                              <1> 
    54 00000A22 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    54 00000A2B 56657273696F6E2024  <1>
    55                              <1> 
    56 00000A34 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    56 00000A3D 6E2064726976652024  <1>
    57 00000A46 2069732024          <1> volOk   db " is $"
    58 00000A4B 20686173206E6F206C- <1> volNo   db " has no label$"
    58 00000A54 6162656C24          <1>
    59                              <1> 
    60 00000A59 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    60 00000A62 69726563746F72790D- <1>
    60 00000A6B 0A24                <1>
    61 00000A6D 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    61 00000A76 206372656174652064- <1>
    61 00000A7F 69726563746F72790D- <1>
    61 00000A88 0A24                <1>
    62 00000A8A 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    62 00000A93 6174682C206E6F7420- <1>
    62 00000A9C 6469726563746F7279- <1>
    62 00000AA5 2C0D0A              <1>
    63 00000AA8 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    63 00000AB1 6F7279206E6F742065- <1>
    63 00000ABA 6D7074790D0A24      <1>
    64 00000AC1 204469726563746F72- <1> dirMain db " Directory of  $"
    64 00000ACA 79206F66202024      <1>
    65 00000AD1 4E6F20506174682024  <1> noPath  db "No Path $"
    66 00000ADA 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    66 00000AE3 7269766520696E2073- <1>
    66 00000AEC 656172636820706174- <1>
    66 00000AF5 680D0A24            <1>
    67 00000AF9 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    67 00000B02 65766963650D0A24    <1>
    68 00000B0A 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    68 00000B13 20666F756E640D0A24  <1>
    69 00000B1C 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    69 00000B25 726F720D0A24        <1>
    70 00000B2B 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    70 00000B34 6F74206265206E6573- <1>
    70 00000B3D 7465640D0A24        <1>
    71 00000B43 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    71 00000B4C 6174652066696C6520- <1>
    71 00000B55 6572726F7220647572- <1>
    71 00000B5E 696E6720706970650D- <1>
    71 00000B67 0A24                <1>
    72 00000B69 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    72 00000B72 2062696E6172792072- <1>
    72 00000B7B 656164732066726F6D- <1>
    72 00000B84 206120646576696365- <1>
    72 00000B8D 0D0A24              <1>
    73 00000B90 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    74 00000B96 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    75 00000B9B 425245414B20697320- <1> breakIs db "BREAK is $"
    75 00000BA4 24                  <1>
    76 00000BA5 564552494659206973- <1> verifyIs    db "VERIFY is $"
    76 00000BAE 2024                <1>
    77 00000BB0 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    78 00000BB9 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    78 00000BC2 617468206F72206669- <1>
    78 00000BCB 6C65206E616D650D0A- <1>
    78 00000BD4 24                  <1>
    79 00000BD5 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    79 00000BDE 756D626572206F6620- <1>
    79 00000BE7 706172616D65746572- <1>
    79 00000BF0 730D0A24            <1>
    80 00000BF4 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    80 00000BFD 74696E6720746F2064- <1>
    80 00000C06 6576696365          <1>
    81 00000C0B 08200800            <1> backSpace   db BSP," ",BSP,NUL
    82                              <1> 
    83 00000C0F 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    83 00000C18 20202020202020546F- <1>
    83 00000C21 74616C207379737465- <1>
    83 00000C2A 6D206D656D6F72793A- <1>
    83 00000C33 2024                <1>
    84 00000C35 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    84 00000C3E 20202020202020204D- <1>
    84 00000C47 656D6F727920757365- <1>
    84 00000C50 6420627920444F533A- <1>
    84 00000C59 2024                <1>
    85 00000C5B 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    85 00000C64 656D6F727920757365- <1>
    85 00000C6D 64206279206170706C- <1>
    85 00000C76 69636174696F6E733A- <1>
    85 00000C7F 2024                <1>
    86 00000C81 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    86 00000C8A 656D6F727920726573- <1>
    86 00000C93 657276656420627920- <1>
    86 00000C9C 68617264776172653A- <1>
    86 00000CA5 2024                <1>
    87 00000CA7 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    87 00000CB0 202020202020202020- <1>
    87 00000CB9 2020202020204D656D- <1>
    87 00000CC2 6F727920667265653A- <1>
    87 00000CCB 2024                <1>
    88 00000CCD 20627974657324      <1> memByte db " bytes$"
    89 00000CD4 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    89 00000CDD 6F7420417373657274- <1>
    89 00000CE6 61696E20444F532045- <1>
    89 00000CEF 6E74727920506F696E- <1>
    89 00000CF8 7424                <1>
    90 00000CFA 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    90 00000D03 416C6C6F636174696F- <1>
    90 00000D0C 6E204572726F7224    <1>
    91 00000D14 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    91 00000D1D 4572726F7224        <1>
    92 00000D23 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    92 00000D2C 68616C74656424      <1>
    93                              <1> 
    94 00000D33 556E61626C6520746F- <1> touchErr db "Unable to create file",CR,LF,"$"
    94 00000D3C 206372656174652066- <1>
    94 00000D45 696C650D0A24        <1>
    95 00000D4B 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    95 00000D54 206372656174652070- <1>
    95 00000D5D 6970650D0A          <1>
    96                              <1> pipeErrMsgL equ $ - pipeErrMsg
    97 00000D62 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    97 00000D6B 6F6E206572726F720D- <1>
    97 00000D74 0A                  <1>
    98                              <1> redirErrMsgL   equ $ - redirErrMsg
    99                              <1> 
   100 00000D75 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
   101 00000D79 2020202024          <1> fourSpc  db "    $"
   102 00000D7E 20202024            <1> threeSpc db "   $"
   103 00000D82 202024              <1> twoSpc   db "  $"
   104                              <1> 
   105 00000D85 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
   105 00000D8E 696679204F4E206F72- <1>
   105 00000D97 204F46460D0A24      <1>
   106 00000D9E 504154483D          <1> pathEVar db "PATH="
   107 00000DA3 50524F4D50543D      <1> promptEVar  db "PROMPT="
   108                              <1> 
   109                              <1> ;If anything goes wrong with piping or redirecting just close first two 
   110                              <1> ; handles and reopen CON
   111 00000DAA 434F4E00            <1> conName db "CON",0      
    15                                  %include "./Utils/COMMAND/Source/cmdMain.asm"
    16                              <1> commandStart:
    17                              <1>     ;Resize Allocation, jump here with endpointer in rbx
    18                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
    19                              <1>     ; that the jump to safety won't be gobbled up when multitasking
    20 00000DAE 49F7D8              <1>     neg r8  ;Convert r8 to -r8
    21 00000DB1 4A8D5C0311          <1>     lea rbx, qword [rbx + r8 + 11h]    ;Get # of bytes for COMMAND.COM
    22 00000DB6 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
    23 00000DB9 B44A                <1>     mov ah, 4Ah ;Realloc
    24 00000DBB 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    25 00000DBE CD41                <1>     int 41h
    26 00000DC0 EB6C                <1>     jmp short commandMain
    27                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    28 00000DC2 B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    29 00000DC7 CD41                <1>     int 41h
    30 00000DC9 6689053DF2FFFF      <1>     mov word [returnCode], ax
    31                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    32 00000DD0 488D15031F0000      <1>     lea rdx, critErrorHandler
    33 00000DD7 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    34 00000DDB B844250000          <1>     mov eax, 2544h
    35 00000DE0 CD41                <1>     int 41h
    36 00000DE2 488D1581210000      <1>     lea rdx, int43h
    37 00000DE9 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    38 00000DED B843250000          <1>     mov eax, 2543h
    39 00000DF2 CD41                <1>     int 41h
    40 00000DF4 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    41 00000DFB 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    42 00000DFF B842250000          <1>     mov eax, 2542h
    43 00000E04 CD41                <1>     int 41h
    44 00000E06 F60595F2FFFFFF      <1>     test byte [pipeNumber], -1
    45 00000E0D 0F8581000000        <1>     jnz commandMain.pipeProceed ;Skip the handle closing when pipe active
    46 00000E13 E8BD040000          <1>     call cleanUpRedir   ;Clean up redirection once we are done
    47                              <1> ;Close all handles from 5->MAX
    48 00000E18 0FB70D08F2FFFF      <1>     movzx ecx, word [numHdls]
    49 00000E1F BB05000000          <1>     mov ebx, 5
    50                              <1> .handleClose:
    51 00000E24 B43E                <1>     mov ah, 3Eh ;File close
    52 00000E26 CD41                <1>     int 41h
    53 00000E28 FFC3                <1>     inc ebx ;Goto next file
    54 00000E2A 39CB                <1>     cmp ebx, ecx
    55 00000E2C 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    56                              <1> commandMain:
    57                              <1> ;Setup Commandline
    58 00000E2E FA                  <1>     cli
    59 00000E2F 488B25CFF1FFFF      <1>     mov rsp, qword [stackBottom]    ;Reset internal stack pointer pos
    60 00000E36 FB                  <1>     sti
    61 00000E37 FC                  <1>     cld ;Ensure stringops are done the right way
    62 00000E38 C605D1F2FFFF80      <1>     mov byte [inBuffer], 80h    ;Reset the buffer length
    63                              <1> .inputMain:
    64 00000E3F E8361C0000          <1>     call clearCommandLineState
    65 00000E44 E8BD180000          <1>     call printCRLF
    66 00000E49 E8FA1B0000          <1>     call printPrompt
    67                              <1> 
    68 00000E4E 488D15BBF2FFFF      <1>     lea rdx, inBuffer
    69 00000E55 B80A0C0000          <1>     mov eax, 0C0Ah  ;Do Buffered input
    70 00000E5A CD41                <1>     int 41h
    71 00000E5C E8A5180000          <1>     call printCRLF  ;Note we have accepted input
    72                              <1> 
    73                              <1> ;First check we had something typed in of length greater than 1
    74                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    75 00000E61 803DA9F2FFFF01      <1>     cmp byte [inBuffer + 1], 1  ;Check input length valid
    76 00000E68 743F                <1>     je .dfltErrExit
    77 00000E6A 72D3                <1>     jb .inputMain
    78                              <1>     ;Copy over the input text
    79 00000E6C 488D359DF2FFFF      <1>     lea rsi, inBuffer
    80 00000E73 488D3D16F3FFFF      <1>     lea rdi, cmdBuffer
    81 00000E7A B980000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    82 00000E7F F3A4                <1>     rep movsb
    83 00000E81 31C0                <1>     xor eax, eax
    84 00000E83 66890515F2FFFF      <1>     mov word [cmdStartOff], ax  ;Clear start and end Off positions
    85                              <1> .pipeLoop:
    86 00000E8A E827000000          <1>     call parseInput
    87 00000E8F E8C6010000          <1>     call doCommandLine
    88                              <1> .pipeProceed:
    89 00000E94 E83C040000          <1>     call cleanUpRedir
    90 00000E99 F60502F2FFFFFF      <1>     test byte [pipeNumber], -1  ;If we have any pipes active, we proceed here
    91 00000EA0 749D                <1>     jz .inputMain
    92 00000EA2 E8B81B0000          <1>     call clearCommandState  ;Else, clear the command state and start again
    93 00000EA7 EBE1                <1>     jmp short .pipeLoop
    94                              <1> .dfltErrExit:
    95 00000EA9 488D155CF9FFFF      <1>     lea rdx, badCmd
    96 00000EB0 B409                <1>     mov ah, 09h
    97 00000EB2 CD41                <1>     int 41h
    98 00000EB4 EB89                <1>     jmp short .inputMain
    99                              <1> 
   100                              <1> parseInput:
   101                              <1> ;EndOff is set up before entering this part
   102                              <1> ;Copies a nicely formatted version of the input command line
   103                              <1> ; without any redirections to psp.dta
   104 00000EB6 488D35D5F2FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
   105 00000EBD 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   106 00000EC4 0FB61DD5F1FFFF      <1>     movzx ebx, byte [cmdEndOff] ;Get the old end offset
   107 00000ECB 4801DE              <1>     add rsi, rbx    ;Move rsi to the start of this new command
   108 00000ECE E8661B0000          <1>     call skipSpaces ;Skip any preceeding spaces
   109 00000ED3 66AD                <1>     lodsw   ;Get the first two chars into ax
   110 00000ED5 668905CBF1FFFF      <1>     mov word [cmdDrvSpec], ax ;Store these chars as if they are the drvspec
   111 00000EDC 4881EE02000000      <1>     sub rsi, 2  ;Go back to the start of the command
   112 00000EE3 56                  <1>     push rsi
   113 00000EE4 57                  <1>     push rdi
   114 00000EE5 488D3D24F3FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   115 00000EEC 57                  <1>     push rdi
   116 00000EED E811070000          <1>     call copyCommandTailItemProgram
   117 00000EF2 5F                  <1>     pop rdi
   118 00000EF3 9C                  <1>     pushfq  ;Save the CF state
   119 00000EF4 E8D21A0000          <1>     call strlen
   120 00000EF9 FFC9                <1>     dec ecx ;Drop the terminating char from the count
   121 00000EFB 58                  <1>     pop rax ;Get the CF state in al
   122 00000EFC 5F                  <1>     pop rdi
   123 00000EFD 5E                  <1>     pop rsi
   124 00000EFE F3A4                <1>     rep movsb   ;Now we copy the command into the psp command line
   125 00000F00 A801                <1>     test al, 1  ;Was CF set?
   126 00000F02 0F8586000000        <1>     jnz .exit   ;If an embedded CR was found in the filename, exit!
   127                              <1> .cmdLineProcess:
   128 00000F08 E82C1B0000          <1>     call skipSpaces ;Go to the next char in the input line
   129                              <1> .redirFound:
   130 00000F0D AC                  <1>     lodsb   ;Get first non-space char (setupRedir skips spaces before ret)
   131 00000F0E 3C0D                <1>     cmp al, CR  ;If this was a CR, we stop processing
   132 00000F10 747C                <1>     je .exit
   133 00000F12 E826050000          <1>     call checkAndSetupRedir ;If not, check if we have a redir element
   134 00000F17 7275                <1>     jc .exit    ;CF=CY only if pipe, which is equivalent to CR when processing
   135 00000F19 74F2                <1>     jz .redirFound  ;If we had a < > or >>, proceed to check if next char CR
   136 00000F1B B020                <1>     mov al, " "
   137 00000F1D AA                  <1>     stosb   ;Store a space to make space for the command file parameter
   138 00000F1E 48FFCE              <1>     dec rsi ;Move rsi back to the first char
   139 00000F21 F60587F1FFFFFF      <1>     test byte [arg1Flg], -1
   140 00000F28 7521                <1>     jnz .arg2
   141                              <1> .arg1:
   142 00000F2A C6057EF1FFFFFF      <1>     mov byte [arg1Flg], -1
   143 00000F31 E8031B0000          <1>     call skipSpaces
   144 00000F36 4889F0              <1>     mov rax, rsi
   145 00000F39 488D1D50F2FFFF      <1>     lea rbx, cmdBuffer
   146 00000F40 4829D8              <1>     sub rax, rbx
   147 00000F43 880567F1FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   148 00000F49 EB2A                <1>     jmp short .argCommon
   149                              <1> .arg2:
   150 00000F4B F60560F1FFFFFF      <1>     test byte [arg2Flg], -1
   151 00000F52 7521                <1>     jnz .argCommon
   152 00000F54 C60557F1FFFFFF      <1>     mov byte [arg2Flg], -1
   153 00000F5B E8D91A0000          <1>     call skipSpaces
   154 00000F60 4889F0              <1>     mov rax, rsi
   155 00000F63 488D1D26F2FFFF      <1>     lea rbx, cmdBuffer
   156 00000F6A 4829D8              <1>     sub rax, rbx
   157 00000F6D 880540F1FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   158 00000F73 EB00                <1>     jmp short .argCommon
   159                              <1> .argCommon:
   160                              <1>     ;More than two arguments? Do nothing more than just copy it
   161                              <1>     ; over. If we encounter an embedded CR, exit there too
   162 00000F75 E8BF1A0000          <1>     call skipSpaces
   163 00000F7A 803E0D              <1>     cmp byte [rsi], CR  ;Are we at the end of the commandline?
   164 00000F7D 740F                <1>     je .exit
   165                              <1>     ;If not, we copy it over
   166 00000F7F E8A9060000          <1>     call copyCommandTailItem    ;Stores a terminating null we dont want
   167 00000F84 488D7FFF            <1>     lea rdi, qword [rdi - 1]    ;Point back at the inserted terminating null
   168 00000F88 0F837AFFFFFF        <1>     jnc .cmdLineProcess
   169                              <1> .exit:
   170 00000F8E 488D1DFBF1FFFF      <1>     lea rbx, cmdBuffer
   171 00000F95 48FFCE              <1>     dec rsi
   172 00000F98 4829DE              <1>     sub rsi, rbx    ;Get the offset into the command line
   173 00000F9B 89F3                <1>     mov ebx, esi
   174 00000F9D 881DFDF0FFFF        <1>     mov byte [cmdEndOff], bl    ;Store the offset to the terminating char
   175 00000FA3 FE05F7F0FFFF        <1>     inc byte [cmdEndOff] ;Goto  first char past terminating char for next bit
   176 00000FA9 B00D                <1>     mov al, CR
   177 00000FAB AA                  <1>     stosb   ;Store the terminating CR in the psp command line
   178                              <1>     ;Now compute the command line length 
   179 00000FAC 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine] 
   180 00000FB3 B00D                <1>     mov al, CR
   181 00000FB5 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   182 00000FB7 FFC9                <1>     dec ecx ;rcx = -1
   183 00000FB9 F2AE                <1>     repne scasb
   184 00000FBB F7D1                <1>     not ecx
   185 00000FBD FEC9                <1>     dec cl  ;Dont include terminating CR
   186 00000FBF 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   187 00000FC6 880F                <1>     mov byte [rdi], cl
   188                              <1>     ;Before returning, we copy the command name to cmdName
   189 00000FC8 488D3D41F2FFFF      <1>     lea rdi, cmdPathSpec
   190 00000FCF 4889FB              <1>     mov rbx, rdi    ;Use rbx as the ptr to the first char in the commandspec
   191 00000FD2 30C0                <1>     xor al, al  ;Search for the terminating null
   192 00000FD4 B94F000000          <1>     mov ecx, fileSpecZL ;Max number of chars the length could be
   193 00000FD9 F2AE                <1>     repne scasb
   194 00000FDB 48FFCF              <1>     dec rdi ;Go to the last char in the command
   195 00000FDE 4889FE              <1>     mov rsi, rdi
   196 00000FE1 FD                  <1>     std ;Now we go backwards to where rsi = rbx OR byte [rsi] = pathSep
   197                              <1> .keepSearching:
   198 00000FE2 AC                  <1>     lodsb
   199 00000FE3 3A0542F0FFFF        <1>     cmp al, byte [pathSep]
   200 00000FE9 740B                <1>     je .cmdStartFnd
   201 00000FEB 4839DE              <1>     cmp rsi, rbx
   202 00000FEE 75F2                <1>     jne .keepSearching
   203 00000FF0 48FFCE              <1>     dec rsi ;Go back two to go forwards again
   204 00000FF3 48FFCE              <1>     dec rsi
   205                              <1> .cmdStartFnd:
   206 00000FF6 48FFC6              <1>     inc rsi
   207 00000FF9 48FFC6              <1>     inc rsi ;Go past the pathsep
   208 00000FFC FC                  <1>     cld ;Go the sane way again
   209 00000FFD 488D3D74F2FFFF      <1>     lea rdi, qword [cmdName + 1]    ;First byte is for the length of the name
   210 00001004 57                  <1>     push rdi    ;Cleanse the field before usage (not strictly necessary)
   211 00001005 B90E000000          <1>     mov ecx, cmdNameL
   212 0000100A 30C0                <1>     xor al, al
   213 0000100C F3AA                <1>     rep stosb
   214 0000100E 5F                  <1>     pop rdi
   215 0000100F 31C9                <1>     xor ecx, ecx
   216 00001011 56                  <1>     push rsi    ;Save the location of the start byte of the command name
   217                              <1> .cmdGetChar:
   218 00001012 AC                  <1>     lodsb
   219 00001013 84C0                <1>     test al, al ;Did we find the terminating null?
   220 00001015 7411                <1>     jz .nameLenFnd
   221 00001017 3C2E                <1>     cmp al, "." ;Extension sep also terminates
   222 00001019 740D                <1>     je .nameLenFnd
   223 0000101B 24DF                <1>     and al, 0DFh    ;Else uppercase the char
   224 0000101D AA                  <1>     stosb   ;and store it
   225 0000101E FFC1                <1>     inc ecx
   226 00001020 81F90B000000        <1>     cmp ecx, 11 ;Max command length is 11
   227 00001026 72EA                <1>     jb .cmdGetChar
   228                              <1> .nameLenFnd:
   229 00001028 880D49F2FFFF        <1>     mov byte [cmdName], cl  ;Store the name length now
   230                              <1>     ;Now finally, create a FCB filespec
   231 0000102E 488D3D2AF2FFFF      <1>     lea rdi, fcbCmdSpec
   232 00001035 57                  <1>     push rdi
   233 00001036 B90B000000          <1>     mov ecx, fcbNameL
   234 0000103B B020                <1>     mov al, " " ;Fill with spaces
   235 0000103D F3AA                <1>     rep stosb
   236 0000103F 5F                  <1>     pop rdi
   237 00001040 5E                  <1>     pop rsi ;Get back the location of the start byte of the command name
   238 00001041 E8591A0000          <1>     call asciiToFCB
   239 00001046 488D3512F2FFFF      <1>     lea rsi, fcbCmdSpec
   240 0000104D 488D3D16F2FFFF      <1>     lea rdi, cmdSpec
   241 00001054 E8A11A0000          <1>     call FCBToAsciiz
   242                              <1>     return
    19                              <2> %%_ret:
    20 00001059 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   243                              <1> 
   244                              <1> doCommandLine:
   245 0000105A 488D3531F1FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
   246 00001061 488D3D4DF0FFFF      <1>     lea rdi, cmdFcb
   247 00001068 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks
   248 0000106D CD41                <1>     int 41h
   249 0000106F 0FB71D31F0FFFF      <1>     movzx ebx, word [cmdDrvSpec]    ;Get the drive specifier
   250 00001076 80FF3A              <1>     cmp bh, ":"
   251 00001079 752E                <1>     jne .noDriveSpecified
   252 0000107B 88DA                <1>     mov dl, bl      ;Move the drive letter in dl
   253 0000107D 80E2DF              <1>     and dl, 0DFh    ;Make the drive letter upper case
   254 00001080 80EA41              <1>     sub dl, "A"     ;And make it a 0 based drive letter
   255 00001083 3CFF                <1>     cmp al, -1  ;Int 41h returns AL = -1 if bad drive specified
   256 00001085 7415                <1>     je .badDrive
   257                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   258 00001087 803DE9F1FFFF02      <1>     cmp byte [cmdName], 2
   259 0000108E 7519                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   260 00001090 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   261 00001092 CD41                <1>     int 41h 
   262 00001094 B419                <1>     mov ah, 19h
   263 00001096 CD41                <1>     int 41h     ;Get current drive
   264 00001098 38D0                <1>     cmp al, dl  ;If the drive was set, all is well
   265                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000109A 74(59)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   266                              <1> .badDrive:
   267 0000109C 488D1578F8FFFF      <1>     lea rdx, badDrv
   268 000010A3 B409                <1>     mov ah, 09h
   269 000010A5 CD41                <1>     int 41h
   270 000010A7 F9                  <1>     stc
   271                              <1>     return
    19                              <2> %%_ret:
    20 000010A8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   272                              <1> .noDriveSpecified:
   273                              <1> ;Now we set the two FCB's in the command line
   274 000010A9 F605FFEFFFFFFF      <1>     test byte [arg1Flg], -1
   275 000010B0 744D                <1>     jz .fcbArgsDone
   276 000010B2 0FB605F7EFFFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   277 000010B9 488D35D0F0FFFF      <1>     lea rsi, cmdBuffer
   278 000010C0 4801C6              <1>     add rsi, rax    ;Point to first argument
   279 000010C3 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   280 000010C7 B801290000          <1>     mov eax, 2901h
   281 000010CC CD41                <1>     int 41h
   282 000010CE 8805DDEFFFFF        <1>     mov byte [arg1FCBret], al
   283 000010D4 F605D7EFFFFFFF      <1>     test byte [arg2Flg], -1
   284 000010DB 7422                <1>     jz .fcbArgsDone
   285 000010DD 0FB605CFEFFFFF      <1>     movzx eax, byte [arg2Off]
   286 000010E4 488D35A5F0FFFF      <1>     lea rsi, cmdBuffer
   287 000010EB 4801C6              <1>     add rsi, rax    ;Point to first argument
   288 000010EE 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   289 000010F2 B801290000          <1>     mov eax, 2901h
   290 000010F7 CD41                <1>     int 41h
   291 000010F9 8805B5EFFFFF        <1>     mov byte [arg2FCBret], al
   292                              <1> .fcbArgsDone:
   293 000010FF 488D358AF0FFFF      <1>     lea rsi, cmdBuffer
   294 00001106 488D1D6AF1FFFF      <1>     lea rbx, cmdName
   295 0000110D B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   296 00001112 BAFFFF0000          <1>     mov edx, 0FFFFh
   297 00001117 B5FF                <1>     mov ch, -1
   298 00001119 CD4F                <1>     int 4Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   299                              <1>             ;        al = 0  if the command should be executed as usual
   300 0000111B B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   301 00001120 BAFFFF0000          <1>     mov edx, 0FFFFh
   302 00001125 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   303 00001127 CD4F                <1>     int 4Fh
   304 00001129 741D                <1>     jz .executeInternal
   305                              <1>     ;Here we execute externally and return to the prompt
   306                              <1>     ; as if it was an internal execution
   307 0000112B 488D35DEEFFFFF      <1>     lea rsi, inBuffer ;Point to this built buffer
   308 00001132 488D1D7CEFFFFF      <1>     lea rbx, cmdFcb
   309 00001139 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   310 0000113E BAFFFF0000          <1>     mov edx, 0FFFFh
   311 00001143 B5FF                <1>     mov ch, -1
   312 00001145 CD4F                <1>     int 4Fh 
   313                              <1>     return
    19                              <2> %%_ret:
    20 00001147 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   314                              <1> .executeInternal:
   315                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   316                              <1> ;rsi points after the command terminator in the command tail
   317 00001148 488D1DAEF5FFFF      <1>     lea rbx, functionTable
   318                              <1> .nextEntry:
   319 0000114F 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   320 00001152 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   321 00001155 0F8462140000        <1>     je launchChild      ;If so, check externally now
   322 0000115B 380D16F1FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   323 00001161 7529                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   324                              <1>     ;Here they have the same length so lets see if the name is the same
   325 00001163 56                  <1>     push rsi
   326                              <1>     ;ecx has the length to compare
   327 00001164 51                  <1>     push rcx
   328 00001165 488D7301            <1>     lea rsi, qword [rbx + 1]
   329 00001169 488D3D08F1FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   330 00001170 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   331 00001172 59                  <1>     pop rcx
   332 00001173 5E                  <1>     pop rsi
   333 00001174 7516                <1>     jne .gotoNextEntry
   334                              <1>     ;Here it was found both strings are equal
   335 00001176 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   336 0000117B 480FB71F            <1>     movzx rbx, word [rdi]
   337 0000117F 488D3D7AEEFFFF      <1>     lea rdi, startLbl
   338 00001186 4801FB              <1>     add rbx, rdi
   339 00001189 FFD3                <1>     call rbx    ;Call this function...
   340                              <1>     return  ;... and return
    19                              <2> %%_ret:
    20 0000118B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   341                              <1> .gotoNextEntry:
   342 0000118C 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   343 00001193 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   344 00001196 EBB7                <1>     jmp short .nextEntry
   345                              <1> .dfltErrExit:
   346 00001198 488D156DF6FFFF      <1>     lea rdx, badCmd
   347 0000119F B409                <1>     mov ah, 09h
   348 000011A1 CD41                <1>     int 41h
   349                              <1>     return
    19                              <2> %%_ret:
    20 000011A3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   350                              <1> 
   351                              <1> 
   352                              <1> checkExtensionExec:
   353                              <1> ;Checks the extension field of cmdFcb is .COM, .EXE, .BAT in that order
   354                              <1> ;Returns: ZF=ZE if executable. ZF=NZ if not executable.
   355                              <1> ;         If ZF=ZE and CF=CY => Batch file
   356 000011A4 8B0514EFFFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   357 000011AA 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   358 000011AF 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   359 000011B4 25DFDFDFFF          <1>     and eax, 0FFDFDFDFh ;Uppercase the three letters
   360 000011B9 3D434F4D20          <1>     cmp eax, "COM "
   361                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000011BE 74(A3)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   362 000011C0 3D45584520          <1>     cmp eax, "EXE "
   363                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000011C5 74(A3)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   364 000011C7 3D42415420          <1>     cmp eax, "BAT "
   365                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000011CC 75(A3)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   366 000011CE F9                  <1>     stc
   367                              <1>     return
    19                              <2> %%_ret:
    20 000011CF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   368                              <1> 
   369                              <1> redirFailure:
   370 000011D0 488D158BFBFFFF      <1>     lea rdx, redirErrMsg
   371 000011D7 B913000000          <1>     mov ecx, redirErrMsgL
   372 000011DC EB0C                <1>     jmp short redirPipeFailureCommon
   373                              <1> pipeFailure:
   374 000011DE 488D1566FBFFFF      <1>     lea rdx, pipeErrMsg
   375 000011E5 B917000000          <1>     mov ecx, pipeErrMsgL
   376                              <1> redirPipeFailureCommon:
   377                              <1> ;This routine is called if any problems happen during 
   378                              <1> ;This routine tries to close whatever handles are not -1 and delete
   379                              <1> ; pipe files if the pipe count is not 0
   380                              <1> ;It resets all variables and proceeds.
   381 000011EA B800400000          <1>     mov eax, 4000h  ;Write handle
   382 000011EF BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   383 000011F4 CD41                <1>     int 41h
   384 000011F6 31DB                <1>     xor ebx, ebx    ;Select STDIN
   385 000011F8 E8C8000000          <1>     call .closeHandle
   386 000011FD FFC3                <1>     inc ebx         ;Select STDOUT
   387 000011FF E8C1000000          <1>     call .closeHandle
   388 00001204 B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   389 00001209 488D159AFBFFFF      <1>     lea rdx, conName
   390 00001210 CD41                <1>     int 41h
   391 00001212 89C3                <1>     mov ebx, eax    ;Move file handle to ebx
   392 00001214 B800450000          <1>     mov eax, 4500h  ;DUP
   393 00001219 CD41                <1>     int 41h
   394 0000121B 66C70585EEFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   395 00001224 0FB71D80EEFFFF      <1>     movzx ebx, word [redirSTDIN]
   396 0000122B E895000000          <1>     call .closeHandle
   397                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   398 00001230 66C70572EEFFFFFFFF  <1>     mov word [redirSTDIN], -1
   399 00001239 0FB71D6DEEFFFF      <1>     movzx ebx, word [redirSTDOUT]
   400 00001240 E880000000          <1>     call .closeHandle
   401 00001245 66C7055FEEFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   402 0000124E 0FB71D4EEEFFFF      <1>     movzx ebx, word [pipeSTDIN]
   403 00001255 E86B000000          <1>     call .closeHandle
   404 0000125A 66C70540EEFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   405 00001263 0FB71D3BEEFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   406 0000126A E856000000          <1>     call .closeHandle
   407 0000126F 66C7052DEEFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   408 00001278 66C70520EEFFFF0000  <1>     mov word [newPipeFlag], 0  ;Cover the pipe number too
   409 00001281 488D159BF0FFFF      <1>     lea rdx, qword [pipe1Filespec]
   410 00001288 803A00              <1>     cmp byte [rdx], 0
   411 0000128B 7407                <1>     jz .checkOld
   412 0000128D B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   413 00001292 CD41                <1>     int 41h
   414                              <1> .checkOld:
   415 00001294 488D15D7F0FFFF      <1>     lea rdx, qword [pipe2Filespec]
   416 0000129B 803A00              <1>     cmp byte [rdx],0
   417 0000129E 7407                <1>     jz .pipeNamesComplete
   418 000012A0 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   419 000012A5 CD41                <1>     int 41h
   420                              <1> .pipeNamesComplete:
   421 000012A7 31C0                <1>     xor eax, eax
   422                              <1>     ;Invalidate the pointers and the paths too
   423 000012A9 48890511F1FFFF      <1>     mov qword [newPipe], rax
   424 000012B0 48890512F1FFFF      <1>     mov qword [oldPipe], rax
   425 000012B7 890566F0FFFF        <1>     mov dword [pipe1Filespec], eax
   426 000012BD 8905AFF0FFFF        <1>     mov dword [pipe2Filespec], eax
   427 000012C3 F9                  <1>     stc
   428                              <1>     return
    19                              <2> %%_ret:
    20 000012C4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   429                              <1> .closeHandle:
   430 000012C5 81FBFFFFFFFF        <1>     cmp ebx, -1
   431                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000012CB 74(C4)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   432 000012CD B8003E0000          <1>     mov eax, 3E00h
   433 000012D2 CD41                <1>     int 41h
   434                              <1>     return
    19                              <2> %%_ret:
    20 000012D4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   435                              <1> 
   436                              <1> cleanUpRedir:
   437                              <1> ;Cleans up the redir stuff after we are done.
   438 000012D5 F605CDEDFFFFFF      <1>     test byte [redirIn], -1
   439 000012DC 0F85F0000000        <1>     jnz .redirInClear
   440 000012E2 F605C1EDFFFFFF      <1>     test byte [redirOut], -1
   441 000012E9 0F8517010000        <1>     jnz .redirOutClear
   442 000012EF F605ABEDFFFFFF      <1>     test byte [newPipeFlag], -1 ;New pipe active flag set?
   443 000012F6 7554                <1>     jnz .newPipe
   444 000012F8 F605A3EDFFFFFF      <1>     test byte [pipeNumber], -1
   445                              <1>     retz
    47                              <2> cret z
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000012FF 74(D4)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   446                              <1> ;Here for final pipe cleanup
   447 00001301 488B15C1F0FFFF      <1>     mov rdx, [oldPipe]
   448 00001308 B800410000          <1>     mov eax, 4100h
   449 0000130D CD41                <1>     int 41h
   450 0000130F 0F82C9FEFFFF        <1>     jc pipeFailure
   451 00001315 C60200              <1>     mov byte [rdx], 0   ;Invalidate the path too
   452                              <1> ;Now place STDIN handle back where it belongs
   453 00001318 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate ebx in it
   454 0000131A 0FB71D82EDFFFF      <1>     movzx ebx, word [pipeSTDIN]
   455 00001321 B800460000          <1>     mov eax, 4600h
   456 00001326 CD41                <1>     int 41h
   457 00001328 0F82B0FEFFFF        <1>     jc pipeFailure
   458 0000132E B8003E0000          <1>     mov eax, 3E00h  ;Now close the duplicate in ebx
   459 00001333 CD41                <1>     int 41h
   460 00001335 0F82A3FEFFFF        <1>     jc pipeFailure
   461 0000133B 66C7055FEDFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   462 00001344 C60557EDFFFF00      <1>     mov byte [pipeNumber], 0   ;Make the pipe number 0
   463                              <1>     return
    19                              <2> %%_ret:
    20 0000134B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   464                              <1> .newPipe:
   465 0000134C 803D4FEDFFFF02      <1>     cmp byte [pipeNumber], 2 ;Do we have two pipes active?
   466 00001353 751D                <1>     jne .noClose    ;If not, skip deleting old pipe
   467                              <1>     ;Here to delete the old pipe file
   468 00001355 488B156DF0FFFF      <1>     mov rdx, [oldPipe]
   469 0000135C B800410000          <1>     mov eax, 4100h
   470 00001361 CD41                <1>     int 41h
   471 00001363 0F8275FEFFFF        <1>     jc pipeFailure
   472 00001369 C60200              <1>     mov byte [rdx], 0   ;Overwrite the first byte of pathname with a zero
   473 0000136C FE0D30EDFFFF        <1>     dec byte [pipeNumber]   ;Decrement the number of active pipes
   474                              <1> .noClose:
   475 00001372 488B0548F0FFFF      <1>     mov rax, qword [newPipe]   ;Transfer the name pointer
   476 00001379 48890549F0FFFF      <1>     mov qword [oldPipe], rax
   477 00001380 BB01000000          <1>     mov ebx, 1  ;Now move STDOUT to STDIN
   478 00001385 31C9                <1>     xor ecx, ecx
   479 00001387 B800460000          <1>     mov eax, 4600h
   480 0000138C CD41                <1>     int 41h
   481 0000138E 0F824AFEFFFF        <1>     jc pipeFailure
   482 00001394 B8003E0000          <1>     mov eax, 3E00h  ;And CLOSE STDOUT as it stands
   483 00001399 CD41                <1>     int 41h
   484                              <1> ;Now we reset STDOUT back to what it was initially.
   485 0000139B 0FB71D03EDFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   486 000013A2 B901000000          <1>     mov ecx, 1
   487 000013A7 B800460000          <1>     mov eax, 4600h
   488 000013AC CD41                <1>     int 41h
   489 000013AE 0F822AFEFFFF        <1>     jc pipeFailure
   490                              <1> ;And now close the copy
   491 000013B4 B8003E0000          <1>     mov eax, 3E00h
   492 000013B9 CD41                <1>     int 41h
   493 000013BB 0F821DFEFFFF        <1>     jc pipeFailure
   494 000013C1 C605D9ECFFFF00      <1>     mov byte [newPipeFlag], 0  ;Indicate we are done with pipe command
   495 000013C8 66C705D4ECFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   496                              <1>     return
    19                              <2> %%_ret:
    20 000013D1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   497                              <1> 
   498                              <1> .redirInClear:
   499 000013D2 0FB71DD2ECFFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   500 000013D9 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   501 000013DB B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   502 000013E0 CD41                <1>     int 41h
   503 000013E2 0F82E8FDFFFF        <1>     jc redirFailure
   504 000013E8 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   505 000013ED CD41                <1>     int 41h
   506 000013EF 0F82DBFDFFFF        <1>     jc redirFailure
   507 000013F5 66C705ADECFFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   508 000013FE C605A4ECFFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   509                              <1>     return
    19                              <2> %%_ret:
    20 00001405 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   510                              <1> .redirOutClear:
   511 00001406 0FB71DA0ECFFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   512 0000140D B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   513 00001412 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   514 00001417 CD41                <1>     int 41h
   515 00001419 0F82B1FDFFFF        <1>     jc redirFailure
   516 0000141F B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   517 00001424 CD41                <1>     int 41h
   518 00001426 0F82A4FDFFFF        <1>     jc redirFailure
   519 0000142C 66C70578ECFFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   520 00001435 C6056EECFFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   521                              <1>     return
    19                              <2> %%_ret:
    20 0000143C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   522                              <1> 
   523                              <1> checkAndSetupRedir:
   524                              <1> ;Checks and sets up redir as appropriate
   525                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   526                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   527                              <1> ;Output: ZF=NZ => No redir
   528                              <1> ;        ZF=ZY => Redir
   529                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   530                              <1> ;CF=CY if pipe set or an embedded CR found
   531 0000143D 57                  <1>     push rdi
   532 0000143E 3C3C                <1>     cmp al, "<"
   533 00001440 740F                <1>     je .inputRedir
   534 00001442 3C3E                <1>     cmp al, ">"
   535 00001444 7478                <1>     je .outputRedir
   536 00001446 3C7C                <1>     cmp al, "|"
   537 00001448 0F8428010000        <1>     je .pipeSetup
   538 0000144E F8                  <1>     clc
   539                              <1> .redirExit:
   540 0000144F 5F                  <1>     pop rdi
   541                              <1>     return
    19                              <2> %%_ret:
    20 00001450 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   542                              <1> .inputRedir:
   543 00001451 C60551ECFFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   544 00001458 488D3D26EEFFFF      <1>     lea rdi, rdrInFilespec
   545 0000145F E8D5150000          <1>     call skipSpaces ;Skip spaces between < and the filespec
   546 00001464 E8C4010000          <1>     call copyCommandTailItem
   547                              <1>     ;jc .redirExit
   548 00001469 48FFCE              <1>     dec rsi ;Ensure rsi points to the terminating char
   549 0000146C E8C8150000          <1>     call skipSpaces
   550                              <1>     ;Setup the redir here for STDIN
   551 00001471 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   552 00001473 B800450000          <1>     mov eax, 4500h
   553 00001478 CD41                <1>     int 41h
   554 0000147A 0F827D010000        <1>     jc .redirError
   555 00001480 66890524ECFFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   556 00001487 488D15F7EDFFFF      <1>     lea rdx, rdrInFilespec
   557 0000148E B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   558 00001493 CD41                <1>     int 41h
   559 00001495 0F8262010000        <1>     jc .redirError
   560 0000149B 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   561 0000149D 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   562 000014A0 B800460000          <1>     mov eax, 4600h
   563 000014A5 CD41                <1>     int 41h
   564 000014A7 0F8250010000        <1>     jc .redirError
   565 000014AD B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   566 000014B2 CD41                <1>     int 41h
   567 000014B4 0F8243010000        <1>     jc .redirError
   568 000014BA 30C0                <1>     xor al, al
   569 000014BC EB91                <1>     jmp short .redirExit
   570                              <1> .outputRedir:
   571 000014BE C605E5EBFFFF01      <1>     mov byte [redirOut], 1
   572 000014C5 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   573 000014C8 7509                <1>     jne .notDouble
   574 000014CA FE05DAEBFFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   575 000014D0 48FFC6              <1>     inc rsi ;Go past it too
   576                              <1> .notDouble:
   577 000014D3 488D3DFAEDFFFF      <1>     lea rdi, rdrOutFilespec
   578 000014DA E85A150000          <1>     call skipSpaces
   579 000014DF E849010000          <1>     call copyCommandTailItem
   580                              <1>     ;jc .redirExit
   581 000014E4 48FFCE              <1>     dec rsi ;Ensure rsi points to the terminating char
   582 000014E7 E84D150000          <1>     call skipSpaces
   583                              <1>     ;Setup the redir here for STDOUT
   584 000014EC BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   585 000014F1 B800450000          <1>     mov eax, 4500h
   586 000014F6 CD41                <1>     int 41h
   587 000014F8 0F82FF000000        <1>     jc .redirError
   588 000014FE 668905A8EBFFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   589 00001505 488D15C8EDFFFF      <1>     lea rdx, rdrOutFilespec
   590 0000150C B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   591 00001511 CD41                <1>     int 41h
   592 00001513 7312                <1>     jnc .fileExists
   593 00001515 B8003C0000          <1>     mov eax, 3C00h
   594 0000151A B900000000          <1>     mov ecx, 0  ;Make the file with no attributes
   595 0000151F CD41                <1>     int 41h
   596 00001521 0F82D6000000        <1>     jc .redirError
   597                              <1> .fileExists:
   598 00001527 B901000000          <1>     mov ecx, 1    ;Close STDOUT and duplicate bx into it
   599 0000152C 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   600 0000152F B800460000          <1>     mov eax, 4600h  ;DUP2
   601 00001534 CD41                <1>     int 41h
   602 00001536 0F82C1000000        <1>     jc .redirError
   603 0000153C B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   604 00001541 CD41                <1>     int 41h
   605 00001543 0F82B4000000        <1>     jc .redirError
   606 00001549 803D5AEBFFFF01      <1>     cmp byte [redirOut], 1
   607 00001550 7416                <1>     je .dontAppend
   608                              <1>     ;Here we move the file pointer to the end of the file
   609 00001552 31D2                <1>     xor edx, edx    ;Low order 32 bits
   610 00001554 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   611 00001556 BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   612 0000155B B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   613 00001560 CD41                <1>     int 41h
   614 00001562 0F8295000000        <1>     jc .redirError
   615                              <1> .dontAppend:
   616 00001568 C6053BEBFFFFFF      <1>     mov byte [redirOut], -1
   617 0000156F 30C0                <1>     xor al, al
   618 00001571 E9D9FEFFFF          <1>     jmp .redirExit
   619                              <1> .pipeSetup:
   620 00001576 488D15A6EDFFFF      <1>     lea rdx, pipe1Filespec
   621 0000157D 803A00              <1>     cmp byte [rdx], 0
   622 00001580 740C                <1>     jz .pathFound
   623 00001582 488D15E9EDFFFF      <1>     lea rdx, pipe2Filespec
   624 00001589 803A00              <1>     cmp byte [rdx], 0
   625 0000158C 7569                <1>     jnz .pipeError
   626                              <1> .pathFound:
   627 0000158E 4889152CEEFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   628 00001595 E82C140000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   629 0000159A 0441                <1>     add al, "A"
   630 0000159C BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   631 000015A1 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   632 000015A3 B902000000          <1>     mov ecx, dirHidden  ;Hidden attributes
   633 000015A8 B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   634 000015AD CD41                <1>     int 41h
   635 000015AF 7246                <1>     jc .pipeError
   636                              <1>     ;AX has the handle for this file now, this will become STDOUT
   637                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   638 000015B1 F605EAEAFFFFFF      <1>     test byte [pipeNumber], -1
   639 000015B8 751A                <1>     jnz .notFirstPipe
   640 000015BA 0FB7D0              <1>     movzx edx, ax    ;Save this handle for a minute in dx
   641                              <1>     ;Now DUP STDOUT to save for later
   642 000015BD B800450000          <1>     mov eax, 4500h
   643 000015C2 BB01000000          <1>     mov ebx, 1  ;Duplicate STDOUT
   644 000015C7 CD41                <1>     int 41h
   645 000015C9 722C                <1>     jc .pipeError
   646                              <1>     ;Save this handle in the variable
   647 000015CB 668905D3EAFFFF      <1>     mov word [pipeSTDOUT], ax   ;Save this pipe number
   648 000015D2 89D0                <1>     mov eax, edx    ;Get the temp file handle back in eax
   649                              <1> .notFirstPipe:
   650 000015D4 0FB7D8              <1>     movzx ebx, ax
   651 000015D7 B901000000          <1>     mov ecx, 1  ;Close STDOUT and move bx into it
   652 000015DC B800460000          <1>     mov eax, 4600h  ;DUPlicate temp file handle into STDOUT
   653 000015E1 CD41                <1>     int 41h
   654 000015E3 7212                <1>     jc .pipeError
   655 000015E5 C605B5EAFFFFFF      <1>     mov byte [newPipeFlag], -1  ;Mark we have a new pipe active
   656 000015EC FE05B0EAFFFF        <1>     inc byte [pipeNumber]   ;Start a new pipe
   657 000015F2 30C0                <1>     xor al, al
   658 000015F4 F9                  <1>     stc
   659 000015F5 5F                  <1>     pop rdi
   660                              <1>     return
    19                              <2> %%_ret:
    20 000015F6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   661                              <1> .pipeError:
   662 000015F7 5F                  <1>     pop rdi 
   663 000015F8 E9E1FBFFFF          <1>     jmp pipeFailure
   664                              <1> .redirError:
   665 000015FD 5F                  <1>     pop rdi 
   666 000015FE E9CDFBFFFF          <1>     jmp redirFailure
   667                              <1> 
   668                              <1> copyCommandTailItemProgram:
   669                              <1> ;Copies a program name from the command tail until a terminator is found.
   670                              <1> ;Stores a terminating null in the destination
   671                              <1> ;Input: rsi = Start of the item to copy
   672                              <1> ;       rdi = Location for copy
   673                              <1> ;Output: Sentence copied with a null terminator inserted.
   674                              <1> ; If CF=CY, embedded CR encountered
   675 00001603 AC                  <1>     lodsb
   676 00001604 3C0D                <1>     cmp al, CR
   677 00001606 741A                <1>     je .endOfInput
   678 00001608 E802140000          <1>     call isALterminator
   679 0000160D 741A                <1>     jz .exit
   680 0000160F 3A0516EAFFFF        <1>     cmp al, byte [pathSep]
   681 00001615 7412                <1>     je .exit
   682 00001617 3A050FEAFFFF        <1>     cmp al, byte [switchChar]
   683 0000161D 740A                <1>     je .exit
   684 0000161F AA                  <1>     stosb
   685 00001620 EBE1                <1>     jmp short copyCommandTailItemProgram
   686                              <1> .endOfInput:
   687 00001622 E802000000          <1>     call .exit
   688 00001627 F9                  <1>     stc 
   689                              <1>     return
    19                              <2> %%_ret:
    20 00001628 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   690                              <1> .exit:
   691 00001629 30C0                <1>     xor al, al
   692 0000162B AA                  <1>     stosb
   693                              <1>     return
    19                              <2> %%_ret:
    20 0000162C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   694                              <1> 
   695                              <1> copyCommandTailItem:
   696                              <1> ;Copies a sentence from the command tail until a terminator is found.
   697                              <1> ;Stores a terminating null in the destination
   698                              <1> ;Input: rsi = Start of the item to copy
   699                              <1> ;       rdi = Location for copy
   700                              <1> ;Output: Sentence copied with a null terminator inserted.
   701                              <1> ; If CF=CY, embedded CR encountered
   702 0000162D AC                  <1>     lodsb
   703 0000162E 3C0D                <1>     cmp al, CR
   704 00001630 7442                <1>     je .endOfInput
   705 00001632 E8D8130000          <1>     call isALterminator
   706 00001637 7442                <1>     jz .exit
   707 00001639 3C3C                <1>     cmp al, "<"
   708 0000163B 743E                <1>     jz .exit
   709 0000163D 3C3E                <1>     cmp al, ">"
   710 0000163F 743A                <1>     jz .exit
   711 00001641 3A05E4E9FFFF        <1>     cmp al, byte [pathSep]
   712 00001647 740B                <1>     je .pathSep
   713 00001649 3A05DDE9FFFF        <1>     cmp al, byte [switchChar]
   714 0000164F 742A                <1>     je .exit
   715 00001651 AA                  <1>     stosb
   716 00001652 EBD9                <1>     jmp short copyCommandTailItem
   717                              <1> .pathSep:
   718                              <1> ;We look ahead, if the last char is a pathsep, we ignore it
   719 00001654 AC                  <1>     lodsb   ;Get the next char, increment rsi by one
   720 00001655 E8B5130000          <1>     call isALterminator
   721 0000165A 741F                <1>     jz .exit
   722 0000165C 3C0D                <1>     cmp al, CR
   723 0000165E 7414                <1>     je .endOfInput
   724 00001660 3A05C6E9FFFF        <1>     cmp al, byte [switchChar]
   725 00001666 7413                <1>     je .exit
   726 00001668 8A05BDE9FFFF        <1>     mov al, byte [pathSep]
   727 0000166E AA                  <1>     stosb   ;Else store the pathsep
   728 0000166F 48FFCE              <1>     dec rsi ;Move rsi back a piece
   729 00001672 EBB9                <1>     jmp short copyCommandTailItem
   730                              <1> .endOfInput:
   731 00001674 E802000000          <1>     call .exit
   732 00001679 F9                  <1>     stc 
   733                              <1>     return
    19                              <2> %%_ret:
    20 0000167A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   734                              <1> .exit:
   735 0000167B 30C0                <1>     xor al, al
   736 0000167D AA                  <1>     stosb
   737                              <1>     return
    19                              <2> %%_ret:
    20 0000167E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   738                              <1> 
   739                              <1> 
   740                              <1> int4Eh:   ;Interrupt interface for parsing and executing command lines
   741                              <1> ;Input: rsi points to the count byte of a command line
   742 0000167F 4150                <1>     push r8
   743 00001681 4151                <1>     push r9
   744 00001683 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   745 00001685 CD41                <1>     int 41h
   746 00001687 52                  <1>     push rdx    ;Save on the stack
   747 00001688 488D1D71E8FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   748 0000168F B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   749 00001691 CD41                <1>     int 41h
   750 00001693 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   751 00001696 4989D9              <1>     mov r9, rbx
   752 00001699 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   753 000016A0 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   754 000016A5 F348A5              <1>     rep movsq   ;Copy command line over
   755                              <1>     ;call doCommandLine
   756 000016A8 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   757 000016A9 B450                <1>     mov ah, 50h ;Set Current PSP
   758 000016AB CD41                <1>     int 41h
   759 000016AD 4159                <1>     pop r9
   760 000016AF 4158                <1>     pop r8
   761 000016B1 48CF                <1>     iretq
    16                                  %include "./Utils/COMMAND/Source/cmdFunc.asm"
    17                              <1> ;Note! Each function must setup the DTA to use for itself.
    18                              <1> ;There is no requirement to preserve the DTA across a call.
    19                              <1> ;Only the Int 4Eh entry point will preserve the callers DTA.
    20                              <1> 
    21                              <1> ;Common Error Messages, jumped to to return from
    22                              <1> noSelfCopyError:
    23 000016B3 488D15E0F1FFFF      <1>     lea rdx, noSelfCopy
    24 000016BA EB34                <1>     jmp short badCmn
    25                              <1> badParamError:
    26 000016BC 488D1595F2FFFF      <1>     lea rdx, badParm
    27 000016C3 EB2B                <1>     jmp short badCmn
    28                              <1> badDriveError:
    29 000016C5 488D154FF2FFFF      <1>     lea rdx, badDrv
    30 000016CC EB22                <1>     jmp short badCmn
    31                              <1> badArgError:
    32 000016CE 488D1500F5FFFF      <1>     lea rdx, badArgs
    33 000016D5 EB19                <1>     jmp short badCmn
    34                              <1> badFileError:
    35 000016D7 488D15DBF4FFFF      <1>     lea rdx, badSpec
    36 000016DE EB10                <1>     jmp short badCmn
    37                              <1> badDupFnf:
    38                              <1> ;Hybrid error message
    39 000016E0 488D1540F1FFFF      <1>     lea rdx, dupName
    40 000016E7 EB07                <1>     jmp short badCmn
    41                              <1> badDirError:
    42 000016E9 488D1569F3FFFF      <1>     lea rdx, badDir
    43                              <1> badCmn:
    44 000016F0 B800090000          <1>     mov eax, 0900h
    45 000016F5 CD41                <1>     int 41h
    46 000016F7 F9                  <1>     stc ;Return with CY => Error occured
    47                              <1>     return
    19                              <2> %%_ret:
    20 000016F8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    48                              <1> 
    49                              <1> dir:
    50                              <1>     ;breakpoint
    51 000016F9 C60551EDFFFF00      <1>     mov byte [dirPrnType], 0    ;Clear DIR flags
    52 00001700 C6054BEDFFFF00      <1>     mov byte [dirLineCtr], 0
    53 00001707 C60545EDFFFF00      <1>     mov byte [dirFileCtr], 0
    54 0000170E C605C0EDFFFF00      <1>     mov byte [dirPathArg], 0    ;Null terminate the start of the buffer
    55 00001715 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    55 0000171E 3F                  <1>
    56 0000171F 488D3D2FEEFFFF      <1>     lea rdi, dirSrchPat ;Start also by initialising the search pattern
    57 00001726 48AB                <1>     stosq
    58 00001728 48FFC7              <1>     inc rdi ;Go past dot
    59 0000172B 668907              <1>     mov word [rdi], ax
    60 0000172E 884702              <1>     mov byte [rdi + 2], al
    61                              <1>     ;Start by scanning for the switches
    62 00001731 488D3D59EAFFFF      <1>     lea rdi, cmdBuffer + 1  ;Goto command line input chars count
    63 00001738 0FB60F              <1>     movzx ecx, byte [rdi]   ;Get number of chars typed
    64 0000173B 48FFC7              <1>     inc rdi ;Goto first char typed in
    65 0000173E 4889FE              <1>     mov rsi, rdi    ;Use rsi as start of buffer counter
    66 00001741 8A05E5E8FFFF        <1>     mov al, byte [switchChar]   ;Scan for switchchars
    67                              <1> .switchScan:
    68 00001747 F2AE                <1>     repne scasb ;Scan for a switchchar
    69 00001749 67E320              <1>     jecxz .switchScanDone
    70 0000174C 24DF                <1>     and al, 0DFh    ;UC it
    71 0000174E 3C57                <1>     cmp al, "W" ;Wide print mode?
    72 00001750 7509                <1>     jne .notWideSw
    73 00001752 800DF8ECFFFF01      <1>     or byte [dirPrnType], 1 ;Set the correct bit
    74 00001759 EBEC                <1>     jmp short .switchScan
    75                              <1> .notWideSw:
    76 0000175B 3C50                <1>     cmp al, "P" ;Pause mode?
    77 0000175D 0F8559FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    78 00001763 800DE7ECFFFF02      <1>     or byte [dirPrnType], 2 ;Set correct bit
    79 0000176A EBDB                <1>     jmp short .switchScan
    80                              <1> .switchScanDone:
    81                              <1> ;If no args, only switches, we search CWD
    82                              <1> ;If one arg, search that 
    83                              <1> ;If more than one, fail
    84 0000176C 488D351FEAFFFF      <1>     lea rsi, cmdBuffer + 2
    85 00001773 E8C1120000          <1>     call skipSpaces ;Skip leading spaces
    86 00001778 4881C603000000      <1>     add rsi, 3  ;Go past the DIR (always three chars)
    87                              <1> .lp:
    88 0000177F E8B5120000          <1>     call skipSpaces ;Skip spaces after
    89 00001784 AC                  <1>     lodsb   ;Get first non space char
    90 00001785 E8A8120000          <1>     call isALEndOfCommand   ;If this is the end char CR or "|", exit
    91 0000178A 744A                <1>     jz .eocNoNull
    92 0000178C 3C3E                <1>     cmp al, ">"
    93 0000178E 7446                <1>     je .eocNoNull
    94 00001790 3C3C                <1>     cmp al, "<"
    95 00001792 7442                <1>     je .eocNoNull
    96 00001794 3A0592E8FFFF        <1>     cmp al, byte [switchChar]  ;Is al a switch char?
    97 0000179A 7509                <1>     jne .notSwitch
    98                              <1>     ;Now we skip the switch if it was a switch
    99 0000179C E839120000          <1>     call findTerminatorOrEOC    ;Go past the switch
   100 000017A1 7233                <1>     jc .eocNoNull  ;If we reach the EOC, exit,
   101 000017A3 EBDA                <1>     jmp short .lp
   102                              <1> .notSwitch:
   103                              <1>     ;If not a switch, should be a path. Copy to buffer and keep searching
   104 000017A5 803D29EDFFFF00      <1>     cmp byte [dirPathArg], 0    ;If a second path provided, error
   105 000017AC 0F851CFFFFFF        <1>     jne badArgError
   106 000017B2 488D3D1CEDFFFF      <1>     lea rdi, dirPathArg ;Store the path to search here AS WRITTEN BY USER
   107 000017B9 48FFCE              <1>     dec rsi ;Go back to the start of the string
   108                              <1> .nameCopy:
   109 000017BC AC                  <1>     lodsb
   110 000017BD E870120000          <1>     call isALEndOfCommand
   111 000017C2 740F                <1>     jz .eocReached
   112 000017C4 E846120000          <1>     call isALterminator
   113 000017C9 7403                <1>     jz .terminateCopy
   114 000017CB AA                  <1>     stosb
   115 000017CC EBEE                <1>     jmp short .nameCopy
   116                              <1> .terminateCopy:
   117 000017CE 31C0                <1>     xor eax, eax
   118 000017D0 AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   119 000017D1 EBAC                <1>     jmp short .lp ;Now search if another 
   120                              <1> .eocReached:
   121 000017D3 31C0                <1>     xor eax, eax
   122 000017D5 AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   123                              <1> .eocNoNull:
   124 000017D6 803DF8ECFFFF00      <1>     cmp byte [dirPathArg], 0    ;If no path provided, use CWD for current drive
   125 000017DD 7434                <1>     je .currentDrv
   126                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   127 000017DF 488D35EFECFFFF      <1>     lea rsi, dirPathArg
   128 000017E6 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   129 000017EA 7527                <1>     jne .currentDrv
   130                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   131 000017EC 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   132 000017F1 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   133 000017F5 B801290000          <1>     mov eax, 2901h   ;Parse filename
   134 000017FA CD41                <1>     int 41h
   135 000017FC 3CFF                <1>     cmp al, -1
   136 000017FE 0F84C1FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   137                              <1>     ;Else the drive in the fcb is valid
   138 00001804 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   139 00001809 FEC8                <1>     dec al  ;Convert to 0 based drive number
   140 0000180B 880543ECFFFF        <1>     mov byte [dirDrv], al
   141 00001811 EB0B                <1>     jmp short .dirPrintVol
   142                              <1> .currentDrv:
   143 00001813 E8AE110000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   144 00001818 880536ECFFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   145                              <1> .dirPrintVol:
   146 0000181E 0FB6052FECFFFF      <1>     movzx eax, byte [dirDrv] 
   147 00001825 E8800A0000          <1>     call volume.dirEP
   148 0000182A 803DA4ECFFFF00      <1>     cmp byte [dirPathArg], 0    ;Null path here, 
   149 00001831 7409                <1>     je .printCWD
   150 00001833 803D9EECFFFF00      <1>     cmp byte [dirPathArg + 3], 0    ;Was this X:,0?
   151 0000183A 7400                <1>     je .printCWD
   152                              <1>     ;Here we have a path
   153                              <1>     ;Temp measure, we just fall through ignoring the path provided
   154                              <1> .printCWD:
   155 0000183C 8A1512ECFFFF        <1>     mov dl, byte [dirDrv]
   156 00001842 88D0                <1>     mov al, dl
   157 00001844 0441                <1>     add al, "A"
   158 00001846 B43A                <1>     mov ah, ":"
   159 00001848 66890582EBFFFF      <1>     mov word [searchSpec], ax
   160 0000184F 8A05D6E7FFFF        <1>     mov al, byte [pathSep]
   161 00001855 880578EBFFFF        <1>     mov byte [searchSpec + 2], al
   162 0000185B 488D3572EBFFFF      <1>     lea rsi, searchSpec + 3  ;Make space for a X:"\"
   163 00001862 B447                <1>     mov ah, 47h ;Get Current Working Directory
   164 00001864 FEC2                <1>     inc dl  ;Convert to 1 based number
   165 00001866 CD41                <1>     int 41h
   166 00001868 488D3D62EBFFFF      <1>     lea rdi, searchSpec
   167 0000186F E857110000          <1>     call strlen
   168 00001874 FFC9                <1>     dec ecx
   169 00001876 C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   170 0000187A 488D1540F2FFFF      <1>     lea rdx, dirMain
   171 00001881 B409                <1>     mov ah, 09h
   172 00001883 CD41                <1>     int 41h
   173 00001885 4889FA              <1>     mov rdx, rdi    ;Print the current directory we are working on
   174 00001888 B409                <1>     mov ah, 09h
   175 0000188A CD41                <1>     int 41h
   176 0000188C 488D151FEFFFFF      <1>     lea rdx, crlf2
   177 00001893 B409                <1>     mov ah, 09h
   178 00001895 CD41                <1>     int 41h
   179 00001897 E801000000          <1>     call .searchForFile
   180                              <1>     return
    19                              <2> %%_ret:
    20 0000189C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   181                              <1>     ;If we get no path spec or just a X: path spec then we 
   182                              <1>     ; search the current working directory for that pathspec
   183                              <1>     ;If we get an actual pathspec, we first save the CWD for that drive
   184                              <1>     ; and then we try to make the pathspec the CWD. 
   185                              <1>     ;   If it works, we then search *.* in that folder and return the og CWD.
   186                              <1>     ;   If it fails, we then search one level up, for the search pattern
   187                              <1>     ;    that we compute.
   188                              <1> 
   189                              <1>     
   190                              <1>     ;Now we need to print the path to the folder we will be searching in
   191                              <1> .searchForFile:
   192                              <1>     ;Now we search for the files
   193                              <1>     ;RCX must have the number of chars to the end of the pathspec
   194 0000189D 488D3D2DEBFFFF      <1>     lea rdi, searchSpec
   195 000018A4 8A0581E7FFFF        <1>     mov al, byte [pathSep]
   196 000018AA 38440FFF            <1>     cmp byte [rdi + rcx - 1], al
   197 000018AE 7405                <1>     je .noAddSlash  ;Deals with special case of root dir
   198 000018B0 88040F              <1>     mov byte [rdi + rcx], al
   199 000018B3 FFC1                <1>     inc ecx
   200                              <1> .noAddSlash:
   201 000018B5 488D3C0F            <1>     lea rdi, qword [rdi + rcx]
   202 000018B9 488D3595ECFFFF      <1>     lea rsi, dirSrchPat
   203 000018C0 4889FA              <1>     mov rdx, rdi    ;Ptr to search for in rdx
   204 000018C3 48A5                <1>     movsq
   205 000018C5 A5                  <1>     movsd
   206 000018C6 30C0                <1>     xor al, al
   207 000018C8 AA                  <1>     stosb   ;Store the terminating null
   208 000018C9 B911000000          <1>     mov ecx, dirReadOnly | dirDirectory
   209 000018CE B44E                <1>     mov ah, 4Eh ;Find first
   210 000018D0 CD41                <1>     int 41h
   211 000018D2 720B                <1>     jc .dirNoMoreFiles
   212                              <1> .findNext:
   213 000018D4 E878000000          <1>     call .dirPrintFileData  ;Print the file information
   214 000018D9 B44F                <1>     mov ah, 4Fh
   215 000018DB CD41                <1>     int 41h
   216 000018DD 73F5                <1>     jnc .findNext 
   217                              <1> .dirNoMoreFiles:
   218 000018DF F6056BEBFFFF01      <1>     test byte [dirPrnType], 1
   219 000018E6 740B                <1>     jz .dirNoEndNewLine
   220 000018E8 488D15C0EEFFFF      <1>     lea rdx, crlf   ;Only need this for /W
   221 000018EF B409                <1>     mov ah, 09h
   222 000018F1 CD41                <1>     int 41h
   223                              <1> .dirNoEndNewLine:
   224                              <1>     ;Now we print the number of files and the number of bytes on the disk
   225 000018F3 488D157FF4FFFF      <1>     lea rdx, fourSpc
   226 000018FA B409                <1>     mov ah, 09h
   227 000018FC CD41                <1>     int 41h
   228 000018FE B409                <1>     mov ah, 09h ;Print four Spaces twice
   229 00001900 CD41                <1>     int 41h
   230 00001902 0FB6054AEBFFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   231 00001909 E8CA120000          <1>     call printDecimalWord
   232 0000190E 488D15E5EFFFFF      <1>     lea rdx, dirOk
   233 00001915 B409                <1>     mov ah, 09h
   234 00001917 CD41                <1>     int 41h
   235 00001919 488D155EF4FFFF      <1>     lea rdx, threeSpc
   236 00001920 B409                <1>     mov ah, 09h
   237 00001922 CD41                <1>     int 41h
   238 00001924 B800360000          <1>     mov eax, 3600h ;Get disk info
   239 00001929 8A1525EBFFFF        <1>     mov dl, byte [dirDrv]
   240 0000192F FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   241 00001931 CD41                <1>     int 41h ;Get disk free space info
   242 00001933 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   243 00001936 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   244 00001939 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   245 0000193B F7E1                <1>     mul ecx ;Get bytes per cluster
   246 0000193D 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   247                              <1>     ;rax now has the number of free bytes on the disk
   248 00001940 E893120000          <1>     call printDecimalWord
   249 00001945 488D15B8EFFFFF      <1>     lea rdx, bytesOk
   250 0000194C B409                <1>     mov ah, 09h
   251 0000194E CD41                <1>     int 41h
   252                              <1>     return
    19                              <2> %%_ret:
    20 00001950 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   253                              <1> 
   254                              <1> .dirPrintFileData:
   255                              <1> ;Use fcbCmdSpec to build the file name with space
   256                              <1> ;Start by print the name (same for both cases)
   257                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   258 00001951 F60582E7FFFF06      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles
   259                              <1>     retnz   ;Simply return if either bit is set
    51                              <2> cret nz
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001958 75(50)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   260 0000195A 488D3582E7FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   261 00001961 488D3DF7E8FFFF      <1>     lea rdi, fcbCmdSpec
   262 00001968 E843110000          <1>     call asciiFilenameToFCB
   263 0000196D 488D15EBE8FFFF      <1>     lea rdx, fcbCmdSpec
   264 00001974 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   265 00001979 BB01000000          <1>     mov ebx, 1  ;STDOUT
   266 0000197E B440                <1>     mov ah, 40h ;Write handle
   267 00001980 CD41                <1>     int 41h
   268 00001982 52                  <1>     push rdx
   269 00001983 B220                <1>     mov dl, " "
   270 00001985 B402                <1>     mov ah, 02h ;Print char
   271 00001987 CD41                <1>     int 41h
   272 00001989 5A                  <1>     pop rdx
   273 0000198A 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   274 00001991 B903000000          <1>     mov ecx, 3  ;Print three chars
   275 00001996 BB01000000          <1>     mov ebx, 1  ;STDOUT
   276 0000199B B440                <1>     mov ah, 40h ;Write handle
   277 0000199D CD41                <1>     int 41h
   278 0000199F F605ABEAFFFF01      <1>     test byte [dirPrnType], 1
   279 000019A6 0F85A8000000        <1>     jnz .widePrint
   280                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   281                              <1>     ;Now check if a DIR
   282 000019AC F60527E7FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   283 000019B3 7418                <1>     jz .dirPrintNotDir
   284 000019B5 488D1556EFFFFF      <1>     lea rdx, dirLbl
   285 000019BC B409                <1>     mov ah, 09h
   286 000019BE CD41                <1>     int 41h
   287 000019C0 488D15B7F3FFFF      <1>     lea rdx, threeSpc
   288 000019C7 B409                <1>     mov ah, 09h
   289 000019C9 CD41                <1>     int 41h
   290 000019CB EB4F                <1>     jmp short .dirPrintFileDT
   291                              <1> .dirPrintNotDir:
   292                              <1> ;Here we print the file size
   293 000019CD B220                <1>     mov dl, " "
   294 000019CF B402                <1>     mov ah, 02h
   295 000019D1 CD41                <1>     int 41h
   296 000019D3 8B0506E7FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   297 000019D9 E86B120000          <1>     call getDecimalWord
   298 000019DE 4889CB              <1>     mov rbx, rcx
   299 000019E1 51                  <1>     push rcx
   300 000019E2 480FCB              <1>     bswap rbx
   301 000019E5 B908000000          <1>     mov ecx, 8
   302                              <1> .dirPrintFileSizePrep:
   303 000019EA 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   304 000019EC 7514                <1>     jne .dirPrintFileSize
   305 000019EE B402                <1>     mov ah, 02h
   306 000019F0 B220                <1>     mov dl, " "
   307 000019F2 CD41                <1>     int 41h
   308 000019F4 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   309 000019F8 FFC9                <1>     dec ecx
   310 000019FA 81F901000000        <1>     cmp ecx, 1
   311 00001A00 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   312                              <1> .dirPrintFileSize:
   313 00001A02 5B                  <1>     pop rbx
   314                              <1> .dirPrintFileSizeLoop:
   315 00001A03 88DA                <1>     mov dl, bl
   316 00001A05 B402                <1>     mov ah, 02h
   317 00001A07 CD41                <1>     int 41h
   318 00001A09 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   319 00001A0D FFC9                <1>     dec ecx
   320 00001A0F 75F2                <1>     jnz .dirPrintFileSizeLoop
   321 00001A11 488D156AF3FFFF      <1>     lea rdx, twoSpc
   322 00001A18 B409                <1>     mov ah, 09h
   323 00001A1A CD41                <1>     int 41h
   324                              <1> .dirPrintFileDT:
   325 00001A1C B220                <1>     mov dl, " "
   326 00001A1E B402                <1>     mov ah, 02h
   327 00001A20 CD41                <1>     int 41h
   328 00001A22 0FB705B4E6FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   329 00001A29 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   330 00001A2B E8EC0C0000          <1>     call printDate
   331 00001A30 488D154BF3FFFF      <1>     lea rdx, twoSpc
   332 00001A37 B409                <1>     mov ah, 09h
   333 00001A39 CD41                <1>     int 41h
   334 00001A3B 0FB70599E6FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   335 00001A42 E8F70D0000          <1>     call printTime
   336 00001A47 488D1561EDFFFF      <1>     lea rdx, crlf
   337 00001A4E B409                <1>     mov ah, 09h
   338 00001A50 CD41                <1>     int 41h
   339 00001A52 EB0B                <1>     jmp short .dirPrintNameExit
   340                              <1> .widePrint:
   341                              <1> ;If /W, print name space ext space space space space
   342 00001A54 488D151EF3FFFF      <1>     lea rdx, fourSpc
   343 00001A5B B409                <1>     mov ah, 09h ;Print string
   344 00001A5D CD41                <1>     int 41h
   345                              <1> .dirPrintNameExit:
   346 00001A5F FE05EEE9FFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   347 00001A65 FE05E7E9FFFF        <1>     inc byte [dirLineCtr]
   348 00001A6B 803DE0E9FFFF17      <1>     cmp byte [dirLineCtr], 23
   349                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 00001A72 7401                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 00001A74 C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   350 00001A75 488D15BDEEFFFF      <1>     lea rdx, pauseMes
   351 00001A7C B409                <1>     mov ah, 09h
   352 00001A7E CD41                <1>     int 41h
   353 00001A80 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   354 00001A82 CD41                <1>     int 41h
   355 00001A84 C605C7E9FFFF00      <1>     mov byte [dirLineCtr], 0
   356 00001A8B 488D151DEDFFFF      <1>     lea rdx, crlf   ;Force new line
   357 00001A92 B409                <1>     mov ah, 09h
   358 00001A94 CD41                <1>     int 41h
   359                              <1>     return
    19                              <2> %%_ret:
    20 00001A96 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   360                              <1> 
   361                              <1> chdir:
   362 00001A97 F60511E6FFFFFF      <1>     test byte [arg1Flg], -1
   363 00001A9E 754D                <1>     jnz .changeDir
   364                              <1>     ;Print CWD
   365                              <1> .printCWD:
   366 00001AA0 E87A0E0000          <1>     call putCWDInPrompt ;Exactly the same procedure
   367 00001AA5 E85C0C0000          <1>     call printCRLF
   368                              <1>     return
    19                              <2> %%_ret:
    20 00001AAA C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   369                              <1> .printDiskCWD:
   370                              <1> ;Print CWD for a specified drive
   371 00001AAB 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   372 00001AAF 88D0                <1>     mov al, dl
   373 00001AB1 0440                <1>     add al, "@" ;Get the UC letter
   374 00001AB3 B43A                <1>     mov ah, ":"
   375 00001AB5 488D3D15E9FFFF      <1>     lea rdi, searchSpec
   376 00001ABC 66AB                <1>     stosw   ;Store X:, rdi+=2
   377 00001ABE 8A0567E5FFFF        <1>     mov al, byte [pathSep]
   378 00001AC4 AA                  <1>     stosb   ;Store pathSep, inc rdi
   379 00001AC5 B447                <1>     mov ah, 47h ;Get Current Working Directory
   380 00001AC7 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   381 00001ACA CD41                <1>     int 41h
   382 00001ACC E8FA0E0000          <1>     call strlen
   383 00001AD1 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   384 00001AD7 B440                <1>     mov ah, 40h ;Write to handle
   385 00001AD9 BB01000000          <1>     mov ebx, 1  ;STDOUT
   386 00001ADE 488D15ECE8FFFF      <1>     lea rdx, searchSpec
   387 00001AE5 CD41                <1>     int 41h
   388 00001AE7 E81A0C0000          <1>     call printCRLF
   389                              <1>     return
    19                              <2> %%_ret:
    20 00001AEC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   390                              <1> .changeDir:
   391 00001AED 8A05BEE5FFFF        <1>     mov al, byte [arg1FCBret]
   392 00001AF3 3CFF                <1>     cmp al, -1 
   393 00001AF5 0F84CAFBFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   394 00001AFB 4180785D20          <1>     cmp byte [r8 + fcb1 + fcb.filename], " "
   395 00001B00 7520                <1>     jne .getFQPath
   396                              <1>     ;Now we double check that on the command line we have . or ..
   397 00001B02 0FB605A7E5FFFF      <1>     movzx eax, byte [arg1Off]
   398 00001B09 488D3580E6FFFF      <1>     lea rsi, cmdBuffer
   399 00001B10 4801C6              <1>     add rsi, rax
   400 00001B13 8A0512E5FFFF        <1>     mov al, byte [pathSep]
   401 00001B19 3806                <1>     cmp byte [rsi], al  ;Is the first char a pathsep?
   402 00001B1B 7405                <1>     je .getFQPath
   403 00001B1D 803E2E              <1>     cmp byte [rsi], "."
   404 00001B20 7589                <1>     jne .printDiskCWD
   405                              <1>     ;If the path is . or .., its acceptable, else fail
   406                              <1> .getFQPath:
   407 00001B22 E813100000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   408 00001B27 0F82BCFBFFFF        <1>     jc badDirError  ;If this returns CF=CY, its a badDir
   409 00001B2D 488D159DE8FFFF      <1>     lea rdx, searchSpec
   410 00001B34 B43B                <1>     mov ah, 3Bh ;CHDIR
   411 00001B36 CD41                <1>     int 41h
   412 00001B38 0F82ABFBFFFF        <1>     jc badDirError
   413                              <1>     return
    19                              <2> %%_ret:
    20 00001B3E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   414                              <1> 
   415                              <1> mkdir:
   416 00001B3F F60569E5FFFFFF      <1>     test byte [arg1Flg], -1
   417 00001B46 0F8482FBFFFF        <1>     jz badArgError
   418 00001B4C F6055FE5FFFFFF      <1>     test byte [arg2Flg], -1
   419 00001B53 0F8575FBFFFF        <1>     jnz badArgError
   420                              <1>     ;We have exactly one argument
   421 00001B59 8A0552E5FFFF        <1>     mov al, byte [arg1FCBret]
   422 00001B5F 3CFF                <1>     cmp al, -1 
   423 00001B61 0F845EFBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   424 00001B67 E8CE0F0000          <1>     call buildCommandPath
   425 00001B6C 488D155EE8FFFF      <1>     lea rdx, searchSpec
   426 00001B73 B800390000          <1>     mov eax, 3900h  ;MKDIR
   427 00001B78 CD41                <1>     int 41h
   428                              <1>     retnc
    67                              <2> cret nc
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001B7A 73(3E)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   429                              <1> .badMake:   ;Else, bad make
   430 00001B7C 488D15EAEEFFFF      <1>     lea rdx, badMD
   431 00001B83 B800090000          <1>     mov eax, 0900h
   432 00001B88 CD41                <1>     int 41h
   433                              <1>     return
    19                              <2> %%_ret:
    20 00001B8A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   434                              <1> 
   435                              <1> rmdir:
   436 00001B8B F6051DE5FFFFFF      <1>     test byte [arg1Flg], -1
   437 00001B92 0F8436FBFFFF        <1>     jz badArgError
   438 00001B98 F60513E5FFFFFF      <1>     test byte [arg2Flg], -1
   439 00001B9F 0F8529FBFFFF        <1>     jnz badArgError
   440                              <1>     ;We have exactly one argument
   441 00001BA5 8A0506E5FFFF        <1>     mov al, byte [arg1FCBret]
   442 00001BAB 3CFF                <1>     cmp al, -1 
   443 00001BAD 0F8412FBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   444 00001BB3 E8820F0000          <1>     call buildCommandPath
   445 00001BB8 488D1512E8FFFF      <1>     lea rdx, searchSpec
   446 00001BBF B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   447 00001BC4 CD41                <1>     int 41h
   448                              <1>     retnc   ;Return if not carry
    67                              <2> cret nc
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001BC6 73(8A)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   449                              <1> .badRemove:   ;Else, bad make
   450 00001BC8 488D15BBEEFFFF      <1>     lea rdx, badRD
   451 00001BCF B800090000          <1>     mov eax, 0900h
   452 00001BD4 CD41                <1>     int 41h
   453                              <1>     return
    19                              <2> %%_ret:
    20 00001BD6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   454                              <1> 
   455                              <1> copy:
   456 00001BD7 F605D1E4FFFFFF      <1>     test byte [arg1Flg], -1
   457 00001BDE 0F84EAFAFFFF        <1>     jz badArgError
   458 00001BE4 F605C7E4FFFFFF      <1>     test byte [arg2Flg], -1
   459 00001BEB 0F84DDFAFFFF        <1>     jz badArgError
   460 00001BF1 488D3598E5FFFF      <1>     lea rsi, cmdBuffer
   461 00001BF8 0FB605B1E4FFFF      <1>     movzx eax, byte [arg1Off]
   462 00001BFF 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   463                              <1>     ;rsi points to terminating char
   464 00001C02 AC                  <1>     lodsb   ;Get first char in AL
   465 00001C03 48FFCE              <1>     dec rsi ;Go back to this char
   466 00001C06 E8270E0000          <1>     call isALEndOfCommand
   467 00001C0B 0F82ABFAFFFF        <1>     jc badParamError
   468 00001C11 488D3D61E9FFFF      <1>     lea rdi, sourcePath ;Store this in sourcePath
   469                              <1> .copyName1:
   470 00001C18 AC                  <1>     lodsb
   471 00001C19 E8140E0000          <1>     call isALEndOfCommand
   472 00001C1E 0F8498FAFFFF        <1>     je badParamError
   473 00001C24 E8E60D0000          <1>     call isALterminator
   474 00001C29 7403                <1>     jz .endOfName1
   475 00001C2B AA                  <1>     stosb
   476 00001C2C EBEA                <1>     jmp short .copyName1
   477                              <1> .endOfName1:
   478 00001C2E 31C0                <1>     xor eax, eax
   479 00001C30 AA                  <1>     stosb   ;Store this 0 at rdi
   480 00001C31 488D3558E5FFFF      <1>     lea rsi, cmdBuffer
   481 00001C38 0FB60574E4FFFF      <1>     movzx eax, byte [arg2Off]
   482 00001C3F 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   483 00001C42 AC                  <1>     lodsb   ;Get first char in AL
   484 00001C43 48FFCE              <1>     dec rsi ;Go back to this char
   485 00001C46 E8E70D0000          <1>     call isALEndOfCommand
   486 00001C4B 0F826BFAFFFF        <1>     jc badParamError
   487 00001C51 488D3DA1E9FFFF      <1>     lea rdi, destPath
   488                              <1> .copyName2:
   489 00001C58 AC                  <1>     lodsb
   490 00001C59 E8D40D0000          <1>     call isALEndOfCommand
   491 00001C5E 740A                <1>     je .endOfName2
   492 00001C60 E8AA0D0000          <1>     call isALterminator
   493 00001C65 7403                <1>     jz .endOfName2
   494 00001C67 AA                  <1>     stosb
   495 00001C68 EBEE                <1>     jmp short .copyName2
   496                              <1> .endOfName2:
   497 00001C6A 31C0                <1>     xor eax, eax
   498 00001C6C AA                  <1>     stosb   ;Store this 0 at rdi
   499                              <1> ;Before we open, we check if the two filenames are equal
   500                              <1> ; If so, crap out.
   501 00001C6D 488D3505E9FFFF      <1>     lea rsi, sourcePath
   502 00001C74 488D3D7EE9FFFF      <1>     lea rdi, destPath
   503 00001C7B B81E120000          <1>     mov eax, 121Eh
   504 00001C80 CD4F                <1>     int 4Fh
   505 00001C82 0F849C000000        <1>     jz .sameFilename
   506                              <1>     ;Open source with read permission
   507                              <1>     ;Open destination with write permission
   508 00001C88 488D15EAE8FFFF      <1>     lea rdx, sourcePath
   509 00001C8F B8003D0000          <1>     mov eax, 3D00h  ;Read open
   510 00001C94 CD41                <1>     int 41h
   511 00001C96 0F8220FAFFFF        <1>     jc badParamError
   512 00001C9C 668905D6E9FFFF      <1>     mov word [sourceHdl], ax
   513 00001CA3 488D154FE9FFFF      <1>     lea rdx, destPath
   514 00001CAA B8003C0000          <1>     mov eax, 3C00h  ;Create the file
   515 00001CAF 31C9                <1>     xor ecx, ecx    ;No file attributes
   516 00001CB1 CD41                <1>     int 41h
   517 00001CB3 0F8292000000        <1>     jc .badExit
   518 00001CB9 668905BBE9FFFF      <1>     mov word [destHdl], ax
   519 00001CC0 31F6                <1>     xor esi, esi
   520 00001CC2 488D15B4E9FFFF      <1>     lea rdx, copyBuffer
   521                              <1> .copyLoop:
   522 00001CC9 B980000000          <1>     mov ecx, 128
   523 00001CCE 0FB71DA4E9FFFF      <1>     movzx ebx, word [sourceHdl]
   524 00001CD5 B43F                <1>     mov ah, 3Fh ;Read
   525 00001CD7 CD41                <1>     int 41h
   526 00001CD9 7270                <1>     jc .badExit
   527 00001CDB 85C0                <1>     test eax, eax
   528 00001CDD 7418                <1>     jz .okExit
   529 00001CDF 01C6                <1>     add esi, eax
   530                              <1>     ;mov eax, EOF
   531                              <1>     ;mov rdi, rdx
   532                              <1>     ;mov ecx, 128
   533                              <1>     ;repne scasb ;Scan for an EOF
   534                              <1>     ;mov eax, 128
   535                              <1>     ;sub eax, ecx    ;If an EOF found, only print up to it
   536 00001CE1 89C1                <1>     mov ecx, eax
   537 00001CE3 0FB71D91E9FFFF      <1>     movzx ebx, word [destHdl]
   538 00001CEA B440                <1>     mov ah, 40h ;Write
   539 00001CEC CD41                <1>     int 41h
   540 00001CEE 725B                <1>     jc .badExit
   541 00001CF0 3D80000000          <1>     cmp eax, 128    ;Change this for writing from Char devices in ASCII mode
   542 00001CF5 73D2                <1>     jnb .copyLoop
   543                              <1> .okExit:
   544 00001CF7 E832000000          <1>     call .leaveCopyClose
   545 00001CFC 488D15ACEAFFFF      <1>     lea rdx, crlf
   546 00001D03 B409                <1>     mov ah, 09h
   547 00001D05 CD41                <1>     int 41h
   548 00001D07 488D156BF0FFFF      <1>     lea rdx, fourSpc
   549 00001D0E B409                <1>     mov ah, 09h
   550 00001D10 CD41                <1>     int 41h
   551 00001D12 B402                <1>     mov ah, 02h
   552 00001D14 B231                <1>     mov dl, "1" ;1 File(s) copied
   553 00001D16 CD41                <1>     int 41h
   554 00001D18 488D15C9EBFFFF      <1>     lea rdx, copyOk
   555 00001D1F B409                <1>     mov ah, 09h
   556 00001D21 CD41                <1>     int 41h
   557                              <1>     return
    19                              <2> %%_ret:
    20 00001D23 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   558                              <1> .sameFilename:
   559 00001D24 E805000000          <1>     call .leaveCopyClose ;Close the handles
   560 00001D29 E985F9FFFF          <1>     jmp noSelfCopyError
   561                              <1> .leaveCopyClose:
   562 00001D2E 668B1D44E9FFFF      <1>     mov bx, word [sourceHdl]
   563 00001D35 B8003E0000          <1>     mov eax, 3E00h
   564 00001D3A CD41                <1>     int 41h
   565 00001D3C 668B1D38E9FFFF      <1>     mov bx, word [destHdl]
   566 00001D43 B8003E0000          <1>     mov eax, 3E00h
   567 00001D48 CD41                <1>     int 41h
   568                              <1>     return
    19                              <2> %%_ret:
    20 00001D4A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   569                              <1> .badExit:
   570                              <1> ;Prototypically use badParamError for error reporting... sucks I know
   571 00001D4B 668B1D27E9FFFF      <1>     mov bx, word [sourceHdl]
   572 00001D52 6681FBFFFF          <1>     cmp bx, -1
   573 00001D57 7407                <1>     je .skipSource
   574 00001D59 B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
   575 00001D5E CD41                <1>     int 41h
   576                              <1> .skipSource:
   577 00001D60 668B1D14E9FFFF      <1>     mov bx, word [destHdl]
   578 00001D67 6681FBFFFF          <1>     cmp bx, -1
   579 00001D6C 0F844AF9FFFF        <1>     je badParamError
   580 00001D72 B8003E0000          <1>     mov eax, 3E00h
   581 00001D77 CD41                <1>     int 41h
   582 00001D79 E93EF9FFFF          <1>     jmp badParamError
   583                              <1> 
   584                              <1> erase:
   585 00001D7E F6052AE3FFFFFF      <1>     test byte [arg1Flg], -1
   586 00001D85 0F8443F9FFFF        <1>     jz badArgError
   587 00001D8B E8AA0D0000          <1>     call buildCommandPath
   588 00001D90 488D153AE6FFFF      <1>     lea rdx, searchSpec
   589 00001D97 B800410000          <1>     mov eax, 4100h  ;Delete File 
   590 00001D9C 31C9                <1>     xor ecx, ecx
   591 00001D9E CD41                <1>     int 41h
   592 00001DA0 0F8228F9FFFF        <1>     jc badArgError
   593                              <1>     return
    19                              <2> %%_ret:
    20 00001DA6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   594                              <1> date:
   595 00001DA7 488D15E2EBFFFF      <1>     lea rdx, curDate
   596 00001DAE B409                <1>     mov ah, 09h
   597 00001DB0 CD41                <1>     int 41h
   598 00001DB2 B42A                <1>     mov ah, 2Ah ;DOS get date
   599 00001DB4 CD41                <1>     int 41h
   600                              <1> 	;AL = day of the week (0=Sunday)
   601                              <1> 	;CX = year (1980-2099)
   602                              <1> 	;DH = month (1-12)
   603                              <1> 	;DL = day (1-31)
   604 00001DB6 66890DB8E7FFFF      <1>     mov word [td1], cx
   605 00001DBD 8815B4E7FFFF        <1>     mov byte [td3], dl
   606 00001DC3 8835AFE7FFFF        <1>     mov byte [td4], dh
   607 00001DC9 0FB6C0              <1>     movzx eax, al
   608 00001DCC 89C3                <1>     mov ebx, eax
   609 00001DCE D1E3                <1>     shl ebx, 1   ;Multiply by 2
   610 00001DD0 01D8                <1>     add eax, ebx ;Make it 3 times 
   611 00001DD2 488D1593EBFFFF      <1>     lea rdx, dayName
   612 00001DD9 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   613 00001DDD B903000000          <1>     mov ecx, 3  ;Print three chars
   614 00001DE2 BB01000000          <1>     mov ebx, 1  ;STDOUT
   615 00001DE7 B440                <1>     mov ah, 40h ;Write to handle
   616 00001DE9 CD41                <1>     int 41h
   617 00001DEB B220                <1>     mov dl, " "
   618 00001DED B402                <1>     mov ah, 02h
   619 00001DEF CD41                <1>     int 41h
   620                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   621                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   622                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   623 00001DF1 0FB7057DE7FFFF      <1>     movzx eax, word [td1]   ;Get this word
   624 00001DF8 C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   625 00001DFB 0FB61D76E7FFFF      <1>     movzx ebx, byte [td4]
   626 00001E02 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   627 00001E05 09D8                <1>     or eax, ebx ;Add this date to eax
   628 00001E07 0FB61D69E7FFFF      <1>     movzx ebx, byte [td3]
   629 00001E0E 09D8                <1>     or eax, ebx
   630 00001E10 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   631 00001E15 E802090000          <1>     call printDate
   632                              <1> 
   633 00001E1A 488D1580EBFFFF      <1>     lea rdx, newDate
   634 00001E21 B409                <1>     mov ah, 09h
   635 00001E23 CD41                <1>     int 41h
   636 00001E25 488D1594EBFFFF      <1>     lea rdx, ukDate
   637 00001E2C 488D0580EBFFFF      <1>     lea rax, usDate
   638 00001E33 488D1D93EBFFFF      <1>     lea rbx, jpDate
   639 00001E3A 803DF5E1FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   640 00001E41 480F47D3            <1>     cmova rdx, rbx
   641 00001E45 480F42D0            <1>     cmovb rdx, rax
   642 00001E49 B409                <1>     mov ah, 09h
   643 00001E4B CD41                <1>     int 41h
   644                              <1> 
   645 00001E4D 498D9080000000      <1>     lea rdx, qword [r8 + cmdLineCnt]
   646 00001E54 B40A                <1>     mov ah, 0Ah
   647 00001E56 CD41                <1>     int 41h
   648 00001E58 52                  <1>     push rdx
   649 00001E59 488D154FE9FFFF      <1>     lea rdx, crlf
   650 00001E60 B409                <1>     mov ah, 09h
   651 00001E62 CD41                <1>     int 41h
   652 00001E64 5A                  <1>     pop rdx
   653 00001E65 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   654                              <1>     rete    ;Exit!
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 00001E69 7501                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 00001E6B C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   655                              <1>     return
    19                              <2> %%_ret:
    20 00001E6C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   656                              <1> 
   657                              <1> time:
   658 00001E6D 488D1575EBFFFF      <1>     lea rdx, curTime
   659 00001E74 B409                <1>     mov ah, 09h
   660 00001E76 CD41                <1>     int 41h
   661 00001E78 B42C                <1>     mov ah, 2Ch ;DOS get time
   662 00001E7A CD41                <1>     int 41h
   663                              <1>     ;CH = hour (0-23)
   664                              <1> 	;CL = minutes (0-59)
   665                              <1> 	;DH = seconds (0-59)
   666                              <1> 	;DL = hundredths (0-99)
   667 00001E7C 880DF3E6FFFF        <1>     mov byte [td1], cl
   668 00001E82 882DEEE6FFFF        <1>     mov byte [td2], ch
   669 00001E88 8815E9E6FFFF        <1>     mov byte [td3], dl
   670 00001E8E 8835E4E6FFFF        <1>     mov byte [td4], dh
   671 00001E94 0FB6C5              <1>     movzx eax, ch
   672 00001E97 E8140A0000          <1>     call printTime.printHours
   673                              <1> 
   674 00001E9C 8A15A1E1FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   675 00001EA2 B402                <1>     mov ah, 02h
   676 00001EA4 CD41                <1>     int 41h
   677                              <1> 
   678 00001EA6 0FB605C8E6FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   679 00001EAD E8EE090000          <1>     call printTime.printMinutesAlt
   680                              <1> 
   681 00001EB2 8A158BE1FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   682 00001EB8 B402                <1>     mov ah, 02h
   683 00001EBA CD41                <1>     int 41h
   684                              <1> 
   685 00001EBC 0FB605B5E6FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   686 00001EC3 E8D8090000          <1>     call printTime.printMinutesAlt
   687                              <1> 
   688 00001EC8 B22E                <1>     mov dl, "."
   689 00001ECA B402                <1>     mov ah, 02h
   690 00001ECC CD41                <1>     int 41h
   691                              <1> 
   692 00001ECE 0FB605A2E6FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   693 00001ED5 E8C6090000          <1>     call printTime.printMinutesAlt
   694                              <1> 
   695 00001EDA 488D1519EBFFFF      <1>     lea rdx, newTime
   696 00001EE1 B409                <1>     mov ah, 09h
   697 00001EE3 CD41                <1>     int 41h
   698                              <1> 
   699 00001EE5 498D9080000000      <1>     lea rdx, qword [r8 + cmdLineCnt]
   700 00001EEC B40A                <1>     mov ah, 0Ah
   701 00001EEE CD41                <1>     int 41h
   702 00001EF0 52                  <1>     push rdx
   703 00001EF1 488D15B7E8FFFF      <1>     lea rdx, crlf
   704 00001EF8 B409                <1>     mov ah, 09h
   705 00001EFA CD41                <1>     int 41h
   706 00001EFC 5A                  <1>     pop rdx
   707 00001EFD 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   708                              <1>     rete    ;Exit!
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 00001F01 7501                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 00001F03 C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   709                              <1>     return
    19                              <2> %%_ret:
    20 00001F04 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   710                              <1> ctty:
   711 00001F05 F605A3E1FFFFFF      <1>     test byte [arg1Flg], -1
   712 00001F0C 0F84BCF7FFFF        <1>     jz badArgError
   713 00001F12 F60599E1FFFFFF      <1>     test byte [arg2Flg], -1
   714 00001F19 0F85AFF7FFFF        <1>     jnz badArgError
   715 00001F1F 488D356AE2FFFF      <1>     lea rsi, cmdBuffer
   716 00001F26 0FB60583E1FFFF      <1>     movzx eax, byte [arg1Off]
   717 00001F2D 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
   718 00001F30 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
   719 00001F34 750F                <1>     jne .noDrive
   720 00001F36 0FB60574E1FFFF      <1>     movzx eax, byte [arg1FCBret]
   721 00001F3D 3CFF                <1>     cmp al, -1
   722 00001F3F 0F8480F7FFFF        <1>     je badDriveError
   723                              <1> .noDrive:
   724                              <1>     ;Now we open the provided file
   725 00001F45 E8730D0000          <1>     call copyArgumentToSearchSpec
   726 00001F4A 488D1580E4FFFF      <1>     lea rdx, searchSpec
   727 00001F51 B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
   728 00001F56 CD41                <1>     int 41h
   729 00001F58 0F8279F7FFFF        <1>     jc badFileError
   730 00001F5E 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
   731 00001F61 B800440000          <1>     mov eax, 4400h  ;Get device word
   732 00001F66 CD41                <1>     int 41h
   733 00001F68 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
   734 00001F6B 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
   735                              <1>     ;Now we set this handle to be STDIO
   736 00001F6D 80CA03              <1>     or dl, 3    ;Set STDIO bits
   737 00001F70 30F6                <1>     xor dh, dh
   738 00001F72 B801440000          <1>     mov eax, 4401h  ;Now we set the device word
   739 00001F77 CD41                <1>     int 41h
   740                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
   741 00001F79 31C9                <1>     xor ecx, ecx    ;STDIN
   742 00001F7B B446                <1>     mov ah, 46h
   743 00001F7D CD41                <1>     int 41h
   744 00001F7F FFC1                <1>     inc ecx         ;STDOUT
   745 00001F81 B446                <1>     mov ah, 46h
   746 00001F83 CD41                <1>     int 41h
   747 00001F85 FFC1                <1>     inc ecx         ;STDERR
   748 00001F87 B446                <1>     mov ah, 46h
   749 00001F89 CD41                <1>     int 41h
   750 00001F8B B43E                <1>     mov ah, 3Eh ;Now we close the original handle
   751 00001F8D CD41                <1>     int 41h
   752                              <1>     return
    19                              <2> %%_ret:
    20 00001F8F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   753                              <1> .badCharDev:
   754 00001F90 488D1562EBFFFF      <1>     lea rdx, badDev
   755 00001F97 B409                <1>     mov ah, 09h
   756 00001F99 CD41                <1>     int 41h
   757 00001F9B B43E                <1>     mov ah, 3Eh ;Close opened handle
   758 00001F9D CD41                <1>     int 41h
   759                              <1>     return
    19                              <2> %%_ret:
    20 00001F9F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   760                              <1> 
   761                              <1> cls:  
   762 00001FA0 B800440000          <1>     mov eax, 4400h  ;Get device info
   763 00001FA5 BB01000000          <1>     mov ebx, 1      ;for handle 1
   764 00001FAA CD41                <1>     int 41h         ;in dx
   765 00001FAC F7C280000000        <1>     test edx, devCharDev
   766 00001FB2 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   767 00001FB4 F7C210000000        <1>     test edx, charDevFastOut
   768 00001FBA 743E                <1>     jz .doAnsi
   769                              <1>     ;Test if Int 49h uses Int 30h
   770                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   771                              <1>     ;Int 49h MUST be terminated with a IRETQ, within 1024 bytes
   772 00001FBC B849350000          <1>     mov eax, 3549h  ;Get the vector for interrupt 49h
   773 00001FC1 CD41                <1>     int 41h
   774                              <1> .biosCheck:
   775 00001FC3 66813BCD30          <1>     cmp word [rbx], 30CDh
   776 00001FC8 740C                <1>     je .biosConfirmed
   777 00001FCA 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   778 00001FCF 7429                <1>     je .doAnsi
   779 00001FD1 48FFC3              <1>     inc rbx
   780 00001FD4 EBED                <1>     jmp short .biosCheck
   781                              <1> .biosConfirmed:
   782                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   783 00001FD6 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   784 00001FD8 31DB                <1>     xor ebx, ebx
   785 00001FDA CD30                <1>     int 30h
   786 00001FDC B40F                <1>     mov ah, 0Fh ;Get screen mode
   787 00001FDE CD30                <1>     int 30h
   788 00001FE0 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   789 00001FE3 FECA                <1>     dec dl
   790 00001FE5 B619                <1>     mov dh, 25  ;Number of rows is standard
   791 00001FE7 31C0                <1>     xor eax, eax
   792 00001FE9 89C1                <1>     mov ecx, eax
   793 00001FEB B707                <1>     mov bh, 7   ;Screen attributes
   794 00001FED B406                <1>     mov ah, 6   ;Scroll
   795 00001FEF CD30                <1>     int 30h
   796 00001FF1 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   797 00001FF3 B700                <1>     mov bh, 0   ;Page 0
   798 00001FF5 B402                <1>     mov ah, 2
   799 00001FF7 CD30                <1>     int 30h
   800                              <1>     return
    19                              <2> %%_ret:
    20 00001FF9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   801                              <1> .doAnsi:
   802                              <1> ;If an ANSI driver is not installed, this will simply insert blank lines
   803                              <1> ;4 chars in the ansi routine
   804                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   805                              <1> ; understand ANSI codes
   806 00001FFA 488D3574EDFFFF      <1>     lea rsi, ansiCls
   807 00002001 B904000000          <1>     mov ecx, 4
   808 00002006 B406                <1>     mov ah, 06h ;Raw char output
   809                              <1> .ansiLp:
   810 00002008 AC                  <1>     lodsb   ;Get the char in 
   811 00002009 88C2                <1>     mov dl, al
   812 0000200B CD41                <1>     int 41h
   813 0000200D FFC9                <1>     dec ecx
   814 0000200F 75F7                <1>     jnz .ansiLp
   815                              <1>     return
    19                              <2> %%_ret:
    20 00002011 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   816                              <1> 
   817                              <1> break:
   818 00002012 F60596E0FFFFFF      <1>     test byte [arg1Flg], -1
   819 00002019 752D                <1>     jnz .argumentProvided
   820                              <1>     ;Here we just get the status of break
   821 0000201B B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   822 00002020 CD41                <1>     int 41h
   823 00002022 88D3                <1>     mov bl, dl
   824 00002024 488D1570EBFFFF      <1>     lea rdx, breakIs
   825 0000202B B409                <1>     mov ah, 09h
   826 0000202D CD41                <1>     int 41h
   827 0000202F 488D1560EBFFFF      <1>     lea rdx, onMes
   828 00002036 488D0D53EBFFFF      <1>     lea rcx, offMes
   829 0000203D 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   830 0000203F 480F44D1            <1>     cmovz rdx, rcx
   831 00002043 B409                <1>     mov ah, 09h
   832 00002045 CD41                <1>     int 41h
   833                              <1>     return
    19                              <2> %%_ret:
    20 00002047 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   834                              <1> .argumentProvided:
   835 00002048 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   836 0000204C AD                  <1>     lodsd   ;Read the word
   837 0000204D 89C3                <1>     mov ebx, eax
   838 0000204F 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   839 00002054 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   840 00002057 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   841 0000205C 7416                <1>     je .maybeOn
   842 0000205E 663D4F46            <1>     cmp ax, "OF"
   843 00002062 7523                <1>     jne .badOnOff
   844 00002064 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   845 00002069 6681FB4620          <1>     cmp bx, "F "
   846 0000206E 7517                <1>     jne .badOnOff
   847                              <1>     ;Set off
   848 00002070 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   849 00002072 EB0B                <1>     jmp short .setBreak
   850                              <1> .maybeOn:
   851 00002074 663D4F4E            <1>     cmp ax, "ON"
   852 00002078 750D                <1>     jne .badOnOff
   853                              <1>     ;Set on
   854 0000207A BA01000000          <1>     mov edx, 1
   855                              <1> .setBreak:
   856 0000207F B801330000          <1>     mov eax, 3301h  ;Set break
   857 00002084 CD41                <1>     int 41h
   858                              <1>     return
    19                              <2> %%_ret:
    20 00002086 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   859                              <1> .badOnOff:
   860 00002087 488D15F7ECFFFF      <1>     lea rdx, badOnOff
   861 0000208E B409                <1>     mov ah, 09h
   862 00002090 CD41                <1>     int 41h
   863                              <1>     return
    19                              <2> %%_ret:
    20 00002092 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   864                              <1> 
   865                              <1> verify:
   866 00002093 F60515E0FFFFFF      <1>     test byte [arg1Flg], -1
   867 0000209A 752D                <1>     jnz .argumentProvided
   868                              <1>     ;Here we just get the status of break
   869 0000209C B800540000          <1>     mov eax, 5400h  ;Get verify status in al
   870 000020A1 CD41                <1>     int 41h
   871 000020A3 88C3                <1>     mov bl, al
   872 000020A5 488D15F9EAFFFF      <1>     lea rdx, verifyIs
   873 000020AC B409                <1>     mov ah, 09h
   874 000020AE CD41                <1>     int 41h
   875 000020B0 488D15DFEAFFFF      <1>     lea rdx, onMes
   876 000020B7 488D0DD2EAFFFF      <1>     lea rcx, offMes
   877 000020BE 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   878 000020C0 480F44D1            <1>     cmovz rdx, rcx
   879 000020C4 B409                <1>     mov ah, 09h
   880 000020C6 CD41                <1>     int 41h
   881                              <1>     return
    19                              <2> %%_ret:
    20 000020C8 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   882                              <1> .argumentProvided:
   883 000020C9 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   884 000020CD AD                  <1>     lodsd   ;Read the word
   885 000020CE 89C3                <1>     mov ebx, eax
   886 000020D0 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   887 000020D5 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   888 000020D8 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   889 000020DD 7416                <1>     je .maybeOn
   890 000020DF 663D4F46            <1>     cmp ax, "OF"
   891 000020E3 751F                <1>     jne .badOnOff
   892 000020E5 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   893 000020EA 6681FB4620          <1>     cmp bx, "F "
   894 000020EF 7513                <1>     jne .badOnOff
   895                              <1>     ;Set off
   896 000020F1 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
   897 000020F3 EB0A                <1>     jmp short .setVerify
   898                              <1> .maybeOn:
   899 000020F5 663D4F4E            <1>     cmp ax, "ON"
   900 000020F9 7509                <1>     jne .badOnOff
   901                              <1>     ;Set on
   902 000020FB 31C0                <1>     xor eax, eax
   903 000020FD FFC0                <1>     inc eax ;AL=1 => VERIFY is on
   904                              <1> .setVerify:
   905 000020FF B42E                <1>     mov ah, 2Eh  ;Set Verify
   906 00002101 CD41                <1>     int 41h
   907                              <1>     return
    19                              <2> %%_ret:
    20 00002103 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   908                              <1> .badOnOff:
   909 00002104 488D157AECFFFF      <1>     lea rdx, badOnOff
   910 0000210B B409                <1>     mov ah, 09h
   911 0000210D CD41                <1>     int 41h
   912                              <1>     return
    19                              <2> %%_ret:
    20 0000210F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   913                              <1> 
   914                              <1> rename:
   915 00002110 F60598DFFFFFFF      <1>     test byte [arg1Flg], -1
   916 00002117 0F84B1F5FFFF        <1>     jz badArgError
   917 0000211D F6058EDFFFFFFF      <1>     test byte [arg2Flg], -1
   918 00002124 0F84A4F5FFFF        <1>     jz badArgError
   919 0000212A 488D355FE0FFFF      <1>     lea rsi, cmdBuffer
   920 00002131 0FB60578DFFFFF      <1>     movzx eax, byte [arg1Off]
   921 00002138 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   922                              <1>     ;rsi points to terminating char
   923 0000213B AC                  <1>     lodsb   ;Get first char in AL
   924 0000213C 48FFCE              <1>     dec rsi ;Go back to this char
   925 0000213F E8EE080000          <1>     call isALEndOfCommand
   926 00002144 0F8272F5FFFF        <1>     jc badParamError
   927 0000214A 488D3D28E4FFFF      <1>     lea rdi, sourcePath ;Store this in sourcePath
   928                              <1> .copyName1:
   929 00002151 AC                  <1>     lodsb
   930 00002152 E8DB080000          <1>     call isALEndOfCommand
   931 00002157 0F845FF5FFFF        <1>     je badParamError
   932 0000215D E8AD080000          <1>     call isALterminator
   933 00002162 7403                <1>     jz .endOfName1
   934 00002164 AA                  <1>     stosb
   935 00002165 EBEA                <1>     jmp short .copyName1
   936                              <1> .endOfName1:
   937 00002167 31C0                <1>     xor eax, eax
   938 00002169 AA                  <1>     stosb   ;Store this 0 at rdi
   939 0000216A 488D351FE0FFFF      <1>     lea rsi, cmdBuffer
   940 00002171 0FB6053BDFFFFF      <1>     movzx eax, byte [arg2Off]
   941 00002178 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   942 0000217B 807E013A            <1>     cmp byte [rsi + 1], ":" ;If dest path char 2 is :, must be X:, not allowed
   943 0000217F 0F8437F5FFFF        <1>     je badParamError
   944 00002185 AC                  <1>     lodsb   ;Get first char in AL
   945 00002186 48FFCE              <1>     dec rsi ;Go back to this char
   946 00002189 E8A4080000          <1>     call isALEndOfCommand
   947 0000218E 0F8228F5FFFF        <1>     jc badParamError
   948 00002194 488D3D5EE4FFFF      <1>     lea rdi, destPath
   949                              <1> .copyName2:
   950 0000219B AC                  <1>     lodsb
   951 0000219C E891080000          <1>     call isALEndOfCommand
   952 000021A1 740A                <1>     je .endOfName2
   953 000021A3 E867080000          <1>     call isALterminator
   954 000021A8 7403                <1>     jz .endOfName2
   955 000021AA AA                  <1>     stosb
   956 000021AB EBEE                <1>     jmp short .copyName2
   957                              <1> .endOfName2:
   958 000021AD 31C0                <1>     xor eax, eax
   959 000021AF AA                  <1>     stosb   ;Store this 0 at rdi
   960 000021B0 488D15C2E3FFFF      <1>     lea rdx, sourcePath
   961 000021B7 488D3D3BE4FFFF      <1>     lea rdi, destPath
   962 000021BE B800560000          <1>     mov eax, 5600h
   963 000021C3 CD41                <1>     int 41h
   964                              <1>     retnc   ;Return if all oki!
    67                              <2> cret nc
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 000021C5 7201                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 000021C7 C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   965 000021C8 3C0F                <1>     cmp al, errBadDrv
   966 000021CA 0F84F5F4FFFF        <1>     je badDriveError
   967 000021D0 3C0B                <1>     cmp al, errBadFmt
   968 000021D2 0F8411F5FFFF        <1>     je badDirError
   969 000021D8 E903F5FFFF          <1>     jmp badDupFnf
   970                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   971                              <1> touch:
   972                              <1> ;Temporarily used to create files
   973 000021DD F605CBDEFFFFFF      <1>     test byte [arg1Flg], -1
   974 000021E4 0F84E4F4FFFF        <1>     jz badArgError
   975 000021EA E84B090000          <1>     call buildCommandPath
   976 000021EF 488D15DBE1FFFF      <1>     lea rdx, searchSpec
   977 000021F6 B8003C0000          <1>     mov eax, 3C00h  ;Create file 
   978 000021FB 31C9                <1>     xor ecx, ecx
   979 000021FD CD41                <1>     int 41h
   980 000021FF 720B                <1>     jc .touchError
   981 00002201 0FB7D8              <1>     movzx ebx, ax
   982 00002204 B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
   983 00002209 CD41                <1>     int 41h
   984                              <1>     return
    19                              <2> %%_ret:
    20 0000220B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   985                              <1> .touchError:
   986 0000220C 488D1520EBFFFF      <1>     lea rdx, touchErr
   987 00002213 E9D8F4FFFF          <1>     jmp badCmn
   988                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   989                              <1> truename:
   990 00002218 F60590DEFFFFFF      <1>     test byte [arg1Flg], -1
   991 0000221F 0F84A9F4FFFF        <1>     jz badArgError
   992 00002225 E810090000          <1>     call buildCommandPath
   993                              <1>     ;Explicitly call Truename if we remove truename from this function
   994 0000222A 488D3DA0E1FFFF      <1>     lea rdi, searchSpec
   995 00002231 E895070000          <1>     call strlen
   996 00002236 FFC9                <1>     dec ecx ;Don't print terminating null
   997 00002238 488D1592E1FFFF      <1>     lea rdx, searchSpec
   998 0000223F BB01000000          <1>     mov ebx, 01
   999 00002244 B440                <1>     mov ah, 40h
  1000 00002246 CD41                <1>     int 41h
  1001 00002248 E8B9040000          <1>     call printCRLF
  1002                              <1>     return
    19                              <2> %%_ret:
    20 0000224D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1003                              <1> 
  1004                              <1> volume:
  1005 0000224E 488D353DDFFFFF      <1>     lea rsi, cmdBuffer + 2  ;Get the command buffer
  1006 00002255 E8DF070000          <1>     call skipSpaces
  1007 0000225A 4881C603000000      <1>     add rsi, 3  ;Go past the VOL command
  1008 00002261 E8D3070000          <1>     call skipSpaces
  1009 00002266 AC                  <1>     lodsb   ;Get the first char, and point rsi to next char
  1010 00002267 E8C6070000          <1>     call isALEndOfCommand   ;If this char is end of command, use current drive
  1011 0000226C 7507                <1>     jnz .checkDriveLetter
  1012 0000226E E853070000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1013 00002273 EB35                <1>     jmp short .dirEP
  1014                              <1> .checkDriveLetter:
  1015 00002275 803E3A              <1>     cmp byte [rsi], ":" ;If this is not a :, fail
  1016 00002278 0F8547F4FFFF        <1>     jne badDriveError
  1017 0000227E 4889F7              <1>     mov rdi, rsi    ;Save start of drive spec in rsi
  1018 00002281 48FFC6              <1>     inc rsi  ;Go past the X: spec
  1019 00002284 E8B0070000          <1>     call skipSpaces
  1020 00002289 AC                  <1>     lodsb   ;Get the non-space char in al
  1021 0000228A E8A3070000          <1>     call isALEndOfCommand   ;The next non-space char must be terminator
  1022 0000228F 0F8530F4FFFF        <1>     jne badDriveError
  1023                              <1> ;This argument should've been parsed into FCB1 so use that result
  1024 00002295 8A0516DEFFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1025 0000229B A8FF                <1>     test al, -1
  1026 0000229D 0F8522F4FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1027 000022A3 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1028 000022A8 FFC8                <1>     dec eax ;Convert to 0 based number
  1029                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al
  1030 000022AA 0541000000          <1>     add eax, "A" ;Get ASCII representation of 0 based number
  1031 000022AF 8805B9E2FFFF        <1>     mov byte [volPathBuf], al   ;Store ASCII letter here
  1032 000022B5 488D1509DEFFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
  1033 000022BC B41A                <1>     mov ah, 1Ah
  1034 000022BE CD41                <1>     int 41h
  1035 000022C0 488D15A7E2FFFF      <1>     lea rdx, volPathBuf
  1036 000022C7 66B90800            <1>     mov cx, dirVolumeID
  1037 000022CB B44E                <1>     mov ah, 4Eh ;Find first
  1038 000022CD CD41                <1>     int 41h
  1039 000022CF 7221                <1>     jc .skipVolLbl
  1040 000022D1 488D350BDEFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
  1041 000022D8 488D3D82E2FFFF      <1>     lea rdi, volLblSpc
  1042 000022DF B90B000000          <1>     mov ecx, 11 ;Get the 11 chars of the volume label
  1043                              <1> .dirLblCopy:
  1044 000022E4 AC                  <1>     lodsb   ;Get the first char
  1045 000022E5 3C00                <1>     cmp al, 0
  1046 000022E7 7409                <1>     je .skipVolLbl  ;Jump with CF=NC
  1047 000022E9 3C2E                <1>     cmp al, "."
  1048 000022EB 7401                <1>     je .dirLblSkipStore
  1049 000022ED AA                  <1>     stosb
  1050                              <1> .dirLblSkipStore:
  1051 000022EE FFC9                <1>     dec ecx
  1052 000022F0 75F2                <1>     jnz .dirLblCopy
  1053                              <1>     ;Fallthru with CF=NC
  1054                              <1> .skipVolLbl:
  1055                              <1> ;Print volume label information now
  1056                              <1> ;Propagates the CF if CF was set    
  1057 000022F2 9C                  <1>     pushfq
  1058 000022F3 488D15B5E4FFFF      <1>     lea rdx, crlf
  1059 000022FA B409                <1>     mov ah, 09h
  1060 000022FC CD41                <1>     int 41h
  1061 000022FE 488D152FE7FFFF      <1>     lea rdx, volMes
  1062 00002305 B409                <1>     mov ah, 09h
  1063 00002307 CD41                <1>     int 41h
  1064 00002309 8A155FE2FFFF        <1>     mov dl, byte [volPathBuf]   ;Print the drive letter out
  1065 0000230F B402                <1>     mov ah, 02h
  1066 00002311 CD41                <1>     int 41h
  1067 00002313 9D                  <1>     popfq
  1068 00002314 7317                <1>     jnc .volIDOk
  1069 00002316 488D152EE7FFFF      <1>     lea rdx, volNo
  1070 0000231D B409                <1>     mov ah, 09h
  1071 0000231F CD41                <1>     int 41h
  1072 00002321 488D1587E4FFFF      <1>     lea rdx, crlf
  1073 00002328 B409                <1>     mov ah, 09h
  1074 0000232A CD41                <1>     int 41h
  1075                              <1>     return
    19                              <2> %%_ret:
    20 0000232C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1076                              <1> .volIDOk:
  1077 0000232D 488D1512E7FFFF      <1>     lea rdx, volOk
  1078 00002334 B409                <1>     mov ah, 09h
  1079 00002336 CD41                <1>     int 41h
  1080 00002338 488D3D22E2FFFF      <1>     lea rdi, volLblSpc
  1081 0000233F E887060000          <1>     call strlen
  1082 00002344 FFC9                <1>     dec ecx
  1083 00002346 C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
  1084 0000234A 488D1510E2FFFF      <1>     lea rdx, volLblSpc
  1085 00002351 B409                <1>     mov ah, 09h
  1086 00002353 CD41                <1>     int 41h
  1087 00002355 488D1553E4FFFF      <1>     lea rdx, crlf
  1088 0000235C B409                <1>     mov ah, 09h
  1089 0000235E CD41                <1>     int 41h
  1090                              <1>     return
    19                              <2> %%_ret:
    20 00002360 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1091                              <1> 
  1092                              <1> version:
  1093 00002361 488D1547E4FFFF      <1>     lea rdx, crlf
  1094 00002368 B409                <1>     mov ah, 09h
  1095 0000236A CD41                <1>     int 41h
  1096 0000236C 488D15AFE6FFFF      <1>     lea rdx, dosVer
  1097 00002373 B409                <1>     mov ah, 09h
  1098 00002375 CD41                <1>     int 41h
  1099 00002377 E80C000000          <1>     call .printVersionNumber
  1100 0000237C 488D152CE4FFFF      <1>     lea rdx, crlf
  1101 00002383 B409                <1>     mov ah, 09h
  1102 00002385 CD41                <1>     int 41h
  1103                              <1>     return
    19                              <2> %%_ret:
    20 00002387 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1104                              <1> .printVersionNumber:
  1105 00002388 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1106 0000238A CD41                <1>     int 41h
  1107 0000238C 50                  <1>     push rax
  1108 0000238D 0FB6C0              <1>     movzx eax, al
  1109 00002390 E843080000          <1>     call printDecimalWord
  1110 00002395 B22E                <1>     mov dl, "."
  1111 00002397 B402                <1>     mov ah, 02h
  1112 00002399 CD41                <1>     int 41h
  1113 0000239B 58                  <1>     pop rax
  1114 0000239C 0FB6C4              <1>     movzx eax, ah
  1115 0000239F E834080000          <1>     call printDecimalWord
  1116                              <1>     return
    19                              <2> %%_ret:
    20 000023A4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1117                              <1> 
  1118                              <1> 
  1119                              <1> memory:
  1120 000023A5 488B1D73DCFFFF      <1>     mov rbx, qword [sysVars]
  1121 000023AC 4885DB              <1>     test rbx, rbx
  1122 000023AF 7510                <1>     jnz .sysvarsOK
  1123 000023B1 488D151CE9FFFF      <1>     lea rdx, memBad0
  1124 000023B8 B409                <1>     mov ah, 09h
  1125 000023BA CD41                <1>     int 41h
  1126 000023BC E9BA080000          <1>     jmp freezePC.altEP
  1127                              <1> .sysvarsOK:
  1128                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1129                              <1>     ; and rcx to store Application memory
  1130 000023C1 31F6                <1>     xor esi, esi
  1131 000023C3 31FF                <1>     xor edi, edi
  1132 000023C5 31ED                <1>     xor ebp, ebp
  1133 000023C7 31C9                <1>     xor ecx, ecx
  1134 000023C9 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1135 000023CD 488B1B              <1>     mov rbx, qword [rbx]
  1136                              <1> .memLp:
  1137 000023D0 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1138 000023D3 7409                <1>     je .validMCB
  1139 000023D5 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1140 000023D8 0F8501010000        <1>     jne .badMCBFound
  1141                              <1> .validMCB:
  1142 000023DE 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1143 000023E1 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1144 000023E5 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1145 000023ED 7505                <1>     jne .notDOS
  1146 000023EF 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1147 000023F2 EB21                <1>     jmp short .gotoNext
  1148                              <1> .notDOS:
  1149 000023F4 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1150 000023FC 7505                <1>     jne .notFree
  1151 000023FE 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1152 00002401 EB12                <1>     jmp short .gotoNext
  1153                              <1> .notFree:
  1154 00002403 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1155 0000240B 7505                <1>     jne .notHole
  1156 0000240D 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1157 00002410 EB03                <1>     jmp short .gotoNext
  1158                              <1> .notHole:
  1159 00002412 4801C1              <1>     add rcx, rax    ;Add to Application count
  1160                              <1> .gotoNext:
  1161 00002415 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1162 00002418 7407                <1>     je .endOfWalk
  1163 0000241A 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  1164 0000241F EBAF                <1>     jmp short .memLp
  1165                              <1> .endOfWalk:
  1166                              <1>     
  1167 00002421 488D150DE8FFFF      <1>     lea rdx, memDOS
  1168 00002428 B409                <1>     mov ah, 09h
  1169 0000242A CD41                <1>     int 41h
  1170 0000242C 4889F0              <1>     mov rax, rsi
  1171 0000242F E89D000000          <1>     call .mcbPrintAmount
  1172 00002434 488D1592E8FFFF      <1>     lea rdx, memByte
  1173 0000243B B409                <1>     mov ah, 09h
  1174 0000243D CD41                <1>     int 41h
  1175                              <1> 
  1176 0000243F 4885ED              <1>     test rbp, rbp
  1177 00002442 741E                <1>     jz .skipHole
  1178 00002444 488D1536E8FFFF      <1>     lea rdx, memHole
  1179 0000244B B409                <1>     mov ah, 09h
  1180 0000244D CD41                <1>     int 41h
  1181 0000244F 4889E8              <1>     mov rax, rbp
  1182 00002452 E87A000000          <1>     call .mcbPrintAmount
  1183 00002457 488D156FE8FFFF      <1>     lea rdx, memByte
  1184 0000245E B409                <1>     mov ah, 09h
  1185 00002460 CD41                <1>     int 41h
  1186                              <1> .skipHole:
  1187                              <1> 
  1188 00002462 488D15F2E7FFFF      <1>     lea rdx, memApp
  1189 00002469 B409                <1>     mov ah, 09h
  1190 0000246B CD41                <1>     int 41h
  1191 0000246D 4889C8              <1>     mov rax, rcx
  1192 00002470 E85C000000          <1>     call .mcbPrintAmount
  1193 00002475 488D1551E8FFFF      <1>     lea rdx, memByte
  1194 0000247C B409                <1>     mov ah, 09h
  1195 0000247E CD41                <1>     int 41h
  1196                              <1> 
  1197 00002480 488D1520E8FFFF      <1>     lea rdx, memFree
  1198 00002487 B409                <1>     mov ah, 09h
  1199 00002489 CD41                <1>     int 41h
  1200 0000248B 4889F8              <1>     mov rax, rdi
  1201 0000248E E83E000000          <1>     call .mcbPrintAmount
  1202 00002493 488D1533E8FFFF      <1>     lea rdx, memByte
  1203 0000249A B409                <1>     mov ah, 09h
  1204 0000249C CD41                <1>     int 41h
  1205                              <1> 
  1206 0000249E 488D156AE7FFFF      <1>     lea rdx, memSys
  1207 000024A5 B409                <1>     mov ah, 09h
  1208 000024A7 CD41                <1>     int 41h
  1209 000024A9 4889F0              <1>     mov rax, rsi
  1210 000024AC 4801F8              <1>     add rax, rdi
  1211 000024AF 4801C8              <1>     add rax, rcx
  1212 000024B2 4801E8              <1>     add rax, rbp
  1213 000024B5 E817000000          <1>     call .mcbPrintAmount
  1214 000024BA 488D150CE8FFFF      <1>     lea rdx, memByte
  1215 000024C1 B409                <1>     mov ah, 09h
  1216 000024C3 CD41                <1>     int 41h
  1217                              <1> 
  1218 000024C5 488D15E3E2FFFF      <1>     lea rdx, crlf
  1219 000024CC B409                <1>     mov ah, 09h
  1220 000024CE CD41                <1>     int 41h
  1221                              <1>     return
    19                              <2> %%_ret:
    20 000024D0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1222                              <1> 
  1223                              <1> .mcbPrintAmount:
  1224 000024D1 51                  <1>     push rcx
  1225 000024D2 56                  <1>     push rsi
  1226 000024D3 57                  <1>     push rdi
  1227 000024D4 55                  <1>     push rbp
  1228 000024D5 E8FE060000          <1>     call printDecimalWord
  1229 000024DA 5D                  <1>     pop rbp
  1230 000024DB 5F                  <1>     pop rdi
  1231 000024DC 5E                  <1>     pop rsi
  1232 000024DD 59                  <1>     pop rcx
  1233                              <1>     return
    19                              <2> %%_ret:
    20 000024DE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1234                              <1> .badMCBFound:
  1235 000024DF 488D152EE8FFFF      <1>     lea rdx, memBad2
  1236 000024E6 B409                <1>     mov ah, 09h
  1237 000024E8 CD41                <1>     int 41h
  1238 000024EA E98C070000          <1>     jmp freezePC.altEP
  1239                              <1> 
  1240                              <1> type:
  1241 000024EF F605B9DBFFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1242 000024F6 0F84D2F1FFFF        <1>     jz badArgError
  1243 000024FC F605AFDBFFFFFF      <1>     test byte [arg2Flg], -1
  1244 00002503 0F85C5F1FFFF        <1>     jnz badArgError         ;If this set, error
  1245 00002509 488D3580DCFFFF      <1>     lea rsi, cmdBuffer
  1246 00002510 0FB60599DBFFFF      <1>     movzx eax, byte [arg1Off]
  1247 00002517 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1248 0000251A 803E0D              <1>     cmp byte [rsi], CR
  1249 0000251D 0F84ABF1FFFF        <1>     je badArgError
  1250 00002523 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1251 00002527 750F                <1>     jne .noDrive
  1252 00002529 0FB60581DBFFFF      <1>     movzx eax, byte [arg1FCBret]
  1253 00002530 3CFF                <1>     cmp al, -1
  1254 00002532 0F848DF1FFFF        <1>     je badDriveError
  1255                              <1> .noDrive:
  1256                              <1>     ;Now we open the provided file
  1257 00002538 E880070000          <1>     call copyArgumentToSearchSpec
  1258 0000253D 488D158DDEFFFF      <1>     lea rdx, searchSpec
  1259 00002544 B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1260 00002549 CD41                <1>     int 41h
  1261 0000254B 0F8286F1FFFF        <1>     jc badFileError
  1262 00002551 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1263 00002558 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1264                              <1> .lp:
  1265 0000255B B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1266 00002560 B43F                <1>     mov ah, 3Fh ;Read handle
  1267 00002562 CD41                <1>     int 41h
  1268 00002564 89C1                <1>     mov ecx, eax
  1269 00002566 67E317              <1>     jecxz .exit
  1270 00002569 53                  <1>     push rbx    ;Save the original in handle
  1271 0000256A BB01000000          <1>     mov ebx, 1  ;STDOUT
  1272 0000256F B440                <1>     mov ah, 40h
  1273 00002571 CD41                <1>     int 41h
  1274 00002573 5B                  <1>     pop rbx ;Get back the original read handle
  1275 00002574 720F                <1>     jc .exitBad
  1276 00002576 39C8                <1>     cmp eax, ecx
  1277 00002578 74E1                <1>     je .lp
  1278 0000257A FFC9                <1>     dec ecx ;One less for a ^Z
  1279 0000257C 39C8                <1>     cmp eax, ecx
  1280 0000257E 7505                <1>     jne .exitBad
  1281                              <1> .exit:
  1282 00002580 B43E                <1>     mov ah, 3Eh ;Close handle
  1283 00002582 CD41                <1>     int 41h
  1284                              <1>     return
    19                              <2> %%_ret:
    20 00002584 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1285                              <1> .exitBad:
  1286                              <1>     ;Print a disk error message... use a table to build the message but for
  1287                              <1>     ; now, just exit
  1288                              <1>     ;If it is a char device, don't print a error
  1289 00002585 EBF9                <1>     jmp short .exit
  1290                              <1> 
  1291                              <1> exit:
  1292 00002587 F6059FDAFFFFFF      <1>     test byte [permaSwitch], -1
  1293                              <1>     retnz   ;Return if the flag is set
    51                              <2> cret nz
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000258E 75(84)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
  1294 00002590 488B0580DAFFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1295 00002597 483DFFFFFFFF        <1>     cmp rax, -1
  1296                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000259D 74(84)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
  1297 0000259F 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1298                              <1> 
  1299 000025A3 488B1584DAFFFF      <1>     mov rdx, qword [parentInt42]
  1300 000025AA 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
  1301 000025AE B842250000          <1>     mov eax, 2542h
  1302 000025B3 CD41                <1>     int 41h
  1303                              <1> 
  1304 000025B5 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1305 000025BA CD41                <1>     int 41h
  1306                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    19                              <2> %%_ret:
    20 000025BC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1307                              <1> 
  1308                              <1> launchChild:
  1309                              <1> ;We run EXEC on this and the child task will return via applicationReturn
  1310                              <1> ;Here we must search the CWD or all path componants before failing
  1311                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
  1312 000025BD 488D1501DBFFFF      <1>     lea rdx, cmdFFBlock
  1313 000025C4 B41A                <1>     mov ah, 1Ah     ;Set DTA for task
  1314 000025C6 CD41                <1>     int 41h
  1315                              <1> 
  1316 000025C8 8B05F0DAFFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
  1317 000025CE 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1318 000025D3 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1319 000025D8 3D20202020          <1>     cmp eax, "    " ;Only if we have four spaces do we proceed here
  1320 000025DD 741D                <1>     je .noExt
  1321 000025DF E8C0EBFFFF          <1>     call checkExtensionExec ;ZF=ZE => Executable
  1322 000025E4 0F8510010000        <1>     jnz .dfltErrExit
  1323                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1324 000025EA 0F820A010000        <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
  1325                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1326                              <1>     ;So it is a com or exe that we are searching for for now
  1327 000025F0 488D3D19DCFFFF      <1>     lea rdi, cmdPathSpec
  1328 000025F7 4889FA              <1>     mov rdx, rdi
  1329 000025FA EB24                <1>     jmp short .search
  1330                              <1> .noExt:
  1331                              <1>     ;If the filename has no extension, append a .*
  1332                              <1>     ;Use bl as flags. bl[0] => COM found, bl[1] => EXE found, bl[2] => BAT found
  1333 000025FC 31DB                <1>     xor ebx, ebx
  1334 000025FE 488D3D0BDCFFFF      <1>     lea rdi, cmdPathSpec
  1335 00002605 4889FA              <1>     mov rdx, rdi
  1336 00002608 31C0                <1>     xor eax, eax
  1337 0000260A B9FFFFFFFF          <1>     mov ecx, -1
  1338 0000260F F2AE                <1>     repne scasb
  1339 00002611 48FFCF              <1>     dec rdi ;Point to the terminating null
  1340 00002614 4889FD              <1>     mov rbp, rdi    ;Temporarily store the ptr to the . in rbp
  1341 00002617 66B82E2A            <1>     mov ax, ".*"
  1342 0000261B 66AB                <1>     stosw
  1343 0000261D 30C0                <1>     xor al, al  ;Store terminating null
  1344 0000261F AA                  <1>     stosb
  1345                              <1> .search:
  1346 00002620 B906000000          <1>     mov ecx, dirIncFiles
  1347 00002625 B44E                <1>     mov ah, 4Eh ;Find First File
  1348 00002627 CD41                <1>     int 41h
  1349 00002629 0F82CB000000        <1>     jc .dfltErrExit
  1350 0000262F E879000000          <1>     call .noExtCheckExt
  1351                              <1> .moreSearch:
  1352 00002634 B44F                <1>     mov ah, 4Fh
  1353 00002636 CD41                <1>     int 41h
  1354 00002638 7207                <1>     jc .noMoreFiles
  1355 0000263A E86E000000          <1>     call .noExtCheckExt
  1356 0000263F EBF3                <1>     jmp short .moreSearch
  1357                              <1> .noMoreFiles:
  1358 00002641 85DB                <1>     test ebx, ebx
  1359 00002643 0F84B1000000        <1>     jz .dfltErrExit
  1360                              <1> ;So we have a valid executable
  1361 00002649 4889EF              <1>     mov rdi, rbp    ;Get back ptr to the .*,0
  1362 0000264C F7C301000000        <1>     test ebx, 1
  1363 00002652 7407                <1>     jz .launchexebat
  1364 00002654 B82E434F4D          <1>     mov eax, ".COM"
  1365 00002659 EB14                <1>     jmp short .launch
  1366                              <1> .launchexebat:
  1367 0000265B F7C302000000        <1>     test ebx, 2
  1368 00002661 7407                <1>     jz .launchbat
  1369 00002663 B82E455845          <1>     mov eax, ".EXE"
  1370 00002668 EB05                <1>     jmp short .launch
  1371                              <1> .launchbat:
  1372                              <1> ;Temporary For BAT
  1373 0000266A E98B000000          <1>     jmp .dfltErrExit
  1374                              <1> .launch:
  1375 0000266F AB                  <1>     stosd
  1376 00002670 30C0                <1>     xor al, al
  1377 00002672 AA                  <1>     stosb   ;Store the terminating null
  1378 00002673 488D1D76DAFFFF      <1>     lea rbx, launchBlock
  1379 0000267A 31C0                <1>     xor eax, eax
  1380 0000267C 488903              <1>     mov qword [rbx + execProg.pEnv], rax    ;Tell DOS to copy my current Env
  1381 0000267F 498D8080000000      <1>     lea rax, qword [r8 + cmdLineCnt]
  1382 00002686 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1383 0000268A 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1384 0000268E 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1385 00002692 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1386 00002696 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1387 0000269A 488D156FDBFFFF      <1>     lea rdx, cmdPathSpec
  1388 000026A1 B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1389 000026A6 CD41                <1>     int 41h
  1390 000026A8 E94D000000          <1>     jmp .dfltErrExit    ;If something goes wrong, error out
  1391                              <1> .noExtCheckExt:
  1392                              <1>     ;mov eax, dword [cmdFFBlock + ffBlock.asciizName + filename.fExt]
  1393 000026AD 488D352FDAFFFF      <1>     lea rsi, dword [cmdFFBlock + ffBlock.asciizName]
  1394 000026B4 488D3DA4DBFFFF      <1>     lea rdi, fcbCmdSpec
  1395 000026BB E8F0030000          <1>     call asciiFilenameToFCB
  1396 000026C0 8B05A1DBFFFF        <1>     mov eax, dword [fcbCmdSpec + filename.fExt]
  1397 000026C6 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1398 000026CB 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1399 000026D0 3D434F4D20          <1>     cmp eax, "COM "
  1400 000026D5 7507                <1>     jne .neceexe
  1401 000026D7 81CB01000000        <1>     or ebx, 1
  1402                              <1>     return
    19                              <2> %%_ret:
    20 000026DD C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1403                              <1> .neceexe:
  1404 000026DE 3D45584520          <1>     cmp eax, "EXE "
  1405 000026E3 7507                <1>     jne .necebat
  1406 000026E5 81CB02000000        <1>     or ebx, 2
  1407                              <1>     return
    19                              <2> %%_ret:
    20 000026EB C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1408                              <1> .necebat:
  1409 000026EC 3D42415420          <1>     cmp eax, "BAT "
  1410                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000026F1 75(EB)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
  1411 000026F3 81CB04000000        <1>     or ebx, 4
  1412                              <1>     return
    19                              <2> %%_ret:
    20 000026F9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1413                              <1> 
  1414                              <1> .dfltErrExit:
  1415 000026FA 488D150BE1FFFF      <1>     lea rdx, badCmd
  1416 00002701 B409                <1>     mov ah, 09h
  1417 00002703 CD41                <1>     int 41h
  1418                              <1>     return
    19                              <2> %%_ret:
    20 00002705 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    17                                  %include "./Utils/COMMAND/Source/cmdUtils.asm"
    18                              <1> ;Misc functions and subroutines for command.com
    19                              <1> 
    20                              <1> printCRLF:
    21 00002706 488D15A2E0FFFF      <1>     lea rdx, crlf
    22 0000270D BB02000000          <1>     mov ebx, 2
    23 00002712 B440                <1>     mov ah, 40h ;Print a new line
    24 00002714 B902000000          <1>     mov ecx, 2  ;Two chars to write
    25 00002719 CD41                <1>     int 41h
    26                              <1>     return
    19                              <2> %%_ret:
    20 0000271B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    27                              <1> printDate:
    28                              <1> ;Input: eax = Packed Date
    29                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
    30                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
    31                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
    32                              <1> ;       ebx = 0 => Print two digit year
    33                              <1> ;       ebx = 1 => Print four digit year
    34 0000271C 53                  <1>     push rbx
    35 0000271D 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    36 0000271F 803D10D9FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    37 00002726 7240                <1>     jb .usDate
    38 00002728 777C                <1>     ja .jpnDate
    39                              <1> ;European: DD/MM/YY
    40 0000272A 251F000000          <1>     and eax, 1Fh    ;Save day bits
    41 0000272F E8B0000000          <1>     call .printFirst
    42 00002734 8A1507D9FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    43 0000273A B402                <1>     mov ah, 02h
    44 0000273C CD41                <1>     int 41h
    45                              <1> 
    46 0000273E 89C8                <1>     mov eax, ecx
    47 00002740 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    48 00002745 C1E805              <1>     shr eax, 5
    49 00002748 E8B3000000          <1>     call .printSecond
    50                              <1> 
    51 0000274D 8A15EED8FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    52 00002753 B402                <1>     mov ah, 02h
    53 00002755 CD41                <1>     int 41h
    54                              <1> 
    55 00002757 89C8                <1>     mov eax, ecx
    56 00002759 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    57 0000275E C1E809              <1>     shr eax, 9
    58 00002761 5B                  <1>     pop rbx ;Get the year signature back
    59 00002762 E8A9000000          <1>     call .printYear
    60                              <1>     return
    19                              <2> %%_ret:
    20 00002767 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    61                              <1> .usDate:
    62                              <1> ;US: MM/DD/YY
    63 00002768 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    64 0000276D C1E805              <1>     shr eax, 5
    65 00002770 E86F000000          <1>     call .printFirst
    66                              <1> 
    67 00002775 8A15C6D8FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    68 0000277B B402                <1>     mov ah, 02h
    69 0000277D CD41                <1>     int 41h
    70                              <1> 
    71 0000277F 89C8                <1>     mov eax, ecx
    72 00002781 251F000000          <1>     and eax, 1Fh    ;Save day bits
    73 00002786 E875000000          <1>     call .printSecond
    74                              <1> 
    75 0000278B 8A15B0D8FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    76 00002791 B402                <1>     mov ah, 02h
    77 00002793 CD41                <1>     int 41h
    78                              <1> 
    79 00002795 89C8                <1>     mov eax, ecx
    80 00002797 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    81 0000279C C1E809              <1>     shr eax, 9
    82 0000279F 5B                  <1>     pop rbx ;Get the year signature back
    83 000027A0 E86B000000          <1>     call .printYear
    84                              <1>     return
    19                              <2> %%_ret:
    20 000027A5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    85                              <1> .jpnDate:
    86                              <1> ;Japan: YY/MM/DD
    87 000027A6 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    88 000027AB C1E809              <1>     shr eax, 9
    89 000027AE 5B                  <1>     pop rbx ;Get the year signature back
    90 000027AF E85C000000          <1>     call .printYear
    91                              <1> 
    92 000027B4 8A1587D8FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    93 000027BA B402                <1>     mov ah, 02h
    94 000027BC CD41                <1>     int 41h
    95                              <1> 
    96 000027BE 89C8                <1>     mov eax, ecx
    97 000027C0 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    98 000027C5 C1E805              <1>     shr eax, 5
    99 000027C8 E833000000          <1>     call .printSecond
   100                              <1> 
   101 000027CD 8A156ED8FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
   102 000027D3 B402                <1>     mov ah, 02h
   103 000027D5 CD41                <1>     int 41h
   104                              <1> 
   105 000027D7 89C8                <1>     mov eax, ecx
   106 000027D9 251F000000          <1>     and eax, 1Fh    ;Save day bits
   107 000027DE E81D000000          <1>     call .printSecond
   108                              <1>     return
    19                              <2> %%_ret:
    20 000027E3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   109                              <1> 
   110                              <1> ;Each of these require eax setup correctly
   111                              <1> .printFirst:
   112 000027E4 51                  <1>     push rcx
   113 000027E5 E85F040000          <1>     call getDecimalWord
   114 000027EA 84ED                <1>     test ch, ch ;Do we have an upper digit?
   115 000027EC 7504                <1>     jnz .skipSpace
   116 000027EE 88CD                <1>     mov ch, cl
   117 000027F0 B120                <1>     mov cl, " "
   118                              <1> .skipSpace:
   119 000027F2 88CA                <1>     mov dl, cl
   120 000027F4 B402                <1>     mov ah, 02h
   121 000027F6 CD41                <1>     int 41h
   122 000027F8 88EA                <1>     mov dl, ch
   123 000027FA B402                <1>     mov ah, 02h
   124 000027FC CD41                <1>     int 41h
   125 000027FE 59                  <1>     pop rcx
   126                              <1>     return
    19                              <2> %%_ret:
    20 000027FF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   127                              <1> .printSecond:
   128 00002800 51                  <1>     push rcx
   129 00002801 E843040000          <1>     call getDecimalWord
   130 00002806 84ED                <1>     test ch, ch ;Do we have an upper digit?
   131 00002808 75E8                <1>     jnz .skipSpace
   132 0000280A 88CD                <1>     mov ch, cl
   133 0000280C B130                <1>     mov cl, "0"
   134 0000280E EBE2                <1>     jmp short .skipSpace
   135                              <1> .printYear:
   136 00002810 05BC070000          <1>     add eax, 1980
   137 00002815 51                  <1>     push rcx
   138 00002816 53                  <1>     push rbx
   139 00002817 E82D040000          <1>     call getDecimalWord ;Get unpacked in rcx
   140 0000281C 5B                  <1>     pop rbx
   141 0000281D 84DB                <1>     test bl, bl
   142 0000281F 740C                <1>     jz .twoDigitYear
   143 00002821 88CA                <1>     mov dl, cl  ;Print the first digit
   144 00002823 B402                <1>     mov ah, 02h
   145 00002825 CD41                <1>     int 41h
   146 00002827 88EA                <1>     mov dl, ch  ;Print the second digit
   147 00002829 B402                <1>     mov ah, 02h
   148 0000282B CD41                <1>     int 41h
   149                              <1> .twoDigitYear:
   150 0000282D C1E910              <1>     shr ecx, 10h    ;Get high word low
   151 00002830 88CA                <1>     mov dl, cl  ;Print the upper digit
   152 00002832 B402                <1>     mov ah, 02h
   153 00002834 CD41                <1>     int 41h
   154 00002836 88EA                <1>     mov dl, ch  ;Print the lower digit
   155 00002838 B402                <1>     mov ah, 02h
   156 0000283A CD41                <1>     int 41h
   157 0000283C 59                  <1>     pop rcx
   158                              <1>     return
    19                              <2> %%_ret:
    20 0000283D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   159                              <1> 
   160                              <1> 
   161                              <1> printTime:
   162                              <1> ;Input: eax = Packed Time
   163                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   164                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   165 0000283E 89C1                <1>     mov ecx, eax
   166 00002840 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   167 00002845 C1E80B              <1>     shr eax, 11
   168 00002848 803DF8D7FFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   169 0000284F 750B                <1>     jne .ampm
   170 00002851 E85A000000          <1>     call .printHours
   171 00002856 E831000000          <1>     call .printMinutes
   172                              <1>     return
    19                              <2> %%_ret:
    20 0000285B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   173                              <1> .ampm:
   174 0000285C 3D0C000000          <1>     cmp eax, 12
   175 00002861 7713                <1>     ja .pm
   176 00002863 7416                <1>     je .pm2
   177 00002865 E846000000          <1>     call .printHours
   178 0000286A E81D000000          <1>     call .printMinutes
   179 0000286F B261                <1>     mov dl, "a"
   180 00002871 B402                <1>     mov ah, 02h
   181 00002873 CD41                <1>     int 41h
   182                              <1>     return
    19                              <2> %%_ret:
    20 00002875 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   183                              <1> .pm:
   184 00002876 2D0C000000          <1>     sub eax, 12
   185                              <1> .pm2:
   186 0000287B E830000000          <1>     call .printHours
   187 00002880 E807000000          <1>     call .printMinutes
   188 00002885 B270                <1>     mov dl, "p"
   189 00002887 B402                <1>     mov ah, 02h
   190 00002889 CD41                <1>     int 41h
   191                              <1>     return
    19                              <2> %%_ret:
    20 0000288B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   192                              <1> .printMinutes:
   193 0000288C 8A15B1D7FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   194 00002892 B402                <1>     mov ah, 02h
   195 00002894 CD41                <1>     int 41h
   196                              <1> 
   197 00002896 89C8                <1>     mov eax, ecx
   198 00002898 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   199 0000289D C1E805              <1>     shr eax, 5
   200                              <1> .printMinutesAlt:
   201 000028A0 51                  <1>     push rcx
   202 000028A1 E8A3030000          <1>     call getDecimalWord
   203 000028A6 84ED                <1>     test ch, ch ;Do we have an upper digit?
   204 000028A8 7514                <1>     jnz .skipSpace
   205 000028AA 88CD                <1>     mov ch, cl
   206 000028AC B130                <1>     mov cl, "0"
   207 000028AE EB0E                <1>     jmp short .skipSpace
   208                              <1> .printHours:
   209 000028B0 51                  <1>     push rcx
   210 000028B1 E893030000          <1>     call getDecimalWord
   211 000028B6 84ED                <1>     test ch, ch ;Do we have an upper digit?
   212 000028B8 7504                <1>     jnz .skipSpace
   213 000028BA 88CD                <1>     mov ch, cl
   214 000028BC B120                <1>     mov cl, " "
   215                              <1> .skipSpace:
   216 000028BE 88CA                <1>     mov dl, cl
   217 000028C0 B402                <1>     mov ah, 02h
   218 000028C2 CD41                <1>     int 41h
   219 000028C4 88EA                <1>     mov dl, ch
   220 000028C6 B402                <1>     mov ah, 02h
   221 000028C8 CD41                <1>     int 41h
   222 000028CA 59                  <1>     pop rcx
   223                              <1>     return
    19                              <2> %%_ret:
    20 000028CB C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   224                              <1> 
   225                              <1> 
   226                              <1> putVersionInPrompt:
   227 000028CC 488D154FE1FFFF      <1>     lea rdx, dosVer
   228 000028D3 B409                <1>     mov ah, 09h ;Print String
   229 000028D5 CD41                <1>     int 41h
   230 000028D7 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   231 000028D9 CD41                <1>     int 41h
   232 000028DB 50                  <1>     push rax    ;Save minor version
   233 000028DC E89C000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   234 000028E1 E8B4000000          <1>     call printPackedBCD ;Print al
   235 000028E6 B22E                <1>     mov dl, "."
   236 000028E8 B402                <1>     mov ah, 02h
   237 000028EA CD41                <1>     int 41h
   238 000028EC 58                  <1>     pop rax
   239 000028ED 88E0                <1>     mov al, ah  ;Get the minor version low
   240 000028EF E889000000          <1>     call hexToBCD
   241 000028F4 E8A1000000          <1>     call printPackedBCD
   242                              <1>     return
    19                              <2> %%_ret:
    20 000028F9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   243                              <1> putEscInPrompt:
   244 000028FA B21B                <1>     mov dl, ESC
   245 000028FC EB1C                <1>     jmp short outChar
   246                              <1> 
   247                              <1> putMoneyInPrompt:
   248 000028FE B224                <1>     mov dl, "$"
   249 00002900 EB18                <1>     jmp short outChar
   250                              <1> 
   251                              <1> putEquInPrompt:
   252 00002902 B23D                <1>     mov dl, "="
   253 00002904 EB14                <1>     jmp short outChar
   254                              <1> 
   255                              <1> putPipeInPrompt:
   256 00002906 B27C                <1>     mov dl, "|"
   257 00002908 EB10                <1>     jmp short outChar
   258                              <1> 
   259                              <1> putGTinPrompt:
   260 0000290A B23E                <1>     mov dl, ">"
   261 0000290C EB0C                <1>     jmp short outChar
   262                              <1> 
   263                              <1> putLTinPrompt:
   264 0000290E B23C                <1>     mov dl, "<"
   265 00002910 EB08                <1>     jmp short outChar
   266                              <1> 
   267                              <1> putDriveInPrompt:
   268 00002912 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   269 00002914 CD41                <1>     int 41h
   270 00002916 0441                <1>     add al, "A" ;Convert to letter
   271 00002918 88C2                <1>     mov dl, al
   272                              <1> outChar:
   273 0000291A B402                <1>     mov ah, 02h ;Echo to STDOUT
   274 0000291C CD41                <1>     int 41h
   275                              <1>     return
    19                              <2> %%_ret:
    20 0000291E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   276                              <1> putCWDInPrompt:
   277 0000291F 488D3D36D7FFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   278 00002926 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   279 00002928 CD41                <1>     int 41h
   280 0000292A 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   281 0000292C FEC2                <1>     inc dl
   282 0000292E 0441                <1>     add al, "A" ;Convert to letter
   283 00002930 B43A                <1>     mov ah, ":"
   284 00002932 66AB                <1>     stosw   ;Store X:, rdi+=2
   285 00002934 8A05F1D6FFFF        <1>     mov al, byte [pathSep]
   286 0000293A AA                  <1>     stosb   ;Store pathSep, inc rdi
   287 0000293B B447                <1>     mov ah, 47h ;Get Current Working Directory
   288 0000293D 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   289 00002940 CD41                <1>     int 41h
   290 00002942 E884000000          <1>     call strlen
   291 00002947 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   292                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   293 0000294D B440                <1>     mov ah, 40h ;Write to handle
   294 0000294F BB01000000          <1>     mov ebx, 1  ;STDOUT
   295 00002954 488D1501D7FFFF      <1>     lea rdx, currDirStr
   296 0000295B CD41                <1>     int 41h
   297                              <1>     return
    19                              <2> %%_ret:
    20 0000295D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   298                              <1> 
   299                              <1> BCDtoHex:
   300                              <1> ;Converts a BCD value to a Hex byte
   301                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   302 0000295E 51                  <1>     push rcx
   303 0000295F 0FB6C0              <1>     movzx eax, al   ;Zero extend
   304 00002962 89C1                <1>     mov ecx, eax    ;Save al in ecx
   305 00002964 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   306 00002969 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   307 0000296F C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   308                              <1> .bth:
   309 00002972 050A000000          <1>     add eax, 10
   310 00002977 FFC9                <1>     dec ecx
   311 00002979 75F7                <1>     jnz .bth
   312 0000297B 59                  <1>     pop rcx
   313 0000297C C3                  <1>     ret
   314                              <1> 
   315                              <1> hexToBCD:
   316                              <1> ;Converts a Hex byte into two BCD digits
   317                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   318 0000297D 51                  <1>     push rcx
   319 0000297E 0FB6C0              <1>     movzx eax, al   ;Zero extend
   320 00002981 31C9                <1>     xor ecx, ecx
   321                              <1> .htb0:
   322 00002983 3D0A000000          <1>     cmp eax, 10
   323 00002988 7209                <1>     jb .htb1
   324 0000298A 2D0A000000          <1>     sub eax, 10
   325 0000298F FFC1                <1>     inc ecx
   326 00002991 EBF0                <1>     jmp short .htb0
   327                              <1> .htb1:
   328 00002993 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   329 00002996 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   330 00002998 59                  <1>     pop rcx
   331 00002999 C3                  <1>     ret
   332                              <1> 
   333                              <1> printPackedBCD:
   334                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   335                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   336                              <1> ;Preserves all registers
   337 0000299A 50                  <1>     push rax
   338 0000299B 52                  <1>     push rdx
   339 0000299C 88C4                <1>     mov ah, al
   340 0000299E 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   341 000029A0 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   342 000029A3 7508                <1>     jnz .upperNybble
   343 000029A5 B220                <1>     mov dl, " "
   344 000029A7 B402                <1>     mov ah, 02h
   345 000029A9 CD41                <1>     int 41h
   346 000029AB EB0E                <1>     jmp short .lowerNybble
   347                              <1> .upperNybble:
   348 000029AD 50                  <1>     push rax
   349 000029AE C0EC04              <1>     shr ah, 4
   350 000029B1 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   351 000029B4 88E2                <1>     mov dl, ah
   352 000029B6 B402                <1>     mov ah, 02h ;Print DL
   353 000029B8 CD41                <1>     int 41h
   354 000029BA 58                  <1>     pop rax
   355                              <1> .lowerNybble:
   356 000029BB 0430                <1>     add al, "0"
   357 000029BD 88C2                <1>     mov dl, al
   358 000029BF B402                <1>     mov ah, 02h ;Print DL
   359 000029C1 CD41                <1>     int 41h
   360 000029C3 5A                  <1>     pop rdx
   361 000029C4 58                  <1>     pop rax
   362                              <1>     return
    19                              <2> %%_ret:
    20 000029C5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   363                              <1> 
   364                              <1> getCurrentDrive:
   365                              <1> ;Returns the 0 based current drive in al
   366 000029C6 B419                <1>     mov ah, 19h
   367 000029C8 CD41                <1>     int 41h
   368                              <1>     return
    19                              <2> %%_ret:
    20 000029CA C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   369                              <1> 
   370                              <1> strlen:
   371                              <1> ;Gets the length of a ASCIIZ string
   372                              <1> ;Input: rdi = Source buffer
   373                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   374 000029CB 50                  <1>     push rax
   375 000029CC 57                  <1>     push rdi
   376 000029CD 30C0                <1>     xor al, al
   377 000029CF 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   378 000029D1 FFC9                <1>     dec ecx ;rcx = -1
   379 000029D3 F2AE                <1>     repne scasb
   380 000029D5 F7D1                <1>     not ecx
   381 000029D7 5F                  <1>     pop rdi
   382 000029D8 58                  <1>     pop rax
   383                              <1>     return
    19                              <2> %%_ret:
    20 000029D9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   384                              <1> 
   385                              <1> findTerminatorOrEOC:
   386                              <1> ;Advances rsi to the next string terminator char or the next End of command
   387                              <1> ; char
   388                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   389                              <1> ;If a end of command char found, also sets CF
   390 000029DA AC                  <1>     lodsb
   391 000029DB 3C0D                <1>     cmp al, CR
   392 000029DD 7419                <1>     je .endOfInput
   393 000029DF E82B000000          <1>     call isALterminator
   394 000029E4 7419                <1>     jz .exit
   395 000029E6 3A053FD6FFFF        <1>     cmp al, byte [pathSep]
   396 000029EC 7411                <1>     je .exit
   397 000029EE 3A0538D6FFFF        <1>     cmp al, byte [switchChar]
   398 000029F4 7409                <1>     je .exit
   399 000029F6 EBE2                <1>     jmp short findTerminatorOrEOC
   400                              <1> .endOfInput:
   401 000029F8 E802000000          <1>     call .exit
   402 000029FD F9                  <1>     stc 
   403                              <1>     return
    19                              <2> %%_ret:
    20 000029FE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   404                              <1> .exit:
   405 000029FF 48FFCE              <1>     dec rsi ;Point to the terminating char
   406                              <1>     return
    19                              <2> %%_ret:
    20 00002A02 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   407                              <1> 
   408                              <1> findTerminator:
   409                              <1> ;Advances rsi to the next string terminator char
   410                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   411 00002A03 AC                  <1>     lodsb
   412 00002A04 E806000000          <1>     call isALterminator
   413 00002A09 75F8                <1>     jnz findTerminator
   414 00002A0B 48FFCE              <1>     dec rsi
   415                              <1>     return
    19                              <2> %%_ret:
    20 00002A0E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   416                              <1> isALterminator:
   417                              <1> ;Returns: ZF=NZ if al is not a terminator (Not including CR)
   418                              <1> ;         ZF=ZY if al is a terminator
   419 00002A0F 3C20                <1>     cmp al, " "
   420                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002A11 74(0E)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   421 00002A13 3C3B                <1>     cmp al, ";"
   422                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002A15 74(0E)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   423 00002A17 3C3D                <1>     cmp al, "="
   424                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002A19 74(0E)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   425 00002A1B 3C2C                <1>     cmp al, ","
   426                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002A1D 74(0E)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   427 00002A1F 3C09                <1>     cmp al, TAB
   428                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002A21 74(0E)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   429 00002A23 3C0A                <1>     cmp al, LF
   430                              <1>     return
    19                              <2> %%_ret:
    20 00002A25 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   431                              <1> 
   432                              <1> findEndOfCommand:
   433                              <1> ;Moves rsi to the | or CR that terminates this command
   434 00002A26 AC                  <1>     lodsb
   435 00002A27 E806000000          <1>     call isALEndOfCommand
   436 00002A2C 75F8                <1>     jnz findEndOfCommand
   437 00002A2E 48FFCE              <1>     dec rsi
   438                              <1>     return
    19                              <2> %%_ret:
    20 00002A31 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   439                              <1> isALEndOfCommand:
   440 00002A32 3C7C                <1>     cmp al, "|"
   441                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002A34 74(31)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   442 00002A36 3C0D                <1>     cmp al, CR
   443                              <1>     return
    19                              <2> %%_ret:
    20 00002A38 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   444                              <1> 
   445                              <1> skipSpaces:
   446                              <1> ;Also skips tabs
   447                              <1> ;Input: rsi must point to the start of the data string
   448                              <1> ;Output: rsi points to the first non-space char
   449 00002A39 803E20              <1>     cmp byte [rsi], " "
   450 00002A3C 7405                <1>     je .skip    ;If equal to a space, skip it
   451 00002A3E 803E09              <1>     cmp byte [rsi], TAB
   452                              <1>     retne   ;If not equal to a tab or space, return
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002A41 75(38)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   453                              <1> .skip:
   454 00002A43 48FFC6              <1>     inc rsi
   455 00002A46 EBF1                <1>     jmp short skipSpaces
   456                              <1> 
   457                              <1> printPrompt:
   458 00002A48 66813DD8D5FFFFFFFF  <1>     cmp word [promptPtr], -1
   459 00002A51 750B                <1>     jne .validPrompt
   460                              <1>     ;Here we print the default prompt
   461 00002A53 E8C7FEFFFF          <1>     call putCWDInPrompt
   462 00002A58 E8ADFEFFFF          <1>     call putGTinPrompt
   463                              <1>     return
    19                              <2> %%_ret:
    20 00002A5D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   464                              <1> .validPrompt:
   465                              <1>     return
    19                              <2> %%_ret:
    20 00002A5E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   466                              <1> 
   467                              <1> clearCommandState:
   468                              <1> ;Clears the command state
   469 00002A5F 488D3D41D6FFFF      <1>     lea rdi, cmdStatePtr
   470 00002A66 B90E000000          <1>     mov ecx, cmdStateL
   471 00002A6B 31C0                <1>     xor eax, eax
   472 00002A6D F3AA                <1>     rep stosb
   473 00002A6F C70532D6FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   473 00002A78 FF                  <1>
   474                              <1>     return
    19                              <2> %%_ret:
    20 00002A79 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   475                              <1> 
   476                              <1> clearCommandLineState:
   477                              <1> ;Clears the command line state after a 0Dh encountered
   478 00002A7A 488D3D1ED6FFFF      <1>     lea rdi, cmdLineStatePtr
   479 00002A81 B916000000          <1>     mov ecx, cmdLineStateL
   480 00002A86 31C0                <1>     xor eax, eax
   481 00002A88 F3AA                <1>     rep stosb
   482 00002A8A C7050FD6FFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   482 00002A93 FF                  <1>
   483 00002A94 C7050DD6FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   483 00002A9D FF                  <1>
   484                              <1>     return
    19                              <2> %%_ret:
    20 00002A9E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   485                              <1> 
   486                              <1> asciiToFCB:
   487                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   488                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   489                              <1> ;Also doesn't check if chars are valid
   490                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   491                              <1> ;Name is space padded.
   492                              <1> ;Input: rsi = ASCII string buffer
   493                              <1> ;       rdi = FCB name buffer
   494                              <1> ;Output: al = Char that terminated the source string 
   495 00002A9F 53                  <1>     push rbx    
   496 00002AA0 57                  <1>     push rdi
   497 00002AA1 B90B000000          <1>     mov ecx, 11
   498 00002AA6 B020                <1>     mov al, " "
   499 00002AA8 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   500 00002AAA 5F                  <1>     pop rdi
   501 00002AAB 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   502 00002AAE EB1D                <1>     jmp short asciiFilenameToFCB.processName
   503                              <1> asciiFilenameToFCB:
   504                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   505                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   506                              <1> ;Also doesn't check if chars are valid
   507                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   508                              <1> ;Name is space padded.
   509                              <1> ;Input: rsi = ASCII string buffer
   510                              <1> ;       rdi = FCB name buffer
   511                              <1> ;Output: al = Char that terminated the source string 
   512 00002AB0 53                  <1>     push rbx    
   513 00002AB1 57                  <1>     push rdi
   514 00002AB2 B90B000000          <1>     mov ecx, 11
   515 00002AB7 B020                <1>     mov al, " "
   516 00002AB9 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   517 00002ABB 5F                  <1>     pop rdi
   518 00002ABC 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   519                              <1>     ;Preprocess for Dir Searches
   520 00002ABF 803E2E              <1>     cmp byte [rsi], "."
   521 00002AC2 7509                <1>     jne .processName
   522 00002AC4 A4                  <1>     movsb   ;Store the first dot
   523 00002AC5 803E2E              <1>     cmp byte [rsi], "."
   524 00002AC8 752C                <1>     jne .exitBadChar
   525 00002ACA A4                  <1>     movsb
   526 00002ACB EB29                <1>     jmp short .exitBadChar
   527                              <1> .processName:
   528 00002ACD AC                  <1>     lodsb   ;Get the char in al
   529 00002ACE 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   530 00002AD0 7426                <1>     jz .exit
   531 00002AD2 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   532 00002AD4 7407                <1>     je .extSpace
   533 00002AD6 3C2E                <1>     cmp al, "."
   534 00002AD8 740C                <1>     je .ext
   535 00002ADA AA                  <1>     stosb   ;Store the char
   536 00002ADB EBF0                <1>     jmp short .processName
   537                              <1> .extSpace:
   538                              <1> ;Now we scan for a period in the name
   539 00002ADD AC                  <1>     lodsb   ;Get a char and increase rsi
   540 00002ADE 84C0                <1>     test al, al
   541 00002AE0 7416                <1>     jz .exit
   542 00002AE2 3C2E                <1>     cmp al, "."     ;If al is not a period...
   543 00002AE4 75F7                <1>     jne .extSpace   ; keep searching
   544                              <1> .ext:
   545 00002AE6 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   546                              <1> .processExt:
   547 00002AEA AC                  <1>     lodsb
   548 00002AEB 84C0                <1>     test al, al
   549 00002AED 7409                <1>     jz .exit
   550 00002AEF 3C20                <1>     cmp al, " "
   551 00002AF1 7405                <1>     je .exit
   552 00002AF3 AA                  <1>     stosb
   553 00002AF4 EBF4                <1>     jmp short .processExt
   554                              <1> .exitBadChar:
   555 00002AF6 30C0                <1>     xor al, al  ;Return a null terminator
   556                              <1> .exit:
   557 00002AF8 5B                  <1>     pop rbx
   558                              <1>     return
    19                              <2> %%_ret:
    20 00002AF9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   559                              <1> 
   560                              <1> FCBToAsciiz:
   561                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   562                              <1> ;Name is space padded too
   563                              <1> ;Input: rsi = FCB name buffer
   564                              <1> ;       rdi = ASCIIZ string buffer
   565 00002AFA B908000000          <1>     mov ecx, 8
   566 00002AFF F3A4                <1>     rep movsb   ;Move the name over
   567                              <1> .scanNameSpace:
   568 00002B01 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   569 00002B05 750D                <1>     jne .ext
   570 00002B07 48FFCF              <1>     dec rdi
   571 00002B0A FFC1                <1>     inc ecx
   572 00002B0C 81F908000000        <1>     cmp ecx, 8
   573 00002B12 72ED                <1>     jb .scanNameSpace
   574                              <1> .ext:
   575 00002B14 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   576 00002B19 7506                <1>     jne .validExt
   577 00002B1B 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   578 00002B1F 7415                <1>     je .exit
   579                              <1> .validExt:
   580 00002B21 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   581 00002B23 AA                  <1>     stosb
   582 00002B24 B903000000          <1>     mov ecx, 3
   583 00002B29 F3A4                <1>     rep movsb   ;Move the three extension chars over
   584                              <1> .scanExtSpace:
   585 00002B2B 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   586 00002B2F 7505                <1>     jne .exit
   587 00002B31 48FFCF              <1>     dec rdi
   588 00002B34 EBF5                <1>     jmp short .scanExtSpace
   589                              <1> .exit:
   590 00002B36 31C0                <1>     xor eax, eax
   591 00002B38 AA                  <1>     stosb   ;Store a null at the end
   592                              <1>     return
    19                              <2> %%_ret:
    20 00002B39 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   593                              <1> 
   594                              <1> buildCommandPath:
   595                              <1> ;Based on the first argument on the command line
   596                              <1> ; will build a full ASCIIZ path in searchSpec to the file/dir specified
   597                              <1>     ;If this is a relative path, will handle correctly (tho unnecessary)
   598 00002B3A 0FB6056FD5FFFF      <1>     movzx eax, byte [arg1Off]
   599 00002B41 488D3548D6FFFF      <1>     lea rsi, cmdBuffer
   600 00002B48 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   601 00002B4B 8A3DDAD4FFFF        <1>     mov bh, byte [pathSep]
   602 00002B51 B33A                <1>     mov bl, ":"
   603 00002B53 383E                <1>     cmp byte [rsi], bh  ;Is the first char relative to root?
   604 00002B55 7458                <1>     je .absoluteCurrent
   605 00002B57 66395E01            <1>     cmp word [rsi + 1], bx    ;This checks if absolute or relative
   606 00002B5B 746D                <1>     je .absolutePath
   607 00002B5D 385E01              <1>     cmp byte [rsi + 1], bl  ;Check if a drive separator
   608 00002B60 7409                <1>     je .relativeGiven
   609                              <1> ;No drive letter given, must get Current Drive
   610 00002B62 E85FFEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   611 00002B67 0441                <1>     add al, "A"
   612 00002B69 EB0B                <1>     jmp short .relativeCommon
   613                              <1> .relativeGiven:
   614                              <1> ;Drive letter pointed to by AL
   615 00002B6B 8A06                <1>     mov al, byte [rsi]  ;Get drive letter in al
   616 00002B6D 24DF                <1>     and al, 0DFh    ;Convert to UC
   617 00002B6F 4881C602000000      <1>     add rsi, 2  ;Skip the given drive letter and the colon
   618                              <1> .relativeCommon:
   619                              <1>     ;al has drive letter
   620 00002B76 88C2                <1>     mov dl, al  ;Save drive letter in dl
   621 00002B78 80EA40              <1>     sub dl, "@" ;Get 1 based drive number in dl
   622 00002B7B B43A                <1>     mov ah, ":" ;Get the colon in too
   623 00002B7D 488D3D4DD8FFFF      <1>     lea rdi, searchSpec ;Start building our search path here
   624 00002B84 66AB                <1>     stosw   ;Store X:
   625 00002B86 8A059FD4FFFF        <1>     mov al, byte [pathSep]
   626 00002B8C AA                  <1>     stosb   ;Store pathSep
   627 00002B8D 56                  <1>     push rsi    ;Save user input string
   628 00002B8E 4889FE              <1>     mov rsi, rdi    ;Put the current directory here for this drive
   629 00002B91 B447                <1>     mov ah, 47h ;Get Current Working Directory, dl has drive number
   630 00002B93 CD41                <1>     int 41h ;Won't fail as drive letter in dl confirmed ok
   631 00002B95 5E                  <1>     pop rsi
   632                              <1>     ;Now want to find terminating null
   633 00002B96 30C0                <1>     xor al, al
   634 00002B98 31C9                <1>     xor ecx, ecx
   635 00002B9A FFC9                <1>     dec ecx
   636 00002B9C F2AE                <1>     repne scasb ;Search for the terminating null
   637 00002B9E 48FFCF              <1>     dec rdi ;Go back one once found
   638 00002BA1 8A0584D4FFFF        <1>     mov al, byte [pathSep]
   639 00002BA7 3847FF              <1>     cmp byte [rdi - 1], al
   640 00002BAA 7425                <1>     je .buildPath ;If the previous char is a pathsep, skip storing another
   641 00002BAC AA                  <1>     stosb   ;Store the pathsep
   642 00002BAD EB22                <1>     jmp short .buildPath  ;Now we copy the user string over and good to go
   643                              <1> .absoluteCurrent:
   644 00002BAF E812FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   645 00002BB4 0441                <1>     add al, "A"
   646 00002BB6 B43A                <1>     mov ah, ":" ;ax has X: now to store 
   647 00002BB8 488D3D12D8FFFF      <1>     lea rdi, searchSpec
   648 00002BBF 66AB                <1>     stosw
   649 00002BC1 8A0564D4FFFF        <1>     mov al, byte [pathSep]
   650 00002BC7 AA                  <1>     stosb
   651 00002BC8 EB07                <1>     jmp short .buildPath
   652                              <1> .absolutePath:
   653 00002BCA 488D3D00D8FFFF      <1>     lea rdi, searchSpec
   654                              <1> .buildPath:
   655 00002BD1 E857EAFFFF          <1>     call copyCommandTailItem    ;Terminates with a 0 for free
   656 00002BD6 F8                  <1>     clc ;I dont care if i encounter an embedded CR rn
   657                              <1>     return
    19                              <2> %%_ret:
    20 00002BD7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   658                              <1>     
   659                              <1> printDecimalWord:
   660                              <1> ;Takes qword in rax and print it's decimal representation
   661                              <1> ;Takes the qword in eax and prints its decimal representation
   662 00002BD8 31C9                <1>     xor ecx, ecx
   663 00002BDA 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   664 00002BDC 85C0                <1>     test eax, eax
   665 00002BDE 750C                <1>     jnz .notZero
   666 00002BE0 B930000000          <1>     mov ecx, "0"
   667 00002BE5 BD01000000          <1>     mov ebp, 1  ;Print one digit
   668 00002BEA EB3E                <1>     jmp short .dpfb2
   669                              <1> .notZero:
   670 00002BEC 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   671 00002BEE BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   672                              <1> .dpfb0:
   673 00002BF3 FFC5                <1>     inc ebp
   674 00002BF5 81FD08000000        <1>     cmp ebp, 8
   675 00002BFB 7206                <1>     jb .dpfb00
   676 00002BFD 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   677 00002C01 EB04                <1>     jmp short .dpfb01
   678                              <1> .dpfb00:
   679 00002C03 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   680                              <1> .dpfb01:
   681 00002C07 31D2                <1>     xor edx, edx
   682 00002C09 48F7F6              <1>     div rsi
   683 00002C0C 80C230              <1>     add dl, '0'
   684 00002C0F 80FA39              <1>     cmp dl, '9'
   685 00002C12 7603                <1>     jbe .dpfb1
   686 00002C14 80C207              <1>     add dl, 'A'-'0'-10
   687                              <1> .dpfb1:
   688 00002C17 81FD08000000        <1>     cmp ebp, 8
   689 00002C1D 7204                <1>     jb .dpfb10
   690 00002C1F 88D3                <1>     mov bl, dl ;Add the bottom bits
   691 00002C21 EB02                <1>     jmp short .dpfb11
   692                              <1> .dpfb10:
   693 00002C23 88D1                <1>     mov cl, dl    ;Save remainder byte
   694                              <1> .dpfb11:
   695 00002C25 4885C0              <1>     test rax, rax
   696 00002C28 75C9                <1>     jnz .dpfb0
   697                              <1> .dpfb2:
   698 00002C2A 81FD08000000        <1>     cmp ebp, 8
   699 00002C30 7208                <1>     jb .dpfb20
   700 00002C32 88DA                <1>     mov dl, bl
   701 00002C34 48C1EB08            <1>     shr rbx, 8
   702 00002C38 EB06                <1>     jmp short .dpfb21
   703                              <1> .dpfb20:
   704 00002C3A 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   705 00002C3C 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   706                              <1> .dpfb21:
   707 00002C40 B402                <1>     mov ah, 02h
   708 00002C42 CD41                <1>     int 41h
   709 00002C44 FFCD                <1>     dec ebp
   710 00002C46 75E2                <1>     jnz .dpfb2
   711                              <1>     return
    19                              <2> %%_ret:
    20 00002C48 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   712                              <1> 
   713                              <1> getDecimalWord:
   714                              <1> ;Works on MAX A dword in eax
   715                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   716 00002C49 31C9                <1>     xor ecx, ecx
   717 00002C4B 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   718 00002C4D BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   719                              <1> .dpfb0:
   720 00002C52 FFC5                <1>     inc ebp
   721 00002C54 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   722 00002C58 31D2                <1>     xor edx, edx
   723 00002C5A 48F7F3              <1>     div rbx
   724 00002C5D 80C230              <1>     add dl, '0'
   725 00002C60 80FA39              <1>     cmp dl, '9'
   726 00002C63 7603                <1>     jbe .dpfb1
   727 00002C65 80C207              <1>     add dl, 'A'-'0'-10
   728                              <1> .dpfb1:
   729 00002C68 88D1                <1>     mov cl, dl    ;Save remainder byte
   730 00002C6A 4885C0              <1>     test rax, rax
   731 00002C6D 75E3                <1>     jnz .dpfb0
   732                              <1>     return
    19                              <2> %%_ret:
    20 00002C6F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   733                              <1> 
   734                              <1> freezePC:
   735 00002C70 488D1583E0FFFF      <1>     lea rdx, memBad1
   736 00002C77 B409                <1>     mov ah, 09h
   737 00002C79 CD41                <1>     int 41h
   738                              <1> .altEP:
   739 00002C7B 488D15A1E0FFFF      <1>     lea rdx, memBad3
   740 00002C82 B409                <1>     mov ah, 09h
   741 00002C84 CD41                <1>     int 41h
   742                              <1> .lp:
   743 00002C86 F390                <1>     pause
   744 00002C88 F4                  <1>     hlt
   745 00002C89 EBFB                <1>     jmp short .lp
   746                              <1> 
   747                              <1> getFilenamePtrFromFilespec:
   748                              <1> ;Gets a pointer to the first char of a filename from a asciiz pathspec
   749                              <1> ;Input: rsi = Pathspec to search
   750                              <1> ;Output: rsi = Points to the first char of the filename
   751 00002C8B 4889F3              <1>     mov rbx, rsi
   752 00002C8E 31C0                <1>     xor eax, eax
   753 00002C90 4889F7              <1>     mov rdi, rsi    ;Go to the source string 
   754 00002C93 E833FDFFFF          <1>     call strlen     ;Get it's length
   755 00002C98 FFC9                <1>     dec ecx ;Dont include terminating null
   756 00002C9A 741F                <1>     jz .exitBad ;Was the string of length zero? Exit bad if so
   757 00002C9C 4801CE              <1>     add rsi, rcx    ;Goto last char in path (not null)
   758                              <1> .lp:
   759 00002C9F 4839F3              <1>     cmp rbx, rsi    ;Is rdi pointing to the start of the string?
   760                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002CA2 74(6F)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   761 00002CA4 8A06                <1>     mov al, byte [rsi]  ;Get the char we currently are at
   762 00002CA6 3C3A                <1>     cmp al, ":" ;X: ?
   763 00002CA8 740D                <1>     je .pointFilename
   764 00002CAA 3A057BD3FFFF        <1>     cmp al, byte [pathSep]  ;Is al pathSep?
   765 00002CB0 7405                <1>     je .pointFilename
   766 00002CB2 48FFCE              <1>     dec rsi ;Not a terminator, go back a char
   767 00002CB5 EBE8                <1>     jmp short .lp
   768                              <1> .pointFilename:
   769 00002CB7 48FFC6              <1>     inc rsi ;Now point to the first char of the pathname
   770                              <1>     return
    19                              <2> %%_ret:
    20 00002CBA C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   771                              <1> .exitBad:
   772 00002CBB F9                  <1>     stc
   773                              <1> .exit:
   774                              <1>     return
    19                              <2> %%_ret:
    20 00002CBC C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   775                              <1> 
   776                              <1> 
   777                              <1> copyArgumentToSearchSpec:
   778                              <1> ;Works similarly to the build searchpath but is simpler
   779                              <1> ;Null terminates
   780 00002CBD 488D3D0DD7FFFF      <1>     lea rdi, searchSpec
   781                              <1> .copyPath:
   782 00002CC4 AC                  <1>     lodsb
   783 00002CC5 E868FDFFFF          <1>     call isALEndOfCommand
   784 00002CCA 740A                <1>     jz .finishCopy
   785 00002CCC E83EFDFFFF          <1>     call isALterminator
   786 00002CD1 7403                <1>     jz .finishCopy
   787 00002CD3 AA                  <1>     stosb
   788 00002CD4 EBEE                <1>     jmp short .copyPath
   789                              <1> .finishCopy:
   790 00002CD6 31C0                <1>     xor eax, eax
   791 00002CD8 AA                  <1>     stosb
   792                              <1>     return
    19                              <2> %%_ret:
    20 00002CD9 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    18                                  %include "./Utils/COMMAND/Source/int44h.asm"
    19                              <1> critErrorHandler:   ;Int 44h
    20                              <1> ;User Stack in usage here, must be swapped to before this is called
    21                              <1> ;Entered with:  
    22                              <1> ;               AH = Critical Error Bitfield
    23                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    24                              <1> ;               Bit 6 - Reserved
    25                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    26                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    27                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    28                              <1> ;               Bits [2-1] = Affected Disk Error
    29                              <1> ;                     0 0   DOS area
    30                              <1> ;                     0 1   FAT area
    31                              <1> ;                     1 0   Directory area
    32                              <1> ;                     1 1   Data area
    33                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    34                              <1> ;               AL  = Failing drive number if AH[7] = 0
    35                              <1> ;               DIL = Error code for errorMsg
    36                              <1> ;               RSI = EA of Device Header for which device the error occured
    37                              <1> ;Return:
    38                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    39                              <1> ;                  = 1 - Retry the Operation    (Retry)
    40                              <1> ;                  = 2 - Terminate the Program  (Abort)
    41                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    42 00002CDA 53                  <1>     push rbx
    43 00002CDB 51                  <1>     push rcx
    44 00002CDC 52                  <1>     push rdx
    45 00002CDD 57                  <1>     push rdi
    46 00002CDE 56                  <1>     push rsi
    47 00002CDF FC                  <1>     cld         ;Make String ops go forward
    48                              <1> 
    49 00002CE0 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    50 00002CE3 488D15C5DAFFFF      <1>     lea rdx, crlf
    51 00002CEA B409                <1>     mov ah, 09h ;Print String
    52 00002CEC CD41                <1>     int 41h
    53                              <1> 
    54 00002CEE 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    55 00002CF4 B90C000000          <1>     mov ecx, 0Ch
    56 00002CF9 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    57 00002CFB 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    58 00002CFE 480FB7FF            <1>     movzx rdi, di
    59 00002D02 4889FA              <1>     mov rdx, rdi    ;Copy error code
    60 00002D05 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    61 00002D09 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    62 00002D0C 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    63 00002D0F 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    64 00002D16 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    65 00002D1A B409                <1>     mov ah, 09h ;Print String
    66 00002D1C CD41                <1>     int 41h     ;Call DOS to print first part of message
    67                              <1> 
    68 00002D1E 488D1505020000      <1>     lea rdx, qword [.readmsg]
    69 00002D25 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    70 00002D2C F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    71 00002D2F 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    72 00002D33 B409                <1>     mov ah, 09h ;Print String
    73 00002D35 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    74                              <1> 
    75 00002D37 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    76 00002D3A 0F85DF000000        <1>     jnz .charError
    77                              <1> ;Disk error continues here
    78 00002D40 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    79 00002D47 B409                <1>     mov ah, 09h
    80 00002D49 CD41                <1>     int 41h
    81 00002D4B 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    82 00002D4D 80C241              <1>     add dl, "A" ;Add ASCII code
    83 00002D50 B402                <1>     mov ah, 02h ;Print char in dl
    84 00002D52 CD41                <1>     int 41h
    85                              <1> .userInput:
    86 00002D54 488D1554DAFFFF      <1>     lea rdx, crlf  ;Print new line
    87 00002D5B B409                <1>     mov ah, 09h
    88 00002D5D CD41                <1>     int 41h
    89                              <1> ;Abort, Retry, Ignore, Fail is word order
    90                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    91                              <1> .userAbort:
    92                              <1> ;Abort is always an option
    93 00002D5F 488D15E2010000      <1>     lea rdx, qword [.abortmsg]
    94 00002D66 B409                <1>     mov ah, 09h
    95 00002D68 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
    96                              <1> .userRetry:
    97 00002D6A F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    98 00002D6D 7416                <1>     jz .userIgnore    ;If clear, dont print message
    99 00002D6F 488D15EA010000      <1>     lea rdx, qword [.betweenMsg]
   100 00002D76 B409                <1>     mov ah, 09h
   101 00002D78 CD41                <1>     int 41h
   102 00002D7A 488D15D4010000      <1>     lea rdx, qword [.retrymsg]
   103 00002D81 B409                <1>     mov ah, 09h
   104 00002D83 CD41                <1>     int 41h
   105                              <1> .userIgnore:
   106 00002D85 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   107 00002D88 7416                <1>     jz .userFail
   108 00002D8A 488D15CF010000      <1>     lea rdx, qword [.betweenMsg]
   109 00002D91 B409                <1>     mov ah, 09h
   110 00002D93 CD41                <1>     int 41h
   111 00002D95 488D15B2010000      <1>     lea rdx, qword [.ignoremsg]
   112 00002D9C B409                <1>     mov ah, 09h
   113 00002D9E CD41                <1>     int 41h
   114                              <1> .userFail:
   115 00002DA0 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   116 00002DA3 7416                <1>     jz .userMsgEnd
   117 00002DA5 488D15B4010000      <1>     lea rdx, qword [.betweenMsg]
   118 00002DAC B409                <1>     mov ah, 09h
   119 00002DAE CD41                <1>     int 41h
   120 00002DB0 488D15A4010000      <1>     lea rdx, qword [.failmsg]
   121 00002DB7 B409                <1>     mov ah, 09h
   122 00002DB9 CD41                <1>     int 41h
   123                              <1> .userMsgEnd:
   124 00002DBB 488D15A1010000      <1>     lea rdx, qword [.endMsg]
   125 00002DC2 B409                <1>     mov ah, 09h
   126 00002DC4 CD41                <1>     int 41h
   127                              <1> ;Get user input now 
   128 00002DC6 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   129 00002DC8 488D3D97010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   130 00002DCF B401                <1>     mov ah, 01h ;STDIN without Console Echo
   131 00002DD1 CD41                <1>     int 41h ;Get char in al
   132 00002DD3 3C61                <1>     cmp al, "a" ;Chack if lowercase
   133 00002DD5 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   134 00002DD7 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   135                              <1> .uip1:
   136 00002DD9 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   137 00002DDA 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   138 00002DDC FFC1                <1>     inc ecx
   139 00002DDE 81F904000000        <1>     cmp ecx, 4
   140 00002DE4 75F3                <1>     jne .uip1
   141 00002DE6 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   142                              <1> .validInput:
   143 00002DEB 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   144                              <1> ;Now check if the input is permitted
   145 00002DED 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   146 00002DEF 7427                <1>     je .cehExit
   147 00002DF1 84C0                <1>     test al, al ;Check if 0 => Ignore
   148 00002DF3 740F                <1>     je .viIgnore
   149 00002DF5 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   150 00002DF7 7416                <1>     je .viRetry
   151                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   152 00002DF9 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   153 00002DFC 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   154 00002E02 EB14                <1>     jmp short .cehExit
   155                              <1> .viIgnore:
   156 00002E04 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   157 00002E07 0F8447FFFFFF        <1>     jz .userInput
   158 00002E0D EB09                <1>     jmp short .cehExit
   159                              <1> .viRetry:
   160 00002E0F F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   161 00002E12 0F843CFFFFFF        <1>     jz .userInput
   162                              <1> .cehExit:
   163 00002E18 5E                  <1>     pop rsi
   164 00002E19 5F                  <1>     pop rdi
   165 00002E1A 5A                  <1>     pop rdx
   166 00002E1B 59                  <1>     pop rcx
   167 00002E1C 5B                  <1>     pop rbx
   168 00002E1D 48CF                <1>     iretq
   169                              <1> .charError:
   170 00002E1F B908000000          <1>     mov ecx, 8  ;8 chars in device name
   171 00002E24 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   172                              <1> .ce1:
   173 00002E2B AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   174 00002E2C 88C2                <1>     mov dl, al  ;Move char into dl
   175 00002E2E B402                <1>     mov ah, 02h
   176 00002E30 CD41                <1>     int 41h ;Print char
   177 00002E32 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   178 00002E34 E91BFFFFFF          <1>     jmp .userInput
   179                              <1> 
   180                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   181 00002E39 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   181 00002E42 746563742024202020  <1>
   182 00002E4B 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   182 00002E54 6E6974202420202020  <1>
   183 00002E5D 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   183 00002E66 202420202020202020  <1>
   184 00002E6F 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   184 00002E78 6F6D6D616E64202420  <1>
   185 00002E81 446174612024202020- <1>             db "Data $            "       ;Error 4
   185 00002E8A 202020202020202020  <1>
   186 00002E93 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   186 00002E9C 737420242020202020  <1>
   187 00002EA5 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   187 00002EAE 202020202020202020  <1>
   188 00002EB7 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   188 00002EC0 656469612024202020  <1>
   189 00002EC9 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   189 00002ED2 7420466F756E642024  <1>
   190 00002EDB 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   190 00002EE4 706572202420202020  <1>
   191 00002EED 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   191 00002EF6 6C7420242020202020  <1>
   192 00002EFF 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   192 00002F08 742024202020202020  <1>
   193 00002F11 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   193 00002F1A 61696C757265202420  <1>
   194                              <1> 
   195 00002F23 64726976652024      <1> .drive      db "drive $"
   196 00002F2A 6572726F7220726561- <1> .readmsg    db "error reading $"
   196 00002F33 64696E672024        <1>
   197 00002F39 6572726F7220777269- <1> .writemsg   db "error writing $"
   197 00002F42 74696E672024        <1>
   198 00002F48 41626F727424        <1> .abortmsg   db "Abort$" 
   199 00002F4E 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   200 00002F55 526574727924        <1> .retrymsg   db "Retry$"
   201 00002F5B 4661696C24          <1> .failmsg    db "Fail$"
   202 00002F60 2C2024              <1> .betweenMsg db ", $"
   203 00002F63 3F2024              <1> .endMsg     db "? $"
   204 00002F66 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   205                              <1> 
   206                              <1> int43h:
   207 00002F6A F605BCD0FFFFFF      <1>     test byte [permaSwitch], -1
   208 00002F71 7516                <1>     jnz .exit   ;If this is non-zero, just exit as normal
   209                              <1>     ;Else, we juggle parent PSP's
   210 00002F73 50                  <1>     push rax
   211 00002F74 53                  <1>     push rbx
   212 00002F75 488B059BD0FFFF      <1>     mov rax, qword [realParent]
   213 00002F7C 488B1D8CD0FFFF      <1>     mov rbx, qword [pspPtr]
   214 00002F83 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
   215 00002F87 5B                  <1>     pop rbx
   216 00002F88 58                  <1>     pop rax
   217                              <1> .exit:
   218 00002F89 F9                  <1>     stc     ;Set CF to kill the task
   219 00002F8A C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    19                                  %include "./Utils/COMMAND/Data/cmdEnv.asm"
    20                              <1>     
    21                              <1> masterEnv:  ;Yeet this is this is a child command processor
    22 00002F8D 5F3A434F4D4D414E44- <1>     db "_:COMMAND.COM",0
    22 00002F96 2E434F4D00          <1>
    23 00002F9B 504154483D0000      <1>     db "PATH=",0,0  ;Terminate with two null bytes
    24 00002FA2 202020202020202020- <1>     db ($ - masterEnv) dup (" ")    ;Pad the environment with spaces
    24 00002FAB 202020202020202020- <1>
    24 00002FB4 202020              <1>
    25                              <1> endOfAlloc: ;Symbol to find the start of where I can yeet 
    20                                  %include "./Utils/COMMAND/Source/cmdLdr.asm"
    21                              <1> cmdLdr:
    22                              <1> ;First check if the version is ok. If not, return.
    23 00002FB7 B430                <1>     mov ah, 30h
    24 00002FB9 CD41                <1>     int 41h
    25 00002FBB 3C01                <1>     cmp al, 01h ;Version 1
    26 00002FBD 760D                <1>     jbe .okVersion
    27 00002FBF 488D15D4010000      <1>     lea rdx, badVerStr
    28 00002FC6 B409                <1>     mov ah, 09h
    29 00002FC8 CD41                <1>     int 41h
    30 00002FCA CD40                <1>     int 40h ;Exit to caller or DOS to print bad command interpreter line
    31                              <1> .okVersion:
    32                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    33 00002FCC 4C89053CD0FFFF      <1>     mov qword [pspPtr], r8  ;Store PSP ptr in internal var 
    34 00002FD3 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    35 00002FD7 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    36 00002FDB 48890535D0FFFF      <1>     mov qword [realParent], rax ;Preserve the real parent address
    37                              <1> ;Setup Int 42h, Int 43h and Int 44h
    38 00002FE2 498B400A            <1>     mov rax, qword [r8 + psp.oldInt42h] ;Preserve the original addresses
    39 00002FE6 48890541D0FFFF      <1>     mov qword [parentInt42], rax
    40                              <1> 
    41 00002FED 488D15E6FCFFFF      <1>     lea rdx, critErrorHandler
    42 00002FF4 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    43 00002FF8 B844250000          <1>     mov eax, 2544h
    44 00002FFD CD41                <1>     int 41h
    45 00002FFF 488D1564FFFFFF      <1>     lea rdx, int43h
    46 00003006 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    47 0000300A B843250000          <1>     mov eax, 2543h
    48 0000300F CD41                <1>     int 41h
    49 00003011 488D15AADDFFFF      <1>     lea rdx, applicationReturn
    50 00003018 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    51 0000301C B842250000          <1>     mov eax, 2542h
    52 00003021 CD41                <1>     int 41h
    53                              <1> ;Get a pointer to DOS Sysvars
    54 00003023 B452                <1>     mov ah, 52h ;Get sysvars
    55 00003025 CD41                <1>     int 41h
    56 00003027 48891DF1CFFFFF      <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    57                              <1> ;Call for simple internationalisation data
    58 0000302E B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    59 00003033 CD41                <1>     int 41h
    60 00003035 3CFF                <1>     cmp al, -1
    61 00003037 7412                <1>     je .skipSwitch
    62 00003039 8815EDCFFFFF        <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    63 0000303F 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    64 00003042 7507                <1>     jne .skipSwitch
    65 00003044 C605E0CFFFFF2F      <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    66                              <1> .skipSwitch:
    67 0000304B B800380000          <1>     mov eax, 3800h  ;Get current country data
    68 00003050 488D15DFCFFFFF      <1>     lea rdx, ctryData
    69 00003057 CD41                <1>     int 41h ;Write the data to the internal country table
    70                              <1> ;Now determine if this is the master copy of COMMAND.COM
    71                              <1> ;Check if Int 4Eh has the same address as Int 4Dh. If so, we are master.
    72 00003059 B84E350000          <1>     mov eax, 354Eh  ;Get int 4Eh address
    73 0000305E CD41                <1>     int 41h
    74 00003060 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    75 00003063 B84D350000          <1>     mov eax, 354Dh  ;Get int 4Dh address
    76 00003068 CD41                <1>     int 41h
    77 0000306A 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    78 0000306D 755C                <1>     jne .skipMaster
    79                              <1> ;Ok so we are master command.com
    80                              <1> ;Now make myself the real parent
    81 0000306F C605B7CFFFFFFF      <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    82 00003076 4C89059ACFFFFF      <1>     mov qword [realParent], r8
    83                              <1> ;Set master environment as mine
    84 0000307D 488D0509FFFFFF      <1>     lea rax, masterEnv
    85 00003084 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    86                              <1> ;Set current Drive in COMSPEC
    87 00003088 B019                <1>     mov al, 19h ;Get current Drive
    88 0000308A CD41                <1>     int 41h
    89 0000308C 0441                <1>     add al, "A"
    90 0000308E 8805F9FEFFFF        <1>     mov byte [masterEnv], al
    91                              <1> ;Set Int 4Eh up
    92 00003094 488D15E4E5FFFF      <1>     lea rdx, int4Eh
    93 0000309B B84E250000          <1>     mov eax, 254Eh ;Set this as Int 4Eh
    94 000030A0 CD41                <1>     int 41h
    95                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    96                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    97 000030A2 488D1506D7FFFF      <1>     lea rdx, crlf
    98 000030A9 B409                <1>     mov ah, 09h
    99 000030AB CD41                <1>     int 41h
   100 000030AD E8BBEDFFFF          <1>     call time
   101 000030B2 E8F0ECFFFF          <1>     call date
   102 000030B7 488D15F1D6FFFF      <1>     lea rdx, crlf
   103 000030BE B409                <1>     mov ah, 09h
   104 000030C0 CD41                <1>     int 41h
   105 000030C2 488D1DEEFEFFFF      <1>     lea rbx, endOfAlloc ;Save the Master Environment
   106 000030C9 EB32                <1>     jmp short .printInit
   107                              <1> .skipMaster:
   108 000030CB 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
   109 000030D2 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
   110 000030DA 0FB6054BCFFFFF      <1>     movzx eax, byte [switchChar]
   111 000030E1 F2AE                <1>     repne scasb
   112 000030E3 67E310              <1>     jecxz .noSwitches
   113 000030E6 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
   114 000030E9 24DF                <1>     and al, 0DFh    ;Convert to UC
   115 000030EB 3C50                <1>     cmp al, "P" ;Is it permanent switch?
   116 000030ED 7507                <1>     jne .noSwitches
   117 000030EF C60537CFFFFFFF      <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
   118                              <1> .noSwitches:
   119 000030F6 488D1D90FEFFFF      <1>     lea rbx, masterEnv  ;This is the base address to jettison
   120                              <1> .printInit:
   121                              <1> ;Finish by printing INIT string.
   122 000030FD 53                  <1>     push rbx
   123 000030FE 488D1521000000      <1>     lea rdx, initString
   124 00003105 B409                <1>     mov ah, 09h
   125 00003107 CD41                <1>     int 41h ;Print init string
   126 00003109 E87AF2FFFF          <1>     call version.printVersionNumber
   127 0000310E 488D1547000000      <1>     lea rdx, initString2
   128 00003115 B409                <1>     mov ah, 09h
   129 00003117 CD41                <1>     int 41h ;Print init string
   130 00003119 5B                  <1>     pop rbx
   131 0000311A 488925E4CEFFFF      <1>     mov qword [stackBottom], rsp    ;Use this to save where to reset rsp to
   132 00003121 E988DCFFFF          <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   133                              <1> ;Loader Data here
   134                              <1> initString: 
   135 00003126 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   135 0000312F 66696320436F6D7075- <1>
   135 00003138 746572205265736561- <1>
   135 00003141 726368285229205343- <1>
   135 0000314A 502F444F5328522920- <1>
   135 00003153 56657273696F6E2024  <1>
   136                              <1> initString2:
   137 0000315C 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Reserach 2022.",CR,LF,"$"
   137 00003165 202020284329436F70- <1>
   137 0000316E 797269676874205363- <1>
   137 00003177 69656E746966696320- <1>
   137 00003180 436F6D707574657220- <1>
   137 00003189 526573657261636820- <1>
   137 00003192 323032322E0D0A24    <1>
   138 0000319A 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   138 000031A3 20444F532076657273- <1>
   138 000031AC 696F6E0D0A24        <1>
   138          ------------------  <1>  info: assembly required 1+3+2 passes

