     1                                  
     2                                  ;FDISK utility for SCP/DOS 1.0
     3                                  ;Bypases filesystem to "low-level format" the target fixed disk.
     4                                  ;Restarts the machine upon completion by triple faulting.
     5                                  
     6                                  ;Steps taken:
     7                                  ;0) Call Int 4Ah/EAX=0h. If it returns ah <> 0, then tell the user to
     8                                  ;    stop any other tasks and networking software before continuing.
     9                                  ;    Give them a "Press Enter to continue or ESC to return to DOS" prompt.
    10                                  ;1) Queries the BIOS implementation (in this case SCP/BIOS) for the number
    11                                  ;    of fixed disks.
    12                                  ; Enter the Menu.
    13                                  ;Main menu will have 4 main options and 1 optional option
    14                                  ;   1) Create 
    15                                  
    16                                  ;If the user wants to create a new partition, we ask them how much of the 
    17                                  ; disk they want their partioned to take up as a percentage from 1%-99%
    18                                  ;We then round to the nearest cylinder (multiple of 64 sectors), 
    19                                  ; rounding up (if 0) or down (if past max sector).
    20                                  
    21                                  [map all ./Utils/FDISK/Listings/fdisk.map]
    22                                  [DEFAULT REL]
    23                                  BITS 64
    24                                  %include "./Source/Include/dosMacro.mac"
    25                              <1> 
    26                              <1> ;-------------------------------------------------------------------------------
    27                              <1> ;Generic Macros file
    28                              <1> ;The following instruction extensions allow to conditionally return
    29                              <1> ;The idea was borrowed from the DOS Source Code
    30                              <1> ;
    31                              <1> ;-------------------------------------------------------------------------------
    32                              <1> 
    33                              <1> ;-------------------------------------------------------------------------------
    34                              <1> ;These macros are live and must not be touched
    35                              <1> ;-------------------------------------------------------------------------------
    36                              <1> %macro return 0
    37                              <1> %%_ret:
    38                              <1>     ret
    39                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    40                              <1> %endmacro
    41                              <1> 
    42                              <1> %macro cret 1
    43                              <1> %%_base:
    44                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    45                              <1>     %ifdef retOff
    46                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    47                              <1>     %ifdef currSegVBase
    48                              <1>     j%+1 short (retOff+currSegVBase)
    49                              <1>     %else
    50                              <1>     j%+1 short retOff
    51                              <1>     %endif  ;End ifdef currSegVBase
    52                              <1>     %else 
    53                              <1>     j%-1 short %%a
    54                              <1>     return
    55                              <1> %%a:
    56                              <1>     %endif  ;End the distance measurement if
    57                              <1>     %else   
    58                              <1>     j%-1 short %%a
    59                              <1>     return
    60                              <1> %%a:
    61                              <1>     %endif  ;End ifdef retoff
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retz 0
    65                              <1> cret z
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnz 0
    69                              <1> cret nz
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro rete 0
    73                              <1> cret e
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retne 0
    77                              <1> cret ne
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro retc 0
    81                              <1> cret c
    82                              <1> %endmacro
    83                              <1> 
    84                              <1> %macro retnc 0
    85                              <1> cret nc
    86                              <1> %endmacro
    87                              <1> 
    88                              <1> %macro retb 0
    89                              <1> cret b
    90                              <1> %endmacro
    91                              <1> 
    92                              <1> %macro retnb 0
    93                              <1> cret nb
    94                              <1> %endmacro
    95                              <1> 
    96                              <1> %macro reta 0
    97                              <1> cret a
    98                              <1> %endmacro
    99                              <1> 
   100                              <1> %macro retna 0
   101                              <1> cret na
   102                              <1> %endmacro
   103                              <1> 
   104                              <1> %macro breakpoint 0
   105                              <1> xchg bx, bx
   106                              <1> %endmacro
    25                                  %include "./Source/Include/dosStruc.inc"
    26                              <1> 
    27                              <1> ;-------------------------------------------------------;
    28                              <1> ; This include file contains miscellaneous internal     ;
    29                              <1> ; SCP/DOS structures.                                   ;
    30                              <1> ;-------------------------------------------------------;
    31                              <1> 
    32                              <1> ;------------------------------------------------------------------------;
    33                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    34                              <1> ; its file system structure. This is used to locate files and structures
    35                              <1> ; on the device itself and to translate file requests to cluster chains
    36                              <1> ; to LBAs to pass to the disk driver..
    37                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    38                              <1> ; drivers Initialise routine has been called.
    39                              <1> ;------------------------------------------------------------------------;
    40                              <1> struc dpb        ;Drive Parameter Block
    41                              <1> 
    42 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    43 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    44 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    45 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    46 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    47 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    48 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    49 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    50 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    51 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    52 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    53 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    54                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    55 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    56 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    57 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    58 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    59 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    60 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    61                              <1> 
    62                              <1> endstruc
    63                              <1> 
    64                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    65                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    66                              <1> ;------------------------------------------------------------------------;
    67                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    68                              <1> ; All disk pathing requests go via the CDS for that drive.
    69                              <1> ; The default drive is the last accessed drive, this number is stored
    70                              <1> ; in the DOS data area.
    71                              <1> ; The CDS is stored as an array with the offset into the array being 
    72                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    73                              <1> ;
    74                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> struc cds       ;Current Directory structure
    77 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    78 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    79 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    80 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    81 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    82 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    83                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    84                              <1> ; another, we save the number of chars to skip to that deep level).
    85                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    86                              <1> ; Only affects for SUBST drives, not JOIN
    87                              <1> ; Flags: Bit 15 set = Network drive
    88                              <1> ;        Bit 14 set = Physical drive
    89                              <1> ;        Bit 13 set = JOIN'ed drive
    90                              <1> ;        Bit 12 set = SUBST'ed drive
    91                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    92                              <1> endstruc
    93                              <1> ;CDS equates
    94                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    95                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    96                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    97                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    98                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    99                              <1> ;------------------------------------------------------------------------;
   100                              <1> ; The SFT is a way to allow applications to open file handles to files 
   101                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
   102                              <1> ; under the first header, and then a second header will be linked to the 
   103                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
   104                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
   105                              <1> ; using the FCBS= command. Default FCBS=5.
   106                              <1> ;
   107                              <1> ; A file handle describes the file, and the location within the file that
   108                              <1> ; we are reading. The file handle can be manipulated without the file
   109                              <1> ; being in memory, thus allowing the user to access data without needing 
   110                              <1> ; to take up large portions of memory. Similarly, file handles allow for
   111                              <1> ; accessing devices, by treating them as files with their drivers 
   112                              <1> ; responding and translating the manipulations of the file handle itself.
   113                              <1> ; Neither the driver nor the application should see or use the SFT for
   114                              <1> ; the handle, as it is subject to change (and will change when file 
   115                              <1> ; sharing provisions are included). The DOS will make requests to the 
   116                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
   117                              <1> ; track of the information in the SFT entry for that handle. 
   118                              <1> ;
   119                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   120                              <1> ; can point to the same file. It all depends on what the applications 
   121                              <1> ; want to do with the File.
   122                              <1> ;
   123                              <1> ; !!!!IMPORTANT!!!!
   124                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   125                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   126                              <1> ;
   127                              <1> ;Each SFT may look like this:
   128                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   129                              <1> ;            |                |
   130                              <1> ;       wNumFiles*sft    wNumFiles*sft
   131                              <1> ;
   132                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   133                              <1> ; System FCBs.
   134                              <1> ;
   135                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   136                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   137                              <1> ;
   138                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   139                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   140                              <1> ;------------------------------------------------------------------------;
   141                              <1> struc sfth   ;System file table header
   142                              <1> ; This is the SFT header.
   143                              <1> ; This structure comes before the start of the first file in the array/table.
   144 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   145 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   146                              <1> endstruc
   147                              <1> 
   148                              <1> struc sft
   149                              <1> ;This is the file struc itself
   150 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   151 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   152 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   153 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   154 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   155 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   156 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   157 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   158 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   159 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   160 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   161 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   162 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   163 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   164 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   165 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   166 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   167 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   168 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   169                              <1> ;                           0 means no record
   170                              <1> endstruc
   171                              <1> ;Open Mode equates
   172                              <1> ;Access modes   Bits[2:0]
   173                              <1> ReadAccess      equ 0h
   174                              <1> WriteAccess     equ 1h
   175                              <1> RWAccess        equ 2h
   176                              <1> ;Bit 3 reserved 0
   177                              <1> ;Sharing modes  Bits[6:4]
   178                              <1> CompatShare     equ 0h
   179                              <1> denyRWShare     equ 10h
   180                              <1> denyWriteShare  equ 20h
   181                              <1> denyReadShare   equ 30h
   182                              <1> denyNoneShare   equ 40h
   183                              <1> netFCBShare     equ 70h
   184                              <1> noInherit       equ 80h
   185                              <1> ;Bits 8-12 reserved 0
   186                              <1> 
   187                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   188                              <1> ;Buffering on writes
   189                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   190                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   191                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   192                              <1> ;Attribute Byte
   193                              <1> readOnlyFile    equ 1h
   194                              <1> hiddenFile      equ 2h
   195                              <1> systemFile      equ 4h
   196                              <1> volumeLabel     equ 8h
   197                              <1> directoryFile   equ 10h ;Directory entry
   198                              <1> archiveFile     equ 20h
   199                              <1> ;Device Info equates
   200                              <1> ;For a block device, bits [5:0] contain the drive number
   201                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   202                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   203                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   204                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   205                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   206                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   207                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   208                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   209                              <1> devCharDev      equ 80h ;If set, it is a char device!
   210                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   211                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   212                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   213                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   214                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   215                              <1>  
   216                              <1> ;------------------------------------------------------------------------;
   217                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   218                              <1> ; to an internal buffer, and then copying it to the specified location
   219                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   220                              <1> ; another request for the same sector from the same device is made, so 
   221                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   222                              <1> ; size, selected according to the largest detected sector size during 
   223                              <1> ; the initial loadup.
   224                              <1> ;
   225                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   226                              <1> ;
   227                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   228                              <1> ;------------------------------------------------------------------------;
   229                              <1> 
   230                              <1> struc bufferHdr
   231 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   232 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   233 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   234 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   235 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   236 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   237 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   238 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   239 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   240                              <1>     .dataarea:             ;Points to the start of the data area
   241                              <1> endstruc
   242                              <1> ;Buffer Flag equates
   243                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   244                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   245                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   246                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   247                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   248                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   249                              <1> ;Note! A buffer is marked as referenced only when the application 
   250                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   251                              <1> ;------------------------------------------------------------------------;
   252                              <1> ; Memory control block for each memory arena
   253                              <1> ;------------------------------------------------------------------------;
   254                              <1> struc mcb
   255 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   256 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   257 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   258 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   259                              <1>     .program:
   260                              <1> endstruc
   261                              <1> ;MCB equates
   262                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   263                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   264                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   265                              <1> mcbMarkCtn      equ "M"
   266                              <1> mcbMarkEnd      equ "Z"
   267                              <1> 
   268                              <1> memFirstFit     equ 0   ;First free block goes to application
   269                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   270                              <1> memLastFit      equ 2   ;Last free block goes to application
   271                              <1> 
   272                              <1> ;Owner = Para aligned address => Owning application PSP
   273                              <1> ;...To consider...
   274                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   275                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   276                              <1> ;------------------------------------------------------------------------;
   277                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   278                              <1> ; following order, thus allowing for return values to be placed in the 
   279                              <1> ; registers by accessing the caller register stack frame.
   280                              <1> ;------------------------------------------------------------------------;
   281                              <1> struc callerFrame
   282 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   283 00000008 ????????????????    <1>     .rbx    resq 1    
   284 00000010 ????????????????    <1>     .rcx    resq 1
   285 00000018 ????????????????    <1>     .rdx    resq 1
   286 00000020 ????????????????    <1>     .rsi    resq 1
   287 00000028 ????????????????    <1>     .rdi    resq 1
   288 00000030 ????????????????    <1>     .rbp    resq 1
   289 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   290 00000040 ????????????????    <1>     .r9     resq 1
   291                              <1> ;Pushed by Processor when invoked via Interrupt
   292 00000048 ????????????????    <1>     .rip    resq 1
   293 00000050 ????????????????    <1>     .cs     resq 1
   294 00000058 ????????????????    <1>     .flags  resq 1
   295                              <1> endstruc
   296                              <1> 
   297                              <1> struc dpl
   298                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   299                              <1> ; server calls
   300 00000000 ????????????????    <1>     .rax    resq 1
   301 00000008 ????????????????    <1>     .rbx    resq 1
   302 00000010 ????????????????    <1>     .rcx    resq 1
   303 00000018 ????????????????    <1>     .rdx    resq 1
   304 00000020 ????????????????    <1>     .rsi    resq 1
   305 00000028 ????????????????    <1>     .rdi    resq 1
   306 00000030 ????????????????    <1>     .r8     resq 1
   307 00000038 ????????????????    <1>     .r9     resq 1
   308 00000040 ????????????????    <1>     .align  resq 1
   309 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   310 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   311                              <1> endstruc
   312                              <1> 
   313                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   314 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   315 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   316 00000010 ????????????????    <1>     .newSFTVal      resq 1
   317 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   318 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   319 00000028 ????????????????    <1>     .newLastdrive   resq 1
   320 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   321 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   322 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   323 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   324 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   325 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   326 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   327                              <1> endstruc
   328                              <1> 
   329                              <1> struc filename
   330                              <1> ;8.3 File name struct
   331 00000000 ????????????????    <1>     .fName  resb 8
   332 00000008 ??????              <1>     .fExt   resb 3
   333                              <1> endstruc
   334                              <1> 
   335                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   336 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   337 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   338 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   339 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   340 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   341 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   342 00000016 ????                <1>     .fileTime   resw 1  ;File time
   343 00000018 ????                <1>     .fileDate   resw 1  ;File date
   344 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   345 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   346                              <1> endstruc
   347                              <1> 
   348                              <1> struc psp
   349 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   350 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   351 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   352 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   353 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   354 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   355 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   356 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   357 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   358 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   359 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   360 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   361 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   362 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   363                              <1> ;Extra handle arrays are grouped into a linked list
   364                              <1> ;The below are in the same place as in DOS
   365 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   366 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   367                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   368 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   369 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   370                              <1> endstruc
   371                              <1> 
   372                              <1> struc clkStruc
   373 00000000 ????                <1>     .dateWord   resw 1
   374 00000002 ??                  <1>     .minutes    resb 1
   375 00000003 ??                  <1>     .hours      resb 1
   376 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   377 00000005 ??                  <1>     .seconds    resb 1
   378                              <1> endstruc
   379                              <1> 
   380                              <1> struc countryStruc
   381 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   382                              <1>                         ;0 = month day year hh:mm:ss
   383                              <1>                         ;1 = day month year hh:mm:ss
   384                              <1>                         ;2 = year month day hh:mm:ss
   385 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   386 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   387 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   388 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   389 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   390 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   391                              <1>                         ;0 = Symbol leads, without space
   392                              <1>                         ;1 = Symbol follows, without space
   393                              <1>                         ;2 = Symbol leads, one space
   394                              <1>                         ;3 = Symbol follows, one space
   395                              <1>                         ;4 = Symbol replace decimal separator
   396 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   397 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   398 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   399 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   400 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   401                              <1> endstruc
   402                              <1> 
   403                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   404                              <1> ;for a space of 64Gb
   405                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   406                              <1> dosLowBase  equ 600h    ;Low load address
   407                              <1> 
   408                              <1> ;Critical Error AH bitfield equates
   409                              <1> critRead    equ 0h
   410                              <1> critWrite   equ 1h
   411                              <1> critDOS     equ 0h
   412                              <1> critFAT     equ 2h
   413                              <1> critDir     equ 4h
   414                              <1> critData    equ 6h
   415                              <1> critFailOK  equ 8h
   416                              <1> critRetryOK equ 10h
   417                              <1> critIgnorOK equ 20h
   418                              <1> critCharDev equ 80h
   419                              <1> 
   420                              <1> critIgnore  equ 0
   421                              <1> critRetry   equ 1
   422                              <1> critAbort   equ 2
   423                              <1> critFail    equ 3
   424                              <1> 
   425                              <1> ;MISC ASCII control chars
   426                              <1> NUL equ 00h ;^@         | ASCII Null
   427                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   428                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   429                              <1> BEL equ 07h ;^G         | ASCII Bell
   430                              <1> BSP equ 08h ;^H         | ASCII Backspace
   431                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   432                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   433                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   434                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   435                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   436                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   437                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   438                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   439                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   440                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   441                              <1> SPC equ 20h ;Printable  | ASCII Space
   442                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   443                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   444                              <1> 
   445                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   446                              <1> ;Extended Ascii Codes
   447                              <1> eF1     equ 3Bh ;F1 second byte
   448                              <1> eF2     equ 3Ch ;F2 second byte
   449                              <1> eF3     equ 3Dh ;F3 second byte
   450                              <1> eF4     equ 3Eh ;F4 second byte
   451                              <1> eF5     equ 3Fh ;F5 second byte
   452                              <1> eF6     equ 40h ;F6 second byte
   453                              <1> eF7     equ 41h ;F7 second byte
   454                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   455                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   456                              <1> eIns    equ 52h ;Insert second byte
   457                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   458                              <1> 
   459                              <1> ;Default Configuration for the system
   460                              <1> 
   461                              <1> buffersDefault  equ 30
   462                              <1> filesDefault    equ 20
   463                              <1> fcbsDefault     equ 4
   464                              <1> safeFcbsDeflt   equ 0
   465                              <1> lastDriveDeflt  equ 5   
    26                                  %include "./Source/Include/fatStruc.inc"
    27                              <1> 
    28                              <1> ;-------------------------------------------------------;
    29                              <1> ; This include file contains miscellaneous FAT driver   ;
    30                              <1> ; structures. exFAT will have it's own files at a later ;
    31                              <1> ; stage.                                                ;
    32                              <1> ;-------------------------------------------------------;
    33                              <1> ;-------------------------------------------------------;
    34                              <1> ;-------------------------------------------------------;
    35                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    36                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    37                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    38                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    39                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    40                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    41                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    42                              <1> ;-------------------------------------------------------;
    43                              <1> 
    44                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    45                              <1> 
    46 00000000 ??????              <1>     .jmpBoot    resb 3 
    47 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    48 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    49 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    50 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    51 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    52 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    53 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    54 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    55 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    56 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    57 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    58 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    59 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    60                              <1> 
    61 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    62 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    63 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    64 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    65 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    66 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    67                              <1> 
    68                              <1> endstruc
    69                              <1> 
    70                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    71                              <1> 
    72 00000000 ??????              <1>     .jmpBoot    resb 3
    73 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    74 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    75 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    76 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    77 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    78 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    79 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    80 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    81 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    82 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    83 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    84 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    85 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    86                              <1> 
    87 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    88 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    89 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    90 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    91 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    92 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    93 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    94                              <1> 
    95 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    96 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    97 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    98 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    99 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
   100 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
   101                              <1> 
   102                              <1> endstruc
   103                              <1> 
   104                              <1> struc mbr
   105 00000000 <res 1B8h>          <1>     .bsCode     resb 440
   106 000001B8 ????????            <1>     .diskID     resb 4
   107 000001BC ????                <1>     .reserved   resb 2
   108 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
   109 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
   110 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
   111 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
   112 000001FE ????                <1>     .mbrSig     resb 2
   113                              <1> endstruc
   114                              <1> 
   115                              <1> struc mbrEntry
   116 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
   117 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
   118 00000004 ??                  <1>     .ptnType    resb 1  ;This being 00 means free
   119 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   120 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   121 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc ebr
   125 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   126 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   127 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   128 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   129 000001FE ????                <1>     .mbrSig     resb 2
   130                              <1> endstruc
   131                              <1> 
   132                              <1> 
   133                              <1> struc fatDirEntry
   134                              <1> 
   135 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name w/o fullstop
   136 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   137 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   138 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   139 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   140 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   141 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   142 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   143 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   144 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   145 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   146 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   147                              <1> 
   148                              <1> endstruc
   149                              <1> ;Directory attribute equates
   150                              <1>     dirReadOnly     equ 01h
   151                              <1>     dirHidden       equ 02h
   152                              <1>     dirSystem       equ 04h
   153                              <1>     dirVolumeID     equ 08h
   154                              <1>     dirDirectory    equ 10h
   155                              <1>     dirArchive      equ 20h
   156                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   157                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   158                              <1>     ;If any of the three bits are set, then ALL three bits are set
   159                              <1>     ; in addition to whatever the user passed to search for.
   160                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   161                              <1>     dirIncFiles     equ dirHidden | dirSystem
   162                              <1> 
   163                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   164                              <1> 
   165 00000000 ??????              <1>     .jmpBoot                resb 3 
   166 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   167 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   168 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   169 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   170 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   171 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   172 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   173 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   174 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   175 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   176 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   177 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   178 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   179 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   180 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   181 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   182 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   183 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   184                              <1> 
   185                              <1> endstruc
   186                              <1> 
   187                              <1> struc FSInfo
   188                              <1> 
   189 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   190 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   191 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   192 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   193 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   194 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   195 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   196                              <1> 
   197                              <1> endstruc
   198                              <1> 
   199                              <1> %macro defaultBPB 0
   200                              <1>     db 0E9h
   201                              <1>     db 00h
   202                              <1>     db 90h
   203                              <1>     db 'SCPDOSv1'
   204                              <1>     dw 0200h                       
   205                              <1>     db 01h                         
   206                              <1>     dw 0001h                           
   207                              <1>     db 02h                              
   208                              <1>     dw 00E0h            
   209                              <1>     dw 0B40h   
   210                              <1>     db 0F0h                   
   211                              <1>     dw 0009h                   
   212                              <1>     dw 0012h                     
   213                              <1>     dw 0002h                  
   214                              <1>     dd 0                 
   215                              <1>     dd 0 
   216                              <1>     db 00h
   217                              <1>     db 00h
   218                              <1>     db 29h
   219                              <1>     dd 0
   220                              <1>     db 'NO NAME    '
   221                              <1>     db 'FAT12   '
   222                              <1>     db 58 dup 0 ;Size padding for a FAT12/16 BPB to make it 120 bytes long
   223                              <1> %endmacro
    27                                  %include "./Source/Include/dosError.inc"
    28                              <1> ;DOS Error codes
    29                              <1> 
    30                              <1> ;Extended Error Codes
    31                              <1> errInvFnc   equ 1   ;Invalid function number
    32                              <1> errFnf      equ 2   ;File not found
    33                              <1> errPnf      equ 3   ;Path not found
    34                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    35                              <1> errAccDen   equ 5   ;Access denied (to resource)
    36                              <1> errBadHdl   equ 6   ;Invalid handle
    37                              <1> errMCBbad   equ 7   ;MCB's destroyed
    38                              <1> errNoMem    equ 8   ;Insufficient memory
    39                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    40                              <1> errBadEnv   equ 10  ;Invalid environment
    41                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    42                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    43                              <1> errInvDat   equ 13  ;Invalid data
    44                              <1> ;           equ 14  ;Reserved
    45                              <1> errBadDrv   equ 15  ;Invalid drive specified
    46                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    47                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    48                              <1> errNoFil    equ 18  ;No more files, no match found
    49                              <1> ;The following are Driver error codes + 19
    50                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    51                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    52                              <1> errUnkUnt   equ 20  ;Unknown Unit
    53                              <1> errDrvNR    equ 21  ;Drive not ready
    54                              <1> errUnkCmd   equ 22  ;Unknown Command
    55                              <1> errCRCerr   equ 23  ;Data (CRC) error
    56                              <1> errBadRLn   equ 24  ;Bad request structure length
    57                              <1> errSekErr   equ 25  ;Seek error
    58                              <1> errUnkMed   equ 26  ;Unknown media type
    59                              <1> errSecNF    equ 27  ;Sector not Found
    60                              <1> errNoPap    equ 28  ;Printer out of paper
    61                              <1> errWF       equ 29  ;Write fault
    62                              <1> errRF       equ 30  ;Read fault
    63                              <1> errGF       equ 31  ;General fault
    64                              <1> ;----------------------------------------------
    65                              <1> ;The following two go inbetween the Disk errors
    66                              <1> errShrVio   equ 32  ;Sharing violations
    67                              <1> errLokVio   equ 33  ;File Lock violation
    68                              <1> ;----------------------------------------------
    69                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    70                              <1> errNoFCB    equ 35  ;FCB unavailable
    71                              <1> errShrFul   equ 36  ;Sharing buffer full
    72                              <1> 
    73                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    74                              <1> 
    75                              <1> errFilExist equ 80  ;File already exists
    76                              <1> errDirExist equ 82  ;Directory already exists
    77                              <1> errFI44     equ 83  ;Fail on INT 44h
    78                              <1> errRedir    equ 84  ;Too many levels of redirection
    79                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    80                              <1> errBadPass  equ 86  ;Bad password
    81                              <1> errBadParam equ 87  ;Bad parameter passed to request
    82                              <1> errNetWrite equ 88  ;Network Write Fault
    83                              <1> ;-----------------------------------------------------------------------------
    84                              <1> ;Error Loci
    85                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    86                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    87                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    88                              <1> eLocChr     equ 4   ;Serial/Character Device error
    89                              <1> eLocMem     equ 5   ;Related to RAM
    90                              <1> ;-----------------------------------------------------------------------------
    91                              <1> ;Error Actions
    92                              <1> eActRet     equ 1   ;Retry
    93                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    94                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    95                              <1> eActAbt     equ 4   ;Abort with cleanup
    96                              <1> eActKil     equ 5   ;Abort without cleanup
    97                              <1> eActIgn     equ 6   ;Ignore error
    98                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    99                              <1> ;-----------------------------------------------------------------------------
   100                              <1> ;Error classes
   101                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
   102                              <1> eClsTS      equ 2   ;Temp sitch, should go away
   103                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
   104                              <1> eClsInt     equ 4   ;Internal DOS error or bug
   105                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
   106                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
   107                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
   108                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
   109                              <1> eClsBadFmt  equ 9   ;Bad format for resource
   110                              <1> eClsLocked  equ 10  ;Resource Locked
   111                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
   112                              <1> eClsClash   equ 12  ;Resource already exists!
   113                              <1> eClsUnk     equ 13  ;Unknown class
    28                                  
    29                                  ;Hard disks must have 512 byte sectors
    30                                  fddSectorSize   equ 200h
    31                                  
    32                                  %include "./Utils/FDISK/Source/fdskMain.asm"
    33                              <1> ;Main FDISK file
    34                              <1> startFdisk:
    35 00000000 EB01                <1>     jmp short .cVersion
    36 00000002 01                  <1> .vNum:          db 1
    37                              <1> .cVersion:
    38 00000003 FC                  <1>     cld
    39 00000004 31C0                <1>     xor eax, eax
    40 00000006 CD4A                <1>     int 4Ah
    41 00000008 85C0                <1>     test eax, eax
    42 0000000A 7422                <1>     jz notMultitasking
    43 0000000C 488D15B90C0000      <1>     lea rdx, multiMsg
    44 00000013 B800090000          <1>     mov eax, 0900h
    45 00000018 CD41                <1>     int 41h
    46                              <1> .inLoop:
    47 0000001A B800080000          <1>     mov eax, 0800h  ;Console input no echo
    48 0000001F CD41                <1>     int 41h
    49 00000021 3C0D                <1>     cmp al, CR
    50 00000023 7409                <1>     je notMultitasking
    51 00000025 3C1B                <1>     cmp al, ESC 
    52 00000027 75F1                <1>     jne .inLoop
    53 00000029 E9B1060000          <1>     jmp badExit
    54                              <1> notMultitasking:
    55                              <1> ;Check Version Number
    56 0000002E B430                <1>     mov ah, 30h
    57 00000030 CD41                <1>     int 41h
    58 00000032 3A05CAFFFFFF        <1>     cmp al, byte [startFdisk.vNum] ;Version 1
    59 00000038 760C                <1>     jbe .okVersion
    60 0000003A 488D158F130000      <1>     lea rdx, badVerStr
    61 00000041 E995060000          <1>     jmp badPrint ;Exit to caller or DOS to print bad version
    62                              <1> .okVersion:
    63 00000046 E8910B0000          <1>     call biosGetNumberOfFixedDisks
    64 0000004B 803D560C000000      <1>     cmp byte [numDisks], 0
    65 00000052 750C                <1>     jnz .nonZeroDisks   ;Jump if we have any Fixed Disks
    66 00000054 488D158D130000      <1>     lea rdx, noDisks
    67 0000005B E97B060000          <1>     jmp badPrint
    68                              <1> .nonZeroDisks:
    69                              <1> ;Set CtrlC hook
    70 00000060 488D1542060000      <1>     lea rdx, exit.ctrlCHandler
    71 00000067 B843250000          <1>     mov eax, 2543h
    72 0000006C CD41                <1>     int 41h
    73                              <1> ;Print Start message
    74 0000006E 488D15EC0C0000      <1>     lea rdx, strtMsg
    75 00000075 E875080000          <1>     call print
    76 0000007A E894080000          <1>     call printVersion
    77 0000007F 488D15330D0000      <1>     lea rdx, cpyrtMsg
    78 00000086 E864080000          <1>     call print
    79                              <1>     ;Allocate 512 bytes now
    80 0000008B B800480000          <1>     mov eax, 4800h
    81 00000090 BB20000000          <1>     mov ebx, fddSectorSize >> 4 
    82 00000095 CD41                <1>     int 41h
    83 00000097 0F822E060000        <1>     jc badMemoryExit
    84 0000009D 488905150C0000      <1>     mov qword [xferBuffer], rax
    85                              <1> 
    86 000000A4 C605F20B000001      <1>     mov byte [currentDisk], 1
    87 000000AB E8B00B0000          <1>     call biosGetHardDiskParameters  ;Start by getting the FDD params for disk 1
    88 000000B0 66813DED0B00000002  <1>     cmp word [sectorSize], fddSectorSize
    89 000000B9 0F8515060000        <1>     jne badSectorExit
    90 000000BF E880060000          <1>     call getPartitionFlags  ;Get the partition flags
    91                              <1> 
    92                              <1> mainLoop:
    93 000000C4 E81F080000          <1>     call printcrlf
    94 000000C9 E81A080000          <1>     call printcrlf
    95 000000CE 488D15150E0000      <1>     lea rdx, mainPageMsg
    96 000000D5 E815080000          <1>     call print
    97 000000DA 803DC70B000001      <1>     cmp byte [numDisks], 1
    98 000000E1 740C                <1>     je .singlefdisk
    99 000000E3 488D15970E0000      <1>     lea rdx, mpOptionalMsg
   100 000000EA E800080000          <1>     call print
   101                              <1> .singlefdisk:
   102 000000EF 488D15690D0000      <1>     lea rdx, exitOptionMsg
   103 000000F6 E8F4070000          <1>     call print
   104 000000FB E8F7070000          <1>     call printPrompt    ;Now print the prompt
   105                              <1> ;Now we input loop
   106 00000100 B302                <1>     mov bl, 2
   107 00000102 E8B0070000          <1>     call takeInput
   108 00000107 803DA70B000001      <1>     cmp byte [charsTyped], 1
   109 0000010E 75B4                <1>     jne mainLoop    ;If the user didnt type 1 char, reprompt the user
   110 00000110 E8D3070000          <1>     call printcrlf
   111 00000115 8A059B0B0000        <1>     mov al, byte [inputString]  ;Get the char typed
   112 0000011B 3C31                <1>     cmp al, "1"
   113 0000011D 744A                <1>     je createPtnMain
   114 0000011F 3C32                <1>     cmp al, "2"
   115 00000121 0F8461020000        <1>     je changeActivePtnMain
   116 00000127 3C33                <1>     cmp al, "3"
   117 00000129 0F8486030000        <1>     je deletePtnMain
   118 0000012F 3C34                <1>     cmp al, "4"
   119 00000131 0F849D040000        <1>     je displayPtnInfoMain
   120 00000137 803D6A0B000001      <1>     cmp byte [numDisks], 1
   121 0000013E 7408                <1>     je .singleDiskOptions
   122 00000140 3C35                <1>     cmp al, "5"
   123 00000142 0F84A7040000        <1>     je selectDiskMain
   124                              <1> .singleDiskOptions:
   125 00000148 3C58                <1>     cmp al, "X"
   126 0000014A 0F8402050000        <1>     je exit
   127 00000150 3C78                <1>     cmp al, "x"
   128 00000152 0F84FA040000        <1>     je exit
   129                              <1>     ;If we didnt get any valid options, go back again
   130                              <1>     ;Prompt the user to make a valid selection
   131 00000158 488D15120D0000      <1>     lea rdx, selectValidOption
   132 0000015F E88B070000          <1>     call print
   133 00000164 E95BFFFFFF          <1>     jmp mainLoop
   134                              <1> 
   135                              <1> 
   136                              <1> createPtnMain:
   137                              <1> ;Read the MBR for the selected Fixed Disk
   138                              <1> ;If there is a discernable MBR, error and return to mainLoop
   139                              <1> ;Else, go through the createPage
   140 00000169 31D2                <1>     xor edx, edx    ;Read sector 0
   141 0000016B E8B9060000          <1>     call sectorRead
   142 00000170 0F824C050000        <1>     jc badReadExit
   143                              <1>     ;Sector in buffer, now we check
   144 00000176 488B1D3C0B0000      <1>     mov rbx, qword [xferBuffer]
   145 0000017D 0FB783FE010000      <1>     movzx eax, word [rbx + mbr.mbrSig]  ;Get this sig
   146 00000184 663D55AA            <1>     cmp ax, 0AA55h  ;Usual
   147 00000188 7406                <1>     je .mbrFound
   148 0000018A 663DAA55            <1>     cmp ax, 055AAh  ;Unusual but we accept it
   149 0000018E 7554                <1>     jne .createNewMBR
   150                              <1> .mbrFound:
   151                              <1> ;An MBR was found here. 
   152                              <1> ;DOS can currently only be installed on the first partition. Thus we 
   153                              <1> ; only check the first partition entry for a DOS signature. If one is 
   154                              <1> ; found, we refuse to proceed.
   155                              <1> ;We also refuse to use CHS. Set those entries to 0
   156 00000190 53                  <1>     push rbx
   157 00000191 E8AE050000          <1>     call getPartitionFlags  ;Now lets get some stats on the partition
   158 00000196 5B                  <1>     pop rbx
   159 00000197 803D150B000000      <1>     cmp byte [numValidPtn], 0   ;If no valid partitions, act like new MBR
   160 0000019E 7444                <1>     je .createNewMBR
   161 000001A0 8A83C2010000        <1>     mov al, byte [rbx + mbr.mbrEntry1 + mbrEntry.ptnType]
   162 000001A6 3C01                <1>     cmp al, 01h
   163 000001A8 741D                <1>     je .fatPtnDetected
   164 000001AA 3C04                <1>     cmp al, 04
   165 000001AC 7419                <1>     je .fatPtnDetected
   166 000001AE 3C06                <1>     cmp al, 06
   167 000001B0 7415                <1>     je .fatPtnDetected
   168 000001B2 3C0B                <1>     cmp al, 0Bh
   169 000001B4 7411                <1>     je .fatPtnDetected
   170 000001B6 3C0C                <1>     cmp al, 0Ch
   171 000001B8 740D                <1>     je .fatPtnDetected
   172 000001BA 3C0E                <1>     cmp al, 0Eh
   173 000001BC 7409                <1>     je .fatPtnDetected
   174 000001BE 488D15F60E0000      <1>     lea rdx, createForeignBad
   175 000001C5 EB07                <1>     jmp short .fpDCommon
   176                              <1> .fatPtnDetected:
   177 000001C7 488D15D20D0000      <1>     lea rdx, createPageBadMsg
   178                              <1> .fpDCommon:
   179 000001CE 52                  <1>     push rdx
   180 000001CF E814070000          <1>     call printcrlf
   181 000001D4 E80F070000          <1>     call printcrlf
   182 000001D9 5A                  <1>     pop rdx
   183 000001DA E810070000          <1>     call print
   184 000001DF E9E0FEFFFF          <1>     jmp mainLoop
   185                              <1> .createNewMBR:
   186                              <1> ;Here we lay down a fresh MBR.
   187                              <1> ;Prompt the user for their ptn size
   188 000001E4 488D15DC0D0000      <1>     lea rdx, createPageMsg
   189 000001EB E802060000          <1>     call getYNresponse  ;ZF=ZE => Y response, ZF=NZ => N response
   190                              <1>     ;If the user responds Y, then we allocate the whole disk
   191 000001F0 7526                <1>     jnz .partialAllocation
   192                              <1>     ;If here, start from "cylinder 1"
   193 000001F2 C705AD0A0000400000- <1>     mov dword [ptnStart], 40h
   193 000001FB 00                  <1>
   194 000001FC 8B059C0A0000        <1>     mov eax, dword [curDiskSize]
   195 00000202 2B05A10A0000        <1>     sub eax, dword [ptnStart]    ;Remove the sectors from the start of the disk
   196 00000208 89059F0A0000        <1>     mov dword [ptnSize], eax
   197                              <1>     ;Always produce ptn types 0Ch - FAT with LBA (technically FAT32)
   198 0000020E E8A4050000          <1>     call getPtnType
   199 00000213 E996000000          <1>     jmp .copyMBR
   200                              <1> .partialAllocation:
   201 00000218 488D15F70D0000      <1>     lea rdx, createPage2Msg
   202 0000021F E8CB060000          <1>     call print
   203                              <1> .paLp:
   204 00000224 488D15500E0000      <1>     lea rdx, createPromptMsg
   205 0000022B E8BF060000          <1>     call print
   206 00000230 B303                <1>     mov bl, 3
   207 00000232 E880060000          <1>     call takeInput
   208 00000237 803D770A000000      <1>     cmp byte [charsTyped], 0    ;Repeat prompt if no chars typed (somehow)
   209 0000023E 74E4                <1>     je .paLp 
   210 00000240 803D6F0A000078      <1>     cmp byte [inputString], "x"
   211 00000247 0F8477FEFFFF        <1>     je mainLoop
   212 0000024D 803D620A000058      <1>     cmp byte [inputString], "X"
   213 00000254 0F846AFEFFFF        <1>     je mainLoop
   214 0000025A 66B83030            <1>     mov ax,"00"
   215 0000025E 803D500A000001      <1>     cmp byte [charsTyped], 1
   216 00000265 7708                <1>     ja .twoDigits
   217 00000267 8A05490A0000        <1>     mov al, byte [inputString]
   218 0000026D EB0C                <1>     jmp short .gotDigits
   219                              <1> .twoDigits:
   220 0000026F 8A25410A0000        <1>     mov ah, byte [inputString]
   221 00000275 8A053C0A0000        <1>     mov al, byte [inputString + 1]
   222                              <1> .gotDigits:
   223                              <1> ;Now check the digits are ok
   224                              <1> ;ah contains high digit, al contains low digit
   225 0000027B E89B040000          <1>     call getValue
   226 00000280 72A2                <1>     jc .paLp
   227                              <1>     ;eax has the percentage of the disk to use
   228 00000282 8B1D160A0000        <1>     mov ebx, dword [curDiskSize]    ;Get the disk size
   229 00000288 F7E3                <1>     mul ebx
   230 0000028A BB64000000          <1>     mov ebx, 100    ;Divide by 100
   231 0000028F 31D2                <1>     xor edx, edx
   232 00000291 F7F3                <1>     div ebx ;Get in eax the number of sectors to allocate rounded down
   233 00000293 C7050C0A0000400000- <1>     mov dword [ptnStart], 64
   233 0000029C 00                  <1>
   234 0000029D 2B05060A0000        <1>     sub eax, dword [ptnStart]
   235 000002A3 8905040A0000        <1>     mov dword [ptnSize], eax
   236 000002A9 E809050000          <1>     call getPtnType
   237                              <1> .copyMBR:
   238                              <1> ;Now we copy the MBR into the xferBuffer
   239 000002AE 488D3556120000      <1>     lea rsi, freshMBRcopy   ;Has Zeroed CHS fields
   240 000002B5 488B3DFD090000      <1>     mov rdi, qword [xferBuffer]
   241 000002BC B940000000          <1>     mov ecx, 200h/8
   242 000002C1 F348A5              <1>     rep movsq   ;Copy it over
   243                              <1> .installPartition:
   244 000002C4 488B1DEE090000      <1>     mov rbx, qword [xferBuffer]
   245 000002CB 8B05D8090000        <1>     mov eax, dword [ptnStart]
   246 000002D1 8983C6010000        <1>     mov dword [rbx + mbr.mbrEntry1 + mbrEntry.lbaStart], eax
   247 000002D7 8B05D0090000        <1>     mov eax, dword [ptnSize]
   248 000002DD 8983CA010000        <1>     mov dword [rbx + mbr.mbrEntry1 + mbrEntry.numSectors], eax
   249 000002E3 0FB605C7090000      <1>     movzx eax, byte [ptnType]
   250 000002EA 8883C2010000        <1>     mov byte [rbx + mbr.mbrEntry1 + mbrEntry.ptnType], al
   251                              <1>     ;Finish by marking this partition as active, and clearing
   252                              <1>     ; active flag from other partitions
   253 000002F0 C683BE01000080      <1>     mov byte [rbx + mbr.mbrEntry1 + mbrEntry.ptnAtrib], 80h
   254 000002F7 C683CE01000000      <1>     mov byte [rbx + mbr.mbrEntry2 + mbrEntry.ptnAtrib], 00h
   255 000002FE C683DE01000000      <1>     mov byte [rbx + mbr.mbrEntry3 + mbrEntry.ptnAtrib], 00h
   256 00000305 C683EE01000000      <1>     mov byte [rbx + mbr.mbrEntry4 + mbrEntry.ptnAtrib], 00h
   257                              <1> 
   258 0000030C 31D2                <1>     xor edx, edx    ;Write sector 0 on the selected disk 
   259 0000030E E83E050000          <1>     call sectorWrite
   260 00000313 0F82A0030000        <1>     jc badWriteExit
   261                              <1>     ;Now setup the partial VBR to the first sector of the partition
   262                              <1>     ;Start by sanitising the Buffer
   263 00000319 488B3D99090000      <1>     mov rdi, qword [xferBuffer]
   264 00000320 31C0                <1>     xor eax, eax
   265 00000322 B940000000          <1>     mov ecx, 200h/8
   266 00000327 57                  <1>     push rdi
   267 00000328 F348AB              <1>     rep stosq
   268 0000032B 5F                  <1>     pop rdi
   269 0000032C 488D359A110000      <1>     lea rsi, partialVBR
   270 00000333 B93E000000          <1>     mov ecx, partialVBRL
   271 00000338 F3A4                <1>     rep movsb
   272                              <1>     ;xferBuffer has the partial vbr in it now
   273                              <1>     ;rbx points to it
   274 0000033A 8B0569090000        <1>     mov eax, dword [ptnStart]
   275 00000340 89431C              <1>     mov dword [rbx + bpb.hiddSec], eax
   276 00000343 8B0564090000        <1>     mov eax, dword [ptnSize]
   277 00000349 A90000FFFF          <1>     test eax, 0FFFF0000h ;Check for high bits
   278 0000034E 750D                <1>     jnz .fat32Var
   279 00000350 66894313            <1>     mov word [rbx + bpb.totSec16], ax
   280 00000354 C7432000000000      <1>     mov dword [rbx + bpb.totSec32], 0
   281 0000035B EB09                <1>     jmp short .writeVBR
   282                              <1> .fat32Var:
   283 0000035D 66C743130000        <1>     mov word [rbx + bpb.totSec16], 0
   284 00000363 894320              <1>     mov dword [rbx + bpb.totSec32], eax
   285                              <1> .writeVBR:
   286 00000366 8B153D090000        <1>     mov edx, dword [ptnStart]
   287 0000036C E8E0040000          <1>     call sectorWrite
   288 00000371 0F8242030000        <1>     jc badWriteExit
   289                              <1> 
   290 00000377 488D151E0D0000      <1>     lea rdx, createDoneMsg
   291 0000037E E86C050000          <1>     call print
   292 00000383 E93CFDFFFF          <1>     jmp mainLoop
   293                              <1> 
   294                              <1> changeActivePtnMain:
   295                              <1>     ;Now we check which partitions are online. 
   296                              <1>     ; If no partitions are OK, prompt the bad MBR string and return to mainLoop
   297                              <1>     ; If 1 partition is OK and Active, say Partition already active and ret.
   298                              <1>     ; If 1 partition is OK and set active and say Partition already...
   299                              <1>     ; If more than 1 ptn is OK, prompt which partition to set active
   300 00000388 E8F5040000          <1>     call getMBRandCheckValid
   301 0000038D 0F822F030000        <1>     jc badReadExit
   302 00000393 0F852BFDFFFF        <1>     jnz mainLoop
   303 00000399 E892050000          <1>     call printPartitionStatusTable
   304 0000039E 803D0E09000000      <1>     cmp byte [numValidPtn], 0  ;If no partitions are valid, prompt to create
   305 000003A5 750A                <1>     jnz .validPtn
   306 000003A7 E82A050000          <1>     call printBadMBR
   307 000003AC E913FDFFFF          <1>     jmp mainLoop 
   308                              <1> .validPtn:
   309                              <1> ;At least 1 partition is ok.
   310                              <1> ;If it is exactly 1 partition that is ok, check it is active too
   311 000003B1 803DFB08000001      <1>     cmp byte [numValidPtn], 1
   312 000003B8 7552                <1>     jne .manyPartitions
   313                              <1>     ;Now we check if that one partition is active. If it is, write message.
   314                              <1>     ;If it is not, set it to active and write message.
   315                              <1>     ;First we find partition
   316 000003BA 31C0                <1>     xor eax, eax  ;Start from partition 1
   317                              <1> .ptnSearchLp:
   318 000003BC FFC0                <1>     inc eax
   319 000003BE E8DC030000          <1>     call checkPartitionValid
   320 000003C3 74F7                <1>     jz .ptnSearchLp ;This can never infinite loop
   321                              <1> ;eax has the partition number to check for being active
   322                              <1> ;mbr_size is 16 bytes so shift eax left by 4
   323 000003C5 89C1                <1>     mov ecx, eax    ;Save the number in ecx
   324 000003C7 FFC8                <1>     dec eax ;Turn eax into an offset
   325 000003C9 C1E004              <1>     shl eax, 4  ;Multiply by 16
   326 000003CC 89C3                <1>     mov ebx, eax
   327 000003CE 488B35E4080000      <1>     mov rsi, qword [xferBuffer]
   328 000003D5 488DB41EBE010000    <1>     lea rsi, qword [rsi + mbr.mbrEntry1 + rbx]
   329                              <1>     ;rsi now points to the 1 partition
   330 000003DD F60680              <1>     test byte [rsi + mbrEntry.ptnAtrib], 80h    ;Is active bit set?
   331 000003E0 7510                <1>     jnz .singleActive   ;If yes, skip setting
   332 000003E2 800E80              <1>     or byte [rsi + mbrEntry.ptnAtrib], 80h  ;Else set the bit
   333 000003E5 31D2                <1>     xor edx, edx
   334 000003E7 E865040000          <1>     call sectorWrite    ;Write that sector back to the disk
   335 000003EC 0F82C7020000        <1>     jc badWriteExit
   336                              <1> .singleActive:
   337                              <1> ;Use the partition number in ecx to fix message
   338 000003F2 80C930              <1>     or cl, "0"
   339 000003F5 880DF30C0000        <1>     mov byte [activeSinglePtnMsg.number], cl
   340 000003FB 488D15E00C0000      <1>     lea rdx, activeSinglePtnMsg
   341 00000402 E8E8040000          <1>     call print
   342 00000407 E9B8FCFFFF          <1>     jmp mainLoop
   343                              <1> 
   344                              <1> .manyPartitions:
   345                              <1> ;If multiple partitions are marked as active, claim invalid MBR
   346 0000040C 8A05A0080000        <1>     mov al, byte [ptnFlags]
   347 00000412 C0E804              <1>     shr al, 4   ;Bring the high nybble bitfield into low nybble
   348 00000415 3C01                <1>     cmp al, 1
   349 00000417 7416                <1>     je .manyValid
   350 00000419 3C02                <1>     cmp al, 2
   351 0000041B 7412                <1>     je .manyValid
   352 0000041D 3C04                <1>     cmp al, 4
   353 0000041F 740E                <1>     je .manyValid
   354 00000421 3C08                <1>     cmp al, 8
   355 00000423 740A                <1>     je .manyValid
   356                              <1>     ;Multiple active partitions is a bad MBR. Exit and rebuild MBR
   357 00000425 E8AC040000          <1>     call printBadMBR
   358 0000042A E995FCFFFF          <1>     jmp mainLoop
   359                              <1> .manyValid:
   360 0000042F 488D15CE0C0000      <1>     lea rdx, activePromptMsg
   361 00000436 E8B4040000          <1>     call print
   362 0000043B B302                <1>     mov bl, 2
   363 0000043D E875040000          <1>     call takeInput
   364 00000442 803D6C08000001      <1>     cmp byte [charsTyped], 1
   365 00000449 74E4                <1>     je .manyValid
   366 0000044B 0FB60564080000      <1>     movzx eax, byte [inputString]  ;Get the first byte
   367 00000452 3C31                <1>     cmp al, "1"
   368 00000454 72D9                <1>     jb .manyValid
   369 00000456 3C34                <1>     cmp al, "4"
   370 00000458 77D5                <1>     ja .manyValid
   371 0000045A 8805E60C0000        <1>     mov byte [activePartitionSetMsg.number], al ;Set this as the new active ptn
   372 00000460 2C31                <1>     sub al, "1"
   373                              <1>     ;al is now a 0 based partition number
   374 00000462 C1E004              <1>     shl eax, 4  ;Multiply by 16 to get number of bytes into the table
   375 00000465 488B354D080000      <1>     mov rsi, qword [xferBuffer]
   376 0000046C 488DB6BE010000      <1>     lea rsi, qword [rsi + mbr.mbrEntry1]    ;Point to the first table entry
   377 00000473 488D3C06            <1>     lea rdi, qword [rsi + rax]  ;Get the pointer to mark as active
   378 00000477 B904000000          <1>     mov ecx, 4
   379                              <1> .setActiveBytes:
   380 0000047C E827000000          <1>     call .editActiveByte
   381 00000481 FFC9                <1>     dec ecx
   382 00000483 75F7                <1>     jnz .setActiveBytes
   383                              <1>     
   384 00000485 488D15AE0C0000      <1>     lea rdx, activePartitionSetMsg
   385 0000048C E85E040000          <1>     call print
   386                              <1>     ;Print the status table again to confirm what has happened
   387 00000491 E89A040000          <1>     call printPartitionStatusTable
   388 00000496 31D2                <1>     xor edx, edx
   389 00000498 E8B4030000          <1>     call sectorWrite    ;Write the sector to disk with updated 
   390 0000049D 0F8216020000        <1>     jc badWriteExit
   391 000004A3 E91CFCFFFF          <1>     jmp mainLoop
   392                              <1>     
   393                              <1> .editActiveByte:
   394                              <1> ;rsi -> current partition entry
   395                              <1> ;rdi -> Entry to mark as active
   396 000004A8 C60600              <1>     mov byte [rsi + mbrEntry.ptnAtrib], 00h ;Always clear
   397 000004AB 4839FE              <1>     cmp rsi, rdi
   398                              <1>     retz
    65                              <2> cret z
    43                              <3> %%_base:
    44                              <3> %assign baseVar %%_base-$$
    45                              <3>  %ifdef retOff
    46                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    47                              <3>  %ifdef currSegVBase
    48                              <3>  j%+1 short (retOff+currSegVBase)
    49                              <3>  %else
    50                              <3>  j%+1 short retOff
    51                              <3>  %endif
    52                              <3>  %else
    53                              <3>  j%-1 short %%a
    54                              <3>  return
    55                              <3> %%a:
    56                              <3>  %endif
    57                              <3>  %else
    58 000004AE 7501                <3>  j%-1 short %%a
    59                              <3>  return
    37                              <4> %%_ret:
    38 000004B0 C3                  <4>  ret
    39                              <4> %assign retOff %%_ret-$$
    60                              <3> %%a:
    61                              <3>  %endif
   399 000004B1 C60680              <1>     mov byte [rsi + mbrEntry.ptnAtrib], 80h ;Else, set the bit
   400                              <1>     return
    37                              <2> %%_ret:
    38 000004B4 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   401                              <1> 
   402                              <1> deletePtnMain:
   403                              <1> ;The user cannot delete an active partition UNLESS it is the last
   404                              <1> ; partition left on the MBR
   405 000004B5 E8C8030000          <1>     call getMBRandCheckValid    ;Gets up to date info on our MBR
   406 000004BA 0F8202020000        <1>     jc badReadExit
   407 000004C0 0F85FEFBFFFF        <1>     jnz mainLoop
   408 000004C6 E865040000          <1>     call printPartitionStatusTable
   409 000004CB 803DE107000000      <1>     cmp byte [numValidPtn], 0
   410 000004D2 750A                <1>     jne .notNewMBR
   411 000004D4 E8FD030000          <1>     call printBadMBR
   412 000004D9 E9E6FBFFFF          <1>     jmp mainLoop 
   413                              <1> .notNewMBR:
   414 000004DE 803DCE07000001      <1>     cmp byte [numValidPtn], 1
   415 000004E5 754A                <1>     jne .multiplePartitions
   416                              <1>     ;Here we have a single partition, do we want to delete
   417                              <1> .nukeMBR:
   418 000004E7 488D156B0C0000      <1>     lea rdx, deleteNukeMsg
   419 000004EE E8FF020000          <1>     call getYNresponse  ;ZF = ZE => Y, ZF = NZ => N
   420 000004F3 0F85CBFBFFFF        <1>     jnz mainLoop
   421                              <1>     ;Nuke the whole partition table
   422 000004F9 488B3DB9070000      <1>     mov rdi, qword [xferBuffer]
   423 00000500 488DBFBE010000      <1>     lea rdi, qword [rdi + mbr.mbrEntry1]
   424 00000507 B908000000          <1>     mov ecx, 8
   425 0000050C 31C0                <1>     xor eax, eax
   426 0000050E F348AB              <1>     rep stosq
   427 00000511 31D2                <1>     xor edx, edx
   428 00000513 E839030000          <1>     call sectorWrite
   429 00000518 0F829B010000        <1>     jc badWriteExit
   430 0000051E 66AB                <1>     stosw   ;Clear the bootable signature too
   431 00000520 488D155C0C0000      <1>     lea rdx, deleteNukeCompleteMsg
   432 00000527 E8C3030000          <1>     call print
   433 0000052C E993FBFFFF          <1>     jmp mainLoop
   434                              <1> .multiplePartitions: 
   435                              <1> ;Now before we proceed, check if we have multiple active partitions.
   436                              <1> ;If so, we jump to the nuke subroutine
   437 00000531 8A057B070000        <1>     mov al, byte [ptnFlags]
   438 00000537 C0E804              <1>     shr al, 4
   439 0000053A 3C01                <1>     cmp al, 1
   440 0000053C 741A                <1>     je .multipleOk
   441 0000053E 3C02                <1>     cmp al, 2
   442 00000540 7416                <1>     je .multipleOk
   443 00000542 3C04                <1>     cmp al, 4
   444 00000544 7412                <1>     je .multipleOk
   445 00000546 3C08                <1>     cmp al, 8
   446 00000548 740E                <1>     je .multipleOk
   447 0000054A 488D15A30C0000      <1>     lea rdx, deleteBadFoundMsg
   448 00000551 E899030000          <1>     call print
   449 00000556 EB8F                <1>     jmp short .nukeMBR
   450                              <1> .multipleOk:
   451 00000558 488D15410C0000      <1>     lea rdx, deleteSelectMsg
   452 0000055F E88B030000          <1>     call print
   453 00000564 B302                <1>     mov bl, 2
   454 00000566 E84C030000          <1>     call takeInput
   455 0000056B 803D4307000001      <1>     cmp byte [charsTyped], 1
   456 00000572 74BD                <1>     je .multiplePartitions
   457 00000574 0FB6053B070000      <1>     movzx eax, byte [inputString]  ;Get the first byte
   458 0000057B 3C31                <1>     cmp al, "1"
   459 0000057D 72B2                <1>     jb .multiplePartitions
   460 0000057F 3C34                <1>     cmp al, "4"
   461 00000581 77AE                <1>     ja .multiplePartitions
   462 00000583 88C3                <1>     mov bl, al
   463 00000585 2C31                <1>     sub al, "1"
   464                              <1>     ;al is now a 0 based partition number
   465 00000587 C1E004              <1>     shl eax, 4  ;Multiply by 16 to get number of bytes into the table
   466 0000058A 488B3528070000      <1>     mov rsi, qword [xferBuffer]
   467 00000591 488DB406BE010000    <1>     lea rsi, qword [rsi + mbr.mbrEntry1 + rax]    ;Point to the entry we need
   468 00000599 F60680              <1>     test byte [rsi + mbrEntry.ptnAtrib], 80h
   469 0000059C 7411                <1>     jz .okToDelete
   470 0000059E 488D15290C0000      <1>     lea rdx, deleteCannotMsg
   471 000005A5 E845030000          <1>     call print
   472 000005AA E915FBFFFF          <1>     jmp mainLoop
   473                              <1> .okToDelete:
   474 000005AF 881D6D0C0000        <1>     mov byte [deleteOkMsg.number], bl
   475 000005B5 31C0                <1>     xor eax, eax
   476 000005B7 48AB                <1>     stosq
   477 000005B9 48AB                <1>     stosq
   478 000005BB 31D2                <1>     xor edx, edx
   479 000005BD E88F020000          <1>     call sectorWrite
   480 000005C2 0F82F1000000        <1>     jc badWriteExit
   481 000005C8 488D15470C0000      <1>     lea rdx, deleteOkMsg
   482 000005CF E9F0FAFFFF          <1>     jmp mainLoop
   483                              <1> 
   484                              <1> displayPtnInfoMain:
   485                              <1> ;This is done
   486 000005D4 E8A9020000          <1>     call getMBRandCheckValid
   487 000005D9 0F82E3000000        <1>     jc badReadExit
   488 000005DF 0F85DFFAFFFF        <1>     jnz mainLoop
   489 000005E5 E846030000          <1>     call printPartitionStatusTable
   490 000005EA E9D5FAFFFF          <1>     jmp mainLoop
   491                              <1> 
   492                              <1> selectDiskMain:
   493                              <1> ;We select the disk and also read its size and sector size into the variables
   494                              <1> ;1) Say how many disks there are
   495                              <1> ;2) Prompt the user to select a disk
   496                              <1> ;3) Ensure it is a valid number
   497                              <1> ;4) Set the disk number variable
   498                              <1> ;5) Get the disk parameters
   499                              <1> ;6) Exit
   500                              <1> ;If al is greater than 8, then FDISK (for now), can only handle 8 hard disks
   501 000005EF 8A05B3060000        <1>     mov al, byte [numDisks] ;Get the number of disks
   502 000005F5 3C08                <1>     cmp al, 8
   503 000005F7 7602                <1>     jbe .proceed
   504 000005F9 B008                <1>     mov al, 8
   505                              <1> .proceed:
   506 000005FB 0430                <1>     add al, "0" ;Convert to ASCII
   507 000005FD 8805400C0000        <1>     mov byte [selectNumber.number], al
   508 00000603 8805700C0000        <1>     mov byte [selectPrompt.number], al
   509 00000609 488D151E0C0000      <1>     lea rdx, selectNumber
   510 00000610 E8DA020000          <1>     call print
   511                              <1> .promptLoop:
   512 00000615 488D153D0C0000      <1>     lea rdx, selectPrompt
   513 0000061C E8CE020000          <1>     call print
   514 00000621 B302                <1>     mov bl, 2
   515 00000623 E88F020000          <1>     call takeInput
   516 00000628 803D8606000001      <1>     cmp byte [charsTyped], 1
   517 0000062F 74E4                <1>     je .promptLoop
   518 00000631 0FB6057E060000      <1>     movzx eax, byte [inputString]  ;Get the first byte
   519 00000638 3C31                <1>     cmp al, "1"
   520 0000063A 72D9                <1>     jb .promptLoop
   521 0000063C 3C38                <1>     cmp al, "8"
   522 0000063E 77D5                <1>     ja .promptLoop
   523 00000640 2C30                <1>     sub al, "0" ;Get 1 based number 
   524 00000642 880555060000        <1>     mov byte [currentDisk], al  ;Change the current Disk value
   525 00000648 E813060000          <1>     call biosGetHardDiskParameters  ;Now we get the FDD parameters.
   526 0000064D E972FAFFFF          <1>     jmp mainLoop
   527                              <1> 
   528                              <1> exit:
   529                              <1> ;In this case exit is done by ways of triple fault
   530                              <1> ;To do this, we hook int43h to prevent the user from stopping this 
   531                              <1> ; process and to link it directly to this the triple fault
   532 00000652 F60543060000FF      <1>     test byte [reboot], -1
   533 00000659 750C                <1>     jnz .reboot
   534 0000065B E898000000          <1>     call freeResources
   535 00000660 B8004C0000          <1>     mov eax, 4C00h
   536 00000665 CD41                <1>     int 41h
   537                              <1> .reboot:
   538 00000667 488D1580070000      <1>     lea rdx, exitMsg
   539 0000066E B800090000          <1>     mov eax, 0900h
   540 00000673 CD41                <1>     int 41h
   541 00000675 488D150E000000      <1>     lea rdx, .badInstruction
   542 0000067C B843250000          <1>     mov eax, 2543h
   543 00000681 CD41                <1>     int 41h
   544 00000683 B800080000          <1>     mov eax, 0800h  ;Input no echo
   545 00000688 CD41                <1>     int 41h
   546                              <1> .badInstruction:
   547 0000068A 0F011D0E000000      <1>     lidt [.resetIDT] ;Triple fault the machine
   548 00000691 0F011507000000      <1>     lgdt [.resetIDT]
   549 00000698 31C0                <1>     xor eax, eax
   550 0000069A 668EC8              <1>     mov cs, ax
   551 0000069D CD00                <1>     int 00h ;Call div by 0 to trigger reboot if not somehow failed yet
   552                              <1> .resetIDT:
   553 0000069F 0000                <1>     dw 0
   554 000006A1 0000000000000000    <1>     dq 0
   555                              <1> .ctrlCHandler:
   556                              <1> ;If the reboot flag is set, kill the computer
   557 000006A9 F605EC050000FF      <1>     test byte [reboot], -1
   558 000006B0 75B5                <1>     jnz .reboot
   559 000006B2 E841000000          <1>     call freeResources
   560 000006B7 F9                  <1>     stc ;Continue with the exit
   561 000006B8 C3                  <1>     ret ;Return with CF set kills the task
   562                              <1> 
   563                              <1> badWriteExit:
   564 000006B9 488D15F9FFFFFF      <1>     lea rdx, badWriteExit
   565 000006C0 EB19                <1>     jmp short badPrint
   566                              <1> badReadExit:
   567 000006C2 488D15CA0D0000      <1>     lea rdx, badReadMsg
   568 000006C9 EB10                <1>     jmp short badPrint
   569                              <1> badMemoryExit:
   570 000006CB 488D152F0D0000      <1>     lea rdx, noMemoryMsg
   571 000006D2 EB07                <1>     jmp short badPrint
   572                              <1> badSectorExit:
   573 000006D4 488D159B0D0000      <1>     lea rdx, badSectorMsg
   574                              <1> badPrint:
   575 000006DB B409                <1>     mov ah, 09h
   576 000006DD CD41                <1>     int 41h
   577                              <1> badExit:
   578                              <1> ;If we need to reboot, reboot even after an error.
   579 000006DF F605B6050000FF      <1>     test byte [reboot], -1
   580 000006E6 0F857BFFFFFF        <1>     jnz exit.reboot
   581 000006EC E807000000          <1>     call freeResources
   582 000006F1 B8FF4C0000          <1>     mov eax, 4CFFh  ;Exit bad
   583 000006F6 CD41                <1>     int 41h
   584                              <1> 
   585                              <1> freeResources:
   586                              <1> ;Any memory taken from DOS, free it here
   587 000006F8 48813DB60500000000- <1>     cmp qword [xferBuffer], 0
   587 00000701 0000                <1>
   588                              <1>     retz
    65                              <2> cret z
    43                              <3> %%_base:
    44                              <3> %assign baseVar %%_base-$$
    45                              <3>  %ifdef retOff
    46                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    47                              <3>  %ifdef currSegVBase
    48                              <3>  j%+1 short (retOff+currSegVBase)
    49                              <3>  %else
    50                              <3>  j%+1 short retOff
    51                              <3>  %endif
    52                              <3>  %else
    53 00000703 7501                <3>  j%-1 short %%a
    54                              <3>  return
    37                              <4> %%_ret:
    38 00000705 C3                  <4>  ret
    39                              <4> %assign retOff %%_ret-$$
    55                              <3> %%a:
    56                              <3>  %endif
    57                              <3>  %else
    58                              <3>  j%-1 short %%a
    59                              <3>  return
    60                              <3> %%a:
    61                              <3>  %endif
   589 00000706 50                  <1>     push rax
   590 00000707 4150                <1>     push r8
   591 00000709 4C8B05A9050000      <1>     mov r8, qword [xferBuffer]
   592 00000710 B800490000          <1>     mov eax, 4900h
   593 00000715 CD41                <1>     int 41h
   594 00000717 4158                <1>     pop r8
   595 00000719 58                  <1>     pop rax
   596                              <1>     return
    37                              <2> %%_ret:
    38 0000071A C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
    33                                  %include "./Utils/FDISK/Source/fdskUtil.asm"
    34                              <1> 
    35                              <1> ;General Utility functions
    36                              <1> getValue:
    37                              <1> ;Input: ah = Upper ASCII digit
    38                              <1> ;       al = Lower ASCII digit
    39                              <1> ;Output: eax = Number typed in (between 0 and 99)
    40                              <1> ;           If CF=CY, error
    41 0000071B 3C39                <1>     cmp al, "9"
    42 0000071D 7723                <1>     ja .bad
    43 0000071F 3C30                <1>     cmp al, "0"
    44 00000721 721F                <1>     jb .bad
    45 00000723 80FC39              <1>     cmp ah, "9"
    46 00000726 771A                <1>     ja .bad
    47 00000728 80FC30              <1>     cmp ah, "0"
    48 0000072B 7215                <1>     jb .bad
    49                              <1> ;Digits are valid, now proceed
    50 0000072D 80EC30              <1>     sub ah, "0"
    51 00000730 2C30                <1>     sub al, "0"
    52 00000732 0FB6C8              <1>     movzx ecx, al
    53 00000735 0FB6C4              <1>     movzx eax, ah
    54 00000738 B30A                <1>     mov bl, 10
    55 0000073A F6E3                <1>     mul bl  ;Multiply al with bl, result in al
    56 0000073C 00C8                <1>     add al, cl
    57 0000073E 0FB6C0              <1>     movzx eax, al
    58                              <1>     return
    37                              <2> %%_ret:
    38 00000741 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
    59                              <1> .bad:
    60 00000742 F9                  <1>     stc
    61                              <1>     return
    37                              <2> %%_ret:
    38 00000743 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
    62                              <1> 
    63                              <1> getPartitionFlags:
    64                              <1> ;Gets the partition flags ptnFlags and numValidPtn
    65 00000744 488B356E050000      <1>     mov rsi, qword [xferBuffer]
    66 0000074B 488DB6BE010000      <1>     lea rsi, qword [rsi + mbr.mbrEntry1]
    67 00000752 C6055905000000      <1>     mov byte [ptnFlags], 0  ;Clear the bitfield
    68 00000759 C6055305000000      <1>     mov byte [numValidPtn], 0   ;And this variable
    69 00000760 B301                <1>     mov bl, 1
    70 00000762 B904000000          <1>     mov ecx, 4  ;Scan 4 MBR table entries
    71                              <1> .ptnScanLoop:
    72 00000767 E805000000          <1>     call .ptnSigSet
    73 0000076C FFC9                <1>     dec ecx
    74 0000076E 75F7                <1>     jnz .ptnScanLoop
    75                              <1>     return
    37                              <2> %%_ret:
    38 00000770 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
    76                              <1> 
    77                              <1> .ptnSigSet:
    78                              <1> ;Input: bl = On first call, with inital value of mask
    79 00000771 8A4604              <1>     mov al, byte [rsi + mbrEntry.ptnType]
    80 00000774 A8FF                <1>     test al, -1
    81 00000776 741D                <1>     jz .pssNo
    82 00000778 081D34050000        <1>     or byte [ptnFlags], bl
    83 0000077E FE052F050000        <1>     inc byte [numValidPtn]
    84 00000784 F60680              <1>     test byte byte [rsi + mbrEntry.ptnAtrib], 80h
    85 00000787 740C                <1>     jz .pssNo
    86 00000789 C0E304              <1>     shl bl, 4   ;Move bit to high nybble
    87 0000078C 081D20050000        <1>     or byte [ptnFlags], bl
    88 00000792 C0EB04              <1>     shr bl, 4   ;Bring it back low
    89                              <1> .pssNo:
    90 00000795 4881C610000000      <1>     add rsi, mbrEntry_size
    91 0000079C D0E3                <1>     shl bl, 1
    92                              <1>     return
    37                              <2> %%_ret:
    38 0000079E C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
    93                              <1> 
    94                              <1> checkPartitionValid:
    95                              <1> ;Checks if the given partition number is valid or invalid
    96                              <1> ;Input: eax = Partition Number 1-4 
    97                              <1> ;Output: ZF = ZE if value in eax not valid
    98                              <1> ;        ZF = NZ if value in eax is valid
    99 0000079F 50                  <1>     push rax
   100 000007A0 51                  <1>     push rcx
   101 000007A1 FEC8                <1>     dec al  ;Turn into a zero based number (for shift factor)
   102 000007A3 88C1                <1>     mov cl, al  
   103 000007A5 B001                <1>     mov al, 1   ;Set mask bit
   104 000007A7 D2E0                <1>     shl al, cl  ;Shift the mask bit into the right place
   105 000007A9 8A0D03050000        <1>     mov cl, byte [ptnFlags] ;Get the flags
   106 000007AF 80E10F              <1>     and cl, 0Fh ;Keep only the low nybble
   107 000007B2 20C1                <1>     and cl, al  ;Set the Status Flags. If this is zero, ptn not active
   108 000007B4 59                  <1>     pop rcx
   109 000007B5 58                  <1>     pop rax
   110                              <1>     return
    37                              <2> %%_ret:
    38 000007B6 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   111                              <1> 
   112                              <1> getPtnType:
   113                              <1> ;Based on ptnStart and ptnSize, puts the right type of partition
   114                              <1> ;Since we can only make these partitions (for now) at sector 64
   115                              <1> ; of the disk, we can always assume that ptnStart is at 64
   116                              <1> ;If size < 4MB, FAT12, use 01h
   117                              <1> ;If size < 65,536 sectors, use 04h
   118                              <1> ;If size < 1048576 sectors (512Mb), use 06h
   119                              <1> ;Else, use 0Ch
   120 000007B7 8B05F0040000        <1>     mov eax, dword [ptnSize]
   121 000007BD 3DEA1F0000          <1>     cmp eax, 4085*2
   122 000007C2 7216                <1>     jb .fat12
   123 000007C4 3D00000100          <1>     cmp eax, 65536
   124 000007C9 7217                <1>     jb .fat16
   125 000007CB 3D00001000          <1>     cmp eax, 1048576
   126 000007D0 7218                <1>     jb .fat16b
   127 000007D2 C605D80400000C      <1>     mov byte [ptnType], 0Ch
   128                              <1>     return
    37                              <2> %%_ret:
    38 000007D9 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   129                              <1> .fat12:
   130 000007DA C605D004000001      <1>     mov byte [ptnType], 01h
   131                              <1>     return
    37                              <2> %%_ret:
    38 000007E1 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   132                              <1> .fat16:
   133 000007E2 C605C804000004      <1>     mov byte [ptnType], 04h
   134                              <1>     return
    37                              <2> %%_ret:
    38 000007E9 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   135                              <1> .fat16b:
   136 000007EA C605C004000006      <1>     mov byte [ptnType], 06h
   137                              <1>     return
    37                              <2> %%_ret:
    38 000007F1 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   138                              <1> 
   139                              <1> 
   140                              <1> getYNresponse:
   141                              <1> ;Prints a message, and waits for input and verfies it is Y or N.
   142                              <1> ;Input: rdx = String to print
   143                              <1> ;Return: ZF = ZE => Y
   144                              <1> ;        ZF = NZ => N
   145 000007F2 52                  <1>     push rdx    ;Save the input string ptr
   146                              <1> .ep:
   147 000007F3 E8F7000000          <1>     call print
   148 000007F8 B302                <1>     mov bl, 2
   149 000007FA E8B8000000          <1>     call takeInput
   150 000007FF 803DAF04000001      <1>     cmp byte [charsTyped], 1
   151 00000806 75EB                <1>     jne .ep
   152 00000808 0FB605A7040000      <1>     movzx eax, byte [inputString]
   153 0000080F 3C79                <1>     cmp al, "y"
   154 00000811 740F                <1>     je .yResponse
   155 00000813 3C59                <1>     cmp al, "Y"
   156 00000815 740B                <1>     je .yResponse
   157 00000817 3C6E                <1>     cmp al, "n"
   158 00000819 7409                <1>     je .nResponse
   159 0000081B 3C4E                <1>     cmp al, "N"
   160 0000081D 7405                <1>     je .nResponse
   161 0000081F 5A                  <1>     pop rdx
   162 00000820 EBD0                <1>     jmp short getYNresponse
   163                              <1> .yResponse:
   164 00000822 5A                  <1>     pop rdx
   165                              <1>     return
    37                              <2> %%_ret:
    38 00000823 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   166                              <1> .nResponse:
   167 00000824 5A                  <1>     pop rdx
   168 00000825 4839D0              <1>     cmp rax, rdx    ;These cannot be equal at all
   169                              <1>     return
    37                              <2> %%_ret:
    38 00000828 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   170                              <1> 
   171                              <1> 
   172                              <1> sectorRead:
   173                              <1> ;Input: rdx = Sector to read from disk into the buffer
   174 00000829 48891591040000      <1>     mov qword [sectorNum], rdx
   175 00000830 51                  <1>     push rcx
   176 00000831 B903030000          <1>     mov ecx, 0303h  ;ch=number of "resets", cl = Number of retrys
   177                              <1> .tryAgain:
   178 00000836 E8D1030000          <1>     call biosReadSector
   179 0000083B 7312                <1>     jnc .exit
   180 0000083D FEC9                <1>     dec cl  ;One less retry
   181 0000083F 75F5                <1>     jnz .tryAgain
   182 00000841 E80C040000          <1>     call biosResetHardDisk
   183 00000846 7207                <1>     jc .exit    ;If this fails, just fail automatically
   184 00000848 B103                <1>     mov cl, 3   ;Reset retry count
   185 0000084A FECD                <1>     dec ch      ;One less reset check
   186 0000084C 75E8                <1>     jnz .tryAgain
   187 0000084E F9                  <1>     stc
   188                              <1> .exit:
   189 0000084F 59                  <1>     pop rcx
   190                              <1>     return
    37                              <2> %%_ret:
    38 00000850 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   191                              <1> 
   192                              <1> sectorWrite:
   193                              <1> ;Input: rdx = Sector to write to disk from the buffer
   194 00000851 48891569040000      <1>     mov qword [sectorNum], rdx
   195 00000858 51                  <1>     push rcx
   196 00000859 B903030000          <1>     mov ecx, 0303h  ;ch=number of "resets", cl = Number of retrys
   197                              <1> .tryAgain:
   198 0000085E E8CC030000          <1>     call biosWriteSector
   199 00000863 7314                <1>     jnc .exitGood
   200 00000865 FEC9                <1>     dec cl  ;One less retry
   201 00000867 75F5                <1>     jnz .tryAgain
   202 00000869 E8E4030000          <1>     call biosResetHardDisk
   203 0000086E 7207                <1>     jc .exit    ;If this fails, just fail automatically
   204 00000870 B103                <1>     mov cl, 3   ;Reset retry count
   205 00000872 FECD                <1>     dec ch      ;One less reset check
   206 00000874 75E8                <1>     jnz .tryAgain
   207 00000876 F9                  <1>     stc
   208                              <1> .exit:
   209 00000877 59                  <1>     pop rcx
   210                              <1>     return
    37                              <2> %%_ret:
    38 00000878 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   211                              <1> .exitGood:
   212 00000879 C6051C040000FF      <1>     mov byte [reboot], -1   ;Successful write => Need to reboot now
   213 00000880 EBF5                <1>     jmp short .exit
   214                              <1> 
   215                              <1> getMBRandCheckValid:
   216                              <1> ;If CF=CY, error, exit. Error reading disk
   217                              <1> ;If CF=NC and ZF=ZE, Valid MBR
   218                              <1> ;If CF=CY and ZF=NZ, Invalid or missing MBR, return to mainLoop
   219                              <1> ;Updates the partition info if all ok!
   220 00000882 31D2                <1>     xor edx, edx    ;Read sector 0
   221 00000884 E8A0FFFFFF          <1>     call sectorRead
   222                              <1>     retc
    81                              <2> cret c
    43                              <3> %%_base:
    44                              <3> %assign baseVar %%_base-$$
    45                              <3>  %ifdef retOff
    46                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    47                              <3>  %ifdef currSegVBase
    48                              <3>  j%+1 short (retOff+currSegVBase)
    49                              <3>  %else
    50 00000889 72(78)              <3>  j%+1 short retOff
    51                              <3>  %endif
    52                              <3>  %else
    53                              <3>  j%-1 short %%a
    54                              <3>  return
    55                              <3> %%a:
    56                              <3>  %endif
    57                              <3>  %else
    58                              <3>  j%-1 short %%a
    59                              <3>  return
    60                              <3> %%a:
    61                              <3>  %endif
   223 0000088B 488B3527040000      <1>     mov rsi, qword [xferBuffer]
   224 00000892 0FB786FE010000      <1>     movzx eax, word [rsi + mbr.mbrSig]  ;Get this sig
   225 00000899 663D55AA            <1>     cmp ax, 0AA55h  ;Usual
   226 0000089D 7410                <1>     je .greatMbr
   227 0000089F 663DAA55            <1>     cmp ax, 055AAh  ;Unusual but we accept it
   228 000008A3 740A                <1>     je .greatMbr
   229                              <1>     ;Bad Disk error, return to main menu
   230 000008A5 E82C000000          <1>     call printBadMBR
   231 000008AA 31C0                <1>     xor eax, eax
   232 000008AC FFC0                <1>     inc eax
   233                              <1>     return
    37                              <2> %%_ret:
    38 000008AE C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   234                              <1> .greatMbr:
   235 000008AF 9C                  <1>     pushf
   236 000008B0 E88FFEFFFF          <1>     call getPartitionFlags  ;Now update the partition detail flags
   237 000008B5 9D                  <1>     popf
   238                              <1>     return
    37                              <2> %%_ret:
    38 000008B6 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   239                              <1>     
   240                              <1> takeInput:
   241                              <1> ;Input: bl = Number of chars to input
   242                              <1> ;Simply wraps the call to the buffered input function and sanitises the cmdline
   243 000008B7 31C0                <1>     xor eax, eax
   244 000008B9 8905F5030000        <1>     mov dword [cmdLine], eax
   245 000008BF 8805F3030000        <1>     mov byte [cmdLine + 4], al
   246 000008C5 488D15E8030000      <1>     lea rdx, cmdLine
   247 000008CC 881A                <1>     mov byte [rdx], bl   ;Read 1 char (plus CR)
   248 000008CE B80A0C0000          <1>     mov eax, 0C0Ah  ;Flush Input buffer and do Buffered Input
   249 000008D3 CD41                <1>     int 41h
   250                              <1>     return
    37                              <2> %%_ret:
    38 000008D5 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   251                              <1> 
   252                              <1> 
   253                              <1> ;Print Util Functions
   254                              <1> printBadMBR:
   255 000008D6 488D15470B0000      <1>     lea rdx, invalidMBRMsg
   256 000008DD EB10                <1>     jmp short print
   257                              <1> printExit:
   258 000008DF 488D1508050000      <1>     lea rdx, exitMsg
   259 000008E6 EB07                <1>     jmp short print
   260                              <1> printcrlf:
   261 000008E8 488D15DA030000      <1>     lea rdx, crlf
   262                              <1> print:
   263 000008EF B800090000          <1>     mov eax, 0900h
   264 000008F4 CD41                <1>     int 41h
   265                              <1>     return
    37                              <2> %%_ret:
    38 000008F6 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   266                              <1> 
   267                              <1> printPrompt:
   268 000008F7 E8ECFFFFFF          <1>     call printcrlf
   269 000008FC 8A059B030000        <1>     mov al, byte [currentDisk]
   270 00000902 0430                <1>     add al, "0" ;Convert to ASCII digit
   271 00000904 880551050000        <1>     mov byte [drvNum], al
   272 0000090A 488D153F050000      <1>     lea rdx, prompt
   273 00000911 EBDC                <1>     jmp short print
   274                              <1> 
   275                              <1> printVersion:
   276 00000913 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
   277 00000915 CD41                <1>     int 41h
   278 00000917 50                  <1>     push rax
   279 00000918 0FB6C0              <1>     movzx eax, al
   280 0000091B E881010000          <1>     call printDecimalWordAtCursor
   281 00000920 B22E                <1>     mov dl, "."
   282 00000922 B402                <1>     mov ah, 02h
   283 00000924 CD41                <1>     int 41h
   284 00000926 58                  <1>     pop rax
   285 00000927 0FB6C4              <1>     movzx eax, ah
   286 0000092A E872010000          <1>     call printDecimalWordAtCursor
   287                              <1>     return
    37                              <2> %%_ret:
    38 0000092F C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   288                              <1> 
   289                              <1> printPartitionStatusTable:
   290                              <1> ;xferBuffer must have the MBR we are acting on loaded
   291                              <1> ;Start by cleaning the string
   292 00000930 E8B3FFFFFF          <1>     call printcrlf
   293 00000935 E8AEFFFFFF          <1>     call printcrlf
   294 0000093A 488D153D090000      <1>     lea rdx, partTitle
   295 00000941 E8A9FFFFFF          <1>     call print
   296                              <1> 
   297 00000946 488B356C030000      <1>     mov rsi, qword [xferBuffer]
   298 0000094D 488DB6BE010000      <1>     lea rsi, qword [rsi + mbr.mbrEntry1]    ;Goto first table entry
   299 00000954 807E0400            <1>     cmp byte [rsi + mbrEntry.ptnType], 00
   300 00000958 7407                <1>     je .second
   301 0000095A B301                <1>     mov bl, 1
   302 0000095C E889000000          <1>     call .fillString
   303                              <1> .second:
   304 00000961 4881C610000000      <1>     add rsi, mbrEntry_size  ;Goto next entry
   305 00000968 807E0400            <1>     cmp byte [rsi + mbrEntry.ptnType], 00
   306 0000096C 7407                <1>     je .third
   307 0000096E B302                <1>     mov bl, 2
   308 00000970 E875000000          <1>     call .fillString
   309                              <1> .third:
   310 00000975 4881C610000000      <1>     add rsi, mbrEntry_size  ;Goto next entry
   311 0000097C 807E0400            <1>     cmp byte [rsi + mbrEntry.ptnType], 00
   312 00000980 7407                <1>     je .fourth
   313 00000982 B303                <1>     mov bl, 3
   314 00000984 E861000000          <1>     call .fillString
   315                              <1> .fourth:
   316 00000989 4881C610000000      <1>     add rsi, mbrEntry_size  ;Goto next entry
   317 00000990 807E0400            <1>     cmp byte [rsi + mbrEntry.ptnType], 00
   318 00000994 7407                <1>     je .exit
   319 00000996 B304                <1>     mov bl, 4
   320 00000998 E84D000000          <1>     call .fillString
   321                              <1> .exit:
   322 0000099D 488D3DBE090000      <1>     lea rdi, totalSpaceMsg.sizeCount
   323 000009A4 48B820202020202020- <1>     mov rax, "        "
   323 000009AD 20                  <1>
   324 000009AE 57                  <1>     push rdi
   325 000009AF 48AB                <1>     stosq
   326 000009B1 5F                  <1>     pop rdi
   327 000009B2 8B05E6020000        <1>     mov eax, dword [curDiskSize]    ;Get the current disk size
   328 000009B8 E855010000          <1>     call printDecimalWord
   329                              <1> 
   330 000009BD 488D3DBD090000      <1>     lea rdi, totalSpaceMsg.sectorCount
   331 000009C4 B820202020          <1>     mov eax, "    "
   332 000009C9 57                  <1>     push rdi
   333 000009CA AB                  <1>     stosd
   334 000009CB 5F                  <1>     pop rdi
   335 000009CC 0FB705D3020000      <1>     movzx eax, word [sectorSize]
   336 000009D3 E83A010000          <1>     call printDecimalWord
   337                              <1> 
   338 000009D8 488D153A090000      <1>     lea rdx, totalSpaceMsg
   339 000009DF E80BFFFFFF          <1>     call print
   340 000009E4 E8FFFEFFFF          <1>     call printcrlf
   341                              <1>     return
    37                              <2> %%_ret:
    38 000009E9 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   342                              <1> 
   343                              <1> .fillString:
   344                              <1> ;Input:
   345                              <1> ; bl = Partition number (number 1-4)
   346                              <1> ; rsi -> mbr entry to write the string for
   347 000009EA 488D3DF4080000      <1>     lea rdi, partString
   348 000009F1 B020                <1>     mov al, SPC ;Fill the string with space characters
   349 000009F3 B931000000          <1>     mov ecx, partStringL
   350 000009F8 F3AA                <1>     rep stosb   ;Cleanse the string
   351                              <1>     
   352 000009FA 80C330              <1>     add bl, "0"
   353 000009FD 881DE6080000        <1>     mov byte [partString.ptnNum], bl
   354 00000A03 F60680              <1>     test byte [rsi + mbrEntry.ptnAtrib], 80h
   355 00000A06 7407                <1>     jz .notActive
   356 00000A08 C605E308000041      <1>     mov byte [partString.ptnSts], "A"
   357                              <1> .notActive:
   358                              <1> ;01h is FAT12
   359                              <1> ;04h, 06h and 0Eh are FAT16
   360                              <1> ;0Bh and 0Ch are FAT32 
   361 00000A0F 488D3DE0080000      <1>     lea rdi, partString.ptnFS   ;Point to the FS part
   362 00000A16 8A4604              <1>     mov al, byte [rsi + mbrEntry.ptnType]   ;Get the type
   363 00000A19 3C01                <1>     cmp al, 01
   364 00000A1B 7424                <1>     je .fat12
   365 00000A1D 3C04                <1>     cmp al, 04h
   366 00000A1F 742A                <1>     je .fat16
   367 00000A21 3C06                <1>     cmp al, 06h
   368 00000A23 7426                <1>     je .fat16
   369 00000A25 3C0E                <1>     cmp al, 0Eh
   370 00000A27 7422                <1>     je .fat16
   371 00000A29 3C0B                <1>     cmp al, 0Bh
   372 00000A2B 7428                <1>     je .fat32
   373 00000A2D 3C0C                <1>     cmp al, 0Ch
   374 00000A2F 7424                <1>     je .fat32
   375                              <1>     ;Else we print the number
   376 00000A31 E84C010000          <1>     call getHexTwoBytes
   377 00000A36 86C4                <1>     xchg al, ah
   378 00000A38 AA                  <1>     stosb
   379 00000A39 88E0                <1>     mov al, ah
   380 00000A3B AA                  <1>     stosb
   381 00000A3C B068                <1>     mov al, "h"
   382 00000A3E AA                  <1>     stosb
   383 00000A3F EB1F                <1>     jmp short .fatCont
   384                              <1> .fat12:
   385 00000A41 56                  <1>     push rsi
   386 00000A42 488D3578090000      <1>     lea rsi, fat12String
   387 00000A49 EB12                <1>     jmp short .fatCmn
   388                              <1> .fat16:
   389 00000A4B 56                  <1>     push rsi
   390 00000A4C 488D3573090000      <1>     lea rsi, fat16String
   391 00000A53 EB08                <1>     jmp short .fatCmn
   392                              <1> .fat32:
   393 00000A55 56                  <1>     push rsi
   394 00000A56 488D356E090000      <1>     lea rsi, fat32String
   395                              <1> .fatCmn:
   396 00000A5D A5                  <1>     movsd
   397 00000A5E A4                  <1>     movsb
   398 00000A5F 5E                  <1>     pop rsi
   399                              <1> .fatCont:
   400 00000A60 8B4608              <1>     mov eax, dword [rsi + mbrEntry.lbaStart]
   401 00000A63 488D3D92080000      <1>     lea rdi, partString.ptnStart
   402 00000A6A 50                  <1>     push rax
   403 00000A6B E8A2000000          <1>     call printDecimalWord
   404 00000A70 58                  <1>     pop rax
   405 00000A71 8B5E0C              <1>     mov ebx, dword [rsi + mbrEntry.numSectors]
   406 00000A74 01D8                <1>     add eax, ebx
   407 00000A76 FFC8                <1>     dec eax ;Get the address of the last sector (one less than extant)
   408 00000A78 488D3D86080000      <1>     lea rdi, partString.ptnEnd
   409 00000A7F 53                  <1>     push rbx
   410 00000A80 E88D000000          <1>     call printDecimalWord
   411 00000A85 5B                  <1>     pop rbx
   412 00000A86 89D8                <1>     mov eax, ebx
   413 00000A88 488D3D7F080000      <1>     lea rdi, partString.ptnSize
   414 00000A8F E87E000000          <1>     call printDecimalWord
   415                              <1> 
   416 00000A94 488D154A080000      <1>     lea rdx, partString
   417 00000A9B E84FFEFFFF          <1>     call print
   418                              <1>     return
    37                              <2> %%_ret:
    38 00000AA0 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   419                              <1> 
   420                              <1> 
   421                              <1> 
   422                              <1> printDecimalWordAtCursor:
   423                              <1> ;Takes the qword in eax and prints its decimal representation
   424 00000AA1 31C9                <1>     xor ecx, ecx
   425 00000AA3 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   426 00000AA5 85C0                <1>     test eax, eax
   427 00000AA7 750C                <1>     jnz .notZero
   428 00000AA9 B930000000          <1>     mov ecx, "0"
   429 00000AAE BD01000000          <1>     mov ebp, 1  ;Print one digit
   430 00000AB3 EB3E                <1>     jmp short .dpfb2
   431                              <1> .notZero:
   432 00000AB5 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   433 00000AB7 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   434                              <1> .dpfb0:
   435 00000ABC FFC5                <1>     inc ebp
   436 00000ABE 81FD08000000        <1>     cmp ebp, 8
   437 00000AC4 7206                <1>     jb .dpfb00
   438 00000AC6 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   439 00000ACA EB04                <1>     jmp short .dpfb01
   440                              <1> .dpfb00:
   441 00000ACC 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   442                              <1> .dpfb01:
   443 00000AD0 31D2                <1>     xor edx, edx
   444 00000AD2 48F7F6              <1>     div rsi
   445 00000AD5 80C230              <1>     add dl, '0'
   446 00000AD8 80FA39              <1>     cmp dl, '9'
   447 00000ADB 7603                <1>     jbe .dpfb1
   448 00000ADD 80C207              <1>     add dl, 'A'-'0'-10
   449                              <1> .dpfb1:
   450 00000AE0 81FD08000000        <1>     cmp ebp, 8
   451 00000AE6 7204                <1>     jb .dpfb10
   452 00000AE8 88D3                <1>     mov bl, dl ;Add the bottom bits
   453 00000AEA EB02                <1>     jmp short .dpfb11
   454                              <1> .dpfb10:
   455 00000AEC 88D1                <1>     mov cl, dl    ;Save remainder byte
   456                              <1> .dpfb11:
   457 00000AEE 4885C0              <1>     test rax, rax
   458 00000AF1 75C9                <1>     jnz .dpfb0
   459                              <1> .dpfb2:
   460 00000AF3 81FD08000000        <1>     cmp ebp, 8
   461 00000AF9 7208                <1>     jb .dpfb20
   462 00000AFB 88DA                <1>     mov dl, bl
   463 00000AFD 48C1EB08            <1>     shr rbx, 8
   464 00000B01 EB06                <1>     jmp short .dpfb21
   465                              <1> .dpfb20:
   466 00000B03 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   467 00000B05 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   468                              <1> .dpfb21:
   469 00000B09 B402                <1>     mov ah, 02h
   470 00000B0B CD41                <1>     int 41h
   471 00000B0D FFCD                <1>     dec ebp
   472 00000B0F 75E2                <1>     jnz .dpfb2
   473                              <1>     return
    37                              <2> %%_ret:
    38 00000B11 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   474                              <1> 
   475                              <1> printDecimalWord:
   476                              <1> ;Takes the qword in eax and prints its decimal representation
   477                              <1> ;Result placed at [rdi]
   478 00000B12 56                  <1>     push rsi
   479 00000B13 31C9                <1>     xor ecx, ecx
   480 00000B15 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   481 00000B17 85C0                <1>     test eax, eax
   482 00000B19 750C                <1>     jnz .notZero
   483 00000B1B B930000000          <1>     mov ecx, "0"
   484 00000B20 BD01000000          <1>     mov ebp, 1  ;Print one digit
   485 00000B25 EB3E                <1>     jmp short .dpfb2
   486                              <1> .notZero:
   487 00000B27 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   488 00000B29 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   489                              <1> .dpfb0:
   490 00000B2E FFC5                <1>     inc ebp
   491 00000B30 81FD08000000        <1>     cmp ebp, 8
   492 00000B36 7206                <1>     jb .dpfb00
   493 00000B38 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   494 00000B3C EB04                <1>     jmp short .dpfb01
   495                              <1> .dpfb00:
   496 00000B3E 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   497                              <1> .dpfb01:
   498 00000B42 31D2                <1>     xor edx, edx
   499 00000B44 48F7F6              <1>     div rsi
   500 00000B47 80C230              <1>     add dl, '0'
   501 00000B4A 80FA39              <1>     cmp dl, '9'
   502 00000B4D 7603                <1>     jbe .dpfb1
   503 00000B4F 80C207              <1>     add dl, 'A'-'0'-10
   504                              <1> .dpfb1:
   505 00000B52 81FD08000000        <1>     cmp ebp, 8
   506 00000B58 7204                <1>     jb .dpfb10
   507 00000B5A 88D3                <1>     mov bl, dl ;Add the bottom bits
   508 00000B5C EB02                <1>     jmp short .dpfb11
   509                              <1> .dpfb10:
   510 00000B5E 88D1                <1>     mov cl, dl    ;Save remainder byte
   511                              <1> .dpfb11:
   512 00000B60 4885C0              <1>     test rax, rax
   513 00000B63 75C9                <1>     jnz .dpfb0
   514                              <1> .dpfb2:
   515 00000B65 81FD08000000        <1>     cmp ebp, 8
   516 00000B6B 7208                <1>     jb .dpfb20
   517 00000B6D 88DA                <1>     mov dl, bl
   518 00000B6F 48C1EB08            <1>     shr rbx, 8
   519 00000B73 EB06                <1>     jmp short .dpfb21
   520                              <1> .dpfb20:
   521 00000B75 88C8                <1>     mov al, cl    ;Get most sig digit into al
   522 00000B77 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   523                              <1> .dpfb21:
   524 00000B7B AA                  <1>     stosb
   525 00000B7C FFCD                <1>     dec ebp
   526 00000B7E 75E5                <1>     jnz .dpfb2
   527 00000B80 5E                  <1>     pop rsi
   528                              <1>     return
    37                              <2> %%_ret:
    38 00000B81 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   529                              <1> 
   530                              <1> getHexTwoBytes:
   531                              <1> ;Given a number in al, get the HEX digits in ASCII in ax
   532                              <1> ;Input: al = 8 bit number 
   533                              <1> ;Output: ax = ASCII representation of the number
   534 00000B82 53                  <1>     push rbx
   535 00000B83 52                  <1>     push rdx
   536 00000B84 488D1D1A000000      <1>     lea rbx, .ascii
   537 00000B8B 0FB6C0              <1>     movzx eax, al
   538 00000B8E 0FB6D0              <1>     movzx edx, al
   539 00000B91 81E20F000000        <1>     and edx, 0Fh    ;Isolate low nybble
   540 00000B97 C1E804              <1>     shr eax, 4      ;Isolate high nybble and bring it low
   541 00000B9A D7                  <1>     xlatb  ;Get high digit first
   542 00000B9B 88C6                <1>     mov dh, al  ;Save the digit in dh
   543 00000B9D 88D0                <1>     mov al, dl
   544 00000B9F D7                  <1>     xlatb
   545 00000BA0 88F4                <1>     mov ah, dh  ;Get the high digit in ah to form ax
   546 00000BA2 5A                  <1>     pop rdx
   547 00000BA3 5B                  <1>     pop rbx
   548                              <1>     return
    37                              <2> %%_ret:
    38 00000BA4 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   549 00000BA5 303132333435363738- <1> .ascii: db "0123456789ABCEDF"
   549 00000BAE 39414243454446      <1>
   550                              <1> 
   551                              <1> getDecimalWord:
   552                              <1> ;Works on MAX A dword in eax
   553                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   554 00000BB5 31C9                <1>     xor ecx, ecx
   555 00000BB7 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   556 00000BB9 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   557                              <1> .dpfb0:
   558 00000BBE FFC5                <1>     inc ebp
   559 00000BC0 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   560 00000BC4 31D2                <1>     xor edx, edx
   561 00000BC6 48F7F3              <1>     div rbx
   562 00000BC9 80C230              <1>     add dl, '0'
   563 00000BCC 80FA39              <1>     cmp dl, '9'
   564 00000BCF 7603                <1>     jbe .dpfb1
   565 00000BD1 80C207              <1>     add dl, 'A'-'0'-10
   566                              <1> .dpfb1:
   567 00000BD4 88D1                <1>     mov cl, dl    ;Save remainder byte
   568 00000BD6 4885C0              <1>     test rax, rax
   569 00000BD9 75E3                <1>     jnz .dpfb0
   570                              <1>     return
    37                              <2> %%_ret:
    38 00000BDB C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
    34                                  %include "./Utils/FDISK/Source/fdskExt.asm"
    35                              <1> ;FDISK BIOS implementers subroutine file.
    36                              <1> ;All functions that need to be implemented by BIOS implementers 
    37                              <1> ; are contained within this file with a description of what goes where and how.
    38                              <1> ;All used registers are expected to be preserved across a call.
    39                              <1> 
    40                              <1> 
    41                              <1> ;DISK FUNCTIONS
    42                              <1> ;These functions are for Disk actions
    43                              <1> biosGetNumberOfFixedDisks:
    44                              <1> ;Saves the number of Fixed Disks in numDisks
    45                              <1> ;Output: byte [numDisks] = Number of physical hard disks
    46 00000BDC 50                  <1>     push rax
    47 00000BDD 4150                <1>     push r8
    48 00000BDF 4151                <1>     push r9
    49 00000BE1 4152                <1>     push r10
    50 00000BE3 4153                <1>     push r11
    51 00000BE5 4154                <1>     push r12
    52 00000BE7 4155                <1>     push r13
    53 00000BE9 4156                <1>     push r14
    54 00000BEB 4157                <1>     push r15
    55 00000BED CD31                <1>     int 31h
    56 00000BEF 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 of r8
    57 00000BF3 448805AE000000      <1>     mov byte [numDisks], r8b    ;Save number of physical hard drives
    58 00000BFA 415F                <1>     pop r15
    59 00000BFC 415E                <1>     pop r14
    60 00000BFE 415D                <1>     pop r13
    61 00000C00 415C                <1>     pop r12
    62 00000C02 415B                <1>     pop r11
    63 00000C04 415A                <1>     pop r10
    64 00000C06 4159                <1>     pop r9
    65 00000C08 4158                <1>     pop r8
    66 00000C0A 58                  <1>     pop rax
    67                              <1>     return
    37                              <2> %%_ret:
    38 00000C0B C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
    68                              <1> 
    69                              <1> biosReadSector:
    70                              <1> ;Reads one sector.
    71                              <1> ;Input: byte [curentDisk] = 1 based disk number to transact on
    72                              <1> ;       qword [xferBuffer] = Ptr to where to read from disk to
    73                              <1> ;       qword [sectorNum] = Number of disk sector to read
    74                              <1> ;Output: CF=NC, Nothing went wrong
    75                              <1> ;        CF=CY, Error in disk read.
    76 00000C0C 50                  <1>     push rax
    77 00000C0D 53                  <1>     push rbx
    78 00000C0E 51                  <1>     push rcx
    79 00000C0F 52                  <1>     push rdx
    80 00000C10 488B1DA2000000      <1>     mov rbx, qword [xferBuffer]
    81 00000C17 488B0DA3000000      <1>     mov rcx, qword [sectorNum]
    82 00000C1E E869000000          <1>     call biosgetBIOSDiskNumber  ;Get disk number in dl in our case
    83 00000C23 B801820000          <1>     mov eax, 8201h
    84 00000C28 CD33                <1>     int 33h
    85 00000C2A 5A                  <1>     pop rdx
    86 00000C2B 59                  <1>     pop rcx
    87 00000C2C 5B                  <1>     pop rbx
    88 00000C2D 58                  <1>     pop rax
    89                              <1>     return
    37                              <2> %%_ret:
    38 00000C2E C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
    90                              <1>     
    91                              <1> biosWriteSector:
    92                              <1> ;Writes one sector.
    93                              <1> ;Input: byte [curentDisk] = 1 based disk number to transact on
    94                              <1> ;       qword [xferBuffer] = Ptr to where to write to disk from
    95                              <1> ;       qword [sectorNum] = Number of disk sector to write to disk
    96                              <1> ;Output: CF=NC, Nothing went wrong
    97                              <1> ;        CF=CY, Error in disk write.
    98 00000C2F 50                  <1>     push rax
    99 00000C30 53                  <1>     push rbx
   100 00000C31 51                  <1>     push rcx
   101 00000C32 52                  <1>     push rdx
   102 00000C33 488B1D7F000000      <1>     mov rbx, qword [xferBuffer]
   103 00000C3A 488B0D80000000      <1>     mov rcx, qword [sectorNum]
   104 00000C41 E846000000          <1>     call biosgetBIOSDiskNumber
   105 00000C46 B801830000          <1>     mov eax, 8301h
   106 00000C4B CD33                <1>     int 33h
   107 00000C4D 5A                  <1>     pop rdx
   108 00000C4E 59                  <1>     pop rcx
   109 00000C4F 5B                  <1>     pop rbx
   110 00000C50 58                  <1>     pop rax
   111                              <1>     return
    37                              <2> %%_ret:
    38 00000C51 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   112                              <1> 
   113                              <1> biosResetHardDisk:
   114                              <1> ;Reset currentDisk
   115                              <1> ;Input: byte [curentDisk] = 1 based disk number to reset
   116                              <1> ;Output: CF=NC, Nothing went wrong
   117                              <1> ;        CF=CY, Failed to reset the disk system. Abort...
   118 00000C52 50                  <1>     push rax
   119 00000C53 52                  <1>     push rdx
   120 00000C54 E833000000          <1>     call biosgetBIOSDiskNumber
   121 00000C59 31C0                <1>     xor eax, eax
   122 00000C5B CD33                <1>     int 33h
   123 00000C5D 5A                  <1>     pop rdx
   124 00000C5E 58                  <1>     pop rax
   125                              <1>     return
    37                              <2> %%_ret:
    38 00000C5F C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   126                              <1> 
   127                              <1> biosGetHardDiskParameters:
   128                              <1> ;Get the size of the hard disk
   129                              <1> ;Output: qword [curDiskSize] = Number of sectors on disk
   130                              <1> ;        word [sectorSize] = Bytes/Sector value
   131 00000C60 50                  <1>     push rax
   132 00000C61 53                  <1>     push rbx
   133 00000C62 51                  <1>     push rcx
   134 00000C63 52                  <1>     push rdx
   135 00000C64 E823000000          <1>     call biosgetBIOSDiskNumber
   136 00000C69 B800880000          <1>     mov eax, 8800h
   137 00000C6E CD33                <1>     int 33h
   138                              <1>     ;Int 33h/8800h returns
   139                              <1>     ;rbx = Sector size in bytes
   140                              <1>     ;rcx = Last LBA block
   141 00000C70 4881E902000000      <1>     sub rcx, 2  ;Convert from last sector to last ok sector
   142 00000C77 FFC1                <1>     inc ecx ;Turn into a count of sectors
   143 00000C79 48890D1E000000      <1>     mov qword [curDiskSize], rcx
   144 00000C80 66891D1F000000      <1>     mov word [sectorSize], bx
   145 00000C87 5A                  <1>     pop rdx
   146 00000C88 59                  <1>     pop rcx
   147 00000C89 5B                  <1>     pop rbx
   148 00000C8A 58                  <1>     pop rax
   149                              <1>     return
    37                              <2> %%_ret:
    38 00000C8B C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   150                              <1> 
   151                              <1> 
   152                              <1> ;BIOS implementer utility function
   153                              <1> biosgetBIOSDiskNumber:
   154                              <1> ;A utility function, can be left as just return if unnecessary. 
   155                              <1> ;Used to translate currentDisk from an FDISK number to a BIOS specific 
   156                              <1> ; value.
   157                              <1> ;This is only used in this file and is implementer specific.
   158                              <1> ;In this case, 
   159                              <1> ;Output: dl = BIOS disk number
   160 00000C8C 0FB6150A000000      <1>     movzx edx, byte [currentDisk]
   161 00000C93 FFCA                <1>     dec edx
   162 00000C95 81CA80000000        <1>     or edx, 80h ;Set SCPBIOS fixed disk bit
   163                              <1>     return
    37                              <2> %%_ret:
    38 00000C9B C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
    35                                  %include "./Utils/FDISK/Data/fdskData.asm"
    36                              <1> ;Disk Vars
    37 00000C9C 00                  <1> reboot      db 0    ;If this flag is set, should reboot on exit
    38 00000C9D 01                  <1> currentDisk db 1    ;1 based. For SCP/BIOS disk 1 = 80h, disk 2 = 81h etc...
    39                              <1> 
    40 00000C9E 0000000000000000    <1> curDiskSize dq 0    ;Number of usable sectors on device
    41 00000CA6 0000                <1> sectorSize  dw 0    ;Size of a sector (should always be 512, error if not)
    42                              <1> 
    43 00000CA8 00                  <1> numDisks    db 0    ;Count of fixed disks
    44                              <1> 
    45                              <1> ;Create Partition Variables
    46                              <1> ;We also refuse to use CHS. Set those entries to 0 generally
    47 00000CA9 00000000            <1> ptnStart    dd 0    ;LBA for start of partition
    48 00000CAD 00000000            <1> ptnSize     dd 0    ;Number of sectors in partition
    49 00000CB1 00                  <1> ptnType     db 0    ;Partition signature, always 0Ch
    50                              <1> 
    51                              <1> ;ActivePtnVariables
    52                              <1> ;Copy the partition status bytes here if the table is not free.
    53 00000CB2 00                  <1> ptnFlags    db 0    ;Bits [3-0] give the valid partitions
    54                              <1>                     ;Bits [7-4] give the active status of the partitions
    55 00000CB3 00                  <1> numValidPtn db 0    ;Keeps a count of the number of valid partitions
    56                              <1> 
    57                              <1> 
    58                              <1> cmdLine:    ;Users type at most 1 or 2 chars, add some padding
    59 00000CB4 00                  <1> stringLen   db 0    ;Byte 0 = Max string len
    60 00000CB5 00                  <1> charsTyped  db 0    ;Byte 1 = Num typed chars
    61 00000CB6 000000              <1> inputString db 3 dup (0)    ;Where the chars are typed
    62                              <1> ;xfer Variables
    63 00000CB9 0000000000000000    <1> xferBuffer  dq 0    ;A ptr to the memory block through which all xacts occur
    64 00000CC1 0000000000000000    <1> sectorNum   dq 0    ;Number of the sector we wish to xact with
    36                                  %include "./Utils/FDISK/Data/fdskMsg.asm"
    37                              <1> ;This file will contain the "pages" of the application
    38                              <1> 
    39 00000CC9 0A0D24              <1> crlf    db LF,CR,"$"
    40                              <1> ;This message is only printed if a multitasker is detected as installed
    41                              <1> multiMsg:   
    42 00000CCC 506C65617365207374- <1>     db "Please stop all other programs and/or any networking software",
    42 00000CD5 6F7020616C6C206F74- <1>
    42 00000CDE 6865722070726F6772- <1>
    42 00000CE7 616D7320616E642F6F- <1>
    42 00000CF0 7220616E79206E6574- <1>
    42 00000CF9 776F726B696E672073- <1>
    42 00000D02 6F667477617265      <1>
    43 00000D09 206265666F72652070- <1>     db " before proceeding.",LF,CR
    43 00000D12 726F63656564696E67- <1>
    43 00000D1B 2E0A0D              <1>
    44 00000D1E 507265737320456E74- <1>     db "Press Enter to continue once this is done or ESC to return to",
    44 00000D27 657220746F20636F6E- <1>
    44 00000D30 74696E7565206F6E63- <1>
    44 00000D39 652074686973206973- <1>
    44 00000D42 20646F6E65206F7220- <1>
    44 00000D4B 45534320746F207265- <1>
    44 00000D54 7475726E20746F      <1>
    45 00000D5B 444F530A0D24        <1>     db "DOS",LF,CR,"$"
    46                              <1> strtMsg:
    47 00000D61 0D0A                <1>     db CR,LF
    48 00000D63 536369656E74696669- <1>     db "Scientific Control Program / Disk Operating System",LF,CR
    48 00000D6C 6320436F6E74726F6C- <1>
    48 00000D75 2050726F6772616D20- <1>
    48 00000D7E 2F204469736B204F70- <1>
    48 00000D87 65726174696E672053- <1>
    48 00000D90 797374656D0A0D      <1>
    49 00000D97 466978656420446973- <1>     db "Fixed Disk Setup Program Version $"
    49 00000DA0 6B2053657475702050- <1>
    49 00000DA9 726F6772616D205665- <1>
    49 00000DB2 7273696F6E2024      <1>
    50                              <1> 
    51                              <1> cpyrtMsg:
    52 00000DB9 0A0D28432920436F70- <1>     db LF,CR,"(C) Copyright Scientific Computer Research. 2022", LF,CR,"$"
    52 00000DC2 797269676874205363- <1>
    52 00000DCB 69656E746966696320- <1>
    52 00000DD4 436F6D707574657220- <1>
    52 00000DDD 52657365617263682E- <1>
    52 00000DE6 20323032320A0D24    <1>
    53                              <1> 
    54                              <1> exitMsg:
    55 00000DEE 0D0A0A              <1>     db CR,LF,LF
    56 00000DF1 53797374656D207769- <1>     db "System will now restart",LF,CR
    56 00000DFA 6C6C206E6F77207265- <1>
    56 00000E03 73746172740A0D      <1>
    57 00000E0A 496E7365727420626F- <1>     db "Insert bootable DOS medium in drive A:",LF,CR
    57 00000E13 6F7461626C6520444F- <1>
    57 00000E1C 53206D656469756D20- <1>
    57 00000E25 696E20647269766520- <1>
    57 00000E2E 413A0A0D            <1>
    58 00000E32 507265737320616E79- <1>     db "Press any key when ready...",LF,CR,"$"
    58 00000E3B 206B6579207768656E- <1>
    58 00000E44 2072656164792E2E2E- <1>
    58 00000E4D 0A0D24              <1>
    59                              <1> 
    60 00000E50 466978656420446973- <1> prompt: db "Fixed Disk "
    60 00000E59 6B20                <1>
    61 00000E5B 315D2024            <1> drvNum  db "1] $"
    62                              <1> 
    63                              <1> exitOptionMsg:
    64 00000E5F 507265737320582074- <1>     db "Press X to exit",LF,CR,"$"
    64 00000E68 6F20657869740A0D24  <1>
    65                              <1> 
    66                              <1> selectValidOption:
    67 00000E71 0D0A0A0A            <1>     db CR,LF,LF,LF,
    68 00000E75 2D2D2D2D2D2D2D2D2D- <1>     db "------------------------------------",CR,LF
    68 00000E7E 2D2D2D2D2D2D2D2D2D- <1>
    68 00000E87 2D2D2D2D2D2D2D2D2D- <1>
    68 00000E90 2D2D2D2D2D2D2D2D2D- <1>
    68 00000E99 0D0A                <1>
    69 00000E9B 20202020506C656173- <1>     db "    Please select a valid choice    ",CR,LF,
    69 00000EA4 652073656C65637420- <1>
    69 00000EAD 612076616C69642063- <1>
    69 00000EB6 686F69636520202020- <1>
    69 00000EBF 0D0A                <1>
    70 00000EC1 2D2D2D2D2D2D2D2D2D- <1>     db "------------------------------------",CR,LF,LF,LF,"$"
    70 00000ECA 2D2D2D2D2D2D2D2D2D- <1>
    70 00000ED3 2D2D2D2D2D2D2D2D2D- <1>
    70 00000EDC 2D2D2D2D2D2D2D2D2D- <1>
    70 00000EE5 0D0A0A0A24          <1>
    71                              <1> 
    72                              <1> ;Pages
    73                              <1> ;MAIN PAGE
    74                              <1> mainPageMsg:
    75 00000EEA 43686F6F7365206F6E- <1>     db "Choose one of the following:",LF,CR
    75 00000EF3 65206F662074686520- <1>
    75 00000EFC 666F6C6C6F77696E67- <1>
    75 00000F05 3A0A0D              <1>
    76 00000F08 202031292043726561- <1>     db "  1) Create DOS Partition",LF,CR
    76 00000F11 746520444F53205061- <1>
    76 00000F1A 72746974696F6E0A0D  <1>
    77 00000F23 20203229204368616E- <1>     db "  2) Change Active Partition",LF,CR
    77 00000F2C 676520416374697665- <1>
    77 00000F35 20506172746974696F- <1>
    77 00000F3E 6E0A0D              <1>
    78 00000F41 202033292044656C65- <1>     db "  3) Delete DOS Partition",LF,CR
    78 00000F4A 746520444F53205061- <1>
    78 00000F53 72746974696F6E0A0D  <1>
    79 00000F5C 202034292044697370- <1>     db "  4) Display Partition Information",LF,CR,"$"
    79 00000F65 6C6179205061727469- <1>
    79 00000F6E 74696F6E20496E666F- <1>
    79 00000F77 726D6174696F6E0A0D- <1>
    79 00000F80 24                  <1>
    80                              <1> mpOptionalMsg:
    81 00000F81 202035292053656C65- <1>     db "  5) Select Fixed Disk Drive",LF,CR,"$"
    81 00000F8A 637420466978656420- <1>
    81 00000F93 4469736B2044726976- <1>
    81 00000F9C 650A0D24            <1>
    82                              <1> 
    83                              <1> ;CREATE PARTITION PAGE
    84                              <1> createPageBadMsg:
    85 00000FA0 5072696D6172792044- <1>     db "Primary DOS partition already exists",LF,CR,"$"
    85 00000FA9 4F5320706172746974- <1>
    85 00000FB2 696F6E20616C726561- <1>
    85 00000FBB 647920657869737473- <1>
    85 00000FC4 0A0D24              <1>
    86                              <1> createPageMsg:
    87 00000FC7 43726561746520444F- <1>     db "Create DOS Partition",LF,LF,CR
    87 00000FD0 532050617274697469- <1>
    87 00000FD9 6F6E0A0A0D          <1>
    88 00000FDE 446F20796F75207769- <1>     db "Do you wish to use the entire fixed disk for DOS? Y/N: $"
    88 00000FE7 736820746F20757365- <1>
    88 00000FF0 2074686520656E7469- <1>
    88 00000FF9 726520666978656420- <1>
    88 00001002 6469736B20666F7220- <1>
    88 0000100B 444F533F20592F4E3A- <1>
    88 00001014 2024                <1>
    89                              <1> createPage2Msg:
    90 00001016 537065636966792068- <1>     db "Specify how much of the fixed disk you wish to use (1%-99%) or"
    90 0000101F 6F77206D756368206F- <1>
    90 00001028 662074686520666978- <1>
    90 00001031 6564206469736B2079- <1>
    90 0000103A 6F7520776973682074- <1>
    90 00001043 6F2075736520283125- <1>
    90 0000104C 2D39392529206F72    <1>
    91 00001054 0D0A                <1>     db CR,LF,
    92 00001056 507265737320582074- <1>     db "Press X to return to FDISK options",CR,LF,"$"
    92 0000105F 6F2072657475726E20- <1>
    92 00001068 746F20464449534B20- <1>
    92 00001071 6F7074696F6E730D0A- <1>
    92 0000107A 24                  <1>
    93                              <1> createPromptMsg: 
    94 0000107B 547970652061206E75- <1>     db "Type a number between 1 and 99] $"
    94 00001084 6D6265722062657477- <1>
    94 0000108D 65656E203120616E64- <1>
    94 00001096 2039395D2024        <1>
    95                              <1> createDoneMsg:
    96 0000109C 0D0A0A5072696D6172- <1>     db CR,LF,LF,"Primary partition created", CR,LF,"$"
    96 000010A5 792070617274697469- <1>
    96 000010AE 6F6E20637265617465- <1>
    96 000010B7 640D0A24            <1>
    97                              <1> createForeignBad:
    98 000010BB 0D0A4E6F6E2D444F53- <1>     db CR,LF,"Non-DOS primary partition detected",CR,LF,"$"
    98 000010C4 207072696D61727920- <1>
    98 000010CD 706172746974696F6E- <1>
    98 000010D6 206465746563746564- <1>
    98 000010DF 0D0A24              <1>
    99                              <1> 
   100                              <1> ;CHANGE ACTIVE PARTITION ON DISK PAGE
   101                              <1> activeSinglePtnMsg:
   102 000010E2 0D0A50617274697469- <1>     db CR,LF,"Partition "
   102 000010EB 6F6E20              <1>
   103                              <1> .number:
   104 000010EE 3120697320616C7265- <1>     db "1 is already active",CR,LF,"$"
   104 000010F7 616479206163746976- <1>
   104 00001100 650D0A24            <1>
   105                              <1> 
   106                              <1> activePromptMsg:
   107 00001104 0D0A506C6561736520- <1>     db CR,LF,"Please select a partition to mark as active (1-4): $"
   107 0000110D 73656C656374206120- <1>
   107 00001116 706172746974696F6E- <1>
   107 0000111F 20746F206D61726B20- <1>
   107 00001128 617320616374697665- <1>
   107 00001131 2028312D34293A2024  <1>
   108                              <1> activePartitionSetMsg:
   109 0000113A 0D0A50617274697469- <1>     db CR,LF,"Partition "
   109 00001143 6F6E20              <1>
   110                              <1> .number:
   111 00001146 31206E6F7720736574- <1>     db "1 now set active",CR,LF,"$"
   111 0000114F 206163746976650D0A- <1>
   111 00001158 24                  <1>
   112                              <1> 
   113                              <1> ;DELETE PARTITION PAGE
   114                              <1> deleteNukeMsg:
   115 00001159 0D0A                <1>     db CR,LF,
   116 0000115B 44656C657465207468- <1>     db "Delete the whole Partition Table? Y/N: $"
   116 00001164 652077686F6C652050- <1>
   116 0000116D 6172746974696F6E20- <1>
   116 00001176 5461626C653F20592F- <1>
   116 0000117F 4E3A2024            <1>
   117                              <1> deleteNukeCompleteMsg:
   118 00001183 0D0A0A506172746974- <1>     db CR,LF,LF,"Partition Table Deleted",CR,LF,"$"
   118 0000118C 696F6E205461626C65- <1>
   118 00001195 2044656C657465640D- <1>
   118 0000119E 0A24                <1>
   119                              <1> deleteSelectMsg:
   120 000011A0 0D0A506C6561736520- <1>     db CR,LF, "Please select a partition to delete (1-4): $"
   120 000011A9 73656C656374206120- <1>
   120 000011B2 706172746974696F6E- <1>
   120 000011BB 20746F2064656C6574- <1>
   120 000011C4 652028312D34293A20- <1>
   120 000011CD 24                  <1>
   121                              <1> deleteCannotMsg:
   122 000011CE 0D0A43616E6E6F7420- <1>     db CR,LF, "Cannot delete an active partition",CR,LF,"$"
   122 000011D7 64656C65746520616E- <1>
   122 000011E0 206163746976652070- <1>
   122 000011E9 6172746974696F6E0D- <1>
   122 000011F2 0A24                <1>
   123                              <1> deleteBadFoundMsg:
   124 000011F4 0D0A42616420506172- <1>     db CR,LF, "Bad Partition Table detected.",CR,LF,"$"
   124 000011FD 746974696F6E205461- <1>
   124 00001206 626C65206465746563- <1>
   124 0000120F 7465642E0D0A24      <1>
   125                              <1> deleteOkMsg:
   126 00001216 0D0A50617274697469- <1>     db CR,LF, "Partition "
   126 0000121F 6F6E20              <1>
   127                              <1> .number:
   128 00001222 312064656C65746564- <1>     db "1 deleted",CR,LF,"$"
   128 0000122B 0D0A24              <1>
   129                              <1> 
   130                              <1> ;SELECT FIXED DISK PAGE 
   131                              <1> selectNumber:
   132 0000122E 0D0A464449534B2068- <1>     db CR,LF,"FDISK has detected "
   132 00001237 617320646574656374- <1>
   132 00001240 656420              <1>
   133                              <1> .number:
   134 00001243 302046697865642044- <1>     db "0 Fixed Disk Drives",CR,LF,"$"
   134 0000124C 69736B204472697665- <1>
   134 00001255 730D0A24            <1>
   135                              <1> selectPrompt:
   136 00001259 0D0A506C6561736520- <1>     db CR,LF,"Please select a Fixed Disk (1-"
   136 00001262 73656C656374206120- <1>
   136 0000126B 466978656420446973- <1>
   136 00001274 6B2028312D          <1>
   137                              <1> .number:
   138 00001279 31293A2024          <1>     db "1): $"
   139                              <1> ;Partition status table
   140                              <1> partTitle:
   141 0000127E 2D2D2D2D2D2D2D2D2D- <1>     db "-------------------------------------------------",CR,LF
   141 00001287 2D2D2D2D2D2D2D2D2D- <1>
   141 00001290 2D2D2D2D2D2D2D2D2D- <1>
   141 00001299 2D2D2D2D2D2D2D2D2D- <1>
   141 000012A2 2D2D2D2D2D2D2D2D2D- <1>
   141 000012AB 2D2D2D2D0D0A        <1>
   142 000012B1 506172746974696F6E- <1>     db "Partition Status Type  Start    End      Size    ",CR,LF,"$"
   142 000012BA 205374617475732054- <1>
   142 000012C3 797065202053746172- <1>
   142 000012CC 7420202020456E6420- <1>
   142 000012D5 202020202053697A65- <1>
   142 000012DE 202020200D0A24      <1>
   143                              <1> ;Partition status table string, this gets edited... a lot
   144                              <1> partString:
   145 000012E5 20202020            <1>     db "    "
   146                              <1> .ptnNum:
   147 000012E9 312020202020202020  <1>     db "1", "    ", " ", "   "
   148                              <1> .ptnSts:
   149 000012F2 41202020            <1>     db "A","  "," " 
   150                              <1> .ptnFS:
   151 000012F6 2020202020          <1>     db "     "  ;This is 5 chars, either FAT12, FAT16, FAT32 or a 2 digit num 
   152 000012FB 20                  <1>     db " "
   153                              <1> .ptnStart:
   154 000012FC 2020202020202020    <1>     db "        "   ;8 digits for the LBA of the first sector of the partition
   155 00001304 20                  <1>     db " "
   156                              <1> .ptnEnd:
   157 00001305 2020202020202020    <1>     db "        "   ;8 digits for the LBA of the last sector of the partition
   158 0000130D 20                  <1>     db " "
   159                              <1> .ptnSize:
   160 0000130E 2020202020202020    <1>     db "        "   ;8 digits for the number of sectors in the partition
   161                              <1> partStringL equ $ - partString  ;Use this to clean the string with spaces
   162 00001316 0D0A24              <1>     db CR,LF,"$"
   163                              <1> 
   164                              <1> totalSpaceMsg:
   165 00001319 0D0A                <1>     db CR,LF
   166 0000131B 2D2D2D2D2D2D2D2D2D- <1>     db "-------------------------------------------------",CR,LF
   166 00001324 2D2D2D2D2D2D2D2D2D- <1>
   166 0000132D 2D2D2D2D2D2D2D2D2D- <1>
   166 00001336 2D2D2D2D2D2D2D2D2D- <1>
   166 0000133F 2D2D2D2D2D2D2D2D2D- <1>
   166 00001348 2D2D2D2D0D0A        <1>
   167 0000134E 546F74616C20446973- <1>     db "Total Disk Space is ", 
   167 00001357 6B2053706163652069- <1>
   167 00001360 7320                <1>
   168                              <1> .sizeCount:
   169 00001362 2020202020202020    <1>     db "        ",
   170 0000136A 20536563746F72730D- <1>     db " Sectors",CR,LF
   170 00001373 0A                  <1>
   171 00001374 536563746F72205369- <1>     db "Sector Size: "
   171 0000137D 7A653A20            <1>
   172                              <1> .sectorCount:
   173 00001381 20202020            <1>     db "    "
   174 00001385 2042797465730D0A    <1>     db " Bytes",CR,LF
   175 0000138D 2D2D2D2D2D2D2D2D2D- <1>     db "-------------------------------------------------",CR,LF,"$"
   175 00001396 2D2D2D2D2D2D2D2D2D- <1>
   175 0000139F 2D2D2D2D2D2D2D2D2D- <1>
   175 000013A8 2D2D2D2D2D2D2D2D2D- <1>
   175 000013B1 2D2D2D2D2D2D2D2D2D- <1>
   175 000013BA 2D2D2D2D0D0A24      <1>
   176                              <1> 
   177                              <1> 
   178 000013C1 4641543132          <1> fat12String:    db "FAT12"
   179 000013C6 4641543136          <1> fat16String:    db "FAT16"
   180 000013CB 4641543332          <1> fat32String:    db "FAT32"
   181                              <1> 
   182                              <1> ;Error Messages
   183                              <1> badVerStr:
   184 000013D0 496E636F7272656374- <1>     db "Incorrect DOS version",CR,LF,"$"
   184 000013D9 20444F532076657273- <1>
   184 000013E2 696F6E0D0A24        <1>
   185                              <1> noDisks:
   186 000013E8 4E6F20666978656420- <1>     db "No fixed disks present",CR,LF,"$"
   186 000013F1 6469736B7320707265- <1>
   186 000013FA 73656E740D0A24      <1>
   187                              <1> noMemoryMsg:
   188 00001401 4E6F7420656E6F7567- <1>     db "Not enough free memory in system",CR,LF,"$"
   188 0000140A 682066726565206D65- <1>
   188 00001413 6D6F727920696E2073- <1>
   188 0000141C 797374656D0D0A24    <1>
   189                              <1> invalidMBRMsg:
   190 00001424 0D0A                <1>     db CR,LF
   191 00001426 496E76616C6964206F- <1>     db "Invalid or Missing Master Boot Record",CR,LF
   191 0000142F 72204D697373696E67- <1>
   191 00001438 204D61737465722042- <1>
   191 00001441 6F6F74205265636F72- <1>
   191 0000144A 640D0A              <1>
   192 0000144D 506C65617365204372- <1>     db "Please Create a new Master Boot Record",CR,LF,"$"
   192 00001456 656174652061206E65- <1>
   192 0000145F 77204D617374657220- <1>
   192 00001468 426F6F74205265636F- <1>
   192 00001471 72640D0A24          <1>
   193                              <1> badSectorMsg:
   194 00001476 0D0A                <1>     db CR,LF
   195 00001478 42616420536563746F- <1>     db "Bad Sector Size Detected",CR,LF,"$"
   195 00001481 722053697A65204465- <1>
   195 0000148A 7465637465640D0A24  <1>
   196                              <1> badReadMsg:
   197 00001493 0D0A                <1>     db CR,LF
   198 00001495 4572726F7220726561- <1>     db "Error reading Fixed Disk",CR,LF,"$"
   198 0000149E 64696E672046697865- <1>
   198 000014A7 64204469736B0D0A24  <1>
   199                              <1> badWriteMsg:
   200 000014B0 0D0A                <1>     db CR,LF
   201 000014B2 4572726F7220777269- <1>     db "Error writing Fixed Disk",CR,LF,"$"
   201 000014BB 74696E672046697865- <1>
   201 000014C4 64204469736B0D0A24  <1>
   202                              <1> 
    37                                  
    38                                  ;Place the partial VBR here.
    39                                  ;All uninitialised values are set to 0
    40                                  ;If total sectors is bigger than 16 bits, set totSec16 to 0
    41                                  ;Else set totSec32 to 0
    42                                  partialVBR:
    43                                      istruc bpb
    44 000014CD EB0090                      at bpb.jmpBoot,     db 0EBh, 00h, 90h   ;Needed start signtature
    45 000014D0 534350444F537631            at bpb.oemName,     db 'SCPDOSv1'
    46 000014D8 0002                        at bpb.bytsPerSec,  dw 0200h        ;512 bytes per sector always
    47 000014DA 00                          at bpb.secPerClus,  db 0            ;Unset by FDISK
    48 000014DB 0000                        at bpb.revdSecCnt,  dw 0            ;Unset by FDISK
    49 000014DD 01                          at bpb.numFATs,     db 1            ;Unset by FDISK, set to 1
    50 000014DE 0000                        at bpb.rootEntCnt,  dw 0            ;Unset by FDISK
    51 000014E0 FFFF                        at bpb.totSec16,    dw -1           ;Total number of sectors on disk
    52 000014E2 F8                          at bpb.media,       db 0F8h         ;Hard Disk Media byte
    53 000014E3 0000                        at bpb.FATsz16,     dw 0            ;Unset by FDISK
    54 000014E5 3F00                        at bpb.secPerTrk,   dw 003Fh        ;Fake Hard disk geometry 64 sec/trk
    55 000014E7 FF00                        at bpb.numHeads,    dw 00FFh        ;255 Heads
    56 000014E9 FFFFFFFF                    at bpb.hiddSec,     dd -1           ;Set this field
    57 000014ED FFFFFFFF                    at bpb.totSec32,    dd -1           ;Set total sec if bigger than 16 bits 
    58 000014F1 00<rep 1Ah>                 iend
    59                                  partialVBRL equ $ - partialVBR
    60                                  freshMBRcopy:   ;Symbol pointing to the MBR copy appended
    60          ------------------       info: assembly required 1+2+2 passes

