     1                                  
     2                                  ;FDISK utility for SCP/DOS 1.0
     3                                  ;Bypases filesystem to "low-level format" the target fixed disk.
     4                                  ;Restarts the machine upon completion by triple faulting.
     5                                  
     6                                  ;Steps taken:
     7                                  ;0) Call Int 4Ah/EAX=0h. If it returns ah <> 0, then tell the user to
     8                                  ;    stop any other tasks and networking software before continuing.
     9                                  ;    Give them a "Press Enter to continue or ESC to return to DOS" prompt.
    10                                  ;1) Queries the BIOS implementation (in this case SCP/BIOS) for the number
    11                                  ;    of fixed disks.
    12                                  ; Enter the Menu.
    13                                  ;Main menu will have 4 main options and 1 optional option
    14                                  ;   1) Create 
    15                                  
    16                                  ;If the user wants to create a new partition, we ask them how much of the 
    17                                  ; disk they want their partioned to take up as a percentage from 1%-99%
    18                                  ;We then round to the nearest cylinder (multiple of 64 sectors), 
    19                                  ; rounding up (if 0) or down (if past max sector).
    20                                  
    21                                  [map all ./Utils/FDISK/Listings/fdisk.map]
    22                                  [DEFAULT REL]
    23                                  BITS 64
    24                                  %include "./Source/Include/dosMacro.mac"
    25                              <1> 
    26                              <1> ;-------------------------------------------------------------------------------
    27                              <1> ;Generic Macros file
    28                              <1> ;The following instruction extensions allow to conditionally return
    29                              <1> ;The idea was borrowed from the DOS Source Code
    30                              <1> ;
    31                              <1> ;-------------------------------------------------------------------------------
    32                              <1> 
    33                              <1> ;-------------------------------------------------------------------------------
    34                              <1> ;These macros are live and must not be touched
    35                              <1> ;-------------------------------------------------------------------------------
    36                              <1> %macro return 0
    37                              <1> %%_ret:
    38                              <1>     ret
    39                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    40                              <1> %endmacro
    41                              <1> 
    42                              <1> %macro cret 1
    43                              <1> %%_base:
    44                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    45                              <1>     %ifdef retOff
    46                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    47                              <1>     %ifdef currSegVBase
    48                              <1>     j%+1 short (retOff+currSegVBase)
    49                              <1>     %else
    50                              <1>     j%+1 short retOff
    51                              <1>     %endif  ;End ifdef currSegVBase
    52                              <1>     %else 
    53                              <1>     j%-1 short %%a
    54                              <1>     return
    55                              <1> %%a:
    56                              <1>     %endif  ;End the distance measurement if
    57                              <1>     %else   
    58                              <1>     j%-1 short %%a
    59                              <1>     return
    60                              <1> %%a:
    61                              <1>     %endif  ;End ifdef retoff
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retz 0
    65                              <1> cret z
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnz 0
    69                              <1> cret nz
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro rete 0
    73                              <1> cret e
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retne 0
    77                              <1> cret ne
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro retc 0
    81                              <1> cret c
    82                              <1> %endmacro
    83                              <1> 
    84                              <1> %macro retnc 0
    85                              <1> cret nc
    86                              <1> %endmacro
    87                              <1> 
    88                              <1> %macro retb 0
    89                              <1> cret b
    90                              <1> %endmacro
    91                              <1> 
    92                              <1> %macro retnb 0
    93                              <1> cret nb
    94                              <1> %endmacro
    95                              <1> 
    96                              <1> %macro reta 0
    97                              <1> cret a
    98                              <1> %endmacro
    99                              <1> 
   100                              <1> %macro retna 0
   101                              <1> cret na
   102                              <1> %endmacro
   103                              <1> 
   104                              <1> %macro breakpoint 0
   105                              <1> xchg bx, bx
   106                              <1> %endmacro
    25                                  %include "./Source/Include/dosStruc.inc"
    26                              <1> 
    27                              <1> ;-------------------------------------------------------;
    28                              <1> ; This include file contains miscellaneous internal     ;
    29                              <1> ; SCP/DOS structures.                                   ;
    30                              <1> ;-------------------------------------------------------;
    31                              <1> 
    32                              <1> ;------------------------------------------------------------------------;
    33                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    34                              <1> ; its file system structure. This is used to locate files and structures
    35                              <1> ; on the device itself and to translate file requests to cluster chains
    36                              <1> ; to LBAs to pass to the disk driver..
    37                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    38                              <1> ; drivers Initialise routine has been called.
    39                              <1> ;------------------------------------------------------------------------;
    40                              <1> struc dpb        ;Drive Parameter Block
    41                              <1> 
    42 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    43 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    44 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    45 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    46 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    47 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    48 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    49 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    50 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    51 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    52 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    53 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    54                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    55 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    56 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    57 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    58 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    59 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    60 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    61                              <1> 
    62                              <1> endstruc
    63                              <1> 
    64                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    65                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    66                              <1> ;------------------------------------------------------------------------;
    67                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    68                              <1> ; All disk pathing requests go via the CDS for that drive.
    69                              <1> ; The default drive is the last accessed drive, this number is stored
    70                              <1> ; in the DOS data area.
    71                              <1> ; The CDS is stored as an array with the offset into the array being 
    72                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    73                              <1> ;
    74                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> struc cds       ;Current Directory structure
    77 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    78 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    79 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    80 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    81 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    82 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    83                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    84                              <1> ; another, we save the number of chars to skip to that deep level).
    85                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    86                              <1> ; Only affects for SUBST drives, not JOIN
    87                              <1> ; Flags: Bit 15 set = Network drive
    88                              <1> ;        Bit 14 set = Physical drive
    89                              <1> ;        Bit 13 set = JOIN'ed drive
    90                              <1> ;        Bit 12 set = SUBST'ed drive
    91                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    92                              <1> endstruc
    93                              <1> ;CDS equates
    94                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    95                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    96                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    97                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    98                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    99                              <1> ;------------------------------------------------------------------------;
   100                              <1> ; The SFT is a way to allow applications to open file handles to files 
   101                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
   102                              <1> ; under the first header, and then a second header will be linked to the 
   103                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
   104                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
   105                              <1> ; using the FCBS= command. Default FCBS=5.
   106                              <1> ;
   107                              <1> ; A file handle describes the file, and the location within the file that
   108                              <1> ; we are reading. The file handle can be manipulated without the file
   109                              <1> ; being in memory, thus allowing the user to access data without needing 
   110                              <1> ; to take up large portions of memory. Similarly, file handles allow for
   111                              <1> ; accessing devices, by treating them as files with their drivers 
   112                              <1> ; responding and translating the manipulations of the file handle itself.
   113                              <1> ; Neither the driver nor the application should see or use the SFT for
   114                              <1> ; the handle, as it is subject to change (and will change when file 
   115                              <1> ; sharing provisions are included). The DOS will make requests to the 
   116                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
   117                              <1> ; track of the information in the SFT entry for that handle. 
   118                              <1> ;
   119                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   120                              <1> ; can point to the same file. It all depends on what the applications 
   121                              <1> ; want to do with the File.
   122                              <1> ;
   123                              <1> ; !!!!IMPORTANT!!!!
   124                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   125                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   126                              <1> ;
   127                              <1> ;Each SFT may look like this:
   128                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   129                              <1> ;            |                |
   130                              <1> ;       wNumFiles*sft    wNumFiles*sft
   131                              <1> ;
   132                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   133                              <1> ; System FCBs.
   134                              <1> ;
   135                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   136                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   137                              <1> ;
   138                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   139                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   140                              <1> ;------------------------------------------------------------------------;
   141                              <1> struc sfth   ;System file table header
   142                              <1> ; This is the SFT header.
   143                              <1> ; This structure comes before the start of the first file in the array/table.
   144 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   145 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   146                              <1> endstruc
   147                              <1> 
   148                              <1> struc sft
   149                              <1> ;This is the file struc itself
   150 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   151 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   152 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   153 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   154 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   155 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   156 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   157 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   158 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   159 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   160 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   161 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   162 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   163 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   164 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   165 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   166 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   167 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   168 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   169                              <1> ;                           0 means no record
   170                              <1> endstruc
   171                              <1> ;Open Mode equates
   172                              <1> ;Access modes   Bits[2:0]
   173                              <1> ReadAccess      equ 0h
   174                              <1> WriteAccess     equ 1h
   175                              <1> RWAccess        equ 2h
   176                              <1> ;Bit 3 reserved 0
   177                              <1> ;Sharing modes  Bits[6:4]
   178                              <1> CompatShare     equ 0h
   179                              <1> denyRWShare     equ 10h
   180                              <1> denyWriteShare  equ 20h
   181                              <1> denyReadShare   equ 30h
   182                              <1> denyNoneShare   equ 40h
   183                              <1> netFCBShare     equ 70h
   184                              <1> noInherit       equ 80h
   185                              <1> ;Bits 8-12 reserved 0
   186                              <1> 
   187                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   188                              <1> ;Buffering on writes
   189                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   190                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   191                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   192                              <1> ;Attribute Byte
   193                              <1> readOnlyFile    equ 1h
   194                              <1> hiddenFile      equ 2h
   195                              <1> systemFile      equ 4h
   196                              <1> volumeLabel     equ 8h
   197                              <1> directoryFile   equ 10h ;Directory entry
   198                              <1> archiveFile     equ 20h
   199                              <1> ;Device Info equates
   200                              <1> ;For a block device, bits [5:0] contain the drive number
   201                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   202                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   203                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   204                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   205                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   206                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   207                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   208                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   209                              <1> devCharDev      equ 80h ;If set, it is a char device!
   210                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   211                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   212                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   213                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   214                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   215                              <1>  
   216                              <1> ;------------------------------------------------------------------------;
   217                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   218                              <1> ; to an internal buffer, and then copying it to the specified location
   219                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   220                              <1> ; another request for the same sector from the same device is made, so 
   221                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   222                              <1> ; size, selected according to the largest detected sector size during 
   223                              <1> ; the initial loadup.
   224                              <1> ;
   225                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   226                              <1> ;
   227                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   228                              <1> ;------------------------------------------------------------------------;
   229                              <1> 
   230                              <1> struc bufferHdr
   231 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   232 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   233 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   234 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   235 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   236 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   237 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   238 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   239 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   240                              <1>     .dataarea:             ;Points to the start of the data area
   241                              <1> endstruc
   242                              <1> ;Buffer Flag equates
   243                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   244                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   245                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   246                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   247                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   248                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   249                              <1> ;Note! A buffer is marked as referenced only when the application 
   250                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   251                              <1> ;------------------------------------------------------------------------;
   252                              <1> ; Memory control block for each memory arena
   253                              <1> ;------------------------------------------------------------------------;
   254                              <1> struc mcb
   255 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   256 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   257 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   258 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   259                              <1>     .program:
   260                              <1> endstruc
   261                              <1> ;MCB equates
   262                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   263                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   264                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   265                              <1> mcbMarkCtn      equ "M"
   266                              <1> mcbMarkEnd      equ "Z"
   267                              <1> 
   268                              <1> memFirstFit     equ 0   ;First free block goes to application
   269                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   270                              <1> memLastFit      equ 2   ;Last free block goes to application
   271                              <1> 
   272                              <1> ;Owner = Para aligned address => Owning application PSP
   273                              <1> ;...To consider...
   274                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   275                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   276                              <1> ;------------------------------------------------------------------------;
   277                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   278                              <1> ; following order, thus allowing for return values to be placed in the 
   279                              <1> ; registers by accessing the caller register stack frame.
   280                              <1> ;------------------------------------------------------------------------;
   281                              <1> struc callerFrame
   282 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   283 00000008 ????????????????    <1>     .rbx    resq 1    
   284 00000010 ????????????????    <1>     .rcx    resq 1
   285 00000018 ????????????????    <1>     .rdx    resq 1
   286 00000020 ????????????????    <1>     .rsi    resq 1
   287 00000028 ????????????????    <1>     .rdi    resq 1
   288 00000030 ????????????????    <1>     .rbp    resq 1
   289 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   290 00000040 ????????????????    <1>     .r9     resq 1
   291                              <1> ;Pushed by Processor when invoked via Interrupt
   292 00000048 ????????????????    <1>     .rip    resq 1
   293 00000050 ????????????????    <1>     .cs     resq 1
   294 00000058 ????????????????    <1>     .flags  resq 1
   295                              <1> endstruc
   296                              <1> 
   297                              <1> struc dpl
   298                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   299                              <1> ; server calls
   300 00000000 ????????????????    <1>     .rax    resq 1
   301 00000008 ????????????????    <1>     .rbx    resq 1
   302 00000010 ????????????????    <1>     .rcx    resq 1
   303 00000018 ????????????????    <1>     .rdx    resq 1
   304 00000020 ????????????????    <1>     .rsi    resq 1
   305 00000028 ????????????????    <1>     .rdi    resq 1
   306 00000030 ????????????????    <1>     .r8     resq 1
   307 00000038 ????????????????    <1>     .r9     resq 1
   308 00000040 ????????????????    <1>     .align  resq 1
   309 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   310 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   311                              <1> endstruc
   312                              <1> 
   313                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   314 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   315 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   316 00000010 ????????????????    <1>     .newSFTVal      resq 1
   317 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   318 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   319 00000028 ????????????????    <1>     .newLastdrive   resq 1
   320 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   321 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   322 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   323 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   324 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   325 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   326 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   327                              <1> endstruc
   328                              <1> 
   329                              <1> struc filename
   330                              <1> ;8.3 File name struct
   331 00000000 ????????????????    <1>     .fName  resb 8
   332 00000008 ??????              <1>     .fExt   resb 3
   333                              <1> endstruc
   334                              <1> 
   335                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   336 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   337 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   338 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   339 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   340 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   341 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   342 00000016 ????                <1>     .fileTime   resw 1  ;File time
   343 00000018 ????                <1>     .fileDate   resw 1  ;File date
   344 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   345 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   346                              <1> endstruc
   347                              <1> 
   348                              <1> struc psp
   349 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   350 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   351 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   352 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   353 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   354 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   355 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   356 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   357 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   358 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   359 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   360 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   361 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   362 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   363                              <1> ;Extra handle arrays are grouped into a linked list
   364                              <1> ;The below are in the same place as in DOS
   365 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   366 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   367                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   368 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   369 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   370                              <1> endstruc
   371                              <1> 
   372                              <1> struc clkStruc
   373 00000000 ????                <1>     .dateWord   resw 1
   374 00000002 ??                  <1>     .minutes    resb 1
   375 00000003 ??                  <1>     .hours      resb 1
   376 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   377 00000005 ??                  <1>     .seconds    resb 1
   378                              <1> endstruc
   379                              <1> 
   380                              <1> struc countryStruc
   381 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   382                              <1>                         ;0 = month day year hh:mm:ss
   383                              <1>                         ;1 = day month year hh:mm:ss
   384                              <1>                         ;2 = year month day hh:mm:ss
   385 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   386 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   387 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   388 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   389 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   390 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   391                              <1>                         ;0 = Symbol leads, without space
   392                              <1>                         ;1 = Symbol follows, without space
   393                              <1>                         ;2 = Symbol leads, one space
   394                              <1>                         ;3 = Symbol follows, one space
   395                              <1>                         ;4 = Symbol replace decimal separator
   396 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   397 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   398 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   399 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   400 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   401                              <1> endstruc
   402                              <1> 
   403                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   404                              <1> ;for a space of 64Gb
   405                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   406                              <1> dosLowBase  equ 600h    ;Low load address
   407                              <1> 
   408                              <1> ;Critical Error AH bitfield equates
   409                              <1> critRead    equ 0h
   410                              <1> critWrite   equ 1h
   411                              <1> critDOS     equ 0h
   412                              <1> critFAT     equ 2h
   413                              <1> critDir     equ 4h
   414                              <1> critData    equ 6h
   415                              <1> critFailOK  equ 8h
   416                              <1> critRetryOK equ 10h
   417                              <1> critIgnorOK equ 20h
   418                              <1> critCharDev equ 80h
   419                              <1> 
   420                              <1> critIgnore  equ 0
   421                              <1> critRetry   equ 1
   422                              <1> critAbort   equ 2
   423                              <1> critFail    equ 3
   424                              <1> 
   425                              <1> ;MISC ASCII control chars
   426                              <1> NUL equ 00h ;^@         | ASCII Null
   427                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   428                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   429                              <1> BEL equ 07h ;^G         | ASCII Bell
   430                              <1> BSP equ 08h ;^H         | ASCII Backspace
   431                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   432                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   433                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   434                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   435                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   436                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   437                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   438                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   439                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   440                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   441                              <1> SPC equ 20h ;Printable  | ASCII Space
   442                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   443                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   444                              <1> 
   445                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   446                              <1> ;Extended Ascii Codes
   447                              <1> eF1     equ 3Bh ;F1 second byte
   448                              <1> eF2     equ 3Ch ;F2 second byte
   449                              <1> eF3     equ 3Dh ;F3 second byte
   450                              <1> eF4     equ 3Eh ;F4 second byte
   451                              <1> eF5     equ 3Fh ;F5 second byte
   452                              <1> eF6     equ 40h ;F6 second byte
   453                              <1> eF7     equ 41h ;F7 second byte
   454                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   455                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   456                              <1> eIns    equ 52h ;Insert second byte
   457                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   458                              <1> 
   459                              <1> ;Default Configuration for the system
   460                              <1> 
   461                              <1> buffersDefault  equ 30
   462                              <1> filesDefault    equ 20
   463                              <1> fcbsDefault     equ 4
   464                              <1> safeFcbsDeflt   equ 0
   465                              <1> lastDriveDeflt  equ 5   
    26                                  %include "./Source/Include/fatStruc.inc"
    27                              <1> 
    28                              <1> ;-------------------------------------------------------;
    29                              <1> ; This include file contains miscellaneous FAT driver   ;
    30                              <1> ; structures. exFAT will have it's own files at a later ;
    31                              <1> ; stage.                                                ;
    32                              <1> ;-------------------------------------------------------;
    33                              <1> ;-------------------------------------------------------;
    34                              <1> ;-------------------------------------------------------;
    35                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    36                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    37                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    38                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    39                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    40                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    41                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    42                              <1> ;-------------------------------------------------------;
    43                              <1> 
    44                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    45                              <1> 
    46 00000000 ??????              <1>     .jmpBoot    resb 3 
    47 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    48 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    49 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    50 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    51 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    52 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    53 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    54 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    55 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    56 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    57 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    58 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    59 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    60                              <1> 
    61 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    62 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    63 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    64 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    65 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    66 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    67                              <1> 
    68                              <1> endstruc
    69                              <1> 
    70                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    71                              <1> 
    72 00000000 ??????              <1>     .jmpBoot    resb 3
    73 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    74 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    75 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    76 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    77 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    78 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    79 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    80 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    81 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    82 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    83 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    84 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    85 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    86                              <1> 
    87 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    88 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    89 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    90 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    91 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    92 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    93 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    94                              <1> 
    95 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    96 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    97 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    98 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    99 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
   100 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
   101                              <1> 
   102                              <1> endstruc
   103                              <1> 
   104                              <1> struc mbr
   105 00000000 <res 1B8h>          <1>     .bsCode     resb 440
   106 000001B8 ????????            <1>     .diskID     resb 4
   107 000001BC ????                <1>     .reserved   resb 2
   108 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
   109 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
   110 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
   111 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
   112 000001FE ????                <1>     .mbrSig     resb 2
   113                              <1> endstruc
   114                              <1> 
   115                              <1> struc mbrEntry
   116 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
   117 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
   118 00000004 ??                  <1>     .ptnType    resb 1  ;This being 00 means free
   119 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   120 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   121 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc ebr
   125 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   126 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   127 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   128 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   129 000001FE ????                <1>     .mbrSig     resb 2
   130                              <1> endstruc
   131                              <1> 
   132                              <1> 
   133                              <1> struc fatDirEntry
   134                              <1> 
   135 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name w/o fullstop
   136 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   137 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   138 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   139 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   140 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   141 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   142 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   143 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   144 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   145 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   146 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   147                              <1> 
   148                              <1> endstruc
   149                              <1> ;Directory attribute equates
   150                              <1>     dirReadOnly     equ 01h
   151                              <1>     dirHidden       equ 02h
   152                              <1>     dirSystem       equ 04h
   153                              <1>     dirVolumeID     equ 08h
   154                              <1>     dirDirectory    equ 10h
   155                              <1>     dirArchive      equ 20h
   156                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   157                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   158                              <1>     ;If any of the three bits are set, then ALL three bits are set
   159                              <1>     ; in addition to whatever the user passed to search for.
   160                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   161                              <1>     dirIncFiles     equ dirHidden | dirSystem
   162                              <1> 
   163                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   164                              <1> 
   165 00000000 ??????              <1>     .jmpBoot                resb 3 
   166 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   167 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   168 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   169 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   170 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   171 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   172 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   173 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   174 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   175 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   176 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   177 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   178 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   179 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   180 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   181 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   182 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   183 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   184                              <1> 
   185                              <1> endstruc
   186                              <1> 
   187                              <1> struc FSInfo
   188                              <1> 
   189 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   190 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   191 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   192 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   193 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   194 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   195 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   196                              <1> 
   197                              <1> endstruc
   198                              <1> 
   199                              <1> %macro defaultBPB 0
   200                              <1>     db 0E9h
   201                              <1>     db 00h
   202                              <1>     db 90h
   203                              <1>     db 'SCPDOSv1'
   204                              <1>     dw 0200h                       
   205                              <1>     db 01h                         
   206                              <1>     dw 0001h                           
   207                              <1>     db 02h                              
   208                              <1>     dw 00E0h            
   209                              <1>     dw 0B40h   
   210                              <1>     db 0F0h                   
   211                              <1>     dw 0009h                   
   212                              <1>     dw 0012h                     
   213                              <1>     dw 0002h                  
   214                              <1>     dd 0                 
   215                              <1>     dd 0 
   216                              <1>     db 00h
   217                              <1>     db 00h
   218                              <1>     db 29h
   219                              <1>     dd 0
   220                              <1>     db 'NO NAME    '
   221                              <1>     db 'FAT12   '
   222                              <1>     db 58 dup 0 ;Size padding for a FAT12/16 BPB to make it 120 bytes long
   223                              <1> %endmacro
    27                                  %include "./Source/Include/dosError.inc"
    28                              <1> ;DOS Error codes
    29                              <1> 
    30                              <1> ;Extended Error Codes
    31                              <1> errInvFnc   equ 1   ;Invalid function number
    32                              <1> errFnf      equ 2   ;File not found
    33                              <1> errPnf      equ 3   ;Path not found
    34                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    35                              <1> errAccDen   equ 5   ;Access denied (to resource)
    36                              <1> errBadHdl   equ 6   ;Invalid handle
    37                              <1> errMCBbad   equ 7   ;MCB's destroyed
    38                              <1> errNoMem    equ 8   ;Insufficient memory
    39                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    40                              <1> errBadEnv   equ 10  ;Invalid environment
    41                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    42                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    43                              <1> errInvDat   equ 13  ;Invalid data
    44                              <1> ;           equ 14  ;Reserved
    45                              <1> errBadDrv   equ 15  ;Invalid drive specified
    46                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    47                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    48                              <1> errNoFil    equ 18  ;No more files, no match found
    49                              <1> ;The following are Driver error codes + 19
    50                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    51                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    52                              <1> errUnkUnt   equ 20  ;Unknown Unit
    53                              <1> errDrvNR    equ 21  ;Drive not ready
    54                              <1> errUnkCmd   equ 22  ;Unknown Command
    55                              <1> errCRCerr   equ 23  ;Data (CRC) error
    56                              <1> errBadRLn   equ 24  ;Bad request structure length
    57                              <1> errSekErr   equ 25  ;Seek error
    58                              <1> errUnkMed   equ 26  ;Unknown media type
    59                              <1> errSecNF    equ 27  ;Sector not Found
    60                              <1> errNoPap    equ 28  ;Printer out of paper
    61                              <1> errWF       equ 29  ;Write fault
    62                              <1> errRF       equ 30  ;Read fault
    63                              <1> errGF       equ 31  ;General fault
    64                              <1> ;----------------------------------------------
    65                              <1> ;The following two go inbetween the Disk errors
    66                              <1> errShrVio   equ 32  ;Sharing violations
    67                              <1> errLokVio   equ 33  ;File Lock violation
    68                              <1> ;----------------------------------------------
    69                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    70                              <1> errNoFCB    equ 35  ;FCB unavailable
    71                              <1> errShrFul   equ 36  ;Sharing buffer full
    72                              <1> 
    73                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    74                              <1> 
    75                              <1> errFilExist equ 80  ;File already exists
    76                              <1> errDirExist equ 82  ;Directory already exists
    77                              <1> errFI44     equ 83  ;Fail on INT 44h
    78                              <1> errRedir    equ 84  ;Too many levels of redirection
    79                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    80                              <1> errBadPass  equ 86  ;Bad password
    81                              <1> errBadParam equ 87  ;Bad parameter passed to request
    82                              <1> errNetWrite equ 88  ;Network Write Fault
    83                              <1> ;-----------------------------------------------------------------------------
    84                              <1> ;Error Loci
    85                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    86                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    87                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    88                              <1> eLocChr     equ 4   ;Serial/Character Device error
    89                              <1> eLocMem     equ 5   ;Related to RAM
    90                              <1> ;-----------------------------------------------------------------------------
    91                              <1> ;Error Actions
    92                              <1> eActRet     equ 1   ;Retry
    93                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    94                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    95                              <1> eActAbt     equ 4   ;Abort with cleanup
    96                              <1> eActKil     equ 5   ;Abort without cleanup
    97                              <1> eActIgn     equ 6   ;Ignore error
    98                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    99                              <1> ;-----------------------------------------------------------------------------
   100                              <1> ;Error classes
   101                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
   102                              <1> eClsTS      equ 2   ;Temp sitch, should go away
   103                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
   104                              <1> eClsInt     equ 4   ;Internal DOS error or bug
   105                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
   106                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
   107                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
   108                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
   109                              <1> eClsBadFmt  equ 9   ;Bad format for resource
   110                              <1> eClsLocked  equ 10  ;Resource Locked
   111                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
   112                              <1> eClsClash   equ 12  ;Resource already exists!
   113                              <1> eClsUnk     equ 13  ;Unknown class
    28                                  
    29                                  ;Hard disks must have 512 byte sectors
    30                                  fddSectorSize   equ 200h
    31                                  
    32                                  %include "./Utils/FDISK/Source/fdskMain.asm"
    33                              <1> ;Main FDISK file
    34                              <1> startFdisk:
    35 00000000 EB01                <1>     jmp short .cVersion
    36 00000002 01                  <1> .vNum:          db 1
    37                              <1> .cVersion:
    38 00000003 FC                  <1>     cld
    39 00000004 31C0                <1>     xor eax, eax
    40 00000006 CD4A                <1>     int 4Ah
    41 00000008 85C0                <1>     test eax, eax
    42 0000000A 7422                <1>     jz notMultitasking
    43 0000000C 488D15D10C0000      <1>     lea rdx, multiMsg
    44 00000013 B800090000          <1>     mov eax, 0900h
    45 00000018 CD41                <1>     int 41h
    46                              <1> .inLoop:
    47 0000001A B800080000          <1>     mov eax, 0800h  ;Console input no echo
    48 0000001F CD41                <1>     int 41h
    49 00000021 3C0D                <1>     cmp al, CR
    50 00000023 7409                <1>     je notMultitasking
    51 00000025 3C1B                <1>     cmp al, ESC 
    52 00000027 75F1                <1>     jne .inLoop
    53 00000029 E9C9060000          <1>     jmp badExit
    54                              <1> notMultitasking:
    55                              <1> ;Check Version Number
    56 0000002E B430                <1>     mov ah, 30h
    57 00000030 CD41                <1>     int 41h
    58 00000032 3A05CAFFFFFF        <1>     cmp al, byte [startFdisk.vNum] ;Version 1
    59 00000038 760C                <1>     jbe .okVersion
    60 0000003A 488D1580130000      <1>     lea rdx, badVerStr
    61 00000041 E9AD060000          <1>     jmp badPrint ;Exit to caller or DOS to print bad version
    62                              <1> .okVersion:
    63 00000046 E8A90B0000          <1>     call biosGetNumberOfFixedDisks
    64 0000004B 803D6E0C000000      <1>     cmp byte [numDisks], 0
    65 00000052 750C                <1>     jnz .nonZeroDisks   ;Jump if we have any Fixed Disks
    66 00000054 488D157E130000      <1>     lea rdx, noDisks
    67 0000005B E993060000          <1>     jmp badPrint
    68                              <1> .nonZeroDisks:
    69                              <1> ;Set CtrlC hook
    70 00000060 488D155A060000      <1>     lea rdx, exit.ctrlCHandler
    71 00000067 B843250000          <1>     mov eax, 2543h
    72 0000006C CD41                <1>     int 41h
    73                              <1> ;Print Start message
    74 0000006E 488D15040D0000      <1>     lea rdx, strtMsg
    75 00000075 E88D080000          <1>     call print
    76 0000007A E8AC080000          <1>     call printVersion
    77 0000007F 488D154B0D0000      <1>     lea rdx, cpyrtMsg
    78 00000086 E87C080000          <1>     call print
    79                              <1>     ;Allocate 512 bytes now
    80 0000008B B800480000          <1>     mov eax, 4800h
    81 00000090 BB20000000          <1>     mov ebx, fddSectorSize >> 4 
    82 00000095 CD41                <1>     int 41h
    83 00000097 0F8246060000        <1>     jc badMemoryExit
    84 0000009D 4889052D0C0000      <1>     mov qword [xferBuffer], rax
    85                              <1> 
    86 000000A4 C6050A0C000001      <1>     mov byte [currentDisk], 1
    87 000000AB E8C80B0000          <1>     call biosGetHardDiskParameters  ;Start by getting the FDD params for disk 1
    88 000000B0 66813D050C00000002  <1>     cmp word [sectorSize], fddSectorSize
    89 000000B9 0F852D060000        <1>     jne badSectorExit
    90 000000BF E898060000          <1>     call getPartitionFlags  ;Get the partition flags
    91                              <1> 
    92                              <1> mainLoop:
    93 000000C4 E837080000          <1>     call printcrlf
    94 000000C9 E832080000          <1>     call printcrlf
    95 000000CE 488D152D0E0000      <1>     lea rdx, mainPageMsg
    96 000000D5 E82D080000          <1>     call print
    97 000000DA 803DDF0B000001      <1>     cmp byte [numDisks], 1
    98 000000E1 740C                <1>     je .singlefdisk
    99 000000E3 488D15AF0E0000      <1>     lea rdx, mpOptionalMsg
   100 000000EA E818080000          <1>     call print
   101                              <1> .singlefdisk:
   102 000000EF 488D15810D0000      <1>     lea rdx, exitOptionMsg
   103 000000F6 E80C080000          <1>     call print
   104 000000FB E80F080000          <1>     call printPrompt    ;Now print the prompt
   105                              <1> ;Now we input loop
   106 00000100 B302                <1>     mov bl, 2
   107 00000102 E8C8070000          <1>     call takeInput
   108 00000107 803DBF0B000001      <1>     cmp byte [charsTyped], 1
   109 0000010E 75B4                <1>     jne mainLoop    ;If the user didnt type 1 char, reprompt the user
   110 00000110 E8EB070000          <1>     call printcrlf
   111 00000115 8A05B30B0000        <1>     mov al, byte [inputString]  ;Get the char typed
   112 0000011B 3C31                <1>     cmp al, "1"
   113 0000011D 744A                <1>     je createPtnMain
   114 0000011F 3C32                <1>     cmp al, "2"
   115 00000121 0F8479020000        <1>     je changeActivePtnMain
   116 00000127 3C33                <1>     cmp al, "3"
   117 00000129 0F849E030000        <1>     je deletePtnMain
   118 0000012F 3C34                <1>     cmp al, "4"
   119 00000131 0F84B5040000        <1>     je displayPtnInfoMain
   120 00000137 803D820B000001      <1>     cmp byte [numDisks], 1
   121 0000013E 7408                <1>     je .singleDiskOptions
   122 00000140 3C35                <1>     cmp al, "5"
   123 00000142 0F84BF040000        <1>     je selectDiskMain
   124                              <1> .singleDiskOptions:
   125 00000148 3C58                <1>     cmp al, "X"
   126 0000014A 0F841A050000        <1>     je exit
   127 00000150 3C78                <1>     cmp al, "x"
   128 00000152 0F8412050000        <1>     je exit
   129                              <1>     ;If we didnt get any valid options, go back again
   130                              <1>     ;Prompt the user to make a valid selection
   131 00000158 488D152A0D0000      <1>     lea rdx, selectValidOption
   132 0000015F E8A3070000          <1>     call print
   133 00000164 E95BFFFFFF          <1>     jmp mainLoop
   134                              <1> 
   135                              <1> 
   136                              <1> createPtnMain:
   137                              <1> ;Read the MBR for the selected Fixed Disk
   138                              <1> ;If there is a discernable MBR, error and return to mainLoop
   139                              <1> ;Else, go through the createPage
   140 00000169 31D2                <1>     xor edx, edx    ;Read sector 0
   141 0000016B E8D1060000          <1>     call sectorRead
   142 00000170 0F8264050000        <1>     jc badReadExit
   143                              <1>     ;Sector in buffer, now we check
   144 00000176 488B1D540B0000      <1>     mov rbx, qword [xferBuffer]
   145 0000017D 0FB783FE010000      <1>     movzx eax, word [rbx + mbr.mbrSig]  ;Get this sig
   146 00000184 663D55AA            <1>     cmp ax, 0AA55h  ;Usual
   147 00000188 7406                <1>     je .mbrFound
   148 0000018A 663DAA55            <1>     cmp ax, 055AAh  ;Unusual but we accept it
   149 0000018E 756C                <1>     jne .createNewMBR
   150                              <1> .mbrFound:
   151                              <1> ;An MBR was found here. 
   152                              <1> ;DOS can currently only be installed on the first partition. Thus we 
   153                              <1> ; only check the first partition entry for a DOS signature. If one is 
   154                              <1> ; found, we refuse to proceed.
   155                              <1> ;We also refuse to use CHS. Set those entries to 0
   156 00000190 53                  <1>     push rbx
   157 00000191 E8C6050000          <1>     call getPartitionFlags  ;Now lets get some stats on the partition
   158 00000196 5B                  <1>     pop rbx
   159 00000197 803D2D0B000000      <1>     cmp byte [numValidPtn], 0   ;If no valid partitions, act like new MBR
   160 0000019E 745C                <1>     je .createNewMBR
   161 000001A0 8A83C2010000        <1>     mov al, byte [rbx + mbr.mbrEntry1 + mbrEntry.ptnType]
   162 000001A6 3C01                <1>     cmp al, 01h
   163 000001A8 7437                <1>     je .fatPtnDetected
   164 000001AA 3C04                <1>     cmp al, 04
   165 000001AC 7433                <1>     je .fatPtnDetected
   166 000001AE 3C06                <1>     cmp al, 06
   167 000001B0 742F                <1>     je .fatPtnDetected
   168 000001B2 3C0B                <1>     cmp al, 0Bh
   169 000001B4 742B                <1>     je .fatPtnDetected
   170 000001B6 3C0C                <1>     cmp al, 0Ch
   171 000001B8 7427                <1>     je .fatPtnDetected
   172 000001BA 3C0E                <1>     cmp al, 0Eh
   173 000001BC 7423                <1>     je .fatPtnDetected
   174                              <1>     ;Here we have space available, take the data from the table
   175                              <1>     ; put it into the variables and jump
   176                              <1>     ;Since the ptn size isnt changing, CHS values can remain in situ
   177 000001BE 8805050B0000        <1>     mov byte [ptnType], al
   178 000001C4 8B83C6010000        <1>     mov eax, dword [rbx + mbr.mbrEntry1 + mbrEntry.lbaStart]
   179 000001CA 8905F10A0000        <1>     mov dword [ptnStart], eax
   180 000001D0 8B83CA010000        <1>     mov eax, dword [rbx + mbr.mbrEntry1 + mbrEntry.numSectors]
   181 000001D6 8905E90A0000        <1>     mov dword [ptnSize], eax
   182 000001DC E9FB000000          <1>     jmp .installPartition
   183                              <1> .fatPtnDetected:
   184 000001E1 E81A070000          <1>     call printcrlf
   185 000001E6 E815070000          <1>     call printcrlf
   186 000001EB 488D15C60D0000      <1>     lea rdx, createPageBadMsg
   187 000001F2 E810070000          <1>     call print
   188 000001F7 E9C8FEFFFF          <1>     jmp mainLoop
   189                              <1> .createNewMBR:
   190                              <1> ;Here we lay down a fresh MBR.
   191                              <1> ;Prompt the user for their ptn size
   192 000001FC 488D15DC0D0000      <1>     lea rdx, createPageMsg
   193 00000203 E802060000          <1>     call getYNresponse  ;ZF=ZE => Y response, ZF=NZ => N response
   194                              <1>     ;If the user responds Y, then we allocate the whole disk
   195 00000208 7526                <1>     jnz .partialAllocation
   196                              <1>     ;If here, start from "cylinder 1"
   197 0000020A C705AD0A0000400000- <1>     mov dword [ptnStart], 40h
   197 00000213 00                  <1>
   198 00000214 8B059C0A0000        <1>     mov eax, dword [curDiskSize]
   199 0000021A 2B05A10A0000        <1>     sub eax, dword [ptnStart]    ;Remove the sectors from the start of the disk
   200 00000220 89059F0A0000        <1>     mov dword [ptnSize], eax
   201                              <1>     ;Always produce ptn types 0Ch - FAT with LBA (technically FAT32)
   202 00000226 E8A4050000          <1>     call getPtnType
   203 0000022B E996000000          <1>     jmp .copyMBR
   204                              <1> .partialAllocation:
   205 00000230 488D15F70D0000      <1>     lea rdx, createPage2Msg
   206 00000237 E8CB060000          <1>     call print
   207                              <1> .paLp:
   208 0000023C 488D15500E0000      <1>     lea rdx, createPromptMsg
   209 00000243 E8BF060000          <1>     call print
   210 00000248 B303                <1>     mov bl, 3
   211 0000024A E880060000          <1>     call takeInput
   212 0000024F 803D770A000000      <1>     cmp byte [charsTyped], 0    ;Repeat prompt if no chars typed (somehow)
   213 00000256 74E4                <1>     je .paLp 
   214 00000258 803D6F0A000078      <1>     cmp byte [inputString], "x"
   215 0000025F 0F845FFEFFFF        <1>     je mainLoop
   216 00000265 803D620A000058      <1>     cmp byte [inputString], "X"
   217 0000026C 0F8452FEFFFF        <1>     je mainLoop
   218 00000272 66B83030            <1>     mov ax,"00"
   219 00000276 803D500A000001      <1>     cmp byte [charsTyped], 1
   220 0000027D 7708                <1>     ja .twoDigits
   221 0000027F 8A05490A0000        <1>     mov al, byte [inputString]
   222 00000285 EB0C                <1>     jmp short .gotDigits
   223                              <1> .twoDigits:
   224 00000287 8A25410A0000        <1>     mov ah, byte [inputString]
   225 0000028D 8A053C0A0000        <1>     mov al, byte [inputString + 1]
   226                              <1> .gotDigits:
   227                              <1> ;Now check the digits are ok
   228                              <1> ;ah contains high digit, al contains low digit
   229 00000293 E89B040000          <1>     call getValue
   230 00000298 72A2                <1>     jc .paLp
   231                              <1>     ;eax has the percentage of the disk to use
   232 0000029A 8B1D160A0000        <1>     mov ebx, dword [curDiskSize]    ;Get the disk size
   233 000002A0 F7E3                <1>     mul ebx
   234 000002A2 BB64000000          <1>     mov ebx, 100    ;Divide by 100
   235 000002A7 31D2                <1>     xor edx, edx
   236 000002A9 F7F3                <1>     div ebx ;Get in eax the number of sectors to allocate rounded down
   237 000002AB C7050C0A0000400000- <1>     mov dword [ptnStart], 64
   237 000002B4 00                  <1>
   238 000002B5 2B05060A0000        <1>     sub eax, dword [ptnStart]
   239 000002BB 8905040A0000        <1>     mov dword [ptnSize], eax
   240 000002C1 E809050000          <1>     call getPtnType
   241                              <1> .copyMBR:
   242                              <1> ;Now we copy the MBR into the xferBuffer
   243 000002C6 488D352F120000      <1>     lea rsi, freshMBRcopy   ;Has Zeroed CHS fields
   244 000002CD 488B3DFD090000      <1>     mov rdi, qword [xferBuffer]
   245 000002D4 B940000000          <1>     mov ecx, 200h/8
   246 000002D9 F348A5              <1>     rep movsq   ;Copy it over
   247                              <1> .installPartition:
   248 000002DC 488B1DEE090000      <1>     mov rbx, qword [xferBuffer]
   249 000002E3 8B05D8090000        <1>     mov eax, dword [ptnStart]
   250 000002E9 8983C6010000        <1>     mov dword [rbx + mbr.mbrEntry1 + mbrEntry.lbaStart], eax
   251 000002EF 8B05D0090000        <1>     mov eax, dword [ptnSize]
   252 000002F5 8983CA010000        <1>     mov dword [rbx + mbr.mbrEntry1 + mbrEntry.numSectors], eax
   253 000002FB 0FB605C7090000      <1>     movzx eax, byte [ptnType]
   254 00000302 8883C2010000        <1>     mov byte [rbx + mbr.mbrEntry1 + mbrEntry.ptnType], al
   255                              <1>     ;Finish by marking this partition as active, and clearing
   256                              <1>     ; active flag from other partitions
   257 00000308 C683BE01000080      <1>     mov byte [rbx + mbr.mbrEntry1 + mbrEntry.ptnAtrib], 80h
   258 0000030F C683CE01000000      <1>     mov byte [rbx + mbr.mbrEntry2 + mbrEntry.ptnAtrib], 00h
   259 00000316 C683DE01000000      <1>     mov byte [rbx + mbr.mbrEntry3 + mbrEntry.ptnAtrib], 00h
   260 0000031D C683EE01000000      <1>     mov byte [rbx + mbr.mbrEntry4 + mbrEntry.ptnAtrib], 00h
   261                              <1> 
   262 00000324 31D2                <1>     xor edx, edx    ;Write sector 0 on the selected disk 
   263 00000326 E83E050000          <1>     call sectorWrite
   264 0000032B 0F82A0030000        <1>     jc badWriteExit
   265                              <1>     ;Now setup the partial VBR to the first sector of the partition
   266                              <1>     ;Start by sanitising the Buffer
   267 00000331 488B3D99090000      <1>     mov rdi, qword [xferBuffer]
   268 00000338 31C0                <1>     xor eax, eax
   269 0000033A B940000000          <1>     mov ecx, 200h/8
   270 0000033F 57                  <1>     push rdi
   271 00000340 F348AB              <1>     rep stosq
   272 00000343 5F                  <1>     pop rdi
   273 00000344 488D3573110000      <1>     lea rsi, partialVBR
   274 0000034B B93E000000          <1>     mov ecx, partialVBRL
   275 00000350 F3A4                <1>     rep movsb
   276                              <1>     ;xferBuffer has the partial vbr in it now
   277                              <1>     ;rbx points to it
   278 00000352 8B0569090000        <1>     mov eax, dword [ptnStart]
   279 00000358 89431C              <1>     mov dword [rbx + bpb.hiddSec], eax
   280 0000035B 8B0564090000        <1>     mov eax, dword [ptnSize]
   281 00000361 A90000FFFF          <1>     test eax, 0FFFF0000h ;Check for high bits
   282 00000366 750D                <1>     jnz .fat32Var
   283 00000368 66894313            <1>     mov word [rbx + bpb.totSec16], ax
   284 0000036C C7432000000000      <1>     mov dword [rbx + bpb.totSec32], 0
   285 00000373 EB09                <1>     jmp short .writeVBR
   286                              <1> .fat32Var:
   287 00000375 66C743130000        <1>     mov word [rbx + bpb.totSec16], 0
   288 0000037B 894320              <1>     mov dword [rbx + bpb.totSec32], eax
   289                              <1> .writeVBR:
   290 0000037E 8B153D090000        <1>     mov edx, dword [ptnStart]
   291 00000384 E8E0040000          <1>     call sectorWrite
   292 00000389 0F8242030000        <1>     jc badWriteExit
   293                              <1> 
   294 0000038F 488D151E0D0000      <1>     lea rdx, createDoneMsg
   295 00000396 E86C050000          <1>     call print
   296 0000039B E924FDFFFF          <1>     jmp mainLoop
   297                              <1> 
   298                              <1> changeActivePtnMain:
   299                              <1>     ;Now we check which partitions are online. 
   300                              <1>     ; If no partitions are OK, prompt the bad MBR string and return to mainLoop
   301                              <1>     ; If 1 partition is OK and Active, say Partition already active and ret.
   302                              <1>     ; If 1 partition is OK and set active and say Partition already...
   303                              <1>     ; If more than 1 ptn is OK, prompt which partition to set active
   304 000003A0 E8F5040000          <1>     call getMBRandCheckValid
   305 000003A5 0F822F030000        <1>     jc badReadExit
   306 000003AB 0F8513FDFFFF        <1>     jnz mainLoop
   307 000003B1 E892050000          <1>     call printPartitionStatusTable
   308 000003B6 803D0E09000000      <1>     cmp byte [numValidPtn], 0  ;If no partitions are valid, prompt to create
   309 000003BD 750A                <1>     jnz .validPtn
   310 000003BF E82A050000          <1>     call printBadMBR
   311 000003C4 E9FBFCFFFF          <1>     jmp mainLoop 
   312                              <1> .validPtn:
   313                              <1> ;At least 1 partition is ok.
   314                              <1> ;If it is exactly 1 partition that is ok, check it is active too
   315 000003C9 803DFB08000001      <1>     cmp byte [numValidPtn], 1
   316 000003D0 7552                <1>     jne .manyPartitions
   317                              <1>     ;Now we check if that one partition is active. If it is, write message.
   318                              <1>     ;If it is not, set it to active and write message.
   319                              <1>     ;First we find partition
   320 000003D2 31C0                <1>     xor eax, eax  ;Start from partition 1
   321                              <1> .ptnSearchLp:
   322 000003D4 FFC0                <1>     inc eax
   323 000003D6 E8DC030000          <1>     call checkPartitionValid
   324 000003DB 74F7                <1>     jz .ptnSearchLp ;This can never infinite loop
   325                              <1> ;eax has the partition number to check for being active
   326                              <1> ;mbr_size is 16 bytes so shift eax left by 4
   327 000003DD 89C1                <1>     mov ecx, eax    ;Save the number in ecx
   328 000003DF FFC8                <1>     dec eax ;Turn eax into an offset
   329 000003E1 C1E004              <1>     shl eax, 4  ;Multiply by 16
   330 000003E4 89C3                <1>     mov ebx, eax
   331 000003E6 488B35E4080000      <1>     mov rsi, qword [xferBuffer]
   332 000003ED 488DB41EBE010000    <1>     lea rsi, qword [rsi + mbr.mbrEntry1 + rbx]
   333                              <1>     ;rsi now points to the 1 partition
   334 000003F5 F60680              <1>     test byte [rsi + mbrEntry.ptnAtrib], 80h    ;Is active bit set?
   335 000003F8 7510                <1>     jnz .singleActive   ;If yes, skip setting
   336 000003FA 800E80              <1>     or byte [rsi + mbrEntry.ptnAtrib], 80h  ;Else set the bit
   337 000003FD 31D2                <1>     xor edx, edx
   338 000003FF E865040000          <1>     call sectorWrite    ;Write that sector back to the disk
   339 00000404 0F82C7020000        <1>     jc badWriteExit
   340                              <1> .singleActive:
   341                              <1> ;Use the partition number in ecx to fix message
   342 0000040A 80C930              <1>     or cl, "0"
   343 0000040D 880DCC0C0000        <1>     mov byte [activeSinglePtnMsg.number], cl
   344 00000413 488D15B90C0000      <1>     lea rdx, activeSinglePtnMsg
   345 0000041A E8E8040000          <1>     call print
   346 0000041F E9A0FCFFFF          <1>     jmp mainLoop
   347                              <1> 
   348                              <1> .manyPartitions:
   349                              <1> ;If multiple partitions are marked as active, claim invalid MBR
   350 00000424 8A05A0080000        <1>     mov al, byte [ptnFlags]
   351 0000042A C0E804              <1>     shr al, 4   ;Bring the high nybble bitfield into low nybble
   352 0000042D 3C01                <1>     cmp al, 1
   353 0000042F 7416                <1>     je .manyValid
   354 00000431 3C02                <1>     cmp al, 2
   355 00000433 7412                <1>     je .manyValid
   356 00000435 3C04                <1>     cmp al, 4
   357 00000437 740E                <1>     je .manyValid
   358 00000439 3C08                <1>     cmp al, 8
   359 0000043B 740A                <1>     je .manyValid
   360                              <1>     ;Multiple active partitions is a bad MBR. Exit and rebuild MBR
   361 0000043D E8AC040000          <1>     call printBadMBR
   362 00000442 E97DFCFFFF          <1>     jmp mainLoop
   363                              <1> .manyValid:
   364 00000447 488D15A70C0000      <1>     lea rdx, activePromptMsg
   365 0000044E E8B4040000          <1>     call print
   366 00000453 B302                <1>     mov bl, 2
   367 00000455 E875040000          <1>     call takeInput
   368 0000045A 803D6C08000001      <1>     cmp byte [charsTyped], 1
   369 00000461 74E4                <1>     je .manyValid
   370 00000463 0FB60564080000      <1>     movzx eax, byte [inputString]  ;Get the first byte
   371 0000046A 3C31                <1>     cmp al, "1"
   372 0000046C 72D9                <1>     jb .manyValid
   373 0000046E 3C34                <1>     cmp al, "4"
   374 00000470 77D5                <1>     ja .manyValid
   375 00000472 8805BF0C0000        <1>     mov byte [activePartitionSetMsg.number], al ;Set this as the new active ptn
   376 00000478 2C31                <1>     sub al, "1"
   377                              <1>     ;al is now a 0 based partition number
   378 0000047A C1E004              <1>     shl eax, 4  ;Multiply by 16 to get number of bytes into the table
   379 0000047D 488B354D080000      <1>     mov rsi, qword [xferBuffer]
   380 00000484 488DB6BE010000      <1>     lea rsi, qword [rsi + mbr.mbrEntry1]    ;Point to the first table entry
   381 0000048B 488D3C06            <1>     lea rdi, qword [rsi + rax]  ;Get the pointer to mark as active
   382 0000048F B904000000          <1>     mov ecx, 4
   383                              <1> .setActiveBytes:
   384 00000494 E827000000          <1>     call .editActiveByte
   385 00000499 FFC9                <1>     dec ecx
   386 0000049B 75F7                <1>     jnz .setActiveBytes
   387                              <1>     
   388 0000049D 488D15870C0000      <1>     lea rdx, activePartitionSetMsg
   389 000004A4 E85E040000          <1>     call print
   390                              <1>     ;Print the status table again to confirm what has happened
   391 000004A9 E89A040000          <1>     call printPartitionStatusTable
   392 000004AE 31D2                <1>     xor edx, edx
   393 000004B0 E8B4030000          <1>     call sectorWrite    ;Write the sector to disk with updated 
   394 000004B5 0F8216020000        <1>     jc badWriteExit
   395 000004BB E904FCFFFF          <1>     jmp mainLoop
   396                              <1>     
   397                              <1> .editActiveByte:
   398                              <1> ;rsi -> current partition entry
   399                              <1> ;rdi -> Entry to mark as active
   400 000004C0 C60600              <1>     mov byte [rsi + mbrEntry.ptnAtrib], 00h ;Always clear
   401 000004C3 4839FE              <1>     cmp rsi, rdi
   402                              <1>     retz
    65                              <2> cret z
    43                              <3> %%_base:
    44                              <3> %assign baseVar %%_base-$$
    45                              <3>  %ifdef retOff
    46                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    47                              <3>  %ifdef currSegVBase
    48                              <3>  j%+1 short (retOff+currSegVBase)
    49                              <3>  %else
    50                              <3>  j%+1 short retOff
    51                              <3>  %endif
    52                              <3>  %else
    53                              <3>  j%-1 short %%a
    54                              <3>  return
    55                              <3> %%a:
    56                              <3>  %endif
    57                              <3>  %else
    58 000004C6 7501                <3>  j%-1 short %%a
    59                              <3>  return
    37                              <4> %%_ret:
    38 000004C8 C3                  <4>  ret
    39                              <4> %assign retOff %%_ret-$$
    60                              <3> %%a:
    61                              <3>  %endif
   403 000004C9 C60680              <1>     mov byte [rsi + mbrEntry.ptnAtrib], 80h ;Else, set the bit
   404                              <1>     return
    37                              <2> %%_ret:
    38 000004CC C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   405                              <1> 
   406                              <1> deletePtnMain:
   407                              <1> ;The user cannot delete an active partition UNLESS it is the last
   408                              <1> ; partition left on the MBR
   409 000004CD E8C8030000          <1>     call getMBRandCheckValid    ;Gets up to date info on our MBR
   410 000004D2 0F8202020000        <1>     jc badReadExit
   411 000004D8 0F85E6FBFFFF        <1>     jnz mainLoop
   412 000004DE E865040000          <1>     call printPartitionStatusTable
   413 000004E3 803DE107000000      <1>     cmp byte [numValidPtn], 0
   414 000004EA 750A                <1>     jne .notNewMBR
   415 000004EC E8FD030000          <1>     call printBadMBR
   416 000004F1 E9CEFBFFFF          <1>     jmp mainLoop 
   417                              <1> .notNewMBR:
   418 000004F6 803DCE07000001      <1>     cmp byte [numValidPtn], 1
   419 000004FD 754A                <1>     jne .multiplePartitions
   420                              <1>     ;Here we have a single partition, do we want to delete
   421                              <1> .nukeMBR:
   422 000004FF 488D15440C0000      <1>     lea rdx, deleteNukeMsg
   423 00000506 E8FF020000          <1>     call getYNresponse  ;ZF = ZE => Y, ZF = NZ => N
   424 0000050B 0F85B3FBFFFF        <1>     jnz mainLoop
   425                              <1>     ;Nuke the whole partition table
   426 00000511 488B3DB9070000      <1>     mov rdi, qword [xferBuffer]
   427 00000518 488DBFBE010000      <1>     lea rdi, qword [rdi + mbr.mbrEntry1]
   428 0000051F B908000000          <1>     mov ecx, 8
   429 00000524 31C0                <1>     xor eax, eax
   430 00000526 F348AB              <1>     rep stosq
   431 00000529 31D2                <1>     xor edx, edx
   432 0000052B E839030000          <1>     call sectorWrite
   433 00000530 0F829B010000        <1>     jc badWriteExit
   434 00000536 66AB                <1>     stosw   ;Clear the bootable signature too
   435 00000538 488D15350C0000      <1>     lea rdx, deleteNukeCompleteMsg
   436 0000053F E8C3030000          <1>     call print
   437 00000544 E97BFBFFFF          <1>     jmp mainLoop
   438                              <1> .multiplePartitions: 
   439                              <1> ;Now before we proceed, check if we have multiple active partitions.
   440                              <1> ;If so, we jump to the nuke subroutine
   441 00000549 8A057B070000        <1>     mov al, byte [ptnFlags]
   442 0000054F C0E804              <1>     shr al, 4
   443 00000552 3C01                <1>     cmp al, 1
   444 00000554 741A                <1>     je .multipleOk
   445 00000556 3C02                <1>     cmp al, 2
   446 00000558 7416                <1>     je .multipleOk
   447 0000055A 3C04                <1>     cmp al, 4
   448 0000055C 7412                <1>     je .multipleOk
   449 0000055E 3C08                <1>     cmp al, 8
   450 00000560 740E                <1>     je .multipleOk
   451 00000562 488D157C0C0000      <1>     lea rdx, deleteBadFoundMsg
   452 00000569 E899030000          <1>     call print
   453 0000056E EB8F                <1>     jmp short .nukeMBR
   454                              <1> .multipleOk:
   455 00000570 488D151A0C0000      <1>     lea rdx, deleteSelectMsg
   456 00000577 E88B030000          <1>     call print
   457 0000057C B302                <1>     mov bl, 2
   458 0000057E E84C030000          <1>     call takeInput
   459 00000583 803D4307000001      <1>     cmp byte [charsTyped], 1
   460 0000058A 74BD                <1>     je .multiplePartitions
   461 0000058C 0FB6053B070000      <1>     movzx eax, byte [inputString]  ;Get the first byte
   462 00000593 3C31                <1>     cmp al, "1"
   463 00000595 72B2                <1>     jb .multiplePartitions
   464 00000597 3C34                <1>     cmp al, "4"
   465 00000599 77AE                <1>     ja .multiplePartitions
   466 0000059B 88C3                <1>     mov bl, al
   467 0000059D 2C31                <1>     sub al, "1"
   468                              <1>     ;al is now a 0 based partition number
   469 0000059F C1E004              <1>     shl eax, 4  ;Multiply by 16 to get number of bytes into the table
   470 000005A2 488B3528070000      <1>     mov rsi, qword [xferBuffer]
   471 000005A9 488DB406BE010000    <1>     lea rsi, qword [rsi + mbr.mbrEntry1 + rax]    ;Point to the entry we need
   472 000005B1 F60680              <1>     test byte [rsi + mbrEntry.ptnAtrib], 80h
   473 000005B4 7411                <1>     jz .okToDelete
   474 000005B6 488D15020C0000      <1>     lea rdx, deleteCannotMsg
   475 000005BD E845030000          <1>     call print
   476 000005C2 E9FDFAFFFF          <1>     jmp mainLoop
   477                              <1> .okToDelete:
   478 000005C7 881D460C0000        <1>     mov byte [deleteOkMsg.number], bl
   479 000005CD 31C0                <1>     xor eax, eax
   480 000005CF 48AB                <1>     stosq
   481 000005D1 48AB                <1>     stosq
   482 000005D3 31D2                <1>     xor edx, edx
   483 000005D5 E88F020000          <1>     call sectorWrite
   484 000005DA 0F82F1000000        <1>     jc badWriteExit
   485 000005E0 488D15200C0000      <1>     lea rdx, deleteOkMsg
   486 000005E7 E9D8FAFFFF          <1>     jmp mainLoop
   487                              <1> 
   488                              <1> displayPtnInfoMain:
   489                              <1> ;This is done
   490 000005EC E8A9020000          <1>     call getMBRandCheckValid
   491 000005F1 0F82E3000000        <1>     jc badReadExit
   492 000005F7 0F85C7FAFFFF        <1>     jnz mainLoop
   493 000005FD E846030000          <1>     call printPartitionStatusTable
   494 00000602 E9BDFAFFFF          <1>     jmp mainLoop
   495                              <1> 
   496                              <1> selectDiskMain:
   497                              <1> ;We select the disk and also read its size and sector size into the variables
   498                              <1> ;1) Say how many disks there are
   499                              <1> ;2) Prompt the user to select a disk
   500                              <1> ;3) Ensure it is a valid number
   501                              <1> ;4) Set the disk number variable
   502                              <1> ;5) Get the disk parameters
   503                              <1> ;6) Exit
   504                              <1> ;If al is greater than 8, then FDISK (for now), can only handle 8 hard disks
   505 00000607 8A05B3060000        <1>     mov al, byte [numDisks] ;Get the number of disks
   506 0000060D 3C08                <1>     cmp al, 8
   507 0000060F 7602                <1>     jbe .proceed
   508 00000611 B008                <1>     mov al, 8
   509                              <1> .proceed:
   510 00000613 0430                <1>     add al, "0" ;Convert to ASCII
   511 00000615 8805190C0000        <1>     mov byte [selectNumber.number], al
   512 0000061B 8805490C0000        <1>     mov byte [selectPrompt.number], al
   513 00000621 488D15F70B0000      <1>     lea rdx, selectNumber
   514 00000628 E8DA020000          <1>     call print
   515                              <1> .promptLoop:
   516 0000062D 488D15160C0000      <1>     lea rdx, selectPrompt
   517 00000634 E8CE020000          <1>     call print
   518 00000639 B302                <1>     mov bl, 2
   519 0000063B E88F020000          <1>     call takeInput
   520 00000640 803D8606000001      <1>     cmp byte [charsTyped], 1
   521 00000647 74E4                <1>     je .promptLoop
   522 00000649 0FB6057E060000      <1>     movzx eax, byte [inputString]  ;Get the first byte
   523 00000650 3C31                <1>     cmp al, "1"
   524 00000652 72D9                <1>     jb .promptLoop
   525 00000654 3C38                <1>     cmp al, "8"
   526 00000656 77D5                <1>     ja .promptLoop
   527 00000658 2C30                <1>     sub al, "0" ;Get 1 based number 
   528 0000065A 880555060000        <1>     mov byte [currentDisk], al  ;Change the current Disk value
   529 00000660 E813060000          <1>     call biosGetHardDiskParameters  ;Now we get the FDD parameters.
   530 00000665 E95AFAFFFF          <1>     jmp mainLoop
   531                              <1> 
   532                              <1> exit:
   533                              <1> ;In this case exit is done by ways of triple fault
   534                              <1> ;To do this, we hook int43h to prevent the user from stopping this 
   535                              <1> ; process and to link it directly to this the triple fault
   536 0000066A F60543060000FF      <1>     test byte [reboot], -1
   537 00000671 750C                <1>     jnz .reboot
   538 00000673 E898000000          <1>     call freeResources
   539 00000678 B8004C0000          <1>     mov eax, 4C00h
   540 0000067D CD41                <1>     int 41h
   541                              <1> .reboot:
   542 0000067F 488D1580070000      <1>     lea rdx, exitMsg
   543 00000686 B800090000          <1>     mov eax, 0900h
   544 0000068B CD41                <1>     int 41h
   545 0000068D 488D150E000000      <1>     lea rdx, .badInstruction
   546 00000694 B843250000          <1>     mov eax, 2543h
   547 00000699 CD41                <1>     int 41h
   548 0000069B B800080000          <1>     mov eax, 0800h  ;Input no echo
   549 000006A0 CD41                <1>     int 41h
   550                              <1> .badInstruction:
   551 000006A2 0F011D0E000000      <1>     lidt [.resetIDT] ;Triple fault the machine
   552 000006A9 0F011507000000      <1>     lgdt [.resetIDT]
   553 000006B0 31C0                <1>     xor eax, eax
   554 000006B2 668EC8              <1>     mov cs, ax
   555 000006B5 CD00                <1>     int 00h ;Call div by 0 to trigger reboot if not somehow failed yet
   556                              <1> .resetIDT:
   557 000006B7 0000                <1>     dw 0
   558 000006B9 0000000000000000    <1>     dq 0
   559                              <1> .ctrlCHandler:
   560                              <1> ;If the reboot flag is set, kill the computer
   561 000006C1 F605EC050000FF      <1>     test byte [reboot], -1
   562 000006C8 75B5                <1>     jnz .reboot
   563 000006CA E841000000          <1>     call freeResources
   564 000006CF F9                  <1>     stc ;Continue with the exit
   565 000006D0 C3                  <1>     ret ;Return with CF set kills the task
   566                              <1> 
   567                              <1> badWriteExit:
   568 000006D1 488D15F9FFFFFF      <1>     lea rdx, badWriteExit
   569 000006D8 EB19                <1>     jmp short badPrint
   570                              <1> badReadExit:
   571 000006DA 488D15A30D0000      <1>     lea rdx, badReadMsg
   572 000006E1 EB10                <1>     jmp short badPrint
   573                              <1> badMemoryExit:
   574 000006E3 488D15080D0000      <1>     lea rdx, noMemoryMsg
   575 000006EA EB07                <1>     jmp short badPrint
   576                              <1> badSectorExit:
   577 000006EC 488D15740D0000      <1>     lea rdx, badSectorMsg
   578                              <1> badPrint:
   579 000006F3 B409                <1>     mov ah, 09h
   580 000006F5 CD41                <1>     int 41h
   581                              <1> badExit:
   582                              <1> ;If we need to reboot, reboot even after an error.
   583 000006F7 F605B6050000FF      <1>     test byte [reboot], -1
   584 000006FE 0F857BFFFFFF        <1>     jnz exit.reboot
   585 00000704 E807000000          <1>     call freeResources
   586 00000709 B8FF4C0000          <1>     mov eax, 4CFFh  ;Exit bad
   587 0000070E CD41                <1>     int 41h
   588                              <1> 
   589                              <1> freeResources:
   590                              <1> ;Any memory taken from DOS, free it here
   591 00000710 48813DB60500000000- <1>     cmp qword [xferBuffer], 0
   591 00000719 0000                <1>
   592                              <1>     retz
    65                              <2> cret z
    43                              <3> %%_base:
    44                              <3> %assign baseVar %%_base-$$
    45                              <3>  %ifdef retOff
    46                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    47                              <3>  %ifdef currSegVBase
    48                              <3>  j%+1 short (retOff+currSegVBase)
    49                              <3>  %else
    50                              <3>  j%+1 short retOff
    51                              <3>  %endif
    52                              <3>  %else
    53 0000071B 7501                <3>  j%-1 short %%a
    54                              <3>  return
    37                              <4> %%_ret:
    38 0000071D C3                  <4>  ret
    39                              <4> %assign retOff %%_ret-$$
    55                              <3> %%a:
    56                              <3>  %endif
    57                              <3>  %else
    58                              <3>  j%-1 short %%a
    59                              <3>  return
    60                              <3> %%a:
    61                              <3>  %endif
   593 0000071E 50                  <1>     push rax
   594 0000071F 4150                <1>     push r8
   595 00000721 4C8B05A9050000      <1>     mov r8, qword [xferBuffer]
   596 00000728 B800490000          <1>     mov eax, 4900h
   597 0000072D CD41                <1>     int 41h
   598 0000072F 4158                <1>     pop r8
   599 00000731 58                  <1>     pop rax
   600                              <1>     return
    37                              <2> %%_ret:
    38 00000732 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
    33                                  %include "./Utils/FDISK/Source/fdskUtil.asm"
    34                              <1> 
    35                              <1> ;General Utility functions
    36                              <1> getValue:
    37                              <1> ;Input: ah = Upper ASCII digit
    38                              <1> ;       al = Lower ASCII digit
    39                              <1> ;Output: eax = Number typed in (between 0 and 99)
    40                              <1> ;           If CF=CY, error
    41 00000733 3C39                <1>     cmp al, "9"
    42 00000735 7723                <1>     ja .bad
    43 00000737 3C30                <1>     cmp al, "0"
    44 00000739 721F                <1>     jb .bad
    45 0000073B 80FC39              <1>     cmp ah, "9"
    46 0000073E 771A                <1>     ja .bad
    47 00000740 80FC30              <1>     cmp ah, "0"
    48 00000743 7215                <1>     jb .bad
    49                              <1> ;Digits are valid, now proceed
    50 00000745 80EC30              <1>     sub ah, "0"
    51 00000748 2C30                <1>     sub al, "0"
    52 0000074A 0FB6C8              <1>     movzx ecx, al
    53 0000074D 0FB6C4              <1>     movzx eax, ah
    54 00000750 B30A                <1>     mov bl, 10
    55 00000752 F6E3                <1>     mul bl  ;Multiply al with bl, result in al
    56 00000754 00C8                <1>     add al, cl
    57 00000756 0FB6C0              <1>     movzx eax, al
    58                              <1>     return
    37                              <2> %%_ret:
    38 00000759 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
    59                              <1> .bad:
    60 0000075A F9                  <1>     stc
    61                              <1>     return
    37                              <2> %%_ret:
    38 0000075B C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
    62                              <1> 
    63                              <1> getPartitionFlags:
    64                              <1> ;Gets the partition flags ptnFlags and numValidPtn
    65 0000075C 488B356E050000      <1>     mov rsi, qword [xferBuffer]
    66 00000763 488DB6BE010000      <1>     lea rsi, qword [rsi + mbr.mbrEntry1]
    67 0000076A C6055905000000      <1>     mov byte [ptnFlags], 0  ;Clear the bitfield
    68 00000771 C6055305000000      <1>     mov byte [numValidPtn], 0   ;And this variable
    69 00000778 B301                <1>     mov bl, 1
    70 0000077A B904000000          <1>     mov ecx, 4  ;Scan 4 MBR table entries
    71                              <1> .ptnScanLoop:
    72 0000077F E805000000          <1>     call .ptnSigSet
    73 00000784 FFC9                <1>     dec ecx
    74 00000786 75F7                <1>     jnz .ptnScanLoop
    75                              <1>     return
    37                              <2> %%_ret:
    38 00000788 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
    76                              <1> 
    77                              <1> .ptnSigSet:
    78                              <1> ;Input: bl = On first call, with inital value of mask
    79 00000789 8A4604              <1>     mov al, byte [rsi + mbrEntry.ptnType]
    80 0000078C A8FF                <1>     test al, -1
    81 0000078E 741D                <1>     jz .pssNo
    82 00000790 081D34050000        <1>     or byte [ptnFlags], bl
    83 00000796 FE052F050000        <1>     inc byte [numValidPtn]
    84 0000079C F60680              <1>     test byte byte [rsi + mbrEntry.ptnAtrib], 80h
    85 0000079F 740C                <1>     jz .pssNo
    86 000007A1 C0E304              <1>     shl bl, 4   ;Move bit to high nybble
    87 000007A4 081D20050000        <1>     or byte [ptnFlags], bl
    88 000007AA C0EB04              <1>     shr bl, 4   ;Bring it back low
    89                              <1> .pssNo:
    90 000007AD 4881C610000000      <1>     add rsi, mbrEntry_size
    91 000007B4 D0E3                <1>     shl bl, 1
    92                              <1>     return
    37                              <2> %%_ret:
    38 000007B6 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
    93                              <1> 
    94                              <1> checkPartitionValid:
    95                              <1> ;Checks if the given partition number is valid or invalid
    96                              <1> ;Input: eax = Partition Number 1-4 
    97                              <1> ;Output: ZF = ZE if value in eax not valid
    98                              <1> ;        ZF = NZ if value in eax is valid
    99 000007B7 50                  <1>     push rax
   100 000007B8 51                  <1>     push rcx
   101 000007B9 FEC8                <1>     dec al  ;Turn into a zero based number (for shift factor)
   102 000007BB 88C1                <1>     mov cl, al  
   103 000007BD B001                <1>     mov al, 1   ;Set mask bit
   104 000007BF D2E0                <1>     shl al, cl  ;Shift the mask bit into the right place
   105 000007C1 8A0D03050000        <1>     mov cl, byte [ptnFlags] ;Get the flags
   106 000007C7 80E10F              <1>     and cl, 0Fh ;Keep only the low nybble
   107 000007CA 20C1                <1>     and cl, al  ;Set the Status Flags. If this is zero, ptn not active
   108 000007CC 59                  <1>     pop rcx
   109 000007CD 58                  <1>     pop rax
   110                              <1>     return
    37                              <2> %%_ret:
    38 000007CE C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   111                              <1> 
   112                              <1> getPtnType:
   113                              <1> ;Based on ptnStart and ptnSize, puts the right type of partition
   114                              <1> ;Since we can only make these partitions (for now) at sector 64
   115                              <1> ; of the disk, we can always assume that ptnStart is at 64
   116                              <1> ;If size < 4MB, FAT12, use 01h
   117                              <1> ;If size < 65,536 sectors, use 04h
   118                              <1> ;If size < 1048576 sectors (512Mb), use 06h
   119                              <1> ;Else, use 0Ch
   120 000007CF 8B05F0040000        <1>     mov eax, dword [ptnSize]
   121 000007D5 3DEA1F0000          <1>     cmp eax, 4085*2
   122 000007DA 7216                <1>     jb .fat12
   123 000007DC 3D00000100          <1>     cmp eax, 65536
   124 000007E1 7217                <1>     jb .fat16
   125 000007E3 3D00001000          <1>     cmp eax, 1048576
   126 000007E8 7218                <1>     jb .fat16b
   127 000007EA C605D80400000C      <1>     mov byte [ptnType], 0Ch
   128                              <1>     return
    37                              <2> %%_ret:
    38 000007F1 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   129                              <1> .fat12:
   130 000007F2 C605D004000001      <1>     mov byte [ptnType], 01h
   131                              <1>     return
    37                              <2> %%_ret:
    38 000007F9 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   132                              <1> .fat16:
   133 000007FA C605C804000004      <1>     mov byte [ptnType], 04h
   134                              <1>     return
    37                              <2> %%_ret:
    38 00000801 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   135                              <1> .fat16b:
   136 00000802 C605C004000006      <1>     mov byte [ptnType], 06h
   137                              <1>     return
    37                              <2> %%_ret:
    38 00000809 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   138                              <1> 
   139                              <1> 
   140                              <1> getYNresponse:
   141                              <1> ;Prints a message, and waits for input and verfies it is Y or N.
   142                              <1> ;Input: rdx = String to print
   143                              <1> ;Return: ZF = ZE => Y
   144                              <1> ;        ZF = NZ => N
   145 0000080A 52                  <1>     push rdx    ;Save the input string ptr
   146                              <1> .ep:
   147 0000080B E8F7000000          <1>     call print
   148 00000810 B302                <1>     mov bl, 2
   149 00000812 E8B8000000          <1>     call takeInput
   150 00000817 803DAF04000001      <1>     cmp byte [charsTyped], 1
   151 0000081E 75EB                <1>     jne .ep
   152 00000820 0FB605A7040000      <1>     movzx eax, byte [inputString]
   153 00000827 3C79                <1>     cmp al, "y"
   154 00000829 740F                <1>     je .yResponse
   155 0000082B 3C59                <1>     cmp al, "Y"
   156 0000082D 740B                <1>     je .yResponse
   157 0000082F 3C6E                <1>     cmp al, "n"
   158 00000831 7409                <1>     je .nResponse
   159 00000833 3C4E                <1>     cmp al, "N"
   160 00000835 7405                <1>     je .nResponse
   161 00000837 5A                  <1>     pop rdx
   162 00000838 EBD0                <1>     jmp short getYNresponse
   163                              <1> .yResponse:
   164 0000083A 5A                  <1>     pop rdx
   165                              <1>     return
    37                              <2> %%_ret:
    38 0000083B C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   166                              <1> .nResponse:
   167 0000083C 5A                  <1>     pop rdx
   168 0000083D 4839D0              <1>     cmp rax, rdx    ;These cannot be equal at all
   169                              <1>     return
    37                              <2> %%_ret:
    38 00000840 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   170                              <1> 
   171                              <1> 
   172                              <1> sectorRead:
   173                              <1> ;Input: rdx = Sector to read from disk into the buffer
   174 00000841 48891591040000      <1>     mov qword [sectorNum], rdx
   175 00000848 51                  <1>     push rcx
   176 00000849 B903030000          <1>     mov ecx, 0303h  ;ch=number of "resets", cl = Number of retrys
   177                              <1> .tryAgain:
   178 0000084E E8D1030000          <1>     call biosReadSector
   179 00000853 7312                <1>     jnc .exit
   180 00000855 FEC9                <1>     dec cl  ;One less retry
   181 00000857 75F5                <1>     jnz .tryAgain
   182 00000859 E80C040000          <1>     call biosResetHardDisk
   183 0000085E 7207                <1>     jc .exit    ;If this fails, just fail automatically
   184 00000860 B103                <1>     mov cl, 3   ;Reset retry count
   185 00000862 FECD                <1>     dec ch      ;One less reset check
   186 00000864 75E8                <1>     jnz .tryAgain
   187 00000866 F9                  <1>     stc
   188                              <1> .exit:
   189 00000867 59                  <1>     pop rcx
   190                              <1>     return
    37                              <2> %%_ret:
    38 00000868 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   191                              <1> 
   192                              <1> sectorWrite:
   193                              <1> ;Input: rdx = Sector to write to disk from the buffer
   194 00000869 48891569040000      <1>     mov qword [sectorNum], rdx
   195 00000870 51                  <1>     push rcx
   196 00000871 B903030000          <1>     mov ecx, 0303h  ;ch=number of "resets", cl = Number of retrys
   197                              <1> .tryAgain:
   198 00000876 E8CC030000          <1>     call biosWriteSector
   199 0000087B 7314                <1>     jnc .exitGood
   200 0000087D FEC9                <1>     dec cl  ;One less retry
   201 0000087F 75F5                <1>     jnz .tryAgain
   202 00000881 E8E4030000          <1>     call biosResetHardDisk
   203 00000886 7207                <1>     jc .exit    ;If this fails, just fail automatically
   204 00000888 B103                <1>     mov cl, 3   ;Reset retry count
   205 0000088A FECD                <1>     dec ch      ;One less reset check
   206 0000088C 75E8                <1>     jnz .tryAgain
   207 0000088E F9                  <1>     stc
   208                              <1> .exit:
   209 0000088F 59                  <1>     pop rcx
   210                              <1>     return
    37                              <2> %%_ret:
    38 00000890 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   211                              <1> .exitGood:
   212 00000891 C6051C040000FF      <1>     mov byte [reboot], -1   ;Successful write => Need to reboot now
   213 00000898 EBF5                <1>     jmp short .exit
   214                              <1> 
   215                              <1> getMBRandCheckValid:
   216                              <1> ;If CF=CY, error, exit. Error reading disk
   217                              <1> ;If CF=NC and ZF=ZE, Valid MBR
   218                              <1> ;If CF=CY and ZF=NZ, Invalid or missing MBR, return to mainLoop
   219                              <1> ;Updates the partition info if all ok!
   220 0000089A 31D2                <1>     xor edx, edx    ;Read sector 0
   221 0000089C E8A0FFFFFF          <1>     call sectorRead
   222                              <1>     retc
    81                              <2> cret c
    43                              <3> %%_base:
    44                              <3> %assign baseVar %%_base-$$
    45                              <3>  %ifdef retOff
    46                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    47                              <3>  %ifdef currSegVBase
    48                              <3>  j%+1 short (retOff+currSegVBase)
    49                              <3>  %else
    50 000008A1 72(90)              <3>  j%+1 short retOff
    51                              <3>  %endif
    52                              <3>  %else
    53                              <3>  j%-1 short %%a
    54                              <3>  return
    55                              <3> %%a:
    56                              <3>  %endif
    57                              <3>  %else
    58                              <3>  j%-1 short %%a
    59                              <3>  return
    60                              <3> %%a:
    61                              <3>  %endif
   223 000008A3 488B3527040000      <1>     mov rsi, qword [xferBuffer]
   224 000008AA 0FB786FE010000      <1>     movzx eax, word [rsi + mbr.mbrSig]  ;Get this sig
   225 000008B1 663D55AA            <1>     cmp ax, 0AA55h  ;Usual
   226 000008B5 7410                <1>     je .greatMbr
   227 000008B7 663DAA55            <1>     cmp ax, 055AAh  ;Unusual but we accept it
   228 000008BB 740A                <1>     je .greatMbr
   229                              <1>     ;Bad Disk error, return to main menu
   230 000008BD E82C000000          <1>     call printBadMBR
   231 000008C2 31C0                <1>     xor eax, eax
   232 000008C4 FFC0                <1>     inc eax
   233                              <1>     return
    37                              <2> %%_ret:
    38 000008C6 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   234                              <1> .greatMbr:
   235 000008C7 9C                  <1>     pushf
   236 000008C8 E88FFEFFFF          <1>     call getPartitionFlags  ;Now update the partition detail flags
   237 000008CD 9D                  <1>     popf
   238                              <1>     return
    37                              <2> %%_ret:
    38 000008CE C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   239                              <1>     
   240                              <1> takeInput:
   241                              <1> ;Input: bl = Number of chars to input
   242                              <1> ;Simply wraps the call to the buffered input function and sanitises the cmdline
   243 000008CF 31C0                <1>     xor eax, eax
   244 000008D1 8905F5030000        <1>     mov dword [cmdLine], eax
   245 000008D7 8805F3030000        <1>     mov byte [cmdLine + 4], al
   246 000008DD 488D15E8030000      <1>     lea rdx, cmdLine
   247 000008E4 881A                <1>     mov byte [rdx], bl   ;Read 1 char (plus CR)
   248 000008E6 B80A0C0000          <1>     mov eax, 0C0Ah  ;Flush Input buffer and do Buffered Input
   249 000008EB CD41                <1>     int 41h
   250                              <1>     return
    37                              <2> %%_ret:
    38 000008ED C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   251                              <1> 
   252                              <1> 
   253                              <1> ;Print Util Functions
   254                              <1> printBadMBR:
   255 000008EE 488D15200B0000      <1>     lea rdx, invalidMBRMsg
   256 000008F5 EB10                <1>     jmp short print
   257                              <1> printExit:
   258 000008F7 488D1508050000      <1>     lea rdx, exitMsg
   259 000008FE EB07                <1>     jmp short print
   260                              <1> printcrlf:
   261 00000900 488D15DA030000      <1>     lea rdx, crlf
   262                              <1> print:
   263 00000907 B800090000          <1>     mov eax, 0900h
   264 0000090C CD41                <1>     int 41h
   265                              <1>     return
    37                              <2> %%_ret:
    38 0000090E C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   266                              <1> 
   267                              <1> printPrompt:
   268 0000090F E8ECFFFFFF          <1>     call printcrlf
   269 00000914 8A059B030000        <1>     mov al, byte [currentDisk]
   270 0000091A 0430                <1>     add al, "0" ;Convert to ASCII digit
   271 0000091C 880551050000        <1>     mov byte [drvNum], al
   272 00000922 488D153F050000      <1>     lea rdx, prompt
   273 00000929 EBDC                <1>     jmp short print
   274                              <1> 
   275                              <1> printVersion:
   276 0000092B B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
   277 0000092D CD41                <1>     int 41h
   278 0000092F 50                  <1>     push rax
   279 00000930 0FB6C0              <1>     movzx eax, al
   280 00000933 E881010000          <1>     call printDecimalWordAtCursor
   281 00000938 B22E                <1>     mov dl, "."
   282 0000093A B402                <1>     mov ah, 02h
   283 0000093C CD41                <1>     int 41h
   284 0000093E 58                  <1>     pop rax
   285 0000093F 0FB6C4              <1>     movzx eax, ah
   286 00000942 E872010000          <1>     call printDecimalWordAtCursor
   287                              <1>     return
    37                              <2> %%_ret:
    38 00000947 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   288                              <1> 
   289                              <1> printPartitionStatusTable:
   290                              <1> ;xferBuffer must have the MBR we are acting on loaded
   291                              <1> ;Start by cleaning the string
   292 00000948 E8B3FFFFFF          <1>     call printcrlf
   293 0000094D E8AEFFFFFF          <1>     call printcrlf
   294 00000952 488D1516090000      <1>     lea rdx, partTitle
   295 00000959 E8A9FFFFFF          <1>     call print
   296                              <1> 
   297 0000095E 488B356C030000      <1>     mov rsi, qword [xferBuffer]
   298 00000965 488DB6BE010000      <1>     lea rsi, qword [rsi + mbr.mbrEntry1]    ;Goto first table entry
   299 0000096C 807E0400            <1>     cmp byte [rsi + mbrEntry.ptnType], 00
   300 00000970 7407                <1>     je .second
   301 00000972 B301                <1>     mov bl, 1
   302 00000974 E889000000          <1>     call .fillString
   303                              <1> .second:
   304 00000979 4881C610000000      <1>     add rsi, mbrEntry_size  ;Goto next entry
   305 00000980 807E0400            <1>     cmp byte [rsi + mbrEntry.ptnType], 00
   306 00000984 7407                <1>     je .third
   307 00000986 B302                <1>     mov bl, 2
   308 00000988 E875000000          <1>     call .fillString
   309                              <1> .third:
   310 0000098D 4881C610000000      <1>     add rsi, mbrEntry_size  ;Goto next entry
   311 00000994 807E0400            <1>     cmp byte [rsi + mbrEntry.ptnType], 00
   312 00000998 7407                <1>     je .fourth
   313 0000099A B303                <1>     mov bl, 3
   314 0000099C E861000000          <1>     call .fillString
   315                              <1> .fourth:
   316 000009A1 4881C610000000      <1>     add rsi, mbrEntry_size  ;Goto next entry
   317 000009A8 807E0400            <1>     cmp byte [rsi + mbrEntry.ptnType], 00
   318 000009AC 7407                <1>     je .exit
   319 000009AE B304                <1>     mov bl, 4
   320 000009B0 E84D000000          <1>     call .fillString
   321                              <1> .exit:
   322 000009B5 488D3D97090000      <1>     lea rdi, totalSpaceMsg.sizeCount
   323 000009BC 48B820202020202020- <1>     mov rax, "        "
   323 000009C5 20                  <1>
   324 000009C6 57                  <1>     push rdi
   325 000009C7 48AB                <1>     stosq
   326 000009C9 5F                  <1>     pop rdi
   327 000009CA 8B05E6020000        <1>     mov eax, dword [curDiskSize]    ;Get the current disk size
   328 000009D0 E855010000          <1>     call printDecimalWord
   329                              <1> 
   330 000009D5 488D3D96090000      <1>     lea rdi, totalSpaceMsg.sectorCount
   331 000009DC B820202020          <1>     mov eax, "    "
   332 000009E1 57                  <1>     push rdi
   333 000009E2 AB                  <1>     stosd
   334 000009E3 5F                  <1>     pop rdi
   335 000009E4 0FB705D3020000      <1>     movzx eax, word [sectorSize]
   336 000009EB E83A010000          <1>     call printDecimalWord
   337                              <1> 
   338 000009F0 488D1513090000      <1>     lea rdx, totalSpaceMsg
   339 000009F7 E80BFFFFFF          <1>     call print
   340 000009FC E8FFFEFFFF          <1>     call printcrlf
   341                              <1>     return
    37                              <2> %%_ret:
    38 00000A01 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   342                              <1> 
   343                              <1> .fillString:
   344                              <1> ;Input:
   345                              <1> ; bl = Partition number (number 1-4)
   346                              <1> ; rsi -> mbr entry to write the string for
   347 00000A02 488D3DCD080000      <1>     lea rdi, partString
   348 00000A09 B020                <1>     mov al, SPC ;Fill the string with space characters
   349 00000A0B B931000000          <1>     mov ecx, partStringL
   350 00000A10 F3AA                <1>     rep stosb   ;Cleanse the string
   351                              <1>     
   352 00000A12 80C330              <1>     add bl, "0"
   353 00000A15 881DBF080000        <1>     mov byte [partString.ptnNum], bl
   354 00000A1B F60680              <1>     test byte [rsi + mbrEntry.ptnAtrib], 80h
   355 00000A1E 7407                <1>     jz .notActive
   356 00000A20 C605BC08000041      <1>     mov byte [partString.ptnSts], "A"
   357                              <1> .notActive:
   358                              <1> ;01h is FAT12
   359                              <1> ;04h, 06h and 0Eh are FAT16
   360                              <1> ;0Bh and 0Ch are FAT32 
   361 00000A27 488D3DB9080000      <1>     lea rdi, partString.ptnFS   ;Point to the FS part
   362 00000A2E 8A4604              <1>     mov al, byte [rsi + mbrEntry.ptnType]   ;Get the type
   363 00000A31 3C01                <1>     cmp al, 01
   364 00000A33 7424                <1>     je .fat12
   365 00000A35 3C04                <1>     cmp al, 04h
   366 00000A37 742A                <1>     je .fat16
   367 00000A39 3C06                <1>     cmp al, 06h
   368 00000A3B 7426                <1>     je .fat16
   369 00000A3D 3C0E                <1>     cmp al, 0Eh
   370 00000A3F 7422                <1>     je .fat16
   371 00000A41 3C0B                <1>     cmp al, 0Bh
   372 00000A43 7428                <1>     je .fat32
   373 00000A45 3C0C                <1>     cmp al, 0Ch
   374 00000A47 7424                <1>     je .fat32
   375                              <1>     ;Else we print the number
   376 00000A49 E84C010000          <1>     call getHexTwoBytes
   377 00000A4E 86C4                <1>     xchg al, ah
   378 00000A50 AA                  <1>     stosb
   379 00000A51 88E0                <1>     mov al, ah
   380 00000A53 AA                  <1>     stosb
   381 00000A54 B468                <1>     mov ah, "h"
   382 00000A56 AA                  <1>     stosb
   383 00000A57 EB1F                <1>     jmp short .fatCont
   384                              <1> .fat12:
   385 00000A59 56                  <1>     push rsi
   386 00000A5A 488D3551090000      <1>     lea rsi, fat12String
   387 00000A61 EB12                <1>     jmp short .fatCmn
   388                              <1> .fat16:
   389 00000A63 56                  <1>     push rsi
   390 00000A64 488D354C090000      <1>     lea rsi, fat16String
   391 00000A6B EB08                <1>     jmp short .fatCmn
   392                              <1> .fat32:
   393 00000A6D 56                  <1>     push rsi
   394 00000A6E 488D3547090000      <1>     lea rsi, fat32String
   395                              <1> .fatCmn:
   396 00000A75 A5                  <1>     movsd
   397 00000A76 A4                  <1>     movsb
   398 00000A77 5E                  <1>     pop rsi
   399                              <1> .fatCont:
   400 00000A78 8B4608              <1>     mov eax, dword [rsi + mbrEntry.lbaStart]
   401 00000A7B 488D3D6B080000      <1>     lea rdi, partString.ptnStart
   402 00000A82 50                  <1>     push rax
   403 00000A83 E8A2000000          <1>     call printDecimalWord
   404 00000A88 58                  <1>     pop rax
   405 00000A89 8B5E0C              <1>     mov ebx, dword [rsi + mbrEntry.numSectors]
   406 00000A8C 01D8                <1>     add eax, ebx
   407 00000A8E FFC8                <1>     dec eax ;Get the address of the last sector (one less than extant)
   408 00000A90 488D3D5F080000      <1>     lea rdi, partString.ptnEnd
   409 00000A97 53                  <1>     push rbx
   410 00000A98 E88D000000          <1>     call printDecimalWord
   411 00000A9D 5B                  <1>     pop rbx
   412 00000A9E 89D8                <1>     mov eax, ebx
   413 00000AA0 488D3D58080000      <1>     lea rdi, partString.ptnSize
   414 00000AA7 E87E000000          <1>     call printDecimalWord
   415                              <1> 
   416 00000AAC 488D1523080000      <1>     lea rdx, partString
   417 00000AB3 E84FFEFFFF          <1>     call print
   418                              <1>     return
    37                              <2> %%_ret:
    38 00000AB8 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   419                              <1> 
   420                              <1> 
   421                              <1> 
   422                              <1> printDecimalWordAtCursor:
   423                              <1> ;Takes the qword in eax and prints its decimal representation
   424 00000AB9 31C9                <1>     xor ecx, ecx
   425 00000ABB 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   426 00000ABD 85C0                <1>     test eax, eax
   427 00000ABF 750C                <1>     jnz .notZero
   428 00000AC1 B930000000          <1>     mov ecx, "0"
   429 00000AC6 BD01000000          <1>     mov ebp, 1  ;Print one digit
   430 00000ACB EB3E                <1>     jmp short .dpfb2
   431                              <1> .notZero:
   432 00000ACD 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   433 00000ACF BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   434                              <1> .dpfb0:
   435 00000AD4 FFC5                <1>     inc ebp
   436 00000AD6 81FD08000000        <1>     cmp ebp, 8
   437 00000ADC 7206                <1>     jb .dpfb00
   438 00000ADE 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   439 00000AE2 EB04                <1>     jmp short .dpfb01
   440                              <1> .dpfb00:
   441 00000AE4 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   442                              <1> .dpfb01:
   443 00000AE8 31D2                <1>     xor edx, edx
   444 00000AEA 48F7F6              <1>     div rsi
   445 00000AED 80C230              <1>     add dl, '0'
   446 00000AF0 80FA39              <1>     cmp dl, '9'
   447 00000AF3 7603                <1>     jbe .dpfb1
   448 00000AF5 80C207              <1>     add dl, 'A'-'0'-10
   449                              <1> .dpfb1:
   450 00000AF8 81FD08000000        <1>     cmp ebp, 8
   451 00000AFE 7204                <1>     jb .dpfb10
   452 00000B00 88D3                <1>     mov bl, dl ;Add the bottom bits
   453 00000B02 EB02                <1>     jmp short .dpfb11
   454                              <1> .dpfb10:
   455 00000B04 88D1                <1>     mov cl, dl    ;Save remainder byte
   456                              <1> .dpfb11:
   457 00000B06 4885C0              <1>     test rax, rax
   458 00000B09 75C9                <1>     jnz .dpfb0
   459                              <1> .dpfb2:
   460 00000B0B 81FD08000000        <1>     cmp ebp, 8
   461 00000B11 7208                <1>     jb .dpfb20
   462 00000B13 88DA                <1>     mov dl, bl
   463 00000B15 48C1EB08            <1>     shr rbx, 8
   464 00000B19 EB06                <1>     jmp short .dpfb21
   465                              <1> .dpfb20:
   466 00000B1B 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   467 00000B1D 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   468                              <1> .dpfb21:
   469 00000B21 B402                <1>     mov ah, 02h
   470 00000B23 CD41                <1>     int 41h
   471 00000B25 FFCD                <1>     dec ebp
   472 00000B27 75E2                <1>     jnz .dpfb2
   473                              <1>     return
    37                              <2> %%_ret:
    38 00000B29 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   474                              <1> 
   475                              <1> printDecimalWord:
   476                              <1> ;Takes the qword in eax and prints its decimal representation
   477                              <1> ;Result placed at [rdi]
   478 00000B2A 56                  <1>     push rsi
   479 00000B2B 31C9                <1>     xor ecx, ecx
   480 00000B2D 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   481 00000B2F 85C0                <1>     test eax, eax
   482 00000B31 750C                <1>     jnz .notZero
   483 00000B33 B930000000          <1>     mov ecx, "0"
   484 00000B38 BD01000000          <1>     mov ebp, 1  ;Print one digit
   485 00000B3D EB3E                <1>     jmp short .dpfb2
   486                              <1> .notZero:
   487 00000B3F 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   488 00000B41 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   489                              <1> .dpfb0:
   490 00000B46 FFC5                <1>     inc ebp
   491 00000B48 81FD08000000        <1>     cmp ebp, 8
   492 00000B4E 7206                <1>     jb .dpfb00
   493 00000B50 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   494 00000B54 EB04                <1>     jmp short .dpfb01
   495                              <1> .dpfb00:
   496 00000B56 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   497                              <1> .dpfb01:
   498 00000B5A 31D2                <1>     xor edx, edx
   499 00000B5C 48F7F6              <1>     div rsi
   500 00000B5F 80C230              <1>     add dl, '0'
   501 00000B62 80FA39              <1>     cmp dl, '9'
   502 00000B65 7603                <1>     jbe .dpfb1
   503 00000B67 80C207              <1>     add dl, 'A'-'0'-10
   504                              <1> .dpfb1:
   505 00000B6A 81FD08000000        <1>     cmp ebp, 8
   506 00000B70 7204                <1>     jb .dpfb10
   507 00000B72 88D3                <1>     mov bl, dl ;Add the bottom bits
   508 00000B74 EB02                <1>     jmp short .dpfb11
   509                              <1> .dpfb10:
   510 00000B76 88D1                <1>     mov cl, dl    ;Save remainder byte
   511                              <1> .dpfb11:
   512 00000B78 4885C0              <1>     test rax, rax
   513 00000B7B 75C9                <1>     jnz .dpfb0
   514                              <1> .dpfb2:
   515 00000B7D 81FD08000000        <1>     cmp ebp, 8
   516 00000B83 7208                <1>     jb .dpfb20
   517 00000B85 88DA                <1>     mov dl, bl
   518 00000B87 48C1EB08            <1>     shr rbx, 8
   519 00000B8B EB06                <1>     jmp short .dpfb21
   520                              <1> .dpfb20:
   521 00000B8D 88C8                <1>     mov al, cl    ;Get most sig digit into al
   522 00000B8F 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   523                              <1> .dpfb21:
   524 00000B93 AA                  <1>     stosb
   525 00000B94 FFCD                <1>     dec ebp
   526 00000B96 75E5                <1>     jnz .dpfb2
   527 00000B98 5E                  <1>     pop rsi
   528                              <1>     return
    37                              <2> %%_ret:
    38 00000B99 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   529                              <1> 
   530                              <1> getHexTwoBytes:
   531                              <1> ;Given a number in al, get the HEX digits in ASCII in ax
   532                              <1> ;Input: al = 8 bit number 
   533                              <1> ;Output: ax = ASCII representation of the number
   534 00000B9A 53                  <1>     push rbx
   535 00000B9B 52                  <1>     push rdx
   536 00000B9C 488D1D1A000000      <1>     lea rbx, .ascii
   537 00000BA3 0FB6C0              <1>     movzx eax, al
   538 00000BA6 0FB6D0              <1>     movzx edx, al
   539 00000BA9 81E20F000000        <1>     and edx, 0Fh    ;Isolate low nybble
   540 00000BAF C1E804              <1>     shr eax, 4      ;Isolate high nybble and bring it low
   541 00000BB2 D7                  <1>     xlatb  ;Get high digit first
   542 00000BB3 88C6                <1>     mov dh, al  ;Save the digit in dh
   543 00000BB5 88D0                <1>     mov al, dl
   544 00000BB7 D7                  <1>     xlatb
   545 00000BB8 88F4                <1>     mov ah, dh  ;Get the high digit in ah to form ax
   546 00000BBA 5A                  <1>     pop rdx
   547 00000BBB 5B                  <1>     pop rbx
   548                              <1>     return
    37                              <2> %%_ret:
    38 00000BBC C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   549 00000BBD 303132333435363738- <1> .ascii: db "0123456789ABCEDF"
   549 00000BC6 39414243454446      <1>
   550                              <1> 
   551                              <1> getDecimalWord:
   552                              <1> ;Works on MAX A dword in eax
   553                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   554 00000BCD 31C9                <1>     xor ecx, ecx
   555 00000BCF 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   556 00000BD1 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   557                              <1> .dpfb0:
   558 00000BD6 FFC5                <1>     inc ebp
   559 00000BD8 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   560 00000BDC 31D2                <1>     xor edx, edx
   561 00000BDE 48F7F3              <1>     div rbx
   562 00000BE1 80C230              <1>     add dl, '0'
   563 00000BE4 80FA39              <1>     cmp dl, '9'
   564 00000BE7 7603                <1>     jbe .dpfb1
   565 00000BE9 80C207              <1>     add dl, 'A'-'0'-10
   566                              <1> .dpfb1:
   567 00000BEC 88D1                <1>     mov cl, dl    ;Save remainder byte
   568 00000BEE 4885C0              <1>     test rax, rax
   569 00000BF1 75E3                <1>     jnz .dpfb0
   570                              <1>     return
    37                              <2> %%_ret:
    38 00000BF3 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
    34                                  %include "./Utils/FDISK/Source/fdskExt.asm"
    35                              <1> ;FDISK BIOS implementers subroutine file.
    36                              <1> ;All functions that need to be implemented by BIOS implementers 
    37                              <1> ; are contained within this file with a description of what goes where and how.
    38                              <1> ;All used registers are expected to be preserved across a call.
    39                              <1> 
    40                              <1> 
    41                              <1> ;DISK FUNCTIONS
    42                              <1> ;These functions are for Disk actions
    43                              <1> biosGetNumberOfFixedDisks:
    44                              <1> ;Saves the number of Fixed Disks in numDisks
    45                              <1> ;Output: byte [numDisks] = Number of physical hard disks
    46 00000BF4 50                  <1>     push rax
    47 00000BF5 4150                <1>     push r8
    48 00000BF7 4151                <1>     push r9
    49 00000BF9 4152                <1>     push r10
    50 00000BFB 4153                <1>     push r11
    51 00000BFD 4154                <1>     push r12
    52 00000BFF 4155                <1>     push r13
    53 00000C01 4156                <1>     push r14
    54 00000C03 4157                <1>     push r15
    55 00000C05 CD31                <1>     int 31h
    56 00000C07 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 of r8
    57 00000C0B 448805AE000000      <1>     mov byte [numDisks], r8b    ;Save number of physical hard drives
    58 00000C12 415F                <1>     pop r15
    59 00000C14 415E                <1>     pop r14
    60 00000C16 415D                <1>     pop r13
    61 00000C18 415C                <1>     pop r12
    62 00000C1A 415B                <1>     pop r11
    63 00000C1C 415A                <1>     pop r10
    64 00000C1E 4159                <1>     pop r9
    65 00000C20 4158                <1>     pop r8
    66 00000C22 58                  <1>     pop rax
    67                              <1>     return
    37                              <2> %%_ret:
    38 00000C23 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
    68                              <1> 
    69                              <1> biosReadSector:
    70                              <1> ;Reads one sector.
    71                              <1> ;Input: byte [curentDisk] = 1 based disk number to transact on
    72                              <1> ;       qword [xferBuffer] = Ptr to where to read from disk to
    73                              <1> ;       qword [sectorNum] = Number of disk sector to read
    74                              <1> ;Output: CF=NC, Nothing went wrong
    75                              <1> ;        CF=CY, Error in disk read.
    76 00000C24 50                  <1>     push rax
    77 00000C25 53                  <1>     push rbx
    78 00000C26 51                  <1>     push rcx
    79 00000C27 52                  <1>     push rdx
    80 00000C28 488B1DA2000000      <1>     mov rbx, qword [xferBuffer]
    81 00000C2F 488B0DA3000000      <1>     mov rcx, qword [sectorNum]
    82 00000C36 E869000000          <1>     call biosgetBIOSDiskNumber  ;Get disk number in dl in our case
    83 00000C3B B801820000          <1>     mov eax, 8201h
    84 00000C40 CD33                <1>     int 33h
    85 00000C42 5A                  <1>     pop rdx
    86 00000C43 59                  <1>     pop rcx
    87 00000C44 5B                  <1>     pop rbx
    88 00000C45 58                  <1>     pop rax
    89                              <1>     return
    37                              <2> %%_ret:
    38 00000C46 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
    90                              <1>     
    91                              <1> biosWriteSector:
    92                              <1> ;Writes one sector.
    93                              <1> ;Input: byte [curentDisk] = 1 based disk number to transact on
    94                              <1> ;       qword [xferBuffer] = Ptr to where to write to disk from
    95                              <1> ;       qword [sectorNum] = Number of disk sector to write to disk
    96                              <1> ;Output: CF=NC, Nothing went wrong
    97                              <1> ;        CF=CY, Error in disk write.
    98 00000C47 50                  <1>     push rax
    99 00000C48 53                  <1>     push rbx
   100 00000C49 51                  <1>     push rcx
   101 00000C4A 52                  <1>     push rdx
   102 00000C4B 488B1D7F000000      <1>     mov rbx, qword [xferBuffer]
   103 00000C52 488B0D80000000      <1>     mov rcx, qword [sectorNum]
   104 00000C59 E846000000          <1>     call biosgetBIOSDiskNumber
   105 00000C5E B801830000          <1>     mov eax, 8301h
   106 00000C63 CD33                <1>     int 33h
   107 00000C65 5A                  <1>     pop rdx
   108 00000C66 59                  <1>     pop rcx
   109 00000C67 5B                  <1>     pop rbx
   110 00000C68 58                  <1>     pop rax
   111                              <1>     return
    37                              <2> %%_ret:
    38 00000C69 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   112                              <1> 
   113                              <1> biosResetHardDisk:
   114                              <1> ;Reset currentDisk
   115                              <1> ;Input: byte [curentDisk] = 1 based disk number to reset
   116                              <1> ;Output: CF=NC, Nothing went wrong
   117                              <1> ;        CF=CY, Failed to reset the disk system. Abort...
   118 00000C6A 50                  <1>     push rax
   119 00000C6B 52                  <1>     push rdx
   120 00000C6C E833000000          <1>     call biosgetBIOSDiskNumber
   121 00000C71 31C0                <1>     xor eax, eax
   122 00000C73 CD33                <1>     int 33h
   123 00000C75 5A                  <1>     pop rdx
   124 00000C76 58                  <1>     pop rax
   125                              <1>     return
    37                              <2> %%_ret:
    38 00000C77 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   126                              <1> 
   127                              <1> biosGetHardDiskParameters:
   128                              <1> ;Get the size of the hard disk
   129                              <1> ;Output: qword [curDiskSize] = Number of sectors on disk
   130                              <1> ;        word [sectorSize] = Bytes/Sector value
   131 00000C78 50                  <1>     push rax
   132 00000C79 53                  <1>     push rbx
   133 00000C7A 51                  <1>     push rcx
   134 00000C7B 52                  <1>     push rdx
   135 00000C7C E823000000          <1>     call biosgetBIOSDiskNumber
   136 00000C81 B800880000          <1>     mov eax, 8800h
   137 00000C86 CD33                <1>     int 33h
   138                              <1>     ;Int 33h/8800h returns
   139                              <1>     ;rbx = Sector size in bytes
   140                              <1>     ;rcx = Last LBA block
   141 00000C88 4881E902000000      <1>     sub rcx, 2  ;Convert from last sector to last ok sector
   142 00000C8F FFC1                <1>     inc ecx ;Turn into a count of sectors
   143 00000C91 48890D1E000000      <1>     mov qword [curDiskSize], rcx
   144 00000C98 66891D1F000000      <1>     mov word [sectorSize], bx
   145 00000C9F 5A                  <1>     pop rdx
   146 00000CA0 59                  <1>     pop rcx
   147 00000CA1 5B                  <1>     pop rbx
   148 00000CA2 58                  <1>     pop rax
   149                              <1>     return
    37                              <2> %%_ret:
    38 00000CA3 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
   150                              <1> 
   151                              <1> 
   152                              <1> ;BIOS implementer utility function
   153                              <1> biosgetBIOSDiskNumber:
   154                              <1> ;A utility function, can be left as just return if unnecessary. 
   155                              <1> ;Used to translate currentDisk from an FDISK number to a BIOS specific 
   156                              <1> ; value.
   157                              <1> ;This is only used in this file and is implementer specific.
   158                              <1> ;In this case, 
   159                              <1> ;Output: dl = BIOS disk number
   160 00000CA4 0FB6150A000000      <1>     movzx edx, byte [currentDisk]
   161 00000CAB FFCA                <1>     dec edx
   162 00000CAD 81CA80000000        <1>     or edx, 80h ;Set SCPBIOS fixed disk bit
   163                              <1>     return
    37                              <2> %%_ret:
    38 00000CB3 C3                  <2>  ret
    39                              <2> %assign retOff %%_ret-$$
    35                                  %include "./Utils/FDISK/Data/fdskData.asm"
    36                              <1> ;Disk Vars
    37 00000CB4 00                  <1> reboot      db 0    ;If this flag is set, should reboot on exit
    38 00000CB5 01                  <1> currentDisk db 1    ;1 based. For SCP/BIOS disk 1 = 80h, disk 2 = 81h etc...
    39                              <1> 
    40 00000CB6 0000000000000000    <1> curDiskSize dq 0    ;Number of usable sectors on device
    41 00000CBE 0000                <1> sectorSize  dw 0    ;Size of a sector (should always be 512, error if not)
    42                              <1> 
    43 00000CC0 00                  <1> numDisks    db 0    ;Count of fixed disks
    44                              <1> 
    45                              <1> ;Create Partition Variables
    46                              <1> ;We also refuse to use CHS. Set those entries to 0 generally
    47 00000CC1 00000000            <1> ptnStart    dd 0    ;LBA for start of partition
    48 00000CC5 00000000            <1> ptnSize     dd 0    ;Number of sectors in partition
    49 00000CC9 00                  <1> ptnType     db 0    ;Partition signature, always 0Ch
    50                              <1> 
    51                              <1> ;ActivePtnVariables
    52                              <1> ;Copy the partition status bytes here if the table is not free.
    53 00000CCA 00                  <1> ptnFlags    db 0    ;Bits [3-0] give the valid partitions
    54                              <1>                     ;Bits [7-4] give the active status of the partitions
    55 00000CCB 00                  <1> numValidPtn db 0    ;Keeps a count of the number of valid partitions
    56                              <1> 
    57                              <1> 
    58                              <1> cmdLine:    ;Users type at most 1 or 2 chars, add some padding
    59 00000CCC 00                  <1> stringLen   db 0    ;Byte 0 = Max string len
    60 00000CCD 00                  <1> charsTyped  db 0    ;Byte 1 = Num typed chars
    61 00000CCE 000000              <1> inputString db 3 dup (0)    ;Where the chars are typed
    62                              <1> ;xfer Variables
    63 00000CD1 0000000000000000    <1> xferBuffer  dq 0    ;A ptr to the memory block through which all xacts occur
    64 00000CD9 0000000000000000    <1> sectorNum   dq 0    ;Number of the sector we wish to xact with
    36                                  %include "./Utils/FDISK/Data/fdskMsg.asm"
    37                              <1> ;This file will contain the "pages" of the application
    38                              <1> 
    39 00000CE1 0A0D24              <1> crlf    db LF,CR,"$"
    40                              <1> ;This message is only printed if a multitasker is detected as installed
    41                              <1> multiMsg:   
    42 00000CE4 506C65617365207374- <1>     db "Please stop all other programs and/or any networking software",
    42 00000CED 6F7020616C6C206F74- <1>
    42 00000CF6 6865722070726F6772- <1>
    42 00000CFF 616D7320616E642F6F- <1>
    42 00000D08 7220616E79206E6574- <1>
    42 00000D11 776F726B696E672073- <1>
    42 00000D1A 6F667477617265      <1>
    43 00000D21 206265666F72652070- <1>     db " before proceeding.",LF,CR
    43 00000D2A 726F63656564696E67- <1>
    43 00000D33 2E0A0D              <1>
    44 00000D36 507265737320456E74- <1>     db "Press Enter to continue once this is done or ESC to return to",
    44 00000D3F 657220746F20636F6E- <1>
    44 00000D48 74696E7565206F6E63- <1>
    44 00000D51 652074686973206973- <1>
    44 00000D5A 20646F6E65206F7220- <1>
    44 00000D63 45534320746F207265- <1>
    44 00000D6C 7475726E20746F      <1>
    45 00000D73 444F530A0D24        <1>     db "DOS",LF,CR,"$"
    46                              <1> strtMsg:
    47 00000D79 0D0A                <1>     db CR,LF
    48 00000D7B 536369656E74696669- <1>     db "Scientific Control Program / Disk Operating System",LF,CR
    48 00000D84 6320436F6E74726F6C- <1>
    48 00000D8D 2050726F6772616D20- <1>
    48 00000D96 2F204469736B204F70- <1>
    48 00000D9F 65726174696E672053- <1>
    48 00000DA8 797374656D0A0D      <1>
    49 00000DAF 466978656420446973- <1>     db "Fixed Disk Setup Program Version $"
    49 00000DB8 6B2053657475702050- <1>
    49 00000DC1 726F6772616D205665- <1>
    49 00000DCA 7273696F6E2024      <1>
    50                              <1> 
    51                              <1> cpyrtMsg:
    52 00000DD1 0A0D28432920436F70- <1>     db LF,CR,"(C) Copyright Scientific Computer Research. 2022", LF,CR,"$"
    52 00000DDA 797269676874205363- <1>
    52 00000DE3 69656E746966696320- <1>
    52 00000DEC 436F6D707574657220- <1>
    52 00000DF5 52657365617263682E- <1>
    52 00000DFE 20323032320A0D24    <1>
    53                              <1> 
    54                              <1> exitMsg:
    55 00000E06 0D0A0A              <1>     db CR,LF,LF
    56 00000E09 53797374656D207769- <1>     db "System will now restart",LF,CR
    56 00000E12 6C6C206E6F77207265- <1>
    56 00000E1B 73746172740A0D      <1>
    57 00000E22 496E7365727420626F- <1>     db "Insert bootable DOS medium in drive A:",LF,CR
    57 00000E2B 6F7461626C6520444F- <1>
    57 00000E34 53206D656469756D20- <1>
    57 00000E3D 696E20647269766520- <1>
    57 00000E46 413A0A0D            <1>
    58 00000E4A 507265737320616E79- <1>     db "Press any key when ready...",LF,CR,"$"
    58 00000E53 206B6579207768656E- <1>
    58 00000E5C 2072656164792E2E2E- <1>
    58 00000E65 0A0D24              <1>
    59                              <1> 
    60 00000E68 466978656420446973- <1> prompt: db "Fixed Disk "
    60 00000E71 6B20                <1>
    61 00000E73 315D2024            <1> drvNum  db "1] $"
    62                              <1> 
    63                              <1> exitOptionMsg:
    64 00000E77 507265737320582074- <1>     db "Press X to exit",LF,CR,"$"
    64 00000E80 6F20657869740A0D24  <1>
    65                              <1> 
    66                              <1> selectValidOption:
    67 00000E89 0D0A0A0A            <1>     db CR,LF,LF,LF,
    68 00000E8D 2D2D2D2D2D2D2D2D2D- <1>     db "------------------------------------",CR,LF
    68 00000E96 2D2D2D2D2D2D2D2D2D- <1>
    68 00000E9F 2D2D2D2D2D2D2D2D2D- <1>
    68 00000EA8 2D2D2D2D2D2D2D2D2D- <1>
    68 00000EB1 0D0A                <1>
    69 00000EB3 20202020506C656173- <1>     db "    Please select a valid choice    ",CR,LF,
    69 00000EBC 652073656C65637420- <1>
    69 00000EC5 612076616C69642063- <1>
    69 00000ECE 686F69636520202020- <1>
    69 00000ED7 0D0A                <1>
    70 00000ED9 2D2D2D2D2D2D2D2D2D- <1>     db "------------------------------------",CR,LF,LF,LF,"$"
    70 00000EE2 2D2D2D2D2D2D2D2D2D- <1>
    70 00000EEB 2D2D2D2D2D2D2D2D2D- <1>
    70 00000EF4 2D2D2D2D2D2D2D2D2D- <1>
    70 00000EFD 0D0A0A0A24          <1>
    71                              <1> 
    72                              <1> ;Pages
    73                              <1> ;MAIN PAGE
    74                              <1> mainPageMsg:
    75 00000F02 43686F6F7365206F6E- <1>     db "Choose one of the following:",LF,CR
    75 00000F0B 65206F662074686520- <1>
    75 00000F14 666F6C6C6F77696E67- <1>
    75 00000F1D 3A0A0D              <1>
    76 00000F20 202031292043726561- <1>     db "  1) Create DOS Partition",LF,CR
    76 00000F29 746520444F53205061- <1>
    76 00000F32 72746974696F6E0A0D  <1>
    77 00000F3B 20203229204368616E- <1>     db "  2) Change Active Partition",LF,CR
    77 00000F44 676520416374697665- <1>
    77 00000F4D 20506172746974696F- <1>
    77 00000F56 6E0A0D              <1>
    78 00000F59 202033292044656C65- <1>     db "  3) Delete DOS Partition",LF,CR
    78 00000F62 746520444F53205061- <1>
    78 00000F6B 72746974696F6E0A0D  <1>
    79 00000F74 202034292044697370- <1>     db "  4) Display Partition Information",LF,CR,"$"
    79 00000F7D 6C6179205061727469- <1>
    79 00000F86 74696F6E20496E666F- <1>
    79 00000F8F 726D6174696F6E0A0D- <1>
    79 00000F98 24                  <1>
    80                              <1> mpOptionalMsg:
    81 00000F99 202035292053656C65- <1>     db "  5) Select Fixed Disk Drive",LF,CR,"$"
    81 00000FA2 637420466978656420- <1>
    81 00000FAB 4469736B2044726976- <1>
    81 00000FB4 650A0D24            <1>
    82                              <1> 
    83                              <1> ;CREATE PARTITION PAGE
    84                              <1> createPageBadMsg:
    85 00000FB8 5072696D6172792044- <1>     db "Primary DOS partition already exists",LF,CR,"$"
    85 00000FC1 4F5320706172746974- <1>
    85 00000FCA 696F6E20616C726561- <1>
    85 00000FD3 647920657869737473- <1>
    85 00000FDC 0A0D24              <1>
    86                              <1> createPageMsg:
    87 00000FDF 43726561746520444F- <1>     db "Create DOS Partition",LF,LF,CR
    87 00000FE8 532050617274697469- <1>
    87 00000FF1 6F6E0A0A0D          <1>
    88 00000FF6 446F20796F75207769- <1>     db "Do you wish to use the entire fixed disk for DOS? Y/N: $"
    88 00000FFF 736820746F20757365- <1>
    88 00001008 2074686520656E7469- <1>
    88 00001011 726520666978656420- <1>
    88 0000101A 6469736B20666F7220- <1>
    88 00001023 444F533F20592F4E3A- <1>
    88 0000102C 2024                <1>
    89                              <1> createPage2Msg:
    90 0000102E 537065636966792068- <1>     db "Specify how much of the fixed disk you wish to use (1%-99%) or"
    90 00001037 6F77206D756368206F- <1>
    90 00001040 662074686520666978- <1>
    90 00001049 6564206469736B2079- <1>
    90 00001052 6F7520776973682074- <1>
    90 0000105B 6F2075736520283125- <1>
    90 00001064 2D39392529206F72    <1>
    91 0000106C 0D0A                <1>     db CR,LF,
    92 0000106E 507265737320582074- <1>     db "Press X to return to FDISK options",CR,LF,"$"
    92 00001077 6F2072657475726E20- <1>
    92 00001080 746F20464449534B20- <1>
    92 00001089 6F7074696F6E730D0A- <1>
    92 00001092 24                  <1>
    93                              <1> createPromptMsg: 
    94 00001093 547970652061206E75- <1>     db "Type a number between 1 and 99] $"
    94 0000109C 6D6265722062657477- <1>
    94 000010A5 65656E203120616E64- <1>
    94 000010AE 2039395D2024        <1>
    95                              <1> createDoneMsg:
    96 000010B4 0D0A0A5072696D6172- <1>     db CR,LF,LF,"Primary partition created", CR,LF,"$"
    96 000010BD 792070617274697469- <1>
    96 000010C6 6F6E20637265617465- <1>
    96 000010CF 640D0A24            <1>
    97                              <1> 
    98                              <1> ;CHANGE ACTIVE PARTITION ON DISK PAGE
    99                              <1> activeSinglePtnMsg:
   100 000010D3 0D0A50617274697469- <1>     db CR,LF,"Partition "
   100 000010DC 6F6E20              <1>
   101                              <1> .number:
   102 000010DF 3120697320616C7265- <1>     db "1 is already active",CR,LF,"$"
   102 000010E8 616479206163746976- <1>
   102 000010F1 650D0A24            <1>
   103                              <1> 
   104                              <1> activePromptMsg:
   105 000010F5 0D0A506C6561736520- <1>     db CR,LF,"Please select a partition to mark as active (1-4): $"
   105 000010FE 73656C656374206120- <1>
   105 00001107 706172746974696F6E- <1>
   105 00001110 20746F206D61726B20- <1>
   105 00001119 617320616374697665- <1>
   105 00001122 2028312D34293A2024  <1>
   106                              <1> activePartitionSetMsg:
   107 0000112B 0D0A50617274697469- <1>     db CR,LF,"Partition "
   107 00001134 6F6E20              <1>
   108                              <1> .number:
   109 00001137 31206E6F7720736574- <1>     db "1 now set active",CR,LF,"$"
   109 00001140 206163746976650D0A- <1>
   109 00001149 24                  <1>
   110                              <1> 
   111                              <1> ;DELETE PARTITION PAGE
   112                              <1> deleteNukeMsg:
   113 0000114A 0D0A                <1>     db CR,LF,
   114 0000114C 44656C657465207468- <1>     db "Delete the whole Partition Table? Y/N: $"
   114 00001155 652077686F6C652050- <1>
   114 0000115E 6172746974696F6E20- <1>
   114 00001167 5461626C653F20592F- <1>
   114 00001170 4E3A2024            <1>
   115                              <1> deleteNukeCompleteMsg:
   116 00001174 0D0A0A506172746974- <1>     db CR,LF,LF,"Partition Table Deleted",CR,LF,"$"
   116 0000117D 696F6E205461626C65- <1>
   116 00001186 2044656C657465640D- <1>
   116 0000118F 0A24                <1>
   117                              <1> deleteSelectMsg:
   118 00001191 0D0A506C6561736520- <1>     db CR,LF, "Please select a partition to delete (1-4): $"
   118 0000119A 73656C656374206120- <1>
   118 000011A3 706172746974696F6E- <1>
   118 000011AC 20746F2064656C6574- <1>
   118 000011B5 652028312D34293A20- <1>
   118 000011BE 24                  <1>
   119                              <1> deleteCannotMsg:
   120 000011BF 0D0A43616E6E6F7420- <1>     db CR,LF, "Cannot delete an active partition",CR,LF,"$"
   120 000011C8 64656C65746520616E- <1>
   120 000011D1 206163746976652070- <1>
   120 000011DA 6172746974696F6E0D- <1>
   120 000011E3 0A24                <1>
   121                              <1> deleteBadFoundMsg:
   122 000011E5 0D0A42616420506172- <1>     db CR,LF, "Bad Partition Table detected.",CR,LF,"$"
   122 000011EE 746974696F6E205461- <1>
   122 000011F7 626C65206465746563- <1>
   122 00001200 7465642E0D0A24      <1>
   123                              <1> deleteOkMsg:
   124 00001207 0D0A50617274697469- <1>     db CR,LF, "Partition "
   124 00001210 6F6E20              <1>
   125                              <1> .number:
   126 00001213 312064656C65746564- <1>     db "1 deleted",CR,LF,"$"
   126 0000121C 0D0A24              <1>
   127                              <1> 
   128                              <1> ;SELECT FIXED DISK PAGE 
   129                              <1> selectNumber:
   130 0000121F 0D0A464449534B2068- <1>     db CR,LF,"FDISK has detected "
   130 00001228 617320646574656374- <1>
   130 00001231 656420              <1>
   131                              <1> .number:
   132 00001234 302046697865642044- <1>     db "0 Fixed Disk Drives",CR,LF,"$"
   132 0000123D 69736B204472697665- <1>
   132 00001246 730D0A24            <1>
   133                              <1> selectPrompt:
   134 0000124A 0D0A506C6561736520- <1>     db CR,LF,"Please select a Fixed Disk (1-"
   134 00001253 73656C656374206120- <1>
   134 0000125C 466978656420446973- <1>
   134 00001265 6B2028312D          <1>
   135                              <1> .number:
   136 0000126A 31293A2024          <1>     db "1): $"
   137                              <1> ;Partition status table
   138                              <1> partTitle:
   139 0000126F 2D2D2D2D2D2D2D2D2D- <1>     db "-------------------------------------------------",CR,LF
   139 00001278 2D2D2D2D2D2D2D2D2D- <1>
   139 00001281 2D2D2D2D2D2D2D2D2D- <1>
   139 0000128A 2D2D2D2D2D2D2D2D2D- <1>
   139 00001293 2D2D2D2D2D2D2D2D2D- <1>
   139 0000129C 2D2D2D2D0D0A        <1>
   140 000012A2 506172746974696F6E- <1>     db "Partition Status Type  Start    End      Size    ",CR,LF,"$"
   140 000012AB 205374617475732054- <1>
   140 000012B4 797065202053746172- <1>
   140 000012BD 7420202020456E6420- <1>
   140 000012C6 202020202053697A65- <1>
   140 000012CF 202020200D0A24      <1>
   141                              <1> ;Partition status table string, this gets edited... a lot
   142                              <1> partString:
   143 000012D6 20202020            <1>     db "    "
   144                              <1> .ptnNum:
   145 000012DA 312020202020202020  <1>     db "1", "    ", " ", "   "
   146                              <1> .ptnSts:
   147 000012E3 41202020            <1>     db "A","  "," " 
   148                              <1> .ptnFS:
   149 000012E7 2020202020          <1>     db "     "  ;This is 5 chars, either FAT12, FAT16, FAT32 or a 2 digit num 
   150 000012EC 20                  <1>     db " "
   151                              <1> .ptnStart:
   152 000012ED 2020202020202020    <1>     db "        "   ;8 digits for the LBA of the first sector of the partition
   153 000012F5 20                  <1>     db " "
   154                              <1> .ptnEnd:
   155 000012F6 2020202020202020    <1>     db "        "   ;8 digits for the LBA of the last sector of the partition
   156 000012FE 20                  <1>     db " "
   157                              <1> .ptnSize:
   158 000012FF 2020202020202020    <1>     db "        "   ;8 digits for the number of sectors in the partition
   159                              <1> partStringL equ $ - partString  ;Use this to clean the string with spaces
   160 00001307 0D0A24              <1>     db CR,LF,"$"
   161                              <1> 
   162                              <1> totalSpaceMsg:
   163 0000130A 0D0A                <1>     db CR,LF
   164 0000130C 2D2D2D2D2D2D2D2D2D- <1>     db "-------------------------------------------------",CR,LF
   164 00001315 2D2D2D2D2D2D2D2D2D- <1>
   164 0000131E 2D2D2D2D2D2D2D2D2D- <1>
   164 00001327 2D2D2D2D2D2D2D2D2D- <1>
   164 00001330 2D2D2D2D2D2D2D2D2D- <1>
   164 00001339 2D2D2D2D0D0A        <1>
   165 0000133F 546F74616C20446973- <1>     db "Total Disk Space is ", 
   165 00001348 6B2053706163652069- <1>
   165 00001351 7320                <1>
   166                              <1> .sizeCount:
   167 00001353 2020202020202020    <1>     db "        ",
   168 0000135B 20536563746F72730D- <1>     db " Sectors",CR,LF
   168 00001364 0A                  <1>
   169 00001365 536563746F72205369- <1>     db "Sector Size: "
   169 0000136E 7A653A20            <1>
   170                              <1> .sectorCount:
   171 00001372 20202020            <1>     db "    "
   172 00001376 2042797465730D0A    <1>     db " Bytes",CR,LF
   173 0000137E 2D2D2D2D2D2D2D2D2D- <1>     db "-------------------------------------------------",CR,LF,"$"
   173 00001387 2D2D2D2D2D2D2D2D2D- <1>
   173 00001390 2D2D2D2D2D2D2D2D2D- <1>
   173 00001399 2D2D2D2D2D2D2D2D2D- <1>
   173 000013A2 2D2D2D2D2D2D2D2D2D- <1>
   173 000013AB 2D2D2D2D0D0A24      <1>
   174                              <1> 
   175                              <1> 
   176 000013B2 4641543132          <1> fat12String:    db "FAT12"
   177 000013B7 4641543136          <1> fat16String:    db "FAT16"
   178 000013BC 4641543332          <1> fat32String:    db "FAT32"
   179                              <1> 
   180                              <1> ;Error Messages
   181                              <1> badVerStr:
   182 000013C1 496E636F7272656374- <1>     db "Incorrect DOS version",CR,LF,"$"
   182 000013CA 20444F532076657273- <1>
   182 000013D3 696F6E0D0A24        <1>
   183                              <1> noDisks:
   184 000013D9 4E6F20666978656420- <1>     db "No fixed disks present",CR,LF,"$"
   184 000013E2 6469736B7320707265- <1>
   184 000013EB 73656E740D0A24      <1>
   185                              <1> noMemoryMsg:
   186 000013F2 4E6F7420656E6F7567- <1>     db "Not enough free memory in system",CR,LF,"$"
   186 000013FB 682066726565206D65- <1>
   186 00001404 6D6F727920696E2073- <1>
   186 0000140D 797374656D0D0A24    <1>
   187                              <1> invalidMBRMsg:
   188 00001415 0D0A                <1>     db CR,LF
   189 00001417 496E76616C6964206F- <1>     db "Invalid or Missing Master Boot Record",CR,LF
   189 00001420 72204D697373696E67- <1>
   189 00001429 204D61737465722042- <1>
   189 00001432 6F6F74205265636F72- <1>
   189 0000143B 640D0A              <1>
   190 0000143E 506C65617365204372- <1>     db "Please Create a new Master Boot Record",CR,LF,"$"
   190 00001447 656174652061206E65- <1>
   190 00001450 77204D617374657220- <1>
   190 00001459 426F6F74205265636F- <1>
   190 00001462 72640D0A24          <1>
   191                              <1> badSectorMsg:
   192 00001467 0D0A                <1>     db CR,LF
   193 00001469 42616420536563746F- <1>     db "Bad Sector Size Detected",CR,LF,"$"
   193 00001472 722053697A65204465- <1>
   193 0000147B 7465637465640D0A24  <1>
   194                              <1> badReadMsg:
   195 00001484 0D0A                <1>     db CR,LF
   196 00001486 4572726F7220726561- <1>     db "Error reading Fixed Disk",CR,LF,"$"
   196 0000148F 64696E672046697865- <1>
   196 00001498 64204469736B0D0A24  <1>
   197                              <1> badWriteMsg:
   198 000014A1 0D0A                <1>     db CR,LF
   199 000014A3 4572726F7220777269- <1>     db "Error writing Fixed Disk",CR,LF,"$"
   199 000014AC 74696E672046697865- <1>
   199 000014B5 64204469736B0D0A24  <1>
   200                              <1> 
    37                                  
    38                                  ;Place the partial VBR here.
    39                                  ;All uninitialised values are set to 0
    40                                  ;If total sectors is bigger than 16 bits, set totSec16 to 0
    41                                  ;Else set totSec32 to 0
    42                                  partialVBR:
    43                                      istruc bpb
    44 000014BE EB0090                      at bpb.jmpBoot,     db 0EBh, 00h, 90h   ;Needed start signtature
    45 000014C1 534350444F537631            at bpb.oemName,     db 'SCPDOSv1'
    46 000014C9 0002                        at bpb.bytsPerSec,  dw 0200h        ;512 bytes per sector always
    47 000014CB 00                          at bpb.secPerClus,  db 0            ;Unset by FDISK
    48 000014CC 0000                        at bpb.revdSecCnt,  dw 0            ;Unset by FDISK
    49 000014CE 01                          at bpb.numFATs,     db 1            ;Unset by FDISK, set to 1
    50 000014CF 0000                        at bpb.rootEntCnt,  dw 0            ;Unset by FDISK
    51 000014D1 FFFF                        at bpb.totSec16,    dw -1           ;Total number of sectors on disk
    52 000014D3 F8                          at bpb.media,       db 0F8h         ;Hard Disk Media byte
    53 000014D4 0000                        at bpb.FATsz16,     dw 0            ;Unset by FDISK
    54 000014D6 3F00                        at bpb.secPerTrk,   dw 003Fh        ;Fake Hard disk geometry 64 sec/trk
    55 000014D8 FF00                        at bpb.numHeads,    dw 00FFh        ;255 Heads
    56 000014DA FFFFFFFF                    at bpb.hiddSec,     dd -1           ;Set this field
    57 000014DE FFFFFFFF                    at bpb.totSec32,    dd -1           ;Set total sec if bigger than 16 bits 
    58 000014E2 00<rep 1Ah>                 iend
    59                                  partialVBRL equ $ - partialVBR
    60                                  freshMBRcopy:   ;Symbol pointing to the MBR copy appended
    60          ------------------       info: assembly required 1+2+2 passes

