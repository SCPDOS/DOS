     1                                  ;COMMAND.COM main file
     2                                  [map all ./Utils/COMMAND/Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Source/Include/dosMacro.mac"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------------------------------
     9                              <1> ;Generic Macros file
    10                              <1> ;The following instruction extensions allow to conditionally return
    11                              <1> ;The idea was borrowed from the DOS Source Code
    12                              <1> ;
    13                              <1> ;-------------------------------------------------------------------------------
    14                              <1> 
    15                              <1> ;-------------------------------------------------------------------------------
    16                              <1> ;These macros are live and must not be touched
    17                              <1> ;-------------------------------------------------------------------------------
    18                              <1> %macro return 0
    19                              <1> %%_ret:
    20                              <1>     ret
    21                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    22                              <1> %endmacro
    23                              <1> 
    24                              <1> %macro cret 1
    25                              <1> %%_base:
    26                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    27                              <1>     %ifdef retOff
    28                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <1>     %ifdef currSegVBase
    30                              <1>     j%+1 short (retOff+currSegVBase)
    31                              <1>     %else
    32                              <1>     j%+1 short retOff
    33                              <1>     %endif  ;End ifdef currSegVBase
    34                              <1>     %else 
    35                              <1>     j%-1 short %%a
    36                              <1>     return
    37                              <1> %%a:
    38                              <1>     %endif  ;End the distance measurement if
    39                              <1>     %else   
    40                              <1>     j%-1 short %%a
    41                              <1>     return
    42                              <1> %%a:
    43                              <1>     %endif  ;End ifdef retoff
    44                              <1> %endmacro
    45                              <1> 
    46                              <1> %macro retz 0
    47                              <1> cret z
    48                              <1> %endmacro
    49                              <1> 
    50                              <1> %macro retnz 0
    51                              <1> cret nz
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> %macro rete 0
    55                              <1> cret e
    56                              <1> %endmacro
    57                              <1> 
    58                              <1> %macro retne 0
    59                              <1> cret ne
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> %macro retc 0
    63                              <1> cret c
    64                              <1> %endmacro
    65                              <1> 
    66                              <1> %macro retnc 0
    67                              <1> cret nc
    68                              <1> %endmacro
    69                              <1> 
    70                              <1> %macro retb 0
    71                              <1> cret b
    72                              <1> %endmacro
    73                              <1> 
    74                              <1> %macro retnb 0
    75                              <1> cret nb
    76                              <1> %endmacro
    77                              <1> 
    78                              <1> %macro reta 0
    79                              <1> cret a
    80                              <1> %endmacro
    81                              <1> 
    82                              <1> %macro retna 0
    83                              <1> cret na
    84                              <1> %endmacro
    85                              <1> 
    86                              <1> %macro breakpoint 0
    87                              <1> xchg bx, bx
    88                              <1> %endmacro
     7                                  %include "./Source/Include/dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    27 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    32 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Only affects for SUBST drives, not JOIN
    69                              <1> ; Flags: Bit 15 set = Network drive
    70                              <1> ;        Bit 14 set = Physical drive
    71                              <1> ;        Bit 13 set = JOIN'ed drive
    72                              <1> ;        Bit 12 set = SUBST'ed drive
    73                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    74                              <1> endstruc
    75                              <1> ;CDS equates
    76                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    77                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    78                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    79                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    80                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    81                              <1> ;------------------------------------------------------------------------;
    82                              <1> ; The SFT is a way to allow applications to open file handles to files 
    83                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    84                              <1> ; under the first header, and then a second header will be linked to the 
    85                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    86                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    87                              <1> ; using the FCBS= command. Default FCBS=5.
    88                              <1> ;
    89                              <1> ; A file handle describes the file, and the location within the file that
    90                              <1> ; we are reading. The file handle can be manipulated without the file
    91                              <1> ; being in memory, thus allowing the user to access data without needing 
    92                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    93                              <1> ; accessing devices, by treating them as files with their drivers 
    94                              <1> ; responding and translating the manipulations of the file handle itself.
    95                              <1> ; Neither the driver nor the application should see or use the SFT for
    96                              <1> ; the handle, as it is subject to change (and will change when file 
    97                              <1> ; sharing provisions are included). The DOS will make requests to the 
    98                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    99                              <1> ; track of the information in the SFT entry for that handle. 
   100                              <1> ;
   101                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   102                              <1> ; can point to the same file. It all depends on what the applications 
   103                              <1> ; want to do with the File.
   104                              <1> ;
   105                              <1> ; !!!!IMPORTANT!!!!
   106                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   107                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   108                              <1> ;
   109                              <1> ;Each SFT may look like this:
   110                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   111                              <1> ;            |                |
   112                              <1> ;       wNumFiles*sft    wNumFiles*sft
   113                              <1> ;
   114                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   115                              <1> ; System FCBs.
   116                              <1> ;
   117                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   118                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   119                              <1> ;
   120                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   121                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   122                              <1> ;------------------------------------------------------------------------;
   123                              <1> struc sfth   ;System file table header
   124                              <1> ; This is the SFT header.
   125                              <1> ; This structure comes before the start of the first file in the array/table.
   126 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   127 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   128                              <1> endstruc
   129                              <1> 
   130                              <1> struc sft
   131                              <1> ;This is the file struc itself
   132 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   133 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   134 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   135 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   136 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   137 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   138 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   139 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   140 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   141 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   142 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   143 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   144 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   145 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   146 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   147 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   148 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   149 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   150 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   151                              <1> ;                           0 means no record
   152                              <1> endstruc
   153                              <1> ;Open Mode equates
   154                              <1> ;Access modes   Bits[2:0]
   155                              <1> ReadAccess      equ 0h
   156                              <1> WriteAccess     equ 1h
   157                              <1> RWAccess        equ 2h
   158                              <1> ;Bit 3 reserved 0
   159                              <1> ;Sharing modes  Bits[6:4]
   160                              <1> CompatShare     equ 0h
   161                              <1> denyRWShare     equ 10h
   162                              <1> denyWriteShare  equ 20h
   163                              <1> denyReadShare   equ 30h
   164                              <1> denyNoneShare   equ 40h
   165                              <1> netFCBShare     equ 70h
   166                              <1> noInherit       equ 80h
   167                              <1> ;Bits 8-12 reserved 0
   168                              <1> 
   169                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   170                              <1> ;Buffering on writes
   171                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   172                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   173                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   174                              <1> ;Attribute Byte
   175                              <1> readOnlyFile    equ 1h
   176                              <1> hiddenFile      equ 2h
   177                              <1> systemFile      equ 4h
   178                              <1> volumeLabel     equ 8h
   179                              <1> directoryFile   equ 10h ;Directory entry
   180                              <1> archiveFile     equ 20h
   181                              <1> ;Device Info equates
   182                              <1> ;For a block device, bits [5:0] contain the drive number
   183                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   184                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   185                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   186                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   187                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   188                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   189                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   190                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   191                              <1> devCharDev      equ 80h ;If set, it is a char device!
   192                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   193                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   194                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   195                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   196                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   197                              <1>  
   198                              <1> ;------------------------------------------------------------------------;
   199                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   200                              <1> ; to an internal buffer, and then copying it to the specified location
   201                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   202                              <1> ; another request for the same sector from the same device is made, so 
   203                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   204                              <1> ; size, selected according to the largest detected sector size during 
   205                              <1> ; the initial loadup.
   206                              <1> ;
   207                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   208                              <1> ;
   209                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   210                              <1> ;------------------------------------------------------------------------;
   211                              <1> 
   212                              <1> struc bufferHdr
   213 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   214 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   215 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   216 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   217 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   218 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   219 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   220 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   221 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   222                              <1>     .dataarea:             ;Points to the start of the data area
   223                              <1> endstruc
   224                              <1> ;Buffer Flag equates
   225                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   226                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   227                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   228                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   229                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   230                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   231                              <1> ;Note! A buffer is marked as referenced only when the application 
   232                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> ; Memory control block for each memory arena
   235                              <1> ;------------------------------------------------------------------------;
   236                              <1> struc mcb
   237 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   238 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   239 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   240 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbMarkCtn      equ "M"
   248                              <1> mcbMarkEnd      equ "Z"
   249                              <1> 
   250                              <1> memFirstFit     equ 0   ;First free block goes to application
   251                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   252                              <1> memLastFit      equ 2   ;Last free block goes to application
   253                              <1> 
   254                              <1> ;Owner = Para aligned address => Owning application PSP
   255                              <1> ;...To consider...
   256                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   257                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   258                              <1> ;------------------------------------------------------------------------;
   259                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   260                              <1> ; following order, thus allowing for return values to be placed in the 
   261                              <1> ; registers by accessing the caller register stack frame.
   262                              <1> ;------------------------------------------------------------------------;
   263                              <1> struc callerFrame
   264 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   265 00000008 ????????????????    <1>     .rbx    resq 1    
   266 00000010 ????????????????    <1>     .rcx    resq 1
   267 00000018 ????????????????    <1>     .rdx    resq 1
   268 00000020 ????????????????    <1>     .rsi    resq 1
   269 00000028 ????????????????    <1>     .rdi    resq 1
   270 00000030 ????????????????    <1>     .rbp    resq 1
   271 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   272 00000040 ????????????????    <1>     .r9     resq 1
   273                              <1> ;Pushed by Processor when invoked via Interrupt
   274 00000048 ????????????????    <1>     .rip    resq 1
   275 00000050 ????????????????    <1>     .cs     resq 1
   276 00000058 ????????????????    <1>     .flags  resq 1
   277                              <1> endstruc
   278                              <1> 
   279                              <1> struc dpl
   280                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   281                              <1> ; server calls
   282 00000000 ????????????????    <1>     .rax    resq 1
   283 00000008 ????????????????    <1>     .rbx    resq 1
   284 00000010 ????????????????    <1>     .rcx    resq 1
   285 00000018 ????????????????    <1>     .rdx    resq 1
   286 00000020 ????????????????    <1>     .rsi    resq 1
   287 00000028 ????????????????    <1>     .rdi    resq 1
   288 00000030 ????????????????    <1>     .r8     resq 1
   289 00000038 ????????????????    <1>     .r9     resq 1
   290 00000040 ????????????????    <1>     .align  resq 1
   291 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   292 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   293                              <1> endstruc
   294                              <1> 
   295                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   296 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   297 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   298 00000010 ????????????????    <1>     .newSFTVal      resq 1
   299 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   300 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   301 00000028 ????????????????    <1>     .newLastdrive   resq 1
   302 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   303 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   304 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   305 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   306 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   307 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   308 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc filename
   312                              <1> ;8.3 File name struct
   313 00000000 ????????????????    <1>     .fName  resb 8
   314 00000008 ??????              <1>     .fExt   resb 3
   315                              <1> endstruc
   316                              <1> 
   317                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   318 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   319 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   320 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   321 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   322 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   323 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   324 00000016 ????                <1>     .fileTime   resw 1  ;File time
   325 00000018 ????                <1>     .fileDate   resw 1  ;File date
   326 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   327 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc psp
   331 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   332 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   333 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   334 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   335 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   336 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   337 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   338 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   339 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   340 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   341 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   342 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   343 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   344 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   345                              <1> ;Extra handle arrays are grouped into a linked list
   346                              <1> ;The below are in the same place as in DOS
   347 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   348 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   349                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   350 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   351 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   352                              <1> endstruc
   353                              <1> 
   354                              <1> struc clkStruc
   355 00000000 ????                <1>     .dateWord   resw 1
   356 00000002 ??                  <1>     .minutes    resb 1
   357 00000003 ??                  <1>     .hours      resb 1
   358 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   359 00000005 ??                  <1>     .seconds    resb 1
   360                              <1> endstruc
   361                              <1> 
   362                              <1> struc countryStruc
   363 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   364                              <1>                         ;0 = month day year hh:mm:ss
   365                              <1>                         ;1 = day month year hh:mm:ss
   366                              <1>                         ;2 = year month day hh:mm:ss
   367 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   368 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   369 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   370 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   371 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   372 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   373                              <1>                         ;0 = Symbol leads, without space
   374                              <1>                         ;1 = Symbol follows, without space
   375                              <1>                         ;2 = Symbol leads, one space
   376                              <1>                         ;3 = Symbol follows, one space
   377                              <1>                         ;4 = Symbol replace decimal separator
   378 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   379 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   380 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   381 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   382 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   383                              <1> endstruc
   384                              <1> 
   385                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   386                              <1> ;for a space of 64Gb
   387                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   388                              <1> dosLowBase  equ 600h    ;Low load address
   389                              <1> 
   390                              <1> ;Critical Error AH bitfield equates
   391                              <1> critRead    equ 0h
   392                              <1> critWrite   equ 1h
   393                              <1> critDOS     equ 0h
   394                              <1> critFAT     equ 2h
   395                              <1> critDir     equ 4h
   396                              <1> critData    equ 6h
   397                              <1> critFailOK  equ 8h
   398                              <1> critRetryOK equ 10h
   399                              <1> critIgnorOK equ 20h
   400                              <1> critCharDev equ 80h
   401                              <1> 
   402                              <1> critIgnore  equ 0
   403                              <1> critRetry   equ 1
   404                              <1> critAbort   equ 2
   405                              <1> critFail    equ 3
   406                              <1> 
   407                              <1> ;MISC ASCII control chars
   408                              <1> NUL equ 00h ;^@         | ASCII Null
   409                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   410                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   411                              <1> BEL equ 07h ;^G         | ASCII Bell
   412                              <1> BSP equ 08h ;^H         | ASCII Backspace
   413                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   414                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   415                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   416                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   417                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   418                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   419                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   420                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   421                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   422                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   423                              <1> SPC equ 20h ;Printable  | ASCII Space
   424                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   425                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   426                              <1> 
   427                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   428                              <1> ;Extended Ascii Codes
   429                              <1> eF1     equ 3Bh ;F1 second byte
   430                              <1> eF2     equ 3Ch ;F2 second byte
   431                              <1> eF3     equ 3Dh ;F3 second byte
   432                              <1> eF4     equ 3Eh ;F4 second byte
   433                              <1> eF5     equ 3Fh ;F5 second byte
   434                              <1> eF6     equ 40h ;F6 second byte
   435                              <1> eF7     equ 41h ;F7 second byte
   436                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   437                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   438                              <1> eIns    equ 52h ;Insert second byte
   439                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   440                              <1> 
   441                              <1> ;Default Configuration for the system
   442                              <1> 
   443                              <1> buffersDefault  equ 30
   444                              <1> filesDefault    equ 20
   445                              <1> fcbsDefault     equ 4
   446                              <1> safeFcbsDeflt   equ 0
   447                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Source/Include/fcbStruc.inc"
     9                              <1> ;FCB related structures
    10                              <1> 
    11                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
    12                              <1> ;This field also used for random read/write ops to find the right record
    13                              <1> struc fcb
    14 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    15 00000001 ????????????????    <1>     .filename   resb 8
    16 00000009 ??????              <1>     .fileext    resb 3
    17 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    18                              <1> ;One block consists of 128 records, of size denoted in the below
    19 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    20 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    21 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    22 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    23                              <1>     ;----------------------------------------
    24                              <1>     ;Internal Records
    25 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    26 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    27 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    28                              <1>     ;----------------------------------------
    29 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    30 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    31                              <1> endstruc
    32                              <1> 
    33                              <1> struc exFcb
    34 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    35 00000001 ??????????          <1>     .reserved   resb 5  
    36 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    37 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    38 00000008 ????????????????    <1>     .filename   resb 8
    39 00000010 ??????              <1>     .fileext    resb 3
    40 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    41                              <1> ;One block consists of 128 records, of size denoted in the below
    42 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    43 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    44 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    45 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    46                              <1>     ;----------------------------------------
    47                              <1>     ;Internal Records
    48 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    49 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    50 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    51                              <1>     ;----------------------------------------
    52 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    53 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    54                              <1> endstruc
    55                              <1> 
    56                              <1> struc renameFcb
    57                              <1> ;Used for accessing the names and drive letter for renaming
    58                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    59 00000000 ??                  <1>     .driveNum   resb 1
    60 00000001 ????????????????    <1>     .filename   resb 8
    61 00000009 ??????              <1>     .fileext    resb 3
    62 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    63 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    64 00000011 ????????????????    <1>     .newName    resb 8
    65 00000019 ??????              <1>     .newExt     resb 3
    66 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    67                              <1> endstruc
    68                              <1> 
    69                              <1> ;FCBmode equates:
    70                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    71                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    72                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    73                              <1> fcbShareOn  equ 80h
    74                              <1> fcbCharDev  equ 40h
    75                              <1> fcbLocal    equ 40h
    76                              <1> 
    77                              <1> ;Structures of the special 6 bytes
    78                              <1> 
    79                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    80                              <1> struc noShare   
    81 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    82 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    83 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    84 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    85                              <1> endstruc
    86                              <1> 
    87                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    88                              <1> struc shareLocal    
    89 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    90 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    91 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    92                              <1> endstruc
    93                              <1> 
    94                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    95                              <1> struc shareNet
    96                              <1> ;All three fields too small for FAT32
    97 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    98 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    99 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   100                              <1> endstruc
     9                                  %include "./Source/Include/dosError.inc"
    10                              <1> ;DOS Error codes
    11                              <1> 
    12                              <1> ;Extended Error Codes
    13                              <1> errInvFnc   equ 1   ;Invalid function number
    14                              <1> errFnf      equ 2   ;File not found
    15                              <1> errPnf      equ 3   ;Path not found
    16                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    17                              <1> errAccDen   equ 5   ;Access denied (to resource)
    18                              <1> errBadHdl   equ 6   ;Invalid handle
    19                              <1> errMCBbad   equ 7   ;MCB's destroyed
    20                              <1> errNoMem    equ 8   ;Insufficient memory
    21                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    22                              <1> errBadEnv   equ 10  ;Invalid environment
    23                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    24                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    25                              <1> errInvDat   equ 13  ;Invalid data
    26                              <1> ;           equ 14  ;Reserved
    27                              <1> errBadDrv   equ 15  ;Invalid drive specified
    28                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    29                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    30                              <1> errNoFil    equ 18  ;No more files, no match found
    31                              <1> ;The following are Driver error codes + 19
    32                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    33                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    34                              <1> errUnkUnt   equ 20  ;Unknown Unit
    35                              <1> errDrvNR    equ 21  ;Drive not ready
    36                              <1> errUnkCmd   equ 22  ;Unknown Command
    37                              <1> errCRCerr   equ 23  ;Data (CRC) error
    38                              <1> errBadRLn   equ 24  ;Bad request structure length
    39                              <1> errSekErr   equ 25  ;Seek error
    40                              <1> errUnkMed   equ 26  ;Unknown media type
    41                              <1> errSecNF    equ 27  ;Sector not Found
    42                              <1> errNoPap    equ 28  ;Printer out of paper
    43                              <1> errWF       equ 29  ;Write fault
    44                              <1> errRF       equ 30  ;Read fault
    45                              <1> errGF       equ 31  ;General fault
    46                              <1> ;----------------------------------------------
    47                              <1> ;The following two go inbetween the Disk errors
    48                              <1> errShrVio   equ 32  ;Sharing violations
    49                              <1> errLokVio   equ 33  ;File Lock violation
    50                              <1> ;----------------------------------------------
    51                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    52                              <1> errNoFCB    equ 35  ;FCB unavailable
    53                              <1> errShrFul   equ 36  ;Sharing buffer full
    54                              <1> 
    55                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    56                              <1> 
    57                              <1> errFilExist equ 80  ;File already exists
    58                              <1> errDirExist equ 82  ;Directory already exists
    59                              <1> errFI44     equ 83  ;Fail on INT 44h
    60                              <1> errRedir    equ 84  ;Too many levels of redirection
    61                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    62                              <1> errBadPass  equ 86  ;Bad password
    63                              <1> errBadParam equ 87  ;Bad parameter passed to request
    64                              <1> errNetWrite equ 88  ;Network Write Fault
    65                              <1> ;-----------------------------------------------------------------------------
    66                              <1> ;Error Loci
    67                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    68                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    69                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    70                              <1> eLocChr     equ 4   ;Serial/Character Device error
    71                              <1> eLocMem     equ 5   ;Related to RAM
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error Actions
    74                              <1> eActRet     equ 1   ;Retry
    75                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    76                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    77                              <1> eActAbt     equ 4   ;Abort with cleanup
    78                              <1> eActKil     equ 5   ;Abort without cleanup
    79                              <1> eActIgn     equ 6   ;Ignore error
    80                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    81                              <1> ;-----------------------------------------------------------------------------
    82                              <1> ;Error classes
    83                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    84                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    85                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    86                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    87                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    88                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    89                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    90                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    91                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    92                              <1> eClsLocked  equ 10  ;Resource Locked
    93                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    94                              <1> eClsClash   equ 12  ;Resource already exists!
    95                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Utils/COMMAND/Data/cmdEqu.asm"
    11                              <1> ;Data equates and struct declarations
    12                              <1> 
    13                              <1> cmdBufferL  equ 128 ;Length of a command line buffer
    14                              <1> driveSpecL  equ 2   ;Space for X:
    15                              <1> dirPathL    equ 64  ;Length of a directory path
    16                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
    17                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
    18                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
    19                              <1> fullDirPathL equ driveSpecL + dirPathL
    20                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    21                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    22                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    23                              <1> 
    24                              <1> ;Use PSP FCB's for switch buffers
    25                              <1> fcb1        equ psp.fcb1
    26                              <1> fcb2        equ psp.fcb2
    27                              <1> ;Use the dta as the built command line buffer.
    28                              <1> cmdLineCnt  equ psp.parmList
    29                              <1> cmdLine     equ psp.progTail
    30                              <1> 
    31                              <1> 
    32                              <1> ;Struct Declarations
    33                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    34 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    35 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    36 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    37 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    38 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    39                              <1> endstruc
    40                              <1> 
    41                              <1> struc execProg  ;For use with EXEC-ing a child task
    42 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    43 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    44 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    45 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    46                              <1> endstruc
    47                              <1> 
    48                              <1> ;Directory attribute equates
    49                              <1>     dirReadOnly     equ 01h
    50                              <1>     dirHidden       equ 02h
    51                              <1>     dirSystem       equ 04h
    52                              <1>     dirVolumeID     equ 08h
    53                              <1>     dirDirectory    equ 10h
    54                              <1>     dirArchive      equ 20h
    55                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    56                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    57                              <1>     ;If any of the three bits are set, then ALL three bits are set
    58                              <1>     ; in addition to whatever the user passed to search for.
    59                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    60                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Utils/COMMAND/Data/cmdData.asm"
    13                              <1> ;Static Data Area for COMMAND.COM    
    14                              <1> startLbl:   ;Start symbol, this is the entry point
    15 00000000 E9C92A0000          <1>     jmp cmdLdr
    16 00000005 0000000000000000    <1> stackBottom dq 0    ;Pointer to the top of the stack as allocated by DOS
    17 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
    18 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
    19 00000017 FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
    20 0000001F 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
    21 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted, hardcoded in this version
    22 00000029 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    23 0000002B 5C                  <1> pathSep     db "\"  ;Default path sep
    24 0000002C 2F                  <1> switchChar  db "/"  ;Default switch char
    25 0000002D 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    26 0000002E 0000000000000000    <1> parentInt42 dq 0    ;Stores the parent values to restore upon exiting if it can
    27                              <1> ;Static strings, not used in command line parsing
    28 00000036 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    28 0000003F 000000000000000000- <1>
    28 00000048 000000000000000000- <1>
    28 00000051 000000000000000000- <1>
    28 0000005A 0000                <1>
    29 0000005C 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    29 00000065 000000000000000000- <1>
    29 0000006E 000000000000000000- <1>
    29 00000077 000000000000000000- <1>
    29 00000080 000000000000000000- <1>
    29 00000089 000000000000000000- <1>
    29 00000092 000000000000000000- <1>
    29 0000009B 00000000            <1>
    30                              <1> 
    31                              <1> 
    32                              <1> cmdLineStatePtr:
    33 0000009F 00                  <1> cmdStartOff db 0    ;Offset to the first char for this command (may be a space)
    34 000000A0 00                  <1> cmdEndOff   db 0    ;Offset to the terminating char for this command (0Dh or |)
    35 000000A1 00                  <1> pipeFlag    db 0    ;If set, we are piping across a command
    36 000000A2 0000                <1> pipeHndl    dw 0    ;If pipeFlag set, this var has the handle to the pipe file
    37 000000A4 000000000000000000- <1> pipeName    db 13 dup 0, ;Space for name of the pipe file we created.
    37 000000AD 00000000            <1>
    38                              <1> 
    39                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    40                              <1> ;These variables are valid for a SINGLE command in a command line
    41 000000B1 0000                <1> cmdDrvSpec  dw 0    ;Read the first word in to see if the pathspec has drivespec
    42 000000B3 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    43 000000B4 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    44                              <1> ;                    If 2, we are redirecting output to a file, by appending
    45                              <1> ;FLG and SWCH are read as a word when checking if argX is a switch
    46 000000B5 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    47 000000B6 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    48 000000B7 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    49                              <1> 
    50 000000B8 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    51 000000B9 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    52 000000BA 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    53                              <1> 
    54                              <1> cmdStateL equ $ - cmdStatePtr
    55                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    56                              <1> 
    57                              <1> ;Structs and strings
    58                              <1> 
    59 000000BB 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    59 000000C4 00000000000000      <1>
    60 000000CB 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    60 000000D4 000000000000000000- <1>
    60 000000DD 000000000000000000- <1>
    60 000000E6 000000000000000000- <1>
    60 000000EF 00000000000000      <1>
    61                              <1> 
    62 000000F6 000000000000000000- <1> launchBlock db execProg_size dup (0)
    62 000000FF 000000000000000000- <1>
    62 00000108 000000000000000000- <1>
    62 00000111 0000000000          <1>
    63                              <1> 
    64 00000116 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    64 0000011F 000000000000000000- <1>
    64 00000128 000000000000000000- <1>
    64 00000131 000000000000000000- <1>
    64 0000013A 000000000000000000- <1>
    64 00000143 000000000000000000- <1>
    64 0000014C 000000000000000000- <1>
    64 00000155 000000000000000000- <1>
    64 0000015E 000000000000000000- <1>
    64 00000167 000000000000000000- <1>
    64 00000170 000000000000000000- <1>
    64 00000179 000000000000000000- <1>
    64 00000182 000000000000000000- <1>
    64 0000018B 000000000000000000- <1>
    64 00000194 0000                <1>
    65 00000196 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    65 0000019F 000000000000000000- <1>
    65 000001A8 000000000000000000- <1>
    65 000001B1 000000000000000000- <1>
    65 000001BA 000000000000000000- <1>
    65 000001C3 000000000000000000- <1>
    65 000001CC 000000000000000000- <1>
    65 000001D5 000000000000000000- <1>
    65 000001DE 000000000000000000- <1>
    65 000001E7 000000000000000000- <1>
    65 000001F0 000000000000000000- <1>
    65 000001F9 000000000000000000- <1>
    65 00000202 000000000000000000- <1>
    65 0000020B 000000000000000000- <1>
    65 00000214 0000                <1>
    66 00000216 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)  ;Space for full path to a external command
    66 0000021F 000000000000000000- <1>
    66 00000228 000000000000000000- <1>
    66 00000231 000000000000000000- <1>
    66 0000023A 000000000000000000- <1>
    66 00000243 000000000000000000- <1>
    66 0000024C 000000000000000000- <1>
    66 00000255 000000000000000000- <1>
    66 0000025E 00000000000000      <1>
    67                              <1> 
    68 00000265 000000000000000000- <1> fcbCmdSpec  db fcbNameL dup (0) ;Used to make a FCB style name for the file
    68 0000026E 0000                <1>
    69 00000270 000000000000000000- <1> cmdSpec     db fileNameZL dup (0)   ;ASCIIZ command spec for the command name
    69 00000279 00000000            <1>
    70 0000027D 000000000000000000- <1> cmdName     db cmdNameL dup (0) ;Command name string prefixed by length of word
    70 00000286 0000000000          <1>
    71                              <1> 
    72 0000028B 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    72 00000294 000000000000000000- <1>
    72 0000029D 000000000000000000- <1>
    72 000002A6 000000000000000000- <1>
    72 000002AF 000000000000000000- <1>
    72 000002B8 000000000000000000- <1>
    72 000002C1 000000000000000000- <1>
    72 000002CA 000000000000000000- <1>
    72 000002D3 00000000000000      <1>
    73 000002DA 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    73 000002E3 000000000000000000- <1>
    73 000002EC 000000000000000000- <1>
    73 000002F5 000000000000000000- <1>
    73 000002FE 000000000000000000- <1>
    73 00000307 000000000000000000- <1>
    73 00000310 000000000000000000- <1>
    73 00000319 000000000000000000- <1>
    73 00000322 00000000000000      <1>
    74                              <1> 
    75 00000329 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Contains the pathspec for the search file
    75 00000332 000000000000000000- <1>
    75 0000033B 000000000000000000- <1>
    75 00000344 000000000000000000- <1>
    75 0000034D 000000000000000000- <1>
    75 00000356 000000000000000000- <1>
    75 0000035F 000000000000000000- <1>
    75 00000368 000000000000000000- <1>
    75 00000371 000000000000000000- <1>
    75 0000037A 000000000000000000- <1>
    75 00000383 000000000000000000- <1>
    75 0000038C 000000000000000000- <1>
    75 00000395 000000000000000000- <1>
    75 0000039E 000000000000000000- <1>
    75 000003A7 0000                <1>
    76                              <1> ;The above is larger than is needed/supported by DOS to allow for 
    77                              <1> ; users overtyping
    78                              <1> 
    79                              <1> ;Internal Function vars
    80                              <1> ;Dir Vars
    81 000003A9 00                  <1> dirPrnType  db 0    ;Print type.    Bit[0] set => /W or /w specified
    82                              <1> ;                                   Bit[1] set => /P or /p specified
    83 000003AA 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    84 000003AB 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    85 000003AC 00                  <1> dirDrv      db 0    ;0 based drive number to use
    86 000003AD 000000000000000000- <1> dirOldCWD   db cmdBufferL dup (0)   ;Space for CWD and any overspill 
    86 000003B6 000000000000000000- <1>
    86 000003BF 000000000000000000- <1>
    86 000003C8 000000000000000000- <1>
    86 000003D1 000000000000000000- <1>
    86 000003DA 000000000000000000- <1>
    86 000003E3 000000000000000000- <1>
    86 000003EC 000000000000000000- <1>
    86 000003F5 000000000000000000- <1>
    86 000003FE 000000000000000000- <1>
    86 00000407 000000000000000000- <1>
    86 00000410 000000000000000000- <1>
    86 00000419 000000000000000000- <1>
    86 00000422 000000000000000000- <1>
    86 0000042B 0000                <1>
    87 0000042D 000000000000000000- <1> dirPathArg  db cmdBufferL dup (0)   ;Copy the pathspec argument here if any
    87 00000436 000000000000000000- <1>
    87 0000043F 000000000000000000- <1>
    87 00000448 000000000000000000- <1>
    87 00000451 000000000000000000- <1>
    87 0000045A 000000000000000000- <1>
    87 00000463 000000000000000000- <1>
    87 0000046C 000000000000000000- <1>
    87 00000475 000000000000000000- <1>
    87 0000047E 000000000000000000- <1>
    87 00000487 000000000000000000- <1>
    87 00000490 000000000000000000- <1>
    87 00000499 000000000000000000- <1>
    87 000004A2 000000000000000000- <1>
    87 000004AB 0000                <1>
    88 000004AD 3F3F3F3F3F3F3F3F    <1> dirSrchPat  db 8 dup ("?")    ;We copy the search pattern here
    89 000004B5 2E                  <1> dirSPExt    db "."
    90 000004B6 3F3F3F              <1>             db 3 dup ("?")
    91                              <1> 
    92                              <1> ;Volume Vars
    93 000004B9 000000000000000000- <1> volLblSpc   db 13 dup (0)
    93 000004C2 00000000            <1>
    94 000004C6 00                  <1> volPathBuf  db 0 ;Drive LETTER goes here
    95 000004C7 3A5C2A2E2A00        <1>             db ":\*.*",0  ;This remains to build X:\*.*,0 for vol label search
    96                              <1> 
    97                              <1> ;Time/Date vars
    98 000004CD 00                  <1> td1 db 0    ;Minutes/Year
    99 000004CE 00                  <1> td2 db 0    ;Hours/Zero
   100 000004CF 00                  <1> td3 db 0    ;Hundredths/Day
   101 000004D0 00                  <1> td4 db 0    ;Seconds/Month
   102                              <1> 
   103                              <1> ;Rename/Copy Buffers
   104 000004D1 000000000000000000- <1> sourcePath  db cmdBufferL dup (0)
   104 000004DA 000000000000000000- <1>
   104 000004E3 000000000000000000- <1>
   104 000004EC 000000000000000000- <1>
   104 000004F5 000000000000000000- <1>
   104 000004FE 000000000000000000- <1>
   104 00000507 000000000000000000- <1>
   104 00000510 000000000000000000- <1>
   104 00000519 000000000000000000- <1>
   104 00000522 000000000000000000- <1>
   104 0000052B 000000000000000000- <1>
   104 00000534 000000000000000000- <1>
   104 0000053D 000000000000000000- <1>
   104 00000546 000000000000000000- <1>
   104 0000054F 0000                <1>
   105 00000551 000000000000000000- <1> destPath    db cmdBufferL dup (0)
   105 0000055A 000000000000000000- <1>
   105 00000563 000000000000000000- <1>
   105 0000056C 000000000000000000- <1>
   105 00000575 000000000000000000- <1>
   105 0000057E 000000000000000000- <1>
   105 00000587 000000000000000000- <1>
   105 00000590 000000000000000000- <1>
   105 00000599 000000000000000000- <1>
   105 000005A2 000000000000000000- <1>
   105 000005AB 000000000000000000- <1>
   105 000005B4 000000000000000000- <1>
   105 000005BD 000000000000000000- <1>
   105 000005C6 000000000000000000- <1>
   105 000005CF 0000                <1>
   106                              <1> ;Copy Handles
   107 000005D1 FFFF                <1> sourceHdl   dw -1
   108 000005D3 FFFF                <1> destHdl     dw -1
   109                              <1> 
   110 000005D5 000000000000000000- <1> copyBuffer  db 128 dup (0)  ;Copy up to 128 bytes at a time
   110 000005DE 000000000000000000- <1>
   110 000005E7 000000000000000000- <1>
   110 000005F0 000000000000000000- <1>
   110 000005F9 000000000000000000- <1>
   110 00000602 000000000000000000- <1>
   110 0000060B 000000000000000000- <1>
   110 00000614 000000000000000000- <1>
   110 0000061D 000000000000000000- <1>
   110 00000626 000000000000000000- <1>
   110 0000062F 000000000000000000- <1>
   110 00000638 000000000000000000- <1>
   110 00000641 000000000000000000- <1>
   110 0000064A 000000000000000000- <1>
   110 00000653 0000                <1>
    13                                  %include "./Utils/COMMAND/Data/cmdTable.asm"
    14                              <1> ;Function dispatch table
    15                              <1> functionTable:
    16                              <1> ;Use Pascal strings with each row of hte table having three columns:
    17                              <1> ; Col 1, BYTE, Length of command
    18                              <1> ; Col 2, String, String representing the user input
    19                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
    20 00000655 03444952            <1>     db 3, "DIR"
    21 00000659 2A12                <1>     dw dir - startLbl
    22                              <1> 
    23 0000065B 024344              <1>     db 2, "CD"
    24 0000065E C215                <1>     dw chdir - startLbl
    25                              <1> 
    26 00000660 054348444952        <1>     db 5, "CHDIR"
    27 00000666 C215                <1>     dw chdir - startLbl
    28                              <1> 
    29 00000668 024D44              <1>     db 2, "MD"
    30 0000066B 6A16                <1>     dw mkdir - startLbl
    31                              <1> 
    32 0000066D 054D4B444952        <1>     db 5, "MKDIR"
    33 00000673 6A16                <1>     dw mkdir - startLbl
    34                              <1> 
    35 00000675 025244              <1>     db 2, "RD"
    36 00000678 B616                <1>     dw rmdir - startLbl
    37                              <1> 
    38 0000067A 05524D444952        <1>     db 5, "RMDIR"
    39 00000680 B616                <1>     dw rmdir - startLbl
    40                              <1> 
    41 00000682 0344454C            <1>     db 3, "DEL"
    42 00000686 A918                <1>     dw erase - startLbl
    43                              <1> 
    44 00000688 054552415345        <1>     db 5, "ERASE"
    45 0000068E A918                <1>     dw erase - startLbl
    46                              <1> 
    47 00000690 0444415445          <1>     db 4, "DATE"
    48 00000695 D218                <1>     dw date - startLbl
    49                              <1> 
    50 00000697 0454494D45          <1>     db 4, "TIME"
    51 0000069C 9819                <1>     dw time - startLbl
    52                              <1> 
    53 0000069E 04434F5059          <1>     db 4, "COPY"
    54 000006A3 0217                <1>     dw copy - startLbl
    55                              <1> 
    56 000006A5 0443545459          <1>     db 4, "CTTY"
    57 000006AA 301A                <1>     dw ctty - startLbl
    58                              <1> 
    59 000006AC 03434C53            <1>     db 3, "CLS"
    60 000006B0 CB1A                <1>     dw cls - startLbl
    61                              <1> 
    62 000006B2 05425245414B        <1>     db 5, "BREAK"
    63 000006B8 3D1B                <1>     dw break - startLbl
    64                              <1> 
    65 000006BA 06564552494659      <1>     db 6, "VERIFY"
    66 000006C1 BE1B                <1>     dw verify - startLbl
    67                              <1> 
    68 000006C3 0652454E414D45      <1>     db 6, "RENAME"
    69 000006CA 3B1C                <1>     dw rename - startLbl
    70                              <1> 
    71 000006CC 044D4F5645          <1>     db 4, "MOVE"
    72 000006D1 3B1C                <1>     dw rename - startLbl
    73                              <1>     
    74 000006D3 08545255454E414D45  <1>     db 8, "TRUENAME"
    75 000006DC 431D                <1>     dw truename - startLbl
    76                              <1> 
    77 000006DE 03564552            <1>     db 3, "VER"
    78 000006E2 8C1E                <1>     dw version - startLbl
    79                              <1> 
    80 000006E4 03564F4C            <1>     db 3, "VOL"
    81 000006E8 791D                <1>     dw volume - startLbl
    82                              <1> 
    83 000006EA 034D454D            <1>     db 3, "MEM"
    84 000006EE D01E                <1>     dw memory - startLbl
    85                              <1> 
    86 000006F0 0445584954          <1>     db 4, "EXIT"
    87 000006F5 B220                <1>     dw exit - startLbl
    88                              <1> 
    89 000006F7 0454595045          <1>     db 4, "TYPE"
    90 000006FC 1A20                <1>     dw type - startLbl
    91                              <1> 
    92 000006FE 05544F554348        <1>     db 5, "TOUCH"
    93 00000704 081D                <1>     dw touch - startLbl
    94                              <1> 
    95 00000706 FF                  <1>     db -1   ;End of table
    14                                  %include "./Utils/COMMAND/Data/cmdMsg.asm"
    15                              <1> ;COMMAND.COM Messages and strings
    16 00000707 0D0A24              <1> crlf    db  CR,LF,"$"
    17 0000070A 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
    18 0000070F 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
    18 00000718 696C65206D69737369- <1>
    18 00000721 6E670D0A24          <1>
    19 00000726 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
    19 0000072F 6469736B2077697468- <1>
    19 00000738 206261746368206669- <1>
    19 00000741 6C65                <1>
    20 00000743 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
    20 0000074C 737320616E79206B65- <1>
    20 00000755 79207768656E207265- <1>
    20 0000075E 6164790D0A24        <1>
    21 00000764 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
    21 0000076D 6E64206F722066696C- <1>
    21 00000776 65206E616D650D0A24  <1>
    22 0000077F 4475706C6963617465- <1> dupName db  "Duplicate file name or "
    22 00000788 2066696C65206E616D- <1>
    22 00000791 65206F7220          <1>
    23 00000796 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    23 0000079F 666F756E640D0A24    <1>
    24 000007A7 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    24 000007B0 656E74206469736B20- <1>
    24 000007B9 73706163650D0A24    <1>
    25 000007C1 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    25 000007CA 7669726F6E6D656E74- <1>
    25 000007D3 2073706163650D0A24  <1>
    26 000007DC 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    26 000007E5 74696F6E206572726F- <1>
    26 000007EE 720D0A24            <1>
    27 000007F2 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    27 000007FB 6F7420626520636F70- <1>
    27 00000804 696564206F6E746F20- <1>
    27 0000080D 697473656C660D0A24  <1>
    28 00000816 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    28 0000081F 662064657374696E61- <1>
    28 00000828 74696F6E206C6F7374- <1>
    28 00000831 206265666F72652063- <1>
    28 0000083A 6F70790D0A24        <1>
    29                              <1> ;Copy end message. First write # files copied then this message 
    30 00000840 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    30 00000849 636F706965640D0A24  <1>
    31                              <1> ;Dir end1 msg. First write # files in dir then this
    32 00000852 2046696C6528732920- <1> dirOk   db  " File(s) $"
    32 0000085B 24                  <1>
    33                              <1> ;Dir end2 msg. First write # bytes free then this message
    34 0000085C 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    34 00000865 65650D0A24          <1>
    35 0000086A 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    36                              <1> 
    37 00000873 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    37 0000087C 726976652073706563- <1>
    37 00000885 696669636174696F6E- <1>
    37 0000088E 0D0A24              <1>
    38 00000891 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    38 0000089A 6B6579207768656E20- <1>
    38 000008A3 7265616479202E202E- <1>
    38 000008AC 202E2024            <1>
    39 000008B0 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    39 000008B9 6172616D657465720D- <1>
    39 000008C2 0A24                <1>
    40                              <1> 
    41 000008C4 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    41 000008CD 576564546875467269- <1>
    41 000008D6 536174              <1>
    42 000008D9 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    42 000008E2 206461746524        <1>
    43 000008E8 43757272656E742064- <1> curDate db  "Current date is $"
    43 000008F1 6174652069732024    <1>
    44 000008F9 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    44 00000902 657720646174652024  <1>
    45 0000090B 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    45 00000914 293A2024            <1>
    46 00000918 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    46 00000921 293A2024            <1>
    47 00000925 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    47 0000092E 293A2024            <1>
    48 00000932 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    48 0000093B 2074696D6524        <1>
    49 00000941 43757272656E742074- <1> curTime db  "Current time is $"
    49 0000094A 696D652069732024    <1>
    50 00000952 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    50 0000095B 65772074696D653A20- <1>
    50 00000964 24                  <1>
    51                              <1> 
    52 00000965 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    52 0000096E 7572652028592F4E29- <1>
    52 00000977 3F2024              <1>
    53                              <1> 
    54 0000097A 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    54 00000983 56657273696F6E2024  <1>
    55                              <1> 
    56 0000098C 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    56 00000995 6E2064726976652024  <1>
    57 0000099E 2069732024          <1> volOk   db " is $"
    58 000009A3 20686173206E6F206C- <1> volNo   db " has no label$"
    58 000009AC 6162656C24          <1>
    59                              <1> 
    60 000009B1 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    60 000009BA 69726563746F72790D- <1>
    60 000009C3 0A24                <1>
    61 000009C5 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    61 000009CE 206372656174652064- <1>
    61 000009D7 69726563746F72790D- <1>
    61 000009E0 0A24                <1>
    62 000009E2 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    62 000009EB 6174682C206E6F7420- <1>
    62 000009F4 6469726563746F7279- <1>
    62 000009FD 2C0D0A              <1>
    63 00000A00 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    63 00000A09 6F7279206E6F742065- <1>
    63 00000A12 6D7074790D0A24      <1>
    64 00000A19 204469726563746F72- <1> dirMain db " Directory of  $"
    64 00000A22 79206F66202024      <1>
    65 00000A29 4E6F20506174682024  <1> noPath  db "No Path $"
    66 00000A32 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    66 00000A3B 7269766520696E2073- <1>
    66 00000A44 656172636820706174- <1>
    66 00000A4D 680D0A24            <1>
    67 00000A51 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    67 00000A5A 65766963650D0A24    <1>
    68 00000A62 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    68 00000A6B 20666F756E640D0A24  <1>
    69 00000A74 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    69 00000A7D 726F720D0A24        <1>
    70 00000A83 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    70 00000A8C 6F74206265206E6573- <1>
    70 00000A95 7465640D0A24        <1>
    71 00000A9B 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    71 00000AA4 6174652066696C6520- <1>
    71 00000AAD 6572726F7220647572- <1>
    71 00000AB6 696E6720706970650D- <1>
    71 00000ABF 0A24                <1>
    72 00000AC1 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    72 00000ACA 2062696E6172792072- <1>
    72 00000AD3 656164732066726F6D- <1>
    72 00000ADC 206120646576696365- <1>
    72 00000AE5 0D0A24              <1>
    73 00000AE8 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    74 00000AEE 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    75 00000AF3 425245414B20697320- <1> breakIs db "BREAK is $"
    75 00000AFC 24                  <1>
    76 00000AFD 564552494659206973- <1> verifyIs    db "VERIFY is $"
    76 00000B06 2024                <1>
    77 00000B08 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    78 00000B11 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    78 00000B1A 617468206F72206669- <1>
    78 00000B23 6C65206E616D650D0A- <1>
    78 00000B2C 24                  <1>
    79 00000B2D 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    79 00000B36 756D626572206F6620- <1>
    79 00000B3F 706172616D65746572- <1>
    79 00000B48 730D0A24            <1>
    80 00000B4C 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    80 00000B55 74696E6720746F2064- <1>
    80 00000B5E 6576696365          <1>
    81 00000B63 08200800            <1> backSpace   db BSP," ",BSP,NUL
    82                              <1> 
    83 00000B67 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    83 00000B70 20202020202020546F- <1>
    83 00000B79 74616C207379737465- <1>
    83 00000B82 6D206D656D6F72793A- <1>
    83 00000B8B 2024                <1>
    84 00000B8D 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    84 00000B96 20202020202020204D- <1>
    84 00000B9F 656D6F727920757365- <1>
    84 00000BA8 6420627920444F533A- <1>
    84 00000BB1 2024                <1>
    85 00000BB3 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    85 00000BBC 656D6F727920757365- <1>
    85 00000BC5 64206279206170706C- <1>
    85 00000BCE 69636174696F6E733A- <1>
    85 00000BD7 2024                <1>
    86 00000BD9 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    86 00000BE2 656D6F727920726573- <1>
    86 00000BEB 657276656420627920- <1>
    86 00000BF4 68617264776172653A- <1>
    86 00000BFD 2024                <1>
    87 00000BFF 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    87 00000C08 202020202020202020- <1>
    87 00000C11 2020202020204D656D- <1>
    87 00000C1A 6F727920667265653A- <1>
    87 00000C23 2024                <1>
    88 00000C25 20627974657324      <1> memByte db " bytes$"
    89 00000C2C 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    89 00000C35 6F7420417373657274- <1>
    89 00000C3E 61696E20444F532045- <1>
    89 00000C47 6E74727920506F696E- <1>
    89 00000C50 7424                <1>
    90 00000C52 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    90 00000C5B 416C6C6F636174696F- <1>
    90 00000C64 6E204572726F7224    <1>
    91 00000C6C 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    91 00000C75 4572726F7224        <1>
    92 00000C7B 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    92 00000C84 68616C74656424      <1>
    93                              <1> 
    94 00000C8B 556E61626C6520746F- <1> touchErr db "Unable to create file",CR,LF,"$"
    94 00000C94 206372656174652066- <1>
    94 00000C9D 696C650D0A24        <1>
    95                              <1> 
    96                              <1> 
    97 00000CA3 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    98 00000CA7 2020202024          <1> fourSpc  db "    $"
    99 00000CAC 20202024            <1> threeSpc db "   $"
   100 00000CB0 202024              <1> twoSpc   db "  $"
   101                              <1> 
   102 00000CB3 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
   102 00000CBC 696679204F4E206F72- <1>
   102 00000CC5 204F46460D0A24      <1>
   103 00000CCC 504154483D          <1> pathEVar db "PATH="
   104 00000CD1 50524F4D50543D      <1> promptEVar  db "PROMPT="
    15                                  %include "./Utils/COMMAND/Source/cmdMain.asm"
    16                              <1> commandStart:
    17                              <1>     ;Resize Allocation, jump here with endpointer in rbx
    18                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
    19                              <1>     ; that the jump to safety won't be gobbled up when multitasking
    20 00000CD8 49F7D8              <1>     neg r8  ;Convert r8 to -r8
    21 00000CDB 4A8D5C0311          <1>     lea rbx, qword [rbx + r8 + 11h]    ;Get # of bytes for COMMAND.COM
    22 00000CE0 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
    23 00000CE3 B44A                <1>     mov ah, 4Ah ;Realloc
    24 00000CE5 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    25 00000CE8 CD41                <1>     int 41h
    26 00000CEA EB5A                <1>     jmp short commandMain
    27                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    28 00000CEC B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    29 00000CF1 CD41                <1>     int 41h
    30 00000CF3 66890513F3FFFF      <1>     mov word [returnCode], ax
    31                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    32 00000CFA 488D15F01A0000      <1>     lea rdx, critErrorHandler
    33 00000D01 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    34 00000D05 B844250000          <1>     mov eax, 2544h
    35 00000D0A CD41                <1>     int 41h
    36 00000D0C 488D156E1D0000      <1>     lea rdx, int43h
    37 00000D13 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    38 00000D17 B843250000          <1>     mov eax, 2543h
    39 00000D1C CD41                <1>     int 41h
    40 00000D1E 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    41 00000D25 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    42 00000D29 B842250000          <1>     mov eax, 2542h
    43 00000D2E CD41                <1>     int 41h
    44                              <1> ;Close all handles from 5->MAX
    45 00000D30 0FB70DF0F2FFFF      <1>     movzx ecx, word [numHdls]
    46 00000D37 BB05000000          <1>     mov ebx, 5
    47                              <1> .handleClose:
    48 00000D3C B43E                <1>     mov ah, 3Eh ;File close
    49 00000D3E CD41                <1>     int 41h
    50 00000D40 FFC3                <1>     inc ebx ;Goto next file
    51 00000D42 39CB                <1>     cmp ebx, ecx
    52 00000D44 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    53                              <1> commandMain:
    54                              <1> ;Setup Commandline
    55 00000D46 FA                  <1>     cli
    56 00000D47 488B25B7F2FFFF      <1>     mov rsp, qword [stackBottom]    ;Reset internal stack pointer pos
    57 00000D4E FB                  <1>     sti
    58 00000D4F FC                  <1>     cld ;Ensure stringops are done the right way
    59 00000D50 C605BFF3FFFF80      <1>     mov byte [inBuffer], 80h    ;Reset the buffer length
    60                              <1> .inputMain:
    61 00000D57 E849180000          <1>     call clearCommandLineState
    62 00000D5C E8D0140000          <1>     call printCRLF
    63 00000D61 E817180000          <1>     call printPrompt
    64                              <1> 
    65 00000D66 488D15A9F3FFFF      <1>     lea rdx, inBuffer
    66 00000D6D B80A0C0000          <1>     mov eax, 0C0Ah  ;Do Buffered input
    67 00000D72 CD41                <1>     int 41h
    68 00000D74 E8B8140000          <1>     call printCRLF  ;Note we have accepted input
    69                              <1> 
    70                              <1> ;First check we had something typed in of length greater than 1
    71                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    72 00000D79 803D97F3FFFF01      <1>     cmp byte [inBuffer + 1], 1  ;Check input length valid
    73 00000D80 742C                <1>     je .dfltErrExit
    74 00000D82 72D3                <1>     jb .inputMain
    75                              <1>     ;Copy over the input text
    76 00000D84 488D358BF3FFFF      <1>     lea rsi, inBuffer
    77 00000D8B 488D3D04F4FFFF      <1>     lea rdi, cmdBuffer
    78 00000D92 B980000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    79 00000D97 F3A4                <1>     rep movsb
    80 00000D99 31C0                <1>     xor eax, eax
    81 00000D9B 668905FDF2FFFF      <1>     mov word [cmdStartOff], ax  ;Clear start and end Off positions
    82 00000DA2 E814000000          <1>     call parseInput
    83 00000DA7 E8AD010000          <1>     call doCommandLine
    84 00000DAC EBA9                <1>     jmp short .inputMain
    85                              <1> .dfltErrExit:
    86 00000DAE 488D15AFF9FFFF      <1>     lea rdx, badCmd
    87 00000DB5 B409                <1>     mov ah, 09h
    88 00000DB7 CD41                <1>     int 41h
    89 00000DB9 EB9C                <1>     jmp short .inputMain
    90                              <1> 
    91                              <1> parseInput:
    92                              <1> ;EndOff is set up before entering this part
    93                              <1> ;Copies a nicely formatted version of the input command line
    94                              <1> ; without any redirections to psp.dta
    95 00000DBB 488D35D6F3FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
    96 00000DC2 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
    97 00000DC9 0FB61DD0F2FFFF      <1>     movzx ebx, byte [cmdEndOff] ;Get the old end offset
    98 00000DD0 4801DE              <1>     add rsi, rbx    ;Move rsi to the start of this new command
    99 00000DD3 E896170000          <1>     call skipSpaces ;Skip any preceeding spaces
   100 00000DD8 66AD                <1>     lodsw   ;Get the first two chars into ax
   101 00000DDA 668905D0F2FFFF      <1>     mov word [cmdDrvSpec], ax ;Store these chars as if they are the drvspec
   102 00000DE1 4881EE02000000      <1>     sub rsi, 2  ;Go back to the start of the command
   103 00000DE8 56                  <1>     push rsi
   104 00000DE9 57                  <1>     push rdi
   105 00000DEA 488D3D25F4FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   106 00000DF1 57                  <1>     push rdi
   107 00000DF2 E845030000          <1>     call copyCommandTailItemProgram
   108 00000DF7 5F                  <1>     pop rdi
   109 00000DF8 9C                  <1>     pushfq  ;Save the CF state
   110 00000DF9 E8F8160000          <1>     call strlen
   111 00000DFE FFC9                <1>     dec ecx ;Drop the terminating char from the count
   112 00000E00 58                  <1>     pop rax ;Get the CF state in al
   113 00000E01 5F                  <1>     pop rdi
   114 00000E02 5E                  <1>     pop rsi
   115 00000E03 F3A4                <1>     rep movsb   ;Now we copy the command into the psp command line
   116 00000E05 A801                <1>     test al, 1  ;Was CF set?
   117 00000E07 0F8586000000        <1>     jnz .exit   ;If an embedded CR was found in the filename, exit!
   118                              <1> .cmdLineProcess:
   119 00000E0D E85C170000          <1>     call skipSpaces ;Go to the next char in the input line
   120                              <1> .redirFound:
   121 00000E12 AC                  <1>     lodsb   ;Get first non-space char (setupRedir skips spaces before ret)
   122 00000E13 3C0D                <1>     cmp al, CR  ;If this was a CR, we stop processing
   123 00000E15 747C                <1>     je .exit
   124 00000E17 E8B3020000          <1>     call checkAndSetupRedir ;If not, check if we have a redir element
   125 00000E1C 7275                <1>     jc .exit    ;CF=CY only if pipe, which is equivalent to CR when processing
   126 00000E1E 74F2                <1>     jz .redirFound  ;If we had a < > or >>, proceed to check if next char CR
   127 00000E20 B020                <1>     mov al, " "
   128 00000E22 AA                  <1>     stosb   ;Store a space to make space for the command file parameter
   129 00000E23 48FFCE              <1>     dec rsi ;Move rsi back to the first char
   130 00000E26 F60588F2FFFFFF      <1>     test byte [arg1Flg], -1
   131 00000E2D 7521                <1>     jnz .arg2
   132                              <1> .arg1:
   133 00000E2F C6057FF2FFFFFF      <1>     mov byte [arg1Flg], -1
   134 00000E36 E833170000          <1>     call skipSpaces
   135 00000E3B 4889F0              <1>     mov rax, rsi
   136 00000E3E 488D1D51F3FFFF      <1>     lea rbx, cmdBuffer
   137 00000E45 4829D8              <1>     sub rax, rbx
   138 00000E48 880568F2FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   139 00000E4E EB2A                <1>     jmp short .argCommon
   140                              <1> .arg2:
   141 00000E50 F60561F2FFFFFF      <1>     test byte [arg2Flg], -1
   142 00000E57 7521                <1>     jnz .argCommon
   143 00000E59 C60558F2FFFFFF      <1>     mov byte [arg2Flg], -1
   144 00000E60 E809170000          <1>     call skipSpaces
   145 00000E65 4889F0              <1>     mov rax, rsi
   146 00000E68 488D1D27F3FFFF      <1>     lea rbx, cmdBuffer
   147 00000E6F 4829D8              <1>     sub rax, rbx
   148 00000E72 880541F2FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   149 00000E78 EB00                <1>     jmp short .argCommon
   150                              <1> .argCommon:
   151                              <1>     ;More than two arguments? Do nothing more than just copy it
   152                              <1>     ; over. If we encounter an embedded CR, exit there too
   153 00000E7A E8EF160000          <1>     call skipSpaces
   154 00000E7F 803E0D              <1>     cmp byte [rsi], CR  ;Are we at the end of the commandline?
   155 00000E82 740F                <1>     je .exit
   156                              <1>     ;If not, we copy it over
   157 00000E84 E8DD020000          <1>     call copyCommandTailItem    ;Stores a terminating null we dont want
   158 00000E89 488D7FFF            <1>     lea rdi, qword [rdi - 1]    ;Point back at the inserted terminating null
   159 00000E8D 0F837AFFFFFF        <1>     jnc .cmdLineProcess
   160                              <1> .exit:
   161 00000E93 488D1DFCF2FFFF      <1>     lea rbx, cmdBuffer
   162 00000E9A 48FFCE              <1>     dec rsi
   163 00000E9D 4829DE              <1>     sub rsi, rbx    ;Get the offset into the command line
   164 00000EA0 89F3                <1>     mov ebx, esi
   165 00000EA2 881DF8F1FFFF        <1>     mov byte [cmdEndOff], bl    ;Store the offset to the terminating char
   166 00000EA8 B00D                <1>     mov al, CR
   167 00000EAA AA                  <1>     stosb   ;Store the terminating CR in the psp command line
   168                              <1>     ;Now compute the command line length 
   169 00000EAB 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine] 
   170 00000EB2 B00D                <1>     mov al, CR
   171 00000EB4 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   172 00000EB6 FFC9                <1>     dec ecx ;rcx = -1
   173 00000EB8 F2AE                <1>     repne scasb
   174 00000EBA F7D1                <1>     not ecx
   175 00000EBC FEC9                <1>     dec cl  ;Dont include terminating CR
   176 00000EBE 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   177 00000EC5 880F                <1>     mov byte [rdi], cl
   178                              <1>     ;Before returning, we copy the command name to cmdName
   179 00000EC7 488D3D48F3FFFF      <1>     lea rdi, cmdPathSpec
   180 00000ECE 4889FB              <1>     mov rbx, rdi    ;Use rbx as the ptr to the first char in the commandspec
   181 00000ED1 30C0                <1>     xor al, al  ;Search for the terminating null
   182 00000ED3 B94F000000          <1>     mov ecx, fileSpecZL ;Max number of chars the length could be
   183 00000ED8 F2AE                <1>     repne scasb
   184 00000EDA 48FFCF              <1>     dec rdi ;Go to the last char in the command
   185 00000EDD 4889FE              <1>     mov rsi, rdi
   186 00000EE0 FD                  <1>     std ;Now we go backwards to where rsi = rbx OR byte [rsi] = pathSep
   187                              <1> .keepSearching:
   188 00000EE1 AC                  <1>     lodsb
   189 00000EE2 3A0543F1FFFF        <1>     cmp al, byte [pathSep]
   190 00000EE8 740B                <1>     je .cmdStartFnd
   191 00000EEA 4839DE              <1>     cmp rsi, rbx
   192 00000EED 75F2                <1>     jne .keepSearching
   193 00000EEF 48FFCE              <1>     dec rsi ;Go back two to go forwards again
   194 00000EF2 48FFCE              <1>     dec rsi
   195                              <1> .cmdStartFnd:
   196 00000EF5 48FFC6              <1>     inc rsi
   197 00000EF8 48FFC6              <1>     inc rsi ;Go past the pathsep
   198 00000EFB FC                  <1>     cld ;Go the sane way again
   199 00000EFC 488D3D7BF3FFFF      <1>     lea rdi, qword [cmdName + 1]    ;First byte is for the length of the name
   200 00000F03 57                  <1>     push rdi    ;Cleanse the field before usage (not strictly necessary)
   201 00000F04 B90E000000          <1>     mov ecx, cmdNameL
   202 00000F09 30C0                <1>     xor al, al
   203 00000F0B F3AA                <1>     rep stosb
   204 00000F0D 5F                  <1>     pop rdi
   205 00000F0E 31C9                <1>     xor ecx, ecx
   206 00000F10 56                  <1>     push rsi    ;Save the location of the start byte of the command name
   207                              <1> .cmdGetChar:
   208 00000F11 AC                  <1>     lodsb
   209 00000F12 84C0                <1>     test al, al ;Did we find the terminating null?
   210 00000F14 7411                <1>     jz .nameLenFnd
   211 00000F16 3C2E                <1>     cmp al, "." ;Extension sep also terminates
   212 00000F18 740D                <1>     je .nameLenFnd
   213 00000F1A 24DF                <1>     and al, 0DFh    ;Else uppercase the char
   214 00000F1C AA                  <1>     stosb   ;and store it
   215 00000F1D FFC1                <1>     inc ecx
   216 00000F1F 81F90B000000        <1>     cmp ecx, 11 ;Max command length is 11
   217 00000F25 72EA                <1>     jb .cmdGetChar
   218                              <1> .nameLenFnd:
   219 00000F27 880D50F3FFFF        <1>     mov byte [cmdName], cl  ;Store the name length now
   220                              <1>     ;Now finally, create a FCB filespec
   221 00000F2D 488D3D31F3FFFF      <1>     lea rdi, fcbCmdSpec
   222 00000F34 57                  <1>     push rdi
   223 00000F35 B90B000000          <1>     mov ecx, fcbNameL
   224 00000F3A B020                <1>     mov al, " " ;Fill with spaces
   225 00000F3C F3AA                <1>     rep stosb
   226 00000F3E 5F                  <1>     pop rdi
   227 00000F3F 5E                  <1>     pop rsi ;Get back the location of the start byte of the command name
   228 00000F40 E871160000          <1>     call asciiToFCB
   229 00000F45 488D3519F3FFFF      <1>     lea rsi, fcbCmdSpec
   230 00000F4C 488D3D1DF3FFFF      <1>     lea rdi, cmdSpec
   231 00000F53 E8B9160000          <1>     call FCBToAsciiz
   232                              <1>     return
    19                              <2> %%_ret:
    20 00000F58 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   233                              <1> 
   234                              <1> doCommandLine:
   235 00000F59 488D3538F2FFFF      <1>     lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
   236 00000F60 488D3D54F1FFFF      <1>     lea rdi, cmdFcb
   237 00000F67 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks
   238 00000F6C CD41                <1>     int 41h
   239 00000F6E 0FB71D3CF1FFFF      <1>     movzx ebx, word [cmdDrvSpec]    ;Get the drive specifier
   240 00000F75 80FF3A              <1>     cmp bh, ":"
   241 00000F78 752E                <1>     jne .noDriveSpecified
   242 00000F7A 88DA                <1>     mov dl, bl      ;Move the drive letter in dl
   243 00000F7C 80E2DF              <1>     and dl, 0DFh    ;Make the drive letter upper case
   244 00000F7F 80EA41              <1>     sub dl, "A"     ;And make it a 0 based drive letter
   245 00000F82 3CFF                <1>     cmp al, -1  ;Int 41h returns AL = -1 if bad drive specified
   246 00000F84 7415                <1>     je .badDrive
   247                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   248 00000F86 803DF0F2FFFF02      <1>     cmp byte [cmdName], 2
   249 00000F8D 7519                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   250 00000F8F B40E                <1>     mov ah, 0Eh ;Set drive to dl
   251 00000F91 CD41                <1>     int 41h 
   252 00000F93 B419                <1>     mov ah, 19h
   253 00000F95 CD41                <1>     int 41h     ;Get current drive
   254 00000F97 38D0                <1>     cmp al, dl  ;If the drive was set, all is well
   255                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00000F99 74(58)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   256                              <1> .badDrive:
   257 00000F9B 488D15D1F8FFFF      <1>     lea rdx, badDrv
   258 00000FA2 B409                <1>     mov ah, 09h
   259 00000FA4 CD41                <1>     int 41h
   260 00000FA6 F9                  <1>     stc
   261                              <1>     return
    19                              <2> %%_ret:
    20 00000FA7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   262                              <1> .noDriveSpecified:
   263                              <1> ;Now we set the two FCB's in the command line
   264 00000FA8 F60506F1FFFFFF      <1>     test byte [arg1Flg], -1
   265 00000FAF 744D                <1>     jz .fcbArgsDone
   266 00000FB1 0FB605FEF0FFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   267 00000FB8 488D35D7F1FFFF      <1>     lea rsi, cmdBuffer
   268 00000FBF 4801C6              <1>     add rsi, rax    ;Point to first argument
   269 00000FC2 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   270 00000FC6 B801290000          <1>     mov eax, 2901h
   271 00000FCB CD41                <1>     int 41h
   272 00000FCD 8805E4F0FFFF        <1>     mov byte [arg1FCBret], al
   273 00000FD3 F605DEF0FFFFFF      <1>     test byte [arg2Flg], -1
   274 00000FDA 7422                <1>     jz .fcbArgsDone
   275 00000FDC 0FB605D6F0FFFF      <1>     movzx eax, byte [arg2Off]
   276 00000FE3 488D35ACF1FFFF      <1>     lea rsi, cmdBuffer
   277 00000FEA 4801C6              <1>     add rsi, rax    ;Point to first argument
   278 00000FED 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   279 00000FF1 B801290000          <1>     mov eax, 2901h
   280 00000FF6 CD41                <1>     int 41h
   281 00000FF8 8805BCF0FFFF        <1>     mov byte [arg2FCBret], al
   282                              <1> .fcbArgsDone:
   283 00000FFE 488D3591F1FFFF      <1>     lea rsi, cmdBuffer
   284 00001005 488D1D71F2FFFF      <1>     lea rbx, cmdName
   285 0000100C B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   286 00001011 BAFFFF0000          <1>     mov edx, 0FFFFh
   287 00001016 B5FF                <1>     mov ch, -1
   288 00001018 CD4F                <1>     int 4Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   289                              <1>             ;        al = 0  if the command should be executed as usual
   290 0000101A B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   291 0000101F BAFFFF0000          <1>     mov edx, 0FFFFh
   292 00001024 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   293 00001026 CD4F                <1>     int 4Fh
   294 00001028 741D                <1>     jz .executeInternal
   295                              <1>     ;Here we execute externally and return to the prompt
   296                              <1>     ; as if it was an internal execution
   297 0000102A 488D35E5F0FFFF      <1>     lea rsi, inBuffer ;Point to this built buffer
   298 00001031 488D1D83F0FFFF      <1>     lea rbx, cmdFcb
   299 00001038 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   300 0000103D BAFFFF0000          <1>     mov edx, 0FFFFh
   301 00001042 B5FF                <1>     mov ch, -1
   302 00001044 CD4F                <1>     int 4Fh 
   303                              <1>     return
    19                              <2> %%_ret:
    20 00001046 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   304                              <1> .executeInternal:
   305                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   306                              <1> ;rsi points after the command terminator in the command tail
   307 00001047 488D1D07F6FFFF      <1>     lea rbx, functionTable
   308                              <1> .nextEntry:
   309 0000104E 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   310 00001051 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   311 00001054 0F848E100000        <1>     je launchChild      ;If so, check externally now
   312 0000105A 380D1DF2FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   313 00001060 7529                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   314                              <1>     ;Here they have the same length so lets see if the name is the same
   315 00001062 56                  <1>     push rsi
   316                              <1>     ;ecx has the length to compare
   317 00001063 51                  <1>     push rcx
   318 00001064 488D7301            <1>     lea rsi, qword [rbx + 1]
   319 00001068 488D3D0FF2FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   320 0000106F F3A6                <1>     rep cmpsb   ;Check the strings are equal
   321 00001071 59                  <1>     pop rcx
   322 00001072 5E                  <1>     pop rsi
   323 00001073 7516                <1>     jne .gotoNextEntry
   324                              <1>     ;Here it was found both strings are equal
   325 00001075 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   326 0000107A 480FB71F            <1>     movzx rbx, word [rdi]
   327 0000107E 488D3D7BEFFFFF      <1>     lea rdi, startLbl
   328 00001085 4801FB              <1>     add rbx, rdi
   329 00001088 FFD3                <1>     call rbx    ;Call this function...
   330                              <1>     return  ;... and return
    19                              <2> %%_ret:
    20 0000108A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   331                              <1> .gotoNextEntry:
   332 0000108B 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   333 00001092 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   334 00001095 EBB7                <1>     jmp short .nextEntry
   335                              <1> .dfltErrExit:
   336 00001097 488D15C6F6FFFF      <1>     lea rdx, badCmd
   337 0000109E B409                <1>     mov ah, 09h
   338 000010A0 CD41                <1>     int 41h
   339                              <1>     return
    19                              <2> %%_ret:
    20 000010A2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   340                              <1> 
   341                              <1> 
   342                              <1> checkExtensionExec:
   343                              <1> ;Checks the extension field of cmdFcb is .COM, .EXE, .BAT in that order
   344                              <1> ;Returns: ZF=ZE if executable. ZF=NZ if not executable.
   345                              <1> ;         If ZF=ZE and CF=CY => Batch file
   346 000010A3 8B051BF0FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   347 000010A9 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   348 000010AE 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   349 000010B3 25DFDFDFFF          <1>     and eax, 0FFDFDFDFh ;Uppercase the three letters
   350 000010B8 3D434F4D20          <1>     cmp eax, "COM "
   351                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000010BD 74(A2)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   352 000010BF 3D45584520          <1>     cmp eax, "EXE "
   353                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000010C4 74(A2)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   354 000010C6 3D42415420          <1>     cmp eax, "BAT "
   355                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000010CB 75(A2)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   356 000010CD F9                  <1>     stc
   357                              <1>     return
    19                              <2> %%_ret:
    20 000010CE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   358                              <1> 
   359                              <1> checkAndSetupRedir:
   360                              <1> ;Checks and sets up redir as appropriate
   361                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   362                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   363                              <1> ;Output: ZF=NZ => No redir
   364                              <1> ;        ZF=ZY => Redir
   365                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   366                              <1> ;CF=CY if pipe set or an embedded CR found
   367 000010CF 57                  <1>     push rdi
   368 000010D0 3C3C                <1>     cmp al, "<"
   369 000010D2 740B                <1>     je .inputRedir
   370 000010D4 3C3E                <1>     cmp al, ">"
   371 000010D6 742A                <1>     je .outputRedir
   372 000010D8 3C7C                <1>     cmp al, "|"
   373 000010DA 7454                <1>     je .pipeSetup
   374 000010DC F8                  <1>     clc
   375                              <1> .redirExit:
   376 000010DD 5F                  <1>     pop rdi
   377                              <1>     return
    19                              <2> %%_ret:
    20 000010DE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   378                              <1> .inputRedir:
   379 000010DF C605CDEFFFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   380 000010E6 488D3D9EF1FFFF      <1>     lea rdi, rdrInFilespec
   381 000010ED E87C140000          <1>     call skipSpaces ;Skip spaces between < and the filespec
   382 000010F2 E86F000000          <1>     call copyCommandTailItem
   383 000010F7 72E4                <1>     jc .redirExit
   384 000010F9 E870140000          <1>     call skipSpaces
   385 000010FE 30C0                <1>     xor al, al
   386 00001100 EBDB                <1>     jmp short .redirExit
   387                              <1> .outputRedir:
   388 00001102 C605ABEFFFFF01      <1>     mov byte [redirOut], 1
   389 00001109 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   390 0000110C 7506                <1>     jne .notDouble
   391 0000110E FE05A0EFFFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   392                              <1> .notDouble:
   393 00001114 488D3DBFF1FFFF      <1>     lea rdi, rdrOutFilespec
   394 0000111B E84E140000          <1>     call skipSpaces
   395 00001120 E841000000          <1>     call copyCommandTailItem
   396 00001125 72B6                <1>     jc .redirExit
   397 00001127 E842140000          <1>     call skipSpaces
   398 0000112C 30C0                <1>     xor al, al
   399 0000112E EBAD                <1>     jmp short .redirExit
   400                              <1> .pipeSetup:
   401 00001130 C6056AEFFFFFFF      <1>     mov byte [pipeFlag], -1
   402 00001137 30C0                <1>     xor al, al
   403 00001139 F9                  <1>     stc
   404 0000113A 5F                  <1>     pop rdi
   405                              <1>     return
    19                              <2> %%_ret:
    20 0000113B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   406                              <1> 
   407                              <1> copyCommandTailItemProgram:
   408                              <1> ;Copies a program name from the command tail until a terminator is found.
   409                              <1> ;Stores a terminating null in the destination
   410                              <1> ;Input: rsi = Start of the item to copy
   411                              <1> ;       rdi = Location for copy
   412                              <1> ;Output: Sentence copied with a null terminator inserted.
   413                              <1> ; If CF=CY, embedded CR encountered
   414 0000113C AC                  <1>     lodsb
   415 0000113D 3C0D                <1>     cmp al, CR
   416 0000113F 741A                <1>     je .endOfInput
   417 00001141 E8F4130000          <1>     call isALterminator
   418 00001146 741A                <1>     jz .exit
   419 00001148 3A05DDEEFFFF        <1>     cmp al, byte [pathSep]
   420 0000114E 7412                <1>     je .exit
   421 00001150 3A05D6EEFFFF        <1>     cmp al, byte [switchChar]
   422 00001156 740A                <1>     je .exit
   423 00001158 AA                  <1>     stosb
   424 00001159 EBE1                <1>     jmp short copyCommandTailItemProgram
   425                              <1> .endOfInput:
   426 0000115B E802000000          <1>     call .exit
   427 00001160 F9                  <1>     stc 
   428                              <1>     return
    19                              <2> %%_ret:
    20 00001161 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   429                              <1> .exit:
   430 00001162 30C0                <1>     xor al, al
   431 00001164 AA                  <1>     stosb
   432                              <1>     return
    19                              <2> %%_ret:
    20 00001165 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   433                              <1> 
   434                              <1> copyCommandTailItem:
   435                              <1> ;Copies a sentence from the command tail until a terminator is found.
   436                              <1> ;Stores a terminating null in the destination
   437                              <1> ;Input: rsi = Start of the item to copy
   438                              <1> ;       rdi = Location for copy
   439                              <1> ;Output: Sentence copied with a null terminator inserted.
   440                              <1> ; If CF=CY, embedded CR encountered
   441 00001166 AC                  <1>     lodsb
   442 00001167 3C0D                <1>     cmp al, CR
   443 00001169 743A                <1>     je .endOfInput
   444 0000116B E8CA130000          <1>     call isALterminator
   445 00001170 743A                <1>     jz .exit
   446 00001172 3A05B3EEFFFF        <1>     cmp al, byte [pathSep]
   447 00001178 740B                <1>     je .pathSep
   448 0000117A 3A05ACEEFFFF        <1>     cmp al, byte [switchChar]
   449 00001180 742A                <1>     je .exit
   450 00001182 AA                  <1>     stosb
   451 00001183 EBE1                <1>     jmp short copyCommandTailItem
   452                              <1> .pathSep:
   453                              <1> ;We look ahead, if the last char is a pathsep, we ignore it
   454 00001185 AC                  <1>     lodsb   ;Get the next char, increment rsi by one
   455 00001186 E8AF130000          <1>     call isALterminator
   456 0000118B 741F                <1>     jz .exit
   457 0000118D 3C0D                <1>     cmp al, CR
   458 0000118F 7414                <1>     je .endOfInput
   459 00001191 3A0595EEFFFF        <1>     cmp al, byte [switchChar]
   460 00001197 7413                <1>     je .exit
   461 00001199 8A058CEEFFFF        <1>     mov al, byte [pathSep]
   462 0000119F AA                  <1>     stosb   ;Else store the pathsep
   463 000011A0 48FFCE              <1>     dec rsi ;Move rsi back a piece
   464 000011A3 EBC1                <1>     jmp short copyCommandTailItem
   465                              <1> .endOfInput:
   466 000011A5 E802000000          <1>     call .exit
   467 000011AA F9                  <1>     stc 
   468                              <1>     return
    19                              <2> %%_ret:
    20 000011AB C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   469                              <1> .exit:
   470 000011AC 30C0                <1>     xor al, al
   471 000011AE AA                  <1>     stosb
   472                              <1>     return
    19                              <2> %%_ret:
    20 000011AF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   473                              <1> 
   474                              <1> 
   475                              <1> int4Eh:   ;Interrupt interface for parsing and executing command lines
   476                              <1> ;Input: rsi points to the count byte of a command line
   477 000011B0 4150                <1>     push r8
   478 000011B2 4151                <1>     push r9
   479 000011B4 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   480 000011B6 CD41                <1>     int 41h
   481 000011B8 52                  <1>     push rdx    ;Save on the stack
   482 000011B9 488D1D40EDFFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   483 000011C0 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   484 000011C2 CD41                <1>     int 41h
   485 000011C4 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   486 000011C7 4989D9              <1>     mov r9, rbx
   487 000011CA 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   488 000011D1 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   489 000011D6 F348A5              <1>     rep movsq   ;Copy command line over
   490                              <1>     ;call doCommandLine
   491 000011D9 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   492 000011DA B450                <1>     mov ah, 50h ;Set Current PSP
   493 000011DC CD41                <1>     int 41h
   494 000011DE 4159                <1>     pop r9
   495 000011E0 4158                <1>     pop r8
   496 000011E2 48CF                <1>     iretq
    16                                  %include "./Utils/COMMAND/Source/cmdFunc.asm"
    17                              <1> ;Note! Each function must setup the DTA to use for itself.
    18                              <1> ;There is no requirement to preserve the DTA across a call.
    19                              <1> ;Only the Int 4Eh entry point will preserve the callers DTA.
    20                              <1> 
    21                              <1> ;Common Error Messages, jumped to to return from
    22                              <1> noSelfCopyError:
    23 000011E4 488D1507F6FFFF      <1>     lea rdx, noSelfCopy
    24 000011EB EB34                <1>     jmp short badCmn
    25                              <1> badParamError:
    26 000011ED 488D15BCF6FFFF      <1>     lea rdx, badParm
    27 000011F4 EB2B                <1>     jmp short badCmn
    28                              <1> badDriveError:
    29 000011F6 488D1576F6FFFF      <1>     lea rdx, badDrv
    30 000011FD EB22                <1>     jmp short badCmn
    31                              <1> badArgError:
    32 000011FF 488D1527F9FFFF      <1>     lea rdx, badArgs
    33 00001206 EB19                <1>     jmp short badCmn
    34                              <1> badFileError:
    35 00001208 488D1502F9FFFF      <1>     lea rdx, badSpec
    36 0000120F EB10                <1>     jmp short badCmn
    37                              <1> badDupFnf:
    38                              <1> ;Hybrid error message
    39 00001211 488D1567F5FFFF      <1>     lea rdx, dupName
    40 00001218 EB07                <1>     jmp short badCmn
    41                              <1> badDirError:
    42 0000121A 488D1590F7FFFF      <1>     lea rdx, badDir
    43                              <1> badCmn:
    44 00001221 B800090000          <1>     mov eax, 0900h
    45 00001226 CD41                <1>     int 41h
    46 00001228 F9                  <1>     stc ;Return with CY => Error occured
    47                              <1>     return
    19                              <2> %%_ret:
    20 00001229 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    48                              <1> 
    49                              <1> dir:
    50 0000122A C60578F1FFFF00      <1>     mov byte [dirPrnType], 0    ;Clear DIR flags
    51 00001231 C60572F1FFFF00      <1>     mov byte [dirLineCtr], 0
    52 00001238 C6056CF1FFFF00      <1>     mov byte [dirFileCtr], 0
    53 0000123F C605E7F1FFFF00      <1>     mov byte [dirPathArg], 0    ;Null terminate the start of the buffer
    54 00001246 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    54 0000124F 3F                  <1>
    55 00001250 488D3D56F2FFFF      <1>     lea rdi, dirSrchPat ;Start also by initialising the search pattern
    56 00001257 48AB                <1>     stosq
    57 00001259 48FFC7              <1>     inc rdi ;Go past dot
    58 0000125C 668907              <1>     mov word [rdi], ax
    59 0000125F 884702              <1>     mov byte [rdi + 2], al
    60                              <1>     ;Start by scanning for the switches
    61 00001262 488D3D2EEFFFFF      <1>     lea rdi, cmdBuffer + 1  ;Goto command line input chars count
    62 00001269 0FB60F              <1>     movzx ecx, byte [rdi]   ;Get number of chars typed
    63 0000126C 48FFC7              <1>     inc rdi ;Goto first char typed in
    64 0000126F 4889FE              <1>     mov rsi, rdi    ;Use rsi as start of buffer counter
    65 00001272 8A05B4EDFFFF        <1>     mov al, byte [switchChar]   ;Scan for switchchars
    66                              <1> .switchScan:
    67 00001278 F2AE                <1>     repne scasb ;Scan for a switchchar
    68 0000127A 67E322              <1>     jecxz .switchScanDone
    69 0000127D 8A07                <1>     mov al, byte [rdi]  ;Get the byte pointed to by rdi
    70 0000127F 24DF                <1>     and al, 0DFh    ;UC it
    71 00001281 3C57                <1>     cmp al, "W" ;Wide print mode?
    72 00001283 7509                <1>     jne .notWideSw
    73 00001285 800D1DF1FFFF01      <1>     or byte [dirPrnType], 1 ;Set the correct bit
    74 0000128C EBEA                <1>     jmp short .switchScan
    75                              <1> .notWideSw:
    76 0000128E 3C50                <1>     cmp al, "P" ;Pause mode?
    77 00001290 0F8557FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    78 00001296 800D0CF1FFFF02      <1>     or byte [dirPrnType], 2 ;Set correct bit
    79 0000129D EBD9                <1>     jmp short .switchScan
    80                              <1> .switchScanDone:
    81                              <1> ;If no args, only switches, we search CWD
    82                              <1> ;If one arg, search that 
    83                              <1> ;If more than one, fail
    84 0000129F 488D35F2EEFFFF      <1>     lea rsi, cmdBuffer + 2
    85 000012A6 E8C3120000          <1>     call skipSpaces ;Skip leading spaces
    86 000012AB 4881C603000000      <1>     add rsi, 3  ;Go past the DIR (always three chars)
    87                              <1> .loop:
    88 000012B2 E8B7120000          <1>     call skipSpaces ;Skip spaces after
    89 000012B7 AC                  <1>     lodsb   ;Get first non space char
    90 000012B8 E8A0120000          <1>     call isALEndOfCommand   ;If this is the end char CR or "|", exit
    91 000012BD 7442                <1>     jz .eocNoNull
    92 000012BF 3A0567EDFFFF        <1>     cmp al, byte [switchChar]  ;Is al a switch char?
    93 000012C5 7509                <1>     jne .notSwitch
    94                              <1>     ;Now we skip the switch if it was a switch
    95 000012C7 E839120000          <1>     call findTerminatorOrEOC    ;Go past the switch
    96 000012CC 7233                <1>     jc .eocNoNull  ;If we reach the EOC, exit,
    97 000012CE EBE2                <1>     jmp short .loop
    98                              <1> .notSwitch:
    99                              <1>     ;If not a switch, should be a path. Copy to buffer and keep searching
   100 000012D0 803D56F1FFFF00      <1>     cmp byte [dirPathArg], 0    ;If a second path provided, error
   101 000012D7 0F8522FFFFFF        <1>     jne badArgError
   102 000012DD 488D3D49F1FFFF      <1>     lea rdi, dirPathArg ;Store the path to search here AS WRITTEN BY USER
   103 000012E4 48FFCE              <1>     dec rsi ;Go back to the start of the string
   104                              <1> .nameCopy:
   105 000012E7 AC                  <1>     lodsb
   106 000012E8 E870120000          <1>     call isALEndOfCommand
   107 000012ED 740F                <1>     jz .eocReached
   108 000012EF E846120000          <1>     call isALterminator
   109 000012F4 7403                <1>     jz .terminateCopy
   110 000012F6 AA                  <1>     stosb
   111 000012F7 EBEE                <1>     jmp short .nameCopy
   112                              <1> .terminateCopy:
   113 000012F9 31C0                <1>     xor eax, eax
   114 000012FB AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   115 000012FC EBB4                <1>     jmp short .loop ;Now search if another 
   116                              <1> .eocReached:
   117 000012FE 31C0                <1>     xor eax, eax
   118 00001300 AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   119                              <1> .eocNoNull:
   120 00001301 803D25F1FFFF00      <1>     cmp byte [dirPathArg], 0    ;If no path provided, use CWD for current drive
   121 00001308 7434                <1>     je .currentDrv
   122                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   123 0000130A 488D351CF1FFFF      <1>     lea rsi, dirPathArg
   124 00001311 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   125 00001315 7527                <1>     jne .currentDrv
   126                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   127 00001317 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   128 0000131C 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   129 00001320 B801290000          <1>     mov eax, 2901h   ;Parse filename
   130 00001325 CD41                <1>     int 41h
   131 00001327 3CFF                <1>     cmp al, -1
   132 00001329 0F84C7FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   133                              <1>     ;Else the drive in the fcb is valid
   134 0000132F 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   135 00001334 FEC8                <1>     dec al  ;Convert to 0 based drive number
   136 00001336 880570F0FFFF        <1>     mov byte [dirDrv], al
   137 0000133C EB0B                <1>     jmp short .dirPrintVol
   138                              <1> .currentDrv:
   139 0000133E E8AE110000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   140 00001343 880563F0FFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   141                              <1> .dirPrintVol:
   142 00001349 0FB6055CF0FFFF      <1>     movzx eax, byte [dirDrv] 
   143 00001350 E8800A0000          <1>     call volume.dirEP
   144 00001355 803DD1F0FFFF00      <1>     cmp byte [dirPathArg], 0    ;Null path here, 
   145 0000135C 7409                <1>     je .printCWD
   146 0000135E 803DCBF0FFFF00      <1>     cmp byte [dirPathArg + 3], 0    ;Was this X:,0?
   147 00001365 7400                <1>     je .printCWD
   148                              <1>     ;Here we have a path
   149                              <1>     ;Temp measure, we just fall through ignoring the path provided
   150                              <1> .printCWD:
   151 00001367 8A153FF0FFFF        <1>     mov dl, byte [dirDrv]
   152 0000136D 88D0                <1>     mov al, dl
   153 0000136F 0441                <1>     add al, "A"
   154 00001371 B43A                <1>     mov ah, ":"
   155 00001373 668905AFEFFFFF      <1>     mov word [searchSpec], ax
   156 0000137A 8A05ABECFFFF        <1>     mov al, byte [pathSep]
   157 00001380 8805A5EFFFFF        <1>     mov byte [searchSpec + 2], al
   158 00001386 488D359FEFFFFF      <1>     lea rsi, searchSpec + 3  ;Make space for a X:"\"
   159 0000138D B447                <1>     mov ah, 47h ;Get Current Working Directory
   160 0000138F FEC2                <1>     inc dl  ;Convert to 1 based number
   161 00001391 CD41                <1>     int 41h
   162 00001393 488D3D8FEFFFFF      <1>     lea rdi, searchSpec
   163 0000139A E857110000          <1>     call strlen
   164 0000139F FFC9                <1>     dec ecx
   165 000013A1 C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   166 000013A5 488D156DF6FFFF      <1>     lea rdx, dirMain
   167 000013AC B409                <1>     mov ah, 09h
   168 000013AE CD41                <1>     int 41h
   169 000013B0 4889FA              <1>     mov rdx, rdi    ;Print the current directory we are working on
   170 000013B3 B409                <1>     mov ah, 09h
   171 000013B5 CD41                <1>     int 41h
   172 000013B7 488D154CF3FFFF      <1>     lea rdx, crlf2
   173 000013BE B409                <1>     mov ah, 09h
   174 000013C0 CD41                <1>     int 41h
   175 000013C2 E801000000          <1>     call .searchForFile
   176                              <1>     return
    19                              <2> %%_ret:
    20 000013C7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   177                              <1>     ;If we get no path spec or just a X: path spec then we 
   178                              <1>     ; search the current working directory for that pathspec
   179                              <1>     ;If we get an actual pathspec, we first save the CWD for that drive
   180                              <1>     ; and then we try to make the pathspec the CWD. 
   181                              <1>     ;   If it works, we then search *.* in that folder and return the og CWD.
   182                              <1>     ;   If it fails, we then search one level up, for the search pattern
   183                              <1>     ;    that we compute.
   184                              <1> 
   185                              <1>     
   186                              <1>     ;Now we need to print the path to the folder we will be searching in
   187                              <1> .searchForFile:
   188                              <1>     ;Now we search for the files
   189                              <1>     ;RCX must have the number of chars to the end of the pathspec
   190 000013C8 488D3D5AEFFFFF      <1>     lea rdi, searchSpec
   191 000013CF 8A0556ECFFFF        <1>     mov al, byte [pathSep]
   192 000013D5 38440FFF            <1>     cmp byte [rdi + rcx - 1], al
   193 000013D9 7405                <1>     je .noAddSlash  ;Deals with special case of root dir
   194 000013DB 88040F              <1>     mov byte [rdi + rcx], al
   195 000013DE FFC1                <1>     inc ecx
   196                              <1> .noAddSlash:
   197 000013E0 488D3C0F            <1>     lea rdi, qword [rdi + rcx]
   198 000013E4 488D35C2F0FFFF      <1>     lea rsi, dirSrchPat
   199 000013EB 4889FA              <1>     mov rdx, rdi    ;Ptr to search for in rdx
   200 000013EE 48A5                <1>     movsq
   201 000013F0 A5                  <1>     movsd
   202 000013F1 30C0                <1>     xor al, al
   203 000013F3 AA                  <1>     stosb   ;Store the terminating null
   204 000013F4 B911000000          <1>     mov ecx, dirReadOnly | dirDirectory
   205 000013F9 B44E                <1>     mov ah, 4Eh ;Find first
   206 000013FB CD41                <1>     int 41h
   207 000013FD 720B                <1>     jc .dirNoMoreFiles
   208                              <1> .findNext:
   209 000013FF E878000000          <1>     call .dirPrintFileData  ;Print the file information
   210 00001404 B44F                <1>     mov ah, 4Fh
   211 00001406 CD41                <1>     int 41h
   212 00001408 73F5                <1>     jnc .findNext 
   213                              <1> .dirNoMoreFiles:
   214 0000140A F60598EFFFFF01      <1>     test byte [dirPrnType], 1
   215 00001411 740B                <1>     jz .dirNoEndNewLine
   216 00001413 488D15EDF2FFFF      <1>     lea rdx, crlf   ;Only need this for /W
   217 0000141A B409                <1>     mov ah, 09h
   218 0000141C CD41                <1>     int 41h
   219                              <1> .dirNoEndNewLine:
   220                              <1>     ;Now we print the number of files and the number of bytes on the disk
   221 0000141E 488D1582F8FFFF      <1>     lea rdx, fourSpc
   222 00001425 B409                <1>     mov ah, 09h
   223 00001427 CD41                <1>     int 41h
   224 00001429 B409                <1>     mov ah, 09h ;Print four Spaces twice
   225 0000142B CD41                <1>     int 41h
   226 0000142D 0FB60577EFFFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   227 00001434 E8B6120000          <1>     call printDecimalWord
   228 00001439 488D1512F4FFFF      <1>     lea rdx, dirOk
   229 00001440 B409                <1>     mov ah, 09h
   230 00001442 CD41                <1>     int 41h
   231 00001444 488D1561F8FFFF      <1>     lea rdx, threeSpc
   232 0000144B B409                <1>     mov ah, 09h
   233 0000144D CD41                <1>     int 41h
   234 0000144F B800360000          <1>     mov eax, 3600h ;Get disk info
   235 00001454 8A1552EFFFFF        <1>     mov dl, byte [dirDrv]
   236 0000145A FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   237 0000145C CD41                <1>     int 41h ;Get disk free space info
   238 0000145E 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   239 00001461 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   240 00001464 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   241 00001466 F7E1                <1>     mul ecx ;Get bytes per cluster
   242 00001468 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   243                              <1>     ;rax now has the number of free bytes on the disk
   244 0000146B E87F120000          <1>     call printDecimalWord
   245 00001470 488D15E5F3FFFF      <1>     lea rdx, bytesOk
   246 00001477 B409                <1>     mov ah, 09h
   247 00001479 CD41                <1>     int 41h
   248                              <1>     return
    19                              <2> %%_ret:
    20 0000147B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   249                              <1> 
   250                              <1> .dirPrintFileData:
   251                              <1> ;Use fcbCmdSpec to build the file name with space
   252                              <1> ;Start by print the name (same for both cases)
   253                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   254 0000147C F6055DECFFFF06      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles
   255                              <1>     retnz   ;Simply return if either bit is set
    51                              <2> cret nz
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00001483 75(7B)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   256 00001485 488D355DECFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   257 0000148C 488D3DD2EDFFFF      <1>     lea rdi, fcbCmdSpec
   258 00001493 E82F110000          <1>     call asciiFilenameToFCB
   259 00001498 488D15C6EDFFFF      <1>     lea rdx, fcbCmdSpec
   260 0000149F B908000000          <1>     mov ecx, 8  ;Print 8 chars
   261 000014A4 BB01000000          <1>     mov ebx, 1  ;STDOUT
   262 000014A9 B440                <1>     mov ah, 40h ;Write handle
   263 000014AB CD41                <1>     int 41h
   264 000014AD 52                  <1>     push rdx
   265 000014AE B220                <1>     mov dl, " "
   266 000014B0 B402                <1>     mov ah, 02h ;Print char
   267 000014B2 CD41                <1>     int 41h
   268 000014B4 5A                  <1>     pop rdx
   269 000014B5 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   270 000014BC B903000000          <1>     mov ecx, 3  ;Print three chars
   271 000014C1 BB01000000          <1>     mov ebx, 1  ;STDOUT
   272 000014C6 B440                <1>     mov ah, 40h ;Write handle
   273 000014C8 CD41                <1>     int 41h
   274 000014CA F605D8EEFFFF01      <1>     test byte [dirPrnType], 1
   275 000014D1 0F85A8000000        <1>     jnz .widePrint
   276                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   277                              <1>     ;Now check if a DIR
   278 000014D7 F60502ECFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   279 000014DE 7418                <1>     jz .dirPrintNotDir
   280 000014E0 488D1583F3FFFF      <1>     lea rdx, dirLbl
   281 000014E7 B409                <1>     mov ah, 09h
   282 000014E9 CD41                <1>     int 41h
   283 000014EB 488D15BAF7FFFF      <1>     lea rdx, threeSpc
   284 000014F2 B409                <1>     mov ah, 09h
   285 000014F4 CD41                <1>     int 41h
   286 000014F6 EB4F                <1>     jmp short .dirPrintFileDT
   287                              <1> .dirPrintNotDir:
   288                              <1> ;Here we print the file size
   289 000014F8 B220                <1>     mov dl, " "
   290 000014FA B402                <1>     mov ah, 02h
   291 000014FC CD41                <1>     int 41h
   292 000014FE 8B05E1EBFFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   293 00001504 E857120000          <1>     call getDecimalWord
   294 00001509 4889CB              <1>     mov rbx, rcx
   295 0000150C 51                  <1>     push rcx
   296 0000150D 480FCB              <1>     bswap rbx
   297 00001510 B908000000          <1>     mov ecx, 8
   298                              <1> .dirPrintFileSizePrep:
   299 00001515 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   300 00001517 7514                <1>     jne .dirPrintFileSize
   301 00001519 B402                <1>     mov ah, 02h
   302 0000151B B220                <1>     mov dl, " "
   303 0000151D CD41                <1>     int 41h
   304 0000151F 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   305 00001523 FFC9                <1>     dec ecx
   306 00001525 81F901000000        <1>     cmp ecx, 1
   307 0000152B 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   308                              <1> .dirPrintFileSize:
   309 0000152D 5B                  <1>     pop rbx
   310                              <1> .dirPrintFileSizeLoop:
   311 0000152E 88DA                <1>     mov dl, bl
   312 00001530 B402                <1>     mov ah, 02h
   313 00001532 CD41                <1>     int 41h
   314 00001534 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   315 00001538 FFC9                <1>     dec ecx
   316 0000153A 75F2                <1>     jnz .dirPrintFileSizeLoop
   317 0000153C 488D156DF7FFFF      <1>     lea rdx, twoSpc
   318 00001543 B409                <1>     mov ah, 09h
   319 00001545 CD41                <1>     int 41h
   320                              <1> .dirPrintFileDT:
   321 00001547 B220                <1>     mov dl, " "
   322 00001549 B402                <1>     mov ah, 02h
   323 0000154B CD41                <1>     int 41h
   324 0000154D 0FB7058FEBFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   325 00001554 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   326 00001556 E8EC0C0000          <1>     call printDate
   327 0000155B 488D154EF7FFFF      <1>     lea rdx, twoSpc
   328 00001562 B409                <1>     mov ah, 09h
   329 00001564 CD41                <1>     int 41h
   330 00001566 0FB70574EBFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   331 0000156D E8F70D0000          <1>     call printTime
   332 00001572 488D158EF1FFFF      <1>     lea rdx, crlf
   333 00001579 B409                <1>     mov ah, 09h
   334 0000157B CD41                <1>     int 41h
   335 0000157D EB0B                <1>     jmp short .dirPrintNameExit
   336                              <1> .widePrint:
   337                              <1> ;If /W, print name space ext space space space space
   338 0000157F 488D1521F7FFFF      <1>     lea rdx, fourSpc
   339 00001586 B409                <1>     mov ah, 09h ;Print string
   340 00001588 CD41                <1>     int 41h
   341                              <1> .dirPrintNameExit:
   342 0000158A FE051BEEFFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   343 00001590 FE0514EEFFFF        <1>     inc byte [dirLineCtr]
   344 00001596 803D0DEEFFFF17      <1>     cmp byte [dirLineCtr], 23
   345                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 0000159D 7401                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 0000159F C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   346 000015A0 488D15EAF2FFFF      <1>     lea rdx, pauseMes
   347 000015A7 B409                <1>     mov ah, 09h
   348 000015A9 CD41                <1>     int 41h
   349 000015AB B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   350 000015AD CD41                <1>     int 41h
   351 000015AF C605F4EDFFFF00      <1>     mov byte [dirLineCtr], 0
   352 000015B6 488D154AF1FFFF      <1>     lea rdx, crlf   ;Force new line
   353 000015BD B409                <1>     mov ah, 09h
   354 000015BF CD41                <1>     int 41h
   355                              <1>     return
    19                              <2> %%_ret:
    20 000015C1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   356                              <1> 
   357                              <1> chdir:
   358 000015C2 F605ECEAFFFFFF      <1>     test byte [arg1Flg], -1
   359 000015C9 754D                <1>     jnz .changeDir
   360                              <1>     ;Print CWD
   361                              <1> .printCWD:
   362 000015CB E87A0E0000          <1>     call putCWDInPrompt ;Exactly the same procedure
   363 000015D0 E85C0C0000          <1>     call printCRLF
   364                              <1>     return
    19                              <2> %%_ret:
    20 000015D5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   365                              <1> .printDiskCWD:
   366                              <1> ;Print CWD for a specified drive
   367 000015D6 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   368 000015DA 88D0                <1>     mov al, dl
   369 000015DC 0440                <1>     add al, "@" ;Get the UC letter
   370 000015DE B43A                <1>     mov ah, ":"
   371 000015E0 488D3D42EDFFFF      <1>     lea rdi, searchSpec
   372 000015E7 66AB                <1>     stosw   ;Store X:, rdi+=2
   373 000015E9 8A053CEAFFFF        <1>     mov al, byte [pathSep]
   374 000015EF AA                  <1>     stosb   ;Store pathSep, inc rdi
   375 000015F0 B447                <1>     mov ah, 47h ;Get Current Working Directory
   376 000015F2 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   377 000015F5 CD41                <1>     int 41h
   378 000015F7 E8FA0E0000          <1>     call strlen
   379 000015FC 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   380 00001602 B440                <1>     mov ah, 40h ;Write to handle
   381 00001604 BB01000000          <1>     mov ebx, 1  ;STDOUT
   382 00001609 488D1519EDFFFF      <1>     lea rdx, searchSpec
   383 00001610 CD41                <1>     int 41h
   384 00001612 E81A0C0000          <1>     call printCRLF
   385                              <1>     return
    19                              <2> %%_ret:
    20 00001617 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   386                              <1> .changeDir:
   387 00001618 8A0599EAFFFF        <1>     mov al, byte [arg1FCBret]
   388 0000161E 3CFF                <1>     cmp al, -1 
   389 00001620 0F84D0FBFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   390 00001626 4180785D20          <1>     cmp byte [r8 + fcb1 + fcb.filename], " "
   391 0000162B 7520                <1>     jne .getFQPath
   392                              <1>     ;Now we double check that on the command line we have . or ..
   393 0000162D 0FB60582EAFFFF      <1>     movzx eax, byte [arg1Off]
   394 00001634 488D355BEBFFFF      <1>     lea rsi, cmdBuffer
   395 0000163B 4801C6              <1>     add rsi, rax
   396 0000163E 8A05E7E9FFFF        <1>     mov al, byte [pathSep]
   397 00001644 3806                <1>     cmp byte [rsi], al  ;Is the first char a pathsep?
   398 00001646 7405                <1>     je .getFQPath
   399 00001648 803E2E              <1>     cmp byte [rsi], "."
   400 0000164B 7589                <1>     jne .printDiskCWD
   401                              <1>     ;If the path is . or .., its acceptable, else fail
   402                              <1> .getFQPath:
   403 0000164D E8FF0F0000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   404 00001652 0F82C2FBFFFF        <1>     jc badDirError  ;If this returns CF=CY, its a badDir
   405 00001658 488D15CAECFFFF      <1>     lea rdx, searchSpec
   406 0000165F B43B                <1>     mov ah, 3Bh ;CHDIR
   407 00001661 CD41                <1>     int 41h
   408 00001663 0F82B1FBFFFF        <1>     jc badDirError
   409                              <1>     return
    19                              <2> %%_ret:
    20 00001669 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   410                              <1> 
   411                              <1> mkdir:
   412 0000166A F60544EAFFFFFF      <1>     test byte [arg1Flg], -1
   413 00001671 0F8488FBFFFF        <1>     jz badArgError
   414 00001677 F6053AEAFFFFFF      <1>     test byte [arg2Flg], -1
   415 0000167E 0F857BFBFFFF        <1>     jnz badArgError
   416                              <1>     ;We have exactly one argument
   417 00001684 8A052DEAFFFF        <1>     mov al, byte [arg1FCBret]
   418 0000168A 3CFF                <1>     cmp al, -1 
   419 0000168C 0F8464FBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   420 00001692 E8BA0F0000          <1>     call buildCommandPath
   421 00001697 488D158BECFFFF      <1>     lea rdx, searchSpec
   422 0000169E B800390000          <1>     mov eax, 3900h  ;MKDIR
   423 000016A3 CD41                <1>     int 41h
   424                              <1>     retnc
    67                              <2> cret nc
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000016A5 73(69)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   425                              <1> .badMake:   ;Else, bad make
   426 000016A7 488D1517F3FFFF      <1>     lea rdx, badMD
   427 000016AE B800090000          <1>     mov eax, 0900h
   428 000016B3 CD41                <1>     int 41h
   429                              <1>     return
    19                              <2> %%_ret:
    20 000016B5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   430                              <1> 
   431                              <1> rmdir:
   432 000016B6 F605F8E9FFFFFF      <1>     test byte [arg1Flg], -1
   433 000016BD 0F843CFBFFFF        <1>     jz badArgError
   434 000016C3 F605EEE9FFFFFF      <1>     test byte [arg2Flg], -1
   435 000016CA 0F852FFBFFFF        <1>     jnz badArgError
   436                              <1>     ;We have exactly one argument
   437 000016D0 8A05E1E9FFFF        <1>     mov al, byte [arg1FCBret]
   438 000016D6 3CFF                <1>     cmp al, -1 
   439 000016D8 0F8418FBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   440 000016DE E86E0F0000          <1>     call buildCommandPath
   441 000016E3 488D153FECFFFF      <1>     lea rdx, searchSpec
   442 000016EA B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   443 000016EF CD41                <1>     int 41h
   444                              <1>     retnc   ;Return if not carry
    67                              <2> cret nc
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000016F1 73(B5)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   445                              <1> .badRemove:   ;Else, bad make
   446 000016F3 488D15E8F2FFFF      <1>     lea rdx, badRD
   447 000016FA B800090000          <1>     mov eax, 0900h
   448 000016FF CD41                <1>     int 41h
   449                              <1>     return
    19                              <2> %%_ret:
    20 00001701 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   450                              <1> 
   451                              <1> copy:
   452 00001702 F605ACE9FFFFFF      <1>     test byte [arg1Flg], -1
   453 00001709 0F84F0FAFFFF        <1>     jz badArgError
   454 0000170F F605A2E9FFFFFF      <1>     test byte [arg2Flg], -1
   455 00001716 0F84E3FAFFFF        <1>     jz badArgError
   456 0000171C 488D3573EAFFFF      <1>     lea rsi, cmdBuffer
   457 00001723 0FB6058CE9FFFF      <1>     movzx eax, byte [arg1Off]
   458 0000172A 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   459                              <1>     ;rsi points to terminating char
   460 0000172D AC                  <1>     lodsb   ;Get first char in AL
   461 0000172E 48FFCE              <1>     dec rsi ;Go back to this char
   462 00001731 E8270E0000          <1>     call isALEndOfCommand
   463 00001736 0F82B1FAFFFF        <1>     jc badParamError
   464 0000173C 488D3D8EEDFFFF      <1>     lea rdi, sourcePath ;Store this in sourcePath
   465                              <1> .copyName1:
   466 00001743 AC                  <1>     lodsb
   467 00001744 E8140E0000          <1>     call isALEndOfCommand
   468 00001749 0F849EFAFFFF        <1>     je badParamError
   469 0000174F E8E60D0000          <1>     call isALterminator
   470 00001754 7403                <1>     jz .endOfName1
   471 00001756 AA                  <1>     stosb
   472 00001757 EBEA                <1>     jmp short .copyName1
   473                              <1> .endOfName1:
   474 00001759 31C0                <1>     xor eax, eax
   475 0000175B AA                  <1>     stosb   ;Store this 0 at rdi
   476 0000175C 488D3533EAFFFF      <1>     lea rsi, cmdBuffer
   477 00001763 0FB6054FE9FFFF      <1>     movzx eax, byte [arg2Off]
   478 0000176A 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   479 0000176D AC                  <1>     lodsb   ;Get first char in AL
   480 0000176E 48FFCE              <1>     dec rsi ;Go back to this char
   481 00001771 E8E70D0000          <1>     call isALEndOfCommand
   482 00001776 0F8271FAFFFF        <1>     jc badParamError
   483 0000177C 488D3DCEEDFFFF      <1>     lea rdi, destPath
   484                              <1> .copyName2:
   485 00001783 AC                  <1>     lodsb
   486 00001784 E8D40D0000          <1>     call isALEndOfCommand
   487 00001789 740A                <1>     je .endOfName2
   488 0000178B E8AA0D0000          <1>     call isALterminator
   489 00001790 7403                <1>     jz .endOfName2
   490 00001792 AA                  <1>     stosb
   491 00001793 EBEE                <1>     jmp short .copyName2
   492                              <1> .endOfName2:
   493 00001795 31C0                <1>     xor eax, eax
   494 00001797 AA                  <1>     stosb   ;Store this 0 at rdi
   495                              <1> ;Before we open, we check if the two filenames are equal
   496                              <1> ; If so, crap out.
   497 00001798 488D3532EDFFFF      <1>     lea rsi, sourcePath
   498 0000179F 488D3DABEDFFFF      <1>     lea rdi, destPath
   499 000017A6 B81E120000          <1>     mov eax, 121Eh
   500 000017AB CD4F                <1>     int 4Fh
   501 000017AD 0F849C000000        <1>     jz .sameFilename
   502                              <1>     ;Open source with read permission
   503                              <1>     ;Open destination with write permission
   504 000017B3 488D1517EDFFFF      <1>     lea rdx, sourcePath
   505 000017BA B8003D0000          <1>     mov eax, 3D00h  ;Read open
   506 000017BF CD41                <1>     int 41h
   507 000017C1 0F8226FAFFFF        <1>     jc badParamError
   508 000017C7 66890503EEFFFF      <1>     mov word [sourceHdl], ax
   509 000017CE 488D157CEDFFFF      <1>     lea rdx, destPath
   510 000017D5 B8003C0000          <1>     mov eax, 3C00h  ;Create the file
   511 000017DA 31C9                <1>     xor ecx, ecx    ;No file attributes
   512 000017DC CD41                <1>     int 41h
   513 000017DE 0F8292000000        <1>     jc .badExit
   514 000017E4 668905E8EDFFFF      <1>     mov word [destHdl], ax
   515 000017EB 31F6                <1>     xor esi, esi
   516 000017ED 488D15E1EDFFFF      <1>     lea rdx, copyBuffer
   517                              <1> .copyLoop:
   518 000017F4 B980000000          <1>     mov ecx, 128
   519 000017F9 0FB71DD1EDFFFF      <1>     movzx ebx, word [sourceHdl]
   520 00001800 B43F                <1>     mov ah, 3Fh ;Read
   521 00001802 CD41                <1>     int 41h
   522 00001804 7270                <1>     jc .badExit
   523 00001806 85C0                <1>     test eax, eax
   524 00001808 7418                <1>     jz .okExit
   525 0000180A 01C6                <1>     add esi, eax
   526                              <1>     ;mov eax, EOF
   527                              <1>     ;mov rdi, rdx
   528                              <1>     ;mov ecx, 128
   529                              <1>     ;repne scasb ;Scan for an EOF
   530                              <1>     ;mov eax, 128
   531                              <1>     ;sub eax, ecx    ;If an EOF found, only print up to it
   532 0000180C 89C1                <1>     mov ecx, eax
   533 0000180E 0FB71DBEEDFFFF      <1>     movzx ebx, word [destHdl]
   534 00001815 B440                <1>     mov ah, 40h ;Write
   535 00001817 CD41                <1>     int 41h
   536 00001819 725B                <1>     jc .badExit
   537 0000181B 3D80000000          <1>     cmp eax, 128    ;Change this for writing from Char devices in ASCII mode
   538 00001820 73D2                <1>     jnb .copyLoop
   539                              <1> .okExit:
   540 00001822 E832000000          <1>     call .leaveCopyClose
   541 00001827 488D15D9EEFFFF      <1>     lea rdx, crlf
   542 0000182E B409                <1>     mov ah, 09h
   543 00001830 CD41                <1>     int 41h
   544 00001832 488D156EF4FFFF      <1>     lea rdx, fourSpc
   545 00001839 B409                <1>     mov ah, 09h
   546 0000183B CD41                <1>     int 41h
   547 0000183D B402                <1>     mov ah, 02h
   548 0000183F B231                <1>     mov dl, "1" ;1 File(s) copied
   549 00001841 CD41                <1>     int 41h
   550 00001843 488D15F6EFFFFF      <1>     lea rdx, copyOk
   551 0000184A B409                <1>     mov ah, 09h
   552 0000184C CD41                <1>     int 41h
   553                              <1>     return
    19                              <2> %%_ret:
    20 0000184E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   554                              <1> .sameFilename:
   555 0000184F E805000000          <1>     call .leaveCopyClose ;Close the handles
   556 00001854 E98BF9FFFF          <1>     jmp noSelfCopyError
   557                              <1> .leaveCopyClose:
   558 00001859 668B1D71EDFFFF      <1>     mov bx, word [sourceHdl]
   559 00001860 B8003E0000          <1>     mov eax, 3E00h
   560 00001865 CD41                <1>     int 41h
   561 00001867 668B1D65EDFFFF      <1>     mov bx, word [destHdl]
   562 0000186E B8003E0000          <1>     mov eax, 3E00h
   563 00001873 CD41                <1>     int 41h
   564                              <1>     return
    19                              <2> %%_ret:
    20 00001875 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   565                              <1> .badExit:
   566                              <1> ;Prototypically use badParamError for error reporting... sucks I know
   567 00001876 668B1D54EDFFFF      <1>     mov bx, word [sourceHdl]
   568 0000187D 6681FBFFFF          <1>     cmp bx, -1
   569 00001882 7407                <1>     je .skipSource
   570 00001884 B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
   571 00001889 CD41                <1>     int 41h
   572                              <1> .skipSource:
   573 0000188B 668B1D41EDFFFF      <1>     mov bx, word [destHdl]
   574 00001892 6681FBFFFF          <1>     cmp bx, -1
   575 00001897 0F8450F9FFFF        <1>     je badParamError
   576 0000189D B8003E0000          <1>     mov eax, 3E00h
   577 000018A2 CD41                <1>     int 41h
   578 000018A4 E944F9FFFF          <1>     jmp badParamError
   579                              <1> 
   580                              <1> erase:
   581 000018A9 F60505E8FFFFFF      <1>     test byte [arg1Flg], -1
   582 000018B0 0F8449F9FFFF        <1>     jz badArgError
   583 000018B6 E8960D0000          <1>     call buildCommandPath
   584 000018BB 488D1567EAFFFF      <1>     lea rdx, searchSpec
   585 000018C2 B800410000          <1>     mov eax, 4100h  ;Delete File 
   586 000018C7 31C9                <1>     xor ecx, ecx
   587 000018C9 CD41                <1>     int 41h
   588 000018CB 0F822EF9FFFF        <1>     jc badArgError
   589                              <1>     return
    19                              <2> %%_ret:
    20 000018D1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   590                              <1> date:
   591 000018D2 488D150FF0FFFF      <1>     lea rdx, curDate
   592 000018D9 B409                <1>     mov ah, 09h
   593 000018DB CD41                <1>     int 41h
   594 000018DD B42A                <1>     mov ah, 2Ah ;DOS get date
   595 000018DF CD41                <1>     int 41h
   596                              <1> 	;AL = day of the week (0=Sunday)
   597                              <1> 	;CX = year (1980-2099)
   598                              <1> 	;DH = month (1-12)
   599                              <1> 	;DL = day (1-31)
   600 000018E1 66890DE5EBFFFF      <1>     mov word [td1], cx
   601 000018E8 8815E1EBFFFF        <1>     mov byte [td3], dl
   602 000018EE 8835DCEBFFFF        <1>     mov byte [td4], dh
   603 000018F4 0FB6C0              <1>     movzx eax, al
   604 000018F7 89C3                <1>     mov ebx, eax
   605 000018F9 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   606 000018FB 01D8                <1>     add eax, ebx ;Make it 3 times 
   607 000018FD 488D15C0EFFFFF      <1>     lea rdx, dayName
   608 00001904 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   609 00001908 B903000000          <1>     mov ecx, 3  ;Print three chars
   610 0000190D BB01000000          <1>     mov ebx, 1  ;STDOUT
   611 00001912 B440                <1>     mov ah, 40h ;Write to handle
   612 00001914 CD41                <1>     int 41h
   613 00001916 B220                <1>     mov dl, " "
   614 00001918 B402                <1>     mov ah, 02h
   615 0000191A CD41                <1>     int 41h
   616                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   617                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   618                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   619 0000191C 0FB705AAEBFFFF      <1>     movzx eax, word [td1]   ;Get this word
   620 00001923 C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   621 00001926 0FB61DA3EBFFFF      <1>     movzx ebx, byte [td4]
   622 0000192D C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   623 00001930 09D8                <1>     or eax, ebx ;Add this date to eax
   624 00001932 0FB61D96EBFFFF      <1>     movzx ebx, byte [td3]
   625 00001939 09D8                <1>     or eax, ebx
   626 0000193B BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   627 00001940 E802090000          <1>     call printDate
   628                              <1> 
   629 00001945 488D15ADEFFFFF      <1>     lea rdx, newDate
   630 0000194C B409                <1>     mov ah, 09h
   631 0000194E CD41                <1>     int 41h
   632 00001950 488D15C1EFFFFF      <1>     lea rdx, ukDate
   633 00001957 488D05ADEFFFFF      <1>     lea rax, usDate
   634 0000195E 488D1DC0EFFFFF      <1>     lea rbx, jpDate
   635 00001965 803DCAE6FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   636 0000196C 480F47D3            <1>     cmova rdx, rbx
   637 00001970 480F42D0            <1>     cmovb rdx, rax
   638 00001974 B409                <1>     mov ah, 09h
   639 00001976 CD41                <1>     int 41h
   640                              <1> 
   641 00001978 498D9080000000      <1>     lea rdx, qword [r8 + cmdLineCnt]
   642 0000197F B40A                <1>     mov ah, 0Ah
   643 00001981 CD41                <1>     int 41h
   644 00001983 52                  <1>     push rdx
   645 00001984 488D157CEDFFFF      <1>     lea rdx, crlf
   646 0000198B B409                <1>     mov ah, 09h
   647 0000198D CD41                <1>     int 41h
   648 0000198F 5A                  <1>     pop rdx
   649 00001990 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   650                              <1>     rete    ;Exit!
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 00001994 7501                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 00001996 C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   651                              <1>     return
    19                              <2> %%_ret:
    20 00001997 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   652                              <1> 
   653                              <1> time:
   654 00001998 488D15A2EFFFFF      <1>     lea rdx, curTime
   655 0000199F B409                <1>     mov ah, 09h
   656 000019A1 CD41                <1>     int 41h
   657 000019A3 B42C                <1>     mov ah, 2Ch ;DOS get time
   658 000019A5 CD41                <1>     int 41h
   659                              <1>     ;CH = hour (0-23)
   660                              <1> 	;CL = minutes (0-59)
   661                              <1> 	;DH = seconds (0-59)
   662                              <1> 	;DL = hundredths (0-99)
   663 000019A7 880D20EBFFFF        <1>     mov byte [td1], cl
   664 000019AD 882D1BEBFFFF        <1>     mov byte [td2], ch
   665 000019B3 881516EBFFFF        <1>     mov byte [td3], dl
   666 000019B9 883511EBFFFF        <1>     mov byte [td4], dh
   667 000019BF 0FB6C5              <1>     movzx eax, ch
   668 000019C2 E8140A0000          <1>     call printTime.printHours
   669                              <1> 
   670 000019C7 8A1576E6FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   671 000019CD B402                <1>     mov ah, 02h
   672 000019CF CD41                <1>     int 41h
   673                              <1> 
   674 000019D1 0FB605F5EAFFFF      <1>     movzx eax, byte [td1]   ;Minutes
   675 000019D8 E8EE090000          <1>     call printTime.printMinutesAlt
   676                              <1> 
   677 000019DD 8A1560E6FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   678 000019E3 B402                <1>     mov ah, 02h
   679 000019E5 CD41                <1>     int 41h
   680                              <1> 
   681 000019E7 0FB605E2EAFFFF      <1>     movzx eax, byte [td4]   ;Seconds
   682 000019EE E8D8090000          <1>     call printTime.printMinutesAlt
   683                              <1> 
   684 000019F3 B22E                <1>     mov dl, "."
   685 000019F5 B402                <1>     mov ah, 02h
   686 000019F7 CD41                <1>     int 41h
   687                              <1> 
   688 000019F9 0FB605CFEAFFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   689 00001A00 E8C6090000          <1>     call printTime.printMinutesAlt
   690                              <1> 
   691 00001A05 488D1546EFFFFF      <1>     lea rdx, newTime
   692 00001A0C B409                <1>     mov ah, 09h
   693 00001A0E CD41                <1>     int 41h
   694                              <1> 
   695 00001A10 498D9080000000      <1>     lea rdx, qword [r8 + cmdLineCnt]
   696 00001A17 B40A                <1>     mov ah, 0Ah
   697 00001A19 CD41                <1>     int 41h
   698 00001A1B 52                  <1>     push rdx
   699 00001A1C 488D15E4ECFFFF      <1>     lea rdx, crlf
   700 00001A23 B409                <1>     mov ah, 09h
   701 00001A25 CD41                <1>     int 41h
   702 00001A27 5A                  <1>     pop rdx
   703 00001A28 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   704                              <1>     rete    ;Exit!
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 00001A2C 7501                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 00001A2E C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   705                              <1>     return
    19                              <2> %%_ret:
    20 00001A2F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   706                              <1> ctty:
   707 00001A30 F6057EE6FFFFFF      <1>     test byte [arg1Flg], -1
   708 00001A37 0F84C2F7FFFF        <1>     jz badArgError
   709 00001A3D F60574E6FFFFFF      <1>     test byte [arg2Flg], -1
   710 00001A44 0F85B5F7FFFF        <1>     jnz badArgError
   711 00001A4A 488D3545E7FFFF      <1>     lea rsi, cmdBuffer
   712 00001A51 0FB6055EE6FFFF      <1>     movzx eax, byte [arg1Off]
   713 00001A58 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
   714 00001A5B 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
   715 00001A5F 750F                <1>     jne .noDrive
   716 00001A61 0FB6054FE6FFFF      <1>     movzx eax, byte [arg1FCBret]
   717 00001A68 3CFF                <1>     cmp al, -1
   718 00001A6A 0F8486F7FFFF        <1>     je badDriveError
   719                              <1> .noDrive:
   720                              <1>     ;Now we open the provided file
   721 00001A70 E85F0D0000          <1>     call copyArgumentToSearchSpec
   722 00001A75 488D15ADE8FFFF      <1>     lea rdx, searchSpec
   723 00001A7C B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
   724 00001A81 CD41                <1>     int 41h
   725 00001A83 0F827FF7FFFF        <1>     jc badFileError
   726 00001A89 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
   727 00001A8C B800440000          <1>     mov eax, 4400h  ;Get device word
   728 00001A91 CD41                <1>     int 41h
   729 00001A93 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
   730 00001A96 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
   731                              <1>     ;Now we set this handle to be STDIO
   732 00001A98 80CA03              <1>     or dl, 3    ;Set STDIO bits
   733 00001A9B 30F6                <1>     xor dh, dh
   734 00001A9D B801440000          <1>     mov eax, 4401h  ;Now we set the device word
   735 00001AA2 CD41                <1>     int 41h
   736                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
   737 00001AA4 31C9                <1>     xor ecx, ecx    ;STDIN
   738 00001AA6 B446                <1>     mov ah, 46h
   739 00001AA8 CD41                <1>     int 41h
   740 00001AAA FFC1                <1>     inc ecx         ;STDOUT
   741 00001AAC B446                <1>     mov ah, 46h
   742 00001AAE CD41                <1>     int 41h
   743 00001AB0 FFC1                <1>     inc ecx         ;STDERR
   744 00001AB2 B446                <1>     mov ah, 46h
   745 00001AB4 CD41                <1>     int 41h
   746 00001AB6 B43E                <1>     mov ah, 3Eh ;Now we close the original handle
   747 00001AB8 CD41                <1>     int 41h
   748                              <1>     return
    19                              <2> %%_ret:
    20 00001ABA C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   749                              <1> .badCharDev:
   750 00001ABB 488D158FEFFFFF      <1>     lea rdx, badDev
   751 00001AC2 B409                <1>     mov ah, 09h
   752 00001AC4 CD41                <1>     int 41h
   753 00001AC6 B43E                <1>     mov ah, 3Eh ;Close opened handle
   754 00001AC8 CD41                <1>     int 41h
   755                              <1>     return
    19                              <2> %%_ret:
    20 00001ACA C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   756                              <1> 
   757                              <1> cls:  
   758 00001ACB B800440000          <1>     mov eax, 4400h  ;Get device info
   759 00001AD0 BB01000000          <1>     mov ebx, 1      ;for handle 1
   760 00001AD5 CD41                <1>     int 41h         ;in dx
   761 00001AD7 F7C280000000        <1>     test edx, devCharDev
   762 00001ADD 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   763 00001ADF F7C210000000        <1>     test edx, charDevFastOut
   764 00001AE5 743E                <1>     jz .doAnsi
   765                              <1>     ;Test if Int 49h uses Int 30h
   766                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   767                              <1>     ;Int 49h MUST be terminated with a IRETQ, within 1024 bytes
   768 00001AE7 B849350000          <1>     mov eax, 3549h  ;Get the vector for interrupt 49h
   769 00001AEC CD41                <1>     int 41h
   770                              <1> .biosCheck:
   771 00001AEE 66813BCD30          <1>     cmp word [rbx], 30CDh
   772 00001AF3 740C                <1>     je .biosConfirmed
   773 00001AF5 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   774 00001AFA 7429                <1>     je .doAnsi
   775 00001AFC 48FFC3              <1>     inc rbx
   776 00001AFF EBED                <1>     jmp short .biosCheck
   777                              <1> .biosConfirmed:
   778                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   779 00001B01 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   780 00001B03 31DB                <1>     xor ebx, ebx
   781 00001B05 CD30                <1>     int 30h
   782 00001B07 B40F                <1>     mov ah, 0Fh ;Get screen mode
   783 00001B09 CD30                <1>     int 30h
   784 00001B0B 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   785 00001B0E FECA                <1>     dec dl
   786 00001B10 B619                <1>     mov dh, 25  ;Number of rows is standard
   787 00001B12 31C0                <1>     xor eax, eax
   788 00001B14 89C1                <1>     mov ecx, eax
   789 00001B16 B707                <1>     mov bh, 7   ;Screen attributes
   790 00001B18 B406                <1>     mov ah, 6   ;Scroll
   791 00001B1A CD30                <1>     int 30h
   792 00001B1C 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   793 00001B1E B700                <1>     mov bh, 0   ;Page 0
   794 00001B20 B402                <1>     mov ah, 2
   795 00001B22 CD30                <1>     int 30h
   796                              <1>     return
    19                              <2> %%_ret:
    20 00001B24 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   797                              <1> .doAnsi:
   798                              <1> ;If an ANSI driver is not installed, this will simply insert blank lines
   799                              <1> ;4 chars in the ansi routine
   800                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   801                              <1> ; understand ANSI codes
   802 00001B25 488D3577F1FFFF      <1>     lea rsi, ansiCls
   803 00001B2C B904000000          <1>     mov ecx, 4
   804 00001B31 B406                <1>     mov ah, 06h ;Raw char output
   805                              <1> .ansiLp:
   806 00001B33 AC                  <1>     lodsb   ;Get the char in 
   807 00001B34 88C2                <1>     mov dl, al
   808 00001B36 CD41                <1>     int 41h
   809 00001B38 FFC9                <1>     dec ecx
   810 00001B3A 75F7                <1>     jnz .ansiLp
   811                              <1>     return
    19                              <2> %%_ret:
    20 00001B3C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   812                              <1> 
   813                              <1> break:
   814 00001B3D F60571E5FFFFFF      <1>     test byte [arg1Flg], -1
   815 00001B44 752D                <1>     jnz .argumentProvided
   816                              <1>     ;Here we just get the status of break
   817 00001B46 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   818 00001B4B CD41                <1>     int 41h
   819 00001B4D 88D3                <1>     mov bl, dl
   820 00001B4F 488D159DEFFFFF      <1>     lea rdx, breakIs
   821 00001B56 B409                <1>     mov ah, 09h
   822 00001B58 CD41                <1>     int 41h
   823 00001B5A 488D158DEFFFFF      <1>     lea rdx, onMes
   824 00001B61 488D0D80EFFFFF      <1>     lea rcx, offMes
   825 00001B68 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   826 00001B6A 480F44D1            <1>     cmovz rdx, rcx
   827 00001B6E B409                <1>     mov ah, 09h
   828 00001B70 CD41                <1>     int 41h
   829                              <1>     return
    19                              <2> %%_ret:
    20 00001B72 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   830                              <1> .argumentProvided:
   831 00001B73 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   832 00001B77 AD                  <1>     lodsd   ;Read the word
   833 00001B78 89C3                <1>     mov ebx, eax
   834 00001B7A 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   835 00001B7F C1EB10              <1>     shr ebx, 10h     ;Get high word low
   836 00001B82 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   837 00001B87 7416                <1>     je .maybeOn
   838 00001B89 663D4F46            <1>     cmp ax, "OF"
   839 00001B8D 7523                <1>     jne .badOnOff
   840 00001B8F 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   841 00001B94 6681FB4620          <1>     cmp bx, "F "
   842 00001B99 7517                <1>     jne .badOnOff
   843                              <1>     ;Set off
   844 00001B9B 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   845 00001B9D EB0B                <1>     jmp short .setBreak
   846                              <1> .maybeOn:
   847 00001B9F 663D4F4E            <1>     cmp ax, "ON"
   848 00001BA3 750D                <1>     jne .badOnOff
   849                              <1>     ;Set on
   850 00001BA5 BA01000000          <1>     mov edx, 1
   851                              <1> .setBreak:
   852 00001BAA B801330000          <1>     mov eax, 3301h  ;Set break
   853 00001BAF CD41                <1>     int 41h
   854                              <1>     return
    19                              <2> %%_ret:
    20 00001BB1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   855                              <1> .badOnOff:
   856 00001BB2 488D15FAF0FFFF      <1>     lea rdx, badOnOff
   857 00001BB9 B409                <1>     mov ah, 09h
   858 00001BBB CD41                <1>     int 41h
   859                              <1>     return
    19                              <2> %%_ret:
    20 00001BBD C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   860                              <1> 
   861                              <1> verify:
   862 00001BBE F605F0E4FFFFFF      <1>     test byte [arg1Flg], -1
   863 00001BC5 752D                <1>     jnz .argumentProvided
   864                              <1>     ;Here we just get the status of break
   865 00001BC7 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
   866 00001BCC CD41                <1>     int 41h
   867 00001BCE 88C3                <1>     mov bl, al
   868 00001BD0 488D1526EFFFFF      <1>     lea rdx, verifyIs
   869 00001BD7 B409                <1>     mov ah, 09h
   870 00001BD9 CD41                <1>     int 41h
   871 00001BDB 488D150CEFFFFF      <1>     lea rdx, onMes
   872 00001BE2 488D0DFFEEFFFF      <1>     lea rcx, offMes
   873 00001BE9 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   874 00001BEB 480F44D1            <1>     cmovz rdx, rcx
   875 00001BEF B409                <1>     mov ah, 09h
   876 00001BF1 CD41                <1>     int 41h
   877                              <1>     return
    19                              <2> %%_ret:
    20 00001BF3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   878                              <1> .argumentProvided:
   879 00001BF4 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   880 00001BF8 AD                  <1>     lodsd   ;Read the word
   881 00001BF9 89C3                <1>     mov ebx, eax
   882 00001BFB 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   883 00001C00 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   884 00001C03 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   885 00001C08 7416                <1>     je .maybeOn
   886 00001C0A 663D4F46            <1>     cmp ax, "OF"
   887 00001C0E 751F                <1>     jne .badOnOff
   888 00001C10 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   889 00001C15 6681FB4620          <1>     cmp bx, "F "
   890 00001C1A 7513                <1>     jne .badOnOff
   891                              <1>     ;Set off
   892 00001C1C 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
   893 00001C1E EB0A                <1>     jmp short .setVerify
   894                              <1> .maybeOn:
   895 00001C20 663D4F4E            <1>     cmp ax, "ON"
   896 00001C24 7509                <1>     jne .badOnOff
   897                              <1>     ;Set on
   898 00001C26 31C0                <1>     xor eax, eax
   899 00001C28 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
   900                              <1> .setVerify:
   901 00001C2A B42E                <1>     mov ah, 2Eh  ;Set Verify
   902 00001C2C CD41                <1>     int 41h
   903                              <1>     return
    19                              <2> %%_ret:
    20 00001C2E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   904                              <1> .badOnOff:
   905 00001C2F 488D157DF0FFFF      <1>     lea rdx, badOnOff
   906 00001C36 B409                <1>     mov ah, 09h
   907 00001C38 CD41                <1>     int 41h
   908                              <1>     return
    19                              <2> %%_ret:
    20 00001C3A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   909                              <1> 
   910                              <1> rename:
   911 00001C3B F60573E4FFFFFF      <1>     test byte [arg1Flg], -1
   912 00001C42 0F84B7F5FFFF        <1>     jz badArgError
   913 00001C48 F60569E4FFFFFF      <1>     test byte [arg2Flg], -1
   914 00001C4F 0F84AAF5FFFF        <1>     jz badArgError
   915 00001C55 488D353AE5FFFF      <1>     lea rsi, cmdBuffer
   916 00001C5C 0FB60553E4FFFF      <1>     movzx eax, byte [arg1Off]
   917 00001C63 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   918                              <1>     ;rsi points to terminating char
   919 00001C66 AC                  <1>     lodsb   ;Get first char in AL
   920 00001C67 48FFCE              <1>     dec rsi ;Go back to this char
   921 00001C6A E8EE080000          <1>     call isALEndOfCommand
   922 00001C6F 0F8278F5FFFF        <1>     jc badParamError
   923 00001C75 488D3D55E8FFFF      <1>     lea rdi, sourcePath ;Store this in sourcePath
   924                              <1> .copyName1:
   925 00001C7C AC                  <1>     lodsb
   926 00001C7D E8DB080000          <1>     call isALEndOfCommand
   927 00001C82 0F8465F5FFFF        <1>     je badParamError
   928 00001C88 E8AD080000          <1>     call isALterminator
   929 00001C8D 7403                <1>     jz .endOfName1
   930 00001C8F AA                  <1>     stosb
   931 00001C90 EBEA                <1>     jmp short .copyName1
   932                              <1> .endOfName1:
   933 00001C92 31C0                <1>     xor eax, eax
   934 00001C94 AA                  <1>     stosb   ;Store this 0 at rdi
   935 00001C95 488D35FAE4FFFF      <1>     lea rsi, cmdBuffer
   936 00001C9C 0FB60516E4FFFF      <1>     movzx eax, byte [arg2Off]
   937 00001CA3 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   938 00001CA6 807E013A            <1>     cmp byte [rsi + 1], ":" ;If dest path char 2 is :, must be X:, not allowed
   939 00001CAA 0F843DF5FFFF        <1>     je badParamError
   940 00001CB0 AC                  <1>     lodsb   ;Get first char in AL
   941 00001CB1 48FFCE              <1>     dec rsi ;Go back to this char
   942 00001CB4 E8A4080000          <1>     call isALEndOfCommand
   943 00001CB9 0F822EF5FFFF        <1>     jc badParamError
   944 00001CBF 488D3D8BE8FFFF      <1>     lea rdi, destPath
   945                              <1> .copyName2:
   946 00001CC6 AC                  <1>     lodsb
   947 00001CC7 E891080000          <1>     call isALEndOfCommand
   948 00001CCC 740A                <1>     je .endOfName2
   949 00001CCE E867080000          <1>     call isALterminator
   950 00001CD3 7403                <1>     jz .endOfName2
   951 00001CD5 AA                  <1>     stosb
   952 00001CD6 EBEE                <1>     jmp short .copyName2
   953                              <1> .endOfName2:
   954 00001CD8 31C0                <1>     xor eax, eax
   955 00001CDA AA                  <1>     stosb   ;Store this 0 at rdi
   956 00001CDB 488D15EFE7FFFF      <1>     lea rdx, sourcePath
   957 00001CE2 488D3D68E8FFFF      <1>     lea rdi, destPath
   958 00001CE9 B800560000          <1>     mov eax, 5600h
   959 00001CEE CD41                <1>     int 41h
   960                              <1>     retnc   ;Return if all oki!
    67                              <2> cret nc
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32                              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35 00001CF0 7201                <3>  j%-1 short %%a
    36                              <3>  return
    19                              <4> %%_ret:
    20 00001CF2 C3                  <4>  ret
    21                              <4> %assign retOff %%_ret-$$
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   961 00001CF3 3C0F                <1>     cmp al, errBadDrv
   962 00001CF5 0F84FBF4FFFF        <1>     je badDriveError
   963 00001CFB 3C0B                <1>     cmp al, errBadFmt
   964 00001CFD 0F8417F5FFFF        <1>     je badDirError
   965 00001D03 E909F5FFFF          <1>     jmp badDupFnf
   966                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   967                              <1> touch:
   968                              <1> ;Temporarily used to create files
   969 00001D08 F605A6E3FFFFFF      <1>     test byte [arg1Flg], -1
   970 00001D0F 0F84EAF4FFFF        <1>     jz badArgError
   971 00001D15 E837090000          <1>     call buildCommandPath
   972 00001D1A 488D1508E6FFFF      <1>     lea rdx, searchSpec
   973 00001D21 B8003C0000          <1>     mov eax, 3C00h  ;Create file 
   974 00001D26 31C9                <1>     xor ecx, ecx
   975 00001D28 CD41                <1>     int 41h
   976 00001D2A 720B                <1>     jc .touchError
   977 00001D2C 0FB7D8              <1>     movzx ebx, ax
   978 00001D2F B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
   979 00001D34 CD41                <1>     int 41h
   980                              <1>     return
    19                              <2> %%_ret:
    20 00001D36 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   981                              <1> .touchError:
   982 00001D37 488D154DEFFFFF      <1>     lea rdx, touchErr
   983 00001D3E E9DEF4FFFF          <1>     jmp badCmn
   984                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   985                              <1> truename:
   986 00001D43 F6056BE3FFFFFF      <1>     test byte [arg1Flg], -1
   987 00001D4A 0F84AFF4FFFF        <1>     jz badArgError
   988 00001D50 E8FC080000          <1>     call buildCommandPath
   989                              <1>     ;Explicitly call Truename if we remove truename from this function
   990 00001D55 488D3DCDE5FFFF      <1>     lea rdi, searchSpec
   991 00001D5C E895070000          <1>     call strlen
   992 00001D61 FFC9                <1>     dec ecx ;Don't print terminating null
   993 00001D63 488D15BFE5FFFF      <1>     lea rdx, searchSpec
   994 00001D6A BB01000000          <1>     mov ebx, 01
   995 00001D6F B440                <1>     mov ah, 40h
   996 00001D71 CD41                <1>     int 41h
   997 00001D73 E8B9040000          <1>     call printCRLF
   998                              <1>     return
    19                              <2> %%_ret:
    20 00001D78 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   999                              <1> 
  1000                              <1> volume:
  1001 00001D79 488D3518E4FFFF      <1>     lea rsi, cmdBuffer + 2  ;Get the command buffer
  1002 00001D80 E8E9070000          <1>     call skipSpaces
  1003 00001D85 4881C603000000      <1>     add rsi, 3  ;Go past the VOL command
  1004 00001D8C E8DD070000          <1>     call skipSpaces
  1005 00001D91 AC                  <1>     lodsb   ;Get the first char, and point rsi to next char
  1006 00001D92 E8C6070000          <1>     call isALEndOfCommand   ;If this char is end of command, use current drive
  1007 00001D97 7507                <1>     jnz .checkDriveLetter
  1008 00001D99 E853070000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1009 00001D9E EB35                <1>     jmp short .dirEP
  1010                              <1> .checkDriveLetter:
  1011 00001DA0 803E3A              <1>     cmp byte [rsi], ":" ;If this is not a :, fail
  1012 00001DA3 0F854DF4FFFF        <1>     jne badDriveError
  1013 00001DA9 4889F7              <1>     mov rdi, rsi    ;Save start of drive spec in rsi
  1014 00001DAC 48FFC6              <1>     inc rsi  ;Go past the X: spec
  1015 00001DAF E8BA070000          <1>     call skipSpaces
  1016 00001DB4 AC                  <1>     lodsb   ;Get the non-space char in al
  1017 00001DB5 E8A3070000          <1>     call isALEndOfCommand   ;The next non-space char must be terminator
  1018 00001DBA 0F8536F4FFFF        <1>     jne badDriveError
  1019                              <1> ;This argument should've been parsed into FCB1 so use that result
  1020 00001DC0 8A05F1E2FFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1021 00001DC6 A8FF                <1>     test al, -1
  1022 00001DC8 0F8528F4FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1023 00001DCE 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1024 00001DD3 FFC8                <1>     dec eax ;Convert to 0 based number
  1025                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al
  1026 00001DD5 0541000000          <1>     add eax, "A" ;Get ASCII representation of 0 based number
  1027 00001DDA 8805E6E6FFFF        <1>     mov byte [volPathBuf], al   ;Store ASCII letter here
  1028 00001DE0 488D15E4E2FFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
  1029 00001DE7 B41A                <1>     mov ah, 1Ah
  1030 00001DE9 CD41                <1>     int 41h
  1031 00001DEB 488D15D4E6FFFF      <1>     lea rdx, volPathBuf
  1032 00001DF2 66B90800            <1>     mov cx, dirVolumeID
  1033 00001DF6 B44E                <1>     mov ah, 4Eh ;Find first
  1034 00001DF8 CD41                <1>     int 41h
  1035 00001DFA 7221                <1>     jc .skipVolLbl
  1036 00001DFC 488D35E6E2FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
  1037 00001E03 488D3DAFE6FFFF      <1>     lea rdi, volLblSpc
  1038 00001E0A B90B000000          <1>     mov ecx, 11 ;Get the 11 chars of the volume label
  1039                              <1> .dirLblCopy:
  1040 00001E0F AC                  <1>     lodsb   ;Get the first char
  1041 00001E10 3C00                <1>     cmp al, 0
  1042 00001E12 7409                <1>     je .skipVolLbl  ;Jump with CF=NC
  1043 00001E14 3C2E                <1>     cmp al, "."
  1044 00001E16 7401                <1>     je .dirLblSkipStore
  1045 00001E18 AA                  <1>     stosb
  1046                              <1> .dirLblSkipStore:
  1047 00001E19 FFC9                <1>     dec ecx
  1048 00001E1B 75F2                <1>     jnz .dirLblCopy
  1049                              <1>     ;Fallthru with CF=NC
  1050                              <1> .skipVolLbl:
  1051                              <1> ;Print volume label information now
  1052                              <1> ;Propagates the CF if CF was set    
  1053 00001E1D 9C                  <1>     pushfq
  1054 00001E1E 488D15E2E8FFFF      <1>     lea rdx, crlf
  1055 00001E25 B409                <1>     mov ah, 09h
  1056 00001E27 CD41                <1>     int 41h
  1057 00001E29 488D155CEBFFFF      <1>     lea rdx, volMes
  1058 00001E30 B409                <1>     mov ah, 09h
  1059 00001E32 CD41                <1>     int 41h
  1060 00001E34 8A158CE6FFFF        <1>     mov dl, byte [volPathBuf]   ;Print the drive letter out
  1061 00001E3A B402                <1>     mov ah, 02h
  1062 00001E3C CD41                <1>     int 41h
  1063 00001E3E 9D                  <1>     popfq
  1064 00001E3F 7317                <1>     jnc .volIDOk
  1065 00001E41 488D155BEBFFFF      <1>     lea rdx, volNo
  1066 00001E48 B409                <1>     mov ah, 09h
  1067 00001E4A CD41                <1>     int 41h
  1068 00001E4C 488D15B4E8FFFF      <1>     lea rdx, crlf
  1069 00001E53 B409                <1>     mov ah, 09h
  1070 00001E55 CD41                <1>     int 41h
  1071                              <1>     return
    19                              <2> %%_ret:
    20 00001E57 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1072                              <1> .volIDOk:
  1073 00001E58 488D153FEBFFFF      <1>     lea rdx, volOk
  1074 00001E5F B409                <1>     mov ah, 09h
  1075 00001E61 CD41                <1>     int 41h
  1076 00001E63 488D3D4FE6FFFF      <1>     lea rdi, volLblSpc
  1077 00001E6A E887060000          <1>     call strlen
  1078 00001E6F FFC9                <1>     dec ecx
  1079 00001E71 C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
  1080 00001E75 488D153DE6FFFF      <1>     lea rdx, volLblSpc
  1081 00001E7C B409                <1>     mov ah, 09h
  1082 00001E7E CD41                <1>     int 41h
  1083 00001E80 488D1580E8FFFF      <1>     lea rdx, crlf
  1084 00001E87 B409                <1>     mov ah, 09h
  1085 00001E89 CD41                <1>     int 41h
  1086                              <1>     return
    19                              <2> %%_ret:
    20 00001E8B C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1087                              <1> 
  1088                              <1> version:
  1089 00001E8C 488D1574E8FFFF      <1>     lea rdx, crlf
  1090 00001E93 B409                <1>     mov ah, 09h
  1091 00001E95 CD41                <1>     int 41h
  1092 00001E97 488D15DCEAFFFF      <1>     lea rdx, dosVer
  1093 00001E9E B409                <1>     mov ah, 09h
  1094 00001EA0 CD41                <1>     int 41h
  1095 00001EA2 E80C000000          <1>     call .printVersionNumber
  1096 00001EA7 488D1559E8FFFF      <1>     lea rdx, crlf
  1097 00001EAE B409                <1>     mov ah, 09h
  1098 00001EB0 CD41                <1>     int 41h
  1099                              <1>     return
    19                              <2> %%_ret:
    20 00001EB2 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1100                              <1> .printVersionNumber:
  1101 00001EB3 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1102 00001EB5 CD41                <1>     int 41h
  1103 00001EB7 50                  <1>     push rax
  1104 00001EB8 0FB6C0              <1>     movzx eax, al
  1105 00001EBB E82F080000          <1>     call printDecimalWord
  1106 00001EC0 B22E                <1>     mov dl, "."
  1107 00001EC2 B402                <1>     mov ah, 02h
  1108 00001EC4 CD41                <1>     int 41h
  1109 00001EC6 58                  <1>     pop rax
  1110 00001EC7 0FB6C4              <1>     movzx eax, ah
  1111 00001ECA E820080000          <1>     call printDecimalWord
  1112                              <1>     return
    19                              <2> %%_ret:
    20 00001ECF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1113                              <1> 
  1114                              <1> 
  1115                              <1> memory:
  1116 00001ED0 488B1D48E1FFFF      <1>     mov rbx, qword [sysVars]
  1117 00001ED7 4885DB              <1>     test rbx, rbx
  1118 00001EDA 7510                <1>     jnz .sysvarsOK
  1119 00001EDC 488D1549EDFFFF      <1>     lea rdx, memBad0
  1120 00001EE3 B409                <1>     mov ah, 09h
  1121 00001EE5 CD41                <1>     int 41h
  1122 00001EE7 E9A6080000          <1>     jmp freezePC.altEP
  1123                              <1> .sysvarsOK:
  1124                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1125                              <1>     ; and rcx to store Application memory
  1126 00001EEC 31F6                <1>     xor esi, esi
  1127 00001EEE 31FF                <1>     xor edi, edi
  1128 00001EF0 31ED                <1>     xor ebp, ebp
  1129 00001EF2 31C9                <1>     xor ecx, ecx
  1130 00001EF4 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1131 00001EF8 488B1B              <1>     mov rbx, qword [rbx]
  1132                              <1> .memLp:
  1133 00001EFB 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1134 00001EFE 7409                <1>     je .validMCB
  1135 00001F00 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1136 00001F03 0F8501010000        <1>     jne .badMCBFound
  1137                              <1> .validMCB:
  1138 00001F09 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1139 00001F0C 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1140 00001F10 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1141 00001F18 7505                <1>     jne .notDOS
  1142 00001F1A 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1143 00001F1D EB21                <1>     jmp short .gotoNext
  1144                              <1> .notDOS:
  1145 00001F1F 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1146 00001F27 7505                <1>     jne .notFree
  1147 00001F29 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1148 00001F2C EB12                <1>     jmp short .gotoNext
  1149                              <1> .notFree:
  1150 00001F2E 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1151 00001F36 7505                <1>     jne .notHole
  1152 00001F38 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1153 00001F3B EB03                <1>     jmp short .gotoNext
  1154                              <1> .notHole:
  1155 00001F3D 4801C1              <1>     add rcx, rax    ;Add to Application count
  1156                              <1> .gotoNext:
  1157 00001F40 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1158 00001F43 7407                <1>     je .endOfWalk
  1159 00001F45 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  1160 00001F4A EBAF                <1>     jmp short .memLp
  1161                              <1> .endOfWalk:
  1162                              <1>     
  1163 00001F4C 488D153AECFFFF      <1>     lea rdx, memDOS
  1164 00001F53 B409                <1>     mov ah, 09h
  1165 00001F55 CD41                <1>     int 41h
  1166 00001F57 4889F0              <1>     mov rax, rsi
  1167 00001F5A E89D000000          <1>     call .mcbPrintAmount
  1168 00001F5F 488D15BFECFFFF      <1>     lea rdx, memByte
  1169 00001F66 B409                <1>     mov ah, 09h
  1170 00001F68 CD41                <1>     int 41h
  1171                              <1> 
  1172 00001F6A 4885ED              <1>     test rbp, rbp
  1173 00001F6D 741E                <1>     jz .skipHole
  1174 00001F6F 488D1563ECFFFF      <1>     lea rdx, memHole
  1175 00001F76 B409                <1>     mov ah, 09h
  1176 00001F78 CD41                <1>     int 41h
  1177 00001F7A 4889E8              <1>     mov rax, rbp
  1178 00001F7D E87A000000          <1>     call .mcbPrintAmount
  1179 00001F82 488D159CECFFFF      <1>     lea rdx, memByte
  1180 00001F89 B409                <1>     mov ah, 09h
  1181 00001F8B CD41                <1>     int 41h
  1182                              <1> .skipHole:
  1183                              <1> 
  1184 00001F8D 488D151FECFFFF      <1>     lea rdx, memApp
  1185 00001F94 B409                <1>     mov ah, 09h
  1186 00001F96 CD41                <1>     int 41h
  1187 00001F98 4889C8              <1>     mov rax, rcx
  1188 00001F9B E85C000000          <1>     call .mcbPrintAmount
  1189 00001FA0 488D157EECFFFF      <1>     lea rdx, memByte
  1190 00001FA7 B409                <1>     mov ah, 09h
  1191 00001FA9 CD41                <1>     int 41h
  1192                              <1> 
  1193 00001FAB 488D154DECFFFF      <1>     lea rdx, memFree
  1194 00001FB2 B409                <1>     mov ah, 09h
  1195 00001FB4 CD41                <1>     int 41h
  1196 00001FB6 4889F8              <1>     mov rax, rdi
  1197 00001FB9 E83E000000          <1>     call .mcbPrintAmount
  1198 00001FBE 488D1560ECFFFF      <1>     lea rdx, memByte
  1199 00001FC5 B409                <1>     mov ah, 09h
  1200 00001FC7 CD41                <1>     int 41h
  1201                              <1> 
  1202 00001FC9 488D1597EBFFFF      <1>     lea rdx, memSys
  1203 00001FD0 B409                <1>     mov ah, 09h
  1204 00001FD2 CD41                <1>     int 41h
  1205 00001FD4 4889F0              <1>     mov rax, rsi
  1206 00001FD7 4801F8              <1>     add rax, rdi
  1207 00001FDA 4801C8              <1>     add rax, rcx
  1208 00001FDD 4801E8              <1>     add rax, rbp
  1209 00001FE0 E817000000          <1>     call .mcbPrintAmount
  1210 00001FE5 488D1539ECFFFF      <1>     lea rdx, memByte
  1211 00001FEC B409                <1>     mov ah, 09h
  1212 00001FEE CD41                <1>     int 41h
  1213                              <1> 
  1214 00001FF0 488D1510E7FFFF      <1>     lea rdx, crlf
  1215 00001FF7 B409                <1>     mov ah, 09h
  1216 00001FF9 CD41                <1>     int 41h
  1217                              <1>     return
    19                              <2> %%_ret:
    20 00001FFB C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1218                              <1> 
  1219                              <1> .mcbPrintAmount:
  1220 00001FFC 51                  <1>     push rcx
  1221 00001FFD 56                  <1>     push rsi
  1222 00001FFE 57                  <1>     push rdi
  1223 00001FFF 55                  <1>     push rbp
  1224 00002000 E8EA060000          <1>     call printDecimalWord
  1225 00002005 5D                  <1>     pop rbp
  1226 00002006 5F                  <1>     pop rdi
  1227 00002007 5E                  <1>     pop rsi
  1228 00002008 59                  <1>     pop rcx
  1229                              <1>     return
    19                              <2> %%_ret:
    20 00002009 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1230                              <1> .badMCBFound:
  1231 0000200A 488D155BECFFFF      <1>     lea rdx, memBad2
  1232 00002011 B409                <1>     mov ah, 09h
  1233 00002013 CD41                <1>     int 41h
  1234 00002015 E978070000          <1>     jmp freezePC.altEP
  1235                              <1> 
  1236                              <1> type:
  1237 0000201A F60594E0FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1238 00002021 0F84D8F1FFFF        <1>     jz badArgError
  1239 00002027 F6058AE0FFFFFF      <1>     test byte [arg2Flg], -1
  1240 0000202E 0F85CBF1FFFF        <1>     jnz badArgError         ;If this set, error
  1241 00002034 488D355BE1FFFF      <1>     lea rsi, cmdBuffer
  1242 0000203B 0FB60574E0FFFF      <1>     movzx eax, byte [arg1Off]
  1243 00002042 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1244 00002045 803E0D              <1>     cmp byte [rsi], CR
  1245 00002048 0F84B1F1FFFF        <1>     je badArgError
  1246 0000204E 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1247 00002052 750F                <1>     jne .noDrive
  1248 00002054 0FB6055CE0FFFF      <1>     movzx eax, byte [arg1FCBret]
  1249 0000205B 3CFF                <1>     cmp al, -1
  1250 0000205D 0F8493F1FFFF        <1>     je badDriveError
  1251                              <1> .noDrive:
  1252                              <1>     ;Now we open the provided file
  1253 00002063 E86C070000          <1>     call copyArgumentToSearchSpec
  1254 00002068 488D15BAE2FFFF      <1>     lea rdx, searchSpec
  1255 0000206F B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1256 00002074 CD41                <1>     int 41h
  1257 00002076 0F828CF1FFFF        <1>     jc badFileError
  1258 0000207C 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1259 00002083 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1260                              <1> .lp:
  1261 00002086 B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1262 0000208B B43F                <1>     mov ah, 3Fh ;Read handle
  1263 0000208D CD41                <1>     int 41h
  1264 0000208F 89C1                <1>     mov ecx, eax
  1265 00002091 67E317              <1>     jecxz .exit
  1266 00002094 53                  <1>     push rbx    ;Save the original in handle
  1267 00002095 BB01000000          <1>     mov ebx, 1  ;STDOUT
  1268 0000209A B440                <1>     mov ah, 40h
  1269 0000209C CD41                <1>     int 41h
  1270 0000209E 5B                  <1>     pop rbx ;Get back the original read handle
  1271 0000209F 720F                <1>     jc .exitBad
  1272 000020A1 39C8                <1>     cmp eax, ecx
  1273 000020A3 74E1                <1>     je .lp
  1274 000020A5 FFC9                <1>     dec ecx ;One less for a ^Z
  1275 000020A7 39C8                <1>     cmp eax, ecx
  1276 000020A9 7505                <1>     jne .exitBad
  1277                              <1> .exit:
  1278 000020AB B43E                <1>     mov ah, 3Eh ;Close handle
  1279 000020AD CD41                <1>     int 41h
  1280                              <1>     return
    19                              <2> %%_ret:
    20 000020AF C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1281                              <1> .exitBad:
  1282                              <1>     ;Print a disk error message... use a table to build the message but for
  1283                              <1>     ; now, just exit
  1284                              <1>     ;If it is a char device, don't print a error
  1285 000020B0 EBF9                <1>     jmp short .exit
  1286                              <1> 
  1287                              <1> exit:
  1288 000020B2 F60574DFFFFFFF      <1>     test byte [permaSwitch], -1
  1289                              <1>     retnz   ;Return if the flag is set
    51                              <2> cret nz
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000020B9 75(AF)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
  1290 000020BB 488B0555DFFFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1291 000020C2 483DFFFFFFFF        <1>     cmp rax, -1
  1292                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000020C8 74(AF)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
  1293 000020CA 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1294                              <1> 
  1295 000020CE 488B1559DFFFFF      <1>     mov rdx, qword [parentInt42]
  1296 000020D5 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
  1297 000020D9 B842250000          <1>     mov eax, 2542h
  1298 000020DE CD41                <1>     int 41h
  1299                              <1> 
  1300 000020E0 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1301 000020E5 CD41                <1>     int 41h
  1302                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    19                              <2> %%_ret:
    20 000020E7 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1303                              <1> 
  1304                              <1> launchChild:
  1305                              <1> ;We run EXEC on this and the child task will return via applicationReturn
  1306                              <1> ;Here we must search the CWD or all path componants before failing
  1307                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
  1308 000020E8 488D15DCDFFFFF      <1>     lea rdx, cmdFFBlock
  1309 000020EF B41A                <1>     mov ah, 1Ah     ;Set DTA for task
  1310 000020F1 CD41                <1>     int 41h
  1311                              <1> 
  1312 000020F3 8B05CBDFFFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
  1313 000020F9 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1314 000020FE 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1315 00002103 3D20202020          <1>     cmp eax, "    " ;Only if we have four spaces do we proceed here
  1316 00002108 741D                <1>     je .noExt
  1317 0000210A E894EFFFFF          <1>     call checkExtensionExec ;ZF=ZE => Executable
  1318 0000210F 0F8510010000        <1>     jnz .dfltErrExit
  1319                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1320 00002115 0F820A010000        <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
  1321                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1322                              <1>     ;So it is a com or exe that we are searching for for now
  1323 0000211B 488D3DF4E0FFFF      <1>     lea rdi, cmdPathSpec
  1324 00002122 4889FA              <1>     mov rdx, rdi
  1325 00002125 EB24                <1>     jmp short .search
  1326                              <1> .noExt:
  1327                              <1>     ;If the filename has no extension, append a .*
  1328                              <1>     ;Use bl as flags. bl[0] => COM found, bl[1] => EXE found, bl[2] => BAT found
  1329 00002127 31DB                <1>     xor ebx, ebx
  1330 00002129 488D3DE6E0FFFF      <1>     lea rdi, cmdPathSpec
  1331 00002130 4889FA              <1>     mov rdx, rdi
  1332 00002133 31C0                <1>     xor eax, eax
  1333 00002135 B9FFFFFFFF          <1>     mov ecx, -1
  1334 0000213A F2AE                <1>     repne scasb
  1335 0000213C 48FFCF              <1>     dec rdi ;Point to the terminating null
  1336 0000213F 4889FD              <1>     mov rbp, rdi    ;Temporarily store the ptr to the . in rbp
  1337 00002142 66B82E2A            <1>     mov ax, ".*"
  1338 00002146 66AB                <1>     stosw
  1339 00002148 30C0                <1>     xor al, al  ;Store terminating null
  1340 0000214A AA                  <1>     stosb
  1341                              <1> .search:
  1342 0000214B B906000000          <1>     mov ecx, dirIncFiles
  1343 00002150 B44E                <1>     mov ah, 4Eh ;Find First File
  1344 00002152 CD41                <1>     int 41h
  1345 00002154 0F82CB000000        <1>     jc .dfltErrExit
  1346 0000215A E879000000          <1>     call .noExtCheckExt
  1347                              <1> .moreSearch:
  1348 0000215F B44F                <1>     mov ah, 4Fh
  1349 00002161 CD41                <1>     int 41h
  1350 00002163 7207                <1>     jc .noMoreFiles
  1351 00002165 E86E000000          <1>     call .noExtCheckExt
  1352 0000216A EBF3                <1>     jmp short .moreSearch
  1353                              <1> .noMoreFiles:
  1354 0000216C 85DB                <1>     test ebx, ebx
  1355 0000216E 0F84B1000000        <1>     jz .dfltErrExit
  1356                              <1> ;So we have a valid executable
  1357 00002174 4889EF              <1>     mov rdi, rbp    ;Get back ptr to the .*,0
  1358 00002177 F7C301000000        <1>     test ebx, 1
  1359 0000217D 7407                <1>     jz .launchexebat
  1360 0000217F B82E434F4D          <1>     mov eax, ".COM"
  1361 00002184 EB14                <1>     jmp short .launch
  1362                              <1> .launchexebat:
  1363 00002186 F7C302000000        <1>     test ebx, 2
  1364 0000218C 7407                <1>     jz .launchbat
  1365 0000218E B82E455845          <1>     mov eax, ".EXE"
  1366 00002193 EB05                <1>     jmp short .launch
  1367                              <1> .launchbat:
  1368                              <1> ;Temporary For BAT
  1369 00002195 E98B000000          <1>     jmp .dfltErrExit
  1370                              <1> .launch:
  1371 0000219A AB                  <1>     stosd
  1372 0000219B 30C0                <1>     xor al, al
  1373 0000219D AA                  <1>     stosb   ;Store the terminating null
  1374 0000219E 488D1D51DFFFFF      <1>     lea rbx, launchBlock
  1375 000021A5 31C0                <1>     xor eax, eax
  1376 000021A7 488903              <1>     mov qword [rbx + execProg.pEnv], rax    ;Tell DOS to copy my current Env
  1377 000021AA 498D8080000000      <1>     lea rax, qword [r8 + cmdLineCnt]
  1378 000021B1 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1379 000021B5 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1380 000021B9 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1381 000021BD 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1382 000021C1 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1383 000021C5 488D154AE0FFFF      <1>     lea rdx, cmdPathSpec
  1384 000021CC B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1385 000021D1 CD41                <1>     int 41h
  1386 000021D3 E94D000000          <1>     jmp .dfltErrExit    ;If something goes wrong, error out
  1387                              <1> .noExtCheckExt:
  1388                              <1>     ;mov eax, dword [cmdFFBlock + ffBlock.asciizName + filename.fExt]
  1389 000021D8 488D350ADFFFFF      <1>     lea rsi, dword [cmdFFBlock + ffBlock.asciizName]
  1390 000021DF 488D3D7FE0FFFF      <1>     lea rdi, fcbCmdSpec
  1391 000021E6 E8DC030000          <1>     call asciiFilenameToFCB
  1392 000021EB 8B057CE0FFFF        <1>     mov eax, dword [fcbCmdSpec + filename.fExt]
  1393 000021F1 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1394 000021F6 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1395 000021FB 3D434F4D20          <1>     cmp eax, "COM "
  1396 00002200 7507                <1>     jne .neceexe
  1397 00002202 81CB01000000        <1>     or ebx, 1
  1398                              <1>     return
    19                              <2> %%_ret:
    20 00002208 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1399                              <1> .neceexe:
  1400 00002209 3D45584520          <1>     cmp eax, "EXE "
  1401 0000220E 7507                <1>     jne .necebat
  1402 00002210 81CB02000000        <1>     or ebx, 2
  1403                              <1>     return
    19                              <2> %%_ret:
    20 00002216 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1404                              <1> .necebat:
  1405 00002217 3D42415420          <1>     cmp eax, "BAT "
  1406                              <1>     retne
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000221C 75(16)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
  1407 0000221E 81CB04000000        <1>     or ebx, 4
  1408                              <1>     return
    19                              <2> %%_ret:
    20 00002224 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
  1409                              <1> 
  1410                              <1> .dfltErrExit:
  1411 00002225 488D1538E5FFFF      <1>     lea rdx, badCmd
  1412 0000222C B409                <1>     mov ah, 09h
  1413 0000222E CD41                <1>     int 41h
  1414                              <1>     return
    19                              <2> %%_ret:
    20 00002230 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    17                                  %include "./Utils/COMMAND/Source/cmdUtils.asm"
    18                              <1> ;Misc functions and subroutines for command.com
    19                              <1> 
    20                              <1> printCRLF:
    21 00002231 488D15CFE4FFFF      <1>     lea rdx, crlf
    22 00002238 BB02000000          <1>     mov ebx, 2
    23 0000223D B440                <1>     mov ah, 40h ;Print a new line
    24 0000223F B902000000          <1>     mov ecx, 2  ;Two chars to write
    25 00002244 CD41                <1>     int 41h
    26                              <1>     return
    19                              <2> %%_ret:
    20 00002246 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    27                              <1> printDate:
    28                              <1> ;Input: eax = Packed Date
    29                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
    30                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
    31                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
    32                              <1> ;       ebx = 0 => Print two digit year
    33                              <1> ;       ebx = 1 => Print four digit year
    34 00002247 53                  <1>     push rbx
    35 00002248 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    36 0000224A 803DE5DDFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    37 00002251 7240                <1>     jb .usDate
    38 00002253 777C                <1>     ja .jpnDate
    39                              <1> ;European: DD/MM/YY
    40 00002255 251F000000          <1>     and eax, 1Fh    ;Save day bits
    41 0000225A E8B0000000          <1>     call .printFirst
    42 0000225F 8A15DCDDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    43 00002265 B402                <1>     mov ah, 02h
    44 00002267 CD41                <1>     int 41h
    45                              <1> 
    46 00002269 89C8                <1>     mov eax, ecx
    47 0000226B 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    48 00002270 C1E805              <1>     shr eax, 5
    49 00002273 E8B3000000          <1>     call .printSecond
    50                              <1> 
    51 00002278 8A15C3DDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    52 0000227E B402                <1>     mov ah, 02h
    53 00002280 CD41                <1>     int 41h
    54                              <1> 
    55 00002282 89C8                <1>     mov eax, ecx
    56 00002284 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    57 00002289 C1E809              <1>     shr eax, 9
    58 0000228C 5B                  <1>     pop rbx ;Get the year signature back
    59 0000228D E8A9000000          <1>     call .printYear
    60                              <1>     return
    19                              <2> %%_ret:
    20 00002292 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    61                              <1> .usDate:
    62                              <1> ;US: MM/DD/YY
    63 00002293 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    64 00002298 C1E805              <1>     shr eax, 5
    65 0000229B E86F000000          <1>     call .printFirst
    66                              <1> 
    67 000022A0 8A159BDDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    68 000022A6 B402                <1>     mov ah, 02h
    69 000022A8 CD41                <1>     int 41h
    70                              <1> 
    71 000022AA 89C8                <1>     mov eax, ecx
    72 000022AC 251F000000          <1>     and eax, 1Fh    ;Save day bits
    73 000022B1 E875000000          <1>     call .printSecond
    74                              <1> 
    75 000022B6 8A1585DDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    76 000022BC B402                <1>     mov ah, 02h
    77 000022BE CD41                <1>     int 41h
    78                              <1> 
    79 000022C0 89C8                <1>     mov eax, ecx
    80 000022C2 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    81 000022C7 C1E809              <1>     shr eax, 9
    82 000022CA 5B                  <1>     pop rbx ;Get the year signature back
    83 000022CB E86B000000          <1>     call .printYear
    84                              <1>     return
    19                              <2> %%_ret:
    20 000022D0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    85                              <1> .jpnDate:
    86                              <1> ;Japan: YY/MM/DD
    87 000022D1 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    88 000022D6 C1E809              <1>     shr eax, 9
    89 000022D9 5B                  <1>     pop rbx ;Get the year signature back
    90 000022DA E85C000000          <1>     call .printYear
    91                              <1> 
    92 000022DF 8A155CDDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    93 000022E5 B402                <1>     mov ah, 02h
    94 000022E7 CD41                <1>     int 41h
    95                              <1> 
    96 000022E9 89C8                <1>     mov eax, ecx
    97 000022EB 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    98 000022F0 C1E805              <1>     shr eax, 5
    99 000022F3 E833000000          <1>     call .printSecond
   100                              <1> 
   101 000022F8 8A1543DDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
   102 000022FE B402                <1>     mov ah, 02h
   103 00002300 CD41                <1>     int 41h
   104                              <1> 
   105 00002302 89C8                <1>     mov eax, ecx
   106 00002304 251F000000          <1>     and eax, 1Fh    ;Save day bits
   107 00002309 E81D000000          <1>     call .printSecond
   108                              <1>     return
    19                              <2> %%_ret:
    20 0000230E C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   109                              <1> 
   110                              <1> ;Each of these require eax setup correctly
   111                              <1> .printFirst:
   112 0000230F 51                  <1>     push rcx
   113 00002310 E84B040000          <1>     call getDecimalWord
   114 00002315 84ED                <1>     test ch, ch ;Do we have an upper digit?
   115 00002317 7504                <1>     jnz .skipSpace
   116 00002319 88CD                <1>     mov ch, cl
   117 0000231B B120                <1>     mov cl, " "
   118                              <1> .skipSpace:
   119 0000231D 88CA                <1>     mov dl, cl
   120 0000231F B402                <1>     mov ah, 02h
   121 00002321 CD41                <1>     int 41h
   122 00002323 88EA                <1>     mov dl, ch
   123 00002325 B402                <1>     mov ah, 02h
   124 00002327 CD41                <1>     int 41h
   125 00002329 59                  <1>     pop rcx
   126                              <1>     return
    19                              <2> %%_ret:
    20 0000232A C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   127                              <1> .printSecond:
   128 0000232B 51                  <1>     push rcx
   129 0000232C E82F040000          <1>     call getDecimalWord
   130 00002331 84ED                <1>     test ch, ch ;Do we have an upper digit?
   131 00002333 75E8                <1>     jnz .skipSpace
   132 00002335 88CD                <1>     mov ch, cl
   133 00002337 B130                <1>     mov cl, "0"
   134 00002339 EBE2                <1>     jmp short .skipSpace
   135                              <1> .printYear:
   136 0000233B 05BC070000          <1>     add eax, 1980
   137 00002340 51                  <1>     push rcx
   138 00002341 53                  <1>     push rbx
   139 00002342 E819040000          <1>     call getDecimalWord ;Get unpacked in rcx
   140 00002347 5B                  <1>     pop rbx
   141 00002348 84DB                <1>     test bl, bl
   142 0000234A 740C                <1>     jz .twoDigitYear
   143 0000234C 88CA                <1>     mov dl, cl  ;Print the first digit
   144 0000234E B402                <1>     mov ah, 02h
   145 00002350 CD41                <1>     int 41h
   146 00002352 88EA                <1>     mov dl, ch  ;Print the second digit
   147 00002354 B402                <1>     mov ah, 02h
   148 00002356 CD41                <1>     int 41h
   149                              <1> .twoDigitYear:
   150 00002358 C1E910              <1>     shr ecx, 10h    ;Get high word low
   151 0000235B 88CA                <1>     mov dl, cl  ;Print the upper digit
   152 0000235D B402                <1>     mov ah, 02h
   153 0000235F CD41                <1>     int 41h
   154 00002361 88EA                <1>     mov dl, ch  ;Print the lower digit
   155 00002363 B402                <1>     mov ah, 02h
   156 00002365 CD41                <1>     int 41h
   157 00002367 59                  <1>     pop rcx
   158                              <1>     return
    19                              <2> %%_ret:
    20 00002368 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   159                              <1> 
   160                              <1> 
   161                              <1> printTime:
   162                              <1> ;Input: eax = Packed Time
   163                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   164                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   165 00002369 89C1                <1>     mov ecx, eax
   166 0000236B 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   167 00002370 C1E80B              <1>     shr eax, 11
   168 00002373 803DCDDCFFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   169 0000237A 750B                <1>     jne .ampm
   170 0000237C E85A000000          <1>     call .printHours
   171 00002381 E831000000          <1>     call .printMinutes
   172                              <1>     return
    19                              <2> %%_ret:
    20 00002386 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   173                              <1> .ampm:
   174 00002387 3D0C000000          <1>     cmp eax, 12
   175 0000238C 7713                <1>     ja .pm
   176 0000238E 7416                <1>     je .pm2
   177 00002390 E846000000          <1>     call .printHours
   178 00002395 E81D000000          <1>     call .printMinutes
   179 0000239A B261                <1>     mov dl, "a"
   180 0000239C B402                <1>     mov ah, 02h
   181 0000239E CD41                <1>     int 41h
   182                              <1>     return
    19                              <2> %%_ret:
    20 000023A0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   183                              <1> .pm:
   184 000023A1 2D0C000000          <1>     sub eax, 12
   185                              <1> .pm2:
   186 000023A6 E830000000          <1>     call .printHours
   187 000023AB E807000000          <1>     call .printMinutes
   188 000023B0 B270                <1>     mov dl, "p"
   189 000023B2 B402                <1>     mov ah, 02h
   190 000023B4 CD41                <1>     int 41h
   191                              <1>     return
    19                              <2> %%_ret:
    20 000023B6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   192                              <1> .printMinutes:
   193 000023B7 8A1586DCFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   194 000023BD B402                <1>     mov ah, 02h
   195 000023BF CD41                <1>     int 41h
   196                              <1> 
   197 000023C1 89C8                <1>     mov eax, ecx
   198 000023C3 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   199 000023C8 C1E805              <1>     shr eax, 5
   200                              <1> .printMinutesAlt:
   201 000023CB 51                  <1>     push rcx
   202 000023CC E88F030000          <1>     call getDecimalWord
   203 000023D1 84ED                <1>     test ch, ch ;Do we have an upper digit?
   204 000023D3 7514                <1>     jnz .skipSpace
   205 000023D5 88CD                <1>     mov ch, cl
   206 000023D7 B130                <1>     mov cl, "0"
   207 000023D9 EB0E                <1>     jmp short .skipSpace
   208                              <1> .printHours:
   209 000023DB 51                  <1>     push rcx
   210 000023DC E87F030000          <1>     call getDecimalWord
   211 000023E1 84ED                <1>     test ch, ch ;Do we have an upper digit?
   212 000023E3 7504                <1>     jnz .skipSpace
   213 000023E5 88CD                <1>     mov ch, cl
   214 000023E7 B120                <1>     mov cl, " "
   215                              <1> .skipSpace:
   216 000023E9 88CA                <1>     mov dl, cl
   217 000023EB B402                <1>     mov ah, 02h
   218 000023ED CD41                <1>     int 41h
   219 000023EF 88EA                <1>     mov dl, ch
   220 000023F1 B402                <1>     mov ah, 02h
   221 000023F3 CD41                <1>     int 41h
   222 000023F5 59                  <1>     pop rcx
   223                              <1>     return
    19                              <2> %%_ret:
    20 000023F6 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   224                              <1> 
   225                              <1> 
   226                              <1> putVersionInPrompt:
   227 000023F7 488D157CE5FFFF      <1>     lea rdx, dosVer
   228 000023FE B409                <1>     mov ah, 09h ;Print String
   229 00002400 CD41                <1>     int 41h
   230 00002402 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   231 00002404 CD41                <1>     int 41h
   232 00002406 50                  <1>     push rax    ;Save minor version
   233 00002407 E89C000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   234 0000240C E8B4000000          <1>     call printPackedBCD ;Print al
   235 00002411 B22E                <1>     mov dl, "."
   236 00002413 B402                <1>     mov ah, 02h
   237 00002415 CD41                <1>     int 41h
   238 00002417 58                  <1>     pop rax
   239 00002418 88E0                <1>     mov al, ah  ;Get the minor version low
   240 0000241A E889000000          <1>     call hexToBCD
   241 0000241F E8A1000000          <1>     call printPackedBCD
   242                              <1>     return
    19                              <2> %%_ret:
    20 00002424 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   243                              <1> putEscInPrompt:
   244 00002425 B21B                <1>     mov dl, ESC
   245 00002427 EB1C                <1>     jmp short outChar
   246                              <1> 
   247                              <1> putMoneyInPrompt:
   248 00002429 B224                <1>     mov dl, "$"
   249 0000242B EB18                <1>     jmp short outChar
   250                              <1> 
   251                              <1> putEquInPrompt:
   252 0000242D B23D                <1>     mov dl, "="
   253 0000242F EB14                <1>     jmp short outChar
   254                              <1> 
   255                              <1> putPipeInPrompt:
   256 00002431 B27C                <1>     mov dl, "|"
   257 00002433 EB10                <1>     jmp short outChar
   258                              <1> 
   259                              <1> putGTinPrompt:
   260 00002435 B23E                <1>     mov dl, ">"
   261 00002437 EB0C                <1>     jmp short outChar
   262                              <1> 
   263                              <1> putLTinPrompt:
   264 00002439 B23C                <1>     mov dl, "<"
   265 0000243B EB08                <1>     jmp short outChar
   266                              <1> 
   267                              <1> putDriveInPrompt:
   268 0000243D B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   269 0000243F CD41                <1>     int 41h
   270 00002441 0441                <1>     add al, "A" ;Convert to letter
   271 00002443 88C2                <1>     mov dl, al
   272                              <1> outChar:
   273 00002445 B402                <1>     mov ah, 02h ;Echo to STDOUT
   274 00002447 CD41                <1>     int 41h
   275                              <1>     return
    19                              <2> %%_ret:
    20 00002449 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   276                              <1> putCWDInPrompt:
   277 0000244A 488D3D0BDCFFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   278 00002451 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   279 00002453 CD41                <1>     int 41h
   280 00002455 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   281 00002457 FEC2                <1>     inc dl
   282 00002459 0441                <1>     add al, "A" ;Convert to letter
   283 0000245B B43A                <1>     mov ah, ":"
   284 0000245D 66AB                <1>     stosw   ;Store X:, rdi+=2
   285 0000245F 8A05C6DBFFFF        <1>     mov al, byte [pathSep]
   286 00002465 AA                  <1>     stosb   ;Store pathSep, inc rdi
   287 00002466 B447                <1>     mov ah, 47h ;Get Current Working Directory
   288 00002468 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   289 0000246B CD41                <1>     int 41h
   290 0000246D E884000000          <1>     call strlen
   291 00002472 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   292                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   293 00002478 B440                <1>     mov ah, 40h ;Write to handle
   294 0000247A BB01000000          <1>     mov ebx, 1  ;STDOUT
   295 0000247F 488D15D6DBFFFF      <1>     lea rdx, currDirStr
   296 00002486 CD41                <1>     int 41h
   297                              <1>     return
    19                              <2> %%_ret:
    20 00002488 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   298                              <1> 
   299                              <1> BCDtoHex:
   300                              <1> ;Converts a BCD value to a Hex byte
   301                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   302 00002489 51                  <1>     push rcx
   303 0000248A 0FB6C0              <1>     movzx eax, al   ;Zero extend
   304 0000248D 89C1                <1>     mov ecx, eax    ;Save al in ecx
   305 0000248F 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   306 00002494 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   307 0000249A C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   308                              <1> .bth:
   309 0000249D 050A000000          <1>     add eax, 10
   310 000024A2 FFC9                <1>     dec ecx
   311 000024A4 75F7                <1>     jnz .bth
   312 000024A6 59                  <1>     pop rcx
   313 000024A7 C3                  <1>     ret
   314                              <1> 
   315                              <1> hexToBCD:
   316                              <1> ;Converts a Hex byte into two BCD digits
   317                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   318 000024A8 51                  <1>     push rcx
   319 000024A9 0FB6C0              <1>     movzx eax, al   ;Zero extend
   320 000024AC 31C9                <1>     xor ecx, ecx
   321                              <1> .htb0:
   322 000024AE 3D0A000000          <1>     cmp eax, 10
   323 000024B3 7209                <1>     jb .htb1
   324 000024B5 2D0A000000          <1>     sub eax, 10
   325 000024BA FFC1                <1>     inc ecx
   326 000024BC EBF0                <1>     jmp short .htb0
   327                              <1> .htb1:
   328 000024BE C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   329 000024C1 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   330 000024C3 59                  <1>     pop rcx
   331 000024C4 C3                  <1>     ret
   332                              <1> 
   333                              <1> printPackedBCD:
   334                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   335                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   336                              <1> ;Preserves all registers
   337 000024C5 50                  <1>     push rax
   338 000024C6 52                  <1>     push rdx
   339 000024C7 88C4                <1>     mov ah, al
   340 000024C9 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   341 000024CB 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   342 000024CE 7508                <1>     jnz .upperNybble
   343 000024D0 B220                <1>     mov dl, " "
   344 000024D2 B402                <1>     mov ah, 02h
   345 000024D4 CD41                <1>     int 41h
   346 000024D6 EB0E                <1>     jmp short .lowerNybble
   347                              <1> .upperNybble:
   348 000024D8 50                  <1>     push rax
   349 000024D9 C0EC04              <1>     shr ah, 4
   350 000024DC 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   351 000024DF 88E2                <1>     mov dl, ah
   352 000024E1 B402                <1>     mov ah, 02h ;Print DL
   353 000024E3 CD41                <1>     int 41h
   354 000024E5 58                  <1>     pop rax
   355                              <1> .lowerNybble:
   356 000024E6 0430                <1>     add al, "0"
   357 000024E8 88C2                <1>     mov dl, al
   358 000024EA B402                <1>     mov ah, 02h ;Print DL
   359 000024EC CD41                <1>     int 41h
   360 000024EE 5A                  <1>     pop rdx
   361 000024EF 58                  <1>     pop rax
   362                              <1>     return
    19                              <2> %%_ret:
    20 000024F0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   363                              <1> 
   364                              <1> getCurrentDrive:
   365                              <1> ;Returns the 0 based current drive in al
   366 000024F1 B419                <1>     mov ah, 19h
   367 000024F3 CD41                <1>     int 41h
   368                              <1>     return
    19                              <2> %%_ret:
    20 000024F5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   369                              <1> 
   370                              <1> strlen:
   371                              <1> ;Gets the length of a ASCIIZ string
   372                              <1> ;Input: rdi = Source buffer
   373                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   374 000024F6 50                  <1>     push rax
   375 000024F7 57                  <1>     push rdi
   376 000024F8 30C0                <1>     xor al, al
   377 000024FA 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   378 000024FC FFC9                <1>     dec ecx ;rcx = -1
   379 000024FE F2AE                <1>     repne scasb
   380 00002500 F7D1                <1>     not ecx
   381 00002502 5F                  <1>     pop rdi
   382 00002503 58                  <1>     pop rax
   383                              <1>     return
    19                              <2> %%_ret:
    20 00002504 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   384                              <1> 
   385                              <1> findTerminatorOrEOC:
   386                              <1> ;Advances rsi to the next string terminator char or the next End of command
   387                              <1> ; char
   388                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   389                              <1> ;If a end of command char found, also sets CF
   390 00002505 AC                  <1>     lodsb
   391 00002506 3C0D                <1>     cmp al, CR
   392 00002508 7419                <1>     je .endOfInput
   393 0000250A E82B000000          <1>     call isALterminator
   394 0000250F 7419                <1>     jz .exit
   395 00002511 3A0514DBFFFF        <1>     cmp al, byte [pathSep]
   396 00002517 7411                <1>     je .exit
   397 00002519 3A050DDBFFFF        <1>     cmp al, byte [switchChar]
   398 0000251F 7409                <1>     je .exit
   399 00002521 EBE2                <1>     jmp short findTerminatorOrEOC
   400                              <1> .endOfInput:
   401 00002523 E802000000          <1>     call .exit
   402 00002528 F9                  <1>     stc 
   403                              <1>     return
    19                              <2> %%_ret:
    20 00002529 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   404                              <1> .exit:
   405 0000252A 48FFCE              <1>     dec rsi ;Point to the terminating char
   406                              <1>     return
    19                              <2> %%_ret:
    20 0000252D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   407                              <1> 
   408                              <1> findTerminator:
   409                              <1> ;Advances rsi to the next string terminator char
   410                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   411 0000252E AC                  <1>     lodsb
   412 0000252F E806000000          <1>     call isALterminator
   413 00002534 75F8                <1>     jnz findTerminator
   414 00002536 48FFCE              <1>     dec rsi
   415                              <1>     return
    19                              <2> %%_ret:
    20 00002539 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   416                              <1> isALterminator:
   417                              <1> ;Returns: ZF=NZ if al is not a terminator (Not including CR)
   418                              <1> ;         ZF=ZY if al is a terminator
   419 0000253A 3C20                <1>     cmp al, " "
   420                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000253C 74(39)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   421 0000253E 3C3B                <1>     cmp al, ";"
   422                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002540 74(39)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   423 00002542 3C3D                <1>     cmp al, "="
   424                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002544 74(39)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   425 00002546 3C2C                <1>     cmp al, ","
   426                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002548 74(39)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   427 0000254A 3C09                <1>     cmp al, TAB
   428                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000254C 74(39)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   429 0000254E 3C0A                <1>     cmp al, LF
   430                              <1>     return
    19                              <2> %%_ret:
    20 00002550 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   431                              <1> 
   432                              <1> findEndOfCommand:
   433                              <1> ;Moves rsi to the | or CR that terminates this command
   434 00002551 AC                  <1>     lodsb
   435 00002552 E806000000          <1>     call isALEndOfCommand
   436 00002557 75F8                <1>     jnz findEndOfCommand
   437 00002559 48FFCE              <1>     dec rsi
   438                              <1>     return
    19                              <2> %%_ret:
    20 0000255C C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   439                              <1> isALEndOfCommand:
   440 0000255D 3C7C                <1>     cmp al, "|"
   441                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 0000255F 74(5C)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   442 00002561 3C0D                <1>     cmp al, CR
   443                              <1>     return
    19                              <2> %%_ret:
    20 00002563 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   444                              <1> 
   445                              <1> scanForRedir:
   446                              <1> ;Returns: AL = 0 => No redirection, terminate with CR
   447                              <1> ;         AL = 1 => Redirection, type <
   448                              <1> ;         AL = 10 => Redir, type >
   449                              <1> ;         AL = 20 => Redir, type >>
   450                              <1> ;If multiple redirs found, the last one of that type counts.
   451 00002564 56                  <1>     push rsi
   452 00002565 55                  <1>     push rbp
   453 00002566 30E4                <1>     xor ah, ah
   454                              <1> .lp:
   455 00002568 AC                  <1>     lodsb
   456 00002569 3C3E                <1>     cmp al, ">"
   457                              <1> .exit:
   458 0000256B 5D                  <1>     pop rbp
   459 0000256C 5E                  <1>     pop rsi
   460                              <1>     return
    19                              <2> %%_ret:
    20 0000256D C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   461                              <1> 
   462                              <1> 
   463                              <1> skipSpaces:
   464                              <1> ;Also skips tabs
   465                              <1> ;Input: rsi must point to the start of the data string
   466                              <1> ;Output: rsi points to the first non-space char
   467 0000256E 803E20              <1>     cmp byte [rsi], " "
   468 00002571 7405                <1>     je .skip    ;If equal to a space, skip it
   469 00002573 803E09              <1>     cmp byte [rsi], TAB
   470                              <1>     retne   ;If not equal to a tab or space, return
    59                              <2> cret ne
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 00002576 75(6D)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   471                              <1> .skip:
   472 00002578 48FFC6              <1>     inc rsi
   473 0000257B EBF1                <1>     jmp short skipSpaces
   474                              <1> 
   475                              <1> printPrompt:
   476 0000257D 66813DA3DAFFFFFFFF  <1>     cmp word [promptPtr], -1
   477 00002586 750B                <1>     jne .validPrompt
   478                              <1>     ;Here we print the default prompt
   479 00002588 E8BDFEFFFF          <1>     call putCWDInPrompt
   480 0000258D E8A3FEFFFF          <1>     call putGTinPrompt
   481                              <1>     return
    19                              <2> %%_ret:
    20 00002592 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   482                              <1> .validPrompt:
   483                              <1>     return
    19                              <2> %%_ret:
    20 00002593 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   484                              <1> 
   485                              <1> clearCommandState:
   486                              <1> ;Clears the command state
   487 00002594 488D3D16DBFFFF      <1>     lea rdi, cmdStatePtr
   488 0000259B B90A000000          <1>     mov ecx, cmdStateL
   489 000025A0 31C0                <1>     xor eax, eax
   490 000025A2 F3AA                <1>     rep stosb
   491                              <1>     return
    19                              <2> %%_ret:
    20 000025A4 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   492                              <1> 
   493                              <1> clearCommandLineState:
   494                              <1> ;Clears the command line state after a 0Dh encountered
   495 000025A5 488D3DF3DAFFFF      <1>     lea rdi, cmdLineStatePtr
   496 000025AC B91C000000          <1>     mov ecx, cmdLineStateL
   497 000025B1 31C0                <1>     xor eax, eax
   498 000025B3 F3AA                <1>     rep stosb
   499                              <1>     return
    19                              <2> %%_ret:
    20 000025B5 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   500                              <1> 
   501                              <1> asciiToFCB:
   502                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   503                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   504                              <1> ;Also doesn't check if chars are valid
   505                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   506                              <1> ;Name is space padded.
   507                              <1> ;Input: rsi = ASCII string buffer
   508                              <1> ;       rdi = FCB name buffer
   509                              <1> ;Output: al = Char that terminated the source string 
   510 000025B6 53                  <1>     push rbx    
   511 000025B7 57                  <1>     push rdi
   512 000025B8 B90B000000          <1>     mov ecx, 11
   513 000025BD B020                <1>     mov al, " "
   514 000025BF F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   515 000025C1 5F                  <1>     pop rdi
   516 000025C2 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   517 000025C5 EB1D                <1>     jmp short asciiFilenameToFCB.processName
   518                              <1> asciiFilenameToFCB:
   519                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   520                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   521                              <1> ;Also doesn't check if chars are valid
   522                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   523                              <1> ;Name is space padded.
   524                              <1> ;Input: rsi = ASCII string buffer
   525                              <1> ;       rdi = FCB name buffer
   526                              <1> ;Output: al = Char that terminated the source string 
   527 000025C7 53                  <1>     push rbx    
   528 000025C8 57                  <1>     push rdi
   529 000025C9 B90B000000          <1>     mov ecx, 11
   530 000025CE B020                <1>     mov al, " "
   531 000025D0 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   532 000025D2 5F                  <1>     pop rdi
   533 000025D3 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   534                              <1>     ;Preprocess for Dir Searches
   535 000025D6 803E2E              <1>     cmp byte [rsi], "."
   536 000025D9 7509                <1>     jne .processName
   537 000025DB A4                  <1>     movsb   ;Store the first dot
   538 000025DC 803E2E              <1>     cmp byte [rsi], "."
   539 000025DF 752C                <1>     jne .exitBadChar
   540 000025E1 A4                  <1>     movsb
   541 000025E2 EB29                <1>     jmp short .exitBadChar
   542                              <1> .processName:
   543 000025E4 AC                  <1>     lodsb   ;Get the char in al
   544 000025E5 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   545 000025E7 7426                <1>     jz .exit
   546 000025E9 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   547 000025EB 7407                <1>     je .extSpace
   548 000025ED 3C2E                <1>     cmp al, "."
   549 000025EF 740C                <1>     je .ext
   550 000025F1 AA                  <1>     stosb   ;Store the char
   551 000025F2 EBF0                <1>     jmp short .processName
   552                              <1> .extSpace:
   553                              <1> ;Now we scan for a period in the name
   554 000025F4 AC                  <1>     lodsb   ;Get a char and increase rsi
   555 000025F5 84C0                <1>     test al, al
   556 000025F7 7416                <1>     jz .exit
   557 000025F9 3C2E                <1>     cmp al, "."     ;If al is not a period...
   558 000025FB 75F7                <1>     jne .extSpace   ; keep searching
   559                              <1> .ext:
   560 000025FD 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   561                              <1> .processExt:
   562 00002601 AC                  <1>     lodsb
   563 00002602 84C0                <1>     test al, al
   564 00002604 7409                <1>     jz .exit
   565 00002606 3C20                <1>     cmp al, " "
   566 00002608 7405                <1>     je .exit
   567 0000260A AA                  <1>     stosb
   568 0000260B EBF4                <1>     jmp short .processExt
   569                              <1> .exitBadChar:
   570 0000260D 30C0                <1>     xor al, al  ;Return a null terminator
   571                              <1> .exit:
   572 0000260F 5B                  <1>     pop rbx
   573                              <1>     return
    19                              <2> %%_ret:
    20 00002610 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   574                              <1> 
   575                              <1> FCBToAsciiz:
   576                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   577                              <1> ;Name is space padded too
   578                              <1> ;Input: rsi = FCB name buffer
   579                              <1> ;       rdi = ASCIIZ string buffer
   580 00002611 B908000000          <1>     mov ecx, 8
   581 00002616 F3A4                <1>     rep movsb   ;Move the name over
   582                              <1> .scanNameSpace:
   583 00002618 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   584 0000261C 750D                <1>     jne .ext
   585 0000261E 48FFCF              <1>     dec rdi
   586 00002621 FFC1                <1>     inc ecx
   587 00002623 81F908000000        <1>     cmp ecx, 8
   588 00002629 72ED                <1>     jb .scanNameSpace
   589                              <1> .ext:
   590 0000262B 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   591 00002630 7506                <1>     jne .validExt
   592 00002632 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   593 00002636 7415                <1>     je .exit
   594                              <1> .validExt:
   595 00002638 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   596 0000263A AA                  <1>     stosb
   597 0000263B B903000000          <1>     mov ecx, 3
   598 00002640 F3A4                <1>     rep movsb   ;Move the three extension chars over
   599                              <1> .scanExtSpace:
   600 00002642 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   601 00002646 7505                <1>     jne .exit
   602 00002648 48FFCF              <1>     dec rdi
   603 0000264B EBF5                <1>     jmp short .scanExtSpace
   604                              <1> .exit:
   605 0000264D 31C0                <1>     xor eax, eax
   606 0000264F AA                  <1>     stosb   ;Store a null at the end
   607                              <1>     return
    19                              <2> %%_ret:
    20 00002650 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   608                              <1> 
   609                              <1> buildCommandPath:
   610                              <1> ;Based on the first argument on the command line
   611                              <1> ; will build a full ASCIIZ path in searchSpec to the file/dir specified
   612                              <1>     ;If this is a relative path, will handle correctly (tho unnecessary)
   613 00002651 0FB6055EDAFFFF      <1>     movzx eax, byte [arg1Off]
   614 00002658 488D3537DBFFFF      <1>     lea rsi, cmdBuffer
   615 0000265F 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   616 00002662 8A3DC3D9FFFF        <1>     mov bh, byte [pathSep]
   617 00002668 B33A                <1>     mov bl, ":"
   618 0000266A 383E                <1>     cmp byte [rsi], bh  ;Is the first char relative to root?
   619 0000266C 7458                <1>     je .absoluteCurrent
   620 0000266E 66395E01            <1>     cmp word [rsi + 1], bx    ;This checks if absolute or relative
   621 00002672 746D                <1>     je .absolutePath
   622 00002674 385E01              <1>     cmp byte [rsi + 1], bl  ;Check if a drive separator
   623 00002677 7409                <1>     je .relativeGiven
   624                              <1> ;No drive letter given, must get Current Drive
   625 00002679 E873FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   626 0000267E 0441                <1>     add al, "A"
   627 00002680 EB0B                <1>     jmp short .relativeCommon
   628                              <1> .relativeGiven:
   629                              <1> ;Drive letter pointed to by AL
   630 00002682 8A06                <1>     mov al, byte [rsi]  ;Get drive letter in al
   631 00002684 24DF                <1>     and al, 0DFh    ;Convert to UC
   632 00002686 4881C602000000      <1>     add rsi, 2  ;Skip the given drive letter and the colon
   633                              <1> .relativeCommon:
   634                              <1>     ;al has drive letter
   635 0000268D 88C2                <1>     mov dl, al  ;Save drive letter in dl
   636 0000268F 80EA40              <1>     sub dl, "@" ;Get 1 based drive number in dl
   637 00002692 B43A                <1>     mov ah, ":" ;Get the colon in too
   638 00002694 488D3D8EDCFFFF      <1>     lea rdi, searchSpec ;Start building our search path here
   639 0000269B 66AB                <1>     stosw   ;Store X:
   640 0000269D 8A0588D9FFFF        <1>     mov al, byte [pathSep]
   641 000026A3 AA                  <1>     stosb   ;Store pathSep
   642 000026A4 56                  <1>     push rsi    ;Save user input string
   643 000026A5 4889FE              <1>     mov rsi, rdi    ;Put the current directory here for this drive
   644 000026A8 B447                <1>     mov ah, 47h ;Get Current Working Directory, dl has drive number
   645 000026AA CD41                <1>     int 41h ;Won't fail as drive letter in dl confirmed ok
   646 000026AC 5E                  <1>     pop rsi
   647                              <1>     ;Now want to find terminating null
   648 000026AD 30C0                <1>     xor al, al
   649 000026AF 31C9                <1>     xor ecx, ecx
   650 000026B1 FFC9                <1>     dec ecx
   651 000026B3 F2AE                <1>     repne scasb ;Search for the terminating null
   652 000026B5 48FFCF              <1>     dec rdi ;Go back one once found
   653 000026B8 8A056DD9FFFF        <1>     mov al, byte [pathSep]
   654 000026BE 3847FF              <1>     cmp byte [rdi - 1], al
   655 000026C1 7425                <1>     je .buildPath ;If the previous char is a pathsep, skip storing another
   656 000026C3 AA                  <1>     stosb   ;Store the pathsep
   657 000026C4 EB22                <1>     jmp short .buildPath  ;Now we copy the user string over and good to go
   658                              <1> .absoluteCurrent:
   659 000026C6 E826FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   660 000026CB 0441                <1>     add al, "A"
   661 000026CD B43A                <1>     mov ah, ":" ;ax has X: now to store 
   662 000026CF 488D3D53DCFFFF      <1>     lea rdi, searchSpec
   663 000026D6 66AB                <1>     stosw
   664 000026D8 8A054DD9FFFF        <1>     mov al, byte [pathSep]
   665 000026DE AA                  <1>     stosb
   666 000026DF EB07                <1>     jmp short .buildPath
   667                              <1> .absolutePath:
   668 000026E1 488D3D41DCFFFF      <1>     lea rdi, searchSpec
   669                              <1> .buildPath:
   670 000026E8 E879EAFFFF          <1>     call copyCommandTailItem    ;Terminates with a 0 for free
   671 000026ED F8                  <1>     clc ;I dont care if i encounter an embedded CR rn
   672                              <1>     return
    19                              <2> %%_ret:
    20 000026EE C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   673                              <1>     
   674                              <1> printDecimalWord:
   675                              <1> ;Takes qword in rax and print it's decimal representation
   676                              <1> ;Takes the qword in eax and prints its decimal representation
   677 000026EF 31C9                <1>     xor ecx, ecx
   678 000026F1 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   679 000026F3 85C0                <1>     test eax, eax
   680 000026F5 750C                <1>     jnz .notZero
   681 000026F7 B930000000          <1>     mov ecx, "0"
   682 000026FC BD01000000          <1>     mov ebp, 1  ;Print one digit
   683 00002701 EB3E                <1>     jmp short .dpfb2
   684                              <1> .notZero:
   685 00002703 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   686 00002705 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   687                              <1> .dpfb0:
   688 0000270A FFC5                <1>     inc ebp
   689 0000270C 81FD08000000        <1>     cmp ebp, 8
   690 00002712 7206                <1>     jb .dpfb00
   691 00002714 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   692 00002718 EB04                <1>     jmp short .dpfb01
   693                              <1> .dpfb00:
   694 0000271A 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   695                              <1> .dpfb01:
   696 0000271E 31D2                <1>     xor edx, edx
   697 00002720 48F7F6              <1>     div rsi
   698 00002723 80C230              <1>     add dl, '0'
   699 00002726 80FA39              <1>     cmp dl, '9'
   700 00002729 7603                <1>     jbe .dpfb1
   701 0000272B 80C207              <1>     add dl, 'A'-'0'-10
   702                              <1> .dpfb1:
   703 0000272E 81FD08000000        <1>     cmp ebp, 8
   704 00002734 7204                <1>     jb .dpfb10
   705 00002736 88D3                <1>     mov bl, dl ;Add the bottom bits
   706 00002738 EB02                <1>     jmp short .dpfb11
   707                              <1> .dpfb10:
   708 0000273A 88D1                <1>     mov cl, dl    ;Save remainder byte
   709                              <1> .dpfb11:
   710 0000273C 4885C0              <1>     test rax, rax
   711 0000273F 75C9                <1>     jnz .dpfb0
   712                              <1> .dpfb2:
   713 00002741 81FD08000000        <1>     cmp ebp, 8
   714 00002747 7208                <1>     jb .dpfb20
   715 00002749 88DA                <1>     mov dl, bl
   716 0000274B 48C1EB08            <1>     shr rbx, 8
   717 0000274F EB06                <1>     jmp short .dpfb21
   718                              <1> .dpfb20:
   719 00002751 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   720 00002753 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   721                              <1> .dpfb21:
   722 00002757 B402                <1>     mov ah, 02h
   723 00002759 CD41                <1>     int 41h
   724 0000275B FFCD                <1>     dec ebp
   725 0000275D 75E2                <1>     jnz .dpfb2
   726                              <1>     return
    19                              <2> %%_ret:
    20 0000275F C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   727                              <1> 
   728                              <1> getDecimalWord:
   729                              <1> ;Works on MAX A dword in eax
   730                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   731 00002760 31C9                <1>     xor ecx, ecx
   732 00002762 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   733 00002764 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   734                              <1> .dpfb0:
   735 00002769 FFC5                <1>     inc ebp
   736 0000276B 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   737 0000276F 31D2                <1>     xor edx, edx
   738 00002771 48F7F3              <1>     div rbx
   739 00002774 80C230              <1>     add dl, '0'
   740 00002777 80FA39              <1>     cmp dl, '9'
   741 0000277A 7603                <1>     jbe .dpfb1
   742 0000277C 80C207              <1>     add dl, 'A'-'0'-10
   743                              <1> .dpfb1:
   744 0000277F 88D1                <1>     mov cl, dl    ;Save remainder byte
   745 00002781 4885C0              <1>     test rax, rax
   746 00002784 75E3                <1>     jnz .dpfb0
   747                              <1>     return
    19                              <2> %%_ret:
    20 00002786 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   748                              <1> 
   749                              <1> freezePC:
   750 00002787 488D15C4E4FFFF      <1>     lea rdx, memBad1
   751 0000278E B409                <1>     mov ah, 09h
   752 00002790 CD41                <1>     int 41h
   753                              <1> .altEP:
   754 00002792 488D15E2E4FFFF      <1>     lea rdx, memBad3
   755 00002799 B409                <1>     mov ah, 09h
   756 0000279B CD41                <1>     int 41h
   757                              <1> .lp:
   758 0000279D F390                <1>     pause
   759 0000279F F4                  <1>     hlt
   760 000027A0 EBFB                <1>     jmp short .lp
   761                              <1> 
   762                              <1> getFilenamePtrFromFilespec:
   763                              <1> ;Gets a pointer to the first char of a filename from a asciiz pathspec
   764                              <1> ;Input: rsi = Pathspec to search
   765                              <1> ;Output: rsi = Points to the first char of the filename
   766 000027A2 4889F3              <1>     mov rbx, rsi
   767 000027A5 31C0                <1>     xor eax, eax
   768 000027A7 4889F7              <1>     mov rdi, rsi    ;Go to the source string 
   769 000027AA E847FDFFFF          <1>     call strlen     ;Get it's length
   770 000027AF FFC9                <1>     dec ecx ;Dont include terminating null
   771 000027B1 741F                <1>     jz .exitBad ;Was the string of length zero? Exit bad if so
   772 000027B3 4801CE              <1>     add rsi, rcx    ;Goto last char in path (not null)
   773                              <1> .lp:
   774 000027B6 4839F3              <1>     cmp rbx, rsi    ;Is rdi pointing to the start of the string?
   775                              <1>     rete
    55                              <2> cret e
    25                              <3> %%_base:
    26                              <3> %assign baseVar %%_base-$$
    27                              <3>  %ifdef retOff
    28                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    29                              <3>  %ifdef currSegVBase
    30                              <3>  j%+1 short (retOff+currSegVBase)
    31                              <3>  %else
    32 000027B9 74(86)              <3>  j%+1 short retOff
    33                              <3>  %endif
    34                              <3>  %else
    35                              <3>  j%-1 short %%a
    36                              <3>  return
    37                              <3> %%a:
    38                              <3>  %endif
    39                              <3>  %else
    40                              <3>  j%-1 short %%a
    41                              <3>  return
    42                              <3> %%a:
    43                              <3>  %endif
   776 000027BB 8A06                <1>     mov al, byte [rsi]  ;Get the char we currently are at
   777 000027BD 3C3A                <1>     cmp al, ":" ;X: ?
   778 000027BF 740D                <1>     je .pointFilename
   779 000027C1 3A0564D8FFFF        <1>     cmp al, byte [pathSep]  ;Is al pathSep?
   780 000027C7 7405                <1>     je .pointFilename
   781 000027C9 48FFCE              <1>     dec rsi ;Not a terminator, go back a char
   782 000027CC EBE8                <1>     jmp short .lp
   783                              <1> .pointFilename:
   784 000027CE 48FFC6              <1>     inc rsi ;Now point to the first char of the pathname
   785                              <1>     return
    19                              <2> %%_ret:
    20 000027D1 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   786                              <1> .exitBad:
   787 000027D2 F9                  <1>     stc
   788                              <1> .exit:
   789                              <1>     return
    19                              <2> %%_ret:
    20 000027D3 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
   790                              <1> 
   791                              <1> 
   792                              <1> copyArgumentToSearchSpec:
   793                              <1> ;Works similarly to the build searchpath but is simpler
   794                              <1> ;Null terminates
   795 000027D4 488D3D4EDBFFFF      <1>     lea rdi, searchSpec
   796                              <1> .copyPath:
   797 000027DB AC                  <1>     lodsb
   798 000027DC E87CFDFFFF          <1>     call isALEndOfCommand
   799 000027E1 740A                <1>     jz .finishCopy
   800 000027E3 E852FDFFFF          <1>     call isALterminator
   801 000027E8 7403                <1>     jz .finishCopy
   802 000027EA AA                  <1>     stosb
   803 000027EB EBEE                <1>     jmp short .copyPath
   804                              <1> .finishCopy:
   805 000027ED 31C0                <1>     xor eax, eax
   806 000027EF AA                  <1>     stosb
   807                              <1>     return
    19                              <2> %%_ret:
    20 000027F0 C3                  <2>  ret
    21                              <2> %assign retOff %%_ret-$$
    18                                  %include "./Utils/COMMAND/Source/int44h.asm"
    19                              <1> critErrorHandler:   ;Int 44h
    20                              <1> ;User Stack in usage here, must be swapped to before this is called
    21                              <1> ;Entered with:  
    22                              <1> ;               AH = Critical Error Bitfield
    23                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    24                              <1> ;               Bit 6 - Reserved
    25                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    26                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    27                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    28                              <1> ;               Bits [2-1] = Affected Disk Error
    29                              <1> ;                     0 0   DOS area
    30                              <1> ;                     0 1   FAT area
    31                              <1> ;                     1 0   Directory area
    32                              <1> ;                     1 1   Data area
    33                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    34                              <1> ;               AL  = Failing drive number if AH[7] = 0
    35                              <1> ;               DIL = Error code for errorMsg
    36                              <1> ;               RSI = EA of Device Header for which device the error occured
    37                              <1> ;Return:
    38                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    39                              <1> ;                  = 1 - Retry the Operation    (Retry)
    40                              <1> ;                  = 2 - Terminate the Program  (Abort)
    41                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    42 000027F1 53                  <1>     push rbx
    43 000027F2 51                  <1>     push rcx
    44 000027F3 52                  <1>     push rdx
    45 000027F4 57                  <1>     push rdi
    46 000027F5 56                  <1>     push rsi
    47 000027F6 FC                  <1>     cld         ;Make String ops go forward
    48                              <1> 
    49 000027F7 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    50 000027FA 488D1506DFFFFF      <1>     lea rdx, crlf
    51 00002801 B409                <1>     mov ah, 09h ;Print String
    52 00002803 CD41                <1>     int 41h
    53                              <1> 
    54 00002805 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    55 0000280B B90C000000          <1>     mov ecx, 0Ch
    56 00002810 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    57 00002812 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    58 00002815 480FB7FF            <1>     movzx rdi, di
    59 00002819 4889FA              <1>     mov rdx, rdi    ;Copy error code
    60 0000281C 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    61 00002820 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    62 00002823 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    63 00002826 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    64 0000282D 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    65 00002831 B409                <1>     mov ah, 09h ;Print String
    66 00002833 CD41                <1>     int 41h     ;Call DOS to print first part of message
    67                              <1> 
    68 00002835 488D1505020000      <1>     lea rdx, qword [.readmsg]
    69 0000283C 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    70 00002843 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    71 00002846 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    72 0000284A B409                <1>     mov ah, 09h ;Print String
    73 0000284C CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    74                              <1> 
    75 0000284E F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    76 00002851 0F85DF000000        <1>     jnz .charError
    77                              <1> ;Disk error continues here
    78 00002857 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    79 0000285E B409                <1>     mov ah, 09h
    80 00002860 CD41                <1>     int 41h
    81 00002862 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    82 00002864 80C241              <1>     add dl, "A" ;Add ASCII code
    83 00002867 B402                <1>     mov ah, 02h ;Print char in dl
    84 00002869 CD41                <1>     int 41h
    85                              <1> .userInput:
    86 0000286B 488D1595DEFFFF      <1>     lea rdx, crlf  ;Print new line
    87 00002872 B409                <1>     mov ah, 09h
    88 00002874 CD41                <1>     int 41h
    89                              <1> ;Abort, Retry, Ignore, Fail is word order
    90                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    91                              <1> .userAbort:
    92                              <1> ;Abort is always an option
    93 00002876 488D15E2010000      <1>     lea rdx, qword [.abortmsg]
    94 0000287D B409                <1>     mov ah, 09h
    95 0000287F CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
    96                              <1> .userRetry:
    97 00002881 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    98 00002884 7416                <1>     jz .userIgnore    ;If clear, dont print message
    99 00002886 488D15EA010000      <1>     lea rdx, qword [.betweenMsg]
   100 0000288D B409                <1>     mov ah, 09h
   101 0000288F CD41                <1>     int 41h
   102 00002891 488D15D4010000      <1>     lea rdx, qword [.retrymsg]
   103 00002898 B409                <1>     mov ah, 09h
   104 0000289A CD41                <1>     int 41h
   105                              <1> .userIgnore:
   106 0000289C F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   107 0000289F 7416                <1>     jz .userFail
   108 000028A1 488D15CF010000      <1>     lea rdx, qword [.betweenMsg]
   109 000028A8 B409                <1>     mov ah, 09h
   110 000028AA CD41                <1>     int 41h
   111 000028AC 488D15B2010000      <1>     lea rdx, qword [.ignoremsg]
   112 000028B3 B409                <1>     mov ah, 09h
   113 000028B5 CD41                <1>     int 41h
   114                              <1> .userFail:
   115 000028B7 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   116 000028BA 7416                <1>     jz .userMsgEnd
   117 000028BC 488D15B4010000      <1>     lea rdx, qword [.betweenMsg]
   118 000028C3 B409                <1>     mov ah, 09h
   119 000028C5 CD41                <1>     int 41h
   120 000028C7 488D15A4010000      <1>     lea rdx, qword [.failmsg]
   121 000028CE B409                <1>     mov ah, 09h
   122 000028D0 CD41                <1>     int 41h
   123                              <1> .userMsgEnd:
   124 000028D2 488D15A1010000      <1>     lea rdx, qword [.endMsg]
   125 000028D9 B409                <1>     mov ah, 09h
   126 000028DB CD41                <1>     int 41h
   127                              <1> ;Get user input now 
   128 000028DD 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   129 000028DF 488D3D97010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   130 000028E6 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   131 000028E8 CD41                <1>     int 41h ;Get char in al
   132 000028EA 3C61                <1>     cmp al, "a" ;Chack if lowercase
   133 000028EC 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   134 000028EE 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   135                              <1> .uip1:
   136 000028F0 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   137 000028F1 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   138 000028F3 FFC1                <1>     inc ecx
   139 000028F5 81F904000000        <1>     cmp ecx, 4
   140 000028FB 75F3                <1>     jne .uip1
   141 000028FD E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   142                              <1> .validInput:
   143 00002902 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   144                              <1> ;Now check if the input is permitted
   145 00002904 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   146 00002906 7427                <1>     je .cehExit
   147 00002908 84C0                <1>     test al, al ;Check if 0 => Ignore
   148 0000290A 740F                <1>     je .viIgnore
   149 0000290C 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   150 0000290E 7416                <1>     je .viRetry
   151                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   152 00002910 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   153 00002913 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   154 00002919 EB14                <1>     jmp short .cehExit
   155                              <1> .viIgnore:
   156 0000291B F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   157 0000291E 0F8447FFFFFF        <1>     jz .userInput
   158 00002924 EB09                <1>     jmp short .cehExit
   159                              <1> .viRetry:
   160 00002926 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   161 00002929 0F843CFFFFFF        <1>     jz .userInput
   162                              <1> .cehExit:
   163 0000292F 5E                  <1>     pop rsi
   164 00002930 5F                  <1>     pop rdi
   165 00002931 5A                  <1>     pop rdx
   166 00002932 59                  <1>     pop rcx
   167 00002933 5B                  <1>     pop rbx
   168 00002934 48CF                <1>     iretq
   169                              <1> .charError:
   170 00002936 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   171 0000293B 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   172                              <1> .ce1:
   173 00002942 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   174 00002943 88C2                <1>     mov dl, al  ;Move char into dl
   175 00002945 B402                <1>     mov ah, 02h
   176 00002947 CD41                <1>     int 41h ;Print char
   177 00002949 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   178 0000294B E91BFFFFFF          <1>     jmp .userInput
   179                              <1> 
   180                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   181 00002950 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   181 00002959 746563742024202020  <1>
   182 00002962 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   182 0000296B 6E6974202420202020  <1>
   183 00002974 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   183 0000297D 202420202020202020  <1>
   184 00002986 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   184 0000298F 6F6D6D616E64202420  <1>
   185 00002998 446174612024202020- <1>             db "Data $            "       ;Error 4
   185 000029A1 202020202020202020  <1>
   186 000029AA 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   186 000029B3 737420242020202020  <1>
   187 000029BC 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   187 000029C5 202020202020202020  <1>
   188 000029CE 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   188 000029D7 656469612024202020  <1>
   189 000029E0 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   189 000029E9 7420466F756E642024  <1>
   190 000029F2 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   190 000029FB 706572202420202020  <1>
   191 00002A04 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   191 00002A0D 6C7420242020202020  <1>
   192 00002A16 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   192 00002A1F 742024202020202020  <1>
   193 00002A28 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   193 00002A31 61696C757265202420  <1>
   194                              <1> 
   195 00002A3A 64726976652024      <1> .drive      db "drive $"
   196 00002A41 6572726F7220726561- <1> .readmsg    db "error reading $"
   196 00002A4A 64696E672024        <1>
   197 00002A50 6572726F7220777269- <1> .writemsg   db "error writing $"
   197 00002A59 74696E672024        <1>
   198 00002A5F 41626F727424        <1> .abortmsg   db "Abort$" 
   199 00002A65 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   200 00002A6C 526574727924        <1> .retrymsg   db "Retry$"
   201 00002A72 4661696C24          <1> .failmsg    db "Fail$"
   202 00002A77 2C2024              <1> .betweenMsg db ", $"
   203 00002A7A 3F2024              <1> .endMsg     db "? $"
   204 00002A7D 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   205                              <1> 
   206                              <1> int43h:
   207 00002A81 F605A5D5FFFFFF      <1>     test byte [permaSwitch], -1
   208 00002A88 7516                <1>     jnz .exit   ;If this is non-zero, just exit as normal
   209                              <1>     ;Else, we juggle parent PSP's
   210 00002A8A 50                  <1>     push rax
   211 00002A8B 53                  <1>     push rbx
   212 00002A8C 488B0584D5FFFF      <1>     mov rax, qword [realParent]
   213 00002A93 488B1D75D5FFFF      <1>     mov rbx, qword [pspPtr]
   214 00002A9A 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
   215 00002A9E 5B                  <1>     pop rbx
   216 00002A9F 58                  <1>     pop rax
   217                              <1> .exit:
   218 00002AA0 F9                  <1>     stc     ;Set CF to kill the task
   219 00002AA1 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    19                                  %include "./Utils/COMMAND/Data/cmdEnv.asm"
    20                              <1>     
    21                              <1> masterEnv:  ;Yeet this is this is a child command processor
    22 00002AA4 5F3A434F4D4D414E44- <1>     db "_:COMMAND.COM",0
    22 00002AAD 2E434F4D00          <1>
    23 00002AB2 504154483D0000      <1>     db "PATH=",0,0  ;Terminate with two null bytes
    24 00002AB9 202020202020202020- <1>     db ($ - masterEnv) dup (" ")    ;Pad the environment with spaces
    24 00002AC2 202020202020202020- <1>
    24 00002ACB 202020              <1>
    25                              <1> endOfAlloc: ;Symbol to find the start of where I can yeet 
    20                                  %include "./Utils/COMMAND/Source/cmdLdr.asm"
    21                              <1> cmdLdr:
    22                              <1> ;First check if the version is ok. If not, return.
    23 00002ACE B430                <1>     mov ah, 30h
    24 00002AD0 CD41                <1>     int 41h
    25 00002AD2 3C01                <1>     cmp al, 01h ;Version 1
    26 00002AD4 760D                <1>     jbe .okVersion
    27 00002AD6 488D15D4010000      <1>     lea rdx, badVerStr
    28 00002ADD B409                <1>     mov ah, 09h
    29 00002ADF CD41                <1>     int 41h
    30 00002AE1 CD40                <1>     int 40h ;Exit to caller or DOS to print bad command interpreter line
    31                              <1> .okVersion:
    32                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    33 00002AE3 4C890525D5FFFF      <1>     mov qword [pspPtr], r8  ;Store PSP ptr in internal var 
    34 00002AEA 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    35 00002AEE 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    36 00002AF2 4889051ED5FFFF      <1>     mov qword [realParent], rax ;Preserve the real parent address
    37                              <1> ;Setup Int 42h, Int 43h and Int 44h
    38 00002AF9 498B400A            <1>     mov rax, qword [r8 + psp.oldInt42h] ;Preserve the original addresses
    39 00002AFD 4889052AD5FFFF      <1>     mov qword [parentInt42], rax
    40                              <1> 
    41 00002B04 488D15E6FCFFFF      <1>     lea rdx, critErrorHandler
    42 00002B0B 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    43 00002B0F B844250000          <1>     mov eax, 2544h
    44 00002B14 CD41                <1>     int 41h
    45 00002B16 488D1564FFFFFF      <1>     lea rdx, int43h
    46 00002B1D 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    47 00002B21 B843250000          <1>     mov eax, 2543h
    48 00002B26 CD41                <1>     int 41h
    49 00002B28 488D15BDE1FFFF      <1>     lea rdx, applicationReturn
    50 00002B2F 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    51 00002B33 B842250000          <1>     mov eax, 2542h
    52 00002B38 CD41                <1>     int 41h
    53                              <1> ;Get a pointer to DOS Sysvars
    54 00002B3A B452                <1>     mov ah, 52h ;Get sysvars
    55 00002B3C CD41                <1>     int 41h
    56 00002B3E 48891DDAD4FFFF      <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    57                              <1> ;Call for simple internationalisation data
    58 00002B45 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    59 00002B4A CD41                <1>     int 41h
    60 00002B4C 3CFF                <1>     cmp al, -1
    61 00002B4E 7412                <1>     je .skipSwitch
    62 00002B50 8815D6D4FFFF        <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    63 00002B56 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    64 00002B59 7507                <1>     jne .skipSwitch
    65 00002B5B C605C9D4FFFF2F      <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    66                              <1> .skipSwitch:
    67 00002B62 B800380000          <1>     mov eax, 3800h  ;Get current country data
    68 00002B67 488D15C8D4FFFF      <1>     lea rdx, ctryData
    69 00002B6E CD41                <1>     int 41h ;Write the data to the internal country table
    70                              <1> ;Now determine if this is the master copy of COMMAND.COM
    71                              <1> ;Check if Int 4Eh has the same address as Int 4Dh. If so, we are master.
    72 00002B70 B84E350000          <1>     mov eax, 354Eh  ;Get int 4Eh address
    73 00002B75 CD41                <1>     int 41h
    74 00002B77 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    75 00002B7A B84D350000          <1>     mov eax, 354Dh  ;Get int 4Dh address
    76 00002B7F CD41                <1>     int 41h
    77 00002B81 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    78 00002B84 755C                <1>     jne .skipMaster
    79                              <1> ;Ok so we are master command.com
    80                              <1> ;Now make myself the real parent
    81 00002B86 C605A0D4FFFFFF      <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    82 00002B8D 4C890583D4FFFF      <1>     mov qword [realParent], r8
    83                              <1> ;Set master environment as mine
    84 00002B94 488D0509FFFFFF      <1>     lea rax, masterEnv
    85 00002B9B 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    86                              <1> ;Set current Drive in COMSPEC
    87 00002B9F B019                <1>     mov al, 19h ;Get current Drive
    88 00002BA1 CD41                <1>     int 41h
    89 00002BA3 0441                <1>     add al, "A"
    90 00002BA5 8805F9FEFFFF        <1>     mov byte [masterEnv], al
    91                              <1> ;Set Int 4Eh up
    92 00002BAB 488D15FEE5FFFF      <1>     lea rdx, int4Eh
    93 00002BB2 B84E250000          <1>     mov eax, 254Eh ;Set this as Int 4Eh
    94 00002BB7 CD41                <1>     int 41h
    95                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    96                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    97 00002BB9 488D1547DBFFFF      <1>     lea rdx, crlf
    98 00002BC0 B409                <1>     mov ah, 09h
    99 00002BC2 CD41                <1>     int 41h
   100 00002BC4 E8CFEDFFFF          <1>     call time
   101 00002BC9 E804EDFFFF          <1>     call date
   102 00002BCE 488D1532DBFFFF      <1>     lea rdx, crlf
   103 00002BD5 B409                <1>     mov ah, 09h
   104 00002BD7 CD41                <1>     int 41h
   105 00002BD9 488D1DEEFEFFFF      <1>     lea rbx, endOfAlloc ;Save the Master Environment
   106 00002BE0 EB32                <1>     jmp short .printInit
   107                              <1> .skipMaster:
   108 00002BE2 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
   109 00002BE9 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
   110 00002BF1 0FB60534D4FFFF      <1>     movzx eax, byte [switchChar]
   111 00002BF8 F2AE                <1>     repne scasb
   112 00002BFA 67E310              <1>     jecxz .noSwitches
   113 00002BFD 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
   114 00002C00 24DF                <1>     and al, 0DFh    ;Convert to UC
   115 00002C02 3C50                <1>     cmp al, "P" ;Is it permanent switch?
   116 00002C04 7507                <1>     jne .noSwitches
   117 00002C06 C60520D4FFFFFF      <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
   118                              <1> .noSwitches:
   119 00002C0D 488D1D90FEFFFF      <1>     lea rbx, masterEnv  ;This is the base address to jettison
   120                              <1> .printInit:
   121                              <1> ;Finish by printing INIT string.
   122 00002C14 53                  <1>     push rbx
   123 00002C15 488D1521000000      <1>     lea rdx, initString
   124 00002C1C B409                <1>     mov ah, 09h
   125 00002C1E CD41                <1>     int 41h ;Print init string
   126 00002C20 E88EF2FFFF          <1>     call version.printVersionNumber
   127 00002C25 488D1547000000      <1>     lea rdx, initString2
   128 00002C2C B409                <1>     mov ah, 09h
   129 00002C2E CD41                <1>     int 41h ;Print init string
   130 00002C30 5B                  <1>     pop rbx
   131 00002C31 488925CDD3FFFF      <1>     mov qword [stackBottom], rsp    ;Use this to save where to reset rsp to
   132 00002C38 E99BE0FFFF          <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   133                              <1> ;Loader Data here
   134                              <1> initString: 
   135 00002C3D 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   135 00002C46 66696320436F6D7075- <1>
   135 00002C4F 746572205265736561- <1>
   135 00002C58 726368285229205343- <1>
   135 00002C61 502F444F5328522920- <1>
   135 00002C6A 56657273696F6E2024  <1>
   136                              <1> initString2:
   137 00002C73 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Reserach 2022.",CR,LF,"$"
   137 00002C7C 202020284329436F70- <1>
   137 00002C85 797269676874205363- <1>
   137 00002C8E 69656E746966696320- <1>
   137 00002C97 436F6D707574657220- <1>
   137 00002CA0 526573657261636820- <1>
   137 00002CA9 323032322E0D0A24    <1>
   138 00002CB1 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   138 00002CBA 20444F532076657273- <1>
   138 00002CC3 696F6E0D0A24        <1>
   138          ------------------  <1>  info: assembly required 1+2+2 passes

