JWasm v2.11, Oct 20 2013
io.asm
                                    
                                    .x64p

                                    INCLUDE fatStruc.inc
                              C 
                              C ;-------------------------------------------------------;
                              C ; This include file contains miscellaneous FAT driver   ;
                              C ; structures. exFAT will have it's own files at a later ;
                              C ; stage.                                                ;
                              C ;-------------------------------------------------------;
                              C 
00000000                      C bpb STRUC          ;FAT 12 and 16 BPB
                              C 
00000000                      C     jmpBoot    db 3 dup (?)
00000003                      C     oemName    db 8 dup (?)  ;OEM name
0000000B                      C     bytsPerSec dw ?  ;Bytes per sector
0000000D                      C     secPerClus db ?  ;Sectors per cluster
0000000E                      C     revdSecCnt dw ?  ;Number of reserved sectors
00000010                      C     numFATs    db ?  ;Number of FATs on media
00000011                      C     rootEntCnt dw ?  ;Number of entries in Root directory
00000013                      C     totSec16   dw ?  ;Number of sectors on medium
00000015                      C     media      db ?  ;Media descriptor byte
00000016                      C     FATsz16    dw ?  ;Number of sectors per FAT
00000018                      C     secPerTrk  dw ?  ;Number of sectors per "track"
0000001A                      C     numHeads   dw ?  ;Number of read "heads"
0000001C                      C     hiddSec    dd ?  ;Number of hidden sectors
00000020                      C     totSec32   dd ?  ;32 bit count of sectors
                              C 
00000024                      C     drvNum     db ?  ;Logical drive number (00h or 80h)
00000025                      C     reserved1  db ?  ;Reserved byte
00000026                      C     bootSig    db ?  ;Extended boot signature (29h)
00000027                      C     volID      dd ?  ;Volume serial number
0000002B                      C     volLab     db 11 dup (?) ;Volume label string
00000036                      C     filSysType db 8 dup (?)  ;File system type string
                              C 
0000003E                      C bpb ENDS
                              C 
00000000                      C bpb32 STRUC       ;FAT 32 BPB
                              C 
00000000                      C     jmpBoot    db 3 dup (?)
00000003                      C     oemName    db 8 dup (?)  ;OEM name
0000000B                      C     bytsPerSec dw ?  ;Bytes per sector
0000000D                      C     secPerClus db ?  ;Sectors per cluster
0000000E                      C     revdSecCnt dw ?  ;Number of reserved sectors
00000010                      C     numFATs    db ?  ;Number of FATs on media
00000011                      C     rootEntCnt dw ?  ;Number of entries in Root directory
00000013                      C     totSec16   dw ?  ;Number of sectors on medium
00000015                      C     media      db ?  ;Media descriptor byte
00000016                      C     FATsz16    dw ?  ;Number of sectors per FAT, must be 0 for FAT 32
00000018                      C     secPerTrk  dw ?  ;Number of sectors per "track"
0000001A                      C     numHeads   dw ?  ;Number of read "heads"
0000001C                      C     hiddSec    dd ?  ;Number of hidden sectors
00000020                      C     totSec32   dd ?  ;32 bit count of sectors
                              C 
00000024                      C     FATsz32    dd ?  ;32 bit count of sectors occupied by one FAT
00000028                      C     extFlags   dw ?  ;Extended Flags word
0000002A                      C     FSver      dw ?  ;File system version word, must be 0
0000002C                      C     RootClus   dd ?  ;First Cluster of Root Directory
00000030                      C     FSinfo     dw ?  ;Sector number of FSINFO structure, usually 1
00000032                      C     BkBootSec  dw ?  ;Backup Boot sector, either 0 or 6
00000034                      C     reserved   db 12 dup (?) ;Reserved 12 bytes
                              C 
00000040                      C     drvNum     db ?  ;Logical drive number (00h or 80h)
00000041                      C     reserved1  db ?  ;Reserved byte
00000042                      C     bootSig    db ?  ;Extended boot signature (29h)
00000043                      C     volID      dd ?  ;Volume serial number
00000047                      C     volLab     db 11 dup (?) ;Volume label string
00000052                      C     filSysType db 8 dup (?)  ;File system type string
                              C 
0000005A                      C bpb32 ENDS
                              C 
                              C 
00000000                      C bpbEx STRUC   ;exFAT BPB
                              C 
00000000                      C     jmpBoot                db 3 dup (?) 
00000003                      C     oemName                db 8 dup (?) ;OEM name
0000000B                      C     MustBeZero             db 53 dup (?) ;Must be 0, 53 bytes
00000040                      C     partitionOffset        dq ?  ;in sectors, 0 means ignore this field
00000048                      C     volumeLength           dq ?  ;Volume Length in sectors
00000050                      C     FAToffset              dd ?  ;Volume rel offset of first FAT, in sectors
00000054                      C     FATlength              dd ?  ;FAT length, in sectors
00000058                      C     clusterHeapOffset      dd ?  ;Start of data area, in sectors
0000005C                      C     clusterCount           dd ?  ;Number of clusters on medium
00000060                      C     firstClusterOfRootDir  dd ?  ;First Cluster of Root Directory, min 2
00000064                      C     volumeSerialNum        dd ?  ;Volume Serial Number
00000068                      C     FSrevision             dw ?  ;Should be 0001 (v1.00)
0000006A                      C     volumeFlags            dw ?  ;Volume Flags, refer to documentation
0000006C                      C     bytesPerSectorShift    db ?  ;min 9 (512 bps), max 12 (4096 bps)
0000006D                      C     sectorsPerClusterShift db ?  ;Result of log_2(N) for N=sec per clus
0000006E                      C     numberOfFATs           db ?  ;Number of FATs, only 1 or 2
0000006F                      C     driveSelect            db ?  ;Drive Select, 0 or 80h (Int 13h)
00000070                      C     percentInUse           db ?  ;Rounded down. FFh means unknown
00000071                      C     reserved               db 7 dup (?)  ;Reserved for alignment
                              C 
00000078                      C bpbEx ENDS
                                    INCLUDE dosStruc.inc
                              C 
                              C ;-------------------------------------------------------;
                              C ; This include file contains miscellaneous internal     ;
                              C ; SCP/DOS structures.                                   ;
                              C ;-------------------------------------------------------;
                              C 
                              C ;------------------------------------------------------------------------;
                              C ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
                              C ; its file system structure. This is used to locate files and structures
                              C ; on the device itself and to translate file requests to cluster chains
                              C ; to LBAs to pass to the disk driver..
                              C ; The DPBs form a linked list, with each DPB formed after the devices 
                              C ; drivers Initialise routine has been called.
                              C ;------------------------------------------------------------------------;
00000000                      C dpb STRUC        ;Drive Parameter Block
                              C 
00000000                      C     bDriveNumber            db ?  ;Drive number
00000001                      C     bUnitNumber             db ?  ;Unit number in device
00000002                      C     bBytesPerSectorShift    db ?  ;min 9 (512 bps), max 12 (4096 bps)
00000003                      C     bMaxSectorInCluster     db ?  ;(Maximum sector in cluster) - 1
                              C ;                                       i.e. (2^bSectorsPerClusterShift) - 1
00000004                      C     bSectorsPerClusterShift db ?  ;Sectors per cluster exponent
00000005                      C     dFAToffset              dd ?  ;Vol rel offset of first FAT, in sectors
00000009                      C     bNumberOfFATs           db ?  ;Number of FATs
0000000A                      C     wNumberRootDirEntries   dw ?  ;In sectors
0000000C                      C     dClusterHeapOffset      dd ?  ;Start of data area, in sectors
00000010                      C     dClusterCount           dd ?  ;Total number of clusters (volume size)
00000014                      C     dFATlength              dd ?  ;FAT length, in sectors
00000018                      C     dFirstClusterOfRootDir  dd ?  ;First Cluster of Root Directory, min 2
0000001C                      C     qDriverHeaderPtr        dq ?  ;Pointer to device driver header
00000024                      C     bMediaDescriptor        db ?  ;Media descriptor
00000025                      C     bAccessFlag             db ?  ;Access Flag (0 if accessed, else -1)
00000026                      C     qNextDPBPtr             dq ?  ;Pointer to next DPB, -1 if at end
0000002E                      C     dFirstFreeCluster       dd ?  ;Starting cluster of free space search
00000032                      C     dNumberOfFreeClusters   dd ?  ;Number of free clusters, -1 unknown
                              C 
00000036                      C dpb ENDS
                              C 
                              C ;------------------------------------------------------------------------;
                              C ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
                              C ; All disk pathing requests go via the CDS for that drive.
                              C ; The default drive is the last accessed drive, this number is stored
                              C ; in the DOS data area.
                              C ; The CDS is stored as an array with the offset into the array being 
                              C ; given by the drive letter's offset into the alphabet (with A=0).
                              C ;
                              C ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
                              C ;------------------------------------------------------------------------;
00000000                      C cds STRUC       ;Current Directory Structure
00000000                      C     sCurrentPath        db 67 dup(?)    ;Current Directory Path String
00000043                      C     wFlags              dw ? ;CDS Flags - 
00000045                      C     qDPBPtr             dq ? ;Ptr to the DPB of the dev using this CDS
0000004D                      C     dStartCluster       dd ? ;Starting cluster of the directory on disk
00000051                      C     qReserved           dq ? ;Reserved for future expansions
00000059                      C     wBackslashOffset    dw ? ;How many chars to the start of current dir in the 
                              C ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
                              C ; another, we save the number of chars to skip to that deep level).
                              C ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
                              C ; Flags: Bit 15 set = Network drive
                              C ;        Bit 14 set = Physical drive
                              C ;        Bit 13 set = JOIN'ed drive
                              C ;        Bit 12 set = SUBST'ed drive
                              C ;        Bit 7  set = Redirected, not network, drive (This is how MSCDEX worked)
0000005B                      C cds ENDS
                              C 
                              C ;------------------------------------------------------------------------;
                              C ; The SFT is a way to allow applications to open file handles to files 
                              C ; and devices. As things stand, the SFT chain will have 5 file handles
                              C ; under the first header, and then a second header will be linked to the 
                              C ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
                              C ; a size for the second SFT (default 10 files). Same for System FCBs, 
                              C ; using the FCBS= command. Default FCBS=5.
                              C ;
                              C ; A file handle describes the file, and the location within the file that
                              C ; we are reading. The file handle can be manipulated without the file
                              C ; being in memory, thus allowing the user to access data without needing 
                              C ; to take up large portions of memory. Similarly, file handles allow for
                              C ; accessing devices, by treating them as files with their drivers 
                              C ; responding and translating the manipulations of the file handle itself.
                              C ; Neither the driver nor the application should see or use the SFT for
                              C ; the handle, as it is subject to change (and will change when file 
                              C ; sharing provisions are included). The DOS will make requests to the 
                              C ; driver in a generic way and the driver will respond, with DOS keeping
                              C ; track of the information in the SFT entry for that handle. 
                              C ;
                              C ; One SFT entry can have multiple handles and multiple SFT entries
                              C ; can point to the same file. It all depends on what the applications 
                              C ; want to do with the File.
                              C ;
                              C ; !!!!IMPORTANT!!!!
                              C ; Currently there are plans for File Sharing, but I include minimal 
                              C ; provisions for it. I really just wanna get a DOS out the door.
                              C ;
                              C ;Each SFT may look like this:
                              C ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
                              C ;            |                |
                              C ;       wNumFiles*sft    wNumFiles*sft
                              C ;
                              C ; Two SFT chains are built; one for files, and a one for so called 
                              C ; System FCBs.
                              C ;
                              C ; Each SFT header has an array of SFT's below it, with the number of 
                              C ; SFTs given by wNumFiles. The SFT headers form a linked list.
                              C ;
                              C ; DEFAULT FILES=15, MINIMUM FILES=5
                              C ; DEFAULT FCBS=5, MINIMUM FCBS=5
                              C ;------------------------------------------------------------------------;
00000000                      C sfth STRUC   ;System file table header
                              C ; This is the SFT header.
                              C ; This structure comes before the start of the first file in the array/table.
00000000                      C     qNextSFTPtr dq ?    ;Pointer to the next SFT
00000008                      C     wNumFiles   dw ?    ;Number of files in this table
0000000A                      C sfth ENDS
                              C 
00000000                      C sft STRUC
                              C ;This is the file struc itself
00000000                      C     wNumHandles dw ?    ;Number of handles pointing to this file
00000002                      C     wOpenMode   dw ?    ;Bit 15 set if opened via FCB
00000004                      C     bFileAttrib db ?    ;Regular File Attributes
00000005                      C     wDeviceInfo dw ?    ;Includes Device number
00000007                      C     qPtr        dq ?    ;IF char, ptr to device driver, ELSE DPBptr
0000000F                      C     dStartClust dd ?    ;Start cluster of file
00000013                      C     wTime       dw ?    ;File Time
00000015                      C     wDate       dw ?    ;File Date
00000017                      C     dFileSize   dd ?    ;File Size, in bytes
0000001B                      C     dCurntOff   dd ?    ;Current Offset in file, in bytes
0000001F                      C     wRelClust   dw ?    ;Relative cluster in file of the last cluster accessed
00000021                      C     dDirSect    dd ?    ;Relative number of sector containing directory entry 
00000025                      C     bNumDirEnt  db ?    ;Number of dir entry within sector (byte offset/32)
00000026                      C     sFCBName    db 11 dup(?)    ;8.3 Filename
00000031                      C     qPSPOwner   dq ?    ;Address of PSP of program which first opened this file
00000039                      C     dAbsClusr   dd ?    ;Absolute cluster of last cluster accessed
0000003D                      C sft ENDS
                              C 
                              C ;------------------------------------------------------------------------;
                              C ; Buffers allow for buffered drive IO, by first transferring a sector 
                              C ; to an internal buffer, and then copying it to the specified location
                              C ; in memory. The buffer is kept in the buffer chain,  in the event that 
                              C ; another request for the same sector from the same device is made, so 
                              C ; that is can be read from the device directly. Buffers are uniform in 
                              C ; size, selected according to the largest detected sector size during 
                              C ; the initial loadup.
                              C ;
                              C ; The buffer pointer in SysVars points to the oldest unused buffer
                              C ;
                              C ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
                              C ;------------------------------------------------------------------------;
                              C 
00000000                      C bufferHdr   STRUC
00000000                      C     nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
00000008                      C     driveNumber db  ?   ;Drive number the buffer is used for
00000009                      C     bufferFlags db  ?   ;Standard Flags
0000000A                      C     bufferLBA   dd  ?   ;LBA the buffer contains
0000000E                      C     bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
0000000F                      C     bufFAToff   db  ?   ;Sector offset of the backup copy of the FAT on disk
00000010                      C     driveDPBPtr dq  ?   ;Pointer to the device DPB block
00000018                      C bufferHdr   ENDS
                                    INCLUDE driverStruc.inc
                              C 
                              C ;-------------------------------------------------------;
                              C ; This include file contains miscellaneous SCP/DOS      ;
                              C ; device driver related structures.                     ;
                              C ;-------------------------------------------------------;
                              C 
00000000                      C drvHdr STRUC  ;Device Driver Header for character and block devices
                              C 
00000000                      C     nxtPtr dq ?  ;Pointer to the next driver header, -1 if at the end
00000008                      C     atWord dw ?  ;Attribute Word
0000000A                      C     strPtr dq ?  ;Strategy Entry Pointer
00000012                      C     intPtr dq ?  ;Interrupt Entry Pointer
0000001A                      C     drvNam db 8 dup (?)  ;Driver name (Char) or Unit number byte (Block)
                              C 
00000022                      C drvHdr ENDS
                              C 
                              C drvReqHdrM MACRO  ;Driver Request Header Macro
 >                            C   ;Driver Request Header Macro
 >                            C     hdrlen db ?  ;Length of the request header  ;Driver Request Header Macro
 >                            C     unitnm db ?  ;Unit number, meaningless for character devs  ;Driver Request Header Macro
 >                            C     cmdcde db ?  ;Command code  ;Driver Request Header Macro
 >                            C     status dw ?  ;Status word  ;Driver Request Header Macro
 >                            C     devptr dq ?  ;Device queue pointer field  ;Driver Request Header Macro
 >                            C   ;Driver Request Header Macro
 >                            C ENDM  ;Driver Request Header Macro
                              C 
00000000                      C drvReqHdr   STRUC
                              C     drvReqHdrM
                             1C 
00000000                     1C     hdrlen db ?  ;Length of the request header
00000001                     1C     unitnm db ?  ;Unit number, meaningless for character devs
00000002                     1C     cmdcde db ?  ;Command code
00000003                     1C     status dw ?  ;Status word
00000005                     1C     devptr dq ?  ;Device queue pointer field
                             1C 
0000000D                      C drvReqHdr   ENDS
                              C 
00000000                      C initReqPkt STRUC  ;Init Request Packet
                              C 
                              C     drvReqHdrM    ;Common Driver Header Macro
                             1C 
00000000                     1C     hdrlen db ?  ;Length of the request header
00000001                     1C     unitnm db ?  ;Unit number, meaningless for character devs
00000002                     1C     cmdcde db ?  ;Command code
00000003                     1C     status dw ?  ;Status word
00000005                     1C     devptr dq ?  ;Device queue pointer field
                             1C 
0000000D                      C     numunt db ?  ;Number of logical units (Block only, 0 for char)
0000000E                      C     endptr dq ?  ;Pointer to first free byte after driver
00000016                      C     optptr dq ?  ;Pointer to the BPB array (block) or optional args (char)
0000001E                      C     drvnum db ?  ;Drive number
                              C 
0000001F                      C initReqPkt ENDS
                              C 
00000000                      C mediaCheckReqPkt STRUC ;Media Check Request Packet
                              C 
                              C     drvReqHdrM    ;Common Driver Header Macro
                             1C 
00000000                     1C     hdrlen db ?  ;Length of the request header
00000001                     1C     unitnm db ?  ;Unit number, meaningless for character devs
00000002                     1C     cmdcde db ?  ;Command code
00000003                     1C     status dw ?  ;Status word
00000005                     1C     devptr dq ?  ;Device queue pointer field
                             1C 
0000000D                      C     medesc db ?  ;DOS media descriptor
0000000E                      C     medret db ?  ;Return byte (Has media been changed?)
0000000F                      C     desptr dq ?  ;Pointer to a valid volume id field
                              C 
00000017                      C mediaCheckReqPkt ENDS
                              C 
00000000                      C bpbBuildReqPkt STRUC  ;Build BPB Request Packet
                              C 
                              C     drvReqHdrM    ;Common Driver Header Macro
                             1C 
00000000                     1C     hdrlen db ?  ;Length of the request header
00000001                     1C     unitnm db ?  ;Unit number, meaningless for character devs
00000002                     1C     cmdcde db ?  ;Command code
00000003                     1C     status dw ?  ;Status word
00000005                     1C     devptr dq ?  ;Device queue pointer field
                             1C 
0000000D                      C     medesc db ?  ;DOS media descriptor
0000000E                      C     bufptr dq ?  ;Transfer buffer
00000016                      C     bpbptr dq ?  ;Pointer to the BPB
                              C 
0000001E                      C bpbBuildReqPkt ENDS
                              C 
00000000                      C ioReqPkt STRUC   ;IO Request Packet
                              C 
                              C     drvReqHdrM    ;Common Driver Header Macro
                             1C 
00000000                     1C     hdrlen db ?  ;Length of the request header
00000001                     1C     unitnm db ?  ;Unit number, meaningless for character devs
00000002                     1C     cmdcde db ?  ;Command code
00000003                     1C     status dw ?  ;Status word
00000005                     1C     devptr dq ?  ;Device queue pointer field
                             1C 
0000000D                      C     medesc db ?  ;DOS media descriptor
0000000E                      C     bufptr dq ?  ;Transfer buffer
00000016                      C     tfrlen dd ?  ;Number of Sectors/bytes to transfer
0000001A                      C     strtsc dq ?  ;Starting sector for transfer
00000022                      C     desptr dq ?  ;Pointer to a valid volume id field if error
                              C 
0000002A                      C ioReqPkt ENDS
                              C 
00000000                      C nonDestInNoWaitReqPkt STRUC    ;Nondestructive Input No Wait Request Packet
                              C     
                              C     drvReqHdrM    ;Common Driver Header Macro
                             1C 
00000000                     1C     hdrlen db ?  ;Length of the request header
00000001                     1C     unitnm db ?  ;Unit number, meaningless for character devs
00000002                     1C     cmdcde db ?  ;Command code
00000003                     1C     status dw ?  ;Status word
00000005                     1C     devptr dq ?  ;Device queue pointer field
                             1C 
0000000D                      C     retbyt db ?  ;Byte read non destructively
                              C 
0000000E                      C nonDestInNoWaitReqPkt ENDS
                              C 
00000000                      C statusReqPkt STRUC   ;Status Request Packet
                              C 
                              C     drvReqHdrM    ;Common Driver Header Macro
                             1C 
00000000                     1C     hdrlen db ?  ;Length of the request header
00000001                     1C     unitnm db ?  ;Unit number, meaningless for character devs
00000002                     1C     cmdcde db ?  ;Command code
00000003                     1C     status dw ?  ;Status word
00000005                     1C     devptr dq ?  ;Device queue pointer field
                             1C 
                              C 
0000000D                      C statusReqPkt ENDS
                              C 
00000000                      C flushReqPkt STRUC ;Flush Request Packet, terminate all pending requests
                              C 
                              C     drvReqHdrM    ;Common Driver Header Macro
                             1C 
00000000                     1C     hdrlen db ?  ;Length of the request header
00000001                     1C     unitnm db ?  ;Unit number, meaningless for character devs
00000002                     1C     cmdcde db ?  ;Command code
00000003                     1C     status dw ?  ;Status word
00000005                     1C     devptr dq ?  ;Device queue pointer field
                             1C 
                              C      
0000000D                      C flushReqPkt ENDS
                              C 
00000000                      C openReqPkt STRUC ;Open Device Request Packet
                              C 
                              C     drvReqHdrM    ;Common Driver Header Macro
                             1C 
00000000                     1C     hdrlen db ?  ;Length of the request header
00000001                     1C     unitnm db ?  ;Unit number, meaningless for character devs
00000002                     1C     cmdcde db ?  ;Command code
00000003                     1C     status dw ?  ;Status word
00000005                     1C     devptr dq ?  ;Device queue pointer field
                             1C 
                              C      
0000000D                      C openReqPkt ENDS
                              C 
00000000                      C closeReqPkt STRUC ;Close Device Request Packet
                              C 
                              C     drvReqHdrM    ;Common Driver Header Macro
                             1C 
00000000                     1C     hdrlen db ?  ;Length of the request header
00000001                     1C     unitnm db ?  ;Unit number, meaningless for character devs
00000002                     1C     cmdcde db ?  ;Command code
00000003                     1C     status dw ?  ;Status word
00000005                     1C     devptr dq ?  ;Device queue pointer field
                             1C 
                              C      
0000000D                      C closeReqPkt ENDS
                              C 
00000000                      C remMediaReqPkt STRUC ;Removeable Media? Request Packet
                              C 
                              C     drvReqHdrM    ;Common Driver Header Macro
                             1C 
00000000                     1C     hdrlen db ?  ;Length of the request header
00000001                     1C     unitnm db ?  ;Unit number, meaningless for character devs
00000002                     1C     cmdcde db ?  ;Command code
00000003                     1C     status dw ?  ;Status word
00000005                     1C     devptr dq ?  ;Device queue pointer field
                             1C 
                              C      
0000000D                      C remMediaReqPkt ENDS
                              C 
00000000                      C ioctlReqPkt STRUC    ;Generic IOCTL Request Packet
                              C 
                              C     drvReqHdrM    ;Common Driver Header Macro  
                             1C 
00000000                     1C     hdrlen db ?  ;Length of the request header
00000001                     1C     unitnm db ?  ;Unit number, meaningless for character devs
00000002                     1C     cmdcde db ?  ;Command code
00000003                     1C     status dw ?  ;Status word
00000005                     1C     devptr dq ?  ;Device queue pointer field
                             1C 
0000000D                      C     majfun db ?  ;Major function number
0000000E                      C     minfun db ?  ;Minor function number
0000000F                      C     rsival dq ?  ;Contents of RSI
00000017                      C     rdival dq ?  ;Contents of RDI
0000001F                      C     ctlptr dq ?  ;Pointer to Generic IOCTL Request Packet
                              C 
00000027                      C ioctlReqPkt ENDS
                              C 
00000000                      C getDevReqPkt STRUC ;Get Logical Device Request Packet
                              C     
                              C     drvReqHdrM    ;Common Driver Header Macro
                             1C 
00000000                     1C     hdrlen db ?  ;Length of the request header
00000001                     1C     unitnm db ?  ;Unit number, meaningless for character devs
00000002                     1C     cmdcde db ?  ;Command code
00000003                     1C     status dw ?  ;Status word
00000005                     1C     devptr dq ?  ;Device queue pointer field
                             1C 
0000000D                      C     getcmd db ?  ;Command code
0000000E                      C     cmdsts dw ?  ;Command status word
                              C 
00000010                      C getDevReqPkt ENDS
                              C 
00000000                      C setDevReqPkt STRUC ;Set Logical Device Request Packet
                              C     
                              C     drvReqHdrM    ;Common Driver Header Macro
                             1C 
00000000                     1C     hdrlen db ?  ;Length of the request header
00000001                     1C     unitnm db ?  ;Unit number, meaningless for character devs
00000002                     1C     cmdcde db ?  ;Command code
00000003                     1C     status dw ?  ;Status word
00000005                     1C     devptr dq ?  ;Device queue pointer field
                             1C 
0000000D                      C     setcmd db ?  ;Command code
0000000E                      C     cmdsts dw ?  ;Command status word
                              C 
00000010                      C setDevReqPkt ENDS
                                    INCLUDE dosData.inc
                              C ; This file contains the structure of the DOS Data area
00000000                      C dSeg STRUC 
00000000                      C     dataSegPtr  dq ?    ;Pointer to the data Segment itself
00000008                      C     codeSegPtr  dq ?    ;Pointer to the start of the resident Code segment
00000010                      C     bootDrive   db ?    ;The Int 33h device we booted from
00000011                      C     requestHdr  drvReqHdr    <,,,,>   ;The device driver header
0000001E                      C                 db 20 dup (?)    ;Reserve xtra space for cmd data, with padding
00000032                      C     sysVarsPtr  dq ?    ;Pointer to dpbHeadPtr, head of Sys Vars structure below
0000003A                      C     mcbChainPtr dq ?    ;Pointer to the MCB chain
00000042                      C     dpbHeadPtr  dq ?    ;Pointer to the first DPB in the DPB chain
0000004A                      C     sftHeadPtr  dq ?    ;Pointer to the first SFT header in SFT chain
00000052                      C     clockPtr    dq ?    ;Pointer to the current active CLOCK$ device header
                              C     ;                    The last driver loaded with the CLOCK$ bit[3] set 
0000005A                      C     conPtr      dq ?    ;Pointer to the current active CON device header 
                              C     ;                    The last driver loaded with the STDIN bit[0] set
00000062                      C     maxBytesSec dw ?    ;Maximum number of bytes per sector (size of buffers)
00000064                      C     bufHeadPtr  dq ?    ;Pointer to next usable disk buffer
0000006C                      C     cdsHeadPtr  dq ?    ;Pointer to the head of the CDS array
00000074                      C     sfcbHeadPTr dq ?    ;Pointer to the head of the System FCB chain
0000007C                      C     numSafeSFCB dw ?    ;Number of protected FCBs (y in FCBS=x,y)
0000007E                      C     numInt33drv db ?    ;Number of Int 33h drives detected in system
0000007F                      C     lastdrvNum  db ?    ;Value of LASTDRIVE (default = 5) [Size of CDS array]
00000080                      C     numJoinDrv  db ?    ;Number of Joined Drives
00000081                      C     nulDevHdr   drvHdr <,,,,>
                              C 
                              C 
000000A3                      C     inDOS       db ?    ;Incremented on each DOS call, decremented when leaving
000000A4                      C     breakFlag   db ?    ;If set, check for CTRL+C on all DOS calls
000000A5                      C     defaultDrv  db ?    ;Default, last accessed drive
                              C 
000000A6                      C     critStack   dq 41 dup (?)
000001EE                      C     critStakTop dq ?
000001F6                      C     IOStack     dq 199 dup (?)
0000082E                      C     IOStakTop   dq ?
00000836                      C     DiskStack   dq 199 dup (?)
00000E6E                      C     DiskStakTop dq ?
00000E76                      C dSeg ENDS

00000000                        loadCode SEGMENT USE64
                                    ASSUME ds:FLAT, es:FLAT
                                ; We arrive here with the following values in the registers.
                                ; rbx =  LBA of first Logical Block after SCP/BIOS
                                ; dx  = Int 33h boot device number
                                ; fs  = userbase pointer (pointer to first usable block of RAM)
00000000  55AA                      dw 0AA55h           ;Initial signature
00000002  6687DB                    xchg bx, bx
00000005  6488142510000000          mov byte ptr fs:[dSeg.bootDrive], dl ;Save the boot drive in memory

0000000D  B9000100C0                mov ecx, 0C0000100h ;Read FS MSR
00000012  0F32                      rdmsr
00000014  8BFA                      mov edi, edx        ;Get the hi dword, and clear the upper bytes
00000016  48C1E720                  shl rdi, 20h        ;Shift high
0000001A  8BF8                      mov edi, eax        ;Get the low dword in

0000001C  6448893C2500000000        mov qword ptr fs:[dSeg.dataSegPtr], rdi  
00000025  4881C7760E0000            add rdi, SIZEOF dSeg
0000002C  6448893C2508000000        mov qword ptr fs:[dSeg.codeSegPtr], rdi
00000035  488BC7                    mov rax, rdi    ;Save the codeSegment address in rax
00000038  488D3500000000            lea rsi, OFFSET resCode ;Get offset of the segment in the file into rsi
0000003F  B900100000                mov ecx, 1000h
00000044  F348A5                    rep movsq
00000047  488D3500000000            lea rsi, nData
0000004E  48014610                  add qword ptr [rsi + 10h], rax  ;Add the code segment address to the ptrs
00000052  48014618                  add qword ptr [rsi + 18h], rax
00000056  64488B3C2581000000        mov rdi, qword ptr fs:[dSeg.nulDevHdr]
0000005F  B922000000                mov ecx, 34
00000064  F3A4                      rep movsb


00000066  488D2D00000000            lea rbp, startmsg   ;Get the absolute address of message
0000006D  B804130000                mov eax, 1304h
00000072  CD30                      int 30h
00000074                        @@:
00000074  6633C0                    xor ax, ax
00000077  CD36                      int 36h
00000079  B40E                      mov ah, 0Eh
0000007B  CD30                      int 30h
0000007D  EBF5                      jmp short @b

0000007F  0A0D5374617274696E        startmsg db 0Ah,0Dh,"Starting SCP/DOS...",0Ah,0Dh,0
00000097                        nData   LABEL QWORD
00000097  0000000000000000          dq conHdr
0000009F  0480                      dw 08004h
000000A1  0000000000000000          dq nulStrat
000000A9  0000000000000000          dq nulIntr
000000B1  4E554C2020202020          db "NUL     "
000000B9                        loadCode ENDS

                                ;codeSegment points to the start of this segment!
00000000                        resCode SEGMENT BYTE USE64
                                    ASSUME ds:FLAT, es:FLAT
                                ;-----------------------------------:
                                ;       File System routines        :
                                ;-----------------------------------:
00000000                        FATprocs    PROC
00000000                        FATprocs    ENDP

                                ;-----------------------------------:
                                ;        Interrupt routines         :
                                ;-----------------------------------:
00000000                        auxIntHook  PROC    ;To remove the BIOS default handler
00000000  50                        push rax
00000001  B020                      mov al, 20h     ;EOI for PIC 1
00000003  E620                      out 020h, al    ;Send it to the command reg
00000005  58                        pop rax
00000006                            iretq
00000008                        auxIntHook  ENDP
00000008                        int49hHook  PROC    ;Called with char to transfer in al
00000008  50                        push rax
00000009  B40E                      mov ah, 0Eh
0000000B  CD30                      int 30h
0000000D  58                        pop rax
0000000E                            iretq
00000010                        int49hHook  ENDP

                                ;-----------------------------------:
                                ;          Driver routines          :
                                ;-----------------------------------:

00000010                        drivers PROC
00000010  000000000000000013    conHdr  drvHdr <auxHdr,  08013h, commonStrat, conDriver, "CON     ">
00000032  000000000000000000    auxHdr  drvHdr <prnHdr,  08000h, commonStrat, com1Intr,  "AUX     ">
00000054  000000000000000040    prnHdr  drvHdr <clkHdr,  0A040h, commonStrat, lpt1Hdr ,  "PRN     ">
00000076  000000000000000008    clkHdr  drvHdr <msdHdr,  08008h, commonStrat, clkDriver, "CLOCK$  ">
00000098  000000000000000040    msdHdr  drvHdr <com1Hdr, 00840h, commonStrat, msdIntr, <0,0,0,0,0,0,0,0>>
000000BA  000000000000000000    com1Hdr drvHdr <com2Hdr, 08000h, commonStrat, com1Intr, "COM1    ">
000000DC  000000000000000000    com2Hdr drvHdr <com3Hdr, 08000h, commonStrat, com2Intr, "COM2    ">
000000FE  000000000000000000    com3Hdr drvHdr <com4Hdr, 08000h, commonStrat, com3Intr, "COM3    ">
00000120  000000000000000000    com4Hdr drvHdr <lpt1Hdr, 08000h, commonStrat, com4Intr, "COM4    ">
00000142  000000000000000040    lpt1Hdr drvHdr <lpt2Hdr, 0A040h, commonStrat, lptIntr, "LPT1    ">
00000164  000000000000000040    lpt2Hdr drvHdr <lpt3Hdr, 0A040h, commonStrat, lptIntr, "LPT2    ">
00000186  FFFFFFFFFFFFFFFF40    lpt3Hdr drvHdr <-1, 0A040h, commonStrat, lptIntr, "LPT3    ">
000001A8                        commonStrat PROC
                                ;DOS calls this function with rbx=Ptr to request header
                                ;DOS also sets fs to point to its data segment when entered
000001A8  48891D00000000            mov qword ptr [reqHdrPtr], rbx
000001AF                            ret
000001B0  FFFFFFFFFFFFFFFF      reqHdrPtr  dq -1    ;Where the default device drivers store the ReqPtr
000001B8                        commonStrat ENDP

000001B8                        nulStrat   PROC
000001B8  66C743030001              mov word ptr [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
000001BE                        nulIntr PROC
000001BE                            ret
000001BF                        nulIntr     ENDP
000001BF                        nulStrat    ENDP

000001BF                        conDriver   PROC
000001BF  50                        push rax
000001C0  53                        push rbx
000001C1  488B1D00000000            mov rbx, qword ptr [reqHdrPtr]
000001C8  8A4302                    mov al, byte ptr [rbx + drvReqHdr.cmdcde]
000001CB  32C0                      xor al, al
000001CD  7421                      jz conInit
000001CF  3C04                      cmp al, 4
000001D1  7446                      jz conRead
000001D3  3C05                      cmp al, 5
000001D5  745F                      jz conNondestructiveRead
000001D7  3C06                      cmp al, 6
000001D9  740C                      jz conExit
000001DB  3C07                      cmp al, 7
000001DD  746A                      jz conFlushInputBuffers
000001DF  3C08                      cmp al, 8
000001E1  7472                      jz conWrite
000001E3  3C09                      cmp al, 9
000001E5  746E                      jz conWrite
                                ;All other cases fall through here
000001E7                        conExit:
000001E7  66814B030001              or word ptr [rbx + drvReqHdr.status], 0100h    ;Merge done bit
000001ED  5B                        pop rbx
000001EE  58                        pop rax
000001EF                            ret
000001F0                        conInit:    ;Function 0
000001F0  52                        push rdx
000001F1  E853000000                call conFlushInputBuffers  ;Call to flush keyboard buffer
000001F6  B800050000                mov eax, 0500h  ;Set page zero as the default page
000001FB  CD30                      int 30h
000001FD  B402                      mov ah, 02h
000001FF  33D2                      xor edx, edx    ;Set screen cursor to top right corner
00000201  8AFA                      mov bh, dl      ;Set cursor for page 0
00000203  CD30                      int 30h
00000205  B707                      mov bh, 07h     ;Grey/Black attribs
00000207  B800060000                mov eax, 0600h  ;Clear whole screen
0000020C  CD30                      int 30h
0000020E  5A                        pop rdx
0000020F  EBD6                      jmp short conExit
00000211                        conIORead:
00000211  66C743030380              mov word ptr [rbx + drvReqHdr.status], 8003h    ;Error, unknown command!
00000217  EBCE                      jmp short conExit
00000219                        conRead:    ;Function 4
00000219  57                        push rdi
0000021A  51                        push rcx
0000021B  488B7B0E                  mov rdi, qword ptr [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
0000021F  33C9                      xor ecx, ecx    ;Zero the char counter
00000221                        @@:
00000221  3B4B16                    cmp ecx, dword ptr [rbx + ioReqPkt.tfrlen]
00000224  7409                      je @f
00000226  33C0                      xor eax, eax
00000228  CD36                      int 36h
0000022A  AA                        stosb   ;Store char in al into buffer and inc rdi
0000022B  FFC1                      inc ecx
0000022D  EBF2                      jmp short @b
0000022F                        @@:
0000022F  894B16                    mov dword ptr [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
00000232  59                        pop rcx
00000233  5F                        pop rdi
00000234  EBB1                      jmp short conExit
00000236                        conNondestructiveRead:  ;Function 5
00000236  B401                      mov ah, 01h     ;Get key if exists
00000238  CD36                      int 36h
0000023A  7405                      jz @f           ;If zero clear => no key, go forwards
                                    ;Keystroke available
0000023C  88430D                    mov byte ptr [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Move char in al
0000023F  EBA6                      jmp short conExit
00000241                        @@: ;No keystroke available
00000241  66C743030003              mov word ptr [rbx + nonDestInNoWaitReqPkt.status], 0300h   ;Set busy bit
00000247  EB9E                      jmp short conExit
00000249                        conFlushInputBuffers:   ;Function 7
00000249  B401                      mov ah, 01      ;Get buffer status
0000024B  CD36                      int 36h
0000024D  7498                      jz conExit      ;If zero clear => no more keys to read
0000024F  32E4                      xor ah, ah
00000251  CD36                      int 36h ;Read key to flush from buffer
00000253  EBF4                      jmp short conFlushInputBuffers
00000255                        conWrite:   ;Function 8 and 9
00000255  56                        push rsi
00000256  51                        push rcx
00000257  488B730E                  mov rsi, qword ptr [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
0000025B  33C9                      xor ecx, ecx    ;Zero the char counter
0000025D                        @@: 
0000025D  3B4B16                    cmp ecx, dword ptr [rbx + ioReqPkt.tfrlen]
00000260  7407                      je @f
00000262  AC                        lodsb   ;Get char into al, and inc rsi
00000263  CD49                      int 49h ;Fast print char
00000265  FFC1                      inc ecx
00000267  EBF4                      jmp short @b ;keep printing until all chars printed
00000269                        @@:
00000269  894B16                    mov dword ptr [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
0000026C  59                        pop rcx
0000026D  5E                        pop rsi
0000026E  E974FFFFFF                jmp conExit
00000273                        conDriver   ENDP

00000273                        clkDriver   PROC
00000273                        clkDriver   ENDP

00000273                        msdDriver   PROC
00000273                        msdIntr     LABEL   BYTE
00000273  50                        push rax
00000274  57                        push rdi
00000275  4150                      push r8
00000277  4151                      push r9
00000279  4152                      push r10
0000027B  4153                      push r11
0000027D  4154                      push r12
0000027F  4155                      push r13
00000281  4156                      push r14
00000283  4157                      push r15
00000285  488B3D00000000            mov rdi, qword ptr [reqHdrPtr]  ;Get the ptr to the req header in rdi
0000028C  8A4702                    mov al, byte ptr [rdi + drvReqHdr.cmdcde]   ;Get command code in al
0000028F  3C18                      cmp al, 24  ;Check cmd num is valid
00000291  7738                      ja msdError
00000293  84C0                      test al, al
00000295  744D                      jz msdInit
00000297  3C01                      cmp al, 01
00000299  7465                      jz msdMedChk
0000029B  3C02                      cmp al, 02
0000029D  7461                      jz msdBuildBPB
0000029F  3C03                      cmp al, 03
000002A1  745D                      jz msdIOCTLRead
000002A3  3C04                      cmp al, 04
000002A5  7459                      jz msdRead
000002A7  3C08                      cmp al, 08
000002A9  7455                      jz msdWrite
000002AB  3C09                      cmp al, 09
000002AD  7451                      jz msdWriteVerify
000002AF  3C0C                      cmp al, 12
000002B1  744D                      jz msdIOCTLWrite
000002B3  3C0D                      cmp al, 13
000002B5  7449                      jz msdDevOpen
000002B7  3C0E                      cmp al, 14
000002B9  7445                      jz msdDevClose
000002BB  3C0F                      cmp al, 15
000002BD  7441                      jz msdRemovableMedia
000002BF  3C13                      cmp al, 19
000002C1  743D                      jz msdGenericIOCTL
000002C3  3C17                      cmp al, 23
000002C5  7439                      jz msdGetLogicalDev
000002C7  3C18                      cmp al, 24
000002C9  7435                      jz msdSetLogicalDev
000002CB                        msdError:
                                ;Place Error, Unknown Command error in status field
000002CB  66C747030380              mov word ptr [rdi + drvReqHdr.status], 8003h
000002D1                        msdIntrExit:
000002D1  415F                      pop r15
000002D3  415E                      pop r14
000002D5  415D                      pop r13
000002D7  415C                      pop r12
000002D9  415B                      pop r11
000002DB  415A                      pop r10
000002DD  4159                      pop r9
000002DF  4158                      pop r8
000002E1  5F                        pop rdi
000002E2  58                        pop rax
000002E3                            ret
000002E4                        msdInit:            ;Function 0
000002E4  CD31                      int 31h ;Get number of Int 33h devices in R8b, and aux devices in byte 3
000002E6  4D0FB6D0                  movzx r10, r8b   ;Isolate the number of Int 33h devs only
000002EA  49C7C102000000            mov r9, 2
000002F1  4983FA01                  cmp r10, 1
000002F5  4D0F44C1                  cmove r8, r9    ;If we have one device detected only, make it two!
000002F9  4488051A000000            mov byte ptr [msdHdr + drvHdr.drvNam], r8b ;Save num Int 33h devs here
00000300                        msdMedChk:          ;Function 1
00000300                        msdBuildBPB:        ;Function 2
00000300                        msdIOCTLRead:       ;Function 3
00000300                        msdRead:            ;Funciton 4
00000300                        msdWrite:           ;Function 8
00000300                        msdWriteVerify:     ;Function 9
00000300                        msdIOCTLWrite:      ;Function 12
00000300                        msdDevOpen:         ;Function 13
00000300                        msdDevClose:        ;Function 14
00000300                        msdRemovableMedia:  ;Function 15
00000300                        msdGenericIOCTL:    ;Function 19
00000300                        msdGetLogicalDev:   ;Function 23
00000300                        msdSetLogicalDev:   ;Function 24
00000300  EBCF                      jmp short msdIntrExit
00000302                        msdDriver   ENDP

00000302                        comDriver   PROC
00000302                        com1Intr    PROC
00000302  C6050000000000            mov byte ptr [comDevice], 0
00000309  EB1B                      jmp short comIntr
0000030B                        com1Intr    ENDP
0000030B                        com2Intr    PROC
0000030B  C6050000000001            mov byte ptr [comDevice], 1
00000312  EB12                      jmp short comIntr
00000314                        com2Intr    ENDP
00000314                        com3Intr    PROC
00000314  C6050000000002            mov byte ptr [comDevice], 2
0000031B  EB09                      jmp short comIntr
0000031D                        com3Intr    ENDP
0000031D                        com4Intr    PROC
0000031D  C6050000000003            mov byte ptr [comDevice], 3
00000324  EB00                      jmp short comIntr
00000326                        com4Intr    ENDP
00000326                        comIntr     PROC
00000326  50                        push rax
00000327  53                        push rbx
00000328  51                        push rcx
00000329  52                        push rdx
0000032A  56                        push rsi
0000032B  488B1D00000000            mov rbx, qword ptr [reqHdrPtr]
00000332  8A4302                    mov al, byte ptr [rbx + drvReqHdr.cmdcde]
00000335  32C0                      xor al, al
00000337  746A                      jz comInit
00000339  3C04                      cmp al, 4
0000033B  7418                      jz comRead
0000033D  3C05                      cmp al, 5
0000033F  7439                      jz comNondestructiveRead
00000341  3C08                      cmp al, 8
00000343  743D                      jz comWrite
00000345  3C09                      cmp al, 9
00000347  7439                      jz comWrite
                                ;All other cases fall through here
00000349                        comExit:
00000349  66814B030001              or word ptr [rbx + drvReqHdr.status], 0100h    ;Merge done bit
0000034F  5E                        pop rsi
00000350  5A                        pop rdx
00000351  59                        pop rcx
00000352  5B                        pop rbx
00000353  58                        pop rax
00000354                            ret
00000355                        comRead:
00000355  57                        push rdi
00000356  488B7B0E                  mov rdi, qword ptr [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
0000035A  33C9                      xor ecx, ecx    ;Zero the char counter
0000035C                        @@:
0000035C  3B4B16                    cmp ecx, dword ptr [rbx + ioReqPkt.tfrlen]
0000035F  7413                      je @f
00000361  B802000000                mov eax, 02h    ;Recieve 
00000366  668B1500000000            mov dx, word ptr [comDevice]    ;Get transacting com device
0000036D  CD34                      int 34h ;Recieve Char
0000036F  AA                        stosb   ;Store char in al into buffer and inc rdi
00000370  FFC1                      inc ecx
00000372  EBE8                      jmp short @b
00000374                        @@:
00000374  894B16                    mov dword ptr [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
00000377  5F                        pop rdi
00000378  EBCF                      jmp short comExit
0000037A                        comNondestructiveRead:
0000037A  66C743030002              mov word ptr [rbx + nonDestInNoWaitReqPkt.status], 0200h    ;Set busy bit 
00000380  EBC7                      jmp short comExit
00000382                        comWrite:
00000382  488B730E               mov rsi, qword ptr [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
00000386  33C9                      xor ecx, ecx    ;Zero the char counter
00000388                        @@: 
00000388  3B4B16                    cmp ecx, dword ptr [rbx + ioReqPkt.tfrlen]
0000038B  7410                      je @f
0000038D  AC                        lodsb   ;Get char into al, and inc rsi
0000038E  B401                      mov ah, 01h ;Move function number into ah
00000390  668B1500000000            mov dx, word ptr [comDevice]
00000397  CD34                      int 34h ;Transmit char
00000399  FFC1                      inc ecx
0000039B  EBEB                      jmp short @b ;keep printing until all chars printed
0000039D                        @@:
0000039D  894B16                    mov dword ptr [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
000003A0  EBA7                      jmp short comExit
000003A2  00                    comDevice   db ?
000003A3                        comIntr     ENDP
000003A3                        comInit     PROC
                                ; Replace INT 23h and 24h handlers first!

000003A3  B808F00000                mov eax, 0F008h     ;Get old IDT descriptor segment selector and atrr word
000003A8  B323                      mov bl, 23h         
000003AA  CD35                      int 35h
                                    ;Seg select=ax, attr word=dx
000003AC  668BF0                    mov si, ax      ;Segment selector in si
000003AF  B923000000                mov ecx, 23h    ;Interrupt 23h
000003B4  488D1D00000000            lea rbx, qword ptr [auxIntHook] ;Get address
000003BB  B807F00000                mov eax, 0F007h ;Write IDT entry 
000003C0  CD35                      int 35h ;dx has attribute word
000003C2  FEC1                      inc cl
000003C4  CD35                      int 35h ;Interrupt 24h
                                ;Now flush buffer for each valid com device
000003C6                            ret
000003C7                        comInit     ENDP

000003C7                        comDriver   ENDP

000003C7                        lptDriver   PROC    ;Drivers for LPT 1, 2, 3

000003C7                        lptIntr     PROC    ;LPT act as null device drivers
000003C7  57                        push rdi
000003C8  488B3D00000000            mov rdi, qword ptr [reqHdrPtr]
000003CF  66C747030001              mov word ptr [rdi + drvReqHdr.status], 0100h    ;Done bit set
000003D5  5F                        pop rdi
000003D6                            ret
000003D7                        lptIntr     ENDP
000003D7                        lptDriver   ENDP
000003D7                        driverDataPtr   LABEL   BYTE
000003D7                        drivers ENDP

000003D7                        resCode ENDS

                                END


Binary Map:

Segment                  Pos(file)     RVA  Size(fil) Size(mem)
---------------------------------------------------------------
loadCode                        0        0        B9        B9
resCode                        B9       B9       3D7       3D7
---------------------------------------------------------------
                                                 490       490


Macros:

                N a m e                 Type

@CatStr  . . . . . . . . . . . .        Func
@Environ . . . . . . . . . . . .        Func
@InStr . . . . . . . . . . . . .        Func
@SizeStr . . . . . . . . . . . .        Func
@SubStr  . . . . . . . . . . . .        Func
drvReqHdrM . . . . . . . . . . .        Proc


Structures and Unions:

                N a m e                 Size/Ofs   Type

bpb  . . . . . . . . . . . . . .              3E
  jmpBoot  . . . . . . . . . . .               0   Byte[3]
  oemName  . . . . . . . . . . .               3   Byte[8]
  bytsPerSec . . . . . . . . . .               B   Word
  secPerClus . . . . . . . . . .               D   Byte
  revdSecCnt . . . . . . . . . .               E   Word
  numFATs  . . . . . . . . . . .              10   Byte
  rootEntCnt . . . . . . . . . .              11   Word
  totSec16 . . . . . . . . . . .              13   Word
  media  . . . . . . . . . . . .              15   Byte
  FATsz16  . . . . . . . . . . .              16   Word
  secPerTrk  . . . . . . . . . .              18   Word
  numHeads . . . . . . . . . . .              1A   Word
  hiddSec  . . . . . . . . . . .              1C   DWord
  totSec32 . . . . . . . . . . .              20   DWord
  drvNum . . . . . . . . . . . .              24   Byte
  reserved1  . . . . . . . . . .              25   Byte
  bootSig  . . . . . . . . . . .              26   Byte
  volID  . . . . . . . . . . . .              27   DWord
  volLab . . . . . . . . . . . .              2B   Byte[11]
  filSysType . . . . . . . . . .              36   Byte[8]
bpb32  . . . . . . . . . . . . .              5A
  jmpBoot  . . . . . . . . . . .               0   Byte[3]
  oemName  . . . . . . . . . . .               3   Byte[8]
  bytsPerSec . . . . . . . . . .               B   Word
  secPerClus . . . . . . . . . .               D   Byte
  revdSecCnt . . . . . . . . . .               E   Word
  numFATs  . . . . . . . . . . .              10   Byte
  rootEntCnt . . . . . . . . . .              11   Word
  totSec16 . . . . . . . . . . .              13   Word
  media  . . . . . . . . . . . .              15   Byte
  FATsz16  . . . . . . . . . . .              16   Word
  secPerTrk  . . . . . . . . . .              18   Word
  numHeads . . . . . . . . . . .              1A   Word
  hiddSec  . . . . . . . . . . .              1C   DWord
  totSec32 . . . . . . . . . . .              20   DWord
  FATsz32  . . . . . . . . . . .              24   DWord
  extFlags . . . . . . . . . . .              28   Word
  FSver  . . . . . . . . . . . .              2A   Word
  RootClus . . . . . . . . . . .              2C   DWord
  FSinfo . . . . . . . . . . . .              30   Word
  BkBootSec  . . . . . . . . . .              32   Word
  reserved . . . . . . . . . . .              34   Byte[12]
  drvNum . . . . . . . . . . . .              40   Byte
  reserved1  . . . . . . . . . .              41   Byte
  bootSig  . . . . . . . . . . .              42   Byte
  volID  . . . . . . . . . . . .              43   DWord
  volLab . . . . . . . . . . . .              47   Byte[11]
  filSysType . . . . . . . . . .              52   Byte[8]
bpbBuildReqPkt . . . . . . . . .              1E
  hdrlen . . . . . . . . . . . .               0   Byte
  unitnm . . . . . . . . . . . .               1   Byte
  cmdcde . . . . . . . . . . . .               2   Byte
  status . . . . . . . . . . . .               3   Word
  devptr . . . . . . . . . . . .               5   QWord
  medesc . . . . . . . . . . . .               D   Byte
  bufptr . . . . . . . . . . . .               E   QWord
  bpbptr . . . . . . . . . . . .              16   QWord
bpbEx  . . . . . . . . . . . . .              78
  jmpBoot  . . . . . . . . . . .               0   Byte[3]
  oemName  . . . . . . . . . . .               3   Byte[8]
  MustBeZero . . . . . . . . . .               B   Byte[53]
  partitionOffset  . . . . . . .              40   QWord
  volumeLength . . . . . . . . .              48   QWord
  FAToffset  . . . . . . . . . .              50   DWord
  FATlength  . . . . . . . . . .              54   DWord
  clusterHeapOffset  . . . . . .              58   DWord
  clusterCount . . . . . . . . .              5C   DWord
  firstClusterOfRootDir  . . . .              60   DWord
  volumeSerialNum  . . . . . . .              64   DWord
  FSrevision . . . . . . . . . .              68   Word
  volumeFlags  . . . . . . . . .              6A   Word
  bytesPerSectorShift  . . . . .              6C   Byte
  sectorsPerClusterShift . . . .              6D   Byte
  numberOfFATs . . . . . . . . .              6E   Byte
  driveSelect  . . . . . . . . .              6F   Byte
  percentInUse . . . . . . . . .              70   Byte
  reserved . . . . . . . . . . .              71   Byte[7]
bufferHdr  . . . . . . . . . . .              18
  nextBufPtr . . . . . . . . . .               0   QWord
  driveNumber  . . . . . . . . .               8   Byte
  bufferFlags  . . . . . . . . .               9   Byte
  bufferLBA  . . . . . . . . . .               A   DWord
  bufFATcopy . . . . . . . . . .               E   Byte
  bufFAToff  . . . . . . . . . .               F   Byte
  driveDPBPtr  . . . . . . . . .              10   QWord
cds  . . . . . . . . . . . . . .              5B
  sCurrentPath . . . . . . . . .               0   Byte[67]
  wFlags . . . . . . . . . . . .              43   Word
  qDPBPtr  . . . . . . . . . . .              45   QWord
  dStartCluster  . . . . . . . .              4D   DWord
  qReserved  . . . . . . . . . .              51   QWord
  wBackslashOffset . . . . . . .              59   Word
closeReqPkt  . . . . . . . . . .               D
  hdrlen . . . . . . . . . . . .               0   Byte
  unitnm . . . . . . . . . . . .               1   Byte
  cmdcde . . . . . . . . . . . .               2   Byte
  status . . . . . . . . . . . .               3   Word
  devptr . . . . . . . . . . . .               5   QWord
dSeg . . . . . . . . . . . . . .             E76
  dataSegPtr . . . . . . . . . .               0   QWord
  codeSegPtr . . . . . . . . . .               8   QWord
  bootDrive  . . . . . . . . . .              10   Byte
  requestHdr . . . . . . . . . .              11   drvReqHdr
  sysVarsPtr . . . . . . . . . .              32   QWord
  mcbChainPtr  . . . . . . . . .              3A   QWord
  dpbHeadPtr . . . . . . . . . .              42   QWord
  sftHeadPtr . . . . . . . . . .              4A   QWord
  clockPtr . . . . . . . . . . .              52   QWord
  conPtr . . . . . . . . . . . .              5A   QWord
  maxBytesSec  . . . . . . . . .              62   Word
  bufHeadPtr . . . . . . . . . .              64   QWord
  cdsHeadPtr . . . . . . . . . .              6C   QWord
  sfcbHeadPTr  . . . . . . . . .              74   QWord
  numSafeSFCB  . . . . . . . . .              7C   Word
  numInt33drv  . . . . . . . . .              7E   Byte
  lastdrvNum . . . . . . . . . .              7F   Byte
  numJoinDrv . . . . . . . . . .              80   Byte
  nulDevHdr  . . . . . . . . . .              81   drvHdr
  inDOS  . . . . . . . . . . . .              A3   Byte
  breakFlag  . . . . . . . . . .              A4   Byte
  defaultDrv . . . . . . . . . .              A5   Byte
  critStack  . . . . . . . . . .              A6   QWord[41]
  critStakTop  . . . . . . . . .             1EE   QWord
  IOStack  . . . . . . . . . . .             1F6   QWord[199]
  IOStakTop  . . . . . . . . . .             82E   QWord
  DiskStack  . . . . . . . . . .             836   QWord[199]
  DiskStakTop  . . . . . . . . .             E6E   QWord
dpb  . . . . . . . . . . . . . .              36
  bDriveNumber . . . . . . . . .               0   Byte
  bUnitNumber  . . . . . . . . .               1   Byte
  bBytesPerSectorShift . . . . .               2   Byte
  bMaxSectorInCluster  . . . . .               3   Byte
  bSectorsPerClusterShift  . . .               4   Byte
  dFAToffset . . . . . . . . . .               5   DWord
  bNumberOfFATs  . . . . . . . .               9   Byte
  wNumberRootDirEntries  . . . .               A   Word
  dClusterHeapOffset . . . . . .               C   DWord
  dClusterCount  . . . . . . . .              10   DWord
  dFATlength . . . . . . . . . .              14   DWord
  dFirstClusterOfRootDir . . . .              18   DWord
  qDriverHeaderPtr . . . . . . .              1C   QWord
  bMediaDescriptor . . . . . . .              24   Byte
  bAccessFlag  . . . . . . . . .              25   Byte
  qNextDPBPtr  . . . . . . . . .              26   QWord
  dFirstFreeCluster  . . . . . .              2E   DWord
  dNumberOfFreeClusters  . . . .              32   DWord
drvHdr . . . . . . . . . . . . .              22
  nxtPtr . . . . . . . . . . . .               0   QWord
  atWord . . . . . . . . . . . .               8   Word
  strPtr . . . . . . . . . . . .               A   QWord
  intPtr . . . . . . . . . . . .              12   QWord
  drvNam . . . . . . . . . . . .              1A   Byte[8]
drvReqHdr  . . . . . . . . . . .               D
  hdrlen . . . . . . . . . . . .               0   Byte
  unitnm . . . . . . . . . . . .               1   Byte
  cmdcde . . . . . . . . . . . .               2   Byte
  status . . . . . . . . . . . .               3   Word
  devptr . . . . . . . . . . . .               5   QWord
flushReqPkt  . . . . . . . . . .               D
  hdrlen . . . . . . . . . . . .               0   Byte
  unitnm . . . . . . . . . . . .               1   Byte
  cmdcde . . . . . . . . . . . .               2   Byte
  status . . . . . . . . . . . .               3   Word
  devptr . . . . . . . . . . . .               5   QWord
getDevReqPkt . . . . . . . . . .              10
  hdrlen . . . . . . . . . . . .               0   Byte
  unitnm . . . . . . . . . . . .               1   Byte
  cmdcde . . . . . . . . . . . .               2   Byte
  status . . . . . . . . . . . .               3   Word
  devptr . . . . . . . . . . . .               5   QWord
  getcmd . . . . . . . . . . . .               D   Byte
  cmdsts . . . . . . . . . . . .               E   Word
initReqPkt . . . . . . . . . . .              1F
  hdrlen . . . . . . . . . . . .               0   Byte
  unitnm . . . . . . . . . . . .               1   Byte
  cmdcde . . . . . . . . . . . .               2   Byte
  status . . . . . . . . . . . .               3   Word
  devptr . . . . . . . . . . . .               5   QWord
  numunt . . . . . . . . . . . .               D   Byte
  endptr . . . . . . . . . . . .               E   QWord
  optptr . . . . . . . . . . . .              16   QWord
  drvnum . . . . . . . . . . . .              1E   Byte
ioReqPkt . . . . . . . . . . . .              2A
  hdrlen . . . . . . . . . . . .               0   Byte
  unitnm . . . . . . . . . . . .               1   Byte
  cmdcde . . . . . . . . . . . .               2   Byte
  status . . . . . . . . . . . .               3   Word
  devptr . . . . . . . . . . . .               5   QWord
  medesc . . . . . . . . . . . .               D   Byte
  bufptr . . . . . . . . . . . .               E   QWord
  tfrlen . . . . . . . . . . . .              16   DWord
  strtsc . . . . . . . . . . . .              1A   QWord
  desptr . . . . . . . . . . . .              22   QWord
ioctlReqPkt  . . . . . . . . . .              27
  hdrlen . . . . . . . . . . . .               0   Byte
  unitnm . . . . . . . . . . . .               1   Byte
  cmdcde . . . . . . . . . . . .               2   Byte
  status . . . . . . . . . . . .               3   Word
  devptr . . . . . . . . . . . .               5   QWord
  majfun . . . . . . . . . . . .               D   Byte
  minfun . . . . . . . . . . . .               E   Byte
  rsival . . . . . . . . . . . .               F   QWord
  rdival . . . . . . . . . . . .              17   QWord
  ctlptr . . . . . . . . . . . .              1F   QWord
mediaCheckReqPkt . . . . . . . .              17
  hdrlen . . . . . . . . . . . .               0   Byte
  unitnm . . . . . . . . . . . .               1   Byte
  cmdcde . . . . . . . . . . . .               2   Byte
  status . . . . . . . . . . . .               3   Word
  devptr . . . . . . . . . . . .               5   QWord
  medesc . . . . . . . . . . . .               D   Byte
  medret . . . . . . . . . . . .               E   Byte
  desptr . . . . . . . . . . . .               F   QWord
nonDestInNoWaitReqPkt  . . . . .               E
  hdrlen . . . . . . . . . . . .               0   Byte
  unitnm . . . . . . . . . . . .               1   Byte
  cmdcde . . . . . . . . . . . .               2   Byte
  status . . . . . . . . . . . .               3   Word
  devptr . . . . . . . . . . . .               5   QWord
  retbyt . . . . . . . . . . . .               D   Byte
openReqPkt . . . . . . . . . . .               D
  hdrlen . . . . . . . . . . . .               0   Byte
  unitnm . . . . . . . . . . . .               1   Byte
  cmdcde . . . . . . . . . . . .               2   Byte
  status . . . . . . . . . . . .               3   Word
  devptr . . . . . . . . . . . .               5   QWord
remMediaReqPkt . . . . . . . . .               D
  hdrlen . . . . . . . . . . . .               0   Byte
  unitnm . . . . . . . . . . . .               1   Byte
  cmdcde . . . . . . . . . . . .               2   Byte
  status . . . . . . . . . . . .               3   Word
  devptr . . . . . . . . . . . .               5   QWord
setDevReqPkt . . . . . . . . . .              10
  hdrlen . . . . . . . . . . . .               0   Byte
  unitnm . . . . . . . . . . . .               1   Byte
  cmdcde . . . . . . . . . . . .               2   Byte
  status . . . . . . . . . . . .               3   Word
  devptr . . . . . . . . . . . .               5   QWord
  setcmd . . . . . . . . . . . .               D   Byte
  cmdsts . . . . . . . . . . . .               E   Word
sft  . . . . . . . . . . . . . .              3D
  wNumHandles  . . . . . . . . .               0   Word
  wOpenMode  . . . . . . . . . .               2   Word
  bFileAttrib  . . . . . . . . .               4   Byte
  wDeviceInfo  . . . . . . . . .               5   Word
  qPtr . . . . . . . . . . . . .               7   QWord
  dStartClust  . . . . . . . . .               F   DWord
  wTime  . . . . . . . . . . . .              13   Word
  wDate  . . . . . . . . . . . .              15   Word
  dFileSize  . . . . . . . . . .              17   DWord
  dCurntOff  . . . . . . . . . .              1B   DWord
  wRelClust  . . . . . . . . . .              1F   Word
  dDirSect . . . . . . . . . . .              21   DWord
  bNumDirEnt . . . . . . . . . .              25   Byte
  sFCBName . . . . . . . . . . .              26   Byte[11]
  qPSPOwner  . . . . . . . . . .              31   QWord
  dAbsClusr  . . . . . . . . . .              39   DWord
sfth . . . . . . . . . . . . . .               A
  qNextSFTPtr  . . . . . . . . .               0   QWord
  wNumFiles  . . . . . . . . . .               8   Word
statusReqPkt . . . . . . . . . .               D
  hdrlen . . . . . . . . . . . .               0   Byte
  unitnm . . . . . . . . . . . .               1   Byte
  cmdcde . . . . . . . . . . . .               2   Byte
  status . . . . . . . . . . . .               3   Word
  devptr . . . . . . . . . . . .               5   QWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

loadCode . . . . . . . . . . . .        64 Bit   000000B9 Para    Private ''
resCode  . . . . . . . . . . . .        64 Bit   000003D7 Byte    Private ''
FLAT . . . . . . . . . . . . . .        GROUP


Procedures, parameters and locals:

                N a m e                 Type     Value    Segment  Length

FATprocs . . . . . . . . . . . .        P Near   00000000 resCode  00000000 Public   
auxIntHook . . . . . . . . . . .        P Near   00000000 resCode  00000008 Public   
clkDriver  . . . . . . . . . . .        P Near   00000273 resCode  00000000 Public   
com1Intr . . . . . . . . . . . .        P Near   00000302 resCode  00000009 Public   
com2Intr . . . . . . . . . . . .        P Near   0000030B resCode  00000009 Public   
com3Intr . . . . . . . . . . . .        P Near   00000314 resCode  00000009 Public   
com4Intr . . . . . . . . . . . .        P Near   0000031D resCode  00000009 Public   
comDriver  . . . . . . . . . . .        P Near   00000302 resCode  000000C5 Public   
comInit  . . . . . . . . . . . .        P Near   000003A3 resCode  00000024 Public   
comIntr  . . . . . . . . . . . .        P Near   00000326 resCode  0000007D Public   
  L&_0010  . . . . . . . . . . .        L Near   0000039D resCode
  L&_0008  . . . . . . . . . . .        L Near   00000374 resCode
  L&_0009  . . . . . . . . . . .        L Near   00000388 resCode
  L&_0007  . . . . . . . . . . .        L Near   0000035C resCode
  comWrite . . . . . . . . . . .        L Near   00000382 resCode
  comRead  . . . . . . . . . . .        L Near   00000355 resCode
  comExit  . . . . . . . . . . .        L Near   00000349 resCode
  comNondestructiveRead  . . . .        L Near   0000037A resCode
commonStrat  . . . . . . . . . .        P Near   000001A8 resCode  00000010 Public   
conDriver  . . . . . . . . . . .        P Near   000001BF resCode  000000B4 Public   
  conExit  . . . . . . . . . . .        L Near   000001E7 resCode
  conNondestructiveRead  . . . .        L Near   00000236 resCode
  conInit  . . . . . . . . . . .        L Near   000001F0 resCode
  L&_0006  . . . . . . . . . . .        L Near   00000269 resCode
  L&_0004  . . . . . . . . . . .        L Near   00000241 resCode
  L&_0005  . . . . . . . . . . .        L Near   0000025D resCode
  L&_0002  . . . . . . . . . . .        L Near   00000221 resCode
  L&_0003  . . . . . . . . . . .        L Near   0000022F resCode
  conWrite . . . . . . . . . . .        L Near   00000255 resCode
  conIORead  . . . . . . . . . .        L Near   00000211 resCode
  conFlushInputBuffers . . . . .        L Near   00000249 resCode
  conRead  . . . . . . . . . . .        L Near   00000219 resCode
drivers  . . . . . . . . . . . .        P Near   00000010 resCode  000003C7 Public   
int49hHook . . . . . . . . . . .        P Near   00000008 resCode  00000008 Public   
lptDriver  . . . . . . . . . . .        P Near   000003C7 resCode  00000010 Public   
lptIntr  . . . . . . . . . . . .        P Near   000003C7 resCode  00000010 Public   
msdDriver  . . . . . . . . . . .        P Near   00000273 resCode  0000008F Public   
  msdWriteVerify . . . . . . . .        L Near   00000300 resCode
  msdDevOpen . . . . . . . . . .        L Near   00000300 resCode
  msdDevClose  . . . . . . . . .        L Near   00000300 resCode
  msdIOCTLRead . . . . . . . . .        L Near   00000300 resCode
  msdInit  . . . . . . . . . . .        L Near   000002E4 resCode
  msdBuildBPB  . . . . . . . . .        L Near   00000300 resCode
  msdIOCTLWrite  . . . . . . . .        L Near   00000300 resCode
  msdGetLogicalDev . . . . . . .        L Near   00000300 resCode
  msdError . . . . . . . . . . .        L Near   000002CB resCode
  msdSetLogicalDev . . . . . . .        L Near   00000300 resCode
  msdRemovableMedia  . . . . . .        L Near   00000300 resCode
  msdIntrExit  . . . . . . . . .        L Near   000002D1 resCode
  msdGenericIOCTL  . . . . . . .        L Near   00000300 resCode
  msdWrite . . . . . . . . . . .        L Near   00000300 resCode
  msdMedChk  . . . . . . . . . .        L Near   00000300 resCode
  msdRead  . . . . . . . . . . .        L Near   00000300 resCode
nulIntr  . . . . . . . . . . . .        P Near   000001BE resCode  00000001 Public   
nulStrat . . . . . . . . . . . .        P Near   000001B8 resCode  00000007 Public   


Symbols:

                N a m e                 Type       Value     Attr

L&_0001  . . . . . . . . . . . .        L Near            74h loadCode 
auxHdr . . . . . . . . . . . . .        drvHdr            32h resCode 
clkHdr . . . . . . . . . . . . .        drvHdr            76h resCode 
com1Hdr  . . . . . . . . . . . .        drvHdr            BAh resCode 
com2Hdr  . . . . . . . . . . . .        drvHdr            DCh resCode 
com3Hdr  . . . . . . . . . . . .        drvHdr            FEh resCode 
com4Hdr  . . . . . . . . . . . .        drvHdr           120h resCode 
comDevice  . . . . . . . . . . .        Byte             3A2h resCode 
conHdr . . . . . . . . . . . . .        drvHdr            10h resCode 
driverDataPtr  . . . . . . . . .        Byte             3D7h resCode 
lpt1Hdr  . . . . . . . . . . . .        drvHdr           142h resCode 
lpt2Hdr  . . . . . . . . . . . .        drvHdr           164h resCode 
lpt3Hdr  . . . . . . . . . . . .        drvHdr           186h resCode 
msdHdr . . . . . . . . . . . . .        drvHdr            98h resCode 
msdIntr  . . . . . . . . . . . .        Byte             273h resCode 
nData  . . . . . . . . . . . . .        QWord             97h loadCode 
prnHdr . . . . . . . . . . . . .        drvHdr            54h resCode 
reqHdrPtr  . . . . . . . . . . .        QWord            1B0h resCode 
startmsg . . . . . . . . . . . .        Byte[24]          7Fh loadCode 

io.asm: 415 lines, 3 passes, 0 ms, 0 warnings, 0 errors
