JWasm v2.11, Oct 20 2013
io.asm
                                    
                                    .x64p

                                    INCLUDE fatStruc.inc
                              C 
                              C ;-------------------------------------------------------;
                              C ; This include file contains miscellaneous FAT driver   ;
                              C ; structures. exFAT will have it's own files at a later ;
                              C ; stage.                                                ;
                              C ;-------------------------------------------------------;
                              C 
00000000                      C bpb STRUC          ;FAT 12 and 16 BPB
                              C 
00000000                      C     jmpBoot    db 3 dup (?)
00000003                      C     oemName    db 8 dup (?)  ;OEM name
0000000B                      C     bytsPerSec dw ?  ;Bytes per sector
0000000D                      C     secPerClus db ?  ;Sectors per cluster
0000000E                      C     revdSecCnt dw ?  ;Number of reserved sectors
00000010                      C     numFATs    db ?  ;Number of FATs on media
00000011                      C     rootEntCnt dw ?  ;Number of entries in Root directory
00000013                      C     totSec16   dw ?  ;Number of sectors on medium
00000015                      C     media      db ?  ;Media descriptor byte
00000016                      C     FATsz16    dw ?  ;Number of sectors per FAT
00000018                      C     secPerTrk  dw ?  ;Number of sectors per "track"
0000001A                      C     numHeads   dw ?  ;Number of read "heads"
0000001C                      C     hiddSec    dd ?  ;Number of hidden sectors
00000020                      C     totSec32   dd ?  ;32 bit count of sectors
                              C 
00000024                      C     drvNum     db ?  ;Logical drive number (00h or 80h)
00000025                      C     reserved1  db ?  ;Reserved byte
00000026                      C     bootSig    db ?  ;Extended boot signature (29h)
00000027                      C     volID      dd ?  ;Volume serial number
0000002B                      C     volLab     db 11 dup (?) ;Volume label string
00000036                      C     filSysType db 8 dup (?)  ;File system type string
                              C 
0000003E                      C bpb ENDS
                              C 
00000000                      C bpb32 STRUC       ;FAT 32 BPB
                              C 
00000000                      C     jmpBoot    db 3 dup (?)
00000003                      C     oemName    db 8 dup (?)  ;OEM name
0000000B                      C     bytsPerSec dw ?  ;Bytes per sector
0000000D                      C     secPerClus db ?  ;Sectors per cluster
0000000E                      C     revdSecCnt dw ?  ;Number of reserved sectors
00000010                      C     numFATs    db ?  ;Number of FATs on media
00000011                      C     rootEntCnt dw ?  ;Number of entries in Root directory
00000013                      C     totSec16   dw ?  ;Number of sectors on medium
00000015                      C     media      db ?  ;Media descriptor byte
00000016                      C     FATsz16    dw ?  ;Number of sectors per FAT, must be 0 for FAT 32
00000018                      C     secPerTrk  dw ?  ;Number of sectors per "track"
0000001A                      C     numHeads   dw ?  ;Number of read "heads"
0000001C                      C     hiddSec    dd ?  ;Number of hidden sectors
00000020                      C     totSec32   dd ?  ;32 bit count of sectors
                              C 
00000024                      C     FATsz32    dd ?  ;32 bit count of sectors occupied by one FAT
00000028                      C     extFlags   dw ?  ;Extended Flags word
0000002A                      C     FSver      dw ?  ;File system version word, must be 0
0000002C                      C     RootClus   dd ?  ;First Cluster of Root Directory
00000030                      C     FSinfo     dw ?  ;Sector number of FSINFO structure, usually 1
00000032                      C     BkBootSec  dw ?  ;Backup Boot sector, either 0 or 6
00000034                      C     reserved   db 12 dup (?) ;Reserved 12 bytes
                              C 
00000040                      C     drvNum     db ?  ;Logical drive number (00h or 80h)
00000041                      C     reserved1  db ?  ;Reserved byte
00000042                      C     bootSig    db ?  ;Extended boot signature (29h)
00000043                      C     volID      dd ?  ;Volume serial number
00000047                      C     volLab     db 11 dup (?) ;Volume label string
00000052                      C     filSysType db 8 dup (?)  ;File system type string
                              C 
0000005A                      C bpb32 ENDS
                              C 
                              C 
00000000                      C bpbEx STRUC   ;exFAT BPB
                              C 
00000000                      C     jmpBoot                db 3 dup (?) 
00000003                      C     oemName                db 8 dup (?) ;OEM name
0000000B                      C     MustBeZero             db 53 dup (?) ;Must be 0, 53 bytes
00000040                      C     partitionOffset        dq ?  ;in sectors, 0 means ignore this field
00000048                      C     volumeLength           dq ?  ;Volume Length in sectors
00000050                      C     FAToffset              dd ?  ;Volume rel offset of first FAT, in sectors
00000054                      C     FATlength              dd ?  ;FAT length, in sectors
00000058                      C     clusterHeapOffset      dd ?  ;Start of data area, in sectors
0000005C                      C     clusterCount           dd ?  ;Number of clusters on medium
00000060                      C     firstClusterOfRootDir  dd ?  ;First Cluster of Root Directory, min 2
00000064                      C     volumeSerialNum        dd ?  ;Volume Serial Number
00000068                      C     FSrevision             dw ?  ;Should be 0001 (v1.00)
0000006A                      C     volumeFlags            dw ?  ;Volume Flags, refer to documentation
0000006C                      C     bytesPerSectorShift    db ?  ;min 9 (512 bps), max 12 (4096 bps)
0000006D                      C     sectorsPerClusterShift db ?  ;Result of log_2(N) for N=sec per clus
0000006E                      C     numberOfFATs           db ?  ;Number of FATs, only 1 or 2
0000006F                      C     driveSelect            db ?  ;Drive Select, 0 or 80h (Int 13h)
00000070                      C     percentInUse           db ?  ;Rounded down. FFh means unknown
00000071                      C     reserved               db 7 dup (?)  ;Reserved for alignment
                              C 
00000078                      C bpbEx ENDS
                                    INCLUDE dosStruc.inc
                              C 
                              C ;-------------------------------------------------------;
                              C ; This include file contains miscellaneous internal     ;
                              C ; SCP/DOS structures.                                   ;
                              C ;-------------------------------------------------------;
                              C 
                              C ;------------------------------------------------------------------------;
                              C ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
                              C ; its file system structure. This is used to locate files and structures
                              C ; on the device itself and to translate file requests to cluster chains
                              C ; to LBAs to pass to the disk driver..
                              C ; The DPBs form a linked list, with each DPB formed after the devices 
                              C ; drivers Initialise routine has been called.
                              C ;------------------------------------------------------------------------;
00000000                      C dpb STRUC        ;Drive Parameter Block
                              C 
00000000                      C     bDriveNumber            db ?  ;Drive number
00000001                      C     bUnitNumber             db ?  ;Unit number in device
00000002                      C     bBytesPerSectorShift    db ?  ;min 9 (512 bps), max 12 (4096 bps)
00000003                      C     bMaxSectorInCluster     db ?  ;(Maximum sector in cluster) - 1
                              C ;                                       i.e. (2^bSectorsPerClusterShift) - 1
00000004                      C     bSectorsPerClusterShift db ?  ;Sectors per cluster exponent
00000005                      C     dFAToffset              dd ?  ;Vol rel offset of first FAT, in sectors
00000009                      C     bNumberOfFATs           db ?  ;Number of FATs
0000000A                      C     wNumberRootDirEntries   dw ?  ;In sectors
0000000C                      C     dClusterHeapOffset      dd ?  ;Start of data area, in sectors
00000010                      C     dClusterCount           dd ?  ;Total number of clusters (volume size)
00000014                      C     dFATlength              dd ?  ;FAT length, in sectors
00000018                      C     dFirstClusterOfRootDir  dd ?  ;First Cluster of Root Directory, min 2
0000001C                      C     qDriverHeaderPtr        dq ?  ;Pointer to device driver header
00000024                      C     bMediaDescriptor        db ?  ;Media descriptor
00000025                      C     bAccessFlag             db ?  ;Access Flag (0 if accessed, else -1)
00000026                      C     qNextDPBPtr             dq ?  ;Pointer to next DPB, -1 if at end
0000002E                      C     dFirstFreeCluster       dd ?  ;Starting cluster of free space search
00000032                      C     dNumberOfFreeClusters   dd ?  ;Number of free clusters, -1 unknown
                              C 
00000036                      C dpb ENDS
                              C 
                              C ;------------------------------------------------------------------------;
                              C ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
                              C ; All disk pathing requests go via the CDS for that drive.
                              C ; The default drive is the last accessed drive, this number is stored
                              C ; in the DOS data area.
                              C ; The CDS is stored as an array with the offset into the array being 
                              C ; given by the drive letter's offset into the alphabet (with A=0).
                              C ;------------------------------------------------------------------------;
00000000                      C cds STRUC       ;Current Directory Structure
00000000                      C     sCurrentPath        db 67 dup(?)    ;Current Directory Path String
00000043                      C     wFlags              dw ? ;CDS Flags - 
00000045                      C     qDPBPtr             dq ? ;Ptr to the DPB of the dev using this CDS
0000004D                      C     dStartCluster       dd ? ;Starting cluster of the directory on disk
00000051                      C     qReserved           dq ? ;Reserved for future expansions
00000059                      C     wBackslashOffset    dw ? ;How many chars to the start of current dir in the 
                              C ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
                              C ; another, we save the number of chars to skip to that deep level).
                              C ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
                              C ; Flags: Bit 15 set = Network drive
                              C ;        Bit 14 set = Physical drive
                              C ;        Bit 13 set = JOIN'ed drive
                              C ;        Bit 12 set = SUBST'ed drive
                              C ;        Bit 7  set = Redirected, not network, drive (This is how MSCDEX worked)
0000005B                      C cds ENDS
                              C 
                              C ;------------------------------------------------------------------------;
                              C ; The SFT is a way to allow applications to open file handles to files 
                              C ; and devices. As things stand, the SFT chain will have 5 file handles
                              C ; under the first header, and then a second header will be linked to the 
                              C ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
                              C ; a size for the second SFT (default 10 files). Same for System FCBs, 
                              C ; using the FCBS= command. Default FCBS=5.
                              C ;
                              C ; A file handle describes the file, and the location within the file that
                              C ; we are reading. The file handle can be manipulated without the file
                              C ; being in memory, thus allowing the user to access data without needing 
                              C ; to take up large portions of memory. Similarly, file handles allow for
                              C ; accessing devices, by treating them as files with their drivers 
                              C ; responding and translating the manipulations of the file handle itself.
                              C ; Neither the driver nor the application should see or use the SFT for
                              C ; the handle, as it is subject to change (and will change when file 
                              C ; sharing provisions are included). The DOS will make requests to the 
                              C ; driver in a generic way and the driver will respond, with DOS keeping
                              C ; track of the information in the SFT entry for that handle. 
                              C ;
                              C ; One SFT entry can have multiple handles and multiple SFT entries
                              C ; can point to the same file. It all depends on what the applications 
                              C ; want to do with the File.
                              C ;
                              C ; !!!!IMPORTANT!!!!
                              C ; Currently there are plans for File Sharing, but I include minimal 
                              C ; provisions for it. I really just wanna get a DOS out the door.
                              C ;
                              C ;Each SFT may look like this:
                              C ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
                              C ;            |                |
                              C ;       wNumFiles*sft    wNumFiles*sft
                              C ;
                              C ; Two SFT chains are built; one for files, and a one for so called 
                              C ; System FCBs.
                              C ;
                              C ; Each SFT header has an array of SFT's below it, with the number of 
                              C ; SFTs given by wNumFiles. The SFT headers form a linked list.
                              C ;------------------------------------------------------------------------;
00000000                      C sfth STRUC   ;System file table header
                              C ; This is the SFT header.
                              C ; This structure comes before the start of the first file in the array/table.
00000000                      C     qNextSFTPtr dq ?    ;Pointer to the next SFT
00000008                      C     wNumFiles   dw ?    ;Number of files in this table
0000000A                      C sfth ENDS
                              C 
00000000                      C sft STRUC
                              C ;This is the file struc itself
00000000                      C     wNumHandles dw ?    ;Number of handles pointing to this file
00000002                      C     wOpenMode   dw ?    ;Bit 15 set if opened via FCB
00000004                      C     bFileAttrib db ?    ;Regular File Attributes
00000005                      C     wDeviceInfo dw ?    ;Includes Device number
00000007                      C     qPtr        dq ?    ;IF char, ptr to device driver, ELSE DPBptr
0000000F                      C     dStartClust dd ?    ;Start cluster of file
00000013                      C     wTime       dw ?    ;File Time
00000015                      C     wDate       dw ?    ;File Date
00000017                      C     dFileSize   dd ?    ;File Size, in bytes
0000001B                      C     dCurntOff   dd ?    ;Current Offset in file, in bytes
0000001F                      C     wRelClust   dw ?    ;Relative cluster in file of the last cluster accessed
00000021                      C     dDirSect    dd ?    ;Relative number of sector containing directory entry 
00000025                      C     bNumDirEnt  db ?    ;Number of dir entry within sector (byte offset/32)
00000026                      C     sFCBName    db 11 dup(?)    ;8.3 Filename
00000031                      C     qPSPOwner   dq ?    ;Address of PSP of program which first opened this file
00000039                      C     dAbsClusr   dd ?    ;Absolute cluster of last cluster accessed
0000003D                      C sft ENDS
                                    INCLUDE driverStruc.inc
                              C 
                              C ;-------------------------------------------------------;
                              C ; This include file contains miscellaneous SCP/DOS      ;
                              C ; device driver related structures.                     ;
                              C ;-------------------------------------------------------;
                              C 
00000000                      C drvHdr STRUC  ;Device Driver Header for character and block devices
                              C 
00000000                      C     nxtPtr dq ?  ;Pointer to the next driver header, -1 if at the end
00000008                      C     atWord dw ?  ;Attribute Word
0000000A                      C     strPtr dq ?  ;Strategy Entry Pointer
00000012                      C     intPtr dq ?  ;Interrupt Entry Pointer
0000001A                      C     drvNam db 8 dup (?)  ;Driver name (Char) or Unit number byte (Block)
                              C 
00000022                      C drvHdr ENDS
                              C 
                              C drvReqHdrM MACRO  ;Driver Request Header Macro
 >                            C   ;Driver Request Header Macro
 >                            C     hdrlen db ?  ;Length of the request header  ;Driver Request Header Macro
 >                            C     unitnm db ?  ;Unit number, meaningless for character devs  ;Driver Request Header Macro
 >                            C     cmdcde db ?  ;Command code  ;Driver Request Header Macro
 >                            C     status dw ?  ;Status word  ;Driver Request Header Macro
 >                            C     devptr dq ?  ;Device queue pointer field  ;Driver Request Header Macro
 >                            C   ;Driver Request Header Macro
 >                            C ENDM  ;Driver Request Header Macro
                              C 
00000000                      C drvReqHdr   STRUC
                              C     drvReqHdrM
                             1C 
00000000                     1C     hdrlen db ?  ;Length of the request header
00000001                     1C     unitnm db ?  ;Unit number, meaningless for character devs
00000002                     1C     cmdcde db ?  ;Command code
00000003                     1C     status dw ?  ;Status word
00000005                     1C     devptr dq ?  ;Device queue pointer field
                             1C 
0000000D                      C drvReqHdr   ENDS
                              C 
00000000                      C initReqPkt STRUC  ;Init Request Packet
                              C 
                              C     drvReqHdrM    ;Common Driver Header Macro
                             1C 
00000000                     1C     hdrlen db ?  ;Length of the request header
00000001                     1C     unitnm db ?  ;Unit number, meaningless for character devs
00000002                     1C     cmdcde db ?  ;Command code
00000003                     1C     status dw ?  ;Status word
00000005                     1C     devptr dq ?  ;Device queue pointer field
                             1C 
0000000D                      C     numunt db ?  ;Number of logical units (Block only, 0 for char)
0000000E                      C     endptr dq ?  ;Pointer to first free byte after driver
00000016                      C     optptr dq ?  ;Pointer to the BPB array (block) or optional args (char)
0000001E                      C     drvnum db ?  ;Drive number
                              C 
0000001F                      C initReqPkt ENDS
                              C 
00000000                      C mediaCheckReqPkt STRUC ;Media Check Request Packet
                              C 
                              C     drvReqHdrM    ;Common Driver Header Macro
                             1C 
00000000                     1C     hdrlen db ?  ;Length of the request header
00000001                     1C     unitnm db ?  ;Unit number, meaningless for character devs
00000002                     1C     cmdcde db ?  ;Command code
00000003                     1C     status dw ?  ;Status word
00000005                     1C     devptr dq ?  ;Device queue pointer field
                             1C 
0000000D                      C     medesc db ?  ;DOS media descriptor
0000000E                      C     medret db ?  ;Return byte (Has media been changed?)
0000000F                      C     desptr dq ?  ;Pointer to a valid volume id field
                              C 
00000017                      C mediaCheckReqPkt ENDS
                              C 
00000000                      C bpbBuildReqPkt STRUC  ;Build BPB Request Packet
                              C 
                              C     drvReqHdrM    ;Common Driver Header Macro
                             1C 
00000000                     1C     hdrlen db ?  ;Length of the request header
00000001                     1C     unitnm db ?  ;Unit number, meaningless for character devs
00000002                     1C     cmdcde db ?  ;Command code
00000003                     1C     status dw ?  ;Status word
00000005                     1C     devptr dq ?  ;Device queue pointer field
                             1C 
0000000D                      C     medesc db ?  ;DOS media descriptor
0000000E                      C     bufptr dq ?  ;Transfer buffer
00000016                      C     bpbptr dq ?  ;Pointer to the BPB
                              C 
0000001E                      C bpbBuildReqPkt ENDS
                              C 
00000000                      C ioReqPkt STRUC   ;IO Request Packet
                              C 
                              C     drvReqHdrM    ;Common Driver Header Macro
                             1C 
00000000                     1C     hdrlen db ?  ;Length of the request header
00000001                     1C     unitnm db ?  ;Unit number, meaningless for character devs
00000002                     1C     cmdcde db ?  ;Command code
00000003                     1C     status dw ?  ;Status word
00000005                     1C     devptr dq ?  ;Device queue pointer field
                             1C 
0000000D                      C     medesc db ?  ;DOS media descriptor
0000000E                      C     bufptr dq ?  ;Transfer buffer
00000016                      C     tfrlen dd ?  ;Number of Sectors/bytes to transfer
0000001A                      C     strtsc dq ?  ;Starting sector for transfer
00000022                      C     desptr dq ?  ;Pointer to a valid volume id field if error
                              C 
0000002A                      C ioReqPkt ENDS
                              C 
00000000                      C nonDestInNoWaitReqPkt STRUC    ;Nondestructive Input No Wait Request Packet
                              C     
                              C     drvReqHdrM    ;Common Driver Header Macro
                             1C 
00000000                     1C     hdrlen db ?  ;Length of the request header
00000001                     1C     unitnm db ?  ;Unit number, meaningless for character devs
00000002                     1C     cmdcde db ?  ;Command code
00000003                     1C     status dw ?  ;Status word
00000005                     1C     devptr dq ?  ;Device queue pointer field
                             1C 
0000000D                      C     retbyt db ?  ;Byte read non destructively
                              C 
0000000E                      C nonDestInNoWaitReqPkt ENDS
                              C 
00000000                      C statusReqPkt STRUC   ;Status Request Packet
                              C 
                              C     drvReqHdrM    ;Common Driver Header Macro
                             1C 
00000000                     1C     hdrlen db ?  ;Length of the request header
00000001                     1C     unitnm db ?  ;Unit number, meaningless for character devs
00000002                     1C     cmdcde db ?  ;Command code
00000003                     1C     status dw ?  ;Status word
00000005                     1C     devptr dq ?  ;Device queue pointer field
                             1C 
                              C 
0000000D                      C statusReqPkt ENDS
                              C 
00000000                      C flushReqPkt STRUC ;Flush Request Packet, terminate all pending requests
                              C 
                              C     drvReqHdrM    ;Common Driver Header Macro
                             1C 
00000000                     1C     hdrlen db ?  ;Length of the request header
00000001                     1C     unitnm db ?  ;Unit number, meaningless for character devs
00000002                     1C     cmdcde db ?  ;Command code
00000003                     1C     status dw ?  ;Status word
00000005                     1C     devptr dq ?  ;Device queue pointer field
                             1C 
                              C      
0000000D                      C flushReqPkt ENDS
                              C 
00000000                      C openReqPkt STRUC ;Open Device Request Packet
                              C 
                              C     drvReqHdrM    ;Common Driver Header Macro
                             1C 
00000000                     1C     hdrlen db ?  ;Length of the request header
00000001                     1C     unitnm db ?  ;Unit number, meaningless for character devs
00000002                     1C     cmdcde db ?  ;Command code
00000003                     1C     status dw ?  ;Status word
00000005                     1C     devptr dq ?  ;Device queue pointer field
                             1C 
                              C      
0000000D                      C openReqPkt ENDS
                              C 
00000000                      C closeReqPkt STRUC ;Close Device Request Packet
                              C 
                              C     drvReqHdrM    ;Common Driver Header Macro
                             1C 
00000000                     1C     hdrlen db ?  ;Length of the request header
00000001                     1C     unitnm db ?  ;Unit number, meaningless for character devs
00000002                     1C     cmdcde db ?  ;Command code
00000003                     1C     status dw ?  ;Status word
00000005                     1C     devptr dq ?  ;Device queue pointer field
                             1C 
                              C      
0000000D                      C closeReqPkt ENDS
                              C 
00000000                      C remMediaReqPkt STRUC ;Removeable Media? Request Packet
                              C 
                              C     drvReqHdrM    ;Common Driver Header Macro
                             1C 
00000000                     1C     hdrlen db ?  ;Length of the request header
00000001                     1C     unitnm db ?  ;Unit number, meaningless for character devs
00000002                     1C     cmdcde db ?  ;Command code
00000003                     1C     status dw ?  ;Status word
00000005                     1C     devptr dq ?  ;Device queue pointer field
                             1C 
                              C      
0000000D                      C remMediaReqPkt ENDS
                              C 
00000000                      C ioctlReqPkt STRUC    ;Generic IOCTL Request Packet
                              C 
                              C     drvReqHdrM    ;Common Driver Header Macro  
                             1C 
00000000                     1C     hdrlen db ?  ;Length of the request header
00000001                     1C     unitnm db ?  ;Unit number, meaningless for character devs
00000002                     1C     cmdcde db ?  ;Command code
00000003                     1C     status dw ?  ;Status word
00000005                     1C     devptr dq ?  ;Device queue pointer field
                             1C 
0000000D                      C     majfun db ?  ;Major function number
0000000E                      C     minfun db ?  ;Minor function number
0000000F                      C     rsival dq ?  ;Contents of RSI
00000017                      C     rdival dq ?  ;Contents of RDI
0000001F                      C     ctlptr dq ?  ;Pointer to Generic IOCTL Request Packet
                              C 
00000027                      C ioctlReqPkt ENDS
                              C 
00000000                      C getDevReqPkt STRUC ;Get Logical Device Request Packet
                              C     
                              C     drvReqHdrM    ;Common Driver Header Macro
                             1C 
00000000                     1C     hdrlen db ?  ;Length of the request header
00000001                     1C     unitnm db ?  ;Unit number, meaningless for character devs
00000002                     1C     cmdcde db ?  ;Command code
00000003                     1C     status dw ?  ;Status word
00000005                     1C     devptr dq ?  ;Device queue pointer field
                             1C 
0000000D                      C     getcmd db ?  ;Command code
0000000E                      C     cmdsts dw ?  ;Command status word
                              C 
00000010                      C getDevReqPkt ENDS
                              C 
00000000                      C setDevReqPkt STRUC ;Set Logical Device Request Packet
                              C     
                              C     drvReqHdrM    ;Common Driver Header Macro
                             1C 
00000000                     1C     hdrlen db ?  ;Length of the request header
00000001                     1C     unitnm db ?  ;Unit number, meaningless for character devs
00000002                     1C     cmdcde db ?  ;Command code
00000003                     1C     status dw ?  ;Status word
00000005                     1C     devptr dq ?  ;Device queue pointer field
                             1C 
0000000D                      C     setcmd db ?  ;Command code
0000000E                      C     cmdsts dw ?  ;Command status word
                              C 
00000010                      C setDevReqPkt ENDS
                                    INCLUDE dosData.inc
                              C ; This file contains the structure of the DOS Data area
00000000                      C dSeg STRUC 
00000000                      C     dataSegPtr  dq ?    ;Pointer to the data Segment itself
00000008                      C     codeSegPtr  dq ?    ;Pointer to the start of the resident Code segment
00000010                      C     bootDrive   db ?    ;The Int 33h device we booted from
00000011                      C     requestHdr  drvReqHdr    <,,,,>   ;The device driver header
0000001E                      C                 db 20 dup (?)    ;Reserve xtra space for cmd data, with padding
00000032                      C     sysVarsPtr  dq ?    ;Pointer to dpbHeadPtr, head of Sys Vars structure below
0000003A                      C     mcbChainPtr dq ?    ;Pointer to the MCB chain
00000042                      C     dpbHeadPtr  dq ?    ;Pointer to the first DPB in the DPB chain
0000004A                      C     sftHeadPtr  dq ?    ;Pointer to the first SFT header in SFT chain
00000052                      C     clockPtr    dq ?    ;Pointer to the current active CLOCK$ device header
                              C     ;                    The last driver loaded with the CLOCK$ bit[3] set 
0000005A                      C     conPtr      dq ?    ;Pointer to the current active CON device header 
                              C     ;                    The last driver loaded with the STDIN bit[0] set
00000062                      C     maxBytesSec dw ?    ;Maximum number of bytes per sector (size of buffers)
00000064                      C     bufHeadPtr  dq ?    ;Pointer to the first disk buffer
0000006C                      C     cdsHeadPtr  dq ?    ;Pointer to the head of the CDS array
00000074                      C     sfcbHeadPTr dq ?    ;Pointer to the head of the System FCB chain
0000007C                      C     numSafeSFCB dw ?    ;Number of protected FCBs (y in FCBS=x,y)
0000007E                      C     numInt33drv db ?    ;Number of Int 33h drives detected in system
0000007F                      C     lastdrvNum  db ?    ;Value of LASTDRIVE (default = 5) [Size of CDS array]
00000080                      C     numJoinDrv  db ?    ;Number of Joined Drives
00000081                      C     nulDevHdr   drvHdr <,,,,>
                              C 
                              C 
000000A3                      C     inDOS       db ?    ;Incremented on each DOS call, decremented when leaving
000000A4                      C     breakFlag   db ?    ;If set, check for CTRL+C on all DOS calls
000000A5                      C     defaultDrv  db ?    ;Default, last accessed drive
                              C 
000000A6                      C     critStack   dq 41 dup (?)
000001EE                      C     critStakTop dq ?
000001F6                      C     IOStack     dq 199 dup (?)
0000082E                      C     IOStakTop   dq ?
00000836                      C     DiskStack   dq 199 dup (?)
00000E6E                      C     DiskStakTop dq ?
00000E76                      C dSeg ENDS

00000000                        loadCode SEGMENT USE64
                                    ASSUME ds:FLAT, es:FLAT
                                ; We arrive here with the following values in the registers.
                                ; rbx =  LBA of first Logical Block after SCP/BIOS
                                ; dx  = Int 33h boot device number
                                ; fs  = userbase pointer (pointer to first usable block of RAM)
00000000  55AA                      dw 0AA55h           ;Initial signature
00000002  6687DB                    xchg bx, bx
00000005  6488142510000000          mov byte ptr fs:[dSeg.bootDrive], dl ;Save the boot drive in memory

0000000D  B9000100C0                mov ecx, 0C0000100h ;Read FS MSR
00000012  0F32                      rdmsr
00000014  8BFA                      mov edi, edx        ;Get the hi dword, and clear the upper bytes
00000016  48C1E720                  shl rdi, 20h        ;Shift high
0000001A  8BF8                      mov edi, eax        ;Get the low dword in

0000001C  6448893C2500000000        mov qword ptr fs:[dSeg.dataSegPtr], rdi  
00000025  4881C7760E0000            add rdi, SIZEOF dSeg
0000002C  6448893C2508000000        mov qword ptr fs:[dSeg.codeSegPtr], rdi
00000035  488BC7                    mov rax, rdi    ;Save the codeSegment address in rax
00000038  488D3500000000            lea rsi, OFFSET resCode ;Get offset of the segment in the file into rsi
0000003F  B900100000                mov ecx, 1000h
00000044  F348A5                    rep movsq
00000047  488D3500000000            lea rsi, nData
0000004E  48014610                  add qword ptr [rsi + 10h], rax  ;Add the code segment address to the ptrs
00000052  48014618                  add qword ptr [rsi + 18h], rax
00000056  64488B3C2581000000        mov rdi, qword ptr fs:[dSeg.nulDevHdr]
0000005F  B922000000                mov ecx, 34
00000064  F3A4                      rep movsb


00000066  488D2D00000000            lea rbp, startmsg   ;Get the absolute address of message
0000006D  B804130000                mov eax, 1304h
00000072  CD30                      int 30h
00000074  EBFE                      jmp short $

00000076  0A0D5374617274696E        startmsg db 0Ah,0Dh,"Starting SCP/DOS...",0Ah,0Dh,0
0000008E                        nData   LABEL QWORD
0000008E  FFFFFFFFFFFFFFFF          dq -1
00000096  0480                      dw 08004h
00000098  0000000000000000          dq commonStrat
000000A0  0000000000000000          dq nulDriver
000000A8  4E554C2020202020          db "NUL     "
000000B0                        loadCode ENDS

00000000                        resCode SEGMENT BYTE USE64
                                    ASSUME ds:FLAT, es:FLAT
00000000  000000000000000013    conHdr  drvHdr <auxHdr,  08013h, commonStrat, conDriver, "CON     ">
00000022  000000000000000000    auxHdr  drvHdr <prnHdr,  08000h, commonStrat, auxDriver, "AUX     ">
00000044  000000000000000040    prnHdr  drvHdr <clkHdr,  0A040h, commonStrat, prnDriver, "PRN     ">
00000066  000000000000000008    clkHdr  drvHdr <msdHdr,  08008h, commonStrat, clkDriver, "CLOCK$  ">
00000088  000000000000000040    msdHdr  drvHdr <com1Hdr, 00840h, commonStrat, msdIntr, <0,0,0,0,0,0,0,0>>
000000AA  000000000000000000    com1Hdr drvHdr <com2Hdr, 08000h, commonStrat, com1Intr, "COM1    ">
000000CC  000000000000000000    com2Hdr drvHdr <com3Hdr, 08000h, commonStrat, com2Intr, "COM2    ">
000000EE  000000000000000000    com3Hdr drvHdr <com4Hdr, 08000h, commonStrat, com3Intr, "COM3    ">
00000110  000000000000000000    com4Hdr drvHdr <lpt1Hdr, 08000h, commonStrat, com4Intr, "COM4    ">
00000132  000000000000000040    lpt1Hdr drvHdr <lpt2Hdr, 0A040h, commonStrat, lptIntr, "LPT1    ">
00000154  000000000000000040    lpt2Hdr drvHdr <lpt3Hdr, 0A040h, commonStrat, lptIntr, "LPT2    ">
00000176  FFFFFFFFFFFFFFFF40    lpt3Hdr drvHdr <-1, 0A040h, commonStrat, lptIntr, "LPT3    ">
00000198                        commonStrat PROC
                                ;DOS calls this function with rbx=Ptr to request header
                                ;DOS also sets fs to point to its data segment when entered
00000198  48891D00000000            mov qword ptr [reqHdrPtr], rbx
0000019F                            ret
000001A0  FFFFFFFFFFFFFFFF      reqHdrPtr  dq -1    ;Where the default device drivers store the ReqPtr
000001A8                        commonStrat ENDP

000001A8                        nulDriver   PROC
000001A8  57                        push rdi
000001A9  488B3D00000000            mov rdi, qword ptr [reqHdrPtr]
000001B0  66C747030001              mov word ptr [rdi + drvReqHdr.status], 0100h    ;Done bit set
000001B6  5F                        pop rdi
000001B7                            ret
000001B8                        nulDriver   ENDP

000001B8                        conDriver   PROC
000001B8                        conDriver   ENDP

000001B8                        auxDriver   PROC
000001B8                        auxDriver   ENDP

000001B8                        prnDriver   PROC
000001B8                        prnDriver   ENDP

000001B8                        clkDriver   PROC
000001B8                        clkDriver   ENDP

000001B8                        msdDriver   PROC
000001B8                        msdIntr     LABEL   BYTE
000001B8  50                        push rax
000001B9  57                        push rdi
000001BA  4150                      push r8
000001BC  4151                      push r9
000001BE  4152                      push r10
000001C0  4153                      push r11
000001C2  4154                      push r12
000001C4  4155                      push r13
000001C6  4156                      push r14
000001C8  4157                      push r15
000001CA  488B3D00000000            mov rdi, qword ptr [reqHdrPtr]  ;Get the ptr to the req header in rdi
000001D1  8A4702                    mov al, byte ptr [rdi + drvReqHdr.cmdcde]   ;Get command code in al
000001D4  3C18                      cmp al, 24  ;Check cmd num is valid
000001D6  7739                      ja msdError
000001D8  84C0                      test al, al
000001DA  7467                      jz commonInit
000001DC  3C01                      cmp al, 01
000001DE  744A                      jz msdMedChk
000001E0  3C02                      cmp al, 02
000001E2  7446                      jz msdBuildBPB
000001E4  3C03                      cmp al, 03
000001E6  7442                      jz msdIOCTLRead
000001E8  3C04                      cmp al, 04
000001EA  743E                      jz msdRead
000001EC  3C08                      cmp al, 08
000001EE  743A                      jz msdWrite
000001F0  3C09                      cmp al, 09
000001F2  7436                      jz msdWriteVerify
000001F4  3C0C                      cmp al, 12
000001F6  7432                      jz msdIOCTLWrite
000001F8  3C0D                      cmp al, 13
000001FA  742E                      jz msdDevOpen
000001FC  3C0E                      cmp al, 14
000001FE  742A                      jz msdDevClose
00000200  3C0F                      cmp al, 15
00000202  7426                      jz msdRemovableMedia
00000204  3C13                      cmp al, 19
00000206  7422                      jz msdGenericIOCTL
00000208  3C17                      cmp al, 23
0000020A  741E                      jz msdGetLogicalDev
0000020C  3C18                      cmp al, 24
0000020E  741A                      jz msdSetLogicalDev
00000210                            ret
00000211                        msdError:
                                ;Place Error, Unknown Command error in status field
00000211  66C747030380              mov word ptr [rdi + drvReqHdr.status], 8003h
00000217                        msdIntrExit:
00000217  415F                      pop r15
00000219  415E                      pop r14
0000021B  415D                      pop r13
0000021D  415C                      pop r12
0000021F  415B                      pop r11
00000221  415A                      pop r10
00000223  4159                      pop r9
00000225  4158                      pop r8
00000227  5F                        pop rdi
00000228  58                        pop rax
00000229                            ret
0000022A                        msdMedChk:          ;Function 1
0000022A                        msdBuildBPB:        ;Function 2
0000022A                        msdIOCTLRead:       ;Function 3
0000022A                        msdRead:            ;Funciton 4
0000022A                        msdWrite:           ;Function 8
0000022A                        msdWriteVerify:     ;Function 9
0000022A                        msdIOCTLWrite:      ;Function 12
0000022A                        msdDevOpen:         ;Function 13
0000022A                        msdDevClose:        ;Function 14
0000022A                        msdRemovableMedia:  ;Function 15
0000022A                        msdGenericIOCTL:    ;Function 19
0000022A                        msdGetLogicalDev:   ;Function 23
0000022A                        msdSetLogicalDev:   ;Function 24
0000022A  EBEB                      jmp short msdIntrExit
0000022C                        msdDriver   ENDP

0000022C                        comDriver   PROC
0000022C                        com1Intr    LABEL   BYTE
0000022C  EB04                      jmp short comIntr
0000022E                        com2Intr    LABEL   BYTE
0000022E  EB02                      jmp short comIntr
00000230                        com3Intr    LABEL   BYTE
00000230  EB00                      jmp short comIntr
00000232                        com4Intr    LABEL   BYTE
00000232                        comIntr:
00000232                            ret
00000233                        comDriver   ENDP

00000233                        lptDriver   PROC    ;Drivers for LPT 1, 2, 3

00000233                        lptIntr    LABEL   BYTE    ;LPT act as null device drivers
00000233  57                        push rdi
00000234  488B3D00000000            mov rdi, qword ptr [reqHdrPtr]
0000023B  66C747030001              mov word ptr [rdi + drvReqHdr.status], 0100h    ;Done bit set
00000241  5F                        pop rdi
00000242                            ret
00000243                        lptDriver   ENDP

00000243                        driverDataPtr   LABEL   BYTE
00000243                        commonInit  PROC    ;Common Init (Function 0 for all drivers)
00000243  CD31                      int 31h ;Get number of Int 33h devices in R8b, and aux devices in byte 3
00000245  4D0FB6D0                  movzx r10, r8b   ;Isolate the number of Int 33h devs only
00000249  49C7C102000000            mov r9, 2
00000250  4983FA01                  cmp r10, 1
00000254  4D0F44C1                  cmove r8, r9    ;If we have one device detected only, make it two!
00000258  4488051A000000            mov byte ptr [msdHdr + drvHdr.drvNam], r8b ;Save num Int 33h devs here
0000025F                        commonInit  ENDP
0000025F                        resCode ENDS

                                END


Binary Map:

Segment                  Pos(file)     RVA  Size(fil) Size(mem)
---------------------------------------------------------------
loadCode                        0        0        B0        B0
resCode                        B0       B0       25F       25F
---------------------------------------------------------------
                                                 30F       30F


Macros:

                N a m e                 Type

@CatStr  . . . . . . . . . . . .        Func
@Environ . . . . . . . . . . . .        Func
@InStr . . . . . . . . . . . . .        Func
@SizeStr . . . . . . . . . . . .        Func
@SubStr  . . . . . . . . . . . .        Func
drvReqHdrM . . . . . . . . . . .        Proc


Structures and Unions:

                N a m e                 Size/Ofs   Type

bpb  . . . . . . . . . . . . . .              3E
  jmpBoot  . . . . . . . . . . .               0   Byte[3]
  oemName  . . . . . . . . . . .               3   Byte[8]
  bytsPerSec . . . . . . . . . .               B   Word
  secPerClus . . . . . . . . . .               D   Byte
  revdSecCnt . . . . . . . . . .               E   Word
  numFATs  . . . . . . . . . . .              10   Byte
  rootEntCnt . . . . . . . . . .              11   Word
  totSec16 . . . . . . . . . . .              13   Word
  media  . . . . . . . . . . . .              15   Byte
  FATsz16  . . . . . . . . . . .              16   Word
  secPerTrk  . . . . . . . . . .              18   Word
  numHeads . . . . . . . . . . .              1A   Word
  hiddSec  . . . . . . . . . . .              1C   DWord
  totSec32 . . . . . . . . . . .              20   DWord
  drvNum . . . . . . . . . . . .              24   Byte
  reserved1  . . . . . . . . . .              25   Byte
  bootSig  . . . . . . . . . . .              26   Byte
  volID  . . . . . . . . . . . .              27   DWord
  volLab . . . . . . . . . . . .              2B   Byte[11]
  filSysType . . . . . . . . . .              36   Byte[8]
bpb32  . . . . . . . . . . . . .              5A
  jmpBoot  . . . . . . . . . . .               0   Byte[3]
  oemName  . . . . . . . . . . .               3   Byte[8]
  bytsPerSec . . . . . . . . . .               B   Word
  secPerClus . . . . . . . . . .               D   Byte
  revdSecCnt . . . . . . . . . .               E   Word
  numFATs  . . . . . . . . . . .              10   Byte
  rootEntCnt . . . . . . . . . .              11   Word
  totSec16 . . . . . . . . . . .              13   Word
  media  . . . . . . . . . . . .              15   Byte
  FATsz16  . . . . . . . . . . .              16   Word
  secPerTrk  . . . . . . . . . .              18   Word
  numHeads . . . . . . . . . . .              1A   Word
  hiddSec  . . . . . . . . . . .              1C   DWord
  totSec32 . . . . . . . . . . .              20   DWord
  FATsz32  . . . . . . . . . . .              24   DWord
  extFlags . . . . . . . . . . .              28   Word
  FSver  . . . . . . . . . . . .              2A   Word
  RootClus . . . . . . . . . . .              2C   DWord
  FSinfo . . . . . . . . . . . .              30   Word
  BkBootSec  . . . . . . . . . .              32   Word
  reserved . . . . . . . . . . .              34   Byte[12]
  drvNum . . . . . . . . . . . .              40   Byte
  reserved1  . . . . . . . . . .              41   Byte
  bootSig  . . . . . . . . . . .              42   Byte
  volID  . . . . . . . . . . . .              43   DWord
  volLab . . . . . . . . . . . .              47   Byte[11]
  filSysType . . . . . . . . . .              52   Byte[8]
bpbBuildReqPkt . . . . . . . . .              1E
  hdrlen . . . . . . . . . . . .               0   Byte
  unitnm . . . . . . . . . . . .               1   Byte
  cmdcde . . . . . . . . . . . .               2   Byte
  status . . . . . . . . . . . .               3   Word
  devptr . . . . . . . . . . . .               5   QWord
  medesc . . . . . . . . . . . .               D   Byte
  bufptr . . . . . . . . . . . .               E   QWord
  bpbptr . . . . . . . . . . . .              16   QWord
bpbEx  . . . . . . . . . . . . .              78
  jmpBoot  . . . . . . . . . . .               0   Byte[3]
  oemName  . . . . . . . . . . .               3   Byte[8]
  MustBeZero . . . . . . . . . .               B   Byte[53]
  partitionOffset  . . . . . . .              40   QWord
  volumeLength . . . . . . . . .              48   QWord
  FAToffset  . . . . . . . . . .              50   DWord
  FATlength  . . . . . . . . . .              54   DWord
  clusterHeapOffset  . . . . . .              58   DWord
  clusterCount . . . . . . . . .              5C   DWord
  firstClusterOfRootDir  . . . .              60   DWord
  volumeSerialNum  . . . . . . .              64   DWord
  FSrevision . . . . . . . . . .              68   Word
  volumeFlags  . . . . . . . . .              6A   Word
  bytesPerSectorShift  . . . . .              6C   Byte
  sectorsPerClusterShift . . . .              6D   Byte
  numberOfFATs . . . . . . . . .              6E   Byte
  driveSelect  . . . . . . . . .              6F   Byte
  percentInUse . . . . . . . . .              70   Byte
  reserved . . . . . . . . . . .              71   Byte[7]
cds  . . . . . . . . . . . . . .              5B
  sCurrentPath . . . . . . . . .               0   Byte[67]
  wFlags . . . . . . . . . . . .              43   Word
  qDPBPtr  . . . . . . . . . . .              45   QWord
  dStartCluster  . . . . . . . .              4D   DWord
  qReserved  . . . . . . . . . .              51   QWord
  wBackslashOffset . . . . . . .              59   Word
closeReqPkt  . . . . . . . . . .               D
  hdrlen . . . . . . . . . . . .               0   Byte
  unitnm . . . . . . . . . . . .               1   Byte
  cmdcde . . . . . . . . . . . .               2   Byte
  status . . . . . . . . . . . .               3   Word
  devptr . . . . . . . . . . . .               5   QWord
dSeg . . . . . . . . . . . . . .             E76
  dataSegPtr . . . . . . . . . .               0   QWord
  codeSegPtr . . . . . . . . . .               8   QWord
  bootDrive  . . . . . . . . . .              10   Byte
  requestHdr . . . . . . . . . .              11   drvReqHdr
  sysVarsPtr . . . . . . . . . .              32   QWord
  mcbChainPtr  . . . . . . . . .              3A   QWord
  dpbHeadPtr . . . . . . . . . .              42   QWord
  sftHeadPtr . . . . . . . . . .              4A   QWord
  clockPtr . . . . . . . . . . .              52   QWord
  conPtr . . . . . . . . . . . .              5A   QWord
  maxBytesSec  . . . . . . . . .              62   Word
  bufHeadPtr . . . . . . . . . .              64   QWord
  cdsHeadPtr . . . . . . . . . .              6C   QWord
  sfcbHeadPTr  . . . . . . . . .              74   QWord
  numSafeSFCB  . . . . . . . . .              7C   Word
  numInt33drv  . . . . . . . . .              7E   Byte
  lastdrvNum . . . . . . . . . .              7F   Byte
  numJoinDrv . . . . . . . . . .              80   Byte
  nulDevHdr  . . . . . . . . . .              81   drvHdr
  inDOS  . . . . . . . . . . . .              A3   Byte
  breakFlag  . . . . . . . . . .              A4   Byte
  defaultDrv . . . . . . . . . .              A5   Byte
  critStack  . . . . . . . . . .              A6   QWord[41]
  critStakTop  . . . . . . . . .             1EE   QWord
  IOStack  . . . . . . . . . . .             1F6   QWord[199]
  IOStakTop  . . . . . . . . . .             82E   QWord
  DiskStack  . . . . . . . . . .             836   QWord[199]
  DiskStakTop  . . . . . . . . .             E6E   QWord
dpb  . . . . . . . . . . . . . .              36
  bDriveNumber . . . . . . . . .               0   Byte
  bUnitNumber  . . . . . . . . .               1   Byte
  bBytesPerSectorShift . . . . .               2   Byte
  bMaxSectorInCluster  . . . . .               3   Byte
  bSectorsPerClusterShift  . . .               4   Byte
  dFAToffset . . . . . . . . . .               5   DWord
  bNumberOfFATs  . . . . . . . .               9   Byte
  wNumberRootDirEntries  . . . .               A   Word
  dClusterHeapOffset . . . . . .               C   DWord
  dClusterCount  . . . . . . . .              10   DWord
  dFATlength . . . . . . . . . .              14   DWord
  dFirstClusterOfRootDir . . . .              18   DWord
  qDriverHeaderPtr . . . . . . .              1C   QWord
  bMediaDescriptor . . . . . . .              24   Byte
  bAccessFlag  . . . . . . . . .              25   Byte
  qNextDPBPtr  . . . . . . . . .              26   QWord
  dFirstFreeCluster  . . . . . .              2E   DWord
  dNumberOfFreeClusters  . . . .              32   DWord
drvHdr . . . . . . . . . . . . .              22
  nxtPtr . . . . . . . . . . . .               0   QWord
  atWord . . . . . . . . . . . .               8   Word
  strPtr . . . . . . . . . . . .               A   QWord
  intPtr . . . . . . . . . . . .              12   QWord
  drvNam . . . . . . . . . . . .              1A   Byte[8]
drvReqHdr  . . . . . . . . . . .               D
  hdrlen . . . . . . . . . . . .               0   Byte
  unitnm . . . . . . . . . . . .               1   Byte
  cmdcde . . . . . . . . . . . .               2   Byte
  status . . . . . . . . . . . .               3   Word
  devptr . . . . . . . . . . . .               5   QWord
flushReqPkt  . . . . . . . . . .               D
  hdrlen . . . . . . . . . . . .               0   Byte
  unitnm . . . . . . . . . . . .               1   Byte
  cmdcde . . . . . . . . . . . .               2   Byte
  status . . . . . . . . . . . .               3   Word
  devptr . . . . . . . . . . . .               5   QWord
getDevReqPkt . . . . . . . . . .              10
  hdrlen . . . . . . . . . . . .               0   Byte
  unitnm . . . . . . . . . . . .               1   Byte
  cmdcde . . . . . . . . . . . .               2   Byte
  status . . . . . . . . . . . .               3   Word
  devptr . . . . . . . . . . . .               5   QWord
  getcmd . . . . . . . . . . . .               D   Byte
  cmdsts . . . . . . . . . . . .               E   Word
initReqPkt . . . . . . . . . . .              1F
  hdrlen . . . . . . . . . . . .               0   Byte
  unitnm . . . . . . . . . . . .               1   Byte
  cmdcde . . . . . . . . . . . .               2   Byte
  status . . . . . . . . . . . .               3   Word
  devptr . . . . . . . . . . . .               5   QWord
  numunt . . . . . . . . . . . .               D   Byte
  endptr . . . . . . . . . . . .               E   QWord
  optptr . . . . . . . . . . . .              16   QWord
  drvnum . . . . . . . . . . . .              1E   Byte
ioReqPkt . . . . . . . . . . . .              2A
  hdrlen . . . . . . . . . . . .               0   Byte
  unitnm . . . . . . . . . . . .               1   Byte
  cmdcde . . . . . . . . . . . .               2   Byte
  status . . . . . . . . . . . .               3   Word
  devptr . . . . . . . . . . . .               5   QWord
  medesc . . . . . . . . . . . .               D   Byte
  bufptr . . . . . . . . . . . .               E   QWord
  tfrlen . . . . . . . . . . . .              16   DWord
  strtsc . . . . . . . . . . . .              1A   QWord
  desptr . . . . . . . . . . . .              22   QWord
ioctlReqPkt  . . . . . . . . . .              27
  hdrlen . . . . . . . . . . . .               0   Byte
  unitnm . . . . . . . . . . . .               1   Byte
  cmdcde . . . . . . . . . . . .               2   Byte
  status . . . . . . . . . . . .               3   Word
  devptr . . . . . . . . . . . .               5   QWord
  majfun . . . . . . . . . . . .               D   Byte
  minfun . . . . . . . . . . . .               E   Byte
  rsival . . . . . . . . . . . .               F   QWord
  rdival . . . . . . . . . . . .              17   QWord
  ctlptr . . . . . . . . . . . .              1F   QWord
mediaCheckReqPkt . . . . . . . .              17
  hdrlen . . . . . . . . . . . .               0   Byte
  unitnm . . . . . . . . . . . .               1   Byte
  cmdcde . . . . . . . . . . . .               2   Byte
  status . . . . . . . . . . . .               3   Word
  devptr . . . . . . . . . . . .               5   QWord
  medesc . . . . . . . . . . . .               D   Byte
  medret . . . . . . . . . . . .               E   Byte
  desptr . . . . . . . . . . . .               F   QWord
nonDestInNoWaitReqPkt  . . . . .               E
  hdrlen . . . . . . . . . . . .               0   Byte
  unitnm . . . . . . . . . . . .               1   Byte
  cmdcde . . . . . . . . . . . .               2   Byte
  status . . . . . . . . . . . .               3   Word
  devptr . . . . . . . . . . . .               5   QWord
  retbyt . . . . . . . . . . . .               D   Byte
openReqPkt . . . . . . . . . . .               D
  hdrlen . . . . . . . . . . . .               0   Byte
  unitnm . . . . . . . . . . . .               1   Byte
  cmdcde . . . . . . . . . . . .               2   Byte
  status . . . . . . . . . . . .               3   Word
  devptr . . . . . . . . . . . .               5   QWord
remMediaReqPkt . . . . . . . . .               D
  hdrlen . . . . . . . . . . . .               0   Byte
  unitnm . . . . . . . . . . . .               1   Byte
  cmdcde . . . . . . . . . . . .               2   Byte
  status . . . . . . . . . . . .               3   Word
  devptr . . . . . . . . . . . .               5   QWord
setDevReqPkt . . . . . . . . . .              10
  hdrlen . . . . . . . . . . . .               0   Byte
  unitnm . . . . . . . . . . . .               1   Byte
  cmdcde . . . . . . . . . . . .               2   Byte
  status . . . . . . . . . . . .               3   Word
  devptr . . . . . . . . . . . .               5   QWord
  setcmd . . . . . . . . . . . .               D   Byte
  cmdsts . . . . . . . . . . . .               E   Word
sft  . . . . . . . . . . . . . .              3D
  wNumHandles  . . . . . . . . .               0   Word
  wOpenMode  . . . . . . . . . .               2   Word
  bFileAttrib  . . . . . . . . .               4   Byte
  wDeviceInfo  . . . . . . . . .               5   Word
  qPtr . . . . . . . . . . . . .               7   QWord
  dStartClust  . . . . . . . . .               F   DWord
  wTime  . . . . . . . . . . . .              13   Word
  wDate  . . . . . . . . . . . .              15   Word
  dFileSize  . . . . . . . . . .              17   DWord
  dCurntOff  . . . . . . . . . .              1B   DWord
  wRelClust  . . . . . . . . . .              1F   Word
  dDirSect . . . . . . . . . . .              21   DWord
  bNumDirEnt . . . . . . . . . .              25   Byte
  sFCBName . . . . . . . . . . .              26   Byte[11]
  qPSPOwner  . . . . . . . . . .              31   QWord
  dAbsClusr  . . . . . . . . . .              39   DWord
sfth . . . . . . . . . . . . . .               A
  qNextSFTPtr  . . . . . . . . .               0   QWord
  wNumFiles  . . . . . . . . . .               8   Word
statusReqPkt . . . . . . . . . .               D
  hdrlen . . . . . . . . . . . .               0   Byte
  unitnm . . . . . . . . . . . .               1   Byte
  cmdcde . . . . . . . . . . . .               2   Byte
  status . . . . . . . . . . . .               3   Word
  devptr . . . . . . . . . . . .               5   QWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

loadCode . . . . . . . . . . . .        64 Bit   000000B0 Para    Private ''
resCode  . . . . . . . . . . . .        64 Bit   0000025F Byte    Private ''
FLAT . . . . . . . . . . . . . .        GROUP


Procedures, parameters and locals:

                N a m e                 Type     Value    Segment  Length

auxDriver  . . . . . . . . . . .        P Near   000001B8 resCode  00000000 Public   
clkDriver  . . . . . . . . . . .        P Near   000001B8 resCode  00000000 Public   
comDriver  . . . . . . . . . . .        P Near   0000022C resCode  00000007 Public   
  comIntr  . . . . . . . . . . .        L Near   00000232 resCode
commonInit . . . . . . . . . . .        P Near   00000243 resCode  0000001C Public   
commonStrat  . . . . . . . . . .        P Near   00000198 resCode  00000010 Public   
conDriver  . . . . . . . . . . .        P Near   000001B8 resCode  00000000 Public   
lptDriver  . . . . . . . . . . .        P Near   00000233 resCode  00000010 Public   
msdDriver  . . . . . . . . . . .        P Near   000001B8 resCode  00000074 Public   
  msdWriteVerify . . . . . . . .        L Near   0000022A resCode
  msdDevOpen . . . . . . . . . .        L Near   0000022A resCode
  msdDevClose  . . . . . . . . .        L Near   0000022A resCode
  msdIOCTLRead . . . . . . . . .        L Near   0000022A resCode
  msdBuildBPB  . . . . . . . . .        L Near   0000022A resCode
  msdIOCTLWrite  . . . . . . . .        L Near   0000022A resCode
  msdGetLogicalDev . . . . . . .        L Near   0000022A resCode
  msdError . . . . . . . . . . .        L Near   00000211 resCode
  msdSetLogicalDev . . . . . . .        L Near   0000022A resCode
  msdRemovableMedia  . . . . . .        L Near   0000022A resCode
  msdIntrExit  . . . . . . . . .        L Near   00000217 resCode
  msdGenericIOCTL  . . . . . . .        L Near   0000022A resCode
  msdWrite . . . . . . . . . . .        L Near   0000022A resCode
  msdMedChk  . . . . . . . . . .        L Near   0000022A resCode
  msdRead  . . . . . . . . . . .        L Near   0000022A resCode
nulDriver  . . . . . . . . . . .        P Near   000001A8 resCode  00000010 Public   
prnDriver  . . . . . . . . . . .        P Near   000001B8 resCode  00000000 Public   


Symbols:

                N a m e                 Type       Value     Attr

auxHdr . . . . . . . . . . . . .        drvHdr            22h resCode 
clkHdr . . . . . . . . . . . . .        drvHdr            66h resCode 
com1Hdr  . . . . . . . . . . . .        drvHdr            AAh resCode 
com1Intr . . . . . . . . . . . .        Byte             22Ch resCode 
com2Hdr  . . . . . . . . . . . .        drvHdr            CCh resCode 
com2Intr . . . . . . . . . . . .        Byte             22Eh resCode 
com3Hdr  . . . . . . . . . . . .        drvHdr            EEh resCode 
com3Intr . . . . . . . . . . . .        Byte             230h resCode 
com4Hdr  . . . . . . . . . . . .        drvHdr           110h resCode 
com4Intr . . . . . . . . . . . .        Byte             232h resCode 
conHdr . . . . . . . . . . . . .        drvHdr             0h resCode 
driverDataPtr  . . . . . . . . .        Byte             243h resCode 
lpt1Hdr  . . . . . . . . . . . .        drvHdr           132h resCode 
lpt2Hdr  . . . . . . . . . . . .        drvHdr           154h resCode 
lpt3Hdr  . . . . . . . . . . . .        drvHdr           176h resCode 
lptIntr  . . . . . . . . . . . .        Byte             233h resCode 
msdHdr . . . . . . . . . . . . .        drvHdr            88h resCode 
msdIntr  . . . . . . . . . . . .        Byte             1B8h resCode 
nData  . . . . . . . . . . . . .        QWord             8Eh loadCode 
prnHdr . . . . . . . . . . . . .        drvHdr            44h resCode 
reqHdrPtr  . . . . . . . . . . .        QWord            1A0h resCode 
startmsg . . . . . . . . . . . .        Byte[24]          76h loadCode 

io.asm: 205 lines, 3 passes, 0 ms, 0 warnings, 0 errors
