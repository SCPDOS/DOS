     1                                  [map all scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  %include "driverStruc.inc"
     5                              <1> 
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     8                              <1> ; device driver related structures.                     ;
     9                              <1> ;-------------------------------------------------------;
    10                              <1> 
    11                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    12                              <1> 
    13 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    14 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    15 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    16 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    17 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    18                              <1> 
    19                              <1> endstruc
    20                              <1> 
    21                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    22                              <1> 
    23                              <1>     .hdrlen resb 1  ;Length of the request header
    24                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    25                              <1>     .cmdcde resb 1  ;Command code
    26                              <1>     .status resw 1  ;Status word
    27                              <1>     .devptr resq 1  ;Device queue pointer field
    28                              <1> 
    29                              <1> %endmacro
    30                              <1> 
    31                              <1> struc drvReqHdr
    32                              <1>     drvReqHdrM
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    33                              <1> endstruc
    34                              <1> 
    35                              <1> struc initReqPkt  ;Init Request Packet
    36                              <1> 
    37                              <1>     drvReqHdrM   ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    38 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
    39 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
    40 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
    41 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
    42                              <1> 
    43                              <1> endstruc
    44                              <1> 
    45                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
    46                              <1> 
    47                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    48 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    49 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
    50 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
    51                              <1> 
    52                              <1> endstruc
    53                              <1> 
    54                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
    55                              <1> 
    56                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    57 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    58 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    59 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
    60                              <1> 
    61                              <1> endstruc
    62                              <1> 
    63                              <1> struc ioReqPkt   ;IO Request Packet
    64                              <1> 
    65                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    66 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    67 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    68 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
    69 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
    70 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
    71                              <1> 
    72                              <1> endstruc
    73                              <1> 
    74                              <1> struc nonDestInNoWaitReqPkt    ;Nondestructive Input No Wait Request Packet
    75                              <1>     
    76                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    77 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
    78                              <1> 
    79                              <1> endstruc
    80                              <1> 
    81                              <1> struc statusReqPkt   ;Status Request Packet
    82                              <1> 
    83                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    84                              <1> 
    85                              <1> endstruc
    86                              <1> 
    87                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
    88                              <1> 
    89                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    90                              <1>      
    91                              <1> endstruc
    92                              <1> 
    93                              <1> struc openReqPkt ;Open Device Request Packet
    94                              <1> 
    95                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    96                              <1>      
    97                              <1> endstruc
    98                              <1> 
    99                              <1> struc closeReqPkt ;Close Device Request Packet
   100                              <1> 
   101                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   102                              <1>      
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   106                              <1> 
   107                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   108                              <1>      
   109                              <1> endstruc
   110                              <1> 
   111                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   112                              <1> 
   113                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   114 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   115 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   116 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   117 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   118 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   119                              <1> 
   120                              <1> endstruc
   121                              <1> 
   122                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   123                              <1>     
   124                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   125                              <1> 
   126                              <1> endstruc
   127                              <1> 
   128                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   129                              <1>     
   130                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   131                              <1> 
   132                              <1> endstruc
     5                                  %include "fatStruc.inc"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ; This include file contains miscellaneous FAT driver   ;
     9                              <1> ; structures. exFAT will have it's own files at a later ;
    10                              <1> ; stage.                                                ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    14                              <1> 
    15 00000000 ??????              <1>     .jmpBoot    resb 3 
    16 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    17 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    18 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    19 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    20 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    21 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    22 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    23 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    24 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    25 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    26 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    27 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    28 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    29                              <1> 
    30 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    31 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    32 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    33 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    34 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    35 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    40                              <1> 
    41 00000000 ??????              <1>     .jmpBoot    resb 3
    42 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    43 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    44 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    45 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    46 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    47 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    48 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    49 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    50 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    51 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    52 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    53 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    54 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    55                              <1> 
    56 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    57 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    58 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    59 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    60 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    61 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    62 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    63                              <1> 
    64 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    65 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    66 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    67 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    68 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    69 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    70                              <1> 
    71                              <1> endstruc
    72                              <1> 
    73                              <1> struc mbr
    74 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    75 000001B8 ????????            <1>     .diskID     resb 4
    76 000001BC ????                <1>     .reserved   resb 2
    77 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    78 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    79 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    80 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    81 000001FE ????                <1>     .mbrSig     resb 2
    82                              <1> endstruc
    83                              <1> 
    84                              <1> struc mbrEntry
    85 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    86 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    87 00000004 ??                  <1>     .ptnType    resb 1
    88 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
    89 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
    90 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
    91                              <1> endstruc
    92                              <1> 
    93                              <1> struc fatDirEntry
    94                              <1> 
    95 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
    96 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
    97 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
    98 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
    99 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   100 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   101 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   102 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   103 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   104 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   105 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   106 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   107                              <1> 
   108                              <1> endstruc
   109                              <1> ;Directory attribute equates
   110                              <1>     dirReadOnly     equ 01h
   111                              <1>     dirHidden       equ 02h
   112                              <1>     dirSystem       equ 04h
   113                              <1>     dirVolumeID     equ 08h
   114                              <1>     dirDirectory    equ 10h
   115                              <1>     dirArchive      equ 20h
   116                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   117                              <1> 
   118                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   119                              <1> 
   120 00000000 ??????              <1>     .jmpBoot                resb 3 
   121 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   122 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   123 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   124 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   125 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   126 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   127 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   128 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   129 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   130 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   131 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   132 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   133 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   134 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   135 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   136 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   137 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   138 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   139                              <1> 
   140                              <1> endstruc
   141                              <1> 
   142                              <1> struc FSInfo
   143                              <1> 
   144 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   145 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   146 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   147 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   148 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   149 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   150 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   151                              <1> 
   152                              <1> endstruc
     6                                  %include "dosStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous internal     ;
    10                              <1> ; SCP/DOS structures.                                   ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> ;------------------------------------------------------------------------;
    14                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    15                              <1> ; its file system structure. This is used to locate files and structures
    16                              <1> ; on the device itself and to translate file requests to cluster chains
    17                              <1> ; to LBAs to pass to the disk driver..
    18                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    19                              <1> ; drivers Initialise routine has been called.
    20                              <1> ;------------------------------------------------------------------------;
    21                              <1> struc dpb        ;Drive Parameter Block
    22                              <1> 
    23 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    24 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    25 00000002 ??                  <1>     .bBytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)x
    26 00000003 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    27 00000004 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    28 00000005 ????????            <1>     .dFAToffset              resd 1  ;Number of Sectors preceeding first FAT x
    29 00000009 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    30 0000000A ????                <1>     .wNumberRootDirSectors   resw 1  ;In sectors, this is 0 for FAT32 formats x
    31 0000000C ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    32 00000010 ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    33 00000014 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    34 00000018 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    35                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    36 0000001C ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    37 00000024 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    38 00000025 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    39 00000026 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    40 0000002E ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    41 00000032 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    42                              <1> 
    43                              <1> endstruc
    44                              <1> 
    45                              <1> ;------------------------------------------------------------------------;
    46                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    47                              <1> ; All disk pathing requests go via the CDS for that drive.
    48                              <1> ; The default drive is the last accessed drive, this number is stored
    49                              <1> ; in the DOS data area.
    50                              <1> ; The CDS is stored as an array with the offset into the array being 
    51                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    52                              <1> ;
    53                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    54                              <1> ;------------------------------------------------------------------------;
    55                              <1> struc cds       ;Current Directory structure
    56 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    57 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    58 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    59 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    60 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    61 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    62                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    63                              <1> ; another, we save the number of chars to skip to that deep level).
    64                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    65                              <1> ; Flags: Bit 15 set = Network drive
    66                              <1> ;        Bit 14 set = Physical drive
    67                              <1> ;        Bit 13 set = JOIN'ed drive
    68                              <1> ;        Bit 12 set = SUBST'ed drive
    69                              <1> ;        Bit 7  set = Redirected, not network, drive (This is how MSCDEX worked)
    70                              <1> endstruc
    71                              <1> ;CDS equates
    72                              <1>     cdsNetDrive     equ 8000h
    73                              <1>     cdsPhysDrive    equ 4000h
    74                              <1>     cdsJoinDrive    equ 2000h
    75                              <1>     cdsSubstDrive   equ 1000h
    76                              <1>     cdsRedirDrive   equ 0080h
    77                              <1> ;------------------------------------------------------------------------;
    78                              <1> ; The SFT is a way to allow applications to open file handles to files 
    79                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    80                              <1> ; under the first header, and then a second header will be linked to the 
    81                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    82                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    83                              <1> ; using the FCBS= command. Default FCBS=5.
    84                              <1> ;
    85                              <1> ; A file handle describes the file, and the location within the file that
    86                              <1> ; we are reading. The file handle can be manipulated without the file
    87                              <1> ; being in memory, thus allowing the user to access data without needing 
    88                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    89                              <1> ; accessing devices, by treating them as files with their drivers 
    90                              <1> ; responding and translating the manipulations of the file handle itself.
    91                              <1> ; Neither the driver nor the application should see or use the SFT for
    92                              <1> ; the handle, as it is subject to change (and will change when file 
    93                              <1> ; sharing provisions are included). The DOS will make requests to the 
    94                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    95                              <1> ; track of the information in the SFT entry for that handle. 
    96                              <1> ;
    97                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    98                              <1> ; can point to the same file. It all depends on what the applications 
    99                              <1> ; want to do with the File.
   100                              <1> ;
   101                              <1> ; !!!!IMPORTANT!!!!
   102                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   103                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   104                              <1> ;
   105                              <1> ;Each SFT may look like this:
   106                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   107                              <1> ;            |                |
   108                              <1> ;       wNumFiles*sft    wNumFiles*sft
   109                              <1> ;
   110                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   111                              <1> ; System FCBs.
   112                              <1> ;
   113                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   114                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   115                              <1> ;
   116                              <1> ; DEFAULT FILES=15, MINIMUM FILES=5
   117                              <1> ; DEFAULT FCBS=5, MINIMUM FCBS=5
   118                              <1> ;------------------------------------------------------------------------;
   119                              <1> struc sfth   ;System file table header
   120                              <1> ; This is the SFT header.
   121                              <1> ; This structure comes before the start of the first file in the array/table.
   122 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   123 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc sft
   127                              <1> ;This is the file struc itself
   128 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   129 00000002 ????                <1>     .wOpenMode   resw 1    ;Bit 15 set if opened via FCB
   130 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   131 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   132 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   133 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file
   134 00000013 ????                <1>     .wTime       resw 1    ;File Time
   135 00000015 ????                <1>     .wDate       resw 1    ;File Date
   136 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   137 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset in file, in bytes
   138 0000001F ????                <1>     .wRelClust   resw 1    ;Rel cluster in file of the last cluster accessed
   139 00000021 ????????            <1>     .dDirSect    resd 1    ;Rel number of sector containing directory entry 
   140 00000025 ??                  <1>     .bNumDirEnt  resb 1    ;Number of dir entry within sector (byte offset/32)
   141 00000026 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   142 00000031 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   143 00000039 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster of last cluster accessed
   144                              <1> endstruc
   145                              <1> 
   146                              <1> ;------------------------------------------------------------------------;
   147                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   148                              <1> ; to an internal buffer, and then copying it to the specified location
   149                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   150                              <1> ; another request for the same sector from the same device is made, so 
   151                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   152                              <1> ; size, selected according to the largest detected sector size during 
   153                              <1> ; the initial loadup.
   154                              <1> ;
   155                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   156                              <1> ;
   157                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   158                              <1> ;------------------------------------------------------------------------;
   159                              <1> 
   160                              <1> struc bufferHdr
   161 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   162 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for
   163 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   164 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   165 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   166 00000013 ??                  <1>     .bufFAToff   resb  1   ;Sector offset of the backup copy of the FAT on disk
   167 00000014 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   168                              <1> endstruc
   169                              <1> 
   170                              <1> ;------------------------------------------------------------------------;
   171                              <1> ; Memory control block for each memory arena
   172                              <1> ;------------------------------------------------------------------------;
   173                              <1> struc mcb
   174 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   175 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP or 0 for free space
   176 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   177 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   178                              <1> endstruc
   179                              <1> 
   180                              <1> ;------------------------------------------------------------------------;
   181                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   182                              <1> ; following order, thus allowing for return values to be placed in the 
   183                              <1> ; registers by accessing the caller register stack frame.
   184                              <1> ;------------------------------------------------------------------------;
   185                              <1> struc callerFrame
   186 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   187 00000008 ????????????????    <1>     .rbx    resq 1    
   188 00000010 ????????????????    <1>     .rcx    resq 1
   189 00000018 ????????????????    <1>     .rdx    resq 1
   190 00000020 ????????????????    <1>     .rsi    resq 1
   191 00000028 ????????????????    <1>     .rdi    resq 1
   192 00000030 ????????????????    <1>     .rbp    resq 1
   193 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   194 00000040 ????????????????    <1>     .r9     resq 1
   195                              <1> ;Pushed by Processor when invoked via Interrupt
   196 00000048 ????????????????    <1>     .rip    resq 1
   197 00000050 ????????????????    <1>     .cs     resq 1
   198 00000058 ????????????????    <1>     .flags  resq 1
   199                              <1> endstruc
   200                              <1> 
   201                              <1> %macro pushDOS 0
   202                              <1>     push r9
   203                              <1>     push r8
   204                              <1>     push rbp
   205                              <1>     push rdi
   206                              <1>     push rsi
   207                              <1>     push rdx
   208                              <1>     push rcx
   209                              <1>     push rbx
   210                              <1>     push rax
   211                              <1> %endmacro
   212                              <1> 
   213                              <1> %macro popDOS 0
   214                              <1>     pop rax
   215                              <1>     pop rbx
   216                              <1>     pop rcx
   217                              <1>     pop rdx
   218                              <1>     pop rsi
   219                              <1>     pop rdi
   220                              <1>     pop rbp
   221                              <1>     pop r8
   222                              <1>     pop r9
   223                              <1> %endmacro
   224                              <1> 
   225                              <1> struc psp
   226 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h
   227 00000002 ????????????????    <1>     .startSeg   resq 1  ;Pointer to the start of the PSP
   228 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   229 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   230 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   231 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   232 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   233 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   234 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   235 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size
   236 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh
   237 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain
   238 0000005B ????????????????    <1>     .xtraHdlPtr resq 1  ;Pointer to the extra handle array if needed
   239 00000063 ????????????????    <1>     .fcbPtr1    resq 1  ;Pointer to the first OS allocated FCB
   240 0000006B <res 15h>           <1>     .reserved   resb 21
   241 00000080 ??                  <1>     .charCount  resb 1  ;Number of characters in command tail
   242 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   243                              <1> endstruc
   244                              <1> 
   245                              <1> struc mcb
   246 00000000 ??                  <1>     .mzbyte     resb 1  ;M=In use, Z=Free
   247 00000001 ????????????????    <1>     .processPtr resq 1  ;Points to the start of the process PSP
   248 00000009 ????????            <1>     .paragraphs resd 1  ;Gives the number of paras allocated to this process
   249 0000000D ??????              <1>     .reserved   resb 3
   250                              <1>     .program:
   251                              <1> endstruc
   252                              <1> 
   253                              <1> struc clkStruc
   254 00000000 ????                <1>     .dateWord   resw 1
   255 00000002 ??                  <1>     .minutes    resb 1
   256 00000003 ??                  <1>     .hours      resb 1
   257 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   258 00000005 ??                  <1>     .seconds    resb 1
   259                              <1> endstruc
     7                                  %include "dosSeg.asm"
     8                              <1> ;This file contains the main DOS data segment
     9                              <1> 
    10                              <1> Segment dSeg nobits align=1 start=0 
    11 00000000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    12 00000008 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    13 00000009 ??                  <1>     numRemMSD   resb 1    ;Number of physical removable MSDs in system x
    14 0000000A ??                  <1>     numLRemDrives  resb 1 ;Number of logical removable drives in system x
    15                              <1>     ;if numRemMSD = 1 then numLRemDrives = 2 and we have a single drive system
    16 0000000B ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    17 0000000C <res 2Ah>           <1>     charReqHdr  resb ioReqPkt_size  ;Character IO Request header x
    18 00000036 <res 2Ah>           <1>     diskReqHdr  resb ioReqPkt_size  ;Disk Action Request header x
    19                              <1>     ;The device driver header with space for the largest possible packet
    20 00000060 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    21                              <1> sysVarsPtr:
    22 00000068 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    23 00000070 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    24 00000078 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    25                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    26 00000080 ????????????????    <1>     conPtr      resq 1    ;Pointer to the current active CON device header  x
    27                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    28 00000088 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    29 0000008A ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain
    30 00000092 ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    31 0000009A ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    32 000000A2 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    33 000000A4 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    34 000000A5 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    35                              <1> 
    36                              <1> ;Start of Swappable Data Area, this bit can remain static
    37 000000C7 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h
    38 000000C8 ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving
    39 000000C9 ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh
    40 000000CA ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    41 000000CB ????                <1>     errorExt    resw 1  ;Extended Error Code
    42 000000CD ??                  <1>     errorAction resb 1  ;Suggested action for error  
    43 000000CE ??                  <1>     errorClass  resb 1  ;Error Class
    44                              <1> 
    45 000000CF ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA
    46 000000D7 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP
    47 000000DF ????????????????    <1>     rdiErrorPtr resq 1  ;Saves RDI value of last error (could make this di)
    48 000000E7 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
    49 000000EF ????                <1>     lastRetCode resw 1  ;Last return code returned by Int 41h/4Ch
    50 000000F1 ??                  <1>     currentDrv  resb 1  ;Default, last accessed drive
    51 000000F2 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls
    52 000000F3 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify
    53                              <1> ;SDA, needs to be replaced between processes
    54 000000F4 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
    55                              <1> 
    56                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    57 000000FC ??                  <1>     singleDrv   resb 1  
    58                              <1> ;This is done to allow for DOS to give the user a change to swap devices
    59                              <1> 
    60 000000FD ??                  <1>     Int44RetVal resb 1  ;Saves a copy of the Int 44 return value
    61 000000FE ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
    62 000000FF ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
    63 00000100 ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
    64 00000108 ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
    65 00000110 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
    66                              <1> ;Time stuff
    67 00000118 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
    68 0000011E ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
    69 0000011F ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
    70 00000120 ??                  <1>     years       resb 1  ;00h - FFh (00 = 1980 - 128 = 2107)
    71 00000121 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
    72 00000123 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
    73                              <1> 
    74                              <1> ;Stacks
    75 00000124 <res 528h>          <1>     critStack   resq 165
    76 0000064C ????????????????    <1>     critStakTop resq 1
    77 00000654 <res 638h>          <1>     IOStack     resq 199
    78 00000C8C ????????????????    <1>     IOStakTop   resq 1
    79 00000C94 <res 638h>          <1>     DiskStack   resq 199
    80 000012CC ????????????????    <1>     DiskStakTop resq 1
    81                              <1>     dSegLen     equ     $
    82                              <1> 
    83                              <1> Segment dynamicDataArea nobits valign=1 vfollows=resSeg
    84                              <1> ;Create DPB chain of first 5 available DPB slots
    85 00000000 <res 36h>           <1> firstDPB        resb dpb_size
    86 00000036 <res 36h>           <1> secondDPB       resb dpb_size
    87 0000006C <res 36h>           <1> thirdDPB        resb dpb_size
    88 000000A2 <res 36h>           <1> fourthDPB       resb dpb_size
    89 000000D8 <res 36h>           <1> fifthDPB        resb dpb_size 
    90                              <1> 
    91                              <1> ;Create SFT header and corresponding array of five default sft entries
    92 0000010E <res Ah>            <1> firstSftHeader  resb sfth_size
    93 00000118 <res 3Dh>           <1> firstSft        resb sft_size
    94 00000155 <res 3Dh>           <1> secondSft       resb sft_size
    95 00000192 <res 3Dh>           <1> thirdSft        resb sft_size
    96 000001CF <res 3Dh>           <1> fourthSft       resb sft_size
    97 0000020C <res 3Dh>           <1> fifthSft        resb sft_size
    98                              <1> 
    99                              <1> ;Create a five drive CDS here so we can jettison it if config wants more
   100 00000249 <res 1C7h>          <1> initCDS         resb 5*cds_size 
   101                              <1> ;Always jettison this space
   102                              <1> DOSENDPTR:   ;Points to the end of the initially reserved DOS area
   103 00000410 <res 200h>          <1> msdTempBuffer   resb 512    ;Reserve one sectors worth of space
   104                              <1> dynamicDataAreaLength equ $
     8                                  %include "sysInit.asm"
     9                              <1> Segment .text align=1
    10                              <1> ; We arrive here with the following values in the registers.
    11                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    12                              <1> ; dx  = Int 33h boot device number
    13                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    14                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    15 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    16 00000002 909090909090909090- <1>     db (100h-2) dup (90h)   ;Duplicate NOPs for the PSP
    16 0000000B 909090909090909090- <1>
    16 00000014 909090909090909090- <1>
    16 0000001D 909090909090909090- <1>
    16 00000026 909090909090909090- <1>
    16 0000002F 909090909090909090- <1>
    16 00000038 909090909090909090- <1>
    16 00000041 909090909090909090- <1>
    16 0000004A 909090909090909090- <1>
    16 00000053 909090909090909090- <1>
    16 0000005C 909090909090909090- <1>
    16 00000065 909090909090909090- <1>
    16 0000006E 909090909090909090- <1>
    16 00000077 909090909090909090- <1>
    16 00000080 909090909090909090- <1>
    16 00000089 909090909090909090- <1>
    16 00000092 909090909090909090- <1>
    16 0000009B 909090909090909090- <1>
    16 000000A4 909090909090909090- <1>
    16 000000AD 909090909090909090- <1>
    16 000000B6 909090909090909090- <1>
    16 000000BF 909090909090909090- <1>
    16 000000C8 909090909090909090- <1>
    16 000000D1 909090909090909090- <1>
    16 000000DA 909090909090909090- <1>
    16 000000E3 909090909090909090- <1>
    16 000000EC 909090909090909090- <1>
    16 000000F5 909090909090909090- <1>
    16 000000FE 9090                <1>
    17                              <1> ;First make space for the MCB
    18 00000100 6687DB              <1>     xchg bx, bx
    19 00000103 52                  <1>     push rdx    ;Save dl on stack briefly
    20 00000104 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    21 00000109 0F32                <1>     rdmsr
    22 0000010B 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    23 0000010D 48C1E720            <1>     shl rdi, 20h        ;Shift high
    24 00000111 89C7                <1>     mov edi, eax        ;Get the low dword in
    25 00000113 4881C710000000      <1>     add rdi, mcb_size   ;Make space for the MCB
    26 0000011A 89F8                <1>     mov eax, edi
    27 0000011C 4889FA              <1>     mov rdx, rdi
    28 0000011F 48C1EA20            <1>     shr rdx, 20h
    29 00000123 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    30 00000125 5A                  <1>     pop rdx
    31                              <1> ;------------------------------------------------;
    32                              <1> ;           Sanitise the data area               ;
    33                              <1> ;------------------------------------------------;
    34 00000126 B9[D4120000]        <1>     mov ecx, dSegLen
    35 0000012B 30C0                <1>     xor al, al
    36 0000012D 57                  <1>     push rdi    ;Temp save rdi on the stack
    37 0000012E F3AA                <1>     rep stosb
    38 00000130 5F                  <1>     pop rdi
    39                              <1> 
    40                              <1> ;------------------------------------------------;
    41                              <1> ;          Start saving Basic DOS data           ;
    42                              <1> ;------------------------------------------------;
    43 00000131 64881425[08000000]  <1>     mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    44 00000139 488D15C0FEFFFF      <1>     lea rdx, tempPSP    ;Get the address of the tempPSP
    45 00000140 6448891425-         <1>     mov qword fs:[currentPSP], rdx
    45 00000145 [D7000000]          <1>
    46                              <1> ;Copy DOS to its final resting place
    47 00000149 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    47 0000014E [00000000]          <1>
    48 00000152 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rdx 
    49 00000155 4881C7[D4120000]    <1>     add rdi, dSegLen ;Move destination past end of data area
    50 0000015C 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    51 00000163 B900100000          <1>     mov ecx, 1000h
    52 00000168 F348A5              <1>     rep movsq
    53                              <1> 
    54 0000016B CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    55 0000016D 6444880425-         <1>     mov byte fs:[numRemMSD], r8b    ;Save number of physical int 33h devs
    55 00000172 [09000000]          <1>
    56 00000176 64C60425[0B000000]- <1>     mov byte fs:[lastdrvNum], 5     ;Last drive is by default 5
    56 0000017E 05                  <1>
    57 0000017F 64C60425[0A000000]- <1>     mov byte fs:[numLRemDrives], 0     ;Number of logical drives
    57 00000187 00                  <1>
    58                              <1> 
    59                              <1> ;------------------------------------------------;
    60                              <1> ;          Find largest sector size              ;
    61                              <1> ;------------------------------------------------;
    62                              <1> largestSectorSearch:
    63 00000188 30D2                <1>     xor dl, dl
    64 0000018A 31FF                <1>     xor edi, edi    ;Use this as the counter for the largest sector size
    65                              <1> .lss:
    66 0000018C B488                <1>     mov ah, 88h
    67 0000018E CD33                <1>     int 33h
    68 00000190 39C7                <1>     cmp edi, eax
    69 00000192 0F42F8              <1>     cmovb edi, eax  ;Only replace ebp if eax is greater
    70 00000195 FEC2                <1>     inc dl
    71 00000197 4438C2              <1>     cmp dl, r8b
    72 0000019A 75F0                <1>     jne .lss
    73 0000019C 6466893C25-         <1>     mov word fs:[maxBytesSec], di
    73 000001A1 [88000000]          <1>
    74                              <1> 
    75                              <1> ;------------------------------------------------;
    76                              <1> ;          Driver Adjustments and inits          ;
    77                              <1> ;------------------------------------------------;
    78                              <1> ;Modify the pointers in nData before putting them in the data area
    79 000001A5 48012D98030000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
    80 000001AC 48012D9B030000      <1>     add qword [nData + drvHdr.strPtr], rbp
    81 000001B3 48012D9C030000      <1>     add qword [nData + drvHdr.intPtr], rbp
    82                              <1> ;Copy the Null driver to its location in Sysvars
    83 000001BA B922000000          <1>     mov ecx, drvHdr_size
    84 000001BF 488D357E030000      <1>     lea rsi, qword [nData]
    85 000001C6 488DBD[A5000000]    <1>     lea rdi, qword [rbp + nulDevHdr]
    86 000001CD F3A4                <1>     rep movsb   
    87                              <1> 
    88                              <1> ;Adjust the addresses in the other driver headers 
    89 000001CF 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
    89 000001D1 [CB0A000000000000]  <1>
    90 000001D9 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
    91 000001DE 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
    92                              <1> adjDrivers:
    93 000001E2 E888020000          <1>     call adjustDrvHdr
    94 000001E7 E2F9                <1>     loop adjDrivers
    95                              <1> 
    96                              <1> ;Open NUL
    97 000001E9 488D9D[0C000000]    <1>     lea rbx, qword [rbp + charReqHdr]
    98 000001F0 C6030D              <1>     mov byte [rbx + openReqPkt.hdrlen], openReqPkt_size
    99 000001F3 C6430300            <1>     mov byte [rbx + openReqPkt.status], 0
   100 000001F7 FF95[AF000000]      <1>     call qword [rbp + nulDevHdr + drvHdr.strPtr]
   101 000001FD FF95[B7000000]      <1>     call qword [rbp + nulDevHdr + drvHdr.intPtr]
   102                              <1> ;Open CON
   103                              <1> conInit:    ;Rather than keeping this resident... do it here
   104                              <1> .ci0:
   105 00000203 B401                <1>     mov ah, 01      ;Get buffer status
   106 00000205 CD36                <1>     int 36h
   107 00000207 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   108 00000209 30E4                <1>     xor ah, ah
   109 0000020B CD36                <1>     int 36h ;Read key to flush from buffer
   110 0000020D EBF4                <1>     jmp short .ci0
   111                              <1> .ci1:
   112 0000020F B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   113 00000214 CD30                <1>     int 30h
   114 00000216 B402                <1>     mov ah, 02h
   115 00000218 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   116 0000021A 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   117 0000021C CD30                <1>     int 30h
   118 0000021E B707                <1>     mov bh, 07h     ;Grey/Black attribs
   119 00000220 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   120 00000225 CD30                <1>     int 30h
   121                              <1> 
   122                              <1>     ;Save ptr to ConHdr in Sysvars
   123 00000227 488D85[CB0A0000]    <1>     lea rax, qword [rbp + conHdr]
   124 0000022E 6448890425-         <1>     mov qword fs:[conPtr], rax
   124 00000233 [80000000]          <1>
   125                              <1> 
   126                              <1>     ;Save ptr to ClkHdr in Sysvars
   127 00000237 488D85[310B0000]    <1>     lea rax, qword [rbp + clkHdr]
   128 0000023E 6448890425-         <1>     mov qword fs:[clockPtr], rax
   128 00000243 [78000000]          <1>
   129                              <1> 
   130                              <1> ;------------------------------------------------;
   131                              <1> ;          Kernel inits and adjustments          ;
   132                              <1> ;------------------------------------------------;
   133                              <1> ;Adjust Int 41h address table
   134                              <1> adjInt41h:
   135 00000247 B96A000000          <1>     mov ecx, dispatchTableL/8 ;Number of elements in table
   136 0000024C 48BB-               <1>     mov rbx, functionDispatch.dispatchTable ;Get EA of table
   136 0000024E [B004000000000000]  <1>
   137 00000256 488D5C1D00          <1>     lea rbx, qword [rbp+rbx]    ;Point to the start of the relocated table 
   138                              <1> .ai41h:
   139 0000025B 48012B              <1>     add qword [rbx], rbp    ;Add base address value to entry in reloc table
   140 0000025E 4881C308000000      <1>     add rbx, 8              ;Each entry is size 8
   141 00000265 FFC9                <1>     dec ecx
   142 00000267 75F2                <1>     jnz .ai41h  ;Keep looping until all entries have been adjusted
   143                              <1> 
   144                              <1> ;Adjust Interrupt Entries Int 40h-49h
   145                              <1> adjInts:
   146 00000269 B340                <1>     mov bl, 40h
   147 0000026B B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   148 00000270 CD35                <1>     int 35h
   149 00000272 B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   150 00000277 488D3D76020000      <1>     lea rdi, intData
   151 0000027E 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   152                              <1> .ai0:
   153 00000280 B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   154 00000285 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   155 00000288 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   156 0000028B CD35                <1>     int 35h
   157 0000028D 4881C708000000      <1>     add rdi, 8
   158 00000294 FFC1                <1>     inc ecx
   159 00000296 81F94A000000        <1>     cmp ecx, 4Ah
   160 0000029C 75E2                <1>     jne .ai0
   161                              <1> 
   162                              <1> ;------------------------------------------------;
   163                              <1> ;      Init msd driver, create DPB and CDS       ;
   164                              <1> ;------------------------------------------------;
   165                              <1> storageInits:
   166                              <1> ;First save dpb and cds pointer in sysvars
   167 0000029E 488D9D[00000000]    <1>     lea rbx, qword [rbp + firstDPB]
   168 000002A5 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   168 000002AA [68000000]          <1>
   169 000002AE 488D9D[49020000]    <1>     lea rbx, qword [rbp + initCDS]
   170 000002B5 6448891C25-         <1>     mov qword fs:[cdsHeadPtr], rbx
   170 000002BA [92000000]          <1>
   171                              <1> 
   172                              <1> ;Open Mass Storage
   173 000002BE 488D9D[36000000]    <1>     lea rbx, qword [rbp + diskReqHdr]
   174 000002C5 C6031F              <1>     mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   175 000002C8 C6430200            <1>     mov byte [rbx + initReqPkt.cmdcde], 00h     ;MSD init
   176 000002CC 66C743030000        <1>     mov word [rbx + initReqPkt.status], 0       ;Zero status word
   177 000002D2 648A0425[0A000000]  <1>     mov al, byte fs:[numLRemDrives]
   178 000002DA 88431E              <1>     mov byte [rbx + initReqPkt.drvnum], al      ;First unit is drive A
   179 000002DD FF95[5D0B0000]      <1>     call qword [rbp + msdHdr + drvHdr.strPtr]
   180 000002E3 FF95[650B0000]      <1>     call qword [rbp + msdHdr + drvHdr.intPtr]
   181                              <1>     ;Check if it returned OK first!
   182 000002E9 66F743030080        <1>     test word [rbx + initReqPkt.status], 8000h  ;Test the error bit
   183 000002EF 0F858D010000        <1>     jnz errorInit   ;If the bit is set, halt execution
   184 000002F5 8A430D              <1>     mov al, byte [rbx + initReqPkt.numunt]
   185 000002F8 64880425[0A000000]  <1>     mov byte fs:[numLRemDrives], al
   186 00000300 8885[6D0B0000]      <1>     mov byte [rbp + msdHdr + drvHdr.drvNam], al ;Save # of units in name field
   187                              <1> 
   188 00000306 488B5316            <1>     mov rdx, qword [rbx + initReqPkt.optptr]    ;Get ptr to bpbPtrTbl in rdx
   189 0000030A 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   190 0000030D 30C9                <1>     xor cl, cl  ;Clear counter
   191 0000030F 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   191 00000314 [68000000]          <1>
   192                              <1> .si0:   
   193 00000318 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   194 0000031B B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   195 0000031D CD41                <1>     int 41h
   196                              <1> ;Add other data to DPB
   197 0000031F 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   198 00000322 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   199 00000325 50                  <1>     push rax
   200 00000326 488D87[530B0000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   201 0000032D 4889451C            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   202 00000331 58                  <1>     pop rax
   203 00000332 FEC1                <1>     inc cl
   204 00000334 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   205 00000336 7416                <1>     je .si1
   206 00000338 50                  <1>     push rax
   207 00000339 488D4536            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   208 0000033D 48894526            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   209 00000341 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   210 00000344 58                  <1>     pop rax
   211 00000345 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   212 0000034C EBCA                <1>     jmp short .si0
   213                              <1> .si1:
   214                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   215 0000034E 48C74526FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   216 00000356 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   217                              <1> ;------------------------------------------------;
   218                              <1> ;                   MCB inits                    ;
   219                              <1> ;------------------------------------------------;
   220                              <1> 
   221                              <1> ;Build the DOS segment's MCB header
   222 00000359 4889EB              <1>     mov rbx, rbp
   223 0000035C 4881EB10000000      <1>     sub rbx, mcb_size   ;Point rbx to the start of the MCB
   224 00000363 C6034D              <1>     mov byte [rbx + mcb.marker], "M"
   225 00000366 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get the current PSP
   225 0000036B [D7000000]          <1>
   226 0000036F 48894301            <1>     mov qword [rbx + mcb.owner], rax
   227 00000373 C74309FFFFFFFF      <1>     mov dword [rbx + mcb.blockSize], -1 ;Let size be max for now, adjust later
   228                              <1> 
   229 0000037A 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save rbx in data area
   229 0000037F [60000000]          <1>
   230                              <1> 
   231                              <1> ;------------------------------------------------;
   232                              <1> ;          Default File Handle Creation          ;
   233                              <1> ;------------------------------------------------;
   234                              <1> 
   235                              <1> ;Fill in the default file table entries
   236                              <1>     ;lea rbx, qword [rbp + firstSftHeader]
   237                              <1>     ;mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   238                              <1>     ;mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   239                              <1>     ;mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   240                              <1> 
   241                              <1>     ;lea rbx, qword [rbp + firstSft]
   242                              <1>     ;mov word [rbx + sft.wNumHandles], 0 ;Nothing pointing to this file yet
   243                              <1>     ;mov word [rbx + sft.w]
   244                              <1> 
   245                              <1> ;------------------------------------------------;
   246                              <1> ;               Load CONFIG.SYS                  ;
   247                              <1> ;------------------------------------------------;
   248                              <1> ;------------------------------------------------;
   249                              <1> ;              Process CONFIG.SYS                ;
   250                              <1> ;------------------------------------------------;
   251                              <1> ;------------------------------------------------;
   252                              <1> ;           Load Command interpreter             ;
   253                              <1> ;------------------------------------------------;
   254                              <1> 
   255                              <1> ;Test Error Case
   256                              <1>     ;mov ah, 00110000b
   257                              <1>     ;mov al, 00h
   258                              <1>     ;mov edi, 0Ch
   259                              <1>     ;int 44h
   260                              <1> 
   261 00000383 488D1515010000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   262 0000038A B409                <1>     mov ah, 09h
   263 0000038C CD41                <1>     int 41h
   264                              <1> 
   265 0000038E B801C50000          <1>     mov eax, 0C501h ;Connect debugger
   266 00000393 CD35                <1>     int 35h
   267                              <1> l1:
   268 00000395 B401                <1>     mov ah, 01h  ;Write with echo
   269 00000397 CD41                <1>     int 41h
   270 00000399 3C00                <1>     cmp al, 0
   271 0000039B 7402                <1>     je l2
   272 0000039D EBF6                <1>     jmp short l1
   273                              <1> l2:
   274 0000039F B407                <1>     mov ah, 07h
   275 000003A1 CD41                <1>     int 41h
   276 000003A3 3C42                <1>     cmp al, 42h
   277 000003A5 75EE                <1>     jne l1
   278                              <1> l3:
   279 000003A7 6466C70425-         <1>     mov word fs:[CLOCKrecrd + clkStruc.dateWord], 0
   279 000003AC [18010000]0000      <1>
   280 000003B2 488D9D[0C000000]    <1>     lea rbx, qword [rbp + charReqHdr] ;Get the address of this request block
   281 000003B9 488D85[18010000]    <1>     lea rax, qword [rbp + CLOCKrecrd]
   282 000003C0 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   283 000003C3 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read the time
   284 000003C7 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   285 000003CD 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   286 000003D1 C7431606000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 06
   287 000003D8 FF95[3B0B0000]      <1>     call qword [rbp + clkHdr + drvHdr.strPtr]
   288 000003DE FF95[430B0000]      <1>     call qword [rbp + clkHdr + drvHdr.intPtr]
   289                              <1> 
   290 000003E4 B403                <1>     mov ah, 03h
   291 000003E6 30FF                <1>     xor bh, bh
   292 000003E8 CD30                <1>     int 30h
   293 000003EA 30D2                <1>     xor dl, dl  ;0 column
   294 000003EC B402                <1>     mov ah, 02h
   295 000003EE CD30                <1>     int 30h
   296                              <1> 
   297 000003F0 488D9D[18010000]    <1>     lea rbx, qword [rbp + CLOCKrecrd]
   298 000003F7 0FB64303            <1>     movzx eax, byte [rbx + clkStruc.hours]
   299 000003FB E832000000          <1>     call .clkHexToBCD
   300 00000400 B40E                <1>     mov ah, 0Eh
   301 00000402 B03A                <1>     mov al, ":"
   302 00000404 CD30                <1>     int 30h
   303 00000406 0FB64302            <1>     movzx eax, byte [rbx + clkStruc.minutes]
   304 0000040A E823000000          <1>     call .clkHexToBCD
   305 0000040F B40E                <1>     mov ah, 0Eh
   306 00000411 B03A                <1>     mov al, ":"
   307 00000413 CD30                <1>     int 30h
   308 00000415 0FB64305            <1>     movzx eax, byte [rbx + clkStruc.seconds]
   309 00000419 E814000000          <1>     call .clkHexToBCD
   310 0000041E B40E                <1>     mov ah, 0Eh
   311 00000420 B02E                <1>     mov al, "."
   312 00000422 CD30                <1>     int 30h
   313 00000424 0FB64304            <1>     movzx eax, byte [rbx + clkStruc.hseconds]
   314 00000428 E805000000          <1>     call .clkHexToBCD
   315 0000042D E963FFFFFF          <1>     jmp l1
   316                              <1> .clkHexToBCD:
   317                              <1> ;Converts a Hex byte into two BCD digits
   318                              <1> ;Takes input in each nybble of al
   319 00000432 53                  <1>     push rbx
   320 00000433 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
   320 0000043C 00                  <1>
   321 0000043D 31D2                <1>     xor edx, edx
   322 0000043F 48F7F3              <1>     div rbx
   323 00000442 80C230              <1>     add dl, '0'
   324 00000445 80FA39              <1>     cmp dl, '9'
   325 00000448 7603                <1>     jbe .chtb0
   326 0000044A 80C207              <1>     add dl, 'A'-'0'-10
   327                              <1> .chtb0:
   328 0000044D 88D1                <1>     mov cl, dl    ;Save remainder byte
   329 0000044F 31D2                <1>     xor edx, edx
   330 00000451 48F7F3              <1>     div rbx
   331 00000454 80C230              <1>     add dl, '0'
   332 00000457 80FA39              <1>     cmp dl, '9'
   333 0000045A 7603                <1>     jbe .chtb1
   334 0000045C 80C207              <1>     add dl, 'A'-'0'-10
   335                              <1> .chtb1:
   336 0000045F 88D5                <1>     mov ch, dl    ;Save remainder byte
   337                              <1> 
   338 00000461 88E8                <1>     mov al, ch    ;Get most sig digit into al
   339 00000463 B40E                <1>     mov ah, 0Eh
   340 00000465 CD30                <1>     int 30h
   341 00000467 88C8                <1>     mov al, cl    ;Get least sig digit into al
   342 00000469 B40E                <1>     mov ah, 0Eh
   343 0000046B CD30                <1>     int 30h
   344 0000046D 5B                  <1>     pop rbx
   345 0000046E C3                  <1>     ret
   346                              <1> ;--------------------------------
   347                              <1> ;       PROCS FOR SYSINIT       :
   348                              <1> ;--------------------------------
   349                              <1> adjustDrvHdr:
   350                              <1> ;Input: rsi = Effective address of driver in DOS segment
   351                              <1> ;       rbp = Ptr to the start of the DOS segment
   352                              <1> ;Output: rsi = EA of next header in DOS segment
   353 0000046F 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   354 00000472 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   355 00000476 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   356 0000047A 4881C622000000      <1>     add rsi, drvHdr_size
   357 00000481 C3                  <1>     ret
   358                              <1> errorInit:
   359                              <1> ;If a critical error occurs during sysinit, fail through here
   360 00000482 488D152C000000      <1>     lea rdx, hltmsg
   361 00000489 B409                <1>     mov ah, 09h
   362 0000048B CD41                <1>     int 41h
   363 0000048D FA                  <1>     cli ;Clear interrupts
   364 0000048E B0FF                <1>     mov al, -1
   365 00000490 66BAA100            <1>     mov dx, 0A1h    ;PIC2 data
   366 00000494 EE                  <1>     out dx, al      ;Mask all lines
   367 00000495 66BA2100            <1>     mov dx, 21h     ;PIC1 data
   368 00000499 EE                  <1>     out dx, al      ;Mask all lines
   369                              <1> .ei0:
   370 0000049A F4                  <1>     hlt
   371 0000049B F390                <1>     pause
   372 0000049D EBFB                <1>     jmp short .ei0
   373                              <1> 
   374                              <1> ;--------------------------------
   375                              <1> ;       DATA FOR SYSINIT        :
   376                              <1> ;--------------------------------
   377 0000049F 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
   377 000004A8 5343502F444F532E2E- <1>
   377 000004B1 2E0A0D24            <1>
   378 000004B5 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0Ah,0Dh,"$"
   378 000004BE 7469616C6973696E67- <1>
   378 000004C7 20534350444F532E53- <1>
   378 000004D0 59532E205379737465- <1>
   378 000004D9 6D2068616C74696E67- <1>
   378 000004E2 2E2E2E0A0D24        <1>
   379 000004E8 434F4E00            <1> conName db "CON",0
   380 000004EC 41555800            <1> auxName db "AUX",0
   381 000004F0 50524E00            <1> prnName db "PRN",0
   382                              <1> intData:
   383 000004F4 [7500000000000000]  <1>     dq terminateProcess ;Int 40h
   384 000004FC [7500000000000000]  <1>     dq functionDispatch ;Int 41h
   385 00000504 [0008000000000000]  <1>     dq terminateHandler ;Int 42h
   386 0000050C [0008000000000000]  <1>     dq ctrlCHandler     ;Int 43h
   387 00000514 [0008000000000000]  <1>     dq critErrorHandler ;Int 44h
   388 0000051C [930A000000000000]  <1>     dq absDiskRead      ;Int 45h
   389 00000524 [A80A000000000000]  <1>     dq absDiskWrite     ;Int 46h
   390 0000052C [BD0A000000000000]  <1>     dq terminateResident    ;Int 47h
   391 00000534 [BD0A000000000000]  <1>     dq inDosHandler     ;Int 48h
   392 0000053C [BF0A000000000000]  <1>     dq fastOutput       ;Int 49h
   393                              <1> nData:
   394 00000544 [CB0A000000000000]  <1>     dq conHdr
   395 0000054C 0480                <1>     dw 08004h
   396 0000054E [730C000000000000]  <1>     dq nulStrat
   397 00000556 [790C000000000000]  <1>     dq nulIntr
   398 0000055E 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
     9                                  %include "dosKernel.asm"
    10                              <1> Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 
    11                              <1> ;-----------------------------------:
    12                              <1> ;           Static Data             :
    13                              <1> ;-----------------------------------:
    14 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    15 00000001 01                  <1> dosMinor    db 01h      ;.01
    16                              <1> ;-----------------------------------:
    17                              <1> ;       Misc System routines        :
    18                              <1> ;-----------------------------------:
    19                              <1> criticalDOSError:
    20                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    21                              <1> ; to the critical error handler.
    22                              <1> ; Called with ax, di and rsi set as required by Int 44h (caller decides)
    23                              <1> ; Return response from int 44h in al
    24 00000002 488925(F4000000)    <1>     mov qword [xInt44hRSP], rsp
    25 00000009 488B25(08010000)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
    26 00000010 FA                  <1>     cli ;Disable Interrupts
    27 00000011 CD44                <1>     int 44h ;Call critical error handler
    28 00000013 FB                  <1>     sti ;Reenable Interrupts
    29 00000014 488B25(F4000000)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
    30 0000001B C3                  <1>     ret
    31                              <1> findLRUBuffer: 
    32                              <1> ;Finds least recently used buffer, links it and returns ptr to it in rbx
    33                              <1> ;Input: Nothing
    34                              <1> ;Output: rbx = Pointer to the buffer to use
    35 0000001C 52                  <1>     push rdx
    36 0000001D 488B1D(8A000000)    <1>     mov rbx, qword [bufHeadPtr]
    37 00000024 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
    38 0000002B 7502                <1>     jne .flb1
    39 0000002D 5A                  <1>     pop rdx
    40 0000002E C3                  <1>     ret
    41                              <1> .flb1:
    42 0000002F 4889DA              <1>     mov rdx, rbx    ;Save a ptr to the previous buffer header
    43 00000032 488B1A              <1>     mov rbx, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
    44 00000035 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
    45 0000003C 75F1                <1>     jne .flb1   ;If not LRU, keep walking, else process
    46 0000003E 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
    47 00000045 488B15(8A000000)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
    48 0000004C 48891D(8A000000)    <1>     mov qword [bufHeadPtr], rbx    ;Sysvars to point to new buffer
    49 00000053 488913              <1>     mov qword [rbx + bufferHdr.nextBufPtr], rdx
    50 00000056 5A                  <1>     pop rdx
    51 00000057 C3                  <1>     ret
    52                              <1> 
    53                              <1> findDPB:
    54                              <1> ;Finds the DPB for a given drive
    55                              <1> ;Input:  dl = Drive number (0=A, 1=B etc...)
    56                              <1> ;Output: al = 00, rbx = Pointer to the DPB
    57                              <1> ;        al = -1, Failed, no DPB for device, rbx destroyed
    58 00000058 488B1D(68000000)    <1>     mov rbx, qword [dpbHeadPtr]
    59                              <1> .fd1:
    60 0000005F 30C0                <1>     xor al, al
    61 00000061 3813                <1>     cmp byte [rbx + dpb.bDriveNumber], dl
    62 00000063 740F                <1>     je .fd2
    63 00000065 488B5B26            <1>     mov rbx, qword [rbx + dpb.qNextDPBPtr]
    64 00000069 B0FF                <1>     mov al, -1
    65 0000006B 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If rbx followed last item in list, no DPB exists for dl
    66 00000072 75EB                <1>     jne .fd1
    67                              <1> .fd2:
    68 00000074 C3                  <1>     ret
    69                              <1> ;-----------------------------------:
    70                              <1> ;       File System routines        :
    71                              <1> ;-----------------------------------:
    72                              <1> name2Clust:
    73                              <1> ;Converts a file name to a first cluster number
    74                              <1> ;-----------------------------------:
    75                              <1> ;        Interrupt routines         :
    76                              <1> ;-----------------------------------:
    77                              <1> terminateProcess:   ;Int 40h
    78                              <1> 
    79                              <1> functionDispatch:   ;Int 41h Main function dispatcher
    80                              <1> ;ah = Function number, all other registers have various meanings
    81 00000075 FA                  <1>     cli ;Halt external interrupts
    82 00000076 FC                  <1>     cld ;Ensure all string ops occur in the right direction
    83 00000077 80FC6A              <1>     cmp ah, dispatchTableL/8    ;Number of functions
    84 0000007A 0F871D010000        <1>     ja .fdExitBad
    85                              <1>     ;Cherry pick functions
    86 00000080 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    87 00000083 722C                <1>     jb .fsbegin   ;If below skip these checks
    88 00000085 0F84B9020000        <1>     je .ctrlBreakCheck
    89 0000008B 80FC64              <1>     cmp ah, 64h
    90 0000008E 0F841B040000        <1>     je .setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    91 00000094 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    92 00000096 80FC51              <1>     cmp ah, 51h
    93 00000099 0F84E8020000        <1>     je .getCurrProcessID    ;This and below are exactly the same
    94 0000009F 80FC62              <1>     cmp ah, 62h
    95 000000A2 0F84F4030000        <1>     je .getPSPaddr          ;Calls the above function
    96 000000A8 80FC50              <1>     cmp ah, 50h
    97 000000AB 0F84CE020000        <1>     je .setCurrProcessID
    98                              <1> .fsbegin:
    99                              <1>     pushDOS ;Push the usual prologue registers
   202 000000B1 4151                <2>  push r9
   203 000000B3 4150                <2>  push r8
   204 000000B5 55                  <2>  push rbp
   205 000000B6 57                  <2>  push rdi
   206 000000B7 56                  <2>  push rsi
   207 000000B8 52                  <2>  push rdx
   208 000000B9 51                  <2>  push rcx
   209 000000BA 53                  <2>  push rbx
   210 000000BB 50                  <2>  push rax
   100 000000BC 488B05(08010000)    <1>     mov rax, qword [oldRSP]
   101 000000C3 488905(00010000)    <1>     mov qword [oldoldRSP], rax
   102 000000CA FE05(C8000000)      <1>     inc byte [inDOS]    ;Increment in DOS flag
   103 000000D0 488925(08010000)    <1>     mov qword [oldRSP], rsp
   104                              <1> ;Here, we want to save oldRSP in the callers PSP
   105 000000D7 803D(C8000000)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
   106 000000DE 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
   107 000000E0 488B05(D7000000)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
   108 000000E7 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
   109                              <1> .fsb1:
   110 000000EB 58                  <1>     pop rax     ;Get old rax back
   111 000000EC 50                  <1>     push rax    ;and push it back onto the stack
   112 000000ED 488D25(4C060000)    <1>     lea rsp, critStakTop
   113 000000F4 FB                  <1>     sti         ;Reenable interrupts
   114                              <1> 
   115 000000F5 C605(FF000000)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
   116                              <1> 
   117 000000FC 48891D(10010000)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
   118 00000103 0FB6DC              <1>     movzx ebx, ah   ;Move the function number bl zero extended to rbx
   119 00000106 C1E303              <1>     shl ebx, 3      ;Multiply the function number by 8 for offset into table
   120 00000109 50                  <1>     push rax        ;Push rax onto the stack
   121 0000010A 488D059F030000      <1>     lea rax, qword [.dispatchTable]
   122 00000111 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   123 00000114 58                  <1>     pop rax
   124 00000115 488B1B              <1>     mov rbx, qword [rbx]    ;Get the address from the dispatch table
   125                              <1> 
   126 00000118 84E4                <1>     test ah, ah     ;Simple Terminate function?
   127 0000011A 741C                <1>     jz .fddiskOp
   128 0000011C 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   129 0000011F 7443                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   130 00000121 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   131 00000124 7712                <1>     ja .fddiskOp
   132                              <1> ;Char operations here
   133 00000126 F605(C7000000)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   134 0000012D 7535                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   135 0000012F 488D25(8C0C0000)    <1>     lea rsp, IOStakTop          ;Otherwise, switch to IO stack
   136 00000136 EB2C                <1>     jmp short .fdGoToFunction
   137                              <1> .fddiskOp:
   138                              <1>     ;Disk operations go here
   139                              <1>     ;Clear up error info
   140 00000138 C605(CA000000)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   141 0000013F C605(C7000000)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   142 00000146 C605(C9000000)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   143                              <1> 
   144 0000014D C605(FF000000)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   145 00000154 488D25(CC120000)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   146 0000015B F605(F2000000)FF    <1>     test byte [breakFlag], -1   ;Test if set
   147 00000162 7400                <1>     jz .fdGoToFunction
   148                              <1> ; HANDLE CTRL+BREAK HERE!
   149                              <1> .fdGoToFunction:
   150 00000164 48871D(10010000)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   151                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   152                              <1>     ;
   153                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   154                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   155                              <1>     ;
   156 0000016B FF15(10010000)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   157                              <1> .fdExit:
   158 00000171 FA                  <1>     cli     ;Redisable interrupts
   159                              <1>     ;???
   160 00000172 FE0D(C8000000)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   161 00000178 488B25(08010000)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   162 0000017F 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   163 00000182 488B05(00010000)    <1>     mov rax, qword [oldoldRSP]
   164 00000189 488905(08010000)    <1>     mov qword [oldRSP], rax
   165                              <1>     popDOS  ;Pop the frame
   214 00000190 58                  <2>  pop rax
   215 00000191 5B                  <2>  pop rbx
   216 00000192 59                  <2>  pop rcx
   217 00000193 5A                  <2>  pop rdx
   218 00000194 5E                  <2>  pop rsi
   219 00000195 5F                  <2>  pop rdi
   220 00000196 5D                  <2>  pop rbp
   221 00000197 4158                <2>  pop r8
   222 00000199 4159                <2>  pop r9
   166 0000019B 48CF                <1>     iretq
   167                              <1> .fdExitBad:
   168 0000019D B400                <1>     mov ah, 0
   169 0000019F 48CF                <1>     iretq
   170                              <1> .simpleTerminate:     ;ah = 00h
   171 000001A1 C3                  <1>     ret
   172                              <1> .stdinReadEcho:     ;ah = 01h
   173                              <1> ;Return char that has been read and echoed in al
   174 000001A2 488D1D(0C000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
   175 000001A9 488D0566000000      <1>     lea rax, .stdinReadEchoBuffer
   176 000001B0 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   177 000001B3 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
   178 000001B7 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   179 000001BD 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   180 000001C1 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
   181 000001C8 FF1507090000        <1>     call qword [conHdr + drvHdr.strPtr]
   182 000001CE FF1509090000        <1>     call qword [conHdr + drvHdr.intPtr]
   183 000001D4 803D3B00000000      <1>     cmp byte [.stdinReadEchoBuffer], 00h
   184 000001DB 7432                <1>     jz .stdireexit
   185 000001DD 488D1D(0C000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
   186 000001E4 488D052B000000      <1>     lea rax, .stdinReadEchoBuffer
   187 000001EB C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   188 000001EE C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
   189 000001F2 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   190 000001F8 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   191 000001FC C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
   192 00000203 FF15CC080000        <1>     call qword [conHdr + drvHdr.strPtr]
   193 00000209 FF15CE080000        <1>     call qword [conHdr + drvHdr.intPtr]
   194                              <1> .stdireexit:
   195 0000020F 8A0501000000        <1>     mov al, byte [.stdinReadEchoBuffer]
   196 00000215 C3                  <1>     ret
   197 00000216 00                  <1> .stdinReadEchoBuffer    db 0
   198                              <1> .stdoutWrite:       ;ah = 02h
   199                              <1> ;Bspace is regular cursor left, does not insert a blank
   200 00000217 881533000000        <1>     mov byte [.stdoutWriteBuffer], dl
   201 0000021D 488D1D(0C000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
   202 00000224 488D1525000000      <1>     lea rdx, .stdoutWriteBuffer
   203 0000022B C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   204 0000022E C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
   205 00000232 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   206 00000238 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   207 0000023C C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
   208 00000243 FF158C080000        <1>     call qword [conHdr + drvHdr.strPtr]
   209 00000249 FF158E080000        <1>     call qword [conHdr + drvHdr.intPtr]
   210 0000024F C3                  <1>     ret
   211 00000250 00                  <1> .stdoutWriteBuffer db 0
   212                              <1> .stdauxRead:        ;ah = 03h
   213                              <1> .stdauxWrite:       ;ah = 04h
   214                              <1> .stdprnWrite:       ;ah = 05h
   215                              <1> .directCONIO:       ;ah = 06h
   216                              <1> .waitDirectInNoEcho:;ah = 07h
   217                              <1> ;Return char in al
   218 00000251 488D1D(0C000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
   219 00000258 488D052B000000      <1>     lea rax, .function7buffer
   220 0000025F C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   221 00000262 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
   222 00000266 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   223 0000026C 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   224 00000270 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
   225 00000277 FF1558080000        <1>     call qword [conHdr + drvHdr.strPtr]
   226 0000027D FF155A080000        <1>     call qword [conHdr + drvHdr.intPtr]
   227 00000283 8A0501000000        <1>     mov al, byte [.function7buffer]
   228 00000289 C3                  <1>     ret
   229 0000028A 00                  <1> .function7buffer    db 0
   230                              <1> .waitStdinNoEcho:   ;ah = 08h
   231 0000028B C3                  <1>     ret
   232                              <1> .printString:       ;ah = 09h
   233 0000028C 31C9                <1>     xor ecx, ecx    ;Clear char counter
   234 0000028E B824000000          <1>     mov eax, "$"    ;Terminating char
   235 00000293 4889D7              <1>     mov rdi, rdx    ;Set up for scasb
   236                              <1> .ps0:   ;Search for $ to get count of chars
   237 00000296 AE                  <1>     scasb
   238 00000297 7404                <1>     je .ps1
   239 00000299 FFC1                <1>     inc ecx
   240 0000029B EBF9                <1>     jmp short .ps0
   241                              <1> .ps1:   ;Use handle 
   242 0000029D 488D1D(0C000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
   243 000002A4 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   244 000002A7 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
   245 000002AB 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   246 000002B1 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   247 000002B5 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   248 000002B8 FF1517080000        <1>     call qword [conHdr + drvHdr.strPtr]
   249 000002BE FF1519080000        <1>     call qword [conHdr + drvHdr.intPtr]
   250                              <1> 
   251 000002C4 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   252 000002CB 8A03                <1>     mov al, byte [rbx+callerFrame.rax]      ;Gets al to preserve it
   253 000002CD C3                  <1>     ret
   254                              <1> .buffStdinInput:    ;ah = 0Ah
   255                              <1> .checkStdinStatus:  ;ah = 0Bh
   256                              <1> .clearbuffDoFunc:   ;ah = 0Ch
   257                              <1> .diskReset:         ;ah = 0Dh
   258                              <1> .selectDisk:        ;ah = 0Eh
   259                              <1> .openFileFCB:       ;ah = 0Fh
   260                              <1> .closeFileFCB:      ;ah = 10h
   261                              <1> .findFirstFileFCB:  ;ah = 11h
   262                              <1> .findNextFileFCB:   ;ah = 12h
   263                              <1> .deleteFileFCB:     ;ah = 13h
   264                              <1> .sequentialReadFCB: ;ah = 14h
   265                              <1> .sequentialWriteFCB:;ah = 15h
   266                              <1> .createFileFCB:     ;ah = 16h
   267                              <1> .renameFileFCB:     ;ah = 17h
   268                              <1>                     ;ah = 18h unused
   269                              <1> .getCurrentDisk:    ;ah = 19h, get current default drive
   270 000002CE 8A05(F1000000)      <1>     mov al, byte [currentDrv]
   271 000002D4 C3                  <1>     ret
   272                              <1> .setDTA:            ;ah = 1Ah
   273                              <1> ;Called with:
   274                              <1> ;   rdx = Pointer to the new default DTA
   275 000002D5 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   276 000002DC 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
   277 000002E0 488915(CF000000)    <1>     mov qword [currentDTA], rdx
   278 000002E7 C3                  <1>     ret
   279                              <1> .FATinfoDefault:    ;ah = 1Bh
   280                              <1> .FatinfoDevice:     ;ah = 1Ch
   281                              <1>                     ;ah = 1Dh unused
   282                              <1>                     ;ah = 1Eh unused
   283                              <1> .getCurrentDPBptr:  ;ah = 1Fh, simply calls int 41h ah = 32h with dl = 0
   284                              <1>                     ;ah = 20h unused
   285                              <1> .randomReadFCB:     ;ah = 21h
   286                              <1> .randomWriteFCB:    ;ah = 22h
   287                              <1> .getFileSizeFCB:    ;ah = 23h
   288                              <1> .setRelRecordFCB:   ;ah = 24h
   289                              <1> .setIntVector:      ;ah = 25h
   290                              <1> ;Called with:
   291                              <1> ;   rdx = Pointer to interrupt handler
   292                              <1> ;   al = Interrupt number
   293 000002E8 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   294 000002EA 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   295                              <1> ;First call to get default BIOS segement selector and attribute word
   296 000002F0 88C3                <1>     mov bl, al  ;Set interrupt number 
   297 000002F2 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   298 000002F7 CD35                <1>     int 35h
   299 000002F9 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   300 000002FB 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   301                              <1> ;dx preserves the attribute word
   302 000002FD 488B2D(08010000)    <1>     mov rbp, qword [oldRSP]
   303 00000304 488B5D18            <1>     mov rbx, qword [rbp + callerFrame.rdx]  ;Pointer passed in rdx
   304 00000308 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   305 0000030D CD35                <1>     int 35h
   306                              <1> 
   307 0000030F 8A4500              <1>     mov al, byte [rbp + callerFrame.rax]    ;Preserve low byte of rax
   308 00000312 C3                  <1>     ret
   309                              <1> .createNewPSP:      ;ah = 26h
   310                              <1> .randBlockReadFCB:  ;ah = 27h
   311                              <1> .randBlockWriteFCB: ;ah = 28h
   312                              <1> .parseFilenameFCB:  ;ah = 29h
   313                              <1> .getDate:           ;ah = 2Ah
   314                              <1> .setDate:           ;ah = 2Bh
   315                              <1> .getTime:           ;ah = 2Ch
   316                              <1> .setTime:           ;ah = 2Dh
   317                              <1> .setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   318 00000313 8805(F3000000)      <1>     mov byte [verifyFlag], al
   319 00000319 C3                  <1>     ret
   320                              <1> .getDTA:            ;ah = 2Fh
   321 0000031A 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   322 00000321 488B1D(CF000000)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
   323 00000328 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
   324 0000032C C3                  <1>     ret
   325                              <1> .getDOSversion:     ;ah = 30h
   326 0000032D 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   327 00000334 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   328 00000336 886209              <1>     mov byte [rdx + callerFrame.rbx + 1], ah    ;Clear bh 
   329 00000339 668B05C0FCFFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   330 00000340 668902              <1>     mov word [rdx + callerFrame.rax], ax    ;Save ax
   331 00000343 C3                  <1>     ret
   332                              <1> .terminateStayRes:  ;ah = 31h
   333                              <1> .getDeviceDPBptr:   ;ah = 32h
   334                              <1> .ctrlBreakCheck:    ;ah = 33h
   335 00000344 84C0                <1>     test al, al
   336 00000346 7406                <1>     jz .cbcget  ;Get the state
   337 00000348 8815(F2000000)      <1>     mov byte [breakFlag], dl    ;Set the state
   338                              <1> .cbcget:
   339 0000034E 8A15(F2000000)      <1>     mov dl, byte [breakFlag]    ;Get the state
   340 00000354 C3                  <1>     ret
   341                              <1> .getInDOSflagPtr:   ;ah = 34h
   342 00000355 488D15(C8000000)    <1>     lea rdx, inDOS
   343 0000035C 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   344 00000363 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx  ;save ptr in rbx
   345 00000367 C3                  <1>     ret
   346                              <1> .getIntVector:      ;ah = 35h
   347                              <1> ;Called with:
   348                              <1> ;   al = Interrupt Number
   349                              <1> ;Returns:
   350                              <1> ;   rbx = Pointer to interrupt handler
   351 00000368 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   352 0000036A B807F00000          <1>     mov eax, 0F007h
   353 0000036F CD35                <1>     int 35h
   354 00000371 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   355 00000378 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx  ;Save pointer in rbx
   356 0000037C 8A02                <1>     mov al, byte [rdx + callerFrame.rax]    ;Get the low byte in al
   357 0000037E C3                  <1>     ret
   358                              <1> .getDiskFreeSpace:  ;ah = 36h
   359                              <1> .getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
   360                              <1> .getsetCountryInfo: ;ah = 38h, localisation info
   361                              <1> .makeDIR:           ;ah = 39h
   362                              <1> .removeDIR:         ;ah = 3Ah
   363                              <1> .changeCurrentDIR:  ;ah = 3Bh, changes directory for current drive
   364                              <1> .createFileHdl:     ;ah = 3Ch, handle function
   365                              <1> .openFileHdl:       ;ah = 3Dh, handle function
   366                              <1> .closeFileHdl:      ;ah = 3Eh, handle function
   367                              <1> .readFileHdl:       ;ah = 3Fh, handle function
   368                              <1> .writeFileHdl:      ;ah = 40h, handle function
   369                              <1> .deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   370                              <1> .movFileReadPtr:    ;ah = 42h, handle function, LSEEK
   371                              <1> .changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   372                              <1> .ioctrl:            ;ah = 44h, handle function
   373                              <1> .duplicateHandle:   ;ah = 45h, handle function
   374                              <1> .forceDuplicateHdl: ;ah = 46h, handle function
   375                              <1> .getCurrentDIR:     ;ah = 47h
   376                              <1> .allocateMemory:    ;ah = 48h
   377                              <1> .freeMemory:        ;ah = 49h
   378                              <1> .reallocMemory:     ;ah = 4Ah
   379                              <1> .loadExecChild:     ;ah = 4Bh, EXEC
   380                              <1> .terminateClean:    ;ah = 4Ch, EXIT
   381                              <1> .getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   382                              <1> .findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   383                              <1> .findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   384                              <1> .setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   385 0000037F 48891D(D7000000)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   386 00000386 C3                  <1>     ret
   387                              <1> .getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   388 00000387 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   389 0000038E 488B15(D7000000)    <1>     mov rdx, qword [currentPSP]
   390 00000395 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx   ;Set the caller pointer
   391 00000399 C3                  <1>     ret 
   392                              <1> .getSysVarsPtr:     ;ah = 52h
   393 0000039A 488D15(68000000)    <1>     lea rdx, sysVarsPtr
   394 000003A1 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   395 000003A8 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx
   396 000003AC C3                  <1>     ret
   397                              <1> .createDPB:         ;ah = 53h, generates a DPB from a given BPB
   398                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   399                              <1> ;This is done so that the other fields of the DPB can be recycled
   400                              <1> ;Input: rsi = ptr to the BPB
   401                              <1> ;       rbp = ptr to the DPB
   402 000003AD 6687DB              <1>     xchg bx, bx
   403                              <1> ;bMediaDescriptor
   404 000003B0 8A4615              <1>     mov al, byte [rsi + bpb.media]
   405 000003B3 884524              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   406                              <1> ;bAccessFlag
   407 000003B6 C64525FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Not accessed
   408                              <1> ;dFirstFreeCluster
   409 000003BA C7452E00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   410                              <1> ;dNumberOfFreeClusters
   411 000003C1 C74532FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   412                              <1> ;bBytesPerSectorShift
   413 000003C8 668B460B            <1>     mov ax, word [rsi + bpb.bytsPerSec]
   414 000003CC B107                <1>     mov cl, 7   ;Start with 128 byte sectors (not supported, min 512)
   415 000003CE 66D3E8              <1>     shr ax, cl  ;Shift down
   416                              <1> .cd0:
   417 000003D1 66D1E8              <1>     shr ax, 1
   418 000003D4 7404                <1>     jz .cd1
   419 000003D6 FEC1                <1>     inc cl
   420 000003D8 EBF7                <1>     jmp short .cd0
   421                              <1> .cd1:
   422 000003DA 884D02              <1>     mov byte [rbp + dpb.bBytesPerSectorShift], cl
   423                              <1> ;bMaxSectorInCluster
   424 000003DD 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   425 000003E0 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   426 000003E2 884503              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   427                              <1> ;bSectorsPerClusterShift
   428 000003E5 FEC0                <1>     inc al
   429 000003E7 30C9                <1>     xor cl, cl
   430                              <1> .cd2:
   431 000003E9 D0E8                <1>     shr al, 1
   432 000003EB 7404                <1>     jz .cd3
   433 000003ED FEC1                <1>     inc cl
   434 000003EF EBF8                <1>     jmp short .cd2
   435                              <1> .cd3:
   436 000003F1 884D04              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   437                              <1> ;dFAToffset, number of hidden sectors + number of reserved sectors
   438 000003F4 0FB7460E            <1>     movzx eax, word [rsi + bpb.revdSecCnt]
   439 000003F8 03461C              <1>     add eax, dword [rsi + bpb.hiddSec] 
   440 000003FB 894505              <1>     mov dword [rbp + dpb.dFAToffset], eax
   441                              <1> ;bNumberOfFATs
   442 000003FE 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   443 00000401 884509              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   444                              <1> ;wNumberRootDirSectors
   445 00000404 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   446 00000408 C1E005              <1>     shl eax, 5  ;Multiply by 32
   447 0000040B 0FB74E0B            <1>     movzx ecx, word [rsi + bpb.bytsPerSec]
   448 0000040F FFC9                <1>     dec ecx
   449 00000411 01C8                <1>     add eax, ecx
   450 00000413 31D2                <1>     xor edx, edx    ;Clear for divide
   451 00000415 F7F1                <1>     div ecx ;Divide 0:eax by ecx, (e)ax has number of clusters
   452 00000417 6689450A            <1>     mov word [rbp + dpb.wNumberRootDirSectors], ax  ;0 for FAT32
   453                              <1> ;dFATlength, get the FAT length
   454 0000041B 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   455 0000041F 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   456 00000422 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   457 00000424 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   458 00000427 894514              <1>     mov dword [rbp + dpb.dFATlength], eax
   459                              <1> ;Complex cases below...
   460                              <1> ;dClusterHeapOffset, start sector of the data area
   461 0000042A 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   462 0000042E 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   463 00000431 85C0                <1>     test eax, eax
   464 00000433 0F44C3              <1>     cmovz eax, ebx
   465                              <1> ;eax = FATsz
   466 00000436 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   467 0000043A 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   468 0000043D 85DB                <1>     test ebx, ebx
   469 0000043F 0F44D9              <1>     cmovz ebx, ecx 
   470                              <1> ;ebx = TotSec
   471 00000442 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   472 00000445 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   473                              <1> .cd4:
   474 00000447 01C2                <1>     add edx, eax
   475 00000449 FEC9                <1>     dec cl
   476 0000044B 75FA                <1>     jnz .cd4
   477 0000044D 89D0                <1>     mov eax, edx    ;Store product in eax
   478 0000044F 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   479 00000453 01D0                <1>     add eax, edx
   480 00000455 0FB7550A            <1>     movzx edx, word [rbp + dpb.wNumberRootDirSectors]
   481 00000459 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   482                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   483                              <1>     ;aka eax = Start sector of the data area in volume
   484 0000045B 89450C              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   485                              <1> ;dClusterCount
   486 0000045E 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   487 00000460 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   488 00000462 31D2                <1>     xor edx, edx
   489 00000464 BB01000000          <1>     mov ebx, 1
   490 00000469 8A4D04              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   491 0000046C D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   492 0000046E F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   493 00000470 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   494 00000472 894510              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   495                              <1> ;dFirstUnitOfRootDir
   496 00000475 3DF5FF0000          <1>     cmp eax, 65525  ;If above, its FAT32
   497 0000047A 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   498 0000047D 7709                <1>     ja .cd5
   499                              <1>     ;Else, we need to find the first sector of the root directory
   500                              <1>     ;Get the start sector of data area in volume 
   501                              <1>     ; and sub the number of sectors in the root directory
   502 0000047F 8B450C              <1>     mov eax, dword [rbp + dpb.dClusterHeapOffset]
   503 00000482 0FB75D0A            <1>     movzx ebx, word [rbp + dpb.wNumberRootDirSectors]
   504 00000486 29D8                <1>     sub eax, ebx    ;eax now has start sector of root dir
   505                              <1> .cd5:
   506 00000488 894518              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   507                              <1> ;Exit epilogue
   508 0000048B 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   509 00000492 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   510 00000494 C3                  <1>     ret
   511                              <1> .getVerifySetting:  ;ah = 54h
   512 00000495 8A05(F3000000)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   513 0000049B C3                  <1>     ret
   514                              <1> .createPSP:         ;ah = 55h, creates a PSP for a program
   515                              <1> .renameFile:        ;ah = 56h
   516                              <1> .getSetFileDateTime:;ah = 57h
   517                              <1> .getsetMallocStrat: ;ah = 58h
   518                              <1> .getExtendedError:  ;ah = 59h
   519                              <1> .createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   520                              <1> .createNewFile:     ;ah = 5Bh
   521                              <1> .lockUnlockFile:    ;ah = 5Ch
   522                              <1> .getCritErrorInfo:  ;ah = 5Dh
   523                              <1> .networkServices:   ;ah = 5Eh, do nothing
   524                              <1> .networkRedirection:;ah = 5Fh, do nothing
   525                              <1> .trueName:          ;ah = 60h, get fully qualified name
   526                              <1>                     ;ah = 61h, reserved
   527                              <1> .getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   528 0000049C 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   529 000004A3 488B15(D7000000)    <1>     mov rdx, qword [currentPSP]
   530 000004AA 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx  ;Save the current psp in rbx
   531 000004AE C3                  <1>     ret
   532                              <1>                     ;ah = 63h, reserved
   533                              <1> .setDriverLookahead:;ah = 64h, reserved
   534                              <1> .getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
   535                              <1> .getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
   536                              <1> .setHandleCount:    ;ah = 67h
   537                              <1> .commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   538                              <1> .getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   539                              <1> .return:
   540 000004AF C3                  <1>     ret
   541                              <1> 
   542                              <1> 
   543                              <1> .dispatchTable:
   544 000004B0 [A101000000000000]  <1>     dq .simpleTerminate     ;AH = 00H, PROCESS MANAGEMENT
   545 000004B8 [A201000000000000]  <1>     dq .stdinReadEcho       ;AH = 01H, CHAR IO
   546 000004C0 [1702000000000000]  <1>     dq .stdoutWrite         ;AH = 02H, CHAR IO
   547 000004C8 [5102000000000000]  <1>     dq .stdauxRead          ;AH = 03H, CHAR IO
   548 000004D0 [5102000000000000]  <1>     dq .stdauxWrite         ;AH = 04H, CHAR IO
   549 000004D8 [5102000000000000]  <1>     dq .stdprnWrite         ;AH = 05H, CHAR IO
   550 000004E0 [5102000000000000]  <1>     dq .directCONIO         ;AH = 06H, CHAR IO
   551 000004E8 [5102000000000000]  <1>     dq .waitDirectInNoEcho  ;AH = 07H, CHAR IO
   552 000004F0 [8B02000000000000]  <1>     dq .waitStdinNoEcho     ;AH = 08H, CHAR IO
   553 000004F8 [8C02000000000000]  <1>     dq .printString         ;AH = 09H, CHAR IO
   554 00000500 [CE02000000000000]  <1>     dq .buffStdinInput      ;AH = 0AH, CHAR IO
   555 00000508 [CE02000000000000]  <1>     dq .checkStdinStatus    ;AH = 0BH, CHAR IO
   556 00000510 [CE02000000000000]  <1>     dq .clearbuffDoFunc     ;AH = 0CH, CHAR IO
   557 00000518 [CE02000000000000]  <1>     dq .diskReset           ;AH = 0DH, DISK MANAGEMENT
   558 00000520 [CE02000000000000]  <1>     dq .selectDisk          ;AH = 0EH, DISK MANAGEMENT
   559 00000528 [CE02000000000000]  <1>     dq .openFileFCB         ;AH = 0FH, FILE OPERATION       FCB
   560 00000530 [CE02000000000000]  <1>     dq .closeFileFCB        ;AH = 10H, FILE OPERATION       FCB
   561 00000538 [CE02000000000000]  <1>     dq .findFirstFileFCB    ;AH = 11H, FILE OPERATION       FCB
   562 00000540 [CE02000000000000]  <1>     dq .findNextFileFCB     ;AH = 12H, FILE OPERATION       FCB
   563 00000548 [CE02000000000000]  <1>     dq .deleteFileFCB       ;AH = 13H, FILE OPERATION       FCB
   564 00000550 [CE02000000000000]  <1>     dq .sequentialReadFCB   ;AH = 14H, RECORD OPERATION     FCB
   565 00000558 [CE02000000000000]  <1>     dq .sequentialWriteFCB  ;AH = 15H, RECORD OPERTAION     FCB
   566 00000560 [CE02000000000000]  <1>     dq .createFileFCB       ;AH = 16H, FILE OPERATION       FCB
   567 00000568 [CE02000000000000]  <1>     dq .renameFileFCB       ;AH = 17H, FILE OPERATION       FCB
   568 00000570 [AF04000000000000]  <1>     dq .return              ;AH = 18H, RESERVED
   569 00000578 [CE02000000000000]  <1>     dq .getCurrentDisk      ;AH = 19H, DISK MANAGEMENT
   570 00000580 [D502000000000000]  <1>     dq .setDTA              ;AH = 1AH, RECORD OPERATION     F/H
   571 00000588 [E802000000000000]  <1>     dq .FATinfoDefault      ;AH = 1BH, DISK MANAGEMENT
   572 00000590 [E802000000000000]  <1>     dq .FatinfoDevice       ;AH = 1CH, DISK MANAGEMENT
   573 00000598 [AF04000000000000]  <1>     dq .return              ;AH = 1DH, RESERVED
   574 000005A0 [AF04000000000000]  <1>     dq .return              ;AH = 1EH, RESERVED
   575 000005A8 [E802000000000000]  <1>     dq .getCurrentDPBptr    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
   576 000005B0 [AF04000000000000]  <1>     dq .return              ;AH = 20H, RESERVED
   577 000005B8 [E802000000000000]  <1>     dq .randomReadFCB       ;AH = 21H, RECORD OPERATION     FCB
   578 000005C0 [E802000000000000]  <1>     dq .randomWriteFCB      ;AH = 22H, RECORD OPERATION     FCB
   579 000005C8 [E802000000000000]  <1>     dq .getFileSizeFCB      ;AH = 23H, FILE OPERATION       FCB
   580 000005D0 [E802000000000000]  <1>     dq .setRelRecordFCB     ;AH = 24H, RECORD OPERATION     FCB
   581 000005D8 [E802000000000000]  <1>     dq .setIntVector        ;AH = 25H, MISC. SYS. FUNCTION
   582 000005E0 [1303000000000000]  <1>     dq .createNewPSP        ;AH = 26H, PROCESS MANAGEMENT
   583 000005E8 [1303000000000000]  <1>     dq .randBlockReadFCB    ;AH = 27H, RECORD OPERATION     FCB
   584 000005F0 [1303000000000000]  <1>     dq .randBlockWriteFCB   ;AH = 28H, RECORD OPERATION     FCB
   585 000005F8 [1303000000000000]  <1>     dq .parseFilenameFCB    ;AH = 29H, FILE OPERATION       FCB
   586 00000600 [1303000000000000]  <1>     dq .getDate             ;AH = 2AH, TIME AND DATE
   587 00000608 [1303000000000000]  <1>     dq .setDate             ;AH = 2BH, TIME AND DATE
   588 00000610 [1303000000000000]  <1>     dq .getTime             ;AH = 2CH, TIME AND DATE
   589 00000618 [1303000000000000]  <1>     dq .setTime             ;AH = 2DH, TIME AND DATE
   590 00000620 [1303000000000000]  <1>     dq .setResetVerify      ;AH = 2EH, DISK MANAGEMENT
   591 00000628 [1A03000000000000]  <1>     dq .getDTA              ;AH = 2FH, RECORD OPERATION     F/H
   592 00000630 [2D03000000000000]  <1>     dq .getDOSversion       ;AH = 30H, MISC. SYS. FUNCTION
   593 00000638 [4403000000000000]  <1>     dq .terminateStayRes    ;AH = 31H, PROCESS MANAGEMENT
   594 00000640 [4403000000000000]  <1>     dq .getDeviceDPBptr     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
   595 00000648 [4403000000000000]  <1>     dq .ctrlBreakCheck      ;AH = 33H, MISC. SYS. FUNCTION
   596 00000650 [5503000000000000]  <1>     dq .getInDOSflagPtr     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
   597 00000658 [6803000000000000]  <1>     dq .getIntVector        ;AH = 35H, MISC. SYS. FUNCTION
   598 00000660 [7F03000000000000]  <1>     dq .getDiskFreeSpace    ;AH = 36H, DISK MANAGEMENT
   599 00000668 [7F03000000000000]  <1>     dq .getsetSwitchChar    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
   600 00000670 [7F03000000000000]  <1>     dq .getsetCountryInfo   ;AH = 38H, MISC. SYS. FUNCTION
   601 00000678 [7F03000000000000]  <1>     dq .makeDIR             ;AH = 39H, DIRECTORY OPERATION
   602 00000680 [7F03000000000000]  <1>     dq .removeDIR           ;AH = 3AH, DIRECTORY OPERATION
   603 00000688 [7F03000000000000]  <1>     dq .changeCurrentDIR    ;AH = 3BH, DIRECTORY OPERATION
   604 00000690 [7F03000000000000]  <1>     dq .createFileHdl       ;AH = 3CH, FILE OPERATION       HANDLE
   605 00000698 [7F03000000000000]  <1>     dq .openFileHdl         ;AH = 3DH, FILE OPERATION       HANDLE
   606 000006A0 [7F03000000000000]  <1>     dq .closeFileHdl        ;AH = 3EH, FILE OPERATION       HANDLE
   607 000006A8 [7F03000000000000]  <1>     dq .readFileHdl         ;AH = 3FH, RECORD OPERATION     HANDLE
   608 000006B0 [7F03000000000000]  <1>     dq .writeFileHdl        ;AH = 40H, RECORD OPERATION     HANDLE
   609 000006B8 [7F03000000000000]  <1>     dq .deleteFileHdl       ;AH = 41H, FILE OPERATION       HANDLE
   610 000006C0 [7F03000000000000]  <1>     dq .movFileReadPtr      ;AH = 42H, RECORD OPERATION     HANDLE
   611 000006C8 [7F03000000000000]  <1>     dq .changeFileModeHdl   ;AH = 43H, FILE OPERATION       HANDLE
   612 000006D0 [7F03000000000000]  <1>     dq .ioctrl              ;AH = 44H, MISC. SYS. FUNCTION
   613 000006D8 [7F03000000000000]  <1>     dq .duplicateHandle     ;AH = 45H, FILE OPERATION       HANDLE
   614 000006E0 [7F03000000000000]  <1>     dq .forceDuplicateHdl   ;AH = 46H, FILE OPERATION       HANDLE
   615 000006E8 [7F03000000000000]  <1>     dq .getCurrentDIR       ;AH = 47H, DIRECTORY OPERATION
   616 000006F0 [7F03000000000000]  <1>     dq .allocateMemory      ;AH = 48H, MEMORY MANAGEMENT
   617 000006F8 [7F03000000000000]  <1>     dq .freeMemory          ;AH = 49H, MEMORY MANAGEMENT
   618 00000700 [7F03000000000000]  <1>     dq .reallocMemory       ;AH = 4AH, MEMORY MANAGEMENT
   619 00000708 [7F03000000000000]  <1>     dq .loadExecChild       ;AH = 4BH, PROCESS MANAGEMENT
   620 00000710 [7F03000000000000]  <1>     dq .terminateClean      ;AH = 4CH, PROCESS MANAGEMENT
   621 00000718 [7F03000000000000]  <1>     dq .getRetCodeChild     ;AH = 4DH, PROCESS MANAGEMENT
   622 00000720 [7F03000000000000]  <1>     dq .findFirstFileHdl    ;AH = 4EH, FILE OPERATION       HANDLE
   623 00000728 [7F03000000000000]  <1>     dq .findNextFileHdl     ;AH = 4FH, FILE OPERATION       HANDLE
   624 00000730 [7F03000000000000]  <1>     dq .setCurrProcessID    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   625 00000738 [8703000000000000]  <1>     dq .getCurrProcessID    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   626 00000740 [9A03000000000000]  <1>     dq .getSysVarsPtr       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   627 00000748 [AD03000000000000]  <1>     dq .createDPB           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   628 00000750 [9504000000000000]  <1>     dq .getVerifySetting    ;AH = 54H, DISK MANAGEMENT
   629 00000758 [9C04000000000000]  <1>     dq .createPSP           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   630 00000760 [9C04000000000000]  <1>     dq .renameFile          ;AH = 56H, FILE OPERATION       HANDLE
   631 00000768 [9C04000000000000]  <1>     dq .getSetFileDateTime  ;AH = 57H, FILE OPERATION       HANDLE
   632 00000770 [9C04000000000000]  <1>     dq .getsetMallocStrat   ;AH = 58H, MEMORY MANAGEMENT
   633 00000778 [9C04000000000000]  <1>     dq .getExtendedError    ;AH = 59H, MISC. SYS. FUNCTION
   634 00000780 [9C04000000000000]  <1>     dq .createUniqueFile    ;AH = 5AH, FILE OPERATION       HANDLE
   635 00000788 [9C04000000000000]  <1>     dq .createNewFile       ;AH = 5BH, FILE OPERATION       HANDLE
   636 00000790 [9C04000000000000]  <1>     dq .lockUnlockFile      ;AH = 5CH, RECORD OPERATION     HANDLE
   637 00000798 [9C04000000000000]  <1>     dq .getCritErrorInfo    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   638 000007A0 [9C04000000000000]  <1>     dq .networkServices     ;AH = 5EH, RESERVED NETWORK FUNCTION
   639 000007A8 [9C04000000000000]  <1>     dq .networkRedirection  ;AH = 5FH, RESERVED NETWORK FUNCTION
   640 000007B0 [9C04000000000000]  <1>     dq .trueName            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   641 000007B8 [AF04000000000000]  <1>     dq .return              ;AH = 61H, RESERVED
   642 000007C0 [9C04000000000000]  <1>     dq .getPSPaddr          ;AH = 62H, PROCESS MANAGEMENT
   643 000007C8 [AF04000000000000]  <1>     dq .return              ;AH = 63H, RESERVED
   644 000007D0 [AF04000000000000]  <1>     dq .setDriverLookahead  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   645 000007D8 [AF04000000000000]  <1>     dq .getExtLocalInfo     ;AH = 65H, MISC. SYS. FUNCTION
   646 000007E0 [AF04000000000000]  <1>     dq .getsetGlobalCP      ;AH = 66H, MISC. SYS. FUNCTION
   647 000007E8 [AF04000000000000]  <1>     dq .setHandleCount      ;AH = 67H, FILE OPERAITON       F/H
   648 000007F0 [AF04000000000000]  <1>     dq .commitFile          ;AH = 68H, FILE OPERATION       HANDLE
   649 000007F8 [AF04000000000000]  <1>     dq .getsetDiskSerial    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   650                              <1> dispatchTableL  equ $ - .dispatchTable 
   651                              <1> 
   652                              <1> terminateHandler:   ;Int 42h
   653                              <1> ctrlCHandler:       ;Int 43h
   654                              <1> critErrorHandler:   ;Int 44h
   655                              <1> ;User Stack in usage here, must be swapped to before this is called
   656                              <1> ;Entered with:  
   657                              <1> ;               AH = Critical Error Bitfield
   658                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
   659                              <1> ;               Bit 6 - Reserved
   660                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
   661                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
   662                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
   663                              <1> ;               Bits [2-1] = Affected Disk Error
   664                              <1> ;                     0 0   DOS area
   665                              <1> ;                     0 1   FAT area
   666                              <1> ;                     1 0   Directory area
   667                              <1> ;                     1 1   Data area
   668                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   669                              <1> ;               AL  = Failing drive number if AH[7] = 0
   670                              <1> ;               DIL = Error code for errorMsg
   671                              <1> ;               RSI = EA of Device Header for which device the error occured
   672                              <1> ;Return:
   673                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
   674                              <1> ;                  = 1 - Retry the Operation    (Retry)
   675                              <1> ;                  = 2 - Terminate the Program  (Abort)
   676                              <1> ;                  = 3 - Fail the DOS call      (Fail)
   677 00000800 53                  <1>     push rbx
   678 00000801 51                  <1>     push rcx
   679 00000802 52                  <1>     push rdx
   680 00000803 57                  <1>     push rdi
   681 00000804 56                  <1>     push rsi
   682 00000805 FC                  <1>     cld         ;Make String ops go forward
   683                              <1> 
   684 00000806 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
   685 00000809 488D155E020000      <1>     lea rdx, qword [.crlf]
   686 00000810 B409                <1>     mov ah, 09h ;Print String
   687 00000812 CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
   688                              <1> 
   689 00000814 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
   690 0000081A B90C000000          <1>     mov ecx, 0Ch
   691 0000081F 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
   692 00000821 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
   693 00000824 480FB7FF            <1>     movzx rdi, di
   694 00000828 4889FA              <1>     mov rdx, rdi    ;Copy error code
   695 0000082B 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
   696 0000082F 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
   697 00000832 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
   698 00000835 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
   699 0000083C 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
   700 00000840 B409                <1>     mov ah, 09h ;Print String
   701 00000842 CD41                <1>     int 41h     ;Call DOS to print first part of message
   702                              <1> 
   703 00000844 488D1505020000      <1>     lea rdx, qword [.readmsg]
   704 0000084B 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
   705 00000852 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
   706 00000855 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
   707 00000859 B409                <1>     mov ah, 09h ;Print String
   708 0000085B CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
   709                              <1> 
   710 0000085D F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
   711 00000860 0F85DF000000        <1>     jnz .charError
   712                              <1> ;Disk error continues here
   713 00000866 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
   714 0000086D B409                <1>     mov ah, 09h
   715 0000086F CD41                <1>     int 41h
   716 00000871 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
   717 00000873 80C241              <1>     add dl, "A" ;Add ASCII code
   718 00000876 B402                <1>     mov ah, 02h ;Print char in dl
   719 00000878 CD41                <1>     int 41h
   720                              <1> .userInput:
   721 0000087A 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
   722 00000881 B409                <1>     mov ah, 09h
   723 00000883 CD41                <1>     int 41h
   724                              <1> ;Abort, Retry, Ignore, Fail is word order
   725                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   726                              <1> .userAbort:
   727                              <1> ;Abort is always an option
   728 00000885 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
   729 0000088C B409                <1>     mov ah, 09h
   730 0000088E CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
   731                              <1> .userRetry:
   732 00000890 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   733 00000893 7416                <1>     jz .userIgnore    ;If clear, dont print message
   734 00000895 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
   735 0000089C B409                <1>     mov ah, 09h
   736 0000089E CD41                <1>     int 41h
   737 000008A0 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
   738 000008A7 B409                <1>     mov ah, 09h
   739 000008A9 CD41                <1>     int 41h
   740                              <1> .userIgnore:
   741 000008AB F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   742 000008AE 7416                <1>     jz .userFail
   743 000008B0 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
   744 000008B7 B409                <1>     mov ah, 09h
   745 000008B9 CD41                <1>     int 41h
   746 000008BB 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
   747 000008C2 B409                <1>     mov ah, 09h
   748 000008C4 CD41                <1>     int 41h
   749                              <1> .userFail:
   750 000008C6 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   751 000008C9 7416                <1>     jz .userMsgEnd
   752 000008CB 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
   753 000008D2 B409                <1>     mov ah, 09h
   754 000008D4 CD41                <1>     int 41h
   755 000008D6 488D15A7010000      <1>     lea rdx, qword [.failmsg]
   756 000008DD B409                <1>     mov ah, 09h
   757 000008DF CD41                <1>     int 41h
   758                              <1> .userMsgEnd:
   759 000008E1 488D15A4010000      <1>     lea rdx, qword [.endMsg]
   760 000008E8 B409                <1>     mov ah, 09h
   761 000008EA CD41                <1>     int 41h
   762                              <1> ;Get user input now 
   763 000008EC 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   764 000008EE 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   765 000008F5 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   766 000008F7 CD41                <1>     int 41h ;Get char in al
   767 000008F9 3C61                <1>     cmp al, "a" ;Chack if lowercase
   768 000008FB 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   769 000008FD 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   770                              <1> .uip1:
   771 000008FF AE                  <1>     scasb   ;Compare char to list, offset gives return code
   772 00000900 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   773 00000902 FFC1                <1>     inc ecx
   774 00000904 81F904000000        <1>     cmp ecx, 4
   775 0000090A 75F3                <1>     jne .uip1
   776 0000090C E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   777                              <1> .validInput:
   778 00000911 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   779                              <1> ;Now check if the input is permitted
   780 00000913 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   781 00000915 7427                <1>     je .cehExit
   782 00000917 84C0                <1>     test al, al ;Check if 0 => Ignore
   783 00000919 740F                <1>     je .viIgnore
   784 0000091B 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   785 0000091D 7416                <1>     je .viRetry
   786                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   787 0000091F F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   788 00000922 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   789 00000928 EB14                <1>     jmp short .cehExit
   790                              <1> .viIgnore:
   791 0000092A F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   792 0000092D 0F8447FFFFFF        <1>     jz .userInput
   793 00000933 EB09                <1>     jmp short .cehExit
   794                              <1> .viRetry:
   795 00000935 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   796 00000938 0F843CFFFFFF        <1>     jz .userInput
   797                              <1> .cehExit:
   798 0000093E 5E                  <1>     pop rsi
   799 0000093F 5F                  <1>     pop rdi
   800 00000940 5A                  <1>     pop rdx
   801 00000941 59                  <1>     pop rcx
   802 00000942 5B                  <1>     pop rbx
   803 00000943 48CF                <1>     iretq
   804                              <1> .charError:
   805 00000945 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   806 0000094A 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   807                              <1> .ce1:
   808 00000951 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   809 00000952 88C2                <1>     mov dl, al  ;Move char into dl
   810 00000954 B402                <1>     mov ah, 02h
   811 00000956 CD41                <1>     int 41h ;Print char
   812 00000958 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   813 0000095A E91BFFFFFF          <1>     jmp .userInput
   814                              <1> 
   815                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   816 0000095F 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   816 00000968 746563742024202020  <1>
   817 00000971 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   817 0000097A 6E6974202420202020  <1>
   818 00000983 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   818 0000098C 202420202020202020  <1>
   819 00000995 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   819 0000099E 6F6D6D616E64202420  <1>
   820 000009A7 446174612024202020- <1>             db "Data $            "       ;Error 4
   820 000009B0 202020202020202020  <1>
   821 000009B9 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   821 000009C2 737420242020202020  <1>
   822 000009CB 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   822 000009D4 202020202020202020  <1>
   823 000009DD 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   823 000009E6 656469612024202020  <1>
   824 000009EF 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   824 000009F8 7420466F756E642024  <1>
   825 00000A01 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   825 00000A0A 706572202420202020  <1>
   826 00000A13 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   826 00000A1C 6C7420242020202020  <1>
   827 00000A25 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   827 00000A2E 742024202020202020  <1>
   828 00000A37 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   828 00000A40 61696C757265202420  <1>
   829                              <1> 
   830 00000A49 64726976652024      <1> .drive      db "drive $"
   831 00000A50 6572726F7220726561- <1> .readmsg    db "error reading $"
   831 00000A59 64696E672024        <1>
   832 00000A5F 6572726F7220777269- <1> .writemsg   db "error writing $"
   832 00000A68 74696E672024        <1>
   833 00000A6E 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   834 00000A71 41626F727424        <1> .abortmsg   db "Abort$" 
   835 00000A77 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   836 00000A7E 526574727924        <1> .retrymsg   db "Retry$"
   837 00000A84 4661696C24          <1> .failmsg    db "Fail$"
   838 00000A89 2C2024              <1> .betweenMsg db ", $"
   839 00000A8C 3F2024              <1> .endMsg     db "? $"
   840 00000A8F 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   841                              <1> absDiskRead:        ;Int 45h
   842                              <1> ;al = Drive number
   843                              <1> ;rbx = Memory Buffer address
   844                              <1> ;ecx = Number of sectors to read (max 255 for now)
   845                              <1> ;rdx = Start LBA to read from
   846 00000A93 480FB6C0            <1>     movzx rax, al   ;Zero extend DOS drive number 
   847 00000A97 8A80[87150000]      <1>     mov al, byte [msdDriver.msdBIOSmap + rax] ;Get translated BIOS num into al
   848 00000A9D 4891                <1>     xchg rax, rcx
   849 00000A9F 4887CA              <1>     xchg rcx, rdx
   850 00000AA2 B482                <1>     mov ah, 82h
   851 00000AA4 CD33                <1>     int 33h
   852 00000AA6 48CF                <1>     iretq
   853                              <1> absDiskWrite:       ;Int 46h
   854 00000AA8 480FB6C0            <1>     movzx rax, al   ;Zero extend DOS drive number 
   855 00000AAC 8A80[87150000]      <1>     mov al, byte [msdDriver.msdBIOSmap + rax] ;Get translated BIOS num into al
   856 00000AB2 4891                <1>     xchg rax, rcx
   857 00000AB4 4887CA              <1>     xchg rcx, rdx
   858 00000AB7 B483                <1>     mov ah, 83h
   859 00000AB9 CD33                <1>     int 33h
   860 00000ABB 48CF                <1>     iretq
   861                              <1> terminateResident:  ;Int 47h
   862                              <1> inDosHandler:       ;Int 48h
   863                              <1> ;Called when DOS idle
   864 00000ABD 48CF                <1>     iretq
   865                              <1> fastOutput:         ;Int 49h
   866                              <1> ;Called with char to transfer in al
   867 00000ABF 50                  <1>     push rax
   868 00000AC0 B40E                <1>     mov ah, 0Eh
   869 00000AC2 CD30                <1>     int 30h
   870 00000AC4 58                  <1>     pop rax
   871 00000AC5 48CF                <1>     iretq
   872                              <1> passCommand:        ;Int 4Eh, hooked by COMMAND.COM
   873 00000AC7 48CF                <1>     iretq
   874                              <1> multiplex:          ;Int 4Fh, kept as iretq for now
   875 00000AC9 48CF                <1>     iretq
    10                                  %include "dosDrivers.asm"
    11                              <1> ;-----------------------------------:
    12                              <1> ;          Driver routines          :
    13                              <1> ;-----------------------------------:
    14                              <1> drivers:
    15                              <1> conHdr:
    16 00000ACB [ED0A000000000000]  <1>     dq auxHdr
    17 00000AD3 1308                <1>     dw 0813h
    18 00000AD5 [6B0C000000000000]  <1>     dq commonStrat
    19 00000ADD [7A0C000000000000]  <1>     dq conDriver
    20 00000AE5 434F4E2020202020    <1>     db "CON     "
    21                              <1> auxHdr:
    22 00000AED [0F0B000000000000]  <1>     dq prnHdr
    23 00000AF5 0080                <1>     dw 08000h
    24 00000AF7 [6B0C000000000000]  <1>     dq commonStrat
    25 00000AFF [3F0F000000000000]  <1>     dq com1Intr
    26 00000B07 4155582020202020    <1>     db "AUX     "
    27                              <1> prnHdr:
    28 00000B0F [310B000000000000]  <1>     dq clkHdr
    29 00000B17 40A0                <1>     dw 0A040h
    30 00000B19 [730C000000000000]  <1>     dq nulStrat
    31 00000B21 [790C000000000000]  <1>     dq nulIntr
    32 00000B29 50524E2020202020    <1>     db "PRN     "
    33                              <1> clkHdr:
    34 00000B31 [530B000000000000]  <1>     dq msdHdr
    35 00000B39 0880                <1>     dw 08008h
    36 00000B3B [6B0C000000000000]  <1>     dq commonStrat
    37 00000B43 [B20D000000000000]  <1>     dq clkDriver
    38 00000B4B 434C4F434B242020    <1>     db "CLOCK$  "
    39                              <1> msdHdr:
    40 00000B53 [750B000000000000]  <1>     dq com1Hdr
    41 00000B5B 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    42 00000B5D [6B0C000000000000]  <1>     dq commonStrat
    43 00000B65 [E410000000000000]  <1>     dq msdDriver
    44 00000B6D 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    45                              <1> com1Hdr:
    46 00000B75 [970B000000000000]  <1>     dq com2Hdr
    47 00000B7D 0080                <1>     dw 08000h
    48 00000B7F [6B0C000000000000]  <1>     dq commonStrat
    49 00000B87 [3F0F000000000000]  <1>     dq com1Intr
    50 00000B8F 434F4D3120202020    <1>     db "COM1    "
    51                              <1> com2Hdr:
    52 00000B97 [B90B000000000000]  <1>     dq com3Hdr
    53 00000B9F 0080                <1>     dw 08000h
    54 00000BA1 [6B0C000000000000]  <1>     dq commonStrat
    55 00000BA9 [480F000000000000]  <1>     dq com2Intr
    56 00000BB1 434F4D3220202020    <1>     db "COM2    "
    57                              <1> com3Hdr:
    58 00000BB9 [DB0B000000000000]  <1>     dq com4Hdr
    59 00000BC1 0080                <1>     dw 08000h
    60 00000BC3 [6B0C000000000000]  <1>     dq commonStrat
    61 00000BCB [510F000000000000]  <1>     dq com3Intr
    62 00000BD3 434F4D3320202020    <1>     db "COM3    "
    63                              <1> com4Hdr:
    64 00000BDB [FD0B000000000000]  <1>     dq lpt1Hdr
    65 00000BE3 0080                <1>     dw 08000h
    66 00000BE5 [6B0C000000000000]  <1>     dq commonStrat
    67 00000BED [5A0F000000000000]  <1>     dq com4Intr
    68 00000BF5 434F4D3420202020    <1>     db "COM4    "
    69                              <1> lpt1Hdr:
    70 00000BFD [1F0C000000000000]  <1>     dq lpt2Hdr
    71 00000C05 40A0                <1>     dw 0A040h
    72 00000C07 [730C000000000000]  <1>     dq nulStrat
    73 00000C0F [790C000000000000]  <1>     dq nulIntr
    74 00000C17 4C50543120202020    <1>     db "LPT1    "
    75                              <1> lpt2Hdr:
    76 00000C1F [410C000000000000]  <1>     dq lpt3Hdr
    77 00000C27 40A0                <1>     dw 0A040h
    78 00000C29 [730C000000000000]  <1>     dq nulStrat
    79 00000C31 [790C000000000000]  <1>     dq nulIntr
    80 00000C39 4C50543220202020    <1>     db "LPT2    "
    81                              <1> lpt3Hdr:
    82 00000C41 FFFFFFFFFFFFFFFF    <1>     dq -1
    83 00000C49 40A0                <1>     dw 0A040h
    84 00000C4B [730C000000000000]  <1>     dq nulStrat
    85 00000C53 [790C000000000000]  <1>     dq nulIntr
    86 00000C5B 4C50543320202020    <1>     dq "LPT3    "
    87 00000C63 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    88                              <1> commonStrat:
    89                              <1> ;DOS calls this function with rbx=Ptr to request header
    90 00000C6B 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    91 00000C72 C3                  <1>     ret
    92                              <1> nulStrat:
    93 00000C73 66C743030001        <1>     mov word [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
    94                              <1> nulIntr:
    95 00000C79 C3                  <1>     ret
    96                              <1> 
    97                              <1> conDriver:
    98 00000C7A 50                  <1>     push rax
    99 00000C7B 53                  <1>     push rbx
   100 00000C7C 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
   101 00000C83 B003                <1>     mov al, 03h ;Unknown Command
   102 00000C85 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   103 00000C89 7735                <1>     ja .conWriteErrorCode ;If yes, error!
   104                              <1> 
   105 00000C8B 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   106 00000C8E 3C04                <1>     cmp al, 4
   107 00000C90 743D                <1>     jz .conRead
   108 00000C92 3C05                <1>     cmp al, 5
   109 00000C94 747F                <1>     jz .conNondestructiveRead
   110 00000C96 3C06                <1>     cmp al, 6
   111 00000C98 0F84A8000000        <1>     jz .conInputStatus
   112 00000C9E 3C07                <1>     cmp al, 7
   113 00000CA0 0F84B0000000        <1>     jz .conFlushInputBuffers
   114 00000CA6 3C08                <1>     cmp al, 8
   115 00000CA8 0F84CA000000        <1>     jz .conWrite
   116 00000CAE 3C09                <1>     cmp al, 9
   117 00000CB0 0F84C2000000        <1>     jz .conWrite
   118 00000CB6 3C0A                <1>     cmp al, 0Ah
   119 00000CB8 0F84E3000000        <1>     jz .conOutputStatus
   120 00000CBE EB06                <1>     jmp short .conExit  ;All other valid functions return done
   121                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
   122 00000CC0 B480                <1>     mov ah, 80h ;Set error bit
   123 00000CC2 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   124                              <1> .conExit:
   125 00000CC6 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   126 00000CCC 5B                  <1>     pop rbx
   127 00000CCD 58                  <1>     pop rax
   128 00000CCE C3                  <1>     ret
   129                              <1> .conRead:    ;Function 4
   130 00000CCF B005                <1>     mov al, 05h ;Bad request structure length?
   131 00000CD1 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   132 00000CD4 75EA                <1>     jne .conWriteErrorCode
   133                              <1> 
   134 00000CD6 57                  <1>     push rdi
   135 00000CD7 51                  <1>     push rcx
   136 00000CD8 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   137 00000CDC 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   138                              <1> .cre1:
   139 00000CDE 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   140 00000CE1 741C                <1>     je .cre2
   141 00000CE3 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
   142 00000CEA 751A                <1>     jnz .cre3   ;No, get the buffer value
   143 00000CEC 31C0                <1>     xor eax, eax
   144 00000CEE CD36                <1>     int 36h
   145                              <1> .cre11:
   146 00000CF0 AA                  <1>     stosb
   147 00000CF1 84C0                <1>     test al, al ;Was the ascii code 0?
   148 00000CF3 7506                <1>     jnz .cre12  ;No, skip storing scancode
   149 00000CF5 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
   150                              <1> .cre12:
   151 00000CFB FFC1                <1>     inc ecx ;Inc chars stored in buffer
   152 00000CFD EBDF                <1>     jmp short .cre1
   153                              <1> .cre2:
   154 00000CFF 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   155 00000D02 59                  <1>     pop rcx
   156 00000D03 5F                  <1>     pop rdi
   157 00000D04 EBC0                <1>     jmp short .conExit
   158                              <1> .cre3:
   159 00000D06 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   160 00000D0C C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   161 00000D13 EBDB                <1>     jmp short .cre11
   162                              <1> 
   163                              <1> .conNondestructiveRead:  ;Function 5
   164 00000D15 B005                <1>     mov al, 05h ;Bad request structure length?
   165 00000D17 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   166 00000D1A 75A4                <1>     jne .conWriteErrorCode
   167 00000D1C 803D8E00000000      <1>     cmp byte [.conBuf], 0
   168 00000D23 7519                <1>     jnz .cnr2
   169 00000D25 B401                <1>     mov ah, 01h     ;Get key if exists
   170 00000D27 CD36                <1>     int 36h
   171 00000D29 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   172                              <1>     ;Keystroke available
   173                              <1> .cnr0:
   174 00000D2B 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Move char in al
   175 00000D2E E993FFFFFF          <1>     jmp .conExit
   176                              <1> .cnr1: ;No keystroke available
   177 00000D33 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 0200h   ;Set busy bit
   178 00000D39 E988FFFFFF          <1>     jmp .conExit
   179                              <1> .cnr2:
   180 00000D3E 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   181 00000D44 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   182                              <1> 
   183                              <1> .conInputStatus:         ;Function 6
   184 00000D46 B005                <1>     mov al, 05h ;Bad request structure length?
   185 00000D48 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   186 00000D4B 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   187 00000D51 E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   188                              <1> 
   189                              <1> .conFlushInputBuffers:   ;Function 7
   190 00000D56 B005                <1>     mov al, 05h ;Bad request structure length?
   191 00000D58 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   192 00000D5B 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   193 00000D61 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   194                              <1> .cfib0:
   195 00000D68 B401                <1>     mov ah, 01      ;Get buffer status
   196 00000D6A CD36                <1>     int 36h
   197 00000D6C 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   198 00000D72 30E4                <1>     xor ah, ah
   199 00000D74 CD36                <1>     int 36h ;Read key to flush from buffer
   200 00000D76 EBF0                <1>     jmp short .cfib0
   201                              <1> 
   202                              <1> .conWrite:   ;Function 8 and 9
   203 00000D78 B005                <1>     mov al, 05h ;Bad request structure length?
   204 00000D7A 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   205 00000D7D 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   206                              <1> 
   207 00000D83 56                  <1>     push rsi
   208 00000D84 51                  <1>     push rcx
   209 00000D85 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   210 00000D89 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   211                              <1> .cw1: 
   212 00000D8B 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   213 00000D8E 7407                <1>     je .cw2
   214 00000D90 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   215 00000D91 CD49                <1>     int 49h ;Fast print char
   216 00000D93 FFC1                <1>     inc ecx
   217 00000D95 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   218                              <1> .cw2:
   219 00000D97 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   220 00000D9A 59                  <1>     pop rcx
   221 00000D9B 5E                  <1>     pop rsi
   222 00000D9C E925FFFFFF          <1>     jmp .conExit
   223                              <1> .conOutputStatus:   ;Function 0Ah
   224 00000DA1 B005                <1>     mov al, 05h ;Bad request structure length?
   225 00000DA3 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   226 00000DA6 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   227 00000DAC E915FFFFFF          <1>     jmp .conExit
   228                              <1> 
   229 00000DB1 00                  <1> .conBuf db 0    ;Single byte buffer
   230                              <1> clkDriver:
   231 00000DB2 50                  <1>     push rax
   232 00000DB3 53                  <1>     push rbx
   233 00000DB4 51                  <1>     push rcx
   234 00000DB5 52                  <1>     push rdx
   235 00000DB6 56                  <1>     push rsi
   236 00000DB7 55                  <1>     push rbp
   237 00000DB8 488B1DA4FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   238 00000DBF B003                <1>     mov al, 03h ;Unknown Command
   239 00000DC1 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   240 00000DC5 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   241                              <1> 
   242 00000DC7 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   243 00000DCA 3C04                <1>     cmp al, 04h
   244 00000DCC 7437                <1>     jz .clkRead
   245 00000DCE 3C06                <1>     cmp al, 06h
   246 00000DD0 0F8494000000        <1>     jz .clkInputStatus
   247 00000DD6 3C07                <1>     cmp al, 07h
   248 00000DD8 0F8498000000        <1>     jz .clkFlushInputBuffers
   249 00000DDE 3C08                <1>     cmp al, 08h
   250 00000DE0 0F84A0000000        <1>     jz .clkWrite
   251 00000DE6 3C09                <1>     cmp al, 09h
   252 00000DE8 0F8498000000        <1>     jz .clkWrite
   253 00000DEE EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   254                              <1> .clkNotFunctioning:
   255 00000DF0 B002                <1>     mov al, 02h ;Device not ready error
   256                              <1> .clkWriteErrorCode:
   257 00000DF2 B480                <1>     mov ah, 80h ;Set error bit
   258 00000DF4 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   259                              <1> .clkExit:
   260 00000DF8 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   261 00000DFE 5D                  <1>     pop rbp
   262 00000DFF 5E                  <1>     pop rsi
   263 00000E00 5A                  <1>     pop rdx
   264 00000E01 59                  <1>     pop rcx
   265 00000E02 5B                  <1>     pop rbx
   266 00000E03 58                  <1>     pop rax
   267 00000E04 C3                  <1>     ret
   268                              <1> 
   269                              <1> .clkRead:           ;Function 4
   270 00000E05 B005                <1>     mov al, 05h ;Bad request structure length?
   271 00000E07 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   272 00000E0A 75E6                <1>     jne .clkWriteErrorCode
   273                              <1> 
   274 00000E0C 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   275 00000E0F 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   276 00000E13 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   277 00000E1A 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   278 00000E1E 30E4                <1>     xor ah, ah
   279 00000E20 CD3A                <1>     int 3Ah         ;Read the system timer
   280 00000E22 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   281 00000E24 740D                <1>     jz .clkr1       ;Nope, now just time 
   282 00000E26 30E4                <1>     xor ah, ah
   283                              <1>     ;This works as al should keep count of the # of days passed since last read
   284 00000E28 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   285 00000E2C 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   286                              <1> .clkr1:
   287 00000E33 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   288 00000E36 0FB7D2              <1>     movzx edx, dx
   289 00000E39 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   290 00000E3B 89D0                <1>     mov eax, edx
   291 00000E3D 31D2                <1>     xor edx, edx
   292 00000E3F 89D8                <1>     mov eax, ebx
   293 00000E41 B944040000          <1>     mov ecx, 1092   
   294 00000E46 F7F1                <1>     div ecx
   295 00000E48 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   296 00000E4B 89D0                <1>     mov eax, edx    ;Get remainder in eax
   297 00000E4D 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   298 00000E51 31D2                <1>     xor edx, edx
   299 00000E53 B95B000000          <1>     mov ecx, 91 ;5*18.2
   300 00000E58 F7F1                <1>     div ecx
   301 00000E5A 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   302 00000E5D 89D0                <1>     mov eax, edx    ;Get remainder in eax
   303                              <1>     ;lea eax, dword [eax + 4*eax]
   304                              <1>     ;add eax, edx    ;Essentially multiply by 6
   305 00000E5F 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   306 00000E62 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   307 00000E65 E98EFFFFFF          <1>     jmp .clkExit
   308                              <1> 
   309                              <1> .clkInputStatus:    ;Function 6
   310                              <1> ;Always return ready
   311 00000E6A B005                <1>     mov al, 05h ;Bad request structure length?
   312 00000E6C 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   313 00000E6F 7581                <1>     jne .clkWriteErrorCode
   314 00000E71 E982FFFFFF          <1>     jmp .clkExit
   315                              <1> .clkFlushInputBuffers:  ;Function 7
   316                              <1> ;Always return done immediately
   317 00000E76 B005                <1>     mov al, 05h ;Bad request structure length?
   318 00000E78 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   319 00000E7B 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   320 00000E81 E972FFFFFF          <1>     jmp .clkExit
   321                              <1> 
   322                              <1> .clkWrite:          ;Functions 8 and 9
   323 00000E86 B005                <1>     mov al, 05h ;Bad request structure length?
   324 00000E88 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   325 00000E8B 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   326                              <1> 
   327 00000E91 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   328 00000E94 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   329 00000E98 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   330 00000E9C 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   331                              <1> 
   332 00000EA3 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   333 00000EA5 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   334 00000EA9 B105                <1>     mov cl, 5
   335 00000EAB F6F1                <1>     div cl          ;Divide al by 5
   336 00000EAD 30E4                <1>     xor ah, ah      ;Remove the remainder
   337 00000EAF 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   338                              <1> ;Using the decimal part of this formula for the low count
   339                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   340 00000EB1 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   341 00000EB4 B912000000          <1>     mov ecx, 18
   342 00000EB9 F7E1                <1>     mul ecx  
   343 00000EBB 01C3                <1>     add ebx, eax
   344                              <1> 
   345 00000EBD 31D2                <1>     xor edx, edx
   346 00000EBF 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   347 00000EC3 B944040000          <1>     mov ecx, 1092
   348 00000EC8 F7E1                <1>     mul ecx
   349 00000ECA 01C3                <1>     add ebx, eax
   350 00000ECC 89DA                <1>     mov edx, ebx    ;edx now has low count
   351 00000ECE 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   352 00000ED2 B401                <1>     mov ah, 01h     ;Set the system time
   353 00000ED4 CD3A                <1>     int 3Ah
   354                              <1> 
   355 00000ED6 4889F3              <1>     mov rbx, rsi
   356 00000ED9 E91AFFFFFF          <1>     jmp .clkExit
   357                              <1> 
   358                              <1> .clkBCDtoHex:
   359                              <1> ;Converts a BCD value to a Hex byte
   360                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   361 00000EDE 51                  <1>     push rcx
   362 00000EDF 0FB6C0              <1>     movzx eax, al   ;Zero extend
   363 00000EE2 89C1                <1>     mov ecx, eax    ;Save al in ecx
   364 00000EE4 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   365 00000EE9 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   366 00000EEF C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   367                              <1> .cbth0:
   368 00000EF2 050A000000          <1>     add eax, 10
   369 00000EF7 E2F9                <1>     loop .cbth0
   370 00000EF9 59                  <1>     pop rcx
   371 00000EFA C3                  <1>     ret
   372                              <1> 
   373                              <1> .clkHexToBCD:
   374                              <1> ;Converts a Hex byte into two BCD digits
   375                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   376 00000EFB 51                  <1>     push rcx
   377 00000EFC 0FB6C0              <1>     movzx eax, al   ;Zero extend
   378 00000EFF 31C9                <1>     xor ecx, ecx
   379                              <1> .chtb0:
   380 00000F01 3D0A000000          <1>     cmp eax, 10
   381 00000F06 7209                <1>     jb .chtb1
   382 00000F08 2D0A000000          <1>     sub eax, 10
   383 00000F0D FFC1                <1>     inc ecx
   384 00000F0F EBF0                <1>     jmp short .chtb0
   385                              <1> .chtb1:
   386 00000F11 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   387 00000F14 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   388 00000F16 59                  <1>     pop rcx
   389 00000F17 C3                  <1>     ret
   390 00000F18 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   391                              <1> ;When counting the number of days, first compute the number of years since
   392                              <1> ; 1980 and your year. 
   393                              <1> ;Then, using the table below, find the number of leap years between 1980
   394                              <1> ; and (YourYear - 1). 
   395                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   396                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   397                              <1> ;Use the months table to get the number of days in a normal month as leap 
   398                              <1> ; years are added using the previous comment.
   399                              <1> ;Finally check if the date is after 28th Feb. If it is, check if your year is 
   400                              <1> ; a leap year using the table. If it is, add an extra day.
   401                              <1> .clkLeapYears:
   402 00000F1A 0004080C1014181C20- <1>     db 00, 04, 08, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 
   402 00000F23 24282C30            <1>
   403 00000F27 34383C4044484C5054- <1>     db 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96
   403 00000F30 585C60              <1>
   404                              <1> .clkMonths:
   405 00000F33 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   405 00000F3C 1F1E1F              <1>
   406                              <1> ;COM Driver headers and main interrupt strat
   407                              <1> com1Intr:
   408 00000F3F C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   409 00000F46 EB19                <1>     jmp short comIntr
   410                              <1> com2Intr:
   411 00000F48 C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   412 00000F4F EB10                <1>     jmp short comIntr
   413                              <1> com3Intr:
   414 00000F51 C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   415 00000F58 EB07                <1>     jmp short comIntr
   416                              <1> com4Intr:
   417 00000F5A C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   418                              <1> comIntr:
   419 00000F61 50                  <1>     push rax
   420 00000F62 53                  <1>     push rbx
   421 00000F63 51                  <1>     push rcx
   422 00000F64 52                  <1>     push rdx
   423 00000F65 56                  <1>     push rsi
   424 00000F66 57                  <1>     push rdi
   425 00000F67 488B1DF5FCFFFF      <1>     mov rbx, qword [reqHdrPtr]
   426 00000F6E B003                <1>     mov al, 03h ;Unknown Command
   427 00000F70 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   428 00000F74 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   429                              <1> 
   430 00000F76 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   431 00000F79 3C04                <1>     cmp al, 4   ;Read Character(s)
   432 00000F7B 7462                <1>     jz .comRead
   433 00000F7D 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   434 00000F7F 0F849B000000        <1>     jz .comNondestructiveRead   
   435 00000F85 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   436 00000F87 0F8484000000        <1>     jz .comReadInputStatus
   437 00000F8D 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   438 00000F8F 0F84B9000000        <1>     jz .comFlushInputBuffers
   439 00000F95 3C08                <1>     cmp al, 8
   440 00000F97 0F84DB000000        <1>     jz .comWrite
   441 00000F9D 3C09                <1>     cmp al, 9
   442 00000F9F 0F84D3000000        <1>     jz .comWrite
   443 00000FA5 3C0A                <1>     cmp al, 0Ah
   444 00000FA7 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   445 00000FAD EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   446                              <1> .comErrorNoCount:
   447 00000FAF B002                <1>     mov al, 02h ;Unknown device
   448 00000FB1 EB19                <1>     jmp short .comWriteErrorCode
   449                              <1> .comReadError:
   450 00000FB3 BA0B000000          <1>     mov edx, 0Bh
   451                              <1> .comWriteError:
   452 00000FB8 BA0A000000          <1>     mov edx, 0Ah
   453                              <1> .comError:
   454 00000FBD 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   455 00000FC0 B902000000          <1>     mov ecx, 02h    ;Unknown device
   456 00000FC5 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   457 00000FC7 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   458 00000FCA 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   459                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   460 00000FCC B480                <1>     mov ah, 80h ;Set error bit
   461 00000FCE 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   462                              <1> .comExit:
   463 00000FD2 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   464 00000FD8 5F                  <1>     pop rdi
   465 00000FD9 5E                  <1>     pop rsi
   466 00000FDA 5A                  <1>     pop rdx
   467 00000FDB 59                  <1>     pop rcx
   468 00000FDC 5B                  <1>     pop rbx
   469 00000FDD 58                  <1>     pop rax
   470 00000FDE C3                  <1>     ret
   471                              <1> 
   472                              <1> .comRead:
   473 00000FDF B005                <1>     mov al, 05h ;Bad request structure length?
   474 00000FE1 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   475 00000FE4 75E6                <1>     jne .comWriteErrorCode
   476                              <1> 
   477 00000FE6 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   478 00000FEA 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   479                              <1> .cr1:
   480 00000FEC 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   481 00000FEF 741B                <1>     je .cre2
   482                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   483 00000FF1 B802000000          <1>     mov eax, 02h    ;Recieve 
   484 00000FF6 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   485 00000FFC 6698                <1>     cbw     ;Zero extend to upper byte
   486 00000FFE CD34                <1>     int 34h ;Recieve Char
   487 00001000 72BB                <1>     jc .comError
   488 00001002 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   489 00001005 74EA                <1>     je .cr11
   490 00001007 AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   491 00001008 FFC1                <1>     inc ecx
   492 0000100A EBE0                <1>     jmp short .cr1
   493                              <1> .cre2:
   494 0000100C 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   495 0000100F EBC1                <1>     jmp short .comExit
   496                              <1> 
   497                              <1> .comReadInputStatus:
   498 00001011 B005                <1>     mov al, 05h ;Bad request structure length?
   499 00001013 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   500 00001016 75B4                <1>     jne .comWriteErrorCode
   501 00001018 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   502 0000101E EBB2                <1>     jmp short .comExit
   503                              <1> 
   504                              <1> .comNondestructiveRead:
   505                              <1> ;Acts like a "read one character if there is one" function
   506 00001020 B005                <1>     mov al, 05h ;Bad request structure length?
   507 00001022 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   508 00001025 75A5                <1>     jne .comWriteErrorCode
   509                              <1> .cndr1:
   510 00001027 B802000000          <1>     mov eax, 02h    ;Recieve 
   511 0000102C 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   512 00001032 6698                <1>     cbw     ;Zero extend to upper byte
   513 00001034 CD34                <1>     int 34h ;Recieve Char
   514 00001036 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   515 0000103C 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   516 0000103F 7405                <1>     je .cndr2
   517 00001041 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Get next char
   518 00001044 EB8C                <1>     jmp short .comExit
   519                              <1> .cndr2:
   520 00001046 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 200h ;Busy bit set
   521 0000104C EB84                <1>     jmp short .comExit
   522                              <1> 
   523                              <1> .comFlushInputBuffers:
   524 0000104E B005                <1>     mov al, 05h ;Bad request structure length?
   525 00001050 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   526 00001053 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   527                              <1> .cfib0:
   528 00001059 8A1584000000        <1>     mov dl, byte [.comDevice]
   529 0000105F 6698                <1>     cbw
   530 00001061 B802000000          <1>     mov eax, 02h    ;Recieve
   531 00001066 CD34                <1>     int 34h
   532 00001068 0F8241FFFFFF        <1>     jc .comErrorNoCount
   533 0000106E 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   534 00001071 75E6                <1>     jne .cfib0
   535 00001073 E95AFFFFFF          <1>     jmp .comExit
   536                              <1> 
   537                              <1> .comWrite:
   538 00001078 B005                <1>     mov al, 05h ;Bad request structure length?
   539 0000107A 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   540 0000107D 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   541                              <1> 
   542 00001083 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   543 00001087 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   544                              <1> .cw1: 
   545 00001089 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   546 0000108C 7417                <1>     je .cw2
   547 0000108E AC                  <1>     lodsb   ;Get char into al, and inc rsi
   548 0000108F B401                <1>     mov ah, 01h ;Move function number into ah
   549 00001091 8A154C000000        <1>     mov dl, byte [.comDevice]
   550 00001097 6698                <1>     cbw     ;Zero extend to upper byte
   551 00001099 CD34                <1>     int 34h ;Transmit char
   552 0000109B 0F821CFFFFFF        <1>     jc .comError
   553 000010A1 FFC1                <1>     inc ecx
   554 000010A3 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   555                              <1> .cw2:
   556 000010A5 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   557 000010A8 E925FFFFFF          <1>     jmp .comExit
   558                              <1> 
   559                              <1> .comOutputStatus:
   560                              <1> ;Read MODEM status
   561 000010AD B005                <1>     mov al, 05h ;Bad request structure length?
   562 000010AF 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   563 000010B2 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   564                              <1> 
   565 000010B8 8A1525000000        <1>     mov dl, byte [.comDevice]
   566 000010BE 6698                <1>     cbw     ;Zero extend to upper byte
   567 000010C0 B403                <1>     mov ah, 03h     ;Get status
   568 000010C2 CD34                <1>     int 34h
   569 000010C4 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   570 000010CA 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   571 000010CF C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   572 000010D2 F7D0                <1>     not eax      ;Bitwise inversion
   573 000010D4 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   574 000010D9 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   575 000010DE E9EFFEFFFF          <1>     jmp .comExit
   576 000010E3 00                  <1> .comDevice   db 0
   577                              <1> 
   578                              <1> msdDriver:
   579 000010E4 50                  <1>     push rax
   580 000010E5 53                  <1>     push rbx
   581 000010E6 51                  <1>     push rcx
   582 000010E7 52                  <1>     push rdx
   583 000010E8 56                  <1>     push rsi
   584 000010E9 57                  <1>     push rdi
   585 000010EA 55                  <1>     push rbp
   586 000010EB 4150                <1>     push r8
   587 000010ED 488B1D6FFBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
   588 000010F4 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   589 000010F8 B003                <1>     mov al, 03h
   590 000010FA 0F87F9000000        <1>     ja .msdWriteErrorCode ;If yes, error!
   591 00001100 B001                <1>     mov al, 01h ;Unknown Unit Error
   592 00001102 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
   593 00001106 0F87ED000000        <1>     ja .msdWriteErrorCode ;If yes, error!
   594 0000110C 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
   595 0000110F 84C0                <1>     test al, al
   596 00001111 0F84F8000000        <1>     jz .msdInit
   597 00001117 3C01                <1>     cmp al, 01
   598 00001119 0F84C9010000        <1>     jz .msdMedChk
   599 0000111F 3C02                <1>     cmp al, 02
   600 00001121 0F8439020000        <1>     jz .msdBuildBPB
   601 00001127 3C03                <1>     cmp al, 03
   602 00001129 0F84A6020000        <1>     jz .msdIOCTLRead
   603 0000112F 3C04                <1>     cmp al, 04
   604 00001131 0F84AE020000        <1>     jz .msdRead
   605 00001137 3C08                <1>     cmp al, 08
   606 00001139 0F84E2020000        <1>     jz .msdWrite
   607 0000113F 3C09                <1>     cmp al, 09
   608 00001141 0F8416030000        <1>     jz .msdWriteVerify
   609 00001147 3C0C                <1>     cmp al, 12
   610 00001149 0F8457030000        <1>     jz .msdIOCTLWrite
   611 0000114F 3C0D                <1>     cmp al, 13
   612 00001151 0F845F030000        <1>     jz .msdDevOpen
   613 00001157 3C0E                <1>     cmp al, 14
   614 00001159 0F8476030000        <1>     jz .msdDevClose
   615 0000115F 3C0F                <1>     cmp al, 15
   616 00001161 0F848D030000        <1>     jz .msdRemovableMedia
   617 00001167 3C13                <1>     cmp al, 19
   618 00001169 0F84B2030000        <1>     jz .msdGenericIOCTL
   619 0000116F 3C17                <1>     cmp al, 23
   620 00001171 0F84BA030000        <1>     jz .msdGetLogicalDev
   621 00001177 3C18                <1>     cmp al, 24
   622 00001179 0F84CB030000        <1>     jz .msdSetLogicalDev
   623 0000117F EB7E                <1>     jmp short .msdDriverExit    ;All other valid functions exit done
   624                              <1> .msdIOError:  ;In Read and Write errors, rbp points to the dev struc
   625 00001181 4889EB              <1>     mov rbx, rbp
   626 00001184 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
   627 00001187 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
   628 00001189 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
   629                              <1> ;Now fall through to general error
   630                              <1> .msdGenDiskError:
   631 0000118C B401                <1>     mov ah, 01h
   632 0000118E 30D2                <1>     xor dl, dl  ;Work around bug that fails request if dl > 7Fh
   633 00001190 CD33                <1>     int 33h ;Read status of last operation
   634 00001192 80FC06              <1>     cmp ah, 06h ;Mock Seek response (device not present)
   635 00001195 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
   636 00001197 7460                <1>     je .msdWriteErrorCode 
   637 00001199 B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
   638 0000119B 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
   639 0000119E 7459                <1>     je .msdWriteErrorCode 
   640 000011A0 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
   641 000011A3 7454                <1>     je .msdWriteErrorCode
   642                              <1> ;Device Not Ready
   643 000011A5 B002                <1>     mov al, 02h  ;Device not ready code
   644 000011A7 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   645 000011AA 744D                <1>     je .msdWriteErrorCode
   646 000011AC 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   647 000011B0 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   648                              <1> ;Write Protected
   649 000011B4 30C0                <1>     xor al, al
   650 000011B6 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   651 000011BB 743C                <1>     je .msdWriteErrorCode
   652                              <1> ;CRC Error
   653 000011BD B004                <1>     mov al, 04h     ;CRC error code
   654 000011BF 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   655 000011C4 7433                <1>     je .msdWriteErrorCode
   656 000011C6 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   657 000011CB 742C                <1>     je .msdWriteErrorCode
   658 000011CD 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   659 000011D2 7425                <1>     je .msdWriteErrorCode
   660                              <1> ;Seek Error
   661 000011D4 B006                <1>     mov al, 06h     ;Seek error code
   662 000011D6 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   663 000011D9 741E                <1>     je .msdWriteErrorCode
   664                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   665                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   666 000011DB B007                <1>     mov al, 07h
   667 000011DD 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   668 000011E0 7417                <1>     je .msdWriteErrorCode
   669                              <1> ;Sector Not Found
   670 000011E2 B008                <1>     mov al, 08h     ;Sector not found code
   671 000011E4 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   672 000011E7 7410                <1>     je .msdWriteErrorCode
   673                              <1> ;Write faults
   674 000011E9 B00A                <1>     mov al, 0Ah     ;Write fault
   675 000011EB 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   676 000011EE 7409                <1>     je .msdWriteErrorCode
   677                              <1> ;Read faults
   678 000011F0 B00B                <1>     mov al, 0Bh     ;Read fault
   679 000011F2 80F911              <1>     cmp cl, 11h     ;Read error
   680 000011F5 7402                <1>     je .msdWriteErrorCode
   681                              <1> ;General Errors
   682 000011F7 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   683                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   684 000011F9 B480                <1>     mov ah, 80h ;Set error bit
   685 000011FB 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   686                              <1> .msdDriverExit:
   687 000011FF 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
   688 00001205 4158                <1>     pop r8
   689 00001207 5D                  <1>     pop rbp
   690 00001208 5F                  <1>     pop rdi
   691 00001209 5E                  <1>     pop rsi
   692 0000120A 5A                  <1>     pop rdx
   693 0000120B 59                  <1>     pop rcx
   694 0000120C 5B                  <1>     pop rbx
   695 0000120D 58                  <1>     pop rax
   696 0000120E C3                  <1>     ret
   697                              <1> .msdInit:            ;Function 0
   698 0000120F B005                <1>     mov al, 05h ;Bad request structure length
   699 00001211 803B1F              <1>     cmp byte [rbx + drvReqHdr.hdrlen], initReqPkt_size
   700 00001214 75E3                <1>     jne .msdWriteErrorCode
   701                              <1> 
   702 00001216 488D2DF4050000      <1>     lea rbp, endptr
   703 0000121D 48896B0E            <1>     mov qword [rbx + initReqPkt.endptr], rbp    ;Where the end is gonna be
   704 00001221 488D2D69030000      <1>     lea rbp, .msdBPBTbl
   705 00001228 48896B16            <1>     mov qword [rbx + initReqPkt.optptr], rbp    ;Where bpb tbl is gonna be
   706                              <1> 
   707 0000122C 4889DD              <1>     mov rbp, rbx ;Save the req block ptr in rbp
   708 0000122F 31D2                <1>     xor edx, edx  ;Start from device zero
   709 00001231 88550D              <1>     mov byte [rbp + initReqPkt.numunt], dl   ;Zero this field, max 5
   710                              <1> .mi0:   ;Now check each device for partitions
   711 00001234 807D0D05            <1>     cmp byte [rbp + initReqPkt.numunt], 5
   712 00001238 746C                <1>     je .msdExit ;IF we are at 5 now, we exit
   713 0000123A B482                <1>     mov ah, 82h ;LBA read
   714 0000123C B001                <1>     mov al, 1   ;1 sector
   715 0000123E B900000000          <1>     mov ecx, 0  ;Read sector 0
   716 00001243 488D1D(10040000)    <1>     lea rbx, msdTempBuffer  ;Get address of this space
   717 0000124A CD33                <1>     int 33h
   718 0000124C 0F828E000000        <1>     jc .msdInitError
   719                              <1> ;Now we verify if this is a BPB. Removable devices can't be partitioned (yet)
   720                              <1> ;1) Check byte 0 for EBh (short jmp) and byte 2 for a 90h (nop).
   721 00001252 8A03                <1>     mov al, byte [rbx]
   722 00001254 8A6302              <1>     mov ah, byte [rbx + 2]
   723 00001257 663DEB90            <1>     cmp ax, 090EBh
   724 0000125B 7573                <1>     jne .mimbr
   725                              <1> ;Valid BPB found! Copy to internal table and inc lastdrive
   726 0000125D 4889DE              <1>     mov rsi, rbx
   727 00001260 B878000000          <1>     mov eax, bpbEx_size
   728 00001265 89D1                <1>     mov ecx, edx    ;Temporarily save dl in ecx
   729 00001267 F7E2                <1>     mul edx
   730 00001269 89CA                <1>     mov edx, ecx
   731 0000126B 488D3D47030000      <1>     lea rdi, .msdBPBblks
   732 00001272 4801C7              <1>     add rdi, rax
   733 00001275 B978000000          <1>     mov ecx, bpbEx_size
   734 0000127A 4889F8              <1>     mov rax, rdi    ;Save the entry address in rax
   735 0000127D F3A4                <1>     rep movsb   ;Copy the bpb into the bpb table
   736 0000127F 488D3D0B030000      <1>     lea rdi, .msdBPBTbl
   737 00001286 488D3CD7            <1>     lea rdi, qword [rdi + 8*rdx]
   738 0000128A 488907              <1>     mov qword [rdi], rax
   739 0000128D 488D3DF3020000      <1>     lea rdi, .msdBIOSmap
   740 00001294 4801D7              <1>     add rdi, rdx    ;rdx contains a number, table is a list of bytes
   741 00001297 8817                <1>     mov byte [rdi], dl
   742 00001299 FE450D              <1>     inc byte [rbp + initReqPkt.numunt]
   743 0000129C FEC2                <1>     inc dl
   744 0000129E 3A15(09000000)      <1>     cmp dl, byte [numRemMSD] ;Once these are equal, we have processed last dev
   745 000012A4 758E                <1>     jne .mi0
   746                              <1> .msdExit:
   747                              <1> ;If one device only, copy its BPB pointer and drive number
   748                              <1> ;When HDD support implemented, this will check the number of remdevs not lastdrv
   749 000012A6 807D0D01            <1>     cmp byte [rbp + initReqPkt.numunt], 1
   750 000012AA 751C                <1>     jne .msdexit1
   751                              <1> ;Here ONLY if one device found
   752 000012AC 488D35DE020000      <1>     lea rsi, .msdBPBTbl
   753 000012B3 488D7E08            <1>     lea rdi, qword [rsi + 8]    ;Point to next entry
   754 000012B7 48A5                <1>     movsq   ;Copy pointer
   755 000012B9 488D35C7020000      <1>     lea rsi, .msdBIOSmap
   756 000012C0 488D7E01            <1>     lea rdi, qword [rsi + 1]
   757 000012C4 A4                  <1>     movsb   ;Copy byte
   758 000012C5 FE450D              <1>     inc byte [rbp + initReqPkt.numunt]
   759                              <1> .msdexit1:
   760 000012C8 4889EB              <1>     mov rbx, rbp
   761 000012CB E92FFFFFFF          <1>     jmp .msdDriverExit
   762                              <1> .mimbr:
   763                              <1> ;Goto next device without incrementing LASTDRIVE
   764 000012D0 FEC2                <1>     inc dl
   765 000012D2 3A15(09000000)      <1>     cmp dl, byte [numRemMSD] ;Once these are equ, we have processed last dev
   766 000012D8 0F8556FFFFFF        <1>     jne .mi0
   767 000012DE EBC6                <1>     jmp short .msdExit
   768                              <1> .msdInitError:
   769 000012E0 4889EB              <1>     mov rbx, rbp
   770 000012E3 E9A4FEFFFF          <1>     jmp .msdGenDiskError
   771                              <1> .msdMedChk:          ;Function 1
   772                              <1> ;Once the BIOS function is implmented that reads the changeline, use that!
   773                              <1> ;For BIOSes that dont support the changeline, the following procedure will 
   774                              <1> ; suffice.
   775 000012E8 B005                <1>     mov al, 05h ;Bad request structure length
   776 000012EA 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   777 000012ED 0F8506FFFFFF        <1>     jne .msdWriteErrorCode
   778                              <1> 
   779 000012F3 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   780 000012F8 488D0D88020000      <1>     lea rcx, .msdBIOSmap
   781 000012FF 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   782 00001302 F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   783 00001305 7550                <1>     jnz .mmcNoChange
   784                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   785 00001307 B416                <1>     mov ah, 16h 
   786 00001309 CD33                <1>     int 33h
   787 0000130B 0F827BFEFFFF        <1>     jc .msdGenDiskError
   788 00001311 80FC80              <1>     cmp ah, 80h
   789 00001314 740E                <1>     je .mmcNoChangeLine
   790 00001316 80FC86              <1>     cmp ah, 86h
   791 00001319 7409                <1>     je .mmcNoChangeLine
   792 0000131B 84E4                <1>     test ah, ah ;No change?
   793 0000131D 7438                <1>     jz .mmcNoChange
   794 0000131F F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   795 00001322 7516                <1>     jnz .mmcChange
   796                              <1> ;If nothing, fall through and test manually, should never happen though
   797                              <1> .mmcNoChangeLine:
   798                              <1> ;Now we test Media Descriptor
   799 00001324 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   800 00001327 488D3D63020000      <1>     lea rdi, .msdBPBTbl
   801 0000132E 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax]
   802 00001332 488B3F              <1>     mov rdi, qword [rdi]    ;Dereference rdi
   803 00001335 385715              <1>     cmp byte [rdi + bpb32.media], dl    ;Compare media descriptor bytes
   804 00001338 7414                <1>     je .mmcUnsure
   805                              <1> .mmcChange:
   806 0000133A C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   807 0000133E 488D0538020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   808 00001345 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   809 00001349 E9B1FEFFFF          <1>     jmp .msdDriverExit
   810                              <1> .mmcUnsure:
   811 0000134E C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   812 00001352 E9A8FEFFFF          <1>     jmp .msdDriverExit
   813                              <1> .mmcNoChange:
   814 00001357 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   815 0000135B E99FFEFFFF          <1>     jmp .msdDriverExit
   816                              <1> 
   817                              <1> .msdBuildBPB:        ;Function 2
   818 00001360 B005                <1>     mov al, 05h ;Bad request structure length
   819 00001362 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   820 00001365 0F858EFEFFFF        <1>     jne .msdWriteErrorCode
   821                              <1> 
   822 0000136B 4889DE              <1>     mov rsi, rbx
   823 0000136E 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   824 00001373 488D0D0D020000      <1>     lea rcx, .msdBIOSmap
   825 0000137A 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   826 0000137D 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   827 00001381 31C9                <1>     xor ecx, ecx    ;Read Sector 0
   828 00001383 B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   829 00001388 CD33                <1>     int 33h
   830 0000138A 0F82FCFDFFFF        <1>     jc .msdGenDiskError
   831                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   832 00001390 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   833 00001394 7418                <1>     je .mbbpb0
   834 00001396 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   835 0000139A 7412                <1>     je .mbbpb0
   836 0000139C 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   837 000013A0 740C                <1>     je .mbbpb0
   838 000013A2 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   839 000013A6 B007                <1>     mov al, 07h ;Unknown media error code
   840 000013A8 0F824BFEFFFF        <1>     jb .msdWriteErrorCode
   841                              <1> .mbbpb0:
   842 000013AE 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   843 000013B1 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   844 000013B6 488D3DD4010000      <1>     lea rdi, .msdBPBTbl
   845 000013BD 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   846 000013C1 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   847 000013C4 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   848 000013C8 B90F000000          <1>     mov ecx, bpbEx_size/8
   849 000013CD F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   850 000013D0 E92AFEFFFF          <1>     jmp .msdDriverExit
   851                              <1> .msdIOCTLRead:       ;Function 3, returns done
   852 000013D5 B005                <1>     mov al, 05h ;Bad request structure length
   853 000013D7 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   854 000013DA 0F8519FEFFFF        <1>     jne .msdWriteErrorCode
   855                              <1> 
   856 000013E0 E91AFEFFFF          <1>     jmp .msdDriverExit
   857                              <1> .msdRead:            ;Function 4
   858                              <1> ;Will read one sector at a time.
   859 000013E5 B005                <1>     mov al, 05h ;Bad request structure length
   860 000013E7 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   861 000013EA 0F8509FEFFFF        <1>     jne .msdWriteErrorCode
   862                              <1> 
   863 000013F0 4889DD              <1>     mov rbp, rbx
   864 000013F3 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   865                              <1> .msdr0:
   866 000013F5 B682                <1>     mov dh, 82h ;LBA Read Sectors
   867 000013F7 E867010000          <1>     call .msdBlkIOCommon
   868 000013FC 0F827FFDFFFF        <1>     jc .msdIOError
   869 00001402 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   870 0000140A 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   871 00001412 FFC6                <1>     inc esi
   872 00001414 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   873 00001417 75DC                <1>     jne .msdr0
   874 00001419 4889EB              <1>     mov rbx, rbp
   875 0000141C E9DEFDFFFF          <1>     jmp .msdDriverExit
   876                              <1> .msdWrite:           ;Function 8
   877                              <1> ;Will write one sector at a time.
   878 00001421 B005                <1>     mov al, 05h ;Bad request structure length
   879 00001423 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   880 00001426 0F85CDFDFFFF        <1>     jne .msdWriteErrorCode
   881                              <1> 
   882 0000142C 4889DD              <1>     mov rbp, rbx
   883 0000142F 31F6                <1>     xor esi, esi  ;Set counter to zero
   884                              <1> .msdw0:
   885 00001431 B683                <1>     mov dh, 83h ;LBA Write Sectors
   886 00001433 E82B010000          <1>     call .msdBlkIOCommon
   887 00001438 0F8243FDFFFF        <1>     jc .msdIOError
   888 0000143E 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   889 00001446 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   890 0000144E FFC6                <1>     inc esi
   891 00001450 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   892 00001453 75DC                <1>     jne .msdw0
   893 00001455 4889EB              <1>     mov rbx, rbp
   894 00001458 E9A2FDFFFF          <1>     jmp .msdDriverExit
   895                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   896                              <1> ;Will write one sector at a time and then verify it.
   897 0000145D B005                <1>     mov al, 05h ;Bad request structure length
   898 0000145F 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   899 00001462 0F8591FDFFFF        <1>     jne .msdWriteErrorCode
   900                              <1> 
   901 00001468 4889DD              <1>     mov rbp, rbx
   902 0000146B 31F6                <1>     xor esi, esi  ;Set counter to zero
   903                              <1> .msdwv0:
   904 0000146D B683                <1>     mov dh, 83h ;LBA Write Sectors
   905 0000146F E8EF000000          <1>     call .msdBlkIOCommon
   906 00001474 0F8207FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   907 0000147A B684                <1>     mov dh, 84h ;LBA Verify Sectors
   908 0000147C E8E2000000          <1>     call .msdBlkIOCommon
   909 00001481 0F82FAFCFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   910 00001487 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   911 0000148F 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   912 00001497 FFC6                <1>     inc esi
   913 00001499 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   914 0000149C 75CF                <1>     jne .msdwv0
   915 0000149E 4889EB              <1>     mov rbx, rbp
   916 000014A1 E959FDFFFF          <1>     jmp .msdDriverExit
   917                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   918 000014A6 B005                <1>     mov al, 05h ;Bad request structure length
   919 000014A8 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   920 000014AB 0F8548FDFFFF        <1>     jne .msdWriteErrorCode
   921                              <1> 
   922 000014B1 E949FDFFFF          <1>     jmp .msdDriverExit
   923                              <1> .msdDevOpen:         ;Function 13
   924 000014B6 B005                <1>     mov al, 05h ;Bad request structure length
   925 000014B8 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   926 000014BB 0F8538FDFFFF        <1>     jne .msdWriteErrorCode
   927                              <1> 
   928 000014C1 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   929 000014C6 488D0DBF000000      <1>     lea rcx, .msdHdlCnt
   930 000014CD FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   931 000014D0 E92AFDFFFF          <1>     jmp .msdDriverExit
   932                              <1> .msdDevClose:        ;Function 14
   933 000014D5 B005                <1>     mov al, 05h ;Bad request structure length
   934 000014D7 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   935 000014DA 0F8519FDFFFF        <1>     jne .msdWriteErrorCode
   936                              <1> 
   937 000014E0 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   938 000014E5 488D0DA0000000      <1>     lea rcx, .msdHdlCnt
   939 000014EC FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   940 000014EF E90BFDFFFF          <1>     jmp .msdDriverExit
   941                              <1> .msdRemovableMedia:  ;Function 15
   942 000014F4 B005                <1>     mov al, 05h ;Bad request structure length
   943 000014F6 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   944 000014F9 0F85FAFCFFFF        <1>     jne .msdWriteErrorCode
   945                              <1> 
   946 000014FF 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   947 00001504 488D0D7C000000      <1>     lea rcx, .msdBIOSmap
   948 0000150B 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   949 0000150E A880                <1>     test al, 80h
   950 00001510 0F84E9FCFFFF        <1>     jz .msdDriverExit   ;If removable, busy bit is clear
   951 00001516 66C743030002        <1>     mov word [rbx + remMediaReqPkt.status], 0200h ;Set Busy bit
   952 0000151C E9DEFCFFFF          <1>     jmp .msdDriverExit
   953                              <1> .msdGenericIOCTL:    ;Function 19
   954 00001521 B005                <1>     mov al, 05h ;Bad request structure length
   955 00001523 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   956 00001526 0F85CDFCFFFF        <1>     jne .msdWriteErrorCode
   957                              <1> 
   958 0000152C E9CEFCFFFF          <1>     jmp .msdDriverExit
   959                              <1> .msdGetLogicalDev:   ;Function 23
   960 00001531 B005                <1>     mov al, 05h ;Bad request structure length
   961 00001533 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   962 00001536 0F85BDFCFFFF        <1>     jne .msdWriteErrorCode
   963                              <1> 
   964 0000153C 8A0544000000        <1>     mov al, byte [.msdCurDev]
   965 00001542 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   966 00001545 E9B5FCFFFF          <1>     jmp .msdDriverExit
   967                              <1> .msdSetLogicalDev:   ;Function 24
   968 0000154A B005                <1>     mov al, 05h ;Bad request structure length
   969 0000154C 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   970 0000154F 0F85A4FCFFFF        <1>     jne .msdWriteErrorCode
   971                              <1> 
   972 00001555 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   973 00001558 880528000000        <1>     mov byte [.msdCurDev], al
   974 0000155E E99CFCFFFF          <1>     jmp .msdDriverExit
   975                              <1> 
   976                              <1> .msdBlkIOCommon:  ;Does block IO
   977                              <1> ;Called with rbp containing old rbx value and ah with function number
   978                              <1> ;Error handled by caller
   979                              <1> ;Sector count handled by caller
   980                              <1> ;Called with dh = BIOS function number
   981 00001563 480FB64501          <1>     movzx rax, byte [rbp + ioReqPkt.unitnm]
   982 00001568 8A90[87150000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   983 0000156E 488B4D1A            <1>     mov rcx, qword [rbp + ioReqPkt.strtsc]  ;Get start sector
   984 00001572 488B5D0E            <1>     mov rbx, qword [rbp + ioReqPkt.bufptr]  ;Get Memory Buffer
   985 00001576 88F4                <1>     mov ah, dh
   986 00001578 B001                <1>     mov al, 01h ;Do one sector at a time 
   987 0000157A CD33                <1>     int 33h
   988 0000157C C3                  <1>     ret
   989                              <1> 
   990 0000157D 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   991                              <1> ;LASTDRIVE default is 5
   992 00001586 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   993                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   994 00001587 FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
   995 0000158C 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   996 00001591 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   996 0000159A 000000000000000000- <1>
   996 000015A3 000000000000000000- <1>
   996 000015AC 000000000000000000- <1>
   996 000015B5 00000000            <1>
   997 000015B9 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   997 000015C2 000000000000000000- <1>
   997 000015CB 000000000000000000- <1>
   997 000015D4 000000000000000000- <1>
   997 000015DD 000000000000000000- <1>
   997 000015E6 000000000000000000- <1>
   997 000015EF 000000000000000000- <1>
   997 000015F8 000000000000000000- <1>
   997 00001601 000000000000000000- <1>
   997 0000160A 000000000000000000- <1>
   997 00001613 000000000000000000- <1>
   997 0000161C 000000000000000000- <1>
   997 00001625 000000000000000000- <1>
   997 0000162E 000000000000000000- <1>
   997 00001637 000000000000000000- <1>
   997 00001640 000000000000000000- <1>
   997 00001649 000000000000000000- <1>
   997 00001652 000000000000000000- <1>
   997 0000165B 000000000000000000- <1>
   997 00001664 000000000000000000- <1>
   997 0000166D 000000000000000000- <1>
   997 00001676 000000000000000000- <1>
   997 0000167F 000000000000000000- <1>
   997 00001688 000000000000000000- <1>
   997 00001691 000000000000000000- <1>
   997 0000169A 000000000000000000- <1>
   997 000016A3 000000000000000000- <1>
   997 000016AC 000000000000000000- <1>
   997 000016B5 000000000000000000- <1>
   997 000016BE 000000000000000000- <1>
   997 000016C7 000000000000000000- <1>
   997 000016D0 000000000000000000- <1>
   997 000016D9 000000000000000000- <1>
   997 000016E2 000000000000000000- <1>
   997 000016EB 000000000000000000- <1>
   997 000016F4 000000000000000000- <1>
   997 000016FD 000000000000000000- <1>
   997 00001706 000000000000000000- <1>
   997 0000170F 000000000000000000- <1>
   997 00001718 000000000000000000- <1>
   997 00001721 000000000000000000- <1>
   997 0000172A 000000000000000000- <1>
   997 00001733 000000000000000000- <1>
   997 0000173C 000000000000000000- <1>
   997 00001745 000000000000000000- <1>
   997 0000174E 000000000000000000- <1>
   997 00001757 000000000000000000- <1>
   997 00001760 000000000000000000- <1>
   997 00001769 000000000000000000- <1>
   997 00001772 000000000000000000- <1>
   997 0000177B 000000000000000000- <1>
   997 00001784 000000000000000000- <1>
   997 0000178D 000000000000000000- <1>
   997 00001796 000000000000000000- <1>
   997 0000179F 000000000000000000- <1>
   997 000017A8 000000000000000000- <1>
   997 000017B1 000000000000000000- <1>
   997 000017BA 000000000000000000- <1>
   997 000017C3 000000000000000000- <1>
   997 000017CC 000000000000000000- <1>
   997 000017D5 000000000000000000- <1>
   997 000017DE 000000000000000000- <1>
   997 000017E7 000000000000000000- <1>
   997 000017F0 000000000000000000- <1>
   997 000017F9 000000000000000000- <1>
   997 00001802 000000000000000000- <1>
   997 0000180B 000000000000        <1>
   998                              <1> 
   999                              <1> endptr equ $
