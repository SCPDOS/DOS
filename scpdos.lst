     1                                  [map all scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  %include "driverStruc.inc"
     5                              <1> 
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     8                              <1> ; device driver related structures.                     ;
     9                              <1> ;-------------------------------------------------------;
    10                              <1> 
    11                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    12                              <1> 
    13 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    14 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    15 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    16 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    17 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    18                              <1> 
    19                              <1> endstruc
    20                              <1> 
    21                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    22                              <1> 
    23                              <1>     .hdrlen resb 1  ;Length of the request header
    24                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    25                              <1>     .cmdcde resb 1  ;Command code
    26                              <1>     .status resw 1  ;Status word
    27                              <1>     .devptr resq 1  ;Device queue pointer field
    28                              <1> 
    29                              <1> %endmacro
    30                              <1> 
    31                              <1> struc drvReqHdr
    32                              <1>     drvReqHdrM
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    33                              <1> endstruc
    34                              <1> 
    35                              <1> struc initReqPkt  ;Init Request Packet
    36                              <1> 
    37                              <1>     drvReqHdrM   ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    38 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
    39 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
    40 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
    41 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
    42                              <1> 
    43                              <1> endstruc
    44                              <1> 
    45                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
    46                              <1> 
    47                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    48 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    49 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
    50 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
    51                              <1> 
    52                              <1> endstruc
    53                              <1> 
    54                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
    55                              <1> 
    56                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    57 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    58 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    59 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
    60                              <1> 
    61                              <1> endstruc
    62                              <1> 
    63                              <1> struc ioReqPkt   ;IO Request Packet
    64                              <1> 
    65                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    66 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    67 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    68 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
    69 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
    70 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
    71                              <1> 
    72                              <1> endstruc
    73                              <1> 
    74                              <1> struc nonDestInNoWaitReqPkt    ;Nondestructive Input No Wait Request Packet
    75                              <1>     
    76                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    77 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
    78                              <1> 
    79                              <1> endstruc
    80                              <1> 
    81                              <1> struc statusReqPkt   ;Status Request Packet
    82                              <1> 
    83                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    84                              <1> 
    85                              <1> endstruc
    86                              <1> 
    87                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
    88                              <1> 
    89                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    90                              <1>      
    91                              <1> endstruc
    92                              <1> 
    93                              <1> struc openReqPkt ;Open Device Request Packet
    94                              <1> 
    95                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    96                              <1>      
    97                              <1> endstruc
    98                              <1> 
    99                              <1> struc closeReqPkt ;Close Device Request Packet
   100                              <1> 
   101                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   102                              <1>      
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   106                              <1> 
   107                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   108                              <1>      
   109                              <1> endstruc
   110                              <1> 
   111                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   112                              <1> 
   113                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   114 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   115 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   116 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   117 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   118 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   119                              <1> 
   120                              <1> endstruc
   121                              <1> 
   122                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   123                              <1>     
   124                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   125                              <1> 
   126                              <1> endstruc
   127                              <1> 
   128                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   129                              <1>     
   130                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   131                              <1> 
   132                              <1> endstruc
     5                                  %include "fatStruc.inc"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ; This include file contains miscellaneous FAT driver   ;
     9                              <1> ; structures. exFAT will have it's own files at a later ;
    10                              <1> ; stage.                                                ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    14                              <1> 
    15 00000000 ??????              <1>     .jmpBoot    resb 3 
    16 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    17 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    18 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    19 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    20 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    21 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    22 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    23 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    24 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    25 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    26 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    27 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    28 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    29                              <1> 
    30 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    31 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    32 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    33 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    34 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    35 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    40                              <1> 
    41 00000000 ??????              <1>     .jmpBoot    resb 3
    42 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    43 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    44 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    45 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    46 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    47 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    48 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    49 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    50 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    51 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    52 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    53 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    54 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    55                              <1> 
    56 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    57 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    58 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    59 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    60 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    61 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    62 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    63                              <1> 
    64 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    65 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    66 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    67 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    68 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    69 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    70                              <1> 
    71                              <1> endstruc
    72                              <1> 
    73                              <1> struc fatDirEntry
    74                              <1> 
    75 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
    76 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
    77 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
    78 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
    79 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
    80 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
    81 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
    82 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
    83 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
    84 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
    85 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
    86 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
    87                              <1> 
    88                              <1> endstruc
    89                              <1> ;Directory attribute equates
    90                              <1>     dirReadOnly     equ 01h
    91                              <1>     dirHidden       equ 02h
    92                              <1>     dirSystem       equ 04h
    93                              <1>     dirVolumeID     equ 08h
    94                              <1>     dirDirectory    equ 10h
    95                              <1>     dirArchive      equ 20h
    96                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    97                              <1> 
    98                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
    99                              <1> 
   100 00000000 ??????              <1>     .jmpBoot                resb 3 
   101 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   102 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   103 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   104 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   105 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   106 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   107 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   108 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   109 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   110 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   111 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   112 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   113 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   114 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   115 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   116 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   117 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   118 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   119                              <1> 
   120                              <1> endstruc
   121                              <1> 
   122                              <1> struc FSInfo
   123                              <1> 
   124 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   125 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   126 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   127 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   128 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   129 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   130 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   131                              <1> 
   132                              <1> endstruc
     6                                  %include "dosStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous internal     ;
    10                              <1> ; SCP/DOS structures.                                   ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> ;------------------------------------------------------------------------;
    14                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    15                              <1> ; its file system structure. This is used to locate files and structures
    16                              <1> ; on the device itself and to translate file requests to cluster chains
    17                              <1> ; to LBAs to pass to the disk driver..
    18                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    19                              <1> ; drivers Initialise routine has been called.
    20                              <1> ;------------------------------------------------------------------------;
    21                              <1> struc dpb        ;Drive Parameter Block
    22                              <1> 
    23 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...)
    24 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device
    25 00000002 ??                  <1>     .bBytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
    26 00000003 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1
    27                              <1> ;                                       i.e. (2^bSectorsPerClusterShift) - 1
    28 00000004 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent
    29 00000005 ????????            <1>     .dFAToffset              resd 1  ;Vol rel offset of first FAT, in sectors
    30 00000009 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs
    31 0000000A ????                <1>     .wNumberRootDirEntries   resw 1  ;In sectors
    32 0000000C ????????            <1>     .dClusterHeapOffset      resd 1  ;Start of data area, in sectors
    33 00000010 ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters (volume size)
    34 00000014 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors
    35 00000018 ????????            <1>     .dFirstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
    36 0000001C ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header
    37 00000024 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor
    38 00000025 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1)
    39 00000026 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    40 0000002E ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search
    41 00000032 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown
    42                              <1> 
    43                              <1> endstruc
    44                              <1> 
    45                              <1> ;------------------------------------------------------------------------;
    46                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    47                              <1> ; All disk pathing requests go via the CDS for that drive.
    48                              <1> ; The default drive is the last accessed drive, this number is stored
    49                              <1> ; in the DOS data area.
    50                              <1> ; The CDS is stored as an array with the offset into the array being 
    51                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    52                              <1> ;
    53                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    54                              <1> ;------------------------------------------------------------------------;
    55                              <1> struc cds       ;Current Directory structure
    56 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    57 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    58 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    59 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    60 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    61 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    62                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    63                              <1> ; another, we save the number of chars to skip to that deep level).
    64                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    65                              <1> ; Flags: Bit 15 set = Network drive
    66                              <1> ;        Bit 14 set = Physical drive
    67                              <1> ;        Bit 13 set = JOIN'ed drive
    68                              <1> ;        Bit 12 set = SUBST'ed drive
    69                              <1> ;        Bit 7  set = Redirected, not network, drive (This is how MSCDEX worked)
    70                              <1> endstruc
    71                              <1> ;CDS equates
    72                              <1>     cdsNetDrive     equ 8000h
    73                              <1>     cdsPhysDrive    equ 4000h
    74                              <1>     cdsJoinDrive    equ 2000h
    75                              <1>     cdsSubstDrive   equ 1000h
    76                              <1>     cdsRedirDrive   equ 0080h
    77                              <1> ;------------------------------------------------------------------------;
    78                              <1> ; The SFT is a way to allow applications to open file handles to files 
    79                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    80                              <1> ; under the first header, and then a second header will be linked to the 
    81                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    82                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    83                              <1> ; using the FCBS= command. Default FCBS=5.
    84                              <1> ;
    85                              <1> ; A file handle describes the file, and the location within the file that
    86                              <1> ; we are reading. The file handle can be manipulated without the file
    87                              <1> ; being in memory, thus allowing the user to access data without needing 
    88                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    89                              <1> ; accessing devices, by treating them as files with their drivers 
    90                              <1> ; responding and translating the manipulations of the file handle itself.
    91                              <1> ; Neither the driver nor the application should see or use the SFT for
    92                              <1> ; the handle, as it is subject to change (and will change when file 
    93                              <1> ; sharing provisions are included). The DOS will make requests to the 
    94                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    95                              <1> ; track of the information in the SFT entry for that handle. 
    96                              <1> ;
    97                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    98                              <1> ; can point to the same file. It all depends on what the applications 
    99                              <1> ; want to do with the File.
   100                              <1> ;
   101                              <1> ; !!!!IMPORTANT!!!!
   102                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   103                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   104                              <1> ;
   105                              <1> ;Each SFT may look like this:
   106                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   107                              <1> ;            |                |
   108                              <1> ;       wNumFiles*sft    wNumFiles*sft
   109                              <1> ;
   110                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   111                              <1> ; System FCBs.
   112                              <1> ;
   113                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   114                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   115                              <1> ;
   116                              <1> ; DEFAULT FILES=15, MINIMUM FILES=5
   117                              <1> ; DEFAULT FCBS=5, MINIMUM FCBS=5
   118                              <1> ;------------------------------------------------------------------------;
   119                              <1> struc sfth   ;System file table header
   120                              <1> ; This is the SFT header.
   121                              <1> ; This structure comes before the start of the first file in the array/table.
   122 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   123 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc sft
   127                              <1> ;This is the file struc itself
   128 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   129 00000002 ????                <1>     .wOpenMode   resw 1    ;Bit 15 set if opened via FCB
   130 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   131 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   132 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   133 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file
   134 00000013 ????                <1>     .wTime       resw 1    ;File Time
   135 00000015 ????                <1>     .wDate       resw 1    ;File Date
   136 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   137 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset in file, in bytes
   138 0000001F ????                <1>     .wRelClust   resw 1    ;Relative cluster in file of the last cluster accessed
   139 00000021 ????????            <1>     .dDirSect    resd 1    ;Relative number of sector containing directory entry 
   140 00000025 ??                  <1>     .bNumDirEnt  resb 1    ;Number of dir entry within sector (byte offset/32)
   141 00000026 <res Bh>            <1>     .sFCBName    resb 11   ;8.3 Filename
   142 00000031 ????????????????    <1>     .qPSPOwner   resq 1    ;Address of PSP of program which first opened this file
   143 00000039 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster of last cluster accessed
   144                              <1> endstruc
   145                              <1> 
   146                              <1> ;------------------------------------------------------------------------;
   147                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   148                              <1> ; to an internal buffer, and then copying it to the specified location
   149                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   150                              <1> ; another request for the same sector from the same device is made, so 
   151                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   152                              <1> ; size, selected according to the largest detected sector size during 
   153                              <1> ; the initial loadup.
   154                              <1> ;
   155                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   156                              <1> ;
   157                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   158                              <1> ;------------------------------------------------------------------------;
   159                              <1> 
   160                              <1> struc bufferHdr
   161 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   162 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for
   163 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   164 0000000A ????????            <1>     .bufferLBA   resd  1   ;LBA the buffer contains
   165 0000000E ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   166 0000000F ??                  <1>     .bufFAToff   resb  1   ;Sector offset of the backup copy of the FAT on disk
   167 00000010 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   168                              <1> endstruc
   169                              <1> 
   170                              <1> ;------------------------------------------------------------------------;
   171                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   172                              <1> ; following order, thus allowing for return values to be placed in the 
   173                              <1> ; registers by accessing the caller register stack frame.
   174                              <1> ;------------------------------------------------------------------------;
   175                              <1> struc callerFrame
   176 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   177 00000008 ????????????????    <1>     .rbx    resq 1    
   178 00000010 ????????????????    <1>     .rcx    resq 1
   179 00000018 ????????????????    <1>     .rdx    resq 1
   180 00000020 ????????????????    <1>     .rsi    resq 1
   181 00000028 ????????????????    <1>     .rdi    resq 1
   182 00000030 ????????????????    <1>     .rbp    resq 1
   183 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   184 00000040 ????????????????    <1>     .r9     resq 1
   185                              <1> ;Pushed by Processor when invoked via Interrupt
   186 00000048 ????????????????    <1>     .rip    resq 1
   187 00000050 ????????????????    <1>     .cs     resq 1
   188 00000058 ????????????????    <1>     .flags  resq 1
   189                              <1> endstruc
   190                              <1> 
   191                              <1> %macro pushDOS 0
   192                              <1>     push r9
   193                              <1>     push r8
   194                              <1>     push rbp
   195                              <1>     push rdi
   196                              <1>     push rsi
   197                              <1>     push rdx
   198                              <1>     push rcx
   199                              <1>     push rbx
   200                              <1>     push rax
   201                              <1> %endmacro
   202                              <1> 
   203                              <1> %macro popDOS 0
   204                              <1>     pop rax
   205                              <1>     pop rbx
   206                              <1>     pop rcx
   207                              <1>     pop rdx
   208                              <1>     pop rsi
   209                              <1>     pop rdi
   210                              <1>     pop rbp
   211                              <1>     pop r8
   212                              <1>     pop r9
   213                              <1> %endmacro
   214                              <1> 
   215                              <1> struc psp
   216 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h
   217 00000002 ????????????????    <1>     .startSeg   resq 1  ;Pointer to the start of the PSP
   218 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   219 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   220 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   221 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   222 0000002A <res 14h>           <1>     .fHandles   resb 20 ;Main File handle array
   223 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   224 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   225 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size
   226 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh
   227 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain
   228 0000005B ????????????????    <1>     .xtraHdlPtr resq 1  ;Pointer to the extra handle array if needed
   229 00000063 ????????????????    <1>     .fcbPtr1    resq 1  ;Pointer to the first OS allocated FCB
   230 0000006B <res 15h>           <1>     .reserved   resb 21
   231 00000080 ??                  <1>     .charCount  resb 1  ;Number of characters in command tail
   232 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   233                              <1> endstruc
   234                              <1> 
   235                              <1> struc mcb
   236 00000000 ??                  <1>     .mzbyte     resb 1  ;M=In use, Z=Free
   237 00000001 ????????????????    <1>     .processPtr resq 1  ;Points to the start of the process PSP
   238 00000009 ????????            <1>     .paragraphs resd 1  ;Gives the number of paras allocated to this process
   239 0000000D ??????              <1>     .reserved   resb 3
   240                              <1>     .program:
   241                              <1> endstruc
     7                                  %include "dosSeg.asm"
     8                              <1> ;This file contains the main DOS data segment
     9                              <1> 
    10                              <1> Segment dSeg nobits align=1 
    11 00000000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself
    12 00000008 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from
    13 00000009 <res 2Ah>           <1>     charReqHdr  resb ioReqPkt_size  ;Character IO Request header
    14 00000033 <res 2Ah>           <1>     diskReqHdr  resb ioReqPkt_size  ;Disk Action Request header
    15                              <1>     ;The device driver header with space for the largest possible packet
    16 0000005D ????????????????    <1>     sysVarsPtr  resq 1    ;Pointer to dpbHeadPtr, head of Sys Vars struc below
    17 00000065 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain
    18 0000006D ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain
    19 00000075 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    20 0000007D ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header
    21                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    22 00000085 ????????????????    <1>     conPtr      resq 1    ;Pointer to the current active CON device header 
    23                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    24 0000008D ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)
    25 0000008F ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain
    26 00000097 ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array
    27 0000009F ????????????????    <1>     sfcbHeadPTr resq 1    ;Pointer to the head of the System FCB chain
    28 000000A7 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    29 000000A9 ??                  <1>     numMSDdrv   resb 1    ;Number of mass storage devices detected in system
    30 000000AA ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]
    31 000000AB ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    32 000000AC <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    33                              <1> 
    34                              <1> ;Start of Swappable Data Area, this bit can remain static
    35 000000CE ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h
    36 000000CF ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving
    37 000000D0 ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh
    38 000000D1 ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    39 000000D2 ????                <1>     errorExt    resw 1  ;Extended Error Code
    40 000000D4 ??                  <1>     errorAction resb 1  ;Suggested action for error  
    41 000000D5 ??                  <1>     errorClass  resb 1  ;Error Class
    42                              <1> 
    43 000000D6 ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA
    44 000000DE ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP
    45 000000E6 ????????????????    <1>     rdiErrorPtr resq 1  ;Saves RDI value of last error
    46 000000EE ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
    47 000000F6 ????                <1>     lastRetCode resw 1  ;Last return code returned by Int 41h/4Ch
    48 000000F8 ??                  <1>     currentDrv  resb 1  ;Default, last accessed drive
    49 000000F9 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls
    50                              <1> ;SDA, needs to be replaced between processes
    51 000000FA ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
    52                              <1> 
    53 00000102 ??                  <1>     Int44RetVal resb 1  ;Saves a copy of the Int 44 return value
    54 00000103 ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
    55 00000104 ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
    56 00000105 ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
    57 0000010D ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
    58 00000115 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
    59                              <1> ;Time stuff
    60 0000011D ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
    61 00000123 ??                  <1>     dayOfMonth  resb 1  ;1 - 31 BCD
    62 00000124 ??                  <1>     monthOfYear resb 1  ;1 - 12 BCD
    63 00000125 ????                <1>     years       resw 1  ;0000 - 9999 BCD
    64 00000127 ????                <1>     yearsOffset resw 1  ;Current Year - 1980
    65 00000129 ????????            <1>     daysOffset  resd 1  ;Days since 1-1-1980
    66 0000012D ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
    67                              <1> 
    68                              <1> ;Stacks
    69 0000012E <res 528h>          <1>     critStack   resq 165
    70 00000656 ????????????????    <1>     critStakTop resq 1
    71 0000065E <res 638h>          <1>     IOStack     resq 199
    72 00000C96 ????????????????    <1>     IOStakTop   resq 1
    73 00000C9E <res 638h>          <1>     DiskStack   resq 199
    74 000012D6 ????????????????    <1>     DiskStakTop resq 1
    75                              <1>     dSegLen     equ     $
     8                                  
     9                                  Segment .text align=1
    10                                  ; We arrive here with the following values in the registers.
    11                                  ; rbx =  LBA of first Logical Block after SCP/BIOS
    12                                  ; dx  = Int 33h boot device number
    13                                  ; fs  = userbase pointer (pointer to first usable block of RAM)
    14                                  tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    15 00000000 55AA                        dw 0AA55h           ;Initial signature
    16 00000002 909090909090909090-         db (100h-2) dup (90h)   ;Duplicate NOPs for the PSP
    16 0000000B 909090909090909090-
    16 00000014 909090909090909090-
    16 0000001D 909090909090909090-
    16 00000026 909090909090909090-
    16 0000002F 909090909090909090-
    16 00000038 909090909090909090-
    16 00000041 909090909090909090-
    16 0000004A 909090909090909090-
    16 00000053 909090909090909090-
    16 0000005C 909090909090909090-
    16 00000065 909090909090909090-
    16 0000006E 909090909090909090-
    16 00000077 909090909090909090-
    16 00000080 909090909090909090-
    16 00000089 909090909090909090-
    16 00000092 909090909090909090-
    16 0000009B 909090909090909090-
    16 000000A4 909090909090909090-
    16 000000AD 909090909090909090-
    16 000000B6 909090909090909090-
    16 000000BF 909090909090909090-
    16 000000C8 909090909090909090-
    16 000000D1 909090909090909090-
    16 000000DA 909090909090909090-
    16 000000E3 909090909090909090-
    16 000000EC 909090909090909090-
    16 000000F5 909090909090909090-
    16 000000FE 9090               
    17 00000100 64881425[08000000]          mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    18 00000108 488D15F1FEFFFF              lea rdx, qword [tempPSP]    ;Get the address of the tempPSP
    19 0000010F 6448891425-                 mov qword fs:[currentPSP], rdx
    19 00000114 [DE000000]         
    20                                  ;DOS allows for non-PARA aligned PSPs but DOS aligns all programs on PARA bndry
    21 00000118 B9000100C0                  mov ecx, 0C0000100h ;Read FS MSR
    22 0000011D 0F32                        rdmsr
    23 0000011F 89D7                        mov edi, edx        ;Get the hi dword, and clear the upper bytes
    24 00000121 48C1E720                    shl rdi, 20h        ;Shift high
    25 00000125 89C7                        mov edi, eax        ;Get the low dword in
    26                                  
    27 00000127 6448893C25-                 mov qword fs:[dosSegPtr], rdi 
    27 0000012C [00000000]         
    28 00000130 4889FD                      mov rbp, rdi    ;Save the start of dosSeg in rdx 
    29 00000133 4881C7[DE120000]            add rdi, dSegLen ;Move destination past end of data area
    30 0000013A 488D35(00000000)            lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    31 00000141 B900100000                  mov ecx, 1000h
    32 00000146 F348A5                      rep movsq
    33                                  
    34                                  ;Modify the pointers in nData before putting them in the data area
    35 00000149 48012D83010000              add qword [nData + drvHdr.nxtPtr], rbp
    36 00000150 48012D86010000              add qword [nData + drvHdr.strPtr], rbp
    37 00000157 48012D87010000              add qword [nData + drvHdr.intPtr], rbp
    38                                  ;Copy the Null driver to its location in Sysvars
    39 0000015E B922000000                  mov ecx, drvHdr_size
    40 00000163 488D3569010000              lea rsi, qword [nData]
    41 0000016A 488DBD[AC000000]            lea rdi, qword [rbp + nulDevHdr]
    42 00000171 F3A4                        rep movsb   
    43                                  
    44                                  ;Adjust the addresses in the other driver headers 
    45 00000173 48BE-                       mov rsi, conHdr ;Point to the first non-NUL dev in chain
    45 00000175 [C407000000000000] 
    46 0000017D B90C000000                  mov ecx, 12      ;12 drivers in data area
    47 00000182 488D342E                    lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
    48                                  adjDrivers:
    49 00000186 E8CD000000                  call adjustDrvHdr
    50 0000018B E2F9                        loop adjDrivers
    51                                  
    52                                      ;Open NUL
    53 0000018D 488D9D[B6000000]            lea rbx, qword [rbp + nulDevHdr + drvHdr.strPtr]    ;Get ptr to strat ptr
    54 00000194 488B1B                      mov rbx, qword [rbx]    ;Get strat ptr
    55 00000197 30C0                        xor al, al
    56 00000199 FFD3                        call rbx
    57                                  
    58                                  ;Open CON
    59                                  conInit:    ;Rather than keeping this resident... do it here
    60                                  .ci0:
    61 0000019B B401                        mov ah, 01      ;Get buffer status
    62 0000019D CD36                        int 36h
    63 0000019F 7406                        jz .ci1      ;If zero clear => no more keys to read
    64 000001A1 30E4                        xor ah, ah
    65 000001A3 CD36                        int 36h ;Read key to flush from buffer
    66 000001A5 EBF4                        jmp short .ci0
    67                                  .ci1:
    68 000001A7 B800050000                  mov eax, 0500h  ;Set page zero as the default page
    69 000001AC CD30                        int 30h
    70 000001AE B402                        mov ah, 02h
    71 000001B0 31D2                        xor edx, edx    ;Set screen cursor to top right corner
    72 000001B2 88D7                        mov bh, dl      ;Set cursor for page 0
    73 000001B4 CD30                        int 30h
    74 000001B6 B707                        mov bh, 07h     ;Grey/Black attribs
    75 000001B8 B800060000                  mov eax, 0600h  ;Clear whole screen
    76 000001BD CD30                        int 30h
    77                                  
    78                                      ;Open Mass Storage
    79 000001BF 48BB-                       mov rbx, msdDriver
    79 000001C1 [9B0D000000000000] 
    80 000001C9 488D5C1D00                  lea rbx, qword [rbp+rbx]
    81 000001CE 30C0                        xor al, al
    82 000001D0 FFD3                        call rbx
    83                                  ;Adjust Int 41h address table
    84                                  
    85                                  adjInt41h:
    86 000001D2 B96A000000                  mov ecx, dispatchTableL/8 ;Number of elements in table
    87 000001D7 48BB-                       mov rbx, functionDispatch.dispatchTable ;Get EA of table
    87 000001D9 [A901000000000000] 
    88 000001E1 488D5C1D00                  lea rbx, qword [rbp+rbx]    ;Point to the start of the relocated table 
    89                                  .ai41h:
    90 000001E6 48012B                      add qword [rbx], rbp    ;Add base address value to entry in reloc table
    91 000001E9 4881C308000000              add rbx, 8              ;Each entry is size 8
    92 000001F0 FFC9                        dec ecx
    93 000001F2 75F2                        jnz .ai41h  ;Keep looping until all entries have been adjusted
    94                                  
    95                                  ;Adjust Interrupt Entries Int 40h-49h
    96                                  adjInts:
    97 000001F4 B340                        mov bl, 40h
    98 000001F6 B807F00000                  mov eax, 0F007h ;Get the descriptor
    99 000001FB CD35                        int 35h
   100 000001FD B940000000                  mov ecx, 40h    ;Start from interrupt 40h
   101 00000202 488D3D7A000000              lea rdi, intData
   102 00000209 89C6                        mov esi, eax    ;Move segment selector info to esi
   103                                  .ai0:
   104 0000020B B808F00000                  mov eax, 0F008h ;Set the descriptor
   105 00000210 488B1F                      mov rbx, qword [rdi]    ;Get address pointed to by rdi
   106 00000213 4801EB                      add rbx, rbp            ;Add the relocated base to rbx
   107 00000216 CD35                        int 35h
   108 00000218 4881C708000000              add rdi, 8
   109 0000021F FFC1                        inc ecx
   110 00000221 81F94A000000                cmp ecx, 4Ah
   111 00000227 75E2                        jne .ai0
   112                                  
   113                                  ;Test Error Case
   114 00000229 B430                        mov ah, 00110000b
   115 0000022B B000                        mov al, 00h
   116 0000022D BF0C000000                  mov edi, 0Ch
   117 00000232 CD44                        int 44h
   118                                  
   119                                  
   120 00000234 488D1530000000              lea rdx, qword [startmsg]   ;Get the absolute address of message
   121 0000023B B409                        mov ah, 09h
   122 0000023D CD41                        int 41h
   123                                  
   124 0000023F 64488B3425-                 mov rsi, fs:[nulDevHdr]
   124 00000244 [AC000000]         
   125 00000248 B801C50000                  mov eax, 0C501h ;Connect debugger
   126 0000024D CD35                        int 35h
   127 0000024F 6687DB                      xchg bx, bx
   128                                  l1:
   129 00000252 B401                        mov ah, 01h  ;Write with echo
   130 00000254 CD41                        int 41h
   131 00000256 EBFA                        jmp short l1
   132                                  adjustDrvHdr:
   133                                  ;Input: rsi = Effective address of driver in DOS segment
   134                                  ;       rbp = Ptr to the start of the DOS segment
   135                                  ;Output: rsi = EA of next header in DOS segment
   136 00000258 48012E                      add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   137 0000025B 48016E0A                    add qword [rsi + drvHdr.strPtr], rbp
   138 0000025F 48016E12                    add qword [rsi + drvHdr.intPtr], rbp
   139 00000263 4881C622000000              add rsi, drvHdr_size
   140 0000026A C3                          ret
   141                                  
   142 0000026B 0A0D5374617274696E-     startmsg db 0Ah,0Dh,"Starting SCP/DOS...",0Ah,0Dh,"$"
   142 00000274 67205343502F444F53-
   142 0000027D 2E2E2E0A0D24       
   143                                  intData:
   144 00000283 [5900000000000000]          dq terminateProcess ;Int 40h
   145 0000028B [5900000000000000]          dq functionDispatch ;Int 41h
   146 00000293 [F904000000000000]          dq terminateHandler ;Int 42h
   147 0000029B [F904000000000000]          dq ctrlCHandler     ;Int 43h
   148 000002A3 [F904000000000000]          dq critErrorHandler ;Int 44h
   149 000002AB [8C07000000000000]          dq absDiskRead      ;Int 45h
   150 000002B3 [A107000000000000]          dq absDiskWrite     ;Int 46h
   151 000002BB [B607000000000000]          dq terminateResident    ;Int 47h
   152 000002C3 [B607000000000000]          dq inDosHandler     ;Int 48h
   153 000002CB [B807000000000000]          dq fastOutput       ;Int 49h
   154                                  nData:
   155 000002D3 [C407000000000000]          dq conHdr
   156 000002DB 0480                        dw 08004h
   157 000002DD [6C09000000000000]          dq nulStrat
   158 000002E5 [7209000000000000]          dq nulIntr
   159 000002ED 4E554C2020202020            db "NUL     " ;Default NUL data
   160                                  
   161                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 
   162                                  ;-----------------------------------:
   163                                  ;       Misc System routines        :
   164                                  ;-----------------------------------:
   165                                  findLRUBuffer: 
   166                                  ;Finds least recently used buffer, links it and returns ptr to it in rbx
   167                                  ;Input: Nothing
   168                                  ;Output: rbx = Pointer to the buffer to use
   169 00000000 52                          push rdx
   170 00000001 488B1D(8F000000)            mov rbx, qword [bufHeadPtr]
   171 00000008 48813BFFFFFFFF              cmp qword [rbx + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   172 0000000F 7502                        jne .flb1
   173 00000011 5A                          pop rdx
   174 00000012 C3                          ret
   175                                  .flb1:
   176 00000013 4889DA                      mov rdx, rbx    ;Save a ptr to the previous buffer header
   177 00000016 488B1A                      mov rbx, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   178 00000019 48813BFFFFFFFF              cmp qword [rbx + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   179 00000020 75F1                        jne .flb1   ;If not LRU, keep walking, else process
   180 00000022 48C702FFFFFFFF              mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   181 00000029 488B15(8F000000)            mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   182 00000030 48891D(8F000000)            mov qword [bufHeadPtr], rbx    ;Sysvars to point to new buffer
   183 00000037 488913                      mov qword [rbx + bufferHdr.nextBufPtr], rdx
   184 0000003A 5A                          pop rdx
   185 0000003B C3                          ret
   186                                  
   187                                  findDPB:
   188                                  ;Finds the DPB for a given drive
   189                                  ;Input:   dl = Drive number (0=A, 1=B etc...)
   190                                  ;Output: al = 00, rbx = Pointer to the DPB
   191                                  ;        al = -1, Failed, no DPB for device, rbx destroyed
   192 0000003C 488B1D(6D000000)            mov rbx, qword [dpbHeadPtr]
   193                                  .fd1:
   194 00000043 30C0                        xor al, al
   195 00000045 3813                        cmp byte [rbx + dpb.bDriveNumber], dl
   196 00000047 740F                        je .fd2
   197 00000049 488B5B26                    mov rbx, qword [rbx + dpb.qNextDPBPtr]
   198 0000004D B0FF                        mov al, -1
   199 0000004F 4881FBFFFFFFFF              cmp rbx, -1 ;If rbx followed last item in list, no DPB exists for dl
   200 00000056 75EB                        jne .fd1
   201                                  .fd2:
   202 00000058 C3                          ret
   203                                  callCritError:
   204                                  ;Common Procedure to swap stacks and call Critical Error Interrupt
   205                                  ;-----------------------------------:
   206                                  ;       File System routines        :
   207                                  ;-----------------------------------:
   208                                  name2Clust:
   209                                  ;Converts a file name to a first cluster number
   210                                  ;-----------------------------------:
   211                                  ;        Interrupt routines         :
   212                                  ;-----------------------------------:
   213                                  terminateProcess:   ;Int 40h
   214                                  
   215                                  functionDispatch:   ;Int 41h Main function dispatcher
   216                                  ;ah = Function number, all other registers have various meanings
   217 00000059 FA                          cli ;Halt external interrupts
   218 0000005A FC                          cld ;Ensure all string ops occur in the right direction
   219 0000005B 80FC6A                      cmp ah, dispatchTableL/8    ;Number of functions
   220 0000005E 0F871E010000                ja .fdExitBad
   221                                      ;Cherry pick functions
   222 00000064 80FC33                      cmp ah, 33h ;CTRL+BREAK check
   223 00000067 722C                        jb .fsbegin   ;If below skip these checks
   224 00000069 0F8439010000                je .ctrlBreakCheck
   225 0000006F 80FC64                      cmp ah, 64h
   226 00000072 0F8430010000                je .setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
   227 00000078 771B                        ja .fsbegin   ;If above, do usual Int41 entry
   228 0000007A 80FC51                      cmp ah, 51h
   229 0000007D 0F8425010000                je .getCurrProcessID    ;This an below are exactly the same
   230 00000083 80FC62                      cmp ah, 62h
   231 00000086 0F841C010000                je .getPSPaddr          ;Calls the above function
   232 0000008C 80FC50                      cmp ah, 50h
   233 0000008F 0F8413010000                je .setCurrProcessID
   234                                  .fsbegin:
   235                                      pushDOS ;Push the usual prologue registers
   192 00000095 4151                <1>  push r9
   193 00000097 4150                <1>  push r8
   194 00000099 55                  <1>  push rbp
   195 0000009A 57                  <1>  push rdi
   196 0000009B 56                  <1>  push rsi
   197 0000009C 52                  <1>  push rdx
   198 0000009D 51                  <1>  push rcx
   199 0000009E 53                  <1>  push rbx
   200 0000009F 50                  <1>  push rax
   236 000000A0 488B05(0D010000)            mov rax, qword [oldRSP]
   237 000000A7 488905(05010000)            mov qword [oldoldRSP], rax
   238 000000AE FE05(CF000000)              inc byte [inDOS]    ;Increment in DOS flag
   239 000000B4 488925(0D010000)            mov qword [oldRSP], rsp
   240                                  ;Here, we want to save oldRSP in the callers PSP
   241 000000BB 803D(CF000000)01            cmp byte [inDOS], 1 ;Check how many times we are in DOS
   242 000000C2 750B                        jne .fsb1   ;If this is first entry, save rsp in callers PSP
   243 000000C4 488B05(DE000000)            mov rax, qword [currentPSP] ;Get current PSP address
   244 000000CB 48896046                    mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
   245                                  .fsb1:
   246 000000CF 58                          pop rax     ;Get old rax back
   247 000000D0 50                          push rax    ;and push it back onto the stack
   248 000000D1 488D25(56060000)            lea rsp, critStakTop
   249 000000D8 FB                          sti         ;Reenable interrupts
   250                                  
   251 000000D9 C605(04010000)01            mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
   252                                  
   253 000000E0 48891D(15010000)            mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
   254 000000E7 0FB6DC                      movzx ebx, ah   ;Move the function number bl zero extended to rbx
   255 000000EA C1E303                      shl ebx, 3      ;Multiply the function number by 8 for offset into table
   256 000000ED 50                          push rax        ;Push rax onto the stack
   257 000000EE 488D05B4000000              lea rax, qword [.dispatchTable]
   258 000000F5 4801C3                      add rbx, rax    ;Add dispatch table offset into rbx
   259 000000F8 58                          pop rax
   260 000000F9 488B1B                      mov rbx, qword [rbx]    ;Get the address from the dispatch table
   261                                  
   262 000000FC 84E4                        test ah, ah     ;Simple Terminate function?
   263 000000FE 741C                        jz .fddiskOp
   264 00000100 80FC59                      cmp ah, 59h     ;Extended Error report?
   265 00000103 7443                        je .fdGoToFunction  ;Bypass code that clears the error report
   266 00000105 80FC0C                      cmp ah, 0Ch     ;Are we a char function?
   267 00000108 7712                        ja .fddiskOp
   268                                  ;Char operations here
   269 0000010A F605(CE000000)01            test byte [critErrFlag], 1  ;Are we in critical error?
   270 00000111 7535                        jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   271 00000113 488D25(960C0000)            lea rsp, IOStakTop          ;Otherwise, switch to IO stack
   272 0000011A EB2C                        jmp short .fdGoToFunction
   273                                  .fddiskOp:
   274                                      ;Disk operations go here
   275                                      ;Clear up error info
   276 0000011C C605(D1000000)01            mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   277 00000123 C605(CE000000)00            mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   278 0000012A C605(D0000000)FF            mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   279                                  
   280 00000131 C605(04010000)00            mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   281 00000138 488D25(D6120000)            lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   282 0000013F F605(F9000000)FF            test byte [breakFlag], -1   ;Test if set
   283 00000146 7400                        jz .fdGoToFunction
   284                                  ; HANDLE CTRL+BREAK HERE!
   285                                  .fdGoToFunction:
   286 00000148 48871D(15010000)            xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   287                                      ;Potentially point rbp to caller reg frame for easy access of registers 
   288                                      ;mov rbp, qword [oldRSP]    ;Move rsp on entry into rbp
   289 0000014F FF15(15010000)              call qword [oldRBX]     ;Call the desired function, rax contains ret code
   290                                  .fdExit:
   291 00000155 FA                          cli     ;Redisable interrupts
   292                                      ;???
   293 00000156 FE0D(CF000000)              dec byte [inDOS]            ;Decrement the inDOS count
   294 0000015C 488B25(0D010000)            mov rsp, qword [oldRSP]     ;Point rsp to old stack
   295 00000163 48890424                    mov qword [rsp], rax    ;Put the ret code into its pos on the register frame
   296 00000167 488B05(05010000)            mov rax, qword [oldoldRSP]
   297 0000016E 488905(0D010000)            mov qword [oldRSP], rax
   298                                      popDOS  ;Pop the frame
   204 00000175 58                  <1>  pop rax
   205 00000176 5B                  <1>  pop rbx
   206 00000177 59                  <1>  pop rcx
   207 00000178 5A                  <1>  pop rdx
   208 00000179 5E                  <1>  pop rsi
   209 0000017A 5F                  <1>  pop rdi
   210 0000017B 5D                  <1>  pop rbp
   211 0000017C 4158                <1>  pop r8
   212 0000017E 4159                <1>  pop r9
   299 00000180 48CF                        iretq
   300                                  .fdExitBad:
   301 00000182 B400                        mov ah, 0
   302 00000184 48CF                        iretq
   303                                  .simpleTerminate:     ;ah = 00h
   304 00000186 C3                          ret
   305                                  .stdinReadEcho:     ;ah = 01h
   306 00000187 30E4                        xor ah, ah
   307 00000189 CD36                        int 36h
   308 0000018B CD49                        int 49h ;Pass al to fast output
   309 0000018D C3                          ret
   310                                  .stdoutWrite:       ;ah = 02h
   311                                  ;Bspace is regular cursor left, does not insert a blank
   312 0000018E 50                          push rax
   313 0000018F 88D0                        mov al, dl
   314 00000191 CD49                        int 49h
   315 00000193 58                          pop rax
   316 00000194 C3                          ret
   317                                  .stdauxRead:        ;ah = 03h
   318                                  .stdauxWrite:       ;ah = 04h
   319                                  .stdprnWrite:       ;ah = 05h
   320                                  .directCONIO:       ;ah = 06h
   321                                  .waitDirectInNoEcho:;ah = 07h
   322                                  .waitStdinNoEcho:   ;ah = 08h
   323 00000195 C3                          ret
   324                                  .printString:       ;ah = 09h
   325 00000196 50                          push rax
   326 00000197 52                          push rdx
   327                                  .ps0:
   328 00000198 8A02                        mov al, byte [rdx]
   329 0000019A 3C24                        cmp al, "$"
   330 0000019C 7407                        je .ps1
   331 0000019E 48FFC2                      inc rdx ;Goto next char
   332 000001A1 CD49                        int 49h ;Print char in al
   333 000001A3 EBF3                        jmp short .ps0
   334                                  .ps1:
   335 000001A5 5A                          pop rdx
   336 000001A6 58                          pop rax
   337 000001A7 C3                          ret
   338                                  .buffStdinInput:    ;ah = 0Ah
   339                                  .checkStdinStatus:  ;ah = 0Bh
   340                                  .clearbuffDoFunc:   ;ah = 0Ch
   341                                  .diskReset:         ;ah = 0Dh
   342                                  .selectDisk:        ;ah = 0Eh
   343                                  .openFileFCB:       ;ah = 0Fh
   344                                  .closeFileFCB:      ;ah = 10h
   345                                  .findFirstFileFCB:  ;ah = 11h
   346                                  .findNextFileFCB:   ;ah = 12h
   347                                  .deleteFileFCB:     ;ah = 13h
   348                                  .sequentialReadFCB: ;ah = 14h
   349                                  .sequentialWriteFCB:;ah = 15h
   350                                  .createFileFCB:     ;ah = 16h
   351                                  .renameFileFCB:     ;ah = 17h
   352                                                      ;ah = 18h unused
   353                                  .getCurrentDisk:       ;ah = 19h, get current default drive
   354                                  .setDTA:            ;ah = 1Ah
   355                                  .FATinfoDefault:    ;ah = 1Bh
   356                                  .FatinfoDevice:     ;ah = 1Ch
   357                                                      ;ah = 1Dh unused
   358                                                      ;ah = 1Eh unused
   359                                  .getCurrentDPBptr:  ;ah = 1Fh, simply calls int 41h ah = 32h with dl = 0
   360                                                      ;ah = 20h unused
   361                                  .randomReadFCB:     ;ah = 21h
   362                                  .randomWriteFCB:    ;ah = 22h
   363                                  .getFileSizeFCB:    ;ah = 23h
   364                                  .setRelRecordFCB:   ;ah = 24h
   365                                  .setIntVector:      ;ah = 25h
   366                                  .createNewPSP:      ;ah = 26h
   367                                  .randBlockReadFCB:  ;ah = 27h
   368                                  .randBlockWriteFCB: ;ah = 28h
   369                                  .parseFilenameFCB:  ;ah = 29h
   370                                  .getDate:           ;ah = 2Ah
   371                                  .setDate:           ;ah = 2Bh
   372                                  .getTime:           ;ah = 2Ch
   373                                  .setTime:           ;ah = 2Dh
   374                                  .setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   375                                  .getDTA:            ;ah = 2Fh
   376                                  .getDOSversion:     ;ah = 30h
   377                                  .terminateStayRes:  ;ah = 31h
   378                                  .getDeviceDPBptr:   ;ah = 32h
   379                                  .ctrlBreakCheck:    ;ah = 33h
   380                                  .getInDOSflagPtr:   ;ah = 34h
   381                                  .getIntVector:      ;ah = 35h
   382                                  .getDiskFreeSpace:  ;ah = 36h
   383                                  .getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
   384                                  .getsetCountryInfo: ;ah = 38h, localisation info
   385                                  .makeDIR:           ;ah = 39h
   386                                  .removeDIR:         ;ah = 3Ah
   387                                  .changeCurrentDIR:  ;ah = 3Bh, changes directory for current drive
   388                                  .createFileHdl:     ;ah = 3Ch, handle function
   389                                  .openFileHdl:       ;ah = 3Dh, handle function
   390                                  .closeFileHdl:      ;ah = 3Eh, handle function
   391                                  .readFileHdl:       ;ah = 3Fh, handle function
   392                                  .writeFileHdl:      ;ah = 40h, handle function
   393                                  .deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   394                                  .movFileReadPtr:    ;ah = 42h, handle function, LSEEK
   395                                  .changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   396                                  .ioctrl:            ;ah = 44h, handle function
   397                                  .duplicateHandle:   ;ah = 45h, handle function
   398                                  .forceDuplicateHdl: ;ah = 46h, handle function
   399                                  .getCurrentDIR:     ;ah = 47h
   400                                  .allocateMemory:    ;ah = 48h
   401                                  .freeMemory:        ;ah = 49h
   402                                  .reallocMemory:     ;ah = 4Ah
   403                                  .loadExecChild:     ;ah = 4Bh, EXEC
   404                                  .terminateClean:    ;ah = 4Ch, EXIT
   405                                  .getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   406                                  .findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   407                                  .findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   408                                  .setCurrProcessID:  ;ah = 50h, set current process ID
   409                                  .getCurrProcessID:  ;ah = 51h, get current process ID
   410                                  .getSysVarsPtr:     ;ah = 52h
   411                                  .createDPB:         ;ah = 53h, generates a DPB from a given BPB
   412                                  .getVerifySetting:  ;ah = 54h
   413                                  .createPSP:         ;ah = 55h, creates a PSP for a program
   414                                  .renameFile:        ;ah = 56h
   415                                  .getSetFileDateTime:;ah = 57h
   416                                  .getsetMallocStrat: ;ah = 58h
   417                                  .getExtendedError:  ;ah = 59h
   418                                  .createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   419                                  .createNewFile:     ;ah = 5Bh
   420                                  .lockUnlockFile:    ;ah = 5Ch
   421                                  .getCritErrorInfo:  ;ah = 5Dh
   422                                  .networkServices:   ;ah = 5Eh, do nothing
   423                                  .networkRedirection:;ah = 5Fh, do nothing
   424                                  .trueName:          ;ah = 60h, get fully qualified name
   425                                                      ;ah = 61h, reserved
   426                                  .getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   427                                                      ;ah = 63h, reserved
   428                                  .setDriverLookahead:;ah = 64h, reserved
   429                                  .getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
   430                                  .getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
   431                                  .setHandleCount:    ;ah = 67h
   432                                  .commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   433                                  .getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   434                                  .return:
   435 000001A8 C3                          ret
   436                                  
   437                                  
   438                                  .dispatchTable:
   439 000001A9 [8601000000000000]          dq .simpleTerminate     ;AH = 00H, PROCESS MANAGEMENT
   440 000001B1 [8701000000000000]          dq .stdinReadEcho       ;AH = 01H, CHAR IO
   441 000001B9 [8E01000000000000]          dq .stdoutWrite         ;AH = 02H, CHAR IO
   442 000001C1 [9501000000000000]          dq .stdauxRead          ;AH = 03H, CHAR IO
   443 000001C9 [9501000000000000]          dq .stdauxWrite         ;AH = 04H, CHAR IO
   444 000001D1 [9501000000000000]          dq .stdprnWrite         ;AH = 05H, CHAR IO
   445 000001D9 [9501000000000000]          dq .directCONIO         ;AH = 06H, CHAR IO
   446 000001E1 [9501000000000000]          dq .waitDirectInNoEcho  ;AH = 07H, CHAR IO
   447 000001E9 [9501000000000000]          dq .waitStdinNoEcho     ;AH = 08H, CHAR IO
   448 000001F1 [9601000000000000]          dq .printString         ;AH = 09H, CHAR IO
   449 000001F9 [A801000000000000]          dq .buffStdinInput      ;AH = 0AH, CHAR IO
   450 00000201 [A801000000000000]          dq .checkStdinStatus    ;AH = 0BH, CHAR IO
   451 00000209 [A801000000000000]          dq .clearbuffDoFunc     ;AH = 0CH, CHAR IO
   452 00000211 [A801000000000000]          dq .diskReset           ;AH = 0DH, DISK MANAGEMENT
   453 00000219 [A801000000000000]          dq .selectDisk          ;AH = 0EH, DISK MANAGEMENT
   454 00000221 [A801000000000000]          dq .openFileFCB         ;AH = 0FH, FILE OPERATION       FCB
   455 00000229 [A801000000000000]          dq .closeFileFCB        ;AH = 10H, FILE OPERATION       FCB
   456 00000231 [A801000000000000]          dq .findFirstFileFCB    ;AH = 11H, FILE OPERATION       FCB
   457 00000239 [A801000000000000]          dq .findNextFileFCB     ;AH = 12H, FILE OPERATION       FCB
   458 00000241 [A801000000000000]          dq .deleteFileFCB       ;AH = 13H, FILE OPERATION       FCB
   459 00000249 [A801000000000000]          dq .sequentialReadFCB   ;AH = 14H, RECORD OPERATION     FCB
   460 00000251 [A801000000000000]          dq .sequentialWriteFCB  ;AH = 15H, RECORD OPERTAION     FCB
   461 00000259 [A801000000000000]          dq .createFileFCB       ;AH = 16H, FILE OPERATION       FCB
   462 00000261 [A801000000000000]          dq .renameFileFCB       ;AH = 17H, FILE OPERATION       FCB
   463 00000269 [A801000000000000]          dq .return              ;AH = 18H, RESERVED
   464 00000271 [A801000000000000]          dq .getCurrentDisk      ;AH = 19H, DISK MANAGEMENT
   465 00000279 [A801000000000000]          dq .setDTA              ;AH = 1AH, RECORD OPERATION     F/H
   466 00000281 [A801000000000000]          dq .FATinfoDefault      ;AH = 1BH, DISK MANAGEMENT
   467 00000289 [A801000000000000]          dq .FatinfoDevice       ;AH = 1CH, DISK MANAGEMENT
   468 00000291 [A801000000000000]          dq .return              ;AH = 1DH, RESERVED
   469 00000299 [A801000000000000]          dq .return              ;AH = 1EH, RESERVED
   470 000002A1 [A801000000000000]          dq .getCurrentDPBptr    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
   471 000002A9 [A801000000000000]          dq .return              ;AH = 20H, RESERVED
   472 000002B1 [A801000000000000]          dq .randomReadFCB       ;AH = 21H, RECORD OPERATION     FCB
   473 000002B9 [A801000000000000]          dq .randomWriteFCB      ;AH = 22H, RECORD OPERATION     FCB
   474 000002C1 [A801000000000000]          dq .getFileSizeFCB      ;AH = 23H, FILE OPERATION       FCB
   475 000002C9 [A801000000000000]          dq .setRelRecordFCB     ;AH = 24H, RECORD OPERATION     FCB
   476 000002D1 [A801000000000000]          dq .setIntVector        ;AH = 25H, MISC. SYS. FUNCTION
   477 000002D9 [A801000000000000]          dq .createNewPSP        ;AH = 26H, PROCESS MANAGEMENT
   478 000002E1 [A801000000000000]          dq .randBlockReadFCB    ;AH = 27H, RECORD OPERATION     FCB
   479 000002E9 [A801000000000000]          dq .randBlockWriteFCB   ;AH = 28H, RECORD OPERATION     FCB
   480 000002F1 [A801000000000000]          dq .parseFilenameFCB    ;AH = 29H, FILE OPERATION       FCB
   481 000002F9 [A801000000000000]          dq .getDate             ;AH = 2AH, TIME AND DATE
   482 00000301 [A801000000000000]          dq .setDate             ;AH = 2BH, TIME AND DATE
   483 00000309 [A801000000000000]          dq .getTime             ;AH = 2CH, TIME AND DATE
   484 00000311 [A801000000000000]          dq .setTime             ;AH = 2DH, TIME AND DATE
   485 00000319 [A801000000000000]          dq .setResetVerify      ;AH = 2EH, DISK MANAGEMENT
   486 00000321 [A801000000000000]          dq .getDTA              ;AH = 2FH, RECORD OPERATION     F/H
   487 00000329 [A801000000000000]          dq .getDOSversion       ;AH = 30H, MISC. SYS. FUNCTION
   488 00000331 [A801000000000000]          dq .terminateStayRes    ;AH = 31H, PROCESS MANAGEMENT
   489 00000339 [A801000000000000]          dq .getDeviceDPBptr     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
   490 00000341 [A801000000000000]          dq .ctrlBreakCheck      ;AH = 33H, MISC. SYS. FUNCTION
   491 00000349 [A801000000000000]          dq .getInDOSflagPtr     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
   492 00000351 [A801000000000000]          dq .getIntVector        ;AH = 35H, MISC. SYS. FUNCTION
   493 00000359 [A801000000000000]          dq .getDiskFreeSpace    ;AH = 36H, DISK MANAGEMENT
   494 00000361 [A801000000000000]          dq .getsetSwitchChar    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
   495 00000369 [A801000000000000]          dq .getsetCountryInfo   ;AH = 38H, MISC. SYS. FUNCTION
   496 00000371 [A801000000000000]          dq .makeDIR             ;AH = 39H, DIRECTORY OPERATION
   497 00000379 [A801000000000000]          dq .removeDIR           ;AH = 3AH, DIRECTORY OPERATION
   498 00000381 [A801000000000000]          dq .changeCurrentDIR    ;AH = 3BH, DIRECTORY OPERATION
   499 00000389 [A801000000000000]          dq .createFileHdl       ;AH = 3CH, FILE OPERATION       HANDLE
   500 00000391 [A801000000000000]          dq .openFileHdl         ;AH = 3DH, FILE OPERATION       HANDLE
   501 00000399 [A801000000000000]          dq .closeFileHdl        ;AH = 3EH, FILE OPERATION       HANDLE
   502 000003A1 [A801000000000000]          dq .readFileHdl         ;AH = 3FH, RECORD OPERATION     HANDLE
   503 000003A9 [A801000000000000]          dq .writeFileHdl        ;AH = 40H, RECORD OPERATION     HANDLE
   504 000003B1 [A801000000000000]          dq .deleteFileHdl       ;AH = 41H, FILE OPERATION       HANDLE
   505 000003B9 [A801000000000000]          dq .movFileReadPtr      ;AH = 42H, RECORD OPERATION     HANDLE
   506 000003C1 [A801000000000000]          dq .changeFileModeHdl   ;AH = 43H, FILE OPERATION       HANDLE
   507 000003C9 [A801000000000000]          dq .ioctrl              ;AH = 44H, MISC. SYS. FUNCTION
   508 000003D1 [A801000000000000]          dq .duplicateHandle     ;AH = 45H, FILE OPERATION       HANDLE
   509 000003D9 [A801000000000000]          dq .forceDuplicateHdl   ;AH = 46H, FILE OPERATION       HANDLE
   510 000003E1 [A801000000000000]          dq .getCurrentDIR       ;AH = 47H, DIRECTORY OPERATION
   511 000003E9 [A801000000000000]          dq .allocateMemory      ;AH = 48H, MEMORY MANAGEMENT
   512 000003F1 [A801000000000000]          dq .freeMemory          ;AH = 49H, MEMORY MANAGEMENT
   513 000003F9 [A801000000000000]          dq .reallocMemory       ;AH = 4AH, MEMORY MANAGEMENT
   514 00000401 [A801000000000000]          dq .loadExecChild       ;AH = 4BH, PROCESS MANAGEMENT
   515 00000409 [A801000000000000]          dq .terminateClean      ;AH = 4CH, PROCESS MANAGEMENT
   516 00000411 [A801000000000000]          dq .getRetCodeChild     ;AH = 4DH, PROCESS MANAGEMENT
   517 00000419 [A801000000000000]          dq .findFirstFileHdl    ;AH = 4EH, FILE OPERATION       HANDLE
   518 00000421 [A801000000000000]          dq .findNextFileHdl     ;AH = 4FH, FILE OPERATION       HANDLE
   519 00000429 [A801000000000000]          dq .setCurrProcessID    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   520 00000431 [A801000000000000]          dq .getCurrProcessID    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   521 00000439 [A801000000000000]          dq .getSysVarsPtr       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   522 00000441 [A801000000000000]          dq .createDPB           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   523 00000449 [A801000000000000]          dq .getVerifySetting    ;AH = 54H, DISK MANAGEMENT
   524 00000451 [A801000000000000]          dq .createPSP           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   525 00000459 [A801000000000000]          dq .renameFile          ;AH = 56H, FILE OPERATION       HANDLE
   526 00000461 [A801000000000000]          dq .getSetFileDateTime  ;AH = 57H, FILE OPERATION       HANDLE
   527 00000469 [A801000000000000]          dq .getsetMallocStrat   ;AH = 58H, MEMORY MANAGEMENT
   528 00000471 [A801000000000000]          dq .getExtendedError    ;AH = 59H, MISC. SYS. FUNCTION
   529 00000479 [A801000000000000]          dq .createUniqueFile    ;AH = 5AH, FILE OPERATION       HANDLE
   530 00000481 [A801000000000000]          dq .createNewFile       ;AH = 5BH, FILE OPERATION       HANDLE
   531 00000489 [A801000000000000]          dq .lockUnlockFile      ;AH = 5CH, RECORD OPERATION     HANDLE
   532 00000491 [A801000000000000]          dq .getCritErrorInfo    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   533 00000499 [A801000000000000]          dq .networkServices     ;AH = 5EH, RESERVED NETWORK FUNCTION
   534 000004A1 [A801000000000000]          dq .networkRedirection  ;AH = 5FH, RESERVED NETWORK FUNCTION
   535 000004A9 [A801000000000000]          dq .trueName            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   536 000004B1 [A801000000000000]          dq .return              ;AH = 61H, RESERVED
   537 000004B9 [A801000000000000]          dq .getPSPaddr          ;AH = 62H, PROCESS MANAGEMENT
   538 000004C1 [A801000000000000]          dq .return              ;AH = 63H, RESERVED
   539 000004C9 [A801000000000000]          dq .setDriverLookahead  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   540 000004D1 [A801000000000000]          dq .getExtLocalInfo     ;AH = 65H, MISC. SYS. FUNCTION
   541 000004D9 [A801000000000000]          dq .getsetGlobalCP      ;AH = 66H, MISC. SYS. FUNCTION
   542 000004E1 [A801000000000000]          dq .setHandleCount      ;AH = 67H, FILE OPERAITON       F/H
   543 000004E9 [A801000000000000]          dq .commitFile          ;AH = 68H, FILE OPERATION       HANDLE
   544 000004F1 [A801000000000000]          dq .getsetDiskSerial    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   545                                  dispatchTableL  equ $ - .dispatchTable 
   546                                  
   547                                  terminateHandler:   ;Int 42h
   548                                  ctrlCHandler:       ;Int 43h
   549                                  critErrorHandler:   ;Int 44h
   550                                  ;User Stack in usage here, must be swapped to before this is called
   551                                  ;Entered with:  
   552                                  ;               AH = Critical Error Bitfield
   553                                  ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
   554                                  ;               Bit 6 - Reserved
   555                                  ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
   556                                  ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
   557                                  ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
   558                                  ;               Bits [2-1] = Affected Disk Error
   559                                  ;                     0 0   DOS area
   560                                  ;                     0 1   FAT area
   561                                  ;                     1 0   Directory area
   562                                  ;                     1 1   Data area
   563                                  ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   564                                  ;               AL  = Failing drive number if AH[7] = 0
   565                                  ;               DIL = Error code for errorMsg
   566                                  ;               RSI = EA of Device Header for which device the error occured
   567                                  ;Return:
   568                                  ;               AL = 0 - Ignore the Error       (Ignore)
   569                                  ;                  = 1 - Retry the Operation    (Retry)
   570                                  ;                  = 2 - Terminate the Program  (Abort)
   571                                  ;                  = 3 - Fail the DOS call      (Fail)
   572 000004F9 53                          push rbx
   573 000004FA 51                          push rcx
   574 000004FB 52                          push rdx
   575 000004FC 57                          push rdi
   576 000004FD 56                          push rsi
   577 000004FE FC                          cld         ;Make String ops go forward
   578                                  
   579 000004FF 6689C3                      mov bx, ax  ;Save ah in bh and al in bl (if needed)
   580 00000502 488D155E020000              lea rdx, qword [.crlf]
   581 00000509 B409                        mov ah, 09h ;Print String
   582 0000050B CD41                        int 41h     ;Call DOS to print CRLF part of message
   583                                  
   584 0000050D 81E7FF000000                and edi, 00FFh   ;Zero the upper bytes of DI just in case
   585 00000513 B90C000000                  mov ecx, 0Ch
   586 00000518 39CF                        cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
   587 0000051A 0F47F9                      cmova edi, ecx  ;If it is, move Gen Error into edi
   588 0000051D 480FB7FF                    movzx rdi, di
   589 00000521 4889FA                      mov rdx, rdi    ;Copy error code
   590 00000524 48C1E704                    shl rdi, 4  ;Multiply by 16
   591 00000528 48D1E2                      shl rdx, 1  ;Multiply by 2
   592 0000052B 4801D7                      add rdi, rdx    ;Add the resultant multiplications
   593 0000052E 488D1523010000              lea rdx, qword [.errorMsgTable]
   594 00000535 488D143A                    lea rdx, qword [rdx+rdi]   ;Load EA to rdx
   595 00000539 B409                        mov ah, 09h ;Print String
   596 0000053B CD41                        int 41h     ;Call DOS to print first part of message
   597                                  
   598 0000053D 488D1505020000              lea rdx, qword [.readmsg]
   599 00000544 488D3D0D020000              lea rdi, qword [.writemsg]
   600 0000054B F6C701                      test bh, 1  ;Bit 0 is set if write operation
   601 0000054E 480F45D7                    cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
   602 00000552 B409                        mov ah, 09h ;Print String
   603 00000554 CD41                        int 41h     ;Call DOS to print error reading/writing portion
   604                                  
   605 00000556 F6C780                      test bh, 80h    ;Test bit 7 for char/Disk assertation
   606 00000559 0F85DF000000                jnz .charError
   607                                  ;Disk error continues here
   608 0000055F 488D15DC010000              lea rdx, qword [.drive] ;Drive message
   609 00000566 B409                        mov ah, 09h
   610 00000568 CD41                        int 41h
   611 0000056A 88DA                        mov dl, bl  ;Get zero based drive number into dl
   612 0000056C 80C241                      add dl, "A" ;Add ASCII code
   613 0000056F B402                        mov ah, 02h ;Print char in dl
   614 00000571 CD41                        int 41h
   615                                  .userInput:
   616 00000573 488D15ED010000              lea rdx, qword [.crlf]  ;Print new line
   617 0000057A B409                        mov ah, 09h
   618 0000057C CD41                        int 41h
   619                                  ;Abort, Retry, Ignore, Fail is word order
   620                                  ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   621                                  .userAbort:
   622                                  ;Abort is always an option
   623 0000057E 488D15E5010000              lea rdx, qword [.abortmsg]
   624 00000585 B409                        mov ah, 09h
   625 00000587 CD41                        int 41h ;Call DOS to prompt user for ABORT option
   626                                  .userRetry:
   627 00000589 F6C710                      test bh, 10h  ;Bit 4 is retry bit
   628 0000058C 7416                        jz .userIgnore    ;If clear, dont print message
   629 0000058E 488D15ED010000              lea rdx, qword [.betweenMsg]
   630 00000595 B409                        mov ah, 09h
   631 00000597 CD41                        int 41h
   632 00000599 488D15D7010000              lea rdx, qword [.retrymsg]
   633 000005A0 B409                        mov ah, 09h
   634 000005A2 CD41                        int 41h
   635                                  .userIgnore:
   636 000005A4 F6C720                      test bh, 20h    ;Bit 5 is ignore bit
   637 000005A7 7416                        jz .userFail
   638 000005A9 488D15D2010000              lea rdx, qword [.betweenMsg]
   639 000005B0 B409                        mov ah, 09h
   640 000005B2 CD41                        int 41h
   641 000005B4 488D15B5010000              lea rdx, qword [.ignoremsg]
   642 000005BB B409                        mov ah, 09h
   643 000005BD CD41                        int 41h
   644                                  .userFail:
   645 000005BF F6C708                      test bh, 08h    ;Bit 3 is Fail bit
   646 000005C2 7416                        jz .userMsgEnd
   647 000005C4 488D15B7010000              lea rdx, qword [.betweenMsg]
   648 000005CB B409                        mov ah, 09h
   649 000005CD CD41                        int 41h
   650 000005CF 488D15A7010000              lea rdx, qword [.failmsg]
   651 000005D6 B409                        mov ah, 09h
   652 000005D8 CD41                        int 41h
   653                                  .userMsgEnd:
   654 000005DA 488D15A4010000              lea rdx, qword [.endMsg]
   655 000005E1 B409                        mov ah, 09h
   656 000005E3 CD41                        int 41h
   657                                  ;Get user input now 
   658 000005E5 31C9                        xor ecx, ecx  ;4 Possible Responses
   659 000005E7 488D3D9A010000              lea rdi, qword [.responses] ;Go to start of string
   660 000005EE B401                        mov ah, 01h ;STDIN without Console Echo
   661 000005F0 CD41                        int 41h ;Get char in al
   662 000005F2 3C61                        cmp al, "a" ;Chack if lowercase
   663 000005F4 7202                        jb .uip1    ;If the value is below, ignore subtraction
   664 000005F6 2C20                        sub al, "a"-"A"  ;Turn the char into uppercase
   665                                  .uip1:
   666 000005F8 AE                          scasb   ;Compare char to list, offset gives return code
   667 000005F9 740F                        je .validInput  ;If they are equal, ecx has return code
   668 000005FB FFC1                        inc ecx
   669 000005FD 81F904000000                cmp ecx, 4
   670 00000603 75F3                        jne .uip1
   671 00000605 E969FFFFFF                  jmp .userInput ;If valid char not found, keep waiting 
   672                                  .validInput:
   673 0000060A 88C8                        mov al, cl  ;Move the offset into .responses into al
   674                                  ;Now check if the input is permitted
   675 0000060C 3C02                        cmp al, 2   ;Check if abort, abort always permitted
   676 0000060E 7427                        je .cehExit
   677 00000610 84C0                        test al, al ;Check if 0 => Ignore
   678 00000612 740F                        je .viIgnore
   679 00000614 3C01                        cmp al, 1   ;Check if 1 => Retry
   680 00000616 7416                        je .viRetry
   681                                  .viFail:    ;Fallthrough for fail (al = 3)
   682 00000618 F6C708                      test bh, 8  ;Bit 3 is Fail bit
   683 0000061B 0F8452FFFFFF                jz .userInput  ;If bit 3 is zero, prompt and get input again
   684 00000621 EB14                        jmp short .cehExit
   685                                  .viIgnore:
   686 00000623 F6C720                      test bh, 20h    ;Bit 5 is Ignore bit
   687 00000626 0F8447FFFFFF                jz .userInput
   688 0000062C EB09                        jmp short .cehExit
   689                                  .viRetry:
   690 0000062E F6C710                      test bh, 10h    ;Bit 4 is Retry bit
   691 00000631 0F843CFFFFFF                jz .userInput
   692                                  .cehExit:
   693 00000637 5E                          pop rsi
   694 00000638 5F                          pop rdi
   695 00000639 5A                          pop rdx
   696 0000063A 59                          pop rcx
   697 0000063B 5B                          pop rbx
   698 0000063C 48CF                        iretq
   699                                  .charError:
   700 0000063E B908000000                  mov ecx, 8  ;8 chars in device name
   701 00000643 4881C61A000000              add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   702                                  .ce1:
   703 0000064A AC                          lodsb   ;Get a string char into al and inc rsi
   704 0000064B 88C2                        mov dl, al  ;Move char into dl
   705 0000064D B402                        mov ah, 02h
   706 0000064F CD41                        int 41h ;Print char
   707 00000651 E2F7                        loop .ce1   ;Keep looping until all 8 char device chars have been printed
   708 00000653 E91BFFFFFF                  jmp .userInput
   709                                  
   710                                  .errorMsgTable: ;Each table entry is 18 chars long
   711 00000658 57726974652050726F-                 db "Write Protect $   "       ;Error 0
   711 00000661 746563742024202020 
   712 0000066A 556E6B6E6F776E2055-                 db "Unknown Unit $    "       ;Error 1
   712 00000673 6E6974202420202020 
   713 0000067C 4E6F74205265616479-                 db "Not Ready $       "       ;Error 2
   713 00000685 202420202020202020 
   714 0000068E 556E6B6E6F776E2043-                 db "Unknown Command $ "       ;Error 3
   714 00000697 6F6D6D616E64202420 
   715 000006A0 446174612024202020-                 db "Data $            "       ;Error 4
   715 000006A9 202020202020202020 
   716 000006B2 426164205265717565-                 db "Bad Request $     "       ;Error 5
   716 000006BB 737420242020202020 
   717 000006C4 5365656B2024202020-                 db "Seek $            "       ;Error 6
   717 000006CD 202020202020202020 
   718 000006D6 556E6B6E6F776E204D-                 db "Unknown Media $   "       ;Error 7
   718 000006DF 656469612024202020 
   719 000006E8 536563746F72204E6F-                 db "Sector Not Found $"       ;Error 8
   719 000006F1 7420466F756E642024 
   720 000006FA 4F7574204F66205061-                 db "Out Of Paper $    "       ;Error 9
   720 00000703 706572202420202020 
   721 0000070C 577269746520466175-                 db "Write Fault $     "       ;Error A
   721 00000715 6C7420242020202020 
   722 0000071E 52656164204661756C-                 db "Read Fault $      "       ;Error B
   722 00000727 742024202020202020 
   723 00000730 47656E6572616C2046-                 db "General Failure $ "       ;Error C
   723 00000739 61696C757265202420 
   724                                  
   725 00000742 64726976652024          .drive      db "drive $"
   726 00000749 6572726F7220726561-     .readmsg    db "error reading $"
   726 00000752 64696E672024       
   727 00000758 6572726F7220777269-     .writemsg   db "error writing $"
   727 00000761 74696E672024       
   728 00000767 0A0D24                  .crlf       db 0Ah, 0Dh, "$"
   729 0000076A 41626F727424            .abortmsg   db "Abort$" 
   730 00000770 49676E6F726524          .ignoremsg  db "Ignore$"
   731 00000777 526574727924            .retrymsg   db "Retry$"
   732 0000077D 4661696C24              .failmsg    db "Fail$"
   733 00000782 2C2024                  .betweenMsg db ", $"
   734 00000785 3F2024                  .endMsg     db "? $"
   735 00000788 49524146                .responses  db "IRAF"   ;Abort Retry Ignore Fail
   736                                  absDiskRead:        ;Int 45h
   737                                  ;al = Drive number
   738                                  ;rbx = Memory Buffer address
   739                                  ;ecx = Number of sectors to read (max 255 for now)
   740                                  ;rdx = Start LBA to read from
   741 0000078C 480FB6C0                    movzx rax, al   ;Zero extend DOS drive number 
   742 00000790 8A80[F1110000]              mov al, byte [msdDriver.msdBIOSmap + rax] ;Get translated BIOS num into al
   743 00000796 4891                        xchg rax, rcx
   744 00000798 4887CA                      xchg rcx, rdx
   745 0000079B B482                        mov ah, 82h
   746 0000079D CD33                        int 33h
   747 0000079F 48CF                        iretq
   748                                  absDiskWrite:       ;Int 46h
   749 000007A1 480FB6C0                    movzx rax, al   ;Zero extend DOS drive number 
   750 000007A5 8A80[F1110000]              mov al, byte [msdDriver.msdBIOSmap + rax] ;Get translated BIOS num into al
   751 000007AB 4891                        xchg rax, rcx
   752 000007AD 4887CA                      xchg rcx, rdx
   753 000007B0 B483                        mov ah, 83h
   754 000007B2 CD33                        int 33h
   755 000007B4 48CF                        iretq
   756                                  terminateResident:  ;Int 47h
   757                                  inDosHandler:       ;Int 48h
   758                                  ;Called when DOS idle
   759 000007B6 48CF                        iretq
   760                                  fastOutput:         ;Int 49h
   761                                  ;Called with char to transfer in al
   762 000007B8 50                          push rax
   763 000007B9 B40E                        mov ah, 0Eh
   764 000007BB CD30                        int 30h
   765 000007BD 58                          pop rax
   766 000007BE 48CF                        iretq
   767                                  passCommand:        ;Int 4Eh, hooked by COMMAND.COM
   768 000007C0 48CF                        iretq
   769                                  multiplex:          ;Int 4Fh, kept as iretq for now
   770 000007C2 48CF                        iretq
   771                                  ;-----------------------------------:
   772                                  ;          Driver routines          :
   773                                  ;-----------------------------------:
   774                                  drivers:
   775                                  conHdr:
   776 000007C4 [E607000000000000]          dq auxHdr
   777 000007CC 1308                        dw 0813h
   778 000007CE [5C09000000000000]          dq commonStrat
   779 000007D6 [7309000000000000]          dq conDriver
   780 000007DE 434F4E2020202020            db "CON     "
   781                                  auxHdr:
   782 000007E6 [0808000000000000]          dq prnHdr
   783 000007EE 0080                        dw 08000h
   784 000007F0 [5C09000000000000]          dq commonStrat
   785 000007F8 [F60B000000000000]          dq com1Intr
   786 00000800 4155582020202020            db "AUX     "
   787                                  prnHdr:
   788 00000808 [2A08000000000000]          dq clkHdr
   789 00000810 40A0                        dw 0A040h
   790 00000812 [6C09000000000000]          dq nulStrat
   791 0000081A [7209000000000000]          dq nulIntr
   792 00000822 50524E2020202020            db "PRN     "
   793                                  clkHdr:
   794 0000082A [4C08000000000000]          dq msdHdr
   795 00000832 0880                        dw 08008h
   796 00000834 [5C09000000000000]          dq commonStrat
   797 0000083C [A50A000000000000]          dq clkDriver
   798 00000844 434C4F434B242020            db "CLOCK$  "
   799                                  msdHdr:
   800 0000084C [6E08000000000000]          dq com1Hdr
   801 00000854 0008                        dw 00800h   ;Once Generic IO implemented, change to 00840h
   802 00000856 [5C09000000000000]          dq commonStrat
   803 0000085E [9B0D000000000000]          dq msdDriver
   804 00000866 0000000000000000            db 0,0,0,0,0,0,0,0
   805                                  com1Hdr:
   806 0000086E [9008000000000000]          dq com2Hdr
   807 00000876 0080                        dw 08000h
   808 00000878 [5C09000000000000]          dq commonStrat
   809 00000880 [F60B000000000000]          dq com1Intr
   810 00000888 434F4D3120202020            db "COM1    "
   811                                  com2Hdr:
   812 00000890 [B208000000000000]          dq com3Hdr
   813 00000898 0080                        dw 08000h
   814 0000089A [5C09000000000000]          dq commonStrat
   815 000008A2 [FF0B000000000000]          dq com2Intr
   816 000008AA 434F4D3220202020            db "COM2    "
   817                                  com3Hdr:
   818 000008B2 [D408000000000000]          dq com4Hdr
   819 000008BA 0080                        dw 08000h
   820 000008BC [5C09000000000000]          dq commonStrat
   821 000008C4 [080C000000000000]          dq com3Intr
   822 000008CC 434F4D3320202020            db "COM3    "
   823                                  com4Hdr:
   824 000008D4 [F608000000000000]          dq lpt1Hdr
   825 000008DC 0080                        dw 08000h
   826 000008DE [5C09000000000000]          dq commonStrat
   827 000008E6 [110C000000000000]          dq com4Intr
   828 000008EE 434F4D3420202020            db "COM4    "
   829                                  lpt1Hdr:
   830 000008F6 [1809000000000000]          dq lpt2Hdr
   831 000008FE 40A0                        dw 0A040h
   832 00000900 [6C09000000000000]          dq nulStrat
   833 00000908 [7209000000000000]          dq nulIntr
   834 00000910 4C50543120202020            db "LPT1    "
   835                                  lpt2Hdr:
   836 00000918 [3A09000000000000]          dq lpt3Hdr
   837 00000920 40A0                        dw 0A040h
   838 00000922 [6C09000000000000]          dq nulStrat
   839 0000092A [7209000000000000]          dq nulIntr
   840 00000932 4C50543220202020            db "LPT2    "
   841                                  lpt3Hdr:
   842 0000093A FFFFFFFFFFFFFFFF            dq -1
   843 00000942 40A0                        dw 0A040h
   844 00000944 [6C09000000000000]          dq nulStrat
   845 0000094C [7209000000000000]          dq nulIntr
   846 00000954 4C50543320202020            dq "LPT3    "
   847                                  
   848                                  commonStrat:
   849                                  ;DOS calls this function with rbx=Ptr to request header
   850 0000095C 48891D01000000              mov qword [reqHdrPtr], rbx
   851 00000963 C3                          ret
   852 00000964 0000000000000000        reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
   853                                  
   854                                  nulStrat:
   855 0000096C 66C743030001                mov word [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
   856                                  nulIntr:
   857 00000972 C3                          ret
   858                                  
   859                                  conDriver:
   860 00000973 50                          push rax
   861 00000974 53                          push rbx
   862 00000975 488B1DE8FFFFFF              mov rbx, qword [reqHdrPtr]
   863 0000097C B003                        mov al, 03h ;Unknown Command
   864 0000097E 807B0218                    cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   865 00000982 7735                        ja .conWriteErrorCode ;If yes, error!
   866                                  
   867 00000984 8A4302                      mov al, byte [rbx + drvReqHdr.cmdcde]
   868 00000987 3C04                        cmp al, 4
   869 00000989 743D                        jz .conRead
   870 0000098B 3C05                        cmp al, 5
   871 0000098D 747F                        jz .conNondestructiveRead
   872 0000098F 3C06                        cmp al, 6
   873 00000991 0F84A2000000                jz .conInputStatus
   874 00000997 3C07                        cmp al, 7
   875 00000999 0F84AA000000                jz .conFlushInputBuffers
   876 0000099F 3C08                        cmp al, 8
   877 000009A1 0F84C4000000                jz .conWrite
   878 000009A7 3C09                        cmp al, 9
   879 000009A9 0F84BC000000                jz .conWrite
   880 000009AF 3C0A                        cmp al, 0Ah
   881 000009B1 0F84DD000000                jz .conOutputStatus
   882 000009B7 EB06                        jmp short .conExit  ;All other valid functions return done
   883                                  .conWriteErrorCode:     ;Jump to with al=Standard Error code
   884 000009B9 B480                        mov ah, 80h ;Set error bit
   885 000009BB 66894303                    mov word [rbx + drvReqHdr.status], ax
   886                                  .conExit:
   887 000009BF 66814B030001                or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   888 000009C5 5B                          pop rbx
   889 000009C6 58                          pop rax
   890 000009C7 C3                          ret
   891                                  .conRead:    ;Function 4
   892 000009C8 B005                        mov al, 05h ;Bad request structure length?
   893 000009CA 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   894 000009CD 75EA                        jne .conWriteErrorCode
   895                                  
   896 000009CF 57                          push rdi
   897 000009D0 51                          push rcx
   898 000009D1 488B7B0E                    mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   899 000009D5 31C9                        xor ecx, ecx    ;Zero the char counter
   900                                  .cre1:
   901 000009D7 3B4B16                      cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   902 000009DA 741C                        je .cre2
   903 000009DC 803DC100000000              cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
   904 000009E3 751A                        jnz .cre3   ;No, get the buffer value
   905 000009E5 31C0                        xor eax, eax
   906 000009E7 CD36                        int 36h
   907                                  .cre11:
   908 000009E9 AA                          stosb
   909 000009EA 84C0                        test al, al ;Was the ascii code 0?
   910 000009EC 7506                        jnz .cre12  ;No, skip storing scancode
   911 000009EE 8825B0000000                mov byte [.conBuf], ah  ;Save scancode
   912                                  .cre12:
   913 000009F4 FFC1                        inc ecx ;Inc chars stored in buffer
   914 000009F6 EBDF                        jmp short .cre1
   915                                  .cre2:
   916 000009F8 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   917 000009FB 59                          pop rcx
   918 000009FC 5F                          pop rdi
   919 000009FD EBC0                        jmp short .conExit
   920                                  .cre3:
   921 000009FF 8A059F000000                mov al, byte [.conBuf]  ;Get the buffer value
   922 00000A05 C6059800000000              mov byte [.conBuf], 0   ;Reset the buffer value
   923 00000A0C EBDB                        jmp short .cre11
   924                                  
   925                                  .conNondestructiveRead:  ;Function 5
   926 00000A0E B005                        mov al, 05h ;Bad request structure length?
   927 00000A10 803B0E                      cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   928 00000A13 75A4                        jne .conWriteErrorCode
   929 00000A15 803D8800000000              cmp byte [.conBuf], 0
   930 00000A1C 7513                        jnz .cnr2
   931 00000A1E B401                        mov ah, 01h     ;Get key if exists
   932 00000A20 CD36                        int 36h
   933 00000A22 7405                        jz .cnr1        ;If zero clear => no key, go forwards
   934                                      ;Keystroke available
   935                                  .cnr0:
   936 00000A24 88430D                      mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Move char in al
   937 00000A27 EB96                        jmp short .conExit
   938                                  .cnr1: ;No keystroke available
   939 00000A29 66C743030002                mov word [rbx + nonDestInNoWaitReqPkt.status], 0200h   ;Set busy bit
   940 00000A2F EB8E                        jmp short .conExit
   941                                  .cnr2:
   942 00000A31 8A056D000000                mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   943 00000A37 EBEB                        jmp short .cnr0   ;Keystroke is available clearly
   944                                  
   945                                  .conInputStatus:         ;Function 6
   946 00000A39 B005                        mov al, 05h ;Bad request structure length?
   947 00000A3B 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   948 00000A3E 0F8575FFFFFF                jne .conWriteErrorCode
   949 00000A44 E976FFFFFF                  jmp .conExit ;Exit, device ready
   950                                  
   951                                  .conFlushInputBuffers:   ;Function 7
   952 00000A49 B005                        mov al, 05h ;Bad request structure length?
   953 00000A4B 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   954 00000A4E 0F8565FFFFFF                jne .conWriteErrorCode
   955 00000A54 C6054900000000              mov byte [.conBuf], 0   ;Clear buffer
   956                                  .cfib0:
   957 00000A5B B401                        mov ah, 01      ;Get buffer status
   958 00000A5D CD36                        int 36h
   959 00000A5F 0F845AFFFFFF                jz .conExit     ;If zero clear => no more keys to read
   960 00000A65 30E4                        xor ah, ah
   961 00000A67 CD36                        int 36h ;Read key to flush from buffer
   962 00000A69 EBF0                        jmp short .cfib0
   963                                  
   964                                  .conWrite:   ;Function 8 and 9
   965 00000A6B B005                        mov al, 05h ;Bad request structure length?
   966 00000A6D 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   967 00000A70 0F8543FFFFFF                jne .conWriteErrorCode
   968                                  
   969 00000A76 56                          push rsi
   970 00000A77 51                          push rcx
   971 00000A78 488B730E                    mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   972 00000A7C 31C9                        xor ecx, ecx    ;Zero the char counter
   973                                  .cw1: 
   974 00000A7E 3B4B16                      cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   975 00000A81 7407                        je .cw2
   976 00000A83 AC                          lodsb   ;Get char into al, and inc rsi
   977 00000A84 CD49                        int 49h ;Fast print char
   978 00000A86 FFC1                        inc ecx
   979 00000A88 EBF4                        jmp short .cw1 ;keep printing until all chars printed
   980                                  .cw2:
   981 00000A8A 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   982 00000A8D 59                          pop rcx
   983 00000A8E 5E                          pop rsi
   984 00000A8F E92BFFFFFF                  jmp .conExit
   985                                  .conOutputStatus:   ;Function 0Ah
   986 00000A94 B005                        mov al, 05h ;Bad request structure length?
   987 00000A96 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   988 00000A99 0F851AFFFFFF                jne .conWriteErrorCode
   989 00000A9F E91BFFFFFF                  jmp .conExit
   990                                  
   991 00000AA4 00                      .conBuf db 0    ;Single byte buffer
   992                                  clkDriver:
   993 00000AA5 50                          push rax
   994 00000AA6 53                          push rbx
   995 00000AA7 51                          push rcx
   996 00000AA8 52                          push rdx
   997 00000AA9 56                          push rsi
   998 00000AAA 57                          push rdi
   999 00000AAB 55                          push rbp
  1000 00000AAC 488B1DB1FEFFFF              mov rbx, qword [reqHdrPtr]
  1001 00000AB3 B003                        mov al, 03h ;Unknown Command
  1002 00000AB5 807B0218                    cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
  1003 00000AB9 772D                        ja .clkWriteErrorCode ;If yes, error!
  1004 00000ABB 80FC04                      cmp ah, 04h
  1005 00000ABE 743C                        jz .clkRead
  1006 00000AC0 80FC06                      cmp ah, 06h
  1007 00000AC3 0F84BE000000                jz .clkInputStatus
  1008 00000AC9 80FC07                      cmp ah, 07h
  1009 00000ACC 0F84C5000000                jz .clkFlushInputBuffers
  1010 00000AD2 80FC08                      cmp ah, 08h
  1011 00000AD5 0F84CC000000                jz .clkWrite
  1012 00000ADB 80FC09                      cmp ah, 09h
  1013 00000ADE 0F84C3000000                jz .clkWrite
  1014 00000AE4 EB08                        jmp short .clkExit  ;All other valid functions return done immediately!
  1015                                  .clkNotFunctioning:
  1016 00000AE6 B002                        mov al, 02h ;Device not ready error
  1017                                  .clkWriteErrorCode:
  1018 00000AE8 B480                        mov ah, 80h ;Set error bit
  1019 00000AEA 66894303                    mov word [rbx + drvReqHdr.status], ax
  1020                                  .clkExit:
  1021 00000AEE 66814B030001                or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
  1022 00000AF4 5D                          pop rbp
  1023 00000AF5 5F                          pop rdi
  1024 00000AF6 5E                          pop rsi
  1025 00000AF7 5A                          pop rdx
  1026 00000AF8 59                          pop rcx
  1027 00000AF9 5B                          pop rbx
  1028 00000AFA 58                          pop rax
  1029 00000AFB C3                          ret
  1030                                  
  1031                                  .clkRead:           ;Function 4
  1032 00000AFC B005                        mov al, 05h ;Bad request structure length?
  1033 00000AFE 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1034 00000B01 75E5                        jne .clkWriteErrorCode
  1035                                  
  1036 00000B03 4831ED                      xor rbp, rbp    ;Write to RBP rather than updating record word by word
  1037 00000B06 B404                        mov ah, 04h ;Read RTC date
  1038 00000B08 CD3A                        int 3Ah
  1039 00000B0A 72DA                        jc .clkNotFunctioning
  1040 00000B0C 0FB6C2                      movzx eax, dl  ;Get dl (day of the month) into al
  1041 00000B0F E8A8000000                  call .clkBCDtoHex   ;Convert BCD value to hex
  1042 00000B14 89C5                        mov ebp, eax    ;Save result in bp
  1043 00000B16 88F0                        mov al, dh 
  1044 00000B18 E89F000000                  call .clkBCDtoHex
  1045 00000B1D C1E005                      shl eax, 5  ;Shift month
  1046 00000B20 01C5                        add ebp, eax    ;Add month number to bp
  1047 00000B22 88C8                        mov al, cl      ;Get year from cl
  1048 00000B24 E893000000                  call .clkBCDtoHex
  1049 00000B29 3C50                        cmp al, 80  ;Is the value less than 80
  1050 00000B2B 7302                        jae .cread0
  1051 00000B2D 0464                        add al, 100
  1052                                  .cread0:
  1053 00000B2F 2C50                        sub al, 80
  1054 00000B31 C1E009                      shl eax, 9
  1055 00000B34 01C5                        add ebp, eax    ;number of years since 1980 shifted by 9 to ebp
  1056 00000B36 48C1E510                    shl rbp, 10h    ;Shift word 1 into word 2
  1057 00000B3A B402                        mov ah, 02h ;Read RTC time
  1058 00000B3C CD3A                        int 3Ah
  1059 00000B3E 72A6                        jc .clkNotFunctioning
  1060 00000B40 88C8                        mov al, cl  ;Get minutes into al
  1061 00000B42 E875000000                  call .clkBCDtoHex
  1062 00000B47 4809C5                      or rbp, rax ;Add minutes byte low
  1063 00000B4A 48C1E508                    shl rbp, 8  ;Shift up by a byte
  1064                                  
  1065 00000B4E 88E8                        mov al, ch  ;Get hours into al
  1066 00000B50 E867000000                  call .clkBCDtoHex
  1067 00000B55 4809C5                      or rbp, rax ;Add hours to byte low
  1068 00000B58 48C1E510                    shl rbp, 10h  ;Shift up by a byte and add an empty byte for 100ths of second
  1069 00000B5C 88F0                        mov al, dh  ;Get seconds into al
  1070 00000B5E E859000000                  call .clkBCDtoHex
  1071 00000B63 4809C5                      or rbp, rax ;Add seconds to byte low
  1072 00000B66 488B7B0E                    mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Get the buffer pointer
  1073 00000B6A 4881C705000000              add rdi, 5  ;Move pointer to the end of the buffer
  1074 00000B71 4889E8                      mov rax, rbp    ;Get the packed 6 bytes into rax
  1075 00000B74 B906000000                  mov ecx, 6  ;6 bytes to transfer
  1076 00000B79 FD                          std ;Reverse direction of string operation
  1077                                  .cread1:
  1078 00000B7A AA                          stosb   ;Store byte and dec rdi
  1079 00000B7B 48C1E808                    shr rax, 8  ;Shift all down by one byte
  1080 00000B7F E2F9                        loop .cread1    ;do it until ecx=0
  1081 00000B81 FC                          cld ;
  1082 00000B82 E967FFFFFF                  jmp .clkExit
  1083                                  
  1084                                  .clkInputStatus:    ;Function 6
  1085                                  ;Always return ready
  1086 00000B87 B005                        mov al, 05h ;Bad request structure length?
  1087 00000B89 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
  1088 00000B8C 0F8556FFFFFF                jne .clkWriteErrorCode
  1089 00000B92 E957FFFFFF                  jmp .clkExit
  1090                                  .clkFlushInputBuffers:  ;Function 7
  1091                                  ;Always return done immediately
  1092 00000B97 B005                        mov al, 05h ;Bad request structure length?
  1093 00000B99 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
  1094 00000B9C 0F8546FFFFFF                jne .clkWriteErrorCode
  1095 00000BA2 E947FFFFFF                  jmp .clkExit
  1096                                  
  1097                                  .clkWrite:          ;Functions 8 and 9
  1098 00000BA7 B005                        mov al, 05h ;Bad request structure length?
  1099 00000BA9 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1100 00000BAC 0F8536FFFFFF                jne .clkWriteErrorCode
  1101                                  
  1102 00000BB2 488B730E                    mov rsi, qword [rbx + ioReqPkt.bufptr]
  1103 00000BB6 31C0                        xor eax, eax
  1104 00000BB8 66AB                        stosw   ;Get first word into ax
  1105 00000BBA 89C1                        mov ecx, eax    ;Save ax in cx
  1106                                  
  1107                                  .clkBCDtoHex:
  1108                                  ;Converts a BCD value to a Hex byte
  1109                                  ;Takes input in al, returns in al (zero-ed upper seven bytes)
  1110 00000BBC 51                          push rcx
  1111 00000BBD 0FB6C0                      movzx eax, al   ;Zero extend
  1112 00000BC0 89C1                        mov ecx, eax    ;Save al in ecx
  1113 00000BC2 250F000000                  and eax, 0Fh    ;Get lower nybble
  1114 00000BC7 81E1F0000000                and ecx, 0F0h   ;Get upper nybble
  1115 00000BCD C1E904                      shr ecx, 4      ;Shift upper nybble value down
  1116                                  .cbth0:
  1117 00000BD0 050A000000                  add eax, 10
  1118 00000BD5 E2F9                        loop .cbth0
  1119 00000BD7 59                          pop rcx
  1120 00000BD8 C3                          ret
  1121                                  
  1122                                  .clkHexToBCD:
  1123                                  ;Converts a Hex byte into two BCD digits
  1124                                  ;Takes input in al, returns in al (zero-ed upper seven bytes)
  1125 00000BD9 51                          push rcx
  1126 00000BDA 0FB6C0                      movzx eax, al   ;Zero extend
  1127 00000BDD 31C9                        xor ecx, ecx
  1128                                  .chtb0:
  1129 00000BDF 3D0A000000                  cmp eax, 10
  1130 00000BE4 7209                        jb .chtb1
  1131 00000BE6 2D0A000000                  sub eax, 10
  1132 00000BEB FFC1                        inc ecx
  1133 00000BED EBF0                        jmp short .chtb0
  1134                                  .chtb1:
  1135 00000BEF C1E104                      shl ecx, 4  ;Move to upper nybble
  1136 00000BF2 08C8                        or al, cl   ;Move upper nybble into al upper nybble
  1137 00000BF4 59                          pop rcx
  1138 00000BF5 C3                          ret
  1139                                  
  1140                                  ;COM Driver headers and main interrupt strat
  1141                                  com1Intr:
  1142 00000BF6 C6059D01000000              mov byte [comIntr.comDevice], 0
  1143 00000BFD EB19                        jmp short comIntr
  1144                                  com2Intr:
  1145 00000BFF C6059401000001              mov byte [comIntr.comDevice], 1
  1146 00000C06 EB10                        jmp short comIntr
  1147                                  com3Intr:
  1148 00000C08 C6058B01000002              mov byte [comIntr.comDevice], 2
  1149 00000C0F EB07                        jmp short comIntr
  1150                                  com4Intr:
  1151 00000C11 C6058201000003              mov byte [comIntr.comDevice], 3
  1152                                  comIntr:
  1153 00000C18 50                          push rax
  1154 00000C19 53                          push rbx
  1155 00000C1A 51                          push rcx
  1156 00000C1B 52                          push rdx
  1157 00000C1C 56                          push rsi
  1158 00000C1D 57                          push rdi
  1159 00000C1E 488B1D3FFDFFFF              mov rbx, qword [reqHdrPtr]
  1160 00000C25 B003                        mov al, 03h ;Unknown Command
  1161 00000C27 807B0218                    cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
  1162 00000C2B 7756                        ja .comWriteErrorCode ;If yes, error!
  1163                                  
  1164 00000C2D 8A4302                      mov al, byte [rbx + drvReqHdr.cmdcde]
  1165 00000C30 3C04                        cmp al, 4   ;Read Character(s)
  1166 00000C32 7462                        jz .comRead
  1167 00000C34 3C05                        cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
  1168 00000C36 0F849B000000                jz .comNondestructiveRead   
  1169 00000C3C 3C06                        cmp al, 6   ;Read Input Status, always return with Busy bit = 0
  1170 00000C3E 0F8484000000                jz .comReadInputStatus
  1171 00000C44 3C07                        cmp al, 7   ;Flush read buffers, return done
  1172 00000C46 0F84B9000000                jz .comFlushInputBuffers
  1173 00000C4C 3C08                        cmp al, 8
  1174 00000C4E 0F84DB000000                jz .comWrite
  1175 00000C54 3C09                        cmp al, 9
  1176 00000C56 0F84D3000000                jz .comWrite
  1177 00000C5C 3C0A                        cmp al, 0Ah
  1178 00000C5E 0F8400010000                jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
  1179 00000C64 EB23                        jmp short .comExit  ;All other valid functions should return done
  1180                                  .comErrorNoCount:
  1181 00000C66 B002                        mov al, 02h ;Unknown device
  1182 00000C68 EB19                        jmp short .comWriteErrorCode
  1183                                  .comReadError:
  1184 00000C6A BA0B000000                  mov edx, 0Bh
  1185                                  .comWriteError:
  1186 00000C6F BA0A000000                  mov edx, 0Ah
  1187                                  .comError:
  1188 00000C74 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
  1189 00000C77 B902000000                  mov ecx, 02h    ;Unknown device
  1190 00000C7C 3CFE                        cmp al, 0FEh    ;Invalid COM port
  1191 00000C7E 0F44D1                      cmove edx, ecx  ;Only move unknown device error code if invalid COM port
  1192 00000C81 88D0                        mov al, dl      ;Move dl to al to store error code
  1193                                  .comWriteErrorCode:    ;Jump to with al=Standard Error code
  1194 00000C83 B480                        mov ah, 80h ;Set error bit
  1195 00000C85 66894303                    mov word [rbx + drvReqHdr.status], ax
  1196                                  .comExit:
  1197 00000C89 66814B030001                or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
  1198 00000C8F 5F                          pop rdi
  1199 00000C90 5E                          pop rsi
  1200 00000C91 5A                          pop rdx
  1201 00000C92 59                          pop rcx
  1202 00000C93 5B                          pop rbx
  1203 00000C94 58                          pop rax
  1204 00000C95 C3                          ret
  1205                                  
  1206                                  .comRead:
  1207 00000C96 B005                        mov al, 05h ;Bad request structure length?
  1208 00000C98 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1209 00000C9B 75E6                        jne .comWriteErrorCode
  1210                                  
  1211 00000C9D 488B7B0E                    mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
  1212 00000CA1 31C9                        xor ecx, ecx    ;Zero the char counter
  1213                                  .cr1:
  1214 00000CA3 3B4B16                      cmp ecx, dword [rbx + ioReqPkt.tfrlen]
  1215 00000CA6 741B                        je .cre2
  1216                                  .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
  1217 00000CA8 B802000000                  mov eax, 02h    ;Recieve 
  1218 00000CAD 8A15E7000000                mov dl, byte [.comDevice]    ;Get transacting com device
  1219 00000CB3 6698                        cbw     ;Zero extend to upper byte
  1220 00000CB5 CD34                        int 34h ;Recieve Char
  1221 00000CB7 72BB                        jc .comError
  1222 00000CB9 80FC80                      cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
  1223 00000CBC 74EA                        je .cr11
  1224 00000CBE AA                          stosb   ;Store char in al into buffer and inc rdi
  1225 00000CBF FFC1                        inc ecx
  1226 00000CC1 EBE0                        jmp short .cr1
  1227                                  .cre2:
  1228 00000CC3 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
  1229 00000CC6 EBC1                        jmp short .comExit
  1230                                  
  1231                                  .comReadInputStatus:
  1232 00000CC8 B005                        mov al, 05h ;Bad request structure length?
  1233 00000CCA 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
  1234 00000CCD 75B4                        jne .comWriteErrorCode
  1235 00000CCF 66C743030000                mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
  1236 00000CD5 EBB2                        jmp short .comExit
  1237                                  
  1238                                  .comNondestructiveRead:
  1239                                  ;Acts like a "read one character if there is one" function
  1240 00000CD7 B005                        mov al, 05h ;Bad request structure length?
  1241 00000CD9 803B0E                      cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
  1242 00000CDC 75A5                        jne .comWriteErrorCode
  1243                                  .cndr1:
  1244 00000CDE B802000000                  mov eax, 02h    ;Recieve 
  1245 00000CE3 8A15B1000000                mov dl, byte [.comDevice]    ;Get transacting com device
  1246 00000CE9 6698                        cbw     ;Zero extend to upper byte
  1247 00000CEB CD34                        int 34h ;Recieve Char
  1248 00000CED 0F8273FFFFFF                jc .comErrorNoCount ;Dont save a char transfer number
  1249 00000CF3 80FC80                      cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
  1250 00000CF6 7405                        je .cndr2
  1251 00000CF8 88430D                      mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Get next char
  1252 00000CFB EB8C                        jmp short .comExit
  1253                                  .cndr2:
  1254 00000CFD 66C743030002                mov word [rbx + nonDestInNoWaitReqPkt.status], 200h ;Busy bit set
  1255 00000D03 EB84                        jmp short .comExit
  1256                                  
  1257                                  .comFlushInputBuffers:
  1258 00000D05 B005                        mov al, 05h ;Bad request structure length?
  1259 00000D07 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
  1260 00000D0A 0F8573FFFFFF                jne .comWriteErrorCode
  1261                                  .cfib0:
  1262 00000D10 8A1584000000                mov dl, byte [.comDevice]
  1263 00000D16 6698                        cbw
  1264 00000D18 B802000000                  mov eax, 02h    ;Recieve
  1265 00000D1D CD34                        int 34h
  1266 00000D1F 0F8241FFFFFF                jc .comErrorNoCount
  1267 00000D25 80FC80                      cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
  1268 00000D28 75E6                        jne .cfib0
  1269 00000D2A E95AFFFFFF                  jmp .comExit
  1270                                  
  1271                                  .comWrite:
  1272 00000D2F B005                        mov al, 05h ;Bad request structure length?
  1273 00000D31 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1274 00000D34 0F8549FFFFFF                jne .comWriteErrorCode
  1275                                  
  1276 00000D3A 488B730E                    mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
  1277 00000D3E 31C9                        xor ecx, ecx    ;Zero the char counter
  1278                                  .cw1: 
  1279 00000D40 3B4B16                      cmp ecx, dword [rbx + ioReqPkt.tfrlen]
  1280 00000D43 7417                        je .cw2
  1281 00000D45 AC                          lodsb   ;Get char into al, and inc rsi
  1282 00000D46 B401                        mov ah, 01h ;Move function number into ah
  1283 00000D48 8A154C000000                mov dl, byte [.comDevice]
  1284 00000D4E 6698                        cbw     ;Zero extend to upper byte
  1285 00000D50 CD34                        int 34h ;Transmit char
  1286 00000D52 0F821CFFFFFF                jc .comError
  1287 00000D58 FFC1                        inc ecx
  1288 00000D5A EBE4                        jmp short .cw1 ;keep printing until all chars printed
  1289                                  .cw2:
  1290 00000D5C 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
  1291 00000D5F E925FFFFFF                  jmp .comExit
  1292                                  
  1293                                  .comOutputStatus:
  1294                                  ;Read MODEM status
  1295 00000D64 B005                        mov al, 05h ;Bad request structure length?
  1296 00000D66 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
  1297 00000D69 0F8514FFFFFF                jne .comWriteErrorCode
  1298                                  
  1299 00000D6F 8A1525000000                mov dl, byte [.comDevice]
  1300 00000D75 6698                        cbw     ;Zero extend to upper byte
  1301 00000D77 B403                        mov ah, 03h     ;Get status
  1302 00000D79 CD34                        int 34h
  1303 00000D7B 0F82E5FEFFFF                jc .comErrorNoCount
  1304 00000D81 2510000000                  and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
  1305 00000D86 C1E005                      shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
  1306 00000D89 F7D0                        not eax      ;Bitwise inversion
  1307 00000D8B 2500020000                  and eax, 200h   ;Isolate bit 9
  1308 00000D90 6689441B03                  mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
  1309 00000D95 E9EFFEFFFF                  jmp .comExit
  1310 00000D9A 00                      .comDevice   db 0
  1311                                  
  1312                                  msdDriver:
  1313 00000D9B 50                          push rax
  1314 00000D9C 53                          push rbx
  1315 00000D9D 51                          push rcx
  1316 00000D9E 52                          push rdx
  1317 00000D9F 56                          push rsi
  1318 00000DA0 57                          push rdi
  1319 00000DA1 55                          push rbp
  1320 00000DA2 4150                        push r8
  1321 00000DA4 488B1DB9FBFFFF              mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
  1322 00000DAB 807B0218                    cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
  1323 00000DAF B003                        mov al, 03h
  1324 00000DB1 0F87F9000000                ja .msdWriteErrorCode ;If yes, error!
  1325 00000DB7 B001                        mov al, 01h ;Unknown Unit Error
  1326 00000DB9 807B0105                    cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
  1327 00000DBD 0F87ED000000                ja .msdWriteErrorCode ;If yes, error!
  1328 00000DC3 8A4302                      mov al, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
  1329 00000DC6 84C0                        test al, al
  1330 00000DC8 0F84F8000000                jz .msdInit
  1331 00000DCE 3C01                        cmp al, 01
  1332 00000DD0 0F8496010000                jz .msdMedChk
  1333 00000DD6 3C02                        cmp al, 02
  1334 00000DD8 0F84FF010000                jz .msdBuildBPB
  1335 00000DDE 3C03                        cmp al, 03
  1336 00000DE0 0F8465020000                jz .msdIOCTLRead
  1337 00000DE6 3C04                        cmp al, 04
  1338 00000DE8 0F846D020000                jz .msdRead
  1339 00000DEE 3C08                        cmp al, 08
  1340 00000DF0 0F84A1020000                jz .msdWrite
  1341 00000DF6 3C09                        cmp al, 09
  1342 00000DF8 0F84D5020000                jz .msdWriteVerify
  1343 00000DFE 3C0C                        cmp al, 12
  1344 00000E00 0F8416030000                jz .msdIOCTLWrite
  1345 00000E06 3C0D                        cmp al, 13
  1346 00000E08 0F841E030000                jz .msdDevOpen
  1347 00000E0E 3C0E                        cmp al, 14
  1348 00000E10 0F8431030000                jz .msdDevClose
  1349 00000E16 3C0F                        cmp al, 15
  1350 00000E18 0F8444030000                jz .msdRemovableMedia
  1351 00000E1E 3C13                        cmp al, 19
  1352 00000E20 0F8465030000                jz .msdGenericIOCTL
  1353 00000E26 3C17                        cmp al, 23
  1354 00000E28 0F846D030000                jz .msdGetLogicalDev
  1355 00000E2E 3C18                        cmp al, 24
  1356 00000E30 0F847E030000                jz .msdSetLogicalDev
  1357 00000E36 EB7E                        jmp short .msdDriverExit    ;All other valid functions exit done
  1358                                  .msdIOError:  ;In Read and Write errors, rbp points to the dev struc
  1359 00000E38 4889EB                      mov rbx, rbp
  1360 00000E3B 0FB6C0                      movzx eax, al   ;Number of IO-ed sectors in last request
  1361 00000E3E 01C6                        add esi, eax    ;esi Keeps sector count across transfers
  1362 00000E40 897316                      mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
  1363                                  ;Now fall through to general error
  1364                                  .msdGenDiskError:
  1365 00000E43 B401                        mov ah, 01h
  1366 00000E45 30D2                        xor dl, dl  ;Work around bug that fails request if dl > 7Fh
  1367 00000E47 CD33                        int 33h ;Read status of last operation
  1368 00000E49 80FC06                      cmp ah, 06h ;Mock Seek response (device not present)
  1369 00000E4C B002                        mov al, 02h ;Give device not ready error (sensibly I think)
  1370 00000E4E 7460                        je .msdWriteErrorCode 
  1371 00000E50 B00C                        mov al, 0Ch ;Preliminary General Error Faults
  1372 00000E52 80FCFF                      cmp ah, -1  ;Sense operation failed
  1373 00000E55 7459                        je .msdWriteErrorCode 
  1374 00000E57 80FC20                      cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
  1375 00000E5A 7454                        je .msdWriteErrorCode
  1376                                  ;Device Not Ready
  1377 00000E5C B002                        mov al, 02h  ;Device not ready code
  1378 00000E5E 4138C0                      cmp r8b, al  ;SCSI Not ready commands start with 2
  1379 00000E61 744D                        je .msdWriteErrorCode
  1380 00000E63 49C1E808                    shr r8, 8       ;Remove Sense Key
  1381 00000E67 410FB7C8                    movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
  1382                                  ;Write Protected
  1383 00000E6B 30C0                        xor al, al
  1384 00000E6D 6681F92700                  cmp cx, 0027h   ;Write protected error
  1385 00000E72 743C                        je .msdWriteErrorCode
  1386                                  ;CRC Error
  1387 00000E74 B004                        mov al, 04h     ;CRC error code
  1388 00000E76 6681F90803                  cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
  1389 00000E7B 7433                        je .msdWriteErrorCode
  1390 00000E7D 6681F91000                  cmp cx, 0010h   ;ID CRC or ECC error
  1391 00000E82 742C                        je .msdWriteErrorCode
  1392 00000E84 6681F94701                  cmp cx, 0147h   ;Data phase CRC error detected
  1393 00000E89 7425                        je .msdWriteErrorCode
  1394                                  ;Seek Error
  1395 00000E8B B006                        mov al, 06h     ;Seek error code
  1396 00000E8D 80F902                      cmp cl, 02h     ;No Seek Complete
  1397 00000E90 741E                        je .msdWriteErrorCode
  1398                                  ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
  1399                                  ;This error should only be called if BPB not recognised for Flash Drives
  1400 00000E92 B007                        mov al, 07h
  1401 00000E94 80F930                      cmp cl, 30h   ;All issues with media returns unknown media
  1402 00000E97 7417                        je .msdWriteErrorCode
  1403                                  ;Sector Not Found
  1404 00000E99 B008                        mov al, 08h     ;Sector not found code
  1405 00000E9B 80F921                      cmp cl, 21h     ;Illegal Request - Invalid LBA
  1406 00000E9E 7410                        je .msdWriteErrorCode
  1407                                  ;Write faults
  1408 00000EA0 B00A                        mov al, 0Ah     ;Write fault
  1409 00000EA2 80F90C                      cmp cl, 0Ch     ;Write Error ASC code
  1410 00000EA5 7409                        je .msdWriteErrorCode
  1411                                  ;Read faults
  1412 00000EA7 B00B                        mov al, 0Bh     ;Read fault
  1413 00000EA9 80F911                      cmp cl, 11h     ;Read error
  1414 00000EAC 7402                        je .msdWriteErrorCode
  1415                                  ;General Errors
  1416 00000EAE B00C                        mov al, 0Ch     ;Everything else is general error
  1417                                  .msdWriteErrorCode:    ;Jump to with al=Standard Error code
  1418 00000EB0 B480                        mov ah, 80h ;Set error bit
  1419 00000EB2 66894303                    mov word [rbx + drvReqHdr.status], ax
  1420                                  .msdDriverExit:
  1421 00000EB6 66814B030001                or word [rbx + drvReqHdr.status], 0100h ;Set done bit
  1422 00000EBC 4158                        pop r8
  1423 00000EBE 5D                          pop rbp
  1424 00000EBF 5F                          pop rdi
  1425 00000EC0 5E                          pop rsi
  1426 00000EC1 5A                          pop rdx
  1427 00000EC2 59                          pop rcx
  1428 00000EC3 5B                          pop rbx
  1429 00000EC4 58                          pop rax
  1430 00000EC5 C3                          ret
  1431                                  .msdInit:            ;Function 0
  1432 00000EC6 B005                        mov al, 05h ;Bad request structure length
  1433 00000EC8 803B1F                      cmp byte [rbx + drvReqHdr.hdrlen], initReqPkt_size
  1434 00000ECB 75E3                        jne .msdWriteErrorCode
  1435                                  
  1436 00000ECD 4151                        push r9
  1437 00000ECF CD31                        int 31h ;Get number of Int 33h devices in r8b
  1438 00000ED1 4159                        pop r9
  1439 00000ED3 4D0FB6C0                    movzx r8, r8b   ;Keeps real count
  1440 00000ED7 4489C0                      mov eax, r8d
  1441 00000EDA 3C01                        cmp al, 1
  1442 00000EDC 7702                        ja .mi1
  1443 00000EDE FEC0                        inc al ;Make it two
  1444                                  .mi1:
  1445 00000EE0 BA05000000                  mov edx, 5
  1446 00000EE5 39D0                        cmp eax, edx
  1447 00000EE7 0F47C2                      cmova eax, edx  ;If num of drives is greater than 5, consider only first 5
  1448 00000EEA 880576F9FFFF                mov byte [msdHdr + drvHdr.drvNam], al ;Save num of drvs in drvr hdr
  1449 00000EF0 88430D                      mov byte [rbx + initReqPkt.numunt], al ;And in req packet
  1450 00000EF3 440005(A9000000)            add byte [numMSDdrv], r8b ;Add the true number of devices to total
  1451 00000EFA 31ED                        xor ebp, ebp    ;Use bpl as device counter, cmp to r8b
  1452 00000EFC 488D3D20030000              lea rdi, qword [.msdBPBblks]
  1453 00000F03 53                          push rbx
  1454                                  .mi2:
  1455 00000F04 89EA                        mov edx, ebp
  1456 00000F06 488D1D6E050000              lea rbx, qword [driverDataPtr]  ;Get effective address of scratch space
  1457 00000F0D 31C9                        xor ecx, ecx    ;Sector 0
  1458 00000F0F B801820000                  mov eax, 8201h       ;Read 1 sector
  1459 00000F14 CD33                        int 33h
  1460 00000F16 724E                        jc .msdInitError
  1461                                  
  1462 00000F18 488D355C050000              lea rsi, qword [driverDataPtr]  ;Point to start of data
  1463 00000F1F B90F000000                  mov ecx, bpbEx_size/8
  1464 00000F24 F348A5                      rep movsq   ;Move the BPB data into the right block
  1465                                  
  1466 00000F27 FFC5                        inc ebp
  1467 00000F29 4C39C5                      cmp rbp, r8 ;Have we written the BPB for all physical drives?
  1468 00000F2C 75D6                        jne .mi2  ;No? Go again
  1469                                  
  1470 00000F2E 488D3DC6020000              lea rdi, qword [.msdBPBTbl]  ;Point to start of table
  1471 00000F35 488D15E7020000              lea rdx, qword [.msdBPBblks]
  1472                                  .mi3:
  1473 00000F3C 488917                      mov qword [rdi], rdx   ;Move the block entry ptr to rdi
  1474 00000F3F 4881C278000000              add rdx, bpbEx_size      ;Make rdx point to the next block entry
  1475 00000F46 FFCD                        dec ebp
  1476 00000F48 75F2                        jnz .mi3  ;If not zero yet, go again
  1477                                  
  1478 00000F4A 5B                          pop rbx
  1479 00000F4B 488D15A9020000              lea rdx, qword [.msdBPBTbl]  ;Get far pointer 
  1480 00000F52 48895316                    mov qword [rbx + initReqPkt.optptr], rdx  ;Save ptr to array
  1481 00000F56 488D151E050000              lea rdx, qword [driverDataPtr]
  1482 00000F5D 4889530E                    mov qword [rbx + initReqPkt.endptr], rdx    ;Save free space ptr
  1483 00000F61 E950FFFFFF                  jmp .msdDriverExit
  1484                                  .msdInitError:
  1485 00000F66 5B                          pop rbx
  1486 00000F67 E94AFFFFFF                  jmp .msdDriverExit
  1487                                  .msdMedChk:          ;Function 1
  1488                                  ;Once the BIOS function is implmented that reads the changeline, use that!
  1489                                  ;For BIOSes that dont support the changeline, the following procedure will 
  1490                                  ; suffice.
  1491 00000F6C B005                        mov al, 05h ;Bad request structure length
  1492 00000F6E 803B17                      cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
  1493 00000F71 0F8539FFFFFF                jne .msdWriteErrorCode
  1494                                  
  1495 00000F77 480FB64301                  movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
  1496 00000F7C 8A90[F1110000]              mov dl, byte [.msdBIOSmap + rax]    ;Translate unitnum to BIOS num
  1497 00000F82 F6C280                      test dl, 80h    ;If it is a fixed disk, no change!
  1498 00000F85 754D                        jnz .mmcNoChange
  1499                                  ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
  1500 00000F87 B416                        mov ah, 16h 
  1501 00000F89 CD33                        int 33h
  1502 00000F8B 0F82B2FEFFFF                jc .msdGenDiskError
  1503 00000F91 80FC80                      cmp ah, 80h
  1504 00000F94 740E                        je .mmcNoChangeLine
  1505 00000F96 80FC86                      cmp ah, 86h
  1506 00000F99 7409                        je .mmcNoChangeLine
  1507 00000F9B 84E4                        test ah, ah ;No change?
  1508 00000F9D 7435                        jz .mmcNoChange
  1509 00000F9F F6C401                      test ah, 1  ;Neither 80h or 86h have bit 0 set
  1510 00000FA2 7513                        jnz .mmcChange
  1511                                  ;If nothing, fall through and test manually, should never happen though
  1512                                  .mmcNoChangeLine:
  1513                                  ;Now we test Media Descriptor
  1514 00000FA4 8A530D                      mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
  1515 00000FA7 488B3CC5[FB110000]          mov rdi, qword [.msdBPBTbl + 8*rax]
  1516 00000FAF 488B3F                      mov rdi, qword [rdi]    ;Dereference rdi
  1517 00000FB2 385715                      cmp byte [rdi + bpb32.media], dl    ;Compare media descriptor bytes
  1518 00000FB5 7414                        je .mmcUnsure
  1519                                  .mmcChange:
  1520 00000FB7 C6430EFF                    mov byte [rbx + mediaCheckReqPkt.medret], -1
  1521 00000FBB 488D0525020000              lea rax, qword [.msdDefLabel]           ;Temp, ret def label
  1522 00000FC2 4889430F                    mov qword [rbx + mediaCheckReqPkt.desptr], rax 
  1523 00000FC6 E9EBFEFFFF                  jmp .msdDriverExit
  1524                                  .mmcUnsure:
  1525 00000FCB C6430E00                    mov byte [rbx + mediaCheckReqPkt.medret], 0
  1526 00000FCF E9E2FEFFFF                  jmp .msdDriverExit
  1527                                  .mmcNoChange:
  1528 00000FD4 C6430E01                    mov byte [rbx + mediaCheckReqPkt.medret], 1
  1529 00000FD8 E9D9FEFFFF                  jmp .msdDriverExit
  1530                                  
  1531                                  .msdBuildBPB:        ;Function 2
  1532 00000FDD B005                        mov al, 05h ;Bad request structure length
  1533 00000FDF 803B1E                      cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
  1534 00000FE2 0F85C8FEFFFF                jne .msdWriteErrorCode
  1535                                  
  1536 00000FE8 4889DE                      mov rsi, rbx
  1537 00000FEB 480FB64601                  movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
  1538 00000FF0 8A90[F1110000]              mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req
  1539 00000FF6 488B5E0E                    mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
  1540 00000FFA 31C9                        xor ecx, ecx    ;Read Sector 0
  1541 00000FFC B801820000                  mov eax, 8201h  ;LBA Read 1 sector
  1542 00001001 CD33                        int 33h
  1543 00001003 0F823AFEFFFF                jc .msdGenDiskError
  1544                                  ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
  1545 00001009 807B15F0                    cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
  1546 0000100D 7418                        je .mbbpb0
  1547 0000100F 807B15F8                    cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
  1548 00001013 7412                        je .mbbpb0
  1549 00001015 807B15F9                    cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
  1550 00001019 740C                        je .mbbpb0
  1551 0000101B 807B15FC                    cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
  1552 0000101F B007                        mov al, 07h ;Unknown media error code
  1553 00001021 0F8289FEFFFF                jb .msdWriteErrorCode
  1554                                  .mbbpb0:
  1555 00001027 4887DE                      xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
  1556 0000102A 480FB64301                  movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
  1557 0000102F 488B3CC5[FB110000]          mov rdi, qword [.msdBPBTbl + 8*rax] ;Get pointer to pointer to buffer
  1558 00001037 488B3F                      mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
  1559 0000103A 48897B16                    mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
  1560 0000103E B90F000000                  mov ecx, bpbEx_size/8
  1561 00001043 F348A5                      rep movsq   ;Move the BPB data into the right space
  1562 00001046 E96BFEFFFF                  jmp .msdDriverExit
  1563                                  .msdIOCTLRead:       ;Function 3, returns done
  1564 0000104B B005                        mov al, 05h ;Bad request structure length
  1565 0000104D 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1566 00001050 0F855AFEFFFF                jne .msdWriteErrorCode
  1567                                  
  1568 00001056 E95BFEFFFF                  jmp .msdDriverExit
  1569                                  .msdRead:            ;Function 4
  1570                                  ;Will read one sector at a time.
  1571 0000105B B005                        mov al, 05h ;Bad request structure length
  1572 0000105D 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1573 00001060 0F854AFEFFFF                jne .msdWriteErrorCode
  1574                                  
  1575 00001066 4889DD                      mov rbp, rbx
  1576 00001069 31F6                        xor esi, esi  ;Set sector read counter to zero
  1577                                  .msdr0:
  1578 0000106B B682                        mov dh, 82h ;LBA Read Sectors
  1579 0000106D E85B010000                  call .msdBlkIOCommon
  1580 00001072 0F82C0FDFFFF                jc .msdIOError
  1581 00001078 4881451A00020000            add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
  1582 00001080 4881450E00020000            add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
  1583 00001088 FFC6                        inc esi
  1584 0000108A 3B7516                      cmp esi, dword [rbp + ioReqPkt.tfrlen]
  1585 0000108D 75DC                        jne .msdr0
  1586 0000108F 4889EB                      mov rbx, rbp
  1587 00001092 E91FFEFFFF                  jmp .msdDriverExit
  1588                                  .msdWrite:           ;Function 8
  1589                                  ;Will write one sector at a time.
  1590 00001097 B005                        mov al, 05h ;Bad request structure length
  1591 00001099 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1592 0000109C 0F850EFEFFFF                jne .msdWriteErrorCode
  1593                                  
  1594 000010A2 4889DD                      mov rbp, rbx
  1595 000010A5 31F6                        xor esi, esi  ;Set counter to zero
  1596                                  .msdw0:
  1597 000010A7 B683                        mov dh, 83h ;LBA Write Sectors
  1598 000010A9 E81F010000                  call .msdBlkIOCommon
  1599 000010AE 0F8284FDFFFF                jc .msdIOError
  1600 000010B4 4881451A00020000            add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
  1601 000010BC 4881450E00020000            add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
  1602 000010C4 FFC6                        inc esi
  1603 000010C6 3B7516                      cmp esi, dword [rbp + ioReqPkt.tfrlen]
  1604 000010C9 75DC                        jne .msdw0
  1605 000010CB 4889EB                      mov rbx, rbp
  1606 000010CE E9E3FDFFFF                  jmp .msdDriverExit
  1607                                  .msdWriteVerify:     ;Function 9, writes sectors then verifies them
  1608                                  ;Will write one sector at a time and then verify it.
  1609 000010D3 B005                        mov al, 05h ;Bad request structure length
  1610 000010D5 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1611 000010D8 0F85D2FDFFFF                jne .msdWriteErrorCode
  1612                                  
  1613 000010DE 4889DD                      mov rbp, rbx
  1614 000010E1 31F6                        xor esi, esi  ;Set counter to zero
  1615                                  .msdwv0:
  1616 000010E3 B683                        mov dh, 83h ;LBA Write Sectors
  1617 000010E5 E8E3000000                  call .msdBlkIOCommon
  1618 000010EA 0F8248FDFFFF                jc .msdIOError    ;Error handler needs to add to esi the value in al
  1619 000010F0 B684                        mov dh, 84h ;LBA Verify Sectors
  1620 000010F2 E8D6000000                  call .msdBlkIOCommon
  1621 000010F7 0F823BFDFFFF                jc .msdIOError    ;Error handler needs to add to esi the value in al
  1622 000010FD 4881451A00020000            add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
  1623 00001105 4881450E00020000            add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
  1624 0000110D FFC6                        inc esi
  1625 0000110F 3B7516                      cmp esi, dword [rbp + ioReqPkt.tfrlen]
  1626 00001112 75CF                        jne .msdwv0
  1627 00001114 4889EB                      mov rbx, rbp
  1628 00001117 E99AFDFFFF                  jmp .msdDriverExit
  1629                                  .msdIOCTLWrite:      ;Function 12, returns done
  1630 0000111C B005                        mov al, 05h ;Bad request structure length
  1631 0000111E 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1632 00001121 0F8589FDFFFF                jne .msdWriteErrorCode
  1633                                  
  1634 00001127 E98AFDFFFF                  jmp .msdDriverExit
  1635                                  .msdDevOpen:         ;Function 13
  1636 0000112C B005                        mov al, 05h ;Bad request structure length
  1637 0000112E 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
  1638 00001131 0F8579FDFFFF                jne .msdWriteErrorCode
  1639                                  
  1640 00001137 480FB64301                  movzx rax, byte [rbx + openReqPkt.unitnm]
  1641 0000113C FE80[F6110000]              inc byte [.msdHdlCnt + rax]  ;Inc handle cnt for given unit
  1642 00001142 E96FFDFFFF                  jmp .msdDriverExit
  1643                                  .msdDevClose:        ;Function 14
  1644 00001147 B005                        mov al, 05h ;Bad request structure length
  1645 00001149 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
  1646 0000114C 0F855EFDFFFF                jne .msdWriteErrorCode
  1647                                  
  1648 00001152 480FB64301                  movzx rax, byte [rbx + closeReqPkt.unitnm]
  1649 00001157 FE88[F6110000]              dec byte [.msdHdlCnt + rax]  ;Dec handle cnt for given unit
  1650 0000115D E954FDFFFF                  jmp .msdDriverExit
  1651                                  .msdRemovableMedia:  ;Function 15
  1652 00001162 B005                        mov al, 05h ;Bad request structure length
  1653 00001164 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
  1654 00001167 0F8543FDFFFF                jne .msdWriteErrorCode
  1655                                  
  1656 0000116D 480FB64301                  movzx rax, byte [rbx + remMediaReqPkt.unitnm]
  1657 00001172 8A80[F1110000]              mov al, byte [.msdBIOSmap + rax]    ;Get BIOS number
  1658 00001178 A880                        test al, 80h
  1659 0000117A 0F8436FDFFFF                jz .msdDriverExit   ;If removable, busy bit is clear
  1660 00001180 66C743030002                mov word [rbx + remMediaReqPkt.status], 0200h ;Set Busy bit
  1661 00001186 E92BFDFFFF                  jmp .msdDriverExit
  1662                                  .msdGenericIOCTL:    ;Function 19
  1663 0000118B B005                        mov al, 05h ;Bad request structure length
  1664 0000118D 803B27                      cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
  1665 00001190 0F851AFDFFFF                jne .msdWriteErrorCode
  1666                                  
  1667 00001196 E91BFDFFFF                  jmp .msdDriverExit
  1668                                  .msdGetLogicalDev:   ;Function 23
  1669 0000119B B005                        mov al, 05h ;Bad request structure length
  1670 0000119D 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
  1671 000011A0 0F850AFDFFFF                jne .msdWriteErrorCode
  1672                                  
  1673 000011A6 8A0544000000                mov al, byte [.msdCurDev]
  1674 000011AC 884301                      mov byte [rbx + getDevReqPkt.unitnm], al
  1675 000011AF E902FDFFFF                  jmp .msdDriverExit
  1676                                  .msdSetLogicalDev:   ;Function 24
  1677 000011B4 B005                        mov al, 05h ;Bad request structure length
  1678 000011B6 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
  1679 000011B9 0F85F1FCFFFF                jne .msdWriteErrorCode
  1680                                  
  1681 000011BF 8A4301                      mov al, byte [rbx + getDevReqPkt.unitnm]
  1682 000011C2 880528000000                mov byte [.msdCurDev], al
  1683 000011C8 E9E9FCFFFF                  jmp .msdDriverExit
  1684                                  
  1685                                  .msdBlkIOCommon:  ;Does block IO
  1686                                  ;Called with rbp containing old rbx value and ah with function number
  1687                                  ;Error handled by caller
  1688                                  ;Sector count handled by caller
  1689                                  ;Called with dh = BIOS function number
  1690 000011CD 480FB64501                  movzx rax, byte [rbp + ioReqPkt.unitnm]
  1691 000011D2 8A90[F1110000]              mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
  1692 000011D8 488B4D1A                    mov rcx, qword [rbp + ioReqPkt.strtsc]  ;Get start sector
  1693 000011DC 488B5D0E                    mov rbx, qword [rbp + ioReqPkt.bufptr]  ;Get Memory Buffer
  1694 000011E0 88F4                        mov ah, dh
  1695 000011E2 B001                        mov al, 01h ;Do one sector at a time 
  1696 000011E4 CD33                        int 33h
  1697 000011E6 C3                          ret
  1698                                  
  1699 000011E7 4E4F204E414D452000      .msdDefLabel db "NO NAME ",0 ;Default volume label
  1700                                  ;LASTDRIVE default is 5
  1701 000011F0 00                      .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
  1702                                  ; Except when single drive in use, in which case Drive A and B refer to device 0
  1703 000011F1 0000000000              .msdBIOSmap  db 5 dup (0)    ;Translates DOS drive number to BIOS number
  1704 000011F6 0000000000              .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
  1705 000011FB 000000000000000000-     .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
  1705 00001204 000000000000000000-
  1705 0000120D 000000000000000000-
  1705 00001216 000000000000000000-
  1705 0000121F 00000000           
  1706 00001223 000000000000000000-     .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
  1706 0000122C 000000000000000000-
  1706 00001235 000000000000000000-
  1706 0000123E 000000000000000000-
  1706 00001247 000000000000000000-
  1706 00001250 000000000000000000-
  1706 00001259 000000000000000000-
  1706 00001262 000000000000000000-
  1706 0000126B 000000000000000000-
  1706 00001274 000000000000000000-
  1706 0000127D 000000000000000000-
  1706 00001286 000000000000000000-
  1706 0000128F 000000000000000000-
  1706 00001298 000000000000000000-
  1706 000012A1 000000000000000000-
  1706 000012AA 000000000000000000-
  1706 000012B3 000000000000000000-
  1706 000012BC 000000000000000000-
  1706 000012C5 000000000000000000-
  1706 000012CE 000000000000000000-
  1706 000012D7 000000000000000000-
  1706 000012E0 000000000000000000-
  1706 000012E9 000000000000000000-
  1706 000012F2 000000000000000000-
  1706 000012FB 000000000000000000-
  1706 00001304 000000000000000000-
  1706 0000130D 000000000000000000-
  1706 00001316 000000000000000000-
  1706 0000131F 000000000000000000-
  1706 00001328 000000000000000000-
  1706 00001331 000000000000000000-
  1706 0000133A 000000000000000000-
  1706 00001343 000000000000000000-
  1706 0000134C 000000000000000000-
  1706 00001355 000000000000000000-
  1706 0000135E 000000000000000000-
  1706 00001367 000000000000000000-
  1706 00001370 000000000000000000-
  1706 00001379 000000000000000000-
  1706 00001382 000000000000000000-
  1706 0000138B 000000000000000000-
  1706 00001394 000000000000000000-
  1706 0000139D 000000000000000000-
  1706 000013A6 000000000000000000-
  1706 000013AF 000000000000000000-
  1706 000013B8 000000000000000000-
  1706 000013C1 000000000000000000-
  1706 000013CA 000000000000000000-
  1706 000013D3 000000000000000000-
  1706 000013DC 000000000000000000-
  1706 000013E5 000000000000000000-
  1706 000013EE 000000000000000000-
  1706 000013F7 000000000000000000-
  1706 00001400 000000000000000000-
  1706 00001409 000000000000000000-
  1706 00001412 000000000000000000-
  1706 0000141B 000000000000000000-
  1706 00001424 000000000000000000-
  1706 0000142D 000000000000000000-
  1706 00001436 000000000000000000-
  1706 0000143F 000000000000000000-
  1706 00001448 000000000000000000-
  1706 00001451 000000000000000000-
  1706 0000145A 000000000000000000-
  1706 00001463 000000000000000000-
  1706 0000146C 000000000000000000-
  1706 00001475 000000000000       
  1707                                  
  1708                                  driverDataPtr:
