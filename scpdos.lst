     1                                  [map all scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  %include "driverStruc.inc"
     5                              <1> 
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     8                              <1> ; device driver related structures.                     ;
     9                              <1> ;-------------------------------------------------------;
    10                              <1> 
    11                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    12                              <1> 
    13 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    14 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    15 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    16 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    17 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    18                              <1> 
    19                              <1> endstruc
    20                              <1> 
    21                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    22                              <1> 
    23                              <1>     .hdrlen resb 1  ;Length of the request header
    24                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    25                              <1>     .cmdcde resb 1  ;Command code
    26                              <1>     .status resw 1  ;Status word
    27                              <1>     .devptr resq 1  ;Device queue pointer field
    28                              <1> 
    29                              <1> %endmacro
    30                              <1> 
    31                              <1> struc drvReqHdr
    32                              <1>     drvReqHdrM
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    33                              <1> endstruc
    34                              <1> 
    35                              <1> struc initReqPkt  ;Init Request Packet
    36                              <1> 
    37                              <1>     drvReqHdrM   ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    38 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
    39 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
    40 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
    41 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
    42                              <1> 
    43                              <1> endstruc
    44                              <1> 
    45                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
    46                              <1> 
    47                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    48 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    49 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
    50 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
    51                              <1> 
    52                              <1> endstruc
    53                              <1> 
    54                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
    55                              <1> 
    56                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    57 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    58 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    59 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
    60                              <1> 
    61                              <1> endstruc
    62                              <1> 
    63                              <1> struc ioReqPkt   ;IO Request Packet
    64                              <1> 
    65                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    66 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    67 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    68 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
    69 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
    70 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
    71                              <1> 
    72                              <1> endstruc
    73                              <1> 
    74                              <1> struc nonDestInNoWaitReqPkt    ;Nondestructive Input No Wait Request Packet
    75                              <1>     
    76                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    77 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
    78                              <1> 
    79                              <1> endstruc
    80                              <1> 
    81                              <1> struc statusReqPkt   ;Status Request Packet
    82                              <1> 
    83                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    84                              <1> 
    85                              <1> endstruc
    86                              <1> 
    87                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
    88                              <1> 
    89                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    90                              <1>      
    91                              <1> endstruc
    92                              <1> 
    93                              <1> struc openReqPkt ;Open Device Request Packet
    94                              <1> 
    95                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    96                              <1>      
    97                              <1> endstruc
    98                              <1> 
    99                              <1> struc closeReqPkt ;Close Device Request Packet
   100                              <1> 
   101                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   102                              <1>      
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   106                              <1> 
   107                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   108                              <1>      
   109                              <1> endstruc
   110                              <1> 
   111                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   112                              <1> 
   113                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   114 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   115 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   116 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   117 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   118 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   119                              <1> 
   120                              <1> endstruc
   121                              <1> 
   122                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   123                              <1>     
   124                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   125                              <1> 
   126                              <1> endstruc
   127                              <1> 
   128                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   129                              <1>     
   130                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   131                              <1> 
   132                              <1> endstruc
     5                                  %include "fatStruc.inc"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ; This include file contains miscellaneous FAT driver   ;
     9                              <1> ; structures. exFAT will have it's own files at a later ;
    10                              <1> ; stage.                                                ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    14                              <1> 
    15 00000000 ??????              <1>     .jmpBoot    resb 3 
    16 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    17 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    18 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    19 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    20 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    21 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    22 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    23 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    24 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    25 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    26 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    27 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    28 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    29                              <1> 
    30 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    31 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    32 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    33 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    34 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    35 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    40                              <1> 
    41 00000000 ??????              <1>     .jmpBoot    resb 3
    42 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    43 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    44 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    45 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    46 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    47 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    48 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    49 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    50 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    51 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    52 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    53 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    54 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    55                              <1> 
    56 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    57 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    58 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    59 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    60 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    61 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    62 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    63                              <1> 
    64 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    65 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    66 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    67 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    68 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    69 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    70                              <1> 
    71                              <1> endstruc
    72                              <1> 
    73                              <1> struc fatDirEntry
    74                              <1> 
    75 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
    76 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
    77 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
    78 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
    79 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
    80 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
    81 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
    82 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
    83 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
    84 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
    85 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
    86 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
    87                              <1> 
    88                              <1> endstruc
    89                              <1> ;Directory attribute equates
    90                              <1>     dirReadOnly     equ 01h
    91                              <1>     dirHidden       equ 02h
    92                              <1>     dirSystem       equ 04h
    93                              <1>     dirVolumeID     equ 08h
    94                              <1>     dirDirectory    equ 10h
    95                              <1>     dirArchive      equ 20h
    96                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    97                              <1> 
    98                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
    99                              <1> 
   100 00000000 ??????              <1>     .jmpBoot                resb 3 
   101 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   102 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   103 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   104 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   105 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   106 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   107 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   108 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   109 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   110 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   111 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   112 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   113 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   114 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   115 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   116 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   117 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   118 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   119                              <1> 
   120                              <1> endstruc
   121                              <1> 
   122                              <1> struc FSInfo
   123                              <1> 
   124 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   125 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   126 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   127 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   128 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   129 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   130 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   131                              <1> 
   132                              <1> endstruc
     6                                  %include "dosStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous internal     ;
    10                              <1> ; SCP/DOS structures.                                   ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> ;------------------------------------------------------------------------;
    14                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    15                              <1> ; its file system structure. This is used to locate files and structures
    16                              <1> ; on the device itself and to translate file requests to cluster chains
    17                              <1> ; to LBAs to pass to the disk driver..
    18                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    19                              <1> ; drivers Initialise routine has been called.
    20                              <1> ;------------------------------------------------------------------------;
    21                              <1> struc dpb        ;Drive Parameter Block
    22                              <1> 
    23 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...)
    24 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device
    25 00000002 ??                  <1>     .bBytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
    26 00000003 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1
    27                              <1> ;                                       i.e. (2^bSectorsPerClusterShift) - 1
    28 00000004 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent
    29 00000005 ????????            <1>     .dFAToffset              resd 1  ;Vol rel offset of first FAT, in sectors
    30 00000009 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs
    31 0000000A ????                <1>     .wNumberRootDirEntries   resw 1  ;In sectors
    32 0000000C ????????            <1>     .dClusterHeapOffset      resd 1  ;Start of data area, in sectors
    33 00000010 ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters (volume size)
    34 00000014 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors
    35 00000018 ????????            <1>     .dFirstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
    36 0000001C ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header
    37 00000024 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor
    38 00000025 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1)
    39 00000026 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    40 0000002E ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search
    41 00000032 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown
    42                              <1> 
    43                              <1> endstruc
    44                              <1> 
    45                              <1> ;------------------------------------------------------------------------;
    46                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    47                              <1> ; All disk pathing requests go via the CDS for that drive.
    48                              <1> ; The default drive is the last accessed drive, this number is stored
    49                              <1> ; in the DOS data area.
    50                              <1> ; The CDS is stored as an array with the offset into the array being 
    51                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    52                              <1> ;
    53                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    54                              <1> ;------------------------------------------------------------------------;
    55                              <1> struc cds       ;Current Directory structure
    56 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    57 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    58 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    59 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    60 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    61 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    62                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    63                              <1> ; another, we save the number of chars to skip to that deep level).
    64                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    65                              <1> ; Flags: Bit 15 set = Network drive
    66                              <1> ;        Bit 14 set = Physical drive
    67                              <1> ;        Bit 13 set = JOIN'ed drive
    68                              <1> ;        Bit 12 set = SUBST'ed drive
    69                              <1> ;        Bit 7  set = Redirected, not network, drive (This is how MSCDEX worked)
    70                              <1> endstruc
    71                              <1> ;CDS equates
    72                              <1>     cdsNetDrive     equ 8000h
    73                              <1>     cdsPhysDrive    equ 4000h
    74                              <1>     cdsJoinDrive    equ 2000h
    75                              <1>     cdsSubstDrive   equ 1000h
    76                              <1>     cdsRedirDrive   equ 0080h
    77                              <1> ;------------------------------------------------------------------------;
    78                              <1> ; The SFT is a way to allow applications to open file handles to files 
    79                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    80                              <1> ; under the first header, and then a second header will be linked to the 
    81                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    82                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    83                              <1> ; using the FCBS= command. Default FCBS=5.
    84                              <1> ;
    85                              <1> ; A file handle describes the file, and the location within the file that
    86                              <1> ; we are reading. The file handle can be manipulated without the file
    87                              <1> ; being in memory, thus allowing the user to access data without needing 
    88                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    89                              <1> ; accessing devices, by treating them as files with their drivers 
    90                              <1> ; responding and translating the manipulations of the file handle itself.
    91                              <1> ; Neither the driver nor the application should see or use the SFT for
    92                              <1> ; the handle, as it is subject to change (and will change when file 
    93                              <1> ; sharing provisions are included). The DOS will make requests to the 
    94                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    95                              <1> ; track of the information in the SFT entry for that handle. 
    96                              <1> ;
    97                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    98                              <1> ; can point to the same file. It all depends on what the applications 
    99                              <1> ; want to do with the File.
   100                              <1> ;
   101                              <1> ; !!!!IMPORTANT!!!!
   102                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   103                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   104                              <1> ;
   105                              <1> ;Each SFT may look like this:
   106                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   107                              <1> ;            |                |
   108                              <1> ;       wNumFiles*sft    wNumFiles*sft
   109                              <1> ;
   110                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   111                              <1> ; System FCBs.
   112                              <1> ;
   113                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   114                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   115                              <1> ;
   116                              <1> ; DEFAULT FILES=15, MINIMUM FILES=5
   117                              <1> ; DEFAULT FCBS=5, MINIMUM FCBS=5
   118                              <1> ;------------------------------------------------------------------------;
   119                              <1> struc sfth   ;System file table header
   120                              <1> ; This is the SFT header.
   121                              <1> ; This structure comes before the start of the first file in the array/table.
   122 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   123 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc sft
   127                              <1> ;This is the file struc itself
   128 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   129 00000002 ????                <1>     .wOpenMode   resw 1    ;Bit 15 set if opened via FCB
   130 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   131 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   132 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   133 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file
   134 00000013 ????                <1>     .wTime       resw 1    ;File Time
   135 00000015 ????                <1>     .wDate       resw 1    ;File Date
   136 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   137 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset in file, in bytes
   138 0000001F ????                <1>     .wRelClust   resw 1    ;Relative cluster in file of the last cluster accessed
   139 00000021 ????????            <1>     .dDirSect    resd 1    ;Relative number of sector containing directory entry 
   140 00000025 ??                  <1>     .bNumDirEnt  resb 1    ;Number of dir entry within sector (byte offset/32)
   141 00000026 <res Bh>            <1>     .sFCBName    resb 11   ;8.3 Filename
   142 00000031 ????????????????    <1>     .qPSPOwner   resq 1    ;Address of PSP of program which first opened this file
   143 00000039 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster of last cluster accessed
   144                              <1> endstruc
   145                              <1> 
   146                              <1> ;------------------------------------------------------------------------;
   147                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   148                              <1> ; to an internal buffer, and then copying it to the specified location
   149                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   150                              <1> ; another request for the same sector from the same device is made, so 
   151                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   152                              <1> ; size, selected according to the largest detected sector size during 
   153                              <1> ; the initial loadup.
   154                              <1> ;
   155                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   156                              <1> ;
   157                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   158                              <1> ;------------------------------------------------------------------------;
   159                              <1> 
   160                              <1> struc bufferHdr
   161 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   162 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for
   163 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   164 0000000A ????????            <1>     .bufferLBA   resd  1   ;LBA the buffer contains
   165 0000000E ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   166 0000000F ??                  <1>     .bufFAToff   resb  1   ;Sector offset of the backup copy of the FAT on disk
   167 00000010 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   168                              <1> endstruc
     7                                  
     8                                  Segment dSeg nobits align=1 
     9 00000000 ????????????????            dosSegPtr   resq 1    ;Pointer to the data Segment itself
    10 00000008 ??                          bootDrive   resb 1    ;The Int 33h device we booted from
    11 00000009 <res 2Ah>                   requestHdr  resb ioReqPkt_size   
    12                                      ;The device driver header with space for the largest possible packet
    13 00000033 ????????????????            sysVarsPtr  resq 1    ;Pointer to dpbHeadPtr, head of Sys Vars struc below
    14 0000003B ????????????????            mcbChainPtr resq 1    ;Pointer to the MCB chain
    15 00000043 ????????????????            dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain
    16 0000004B ????????????????            sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    17 00000053 ????????????????            clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header
    18                                      ;                    The last driver loaded with the CLOCK$ bit[3] set 
    19 0000005B ????????????????            conPtr      resq 1    ;Pointer to the current active CON device header 
    20                                      ;                    The last driver loaded with the STDIN bit[0] set
    21 00000063 ????                        maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)
    22 00000065 ????????????????            bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain
    23 0000006D ????????????????            cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array
    24 00000075 ????????????????            sfcbHeadPTr resq 1    ;Pointer to the head of the System FCB chain
    25 0000007D ????                        numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    26 0000007F ??                          numMSDdrv   resb 1    ;Number of mass storage devices detected in system
    27 00000080 ??                          lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]
    28 00000081 ??                          numJoinDrv  resb 1    ;Number of Joined Drives
    29 00000082 <res 22h>                   nulDevHdr   resb drvHdr_size
    30                                  
    31                                  ;Swappable, process related data here
    32 000000A4 ??                          inDOS       resb 1    ;Inc on each DOS call, dec when leaving
    33 000000A5 ??                          breakFlag   resb 1    ;If set, check for CTRL+C on all DOS calls
    34 000000A6 ??                          defaultDrv  resb 1    ;Default, last accessed drive
    35 000000A7 ????????????????            currentPSP  resq 1    ;Address of current PSP
    36 000000AF ????????????????            oldRSP      resq 1    ;RSP value before stack switch
    37                                  
    38 000000B7 <res 148h>                  critStack   resq 41
    39 000001FF ????????????????            critStakTop resq 1
    40 00000207 <res 638h>                  IOStack     resq 199
    41 0000083F ????????????????            IOStakTop   resq 1
    42 00000847 <res 638h>                  DiskStack   resq 199
    43 00000E7F ????????????????            DiskStakTop resq 1
    44                                      dSegLen     equ     $
    45                                  
    46                                  Segment .text align=1
    47                                  ; We arrive here with the following values in the registers.
    48                                  ; rbx =  LBA of first Logical Block after SCP/BIOS
    49                                  ; dx  = Int 33h boot device number
    50                                  ; fs  = userbase pointer (pointer to first usable block of RAM)
    51 00000000 55AA                        dw 0AA55h           ;Initial signature
    52 00000002 64881425[08000000]          mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    53                                  
    54 0000000A B9000100C0                  mov ecx, 0C0000100h ;Read FS MSR
    55 0000000F 0F32                        rdmsr
    56 00000011 89D7                        mov edi, edx        ;Get the hi dword, and clear the upper bytes
    57 00000013 48C1E720                    shl rdi, 20h        ;Shift high
    58 00000017 89C7                        mov edi, eax        ;Get the low dword in
    59                                  
    60 00000019 6448893C25-                 mov qword fs:[dosSegPtr], rdi 
    60 0000001E [00000000]         
    61 00000022 4889FD                      mov rbp, rdi    ;Save the start of dosSeg in rdx 
    62 00000025 4881C7[870E0000]            add rdi, dSegLen ;Move destination past end of data area
    63 0000002C 488D35(00000000)            lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    64 00000033 B900100000                  mov ecx, 1000h
    65 00000038 F348A5                      rep movsq
    66                                  
    67                                  ;Modify the pointers in nData before putting them in the data area
    68 0000003B 48012DC6000000              add qword [nData + drvHdr.nxtPtr], rbp
    69 00000042 48012DC9000000              add qword [nData + drvHdr.strPtr], rbp
    70 00000049 48012DCA000000              add qword [nData + drvHdr.intPtr], rbp
    71                                  ;Copy the Null driver to its location in Sysvars
    72 00000050 B922000000                  mov ecx, drvHdr_size
    73 00000055 488D35AC000000              lea rsi, qword [nData]
    74 0000005C 488DBD[82000000]            lea rdi, qword [rbp + nulDevHdr]
    75 00000063 F3A4                        rep movsb   
    76                                  
    77                                  ;Adjust the addresses in the other driver headers 
    78 00000065 48BE-                       mov rsi, conHdr ;Point to the first non-NUL dev in chain
    78 00000067 [E102000000000000] 
    79 0000006F B90C000000                  mov ecx, 12      ;12 drivers in data area
    80 00000074 488D342E                    lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
    81                                  adjDrivers:
    82 00000078 E862000000                  call adjustDrvHdr
    83 0000007D E2F9                        loop adjDrivers
    84                                  
    85 0000007F 6687DB                      xchg bx, bx
    86                                      ;Open NUL
    87 00000082 488D9D[8C000000]            lea rbx, qword [rbp + nulDevHdr + drvHdr.strPtr]    ;Get ptr to strat ptr
    88 00000089 488B1B                      mov rbx, qword [rbx]    ;Get strat ptr
    89 0000008C 30C0                        xor al, al
    90 0000008E FFD3                        call rbx
    91                                  
    92                                      ;Open CON
    93 00000090 48BB-                       mov rbx, conDriver
    93 00000092 [9004000000000000] 
    94 0000009A 488D5C1D00                  lea rbx, qword [rbp+rbx]
    95 0000009F 30C0                        xor al, al
    96 000000A1 FFD3                        call rbx
    97                                  
    98                                      ;Open Mass Storage
    99 000000A3 48BB-                       mov rbx, msdDriver
    99 000000A5 [F605000000000000] 
   100 000000AD 488D5C1D00                  lea rbx, qword [rbp+rbx]
   101 000000B2 30C0                        xor al, al
   102 000000B4 FFD3                        call rbx
   103                                  
   104 000000B6 488D2D35000000              lea rbp, qword [startmsg]   ;Get the absolute address of message
   105 000000BD B804130000                  mov eax, 1304h
   106 000000C2 CD30                        int 30h
   107                                  
   108 000000C4 64488B3425-                 mov rsi, fs:[nulDevHdr]
   108 000000C9 [82000000]         
   109 000000CD B801C50000                  mov eax, 0C501h ;Connect debugger
   110 000000D2 CD35                        int 35h
   111                                  l1:
   112 000000D4 6631C0                      xor ax, ax
   113 000000D7 CD36                        int 36h
   114 000000D9 B40E                        mov ah, 0Eh
   115 000000DB CD30                        int 30h
   116 000000DD EBF5                        jmp short l1
   117                                  adjustDrvHdr:
   118                                  ;Input: rsi = Effective address of driver in DOS segment
   119                                  ;       rbp = Ptr to the start of the DOS segment
   120                                  ;Output: rsi = EA of next header in DOS segment
   121 000000DF 48012E                      add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   122 000000E2 48016E0A                    add qword [rsi + drvHdr.strPtr], rbp
   123 000000E6 48016E12                    add qword [rsi + drvHdr.intPtr], rbp
   124 000000EA 4881C622000000              add rsi, drvHdr_size
   125 000000F1 C3                          ret
   126                                  
   127 000000F2 5374617274696E6720-     startmsg db "Starting SCP/DOS...",0Ah,0Dh,0
   127 000000FB 5343502F444F532E2E-
   127 00000104 2E0A0D00           
   128                                  nData:
   129 00000108 [E102000000000000]          dq conHdr
   130 00000110 0480                        dw 08004h
   131 00000112 [8904000000000000]          dq nulStrat
   132 0000011A [8F04000000000000]          dq nulIntr
   133 00000122 4E554C2020202020            db "NUL     " ;Default NUL data
   134                                  
   135                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 
   136                                  ;-----------------------------------:
   137                                  ;       Misc System routines        :
   138                                  ;-----------------------------------:
   139                                  findLRUBuffer: 
   140                                  ;Finds least recently used buffer, links it and returns ptr to it in rbx
   141                                  ;Input: Nothing
   142                                  ;Output: rbx = Pointer to the buffer to use
   143 00000000 52                          push rdx
   144 00000001 488B1D(65000000)            mov rbx, qword [bufHeadPtr]
   145 00000008 48813BFFFFFFFF              cmp qword [rbx + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   146 0000000F 7502                        jne .flb1
   147 00000011 5A                          pop rdx
   148 00000012 C3                          ret
   149                                  .flb1:
   150 00000013 4889DA                      mov rdx, rbx    ;Save a ptr to the previous buffer header
   151 00000016 488B1A                      mov rbx, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   152 00000019 48813BFFFFFFFF              cmp qword [rbx + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   153 00000020 75F1                        jne .flb1   ;If not LRU, keep walking, else process
   154 00000022 48C702FFFFFFFF              mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   155 00000029 488B15(65000000)            mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   156 00000030 48891D(65000000)            mov qword [bufHeadPtr], rbx    ;Sysvars to point to new buffer
   157 00000037 488913                      mov qword [rbx + bufferHdr.nextBufPtr], rdx
   158 0000003A 5A                          pop rdx
   159 0000003B C3                          ret
   160                                  
   161                                  findDPB:
   162                                  ;Finds the DPB for a given drive
   163                                  ;Input:   dl = Drive number (0=A, 1=B etc...)
   164                                  ;Output: al = 00, rbx = Pointer to the DPB
   165                                  ;        al = -1, Failed, no DPB for device, rbx destroyed
   166 0000003C 488B1D(43000000)            mov rbx, qword [dpbHeadPtr]
   167                                  .fd1:
   168 00000043 30C0                        xor al, al
   169 00000045 3813                        cmp byte [rbx + dpb.bDriveNumber], dl
   170 00000047 740F                        je .fd2
   171 00000049 488B5B26                    mov rbx, qword [rbx + dpb.qNextDPBPtr]
   172 0000004D B0FF                        mov al, -1
   173 0000004F 4881FBFFFFFFFF              cmp rbx, -1 ;If rbx followed last item in list, no DPB exists for dl
   174 00000056 75EB                        jne .fd1
   175                                  .fd2:
   176 00000058 C3                          ret
   177                                  ;-----------------------------------:
   178                                  ;       File System routines        :
   179                                  ;-----------------------------------:
   180                                  fatProc:
   181                                  ;-----------------------------------:
   182                                  ;        Interrupt routines         :
   183                                  ;-----------------------------------:
   184                                  terminateProcess:   ;Int 40h
   185                                  functionDispatch:   ;Int 41h Main function dispatcher
   186                                  terminateHandler:   ;Int 42h
   187                                  ctrlCHandler:       ;Int 43h
   188                                  critErrorHandler:   ;Int 44h
   189                                  ;User Stack in usage here, must be swapped to before this is called
   190                                  ;Entered with:  
   191                                  ;               AH = Critical Error Bitfield
   192                                  ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
   193                                  ;               Bit 6 - Reserved
   194                                  ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
   195                                  ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
   196                                  ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
   197                                  ;               Bits [2-1] = Affected Disk Error
   198                                  ;                     0 0   DOS area
   199                                  ;                     0 1   FAT area
   200                                  ;                     1 0   Directory area
   201                                  ;                     1 1   Data area
   202                                  ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   203                                  ;               AL  = Failing drive number if AH[7] = 0
   204                                  ;               DIL = Error code for errorMsg
   205                                  ;               RSI = EA of Device Header for which device the error occured
   206                                  ;Return:
   207                                  ;               AL = 0 - Ignore the Error       (Ignore)
   208                                  ;                  = 1 - Retry the Operation    (Retry)
   209                                  ;                  = 2 - Terminate the Program  (Abort)
   210                                  ;                  = 3 - Fail the DOS call      (Fail)
   211 00000059 53                          push rbx
   212 0000005A 51                          push rcx
   213 0000005B 52                          push rdx
   214 0000005C 57                          push rdi
   215 0000005D FC                          cld         ;Make String op go forward
   216                                  
   217 0000005E 6689C3                      mov bx, ax  ;Save ah in bh and al in bl (if needed)
   218 00000061 488D1520020000              lea rdx, qword [.crlf]
   219 00000068 B409                        mov ah, 09h ;Print String
   220 0000006A CD41                        int 41h     ;Call DOS to print CRLF part of message
   221                                  
   222 0000006C 6681E7FF00                  and di, 00FFh   ;Zero the upper byte of DI just in case
   223 00000071 480FB7FF                    movzx rdi, di
   224 00000075 4889FA                      mov rdx, rdi    ;Copy error code
   225 00000078 48C1E704                    shl rdi, 4  ;Multiply by 16
   226 0000007C 48D1E2                      shl rdx, 1  ;Multiply by 2
   227 0000007F 4801D7                      add rdi, rdx    ;Add the resultant multiplications
   228 00000082 488D97[79010000]            lea rdx, qword [.errorMsgTable + rdi]   ;Load EA to rdx
   229 00000089 B409                        mov ah, 09h ;Print String
   230 0000008B CD41                        int 41h     ;Call DOS to print first part of message
   231                                  
   232 0000008D 488D15D6010000              lea rdx, qword [.readmsg]
   233 00000094 488D3DDE010000              lea rdi, qword [.writemsg]
   234 0000009B F6C701                      test bh, 1  ;Bit 0 is set if write operation
   235 0000009E 480F45D7                    cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
   236 000000A2 B409                        mov ah, 09h ;Print String
   237 000000A4 CD41                        int 41h     ;Call DOS to print error reading/writing portion
   238                                  
   239 000000A6 F6C780                      test bh, 80h    ;Test bit 7 for char/Disk assertation
   240 000000A9 0F85B0000000                jnz .charError
   241                                  ;Disk error continues here
   242 000000AF 488D15AD010000              lea rdx, qword [.drive] ;Drive message
   243 000000B6 B409                        mov ah, 09h
   244 000000B8 CD41                        int 41h
   245 000000BA 88DA                        mov dl, bl  ;Get zero based drive number into dl
   246 000000BC 80C241                      add dl, "A" ;Add ASCII code
   247 000000BF B402                        mov ah, 02h ;Print char in dl
   248 000000C1 CD41                        int 41h
   249                                  .userInput:
   250 000000C3 488D15BE010000              lea rdx, qword [.crlf]  ;Print new line
   251 000000CA B409                        mov ah, 09h
   252 000000CC CD41                        int 41h
   253                                  ;Abort, Retry, Ignore, Fail is word order
   254                                  ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   255                                  .userAbort:
   256                                  ;Abort is always an option
   257 000000CE 488D15B6010000              lea rdx, qword [.abortmsg]
   258 000000D5 B409                        mov ah, 09h
   259 000000D7 CD41                        int 41h ;Call DOS to prompt user for ABORT option
   260                                  .userRetry:
   261 000000D9 F6C710                      test bh, 10h  ;Bit 4 is retry bit
   262 000000DC 7416                        jz .userIgnore    ;If clear, dont print message
   263 000000DE 488D15BE010000              lea rdx, qword [.betweenMsg]
   264 000000E5 B409                        mov ah, 09h
   265 000000E7 CD41                        int 41h
   266 000000E9 488D15A8010000              lea rdx, qword [.retrymsg]
   267 000000F0 B409                        mov ah, 09h
   268 000000F2 CD41                        int 41h
   269                                  .userIgnore:
   270 000000F4 F6C720                      test bh, 20h    ;Bit 5 is ignore bit
   271 000000F7 7416                        jz .userFail
   272 000000F9 488D15A3010000              lea rdx, qword [.betweenMsg]
   273 00000100 B409                        mov ah, 09h
   274 00000102 CD41                        int 41h
   275 00000104 488D1586010000              lea rdx, qword [.ignoremsg]
   276 0000010B B409                        mov ah, 09h
   277 0000010D CD41                        int 41h
   278                                  .userFail:
   279 0000010F F6C708                      test bh, 08h    ;Bit 3 is ignore bit
   280 00000112 7416                        jz .userMsgEnd
   281 00000114 488D1588010000              lea rdx, qword [.betweenMsg]
   282 0000011B B409                        mov ah, 09h
   283 0000011D CD41                        int 41h
   284 0000011F 488D1578010000              lea rdx, qword [.failmsg]
   285 00000126 B409                        mov ah, 09h
   286 00000128 CD41                        int 41h
   287                                  .userMsgEnd:
   288 0000012A 488D1575010000              lea rdx, qword [.endMsg]
   289 00000131 B409                        mov ah, 09h
   290 00000133 CD41                        int 41h
   291                                  ;Get user input now 
   292                                  .userInputPhase:
   293 00000135 31C9                        xor ecx, ecx  ;4 Possible Responses
   294 00000137 488D3D6B010000              lea rdi, qword [.responses] ;Go to start of string
   295 0000013E B408                        mov ah, 08h ;STDIN without Console Echo
   296 00000140 CD41                        int 41h ;Get char in al
   297 00000142 3C61                        cmp al, "a" ;Chack if lowercase
   298 00000144 7202                        jb .uip1    ;If the value is below, ignore subtraction
   299 00000146 2C20                        sub al, "a"-"A"  ;Turn the char into uppercase
   300                                  .uip1:
   301 00000148 AE                          scasb   ;Compare char to list, offset gives return code
   302 00000149 740C                        je .validInput  ;If they are equal, ecx has return code
   303 0000014B FFC1                        inc ecx
   304 0000014D 81F904000000                cmp ecx, 4
   305 00000153 75F3                        jne .uip1
   306 00000155 EBDE                        jmp short .userInputPhase ;If valid char not found, keep waiting 
   307                                  .validInput:
   308 00000157 88C8                        mov al, cl  ;Move the offset into .responses into al
   309                                  .cehExit:
   310 00000159 5F                          pop rdi
   311 0000015A 5A                          pop rdx
   312 0000015B 59                          pop rcx
   313 0000015C 5B                          pop rbx
   314 0000015D 48CF                        iretq
   315                                  .charError:
   316 0000015F B908000000                  mov ecx, 8  ;8 chars in device name
   317 00000164 4881C61A000000              add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   318                                  .ce1:
   319 0000016B AC                          lodsb   ;Get a string char into al and inc rsi
   320 0000016C 88C2                        mov dl, al  ;Move char into dl
   321 0000016E B402                        mov ah, 02h
   322 00000170 CD41                        int 41h ;Print char
   323 00000172 E2F7                        loop .ce1   ;Keep looping until all 8 char device cahrs have been printed
   324 00000174 E94AFFFFFF                  jmp .userInput
   325                                  
   326                                  .errorMsgTable: ;Each table entry is 18 chars long
   327 00000179 57726974652050726F-                 db "Write Protect $   "       ;Error 0
   327 00000182 746563742024202020 
   328 0000018B 556E6B6E6F776E2055-                 db "Unknown Unit $    "       ;Error 1
   328 00000194 6E6974202420202020 
   329 0000019D 4E6F74205265616479-                 db "Not Ready $       "       ;Error 2
   329 000001A6 202420202020202020 
   330 000001AF 556E6B6E6F776E2043-                 db "Unknown Command $ "       ;Error 3
   330 000001B8 6F6D6D616E64202420 
   331 000001C1 44617461204572726F-                 db "Data Error $      "       ;Error 4
   331 000001CA 722024202020202020 
   332 000001D3 426164205265717565-                 db "Bad Request $     "       ;Error 5
   332 000001DC 737420242020202020 
   333 000001E5 5365656B2024202020-                 db "Seek $            "       ;Error 6
   333 000001EE 202020202020202020 
   334 000001F7 556E6B6E6F776E204D-                 db "Unknown Media $   "       ;Error 7
   334 00000200 656469612024202020 
   335 00000209 536563746F72204E6F-                 db "Sector Not Found $"       ;Error 8
   335 00000212 7420466F756E642024 
   336 0000021B 4F7574204F66205061-                 db "Out Of Paper $    "       ;Error 9
   336 00000224 706572202420202020 
   337 0000022D 577269746520466175-                 db "Write Fault $     "       ;Error A
   337 00000236 6C7420242020202020 
   338 0000023F 52656164204661756C-                 db "Read Fault $      "       ;Error B
   338 00000248 742024202020202020 
   339 00000251 47656E6572616C2046-                 db "General Failure $ "       ;Error C
   339 0000025A 61696C757265202420 
   340                                  
   341 00000263 64726976652024          .drive      db "drive $"
   342 0000026A 6572726F7220726561-     .readmsg    db "error reading $"
   342 00000273 64696E672024       
   343 00000279 6572726F7220777269-     .writemsg   db "error writing $"
   343 00000282 74696E672024       
   344 00000288 0A0D24                  .crlf       db 0Ah, 0Dh, "$"
   345 0000028B 41626F727424            .abortmsg   db "Abort$" 
   346 00000291 49676E6F726524          .ignoremsg  db "Ignore$"
   347 00000298 526574727924            .retrymsg   db "Retry$"
   348 0000029E 4661696C24              .failmsg    db "Fail$"
   349 000002A3 2C2024                  .betweenMsg db ", $"
   350 000002A6 3F2024                  .endMsg     db "? $"
   351 000002A9 49524146                .responses  db "IRAF"   ;Abort Retry Ignore Fail
   352                                  absDiskRead:        ;Int 45h
   353                                  ;al = Drive number
   354                                  ;rbx = Memory Buffer address
   355                                  ;ecx = Number of sectors to read (max 255 for now)
   356                                  ;rdx = Start LBA to read from
   357 000002AD 480FB6C0                    movzx rax, al   ;Zero extend DOS drive number 
   358 000002B1 8A80[6B080000]              mov al, byte [msdDriver.msdBIOSmap + rax] ;Get translated BIOS num into al
   359 000002B7 4891                        xchg rax, rcx
   360 000002B9 4887CA                      xchg rcx, rdx
   361 000002BC B482                        mov ah, 82h
   362 000002BE CD33                        int 33h
   363 000002C0 48CF                        iretq
   364                                  absDiskWrite:       ;Int 46h
   365 000002C2 480FB6C0                    movzx rax, al   ;Zero extend DOS drive number 
   366 000002C6 8A80[6B080000]              mov al, byte [msdDriver.msdBIOSmap + rax] ;Get translated BIOS num into al
   367 000002CC 4891                        xchg rax, rcx
   368 000002CE 4887CA                      xchg rcx, rdx
   369 000002D1 B483                        mov ah, 83h
   370 000002D3 CD33                        int 33h
   371 000002D5 48CF                        iretq
   372                                  terminateResident:  ;Int 47h
   373                                  inDosHandler:       ;Int 48h
   374                                  ;Called when DOS idle
   375 000002D7 48CF                        iretq
   376                                  fastOutput:         ;Int 49h
   377                                  ;Called with char to transfer in al
   378 000002D9 50                          push rax
   379 000002DA B40E                        mov ah, 0Eh
   380 000002DC CD30                        int 30h
   381 000002DE 58                          pop rax
   382 000002DF 48CF                        iretq
   383                                  passCommand:        ;Int 4Eh
   384                                  multiplex:          ;Int 4Fh
   385                                  ;-----------------------------------:
   386                                  ;          Driver routines          :
   387                                  ;-----------------------------------:
   388                                  drivers:
   389                                  conHdr:
   390 000002E1 [0303000000000000]          dq auxHdr
   391 000002E9 1308                        dw 0813h
   392 000002EB [7904000000000000]          dq commonStrat
   393 000002F3 [9004000000000000]          dq conDriver
   394 000002FB 434F4E2020202020            db "CON     "
   395                                  auxHdr:
   396 00000303 [2503000000000000]          dq prnHdr
   397 0000030B 0080                        dw 08000h
   398 0000030D [7904000000000000]          dq commonStrat
   399 00000315 [4B05000000000000]          dq com1Intr
   400 0000031D 4155582020202020            db "AUX     "
   401                                  prnHdr:
   402 00000325 [4703000000000000]          dq clkHdr
   403 0000032D 40A0                        dw 0A040h
   404 0000032F [7904000000000000]          dq commonStrat
   405 00000337 [1304000000000000]          dq lpt1Hdr
   406 0000033F 50524E2020202020            db "PRN     "
   407                                  clkHdr:
   408 00000347 [6903000000000000]          dq msdHdr
   409 0000034F 0880                        dw 08008h
   410 00000351 [7904000000000000]          dq commonStrat
   411 00000359 [4B05000000000000]          dq clkDriver
   412 00000361 434C4F434B242020            db "CLOCK$  "
   413                                  msdHdr:
   414 00000369 [8B03000000000000]          dq com1Hdr
   415 00000371 0008                        dw 00800h   ;Once Generic IO implemented, change to 00840h
   416 00000373 [7904000000000000]          dq commonStrat
   417 0000037B [F605000000000000]          dq msdDriver
   418 00000383 0000000000000000            db 0,0,0,0,0,0,0,0
   419                                  com1Hdr:
   420 0000038B [AD03000000000000]          dq com2Hdr
   421 00000393 0080                        dw 08000h
   422 00000395 [7904000000000000]          dq commonStrat
   423 0000039D [4B05000000000000]          dq com1Intr
   424 000003A5 434F4D3120202020            db "COM1    "
   425                                  com2Hdr:
   426 000003AD [CF03000000000000]          dq com3Hdr
   427 000003B5 0080                        dw 08000h
   428 000003B7 [7904000000000000]          dq commonStrat
   429 000003BF [5405000000000000]          dq com2Intr
   430 000003C7 434F4D3220202020            db "COM2    "
   431                                  com3Hdr:
   432 000003CF [F103000000000000]          dq com4Hdr
   433 000003D7 0080                        dw 08000h
   434 000003D9 [7904000000000000]          dq commonStrat
   435 000003E1 [5D05000000000000]          dq com3Intr
   436 000003E9 434F4D3320202020            db "COM3    "
   437                                  com4Hdr:
   438 000003F1 [1304000000000000]          dq lpt1Hdr
   439 000003F9 0080                        dw 08000h
   440 000003FB [7904000000000000]          dq commonStrat
   441 00000403 [6605000000000000]          dq com4Intr
   442 0000040B 434F4D3420202020            db "COM4    "
   443                                  lpt1Hdr:
   444 00000413 [3504000000000000]          dq lpt2Hdr
   445 0000041B 40A0                        dw 0A040h
   446 0000041D [7904000000000000]          dq commonStrat
   447 00000425 [E605000000000000]          dq lptDriver
   448 0000042D 4C50543120202020            db "LPT1    "
   449                                  lpt2Hdr:
   450 00000435 [5704000000000000]          dq lpt3Hdr
   451 0000043D 40A0                        dw 0A040h
   452 0000043F [7904000000000000]          dq commonStrat
   453 00000447 [E605000000000000]          dq lptDriver
   454 0000044F 4C50543220202020            db "LPT2    "
   455                                  lpt3Hdr:
   456 00000457 FFFFFFFFFFFFFFFF            dq -1
   457 0000045F 40A0                        dw 0A040h
   458 00000461 [7904000000000000]          dq commonStrat
   459 00000469 [E605000000000000]          dq lptDriver
   460 00000471 4C50543320202020            dq "LPT3    "
   461                                  
   462                                  commonStrat:
   463                                  ;DOS calls this function with rbx=Ptr to request header
   464 00000479 48891D01000000              mov qword [reqHdrPtr], rbx
   465 00000480 C3                          ret
   466 00000481 0000000000000000        reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
   467                                  
   468                                  nulStrat:
   469 00000489 66C743030001                mov word [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
   470                                  nulIntr:
   471 0000048F C3                          ret
   472                                  
   473                                  conDriver:
   474 00000490 50                          push rax
   475 00000491 53                          push rbx
   476 00000492 488B1DE8FFFFFF              mov rbx, qword [reqHdrPtr]
   477 00000499 8A4302                      mov al, byte [rbx + drvReqHdr.cmdcde]
   478 0000049C 84C0                        test al, al
   479 0000049E 7421                        jz conInit
   480 000004A0 3C04                        cmp al, 4
   481 000004A2 744D                        jz conRead
   482 000004A4 3C05                        cmp al, 5
   483 000004A6 7466                        jz conNondestructiveRead
   484 000004A8 3C06                        cmp al, 6
   485 000004AA 740C                        jz conExit
   486 000004AC 3C07                        cmp al, 7
   487 000004AE 7471                        jz conFlushInputBuffers
   488 000004B0 3C08                        cmp al, 8
   489 000004B2 7479                        jz conWrite
   490 000004B4 3C09                        cmp al, 9
   491 000004B6 7475                        jz conWrite
   492                                  ;All other cases fall through here
   493                                  conExit:
   494 000004B8 66814B030001                or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   495 000004BE 5B                          pop rbx
   496 000004BF 58                          pop rax
   497 000004C0 C3                          ret
   498                                  conInit:    ;Function 0
   499 000004C1 52                          push rdx
   500                                      ;Flush keyboard buffer
   501                                  .ci0:
   502 000004C2 B401                        mov ah, 01      ;Get buffer status
   503 000004C4 CD36                        int 36h
   504 000004C6 7406                        jz .ci1      ;If zero clear => no more keys to read
   505 000004C8 30E4                        xor ah, ah
   506 000004CA CD36                        int 36h ;Read key to flush from buffer
   507 000004CC EBF4                        jmp short .ci0
   508                                  .ci1:
   509 000004CE B800050000                  mov eax, 0500h  ;Set page zero as the default page
   510 000004D3 CD30                        int 30h
   511 000004D5 B402                        mov ah, 02h
   512 000004D7 31D2                        xor edx, edx    ;Set screen cursor to top right corner
   513 000004D9 88D7                        mov bh, dl      ;Set cursor for page 0
   514 000004DB CD30                        int 30h
   515 000004DD B707                        mov bh, 07h     ;Grey/Black attribs
   516 000004DF B800060000                  mov eax, 0600h  ;Clear whole screen
   517 000004E4 CD30                        int 30h
   518 000004E6 5A                          pop rdx
   519 000004E7 EBCF                        jmp short conExit
   520                                  conIORead:
   521 000004E9 66C743030380                mov word [rbx + drvReqHdr.status], 8003h    ;Error, unknown command!
   522 000004EF EBC7                        jmp short conExit
   523                                  conRead:    ;Function 4
   524 000004F1 57                          push rdi
   525 000004F2 51                          push rcx
   526 000004F3 488B7B0E                    mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   527 000004F7 31C9                        xor ecx, ecx    ;Zero the char counter
   528                                  .cr1:
   529 000004F9 3B4B16                      cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   530 000004FC 7409                        je .cre2
   531 000004FE 31C0                        xor eax, eax
   532 00000500 CD36                        int 36h
   533 00000502 AA                          stosb   ;Store char in al into buffer and inc rdi
   534 00000503 FFC1                        inc ecx
   535 00000505 EBF2                        jmp short .cr1
   536                                  .cre2:
   537 00000507 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   538 0000050A 59                          pop rcx
   539 0000050B 5F                          pop rdi
   540 0000050C EBAA                        jmp short conExit
   541                                  conNondestructiveRead:  ;Function 5
   542 0000050E B401                        mov ah, 01h     ;Get key if exists
   543 00000510 CD36                        int 36h
   544 00000512 7405                        jz .cnr           ;If zero clear => no key, go forwards
   545                                      ;Keystroke available
   546 00000514 88430D                      mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Move char in al
   547 00000517 EB9F                        jmp short conExit
   548                                  .cnr: ;No keystroke available
   549 00000519 66C743030003                mov word [rbx + nonDestInNoWaitReqPkt.status], 0300h   ;Set busy bit
   550 0000051F EB97                        jmp short conExit
   551                                  conFlushInputBuffers:   ;Function 7
   552 00000521 B401                        mov ah, 01      ;Get buffer status
   553 00000523 CD36                        int 36h
   554 00000525 7491                        jz conExit      ;If zero clear => no more keys to read
   555 00000527 30E4                        xor ah, ah
   556 00000529 CD36                        int 36h ;Read key to flush from buffer
   557 0000052B EBF4                        jmp short conFlushInputBuffers
   558                                  conWrite:   ;Function 8 and 9
   559 0000052D 56                          push rsi
   560 0000052E 51                          push rcx
   561 0000052F 488B730E                    mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   562 00000533 31C9                        xor ecx, ecx    ;Zero the char counter
   563                                  .cw1: 
   564 00000535 3B4B16                      cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   565 00000538 7407                        je .cw2
   566 0000053A AC                          lodsb   ;Get char into al, and inc rsi
   567 0000053B CD49                        int 49h ;Fast print char
   568 0000053D FFC1                        inc ecx
   569 0000053F EBF4                        jmp short .cw1 ;keep printing until all chars printed
   570                                  .cw2:
   571 00000541 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   572 00000544 59                          pop rcx
   573 00000545 5E                          pop rsi
   574 00000546 E96DFFFFFF                  jmp conExit
   575                                  
   576                                  clkDriver:
   577                                  
   578                                  comDriver:
   579                                  com1Intr:
   580 0000054B C6059300000000              mov byte [comDevice], 0
   581 00000552 EB19                        jmp short comIntr
   582                                  com2Intr:
   583 00000554 C6058A00000001              mov byte [comDevice], 1
   584 0000055B EB10                        jmp short comIntr
   585                                  com3Intr:
   586 0000055D C6058100000002              mov byte [comDevice], 2
   587 00000564 EB07                        jmp short comIntr
   588                                  com4Intr:
   589 00000566 C6057800000003              mov byte [comDevice], 3
   590                                  comIntr:
   591 0000056D 50                          push rax
   592 0000056E 53                          push rbx
   593 0000056F 51                          push rcx
   594 00000570 52                          push rdx
   595 00000571 56                          push rsi
   596 00000572 488B1D08FFFFFF              mov rbx, qword [reqHdrPtr]
   597 00000579 8A4302                      mov al, byte [rbx + drvReqHdr.cmdcde]
   598 0000057C 3C04                        cmp al, 4
   599 0000057E 7418                        jz comRead
   600 00000580 3C05                        cmp al, 5
   601 00000582 7439                        jz comNondestructiveRead
   602 00000584 3C08                        cmp al, 8
   603 00000586 743D                        jz comWrite
   604 00000588 3C09                        cmp al, 9
   605 0000058A 7439                        jz comWrite
   606                                  ;All other cases fall through here
   607                                  comExit:
   608 0000058C 66814B030001                or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   609 00000592 5E                          pop rsi
   610 00000593 5A                          pop rdx
   611 00000594 59                          pop rcx
   612 00000595 5B                          pop rbx
   613 00000596 58                          pop rax
   614 00000597 C3                          ret
   615                                  comRead:
   616 00000598 57                          push rdi
   617 00000599 488B7B0E                    mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   618 0000059D 31C9                        xor ecx, ecx    ;Zero the char counter
   619                                  .cr1:
   620 0000059F 3B4B16                      cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   621 000005A2 7413                        je .cre2
   622 000005A4 B802000000                  mov eax, 02h    ;Recieve 
   623 000005A9 668B1535000000              mov dx, word [comDevice]    ;Get transacting com device
   624 000005B0 CD34                        int 34h ;Recieve Char
   625 000005B2 AA                          stosb   ;Store char in al into buffer and inc rdi
   626 000005B3 FFC1                        inc ecx
   627 000005B5 EBE8                        jmp short .cr1
   628                                  .cre2:
   629 000005B7 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   630 000005BA 5F                          pop rdi
   631 000005BB EBCF                        jmp short comExit
   632                                  comNondestructiveRead:
   633 000005BD 66C743030002                mov word [rbx + nonDestInNoWaitReqPkt.status], 0200h    ;Set busy bit 
   634 000005C3 EBC7                        jmp short comExit
   635                                  comWrite:
   636 000005C5 488B730E                 mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   637 000005C9 31C9                        xor ecx, ecx    ;Zero the char counter
   638                                  .cw1: 
   639 000005CB 3B4B16                      cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   640 000005CE 7410                        je .cw2
   641 000005D0 AC                          lodsb   ;Get char into al, and inc rsi
   642 000005D1 B401                        mov ah, 01h ;Move function number into ah
   643 000005D3 668B150B000000              mov dx, word [comDevice]
   644 000005DA CD34                        int 34h ;Transmit char
   645 000005DC FFC1                        inc ecx
   646 000005DE EBEB                        jmp short .cw1 ;keep printing until all chars printed
   647                                  .cw2:
   648 000005E0 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   649 000005E3 EBA7                        jmp short comExit
   650 000005E5 00                      comDevice   db 0
   651                                  
   652                                  lptDriver:    ;Drivers for LPT 1, 2, 3
   653 000005E6 57                          push rdi
   654 000005E7 488B3D93FEFFFF              mov rdi, qword [reqHdrPtr]
   655 000005EE 66C747030001                mov word [rdi + drvReqHdr.status], 0100h    ;Done bit set
   656 000005F4 5F                          pop rdi
   657 000005F5 C3                          ret
   658                                  
   659                                  msdDriver:
   660 000005F6 50                          push rax
   661 000005F7 53                          push rbx
   662 000005F8 51                          push rcx
   663 000005F9 52                          push rdx
   664 000005FA 56                          push rsi
   665 000005FB 57                          push rdi
   666 000005FC 55                          push rbp
   667 000005FD 488B1D7DFEFFFF              mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
   668 00000604 8A4302                      mov al, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
   669 00000607 3C18                        cmp al, 24  ;Check cmd num is valid
   670 00000609 776C                        ja .msdError
   671 0000060B 84C0                        test al, al
   672 0000060D 7476                        jz .msdInit
   673 0000060F 3C01                        cmp al, 01
   674 00000611 0F8409010000                jz .msdMedChk
   675 00000617 3C02                        cmp al, 02
   676 00000619 0F8442010000                jz .msdBuildBPB
   677 0000061F 3C03                        cmp al, 03
   678 00000621 0F847B010000                jz .msdIOCTLRead
   679 00000627 3C04                        cmp al, 04
   680 00000629 0F8478010000                jz .msdRead
   681 0000062F 3C08                        cmp al, 08
   682 00000631 0F8482010000                jz .msdWrite
   683 00000637 3C09                        cmp al, 09
   684 00000639 0F848C010000                jz .msdWriteVerify
   685 0000063F 3C0C                        cmp al, 12
   686 00000641 0F849D010000                jz .msdIOCTLWrite
   687 00000647 3C0D                        cmp al, 13
   688 00000649 0F849A010000                jz .msdDevOpen
   689 0000064F 3C0E                        cmp al, 14
   690 00000651 0F84A2010000                jz .msdDevClose
   691 00000657 3C0F                        cmp al, 15
   692 00000659 0F84AA010000                jz .msdRemovableMedia
   693 0000065F 3C13                        cmp al, 19
   694 00000661 0F84C0010000                jz .msdGenericIOCTL
   695 00000667 3C17                        cmp al, 23
   696 00000669 0F84BD010000                jz .msdGetLogicalDev
   697 0000066F 3C18                        cmp al, 24
   698 00000671 0F84C3010000                jz .msdSetLogicalDev
   699                                  .msdError:
   700                                  .msdDriverExit:
   701 00000677 66814B030001                or word [rbx + drvReqHdr.status], 0100h ;Set done bit
   702 0000067D 5D                          pop rbp
   703 0000067E 5F                          pop rdi
   704 0000067F 5E                          pop rsi
   705 00000680 5A                          pop rdx
   706 00000681 59                          pop rcx
   707 00000682 5B                          pop rbx
   708 00000683 58                          pop rax
   709 00000684 C3                          ret
   710                                  .msdInit:            ;Function 0
   711 00000685 CD31                        int 31h ;Get number of Int 33h devices in r8b
   712 00000687 4D0FB6C0                    movzx r8, r8b   ;Keeps real count
   713 0000068B 4489C0                      mov eax, r8d
   714 0000068E 3C01                        cmp al, 1
   715 00000690 7702                        ja .mi1
   716 00000692 FEC0                        inc al ;Make it two
   717                                  .mi1:
   718 00000694 BA05000000                  mov edx, 5
   719 00000699 39D0                        cmp eax, edx
   720 0000069B 0F47C2                      cmova eax, edx  ;If num of drives is greater than 5, consider only first 5
   721 0000069E 8805DFFCFFFF                mov byte [msdHdr + drvHdr.drvNam], al ;Save num of drvs in drvr hdr
   722 000006A4 88430D                      mov byte [rbx + initReqPkt.numunt], al ;And in req packet
   723 000006A7 440005(7F000000)            add byte [numMSDdrv], r8b ;Add the true number of devices to total
   724 000006AE 31ED                        xor ebp, ebp    ;Use bpl as device counter, cmp to r8b
   725 000006B0 488D3DE6010000              lea rdi, qword [.msdBPBblks]
   726 000006B7 53                          push rbx
   727                                  .mi2:
   728 000006B8 89EA                        mov edx, ebp
   729 000006BA 488D1D34040000              lea rbx, qword [driverDataPtr]  ;Get effective address of scratch space
   730 000006C1 31C9                        xor ecx, ecx    ;Sector 0
   731 000006C3 B801820000                  mov eax, 8201h       ;Read 1 sector
   732 000006C8 CD33                        int 33h
   733 000006CA 724E                        jc .msdInitError
   734                                  
   735 000006CC 488D3522040000              lea rsi, qword [driverDataPtr]  ;Point to start of data
   736 000006D3 B90F000000                  mov ecx, bpbEx_size/8
   737 000006D8 F348A5                      rep movsq   ;Move the BPB data into the right block
   738                                  
   739 000006DB FFC5                        inc ebp
   740 000006DD 4C39C5                      cmp rbp, r8 ;Have we written the BPB for all physical drives?
   741 000006E0 75D6                        jne .mi2  ;No? Go again
   742                                  
   743 000006E2 488D3D8C010000              lea rdi, qword [.msdBPBTbl]  ;Point to start of table
   744 000006E9 488D15AD010000              lea rdx, qword [.msdBPBblks]
   745                                  .mi3:
   746 000006F0 488917                      mov qword [rdi], rdx   ;Move the block entry ptr to rdi
   747 000006F3 4881C278000000              add rdx, bpbEx_size      ;Make rdx point to the next block entry
   748 000006FA FFCD                        dec ebp
   749 000006FC 75F2                        jnz .mi3  ;If not zero yet, go again
   750                                  
   751 000006FE 5B                          pop rbx
   752 000006FF 488D156F010000              lea rdx, qword [.msdBPBTbl]  ;Get far pointer 
   753 00000706 48895316                    mov qword [rbx + initReqPkt.optptr], rdx  ;Save ptr to array
   754 0000070A 488D15E4030000              lea rdx, qword [driverDataPtr]
   755 00000711 4889530E                    mov qword [rbx + initReqPkt.endptr], rdx    ;Save free space ptr
   756 00000715 E95DFFFFFF                  jmp .msdDriverExit
   757                                  .msdInitError:
   758 0000071A 5B                          pop rbx
   759 0000071B E957FFFFFF                  jmp .msdDriverExit
   760                                  .msdMedChk:          ;Function 1
   761                                  ;Once the BIOS function is implmented that reads the changeline, use that!
   762                                  ;For BIOSes that dont support the changeline, the following procedure will 
   763                                  ; suffice.
   764 00000720 480FB64301                  movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   765 00000725 8A90[6B080000]              mov dl, byte [.msdBIOSmap + rax]    ;Translate unitnum to BIOS num
   766 0000072B F6C280                      test dl, 80h    ;If it is a fixed disk, no change!
   767 0000072E 7528                        jnz .mmcNoChange
   768                                  ;Now we test Media Descriptor
   769 00000730 8A530D                      mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   770 00000733 488B3CC5[75080000]          mov rdi, qword [.msdBPBTbl + 8*rax]
   771 0000073B 488B3F                      mov rdi, qword [rdi]    ;Dereference rdi
   772 0000073E 385715                      cmp byte [rdi + bpb32.media], dl    ;Compare media descriptor bytes
   773 00000741 740C                        je .mmcUnsure
   774                                  .mmcChange: ;Fail safe, always assume the device has changed
   775 00000743 C6430EFF                    mov byte [rbx + mediaCheckReqPkt.medret], -1
   776 00000747 48C7430F[61080000]          mov qword [rbx + mediaCheckReqPkt.desptr], .msdDefLabel ;Temp, ret def label
   777                                  .mmcUnsure:
   778 0000074F C6430E00                    mov byte [rbx + mediaCheckReqPkt.medret], 0
   779 00000753 E91FFFFFFF                  jmp .msdDriverExit
   780                                  .mmcNoChange:
   781 00000758 C6430E01                    mov byte [rbx + mediaCheckReqPkt.medret], 1
   782 0000075C E916FFFFFF                  jmp .msdDriverExit
   783                                  
   784                                  .msdBuildBPB:        ;Function 2
   785 00000761 4889DE                      mov rsi, rbx
   786 00000764 480FB64601                  movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   787 00000769 8A90[6B080000]              mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req
   788 0000076F 488B5E0E                    mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   789 00000773 31C9                        xor ecx, ecx    ;Read Sector 0
   790 00000775 B801820000                  mov eax, 8201h  ;LBA Read 1 sector
   791 0000077A CD33                        int 33h
   792 0000077C 7224                        jc .mbbpbError
   793 0000077E 4887DE                      xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   794 00000781 480FB64301                  movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   795 00000786 488B3CC5[75080000]          mov rdi, qword [.msdBPBTbl + 8*rax] ;Get pointer to pointer to buffer
   796 0000078E 488B3F                      mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   797 00000791 48897B16                    mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   798 00000795 B90F000000                  mov ecx, bpbEx_size/8
   799 0000079A F348A5                      rep movsq   ;Move the BPB data into the right space
   800 0000079D E9D5FEFFFF                  jmp .msdDriverExit
   801                                  .mbbpbError:
   802                                  .msdIOCTLRead:       ;Function 3, returns done
   803 000007A2 E9D0FEFFFF                  jmp .msdDriverExit
   804                                  .msdRead:            ;Function 4
   805 000007A7 4889DD                      mov rbp, rbx
   806 000007AA B482                        mov ah, 82h ;LBA Read Sectors
   807 000007AC E897000000                  call .msdBlkIOCommon
   808 000007B1 4889EB                      mov rbx, rbp
   809 000007B4 E9BEFEFFFF                  jmp .msdDriverExit
   810                                  .msdWrite:           ;Function 8
   811 000007B9 4889DD                      mov rbp, rbx
   812 000007BC B483                        mov ah, 83h ;LBA Write Sectors
   813 000007BE E885000000                  call .msdBlkIOCommon
   814 000007C3 4889EB                      mov rbx, rbp
   815 000007C6 E9ACFEFFFF                  jmp .msdDriverExit
   816                                  .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   817 000007CB 4889DD                      mov rbp, rbx
   818 000007CE B483                        mov ah, 83h ;LBA Write Sectors
   819 000007D0 E873000000                  call .msdBlkIOCommon
   820 000007D5 B484                        mov ah, 84h ;LBA Verify Sectors
   821 000007D7 E86C000000                  call .msdBlkIOCommon
   822 000007DC 4889EB                      mov rbx, rbp
   823 000007DF E993FEFFFF                  jmp .msdDriverExit
   824                                  .msdIOCTLWrite:      ;Function 12, returns done
   825 000007E4 E98EFEFFFF                  jmp .msdDriverExit
   826                                  .msdDevOpen:         ;Function 13
   827 000007E9 480FB64301                  movzx rax, byte [rbx + openReqPkt.unitnm]
   828 000007EE FE80[70080000]              inc byte [.msdHdlCnt + rax]  ;Inc handle cnt for given unit
   829 000007F4 E97EFEFFFF                  jmp .msdDriverExit
   830                                  .msdDevClose:        ;Function 14
   831 000007F9 480FB64301                  movzx rax, byte [rbx + closeReqPkt.unitnm]
   832 000007FE FE88[70080000]              dec byte [.msdHdlCnt + rax]  ;Dec handle cnt for given unit
   833 00000804 E96EFEFFFF                  jmp .msdDriverExit
   834                                  .msdRemovableMedia:  ;Function 15
   835 00000809 480FB64301                  movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   836 0000080E 8A80[6B080000]              mov al, byte [.msdBIOSmap + rax]    ;Get BIOS number
   837 00000814 A880                        test al, 80h
   838 00000816 0F845BFEFFFF                jz .msdDriverExit   ;If removable, busy bit is clear
   839 0000081C 66C743032000                mov word [rbx + remMediaReqPkt.status], 20h ;Set Busy bit
   840 00000822 E950FEFFFF                  jmp .msdDriverExit
   841                                  .msdGenericIOCTL:    ;Function 19
   842 00000827 E94BFEFFFF                  jmp .msdDriverExit
   843                                  .msdGetLogicalDev:   ;Function 23
   844 0000082C 8A0538000000                mov al, byte [.msdCurDev]
   845 00000832 884301                      mov byte [rbx + getDevReqPkt.unitnm], al
   846 00000835 E93DFEFFFF                  jmp .msdDriverExit
   847                                  .msdSetLogicalDev:   ;Function 24
   848 0000083A 8A4301                      mov al, byte [rbx + getDevReqPkt.unitnm]
   849 0000083D 880527000000                mov byte [.msdCurDev], al
   850 00000843 E92FFEFFFF                  jmp .msdDriverExit
   851                                  
   852                                  .msdBlkIOCommon:  ;Does block IO
   853                                  ;Called with rbp containing old rbx value and ah with function number
   854                                  ;Error handled by caller
   855 00000848 480FB64501                  movzx rax, byte [rbp + ioReqPkt.unitnm]
   856 0000084D 8A90[6B080000]              mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req
   857 00000853 488B4D1A                    mov rcx, qword [rbp + ioReqPkt.strtsc]  ;Get start sector
   858 00000857 8A4516                      mov al, byte [rbp + ioReqPkt.tfrlen]    ;Get number of sectors, max 255
   859 0000085A 488B5D0E                    mov rbx, qword [rbp + ioReqPkt.bufptr]  ;Get Memory Buffer
   860 0000085E CD33                        int 33h
   861 00000860 C3                          ret
   862                                  
   863 00000861 4E4F204E414D452000      .msdDefLabel db "NO NAME ",0 ;Default volume label
   864                                  ;LASTDRIVE default is 5
   865 0000086A 00                      .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   866                                  ; Except when single drive in use, in which case Drive A and B refer to device 0
   867 0000086B 0000000000              .msdBIOSmap  db 5 dup (0)    ;Translates DOS drive number to BIOS number
   868 00000870 0000000000              .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   869 00000875 000000000000000000-     .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   869 0000087E 000000000000000000-
   869 00000887 000000000000000000-
   869 00000890 000000000000000000-
   869 00000899 00000000           
   870 0000089D 000000000000000000-     .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   870 000008A6 000000000000000000-
   870 000008AF 000000000000000000-
   870 000008B8 000000000000000000-
   870 000008C1 000000000000000000-
   870 000008CA 000000000000000000-
   870 000008D3 000000000000000000-
   870 000008DC 000000000000000000-
   870 000008E5 000000000000000000-
   870 000008EE 000000000000000000-
   870 000008F7 000000000000000000-
   870 00000900 000000000000000000-
   870 00000909 000000000000000000-
   870 00000912 000000000000000000-
   870 0000091B 000000000000000000-
   870 00000924 000000000000000000-
   870 0000092D 000000000000000000-
   870 00000936 000000000000000000-
   870 0000093F 000000000000000000-
   870 00000948 000000000000000000-
   870 00000951 000000000000000000-
   870 0000095A 000000000000000000-
   870 00000963 000000000000000000-
   870 0000096C 000000000000000000-
   870 00000975 000000000000000000-
   870 0000097E 000000000000000000-
   870 00000987 000000000000000000-
   870 00000990 000000000000000000-
   870 00000999 000000000000000000-
   870 000009A2 000000000000000000-
   870 000009AB 000000000000000000-
   870 000009B4 000000000000000000-
   870 000009BD 000000000000000000-
   870 000009C6 000000000000000000-
   870 000009CF 000000000000000000-
   870 000009D8 000000000000000000-
   870 000009E1 000000000000000000-
   870 000009EA 000000000000000000-
   870 000009F3 000000000000000000-
   870 000009FC 000000000000000000-
   870 00000A05 000000000000000000-
   870 00000A0E 000000000000000000-
   870 00000A17 000000000000000000-
   870 00000A20 000000000000000000-
   870 00000A29 000000000000000000-
   870 00000A32 000000000000000000-
   870 00000A3B 000000000000000000-
   870 00000A44 000000000000000000-
   870 00000A4D 000000000000000000-
   870 00000A56 000000000000000000-
   870 00000A5F 000000000000000000-
   870 00000A68 000000000000000000-
   870 00000A71 000000000000000000-
   870 00000A7A 000000000000000000-
   870 00000A83 000000000000000000-
   870 00000A8C 000000000000000000-
   870 00000A95 000000000000000000-
   870 00000A9E 000000000000000000-
   870 00000AA7 000000000000000000-
   870 00000AB0 000000000000000000-
   870 00000AB9 000000000000000000-
   870 00000AC2 000000000000000000-
   870 00000ACB 000000000000000000-
   870 00000AD4 000000000000000000-
   870 00000ADD 000000000000000000-
   870 00000AE6 000000000000000000-
   870 00000AEF 000000000000       
   871                                  
   872                                  driverDataPtr:
