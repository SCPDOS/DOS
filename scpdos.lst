     1                                  [map all scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  %include "driverStruc.inc"
     5                              <1> 
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     8                              <1> ; device driver related structures.                     ;
     9                              <1> ;-------------------------------------------------------;
    10                              <1> 
    11                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    12                              <1> 
    13 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    14 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    15 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    16 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    17 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    18                              <1> 
    19                              <1> endstruc
    20                              <1> 
    21                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    22                              <1> 
    23                              <1>     .hdrlen resb 1  ;Length of the request header
    24                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    25                              <1>     .cmdcde resb 1  ;Command code
    26                              <1>     .status resw 1  ;Status word
    27                              <1>     .devptr resq 1  ;Device queue pointer field
    28                              <1> 
    29                              <1> %endmacro
    30                              <1> 
    31                              <1> struc drvReqHdr
    32                              <1>     drvReqHdrM
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    33                              <1> endstruc
    34                              <1> 
    35                              <1> struc initReqPkt  ;Init Request Packet
    36                              <1> 
    37                              <1>     drvReqHdrM   ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    38 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
    39 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
    40 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
    41 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
    42                              <1> 
    43                              <1> endstruc
    44                              <1> 
    45                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
    46                              <1> 
    47                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    48 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    49 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
    50 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
    51                              <1> 
    52                              <1> endstruc
    53                              <1> 
    54                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
    55                              <1> 
    56                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    57 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    58 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    59 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
    60                              <1> 
    61                              <1> endstruc
    62                              <1> 
    63                              <1> struc ioReqPkt   ;IO Request Packet
    64                              <1> 
    65                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    66 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    67 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    68 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
    69 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
    70 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
    71                              <1> 
    72                              <1> endstruc
    73                              <1> 
    74                              <1> struc nonDestInNoWaitReqPkt    ;Nondestructive Input No Wait Request Packet
    75                              <1>     
    76                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    77 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
    78                              <1> 
    79                              <1> endstruc
    80                              <1> 
    81                              <1> struc statusReqPkt   ;Status Request Packet
    82                              <1> 
    83                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    84                              <1> 
    85                              <1> endstruc
    86                              <1> 
    87                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
    88                              <1> 
    89                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    90                              <1>      
    91                              <1> endstruc
    92                              <1> 
    93                              <1> struc openReqPkt ;Open Device Request Packet
    94                              <1> 
    95                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    96                              <1>      
    97                              <1> endstruc
    98                              <1> 
    99                              <1> struc closeReqPkt ;Close Device Request Packet
   100                              <1> 
   101                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   102                              <1>      
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   106                              <1> 
   107                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   108                              <1>      
   109                              <1> endstruc
   110                              <1> 
   111                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   112                              <1> 
   113                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   114 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   115 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   116 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   117 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   118 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   119                              <1> 
   120                              <1> endstruc
   121                              <1> 
   122                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   123                              <1>     
   124                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   125                              <1> 
   126                              <1> endstruc
   127                              <1> 
   128                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   129                              <1>     
   130                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   131                              <1> 
   132                              <1> endstruc
     5                                  %include "fatStruc.inc"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ; This include file contains miscellaneous FAT driver   ;
     9                              <1> ; structures. exFAT will have it's own files at a later ;
    10                              <1> ; stage.                                                ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    14                              <1> 
    15 00000000 ??????              <1>     .jmpBoot    resb 3 
    16 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    17 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    18 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    19 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    20 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    21 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    22 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    23 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    24 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    25 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    26 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    27 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    28 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    29                              <1> 
    30 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    31 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    32 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    33 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    34 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    35 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    40                              <1> 
    41 00000000 ??????              <1>     .jmpBoot    resb 3
    42 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    43 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    44 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    45 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    46 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    47 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    48 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    49 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    50 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    51 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    52 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    53 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    54 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    55                              <1> 
    56 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    57 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    58 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    59 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    60 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    61 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    62 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    63                              <1> 
    64 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    65 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    66 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    67 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    68 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    69 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    70                              <1> 
    71                              <1> endstruc
    72                              <1> 
    73                              <1> struc fatDirEntry
    74                              <1> 
    75 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
    76 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
    77 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
    78 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
    79 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
    80 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
    81 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
    82 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
    83 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
    84 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
    85 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
    86 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
    87                              <1> 
    88                              <1> endstruc
    89                              <1> ;Directory attribute equates
    90                              <1>     dirReadOnly     equ 01h
    91                              <1>     dirHidden       equ 02h
    92                              <1>     dirSystem       equ 04h
    93                              <1>     dirVolumeID     equ 08h
    94                              <1>     dirDirectory    equ 10h
    95                              <1>     dirArchive      equ 20h
    96                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    97                              <1> 
    98                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
    99                              <1> 
   100 00000000 ??????              <1>     .jmpBoot                resb 3 
   101 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   102 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   103 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   104 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   105 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   106 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   107 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   108 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   109 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   110 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   111 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   112 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   113 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   114 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   115 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   116 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   117 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   118 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   119                              <1> 
   120                              <1> endstruc
   121                              <1> 
   122                              <1> struc FSInfo
   123                              <1> 
   124 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   125 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   126 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   127 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   128 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   129 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   130 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   131                              <1> 
   132                              <1> endstruc
     6                                  %include "dosStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous internal     ;
    10                              <1> ; SCP/DOS structures.                                   ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> ;------------------------------------------------------------------------;
    14                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    15                              <1> ; its file system structure. This is used to locate files and structures
    16                              <1> ; on the device itself and to translate file requests to cluster chains
    17                              <1> ; to LBAs to pass to the disk driver..
    18                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    19                              <1> ; drivers Initialise routine has been called.
    20                              <1> ;------------------------------------------------------------------------;
    21                              <1> struc dpb        ;Drive Parameter Block
    22                              <1> 
    23 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...)
    24 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device
    25 00000002 ??                  <1>     .bBytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
    26 00000003 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1
    27                              <1> ;                                       i.e. (2^bSectorsPerClusterShift) - 1
    28 00000004 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent
    29 00000005 ????????            <1>     .dFAToffset              resd 1  ;Vol rel offset of first FAT, in sectors
    30 00000009 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs
    31 0000000A ????                <1>     .wNumberRootDirEntries   resw 1  ;In sectors
    32 0000000C ????????            <1>     .dClusterHeapOffset      resd 1  ;Start of data area, in sectors
    33 00000010 ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters (volume size)
    34 00000014 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors
    35 00000018 ????????            <1>     .dFirstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
    36 0000001C ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header
    37 00000024 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor
    38 00000025 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1)
    39 00000026 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    40 0000002E ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search
    41 00000032 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown
    42                              <1> 
    43                              <1> endstruc
    44                              <1> 
    45                              <1> ;------------------------------------------------------------------------;
    46                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    47                              <1> ; All disk pathing requests go via the CDS for that drive.
    48                              <1> ; The default drive is the last accessed drive, this number is stored
    49                              <1> ; in the DOS data area.
    50                              <1> ; The CDS is stored as an array with the offset into the array being 
    51                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    52                              <1> ;
    53                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    54                              <1> ;------------------------------------------------------------------------;
    55                              <1> struc cds       ;Current Directory structure
    56 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    57 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    58 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    59 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    60 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    61 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    62                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    63                              <1> ; another, we save the number of chars to skip to that deep level).
    64                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    65                              <1> ; Flags: Bit 15 set = Network drive
    66                              <1> ;        Bit 14 set = Physical drive
    67                              <1> ;        Bit 13 set = JOIN'ed drive
    68                              <1> ;        Bit 12 set = SUBST'ed drive
    69                              <1> ;        Bit 7  set = Redirected, not network, drive (This is how MSCDEX worked)
    70                              <1> endstruc
    71                              <1> ;CDS equates
    72                              <1>     cdsNetDrive     equ 8000h
    73                              <1>     cdsPhysDrive    equ 4000h
    74                              <1>     cdsJoinDrive    equ 2000h
    75                              <1>     cdsSubstDrive   equ 1000h
    76                              <1>     cdsRedirDrive   equ 0080h
    77                              <1> ;------------------------------------------------------------------------;
    78                              <1> ; The SFT is a way to allow applications to open file handles to files 
    79                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    80                              <1> ; under the first header, and then a second header will be linked to the 
    81                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    82                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    83                              <1> ; using the FCBS= command. Default FCBS=5.
    84                              <1> ;
    85                              <1> ; A file handle describes the file, and the location within the file that
    86                              <1> ; we are reading. The file handle can be manipulated without the file
    87                              <1> ; being in memory, thus allowing the user to access data without needing 
    88                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    89                              <1> ; accessing devices, by treating them as files with their drivers 
    90                              <1> ; responding and translating the manipulations of the file handle itself.
    91                              <1> ; Neither the driver nor the application should see or use the SFT for
    92                              <1> ; the handle, as it is subject to change (and will change when file 
    93                              <1> ; sharing provisions are included). The DOS will make requests to the 
    94                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    95                              <1> ; track of the information in the SFT entry for that handle. 
    96                              <1> ;
    97                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    98                              <1> ; can point to the same file. It all depends on what the applications 
    99                              <1> ; want to do with the File.
   100                              <1> ;
   101                              <1> ; !!!!IMPORTANT!!!!
   102                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   103                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   104                              <1> ;
   105                              <1> ;Each SFT may look like this:
   106                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   107                              <1> ;            |                |
   108                              <1> ;       wNumFiles*sft    wNumFiles*sft
   109                              <1> ;
   110                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   111                              <1> ; System FCBs.
   112                              <1> ;
   113                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   114                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   115                              <1> ;
   116                              <1> ; DEFAULT FILES=15, MINIMUM FILES=5
   117                              <1> ; DEFAULT FCBS=5, MINIMUM FCBS=5
   118                              <1> ;------------------------------------------------------------------------;
   119                              <1> struc sfth   ;System file table header
   120                              <1> ; This is the SFT header.
   121                              <1> ; This structure comes before the start of the first file in the array/table.
   122 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   123 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc sft
   127                              <1> ;This is the file struc itself
   128 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   129 00000002 ????                <1>     .wOpenMode   resw 1    ;Bit 15 set if opened via FCB
   130 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   131 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   132 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   133 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file
   134 00000013 ????                <1>     .wTime       resw 1    ;File Time
   135 00000015 ????                <1>     .wDate       resw 1    ;File Date
   136 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   137 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset in file, in bytes
   138 0000001F ????                <1>     .wRelClust   resw 1    ;Relative cluster in file of the last cluster accessed
   139 00000021 ????????            <1>     .dDirSect    resd 1    ;Relative number of sector containing directory entry 
   140 00000025 ??                  <1>     .bNumDirEnt  resb 1    ;Number of dir entry within sector (byte offset/32)
   141 00000026 <res Bh>            <1>     .sFCBName    resb 11   ;8.3 Filename
   142 00000031 ????????????????    <1>     .qPSPOwner   resq 1    ;Address of PSP of program which first opened this file
   143 00000039 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster of last cluster accessed
   144                              <1> endstruc
   145                              <1> 
   146                              <1> ;------------------------------------------------------------------------;
   147                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   148                              <1> ; to an internal buffer, and then copying it to the specified location
   149                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   150                              <1> ; another request for the same sector from the same device is made, so 
   151                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   152                              <1> ; size, selected according to the largest detected sector size during 
   153                              <1> ; the initial loadup.
   154                              <1> ;
   155                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   156                              <1> ;
   157                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   158                              <1> ;------------------------------------------------------------------------;
   159                              <1> 
   160                              <1> struc bufferHdr
   161 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   162 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for
   163 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   164 0000000A ????????            <1>     .bufferLBA   resd  1   ;LBA the buffer contains
   165 0000000E ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   166 0000000F ??                  <1>     .bufFAToff   resb  1   ;Sector offset of the backup copy of the FAT on disk
   167 00000010 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   168                              <1> endstruc
   169                              <1> 
   170                              <1> ;------------------------------------------------------------------------;
   171                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   172                              <1> ; following order, thus allowing for return values to be placed in the 
   173                              <1> ; registers by accessing the caller register stack frame.
   174                              <1> ;------------------------------------------------------------------------;
   175                              <1> struc callerFrame
   176 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   177 00000008 ????????????????    <1>     .rbx    resq 1    
   178 00000010 ????????????????    <1>     .rcx    resq 1
   179 00000018 ????????????????    <1>     .rdx    resq 1
   180 00000020 ????????????????    <1>     .rsi    resq 1
   181 00000028 ????????????????    <1>     .rdi    resq 1
   182 00000030 ????????????????    <1>     .rbp    resq 1
   183 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   184 00000040 ????????????????    <1>     .r9     resq 1
   185                              <1> ;Pushed by Processor when invoked via Interrupt
   186 00000048 ????????????????    <1>     .rip    resq 1
   187 00000050 ????????????????    <1>     .cs     resq 1
   188 00000058 ????????????????    <1>     .flags  resq 1
   189                              <1> endstruc
   190                              <1> 
   191                              <1> %macro pushDOS 0
   192                              <1>     push r9
   193                              <1>     push r8
   194                              <1>     push rbp
   195                              <1>     push rdi
   196                              <1>     push rsi
   197                              <1>     push rdx
   198                              <1>     push rcx
   199                              <1>     push rbx
   200                              <1>     push rax
   201                              <1> %endmacro
   202                              <1> 
   203                              <1> %macro popDOS 0
   204                              <1>     pop rax
   205                              <1>     pop rbx
   206                              <1>     pop rcx
   207                              <1>     pop rdx
   208                              <1>     pop rsi
   209                              <1>     pop rdi
   210                              <1>     pop rbp
   211                              <1>     pop r8
   212                              <1>     pop r9
   213                              <1> %endmacro
   214                              <1> 
   215                              <1> struc psp
   216 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h
   217 00000002 ????????????????    <1>     .startSeg   resq 1  ;Pointer to the start of the PSP
   218 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   219 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   220 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   221 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   222 0000002A <res 14h>           <1>     .fHandles   resb 20 ;Main File handle array
   223 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   224 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   225 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size
   226 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh
   227 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain
   228 0000005B ????????????????    <1>     .xtraHdlPtr resq 1  ;Pointer to the extra handle array if needed
   229 00000063 ????????????????    <1>     .fcbPtr1    resq 1  ;Pointer to the first OS allocated FCB
   230 0000006B <res 15h>           <1>     .reserved   resb 21
   231 00000080 ??                  <1>     .charCount  resb 1  ;Number of characters in command tail
   232 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   233                              <1> endstruc
   234                              <1> 
   235                              <1> struc mcb
   236 00000000 ??                  <1>     .mzbyte     resb 1  ;M=In use, Z=Free
   237 00000001 ????????????????    <1>     .processPtr resq 1  ;Points to the start of the process PSP
   238 00000009 ????????            <1>     .paragraphs resd 1  ;Gives the number of paras allocated to this process
   239 0000000D ??????              <1>     .reserved   resb 3
   240                              <1>     .program:
   241                              <1> endstruc
     7                                  %include "dosSeg.asm"
     8                              <1> ;This file contains the main DOS data segment
     9                              <1> 
    10                              <1> Segment dSeg nobits align=1 
    11 00000000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself
    12 00000008 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from
    13 00000009 <res 2Ah>           <1>     charReqHdr  resb ioReqPkt_size  ;Character IO Request header
    14 00000033 <res 2Ah>           <1>     diskReqHdr  resb ioReqPkt_size  ;Disk Action Request header
    15                              <1>     ;The device driver header with space for the largest possible packet
    16 0000005D ????????????????    <1>     sysVarsPtr  resq 1    ;Pointer to dpbHeadPtr, head of Sys Vars struc below
    17 00000065 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain
    18 0000006D ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain
    19 00000075 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    20 0000007D ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header
    21                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    22 00000085 ????????????????    <1>     conPtr      resq 1    ;Pointer to the current active CON device header 
    23                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    24 0000008D ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)
    25 0000008F ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain
    26 00000097 ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array
    27 0000009F ????????????????    <1>     sfcbHeadPTr resq 1    ;Pointer to the head of the System FCB chain
    28 000000A7 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    29 000000A9 ??                  <1>     numMSDdrv   resb 1    ;Number of mass storage devices detected in system
    30 000000AA ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]
    31 000000AB ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    32 000000AC <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    33                              <1> 
    34                              <1> ;Start of Swappable Data Area, this bit can remain static
    35 000000CE ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h
    36 000000CF ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving
    37 000000D0 ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh
    38 000000D1 ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    39 000000D2 ????                <1>     errorExt    resw 1  ;Extended Error Code
    40 000000D4 ??                  <1>     errorAction resb 1  ;Suggested action for error  
    41 000000D5 ??                  <1>     errorClass  resb 1  ;Error Class
    42                              <1> 
    43 000000D6 ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA
    44 000000DE ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP
    45 000000E6 ????????????????    <1>     rdiErrorPtr resq 1  ;Saves RDI value of last error
    46 000000EE ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
    47 000000F6 ????                <1>     lastRetCode resw 1  ;Last return code returned by Int 41h/4Ch
    48 000000F8 ??                  <1>     currentDrv  resb 1  ;Default, last accessed drive
    49 000000F9 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls
    50                              <1> ;SDA, needs to be replaced between processes
    51 000000FA ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
    52                              <1> 
    53 00000102 ??                  <1>     Int44RetVal resb 1  ;Saves a copy of the Int 44 return value
    54 00000103 ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
    55 00000104 ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
    56 00000105 ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
    57 0000010D ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
    58 00000115 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
    59                              <1> ;Time stuff
    60 0000011D ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
    61 00000123 ??                  <1>     dayOfMonth  resb 1  ;1 - 31 BCD
    62 00000124 ??                  <1>     monthOfYear resb 1  ;1 - 12 BCD
    63 00000125 ????                <1>     years       resw 1  ;0000 - 9999 BCD
    64 00000127 ????                <1>     yearsOffset resw 1  ;Current Year - 1980
    65 00000129 ????????            <1>     daysOffset  resd 1  ;Days since 1-1-1980
    66 0000012D ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
    67                              <1> 
    68                              <1> ;Stacks
    69 0000012E <res 528h>          <1>     critStack   resq 165
    70 00000656 ????????????????    <1>     critStakTop resq 1
    71 0000065E <res 638h>          <1>     IOStack     resq 199
    72 00000C96 ????????????????    <1>     IOStakTop   resq 1
    73 00000C9E <res 638h>          <1>     DiskStack   resq 199
    74 000012D6 ????????????????    <1>     DiskStakTop resq 1
    75                              <1>     dSegLen     equ     $
     8                                  
     9                                  Segment .text align=1
    10                                  ; We arrive here with the following values in the registers.
    11                                  ; rbx =  LBA of first Logical Block after SCP/BIOS
    12                                  ; dx  = Int 33h boot device number
    13                                  ; fs  = userbase pointer (pointer to first usable block of RAM)
    14                                  tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    15 00000000 55AA                        dw 0AA55h           ;Initial signature
    16 00000002 909090909090909090-         db (100h-2) dup (90h)   ;Duplicate NOPs for the PSP
    16 0000000B 909090909090909090-
    16 00000014 909090909090909090-
    16 0000001D 909090909090909090-
    16 00000026 909090909090909090-
    16 0000002F 909090909090909090-
    16 00000038 909090909090909090-
    16 00000041 909090909090909090-
    16 0000004A 909090909090909090-
    16 00000053 909090909090909090-
    16 0000005C 909090909090909090-
    16 00000065 909090909090909090-
    16 0000006E 909090909090909090-
    16 00000077 909090909090909090-
    16 00000080 909090909090909090-
    16 00000089 909090909090909090-
    16 00000092 909090909090909090-
    16 0000009B 909090909090909090-
    16 000000A4 909090909090909090-
    16 000000AD 909090909090909090-
    16 000000B6 909090909090909090-
    16 000000BF 909090909090909090-
    16 000000C8 909090909090909090-
    16 000000D1 909090909090909090-
    16 000000DA 909090909090909090-
    16 000000E3 909090909090909090-
    16 000000EC 909090909090909090-
    16 000000F5 909090909090909090-
    16 000000FE 9090               
    17 00000100 64881425[08000000]          mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    18 00000108 488D15F1FEFFFF              lea rdx, qword [tempPSP]    ;Get the address of the tempPSP
    19 0000010F 6448891425-                 mov qword fs:[currentPSP], rdx
    19 00000114 [DE000000]         
    20                                  ;DOS allows for non-PARA aligned PSPs but DOS aligns all programs on PARA bndry
    21 00000118 B9000100C0                  mov ecx, 0C0000100h ;Read FS MSR
    22 0000011D 0F32                        rdmsr
    23 0000011F 89D7                        mov edi, edx        ;Get the hi dword, and clear the upper bytes
    24 00000121 48C1E720                    shl rdi, 20h        ;Shift high
    25 00000125 89C7                        mov edi, eax        ;Get the low dword in
    26                                  
    27 00000127 6448893C25-                 mov qword fs:[dosSegPtr], rdi 
    27 0000012C [00000000]         
    28 00000130 4889FD                      mov rbp, rdi    ;Save the start of dosSeg in rdx 
    29 00000133 4881C7[DE120000]            add rdi, dSegLen ;Move destination past end of data area
    30 0000013A 488D35(00000000)            lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    31 00000141 B900100000                  mov ecx, 1000h
    32 00000146 F348A5                      rep movsq
    33                                  
    34                                  ;Modify the pointers in nData before putting them in the data area
    35 00000149 48012D80010000              add qword [nData + drvHdr.nxtPtr], rbp
    36 00000150 48012D83010000              add qword [nData + drvHdr.strPtr], rbp
    37 00000157 48012D84010000              add qword [nData + drvHdr.intPtr], rbp
    38                                  ;Copy the Null driver to its location in Sysvars
    39 0000015E B922000000                  mov ecx, drvHdr_size
    40 00000163 488D3566010000              lea rsi, qword [nData]
    41 0000016A 488DBD[AC000000]            lea rdi, qword [rbp + nulDevHdr]
    42 00000171 F3A4                        rep movsb   
    43                                  
    44                                  ;Adjust the addresses in the other driver headers 
    45 00000173 48BE-                       mov rsi, conHdr ;Point to the first non-NUL dev in chain
    45 00000175 [3208000000000000] 
    46 0000017D B90C000000                  mov ecx, 12      ;12 drivers in data area
    47 00000182 488D342E                    lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
    48                                  adjDrivers:
    49 00000186 E8CA000000                  call adjustDrvHdr
    50 0000018B E2F9                        loop adjDrivers
    51                                  
    52                                      ;Open NUL
    53 0000018D 488D9D[B6000000]            lea rbx, qword [rbp + nulDevHdr + drvHdr.strPtr]    ;Get ptr to strat ptr
    54 00000194 488B1B                      mov rbx, qword [rbx]    ;Get strat ptr
    55 00000197 30C0                        xor al, al
    56 00000199 FFD3                        call rbx
    57                                  
    58                                  ;Open CON
    59                                  conInit:    ;Rather than keeping this resident... do it here
    60                                  .ci0:
    61 0000019B B401                        mov ah, 01      ;Get buffer status
    62 0000019D CD36                        int 36h
    63 0000019F 7406                        jz .ci1      ;If zero clear => no more keys to read
    64 000001A1 30E4                        xor ah, ah
    65 000001A3 CD36                        int 36h ;Read key to flush from buffer
    66 000001A5 EBF4                        jmp short .ci0
    67                                  .ci1:
    68 000001A7 B800050000                  mov eax, 0500h  ;Set page zero as the default page
    69 000001AC CD30                        int 30h
    70 000001AE B402                        mov ah, 02h
    71 000001B0 31D2                        xor edx, edx    ;Set screen cursor to top right corner
    72 000001B2 88D7                        mov bh, dl      ;Set cursor for page 0
    73 000001B4 CD30                        int 30h
    74 000001B6 B707                        mov bh, 07h     ;Grey/Black attribs
    75 000001B8 B800060000                  mov eax, 0600h  ;Clear whole screen
    76 000001BD CD30                        int 30h
    77                                  
    78                                      ;Open Mass Storage
    79 000001BF 48BB-                       mov rbx, msdDriver
    79 000001C1 [0F0E000000000000] 
    80 000001C9 488D5C1D00                  lea rbx, qword [rbp+rbx]
    81 000001CE 30C0                        xor al, al
    82 000001D0 FFD3                        call rbx
    83                                  ;Adjust Int 41h address table
    84                                  
    85                                  adjInt41h:
    86 000001D2 B96A000000                  mov ecx, dispatchTableL/8 ;Number of elements in table
    87 000001D7 48BB-                       mov rbx, functionDispatch.dispatchTable ;Get EA of table
    87 000001D9 [1702000000000000] 
    88 000001E1 488D5C1D00                  lea rbx, qword [rbp+rbx]    ;Point to the start of the relocated table 
    89                                  .ai41h:
    90 000001E6 48012B                      add qword [rbx], rbp    ;Add base address value to entry in reloc table
    91 000001E9 4881C308000000              add rbx, 8              ;Each entry is size 8
    92 000001F0 FFC9                        dec ecx
    93 000001F2 75F2                        jnz .ai41h  ;Keep looping until all entries have been adjusted
    94                                  
    95                                  ;Adjust Interrupt Entries Int 40h-49h
    96                                  adjInts:
    97 000001F4 B340                        mov bl, 40h
    98 000001F6 B807F00000                  mov eax, 0F007h ;Get the descriptor
    99 000001FB CD35                        int 35h
   100 000001FD B940000000                  mov ecx, 40h    ;Start from interrupt 40h
   101 00000202 488D3D77000000              lea rdi, intData
   102 00000209 89C6                        mov esi, eax    ;Move segment selector info to esi
   103                                  .ai0:
   104 0000020B B808F00000                  mov eax, 0F008h ;Set the descriptor
   105 00000210 488B1F                      mov rbx, qword [rdi]    ;Get address pointed to by rdi
   106 00000213 4801EB                      add rbx, rbp            ;Add the relocated base to rbx
   107 00000216 CD35                        int 35h
   108 00000218 4881C708000000              add rdi, 8
   109 0000021F FFC1                        inc ecx
   110 00000221 81F94A000000                cmp ecx, 4Ah
   111 00000227 75E2                        jne .ai0
   112                                  
   113                                  ;Test Error Case
   114 00000229 B430                        mov ah, 00110000b
   115 0000022B B000                        mov al, 00h
   116 0000022D BF0C000000                  mov edi, 0Ch
   117 00000232 CD44                        int 44h
   118                                  
   119                                  
   120 00000234 488D152D000000              lea rdx, qword [startmsg]   ;Get the absolute address of message
   121 0000023B B409                        mov ah, 09h
   122 0000023D CD41                        int 41h
   123                                  
   124 0000023F 64488B3425-                 mov rsi, fs:[nulDevHdr]
   124 00000244 [AC000000]         
   125 00000248 B801C50000                  mov eax, 0C501h ;Connect debugger
   126 0000024D CD35                        int 35h
   127                                  l1:
   128 0000024F B401                        mov ah, 01h  ;Write with echo
   129 00000251 CD41                        int 41h
   130 00000253 EBFA                        jmp short l1
   131                                  adjustDrvHdr:
   132                                  ;Input: rsi = Effective address of driver in DOS segment
   133                                  ;       rbp = Ptr to the start of the DOS segment
   134                                  ;Output: rsi = EA of next header in DOS segment
   135 00000255 48012E                      add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   136 00000258 48016E0A                    add qword [rsi + drvHdr.strPtr], rbp
   137 0000025C 48016E12                    add qword [rsi + drvHdr.intPtr], rbp
   138 00000260 4881C622000000              add rsi, drvHdr_size
   139 00000267 C3                          ret
   140                                  
   141 00000268 0A0D5374617274696E-     startmsg db 0Ah,0Dh,"Starting SCP/DOS...",0Ah,0Dh,"$"
   141 00000271 67205343502F444F53-
   141 0000027A 2E2E2E0A0D24       
   142                                  intData:
   143 00000280 [5900000000000000]          dq terminateProcess ;Int 40h
   144 00000288 [5900000000000000]          dq functionDispatch ;Int 41h
   145 00000290 [6705000000000000]          dq terminateHandler ;Int 42h
   146 00000298 [6705000000000000]          dq ctrlCHandler     ;Int 43h
   147 000002A0 [6705000000000000]          dq critErrorHandler ;Int 44h
   148 000002A8 [FA07000000000000]          dq absDiskRead      ;Int 45h
   149 000002B0 [0F08000000000000]          dq absDiskWrite     ;Int 46h
   150 000002B8 [2408000000000000]          dq terminateResident    ;Int 47h
   151 000002C0 [2408000000000000]          dq inDosHandler     ;Int 48h
   152 000002C8 [2608000000000000]          dq fastOutput       ;Int 49h
   153                                  nData:
   154 000002D0 [3208000000000000]          dq conHdr
   155 000002D8 0480                        dw 08004h
   156 000002DA [DA09000000000000]          dq nulStrat
   157 000002E2 [E009000000000000]          dq nulIntr
   158 000002EA 4E554C2020202020            db "NUL     " ;Default NUL data
   159                                  
   160                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 
   161                                  ;-----------------------------------:
   162                                  ;       Misc System routines        :
   163                                  ;-----------------------------------:
   164                                  findLRUBuffer: 
   165                                  ;Finds least recently used buffer, links it and returns ptr to it in rbx
   166                                  ;Input: Nothing
   167                                  ;Output: rbx = Pointer to the buffer to use
   168 00000000 52                          push rdx
   169 00000001 488B1D(8F000000)            mov rbx, qword [bufHeadPtr]
   170 00000008 48813BFFFFFFFF              cmp qword [rbx + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   171 0000000F 7502                        jne .flb1
   172 00000011 5A                          pop rdx
   173 00000012 C3                          ret
   174                                  .flb1:
   175 00000013 4889DA                      mov rdx, rbx    ;Save a ptr to the previous buffer header
   176 00000016 488B1A                      mov rbx, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   177 00000019 48813BFFFFFFFF              cmp qword [rbx + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   178 00000020 75F1                        jne .flb1   ;If not LRU, keep walking, else process
   179 00000022 48C702FFFFFFFF              mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   180 00000029 488B15(8F000000)            mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   181 00000030 48891D(8F000000)            mov qword [bufHeadPtr], rbx    ;Sysvars to point to new buffer
   182 00000037 488913                      mov qword [rbx + bufferHdr.nextBufPtr], rdx
   183 0000003A 5A                          pop rdx
   184 0000003B C3                          ret
   185                                  
   186                                  findDPB:
   187                                  ;Finds the DPB for a given drive
   188                                  ;Input:   dl = Drive number (0=A, 1=B etc...)
   189                                  ;Output: al = 00, rbx = Pointer to the DPB
   190                                  ;        al = -1, Failed, no DPB for device, rbx destroyed
   191 0000003C 488B1D(6D000000)            mov rbx, qword [dpbHeadPtr]
   192                                  .fd1:
   193 00000043 30C0                        xor al, al
   194 00000045 3813                        cmp byte [rbx + dpb.bDriveNumber], dl
   195 00000047 740F                        je .fd2
   196 00000049 488B5B26                    mov rbx, qword [rbx + dpb.qNextDPBPtr]
   197 0000004D B0FF                        mov al, -1
   198 0000004F 4881FBFFFFFFFF              cmp rbx, -1 ;If rbx followed last item in list, no DPB exists for dl
   199 00000056 75EB                        jne .fd1
   200                                  .fd2:
   201 00000058 C3                          ret
   202                                  callCritError:
   203                                  ;Common Procedure to swap stacks and call Critical Error Interrupt
   204                                  ;-----------------------------------:
   205                                  ;       File System routines        :
   206                                  ;-----------------------------------:
   207                                  name2Clust:
   208                                  ;Converts a file name to a first cluster number
   209                                  ;-----------------------------------:
   210                                  ;        Interrupt routines         :
   211                                  ;-----------------------------------:
   212                                  terminateProcess:   ;Int 40h
   213                                  
   214                                  functionDispatch:   ;Int 41h Main function dispatcher
   215                                  ;ah = Function number, all other registers have various meanings
   216 00000059 FA                          cli ;Halt external interrupts
   217 0000005A FC                          cld ;Ensure all string ops occur in the right direction
   218 0000005B 80FC6A                      cmp ah, dispatchTableL/8    ;Number of functions
   219 0000005E 0F871E010000                ja .fdExitBad
   220                                      ;Cherry pick functions
   221 00000064 80FC33                      cmp ah, 33h ;CTRL+BREAK check
   222 00000067 722C                        jb .fsbegin   ;If below skip these checks
   223 00000069 0F84A7010000                je .ctrlBreakCheck
   224 0000006F 80FC64                      cmp ah, 64h
   225 00000072 0F849E010000                je .setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
   226 00000078 771B                        ja .fsbegin   ;If above, do usual Int41 entry
   227 0000007A 80FC51                      cmp ah, 51h
   228 0000007D 0F8493010000                je .getCurrProcessID    ;This an below are exactly the same
   229 00000083 80FC62                      cmp ah, 62h
   230 00000086 0F848A010000                je .getPSPaddr          ;Calls the above function
   231 0000008C 80FC50                      cmp ah, 50h
   232 0000008F 0F8481010000                je .setCurrProcessID
   233                                  .fsbegin:
   234                                      pushDOS ;Push the usual prologue registers
   192 00000095 4151                <1>  push r9
   193 00000097 4150                <1>  push r8
   194 00000099 55                  <1>  push rbp
   195 0000009A 57                  <1>  push rdi
   196 0000009B 56                  <1>  push rsi
   197 0000009C 52                  <1>  push rdx
   198 0000009D 51                  <1>  push rcx
   199 0000009E 53                  <1>  push rbx
   200 0000009F 50                  <1>  push rax
   235 000000A0 488B05(0D010000)            mov rax, qword [oldRSP]
   236 000000A7 488905(05010000)            mov qword [oldoldRSP], rax
   237 000000AE FE05(CF000000)              inc byte [inDOS]    ;Increment in DOS flag
   238 000000B4 488925(0D010000)            mov qword [oldRSP], rsp
   239                                  ;Here, we want to save oldRSP in the callers PSP
   240 000000BB 803D(CF000000)01            cmp byte [inDOS], 1 ;Check how many times we are in DOS
   241 000000C2 750B                        jne .fsb1   ;If this is first entry, save rsp in callers PSP
   242 000000C4 488B05(DE000000)            mov rax, qword [currentPSP] ;Get current PSP address
   243 000000CB 48896046                    mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
   244                                  .fsb1:
   245 000000CF 58                          pop rax     ;Get old rax back
   246 000000D0 50                          push rax    ;and push it back onto the stack
   247 000000D1 488D25(56060000)            lea rsp, critStakTop
   248 000000D8 FB                          sti         ;Reenable interrupts
   249                                  
   250 000000D9 C605(04010000)01            mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
   251                                  
   252 000000E0 48891D(15010000)            mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
   253 000000E7 0FB6DC                      movzx ebx, ah   ;Move the function number bl zero extended to rbx
   254 000000EA C1E303                      shl ebx, 3      ;Multiply the function number by 8 for offset into table
   255 000000ED 50                          push rax        ;Push rax onto the stack
   256 000000EE 488D0522010000              lea rax, qword [.dispatchTable]
   257 000000F5 4801C3                      add rbx, rax    ;Add dispatch table offset into rbx
   258 000000F8 58                          pop rax
   259 000000F9 488B1B                      mov rbx, qword [rbx]    ;Get the address from the dispatch table
   260                                  
   261 000000FC 84E4                        test ah, ah     ;Simple Terminate function?
   262 000000FE 741C                        jz .fddiskOp
   263 00000100 80FC59                      cmp ah, 59h     ;Extended Error report?
   264 00000103 7443                        je .fdGoToFunction  ;Bypass code that clears the error report
   265 00000105 80FC0C                      cmp ah, 0Ch     ;Are we a char function?
   266 00000108 7712                        ja .fddiskOp
   267                                  ;Char operations here
   268 0000010A F605(CE000000)01            test byte [critErrFlag], 1  ;Are we in critical error?
   269 00000111 7535                        jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   270 00000113 488D25(960C0000)            lea rsp, IOStakTop          ;Otherwise, switch to IO stack
   271 0000011A EB2C                        jmp short .fdGoToFunction
   272                                  .fddiskOp:
   273                                      ;Disk operations go here
   274                                      ;Clear up error info
   275 0000011C C605(D1000000)01            mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   276 00000123 C605(CE000000)00            mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   277 0000012A C605(D0000000)FF            mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   278                                  
   279 00000131 C605(04010000)00            mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   280 00000138 488D25(D6120000)            lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   281 0000013F F605(F9000000)FF            test byte [breakFlag], -1   ;Test if set
   282 00000146 7400                        jz .fdGoToFunction
   283                                  ; HANDLE CTRL+BREAK HERE!
   284                                  .fdGoToFunction:
   285 00000148 48871D(15010000)            xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   286                                      ;Potentially point rbp to caller reg frame for easy access of registers 
   287                                      ;mov rbp, qword [oldRSP]    ;Move rsp on entry into rbp
   288 0000014F FF15(15010000)              call qword [oldRBX]     ;Call the desired function, rax contains ret code
   289                                  .fdExit:
   290 00000155 FA                          cli     ;Redisable interrupts
   291                                      ;???
   292 00000156 FE0D(CF000000)              dec byte [inDOS]            ;Decrement the inDOS count
   293 0000015C 488B25(0D010000)            mov rsp, qword [oldRSP]     ;Point rsp to old stack
   294 00000163 48890424                    mov qword [rsp], rax    ;Put the ret code into its pos on the register frame
   295 00000167 488B05(05010000)            mov rax, qword [oldoldRSP]
   296 0000016E 488905(0D010000)            mov qword [oldRSP], rax
   297                                      popDOS  ;Pop the frame
   204 00000175 58                  <1>  pop rax
   205 00000176 5B                  <1>  pop rbx
   206 00000177 59                  <1>  pop rcx
   207 00000178 5A                  <1>  pop rdx
   208 00000179 5E                  <1>  pop rsi
   209 0000017A 5F                  <1>  pop rdi
   210 0000017B 5D                  <1>  pop rbp
   211 0000017C 4158                <1>  pop r8
   212 0000017E 4159                <1>  pop r9
   298 00000180 48CF                        iretq
   299                                  .fdExitBad:
   300 00000182 B400                        mov ah, 0
   301 00000184 48CF                        iretq
   302                                  .simpleTerminate:     ;ah = 00h
   303 00000186 C3                          ret
   304                                  .stdinReadEcho:     ;ah = 01h
   305 00000187 488D1D(09000000)            lea rbx, charReqHdr ;Get the address of this request block
   306 0000018E 488D0566000000              lea rax, .stdinReadEchoBuffer
   307 00000195 C6032A                      mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   308 00000198 C6430204                    mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
   309 0000019C 66C743030000                mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   310 000001A2 4889430E                    mov qword [rbx + ioReqPkt.bufptr], rax
   311 000001A6 C7431601000000              mov dword [rbx + ioReqPkt.tfrlen], 01
   312 000001AD FF1589060000                call qword [conHdr + drvHdr.strPtr]
   313 000001B3 FF158B060000                call qword [conHdr + drvHdr.intPtr]
   314 000001B9 803D3B00000000              cmp byte [.stdinReadEchoBuffer], 00h
   315 000001C0 74C5                        jz .stdinReadEcho
   316 000001C2 488D1D(09000000)            lea rbx, charReqHdr ;Get the address of this request block
   317 000001C9 488D052B000000              lea rax, .stdinReadEchoBuffer
   318 000001D0 C6032A                      mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   319 000001D3 C6430208                    mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
   320 000001D7 66C743030000                mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   321 000001DD 4889430E                    mov qword [rbx + ioReqPkt.bufptr], rax
   322 000001E1 C7431601000000              mov dword [rbx + ioReqPkt.tfrlen], 01
   323 000001E8 FF154E060000                call qword [conHdr + drvHdr.strPtr]
   324 000001EE FF1550060000                call qword [conHdr + drvHdr.intPtr]
   325 000001F4 8A0501000000                mov al, byte [.stdinReadEchoBuffer]
   326 000001FA C3                          ret
   327 000001FB 00                      .stdinReadEchoBuffer    db 0
   328                                  .stdoutWrite:       ;ah = 02h
   329                                  ;Bspace is regular cursor left, does not insert a blank
   330 000001FC 50                          push rax
   331 000001FD 88D0                        mov al, dl
   332 000001FF CD49                        int 49h
   333 00000201 58                          pop rax
   334 00000202 C3                          ret
   335                                  .stdauxRead:        ;ah = 03h
   336                                  .stdauxWrite:       ;ah = 04h
   337                                  .stdprnWrite:       ;ah = 05h
   338                                  .directCONIO:       ;ah = 06h
   339                                  .waitDirectInNoEcho:;ah = 07h
   340                                  .waitStdinNoEcho:   ;ah = 08h
   341 00000203 C3                          ret
   342                                  .printString:       ;ah = 09h
   343 00000204 50                          push rax
   344 00000205 52                          push rdx
   345                                  .ps0:
   346 00000206 8A02                        mov al, byte [rdx]
   347 00000208 3C24                        cmp al, "$"
   348 0000020A 7407                        je .ps1
   349 0000020C 48FFC2                      inc rdx ;Goto next char
   350 0000020F CD49                        int 49h ;Print char in al
   351 00000211 EBF3                        jmp short .ps0
   352                                  .ps1:
   353 00000213 5A                          pop rdx
   354 00000214 58                          pop rax
   355 00000215 C3                          ret
   356                                  .buffStdinInput:    ;ah = 0Ah
   357                                  .checkStdinStatus:  ;ah = 0Bh
   358                                  .clearbuffDoFunc:   ;ah = 0Ch
   359                                  .diskReset:         ;ah = 0Dh
   360                                  .selectDisk:        ;ah = 0Eh
   361                                  .openFileFCB:       ;ah = 0Fh
   362                                  .closeFileFCB:      ;ah = 10h
   363                                  .findFirstFileFCB:  ;ah = 11h
   364                                  .findNextFileFCB:   ;ah = 12h
   365                                  .deleteFileFCB:     ;ah = 13h
   366                                  .sequentialReadFCB: ;ah = 14h
   367                                  .sequentialWriteFCB:;ah = 15h
   368                                  .createFileFCB:     ;ah = 16h
   369                                  .renameFileFCB:     ;ah = 17h
   370                                                      ;ah = 18h unused
   371                                  .getCurrentDisk:       ;ah = 19h, get current default drive
   372                                  .setDTA:            ;ah = 1Ah
   373                                  .FATinfoDefault:    ;ah = 1Bh
   374                                  .FatinfoDevice:     ;ah = 1Ch
   375                                                      ;ah = 1Dh unused
   376                                                      ;ah = 1Eh unused
   377                                  .getCurrentDPBptr:  ;ah = 1Fh, simply calls int 41h ah = 32h with dl = 0
   378                                                      ;ah = 20h unused
   379                                  .randomReadFCB:     ;ah = 21h
   380                                  .randomWriteFCB:    ;ah = 22h
   381                                  .getFileSizeFCB:    ;ah = 23h
   382                                  .setRelRecordFCB:   ;ah = 24h
   383                                  .setIntVector:      ;ah = 25h
   384                                  .createNewPSP:      ;ah = 26h
   385                                  .randBlockReadFCB:  ;ah = 27h
   386                                  .randBlockWriteFCB: ;ah = 28h
   387                                  .parseFilenameFCB:  ;ah = 29h
   388                                  .getDate:           ;ah = 2Ah
   389                                  .setDate:           ;ah = 2Bh
   390                                  .getTime:           ;ah = 2Ch
   391                                  .setTime:           ;ah = 2Dh
   392                                  .setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   393                                  .getDTA:            ;ah = 2Fh
   394                                  .getDOSversion:     ;ah = 30h
   395                                  .terminateStayRes:  ;ah = 31h
   396                                  .getDeviceDPBptr:   ;ah = 32h
   397                                  .ctrlBreakCheck:    ;ah = 33h
   398                                  .getInDOSflagPtr:   ;ah = 34h
   399                                  .getIntVector:      ;ah = 35h
   400                                  .getDiskFreeSpace:  ;ah = 36h
   401                                  .getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
   402                                  .getsetCountryInfo: ;ah = 38h, localisation info
   403                                  .makeDIR:           ;ah = 39h
   404                                  .removeDIR:         ;ah = 3Ah
   405                                  .changeCurrentDIR:  ;ah = 3Bh, changes directory for current drive
   406                                  .createFileHdl:     ;ah = 3Ch, handle function
   407                                  .openFileHdl:       ;ah = 3Dh, handle function
   408                                  .closeFileHdl:      ;ah = 3Eh, handle function
   409                                  .readFileHdl:       ;ah = 3Fh, handle function
   410                                  .writeFileHdl:      ;ah = 40h, handle function
   411                                  .deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   412                                  .movFileReadPtr:    ;ah = 42h, handle function, LSEEK
   413                                  .changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   414                                  .ioctrl:            ;ah = 44h, handle function
   415                                  .duplicateHandle:   ;ah = 45h, handle function
   416                                  .forceDuplicateHdl: ;ah = 46h, handle function
   417                                  .getCurrentDIR:     ;ah = 47h
   418                                  .allocateMemory:    ;ah = 48h
   419                                  .freeMemory:        ;ah = 49h
   420                                  .reallocMemory:     ;ah = 4Ah
   421                                  .loadExecChild:     ;ah = 4Bh, EXEC
   422                                  .terminateClean:    ;ah = 4Ch, EXIT
   423                                  .getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   424                                  .findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   425                                  .findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   426                                  .setCurrProcessID:  ;ah = 50h, set current process ID
   427                                  .getCurrProcessID:  ;ah = 51h, get current process ID
   428                                  .getSysVarsPtr:     ;ah = 52h
   429                                  .createDPB:         ;ah = 53h, generates a DPB from a given BPB
   430                                  .getVerifySetting:  ;ah = 54h
   431                                  .createPSP:         ;ah = 55h, creates a PSP for a program
   432                                  .renameFile:        ;ah = 56h
   433                                  .getSetFileDateTime:;ah = 57h
   434                                  .getsetMallocStrat: ;ah = 58h
   435                                  .getExtendedError:  ;ah = 59h
   436                                  .createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   437                                  .createNewFile:     ;ah = 5Bh
   438                                  .lockUnlockFile:    ;ah = 5Ch
   439                                  .getCritErrorInfo:  ;ah = 5Dh
   440                                  .networkServices:   ;ah = 5Eh, do nothing
   441                                  .networkRedirection:;ah = 5Fh, do nothing
   442                                  .trueName:          ;ah = 60h, get fully qualified name
   443                                                      ;ah = 61h, reserved
   444                                  .getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   445                                                      ;ah = 63h, reserved
   446                                  .setDriverLookahead:;ah = 64h, reserved
   447                                  .getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
   448                                  .getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
   449                                  .setHandleCount:    ;ah = 67h
   450                                  .commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   451                                  .getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   452                                  .return:
   453 00000216 C3                          ret
   454                                  
   455                                  
   456                                  .dispatchTable:
   457 00000217 [8601000000000000]          dq .simpleTerminate     ;AH = 00H, PROCESS MANAGEMENT
   458 0000021F [8701000000000000]          dq .stdinReadEcho       ;AH = 01H, CHAR IO
   459 00000227 [FC01000000000000]          dq .stdoutWrite         ;AH = 02H, CHAR IO
   460 0000022F [0302000000000000]          dq .stdauxRead          ;AH = 03H, CHAR IO
   461 00000237 [0302000000000000]          dq .stdauxWrite         ;AH = 04H, CHAR IO
   462 0000023F [0302000000000000]          dq .stdprnWrite         ;AH = 05H, CHAR IO
   463 00000247 [0302000000000000]          dq .directCONIO         ;AH = 06H, CHAR IO
   464 0000024F [0302000000000000]          dq .waitDirectInNoEcho  ;AH = 07H, CHAR IO
   465 00000257 [0302000000000000]          dq .waitStdinNoEcho     ;AH = 08H, CHAR IO
   466 0000025F [0402000000000000]          dq .printString         ;AH = 09H, CHAR IO
   467 00000267 [1602000000000000]          dq .buffStdinInput      ;AH = 0AH, CHAR IO
   468 0000026F [1602000000000000]          dq .checkStdinStatus    ;AH = 0BH, CHAR IO
   469 00000277 [1602000000000000]          dq .clearbuffDoFunc     ;AH = 0CH, CHAR IO
   470 0000027F [1602000000000000]          dq .diskReset           ;AH = 0DH, DISK MANAGEMENT
   471 00000287 [1602000000000000]          dq .selectDisk          ;AH = 0EH, DISK MANAGEMENT
   472 0000028F [1602000000000000]          dq .openFileFCB         ;AH = 0FH, FILE OPERATION       FCB
   473 00000297 [1602000000000000]          dq .closeFileFCB        ;AH = 10H, FILE OPERATION       FCB
   474 0000029F [1602000000000000]          dq .findFirstFileFCB    ;AH = 11H, FILE OPERATION       FCB
   475 000002A7 [1602000000000000]          dq .findNextFileFCB     ;AH = 12H, FILE OPERATION       FCB
   476 000002AF [1602000000000000]          dq .deleteFileFCB       ;AH = 13H, FILE OPERATION       FCB
   477 000002B7 [1602000000000000]          dq .sequentialReadFCB   ;AH = 14H, RECORD OPERATION     FCB
   478 000002BF [1602000000000000]          dq .sequentialWriteFCB  ;AH = 15H, RECORD OPERTAION     FCB
   479 000002C7 [1602000000000000]          dq .createFileFCB       ;AH = 16H, FILE OPERATION       FCB
   480 000002CF [1602000000000000]          dq .renameFileFCB       ;AH = 17H, FILE OPERATION       FCB
   481 000002D7 [1602000000000000]          dq .return              ;AH = 18H, RESERVED
   482 000002DF [1602000000000000]          dq .getCurrentDisk      ;AH = 19H, DISK MANAGEMENT
   483 000002E7 [1602000000000000]          dq .setDTA              ;AH = 1AH, RECORD OPERATION     F/H
   484 000002EF [1602000000000000]          dq .FATinfoDefault      ;AH = 1BH, DISK MANAGEMENT
   485 000002F7 [1602000000000000]          dq .FatinfoDevice       ;AH = 1CH, DISK MANAGEMENT
   486 000002FF [1602000000000000]          dq .return              ;AH = 1DH, RESERVED
   487 00000307 [1602000000000000]          dq .return              ;AH = 1EH, RESERVED
   488 0000030F [1602000000000000]          dq .getCurrentDPBptr    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
   489 00000317 [1602000000000000]          dq .return              ;AH = 20H, RESERVED
   490 0000031F [1602000000000000]          dq .randomReadFCB       ;AH = 21H, RECORD OPERATION     FCB
   491 00000327 [1602000000000000]          dq .randomWriteFCB      ;AH = 22H, RECORD OPERATION     FCB
   492 0000032F [1602000000000000]          dq .getFileSizeFCB      ;AH = 23H, FILE OPERATION       FCB
   493 00000337 [1602000000000000]          dq .setRelRecordFCB     ;AH = 24H, RECORD OPERATION     FCB
   494 0000033F [1602000000000000]          dq .setIntVector        ;AH = 25H, MISC. SYS. FUNCTION
   495 00000347 [1602000000000000]          dq .createNewPSP        ;AH = 26H, PROCESS MANAGEMENT
   496 0000034F [1602000000000000]          dq .randBlockReadFCB    ;AH = 27H, RECORD OPERATION     FCB
   497 00000357 [1602000000000000]          dq .randBlockWriteFCB   ;AH = 28H, RECORD OPERATION     FCB
   498 0000035F [1602000000000000]          dq .parseFilenameFCB    ;AH = 29H, FILE OPERATION       FCB
   499 00000367 [1602000000000000]          dq .getDate             ;AH = 2AH, TIME AND DATE
   500 0000036F [1602000000000000]          dq .setDate             ;AH = 2BH, TIME AND DATE
   501 00000377 [1602000000000000]          dq .getTime             ;AH = 2CH, TIME AND DATE
   502 0000037F [1602000000000000]          dq .setTime             ;AH = 2DH, TIME AND DATE
   503 00000387 [1602000000000000]          dq .setResetVerify      ;AH = 2EH, DISK MANAGEMENT
   504 0000038F [1602000000000000]          dq .getDTA              ;AH = 2FH, RECORD OPERATION     F/H
   505 00000397 [1602000000000000]          dq .getDOSversion       ;AH = 30H, MISC. SYS. FUNCTION
   506 0000039F [1602000000000000]          dq .terminateStayRes    ;AH = 31H, PROCESS MANAGEMENT
   507 000003A7 [1602000000000000]          dq .getDeviceDPBptr     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
   508 000003AF [1602000000000000]          dq .ctrlBreakCheck      ;AH = 33H, MISC. SYS. FUNCTION
   509 000003B7 [1602000000000000]          dq .getInDOSflagPtr     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
   510 000003BF [1602000000000000]          dq .getIntVector        ;AH = 35H, MISC. SYS. FUNCTION
   511 000003C7 [1602000000000000]          dq .getDiskFreeSpace    ;AH = 36H, DISK MANAGEMENT
   512 000003CF [1602000000000000]          dq .getsetSwitchChar    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
   513 000003D7 [1602000000000000]          dq .getsetCountryInfo   ;AH = 38H, MISC. SYS. FUNCTION
   514 000003DF [1602000000000000]          dq .makeDIR             ;AH = 39H, DIRECTORY OPERATION
   515 000003E7 [1602000000000000]          dq .removeDIR           ;AH = 3AH, DIRECTORY OPERATION
   516 000003EF [1602000000000000]          dq .changeCurrentDIR    ;AH = 3BH, DIRECTORY OPERATION
   517 000003F7 [1602000000000000]          dq .createFileHdl       ;AH = 3CH, FILE OPERATION       HANDLE
   518 000003FF [1602000000000000]          dq .openFileHdl         ;AH = 3DH, FILE OPERATION       HANDLE
   519 00000407 [1602000000000000]          dq .closeFileHdl        ;AH = 3EH, FILE OPERATION       HANDLE
   520 0000040F [1602000000000000]          dq .readFileHdl         ;AH = 3FH, RECORD OPERATION     HANDLE
   521 00000417 [1602000000000000]          dq .writeFileHdl        ;AH = 40H, RECORD OPERATION     HANDLE
   522 0000041F [1602000000000000]          dq .deleteFileHdl       ;AH = 41H, FILE OPERATION       HANDLE
   523 00000427 [1602000000000000]          dq .movFileReadPtr      ;AH = 42H, RECORD OPERATION     HANDLE
   524 0000042F [1602000000000000]          dq .changeFileModeHdl   ;AH = 43H, FILE OPERATION       HANDLE
   525 00000437 [1602000000000000]          dq .ioctrl              ;AH = 44H, MISC. SYS. FUNCTION
   526 0000043F [1602000000000000]          dq .duplicateHandle     ;AH = 45H, FILE OPERATION       HANDLE
   527 00000447 [1602000000000000]          dq .forceDuplicateHdl   ;AH = 46H, FILE OPERATION       HANDLE
   528 0000044F [1602000000000000]          dq .getCurrentDIR       ;AH = 47H, DIRECTORY OPERATION
   529 00000457 [1602000000000000]          dq .allocateMemory      ;AH = 48H, MEMORY MANAGEMENT
   530 0000045F [1602000000000000]          dq .freeMemory          ;AH = 49H, MEMORY MANAGEMENT
   531 00000467 [1602000000000000]          dq .reallocMemory       ;AH = 4AH, MEMORY MANAGEMENT
   532 0000046F [1602000000000000]          dq .loadExecChild       ;AH = 4BH, PROCESS MANAGEMENT
   533 00000477 [1602000000000000]          dq .terminateClean      ;AH = 4CH, PROCESS MANAGEMENT
   534 0000047F [1602000000000000]          dq .getRetCodeChild     ;AH = 4DH, PROCESS MANAGEMENT
   535 00000487 [1602000000000000]          dq .findFirstFileHdl    ;AH = 4EH, FILE OPERATION       HANDLE
   536 0000048F [1602000000000000]          dq .findNextFileHdl     ;AH = 4FH, FILE OPERATION       HANDLE
   537 00000497 [1602000000000000]          dq .setCurrProcessID    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   538 0000049F [1602000000000000]          dq .getCurrProcessID    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   539 000004A7 [1602000000000000]          dq .getSysVarsPtr       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   540 000004AF [1602000000000000]          dq .createDPB           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   541 000004B7 [1602000000000000]          dq .getVerifySetting    ;AH = 54H, DISK MANAGEMENT
   542 000004BF [1602000000000000]          dq .createPSP           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   543 000004C7 [1602000000000000]          dq .renameFile          ;AH = 56H, FILE OPERATION       HANDLE
   544 000004CF [1602000000000000]          dq .getSetFileDateTime  ;AH = 57H, FILE OPERATION       HANDLE
   545 000004D7 [1602000000000000]          dq .getsetMallocStrat   ;AH = 58H, MEMORY MANAGEMENT
   546 000004DF [1602000000000000]          dq .getExtendedError    ;AH = 59H, MISC. SYS. FUNCTION
   547 000004E7 [1602000000000000]          dq .createUniqueFile    ;AH = 5AH, FILE OPERATION       HANDLE
   548 000004EF [1602000000000000]          dq .createNewFile       ;AH = 5BH, FILE OPERATION       HANDLE
   549 000004F7 [1602000000000000]          dq .lockUnlockFile      ;AH = 5CH, RECORD OPERATION     HANDLE
   550 000004FF [1602000000000000]          dq .getCritErrorInfo    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   551 00000507 [1602000000000000]          dq .networkServices     ;AH = 5EH, RESERVED NETWORK FUNCTION
   552 0000050F [1602000000000000]          dq .networkRedirection  ;AH = 5FH, RESERVED NETWORK FUNCTION
   553 00000517 [1602000000000000]          dq .trueName            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   554 0000051F [1602000000000000]          dq .return              ;AH = 61H, RESERVED
   555 00000527 [1602000000000000]          dq .getPSPaddr          ;AH = 62H, PROCESS MANAGEMENT
   556 0000052F [1602000000000000]          dq .return              ;AH = 63H, RESERVED
   557 00000537 [1602000000000000]          dq .setDriverLookahead  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   558 0000053F [1602000000000000]          dq .getExtLocalInfo     ;AH = 65H, MISC. SYS. FUNCTION
   559 00000547 [1602000000000000]          dq .getsetGlobalCP      ;AH = 66H, MISC. SYS. FUNCTION
   560 0000054F [1602000000000000]          dq .setHandleCount      ;AH = 67H, FILE OPERAITON       F/H
   561 00000557 [1602000000000000]          dq .commitFile          ;AH = 68H, FILE OPERATION       HANDLE
   562 0000055F [1602000000000000]          dq .getsetDiskSerial    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   563                                  dispatchTableL  equ $ - .dispatchTable 
   564                                  
   565                                  terminateHandler:   ;Int 42h
   566                                  ctrlCHandler:       ;Int 43h
   567                                  critErrorHandler:   ;Int 44h
   568                                  ;User Stack in usage here, must be swapped to before this is called
   569                                  ;Entered with:  
   570                                  ;               AH = Critical Error Bitfield
   571                                  ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
   572                                  ;               Bit 6 - Reserved
   573                                  ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
   574                                  ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
   575                                  ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
   576                                  ;               Bits [2-1] = Affected Disk Error
   577                                  ;                     0 0   DOS area
   578                                  ;                     0 1   FAT area
   579                                  ;                     1 0   Directory area
   580                                  ;                     1 1   Data area
   581                                  ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   582                                  ;               AL  = Failing drive number if AH[7] = 0
   583                                  ;               DIL = Error code for errorMsg
   584                                  ;               RSI = EA of Device Header for which device the error occured
   585                                  ;Return:
   586                                  ;               AL = 0 - Ignore the Error       (Ignore)
   587                                  ;                  = 1 - Retry the Operation    (Retry)
   588                                  ;                  = 2 - Terminate the Program  (Abort)
   589                                  ;                  = 3 - Fail the DOS call      (Fail)
   590 00000567 53                          push rbx
   591 00000568 51                          push rcx
   592 00000569 52                          push rdx
   593 0000056A 57                          push rdi
   594 0000056B 56                          push rsi
   595 0000056C FC                          cld         ;Make String ops go forward
   596                                  
   597 0000056D 6689C3                      mov bx, ax  ;Save ah in bh and al in bl (if needed)
   598 00000570 488D155E020000              lea rdx, qword [.crlf]
   599 00000577 B409                        mov ah, 09h ;Print String
   600 00000579 CD41                        int 41h     ;Call DOS to print CRLF part of message
   601                                  
   602 0000057B 81E7FF000000                and edi, 00FFh   ;Zero the upper bytes of DI just in case
   603 00000581 B90C000000                  mov ecx, 0Ch
   604 00000586 39CF                        cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
   605 00000588 0F47F9                      cmova edi, ecx  ;If it is, move Gen Error into edi
   606 0000058B 480FB7FF                    movzx rdi, di
   607 0000058F 4889FA                      mov rdx, rdi    ;Copy error code
   608 00000592 48C1E704                    shl rdi, 4  ;Multiply by 16
   609 00000596 48D1E2                      shl rdx, 1  ;Multiply by 2
   610 00000599 4801D7                      add rdi, rdx    ;Add the resultant multiplications
   611 0000059C 488D1523010000              lea rdx, qword [.errorMsgTable]
   612 000005A3 488D143A                    lea rdx, qword [rdx+rdi]   ;Load EA to rdx
   613 000005A7 B409                        mov ah, 09h ;Print String
   614 000005A9 CD41                        int 41h     ;Call DOS to print first part of message
   615                                  
   616 000005AB 488D1505020000              lea rdx, qword [.readmsg]
   617 000005B2 488D3D0D020000              lea rdi, qword [.writemsg]
   618 000005B9 F6C701                      test bh, 1  ;Bit 0 is set if write operation
   619 000005BC 480F45D7                    cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
   620 000005C0 B409                        mov ah, 09h ;Print String
   621 000005C2 CD41                        int 41h     ;Call DOS to print error reading/writing portion
   622                                  
   623 000005C4 F6C780                      test bh, 80h    ;Test bit 7 for char/Disk assertation
   624 000005C7 0F85DF000000                jnz .charError
   625                                  ;Disk error continues here
   626 000005CD 488D15DC010000              lea rdx, qword [.drive] ;Drive message
   627 000005D4 B409                        mov ah, 09h
   628 000005D6 CD41                        int 41h
   629 000005D8 88DA                        mov dl, bl  ;Get zero based drive number into dl
   630 000005DA 80C241                      add dl, "A" ;Add ASCII code
   631 000005DD B402                        mov ah, 02h ;Print char in dl
   632 000005DF CD41                        int 41h
   633                                  .userInput:
   634 000005E1 488D15ED010000              lea rdx, qword [.crlf]  ;Print new line
   635 000005E8 B409                        mov ah, 09h
   636 000005EA CD41                        int 41h
   637                                  ;Abort, Retry, Ignore, Fail is word order
   638                                  ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   639                                  .userAbort:
   640                                  ;Abort is always an option
   641 000005EC 488D15E5010000              lea rdx, qword [.abortmsg]
   642 000005F3 B409                        mov ah, 09h
   643 000005F5 CD41                        int 41h ;Call DOS to prompt user for ABORT option
   644                                  .userRetry:
   645 000005F7 F6C710                      test bh, 10h  ;Bit 4 is retry bit
   646 000005FA 7416                        jz .userIgnore    ;If clear, dont print message
   647 000005FC 488D15ED010000              lea rdx, qword [.betweenMsg]
   648 00000603 B409                        mov ah, 09h
   649 00000605 CD41                        int 41h
   650 00000607 488D15D7010000              lea rdx, qword [.retrymsg]
   651 0000060E B409                        mov ah, 09h
   652 00000610 CD41                        int 41h
   653                                  .userIgnore:
   654 00000612 F6C720                      test bh, 20h    ;Bit 5 is ignore bit
   655 00000615 7416                        jz .userFail
   656 00000617 488D15D2010000              lea rdx, qword [.betweenMsg]
   657 0000061E B409                        mov ah, 09h
   658 00000620 CD41                        int 41h
   659 00000622 488D15B5010000              lea rdx, qword [.ignoremsg]
   660 00000629 B409                        mov ah, 09h
   661 0000062B CD41                        int 41h
   662                                  .userFail:
   663 0000062D F6C708                      test bh, 08h    ;Bit 3 is Fail bit
   664 00000630 7416                        jz .userMsgEnd
   665 00000632 488D15B7010000              lea rdx, qword [.betweenMsg]
   666 00000639 B409                        mov ah, 09h
   667 0000063B CD41                        int 41h
   668 0000063D 488D15A7010000              lea rdx, qword [.failmsg]
   669 00000644 B409                        mov ah, 09h
   670 00000646 CD41                        int 41h
   671                                  .userMsgEnd:
   672 00000648 488D15A4010000              lea rdx, qword [.endMsg]
   673 0000064F B409                        mov ah, 09h
   674 00000651 CD41                        int 41h
   675                                  ;Get user input now 
   676 00000653 31C9                        xor ecx, ecx  ;4 Possible Responses
   677 00000655 488D3D9A010000              lea rdi, qword [.responses] ;Go to start of string
   678 0000065C B401                        mov ah, 01h ;STDIN without Console Echo
   679 0000065E CD41                        int 41h ;Get char in al
   680 00000660 3C61                        cmp al, "a" ;Chack if lowercase
   681 00000662 7202                        jb .uip1    ;If the value is below, ignore subtraction
   682 00000664 2C20                        sub al, "a"-"A"  ;Turn the char into uppercase
   683                                  .uip1:
   684 00000666 AE                          scasb   ;Compare char to list, offset gives return code
   685 00000667 740F                        je .validInput  ;If they are equal, ecx has return code
   686 00000669 FFC1                        inc ecx
   687 0000066B 81F904000000                cmp ecx, 4
   688 00000671 75F3                        jne .uip1
   689 00000673 E969FFFFFF                  jmp .userInput ;If valid char not found, keep waiting 
   690                                  .validInput:
   691 00000678 88C8                        mov al, cl  ;Move the offset into .responses into al
   692                                  ;Now check if the input is permitted
   693 0000067A 3C02                        cmp al, 2   ;Check if abort, abort always permitted
   694 0000067C 7427                        je .cehExit
   695 0000067E 84C0                        test al, al ;Check if 0 => Ignore
   696 00000680 740F                        je .viIgnore
   697 00000682 3C01                        cmp al, 1   ;Check if 1 => Retry
   698 00000684 7416                        je .viRetry
   699                                  .viFail:    ;Fallthrough for fail (al = 3)
   700 00000686 F6C708                      test bh, 8  ;Bit 3 is Fail bit
   701 00000689 0F8452FFFFFF                jz .userInput  ;If bit 3 is zero, prompt and get input again
   702 0000068F EB14                        jmp short .cehExit
   703                                  .viIgnore:
   704 00000691 F6C720                      test bh, 20h    ;Bit 5 is Ignore bit
   705 00000694 0F8447FFFFFF                jz .userInput
   706 0000069A EB09                        jmp short .cehExit
   707                                  .viRetry:
   708 0000069C F6C710                      test bh, 10h    ;Bit 4 is Retry bit
   709 0000069F 0F843CFFFFFF                jz .userInput
   710                                  .cehExit:
   711 000006A5 5E                          pop rsi
   712 000006A6 5F                          pop rdi
   713 000006A7 5A                          pop rdx
   714 000006A8 59                          pop rcx
   715 000006A9 5B                          pop rbx
   716 000006AA 48CF                        iretq
   717                                  .charError:
   718 000006AC B908000000                  mov ecx, 8  ;8 chars in device name
   719 000006B1 4881C61A000000              add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   720                                  .ce1:
   721 000006B8 AC                          lodsb   ;Get a string char into al and inc rsi
   722 000006B9 88C2                        mov dl, al  ;Move char into dl
   723 000006BB B402                        mov ah, 02h
   724 000006BD CD41                        int 41h ;Print char
   725 000006BF E2F7                        loop .ce1   ;Keep looping until all 8 char device chars have been printed
   726 000006C1 E91BFFFFFF                  jmp .userInput
   727                                  
   728                                  .errorMsgTable: ;Each table entry is 18 chars long
   729 000006C6 57726974652050726F-                 db "Write Protect $   "       ;Error 0
   729 000006CF 746563742024202020 
   730 000006D8 556E6B6E6F776E2055-                 db "Unknown Unit $    "       ;Error 1
   730 000006E1 6E6974202420202020 
   731 000006EA 4E6F74205265616479-                 db "Not Ready $       "       ;Error 2
   731 000006F3 202420202020202020 
   732 000006FC 556E6B6E6F776E2043-                 db "Unknown Command $ "       ;Error 3
   732 00000705 6F6D6D616E64202420 
   733 0000070E 446174612024202020-                 db "Data $            "       ;Error 4
   733 00000717 202020202020202020 
   734 00000720 426164205265717565-                 db "Bad Request $     "       ;Error 5
   734 00000729 737420242020202020 
   735 00000732 5365656B2024202020-                 db "Seek $            "       ;Error 6
   735 0000073B 202020202020202020 
   736 00000744 556E6B6E6F776E204D-                 db "Unknown Media $   "       ;Error 7
   736 0000074D 656469612024202020 
   737 00000756 536563746F72204E6F-                 db "Sector Not Found $"       ;Error 8
   737 0000075F 7420466F756E642024 
   738 00000768 4F7574204F66205061-                 db "Out Of Paper $    "       ;Error 9
   738 00000771 706572202420202020 
   739 0000077A 577269746520466175-                 db "Write Fault $     "       ;Error A
   739 00000783 6C7420242020202020 
   740 0000078C 52656164204661756C-                 db "Read Fault $      "       ;Error B
   740 00000795 742024202020202020 
   741 0000079E 47656E6572616C2046-                 db "General Failure $ "       ;Error C
   741 000007A7 61696C757265202420 
   742                                  
   743 000007B0 64726976652024          .drive      db "drive $"
   744 000007B7 6572726F7220726561-     .readmsg    db "error reading $"
   744 000007C0 64696E672024       
   745 000007C6 6572726F7220777269-     .writemsg   db "error writing $"
   745 000007CF 74696E672024       
   746 000007D5 0A0D24                  .crlf       db 0Ah, 0Dh, "$"
   747 000007D8 41626F727424            .abortmsg   db "Abort$" 
   748 000007DE 49676E6F726524          .ignoremsg  db "Ignore$"
   749 000007E5 526574727924            .retrymsg   db "Retry$"
   750 000007EB 4661696C24              .failmsg    db "Fail$"
   751 000007F0 2C2024                  .betweenMsg db ", $"
   752 000007F3 3F2024                  .endMsg     db "? $"
   753 000007F6 49524146                .responses  db "IRAF"   ;Abort Retry Ignore Fail
   754                                  absDiskRead:        ;Int 45h
   755                                  ;al = Drive number
   756                                  ;rbx = Memory Buffer address
   757                                  ;ecx = Number of sectors to read (max 255 for now)
   758                                  ;rdx = Start LBA to read from
   759 000007FA 480FB6C0                    movzx rax, al   ;Zero extend DOS drive number 
   760 000007FE 8A80[65120000]              mov al, byte [msdDriver.msdBIOSmap + rax] ;Get translated BIOS num into al
   761 00000804 4891                        xchg rax, rcx
   762 00000806 4887CA                      xchg rcx, rdx
   763 00000809 B482                        mov ah, 82h
   764 0000080B CD33                        int 33h
   765 0000080D 48CF                        iretq
   766                                  absDiskWrite:       ;Int 46h
   767 0000080F 480FB6C0                    movzx rax, al   ;Zero extend DOS drive number 
   768 00000813 8A80[65120000]              mov al, byte [msdDriver.msdBIOSmap + rax] ;Get translated BIOS num into al
   769 00000819 4891                        xchg rax, rcx
   770 0000081B 4887CA                      xchg rcx, rdx
   771 0000081E B483                        mov ah, 83h
   772 00000820 CD33                        int 33h
   773 00000822 48CF                        iretq
   774                                  terminateResident:  ;Int 47h
   775                                  inDosHandler:       ;Int 48h
   776                                  ;Called when DOS idle
   777 00000824 48CF                        iretq
   778                                  fastOutput:         ;Int 49h
   779                                  ;Called with char to transfer in al
   780 00000826 50                          push rax
   781 00000827 B40E                        mov ah, 0Eh
   782 00000829 CD30                        int 30h
   783 0000082B 58                          pop rax
   784 0000082C 48CF                        iretq
   785                                  passCommand:        ;Int 4Eh, hooked by COMMAND.COM
   786 0000082E 48CF                        iretq
   787                                  multiplex:          ;Int 4Fh, kept as iretq for now
   788 00000830 48CF                        iretq
   789                                  ;-----------------------------------:
   790                                  ;          Driver routines          :
   791                                  ;-----------------------------------:
   792                                  drivers:
   793                                  conHdr:
   794 00000832 [5408000000000000]          dq auxHdr
   795 0000083A 1308                        dw 0813h
   796 0000083C [CA09000000000000]          dq commonStrat
   797 00000844 [E109000000000000]          dq conDriver
   798 0000084C 434F4E2020202020            db "CON     "
   799                                  auxHdr:
   800 00000854 [7608000000000000]          dq prnHdr
   801 0000085C 0080                        dw 08000h
   802 0000085E [CA09000000000000]          dq commonStrat
   803 00000866 [6A0C000000000000]          dq com1Intr
   804 0000086E 4155582020202020            db "AUX     "
   805                                  prnHdr:
   806 00000876 [9808000000000000]          dq clkHdr
   807 0000087E 40A0                        dw 0A040h
   808 00000880 [DA09000000000000]          dq nulStrat
   809 00000888 [E009000000000000]          dq nulIntr
   810 00000890 50524E2020202020            db "PRN     "
   811                                  clkHdr:
   812 00000898 [BA08000000000000]          dq msdHdr
   813 000008A0 0880                        dw 08008h
   814 000008A2 [CA09000000000000]          dq commonStrat
   815 000008AA [190B000000000000]          dq clkDriver
   816 000008B2 434C4F434B242020            db "CLOCK$  "
   817                                  msdHdr:
   818 000008BA [DC08000000000000]          dq com1Hdr
   819 000008C2 0008                        dw 00800h   ;Once Generic IO implemented, change to 00840h
   820 000008C4 [CA09000000000000]          dq commonStrat
   821 000008CC [0F0E000000000000]          dq msdDriver
   822 000008D4 0000000000000000            db 0,0,0,0,0,0,0,0
   823                                  com1Hdr:
   824 000008DC [FE08000000000000]          dq com2Hdr
   825 000008E4 0080                        dw 08000h
   826 000008E6 [CA09000000000000]          dq commonStrat
   827 000008EE [6A0C000000000000]          dq com1Intr
   828 000008F6 434F4D3120202020            db "COM1    "
   829                                  com2Hdr:
   830 000008FE [2009000000000000]          dq com3Hdr
   831 00000906 0080                        dw 08000h
   832 00000908 [CA09000000000000]          dq commonStrat
   833 00000910 [730C000000000000]          dq com2Intr
   834 00000918 434F4D3220202020            db "COM2    "
   835                                  com3Hdr:
   836 00000920 [4209000000000000]          dq com4Hdr
   837 00000928 0080                        dw 08000h
   838 0000092A [CA09000000000000]          dq commonStrat
   839 00000932 [7C0C000000000000]          dq com3Intr
   840 0000093A 434F4D3320202020            db "COM3    "
   841                                  com4Hdr:
   842 00000942 [6409000000000000]          dq lpt1Hdr
   843 0000094A 0080                        dw 08000h
   844 0000094C [CA09000000000000]          dq commonStrat
   845 00000954 [850C000000000000]          dq com4Intr
   846 0000095C 434F4D3420202020            db "COM4    "
   847                                  lpt1Hdr:
   848 00000964 [8609000000000000]          dq lpt2Hdr
   849 0000096C 40A0                        dw 0A040h
   850 0000096E [DA09000000000000]          dq nulStrat
   851 00000976 [E009000000000000]          dq nulIntr
   852 0000097E 4C50543120202020            db "LPT1    "
   853                                  lpt2Hdr:
   854 00000986 [A809000000000000]          dq lpt3Hdr
   855 0000098E 40A0                        dw 0A040h
   856 00000990 [DA09000000000000]          dq nulStrat
   857 00000998 [E009000000000000]          dq nulIntr
   858 000009A0 4C50543220202020            db "LPT2    "
   859                                  lpt3Hdr:
   860 000009A8 FFFFFFFFFFFFFFFF            dq -1
   861 000009B0 40A0                        dw 0A040h
   862 000009B2 [DA09000000000000]          dq nulStrat
   863 000009BA [E009000000000000]          dq nulIntr
   864 000009C2 4C50543320202020            dq "LPT3    "
   865                                  
   866                                  commonStrat:
   867                                  ;DOS calls this function with rbx=Ptr to request header
   868 000009CA 48891D01000000              mov qword [reqHdrPtr], rbx
   869 000009D1 C3                          ret
   870 000009D2 0000000000000000        reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
   871                                  
   872                                  nulStrat:
   873 000009DA 66C743030001                mov word [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
   874                                  nulIntr:
   875 000009E0 C3                          ret
   876                                  
   877                                  conDriver:
   878 000009E1 50                          push rax
   879 000009E2 53                          push rbx
   880 000009E3 488B1DE8FFFFFF              mov rbx, qword [reqHdrPtr]
   881 000009EA B003                        mov al, 03h ;Unknown Command
   882 000009EC 807B0218                    cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   883 000009F0 7735                        ja .conWriteErrorCode ;If yes, error!
   884                                  
   885 000009F2 8A4302                      mov al, byte [rbx + drvReqHdr.cmdcde]
   886 000009F5 3C04                        cmp al, 4
   887 000009F7 743D                        jz .conRead
   888 000009F9 3C05                        cmp al, 5
   889 000009FB 747F                        jz .conNondestructiveRead
   890 000009FD 3C06                        cmp al, 6
   891 000009FF 0F84A8000000                jz .conInputStatus
   892 00000A05 3C07                        cmp al, 7
   893 00000A07 0F84B0000000                jz .conFlushInputBuffers
   894 00000A0D 3C08                        cmp al, 8
   895 00000A0F 0F84CA000000                jz .conWrite
   896 00000A15 3C09                        cmp al, 9
   897 00000A17 0F84C2000000                jz .conWrite
   898 00000A1D 3C0A                        cmp al, 0Ah
   899 00000A1F 0F84E3000000                jz .conOutputStatus
   900 00000A25 EB06                        jmp short .conExit  ;All other valid functions return done
   901                                  .conWriteErrorCode:     ;Jump to with al=Standard Error code
   902 00000A27 B480                        mov ah, 80h ;Set error bit
   903 00000A29 66894303                    mov word [rbx + drvReqHdr.status], ax
   904                                  .conExit:
   905 00000A2D 66814B030001                or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   906 00000A33 5B                          pop rbx
   907 00000A34 58                          pop rax
   908 00000A35 C3                          ret
   909                                  .conRead:    ;Function 4
   910 00000A36 B005                        mov al, 05h ;Bad request structure length?
   911 00000A38 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   912 00000A3B 75EA                        jne .conWriteErrorCode
   913                                  
   914 00000A3D 57                          push rdi
   915 00000A3E 51                          push rcx
   916 00000A3F 488B7B0E                    mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   917 00000A43 31C9                        xor ecx, ecx    ;Zero the char counter
   918                                  .cre1:
   919 00000A45 3B4B16                      cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   920 00000A48 741C                        je .cre2
   921 00000A4A 803DC700000000              cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
   922 00000A51 751A                        jnz .cre3   ;No, get the buffer value
   923 00000A53 31C0                        xor eax, eax
   924 00000A55 CD36                        int 36h
   925                                  .cre11:
   926 00000A57 AA                          stosb
   927 00000A58 84C0                        test al, al ;Was the ascii code 0?
   928 00000A5A 7506                        jnz .cre12  ;No, skip storing scancode
   929 00000A5C 8825B6000000                mov byte [.conBuf], ah  ;Save scancode
   930                                  .cre12:
   931 00000A62 FFC1                        inc ecx ;Inc chars stored in buffer
   932 00000A64 EBDF                        jmp short .cre1
   933                                  .cre2:
   934 00000A66 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   935 00000A69 59                          pop rcx
   936 00000A6A 5F                          pop rdi
   937 00000A6B EBC0                        jmp short .conExit
   938                                  .cre3:
   939 00000A6D 8A05A5000000                mov al, byte [.conBuf]  ;Get the buffer value
   940 00000A73 C6059E00000000              mov byte [.conBuf], 0   ;Reset the buffer value
   941 00000A7A EBDB                        jmp short .cre11
   942                                  
   943                                  .conNondestructiveRead:  ;Function 5
   944 00000A7C B005                        mov al, 05h ;Bad request structure length?
   945 00000A7E 803B0E                      cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   946 00000A81 75A4                        jne .conWriteErrorCode
   947 00000A83 803D8E00000000              cmp byte [.conBuf], 0
   948 00000A8A 7519                        jnz .cnr2
   949 00000A8C B401                        mov ah, 01h     ;Get key if exists
   950 00000A8E CD36                        int 36h
   951 00000A90 7408                        jz .cnr1        ;If zero clear => no key, go forwards
   952                                      ;Keystroke available
   953                                  .cnr0:
   954 00000A92 88430D                      mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Move char in al
   955 00000A95 E993FFFFFF                  jmp .conExit
   956                                  .cnr1: ;No keystroke available
   957 00000A9A 66C743030002                mov word [rbx + nonDestInNoWaitReqPkt.status], 0200h   ;Set busy bit
   958 00000AA0 E988FFFFFF                  jmp .conExit
   959                                  .cnr2:
   960 00000AA5 8A056D000000                mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   961 00000AAB EBE5                        jmp short .cnr0   ;Keystroke is available clearly
   962                                  
   963                                  .conInputStatus:         ;Function 6
   964 00000AAD B005                        mov al, 05h ;Bad request structure length?
   965 00000AAF 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   966 00000AB2 0F856FFFFFFF                jne .conWriteErrorCode
   967 00000AB8 E970FFFFFF                  jmp .conExit ;Exit, device ready
   968                                  
   969                                  .conFlushInputBuffers:   ;Function 7
   970 00000ABD B005                        mov al, 05h ;Bad request structure length?
   971 00000ABF 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   972 00000AC2 0F855FFFFFFF                jne .conWriteErrorCode
   973 00000AC8 C6054900000000              mov byte [.conBuf], 0   ;Clear buffer
   974                                  .cfib0:
   975 00000ACF B401                        mov ah, 01      ;Get buffer status
   976 00000AD1 CD36                        int 36h
   977 00000AD3 0F8454FFFFFF                jz .conExit     ;If zero clear => no more keys to read
   978 00000AD9 30E4                        xor ah, ah
   979 00000ADB CD36                        int 36h ;Read key to flush from buffer
   980 00000ADD EBF0                        jmp short .cfib0
   981                                  
   982                                  .conWrite:   ;Function 8 and 9
   983 00000ADF B005                        mov al, 05h ;Bad request structure length?
   984 00000AE1 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   985 00000AE4 0F853DFFFFFF                jne .conWriteErrorCode
   986                                  
   987 00000AEA 56                          push rsi
   988 00000AEB 51                          push rcx
   989 00000AEC 488B730E                    mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   990 00000AF0 31C9                        xor ecx, ecx    ;Zero the char counter
   991                                  .cw1: 
   992 00000AF2 3B4B16                      cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   993 00000AF5 7407                        je .cw2
   994 00000AF7 AC                          lodsb   ;Get char into al, and inc rsi
   995 00000AF8 CD49                        int 49h ;Fast print char
   996 00000AFA FFC1                        inc ecx
   997 00000AFC EBF4                        jmp short .cw1 ;keep printing until all chars printed
   998                                  .cw2:
   999 00000AFE 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
  1000 00000B01 59                          pop rcx
  1001 00000B02 5E                          pop rsi
  1002 00000B03 E925FFFFFF                  jmp .conExit
  1003                                  .conOutputStatus:   ;Function 0Ah
  1004 00000B08 B005                        mov al, 05h ;Bad request structure length?
  1005 00000B0A 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
  1006 00000B0D 0F8514FFFFFF                jne .conWriteErrorCode
  1007 00000B13 E915FFFFFF                  jmp .conExit
  1008                                  
  1009 00000B18 00                      .conBuf db 0    ;Single byte buffer
  1010                                  clkDriver:
  1011 00000B19 50                          push rax
  1012 00000B1A 53                          push rbx
  1013 00000B1B 51                          push rcx
  1014 00000B1C 52                          push rdx
  1015 00000B1D 56                          push rsi
  1016 00000B1E 57                          push rdi
  1017 00000B1F 55                          push rbp
  1018 00000B20 488B1DABFEFFFF              mov rbx, qword [reqHdrPtr]
  1019 00000B27 B003                        mov al, 03h ;Unknown Command
  1020 00000B29 807B0218                    cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
  1021 00000B2D 772D                        ja .clkWriteErrorCode ;If yes, error!
  1022 00000B2F 80FC04                      cmp ah, 04h
  1023 00000B32 743C                        jz .clkRead
  1024 00000B34 80FC06                      cmp ah, 06h
  1025 00000B37 0F84BE000000                jz .clkInputStatus
  1026 00000B3D 80FC07                      cmp ah, 07h
  1027 00000B40 0F84C5000000                jz .clkFlushInputBuffers
  1028 00000B46 80FC08                      cmp ah, 08h
  1029 00000B49 0F84CC000000                jz .clkWrite
  1030 00000B4F 80FC09                      cmp ah, 09h
  1031 00000B52 0F84C3000000                jz .clkWrite
  1032 00000B58 EB08                        jmp short .clkExit  ;All other valid functions return done immediately!
  1033                                  .clkNotFunctioning:
  1034 00000B5A B002                        mov al, 02h ;Device not ready error
  1035                                  .clkWriteErrorCode:
  1036 00000B5C B480                        mov ah, 80h ;Set error bit
  1037 00000B5E 66894303                    mov word [rbx + drvReqHdr.status], ax
  1038                                  .clkExit:
  1039 00000B62 66814B030001                or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
  1040 00000B68 5D                          pop rbp
  1041 00000B69 5F                          pop rdi
  1042 00000B6A 5E                          pop rsi
  1043 00000B6B 5A                          pop rdx
  1044 00000B6C 59                          pop rcx
  1045 00000B6D 5B                          pop rbx
  1046 00000B6E 58                          pop rax
  1047 00000B6F C3                          ret
  1048                                  
  1049                                  .clkRead:           ;Function 4
  1050 00000B70 B005                        mov al, 05h ;Bad request structure length?
  1051 00000B72 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1052 00000B75 75E5                        jne .clkWriteErrorCode
  1053                                  
  1054 00000B77 4831ED                      xor rbp, rbp    ;Write to RBP rather than updating record word by word
  1055 00000B7A B404                        mov ah, 04h ;Read RTC date
  1056 00000B7C CD3A                        int 3Ah
  1057 00000B7E 72DA                        jc .clkNotFunctioning
  1058 00000B80 0FB6C2                      movzx eax, dl  ;Get dl (day of the month) into al
  1059 00000B83 E8A8000000                  call .clkBCDtoHex   ;Convert BCD value to hex
  1060 00000B88 89C5                        mov ebp, eax    ;Save result in bp
  1061 00000B8A 88F0                        mov al, dh 
  1062 00000B8C E89F000000                  call .clkBCDtoHex
  1063 00000B91 C1E005                      shl eax, 5  ;Shift month
  1064 00000B94 01C5                        add ebp, eax    ;Add month number to bp
  1065 00000B96 88C8                        mov al, cl      ;Get year from cl
  1066 00000B98 E893000000                  call .clkBCDtoHex
  1067 00000B9D 3C50                        cmp al, 80  ;Is the value less than 80
  1068 00000B9F 7302                        jae .cread0
  1069 00000BA1 0464                        add al, 100
  1070                                  .cread0:
  1071 00000BA3 2C50                        sub al, 80
  1072 00000BA5 C1E009                      shl eax, 9
  1073 00000BA8 01C5                        add ebp, eax    ;number of years since 1980 shifted by 9 to ebp
  1074 00000BAA 48C1E510                    shl rbp, 10h    ;Shift word 1 into word 2
  1075 00000BAE B402                        mov ah, 02h ;Read RTC time
  1076 00000BB0 CD3A                        int 3Ah
  1077 00000BB2 72A6                        jc .clkNotFunctioning
  1078 00000BB4 88C8                        mov al, cl  ;Get minutes into al
  1079 00000BB6 E875000000                  call .clkBCDtoHex
  1080 00000BBB 4809C5                      or rbp, rax ;Add minutes byte low
  1081 00000BBE 48C1E508                    shl rbp, 8  ;Shift up by a byte
  1082                                  
  1083 00000BC2 88E8                        mov al, ch  ;Get hours into al
  1084 00000BC4 E867000000                  call .clkBCDtoHex
  1085 00000BC9 4809C5                      or rbp, rax ;Add hours to byte low
  1086 00000BCC 48C1E510                    shl rbp, 10h  ;Shift up by a byte and add an empty byte for 100ths of second
  1087 00000BD0 88F0                        mov al, dh  ;Get seconds into al
  1088 00000BD2 E859000000                  call .clkBCDtoHex
  1089 00000BD7 4809C5                      or rbp, rax ;Add seconds to byte low
  1090 00000BDA 488B7B0E                    mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Get the buffer pointer
  1091 00000BDE 4881C705000000              add rdi, 5  ;Move pointer to the end of the buffer
  1092 00000BE5 4889E8                      mov rax, rbp    ;Get the packed 6 bytes into rax
  1093 00000BE8 B906000000                  mov ecx, 6  ;6 bytes to transfer
  1094 00000BED FD                          std ;Reverse direction of string operation
  1095                                  .cread1:
  1096 00000BEE AA                          stosb   ;Store byte and dec rdi
  1097 00000BEF 48C1E808                    shr rax, 8  ;Shift all down by one byte
  1098 00000BF3 E2F9                        loop .cread1    ;do it until ecx=0
  1099 00000BF5 FC                          cld ;
  1100 00000BF6 E967FFFFFF                  jmp .clkExit
  1101                                  
  1102                                  .clkInputStatus:    ;Function 6
  1103                                  ;Always return ready
  1104 00000BFB B005                        mov al, 05h ;Bad request structure length?
  1105 00000BFD 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
  1106 00000C00 0F8556FFFFFF                jne .clkWriteErrorCode
  1107 00000C06 E957FFFFFF                  jmp .clkExit
  1108                                  .clkFlushInputBuffers:  ;Function 7
  1109                                  ;Always return done immediately
  1110 00000C0B B005                        mov al, 05h ;Bad request structure length?
  1111 00000C0D 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
  1112 00000C10 0F8546FFFFFF                jne .clkWriteErrorCode
  1113 00000C16 E947FFFFFF                  jmp .clkExit
  1114                                  
  1115                                  .clkWrite:          ;Functions 8 and 9
  1116 00000C1B B005                        mov al, 05h ;Bad request structure length?
  1117 00000C1D 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1118 00000C20 0F8536FFFFFF                jne .clkWriteErrorCode
  1119                                  
  1120 00000C26 488B730E                    mov rsi, qword [rbx + ioReqPkt.bufptr]
  1121 00000C2A 31C0                        xor eax, eax
  1122 00000C2C 66AB                        stosw   ;Get first word into ax
  1123 00000C2E 89C1                        mov ecx, eax    ;Save ax in cx
  1124                                  
  1125                                  .clkBCDtoHex:
  1126                                  ;Converts a BCD value to a Hex byte
  1127                                  ;Takes input in al, returns in al (zero-ed upper seven bytes)
  1128 00000C30 51                          push rcx
  1129 00000C31 0FB6C0                      movzx eax, al   ;Zero extend
  1130 00000C34 89C1                        mov ecx, eax    ;Save al in ecx
  1131 00000C36 250F000000                  and eax, 0Fh    ;Get lower nybble
  1132 00000C3B 81E1F0000000                and ecx, 0F0h   ;Get upper nybble
  1133 00000C41 C1E904                      shr ecx, 4      ;Shift upper nybble value down
  1134                                  .cbth0:
  1135 00000C44 050A000000                  add eax, 10
  1136 00000C49 E2F9                        loop .cbth0
  1137 00000C4B 59                          pop rcx
  1138 00000C4C C3                          ret
  1139                                  
  1140                                  .clkHexToBCD:
  1141                                  ;Converts a Hex byte into two BCD digits
  1142                                  ;Takes input in al, returns in al (zero-ed upper seven bytes)
  1143 00000C4D 51                          push rcx
  1144 00000C4E 0FB6C0                      movzx eax, al   ;Zero extend
  1145 00000C51 31C9                        xor ecx, ecx
  1146                                  .chtb0:
  1147 00000C53 3D0A000000                  cmp eax, 10
  1148 00000C58 7209                        jb .chtb1
  1149 00000C5A 2D0A000000                  sub eax, 10
  1150 00000C5F FFC1                        inc ecx
  1151 00000C61 EBF0                        jmp short .chtb0
  1152                                  .chtb1:
  1153 00000C63 C1E104                      shl ecx, 4  ;Move to upper nybble
  1154 00000C66 08C8                        or al, cl   ;Move upper nybble into al upper nybble
  1155 00000C68 59                          pop rcx
  1156 00000C69 C3                          ret
  1157                                  
  1158                                  ;COM Driver headers and main interrupt strat
  1159                                  com1Intr:
  1160 00000C6A C6059D01000000              mov byte [comIntr.comDevice], 0
  1161 00000C71 EB19                        jmp short comIntr
  1162                                  com2Intr:
  1163 00000C73 C6059401000001              mov byte [comIntr.comDevice], 1
  1164 00000C7A EB10                        jmp short comIntr
  1165                                  com3Intr:
  1166 00000C7C C6058B01000002              mov byte [comIntr.comDevice], 2
  1167 00000C83 EB07                        jmp short comIntr
  1168                                  com4Intr:
  1169 00000C85 C6058201000003              mov byte [comIntr.comDevice], 3
  1170                                  comIntr:
  1171 00000C8C 50                          push rax
  1172 00000C8D 53                          push rbx
  1173 00000C8E 51                          push rcx
  1174 00000C8F 52                          push rdx
  1175 00000C90 56                          push rsi
  1176 00000C91 57                          push rdi
  1177 00000C92 488B1D39FDFFFF              mov rbx, qword [reqHdrPtr]
  1178 00000C99 B003                        mov al, 03h ;Unknown Command
  1179 00000C9B 807B0218                    cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
  1180 00000C9F 7756                        ja .comWriteErrorCode ;If yes, error!
  1181                                  
  1182 00000CA1 8A4302                      mov al, byte [rbx + drvReqHdr.cmdcde]
  1183 00000CA4 3C04                        cmp al, 4   ;Read Character(s)
  1184 00000CA6 7462                        jz .comRead
  1185 00000CA8 3C05                        cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
  1186 00000CAA 0F849B000000                jz .comNondestructiveRead   
  1187 00000CB0 3C06                        cmp al, 6   ;Read Input Status, always return with Busy bit = 0
  1188 00000CB2 0F8484000000                jz .comReadInputStatus
  1189 00000CB8 3C07                        cmp al, 7   ;Flush read buffers, return done
  1190 00000CBA 0F84B9000000                jz .comFlushInputBuffers
  1191 00000CC0 3C08                        cmp al, 8
  1192 00000CC2 0F84DB000000                jz .comWrite
  1193 00000CC8 3C09                        cmp al, 9
  1194 00000CCA 0F84D3000000                jz .comWrite
  1195 00000CD0 3C0A                        cmp al, 0Ah
  1196 00000CD2 0F8400010000                jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
  1197 00000CD8 EB23                        jmp short .comExit  ;All other valid functions should return done
  1198                                  .comErrorNoCount:
  1199 00000CDA B002                        mov al, 02h ;Unknown device
  1200 00000CDC EB19                        jmp short .comWriteErrorCode
  1201                                  .comReadError:
  1202 00000CDE BA0B000000                  mov edx, 0Bh
  1203                                  .comWriteError:
  1204 00000CE3 BA0A000000                  mov edx, 0Ah
  1205                                  .comError:
  1206 00000CE8 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
  1207 00000CEB B902000000                  mov ecx, 02h    ;Unknown device
  1208 00000CF0 3CFE                        cmp al, 0FEh    ;Invalid COM port
  1209 00000CF2 0F44D1                      cmove edx, ecx  ;Only move unknown device error code if invalid COM port
  1210 00000CF5 88D0                        mov al, dl      ;Move dl to al to store error code
  1211                                  .comWriteErrorCode:    ;Jump to with al=Standard Error code
  1212 00000CF7 B480                        mov ah, 80h ;Set error bit
  1213 00000CF9 66894303                    mov word [rbx + drvReqHdr.status], ax
  1214                                  .comExit:
  1215 00000CFD 66814B030001                or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
  1216 00000D03 5F                          pop rdi
  1217 00000D04 5E                          pop rsi
  1218 00000D05 5A                          pop rdx
  1219 00000D06 59                          pop rcx
  1220 00000D07 5B                          pop rbx
  1221 00000D08 58                          pop rax
  1222 00000D09 C3                          ret
  1223                                  
  1224                                  .comRead:
  1225 00000D0A B005                        mov al, 05h ;Bad request structure length?
  1226 00000D0C 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1227 00000D0F 75E6                        jne .comWriteErrorCode
  1228                                  
  1229 00000D11 488B7B0E                    mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
  1230 00000D15 31C9                        xor ecx, ecx    ;Zero the char counter
  1231                                  .cr1:
  1232 00000D17 3B4B16                      cmp ecx, dword [rbx + ioReqPkt.tfrlen]
  1233 00000D1A 741B                        je .cre2
  1234                                  .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
  1235 00000D1C B802000000                  mov eax, 02h    ;Recieve 
  1236 00000D21 8A15E7000000                mov dl, byte [.comDevice]    ;Get transacting com device
  1237 00000D27 6698                        cbw     ;Zero extend to upper byte
  1238 00000D29 CD34                        int 34h ;Recieve Char
  1239 00000D2B 72BB                        jc .comError
  1240 00000D2D 80FC80                      cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
  1241 00000D30 74EA                        je .cr11
  1242 00000D32 AA                          stosb   ;Store char in al into buffer and inc rdi
  1243 00000D33 FFC1                        inc ecx
  1244 00000D35 EBE0                        jmp short .cr1
  1245                                  .cre2:
  1246 00000D37 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
  1247 00000D3A EBC1                        jmp short .comExit
  1248                                  
  1249                                  .comReadInputStatus:
  1250 00000D3C B005                        mov al, 05h ;Bad request structure length?
  1251 00000D3E 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
  1252 00000D41 75B4                        jne .comWriteErrorCode
  1253 00000D43 66C743030000                mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
  1254 00000D49 EBB2                        jmp short .comExit
  1255                                  
  1256                                  .comNondestructiveRead:
  1257                                  ;Acts like a "read one character if there is one" function
  1258 00000D4B B005                        mov al, 05h ;Bad request structure length?
  1259 00000D4D 803B0E                      cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
  1260 00000D50 75A5                        jne .comWriteErrorCode
  1261                                  .cndr1:
  1262 00000D52 B802000000                  mov eax, 02h    ;Recieve 
  1263 00000D57 8A15B1000000                mov dl, byte [.comDevice]    ;Get transacting com device
  1264 00000D5D 6698                        cbw     ;Zero extend to upper byte
  1265 00000D5F CD34                        int 34h ;Recieve Char
  1266 00000D61 0F8273FFFFFF                jc .comErrorNoCount ;Dont save a char transfer number
  1267 00000D67 80FC80                      cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
  1268 00000D6A 7405                        je .cndr2
  1269 00000D6C 88430D                      mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Get next char
  1270 00000D6F EB8C                        jmp short .comExit
  1271                                  .cndr2:
  1272 00000D71 66C743030002                mov word [rbx + nonDestInNoWaitReqPkt.status], 200h ;Busy bit set
  1273 00000D77 EB84                        jmp short .comExit
  1274                                  
  1275                                  .comFlushInputBuffers:
  1276 00000D79 B005                        mov al, 05h ;Bad request structure length?
  1277 00000D7B 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
  1278 00000D7E 0F8573FFFFFF                jne .comWriteErrorCode
  1279                                  .cfib0:
  1280 00000D84 8A1584000000                mov dl, byte [.comDevice]
  1281 00000D8A 6698                        cbw
  1282 00000D8C B802000000                  mov eax, 02h    ;Recieve
  1283 00000D91 CD34                        int 34h
  1284 00000D93 0F8241FFFFFF                jc .comErrorNoCount
  1285 00000D99 80FC80                      cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
  1286 00000D9C 75E6                        jne .cfib0
  1287 00000D9E E95AFFFFFF                  jmp .comExit
  1288                                  
  1289                                  .comWrite:
  1290 00000DA3 B005                        mov al, 05h ;Bad request structure length?
  1291 00000DA5 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1292 00000DA8 0F8549FFFFFF                jne .comWriteErrorCode
  1293                                  
  1294 00000DAE 488B730E                    mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
  1295 00000DB2 31C9                        xor ecx, ecx    ;Zero the char counter
  1296                                  .cw1: 
  1297 00000DB4 3B4B16                      cmp ecx, dword [rbx + ioReqPkt.tfrlen]
  1298 00000DB7 7417                        je .cw2
  1299 00000DB9 AC                          lodsb   ;Get char into al, and inc rsi
  1300 00000DBA B401                        mov ah, 01h ;Move function number into ah
  1301 00000DBC 8A154C000000                mov dl, byte [.comDevice]
  1302 00000DC2 6698                        cbw     ;Zero extend to upper byte
  1303 00000DC4 CD34                        int 34h ;Transmit char
  1304 00000DC6 0F821CFFFFFF                jc .comError
  1305 00000DCC FFC1                        inc ecx
  1306 00000DCE EBE4                        jmp short .cw1 ;keep printing until all chars printed
  1307                                  .cw2:
  1308 00000DD0 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
  1309 00000DD3 E925FFFFFF                  jmp .comExit
  1310                                  
  1311                                  .comOutputStatus:
  1312                                  ;Read MODEM status
  1313 00000DD8 B005                        mov al, 05h ;Bad request structure length?
  1314 00000DDA 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
  1315 00000DDD 0F8514FFFFFF                jne .comWriteErrorCode
  1316                                  
  1317 00000DE3 8A1525000000                mov dl, byte [.comDevice]
  1318 00000DE9 6698                        cbw     ;Zero extend to upper byte
  1319 00000DEB B403                        mov ah, 03h     ;Get status
  1320 00000DED CD34                        int 34h
  1321 00000DEF 0F82E5FEFFFF                jc .comErrorNoCount
  1322 00000DF5 2510000000                  and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
  1323 00000DFA C1E005                      shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
  1324 00000DFD F7D0                        not eax      ;Bitwise inversion
  1325 00000DFF 2500020000                  and eax, 200h   ;Isolate bit 9
  1326 00000E04 6689441B03                  mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
  1327 00000E09 E9EFFEFFFF                  jmp .comExit
  1328 00000E0E 00                      .comDevice   db 0
  1329                                  
  1330                                  msdDriver:
  1331 00000E0F 50                          push rax
  1332 00000E10 53                          push rbx
  1333 00000E11 51                          push rcx
  1334 00000E12 52                          push rdx
  1335 00000E13 56                          push rsi
  1336 00000E14 57                          push rdi
  1337 00000E15 55                          push rbp
  1338 00000E16 4150                        push r8
  1339 00000E18 488B1DB3FBFFFF              mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
  1340 00000E1F 807B0218                    cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
  1341 00000E23 B003                        mov al, 03h
  1342 00000E25 0F87F9000000                ja .msdWriteErrorCode ;If yes, error!
  1343 00000E2B B001                        mov al, 01h ;Unknown Unit Error
  1344 00000E2D 807B0105                    cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
  1345 00000E31 0F87ED000000                ja .msdWriteErrorCode ;If yes, error!
  1346 00000E37 8A4302                      mov al, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
  1347 00000E3A 84C0                        test al, al
  1348 00000E3C 0F84F8000000                jz .msdInit
  1349 00000E42 3C01                        cmp al, 01
  1350 00000E44 0F8496010000                jz .msdMedChk
  1351 00000E4A 3C02                        cmp al, 02
  1352 00000E4C 0F84FF010000                jz .msdBuildBPB
  1353 00000E52 3C03                        cmp al, 03
  1354 00000E54 0F8465020000                jz .msdIOCTLRead
  1355 00000E5A 3C04                        cmp al, 04
  1356 00000E5C 0F846D020000                jz .msdRead
  1357 00000E62 3C08                        cmp al, 08
  1358 00000E64 0F84A1020000                jz .msdWrite
  1359 00000E6A 3C09                        cmp al, 09
  1360 00000E6C 0F84D5020000                jz .msdWriteVerify
  1361 00000E72 3C0C                        cmp al, 12
  1362 00000E74 0F8416030000                jz .msdIOCTLWrite
  1363 00000E7A 3C0D                        cmp al, 13
  1364 00000E7C 0F841E030000                jz .msdDevOpen
  1365 00000E82 3C0E                        cmp al, 14
  1366 00000E84 0F8431030000                jz .msdDevClose
  1367 00000E8A 3C0F                        cmp al, 15
  1368 00000E8C 0F8444030000                jz .msdRemovableMedia
  1369 00000E92 3C13                        cmp al, 19
  1370 00000E94 0F8465030000                jz .msdGenericIOCTL
  1371 00000E9A 3C17                        cmp al, 23
  1372 00000E9C 0F846D030000                jz .msdGetLogicalDev
  1373 00000EA2 3C18                        cmp al, 24
  1374 00000EA4 0F847E030000                jz .msdSetLogicalDev
  1375 00000EAA EB7E                        jmp short .msdDriverExit    ;All other valid functions exit done
  1376                                  .msdIOError:  ;In Read and Write errors, rbp points to the dev struc
  1377 00000EAC 4889EB                      mov rbx, rbp
  1378 00000EAF 0FB6C0                      movzx eax, al   ;Number of IO-ed sectors in last request
  1379 00000EB2 01C6                        add esi, eax    ;esi Keeps sector count across transfers
  1380 00000EB4 897316                      mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
  1381                                  ;Now fall through to general error
  1382                                  .msdGenDiskError:
  1383 00000EB7 B401                        mov ah, 01h
  1384 00000EB9 30D2                        xor dl, dl  ;Work around bug that fails request if dl > 7Fh
  1385 00000EBB CD33                        int 33h ;Read status of last operation
  1386 00000EBD 80FC06                      cmp ah, 06h ;Mock Seek response (device not present)
  1387 00000EC0 B002                        mov al, 02h ;Give device not ready error (sensibly I think)
  1388 00000EC2 7460                        je .msdWriteErrorCode 
  1389 00000EC4 B00C                        mov al, 0Ch ;Preliminary General Error Faults
  1390 00000EC6 80FCFF                      cmp ah, -1  ;Sense operation failed
  1391 00000EC9 7459                        je .msdWriteErrorCode 
  1392 00000ECB 80FC20                      cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
  1393 00000ECE 7454                        je .msdWriteErrorCode
  1394                                  ;Device Not Ready
  1395 00000ED0 B002                        mov al, 02h  ;Device not ready code
  1396 00000ED2 4138C0                      cmp r8b, al  ;SCSI Not ready commands start with 2
  1397 00000ED5 744D                        je .msdWriteErrorCode
  1398 00000ED7 49C1E808                    shr r8, 8       ;Remove Sense Key
  1399 00000EDB 410FB7C8                    movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
  1400                                  ;Write Protected
  1401 00000EDF 30C0                        xor al, al
  1402 00000EE1 6681F92700                  cmp cx, 0027h   ;Write protected error
  1403 00000EE6 743C                        je .msdWriteErrorCode
  1404                                  ;CRC Error
  1405 00000EE8 B004                        mov al, 04h     ;CRC error code
  1406 00000EEA 6681F90803                  cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
  1407 00000EEF 7433                        je .msdWriteErrorCode
  1408 00000EF1 6681F91000                  cmp cx, 0010h   ;ID CRC or ECC error
  1409 00000EF6 742C                        je .msdWriteErrorCode
  1410 00000EF8 6681F94701                  cmp cx, 0147h   ;Data phase CRC error detected
  1411 00000EFD 7425                        je .msdWriteErrorCode
  1412                                  ;Seek Error
  1413 00000EFF B006                        mov al, 06h     ;Seek error code
  1414 00000F01 80F902                      cmp cl, 02h     ;No Seek Complete
  1415 00000F04 741E                        je .msdWriteErrorCode
  1416                                  ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
  1417                                  ;This error should only be called if BPB not recognised for Flash Drives
  1418 00000F06 B007                        mov al, 07h
  1419 00000F08 80F930                      cmp cl, 30h   ;All issues with media returns unknown media
  1420 00000F0B 7417                        je .msdWriteErrorCode
  1421                                  ;Sector Not Found
  1422 00000F0D B008                        mov al, 08h     ;Sector not found code
  1423 00000F0F 80F921                      cmp cl, 21h     ;Illegal Request - Invalid LBA
  1424 00000F12 7410                        je .msdWriteErrorCode
  1425                                  ;Write faults
  1426 00000F14 B00A                        mov al, 0Ah     ;Write fault
  1427 00000F16 80F90C                      cmp cl, 0Ch     ;Write Error ASC code
  1428 00000F19 7409                        je .msdWriteErrorCode
  1429                                  ;Read faults
  1430 00000F1B B00B                        mov al, 0Bh     ;Read fault
  1431 00000F1D 80F911                      cmp cl, 11h     ;Read error
  1432 00000F20 7402                        je .msdWriteErrorCode
  1433                                  ;General Errors
  1434 00000F22 B00C                        mov al, 0Ch     ;Everything else is general error
  1435                                  .msdWriteErrorCode:    ;Jump to with al=Standard Error code
  1436 00000F24 B480                        mov ah, 80h ;Set error bit
  1437 00000F26 66894303                    mov word [rbx + drvReqHdr.status], ax
  1438                                  .msdDriverExit:
  1439 00000F2A 66814B030001                or word [rbx + drvReqHdr.status], 0100h ;Set done bit
  1440 00000F30 4158                        pop r8
  1441 00000F32 5D                          pop rbp
  1442 00000F33 5F                          pop rdi
  1443 00000F34 5E                          pop rsi
  1444 00000F35 5A                          pop rdx
  1445 00000F36 59                          pop rcx
  1446 00000F37 5B                          pop rbx
  1447 00000F38 58                          pop rax
  1448 00000F39 C3                          ret
  1449                                  .msdInit:            ;Function 0
  1450 00000F3A B005                        mov al, 05h ;Bad request structure length
  1451 00000F3C 803B1F                      cmp byte [rbx + drvReqHdr.hdrlen], initReqPkt_size
  1452 00000F3F 75E3                        jne .msdWriteErrorCode
  1453                                  
  1454 00000F41 4151                        push r9
  1455 00000F43 CD31                        int 31h ;Get number of Int 33h devices in r8b
  1456 00000F45 4159                        pop r9
  1457 00000F47 4D0FB6C0                    movzx r8, r8b   ;Keeps real count
  1458 00000F4B 4489C0                      mov eax, r8d
  1459 00000F4E 3C01                        cmp al, 1
  1460 00000F50 7702                        ja .mi1
  1461 00000F52 FEC0                        inc al ;Make it two
  1462                                  .mi1:
  1463 00000F54 BA05000000                  mov edx, 5
  1464 00000F59 39D0                        cmp eax, edx
  1465 00000F5B 0F47C2                      cmova eax, edx  ;If num of drives is greater than 5, consider only first 5
  1466 00000F5E 880570F9FFFF                mov byte [msdHdr + drvHdr.drvNam], al ;Save num of drvs in drvr hdr
  1467 00000F64 88430D                      mov byte [rbx + initReqPkt.numunt], al ;And in req packet
  1468 00000F67 440005(A9000000)            add byte [numMSDdrv], r8b ;Add the true number of devices to total
  1469 00000F6E 31ED                        xor ebp, ebp    ;Use bpl as device counter, cmp to r8b
  1470 00000F70 488D3D20030000              lea rdi, qword [.msdBPBblks]
  1471 00000F77 53                          push rbx
  1472                                  .mi2:
  1473 00000F78 89EA                        mov edx, ebp
  1474 00000F7A 488D1D6E050000              lea rbx, qword [driverDataPtr]  ;Get effective address of scratch space
  1475 00000F81 31C9                        xor ecx, ecx    ;Sector 0
  1476 00000F83 B801820000                  mov eax, 8201h       ;Read 1 sector
  1477 00000F88 CD33                        int 33h
  1478 00000F8A 724E                        jc .msdInitError
  1479                                  
  1480 00000F8C 488D355C050000              lea rsi, qword [driverDataPtr]  ;Point to start of data
  1481 00000F93 B90F000000                  mov ecx, bpbEx_size/8
  1482 00000F98 F348A5                      rep movsq   ;Move the BPB data into the right block
  1483                                  
  1484 00000F9B FFC5                        inc ebp
  1485 00000F9D 4C39C5                      cmp rbp, r8 ;Have we written the BPB for all physical drives?
  1486 00000FA0 75D6                        jne .mi2  ;No? Go again
  1487                                  
  1488 00000FA2 488D3DC6020000              lea rdi, qword [.msdBPBTbl]  ;Point to start of table
  1489 00000FA9 488D15E7020000              lea rdx, qword [.msdBPBblks]
  1490                                  .mi3:
  1491 00000FB0 488917                      mov qword [rdi], rdx   ;Move the block entry ptr to rdi
  1492 00000FB3 4881C278000000              add rdx, bpbEx_size      ;Make rdx point to the next block entry
  1493 00000FBA FFCD                        dec ebp
  1494 00000FBC 75F2                        jnz .mi3  ;If not zero yet, go again
  1495                                  
  1496 00000FBE 5B                          pop rbx
  1497 00000FBF 488D15A9020000              lea rdx, qword [.msdBPBTbl]  ;Get far pointer 
  1498 00000FC6 48895316                    mov qword [rbx + initReqPkt.optptr], rdx  ;Save ptr to array
  1499 00000FCA 488D151E050000              lea rdx, qword [driverDataPtr]
  1500 00000FD1 4889530E                    mov qword [rbx + initReqPkt.endptr], rdx    ;Save free space ptr
  1501 00000FD5 E950FFFFFF                  jmp .msdDriverExit
  1502                                  .msdInitError:
  1503 00000FDA 5B                          pop rbx
  1504 00000FDB E94AFFFFFF                  jmp .msdDriverExit
  1505                                  .msdMedChk:          ;Function 1
  1506                                  ;Once the BIOS function is implmented that reads the changeline, use that!
  1507                                  ;For BIOSes that dont support the changeline, the following procedure will 
  1508                                  ; suffice.
  1509 00000FE0 B005                        mov al, 05h ;Bad request structure length
  1510 00000FE2 803B17                      cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
  1511 00000FE5 0F8539FFFFFF                jne .msdWriteErrorCode
  1512                                  
  1513 00000FEB 480FB64301                  movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
  1514 00000FF0 8A90[65120000]              mov dl, byte [.msdBIOSmap + rax]    ;Translate unitnum to BIOS num
  1515 00000FF6 F6C280                      test dl, 80h    ;If it is a fixed disk, no change!
  1516 00000FF9 754D                        jnz .mmcNoChange
  1517                                  ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
  1518 00000FFB B416                        mov ah, 16h 
  1519 00000FFD CD33                        int 33h
  1520 00000FFF 0F82B2FEFFFF                jc .msdGenDiskError
  1521 00001005 80FC80                      cmp ah, 80h
  1522 00001008 740E                        je .mmcNoChangeLine
  1523 0000100A 80FC86                      cmp ah, 86h
  1524 0000100D 7409                        je .mmcNoChangeLine
  1525 0000100F 84E4                        test ah, ah ;No change?
  1526 00001011 7435                        jz .mmcNoChange
  1527 00001013 F6C401                      test ah, 1  ;Neither 80h or 86h have bit 0 set
  1528 00001016 7513                        jnz .mmcChange
  1529                                  ;If nothing, fall through and test manually, should never happen though
  1530                                  .mmcNoChangeLine:
  1531                                  ;Now we test Media Descriptor
  1532 00001018 8A530D                      mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
  1533 0000101B 488B3CC5[6F120000]          mov rdi, qword [.msdBPBTbl + 8*rax]
  1534 00001023 488B3F                      mov rdi, qword [rdi]    ;Dereference rdi
  1535 00001026 385715                      cmp byte [rdi + bpb32.media], dl    ;Compare media descriptor bytes
  1536 00001029 7414                        je .mmcUnsure
  1537                                  .mmcChange:
  1538 0000102B C6430EFF                    mov byte [rbx + mediaCheckReqPkt.medret], -1
  1539 0000102F 488D0525020000              lea rax, qword [.msdDefLabel]           ;Temp, ret def label
  1540 00001036 4889430F                    mov qword [rbx + mediaCheckReqPkt.desptr], rax 
  1541 0000103A E9EBFEFFFF                  jmp .msdDriverExit
  1542                                  .mmcUnsure:
  1543 0000103F C6430E00                    mov byte [rbx + mediaCheckReqPkt.medret], 0
  1544 00001043 E9E2FEFFFF                  jmp .msdDriverExit
  1545                                  .mmcNoChange:
  1546 00001048 C6430E01                    mov byte [rbx + mediaCheckReqPkt.medret], 1
  1547 0000104C E9D9FEFFFF                  jmp .msdDriverExit
  1548                                  
  1549                                  .msdBuildBPB:        ;Function 2
  1550 00001051 B005                        mov al, 05h ;Bad request structure length
  1551 00001053 803B1E                      cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
  1552 00001056 0F85C8FEFFFF                jne .msdWriteErrorCode
  1553                                  
  1554 0000105C 4889DE                      mov rsi, rbx
  1555 0000105F 480FB64601                  movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
  1556 00001064 8A90[65120000]              mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req
  1557 0000106A 488B5E0E                    mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
  1558 0000106E 31C9                        xor ecx, ecx    ;Read Sector 0
  1559 00001070 B801820000                  mov eax, 8201h  ;LBA Read 1 sector
  1560 00001075 CD33                        int 33h
  1561 00001077 0F823AFEFFFF                jc .msdGenDiskError
  1562                                  ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
  1563 0000107D 807B15F0                    cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
  1564 00001081 7418                        je .mbbpb0
  1565 00001083 807B15F8                    cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
  1566 00001087 7412                        je .mbbpb0
  1567 00001089 807B15F9                    cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
  1568 0000108D 740C                        je .mbbpb0
  1569 0000108F 807B15FC                    cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
  1570 00001093 B007                        mov al, 07h ;Unknown media error code
  1571 00001095 0F8289FEFFFF                jb .msdWriteErrorCode
  1572                                  .mbbpb0:
  1573 0000109B 4887DE                      xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
  1574 0000109E 480FB64301                  movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
  1575 000010A3 488B3CC5[6F120000]          mov rdi, qword [.msdBPBTbl + 8*rax] ;Get pointer to pointer to buffer
  1576 000010AB 488B3F                      mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
  1577 000010AE 48897B16                    mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
  1578 000010B2 B90F000000                  mov ecx, bpbEx_size/8
  1579 000010B7 F348A5                      rep movsq   ;Move the BPB data into the right space
  1580 000010BA E96BFEFFFF                  jmp .msdDriverExit
  1581                                  .msdIOCTLRead:       ;Function 3, returns done
  1582 000010BF B005                        mov al, 05h ;Bad request structure length
  1583 000010C1 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1584 000010C4 0F855AFEFFFF                jne .msdWriteErrorCode
  1585                                  
  1586 000010CA E95BFEFFFF                  jmp .msdDriverExit
  1587                                  .msdRead:            ;Function 4
  1588                                  ;Will read one sector at a time.
  1589 000010CF B005                        mov al, 05h ;Bad request structure length
  1590 000010D1 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1591 000010D4 0F854AFEFFFF                jne .msdWriteErrorCode
  1592                                  
  1593 000010DA 4889DD                      mov rbp, rbx
  1594 000010DD 31F6                        xor esi, esi  ;Set sector read counter to zero
  1595                                  .msdr0:
  1596 000010DF B682                        mov dh, 82h ;LBA Read Sectors
  1597 000010E1 E85B010000                  call .msdBlkIOCommon
  1598 000010E6 0F82C0FDFFFF                jc .msdIOError
  1599 000010EC 4881451A00020000            add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
  1600 000010F4 4881450E00020000            add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
  1601 000010FC FFC6                        inc esi
  1602 000010FE 3B7516                      cmp esi, dword [rbp + ioReqPkt.tfrlen]
  1603 00001101 75DC                        jne .msdr0
  1604 00001103 4889EB                      mov rbx, rbp
  1605 00001106 E91FFEFFFF                  jmp .msdDriverExit
  1606                                  .msdWrite:           ;Function 8
  1607                                  ;Will write one sector at a time.
  1608 0000110B B005                        mov al, 05h ;Bad request structure length
  1609 0000110D 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1610 00001110 0F850EFEFFFF                jne .msdWriteErrorCode
  1611                                  
  1612 00001116 4889DD                      mov rbp, rbx
  1613 00001119 31F6                        xor esi, esi  ;Set counter to zero
  1614                                  .msdw0:
  1615 0000111B B683                        mov dh, 83h ;LBA Write Sectors
  1616 0000111D E81F010000                  call .msdBlkIOCommon
  1617 00001122 0F8284FDFFFF                jc .msdIOError
  1618 00001128 4881451A00020000            add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
  1619 00001130 4881450E00020000            add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
  1620 00001138 FFC6                        inc esi
  1621 0000113A 3B7516                      cmp esi, dword [rbp + ioReqPkt.tfrlen]
  1622 0000113D 75DC                        jne .msdw0
  1623 0000113F 4889EB                      mov rbx, rbp
  1624 00001142 E9E3FDFFFF                  jmp .msdDriverExit
  1625                                  .msdWriteVerify:     ;Function 9, writes sectors then verifies them
  1626                                  ;Will write one sector at a time and then verify it.
  1627 00001147 B005                        mov al, 05h ;Bad request structure length
  1628 00001149 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1629 0000114C 0F85D2FDFFFF                jne .msdWriteErrorCode
  1630                                  
  1631 00001152 4889DD                      mov rbp, rbx
  1632 00001155 31F6                        xor esi, esi  ;Set counter to zero
  1633                                  .msdwv0:
  1634 00001157 B683                        mov dh, 83h ;LBA Write Sectors
  1635 00001159 E8E3000000                  call .msdBlkIOCommon
  1636 0000115E 0F8248FDFFFF                jc .msdIOError    ;Error handler needs to add to esi the value in al
  1637 00001164 B684                        mov dh, 84h ;LBA Verify Sectors
  1638 00001166 E8D6000000                  call .msdBlkIOCommon
  1639 0000116B 0F823BFDFFFF                jc .msdIOError    ;Error handler needs to add to esi the value in al
  1640 00001171 4881451A00020000            add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
  1641 00001179 4881450E00020000            add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
  1642 00001181 FFC6                        inc esi
  1643 00001183 3B7516                      cmp esi, dword [rbp + ioReqPkt.tfrlen]
  1644 00001186 75CF                        jne .msdwv0
  1645 00001188 4889EB                      mov rbx, rbp
  1646 0000118B E99AFDFFFF                  jmp .msdDriverExit
  1647                                  .msdIOCTLWrite:      ;Function 12, returns done
  1648 00001190 B005                        mov al, 05h ;Bad request structure length
  1649 00001192 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1650 00001195 0F8589FDFFFF                jne .msdWriteErrorCode
  1651                                  
  1652 0000119B E98AFDFFFF                  jmp .msdDriverExit
  1653                                  .msdDevOpen:         ;Function 13
  1654 000011A0 B005                        mov al, 05h ;Bad request structure length
  1655 000011A2 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
  1656 000011A5 0F8579FDFFFF                jne .msdWriteErrorCode
  1657                                  
  1658 000011AB 480FB64301                  movzx rax, byte [rbx + openReqPkt.unitnm]
  1659 000011B0 FE80[6A120000]              inc byte [.msdHdlCnt + rax]  ;Inc handle cnt for given unit
  1660 000011B6 E96FFDFFFF                  jmp .msdDriverExit
  1661                                  .msdDevClose:        ;Function 14
  1662 000011BB B005                        mov al, 05h ;Bad request structure length
  1663 000011BD 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
  1664 000011C0 0F855EFDFFFF                jne .msdWriteErrorCode
  1665                                  
  1666 000011C6 480FB64301                  movzx rax, byte [rbx + closeReqPkt.unitnm]
  1667 000011CB FE88[6A120000]              dec byte [.msdHdlCnt + rax]  ;Dec handle cnt for given unit
  1668 000011D1 E954FDFFFF                  jmp .msdDriverExit
  1669                                  .msdRemovableMedia:  ;Function 15
  1670 000011D6 B005                        mov al, 05h ;Bad request structure length
  1671 000011D8 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
  1672 000011DB 0F8543FDFFFF                jne .msdWriteErrorCode
  1673                                  
  1674 000011E1 480FB64301                  movzx rax, byte [rbx + remMediaReqPkt.unitnm]
  1675 000011E6 8A80[65120000]              mov al, byte [.msdBIOSmap + rax]    ;Get BIOS number
  1676 000011EC A880                        test al, 80h
  1677 000011EE 0F8436FDFFFF                jz .msdDriverExit   ;If removable, busy bit is clear
  1678 000011F4 66C743030002                mov word [rbx + remMediaReqPkt.status], 0200h ;Set Busy bit
  1679 000011FA E92BFDFFFF                  jmp .msdDriverExit
  1680                                  .msdGenericIOCTL:    ;Function 19
  1681 000011FF B005                        mov al, 05h ;Bad request structure length
  1682 00001201 803B27                      cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
  1683 00001204 0F851AFDFFFF                jne .msdWriteErrorCode
  1684                                  
  1685 0000120A E91BFDFFFF                  jmp .msdDriverExit
  1686                                  .msdGetLogicalDev:   ;Function 23
  1687 0000120F B005                        mov al, 05h ;Bad request structure length
  1688 00001211 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
  1689 00001214 0F850AFDFFFF                jne .msdWriteErrorCode
  1690                                  
  1691 0000121A 8A0544000000                mov al, byte [.msdCurDev]
  1692 00001220 884301                      mov byte [rbx + getDevReqPkt.unitnm], al
  1693 00001223 E902FDFFFF                  jmp .msdDriverExit
  1694                                  .msdSetLogicalDev:   ;Function 24
  1695 00001228 B005                        mov al, 05h ;Bad request structure length
  1696 0000122A 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
  1697 0000122D 0F85F1FCFFFF                jne .msdWriteErrorCode
  1698                                  
  1699 00001233 8A4301                      mov al, byte [rbx + getDevReqPkt.unitnm]
  1700 00001236 880528000000                mov byte [.msdCurDev], al
  1701 0000123C E9E9FCFFFF                  jmp .msdDriverExit
  1702                                  
  1703                                  .msdBlkIOCommon:  ;Does block IO
  1704                                  ;Called with rbp containing old rbx value and ah with function number
  1705                                  ;Error handled by caller
  1706                                  ;Sector count handled by caller
  1707                                  ;Called with dh = BIOS function number
  1708 00001241 480FB64501                  movzx rax, byte [rbp + ioReqPkt.unitnm]
  1709 00001246 8A90[65120000]              mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
  1710 0000124C 488B4D1A                    mov rcx, qword [rbp + ioReqPkt.strtsc]  ;Get start sector
  1711 00001250 488B5D0E                    mov rbx, qword [rbp + ioReqPkt.bufptr]  ;Get Memory Buffer
  1712 00001254 88F4                        mov ah, dh
  1713 00001256 B001                        mov al, 01h ;Do one sector at a time 
  1714 00001258 CD33                        int 33h
  1715 0000125A C3                          ret
  1716                                  
  1717 0000125B 4E4F204E414D452000      .msdDefLabel db "NO NAME ",0 ;Default volume label
  1718                                  ;LASTDRIVE default is 5
  1719 00001264 00                      .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
  1720                                  ; Except when single drive in use, in which case Drive A and B refer to device 0
  1721 00001265 0000000000              .msdBIOSmap  db 5 dup (0)    ;Translates DOS drive number to BIOS number
  1722 0000126A 0000000000              .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
  1723 0000126F 000000000000000000-     .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
  1723 00001278 000000000000000000-
  1723 00001281 000000000000000000-
  1723 0000128A 000000000000000000-
  1723 00001293 00000000           
  1724 00001297 000000000000000000-     .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
  1724 000012A0 000000000000000000-
  1724 000012A9 000000000000000000-
  1724 000012B2 000000000000000000-
  1724 000012BB 000000000000000000-
  1724 000012C4 000000000000000000-
  1724 000012CD 000000000000000000-
  1724 000012D6 000000000000000000-
  1724 000012DF 000000000000000000-
  1724 000012E8 000000000000000000-
  1724 000012F1 000000000000000000-
  1724 000012FA 000000000000000000-
  1724 00001303 000000000000000000-
  1724 0000130C 000000000000000000-
  1724 00001315 000000000000000000-
  1724 0000131E 000000000000000000-
  1724 00001327 000000000000000000-
  1724 00001330 000000000000000000-
  1724 00001339 000000000000000000-
  1724 00001342 000000000000000000-
  1724 0000134B 000000000000000000-
  1724 00001354 000000000000000000-
  1724 0000135D 000000000000000000-
  1724 00001366 000000000000000000-
  1724 0000136F 000000000000000000-
  1724 00001378 000000000000000000-
  1724 00001381 000000000000000000-
  1724 0000138A 000000000000000000-
  1724 00001393 000000000000000000-
  1724 0000139C 000000000000000000-
  1724 000013A5 000000000000000000-
  1724 000013AE 000000000000000000-
  1724 000013B7 000000000000000000-
  1724 000013C0 000000000000000000-
  1724 000013C9 000000000000000000-
  1724 000013D2 000000000000000000-
  1724 000013DB 000000000000000000-
  1724 000013E4 000000000000000000-
  1724 000013ED 000000000000000000-
  1724 000013F6 000000000000000000-
  1724 000013FF 000000000000000000-
  1724 00001408 000000000000000000-
  1724 00001411 000000000000000000-
  1724 0000141A 000000000000000000-
  1724 00001423 000000000000000000-
  1724 0000142C 000000000000000000-
  1724 00001435 000000000000000000-
  1724 0000143E 000000000000000000-
  1724 00001447 000000000000000000-
  1724 00001450 000000000000000000-
  1724 00001459 000000000000000000-
  1724 00001462 000000000000000000-
  1724 0000146B 000000000000000000-
  1724 00001474 000000000000000000-
  1724 0000147D 000000000000000000-
  1724 00001486 000000000000000000-
  1724 0000148F 000000000000000000-
  1724 00001498 000000000000000000-
  1724 000014A1 000000000000000000-
  1724 000014AA 000000000000000000-
  1724 000014B3 000000000000000000-
  1724 000014BC 000000000000000000-
  1724 000014C5 000000000000000000-
  1724 000014CE 000000000000000000-
  1724 000014D7 000000000000000000-
  1724 000014E0 000000000000000000-
  1724 000014E9 000000000000       
  1725                                  
  1726                                  driverDataPtr:
