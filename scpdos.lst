     1                                  [map all scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  %include "driverStruc.inc"
     5                              <1> 
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     8                              <1> ; device driver related structures.                     ;
     9                              <1> ;-------------------------------------------------------;
    10                              <1> 
    11                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    12                              <1> 
    13 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    14 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    15 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    16 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    17 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    18                              <1> 
    19                              <1> endstruc
    20                              <1> 
    21                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    22                              <1> 
    23                              <1>     .hdrlen resb 1  ;Length of the request header
    24                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    25                              <1>     .cmdcde resb 1  ;Command code
    26                              <1>     .status resw 1  ;Status word
    27                              <1>     .devptr resq 1  ;Device queue pointer field
    28                              <1> 
    29                              <1> %endmacro
    30                              <1> 
    31                              <1> struc drvReqHdr
    32                              <1>     drvReqHdrM
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    33                              <1> endstruc
    34                              <1> 
    35                              <1> struc initReqPkt  ;Init Request Packet
    36                              <1> 
    37                              <1>     drvReqHdrM   ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    38 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
    39 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
    40 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
    41 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
    42                              <1> 
    43                              <1> endstruc
    44                              <1> 
    45                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
    46                              <1> 
    47                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    48 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    49 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
    50 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
    51                              <1> 
    52                              <1> endstruc
    53                              <1> 
    54                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
    55                              <1> 
    56                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    57 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    58 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    59 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
    60                              <1> 
    61                              <1> endstruc
    62                              <1> 
    63                              <1> struc ioReqPkt   ;IO Request Packet
    64                              <1> 
    65                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    66 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    67 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    68 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
    69 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
    70 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
    71                              <1> 
    72                              <1> endstruc
    73                              <1> 
    74                              <1> struc nonDestInNoWaitReqPkt    ;Nondestructive Input No Wait Request Packet
    75                              <1>     
    76                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    77 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
    78                              <1> 
    79                              <1> endstruc
    80                              <1> 
    81                              <1> struc statusReqPkt   ;Status Request Packet
    82                              <1> 
    83                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    84                              <1> 
    85                              <1> endstruc
    86                              <1> 
    87                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
    88                              <1> 
    89                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    90                              <1>      
    91                              <1> endstruc
    92                              <1> 
    93                              <1> struc openReqPkt ;Open Device Request Packet
    94                              <1> 
    95                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    96                              <1>      
    97                              <1> endstruc
    98                              <1> 
    99                              <1> struc closeReqPkt ;Close Device Request Packet
   100                              <1> 
   101                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   102                              <1>      
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   106                              <1> 
   107                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   108                              <1>      
   109                              <1> endstruc
   110                              <1> 
   111                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   112                              <1> 
   113                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   114 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   115 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   116 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   117 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   118 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   119                              <1> 
   120                              <1> endstruc
   121                              <1> 
   122                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   123                              <1>     
   124                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   125                              <1> 
   126                              <1> endstruc
   127                              <1> 
   128                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   129                              <1>     
   130                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   131                              <1> 
   132                              <1> endstruc
     5                                  %include "fatStruc.inc"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ; This include file contains miscellaneous FAT driver   ;
     9                              <1> ; structures. exFAT will have it's own files at a later ;
    10                              <1> ; stage.                                                ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    14                              <1> 
    15 00000000 ??????              <1>     .jmpBoot    resb 3 
    16 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    17 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    18 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    19 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    20 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    21 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    22 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    23 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    24 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    25 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    26 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    27 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    28 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    29                              <1> 
    30 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    31 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    32 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    33 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    34 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    35 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    40                              <1> 
    41 00000000 ??????              <1>     .jmpBoot    resb 3
    42 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    43 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    44 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    45 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    46 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    47 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    48 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    49 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    50 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    51 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    52 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    53 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    54 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    55                              <1> 
    56 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    57 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    58 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    59 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    60 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    61 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    62 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    63                              <1> 
    64 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    65 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    66 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    67 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    68 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    69 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    70                              <1> 
    71                              <1> endstruc
    72                              <1> 
    73                              <1> struc mbr
    74 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    75 000001B8 ????????            <1>     .diskID     resb 4
    76 000001BC ????                <1>     .reserved   resb 2
    77 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    78 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    79 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    80 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    81 000001FE ????                <1>     .mbrSig     resb 2
    82                              <1> endstruc
    83                              <1> 
    84                              <1> struc mbrEntry
    85 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    86 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    87 00000004 ??                  <1>     .ptnType    resb 1
    88 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
    89 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
    90 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
    91                              <1> endstruc
    92                              <1> 
    93                              <1> struc fatDirEntry
    94                              <1> 
    95 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
    96 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
    97 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
    98 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
    99 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   100 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   101 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   102 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   103 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   104 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   105 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   106 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   107                              <1> 
   108                              <1> endstruc
   109                              <1> ;Directory attribute equates
   110                              <1>     dirReadOnly     equ 01h
   111                              <1>     dirHidden       equ 02h
   112                              <1>     dirSystem       equ 04h
   113                              <1>     dirVolumeID     equ 08h
   114                              <1>     dirDirectory    equ 10h
   115                              <1>     dirArchive      equ 20h
   116                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   117                              <1> 
   118                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   119                              <1> 
   120 00000000 ??????              <1>     .jmpBoot                resb 3 
   121 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   122 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   123 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   124 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   125 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   126 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   127 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   128 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   129 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   130 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   131 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   132 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   133 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   134 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   135 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   136 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   137 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   138 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   139                              <1> 
   140                              <1> endstruc
   141                              <1> 
   142                              <1> struc FSInfo
   143                              <1> 
   144 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   145 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   146 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   147 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   148 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   149 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   150 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   151                              <1> 
   152                              <1> endstruc
     6                                  %include "dosStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous internal     ;
    10                              <1> ; SCP/DOS structures.                                   ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> ;------------------------------------------------------------------------;
    14                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    15                              <1> ; its file system structure. This is used to locate files and structures
    16                              <1> ; on the device itself and to translate file requests to cluster chains
    17                              <1> ; to LBAs to pass to the disk driver..
    18                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    19                              <1> ; drivers Initialise routine has been called.
    20                              <1> ;------------------------------------------------------------------------;
    21                              <1> struc dpb        ;Drive Parameter Block
    22                              <1> 
    23 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...)
    24 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device
    25 00000002 ??                  <1>     .bBytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
    26 00000003 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1
    27                              <1> ;                                       i.e. (2^bSectorsPerClusterShift) - 1
    28 00000004 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent
    29 00000005 ????????            <1>     .dFAToffset              resd 1  ;Vol rel offset of first FAT, in sectors
    30 00000009 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs
    31 0000000A ????                <1>     .wNumberRootDirEntries   resw 1  ;In sectors
    32 0000000C ????????            <1>     .dClusterHeapOffset      resd 1  ;Start of data area, in sectors
    33 00000010 ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters (volume size)
    34 00000014 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors
    35 00000018 ????????            <1>     .dFirstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
    36 0000001C ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header
    37 00000024 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor
    38 00000025 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1)
    39 00000026 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    40 0000002E ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search
    41 00000032 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown
    42                              <1> 
    43                              <1> endstruc
    44                              <1> 
    45                              <1> ;------------------------------------------------------------------------;
    46                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    47                              <1> ; All disk pathing requests go via the CDS for that drive.
    48                              <1> ; The default drive is the last accessed drive, this number is stored
    49                              <1> ; in the DOS data area.
    50                              <1> ; The CDS is stored as an array with the offset into the array being 
    51                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    52                              <1> ;
    53                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    54                              <1> ;------------------------------------------------------------------------;
    55                              <1> struc cds       ;Current Directory structure
    56 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    57 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    58 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    59 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    60 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    61 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    62                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    63                              <1> ; another, we save the number of chars to skip to that deep level).
    64                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    65                              <1> ; Flags: Bit 15 set = Network drive
    66                              <1> ;        Bit 14 set = Physical drive
    67                              <1> ;        Bit 13 set = JOIN'ed drive
    68                              <1> ;        Bit 12 set = SUBST'ed drive
    69                              <1> ;        Bit 7  set = Redirected, not network, drive (This is how MSCDEX worked)
    70                              <1> endstruc
    71                              <1> ;CDS equates
    72                              <1>     cdsNetDrive     equ 8000h
    73                              <1>     cdsPhysDrive    equ 4000h
    74                              <1>     cdsJoinDrive    equ 2000h
    75                              <1>     cdsSubstDrive   equ 1000h
    76                              <1>     cdsRedirDrive   equ 0080h
    77                              <1> ;------------------------------------------------------------------------;
    78                              <1> ; The SFT is a way to allow applications to open file handles to files 
    79                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    80                              <1> ; under the first header, and then a second header will be linked to the 
    81                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    82                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    83                              <1> ; using the FCBS= command. Default FCBS=5.
    84                              <1> ;
    85                              <1> ; A file handle describes the file, and the location within the file that
    86                              <1> ; we are reading. The file handle can be manipulated without the file
    87                              <1> ; being in memory, thus allowing the user to access data without needing 
    88                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    89                              <1> ; accessing devices, by treating them as files with their drivers 
    90                              <1> ; responding and translating the manipulations of the file handle itself.
    91                              <1> ; Neither the driver nor the application should see or use the SFT for
    92                              <1> ; the handle, as it is subject to change (and will change when file 
    93                              <1> ; sharing provisions are included). The DOS will make requests to the 
    94                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    95                              <1> ; track of the information in the SFT entry for that handle. 
    96                              <1> ;
    97                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    98                              <1> ; can point to the same file. It all depends on what the applications 
    99                              <1> ; want to do with the File.
   100                              <1> ;
   101                              <1> ; !!!!IMPORTANT!!!!
   102                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   103                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   104                              <1> ;
   105                              <1> ;Each SFT may look like this:
   106                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   107                              <1> ;            |                |
   108                              <1> ;       wNumFiles*sft    wNumFiles*sft
   109                              <1> ;
   110                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   111                              <1> ; System FCBs.
   112                              <1> ;
   113                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   114                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   115                              <1> ;
   116                              <1> ; DEFAULT FILES=15, MINIMUM FILES=5
   117                              <1> ; DEFAULT FCBS=5, MINIMUM FCBS=5
   118                              <1> ;------------------------------------------------------------------------;
   119                              <1> struc sfth   ;System file table header
   120                              <1> ; This is the SFT header.
   121                              <1> ; This structure comes before the start of the first file in the array/table.
   122 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   123 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc sft
   127                              <1> ;This is the file struc itself
   128 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   129 00000002 ????                <1>     .wOpenMode   resw 1    ;Bit 15 set if opened via FCB
   130 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   131 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   132 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   133 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file
   134 00000013 ????                <1>     .wTime       resw 1    ;File Time
   135 00000015 ????                <1>     .wDate       resw 1    ;File Date
   136 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   137 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset in file, in bytes
   138 0000001F ????                <1>     .wRelClust   resw 1    ;Rel cluster in file of the last cluster accessed
   139 00000021 ????????            <1>     .dDirSect    resd 1    ;Rel number of sector containing directory entry 
   140 00000025 ??                  <1>     .bNumDirEnt  resb 1    ;Number of dir entry within sector (byte offset/32)
   141 00000026 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   142 00000031 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   143 00000039 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster of last cluster accessed
   144                              <1> endstruc
   145                              <1> 
   146                              <1> ;------------------------------------------------------------------------;
   147                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   148                              <1> ; to an internal buffer, and then copying it to the specified location
   149                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   150                              <1> ; another request for the same sector from the same device is made, so 
   151                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   152                              <1> ; size, selected according to the largest detected sector size during 
   153                              <1> ; the initial loadup.
   154                              <1> ;
   155                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   156                              <1> ;
   157                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   158                              <1> ;------------------------------------------------------------------------;
   159                              <1> 
   160                              <1> struc bufferHdr
   161 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   162 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for
   163 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   164 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   165 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   166 00000013 ??                  <1>     .bufFAToff   resb  1   ;Sector offset of the backup copy of the FAT on disk
   167 00000014 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   168                              <1> endstruc
   169                              <1> 
   170                              <1> ;------------------------------------------------------------------------;
   171                              <1> ; Memory control block for each memory arena
   172                              <1> ;------------------------------------------------------------------------;
   173                              <1> struc mcb
   174 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   175 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP or 0 for free space
   176 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   177 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   178                              <1> endstruc
   179                              <1> 
   180                              <1> ;------------------------------------------------------------------------;
   181                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   182                              <1> ; following order, thus allowing for return values to be placed in the 
   183                              <1> ; registers by accessing the caller register stack frame.
   184                              <1> ;------------------------------------------------------------------------;
   185                              <1> struc callerFrame
   186 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   187 00000008 ????????????????    <1>     .rbx    resq 1    
   188 00000010 ????????????????    <1>     .rcx    resq 1
   189 00000018 ????????????????    <1>     .rdx    resq 1
   190 00000020 ????????????????    <1>     .rsi    resq 1
   191 00000028 ????????????????    <1>     .rdi    resq 1
   192 00000030 ????????????????    <1>     .rbp    resq 1
   193 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   194 00000040 ????????????????    <1>     .r9     resq 1
   195                              <1> ;Pushed by Processor when invoked via Interrupt
   196 00000048 ????????????????    <1>     .rip    resq 1
   197 00000050 ????????????????    <1>     .cs     resq 1
   198 00000058 ????????????????    <1>     .flags  resq 1
   199                              <1> endstruc
   200                              <1> 
   201                              <1> %macro pushDOS 0
   202                              <1>     push r9
   203                              <1>     push r8
   204                              <1>     push rbp
   205                              <1>     push rdi
   206                              <1>     push rsi
   207                              <1>     push rdx
   208                              <1>     push rcx
   209                              <1>     push rbx
   210                              <1>     push rax
   211                              <1> %endmacro
   212                              <1> 
   213                              <1> %macro popDOS 0
   214                              <1>     pop rax
   215                              <1>     pop rbx
   216                              <1>     pop rcx
   217                              <1>     pop rdx
   218                              <1>     pop rsi
   219                              <1>     pop rdi
   220                              <1>     pop rbp
   221                              <1>     pop r8
   222                              <1>     pop r9
   223                              <1> %endmacro
   224                              <1> 
   225                              <1> struc psp
   226 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h
   227 00000002 ????????????????    <1>     .startSeg   resq 1  ;Pointer to the start of the PSP
   228 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   229 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   230 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   231 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   232 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   233 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   234 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   235 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size
   236 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh
   237 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain
   238 0000005B ????????????????    <1>     .xtraHdlPtr resq 1  ;Pointer to the extra handle array if needed
   239 00000063 ????????????????    <1>     .fcbPtr1    resq 1  ;Pointer to the first OS allocated FCB
   240 0000006B <res 15h>           <1>     .reserved   resb 21
   241 00000080 ??                  <1>     .charCount  resb 1  ;Number of characters in command tail
   242 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   243                              <1> endstruc
   244                              <1> 
   245                              <1> struc mcb
   246 00000000 ??                  <1>     .mzbyte     resb 1  ;M=In use, Z=Free
   247 00000001 ????????????????    <1>     .processPtr resq 1  ;Points to the start of the process PSP
   248 00000009 ????????            <1>     .paragraphs resd 1  ;Gives the number of paras allocated to this process
   249 0000000D ??????              <1>     .reserved   resb 3
   250                              <1>     .program:
   251                              <1> endstruc
   252                              <1> 
   253                              <1> struc clkStruc
   254 00000000 ????                <1>     .dateWord   resw 1
   255 00000002 ??                  <1>     .minutes    resb 1
   256 00000003 ??                  <1>     .hours      resb 1
   257 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   258 00000005 ??                  <1>     .seconds    resb 1
   259                              <1> endstruc
     7                                  %include "dosSeg.asm"
     8                              <1> ;This file contains the main DOS data segment
     9                              <1> 
    10                              <1> Segment dSeg nobits align=1 start=0 
    11 00000000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    12 00000008 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    13 00000009 ??                  <1>     numMSDdrv   resb 1    ;Number of mass storage devices detected in system x
    14 0000000A ??                  <1>     numLDrives  resb 1    ;Number of logical drives in the system x
    15 0000000B ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    16 0000000C <res 2Ah>           <1>     charReqHdr  resb ioReqPkt_size  ;Character IO Request header x
    17 00000036 <res 2Ah>           <1>     diskReqHdr  resb ioReqPkt_size  ;Disk Action Request header x
    18                              <1>     ;The device driver header with space for the largest possible packet
    19 00000060 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    20                              <1> sysVarsPtr:
    21 00000068 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain
    22 00000070 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    23 00000078 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    24                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    25 00000080 ????????????????    <1>     conPtr      resq 1    ;Pointer to the current active CON device header  x
    26                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    27 00000088 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    28 0000008A ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain
    29 00000092 ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array
    30 0000009A ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    31 000000A2 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    32 000000A4 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    33 000000A5 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    34                              <1> 
    35                              <1> ;Start of Swappable Data Area, this bit can remain static
    36 000000C7 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h
    37 000000C8 ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving
    38 000000C9 ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh
    39 000000CA ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    40 000000CB ????                <1>     errorExt    resw 1  ;Extended Error Code
    41 000000CD ??                  <1>     errorAction resb 1  ;Suggested action for error  
    42 000000CE ??                  <1>     errorClass  resb 1  ;Error Class
    43                              <1> 
    44 000000CF ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA
    45 000000D7 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP
    46 000000DF ????????????????    <1>     rdiErrorPtr resq 1  ;Saves RDI value of last error (could make this dx)
    47 000000E7 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
    48 000000EF ????                <1>     lastRetCode resw 1  ;Last return code returned by Int 41h/4Ch
    49 000000F1 ??                  <1>     currentDrv  resb 1  ;Default, last accessed drive
    50 000000F2 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls
    51 000000F3 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify
    52                              <1> ;SDA, needs to be replaced between processes
    53 000000F4 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
    54                              <1> 
    55 000000FC ??                  <1>     Int44RetVal resb 1  ;Saves a copy of the Int 44 return value
    56 000000FD ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
    57 000000FE ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
    58 000000FF ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
    59 00000107 ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
    60 0000010F ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
    61                              <1> ;Time stuff
    62 00000117 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
    63 0000011D ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
    64 0000011E ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
    65 0000011F ??                  <1>     years       resb 1  ;00h - FFh (00 = 1980 - 128 = 2107)
    66 00000120 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
    67 00000122 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
    68                              <1> 
    69                              <1> ;Stacks
    70 00000123 <res 528h>          <1>     critStack   resq 165
    71 0000064B ????????????????    <1>     critStakTop resq 1
    72 00000653 <res 638h>          <1>     IOStack     resq 199
    73 00000C8B ????????????????    <1>     IOStakTop   resq 1
    74 00000C93 <res 638h>          <1>     DiskStack   resq 199
    75 000012CB ????????????????    <1>     DiskStakTop resq 1
    76                              <1>     dSegLen     equ     $
    77                              <1> 
    78                              <1> Segment dynamicDataArea nobits valign=1 vfollows=resSeg
    79                              <1> ;Create SFT header and corresponding array of five default sft entries
    80 00000000 <res Ah>            <1> firstSftHeader  resb sfth_size
    81 0000000A <res 3Dh>           <1> firstSft        resb sft_size
    82 00000047 <res 3Dh>           <1> secondSft       resb sft_size
    83 00000084 <res 3Dh>           <1> thirdSft        resb sft_size
    84 000000C1 <res 3Dh>           <1> fourthSft       resb sft_size
    85 000000FE <res 3Dh>           <1> fifthSft        resb sft_size
    86                              <1> 
    87                              <1> 
    88 0000013B <res 200h>          <1> msdTempBuffer   resb 512    ;Reserve one sectors worth of space
    89                              <1> dynamicDataAreaLength equ $
     8                                  %include "sysInit.asm"
     9                              <1> Segment .text align=1
    10                              <1> ; We arrive here with the following values in the registers.
    11                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    12                              <1> ; dx  = Int 33h boot device number
    13                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    14                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    15 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    16 00000002 909090909090909090- <1>     db (100h-2) dup (90h)   ;Duplicate NOPs for the PSP
    16 0000000B 909090909090909090- <1>
    16 00000014 909090909090909090- <1>
    16 0000001D 909090909090909090- <1>
    16 00000026 909090909090909090- <1>
    16 0000002F 909090909090909090- <1>
    16 00000038 909090909090909090- <1>
    16 00000041 909090909090909090- <1>
    16 0000004A 909090909090909090- <1>
    16 00000053 909090909090909090- <1>
    16 0000005C 909090909090909090- <1>
    16 00000065 909090909090909090- <1>
    16 0000006E 909090909090909090- <1>
    16 00000077 909090909090909090- <1>
    16 00000080 909090909090909090- <1>
    16 00000089 909090909090909090- <1>
    16 00000092 909090909090909090- <1>
    16 0000009B 909090909090909090- <1>
    16 000000A4 909090909090909090- <1>
    16 000000AD 909090909090909090- <1>
    16 000000B6 909090909090909090- <1>
    16 000000BF 909090909090909090- <1>
    16 000000C8 909090909090909090- <1>
    16 000000D1 909090909090909090- <1>
    16 000000DA 909090909090909090- <1>
    16 000000E3 909090909090909090- <1>
    16 000000EC 909090909090909090- <1>
    16 000000F5 909090909090909090- <1>
    16 000000FE 9090                <1>
    17                              <1> ;First make space for the MCB
    18 00000100 52                  <1>     push rdx    ;Save dl on stack briefly
    19 00000101 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    20 00000106 0F32                <1>     rdmsr
    21 00000108 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    22 0000010A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    23 0000010E 89C7                <1>     mov edi, eax        ;Get the low dword in
    24 00000110 4881C710000000      <1>     add rdi, mcb_size   ;Make space for the MCB
    25 00000117 89F8                <1>     mov eax, edi
    26 00000119 4889FA              <1>     mov rdx, rdi
    27 0000011C 48C1EA20            <1>     shr rdx, 20h
    28 00000120 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    29 00000122 5A                  <1>     pop rdx
    30                              <1> ;------------------------------------------------;
    31                              <1> ;           Sanitise the data area               ;
    32                              <1> ;------------------------------------------------;
    33 00000123 B9[D3120000]        <1>     mov ecx, dSegLen
    34 00000128 30C0                <1>     xor al, al
    35 0000012A 57                  <1>     push rdi    ;Temp save rdi on the stack
    36 0000012B F3AA                <1>     rep stosb
    37 0000012D 5F                  <1>     pop rdi
    38                              <1> 
    39                              <1> ;------------------------------------------------;
    40                              <1> ;          Start saving Basic DOS data           ;
    41                              <1> ;------------------------------------------------;
    42 0000012E 64881425[08000000]  <1>     mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    43 00000136 488D15C3FEFFFF      <1>     lea rdx, tempPSP    ;Get the address of the tempPSP
    44 0000013D 6448891425-         <1>     mov qword fs:[currentPSP], rdx
    44 00000142 [D7000000]          <1>
    45                              <1> ;Copy DOS to its final resting place
    46 00000146 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    46 0000014B [00000000]          <1>
    47 0000014F 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rdx 
    48 00000152 4881C7[D3120000]    <1>     add rdi, dSegLen ;Move destination past end of data area
    49 00000159 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    50 00000160 B900100000          <1>     mov ecx, 1000h
    51 00000165 F348A5              <1>     rep movsq
    52                              <1> 
    53 00000168 CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    54 0000016A 6444880425-         <1>     mov byte fs:[numMSDdrv], r8b    ;Save number of physical int 33h devs
    54 0000016F [09000000]          <1>
    55 00000173 64C60425[0B000000]- <1>     mov byte fs:[lastdrvNum], 5     ;Last drive is by default 5
    55 0000017B 05                  <1>
    56 0000017C 64C60425[0A000000]- <1>     mov byte fs:[numLDrives], 0     ;Number of logical drives
    56 00000184 00                  <1>
    57                              <1> 
    58                              <1> ;------------------------------------------------;
    59                              <1> ;          Find largest sector size              ;
    60                              <1> ;------------------------------------------------;
    61                              <1> largestSectorSearch:
    62 00000185 30D2                <1>     xor dl, dl
    63 00000187 31FF                <1>     xor edi, edi    ;Use this as the counter for the largest sector size
    64                              <1> .lss:
    65 00000189 B488                <1>     mov ah, 88h
    66 0000018B CD33                <1>     int 33h
    67 0000018D 39C7                <1>     cmp edi, eax
    68 0000018F 0F42F8              <1>     cmovb edi, eax  ;Only replace ebp if eax is greater
    69 00000192 FEC2                <1>     inc dl
    70 00000194 4438C2              <1>     cmp dl, r8b
    71 00000197 75F0                <1>     jne .lss
    72 00000199 6466893C25-         <1>     mov word fs:[maxBytesSec], di
    72 0000019E [88000000]          <1>
    73                              <1> 
    74                              <1> ;------------------------------------------------;
    75                              <1> ;          Driver Adjustments and inits          ;
    76                              <1> ;------------------------------------------------;
    77                              <1> ;Modify the pointers in nData before putting them in the data area
    78 000001A2 48012DC0020000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
    79 000001A9 48012DC3020000      <1>     add qword [nData + drvHdr.strPtr], rbp
    80 000001B0 48012DC4020000      <1>     add qword [nData + drvHdr.intPtr], rbp
    81                              <1> ;Copy the Null driver to its location in Sysvars
    82 000001B7 B922000000          <1>     mov ecx, drvHdr_size
    83 000001BC 488D35A6020000      <1>     lea rsi, qword [nData]
    84 000001C3 488DBD[A5000000]    <1>     lea rdi, qword [rbp + nulDevHdr]
    85 000001CA F3A4                <1>     rep movsb   
    86                              <1> 
    87                              <1> ;Adjust the addresses in the other driver headers 
    88 000001CC 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
    88 000001CE [C909000000000000]  <1>
    89 000001D6 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
    90 000001DB 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
    91                              <1> adjDrivers:
    92 000001DF E800020000          <1>     call adjustDrvHdr
    93 000001E4 E2F9                <1>     loop adjDrivers
    94                              <1> 
    95                              <1>     ;Open NUL
    96 000001E6 488D9D[AF000000]    <1>     lea rbx, qword [rbp + nulDevHdr + drvHdr.strPtr]    ;Get ptr to strat ptr
    97 000001ED 488B1B              <1>     mov rbx, qword [rbx]    ;Get strat ptr
    98 000001F0 30C0                <1>     xor al, al
    99 000001F2 FFD3                <1>     call rbx
   100                              <1> 
   101                              <1> ;Open CON
   102                              <1> conInit:    ;Rather than keeping this resident... do it here
   103                              <1> .ci0:
   104 000001F4 B401                <1>     mov ah, 01      ;Get buffer status
   105 000001F6 CD36                <1>     int 36h
   106 000001F8 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   107 000001FA 30E4                <1>     xor ah, ah
   108 000001FC CD36                <1>     int 36h ;Read key to flush from buffer
   109 000001FE EBF4                <1>     jmp short .ci0
   110                              <1> .ci1:
   111 00000200 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   112 00000205 CD30                <1>     int 30h
   113 00000207 B402                <1>     mov ah, 02h
   114 00000209 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   115 0000020B 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   116 0000020D CD30                <1>     int 30h
   117 0000020F B707                <1>     mov bh, 07h     ;Grey/Black attribs
   118 00000211 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   119 00000216 CD30                <1>     int 30h
   120                              <1> 
   121                              <1>     ;Open Mass Storage
   122 00000218 488D9D[36000000]    <1>     lea rbx, qword [rbp + diskReqHdr]
   123 0000021F C6031F              <1>     mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   124 00000222 C6430200            <1>     mov byte [rbx + initReqPkt.cmdcde], 00h     ;MSD init
   125 00000226 66C743030000        <1>     mov word [rbx + initReqPkt.status], 0       ;Zero status word
   126 0000022C 648A0425[0A000000]  <1>     mov al, byte fs:[numLDrives]
   127 00000234 88431E              <1>     mov byte [rbx + initReqPkt.drvnum], al      ;First unit is drive A
   128 00000237 FF95[5B0A0000]      <1>     call qword [rbp + msdHdr + drvHdr.strPtr]
   129 0000023D FF95[630A0000]      <1>     call qword [rbp + msdHdr + drvHdr.intPtr]
   130                              <1>     ;Check if it returned OK first!
   131 00000243 8A430D              <1>     mov al, byte [rbx + initReqPkt.numunt]
   132 00000246 64880425[0A000000]  <1>     mov byte fs:[numLDrives], al
   133                              <1> 
   134                              <1>     ;Save ptr to ConHdr in Sysvars
   135 0000024E 488D85[C9090000]    <1>     lea rax, qword [rbp + conHdr]
   136 00000255 6448890425-         <1>     mov qword fs:[conPtr], rax
   136 0000025A [80000000]          <1>
   137                              <1> 
   138                              <1>     ;Save ptr to ClkHdr in Sysvars
   139 0000025E 488D85[2F0A0000]    <1>     lea rax, qword [rbp + clkHdr]
   140 00000265 6448890425-         <1>     mov qword fs:[clockPtr], rax
   140 0000026A [78000000]          <1>
   141                              <1> 
   142                              <1> ;Adjust Int 41h address table
   143                              <1> adjInt41h:
   144 0000026E B96A000000          <1>     mov ecx, dispatchTableL/8 ;Number of elements in table
   145 00000273 48BB-               <1>     mov rbx, functionDispatch.dispatchTable ;Get EA of table
   145 00000275 [AE03000000000000]  <1>
   146 0000027D 488D5C1D00          <1>     lea rbx, qword [rbp+rbx]    ;Point to the start of the relocated table 
   147                              <1> .ai41h:
   148 00000282 48012B              <1>     add qword [rbx], rbp    ;Add base address value to entry in reloc table
   149 00000285 4881C308000000      <1>     add rbx, 8              ;Each entry is size 8
   150 0000028C FFC9                <1>     dec ecx
   151 0000028E 75F2                <1>     jnz .ai41h  ;Keep looping until all entries have been adjusted
   152                              <1> 
   153                              <1> ;Adjust Interrupt Entries Int 40h-49h
   154                              <1> adjInts:
   155 00000290 B340                <1>     mov bl, 40h
   156 00000292 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   157 00000297 CD35                <1>     int 35h
   158 00000299 B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   159 0000029E 488D3D74010000      <1>     lea rdi, intData
   160 000002A5 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   161                              <1> .ai0:
   162 000002A7 B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   163 000002AC 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   164 000002AF 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   165 000002B2 CD35                <1>     int 35h
   166 000002B4 4881C708000000      <1>     add rdi, 8
   167 000002BB FFC1                <1>     inc ecx
   168 000002BD 81F94A000000        <1>     cmp ecx, 4Ah
   169 000002C3 75E2                <1>     jne .ai0
   170                              <1> 
   171                              <1> ;------------------------------------------------;
   172                              <1> ;                   MCB inits                    ;
   173                              <1> ;------------------------------------------------;
   174                              <1> 
   175                              <1> ;Build the DOS segment's MCB header
   176 000002C5 4889EB              <1>     mov rbx, rbp
   177 000002C8 4881EB10000000      <1>     sub rbx, mcb_size   ;Point rbx to the start of the MCB
   178 000002CF C6034D              <1>     mov byte [rbx + mcb.marker], "M"
   179 000002D2 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get the current PSP
   179 000002D7 [D7000000]          <1>
   180 000002DB 48894301            <1>     mov qword [rbx + mcb.owner], rax
   181 000002DF C74309FFFFFFFF      <1>     mov dword [rbx + mcb.blockSize], -1 ;Let size be max for now, adjust later
   182                              <1> 
   183 000002E6 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save rbx in data area
   183 000002EB [60000000]          <1>
   184                              <1> 
   185                              <1> ;------------------------------------------------;
   186                              <1> ;          Default File Handle Creation          ;
   187                              <1> ;------------------------------------------------;
   188                              <1> 
   189                              <1> ;Fill in the default file table entries
   190                              <1>     ;lea rbx, qword [rbp + firstSftHeader]
   191                              <1>     ;mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   192                              <1>     ;mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   193                              <1>     ;mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   194                              <1> 
   195                              <1>     ;lea rbx, qword [rbp + firstSft]
   196                              <1>     ;mov word [rbx + sft.wNumHandles], 0 ;Nothing pointing to this file yet
   197                              <1>     ;mov word [rbx + sft.w]
   198                              <1> 
   199                              <1> ;------------------------------------------------;
   200                              <1> ;               Load CONFIG.SYS                  ;
   201                              <1> ;------------------------------------------------;
   202                              <1> ;------------------------------------------------;
   203                              <1> ;              Process CONFIG.SYS                ;
   204                              <1> ;------------------------------------------------;
   205                              <1> ;------------------------------------------------;
   206                              <1> ;           Load Command interpreter             ;
   207                              <1> ;------------------------------------------------;
   208                              <1> 
   209                              <1> ;Test Error Case
   210                              <1>     ;mov ah, 00110000b
   211                              <1>     ;mov al, 00h
   212                              <1>     ;mov edi, 0Ch
   213                              <1>     ;int 44h
   214                              <1> 
   215 000002EF 488D1501010000      <1>     lea rdx, qword [startmsg]   ;Get the absolute address of message
   216 000002F6 B409                <1>     mov ah, 09h
   217 000002F8 CD41                <1>     int 41h
   218                              <1> 
   219 000002FA 64488B3425-         <1>     mov rsi, fs:[nulDevHdr]
   219 000002FF [A5000000]          <1>
   220 00000303 B801C50000          <1>     mov eax, 0C501h ;Connect debugger
   221 00000308 CD35                <1>     int 35h
   222                              <1> l1:
   223 0000030A B401                <1>     mov ah, 01h  ;Write with echo
   224 0000030C CD41                <1>     int 41h
   225 0000030E 3C00                <1>     cmp al, 0
   226 00000310 7402                <1>     je l2
   227 00000312 EBF6                <1>     jmp short l1
   228                              <1> l2:
   229 00000314 B407                <1>     mov ah, 07h
   230 00000316 CD41                <1>     int 41h
   231 00000318 3C42                <1>     cmp al, 42h
   232 0000031A 75EE                <1>     jne l1
   233                              <1> l3:
   234 0000031C 6466C70425-         <1>     mov word fs:[CLOCKrecrd + clkStruc.dateWord], 0
   234 00000321 [17010000]0000      <1>
   235 00000327 488D9D[0C000000]    <1>     lea rbx, qword [rbp + charReqHdr] ;Get the address of this request block
   236 0000032E 488D85[17010000]    <1>     lea rax, qword [rbp + CLOCKrecrd]
   237 00000335 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   238 00000338 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read the time
   239 0000033C 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   240 00000342 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   241 00000346 C7431606000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 06
   242 0000034D FF95[390A0000]      <1>     call qword [rbp + clkHdr + drvHdr.strPtr]
   243 00000353 FF95[410A0000]      <1>     call qword [rbp + clkHdr + drvHdr.intPtr]
   244                              <1> 
   245 00000359 B403                <1>     mov ah, 03h
   246 0000035B 30FF                <1>     xor bh, bh
   247 0000035D CD30                <1>     int 30h
   248 0000035F 30D2                <1>     xor dl, dl  ;0 column
   249 00000361 B402                <1>     mov ah, 02h
   250 00000363 CD30                <1>     int 30h
   251                              <1> 
   252 00000365 488D9D[17010000]    <1>     lea rbx, qword [rbp + CLOCKrecrd]
   253 0000036C 0FB64303            <1>     movzx eax, byte [rbx + clkStruc.hours]
   254 00000370 E832000000          <1>     call .clkHexToBCD
   255 00000375 B40E                <1>     mov ah, 0Eh
   256 00000377 B03A                <1>     mov al, ":"
   257 00000379 CD30                <1>     int 30h
   258 0000037B 0FB64302            <1>     movzx eax, byte [rbx + clkStruc.minutes]
   259 0000037F E823000000          <1>     call .clkHexToBCD
   260 00000384 B40E                <1>     mov ah, 0Eh
   261 00000386 B03A                <1>     mov al, ":"
   262 00000388 CD30                <1>     int 30h
   263 0000038A 0FB64305            <1>     movzx eax, byte [rbx + clkStruc.seconds]
   264 0000038E E814000000          <1>     call .clkHexToBCD
   265 00000393 B40E                <1>     mov ah, 0Eh
   266 00000395 B02E                <1>     mov al, "."
   267 00000397 CD30                <1>     int 30h
   268 00000399 0FB64304            <1>     movzx eax, byte [rbx + clkStruc.hseconds]
   269 0000039D E805000000          <1>     call .clkHexToBCD
   270 000003A2 E963FFFFFF          <1>     jmp l1
   271                              <1> .clkHexToBCD:
   272                              <1> ;Converts a Hex byte into two BCD digits
   273                              <1> ;Takes input in each nybble of al
   274 000003A7 53                  <1>     push rbx
   275 000003A8 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
   275 000003B1 00                  <1>
   276 000003B2 31D2                <1>     xor edx, edx
   277 000003B4 48F7F3              <1>     div rbx
   278 000003B7 80C230              <1>     add dl, '0'
   279 000003BA 80FA39              <1>     cmp dl, '9'
   280 000003BD 7603                <1>     jbe .chtb0
   281 000003BF 80C207              <1>     add dl, 'A'-'0'-10
   282                              <1> .chtb0:
   283 000003C2 88D1                <1>     mov cl, dl    ;Save remainder byte
   284 000003C4 31D2                <1>     xor edx, edx
   285 000003C6 48F7F3              <1>     div rbx
   286 000003C9 80C230              <1>     add dl, '0'
   287 000003CC 80FA39              <1>     cmp dl, '9'
   288 000003CF 7603                <1>     jbe .chtb1
   289 000003D1 80C207              <1>     add dl, 'A'-'0'-10
   290                              <1> .chtb1:
   291 000003D4 88D5                <1>     mov ch, dl    ;Save remainder byte
   292                              <1> 
   293 000003D6 88E8                <1>     mov al, ch    ;Get most sig digit into al
   294 000003D8 B40E                <1>     mov ah, 0Eh
   295 000003DA CD30                <1>     int 30h
   296 000003DC 88C8                <1>     mov al, cl    ;Get least sig digit into al
   297 000003DE B40E                <1>     mov ah, 0Eh
   298 000003E0 CD30                <1>     int 30h
   299 000003E2 5B                  <1>     pop rbx
   300 000003E3 C3                  <1>     ret
   301                              <1> ;--------------------------------
   302                              <1> ;       PROCS FOR SYSINIT       :
   303                              <1> ;--------------------------------
   304                              <1> adjustDrvHdr:
   305                              <1> ;Input: rsi = Effective address of driver in DOS segment
   306                              <1> ;       rbp = Ptr to the start of the DOS segment
   307                              <1> ;Output: rsi = EA of next header in DOS segment
   308 000003E4 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   309 000003E7 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   310 000003EB 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   311 000003EF 4881C622000000      <1>     add rsi, drvHdr_size
   312 000003F6 C3                  <1>     ret
   313                              <1> ;--------------------------------
   314                              <1> ;       DATA FOR SYSINIT        :
   315                              <1> ;--------------------------------
   316 000003F7 5374617274696E6720- <1> startmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
   316 00000400 5343502F444F532E2E- <1>
   316 00000409 2E0A0D24            <1>
   317 0000040D 434F4E00            <1> conName db "CON",0
   318 00000411 41555800            <1> auxName db "AUX",0
   319 00000415 50524E00            <1> prnName db "PRN",0
   320                              <1> intData:
   321 00000419 [5B00000000000000]  <1>     dq terminateProcess ;Int 40h
   322 00000421 [5B00000000000000]  <1>     dq functionDispatch ;Int 41h
   323 00000429 [FE06000000000000]  <1>     dq terminateHandler ;Int 42h
   324 00000431 [FE06000000000000]  <1>     dq ctrlCHandler     ;Int 43h
   325 00000439 [FE06000000000000]  <1>     dq critErrorHandler ;Int 44h
   326 00000441 [9109000000000000]  <1>     dq absDiskRead      ;Int 45h
   327 00000449 [A609000000000000]  <1>     dq absDiskWrite     ;Int 46h
   328 00000451 [BB09000000000000]  <1>     dq terminateResident    ;Int 47h
   329 00000459 [BB09000000000000]  <1>     dq inDosHandler     ;Int 48h
   330 00000461 [BD09000000000000]  <1>     dq fastOutput       ;Int 49h
   331                              <1> nData:
   332 00000469 [C909000000000000]  <1>     dq conHdr
   333 00000471 0480                <1>     dw 08004h
   334 00000473 [710B000000000000]  <1>     dq nulStrat
   335 0000047B [770B000000000000]  <1>     dq nulIntr
   336 00000483 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
     9                                  %include "dosKernel.asm"
    10                              <1> Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 
    11                              <1> ;-----------------------------------:
    12                              <1> ;           Static Data             :
    13                              <1> ;-----------------------------------:
    14 00000000 01                  <1> dosMajor    db 01h      ;Version 1
    15 00000001 00                  <1> dosMinor    db 00h      ;.0
    16                              <1> ;-----------------------------------:
    17                              <1> ;       Misc System routines        :
    18                              <1> ;-----------------------------------:
    19                              <1> findLRUBuffer: 
    20                              <1> ;Finds least recently used buffer, links it and returns ptr to it in rbx
    21                              <1> ;Input: Nothing
    22                              <1> ;Output: rbx = Pointer to the buffer to use
    23 00000002 52                  <1>     push rdx
    24 00000003 488B1D(8A000000)    <1>     mov rbx, qword [bufHeadPtr]
    25 0000000A 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
    26 00000011 7502                <1>     jne .flb1
    27 00000013 5A                  <1>     pop rdx
    28 00000014 C3                  <1>     ret
    29                              <1> .flb1:
    30 00000015 4889DA              <1>     mov rdx, rbx    ;Save a ptr to the previous buffer header
    31 00000018 488B1A              <1>     mov rbx, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
    32 0000001B 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
    33 00000022 75F1                <1>     jne .flb1   ;If not LRU, keep walking, else process
    34 00000024 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
    35 0000002B 488B15(8A000000)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
    36 00000032 48891D(8A000000)    <1>     mov qword [bufHeadPtr], rbx    ;Sysvars to point to new buffer
    37 00000039 488913              <1>     mov qword [rbx + bufferHdr.nextBufPtr], rdx
    38 0000003C 5A                  <1>     pop rdx
    39 0000003D C3                  <1>     ret
    40                              <1> 
    41                              <1> findDPB:
    42                              <1> ;Finds the DPB for a given drive
    43                              <1> ;Input:   dl = Drive number (0=A, 1=B etc...)
    44                              <1> ;Output: al = 00, rbx = Pointer to the DPB
    45                              <1> ;        al = -1, Failed, no DPB for device, rbx destroyed
    46 0000003E 488B1D(68000000)    <1>     mov rbx, qword [dpbHeadPtr]
    47                              <1> .fd1:
    48 00000045 30C0                <1>     xor al, al
    49 00000047 3813                <1>     cmp byte [rbx + dpb.bDriveNumber], dl
    50 00000049 740F                <1>     je .fd2
    51 0000004B 488B5B26            <1>     mov rbx, qword [rbx + dpb.qNextDPBPtr]
    52 0000004F B0FF                <1>     mov al, -1
    53 00000051 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If rbx followed last item in list, no DPB exists for dl
    54 00000058 75EB                <1>     jne .fd1
    55                              <1> .fd2:
    56 0000005A C3                  <1>     ret
    57                              <1> callCritError:
    58                              <1> ;Common Procedure to swap stacks and call Critical Error Interrupt
    59                              <1> ;-----------------------------------:
    60                              <1> ;       File System routines        :
    61                              <1> ;-----------------------------------:
    62                              <1> name2Clust:
    63                              <1> ;Converts a file name to a first cluster number
    64                              <1> ;-----------------------------------:
    65                              <1> ;        Interrupt routines         :
    66                              <1> ;-----------------------------------:
    67                              <1> terminateProcess:   ;Int 40h
    68                              <1> 
    69                              <1> functionDispatch:   ;Int 41h Main function dispatcher
    70                              <1> ;ah = Function number, all other registers have various meanings
    71 0000005B FA                  <1>     cli ;Halt external interrupts
    72 0000005C FC                  <1>     cld ;Ensure all string ops occur in the right direction
    73 0000005D 80FC6A              <1>     cmp ah, dispatchTableL/8    ;Number of functions
    74 00000060 0F871D010000        <1>     ja .fdExitBad
    75                              <1>     ;Cherry pick functions
    76 00000066 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    77 00000069 722C                <1>     jb .fsbegin   ;If below skip these checks
    78 0000006B 0F84B9020000        <1>     je .ctrlBreakCheck
    79 00000071 80FC64              <1>     cmp ah, 64h
    80 00000074 0F8433030000        <1>     je .setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    81 0000007A 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    82 0000007C 80FC51              <1>     cmp ah, 51h
    83 0000007F 0F84E8020000        <1>     je .getCurrProcessID    ;This and below are exactly the same
    84 00000085 80FC62              <1>     cmp ah, 62h
    85 00000088 0F840C030000        <1>     je .getPSPaddr          ;Calls the above function
    86 0000008E 80FC50              <1>     cmp ah, 50h
    87 00000091 0F84CE020000        <1>     je .setCurrProcessID
    88                              <1> .fsbegin:
    89                              <1>     pushDOS ;Push the usual prologue registers
   202 00000097 4151                <2>  push r9
   203 00000099 4150                <2>  push r8
   204 0000009B 55                  <2>  push rbp
   205 0000009C 57                  <2>  push rdi
   206 0000009D 56                  <2>  push rsi
   207 0000009E 52                  <2>  push rdx
   208 0000009F 51                  <2>  push rcx
   209 000000A0 53                  <2>  push rbx
   210 000000A1 50                  <2>  push rax
    90 000000A2 488B05(07010000)    <1>     mov rax, qword [oldRSP]
    91 000000A9 488905(FF000000)    <1>     mov qword [oldoldRSP], rax
    92 000000B0 FE05(C8000000)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    93 000000B6 488925(07010000)    <1>     mov qword [oldRSP], rsp
    94                              <1> ;Here, we want to save oldRSP in the callers PSP
    95 000000BD 803D(C8000000)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
    96 000000C4 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
    97 000000C6 488B05(D7000000)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    98 000000CD 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    99                              <1> .fsb1:
   100 000000D1 58                  <1>     pop rax     ;Get old rax back
   101 000000D2 50                  <1>     push rax    ;and push it back onto the stack
   102 000000D3 488D25(4B060000)    <1>     lea rsp, critStakTop
   103 000000DA FB                  <1>     sti         ;Reenable interrupts
   104                              <1> 
   105 000000DB C605(FE000000)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
   106                              <1> 
   107 000000E2 48891D(0F010000)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
   108 000000E9 0FB6DC              <1>     movzx ebx, ah   ;Move the function number bl zero extended to rbx
   109 000000EC C1E303              <1>     shl ebx, 3      ;Multiply the function number by 8 for offset into table
   110 000000EF 50                  <1>     push rax        ;Push rax onto the stack
   111 000000F0 488D05B7020000      <1>     lea rax, qword [.dispatchTable]
   112 000000F7 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   113 000000FA 58                  <1>     pop rax
   114 000000FB 488B1B              <1>     mov rbx, qword [rbx]    ;Get the address from the dispatch table
   115                              <1> 
   116 000000FE 84E4                <1>     test ah, ah     ;Simple Terminate function?
   117 00000100 741C                <1>     jz .fddiskOp
   118 00000102 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   119 00000105 7443                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   120 00000107 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   121 0000010A 7712                <1>     ja .fddiskOp
   122                              <1> ;Char operations here
   123 0000010C F605(C7000000)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   124 00000113 7535                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   125 00000115 488D25(8B0C0000)    <1>     lea rsp, IOStakTop          ;Otherwise, switch to IO stack
   126 0000011C EB2C                <1>     jmp short .fdGoToFunction
   127                              <1> .fddiskOp:
   128                              <1>     ;Disk operations go here
   129                              <1>     ;Clear up error info
   130 0000011E C605(CA000000)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   131 00000125 C605(C7000000)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   132 0000012C C605(C9000000)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   133                              <1> 
   134 00000133 C605(FE000000)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   135 0000013A 488D25(CB120000)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   136 00000141 F605(F2000000)FF    <1>     test byte [breakFlag], -1   ;Test if set
   137 00000148 7400                <1>     jz .fdGoToFunction
   138                              <1> ; HANDLE CTRL+BREAK HERE!
   139                              <1> .fdGoToFunction:
   140 0000014A 48871D(0F010000)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   141                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   142                              <1>     ;
   143                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   144                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   145                              <1>     ;
   146 00000151 FF15(0F010000)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   147                              <1> .fdExit:
   148 00000157 FA                  <1>     cli     ;Redisable interrupts
   149                              <1>     ;???
   150 00000158 FE0D(C8000000)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   151 0000015E 488B25(07010000)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   152 00000165 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   153 00000168 488B05(FF000000)    <1>     mov rax, qword [oldoldRSP]
   154 0000016F 488905(07010000)    <1>     mov qword [oldRSP], rax
   155                              <1>     popDOS  ;Pop the frame
   214 00000176 58                  <2>  pop rax
   215 00000177 5B                  <2>  pop rbx
   216 00000178 59                  <2>  pop rcx
   217 00000179 5A                  <2>  pop rdx
   218 0000017A 5E                  <2>  pop rsi
   219 0000017B 5F                  <2>  pop rdi
   220 0000017C 5D                  <2>  pop rbp
   221 0000017D 4158                <2>  pop r8
   222 0000017F 4159                <2>  pop r9
   156 00000181 48CF                <1>     iretq
   157                              <1> .fdExitBad:
   158 00000183 B400                <1>     mov ah, 0
   159 00000185 48CF                <1>     iretq
   160                              <1> .simpleTerminate:     ;ah = 00h
   161 00000187 C3                  <1>     ret
   162                              <1> .stdinReadEcho:     ;ah = 01h
   163                              <1> ;Return char that has been read and echoed in al
   164 00000188 488D1D(0C000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
   165 0000018F 488D0566000000      <1>     lea rax, .stdinReadEchoBuffer
   166 00000196 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   167 00000199 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
   168 0000019D 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   169 000001A3 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   170 000001A7 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
   171 000001AE FF151F080000        <1>     call qword [conHdr + drvHdr.strPtr]
   172 000001B4 FF1521080000        <1>     call qword [conHdr + drvHdr.intPtr]
   173 000001BA 803D3B00000000      <1>     cmp byte [.stdinReadEchoBuffer], 00h
   174 000001C1 7432                <1>     jz .stdireexit
   175 000001C3 488D1D(0C000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
   176 000001CA 488D052B000000      <1>     lea rax, .stdinReadEchoBuffer
   177 000001D1 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   178 000001D4 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
   179 000001D8 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   180 000001DE 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   181 000001E2 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
   182 000001E9 FF15E4070000        <1>     call qword [conHdr + drvHdr.strPtr]
   183 000001EF FF15E6070000        <1>     call qword [conHdr + drvHdr.intPtr]
   184                              <1> .stdireexit:
   185 000001F5 8A0501000000        <1>     mov al, byte [.stdinReadEchoBuffer]
   186 000001FB C3                  <1>     ret
   187 000001FC 00                  <1> .stdinReadEchoBuffer    db 0
   188                              <1> .stdoutWrite:       ;ah = 02h
   189                              <1> ;Bspace is regular cursor left, does not insert a blank
   190 000001FD 881533000000        <1>     mov byte [.stdoutWriteBuffer], dl
   191 00000203 488D1D(0C000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
   192 0000020A 488D1525000000      <1>     lea rdx, .stdoutWriteBuffer
   193 00000211 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   194 00000214 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
   195 00000218 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   196 0000021E 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   197 00000222 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
   198 00000229 FF15A4070000        <1>     call qword [conHdr + drvHdr.strPtr]
   199 0000022F FF15A6070000        <1>     call qword [conHdr + drvHdr.intPtr]
   200 00000235 C3                  <1>     ret
   201 00000236 00                  <1> .stdoutWriteBuffer db 0
   202                              <1> .stdauxRead:        ;ah = 03h
   203                              <1> .stdauxWrite:       ;ah = 04h
   204                              <1> .stdprnWrite:       ;ah = 05h
   205                              <1> .directCONIO:       ;ah = 06h
   206                              <1> .waitDirectInNoEcho:;ah = 07h
   207                              <1> ;Return char in al
   208 00000237 488D1D(0C000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
   209 0000023E 488D052B000000      <1>     lea rax, .function7buffer
   210 00000245 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   211 00000248 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
   212 0000024C 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   213 00000252 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   214 00000256 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
   215 0000025D FF1570070000        <1>     call qword [conHdr + drvHdr.strPtr]
   216 00000263 FF1572070000        <1>     call qword [conHdr + drvHdr.intPtr]
   217 00000269 8A0501000000        <1>     mov al, byte [.function7buffer]
   218 0000026F C3                  <1>     ret
   219 00000270 00                  <1> .function7buffer    db 0
   220                              <1> .waitStdinNoEcho:   ;ah = 08h
   221 00000271 C3                  <1>     ret
   222                              <1> .printString:       ;ah = 09h
   223 00000272 31C9                <1>     xor ecx, ecx    ;Clear char counter
   224 00000274 B824000000          <1>     mov eax, "$"    ;Terminating char
   225 00000279 4889D7              <1>     mov rdi, rdx    ;Set up for scasb
   226                              <1> .ps0:   ;Search for $ to get count of chars
   227 0000027C AE                  <1>     scasb
   228 0000027D 7404                <1>     je .ps1
   229 0000027F FFC1                <1>     inc ecx
   230 00000281 EBF9                <1>     jmp short .ps0
   231                              <1> .ps1:   ;Use handle 
   232 00000283 488D1D(0C000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
   233 0000028A C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   234 0000028D C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
   235 00000291 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   236 00000297 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   237 0000029B 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   238 0000029E FF152F070000        <1>     call qword [conHdr + drvHdr.strPtr]
   239 000002A4 FF1531070000        <1>     call qword [conHdr + drvHdr.intPtr]
   240                              <1> 
   241 000002AA 488B1D(07010000)    <1>     mov rbx, qword [oldRSP]
   242 000002B1 8A03                <1>     mov al, byte [rbx+callerFrame.rax]      ;Gets al to preserve it
   243 000002B3 C3                  <1>     ret
   244                              <1> .buffStdinInput:    ;ah = 0Ah
   245                              <1> .checkStdinStatus:  ;ah = 0Bh
   246                              <1> .clearbuffDoFunc:   ;ah = 0Ch
   247                              <1> .diskReset:         ;ah = 0Dh
   248                              <1> .selectDisk:        ;ah = 0Eh
   249                              <1> .openFileFCB:       ;ah = 0Fh
   250                              <1> .closeFileFCB:      ;ah = 10h
   251                              <1> .findFirstFileFCB:  ;ah = 11h
   252                              <1> .findNextFileFCB:   ;ah = 12h
   253                              <1> .deleteFileFCB:     ;ah = 13h
   254                              <1> .sequentialReadFCB: ;ah = 14h
   255                              <1> .sequentialWriteFCB:;ah = 15h
   256                              <1> .createFileFCB:     ;ah = 16h
   257                              <1> .renameFileFCB:     ;ah = 17h
   258                              <1>                     ;ah = 18h unused
   259                              <1> .getCurrentDisk:    ;ah = 19h, get current default drive
   260 000002B4 8A05(F1000000)      <1>     mov al, byte [currentDrv]
   261 000002BA C3                  <1>     ret
   262                              <1> .setDTA:            ;ah = 1Ah
   263                              <1> ;Called with:
   264                              <1> ;   rdx = Pointer to the new default DTA
   265 000002BB 488B1D(07010000)    <1>     mov rbx, qword [oldRSP]
   266 000002C2 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
   267 000002C6 488915(CF000000)    <1>     mov qword [currentDTA], rdx
   268 000002CD C3                  <1>     ret
   269                              <1> .FATinfoDefault:    ;ah = 1Bh
   270                              <1> .FatinfoDevice:     ;ah = 1Ch
   271                              <1>                     ;ah = 1Dh unused
   272                              <1>                     ;ah = 1Eh unused
   273                              <1> .getCurrentDPBptr:  ;ah = 1Fh, simply calls int 41h ah = 32h with dl = 0
   274                              <1>                     ;ah = 20h unused
   275                              <1> .randomReadFCB:     ;ah = 21h
   276                              <1> .randomWriteFCB:    ;ah = 22h
   277                              <1> .getFileSizeFCB:    ;ah = 23h
   278                              <1> .setRelRecordFCB:   ;ah = 24h
   279                              <1> .setIntVector:      ;ah = 25h
   280                              <1> ;Called with:
   281                              <1> ;   rdx = Pointer to interrupt handler
   282                              <1> ;   al = Interrupt number
   283 000002CE 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   284 000002D0 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   285                              <1> ;First call to get default BIOS segement selector and attribute word
   286 000002D6 88C3                <1>     mov bl, al  ;Set interrupt number 
   287 000002D8 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   288 000002DD CD35                <1>     int 35h
   289 000002DF 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   290 000002E1 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   291                              <1> ;dx preserves the attribute word
   292 000002E3 488B2D(07010000)    <1>     mov rbp, qword [oldRSP]
   293 000002EA 488B5D18            <1>     mov rbx, qword [rbp + callerFrame.rdx]  ;Pointer passed in rdx
   294 000002EE B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   295 000002F3 CD35                <1>     int 35h
   296                              <1> 
   297 000002F5 8A4500              <1>     mov al, byte [rbp + callerFrame.rax]    ;Preserve low byte of rax
   298 000002F8 C3                  <1>     ret
   299                              <1> .createNewPSP:      ;ah = 26h
   300                              <1> .randBlockReadFCB:  ;ah = 27h
   301                              <1> .randBlockWriteFCB: ;ah = 28h
   302                              <1> .parseFilenameFCB:  ;ah = 29h
   303                              <1> .getDate:           ;ah = 2Ah
   304                              <1> .setDate:           ;ah = 2Bh
   305                              <1> .getTime:           ;ah = 2Ch
   306                              <1> .setTime:           ;ah = 2Dh
   307                              <1> .setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   308 000002F9 8805(F3000000)      <1>     mov byte [verifyFlag], al
   309 000002FF C3                  <1>     ret
   310                              <1> .getDTA:            ;ah = 2Fh
   311 00000300 488B15(07010000)    <1>     mov rdx, qword [oldRSP]
   312 00000307 488B1D(CF000000)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
   313 0000030E 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
   314 00000312 C3                  <1>     ret
   315                              <1> .getDOSversion:     ;ah = 30h
   316 00000313 488B15(07010000)    <1>     mov rdx, qword [oldRSP]
   317 0000031A 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   318 0000031C 886209              <1>     mov byte [rdx + callerFrame.rbx + 1], ah    ;Clear bh 
   319 0000031F 668B05DAFCFFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   320 00000326 668902              <1>     mov word [rdx + callerFrame.rax], ax    ;Save ax
   321 00000329 C3                  <1>     ret
   322                              <1> .terminateStayRes:  ;ah = 31h
   323                              <1> .getDeviceDPBptr:   ;ah = 32h
   324                              <1> .ctrlBreakCheck:    ;ah = 33h
   325 0000032A 84C0                <1>     test al, al
   326 0000032C 7406                <1>     jz .cbcget  ;Get the state
   327 0000032E 8815(F2000000)      <1>     mov byte [breakFlag], dl    ;Set the state
   328                              <1> .cbcget:
   329 00000334 8A15(F2000000)      <1>     mov dl, byte [breakFlag]    ;Get the state
   330 0000033A C3                  <1>     ret
   331                              <1> .getInDOSflagPtr:   ;ah = 34h
   332 0000033B 488D15(C8000000)    <1>     lea rdx, inDOS
   333 00000342 488B1D(07010000)    <1>     mov rbx, qword [oldRSP]
   334 00000349 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx  ;save ptr in rbx
   335 0000034D C3                  <1>     ret
   336                              <1> .getIntVector:      ;ah = 35h
   337                              <1> ;Called with:
   338                              <1> ;   al = Interrupt Number
   339                              <1> ;Returns:
   340                              <1> ;   rbx = Pointer to interrupt handler
   341 0000034E 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   342 00000350 B807F00000          <1>     mov eax, 0F007h
   343 00000355 CD35                <1>     int 35h
   344 00000357 488B15(07010000)    <1>     mov rdx, qword [oldRSP]
   345 0000035E 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx  ;Save pointer in rbx
   346 00000362 8A02                <1>     mov al, byte [rdx + callerFrame.rax]    ;Get the low byte in al
   347 00000364 C3                  <1>     ret
   348                              <1> .getDiskFreeSpace:  ;ah = 36h
   349                              <1> .getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
   350                              <1> .getsetCountryInfo: ;ah = 38h, localisation info
   351                              <1> .makeDIR:           ;ah = 39h
   352                              <1> .removeDIR:         ;ah = 3Ah
   353                              <1> .changeCurrentDIR:  ;ah = 3Bh, changes directory for current drive
   354                              <1> .createFileHdl:     ;ah = 3Ch, handle function
   355                              <1> .openFileHdl:       ;ah = 3Dh, handle function
   356                              <1> .closeFileHdl:      ;ah = 3Eh, handle function
   357                              <1> .readFileHdl:       ;ah = 3Fh, handle function
   358                              <1> .writeFileHdl:      ;ah = 40h, handle function
   359                              <1> .deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   360                              <1> .movFileReadPtr:    ;ah = 42h, handle function, LSEEK
   361                              <1> .changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   362                              <1> .ioctrl:            ;ah = 44h, handle function
   363                              <1> .duplicateHandle:   ;ah = 45h, handle function
   364                              <1> .forceDuplicateHdl: ;ah = 46h, handle function
   365                              <1> .getCurrentDIR:     ;ah = 47h
   366                              <1> .allocateMemory:    ;ah = 48h
   367                              <1> .freeMemory:        ;ah = 49h
   368                              <1> .reallocMemory:     ;ah = 4Ah
   369                              <1> .loadExecChild:     ;ah = 4Bh, EXEC
   370                              <1> .terminateClean:    ;ah = 4Ch, EXIT
   371                              <1> .getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   372                              <1> .findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   373                              <1> .findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   374                              <1> .setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   375 00000365 48891D(D7000000)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   376 0000036C C3                  <1>     ret
   377                              <1> .getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   378 0000036D 488B1D(07010000)    <1>     mov rbx, qword [oldRSP]
   379 00000374 488B15(D7000000)    <1>     mov rdx, qword [currentPSP]
   380 0000037B 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx   ;Set the caller pointer
   381 0000037F C3                  <1>     ret 
   382                              <1> .getSysVarsPtr:     ;ah = 52h
   383 00000380 488D15(68000000)    <1>     lea rdx, sysVarsPtr
   384 00000387 488B1D(07010000)    <1>     mov rbx, qword [oldRSP]
   385 0000038E 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx
   386 00000392 C3                  <1>     ret
   387                              <1> .createDPB:         ;ah = 53h, generates a DPB from a given BPB
   388                              <1> .getVerifySetting:  ;ah = 54h
   389 00000393 8A05(F3000000)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   390 00000399 C3                  <1>     ret
   391                              <1> .createPSP:         ;ah = 55h, creates a PSP for a program
   392                              <1> .renameFile:        ;ah = 56h
   393                              <1> .getSetFileDateTime:;ah = 57h
   394                              <1> .getsetMallocStrat: ;ah = 58h
   395                              <1> .getExtendedError:  ;ah = 59h
   396                              <1> .createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   397                              <1> .createNewFile:     ;ah = 5Bh
   398                              <1> .lockUnlockFile:    ;ah = 5Ch
   399                              <1> .getCritErrorInfo:  ;ah = 5Dh
   400                              <1> .networkServices:   ;ah = 5Eh, do nothing
   401                              <1> .networkRedirection:;ah = 5Fh, do nothing
   402                              <1> .trueName:          ;ah = 60h, get fully qualified name
   403                              <1>                     ;ah = 61h, reserved
   404                              <1> .getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   405 0000039A 488B1D(07010000)    <1>     mov rbx, qword [oldRSP]
   406 000003A1 488B15(D7000000)    <1>     mov rdx, qword [currentPSP]
   407 000003A8 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx  ;Save the current psp in rbx
   408 000003AC C3                  <1>     ret
   409                              <1>                     ;ah = 63h, reserved
   410                              <1> .setDriverLookahead:;ah = 64h, reserved
   411                              <1> .getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
   412                              <1> .getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
   413                              <1> .setHandleCount:    ;ah = 67h
   414                              <1> .commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   415                              <1> .getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   416                              <1> .return:
   417 000003AD C3                  <1>     ret
   418                              <1> 
   419                              <1> 
   420                              <1> .dispatchTable:
   421 000003AE [8701000000000000]  <1>     dq .simpleTerminate     ;AH = 00H, PROCESS MANAGEMENT
   422 000003B6 [8801000000000000]  <1>     dq .stdinReadEcho       ;AH = 01H, CHAR IO
   423 000003BE [FD01000000000000]  <1>     dq .stdoutWrite         ;AH = 02H, CHAR IO
   424 000003C6 [3702000000000000]  <1>     dq .stdauxRead          ;AH = 03H, CHAR IO
   425 000003CE [3702000000000000]  <1>     dq .stdauxWrite         ;AH = 04H, CHAR IO
   426 000003D6 [3702000000000000]  <1>     dq .stdprnWrite         ;AH = 05H, CHAR IO
   427 000003DE [3702000000000000]  <1>     dq .directCONIO         ;AH = 06H, CHAR IO
   428 000003E6 [3702000000000000]  <1>     dq .waitDirectInNoEcho  ;AH = 07H, CHAR IO
   429 000003EE [7102000000000000]  <1>     dq .waitStdinNoEcho     ;AH = 08H, CHAR IO
   430 000003F6 [7202000000000000]  <1>     dq .printString         ;AH = 09H, CHAR IO
   431 000003FE [B402000000000000]  <1>     dq .buffStdinInput      ;AH = 0AH, CHAR IO
   432 00000406 [B402000000000000]  <1>     dq .checkStdinStatus    ;AH = 0BH, CHAR IO
   433 0000040E [B402000000000000]  <1>     dq .clearbuffDoFunc     ;AH = 0CH, CHAR IO
   434 00000416 [B402000000000000]  <1>     dq .diskReset           ;AH = 0DH, DISK MANAGEMENT
   435 0000041E [B402000000000000]  <1>     dq .selectDisk          ;AH = 0EH, DISK MANAGEMENT
   436 00000426 [B402000000000000]  <1>     dq .openFileFCB         ;AH = 0FH, FILE OPERATION       FCB
   437 0000042E [B402000000000000]  <1>     dq .closeFileFCB        ;AH = 10H, FILE OPERATION       FCB
   438 00000436 [B402000000000000]  <1>     dq .findFirstFileFCB    ;AH = 11H, FILE OPERATION       FCB
   439 0000043E [B402000000000000]  <1>     dq .findNextFileFCB     ;AH = 12H, FILE OPERATION       FCB
   440 00000446 [B402000000000000]  <1>     dq .deleteFileFCB       ;AH = 13H, FILE OPERATION       FCB
   441 0000044E [B402000000000000]  <1>     dq .sequentialReadFCB   ;AH = 14H, RECORD OPERATION     FCB
   442 00000456 [B402000000000000]  <1>     dq .sequentialWriteFCB  ;AH = 15H, RECORD OPERTAION     FCB
   443 0000045E [B402000000000000]  <1>     dq .createFileFCB       ;AH = 16H, FILE OPERATION       FCB
   444 00000466 [B402000000000000]  <1>     dq .renameFileFCB       ;AH = 17H, FILE OPERATION       FCB
   445 0000046E [AD03000000000000]  <1>     dq .return              ;AH = 18H, RESERVED
   446 00000476 [B402000000000000]  <1>     dq .getCurrentDisk      ;AH = 19H, DISK MANAGEMENT
   447 0000047E [BB02000000000000]  <1>     dq .setDTA              ;AH = 1AH, RECORD OPERATION     F/H
   448 00000486 [CE02000000000000]  <1>     dq .FATinfoDefault      ;AH = 1BH, DISK MANAGEMENT
   449 0000048E [CE02000000000000]  <1>     dq .FatinfoDevice       ;AH = 1CH, DISK MANAGEMENT
   450 00000496 [AD03000000000000]  <1>     dq .return              ;AH = 1DH, RESERVED
   451 0000049E [AD03000000000000]  <1>     dq .return              ;AH = 1EH, RESERVED
   452 000004A6 [CE02000000000000]  <1>     dq .getCurrentDPBptr    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
   453 000004AE [AD03000000000000]  <1>     dq .return              ;AH = 20H, RESERVED
   454 000004B6 [CE02000000000000]  <1>     dq .randomReadFCB       ;AH = 21H, RECORD OPERATION     FCB
   455 000004BE [CE02000000000000]  <1>     dq .randomWriteFCB      ;AH = 22H, RECORD OPERATION     FCB
   456 000004C6 [CE02000000000000]  <1>     dq .getFileSizeFCB      ;AH = 23H, FILE OPERATION       FCB
   457 000004CE [CE02000000000000]  <1>     dq .setRelRecordFCB     ;AH = 24H, RECORD OPERATION     FCB
   458 000004D6 [CE02000000000000]  <1>     dq .setIntVector        ;AH = 25H, MISC. SYS. FUNCTION
   459 000004DE [F902000000000000]  <1>     dq .createNewPSP        ;AH = 26H, PROCESS MANAGEMENT
   460 000004E6 [F902000000000000]  <1>     dq .randBlockReadFCB    ;AH = 27H, RECORD OPERATION     FCB
   461 000004EE [F902000000000000]  <1>     dq .randBlockWriteFCB   ;AH = 28H, RECORD OPERATION     FCB
   462 000004F6 [F902000000000000]  <1>     dq .parseFilenameFCB    ;AH = 29H, FILE OPERATION       FCB
   463 000004FE [F902000000000000]  <1>     dq .getDate             ;AH = 2AH, TIME AND DATE
   464 00000506 [F902000000000000]  <1>     dq .setDate             ;AH = 2BH, TIME AND DATE
   465 0000050E [F902000000000000]  <1>     dq .getTime             ;AH = 2CH, TIME AND DATE
   466 00000516 [F902000000000000]  <1>     dq .setTime             ;AH = 2DH, TIME AND DATE
   467 0000051E [F902000000000000]  <1>     dq .setResetVerify      ;AH = 2EH, DISK MANAGEMENT
   468 00000526 [0003000000000000]  <1>     dq .getDTA              ;AH = 2FH, RECORD OPERATION     F/H
   469 0000052E [1303000000000000]  <1>     dq .getDOSversion       ;AH = 30H, MISC. SYS. FUNCTION
   470 00000536 [2A03000000000000]  <1>     dq .terminateStayRes    ;AH = 31H, PROCESS MANAGEMENT
   471 0000053E [2A03000000000000]  <1>     dq .getDeviceDPBptr     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
   472 00000546 [2A03000000000000]  <1>     dq .ctrlBreakCheck      ;AH = 33H, MISC. SYS. FUNCTION
   473 0000054E [3B03000000000000]  <1>     dq .getInDOSflagPtr     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
   474 00000556 [4E03000000000000]  <1>     dq .getIntVector        ;AH = 35H, MISC. SYS. FUNCTION
   475 0000055E [6503000000000000]  <1>     dq .getDiskFreeSpace    ;AH = 36H, DISK MANAGEMENT
   476 00000566 [6503000000000000]  <1>     dq .getsetSwitchChar    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
   477 0000056E [6503000000000000]  <1>     dq .getsetCountryInfo   ;AH = 38H, MISC. SYS. FUNCTION
   478 00000576 [6503000000000000]  <1>     dq .makeDIR             ;AH = 39H, DIRECTORY OPERATION
   479 0000057E [6503000000000000]  <1>     dq .removeDIR           ;AH = 3AH, DIRECTORY OPERATION
   480 00000586 [6503000000000000]  <1>     dq .changeCurrentDIR    ;AH = 3BH, DIRECTORY OPERATION
   481 0000058E [6503000000000000]  <1>     dq .createFileHdl       ;AH = 3CH, FILE OPERATION       HANDLE
   482 00000596 [6503000000000000]  <1>     dq .openFileHdl         ;AH = 3DH, FILE OPERATION       HANDLE
   483 0000059E [6503000000000000]  <1>     dq .closeFileHdl        ;AH = 3EH, FILE OPERATION       HANDLE
   484 000005A6 [6503000000000000]  <1>     dq .readFileHdl         ;AH = 3FH, RECORD OPERATION     HANDLE
   485 000005AE [6503000000000000]  <1>     dq .writeFileHdl        ;AH = 40H, RECORD OPERATION     HANDLE
   486 000005B6 [6503000000000000]  <1>     dq .deleteFileHdl       ;AH = 41H, FILE OPERATION       HANDLE
   487 000005BE [6503000000000000]  <1>     dq .movFileReadPtr      ;AH = 42H, RECORD OPERATION     HANDLE
   488 000005C6 [6503000000000000]  <1>     dq .changeFileModeHdl   ;AH = 43H, FILE OPERATION       HANDLE
   489 000005CE [6503000000000000]  <1>     dq .ioctrl              ;AH = 44H, MISC. SYS. FUNCTION
   490 000005D6 [6503000000000000]  <1>     dq .duplicateHandle     ;AH = 45H, FILE OPERATION       HANDLE
   491 000005DE [6503000000000000]  <1>     dq .forceDuplicateHdl   ;AH = 46H, FILE OPERATION       HANDLE
   492 000005E6 [6503000000000000]  <1>     dq .getCurrentDIR       ;AH = 47H, DIRECTORY OPERATION
   493 000005EE [6503000000000000]  <1>     dq .allocateMemory      ;AH = 48H, MEMORY MANAGEMENT
   494 000005F6 [6503000000000000]  <1>     dq .freeMemory          ;AH = 49H, MEMORY MANAGEMENT
   495 000005FE [6503000000000000]  <1>     dq .reallocMemory       ;AH = 4AH, MEMORY MANAGEMENT
   496 00000606 [6503000000000000]  <1>     dq .loadExecChild       ;AH = 4BH, PROCESS MANAGEMENT
   497 0000060E [6503000000000000]  <1>     dq .terminateClean      ;AH = 4CH, PROCESS MANAGEMENT
   498 00000616 [6503000000000000]  <1>     dq .getRetCodeChild     ;AH = 4DH, PROCESS MANAGEMENT
   499 0000061E [6503000000000000]  <1>     dq .findFirstFileHdl    ;AH = 4EH, FILE OPERATION       HANDLE
   500 00000626 [6503000000000000]  <1>     dq .findNextFileHdl     ;AH = 4FH, FILE OPERATION       HANDLE
   501 0000062E [6503000000000000]  <1>     dq .setCurrProcessID    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   502 00000636 [6D03000000000000]  <1>     dq .getCurrProcessID    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   503 0000063E [8003000000000000]  <1>     dq .getSysVarsPtr       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   504 00000646 [9303000000000000]  <1>     dq .createDPB           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   505 0000064E [9303000000000000]  <1>     dq .getVerifySetting    ;AH = 54H, DISK MANAGEMENT
   506 00000656 [9A03000000000000]  <1>     dq .createPSP           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   507 0000065E [9A03000000000000]  <1>     dq .renameFile          ;AH = 56H, FILE OPERATION       HANDLE
   508 00000666 [9A03000000000000]  <1>     dq .getSetFileDateTime  ;AH = 57H, FILE OPERATION       HANDLE
   509 0000066E [9A03000000000000]  <1>     dq .getsetMallocStrat   ;AH = 58H, MEMORY MANAGEMENT
   510 00000676 [9A03000000000000]  <1>     dq .getExtendedError    ;AH = 59H, MISC. SYS. FUNCTION
   511 0000067E [9A03000000000000]  <1>     dq .createUniqueFile    ;AH = 5AH, FILE OPERATION       HANDLE
   512 00000686 [9A03000000000000]  <1>     dq .createNewFile       ;AH = 5BH, FILE OPERATION       HANDLE
   513 0000068E [9A03000000000000]  <1>     dq .lockUnlockFile      ;AH = 5CH, RECORD OPERATION     HANDLE
   514 00000696 [9A03000000000000]  <1>     dq .getCritErrorInfo    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   515 0000069E [9A03000000000000]  <1>     dq .networkServices     ;AH = 5EH, RESERVED NETWORK FUNCTION
   516 000006A6 [9A03000000000000]  <1>     dq .networkRedirection  ;AH = 5FH, RESERVED NETWORK FUNCTION
   517 000006AE [9A03000000000000]  <1>     dq .trueName            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   518 000006B6 [AD03000000000000]  <1>     dq .return              ;AH = 61H, RESERVED
   519 000006BE [9A03000000000000]  <1>     dq .getPSPaddr          ;AH = 62H, PROCESS MANAGEMENT
   520 000006C6 [AD03000000000000]  <1>     dq .return              ;AH = 63H, RESERVED
   521 000006CE [AD03000000000000]  <1>     dq .setDriverLookahead  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   522 000006D6 [AD03000000000000]  <1>     dq .getExtLocalInfo     ;AH = 65H, MISC. SYS. FUNCTION
   523 000006DE [AD03000000000000]  <1>     dq .getsetGlobalCP      ;AH = 66H, MISC. SYS. FUNCTION
   524 000006E6 [AD03000000000000]  <1>     dq .setHandleCount      ;AH = 67H, FILE OPERAITON       F/H
   525 000006EE [AD03000000000000]  <1>     dq .commitFile          ;AH = 68H, FILE OPERATION       HANDLE
   526 000006F6 [AD03000000000000]  <1>     dq .getsetDiskSerial    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   527                              <1> dispatchTableL  equ $ - .dispatchTable 
   528                              <1> 
   529                              <1> terminateHandler:   ;Int 42h
   530                              <1> ctrlCHandler:       ;Int 43h
   531                              <1> critErrorHandler:   ;Int 44h
   532                              <1> ;User Stack in usage here, must be swapped to before this is called
   533                              <1> ;Entered with:  
   534                              <1> ;               AH = Critical Error Bitfield
   535                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
   536                              <1> ;               Bit 6 - Reserved
   537                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
   538                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
   539                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
   540                              <1> ;               Bits [2-1] = Affected Disk Error
   541                              <1> ;                     0 0   DOS area
   542                              <1> ;                     0 1   FAT area
   543                              <1> ;                     1 0   Directory area
   544                              <1> ;                     1 1   Data area
   545                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   546                              <1> ;               AL  = Failing drive number if AH[7] = 0
   547                              <1> ;               DIL = Error code for errorMsg
   548                              <1> ;               RSI = EA of Device Header for which device the error occured
   549                              <1> ;Return:
   550                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
   551                              <1> ;                  = 1 - Retry the Operation    (Retry)
   552                              <1> ;                  = 2 - Terminate the Program  (Abort)
   553                              <1> ;                  = 3 - Fail the DOS call      (Fail)
   554 000006FE 53                  <1>     push rbx
   555 000006FF 51                  <1>     push rcx
   556 00000700 52                  <1>     push rdx
   557 00000701 57                  <1>     push rdi
   558 00000702 56                  <1>     push rsi
   559 00000703 FC                  <1>     cld         ;Make String ops go forward
   560                              <1> 
   561 00000704 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
   562 00000707 488D155E020000      <1>     lea rdx, qword [.crlf]
   563 0000070E B409                <1>     mov ah, 09h ;Print String
   564 00000710 CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
   565                              <1> 
   566 00000712 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
   567 00000718 B90C000000          <1>     mov ecx, 0Ch
   568 0000071D 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
   569 0000071F 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
   570 00000722 480FB7FF            <1>     movzx rdi, di
   571 00000726 4889FA              <1>     mov rdx, rdi    ;Copy error code
   572 00000729 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
   573 0000072D 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
   574 00000730 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
   575 00000733 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
   576 0000073A 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
   577 0000073E B409                <1>     mov ah, 09h ;Print String
   578 00000740 CD41                <1>     int 41h     ;Call DOS to print first part of message
   579                              <1> 
   580 00000742 488D1505020000      <1>     lea rdx, qword [.readmsg]
   581 00000749 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
   582 00000750 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
   583 00000753 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
   584 00000757 B409                <1>     mov ah, 09h ;Print String
   585 00000759 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
   586                              <1> 
   587 0000075B F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
   588 0000075E 0F85DF000000        <1>     jnz .charError
   589                              <1> ;Disk error continues here
   590 00000764 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
   591 0000076B B409                <1>     mov ah, 09h
   592 0000076D CD41                <1>     int 41h
   593 0000076F 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
   594 00000771 80C241              <1>     add dl, "A" ;Add ASCII code
   595 00000774 B402                <1>     mov ah, 02h ;Print char in dl
   596 00000776 CD41                <1>     int 41h
   597                              <1> .userInput:
   598 00000778 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
   599 0000077F B409                <1>     mov ah, 09h
   600 00000781 CD41                <1>     int 41h
   601                              <1> ;Abort, Retry, Ignore, Fail is word order
   602                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   603                              <1> .userAbort:
   604                              <1> ;Abort is always an option
   605 00000783 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
   606 0000078A B409                <1>     mov ah, 09h
   607 0000078C CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
   608                              <1> .userRetry:
   609 0000078E F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   610 00000791 7416                <1>     jz .userIgnore    ;If clear, dont print message
   611 00000793 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
   612 0000079A B409                <1>     mov ah, 09h
   613 0000079C CD41                <1>     int 41h
   614 0000079E 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
   615 000007A5 B409                <1>     mov ah, 09h
   616 000007A7 CD41                <1>     int 41h
   617                              <1> .userIgnore:
   618 000007A9 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   619 000007AC 7416                <1>     jz .userFail
   620 000007AE 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
   621 000007B5 B409                <1>     mov ah, 09h
   622 000007B7 CD41                <1>     int 41h
   623 000007B9 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
   624 000007C0 B409                <1>     mov ah, 09h
   625 000007C2 CD41                <1>     int 41h
   626                              <1> .userFail:
   627 000007C4 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   628 000007C7 7416                <1>     jz .userMsgEnd
   629 000007C9 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
   630 000007D0 B409                <1>     mov ah, 09h
   631 000007D2 CD41                <1>     int 41h
   632 000007D4 488D15A7010000      <1>     lea rdx, qword [.failmsg]
   633 000007DB B409                <1>     mov ah, 09h
   634 000007DD CD41                <1>     int 41h
   635                              <1> .userMsgEnd:
   636 000007DF 488D15A4010000      <1>     lea rdx, qword [.endMsg]
   637 000007E6 B409                <1>     mov ah, 09h
   638 000007E8 CD41                <1>     int 41h
   639                              <1> ;Get user input now 
   640 000007EA 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   641 000007EC 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   642 000007F3 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   643 000007F5 CD41                <1>     int 41h ;Get char in al
   644 000007F7 3C61                <1>     cmp al, "a" ;Chack if lowercase
   645 000007F9 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   646 000007FB 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   647                              <1> .uip1:
   648 000007FD AE                  <1>     scasb   ;Compare char to list, offset gives return code
   649 000007FE 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   650 00000800 FFC1                <1>     inc ecx
   651 00000802 81F904000000        <1>     cmp ecx, 4
   652 00000808 75F3                <1>     jne .uip1
   653 0000080A E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   654                              <1> .validInput:
   655 0000080F 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   656                              <1> ;Now check if the input is permitted
   657 00000811 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   658 00000813 7427                <1>     je .cehExit
   659 00000815 84C0                <1>     test al, al ;Check if 0 => Ignore
   660 00000817 740F                <1>     je .viIgnore
   661 00000819 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   662 0000081B 7416                <1>     je .viRetry
   663                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   664 0000081D F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   665 00000820 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   666 00000826 EB14                <1>     jmp short .cehExit
   667                              <1> .viIgnore:
   668 00000828 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   669 0000082B 0F8447FFFFFF        <1>     jz .userInput
   670 00000831 EB09                <1>     jmp short .cehExit
   671                              <1> .viRetry:
   672 00000833 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   673 00000836 0F843CFFFFFF        <1>     jz .userInput
   674                              <1> .cehExit:
   675 0000083C 5E                  <1>     pop rsi
   676 0000083D 5F                  <1>     pop rdi
   677 0000083E 5A                  <1>     pop rdx
   678 0000083F 59                  <1>     pop rcx
   679 00000840 5B                  <1>     pop rbx
   680 00000841 48CF                <1>     iretq
   681                              <1> .charError:
   682 00000843 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   683 00000848 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   684                              <1> .ce1:
   685 0000084F AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   686 00000850 88C2                <1>     mov dl, al  ;Move char into dl
   687 00000852 B402                <1>     mov ah, 02h
   688 00000854 CD41                <1>     int 41h ;Print char
   689 00000856 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   690 00000858 E91BFFFFFF          <1>     jmp .userInput
   691                              <1> 
   692                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   693 0000085D 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   693 00000866 746563742024202020  <1>
   694 0000086F 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   694 00000878 6E6974202420202020  <1>
   695 00000881 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   695 0000088A 202420202020202020  <1>
   696 00000893 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   696 0000089C 6F6D6D616E64202420  <1>
   697 000008A5 446174612024202020- <1>             db "Data $            "       ;Error 4
   697 000008AE 202020202020202020  <1>
   698 000008B7 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   698 000008C0 737420242020202020  <1>
   699 000008C9 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   699 000008D2 202020202020202020  <1>
   700 000008DB 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   700 000008E4 656469612024202020  <1>
   701 000008ED 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   701 000008F6 7420466F756E642024  <1>
   702 000008FF 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   702 00000908 706572202420202020  <1>
   703 00000911 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   703 0000091A 6C7420242020202020  <1>
   704 00000923 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   704 0000092C 742024202020202020  <1>
   705 00000935 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   705 0000093E 61696C757265202420  <1>
   706                              <1> 
   707 00000947 64726976652024      <1> .drive      db "drive $"
   708 0000094E 6572726F7220726561- <1> .readmsg    db "error reading $"
   708 00000957 64696E672024        <1>
   709 0000095D 6572726F7220777269- <1> .writemsg   db "error writing $"
   709 00000966 74696E672024        <1>
   710 0000096C 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   711 0000096F 41626F727424        <1> .abortmsg   db "Abort$" 
   712 00000975 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   713 0000097C 526574727924        <1> .retrymsg   db "Retry$"
   714 00000982 4661696C24          <1> .failmsg    db "Fail$"
   715 00000987 2C2024              <1> .betweenMsg db ", $"
   716 0000098A 3F2024              <1> .endMsg     db "? $"
   717 0000098D 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   718                              <1> absDiskRead:        ;Int 45h
   719                              <1> ;al = Drive number
   720                              <1> ;rbx = Memory Buffer address
   721                              <1> ;ecx = Number of sectors to read (max 255 for now)
   722                              <1> ;rdx = Start LBA to read from
   723 00000991 480FB6C0            <1>     movzx rax, al   ;Zero extend DOS drive number 
   724 00000995 8A80[77140000]      <1>     mov al, byte [msdDriver.msdBIOSmap + rax] ;Get translated BIOS num into al
   725 0000099B 4891                <1>     xchg rax, rcx
   726 0000099D 4887CA              <1>     xchg rcx, rdx
   727 000009A0 B482                <1>     mov ah, 82h
   728 000009A2 CD33                <1>     int 33h
   729 000009A4 48CF                <1>     iretq
   730                              <1> absDiskWrite:       ;Int 46h
   731 000009A6 480FB6C0            <1>     movzx rax, al   ;Zero extend DOS drive number 
   732 000009AA 8A80[77140000]      <1>     mov al, byte [msdDriver.msdBIOSmap + rax] ;Get translated BIOS num into al
   733 000009B0 4891                <1>     xchg rax, rcx
   734 000009B2 4887CA              <1>     xchg rcx, rdx
   735 000009B5 B483                <1>     mov ah, 83h
   736 000009B7 CD33                <1>     int 33h
   737 000009B9 48CF                <1>     iretq
   738                              <1> terminateResident:  ;Int 47h
   739                              <1> inDosHandler:       ;Int 48h
   740                              <1> ;Called when DOS idle
   741 000009BB 48CF                <1>     iretq
   742                              <1> fastOutput:         ;Int 49h
   743                              <1> ;Called with char to transfer in al
   744 000009BD 50                  <1>     push rax
   745 000009BE B40E                <1>     mov ah, 0Eh
   746 000009C0 CD30                <1>     int 30h
   747 000009C2 58                  <1>     pop rax
   748 000009C3 48CF                <1>     iretq
   749                              <1> passCommand:        ;Int 4Eh, hooked by COMMAND.COM
   750 000009C5 48CF                <1>     iretq
   751                              <1> multiplex:          ;Int 4Fh, kept as iretq for now
   752 000009C7 48CF                <1>     iretq
    10                                  %include "dosDrivers.asm"
    11                              <1> ;-----------------------------------:
    12                              <1> ;          Driver routines          :
    13                              <1> ;-----------------------------------:
    14                              <1> drivers:
    15                              <1> conHdr:
    16 000009C9 [EB09000000000000]  <1>     dq auxHdr
    17 000009D1 1308                <1>     dw 0813h
    18 000009D3 [610B000000000000]  <1>     dq commonStrat
    19 000009DB [780B000000000000]  <1>     dq conDriver
    20 000009E3 434F4E2020202020    <1>     db "CON     "
    21                              <1> auxHdr:
    22 000009EB [0D0A000000000000]  <1>     dq prnHdr
    23 000009F3 0080                <1>     dw 08000h
    24 000009F5 [610B000000000000]  <1>     dq commonStrat
    25 000009FD [3D0E000000000000]  <1>     dq com1Intr
    26 00000A05 4155582020202020    <1>     db "AUX     "
    27                              <1> prnHdr:
    28 00000A0D [2F0A000000000000]  <1>     dq clkHdr
    29 00000A15 40A0                <1>     dw 0A040h
    30 00000A17 [710B000000000000]  <1>     dq nulStrat
    31 00000A1F [770B000000000000]  <1>     dq nulIntr
    32 00000A27 50524E2020202020    <1>     db "PRN     "
    33                              <1> clkHdr:
    34 00000A2F [510A000000000000]  <1>     dq msdHdr
    35 00000A37 0880                <1>     dw 08008h
    36 00000A39 [610B000000000000]  <1>     dq commonStrat
    37 00000A41 [B00C000000000000]  <1>     dq clkDriver
    38 00000A49 434C4F434B242020    <1>     db "CLOCK$  "
    39                              <1> msdHdr:
    40 00000A51 [730A000000000000]  <1>     dq com1Hdr
    41 00000A59 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    42 00000A5B [610B000000000000]  <1>     dq commonStrat
    43 00000A63 [E20F000000000000]  <1>     dq msdDriver
    44 00000A6B 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    45                              <1> com1Hdr:
    46 00000A73 [950A000000000000]  <1>     dq com2Hdr
    47 00000A7B 0080                <1>     dw 08000h
    48 00000A7D [610B000000000000]  <1>     dq commonStrat
    49 00000A85 [3D0E000000000000]  <1>     dq com1Intr
    50 00000A8D 434F4D3120202020    <1>     db "COM1    "
    51                              <1> com2Hdr:
    52 00000A95 [B70A000000000000]  <1>     dq com3Hdr
    53 00000A9D 0080                <1>     dw 08000h
    54 00000A9F [610B000000000000]  <1>     dq commonStrat
    55 00000AA7 [460E000000000000]  <1>     dq com2Intr
    56 00000AAF 434F4D3220202020    <1>     db "COM2    "
    57                              <1> com3Hdr:
    58 00000AB7 [D90A000000000000]  <1>     dq com4Hdr
    59 00000ABF 0080                <1>     dw 08000h
    60 00000AC1 [610B000000000000]  <1>     dq commonStrat
    61 00000AC9 [4F0E000000000000]  <1>     dq com3Intr
    62 00000AD1 434F4D3320202020    <1>     db "COM3    "
    63                              <1> com4Hdr:
    64 00000AD9 [FB0A000000000000]  <1>     dq lpt1Hdr
    65 00000AE1 0080                <1>     dw 08000h
    66 00000AE3 [610B000000000000]  <1>     dq commonStrat
    67 00000AEB [580E000000000000]  <1>     dq com4Intr
    68 00000AF3 434F4D3420202020    <1>     db "COM4    "
    69                              <1> lpt1Hdr:
    70 00000AFB [1D0B000000000000]  <1>     dq lpt2Hdr
    71 00000B03 40A0                <1>     dw 0A040h
    72 00000B05 [710B000000000000]  <1>     dq nulStrat
    73 00000B0D [770B000000000000]  <1>     dq nulIntr
    74 00000B15 4C50543120202020    <1>     db "LPT1    "
    75                              <1> lpt2Hdr:
    76 00000B1D [3F0B000000000000]  <1>     dq lpt3Hdr
    77 00000B25 40A0                <1>     dw 0A040h
    78 00000B27 [710B000000000000]  <1>     dq nulStrat
    79 00000B2F [770B000000000000]  <1>     dq nulIntr
    80 00000B37 4C50543220202020    <1>     db "LPT2    "
    81                              <1> lpt3Hdr:
    82 00000B3F FFFFFFFFFFFFFFFF    <1>     dq -1
    83 00000B47 40A0                <1>     dw 0A040h
    84 00000B49 [710B000000000000]  <1>     dq nulStrat
    85 00000B51 [770B000000000000]  <1>     dq nulIntr
    86 00000B59 4C50543320202020    <1>     dq "LPT3    "
    87                              <1> 
    88                              <1> commonStrat:
    89                              <1> ;DOS calls this function with rbx=Ptr to request header
    90 00000B61 48891D01000000      <1>     mov qword [reqHdrPtr], rbx
    91 00000B68 C3                  <1>     ret
    92 00000B69 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    93                              <1> 
    94                              <1> nulStrat:
    95 00000B71 66C743030001        <1>     mov word [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
    96                              <1> nulIntr:
    97 00000B77 C3                  <1>     ret
    98                              <1> 
    99                              <1> conDriver:
   100 00000B78 50                  <1>     push rax
   101 00000B79 53                  <1>     push rbx
   102 00000B7A 488B1DE8FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
   103 00000B81 B003                <1>     mov al, 03h ;Unknown Command
   104 00000B83 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   105 00000B87 7735                <1>     ja .conWriteErrorCode ;If yes, error!
   106                              <1> 
   107 00000B89 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   108 00000B8C 3C04                <1>     cmp al, 4
   109 00000B8E 743D                <1>     jz .conRead
   110 00000B90 3C05                <1>     cmp al, 5
   111 00000B92 747F                <1>     jz .conNondestructiveRead
   112 00000B94 3C06                <1>     cmp al, 6
   113 00000B96 0F84A8000000        <1>     jz .conInputStatus
   114 00000B9C 3C07                <1>     cmp al, 7
   115 00000B9E 0F84B0000000        <1>     jz .conFlushInputBuffers
   116 00000BA4 3C08                <1>     cmp al, 8
   117 00000BA6 0F84CA000000        <1>     jz .conWrite
   118 00000BAC 3C09                <1>     cmp al, 9
   119 00000BAE 0F84C2000000        <1>     jz .conWrite
   120 00000BB4 3C0A                <1>     cmp al, 0Ah
   121 00000BB6 0F84E3000000        <1>     jz .conOutputStatus
   122 00000BBC EB06                <1>     jmp short .conExit  ;All other valid functions return done
   123                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
   124 00000BBE B480                <1>     mov ah, 80h ;Set error bit
   125 00000BC0 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   126                              <1> .conExit:
   127 00000BC4 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   128 00000BCA 5B                  <1>     pop rbx
   129 00000BCB 58                  <1>     pop rax
   130 00000BCC C3                  <1>     ret
   131                              <1> .conRead:    ;Function 4
   132 00000BCD B005                <1>     mov al, 05h ;Bad request structure length?
   133 00000BCF 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   134 00000BD2 75EA                <1>     jne .conWriteErrorCode
   135                              <1> 
   136 00000BD4 57                  <1>     push rdi
   137 00000BD5 51                  <1>     push rcx
   138 00000BD6 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   139 00000BDA 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   140                              <1> .cre1:
   141 00000BDC 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   142 00000BDF 741C                <1>     je .cre2
   143 00000BE1 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
   144 00000BE8 751A                <1>     jnz .cre3   ;No, get the buffer value
   145 00000BEA 31C0                <1>     xor eax, eax
   146 00000BEC CD36                <1>     int 36h
   147                              <1> .cre11:
   148 00000BEE AA                  <1>     stosb
   149 00000BEF 84C0                <1>     test al, al ;Was the ascii code 0?
   150 00000BF1 7506                <1>     jnz .cre12  ;No, skip storing scancode
   151 00000BF3 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
   152                              <1> .cre12:
   153 00000BF9 FFC1                <1>     inc ecx ;Inc chars stored in buffer
   154 00000BFB EBDF                <1>     jmp short .cre1
   155                              <1> .cre2:
   156 00000BFD 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   157 00000C00 59                  <1>     pop rcx
   158 00000C01 5F                  <1>     pop rdi
   159 00000C02 EBC0                <1>     jmp short .conExit
   160                              <1> .cre3:
   161 00000C04 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   162 00000C0A C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   163 00000C11 EBDB                <1>     jmp short .cre11
   164                              <1> 
   165                              <1> .conNondestructiveRead:  ;Function 5
   166 00000C13 B005                <1>     mov al, 05h ;Bad request structure length?
   167 00000C15 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   168 00000C18 75A4                <1>     jne .conWriteErrorCode
   169 00000C1A 803D8E00000000      <1>     cmp byte [.conBuf], 0
   170 00000C21 7519                <1>     jnz .cnr2
   171 00000C23 B401                <1>     mov ah, 01h     ;Get key if exists
   172 00000C25 CD36                <1>     int 36h
   173 00000C27 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   174                              <1>     ;Keystroke available
   175                              <1> .cnr0:
   176 00000C29 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Move char in al
   177 00000C2C E993FFFFFF          <1>     jmp .conExit
   178                              <1> .cnr1: ;No keystroke available
   179 00000C31 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 0200h   ;Set busy bit
   180 00000C37 E988FFFFFF          <1>     jmp .conExit
   181                              <1> .cnr2:
   182 00000C3C 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   183 00000C42 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   184                              <1> 
   185                              <1> .conInputStatus:         ;Function 6
   186 00000C44 B005                <1>     mov al, 05h ;Bad request structure length?
   187 00000C46 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   188 00000C49 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   189 00000C4F E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   190                              <1> 
   191                              <1> .conFlushInputBuffers:   ;Function 7
   192 00000C54 B005                <1>     mov al, 05h ;Bad request structure length?
   193 00000C56 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   194 00000C59 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   195 00000C5F C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   196                              <1> .cfib0:
   197 00000C66 B401                <1>     mov ah, 01      ;Get buffer status
   198 00000C68 CD36                <1>     int 36h
   199 00000C6A 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   200 00000C70 30E4                <1>     xor ah, ah
   201 00000C72 CD36                <1>     int 36h ;Read key to flush from buffer
   202 00000C74 EBF0                <1>     jmp short .cfib0
   203                              <1> 
   204                              <1> .conWrite:   ;Function 8 and 9
   205 00000C76 B005                <1>     mov al, 05h ;Bad request structure length?
   206 00000C78 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   207 00000C7B 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   208                              <1> 
   209 00000C81 56                  <1>     push rsi
   210 00000C82 51                  <1>     push rcx
   211 00000C83 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   212 00000C87 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   213                              <1> .cw1: 
   214 00000C89 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   215 00000C8C 7407                <1>     je .cw2
   216 00000C8E AC                  <1>     lodsb   ;Get char into al, and inc rsi
   217 00000C8F CD49                <1>     int 49h ;Fast print char
   218 00000C91 FFC1                <1>     inc ecx
   219 00000C93 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   220                              <1> .cw2:
   221 00000C95 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   222 00000C98 59                  <1>     pop rcx
   223 00000C99 5E                  <1>     pop rsi
   224 00000C9A E925FFFFFF          <1>     jmp .conExit
   225                              <1> .conOutputStatus:   ;Function 0Ah
   226 00000C9F B005                <1>     mov al, 05h ;Bad request structure length?
   227 00000CA1 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   228 00000CA4 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   229 00000CAA E915FFFFFF          <1>     jmp .conExit
   230                              <1> 
   231 00000CAF 00                  <1> .conBuf db 0    ;Single byte buffer
   232                              <1> clkDriver:
   233 00000CB0 50                  <1>     push rax
   234 00000CB1 53                  <1>     push rbx
   235 00000CB2 51                  <1>     push rcx
   236 00000CB3 52                  <1>     push rdx
   237 00000CB4 56                  <1>     push rsi
   238 00000CB5 55                  <1>     push rbp
   239 00000CB6 488B1DACFEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   240 00000CBD B003                <1>     mov al, 03h ;Unknown Command
   241 00000CBF 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   242 00000CC3 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   243                              <1> 
   244 00000CC5 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   245 00000CC8 3C04                <1>     cmp al, 04h
   246 00000CCA 7437                <1>     jz .clkRead
   247 00000CCC 3C06                <1>     cmp al, 06h
   248 00000CCE 0F8494000000        <1>     jz .clkInputStatus
   249 00000CD4 3C07                <1>     cmp al, 07h
   250 00000CD6 0F8498000000        <1>     jz .clkFlushInputBuffers
   251 00000CDC 3C08                <1>     cmp al, 08h
   252 00000CDE 0F84A0000000        <1>     jz .clkWrite
   253 00000CE4 3C09                <1>     cmp al, 09h
   254 00000CE6 0F8498000000        <1>     jz .clkWrite
   255 00000CEC EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   256                              <1> .clkNotFunctioning:
   257 00000CEE B002                <1>     mov al, 02h ;Device not ready error
   258                              <1> .clkWriteErrorCode:
   259 00000CF0 B480                <1>     mov ah, 80h ;Set error bit
   260 00000CF2 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   261                              <1> .clkExit:
   262 00000CF6 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   263 00000CFC 5D                  <1>     pop rbp
   264 00000CFD 5E                  <1>     pop rsi
   265 00000CFE 5A                  <1>     pop rdx
   266 00000CFF 59                  <1>     pop rcx
   267 00000D00 5B                  <1>     pop rbx
   268 00000D01 58                  <1>     pop rax
   269 00000D02 C3                  <1>     ret
   270                              <1> 
   271                              <1> .clkRead:           ;Function 4
   272 00000D03 B005                <1>     mov al, 05h ;Bad request structure length?
   273 00000D05 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   274 00000D08 75E6                <1>     jne .clkWriteErrorCode
   275                              <1> 
   276 00000D0A 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   277 00000D0D 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   278 00000D11 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   279 00000D18 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   280 00000D1C 30E4                <1>     xor ah, ah
   281 00000D1E CD3A                <1>     int 3Ah         ;Read the system timer
   282 00000D20 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   283 00000D22 740D                <1>     jz .clkr1       ;Nope, now just time 
   284 00000D24 30E4                <1>     xor ah, ah
   285                              <1>     ;This works as al should keep count of the # of days passed since last read
   286 00000D26 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   287 00000D2A 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   288                              <1> .clkr1:
   289 00000D31 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   290 00000D34 0FB7D2              <1>     movzx edx, dx
   291 00000D37 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   292 00000D39 89D0                <1>     mov eax, edx
   293 00000D3B 31D2                <1>     xor edx, edx
   294 00000D3D 89D8                <1>     mov eax, ebx
   295 00000D3F B944040000          <1>     mov ecx, 1092   
   296 00000D44 F7F1                <1>     div ecx
   297 00000D46 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   298 00000D49 89D0                <1>     mov eax, edx    ;Get remainder in eax
   299 00000D4B 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   300 00000D4F 31D2                <1>     xor edx, edx
   301 00000D51 B95B000000          <1>     mov ecx, 91 ;5*18.2
   302 00000D56 F7F1                <1>     div ecx
   303 00000D58 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   304 00000D5B 89D0                <1>     mov eax, edx    ;Get remainder in eax
   305                              <1>     ;lea eax, dword [eax + 4*eax]
   306                              <1>     ;add eax, edx    ;Essentially multiply by 6
   307 00000D5D 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   308 00000D60 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   309 00000D63 E98EFFFFFF          <1>     jmp .clkExit
   310                              <1> 
   311                              <1> .clkInputStatus:    ;Function 6
   312                              <1> ;Always return ready
   313 00000D68 B005                <1>     mov al, 05h ;Bad request structure length?
   314 00000D6A 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   315 00000D6D 7581                <1>     jne .clkWriteErrorCode
   316 00000D6F E982FFFFFF          <1>     jmp .clkExit
   317                              <1> .clkFlushInputBuffers:  ;Function 7
   318                              <1> ;Always return done immediately
   319 00000D74 B005                <1>     mov al, 05h ;Bad request structure length?
   320 00000D76 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   321 00000D79 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   322 00000D7F E972FFFFFF          <1>     jmp .clkExit
   323                              <1> 
   324                              <1> .clkWrite:          ;Functions 8 and 9
   325 00000D84 B005                <1>     mov al, 05h ;Bad request structure length?
   326 00000D86 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   327 00000D89 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   328                              <1> 
   329 00000D8F 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   330 00000D92 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   331 00000D96 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   332 00000D9A 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   333                              <1> 
   334 00000DA1 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   335 00000DA3 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   336 00000DA7 B105                <1>     mov cl, 5
   337 00000DA9 F6F1                <1>     div cl          ;Divide al by 5
   338 00000DAB 30E4                <1>     xor ah, ah      ;Remove the remainder
   339 00000DAD 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   340                              <1> ;Using the decimal part of this formula for the low count
   341                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   342 00000DAF 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   343 00000DB2 B912000000          <1>     mov ecx, 18
   344 00000DB7 F7E1                <1>     mul ecx  
   345 00000DB9 01C3                <1>     add ebx, eax
   346                              <1> 
   347 00000DBB 31D2                <1>     xor edx, edx
   348 00000DBD 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   349 00000DC1 B944040000          <1>     mov ecx, 1092
   350 00000DC6 F7E1                <1>     mul ecx
   351 00000DC8 01C3                <1>     add ebx, eax
   352 00000DCA 89DA                <1>     mov edx, ebx    ;edx now has low count
   353 00000DCC 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   354 00000DD0 B401                <1>     mov ah, 01h     ;Set the system time
   355 00000DD2 CD3A                <1>     int 3Ah
   356                              <1> 
   357 00000DD4 4889F3              <1>     mov rbx, rsi
   358 00000DD7 E91AFFFFFF          <1>     jmp .clkExit
   359                              <1> 
   360                              <1> .clkBCDtoHex:
   361                              <1> ;Converts a BCD value to a Hex byte
   362                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   363 00000DDC 51                  <1>     push rcx
   364 00000DDD 0FB6C0              <1>     movzx eax, al   ;Zero extend
   365 00000DE0 89C1                <1>     mov ecx, eax    ;Save al in ecx
   366 00000DE2 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   367 00000DE7 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   368 00000DED C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   369                              <1> .cbth0:
   370 00000DF0 050A000000          <1>     add eax, 10
   371 00000DF5 E2F9                <1>     loop .cbth0
   372 00000DF7 59                  <1>     pop rcx
   373 00000DF8 C3                  <1>     ret
   374                              <1> 
   375                              <1> .clkHexToBCD:
   376                              <1> ;Converts a Hex byte into two BCD digits
   377                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   378 00000DF9 51                  <1>     push rcx
   379 00000DFA 0FB6C0              <1>     movzx eax, al   ;Zero extend
   380 00000DFD 31C9                <1>     xor ecx, ecx
   381                              <1> .chtb0:
   382 00000DFF 3D0A000000          <1>     cmp eax, 10
   383 00000E04 7209                <1>     jb .chtb1
   384 00000E06 2D0A000000          <1>     sub eax, 10
   385 00000E0B FFC1                <1>     inc ecx
   386 00000E0D EBF0                <1>     jmp short .chtb0
   387                              <1> .chtb1:
   388 00000E0F C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   389 00000E12 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   390 00000E14 59                  <1>     pop rcx
   391 00000E15 C3                  <1>     ret
   392 00000E16 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   393                              <1> ;When counting the number of days, first compute the number of years since
   394                              <1> ; 1980 and your year. 
   395                              <1> ;Then, using the table below, find the number of leap years between 1980
   396                              <1> ; and (YourYear - 1). 
   397                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   398                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   399                              <1> ;Use the months table to get the number of days in a normal month as leap 
   400                              <1> ; years are added using the previous comment.
   401                              <1> ;Finally check if the date is after 28th Feb. If it is, check if your year is 
   402                              <1> ; a leap year using the table. If it is, add an extra day.
   403                              <1> .clkLeapYears:
   404 00000E18 0004080C1014181C20- <1>     db 00, 04, 08, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 
   404 00000E21 24282C30            <1>
   405 00000E25 34383C4044484C5054- <1>     db 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96
   405 00000E2E 585C60              <1>
   406                              <1> .clkMonths:
   407 00000E31 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   407 00000E3A 1F1E1F              <1>
   408                              <1> ;COM Driver headers and main interrupt strat
   409                              <1> com1Intr:
   410 00000E3D C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   411 00000E44 EB19                <1>     jmp short comIntr
   412                              <1> com2Intr:
   413 00000E46 C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   414 00000E4D EB10                <1>     jmp short comIntr
   415                              <1> com3Intr:
   416 00000E4F C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   417 00000E56 EB07                <1>     jmp short comIntr
   418                              <1> com4Intr:
   419 00000E58 C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   420                              <1> comIntr:
   421 00000E5F 50                  <1>     push rax
   422 00000E60 53                  <1>     push rbx
   423 00000E61 51                  <1>     push rcx
   424 00000E62 52                  <1>     push rdx
   425 00000E63 56                  <1>     push rsi
   426 00000E64 57                  <1>     push rdi
   427 00000E65 488B1DFDFCFFFF      <1>     mov rbx, qword [reqHdrPtr]
   428 00000E6C B003                <1>     mov al, 03h ;Unknown Command
   429 00000E6E 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   430 00000E72 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   431                              <1> 
   432 00000E74 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   433 00000E77 3C04                <1>     cmp al, 4   ;Read Character(s)
   434 00000E79 7462                <1>     jz .comRead
   435 00000E7B 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   436 00000E7D 0F849B000000        <1>     jz .comNondestructiveRead   
   437 00000E83 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   438 00000E85 0F8484000000        <1>     jz .comReadInputStatus
   439 00000E8B 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   440 00000E8D 0F84B9000000        <1>     jz .comFlushInputBuffers
   441 00000E93 3C08                <1>     cmp al, 8
   442 00000E95 0F84DB000000        <1>     jz .comWrite
   443 00000E9B 3C09                <1>     cmp al, 9
   444 00000E9D 0F84D3000000        <1>     jz .comWrite
   445 00000EA3 3C0A                <1>     cmp al, 0Ah
   446 00000EA5 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   447 00000EAB EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   448                              <1> .comErrorNoCount:
   449 00000EAD B002                <1>     mov al, 02h ;Unknown device
   450 00000EAF EB19                <1>     jmp short .comWriteErrorCode
   451                              <1> .comReadError:
   452 00000EB1 BA0B000000          <1>     mov edx, 0Bh
   453                              <1> .comWriteError:
   454 00000EB6 BA0A000000          <1>     mov edx, 0Ah
   455                              <1> .comError:
   456 00000EBB 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   457 00000EBE B902000000          <1>     mov ecx, 02h    ;Unknown device
   458 00000EC3 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   459 00000EC5 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   460 00000EC8 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   461                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   462 00000ECA B480                <1>     mov ah, 80h ;Set error bit
   463 00000ECC 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   464                              <1> .comExit:
   465 00000ED0 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   466 00000ED6 5F                  <1>     pop rdi
   467 00000ED7 5E                  <1>     pop rsi
   468 00000ED8 5A                  <1>     pop rdx
   469 00000ED9 59                  <1>     pop rcx
   470 00000EDA 5B                  <1>     pop rbx
   471 00000EDB 58                  <1>     pop rax
   472 00000EDC C3                  <1>     ret
   473                              <1> 
   474                              <1> .comRead:
   475 00000EDD B005                <1>     mov al, 05h ;Bad request structure length?
   476 00000EDF 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   477 00000EE2 75E6                <1>     jne .comWriteErrorCode
   478                              <1> 
   479 00000EE4 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   480 00000EE8 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   481                              <1> .cr1:
   482 00000EEA 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   483 00000EED 741B                <1>     je .cre2
   484                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   485 00000EEF B802000000          <1>     mov eax, 02h    ;Recieve 
   486 00000EF4 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   487 00000EFA 6698                <1>     cbw     ;Zero extend to upper byte
   488 00000EFC CD34                <1>     int 34h ;Recieve Char
   489 00000EFE 72BB                <1>     jc .comError
   490 00000F00 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   491 00000F03 74EA                <1>     je .cr11
   492 00000F05 AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   493 00000F06 FFC1                <1>     inc ecx
   494 00000F08 EBE0                <1>     jmp short .cr1
   495                              <1> .cre2:
   496 00000F0A 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   497 00000F0D EBC1                <1>     jmp short .comExit
   498                              <1> 
   499                              <1> .comReadInputStatus:
   500 00000F0F B005                <1>     mov al, 05h ;Bad request structure length?
   501 00000F11 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   502 00000F14 75B4                <1>     jne .comWriteErrorCode
   503 00000F16 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   504 00000F1C EBB2                <1>     jmp short .comExit
   505                              <1> 
   506                              <1> .comNondestructiveRead:
   507                              <1> ;Acts like a "read one character if there is one" function
   508 00000F1E B005                <1>     mov al, 05h ;Bad request structure length?
   509 00000F20 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   510 00000F23 75A5                <1>     jne .comWriteErrorCode
   511                              <1> .cndr1:
   512 00000F25 B802000000          <1>     mov eax, 02h    ;Recieve 
   513 00000F2A 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   514 00000F30 6698                <1>     cbw     ;Zero extend to upper byte
   515 00000F32 CD34                <1>     int 34h ;Recieve Char
   516 00000F34 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   517 00000F3A 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   518 00000F3D 7405                <1>     je .cndr2
   519 00000F3F 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Get next char
   520 00000F42 EB8C                <1>     jmp short .comExit
   521                              <1> .cndr2:
   522 00000F44 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 200h ;Busy bit set
   523 00000F4A EB84                <1>     jmp short .comExit
   524                              <1> 
   525                              <1> .comFlushInputBuffers:
   526 00000F4C B005                <1>     mov al, 05h ;Bad request structure length?
   527 00000F4E 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   528 00000F51 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   529                              <1> .cfib0:
   530 00000F57 8A1584000000        <1>     mov dl, byte [.comDevice]
   531 00000F5D 6698                <1>     cbw
   532 00000F5F B802000000          <1>     mov eax, 02h    ;Recieve
   533 00000F64 CD34                <1>     int 34h
   534 00000F66 0F8241FFFFFF        <1>     jc .comErrorNoCount
   535 00000F6C 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   536 00000F6F 75E6                <1>     jne .cfib0
   537 00000F71 E95AFFFFFF          <1>     jmp .comExit
   538                              <1> 
   539                              <1> .comWrite:
   540 00000F76 B005                <1>     mov al, 05h ;Bad request structure length?
   541 00000F78 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   542 00000F7B 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   543                              <1> 
   544 00000F81 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   545 00000F85 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   546                              <1> .cw1: 
   547 00000F87 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   548 00000F8A 7417                <1>     je .cw2
   549 00000F8C AC                  <1>     lodsb   ;Get char into al, and inc rsi
   550 00000F8D B401                <1>     mov ah, 01h ;Move function number into ah
   551 00000F8F 8A154C000000        <1>     mov dl, byte [.comDevice]
   552 00000F95 6698                <1>     cbw     ;Zero extend to upper byte
   553 00000F97 CD34                <1>     int 34h ;Transmit char
   554 00000F99 0F821CFFFFFF        <1>     jc .comError
   555 00000F9F FFC1                <1>     inc ecx
   556 00000FA1 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   557                              <1> .cw2:
   558 00000FA3 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   559 00000FA6 E925FFFFFF          <1>     jmp .comExit
   560                              <1> 
   561                              <1> .comOutputStatus:
   562                              <1> ;Read MODEM status
   563 00000FAB B005                <1>     mov al, 05h ;Bad request structure length?
   564 00000FAD 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   565 00000FB0 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   566                              <1> 
   567 00000FB6 8A1525000000        <1>     mov dl, byte [.comDevice]
   568 00000FBC 6698                <1>     cbw     ;Zero extend to upper byte
   569 00000FBE B403                <1>     mov ah, 03h     ;Get status
   570 00000FC0 CD34                <1>     int 34h
   571 00000FC2 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   572 00000FC8 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   573 00000FCD C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   574 00000FD0 F7D0                <1>     not eax      ;Bitwise inversion
   575 00000FD2 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   576 00000FD7 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   577 00000FDC E9EFFEFFFF          <1>     jmp .comExit
   578 00000FE1 00                  <1> .comDevice   db 0
   579                              <1> 
   580                              <1> msdDriver:
   581 00000FE2 50                  <1>     push rax
   582 00000FE3 53                  <1>     push rbx
   583 00000FE4 51                  <1>     push rcx
   584 00000FE5 52                  <1>     push rdx
   585 00000FE6 56                  <1>     push rsi
   586 00000FE7 57                  <1>     push rdi
   587 00000FE8 55                  <1>     push rbp
   588 00000FE9 4150                <1>     push r8
   589 00000FEB 488B1D77FBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
   590 00000FF2 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   591 00000FF6 B003                <1>     mov al, 03h
   592 00000FF8 0F87F9000000        <1>     ja .msdWriteErrorCode ;If yes, error!
   593 00000FFE B001                <1>     mov al, 01h ;Unknown Unit Error
   594 00001000 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
   595 00001004 0F87ED000000        <1>     ja .msdWriteErrorCode ;If yes, error!
   596 0000100A 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
   597 0000100D 84C0                <1>     test al, al
   598 0000100F 0F84F8000000        <1>     jz .msdInit
   599 00001015 3C01                <1>     cmp al, 01
   600 00001017 0F84C9010000        <1>     jz .msdMedChk
   601 0000101D 3C02                <1>     cmp al, 02
   602 0000101F 0F8432020000        <1>     jz .msdBuildBPB
   603 00001025 3C03                <1>     cmp al, 03
   604 00001027 0F8498020000        <1>     jz .msdIOCTLRead
   605 0000102D 3C04                <1>     cmp al, 04
   606 0000102F 0F84A0020000        <1>     jz .msdRead
   607 00001035 3C08                <1>     cmp al, 08
   608 00001037 0F84D4020000        <1>     jz .msdWrite
   609 0000103D 3C09                <1>     cmp al, 09
   610 0000103F 0F8408030000        <1>     jz .msdWriteVerify
   611 00001045 3C0C                <1>     cmp al, 12
   612 00001047 0F8449030000        <1>     jz .msdIOCTLWrite
   613 0000104D 3C0D                <1>     cmp al, 13
   614 0000104F 0F8451030000        <1>     jz .msdDevOpen
   615 00001055 3C0E                <1>     cmp al, 14
   616 00001057 0F8468030000        <1>     jz .msdDevClose
   617 0000105D 3C0F                <1>     cmp al, 15
   618 0000105F 0F847F030000        <1>     jz .msdRemovableMedia
   619 00001065 3C13                <1>     cmp al, 19
   620 00001067 0F84A4030000        <1>     jz .msdGenericIOCTL
   621 0000106D 3C17                <1>     cmp al, 23
   622 0000106F 0F84AC030000        <1>     jz .msdGetLogicalDev
   623 00001075 3C18                <1>     cmp al, 24
   624 00001077 0F84BD030000        <1>     jz .msdSetLogicalDev
   625 0000107D EB7E                <1>     jmp short .msdDriverExit    ;All other valid functions exit done
   626                              <1> .msdIOError:  ;In Read and Write errors, rbp points to the dev struc
   627 0000107F 4889EB              <1>     mov rbx, rbp
   628 00001082 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
   629 00001085 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
   630 00001087 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
   631                              <1> ;Now fall through to general error
   632                              <1> .msdGenDiskError:
   633 0000108A B401                <1>     mov ah, 01h
   634 0000108C 30D2                <1>     xor dl, dl  ;Work around bug that fails request if dl > 7Fh
   635 0000108E CD33                <1>     int 33h ;Read status of last operation
   636 00001090 80FC06              <1>     cmp ah, 06h ;Mock Seek response (device not present)
   637 00001093 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
   638 00001095 7460                <1>     je .msdWriteErrorCode 
   639 00001097 B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
   640 00001099 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
   641 0000109C 7459                <1>     je .msdWriteErrorCode 
   642 0000109E 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
   643 000010A1 7454                <1>     je .msdWriteErrorCode
   644                              <1> ;Device Not Ready
   645 000010A3 B002                <1>     mov al, 02h  ;Device not ready code
   646 000010A5 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   647 000010A8 744D                <1>     je .msdWriteErrorCode
   648 000010AA 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   649 000010AE 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   650                              <1> ;Write Protected
   651 000010B2 30C0                <1>     xor al, al
   652 000010B4 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   653 000010B9 743C                <1>     je .msdWriteErrorCode
   654                              <1> ;CRC Error
   655 000010BB B004                <1>     mov al, 04h     ;CRC error code
   656 000010BD 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   657 000010C2 7433                <1>     je .msdWriteErrorCode
   658 000010C4 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   659 000010C9 742C                <1>     je .msdWriteErrorCode
   660 000010CB 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   661 000010D0 7425                <1>     je .msdWriteErrorCode
   662                              <1> ;Seek Error
   663 000010D2 B006                <1>     mov al, 06h     ;Seek error code
   664 000010D4 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   665 000010D7 741E                <1>     je .msdWriteErrorCode
   666                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   667                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   668 000010D9 B007                <1>     mov al, 07h
   669 000010DB 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   670 000010DE 7417                <1>     je .msdWriteErrorCode
   671                              <1> ;Sector Not Found
   672 000010E0 B008                <1>     mov al, 08h     ;Sector not found code
   673 000010E2 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   674 000010E5 7410                <1>     je .msdWriteErrorCode
   675                              <1> ;Write faults
   676 000010E7 B00A                <1>     mov al, 0Ah     ;Write fault
   677 000010E9 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   678 000010EC 7409                <1>     je .msdWriteErrorCode
   679                              <1> ;Read faults
   680 000010EE B00B                <1>     mov al, 0Bh     ;Read fault
   681 000010F0 80F911              <1>     cmp cl, 11h     ;Read error
   682 000010F3 7402                <1>     je .msdWriteErrorCode
   683                              <1> ;General Errors
   684 000010F5 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   685                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   686 000010F7 B480                <1>     mov ah, 80h ;Set error bit
   687 000010F9 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   688                              <1> .msdDriverExit:
   689 000010FD 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
   690 00001103 4158                <1>     pop r8
   691 00001105 5D                  <1>     pop rbp
   692 00001106 5F                  <1>     pop rdi
   693 00001107 5E                  <1>     pop rsi
   694 00001108 5A                  <1>     pop rdx
   695 00001109 59                  <1>     pop rcx
   696 0000110A 5B                  <1>     pop rbx
   697 0000110B 58                  <1>     pop rax
   698 0000110C C3                  <1>     ret
   699                              <1> .msdInit:            ;Function 0
   700 0000110D B005                <1>     mov al, 05h ;Bad request structure length
   701 0000110F 803B1F              <1>     cmp byte [rbx + drvReqHdr.hdrlen], initReqPkt_size
   702 00001112 75E3                <1>     jne .msdWriteErrorCode
   703                              <1> 
   704 00001114 488D2DE6050000      <1>     lea rbp, endptr
   705 0000111B 48896B0E            <1>     mov qword [rbx + initReqPkt.endptr], rbp    ;Where the end is gonna be
   706 0000111F 488D2D5B030000      <1>     lea rbp, .msdBPBTbl
   707 00001126 48896B16            <1>     mov qword [rbx + initReqPkt.optptr], rbp    ;Where bpb tbl is gonna be
   708                              <1> 
   709 0000112A 4889DD              <1>     mov rbp, rbx ;Save the req block ptr in rbp
   710 0000112D 31D2                <1>     xor edx, edx  ;Start from device zero
   711 0000112F 88550D              <1>     mov byte [rbp + initReqPkt.numunt], dl   ;Zero this field, max 5
   712                              <1> .mi0:   ;Now check each device for partitions
   713 00001132 807D0D05            <1>     cmp byte [rbp + initReqPkt.numunt], 5
   714 00001136 746C                <1>     je .msdExit ;IF we are at 5 now, we exit
   715 00001138 B482                <1>     mov ah, 82h ;LBA read
   716 0000113A B001                <1>     mov al, 1   ;1 sector
   717 0000113C B900000000          <1>     mov ecx, 0  ;Read sector 0
   718 00001141 488D1D(3B010000)    <1>     lea rbx, msdTempBuffer  ;Get address of this space
   719 00001148 CD33                <1>     int 33h
   720 0000114A 0F828E000000        <1>     jc .msdInitError
   721                              <1> ;Now we verify if this is a BPB. Removable devices can't be partitioned (yet)
   722                              <1> ;1) Check byte 0 for EBh (short jmp) and byte 2 for a 90h (nop).
   723 00001150 8A03                <1>     mov al, byte [rbx]
   724 00001152 8A6302              <1>     mov ah, byte [rbx + 2]
   725 00001155 663DEB90            <1>     cmp ax, 090EBh
   726 00001159 7573                <1>     jne .mimbr
   727                              <1> ;Valid BPB found! Copy to internal table and inc lastdrive
   728 0000115B 4889DE              <1>     mov rsi, rbx
   729 0000115E B878000000          <1>     mov eax, bpbEx_size
   730 00001163 89D1                <1>     mov ecx, edx    ;Temporarily save dl in ecx
   731 00001165 F7E2                <1>     mul edx
   732 00001167 89CA                <1>     mov edx, ecx
   733 00001169 488D3D39030000      <1>     lea rdi, .msdBPBblks
   734 00001170 4801C7              <1>     add rdi, rax
   735 00001173 B978000000          <1>     mov ecx, bpbEx_size
   736 00001178 4889F8              <1>     mov rax, rdi    ;Save the entry address in rax
   737 0000117B F3A4                <1>     rep movsb   ;Copy the bpb into the bpb table
   738 0000117D 488D3DFD020000      <1>     lea rdi, .msdBPBTbl
   739 00001184 488D3CD7            <1>     lea rdi, qword [rdi + 8*rdx]
   740 00001188 488907              <1>     mov qword [rdi], rax
   741 0000118B 488D3DE5020000      <1>     lea rdi, .msdBIOSmap
   742 00001192 4801D7              <1>     add rdi, rdx    ;rdx contains a number, table is a list of bytes
   743 00001195 8817                <1>     mov byte [rdi], dl
   744 00001197 FE450D              <1>     inc byte [rbp + initReqPkt.numunt]
   745 0000119A FEC2                <1>     inc dl
   746 0000119C 3A15(09000000)      <1>     cmp dl, byte [numMSDdrv] ;Once these are equal, we have processed last dev
   747 000011A2 758E                <1>     jne .mi0
   748                              <1> .msdExit:
   749                              <1> ;If one device only, copy its BPB pointer and drive number
   750                              <1> ;When HDD support implemented, this will check the number of remdevs not lastdrv
   751 000011A4 807D0D01            <1>     cmp byte [rbp + initReqPkt.numunt], 1
   752 000011A8 751C                <1>     jne .msdexit1
   753                              <1> ;Here ONLY if one device found
   754 000011AA 488D35D0020000      <1>     lea rsi, .msdBPBTbl
   755 000011B1 488D7E08            <1>     lea rdi, qword [rsi + 8]    ;Point to next entry
   756 000011B5 48A5                <1>     movsq   ;Copy pointer
   757 000011B7 488D35B9020000      <1>     lea rsi, .msdBIOSmap
   758 000011BE 488D7E01            <1>     lea rdi, qword [rsi + 1]
   759 000011C2 A4                  <1>     movsb   ;Copy byte
   760 000011C3 FE450D              <1>     inc byte [rbp + initReqPkt.numunt]
   761                              <1> .msdexit1:
   762 000011C6 4889EB              <1>     mov rbx, rbp
   763 000011C9 E92FFFFFFF          <1>     jmp .msdDriverExit
   764                              <1> .mimbr:
   765                              <1> ;Goto next device without incrementing LASTDRIVE
   766 000011CE FEC2                <1>     inc dl
   767 000011D0 3A15(09000000)      <1>     cmp dl, byte [numMSDdrv] ;Once these are equal, we have processed last dev
   768 000011D6 0F8556FFFFFF        <1>     jne .mi0
   769 000011DC EBC6                <1>     jmp short .msdExit
   770                              <1> .msdInitError:
   771 000011DE 4889EB              <1>     mov rbx, rbp
   772 000011E1 E9A4FEFFFF          <1>     jmp .msdGenDiskError
   773                              <1> .msdMedChk:          ;Function 1
   774                              <1> ;Once the BIOS function is implmented that reads the changeline, use that!
   775                              <1> ;For BIOSes that dont support the changeline, the following procedure will 
   776                              <1> ; suffice.
   777 000011E6 B005                <1>     mov al, 05h ;Bad request structure length
   778 000011E8 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   779 000011EB 0F8506FFFFFF        <1>     jne .msdWriteErrorCode
   780                              <1> 
   781 000011F1 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   782 000011F6 8A90[77140000]      <1>     mov dl, byte [.msdBIOSmap + rax]    ;Translate unitnum to BIOS num
   783 000011FC F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   784 000011FF 754D                <1>     jnz .mmcNoChange
   785                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   786 00001201 B416                <1>     mov ah, 16h 
   787 00001203 CD33                <1>     int 33h
   788 00001205 0F827FFEFFFF        <1>     jc .msdGenDiskError
   789 0000120B 80FC80              <1>     cmp ah, 80h
   790 0000120E 740E                <1>     je .mmcNoChangeLine
   791 00001210 80FC86              <1>     cmp ah, 86h
   792 00001213 7409                <1>     je .mmcNoChangeLine
   793 00001215 84E4                <1>     test ah, ah ;No change?
   794 00001217 7435                <1>     jz .mmcNoChange
   795 00001219 F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   796 0000121C 7513                <1>     jnz .mmcChange
   797                              <1> ;If nothing, fall through and test manually, should never happen though
   798                              <1> .mmcNoChangeLine:
   799                              <1> ;Now we test Media Descriptor
   800 0000121E 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   801 00001221 488B3CC5[81140000]  <1>     mov rdi, qword [.msdBPBTbl + 8*rax]
   802 00001229 488B3F              <1>     mov rdi, qword [rdi]    ;Dereference rdi
   803 0000122C 385715              <1>     cmp byte [rdi + bpb32.media], dl    ;Compare media descriptor bytes
   804 0000122F 7414                <1>     je .mmcUnsure
   805                              <1> .mmcChange:
   806 00001231 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   807 00001235 488D0531020000      <1>     lea rax, qword [.msdDefLabel]           ;Temp, ret def label
   808 0000123C 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   809 00001240 E9B8FEFFFF          <1>     jmp .msdDriverExit
   810                              <1> .mmcUnsure:
   811 00001245 C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   812 00001249 E9AFFEFFFF          <1>     jmp .msdDriverExit
   813                              <1> .mmcNoChange:
   814 0000124E C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   815 00001252 E9A6FEFFFF          <1>     jmp .msdDriverExit
   816                              <1> 
   817                              <1> .msdBuildBPB:        ;Function 2
   818 00001257 B005                <1>     mov al, 05h ;Bad request structure length
   819 00001259 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   820 0000125C 0F8595FEFFFF        <1>     jne .msdWriteErrorCode
   821                              <1> 
   822 00001262 4889DE              <1>     mov rsi, rbx
   823 00001265 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   824 0000126A 8A90[77140000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req
   825 00001270 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   826 00001274 31C9                <1>     xor ecx, ecx    ;Read Sector 0
   827 00001276 B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   828 0000127B CD33                <1>     int 33h
   829 0000127D 0F8207FEFFFF        <1>     jc .msdGenDiskError
   830                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   831 00001283 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   832 00001287 7418                <1>     je .mbbpb0
   833 00001289 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   834 0000128D 7412                <1>     je .mbbpb0
   835 0000128F 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   836 00001293 740C                <1>     je .mbbpb0
   837 00001295 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   838 00001299 B007                <1>     mov al, 07h ;Unknown media error code
   839 0000129B 0F8256FEFFFF        <1>     jb .msdWriteErrorCode
   840                              <1> .mbbpb0:
   841 000012A1 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   842 000012A4 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   843 000012A9 488B3CC5[81140000]  <1>     mov rdi, qword [.msdBPBTbl + 8*rax] ;Get pointer to pointer to buffer
   844 000012B1 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   845 000012B4 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   846 000012B8 B90F000000          <1>     mov ecx, bpbEx_size/8
   847 000012BD F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   848 000012C0 E938FEFFFF          <1>     jmp .msdDriverExit
   849                              <1> .msdIOCTLRead:       ;Function 3, returns done
   850 000012C5 B005                <1>     mov al, 05h ;Bad request structure length
   851 000012C7 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   852 000012CA 0F8527FEFFFF        <1>     jne .msdWriteErrorCode
   853                              <1> 
   854 000012D0 E928FEFFFF          <1>     jmp .msdDriverExit
   855                              <1> .msdRead:            ;Function 4
   856                              <1> ;Will read one sector at a time.
   857 000012D5 B005                <1>     mov al, 05h ;Bad request structure length
   858 000012D7 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   859 000012DA 0F8517FEFFFF        <1>     jne .msdWriteErrorCode
   860                              <1> 
   861 000012E0 4889DD              <1>     mov rbp, rbx
   862 000012E3 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   863                              <1> .msdr0:
   864 000012E5 B682                <1>     mov dh, 82h ;LBA Read Sectors
   865 000012E7 E867010000          <1>     call .msdBlkIOCommon
   866 000012EC 0F828DFDFFFF        <1>     jc .msdIOError
   867 000012F2 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   868 000012FA 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   869 00001302 FFC6                <1>     inc esi
   870 00001304 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   871 00001307 75DC                <1>     jne .msdr0
   872 00001309 4889EB              <1>     mov rbx, rbp
   873 0000130C E9ECFDFFFF          <1>     jmp .msdDriverExit
   874                              <1> .msdWrite:           ;Function 8
   875                              <1> ;Will write one sector at a time.
   876 00001311 B005                <1>     mov al, 05h ;Bad request structure length
   877 00001313 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   878 00001316 0F85DBFDFFFF        <1>     jne .msdWriteErrorCode
   879                              <1> 
   880 0000131C 4889DD              <1>     mov rbp, rbx
   881 0000131F 31F6                <1>     xor esi, esi  ;Set counter to zero
   882                              <1> .msdw0:
   883 00001321 B683                <1>     mov dh, 83h ;LBA Write Sectors
   884 00001323 E82B010000          <1>     call .msdBlkIOCommon
   885 00001328 0F8251FDFFFF        <1>     jc .msdIOError
   886 0000132E 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   887 00001336 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   888 0000133E FFC6                <1>     inc esi
   889 00001340 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   890 00001343 75DC                <1>     jne .msdw0
   891 00001345 4889EB              <1>     mov rbx, rbp
   892 00001348 E9B0FDFFFF          <1>     jmp .msdDriverExit
   893                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   894                              <1> ;Will write one sector at a time and then verify it.
   895 0000134D B005                <1>     mov al, 05h ;Bad request structure length
   896 0000134F 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   897 00001352 0F859FFDFFFF        <1>     jne .msdWriteErrorCode
   898                              <1> 
   899 00001358 4889DD              <1>     mov rbp, rbx
   900 0000135B 31F6                <1>     xor esi, esi  ;Set counter to zero
   901                              <1> .msdwv0:
   902 0000135D B683                <1>     mov dh, 83h ;LBA Write Sectors
   903 0000135F E8EF000000          <1>     call .msdBlkIOCommon
   904 00001364 0F8215FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   905 0000136A B684                <1>     mov dh, 84h ;LBA Verify Sectors
   906 0000136C E8E2000000          <1>     call .msdBlkIOCommon
   907 00001371 0F8208FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   908 00001377 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   909 0000137F 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   910 00001387 FFC6                <1>     inc esi
   911 00001389 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   912 0000138C 75CF                <1>     jne .msdwv0
   913 0000138E 4889EB              <1>     mov rbx, rbp
   914 00001391 E967FDFFFF          <1>     jmp .msdDriverExit
   915                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   916 00001396 B005                <1>     mov al, 05h ;Bad request structure length
   917 00001398 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   918 0000139B 0F8556FDFFFF        <1>     jne .msdWriteErrorCode
   919                              <1> 
   920 000013A1 E957FDFFFF          <1>     jmp .msdDriverExit
   921                              <1> .msdDevOpen:         ;Function 13
   922 000013A6 B005                <1>     mov al, 05h ;Bad request structure length
   923 000013A8 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   924 000013AB 0F8546FDFFFF        <1>     jne .msdWriteErrorCode
   925                              <1> 
   926 000013B1 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   927 000013B6 488D0DBF000000      <1>     lea rcx, .msdHdlCnt
   928 000013BD FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   929 000013C0 E938FDFFFF          <1>     jmp .msdDriverExit
   930                              <1> .msdDevClose:        ;Function 14
   931 000013C5 B005                <1>     mov al, 05h ;Bad request structure length
   932 000013C7 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   933 000013CA 0F8527FDFFFF        <1>     jne .msdWriteErrorCode
   934                              <1> 
   935 000013D0 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   936 000013D5 488D0DA0000000      <1>     lea rcx, .msdHdlCnt
   937 000013DC FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   938 000013DF E919FDFFFF          <1>     jmp .msdDriverExit
   939                              <1> .msdRemovableMedia:  ;Function 15
   940 000013E4 B005                <1>     mov al, 05h ;Bad request structure length
   941 000013E6 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   942 000013E9 0F8508FDFFFF        <1>     jne .msdWriteErrorCode
   943                              <1> 
   944 000013EF 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   945 000013F4 488D0D7C000000      <1>     lea rcx, .msdBIOSmap
   946 000013FB 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   947 000013FE A880                <1>     test al, 80h
   948 00001400 0F84F7FCFFFF        <1>     jz .msdDriverExit   ;If removable, busy bit is clear
   949 00001406 66C743030002        <1>     mov word [rbx + remMediaReqPkt.status], 0200h ;Set Busy bit
   950 0000140C E9ECFCFFFF          <1>     jmp .msdDriverExit
   951                              <1> .msdGenericIOCTL:    ;Function 19
   952 00001411 B005                <1>     mov al, 05h ;Bad request structure length
   953 00001413 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   954 00001416 0F85DBFCFFFF        <1>     jne .msdWriteErrorCode
   955                              <1> 
   956 0000141C E9DCFCFFFF          <1>     jmp .msdDriverExit
   957                              <1> .msdGetLogicalDev:   ;Function 23
   958 00001421 B005                <1>     mov al, 05h ;Bad request structure length
   959 00001423 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   960 00001426 0F85CBFCFFFF        <1>     jne .msdWriteErrorCode
   961                              <1> 
   962 0000142C 8A0544000000        <1>     mov al, byte [.msdCurDev]
   963 00001432 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   964 00001435 E9C3FCFFFF          <1>     jmp .msdDriverExit
   965                              <1> .msdSetLogicalDev:   ;Function 24
   966 0000143A B005                <1>     mov al, 05h ;Bad request structure length
   967 0000143C 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   968 0000143F 0F85B2FCFFFF        <1>     jne .msdWriteErrorCode
   969                              <1> 
   970 00001445 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   971 00001448 880528000000        <1>     mov byte [.msdCurDev], al
   972 0000144E E9AAFCFFFF          <1>     jmp .msdDriverExit
   973                              <1> 
   974                              <1> .msdBlkIOCommon:  ;Does block IO
   975                              <1> ;Called with rbp containing old rbx value and ah with function number
   976                              <1> ;Error handled by caller
   977                              <1> ;Sector count handled by caller
   978                              <1> ;Called with dh = BIOS function number
   979 00001453 480FB64501          <1>     movzx rax, byte [rbp + ioReqPkt.unitnm]
   980 00001458 8A90[77140000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   981 0000145E 488B4D1A            <1>     mov rcx, qword [rbp + ioReqPkt.strtsc]  ;Get start sector
   982 00001462 488B5D0E            <1>     mov rbx, qword [rbp + ioReqPkt.bufptr]  ;Get Memory Buffer
   983 00001466 88F4                <1>     mov ah, dh
   984 00001468 B001                <1>     mov al, 01h ;Do one sector at a time 
   985 0000146A CD33                <1>     int 33h
   986 0000146C C3                  <1>     ret
   987                              <1> 
   988 0000146D 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   989                              <1> ;LASTDRIVE default is 5
   990 00001476 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   991                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   992 00001477 FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
   993 0000147C 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   994 00001481 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   994 0000148A 000000000000000000- <1>
   994 00001493 000000000000000000- <1>
   994 0000149C 000000000000000000- <1>
   994 000014A5 00000000            <1>
   995 000014A9 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   995 000014B2 000000000000000000- <1>
   995 000014BB 000000000000000000- <1>
   995 000014C4 000000000000000000- <1>
   995 000014CD 000000000000000000- <1>
   995 000014D6 000000000000000000- <1>
   995 000014DF 000000000000000000- <1>
   995 000014E8 000000000000000000- <1>
   995 000014F1 000000000000000000- <1>
   995 000014FA 000000000000000000- <1>
   995 00001503 000000000000000000- <1>
   995 0000150C 000000000000000000- <1>
   995 00001515 000000000000000000- <1>
   995 0000151E 000000000000000000- <1>
   995 00001527 000000000000000000- <1>
   995 00001530 000000000000000000- <1>
   995 00001539 000000000000000000- <1>
   995 00001542 000000000000000000- <1>
   995 0000154B 000000000000000000- <1>
   995 00001554 000000000000000000- <1>
   995 0000155D 000000000000000000- <1>
   995 00001566 000000000000000000- <1>
   995 0000156F 000000000000000000- <1>
   995 00001578 000000000000000000- <1>
   995 00001581 000000000000000000- <1>
   995 0000158A 000000000000000000- <1>
   995 00001593 000000000000000000- <1>
   995 0000159C 000000000000000000- <1>
   995 000015A5 000000000000000000- <1>
   995 000015AE 000000000000000000- <1>
   995 000015B7 000000000000000000- <1>
   995 000015C0 000000000000000000- <1>
   995 000015C9 000000000000000000- <1>
   995 000015D2 000000000000000000- <1>
   995 000015DB 000000000000000000- <1>
   995 000015E4 000000000000000000- <1>
   995 000015ED 000000000000000000- <1>
   995 000015F6 000000000000000000- <1>
   995 000015FF 000000000000000000- <1>
   995 00001608 000000000000000000- <1>
   995 00001611 000000000000000000- <1>
   995 0000161A 000000000000000000- <1>
   995 00001623 000000000000000000- <1>
   995 0000162C 000000000000000000- <1>
   995 00001635 000000000000000000- <1>
   995 0000163E 000000000000000000- <1>
   995 00001647 000000000000000000- <1>
   995 00001650 000000000000000000- <1>
   995 00001659 000000000000000000- <1>
   995 00001662 000000000000000000- <1>
   995 0000166B 000000000000000000- <1>
   995 00001674 000000000000000000- <1>
   995 0000167D 000000000000000000- <1>
   995 00001686 000000000000000000- <1>
   995 0000168F 000000000000000000- <1>
   995 00001698 000000000000000000- <1>
   995 000016A1 000000000000000000- <1>
   995 000016AA 000000000000000000- <1>
   995 000016B3 000000000000000000- <1>
   995 000016BC 000000000000000000- <1>
   995 000016C5 000000000000000000- <1>
   995 000016CE 000000000000000000- <1>
   995 000016D7 000000000000000000- <1>
   995 000016E0 000000000000000000- <1>
   995 000016E9 000000000000000000- <1>
   995 000016F2 000000000000000000- <1>
   995 000016FB 000000000000        <1>
   996                              <1> 
   997                              <1> endptr equ $
