     1                                  [map all scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs and strucs
     5                                  %include "driverStruc.inc"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     9                              <1> ; device driver related structures.                     ;
    10                              <1> ;-------------------------------------------------------;
    11                              <1> 
    12                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    13                              <1> 
    14 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    15 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    16 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    17 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    18 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    19                              <1> 
    20                              <1> endstruc
    21                              <1> 
    22                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    23                              <1> 
    24                              <1>     .hdrlen resb 1  ;Length of the request header
    25                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    26                              <1>     .cmdcde resb 1  ;Command code
    27                              <1>     .status resw 1  ;Status word
    28                              <1>     .devptr resq 1  ;Device queue pointer field
    29                              <1> 
    30                              <1> %endmacro
    31                              <1> ;Command Code equates
    32                              <1>     drvINIT        equ 0
    33                              <1>     drvMEDCHK      equ 1
    34                              <1>     drvBUILDBPB    equ 2
    35                              <1>     drvIOCTLREAD   equ 3
    36                              <1>     drvREAD        equ 4
    37                              <1>     drvNONDESTREAD equ 5
    38                              <1>     drvINSTATUS    equ 6
    39                              <1>     drvFLUSHINBUF  equ 7
    40                              <1>     drvWRITE       equ 8
    41                              <1>     drvWRITEVERIFY equ 9
    42                              <1>     drvOUTSTATUS   equ 10
    43                              <1>     drvFLUSHOUTBUF equ 11
    44                              <1>     drvIOCTLWRITE  equ 12
    45                              <1>     drvOPEN        equ 13
    46                              <1>     drvCLOSE       equ 14
    47                              <1>     drvREMMEDCHECK equ 15
    48                              <1>     drvOUTTILBUSY  equ 16  ;Not implemented
    49                              <1>     drvIOCTL       equ 19
    50                              <1>     drvGETDRVMAP   equ 23
    51                              <1>     drvSETDRVMAP   equ 24
    52                              <1> 
    53                              <1> ;Drive structures
    54                              <1> struc drvReqHdr
    55                              <1>     drvReqHdrM
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    56                              <1> endstruc
    57                              <1> 
    58                              <1> struc initReqPkt  ;Init Request Packet
    59                              <1> 
    60                              <1>     drvReqHdrM   ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    61 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
    62 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
    63 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
    64 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
    65                              <1> 
    66                              <1> endstruc
    67                              <1> 
    68                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
    69                              <1> 
    70                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    71 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    72 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
    73 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
    74                              <1> 
    75                              <1> endstruc
    76                              <1> 
    77                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
    78                              <1> 
    79                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    80 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    81 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    82 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
    83                              <1> 
    84                              <1> endstruc
    85                              <1> 
    86                              <1> struc ioReqPkt   ;IO Request Packet
    87                              <1> 
    88                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    89 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    90 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    91 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
    92 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
    93 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
    94                              <1> 
    95                              <1> endstruc
    96                              <1> 
    97                              <1> struc nonDestInNoWaitReqPkt    ;Nondestructive Input No Wait Request Packet
    98                              <1>     
    99                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   100 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   101                              <1> 
   102                              <1> endstruc
   103                              <1> 
   104                              <1> struc statusReqPkt   ;Status Request Packet
   105                              <1> 
   106                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   107                              <1> 
   108                              <1> endstruc
   109                              <1> 
   110                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   111                              <1> 
   112                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   113                              <1>      
   114                              <1> endstruc
   115                              <1> 
   116                              <1> struc openReqPkt ;Open Device Request Packet
   117                              <1> 
   118                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   119                              <1>      
   120                              <1> endstruc
   121                              <1> 
   122                              <1> struc closeReqPkt ;Close Device Request Packet
   123                              <1> 
   124                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   125                              <1>      
   126                              <1> endstruc
   127                              <1> 
   128                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   129                              <1> 
   130                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   131                              <1>      
   132                              <1> endstruc
   133                              <1> 
   134                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   135                              <1> 
   136                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   137 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   138 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   139 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   140 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   141 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   142                              <1> 
   143                              <1> endstruc
   144                              <1> 
   145                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   146                              <1>     
   147                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   148                              <1> 
   149                              <1> endstruc
   150                              <1> 
   151                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   152                              <1>     
   153                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   154                              <1> 
   155                              <1> endstruc
     6                                  %include "fatStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous FAT driver   ;
    10                              <1> ; structures. exFAT will have it's own files at a later ;
    11                              <1> ; stage.                                                ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    15                              <1> 
    16 00000000 ??????              <1>     .jmpBoot    resb 3 
    17 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    18 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    19 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    20 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    21 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    22 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    23 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    24 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    25 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    26 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    27 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    28 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    29 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    30                              <1> 
    31 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    32 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    33 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    34 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    35 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    36 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    37                              <1> 
    38                              <1> endstruc
    39                              <1> 
    40                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    41                              <1> 
    42 00000000 ??????              <1>     .jmpBoot    resb 3
    43 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    44 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    45 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    46 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    47 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    48 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    49 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    50 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    51 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    52 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    53 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    54 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    55 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    56                              <1> 
    57 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    58 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    59 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    60 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    61 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    62 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    63 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    64                              <1> 
    65 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    66 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    67 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    68 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    69 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    70 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    71                              <1> 
    72                              <1> endstruc
    73                              <1> 
    74                              <1> struc mbr
    75 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    76 000001B8 ????????            <1>     .diskID     resb 4
    77 000001BC ????                <1>     .reserved   resb 2
    78 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    79 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    80 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    81 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    82 000001FE ????                <1>     .mbrSig     resb 2
    83                              <1> endstruc
    84                              <1> 
    85                              <1> struc mbrEntry
    86 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    87 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    88 00000004 ??                  <1>     .ptnType    resb 1
    89 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
    90 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
    91 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
    92                              <1> endstruc
    93                              <1> 
    94                              <1> struc fatDirEntry
    95                              <1> 
    96 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
    97 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
    98 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
    99 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   100 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   101 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   102 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   103 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   104 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   105 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   106 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   107 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   108                              <1> 
   109                              <1> endstruc
   110                              <1> ;Directory attribute equates
   111                              <1>     dirReadOnly     equ 01h
   112                              <1>     dirHidden       equ 02h
   113                              <1>     dirSystem       equ 04h
   114                              <1>     dirVolumeID     equ 08h
   115                              <1>     dirDirectory    equ 10h
   116                              <1>     dirArchive      equ 20h
   117                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   118                              <1> 
   119                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   120                              <1> 
   121 00000000 ??????              <1>     .jmpBoot                resb 3 
   122 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   123 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   124 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   125 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   126 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   127 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   128 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   129 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   130 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   131 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   132 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   133 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   134 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   135 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   136 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   137 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   138 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   139 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   140                              <1> 
   141                              <1> endstruc
   142                              <1> 
   143                              <1> struc FSInfo
   144                              <1> 
   145 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   146 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   147 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   148 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   149 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   150 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   151 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   152                              <1> 
   153                              <1> endstruc
     7                                  %include "dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ??                  <1>     .bBytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)x
    27 00000003 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000004 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000005 ????????            <1>     .dFAToffset              resd 1  ;Number of Sectors preceeding first FAT x
    30 00000009 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 0000000A ????                <1>     .wNumberRootDirSectors   resw 1  ;In sectors, this is 0 for FAT32 formats x
    32 0000000C ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 00000010 ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000014 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000018 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001C ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000024 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000025 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000026 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002E ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000032 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Flags: Bit 15 set = Network drive
    69                              <1> ;        Bit 14 set = Physical drive
    70                              <1> ;        Bit 13 set = JOIN'ed drive
    71                              <1> ;        Bit 12 set = SUBST'ed drive
    72                              <1> ;        Bit 7  set = Redirected, not network, drive (This is how MSCDEX worked)
    73                              <1> endstruc
    74                              <1> ;CDS equates
    75                              <1>     cdsNetDrive     equ 8000h
    76                              <1>     cdsPhysDrive    equ 4000h
    77                              <1>     cdsJoinDrive    equ 2000h
    78                              <1>     cdsSubstDrive   equ 1000h
    79                              <1>     cdsRedirDrive   equ 0080h
    80                              <1> ;------------------------------------------------------------------------;
    81                              <1> ; The SFT is a way to allow applications to open file handles to files 
    82                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    83                              <1> ; under the first header, and then a second header will be linked to the 
    84                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    85                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    86                              <1> ; using the FCBS= command. Default FCBS=5.
    87                              <1> ;
    88                              <1> ; A file handle describes the file, and the location within the file that
    89                              <1> ; we are reading. The file handle can be manipulated without the file
    90                              <1> ; being in memory, thus allowing the user to access data without needing 
    91                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    92                              <1> ; accessing devices, by treating them as files with their drivers 
    93                              <1> ; responding and translating the manipulations of the file handle itself.
    94                              <1> ; Neither the driver nor the application should see or use the SFT for
    95                              <1> ; the handle, as it is subject to change (and will change when file 
    96                              <1> ; sharing provisions are included). The DOS will make requests to the 
    97                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    98                              <1> ; track of the information in the SFT entry for that handle. 
    99                              <1> ;
   100                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   101                              <1> ; can point to the same file. It all depends on what the applications 
   102                              <1> ; want to do with the File.
   103                              <1> ;
   104                              <1> ; !!!!IMPORTANT!!!!
   105                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   106                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   107                              <1> ;
   108                              <1> ;Each SFT may look like this:
   109                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   110                              <1> ;            |                |
   111                              <1> ;       wNumFiles*sft    wNumFiles*sft
   112                              <1> ;
   113                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   114                              <1> ; System FCBs.
   115                              <1> ;
   116                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   117                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   118                              <1> ;
   119                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   120                              <1> ; DEFAULT FCBS=5, MINIMUM FCBS=5
   121                              <1> ;------------------------------------------------------------------------;
   122                              <1> struc sfth   ;System file table header
   123                              <1> ; This is the SFT header.
   124                              <1> ; This structure comes before the start of the first file in the array/table.
   125 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   126 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   127                              <1> endstruc
   128                              <1> 
   129                              <1> struc sft
   130                              <1> ;This is the file struc itself
   131 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   132 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   133 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   134 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   135 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   136 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file
   137 00000013 ????                <1>     .wTime       resw 1    ;File Time
   138 00000015 ????                <1>     .wDate       resw 1    ;File Date
   139 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   140 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset in file, in bytes
   141 0000001F ????                <1>     .wRelSect    resw 1    ;Rel sector in file of the last cluster accessed
   142 00000021 ????????            <1>     .dDirSect    resd 1    ;Rel number of sector containing directory entry 
   143 00000025 ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   144 00000026 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   145 00000031 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   146 00000039 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster of last cluster accessed
   147                              <1> endstruc
   148                              <1> ;Open Mode equates
   149                              <1> ;Access modes   Bits[2:0]
   150                              <1>     ReadAccess      equ 0h
   151                              <1>     WriteAccess     equ 1h
   152                              <1>     RWAccess        equ 2h
   153                              <1> ;Bit 3 reserved 0
   154                              <1> ;Sharing modes  Bits[6:4]
   155                              <1>     CompatShare     equ 0h
   156                              <1>     denyRWShare     equ 10h
   157                              <1>     denyWriteShare  equ 20h
   158                              <1>     denyReadShare   equ 30h
   159                              <1>     denyNoneShare   equ 40h
   160                              <1> ;Bit 7 reserved 0
   161                              <1> ;Bits 8-12 reserved 0
   162                              <1> ;Critical Error handling
   163                              <1>     critErrHdl      equ 2000h   ;If set, return error code. If clear, INT 44h
   164                              <1> ;Buffering on writes
   165                              <1>     noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   166                              <1> ;FCB opened file?
   167                              <1>     FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   168                              <1> ;Attribute Byte
   169                              <1>     readOnlyFile    equ 1h
   170                              <1>     hiddenFile      equ 2h
   171                              <1>     systemFile      equ 4h
   172                              <1>     volumeLabel     equ 8h
   173                              <1>     directoryFile   equ 10h ;Directory entry
   174                              <1>     archiveFile     equ 20h
   175                              <1> ;Device Info equates
   176                              <1> ;For a block device, bits [5:0] contain the drive number
   177                              <1>     charDevConIn    equ 1h  ;If set, device is CON input
   178                              <1>     charDevConOut   equ 2h  ;If set, device is CON output
   179                              <1>     charDevNulDev   equ 4h  ;If set, device is NULL device
   180                              <1>     charDevClockDev equ 8h  ;If set, device is CLOCK device
   181                              <1>     charDevFastOut  equ 10h ;If set, device supports INT 49h
   182                              <1>     charDevBinary   equ 20h ;If set, read in Binary mode!!!
   183                              <1>     charDevNoEOF    equ 40h ;If set, no EOF on input!!
   184                              <1>     blokDevNotFlush equ 40h ;If set, file not written to disk yet!!!
   185                              <1>     devCharDev      equ 80h ;If set, it is a char device!
   186                              <1>     charDevNetSpool equ 800h    ;If set, device is a network spooler
   187                              <1>     devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   188                              <1>     charDevNamePipe equ 2000h   ;If set, device is a named pipe
   189                              <1>     blokDevDTSet    equ 4000h   ;If set, date and time updated for all i/o
   190                              <1>     devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   191                              <1> ;------------------------------------------------------------------------;
   192                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   193                              <1> ; to an internal buffer, and then copying it to the specified location
   194                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   195                              <1> ; another request for the same sector from the same device is made, so 
   196                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   197                              <1> ; size, selected according to the largest detected sector size during 
   198                              <1> ; the initial loadup.
   199                              <1> ;
   200                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   201                              <1> ;
   202                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   203                              <1> ;------------------------------------------------------------------------;
   204                              <1> 
   205                              <1> struc bufferHdr
   206 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   207 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   208 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   209 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   210 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   211 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   212 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   213 0000001F ??                  <1>     .reserved    resb  1   ;Alignment byte
   214 00000020 ??                  <1>     .dataarea    resb  1   ;The size here changes wrt sector size!
   215                              <1> endstruc
   216                              <1> ;Buffer Flag equates
   217                              <1>     dosBuffer   equ 1h  ;DOS data sector in buffer
   218                              <1>     fatBuffer   equ 2h  ;FAT sector in buffer
   219                              <1>     dirBuffer   equ 4h  ;Directory sector in buffer
   220                              <1>     dataBuffer  equ 8h  ;File Data sector in buffer
   221                              <1>     refBuffer   equ 20h ;Data in buffer referenced by an application
   222                              <1>     dirtyBuffer equ 40h ;Data in buffer modified by an application
   223                              <1> ;------------------------------------------------------------------------;
   224                              <1> ; Memory control block for each memory arena
   225                              <1> ;------------------------------------------------------------------------;
   226                              <1> struc mcb
   227 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   228 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP or 0 for free space
   229 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   230 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   231                              <1> endstruc
   232                              <1> 
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   235                              <1> ; following order, thus allowing for return values to be placed in the 
   236                              <1> ; registers by accessing the caller register stack frame.
   237                              <1> ;------------------------------------------------------------------------;
   238                              <1> struc callerFrame
   239 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   240 00000008 ????????????????    <1>     .rbx    resq 1    
   241 00000010 ????????????????    <1>     .rcx    resq 1
   242 00000018 ????????????????    <1>     .rdx    resq 1
   243 00000020 ????????????????    <1>     .rsi    resq 1
   244 00000028 ????????????????    <1>     .rdi    resq 1
   245 00000030 ????????????????    <1>     .rbp    resq 1
   246 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   247 00000040 ????????????????    <1>     .r9     resq 1
   248                              <1> ;Pushed by Processor when invoked via Interrupt
   249 00000048 ????????????????    <1>     .rip    resq 1
   250 00000050 ????????????????    <1>     .cs     resq 1
   251 00000058 ????????????????    <1>     .flags  resq 1
   252                              <1> endstruc
   253                              <1> 
   254                              <1> %macro pushDOS 0
   255                              <1>     push r9
   256                              <1>     push r8
   257                              <1>     push rbp
   258                              <1>     push rdi
   259                              <1>     push rsi
   260                              <1>     push rdx
   261                              <1>     push rcx
   262                              <1>     push rbx
   263                              <1>     push rax
   264                              <1> %endmacro
   265                              <1> 
   266                              <1> %macro popDOS 0
   267                              <1>     pop rax
   268                              <1>     pop rbx
   269                              <1>     pop rcx
   270                              <1>     pop rdx
   271                              <1>     pop rsi
   272                              <1>     pop rdi
   273                              <1>     pop rbp
   274                              <1>     pop r8
   275                              <1>     pop r9
   276                              <1> %endmacro
   277                              <1> 
   278                              <1> struc psp
   279 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h
   280 00000002 ????????????????    <1>     .startSeg   resq 1  ;Pointer to the start of the PSP
   281 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   282 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   283 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   284 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   285 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   286 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   287 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   288 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size
   289 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh
   290 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain
   291 0000005B ????????????????    <1>     .xtraHdlPtr resq 1  ;Pointer to the extra handle array if needed
   292 00000063 ????????????????    <1>     .fcbPtr1    resq 1  ;Pointer to the first OS allocated FCB
   293 0000006B <res 15h>           <1>     .reserved   resb 21
   294 00000080 ??                  <1>     .charCount  resb 1  ;Number of characters in command tail
   295 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   296                              <1> endstruc
   297                              <1> 
   298                              <1> struc mcb
   299 00000000 ??                  <1>     .mzbyte     resb 1  ;M=In use, Z=Free
   300 00000001 ????????????????    <1>     .processPtr resq 1  ;Points to the start of the process PSP
   301 00000009 ????????            <1>     .paragraphs resd 1  ;Gives the number of paras allocated to this process
   302 0000000D ??????              <1>     .reserved   resb 3
   303                              <1>     .program:
   304                              <1> endstruc
   305                              <1> 
   306                              <1> struc clkStruc
   307 00000000 ????                <1>     .dateWord   resw 1
   308 00000002 ??                  <1>     .minutes    resb 1
   309 00000003 ??                  <1>     .hours      resb 1
   310 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   311 00000005 ??                  <1>     .seconds    resb 1
   312                              <1> endstruc
     8                                  Segment .text align=1   ;Init code
     9                                  %include "sysInit.asm"
    10                              <1> ; We arrive here with the following values in the registers.
    11                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    12                              <1> ; dx  = Int 33h boot device number
    13                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    14                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    15 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    16 00000002 909090909090909090- <1>     db (100h-2) dup (90h)   ;Duplicate NOPs for the PSP
    16 0000000B 909090909090909090- <1>
    16 00000014 909090909090909090- <1>
    16 0000001D 909090909090909090- <1>
    16 00000026 909090909090909090- <1>
    16 0000002F 909090909090909090- <1>
    16 00000038 909090909090909090- <1>
    16 00000041 909090909090909090- <1>
    16 0000004A 909090909090909090- <1>
    16 00000053 909090909090909090- <1>
    16 0000005C 909090909090909090- <1>
    16 00000065 909090909090909090- <1>
    16 0000006E 909090909090909090- <1>
    16 00000077 909090909090909090- <1>
    16 00000080 909090909090909090- <1>
    16 00000089 909090909090909090- <1>
    16 00000092 909090909090909090- <1>
    16 0000009B 909090909090909090- <1>
    16 000000A4 909090909090909090- <1>
    16 000000AD 909090909090909090- <1>
    16 000000B6 909090909090909090- <1>
    16 000000BF 909090909090909090- <1>
    16 000000C8 909090909090909090- <1>
    16 000000D1 909090909090909090- <1>
    16 000000DA 909090909090909090- <1>
    16 000000E3 909090909090909090- <1>
    16 000000EC 909090909090909090- <1>
    16 000000F5 909090909090909090- <1>
    16 000000FE 9090                <1>
    17                              <1> ;First make space for the MCB
    18 00000100 52                  <1>     push rdx    ;Save dl on stack briefly
    19 00000101 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    20 00000106 0F32                <1>     rdmsr
    21 00000108 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    22 0000010A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    23 0000010E 89C7                <1>     mov edi, eax        ;Get the low dword in
    24 00000110 4881C710000000      <1>     add rdi, mcb_size   ;Make space for the MCB
    25 00000117 89F8                <1>     mov eax, edi
    26 00000119 4889FA              <1>     mov rdx, rdi
    27 0000011C 48C1EA20            <1>     shr rdx, 20h
    28 00000120 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    29 00000122 5A                  <1>     pop rdx
    30                              <1> ;------------------------------------------------;
    31                              <1> ;           Sanitise the data area               ;
    32                              <1> ;------------------------------------------------;
    33 00000123 B9[D4120000]        <1>     mov ecx, dSegLen
    34 00000128 30C0                <1>     xor al, al
    35 0000012A 57                  <1>     push rdi    ;Temp save rdi on the stack
    36 0000012B F3AA                <1>     rep stosb
    37 0000012D 5F                  <1>     pop rdi
    38                              <1> 
    39                              <1> ;------------------------------------------------;
    40                              <1> ;          Start saving Basic DOS data           ;
    41                              <1> ;------------------------------------------------;
    42 0000012E 64881425[08000000]  <1>     mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    43 00000136 488D15C3FEFFFF      <1>     lea rdx, tempPSP    ;Get the address of the tempPSP
    44 0000013D 6448891425-         <1>     mov qword fs:[currentPSP], rdx
    44 00000142 [D7000000]          <1>
    45                              <1> ;Copy DOS to its final resting place
    46 00000146 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    46 0000014B [00000000]          <1>
    47 0000014F 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rdx 
    48 00000152 4881C7[D4120000]    <1>     add rdi, dSegLen ;Move destination past end of data area
    49 00000159 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    50 00000160 B900100000          <1>     mov ecx, 1000h
    51 00000165 F348A5              <1>     rep movsq
    52                              <1> 
    53 00000168 CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    54 0000016A 6444880425-         <1>     mov byte fs:[numRemMSD], r8b    ;Save number of physical int 33h devs
    54 0000016F [09000000]          <1>
    55 00000173 64C60425[99000000]- <1>     mov byte fs:[lastdrvNum], 5     ;Last drive is by default 5
    55 0000017B 05                  <1>
    56 0000017C 64C60425[0A000000]- <1>     mov byte fs:[numLRemDrives], 0     ;Number of logical drives
    56 00000184 00                  <1>
    57                              <1> 
    58                              <1> ;------------------------------------------------;
    59                              <1> ;          Find largest sector size              ;
    60                              <1> ;------------------------------------------------;
    61                              <1> largestSectorSearch:
    62 00000185 30D2                <1>     xor dl, dl
    63 00000187 31FF                <1>     xor edi, edi    ;Use this as the counter for the largest sector size
    64                              <1> .lss:
    65 00000189 B488                <1>     mov ah, 88h
    66 0000018B CD33                <1>     int 33h
    67 0000018D 39C7                <1>     cmp edi, eax
    68 0000018F 0F42F8              <1>     cmovb edi, eax  ;Only replace ebp if eax is greater
    69 00000192 FEC2                <1>     inc dl
    70 00000194 4438C2              <1>     cmp dl, r8b
    71 00000197 75F0                <1>     jne .lss
    72 00000199 6466893C25-         <1>     mov word fs:[maxBytesSec], di
    72 0000019E [87000000]          <1>
    73                              <1> 
    74                              <1> ;------------------------------------------------;
    75                              <1> ;          Driver Adjustments and inits          ;
    76                              <1> ;------------------------------------------------;
    77                              <1> ;Modify the pointers in nData before putting them in the data area
    78 000001A2 48012DA5030000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
    79 000001A9 48012DA8030000      <1>     add qword [nData + drvHdr.strPtr], rbp
    80 000001B0 48012DA9030000      <1>     add qword [nData + drvHdr.intPtr], rbp
    81                              <1> ;Copy the Null driver to its location in Sysvars
    82 000001B7 B922000000          <1>     mov ecx, drvHdr_size
    83 000001BC 488D358B030000      <1>     lea rsi, qword [nData]
    84 000001C3 488DBD[A5000000]    <1>     lea rdi, qword [rbp + nulDevHdr]
    85 000001CA F3A4                <1>     rep movsb   
    86                              <1> 
    87                              <1> ;Adjust the addresses in the other driver headers 
    88 000001CC 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
    88 000001CE [8611000000000000]  <1>
    89 000001D6 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
    90 000001DB 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
    91                              <1> adjDrivers:
    92 000001DF E893020000          <1>     call adjustDrvHdr
    93 000001E4 E2F9                <1>     loop adjDrivers
    94                              <1> 
    95                              <1> ;Open NUL
    96 000001E6 488D9D[0B000000]    <1>     lea rbx, qword [rbp + charReqHdr]
    97 000001ED C6030D              <1>     mov byte [rbx + openReqPkt.hdrlen], openReqPkt_size
    98 000001F0 C6430300            <1>     mov byte [rbx + openReqPkt.status], 0
    99 000001F4 FF95[AF000000]      <1>     call qword [rbp + nulDevHdr + drvHdr.strPtr]
   100 000001FA FF95[B7000000]      <1>     call qword [rbp + nulDevHdr + drvHdr.intPtr]
   101                              <1> ;Open CON
   102                              <1> conInit:    ;Rather than keeping this resident... do it here
   103                              <1> .ci0:
   104 00000200 B401                <1>     mov ah, 01      ;Get buffer status
   105 00000202 CD36                <1>     int 36h
   106 00000204 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   107 00000206 30E4                <1>     xor ah, ah
   108 00000208 CD36                <1>     int 36h ;Read key to flush from buffer
   109 0000020A EBF4                <1>     jmp short .ci0
   110                              <1> .ci1:
   111 0000020C B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   112 00000211 CD30                <1>     int 30h
   113 00000213 B402                <1>     mov ah, 02h
   114 00000215 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   115 00000217 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   116 00000219 CD30                <1>     int 30h
   117 0000021B B707                <1>     mov bh, 07h     ;Grey/Black attribs
   118 0000021D B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   119 00000222 CD30                <1>     int 30h
   120                              <1> 
   121                              <1>     ;Save ptr to ConHdr in Sysvars
   122 00000224 488D85[86110000]    <1>     lea rax, qword [rbp + conHdr]
   123 0000022B 6448890425-         <1>     mov qword fs:[conPtr], rax
   123 00000230 [7F000000]          <1>
   124                              <1> 
   125                              <1>     ;Save ptr to ClkHdr in Sysvars
   126 00000234 488D85[EC110000]    <1>     lea rax, qword [rbp + clkHdr]
   127 0000023B 6448890425-         <1>     mov qword fs:[clockPtr], rax
   127 00000240 [77000000]          <1>
   128                              <1> 
   129                              <1> ;------------------------------------------------;
   130                              <1> ;          Kernel inits and adjustments          ;
   131                              <1> ;------------------------------------------------;
   132                              <1> ;Adjust Int 41h address table
   133                              <1> adjInt41h:
   134 00000244 B96A000000          <1>     mov ecx, kernelDispatchTableL/8 ;Number of elements in table
   135 00000249 48BB-               <1>     mov rbx, kernelDispatchTable ;Get EA of table
   135 0000024B [A30B000000000000]  <1>
   136 00000253 488D5C1D00          <1>     lea rbx, qword [rbp+rbx]    ;Point to the start of the relocated table 
   137                              <1> .ai41h:
   138 00000258 48012B              <1>     add qword [rbx], rbp    ;Add base address value to entry in reloc table
   139 0000025B 4881C308000000      <1>     add rbx, 8              ;Each entry is size 8
   140 00000262 FFC9                <1>     dec ecx
   141 00000264 75F2                <1>     jnz .ai41h  ;Keep looping until all entries have been adjusted
   142                              <1> 
   143                              <1> ;Adjust Interrupt Entries Int 40h-49h
   144                              <1> adjInts:
   145 00000266 B340                <1>     mov bl, 40h
   146 00000268 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   147 0000026D CD35                <1>     int 35h
   148 0000026F B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   149 00000274 488D3D83020000      <1>     lea rdi, intData
   150 0000027B 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   151                              <1> .ai0:
   152 0000027D B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   153 00000282 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   154 00000285 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   155 00000288 CD35                <1>     int 35h
   156 0000028A 4881C708000000      <1>     add rdi, 8
   157 00000291 FFC1                <1>     inc ecx
   158 00000293 81F94A000000        <1>     cmp ecx, 4Ah
   159 00000299 75E2                <1>     jne .ai0
   160                              <1> 
   161                              <1> ;------------------------------------------------;
   162                              <1> ;         Init msd driver, create DPB            ;
   163                              <1> ;------------------------------------------------;
   164                              <1> storageInits:
   165                              <1> ;First save dpb and cds pointer in sysvars
   166 0000029B 488D9D[00000000]    <1>     lea rbx, qword [rbp + firstDPB]
   167 000002A2 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   167 000002A7 [67000000]          <1>
   168 000002AB 488D9D[49020000]    <1>     lea rbx, qword [rbp + initCDS]
   169 000002B2 6448891C25-         <1>     mov qword fs:[cdsHeadPtr], rbx
   169 000002B7 [91000000]          <1>
   170                              <1> 
   171                              <1> ;Open Mass Storage
   172 000002BB 488D9D[35000000]    <1>     lea rbx, qword [rbp + diskReqHdr]
   173 000002C2 C6031F              <1>     mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   174 000002C5 C6430200            <1>     mov byte [rbx + initReqPkt.cmdcde], 00h     ;MSD init
   175 000002C9 66C743030000        <1>     mov word [rbx + initReqPkt.status], 0       ;Zero status word
   176 000002CF 648A0425[0A000000]  <1>     mov al, byte fs:[numLRemDrives]
   177 000002D7 88431E              <1>     mov byte [rbx + initReqPkt.drvnum], al      ;First unit is drive A
   178 000002DA FF95[18120000]      <1>     call qword [rbp + msdHdr + drvHdr.strPtr]
   179 000002E0 FF95[20120000]      <1>     call qword [rbp + msdHdr + drvHdr.intPtr]
   180                              <1>     ;Check if it returned OK first!
   181 000002E6 66F743030080        <1>     test word [rbx + initReqPkt.status], 8000h  ;Test the error bit
   182 000002EC 0F8598010000        <1>     jnz errorInit   ;If the bit is set, halt execution
   183 000002F2 8A430D              <1>     mov al, byte [rbx + initReqPkt.numunt]
   184 000002F5 64880425[0A000000]  <1>     mov byte fs:[numLRemDrives], al
   185 000002FD 8885[28120000]      <1>     mov byte [rbp + msdHdr + drvHdr.drvNam], al ;Save # of units in name field
   186                              <1> 
   187 00000303 488B5316            <1>     mov rdx, qword [rbx + initReqPkt.optptr]    ;Get ptr to bpbPtrTbl in rdx
   188 00000307 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   189 0000030A 30C9                <1>     xor cl, cl  ;Clear counter
   190 0000030C 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   190 00000311 [67000000]          <1>
   191                              <1> .si0:   
   192 00000315 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   193 00000318 B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   194 0000031A CD41                <1>     int 41h
   195                              <1> ;Add other data to DPB
   196 0000031C 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   197 0000031F 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   198 00000322 50                  <1>     push rax
   199 00000323 488D87[0E120000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   200 0000032A 4889451C            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   201 0000032E 58                  <1>     pop rax
   202 0000032F FEC1                <1>     inc cl
   203 00000331 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   204 00000333 7416                <1>     je .si1
   205 00000335 50                  <1>     push rax
   206 00000336 488D4536            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   207 0000033A 48894526            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   208 0000033E 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   209 00000341 58                  <1>     pop rax
   210 00000342 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   211 00000349 EBCA                <1>     jmp short .si0
   212                              <1> .si1:
   213                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   214 0000034B 48C74526FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   215 00000353 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   216                              <1> 
   217                              <1> ;------------------------------------------------;
   218                              <1> ;                   MCB inits                    ;
   219                              <1> ;------------------------------------------------;
   220                              <1> 
   221                              <1> ;Build the DOS segment's MCB header
   222 00000356 4889EB              <1>     mov rbx, rbp
   223 00000359 4881EB10000000      <1>     sub rbx, mcb_size   ;Point rbx to the start of the MCB
   224 00000360 C6034D              <1>     mov byte [rbx + mcb.marker], "M"
   225 00000363 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get the current PSP
   225 00000368 [D7000000]          <1>
   226 0000036C 48894301            <1>     mov qword [rbx + mcb.owner], rax
   227 00000370 C74309FFFFFFFF      <1>     mov dword [rbx + mcb.blockSize], -1 ;Let size be max for now, adjust later
   228                              <1> 
   229 00000377 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save rbx in data area
   229 0000037C [5F000000]          <1>
   230                              <1> 
   231                              <1> ;------------------------------------------------;
   232                              <1> ;          Default File Handle Creation          ;
   233                              <1> ;------------------------------------------------;
   234                              <1> 
   235                              <1> ;Fill in the default file table entries
   236                              <1>     ;lea rbx, qword [rbp + firstSftHeader]
   237                              <1>     ;mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   238                              <1>     ;mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   239                              <1>     ;mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   240                              <1> 
   241                              <1>     ;lea rbx, qword [rbp + firstSft]
   242                              <1>     ;mov word [rbx + sft.wNumHandles], 0 ;Nothing pointing to this file yet
   243                              <1>     ;mov word [rbx + sft.w]
   244                              <1> 
   245                              <1> ;------------------------------------------------;
   246                              <1> ;               Load CONFIG.SYS                  ;
   247                              <1> ;------------------------------------------------;
   248                              <1> ;------------------------------------------------;
   249                              <1> ;              Process CONFIG.SYS                ;
   250                              <1> ;------------------------------------------------;
   251                              <1> ;------------------------------------------------;
   252                              <1> ;                 Create a CDS                   ;
   253                              <1> ;------------------------------------------------;
   254                              <1> ;------------------------------------------------;
   255                              <1> ;           Load Command interpreter             ;
   256                              <1> ;------------------------------------------------;
   257                              <1> 
   258                              <1> ;Test Error Case
   259 00000380 B430                <1>     mov ah, 00110000b
   260 00000382 B000                <1>     mov al, 00h
   261 00000384 BF0C000000          <1>     mov edi, 0Ch
   262 00000389 CD44                <1>     int 44h
   263                              <1> 
   264 0000038B 488D1515010000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   265 00000392 B409                <1>     mov ah, 09h
   266 00000394 CD41                <1>     int 41h
   267                              <1> 
   268 00000396 B801C50000          <1>     mov eax, 0C501h ;Connect debugger
   269 0000039B CD35                <1>     int 35h
   270                              <1> l1:
   271 0000039D B401                <1>     mov ah, 01h  ;Write with echo
   272 0000039F CD41                <1>     int 41h
   273 000003A1 3C00                <1>     cmp al, 0
   274 000003A3 7402                <1>     je l2
   275 000003A5 EBF6                <1>     jmp short l1
   276                              <1> l2:
   277 000003A7 B407                <1>     mov ah, 07h
   278 000003A9 CD41                <1>     int 41h
   279 000003AB 3C42                <1>     cmp al, 42h
   280 000003AD 75EE                <1>     jne l1
   281                              <1> l3:
   282 000003AF 6466C70425-         <1>     mov word fs:[CLOCKrecrd + clkStruc.dateWord], 0
   282 000003B4 [18010000]0000      <1>
   283 000003BA 488D9D[0B000000]    <1>     lea rbx, qword [rbp + charReqHdr] ;Get the address of this request block
   284 000003C1 488D85[18010000]    <1>     lea rax, qword [rbp + CLOCKrecrd]
   285 000003C8 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   286 000003CB C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read the time
   287 000003CF 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   288 000003D5 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   289 000003D9 C7431606000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 06
   290 000003E0 FF95[F6110000]      <1>     call qword [rbp + clkHdr + drvHdr.strPtr]
   291 000003E6 FF95[FE110000]      <1>     call qword [rbp + clkHdr + drvHdr.intPtr]
   292                              <1> 
   293 000003EC B403                <1>     mov ah, 03h
   294 000003EE 30FF                <1>     xor bh, bh
   295 000003F0 CD30                <1>     int 30h
   296 000003F2 30D2                <1>     xor dl, dl  ;0 column
   297 000003F4 B402                <1>     mov ah, 02h
   298 000003F6 CD30                <1>     int 30h
   299                              <1> 
   300 000003F8 488D9D[18010000]    <1>     lea rbx, qword [rbp + CLOCKrecrd]
   301 000003FF 0FB64303            <1>     movzx eax, byte [rbx + clkStruc.hours]
   302 00000403 E832000000          <1>     call .clkHexToBCD
   303 00000408 B40E                <1>     mov ah, 0Eh
   304 0000040A B03A                <1>     mov al, ":"
   305 0000040C CD30                <1>     int 30h
   306 0000040E 0FB64302            <1>     movzx eax, byte [rbx + clkStruc.minutes]
   307 00000412 E823000000          <1>     call .clkHexToBCD
   308 00000417 B40E                <1>     mov ah, 0Eh
   309 00000419 B03A                <1>     mov al, ":"
   310 0000041B CD30                <1>     int 30h
   311 0000041D 0FB64305            <1>     movzx eax, byte [rbx + clkStruc.seconds]
   312 00000421 E814000000          <1>     call .clkHexToBCD
   313 00000426 B40E                <1>     mov ah, 0Eh
   314 00000428 B02E                <1>     mov al, "."
   315 0000042A CD30                <1>     int 30h
   316 0000042C 0FB64304            <1>     movzx eax, byte [rbx + clkStruc.hseconds]
   317 00000430 E805000000          <1>     call .clkHexToBCD
   318 00000435 E963FFFFFF          <1>     jmp l1
   319                              <1> .clkHexToBCD:
   320                              <1> ;Converts a Hex byte into two BCD digits
   321                              <1> ;Takes input in each nybble of al
   322 0000043A 53                  <1>     push rbx
   323 0000043B 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
   323 00000444 00                  <1>
   324 00000445 31D2                <1>     xor edx, edx
   325 00000447 48F7F3              <1>     div rbx
   326 0000044A 80C230              <1>     add dl, '0'
   327 0000044D 80FA39              <1>     cmp dl, '9'
   328 00000450 7603                <1>     jbe .chtb0
   329 00000452 80C207              <1>     add dl, 'A'-'0'-10
   330                              <1> .chtb0:
   331 00000455 88D1                <1>     mov cl, dl    ;Save remainder byte
   332 00000457 31D2                <1>     xor edx, edx
   333 00000459 48F7F3              <1>     div rbx
   334 0000045C 80C230              <1>     add dl, '0'
   335 0000045F 80FA39              <1>     cmp dl, '9'
   336 00000462 7603                <1>     jbe .chtb1
   337 00000464 80C207              <1>     add dl, 'A'-'0'-10
   338                              <1> .chtb1:
   339 00000467 88D5                <1>     mov ch, dl    ;Save remainder byte
   340                              <1> 
   341 00000469 88E8                <1>     mov al, ch    ;Get most sig digit into al
   342 0000046B B40E                <1>     mov ah, 0Eh
   343 0000046D CD30                <1>     int 30h
   344 0000046F 88C8                <1>     mov al, cl    ;Get least sig digit into al
   345 00000471 B40E                <1>     mov ah, 0Eh
   346 00000473 CD30                <1>     int 30h
   347 00000475 5B                  <1>     pop rbx
   348 00000476 C3                  <1>     ret
   349                              <1> ;--------------------------------
   350                              <1> ;       PROCS FOR SYSINIT       :
   351                              <1> ;--------------------------------
   352                              <1> adjustDrvHdr:
   353                              <1> ;Input: rsi = Effective address of driver in DOS segment
   354                              <1> ;       rbp = Ptr to the start of the DOS segment
   355                              <1> ;Output: rsi = EA of next header in DOS segment
   356 00000477 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   357 0000047A 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   358 0000047E 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   359 00000482 4881C622000000      <1>     add rsi, drvHdr_size
   360 00000489 C3                  <1>     ret
   361                              <1> errorInit:
   362                              <1> ;If a critical error occurs during sysinit, fail through here
   363 0000048A 488D152E000000      <1>     lea rdx, hltmsg
   364 00000491 B409                <1>     mov ah, 09h
   365 00000493 CD41                <1>     int 41h
   366 00000495 FA                  <1>     cli ;Clear interrupts
   367 00000496 B0FF                <1>     mov al, -1
   368 00000498 66BAA100            <1>     mov dx, 0A1h    ;PIC2 data
   369 0000049C EE                  <1>     out dx, al      ;Mask all lines
   370 0000049D 66BA2100            <1>     mov dx, 21h     ;PIC1 data
   371 000004A1 EE                  <1>     out dx, al      ;Mask all lines
   372                              <1> .ei0:
   373 000004A2 F4                  <1>     hlt
   374 000004A3 F390                <1>     pause
   375 000004A5 EBFB                <1>     jmp short .ei0
   376                              <1> 
   377                              <1> ;--------------------------------
   378                              <1> ;       DATA FOR SYSINIT        :
   379                              <1> ;--------------------------------
   380 000004A7 0A0D5374617274696E- <1> strtmsg db 0Ah,0Dh,"Starting SCP/DOS...",0Ah,0Dh,"$"
   380 000004B0 67205343502F444F53- <1>
   380 000004B9 2E2E2E0A0D24        <1>
   381 000004BF 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0Ah,0Dh,"$"
   381 000004C8 7469616C6973696E67- <1>
   381 000004D1 20534350444F532E53- <1>
   381 000004DA 59532E205379737465- <1>
   381 000004E3 6D2068616C74696E67- <1>
   381 000004EC 2E2E2E0A0D24        <1>
   382 000004F2 434F4E00            <1> conName db "CON",0
   383 000004F6 41555800            <1> auxName db "AUX",0
   384 000004FA 50524E00            <1> prnName db "PRN",0
   385                              <1> intData:
   386 000004FE [A303000000000000]  <1>     dq terminateProcess ;Int 40h
   387 00000506 [5B04000000000000]  <1>     dq functionDispatch ;Int 41h
   388 0000050E [A503000000000000]  <1>     dq terminateHandler ;Int 42h
   389 00000516 [A503000000000000]  <1>     dq ctrlCHandler     ;Int 43h
   390 0000051E [F30E000000000000]  <1>     dq critErrorHandler ;Int 44h
   391 00000526 [B503000000000000]  <1>     dq absDiskRead      ;Int 45h
   392 0000052E [A703000000000000]  <1>     dq absDiskWrite     ;Int 46h
   393 00000536 [4D04000000000000]  <1>     dq terminateResident    ;Int 47h
   394 0000053E [4D04000000000000]  <1>     dq inDosHandler     ;Int 48h
   395 00000546 [4F04000000000000]  <1>     dq fastOutput       ;Int 49h
   396                              <1> nData:
   397 0000054E [8611000000000000]  <1>     dq conHdr
   398 00000556 0480                <1>     dw 08004h
   399 00000558 [2E13000000000000]  <1>     dq nulStrat
   400 00000560 [3413000000000000]  <1>     dq nulIntr
   401 00000568 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
    10                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    11                                  %include "dosSeg.asm"
    12                              <1> ;This file contains the main DOS data segment
    13                              <1> 
    14 00000000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    15 00000008 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    16 00000009 ??                  <1>     numRemMSD   resb 1    ;Number of physical removable MSDs in system x
    17 0000000A ??                  <1>     numLRemDrives  resb 1 ;Number of logical removable drives in system x
    18                              <1>     ;if numRemMSD = 1 then numLRemDrives = 2 and we have a single drive system
    19 0000000B <res 2Ah>           <1>     charReqHdr  resb ioReqPkt_size  ;Character IO Request header x
    20 00000035 <res 2Ah>           <1>     diskReqHdr  resb ioReqPkt_size  ;Disk Action Request header x
    21                              <1>     ;The device driver header with space for the largest possible packet
    22 0000005F ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    23                              <1> sysVarsPtr:
    24 00000067 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    25 0000006F ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    26 00000077 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    27                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    28 0000007F ????????????????    <1>     conPtr      resq 1    ;Pointer to the current active CON device header  x
    29                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    30 00000087 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    31 00000089 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain
    32 00000091 ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    33 00000099 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    34 0000009A ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    35 000000A2 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    36 000000A4 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    37 000000A5 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    38                              <1> 
    39                              <1> ;Start of Swappable Data Area, this bit can remain static
    40 000000C7 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h
    41 000000C8 ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving
    42 000000C9 ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh
    43 000000CA ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    44 000000CB ????                <1>     errorExt    resw 1  ;Extended Error Code
    45 000000CD ??                  <1>     errorAction resb 1  ;Suggested action for error  
    46 000000CE ??                  <1>     errorClass  resb 1  ;Error Class
    47                              <1> 
    48 000000CF ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA
    49 000000D7 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP
    50 000000DF ????????????????    <1>     rdiErrorPtr resq 1  ;Saves RDI value of last error (could make this di)
    51 000000E7 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
    52 000000EF ????                <1>     lastRetCode resw 1  ;Last return code returned by Int 41h/4Ch
    53 000000F1 ??                  <1>     currentDrv  resb 1  ;Default drive
    54 000000F2 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls
    55 000000F3 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify
    56                              <1> ;SDA, needs to be replaced between processes
    57 000000F4 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
    58                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    59 000000FC ??                  <1>     singleDrv   resb 1  
    60                              <1> ;This is done to allow for DOS to give the user a change to swap devices
    61                              <1> 
    62 000000FD ??                  <1>     Int44RetVal resb 1  ;Saves a copy of the Int 44 return value
    63 000000FE ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
    64 000000FF ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
    65 00000100 ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
    66 00000108 ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
    67 00000110 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
    68                              <1> ;Time stuff
    69 00000118 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
    70 0000011E ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
    71 0000011F ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
    72 00000120 ??                  <1>     years       resb 1  ;00h - FFh (00 = 1980 - 128 = 2107)
    73 00000121 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
    74 00000123 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
    75                              <1> 
    76                              <1> ;Stacks
    77 00000124 <res 528h>          <1>     critStack   resq 165
    78 0000064C ????????????????    <1>     critStakTop resq 1
    79 00000654 <res 638h>          <1>     IOStack     resq 199
    80 00000C8C ????????????????    <1>     IOStakTop   resq 1
    81 00000C94 <res 638h>          <1>     DiskStack   resq 199
    82 000012CC ????????????????    <1>     DiskStakTop resq 1
    83                              <1>     dSegLen     equ     $
    12                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    13                                  %include "staticData.asm"
    14                              <1> 
    15                              <1> ;-----------------------------------:
    16                              <1> ;           Static Data             :
    17                              <1> ;-----------------------------------:
    18 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    19 00000001 01                  <1> dosMinor    db 01h      ;.01
    14                                  %include "fat.asm"
    15                              <1> ;-----------------------------------:
    16                              <1> ;       File System routines        :
    17                              <1> ;-----------------------------------:
    18                              <1> name2Clust:
    19                              <1> ;Converts a file name to a first cluster number
    20                              <1> ;Converts the whole path subdirectory by subdirectory
    21                              <1> ;On entry: rbx = ptr to ASCIIZ string of file path, maxlen = 67 + 1 (for the 0)
    22                              <1> ;On return: ebx = First cluster number for the file
    23                              <1> ;   On error: CF=CY, ax = Error code
    24                              <1> 
    25                              <1> ;First ascertain path is valid path and get drive letter
    26 00000002 56                  <1>     push rsi
    27 00000003 57                  <1>     push rdi
    28 00000004 51                  <1>     push rcx
    29 00000005 4889DF              <1>     mov rdi, rbx
    30 00000008 4889DE              <1>     mov rsi, rbx
    31 0000000B 807F013A            <1>     cmp byte [rdi + 1], ":" ;Check it is a colon for full path
    32 0000000F 750B                <1>     jne .cdsPath    ;Use CDS for current dir
    33                              <1> .getSubDir:
    34 00000011 B05C                <1>     mov al, "\"
    35 00000013 AE                  <1>     scasb   ;inc 
    36 00000014 7400                <1>     je .psfnd   ;Path separator found
    37                              <1> 
    38                              <1> .psfnd:
    39 00000016 48FFCF              <1>     dec rdi
    40 00000019 4889FE              <1>     mov rsi, rdi
    41                              <1> 
    42                              <1> .cdsPath:
    43 0000001C 59                  <1>     pop rcx
    44 0000001D 5F                  <1>     pop rdi
    45 0000001E 5E                  <1>     pop rsi
    46 0000001F C3                  <1>     ret
    47                              <1> 
    48                              <1> clust2FATEntry:
    49                              <1> ;Converts a cluster number to a FAT entry
    50                              <1> ;Entry:  rsi points to the DPB for the transacting device
    51                              <1> ;        eax = Cluster number to look for
    52                              <1> ;Exit: eax = Sector on disk of FAT, edx = 1.5Word/Word/DWord in sector of entry
    53 00000020 53                  <1>     push rbx
    54 00000021 51                  <1>     push rcx
    55 00000022 8B5E10              <1>     mov ebx, dword [rsi + dpb.dClusterCount]
    56 00000025 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    57 0000002B 7314                <1>     jae .fat32
    58 0000002D 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    59 00000033 7204                <1>     jb .fat12
    60                              <1> ;FAT16
    61 00000035 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    62 00000037 EB0B                <1>     jmp short .common
    63                              <1> .fat12:
    64 00000039 89C1                <1>     mov ecx, eax    ;ecx = eax
    65 0000003B D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    66 0000003D 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    67 0000003F EB03                <1>     jmp short .common
    68                              <1> .fat32:
    69 00000041 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    70                              <1> .common:
    71                              <1> ;eax has the FAToffset
    72 00000044 8A4E02              <1>     mov cl, byte [rsi + dpb.bBytesPerSectorShift]
    73 00000047 BA01000000          <1>     mov edx, 1
    74 0000004C D3E2                <1>     shl edx, cl    ;Turn edx to number of bytes per sector
    75 0000004E 89D1                <1>     mov ecx, edx
    76 00000050 31D2                <1>     xor edx, edx    ;edx = 0
    77 00000052 F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    78 00000054 034605              <1>     add eax, dword [rsi + dpb.dFAToffset]   ;Add the offset to the first FAT
    79 00000057 59                  <1>     pop rcx
    80 00000058 5B                  <1>     pop rbx
    81 00000059 C3                  <1>     ret
    82                              <1> 
    83                              <1> readBuffer:
    84                              <1> ;
    85                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
    86                              <1> ;TO CALL!
    87                              <1> ;
    88                              <1> ;This function will return a pointer to the desired data sector OR 
    89                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
    90                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
    91                              <1> ;Entry: rax = Sector to read
    92                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data) 
    93                              <1> ;       rsi = DPB of transacting drive
    94                              <1> ;Exit:  CF = NC : All ok!
    95                              <1> ;       rbx = Pointer to buffer header with valid data in buffer.
    96                              <1> ;       All other registers as before
    97                              <1> ;       CF = CY: Something went wrong, return error code or INT 44h
    98                              <1> ;       ch = 0 -> Data Not Flushed To Disk
    99                              <1> ;       ch = 1 -> Data Not Read From Disk
   100                              <1> ;       rbx = Pointer to buffer containing sector without valid data in buffer ;            (either unflushed or unread)
   101 0000005A 52                  <1>     push rdx
   102 0000005B 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   103 0000005D E8C8020000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   104 00000062 4881FBFFFFFFFF      <1>     cmp rbx, -1
   105 00000069 7403                <1>     je .rbReadNewSector
   106                              <1> .rbExit:
   107 0000006B F8                  <1>     clc
   108                              <1> .rbExitNoFlag:
   109 0000006C 5A                  <1>     pop rdx
   110 0000006D C3                  <1>     ret
   111                              <1> .rbReadNewSector:
   112 0000006E E846020000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rbx
   113 00000073 4889DD              <1>     mov rbp, rbx
   114 00000076 30ED                <1>     xor ch, ch
   115 00000078 E869000000          <1>     call flushBuffer
   116 0000007D 72ED                <1>     jc .rbExitNoFlag    ;Exit in error
   117                              <1> ;rbp points to bufferHdr that has been appropriately linked to the head of chain
   118 0000007F 51                  <1>     push rcx
   119 00000080 885508              <1>     mov byte [rbp + bufferHdr.driveNumber], dl
   120 00000083 884D09              <1>     mov byte [rbp + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA
   121 00000086 4889450A            <1>     mov qword [rbp + bufferHdr.bufferLBA], rax
   122 0000008A 80F902              <1>     cmp cl, fatBuffer
   123 0000008D B201                <1>     mov dl, 1   ;Default values if not fat buffer
   124 0000008F B900000000          <1>     mov ecx, 0  ;Ditto!
   125 00000094 7506                <1>     jne .rbNonFATbuffer
   126 00000096 8A5609              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   127 00000099 8B4E14              <1>     mov ecx, dword [rsi + dpb.dFATlength]
   128                              <1> .rbNonFATbuffer:
   129 0000009C 885512              <1>     mov byte [rbp + bufferHdr.bufFATcopy], dl
   130 0000009F 894D13              <1>     mov dword [rbp + bufferHdr.bufFATsize], ecx
   131 000000A2 48897517            <1>     mov qword [rbp + bufferHdr.driveDPBPtr], rsi
   132 000000A6 C6451F00            <1>     mov byte [rbp + bufferHdr.reserved], 0
   133 000000AA 59                  <1>     pop rcx
   134 000000AB FEC5                <1>     inc ch  ;If an error occurs, have the signature in ch
   135 000000AD E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
   136 000000B2 EBB8                <1>     jmp short .rbExitNoFlag
   137                              <1> 
   138                              <1> readSectorBuffer:
   139                              <1> ;Reads a sector into a built sector buffer
   140                              <1> ;Entry: rbp = Pointer to buffer header
   141                              <1> ;Exit:  CF=NC : Success
   142                              <1> ;       CF=CY : Fail, terminate the request
   143                              <1> ;       rbx pointing to buffer header
   144                              <1> ;First make request to device driver
   145 000000B4 50                  <1>     push rax
   146 000000B5 53                  <1>     push rbx
   147 000000B6 51                  <1>     push rcx
   148 000000B7 52                  <1>     push rdx
   149 000000B8 56                  <1>     push rsi
   150                              <1> .rsRequest0:
   151 000000B9 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   152                              <1> .rsRequest1:
   153 000000BE 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
   154 000000C1 B901000000          <1>     mov ecx, 1  ;One sector to copy
   155 000000C6 488B550A            <1>     mov rdx, qword [rbp + bufferHdr.bufferLBA]
   156 000000CA 488B5D20            <1>     mov rbx, qword [rbp + bufferHdr.dataarea]
   157 000000CE E8E2020000          <1>     call absDiskRead    ;Call INT 45h
   158 000000D3 7207                <1>     jc .rsFail
   159                              <1> .rsExit:
   160 000000D5 F8                  <1>     clc
   161                              <1> .rsExitBad:
   162 000000D6 5E                  <1>     pop rsi
   163 000000D7 5A                  <1>     pop rdx
   164 000000D8 59                  <1>     pop rcx
   165 000000D9 5B                  <1>     pop rbx
   166 000000DA 58                  <1>     pop rax
   167 000000DB C3                  <1>     ret
   168                              <1> .rsFail:
   169                              <1> ;Enter here only if the request failed
   170 000000DC FFCE                <1>     dec esi
   171 000000DE 75DE                <1>     jnz .rsRequest1 ;Try the request again!
   172                              <1> ;Request failed thrice, critical error call
   173 000000E0 F9                  <1>     stc
   174 000000E1 E9F0FFFFFF          <1>     jmp .rsExitBad  ;Abort
   175                              <1> 
   176                              <1> flushBuffer:
   177                              <1> ;Flushes the data in a sector buffer to disk!
   178                              <1> ;Entry: rbp = Pointer to buffer header for this buffer
   179                              <1> ;Exit:  CF=NC : Success
   180                              <1> ;       CF=CY : Fail, terminate the request
   181                              <1> ;First make request to device driver
   182 000000E6 50                  <1>     push rax
   183 000000E7 53                  <1>     push rbx
   184 000000E8 51                  <1>     push rcx
   185 000000E9 52                  <1>     push rdx
   186 000000EA 56                  <1>     push rsi
   187 000000EB F6450940            <1>     test byte [rbp + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   188 000000EF 7433                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   189                              <1> .fbRequest0:
   190 000000F1 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   191                              <1> .fbRequest1:
   192 000000F6 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
   193 000000F9 B901000000          <1>     mov ecx, 1  ;One sector to copy
   194 000000FE 488B550A            <1>     mov rdx, qword [rbp + bufferHdr.bufferLBA]
   195 00000102 488B5D20            <1>     mov rbx, qword [rbp + bufferHdr.dataarea]
   196 00000106 E89C020000          <1>     call absDiskWrite    ;Call INT 46h
   197 0000010B 7222                <1>     jc .fbFail
   198                              <1> ;Now check if the buffer was a FAT, to write additional copies
   199 0000010D F6450902            <1>     test byte [rbp + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   200 00000111 7411                <1>     jz .fbFreeExit  ;If not, exit
   201 00000113 FE4D12              <1>     dec byte [rbp + bufferHdr.bufFATcopy]
   202 00000116 740C                <1>     jz .fbFreeExit  ;Once this goes to 0, stop writing FAT copies
   203 00000118 8B4513              <1>     mov eax, dword [rbp + bufferHdr.bufFATsize]
   204 0000011B 4801450A            <1>     add qword [rbp + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   205 0000011F E9CDFFFFFF          <1>     jmp .fbRequest0 ;Make another request
   206                              <1> .fbFreeExit:
   207                              <1> ;Free the buffer if it was flushed successfully
   208 00000124 C64508FF            <1>     mov byte [rbp + bufferHdr.driveNumber], -1
   209 00000128 F8                  <1>     clc
   210                              <1> .fbExitBad:
   211 00000129 5E                  <1>     pop rsi
   212 0000012A 5A                  <1>     pop rdx
   213 0000012B 59                  <1>     pop rcx
   214 0000012C 5B                  <1>     pop rbx
   215 0000012D 58                  <1>     pop rax
   216 0000012E C3                  <1>     ret
   217                              <1> .fbFail:
   218                              <1> ;Enter here only if the request failed
   219 0000012F FFCE                <1>     dec esi
   220 00000131 75C3                <1>     jnz .fbRequest1 ;Try the request again!
   221                              <1> ;Request failed thrice, critical error call
   222 00000133 F9                  <1>     stc
   223 00000134 E9F0FFFFFF          <1>     jmp .fbExitBad  ;Abort
   224                              <1> ;---------------------------------------------------:
   225                              <1> ;                   KERNEL FUNCTIONS                :
   226                              <1> ;---------------------------------------------------:
   227                              <1> makeDIR:           ;ah = 39h
   228                              <1> removeDIR:         ;ah = 3Ah
   229                              <1> changeCurrentDIR:  ;ah = 3Bh, changes directory for current drive
   230                              <1> getCurrentDIR:     ;ah = 47h
   231                              <1> getSetFileDateTime:;ah = 57h
   232                              <1> trueName:          ;ah = 60h, get fully qualified name
   233 00000139 C3                  <1>     ret
    15                                  %include "charFunctions.asm"
    16                              <1> ;Dos default char functions live here
    17                              <1> 
    18                              <1> stdinReadEcho:     ;ah = 01h
    19                              <1> ;Return char that has been read and echoed in al
    20 0000013A 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    21 00000141 488D0566000000      <1>     lea rax, .stdinReadEchoBuffer
    22 00000148 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    23 0000014B C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
    24 0000014F 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    25 00000155 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    26 00000159 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    27 00000160 FF152A100000        <1>     call qword [conHdr + drvHdr.strPtr]
    28 00000166 FF152C100000        <1>     call qword [conHdr + drvHdr.intPtr]
    29 0000016C 803D3B00000000      <1>     cmp byte [.stdinReadEchoBuffer], 00h
    30 00000173 7432                <1>     jz .stdireexit
    31 00000175 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    32 0000017C 488D052B000000      <1>     lea rax, .stdinReadEchoBuffer
    33 00000183 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    34 00000186 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    35 0000018A 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    36 00000190 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    37 00000194 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    38 0000019B FF15EF0F0000        <1>     call qword [conHdr + drvHdr.strPtr]
    39 000001A1 FF15F10F0000        <1>     call qword [conHdr + drvHdr.intPtr]
    40                              <1> .stdireexit:
    41 000001A7 8A0501000000        <1>     mov al, byte [.stdinReadEchoBuffer]
    42 000001AD C3                  <1>     ret
    43 000001AE 00                  <1> .stdinReadEchoBuffer    db 0
    44                              <1> stdoutWrite:       ;ah = 02h
    45                              <1> ;Bspace is regular cursor left, does not insert a blank
    46 000001AF 881533000000        <1>     mov byte [.stdoutWriteBuffer], dl
    47 000001B5 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    48 000001BC 488D1525000000      <1>     lea rdx, .stdoutWriteBuffer
    49 000001C3 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    50 000001C6 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    51 000001CA 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    52 000001D0 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
    53 000001D4 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    54 000001DB FF15AF0F0000        <1>     call qword [conHdr + drvHdr.strPtr]
    55 000001E1 FF15B10F0000        <1>     call qword [conHdr + drvHdr.intPtr]
    56 000001E7 C3                  <1>     ret
    57 000001E8 00                  <1> .stdoutWriteBuffer db 0
    58                              <1> stdauxRead:        ;ah = 03h
    59                              <1> stdauxWrite:       ;ah = 04h
    60                              <1> stdprnWrite:       ;ah = 05h
    61                              <1> directCONIO:       ;ah = 06h
    62                              <1> waitDirectInNoEcho:;ah = 07h
    63                              <1> ;Return char in al
    64 000001E9 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    65 000001F0 488D052B000000      <1>     lea rax, .function7buffer
    66 000001F7 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    67 000001FA C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
    68 000001FE 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    69 00000204 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    70 00000208 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    71 0000020F FF157B0F0000        <1>     call qword [conHdr + drvHdr.strPtr]
    72 00000215 FF157D0F0000        <1>     call qword [conHdr + drvHdr.intPtr]
    73 0000021B 8A0501000000        <1>     mov al, byte [.function7buffer]
    74 00000221 C3                  <1>     ret
    75 00000222 00                  <1> .function7buffer    db 0
    76                              <1> waitStdinNoEcho:   ;ah = 08h
    77 00000223 C3                  <1>     ret
    78                              <1> printString:       ;ah = 09h
    79 00000224 31C9                <1>     xor ecx, ecx    ;Clear char counter
    80 00000226 B824000000          <1>     mov eax, "$"    ;Terminating char
    81 0000022B 4889D7              <1>     mov rdi, rdx    ;Set up for scasb
    82                              <1> .ps0:   ;Search for $ to get count of chars
    83 0000022E AE                  <1>     scasb
    84 0000022F 7404                <1>     je .ps1
    85 00000231 FFC1                <1>     inc ecx
    86 00000233 EBF9                <1>     jmp short .ps0
    87                              <1> .ps1:   ;Use handle 
    88 00000235 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    89 0000023C C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    90 0000023F C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    91 00000243 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    92 00000249 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
    93 0000024D 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
    94 00000250 FF153A0F0000        <1>     call qword [conHdr + drvHdr.strPtr]
    95 00000256 FF153C0F0000        <1>     call qword [conHdr + drvHdr.intPtr]
    96                              <1> 
    97 0000025C 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
    98 00000263 8A03                <1>     mov al, byte [rbx+callerFrame.rax]      ;Gets al to preserve it
    99 00000265 C3                  <1>     ret
   100                              <1> buffStdinInput:    ;ah = 0Ah
   101                              <1> checkStdinStatus:  ;ah = 0Bh
   102                              <1> clearbuffDoFunc:   ;ah = 0Ch
    16                                  %include "fcbFunctions.asm"
    17                              <1> openFileFCB:       ;ah = 0Fh
    18                              <1> closeFileFCB:      ;ah = 10h
    19                              <1> findFirstFileFCB:  ;ah = 11h
    20                              <1> findNextFileFCB:   ;ah = 12h
    21                              <1> deleteFileFCB:     ;ah = 13h
    22                              <1> sequentialReadFCB: ;ah = 14h
    23                              <1> sequentialWriteFCB:;ah = 15h
    24                              <1> createFileFCB:     ;ah = 16h
    25                              <1> renameFileFCB:     ;ah = 17h
    26 00000266 C3                  <1>     ret
    27                              <1> setDTA:            ;ah = 1Ah
    28                              <1> ;Called with:
    29                              <1> ;   rdx = Pointer to the new default DTA
    30 00000267 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
    31 0000026E 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
    32 00000272 488915(CF000000)    <1>     mov qword [currentDTA], rdx
    33 00000279 C3                  <1>     ret
    34                              <1> randomReadFCB:     ;ah = 21h
    35                              <1> randomWriteFCB:    ;ah = 22h
    36                              <1> getFileSizeFCB:    ;ah = 23h
    37                              <1> setRelRecordFCB:   ;ah = 24h
    38                              <1> randBlockReadFCB:  ;ah = 27h
    39                              <1> randBlockWriteFCB: ;ah = 28h
    40                              <1> parseFilenameFCB:  ;ah = 29h
    41 0000027A C3                  <1>     ret
    42                              <1> getDTA:            ;ah = 2Fh
    43 0000027B 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
    44 00000282 488B1D(CF000000)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
    45 00000289 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
    46 0000028D C3                  <1>     ret
    17                                  %include "handleFunctions.asm"
    18                              <1> createFileHdl:     ;ah = 3Ch, handle function
    19                              <1> openFileHdl:       ;ah = 3Dh, handle function
    20                              <1> closeFileHdl:      ;ah = 3Eh, handle function
    21                              <1> readFileHdl:       ;ah = 3Fh, handle function
    22                              <1> writeFileHdl:      ;ah = 40h, handle function
    23                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
    24                              <1> movFileReadPtr:    ;ah = 42h, handle function, LSEEK
    25                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
    26                              <1> ioctrl:            ;ah = 44h, handle function
    27                              <1> duplicateHandle:   ;ah = 45h, handle function
    28                              <1> forceDuplicateHdl: ;ah = 46h, handle function
    29                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
    30                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
    31                              <1> renameFile:        ;ah = 56h
    32                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
    33                              <1> createNewFile:     ;ah = 5Bh
    34                              <1> lockUnlockFile:    ;ah = 5Ch
    35                              <1> setHandleCount:    ;ah = 67h
    36                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
    37 0000028E C3                  <1>     ret
    18                                  %include "memoryFunctions.asm"
    19                              <1> ;Memory related functions
    20                              <1> 
    21                              <1> allocateMemory:    ;ah = 48h
    22                              <1> freeMemory:        ;ah = 49h
    23                              <1> reallocMemory:     ;ah = 4Ah
    24                              <1> getsetMallocStrat: ;ah = 58h
    25 0000028F C3                  <1>     ret
    19                                  %include "localisation.asm"
    20                              <1> ;Localisation based functions live here
    21                              <1> 
    22                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    23                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    24                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    25                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    26 00000290 C3                  <1>     ret
    20                                  %include "dosKernel.asm"
    21                              <1> ;-----------------------------------:
    22                              <1> ;       Misc System routines        :
    23                              <1> ;-----------------------------------:
    24                              <1> criticalDOSError:
    25                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    26                              <1> ; to the critical error handler.
    27                              <1> ; Called with ax, di and rsi set as required by Int 44h (caller decides)
    28                              <1> ;               AH = Critical Error Bitfield
    29                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    30                              <1> ;               Bit 6 - Reserved
    31                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    32                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    33                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    34                              <1> ;               Bits [2-1] = Affected Disk Error
    35                              <1> ;                     0 0   DOS area
    36                              <1> ;                     0 1   FAT area
    37                              <1> ;                     1 0   Directory area
    38                              <1> ;                     1 1   Data area
    39                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    40                              <1> ;               AL  = Failing drive number if AH[7] = 0
    41                              <1> ;               DIL = Error code for errorMsg
    42                              <1> ;               RSI = EA of Device Header for which device the error occured
    43                              <1> ;Return:
    44                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    45                              <1> ;                  = 1 - Retry the Operation    (Retry)
    46                              <1> ;                  = 2 - Terminate the Program  (Abort)
    47                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    48                              <1> ; Return response from int 44h in al
    49 00000291 FA                  <1>     cli ;Disable Interrupts
    50 00000292 C605(C7000000)01    <1>     mov byte [critErrFlag], 1   ;Set flag for critical error
    51 00000299 488925(F4000000)    <1>     mov qword [xInt44hRSP], rsp
    52 000002A0 488B25(08010000)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
    53 000002A7 CD44                <1>     int 44h ;Call critical error handler
    54 000002A9 488B25(F4000000)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
    55 000002B0 C605(C7000000)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
    56 000002B7 FB                  <1>     sti ;Reenable Interrupts
    57 000002B8 C3                  <1>     ret
    58                              <1> findLRUBuffer: 
    59                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
    60                              <1> ; in rbx
    61                              <1> ;Input: Nothing
    62                              <1> ;Output: rbx = Pointer to the buffer hdr to use
    63 000002B9 52                  <1>     push rdx
    64 000002BA 488B1D(89000000)    <1>     mov rbx, qword [bufHeadPtr]
    65 000002C1 807B08FF            <1>     cmp byte [rbx + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
    66 000002C5 7436                <1>     je .flbExit 
    67 000002C7 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
    68 000002CE 742D                <1>     je .flbExit
    69                              <1> .flbWalk:
    70 000002D0 4889DA              <1>     mov rdx, rbx    ;Save a ptr to the previous buffer header
    71 000002D3 488B1A              <1>     mov rbx, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
    72 000002D6 807B08FF            <1>     cmp byte [rbx + bufferHdr.driveNumber], -1
    73 000002DA 7423                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
    74 000002DC 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
    75 000002E3 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
    76 000002E5 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
    77                              <1> .flbHeadLink:
    78 000002EC 488B15(89000000)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
    79 000002F3 48891D(89000000)    <1>     mov qword [bufHeadPtr], rbx    ;Sysvars to point to new buffer
    80 000002FA 488913              <1>     mov qword [rbx + bufferHdr.nextBufPtr], rdx
    81                              <1> .flbExit:
    82 000002FD 5A                  <1>     pop rdx
    83 000002FE C3                  <1>     ret
    84                              <1> .flbFreeLink:
    85 000002FF 51                  <1>     push rcx
    86 00000300 488B0B              <1>     mov rcx, qword [rbx + bufferHdr.nextBufPtr]
    87 00000303 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rbx
    88 00000306 59                  <1>     pop rcx
    89 00000307 EBE3                <1>     jmp short .flbHeadLink
    90                              <1> 
    91                              <1> findDirtyBufferForDrive:
    92                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
    93                              <1> ;Input: dl = Drive number
    94                              <1> ;Output: rbx = Pointer to dirty buffer for drive letter if exists or -1 if not
    95 00000309 488B1D(89000000)    <1>     mov rbx, qword [bufHeadPtr]
    96                              <1> .fdbfdCheckBuffer:
    97 00000310 385308              <1>     cmp byte [rbx + bufferHdr.driveNumber], dl
    98 00000313 7507                <1>     jne .fdbfdGotoNextBuffer
    99 00000315 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   100 00000319 7401                <1>     jz .fdbfdGotoNextBuffer ;Bit not set, goto next buffer
   101                              <1> .fdbfdExit:
   102 0000031B C3                  <1>     ret
   103                              <1> .fdbfdGotoNextBuffer:
   104 0000031C 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   105 0000031F 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit
   106 00000326 74F3                <1>     je .fdbfdExit
   107 00000328 EBE6                <1>     jmp short .fdbfdCheckBuffer
   108                              <1> 
   109                              <1> findSectorInBuffer:
   110                              <1> ;Finds the Buffer for a sector
   111                              <1> ;If the sector is not in a buffer, returns with a -1
   112                              <1> ;Input: rax = Sector number
   113                              <1> ;        dl = Drive number
   114                              <1> ;Output: rbx = Buffer hdr pointer or -1
   115 0000032A 488B1D(89000000)    <1>     mov rbx, qword [bufHeadPtr]
   116                              <1> .fsiCheckBuffer:
   117 00000331 385308              <1>     cmp byte [rbx + bufferHdr.driveNumber], dl
   118 00000334 7507                <1>     jne .fsiGotoNextBuffer
   119 00000336 4839430A            <1>     cmp qword [rbx + bufferHdr.bufferLBA], rax
   120 0000033A 7501                <1>     jne .fsiGotoNextBuffer
   121                              <1> .fsiExit:
   122 0000033C C3                  <1>     ret
   123                              <1> .fsiGotoNextBuffer:
   124 0000033D 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   125 00000340 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit
   126 00000347 74F3                <1>     je .fsiExit
   127 00000349 EBE6                <1>     jmp short .fsiCheckBuffer
   128                              <1> findDPB:
   129                              <1> ;Finds the DPB for a given drive
   130                              <1> ;Input:  dl = Drive number (0=A, 1=B etc...)
   131                              <1> ;Output: al = 00, rbx = Pointer to the DPB
   132                              <1> ;        al = -1, Failed, no DPB for device, rbx destroyed
   133 0000034B 488B1D(67000000)    <1>     mov rbx, qword [dpbHeadPtr]
   134                              <1> .fd1:
   135 00000352 30C0                <1>     xor al, al
   136 00000354 3813                <1>     cmp byte [rbx + dpb.bDriveNumber], dl
   137 00000356 740F                <1>     je .fd2
   138 00000358 488B5B26            <1>     mov rbx, qword [rbx + dpb.qNextDPBPtr]
   139 0000035C B0FF                <1>     mov al, -1
   140 0000035E 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If rbx followed last item in list, no DPB exists for dl
   141 00000365 75EB                <1>     jne .fd1
   142                              <1> .fd2:
   143 00000367 C3                  <1>     ret
   144                              <1> ;-----------------------------------:
   145                              <1> ;        File Handle routines       :
   146                              <1> ;-----------------------------------:
   147                              <1> readBinaryByteFromFile:
   148                              <1> ;Reads a byte from a SFT entry, does not translate it. 
   149                              <1> ;Read or RW permissions are checked at the INT 41h level
   150                              <1> ;Entry: rbx = SFT entry pointer
   151                              <1> ;       rdx = Address of the data buffer to read to
   152                              <1> ;       ecx = Number of bytes to read
   153                              <1> ;Exit: If CF = NC : All ok!
   154                              <1> ;       rbx = SFT entry pointer
   155                              <1> ;       al = 8 bit binary value read from device/file
   156                              <1> ;      If CF = CY : Error!
   157                              <1> ;       rbx = SFT entry pointer
   158                              <1> ;       al = Error code to ret if user returns fail from int 44h or no int 44h
   159                              <1> ;
   160                              <1> ; !!! Use the disk request header for all file handle IO !!!
   161                              <1> ;
   162 00000368 66F743058000        <1>     test word [rbx + sft.wDeviceInfo], devCharDev
   163 0000036E 7500                <1>     jnz .readBinaryByteFromCharDevice
   164                              <1> .readBinaryByteFromHardFile:
   165                              <1> ;Disk files are accessed from here
   166                              <1> ;Use the sector buffers if the data is already buffered,
   167                              <1> ; else use the dpb to fill a sector buffer
   168                              <1> 
   169                              <1> 
   170                              <1> .readBinaryByteFromCharDevice:
   171                              <1> ;Devices are accessed from here
   172 00000370 488B6B07            <1>     mov rbp, qword [rbx + sft.qPtr] ;Get device driver header pointer
   173 00000374 53                  <1>     push rbx
   174 00000375 488D1D(0B000000)    <1>     lea rbx, charReqHdr
   175 0000037C C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   176 0000037F C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], drvREAD
   177 00000383 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   178 00000389 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   179 0000038D 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   180                              <1> 
   181 00000390 FF550A              <1>     call qword [rbp + drvHdr.strPtr]
   182 00000393 FF5512              <1>     call qword [rbp + drvHdr.intPtr]
   183 00000396 8B4316              <1>     mov eax, dword [rbx + ioReqPkt.tfrlen] ;Get number of bytes read
   184 00000399 66F743030080        <1>     test word [rbx + ioReqPkt.status], 8000h    ;Test the error bit is set
   185 0000039F 5B                  <1>     pop rbx
   186 000003A0 7400                <1>     jz .readBinaryByteExitGood  ;Error bit not set, all good!
   187                              <1> .readBinaryByteExitGood:
   188 000003A2 C3                  <1>     ret
   189                              <1> ;-----------------------------------:
   190                              <1> ;        Interrupt routines         :
   191                              <1> ;-----------------------------------:
   192                              <1> terminateProcess:   ;Int 40h
   193 000003A3 48CF                <1>     iretq
   194                              <1> terminateHandler:   ;Int 42h
   195                              <1> ctrlCHandler:       ;Int 43h
   196 000003A5 48CF                <1>     iretq
   197                              <1> absDiskWrite:       ;Int 46h
   198                              <1> ;al = Drive number
   199                              <1> ;rbx = Memory Buffer address to read from
   200                              <1> ;ecx = Number of sectors to write
   201                              <1> ;rdx = Start LBA to write to
   202 000003A7 50                  <1>     push rax
   203 000003A8 53                  <1>     push rbx
   204 000003A9 52                  <1>     push rdx
   205 000003AA 55                  <1>     push rbp
   206 000003AB B408                <1>     mov ah, drvWRITE
   207 000003AD 0225(F3000000)      <1>     add ah, byte [verifyFlag]   ;Change to Write/Verify if set
   208 000003B3 EB06                <1>     jmp short absDiskReadWriteCommon
   209                              <1> absDiskRead:        ;Int 45h
   210                              <1> ;al = Drive number
   211                              <1> ;rbx = Memory Buffer address to write to
   212                              <1> ;ecx = Number of sectors to read
   213                              <1> ;rdx = Start LBA to read from
   214 000003B5 50                  <1>     push rax
   215 000003B6 53                  <1>     push rbx
   216 000003B7 52                  <1>     push rdx
   217 000003B8 55                  <1>     push rbp
   218 000003B9 B404                <1>     mov ah, drvREAD
   219                              <1> absDiskReadWriteCommon:
   220                              <1> ;Entered with the appropriate function number in ah
   221 000003BB 50                  <1>     push rax    ;Save drive number, cmdcde and start LBA
   222 000003BC 53                  <1>     push rbx
   223 000003BD 52                  <1>     push rdx
   224 000003BE B432                <1>     mov ah, 32h ;Get DPB
   225 000003C0 88C2                <1>     mov dl, al
   226 000003C2 CD41                <1>     int 41h
   227 000003C4 4889DD              <1>     mov rbp, rbx    ;Get dpb ptr in rbp
   228 000003C7 5A                  <1>     pop rdx
   229 000003C8 5B                  <1>     pop rbx
   230 000003C9 58                  <1>     pop rax
   231                              <1> 
   232 000003CA C605(35000000)2A    <1>     mov byte [diskReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   233 000003D1 8805(36000000)      <1>     mov byte [diskReqHdr + ioReqPkt.unitnm], al
   234 000003D7 8825(37000000)      <1>     mov byte [diskReqHdr + ioReqPkt.cmdcde], ah
   235 000003DD 66C705(38000000)00- <1>     mov word [diskReqHdr + ioReqPkt.status], 0
   235 000003E5 00                  <1>
   236 000003E6 8A4524              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   237 000003E9 8805(42000000)      <1>     mov byte [diskReqHdr + ioReqPkt.medesc], al
   238 000003EF 48891D(43000000)    <1>     mov qword [diskReqHdr + ioReqPkt.bufptr], rbx
   239 000003F6 488915(4F000000)    <1>     mov qword [diskReqHdr + ioReqPkt.strtsc], rdx
   240 000003FD 890D(4B000000)      <1>     mov dword [diskReqHdr + ioReqPkt.tfrlen], ecx
   241 00000403 488B551C            <1>     mov rdx, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver pointer
   242                              <1> 
   243 00000407 488D1D(35000000)    <1>     lea rbx, diskReqHdr
   244 0000040E FF520A              <1>     call qword [rdx + drvHdr.strPtr]  ;Call with ptr to request block in rbx
   245 00000411 FF5212              <1>     call qword [rdx + drvHdr.intPtr]
   246 00000414 5D                  <1>     pop rbp
   247 00000415 5A                  <1>     pop rdx
   248 00000416 5B                  <1>     pop rbx
   249 00000417 58                  <1>     pop rax
   250 00000418 66F705(38000000)00- <1>     test word [diskReqHdr + ioReqPkt.status], 8000h
   250 00000420 80                  <1>
   251 00000421 7402                <1>     je .absDiskError
   252 00000423 F8                  <1>     clc
   253 00000424 C3                  <1>     ret
   254                              <1> .absDiskError:
   255 00000425 8A05(38000000)      <1>     mov al, byte [diskReqHdr + ioReqPkt.status] ;Get low byte into al
   256 0000042B B480                <1>     mov ah, 80h ;Attachment failure
   257 0000042D 3C0C                <1>     cmp al, 0Ch ;Gen error
   258 0000042F 741A                <1>     je .absExit
   259 00000431 B440                <1>     mov ah, 40h ;Seek error
   260 00000433 3C06                <1>     cmp al, 06h
   261 00000435 7414                <1>     je .absExit
   262 00000437 B408                <1>     mov ah, 08h ;Bad CRC
   263 00000439 3C04                <1>     cmp al, 04h
   264 0000043B 740E                <1>     je .absExit
   265 0000043D B404                <1>     mov ah, 04h ;Sector not found
   266 0000043F 3C08                <1>     cmp al, 08h
   267 00000441 7408                <1>     je .absExit
   268 00000443 30E4                <1>     xor ah, ah  ;Write Protect Violation
   269 00000445 84C0                <1>     test al, al
   270 00000447 7402                <1>     je .absExit
   271 00000449 B402                <1>     mov ah, 02h ;Other Error
   272                              <1> .absExit:
   273 0000044B F9                  <1>     stc
   274 0000044C C3                  <1>     ret
   275                              <1> 
   276                              <1> terminateResident:  ;Int 47h
   277                              <1> inDosHandler:       ;Int 48h
   278                              <1> ;Called when DOS idle
   279 0000044D 48CF                <1>     iretq
   280                              <1> fastOutput:         ;Int 49h
   281                              <1> ;Called with char to transfer in al
   282 0000044F 50                  <1>     push rax
   283 00000450 B40E                <1>     mov ah, 0Eh
   284 00000452 CD30                <1>     int 30h
   285 00000454 58                  <1>     pop rax
   286 00000455 48CF                <1>     iretq
   287                              <1> passCommand:        ;Int 4Eh, hooked by COMMAND.COM
   288 00000457 48CF                <1>     iretq
   289                              <1> multiplex:          ;Int 4Fh, kept as iretq for now
   290 00000459 48CF                <1>     iretq
   291                              <1> ;-----------------------------------:
   292                              <1> ;        Main Kernel routines       :
   293                              <1> ;-----------------------------------:
   294                              <1> functionDispatch:   ;Int 41h Main function dispatcher
   295                              <1> ;ah = Function number, all other registers have various meanings
   296 0000045B FA                  <1>     cli ;Halt external interrupts
   297 0000045C FC                  <1>     cld ;Ensure all string ops occur in the right direction
   298 0000045D 80FC6A              <1>     cmp ah, kernelDispatchTableL/8    ;Number of functions
   299 00000460 0F871D010000        <1>     ja .fdExitBad
   300                              <1>     ;Cherry pick functions
   301 00000466 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
   302 00000469 722C                <1>     jb .fsbegin   ;If below skip these checks
   303 0000046B 0F843C050000        <1>     je ctrlBreakCheck
   304 00000471 80FC64              <1>     cmp ah, 64h
   305 00000474 0F8428070000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
   306 0000047A 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
   307 0000047C 80FC51              <1>     cmp ah, 51h
   308 0000047F 0F84F7050000        <1>     je getCurrProcessID    ;This and below are exactly the same
   309 00000485 80FC62              <1>     cmp ah, 62h
   310 00000488 0F8401070000        <1>     je getPSPaddr          ;Calls the above function
   311 0000048E 80FC50              <1>     cmp ah, 50h
   312 00000491 0F84DD050000        <1>     je setCurrProcessID
   313                              <1> .fsbegin:
   314                              <1>     pushDOS ;Push the usual prologue registers
   255 00000497 4151                <2>  push r9
   256 00000499 4150                <2>  push r8
   257 0000049B 55                  <2>  push rbp
   258 0000049C 57                  <2>  push rdi
   259 0000049D 56                  <2>  push rsi
   260 0000049E 52                  <2>  push rdx
   261 0000049F 51                  <2>  push rcx
   262 000004A0 53                  <2>  push rbx
   263 000004A1 50                  <2>  push rax
   315 000004A2 488B05(08010000)    <1>     mov rax, qword [oldRSP]
   316 000004A9 488905(00010000)    <1>     mov qword [oldoldRSP], rax
   317 000004B0 FE05(C8000000)      <1>     inc byte [inDOS]    ;Increment in DOS flag
   318 000004B6 488925(08010000)    <1>     mov qword [oldRSP], rsp
   319                              <1> ;Here, we want to save oldRSP in the callers PSP
   320 000004BD 803D(C8000000)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
   321 000004C4 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
   322 000004C6 488B05(D7000000)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
   323 000004CD 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
   324                              <1> .fsb1:
   325 000004D1 58                  <1>     pop rax     ;Get old rax back
   326 000004D2 50                  <1>     push rax    ;and push it back onto the stack
   327 000004D3 488D25(4C060000)    <1>     lea rsp, critStakTop
   328 000004DA FB                  <1>     sti         ;Reenable interrupts
   329                              <1> 
   330 000004DB C605(FF000000)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
   331                              <1> 
   332 000004E2 48891D(10010000)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
   333 000004E9 0FB6DC              <1>     movzx ebx, ah   ;Move the function number bl zero extended to rbx
   334 000004EC C1E303              <1>     shl ebx, 3      ;Multiply the function number by 8 for offset into table
   335 000004EF 50                  <1>     push rax        ;Push rax onto the stack
   336 000004F0 488D05AC060000      <1>     lea rax, qword [kernelDispatchTable]
   337 000004F7 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   338 000004FA 58                  <1>     pop rax
   339 000004FB 488B1B              <1>     mov rbx, qword [rbx]    ;Get the address from the dispatch table
   340                              <1> 
   341 000004FE 84E4                <1>     test ah, ah     ;Simple Terminate function?
   342 00000500 741C                <1>     jz .fddiskOp
   343 00000502 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   344 00000505 7443                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   345 00000507 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   346 0000050A 7712                <1>     ja .fddiskOp
   347                              <1> ;Char operations here
   348 0000050C F605(C7000000)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   349 00000513 7535                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   350 00000515 488D25(8C0C0000)    <1>     lea rsp, IOStakTop          ;Otherwise, switch to IO stack
   351 0000051C EB2C                <1>     jmp short .fdGoToFunction
   352                              <1> .fddiskOp:
   353                              <1>     ;Disk operations go here
   354                              <1>     ;Clear up error info
   355 0000051E C605(CA000000)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   356 00000525 C605(C7000000)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   357 0000052C C605(C9000000)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   358                              <1> 
   359 00000533 C605(FF000000)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   360 0000053A 488D25(CC120000)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   361 00000541 F605(F2000000)FF    <1>     test byte [breakFlag], -1   ;Test if set
   362 00000548 7400                <1>     jz .fdGoToFunction
   363                              <1> ; HANDLE CTRL+BREAK HERE!
   364                              <1> .fdGoToFunction:
   365 0000054A 48871D(10010000)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   366                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   367                              <1>     ;
   368                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   369                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   370                              <1>     ;
   371 00000551 FF15(10010000)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   372                              <1> .fdExit:
   373 00000557 FA                  <1>     cli     ;Redisable interrupts
   374                              <1>     ;???
   375 00000558 FE0D(C8000000)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   376 0000055E 488B25(08010000)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   377 00000565 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   378 00000568 488B05(00010000)    <1>     mov rax, qword [oldoldRSP]
   379 0000056F 488905(08010000)    <1>     mov qword [oldRSP], rax
   380                              <1>     popDOS  ;Pop the frame
   267 00000576 58                  <2>  pop rax
   268 00000577 5B                  <2>  pop rbx
   269 00000578 59                  <2>  pop rcx
   270 00000579 5A                  <2>  pop rdx
   271 0000057A 5E                  <2>  pop rsi
   272 0000057B 5F                  <2>  pop rdi
   273 0000057C 5D                  <2>  pop rbp
   274 0000057D 4158                <2>  pop r8
   275 0000057F 4159                <2>  pop r9
   381 00000581 48CF                <1>     iretq
   382                              <1> .fdExitBad:
   383 00000583 B400                <1>     mov ah, 0
   384 00000585 48CF                <1>     iretq
   385                              <1> simpleTerminate:   ;ah = 00h
   386 00000587 C3                  <1>     ret
   387                              <1> diskReset:         ;ah = 0Dh
   388                              <1> ;Flush all dirty buffers to disk
   389 00000588 488B2D(89000000)    <1>     mov rbp, qword [bufHeadPtr]
   390                              <1> .drCheckBuffer:
   391 0000058F F6450940            <1>     test byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   392 00000593 7407                <1>     jz .drGotoNextBuffer
   393                              <1> .drFlushBuffer:
   394 00000595 E84CFBFFFF          <1>     call flushBuffer    ;Called with rbp = buffer header
   395 0000059A 720E                <1>     jc .drError
   396                              <1> .drGotoNextBuffer:
   397 0000059C 488B6D00            <1>     mov rbp, qword [rbp + bufferHdr.nextBufPtr]
   398 000005A0 4881FDFFFFFFFF      <1>     cmp rbp, -1     ;If rbp points to -1, exit
   399 000005A7 75E6                <1>     jne .drCheckBuffer
   400 000005A9 C3                  <1>     ret
   401                              <1> .drError:
   402                              <1> ;Abort/Retry/Ignore
   403                              <1> ;Abort returns to DOS, 
   404                              <1> ;Retry retries the write on the buffer, 
   405                              <1> ;Ignore marks the buffer as clean and proceeds as normal
   406 000005AA 8A4509              <1>     mov al, byte [rbp + bufferHdr.bufferFlags]
   407 000005AD 240F                <1>     and al, 0Fh ;Clear the upper nybble
   408 000005AF B431                <1>     mov ah, 31h ;Disk Error, Ignore,Retry and Write operation
   409 000005B1 3C01                <1>     cmp al, dosBuffer
   410 000005B3 740F                <1>     je .drErrorMain
   411 000005B5 80C402              <1>     add ah, 2
   412 000005B8 3C02                <1>     cmp al, fatBuffer
   413 000005BA 7408                <1>     je .drErrorMain
   414 000005BC 80C402              <1>     add ah, 2
   415 000005BF 3C04                <1>     cmp al, dirBuffer
   416 000005C1 80C402              <1>     add ah, 2
   417                              <1> .drErrorMain:
   418 000005C4 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
   419 000005C7 488B7517            <1>     mov rsi, qword [rbp + bufferHdr.driveDPBPtr]
   420 000005CB 488B761C            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   421 000005CF 668B3D(38000000)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]    ;Disk error occured!
   422 000005D6 6681E7FF00          <1>     and di, 0FFh    ;Only bottom byte
   423 000005DB 66893D(CB000000)    <1>     mov word [errorExt], di     ;Save driver error code
   424 000005E2 668105(CB000000)13- <1>     add word [errorExt], 13h    ;Add offset to driver error codes
   424 000005EA 00                  <1>
   425 000005EB 8805(C9000000)      <1>     mov byte [errorDrv], al     ;Save the drive on which the error occured
   426 000005F1 C605(CA000000)02    <1>     mov byte [errorLocus], 2    ;Error in Block Device Request code
   427 000005F8 C605(CE000000)0B    <1>     mov byte [errorClass], 11   ;Media error occured (bad BPB or other) code
   428 000005FF C605(CD000000)01    <1>     mov byte [errorAction], 1   ;Retry request code
   429 00000606 E886FCFFFF          <1>     call criticalDOSError       ;Critical error handler
   430 0000060B 84C0                <1>     test al, al ;Ignore the troublesome buffer and mark it as free
   431 0000060D 7406                <1>     jz .drIgnore
   432 0000060F 3C01                <1>     cmp al, 1   ;Retry flushing the buffer
   433 00000611 7482                <1>     je .drFlushBuffer
   434 00000613 CD43                <1>     int 43h     ;Abort and fail both abort through int 43h
   435                              <1> .drIgnore:
   436 00000615 C64508FF            <1>     mov byte [rbp + bufferHdr.driveNumber], -1  ;Mark buffer as free
   437 00000619 E97EFFFFFF          <1>     jmp .drGotoNextBuffer
   438                              <1> 
   439                              <1> selectDisk:        ;ah = 0Eh
   440                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   441 0000061E 8A05(0A000000)      <1>     mov al, byte [numLRemDrives]    ;Value 1 based
   442 00000624 8A1D(99000000)      <1>     mov bl, byte [lastdrvNum]       ;Value 1 based
   443 0000062A FEC8                <1>     dec al
   444 0000062C FECB                <1>     dec bl
   445 0000062E 38C3                <1>     cmp bl, al
   446 00000630 0F47C3              <1>     cmova eax, ebx    ;If bl > al, move bl to al
   447 00000633 38C2                <1>     cmp dl, al  ;If dl is bigger than al
   448 00000635 7707                <1>     ja .error
   449 00000637 8815(F1000000)      <1>     mov byte [currentDrv], dl   ;Only save dl if it is a valid number
   450 0000063D C3                  <1>     ret ;al = lastdrv as retcode
   451                              <1> .error:
   452 0000063E 488B2D(08010000)    <1>     mov rbp, qword [oldRSP]
   453 00000645 48814D5801000000    <1>     or qword [rbp + callerFrame.flags], 1   ;Set the CY flag
   454 0000064D B80F000000          <1>     mov eax, 15                 ;Invalid drive error
   455 00000652 668905(CB000000)    <1>     mov word [errorExt], ax     
   456 00000659 C605(CA000000)01    <1>     mov byte [errorLocus], 1    ;Not appropriate
   457 00000660 C605(CE000000)08    <1>     mov byte [errorClass], 8    ;Drive not found
   458 00000667 C605(CD000000)07    <1>     mov byte [errorAction], 7   ;Retry after user intervention
   459 0000066E C3                  <1>     ret
   460                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   461 0000066F 8A05(F1000000)      <1>     mov al, byte [currentDrv]
   462 00000675 C3                  <1>     ret
   463                              <1> FATinfoDefault:    ;ah = 1Bh
   464 00000676 30D2                <1>     xor dl, dl
   465                              <1> FATinfoDevice:     ;ah = 1Ch
   466                              <1> ;Return in:
   467                              <1> ;   al = Number of sectors per cluster
   468                              <1> ;   edx = Number of clusters
   469                              <1> ;   cx =  Size of a clsuter
   470 00000678 84D2                <1>     test dl, dl
   471 0000067A 7408                <1>     jz .fidSkipdefault
   472 0000067C 8A15(F1000000)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   473 00000682 EB02                <1>     jmp short .fidMain
   474                              <1> .fidSkipdefault:
   475 00000684 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   476                              <1> .fidMain:
   477                              <1> ;Walk the dpb chain manually
   478 00000686 488B2D(67000000)    <1>     mov rbp, qword [dpbHeadPtr]
   479                              <1> .fidCompare:
   480 0000068D 3A5500              <1>     cmp dl, byte [rbp + dpb.bDriveNumber]
   481 00000690 743E                <1>     je .fidDPBFound
   482 00000692 488B6D26            <1>     mov rbp, qword [rbp + dpb.qNextDPBPtr]  ;Go to next DPB
   483 00000696 4881FDFFFFFFFF      <1>     cmp rbp, -1 ;If -1 => we at the end
   484 0000069D 75EE                <1>     jne .fidCompare
   485                              <1> ;Else, we at an error.
   486                              <1> ;Simply return with CY set and error code in al with extended error info
   487 0000069F 488B2D(08010000)    <1>     mov rbp, qword [oldRSP]
   488 000006A6 48814D5801000000    <1>     or qword [rbp + callerFrame.flags], 1   ;Set the CY flag
   489 000006AE B80F000000          <1>     mov eax, 15                 ;Invalid drive error
   490 000006B3 668905(CB000000)    <1>     mov word [errorExt], ax     
   491 000006BA C605(CA000000)01    <1>     mov byte [errorLocus], 1    ;Not appropriate
   492 000006C1 C605(CE000000)08    <1>     mov byte [errorClass], 8    ;Drive not found
   493 000006C8 C605(CD000000)07    <1>     mov byte [errorAction], 7   ;Retry after user intervention
   494 000006CF C3                  <1>     ret
   495                              <1> .fidDPBFound:
   496 000006D0 8A4503              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
   497 000006D3 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   498 000006D5 8B5510              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   499 000006D8 8A4D02              <1>     mov cl, byte [rbp + dpb.bBytesPerSectorShift]
   500 000006DB BB01000000          <1>     mov ebx, 1
   501 000006E0 D3E3                <1>     shl ebx, cl
   502 000006E2 89D9                <1>     mov ecx, ebx    ;Save the value in ecx
   503 000006E4 488D5D24            <1>     lea rbx, qword [rbp + dpb.bMediaDescriptor]
   504 000006E8 488B2D(08010000)    <1>     mov rbp, qword [oldRSP]
   505 000006EF 48895518            <1>     mov qword [rbp + callerFrame.rdx], rdx
   506 000006F3 66894D10            <1>     mov word [rbp + callerFrame.rcx], cx
   507 000006F7 48895D08            <1>     mov qword [rbp + callerFrame.rbx], rbx
   508 000006FB C3                  <1>     ret
   509                              <1> ;===============================
   510                              <1> setIntVector:      ;ah = 25h
   511                              <1> ;Called with:
   512                              <1> ;   rdx = Pointer to interrupt handler
   513                              <1> ;   al = Interrupt number
   514 000006FC 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   515 000006FE 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   516                              <1> ;First call to get default BIOS segement selector and attribute word
   517 00000704 88C3                <1>     mov bl, al  ;Set interrupt number 
   518 00000706 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   519 0000070B CD35                <1>     int 35h
   520 0000070D 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   521 0000070F 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   522                              <1> ;dx preserves the attribute word
   523 00000711 488B2D(08010000)    <1>     mov rbp, qword [oldRSP]
   524 00000718 488B5D18            <1>     mov rbx, qword [rbp + callerFrame.rdx]  ;Pointer passed in rdx
   525 0000071C B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   526 00000721 CD35                <1>     int 35h
   527                              <1> 
   528 00000723 8A4500              <1>     mov al, byte [rbp + callerFrame.rax]    ;Preserve low byte of rax
   529 00000726 C3                  <1>     ret
   530                              <1> createNewPSP:      ;ah = 26h
   531                              <1> getDate:           ;ah = 2Ah
   532                              <1> setDate:           ;ah = 2Bh
   533                              <1> getTime:           ;ah = 2Ch
   534                              <1> setTime:           ;ah = 2Dh
   535 00000727 C3                  <1>     ret
   536                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   537 00000728 8805(F3000000)      <1>     mov byte [verifyFlag], al
   538 0000072E 8025(F3000000)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   539 00000735 C3                  <1>     ret
   540                              <1> getDOSversion:     ;ah = 30h
   541 00000736 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   542 0000073D 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   543 0000073F 886209              <1>     mov byte [rdx + callerFrame.rbx + 1], ah    ;Clear bh 
   544 00000742 668B05B7F8FFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   545 00000749 668902              <1>     mov word [rdx + callerFrame.rax], ax    ;Save ax
   546 0000074C C3                  <1>     ret
   547                              <1> terminateStayRes:  ;ah = 31h
   548 0000074D C3                  <1>     ret
   549                              <1> ;-------------------------------------------
   550                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply calls int 41h ah = 32h with dl = 0
   551 0000074E 30D2                <1>     xor dl, dl
   552                              <1> getDeviceDPBptr:   ;ah = 32h
   553                              <1> ;On entry: dl = Drive number
   554                              <1> ;On exit: rbx = DPB pointer
   555 00000750 84D2                <1>     test dl, dl
   556 00000752 7508                <1>     jnz .gddpskipdefault
   557 00000754 8A15(F1000000)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   558 0000075A EB02                <1>     jmp short .gddpcommon
   559                              <1> .gddpskipdefault:
   560                              <1>     ;Decrement the drive letter since 0 = Default, 1 = A etc...
   561 0000075C FECA                <1>     dec dl
   562                              <1> .gddpcommon:
   563 0000075E E8E8FBFFFF          <1>     call findDPB
   564 00000763 84C0                <1>     test al, al
   565 00000765 7401                <1>     jz .gddpMediaCheck
   566 00000767 C3                  <1>     ret ;Return. al = -1
   567                              <1> .gddpMediaCheck:
   568 00000768 4889DD              <1>     mov rbp, rbx    ;Save dpb pointer in rbp
   569                              <1> ;Media Check Section
   570 0000076B C605(35000000)17    <1>     mov byte [diskReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   571 00000772 8815(36000000)      <1>     mov byte [diskReqHdr + mediaCheckReqPkt.unitnm], dl
   572 00000778 C605(37000000)01    <1>     mov byte [diskReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   573 0000077F 66C705(38000000)00- <1>     mov word [diskReqHdr + mediaCheckReqPkt.status], 0
   573 00000787 00                  <1>
   574 00000788 8A4524              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   575 0000078B 8805(42000000)      <1>     mov byte [diskReqHdr + mediaCheckReqPkt.medesc], al
   576 00000791 88D0                <1>     mov al, dl  ;Save device number in al
   577 00000793 488B551C            <1>     mov rdx, qword [rbp + dpb.qDriverHeaderPtr]
   578 00000797 488D1D(35000000)    <1>     lea rbx, diskReqHdr ;rbx needs to point to diskReqHdr
   579 0000079E FF520A              <1>     call [rdx + drvHdr.strPtr]
   580 000007A1 FF5212              <1>     call [rdx + drvHdr.intPtr]
   581 000007A4 66F705(38000000)00- <1>     test word [diskReqHdr + mediaCheckReqPkt.status], 8000h
   581 000007AC 80                  <1>
   582 000007AD 0F85EA000000        <1>     jnz .gddpError
   583 000007B3 88C2                <1>     mov dl, al
   584 000007B5 803D(43000000)01    <1>     cmp byte [diskReqHdr + mediaCheckReqPkt.medret], 1 ;Certified no change
   585 000007BC 0F84B0000000        <1>     je .gddpretdbp
   586 000007C2 803D(43000000)00    <1>     cmp byte [diskReqHdr + mediaCheckReqPkt.medret], 0
   587 000007C9 7512                <1>     jne .gddpBuildBPB   ;This means Media changed declared
   588 000007CB E839FBFFFF          <1>     call findDirtyBufferForDrive
   589 000007D0 48F7C3FFFFFFFF      <1>     test rbx, -1    ;This is the case if no dirty buffers for drive
   590 000007D7 0F8595000000        <1>     jne .gddpretdbp ;If there is a dirty buffer for the drive, dont build bpb
   591                              <1> .gddpBuildBPB:
   592                              <1> ;BPB Build Section, only here if need a new bpb, i.e. sure of a new device
   593 000007DD E8D7FAFFFF          <1>     call findLRUBuffer  ;Get lru buffer pointer in rbx
   594 000007E2 3A5308              <1>     cmp dl, byte [rbx + bufferHdr.driveNumber]  ;Does buffer belong to old drv?
   595 000007E5 7414                <1>     je .gddpBuildBPBInvalidateBuffer    ;Yes, immediately invalidate data
   596                              <1>     ;If no, flush the data to disk.
   597                              <1> .gddpBuildBPBFlush:
   598 000007E7 4889EE              <1>     mov rsi, rbp    ;Save rbp as pointer to old dl drive dpb
   599 000007EA 4889DD              <1>     mov rbp, rbx    ;Get buffer header pointer in rbp
   600 000007ED E8F4F8FFFF          <1>     call flushBuffer    ;Flush the buffer to disk, rbx preserved
   601 000007F2 4889F5              <1>     mov rbp, rsi    ;Return old drive dpb pointer to rbp
   602 000007F5 0F820F010000        <1>     jc .gddpErrorType2  ;rbx points to buffer header
   603                              <1> .gddpBuildBPBInvalidateBuffer:
   604                              <1>     ;Write new buffer header
   605 000007FB 885308              <1>     mov byte [rbx + bufferHdr.driveNumber], dl
   606 000007FE C6430908            <1>     mov byte [rbx + bufferHdr.bufferFlags], dataBuffer
   607 00000802 48C7430A00000000    <1>     mov qword [rbx + bufferHdr.bufferLBA], 0
   608 0000080A C6431201            <1>     mov byte [rbx + bufferHdr.bufFATcopy], 1
   609 0000080E C7431300000000      <1>     mov dword [rbx + bufferHdr.bufFATsize], 0
   610 00000815 48896B17            <1>     mov qword [rbx + bufferHdr.driveDPBPtr], rbp
   611 00000819 488D5B20            <1>     lea rbx, qword [rbx + bufferHdr.dataarea]
   612                              <1>     ;Build BPB request
   613 0000081D C605(35000000)1E    <1>     mov byte [diskReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   614 00000824 8815(36000000)      <1>     mov byte [diskReqHdr + bpbBuildReqPkt.unitnm], dl
   615 0000082A C605(37000000)02    <1>     mov byte [diskReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   616 00000831 66C705(38000000)00- <1>     mov word [diskReqHdr + bpbBuildReqPkt.status], 0 
   616 00000839 00                  <1>
   617 0000083A 8A4524              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   618 0000083D 8805(42000000)      <1>     mov byte [diskReqHdr + bpbBuildReqPkt.medesc], al
   619 00000843 48891D(43000000)    <1>     mov qword [diskReqHdr + bpbBuildReqPkt.bufptr], rbx ;Put lru pointer in rbx
   620 0000084A 488B551C            <1>     mov rdx, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   621 0000084E 488D1D(35000000)    <1>     lea rbx, diskReqHdr ;rbx needs to point to diskReqHdr
   622 00000855 FF520A              <1>     call [rdx + drvHdr.strPtr]
   623 00000858 FF5212              <1>     call [rdx + drvHdr.intPtr]
   624 0000085B 66F705(38000000)00- <1>     test word [diskReqHdr + bpbBuildReqPkt.status], 8000h
   624 00000863 80                  <1>
   625 00000864 7537                <1>     jnz .gddpError
   626 00000866 488B35(4B000000)    <1>     mov rsi, qword [diskReqHdr + bpbBuildReqPkt.bpbptr]
   627                              <1>     ;rbp points to dpb so we good to go
   628 0000086D E830020000          <1>     call createDPB ;Call int 41h ah=53h Build DPB without reentering Int 41h
   629                              <1> .gddpretdbp: 
   630 00000872 C64525FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Clear access flag
   631 00000876 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   632 0000087D 48896A08            <1>     mov qword [rdx + callerFrame.rbx], rbp  ;Here, all paths have rbp as dpbptr
   633 00000881 30C0                <1>     xor al, al  ;Set al = 0 to indicate rbx=dpb pointer
   634 00000883 C3                  <1>     ret
   635                              <1> .gddpretdpbFail:
   636 00000884 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   637 0000088B 48814A5801000000    <1>     or qword [rdx + callerFrame.flags], 1   ;Set CF=CY
   638 00000893 66C705(CB000000)53- <1>     mov word [errorExt], 83 ;Fail on INT 44h error code
   638 0000089B 00                  <1>
   639 0000089C C3                  <1>     ret
   640                              <1> .gddpError:
   641                              <1> ;Abort, Retry, Ignore are the only acceptible responses
   642                              <1> ;Entered with rbp = dpb for failing drive
   643                              <1> ;             rdx = driver header that caused fault
   644 0000089D 4889D6              <1>     mov rsi, rdx    ;rdx points to driver header in both cases
   645 000008A0 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   646 000008A7 8A4318              <1>     mov al, byte [rbx + callerFrame.rdx]    ;Get low byte = dl = Drive number
   647 000008AA 88C2                <1>     mov dl, al  ;Save in dl
   648 000008AC 84C0                <1>     test al, al
   649 000008AE 7508                <1>     jnz .gddpE0
   650 000008B0 8A05(F1000000)      <1>     mov al, byte [currentDrv]
   651 000008B6 EB02                <1>     jmp short .gddpE1
   652                              <1> .gddpE0:
   653 000008B8 FEC8                <1>     dec al
   654                              <1> .gddpE1:
   655 000008BA B436                <1>     mov ah, 36h ;Read operation, data area, abort/retry/ignore, disk error
   656 000008BC 668B3D(38000000)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]   ;Get low byte of status
   657 000008C3 6681E7FF00          <1>     and di, 0FFh    ;Save lo byte only
   658 000008C8 66893D(CB000000)    <1>     mov word [errorExt], di     ;Save driver error code
   659 000008CF 668105(CB000000)13- <1>     add word [errorExt], 13h    ;Add offset to driver error codes
   659 000008D7 00                  <1>
   660 000008D8 8805(C9000000)      <1>     mov byte [errorDrv], al     ;Save the drive on which the error occured
   661 000008DE C605(CA000000)02    <1>     mov byte [errorLocus], 2    ;Error in Block Device Request code
   662 000008E5 C605(CE000000)0B    <1>     mov byte [errorClass], 11   ;Media error occured (bad BPB or other) code
   663 000008EC C605(CD000000)01    <1>     mov byte [errorAction], 1   ;Retry request code
   664 000008F3 E899F9FFFF          <1>     call criticalDOSError   ;Critical error handler
   665 000008F8 84C0                <1>     test al, al
   666 000008FA 0F8472FFFFFF        <1>     jz .gddpretdbp  ;Ignore error, return, rbp has old dpb pointer
   667 00000900 3C01                <1>     cmp al, 1
   668 00000902 0F8448FEFFFF        <1>     je getDeviceDPBptr ;Reenter the function, dl has drive code
   669 00000908 CD43                <1>     int 43h ;Else, restart DOS
   670                              <1> .gddpErrorType2:
   671                              <1> ;Error flushing the old buffer
   672                              <1> ;   rbx = Buffer header for data transfer
   673 0000090A B439                <1>     mov ah, 39h ;Write operation, abort/retry/ignore/fail, disk error
   674 0000090C 807B0901            <1>     cmp byte [rbx + bufferHdr.bufferFlags], dosBuffer
   675 00000910 7414                <1>     je .gddpErrorType2main
   676 00000912 80CC02              <1>     or ah, 2h   ;Set bit 1
   677 00000915 807B0902            <1>     cmp byte [rbx + bufferHdr.bufferFlags], fatBuffer
   678 00000919 740B                <1>     je .gddpErrorType2main
   679 0000091B B43D                <1>     mov ah, 3Dh ;Set bit 2, clear bit 1
   680 0000091D 807B0904            <1>     cmp byte [rbx + bufferHdr.bufferFlags], dirBuffer
   681 00000921 7403                <1>     je .gddpErrorType2main
   682 00000923 80CC02              <1>     or ah, 2h   ;Set bit 2 and 1
   683                              <1> .gddpErrorType2main:    
   684 00000926 668B3D(38000000)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]   ;Get low byte of status
   685 0000092D 6681E7FF00          <1>     and di, 0FFh    ;Save lo byte only
   686 00000932 66893D(CB000000)    <1>     mov word [errorExt], di     ;Save driver error code
   687 00000939 668105(CB000000)13- <1>     add word [errorExt], 13h    ;Add offset to driver error codes
   687 00000941 00                  <1>
   688 00000942 8A4308              <1>     mov al, byte [rbx + bufferHdr.driveNumber]
   689 00000945 8805(C9000000)      <1>     mov byte [errorDrv], al
   690 0000094B C605(CA000000)02    <1>     mov byte [errorLocus], 2    ;Error in Block Device Request code
   691 00000952 C605(CE000000)0B    <1>     mov byte [errorClass], 11   ;Media error occured (bad disk write) code
   692 00000959 C605(CD000000)01    <1>     mov byte [errorAction], 1   ;Retry request code
   693 00000960 488B7317            <1>     mov rsi, qword [rbx + bufferHdr.driveDPBPtr]
   694 00000964 488B761C            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get device driver header in rsi
   695 00000968 E824F9FFFF          <1>     call criticalDOSError   ;Critical error handler
   696 0000096D 807B0902            <1>     cmp byte [rbx + bufferHdr.bufferFlags], fatBuffer
   697 00000971 7420                <1>     je .gddpErrorType2FatDir
   698 00000973 807B0904            <1>     cmp byte [rbx + bufferHdr.bufferFlags], dirBuffer
   699 00000977 741A                <1>     je .gddpErrorType2FatDir
   700 00000979 84C0                <1>     test al, al
   701 0000097B 0F847AFEFFFF        <1>     jz .gddpBuildBPBInvalidateBuffer ;Ignore error, invalidate data
   702 00000981 3C01                <1>     cmp al, 1
   703 00000983 0F845EFEFFFF        <1>     je .gddpBuildBPBFlush   ;Retry flush, rbx has buffer pointer
   704 00000989 3C03                <1>     cmp al, 3
   705 0000098B 0F84F3FEFFFF        <1>     je .gddpretdpbFail
   706 00000991 CD43                <1>     int 43h ;al = 2, means just abort
   707                              <1> .gddpErrorType2FatDir:
   708 00000993 84C0                <1>     test al, al ;Ignore converted to fail
   709 00000995 0F84E9FEFFFF        <1>     jz .gddpretdpbFail
   710 0000099B 3C01                <1>     cmp al, 1
   711 0000099D 0F8444FEFFFF        <1>     je .gddpBuildBPBFlush   ;Retry flush, rbx has buffer pointer
   712 000009A3 3C03                <1>     cmp al, 3
   713 000009A5 0F84D9FEFFFF        <1>     je .gddpretdpbFail
   714 000009AB CD43                <1>     int 43h ;al = 2, means just abort
   715                              <1> ;-------------------------------------------
   716                              <1> 
   717                              <1> ctrlBreakCheck:    ;ah = 33h
   718 000009AD 84C0                <1>     test al, al
   719 000009AF 7406                <1>     jz .cbcget  ;Get the state
   720 000009B1 8815(F2000000)      <1>     mov byte [breakFlag], dl    ;Set the state
   721                              <1> .cbcget:
   722 000009B7 8A15(F2000000)      <1>     mov dl, byte [breakFlag]    ;Get the state
   723 000009BD C3                  <1>     ret
   724                              <1> getInDOSflagPtr:   ;ah = 34h
   725 000009BE 488D15(C8000000)    <1>     lea rdx, inDOS
   726 000009C5 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   727 000009CC 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx  ;save ptr in rbx
   728 000009D0 C3                  <1>     ret
   729                              <1> getIntVector:      ;ah = 35h
   730                              <1> ;Called with:
   731                              <1> ;   al = Interrupt Number
   732                              <1> ;Returns:
   733                              <1> ;   rbx = Pointer to interrupt handler
   734 000009D1 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   735 000009D3 B807F00000          <1>     mov eax, 0F007h
   736 000009D8 CD35                <1>     int 35h
   737 000009DA 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   738 000009E1 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx  ;Save pointer in rbx
   739 000009E5 8A02                <1>     mov al, byte [rdx + callerFrame.rax]    ;Get the low byte in al
   740 000009E7 C3                  <1>     ret
   741                              <1> getDiskFreeSpace:  ;ah = 36h
   742 000009E8 84D2                <1>     test dl, dl
   743 000009EA 7408                <1>     jz .gdfsSkipdefault
   744 000009EC 8A15(F1000000)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   745 000009F2 EB02                <1>     jmp short .gdfsMain
   746                              <1> .gdfsSkipdefault:
   747 000009F4 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   748                              <1> .gdfsMain:
   749                              <1> ;Walk the dpb chain manually
   750 000009F6 488B2D(67000000)    <1>     mov rbp, qword [dpbHeadPtr]
   751                              <1> .gdfsCompare:
   752 000009FD 3A5500              <1>     cmp dl, byte [rbp + dpb.bDriveNumber]
   753 00000A00 7446                <1>     je .gdfsDPBFound
   754 00000A02 488B6D26            <1>     mov rbp, qword [rbp + dpb.qNextDPBPtr]  ;Go to next DPB
   755 00000A06 4881FDFFFFFFFF      <1>     cmp rbp, -1 ;If -1 => we at the end
   756 00000A0D 75EE                <1>     jne .gdfsCompare
   757                              <1> ;Else, we at an error.
   758                              <1> ;Simply return with CY set and error code in al with extended error info
   759 00000A0F B80F000000          <1>     mov eax, 15                 ;Invalid drive error
   760 00000A14 66C705(CB000000)0F- <1>     mov word [errorExt], 15     ;Invalid drive error
   760 00000A1C 00                  <1>
   761 00000A1D C605(CA000000)01    <1>     mov byte [errorLocus], 1    ;Not appropriate
   762 00000A24 C605(CE000000)08    <1>     mov byte [errorClass], 8    ;Drive not found
   763 00000A2B C605(CD000000)07    <1>     mov byte [errorAction], 7   ;Retry after user intervention
   764 00000A32 488B2D(08010000)    <1>     mov rbp, qword [oldRSP]
   765 00000A39 66C74500FFFF        <1>     mov word [rbp + callerFrame.rax], -1    ;Set ax=FFFFh
   766 00000A3F 48814D5801000000    <1>     or qword [rbp + callerFrame.flags], 1   ;Set CF=CY
   767 00000A47 C3                  <1>     ret
   768                              <1> .gdfsDPBFound:
   769 00000A48 8A4503              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
   770 00000A4B FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   771 00000A4D 8B5510              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   772 00000A50 8A4D02              <1>     mov cl, byte [rbp + dpb.bBytesPerSectorShift]
   773 00000A53 BB01000000          <1>     mov ebx, 1
   774 00000A58 D3E3                <1>     shl ebx, cl
   775 00000A5A 89D9                <1>     mov ecx, ebx    ;Save the value in ecx
   776 00000A5C 8B5D32              <1>     mov ebx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Ger # free clusters
   777 00000A5F 488B2D(08010000)    <1>     mov rbp, qword [oldRSP]
   778 00000A66 48895518            <1>     mov qword [rbp + callerFrame.rdx], rdx
   779 00000A6A 66894D10            <1>     mov word [rbp + callerFrame.rcx], cx
   780 00000A6E 48895D08            <1>     mov qword [rbp + callerFrame.rbx], rbx
   781 00000A72 C3                  <1>     ret
   782                              <1> 
   783                              <1> loadExecChild:     ;ah = 4Bh, EXEC
   784                              <1> terminateClean:    ;ah = 4Ch, EXIT
   785                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   786 00000A73 C3                  <1>     ret
   787                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   788 00000A74 48891D(D7000000)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   789 00000A7B C3                  <1>     ret
   790                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   791 00000A7C 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   792 00000A83 488B15(D7000000)    <1>     mov rdx, qword [currentPSP]
   793 00000A8A 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx   ;Set the caller pointer
   794 00000A8E C3                  <1>     ret 
   795                              <1> getSysVarsPtr:     ;ah = 52h
   796 00000A8F 488D15(67000000)    <1>     lea rdx, sysVarsPtr
   797 00000A96 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   798 00000A9D 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx
   799 00000AA1 C3                  <1>     ret
   800                              <1> createDPB:         ;ah = 53h, generates a DPB from a given BPB
   801                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   802                              <1> ;This is done so that the other fields of the DPB can be recycled
   803                              <1> ;Input: rsi = ptr to the BPB
   804                              <1> ;       rbp = ptr to the DPB
   805                              <1> ;bMediaDescriptor
   806 00000AA2 8A4615              <1>     mov al, byte [rsi + bpb.media]
   807 00000AA5 884524              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   808                              <1> ;bAccessFlag
   809 00000AA8 C64525FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Not accessed
   810                              <1> ;dFirstFreeCluster
   811 00000AAC C7452E00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   812                              <1> ;dNumberOfFreeClusters
   813 00000AB3 C74532FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   814                              <1> ;bBytesPerSectorShift
   815 00000ABA 668B460B            <1>     mov ax, word [rsi + bpb.bytsPerSec]
   816 00000ABE B107                <1>     mov cl, 7   ;Start with 128 byte sectors (not supported, min 512)
   817 00000AC0 66D3E8              <1>     shr ax, cl  ;Shift down
   818                              <1> .cd0:
   819 00000AC3 66D1E8              <1>     shr ax, 1
   820 00000AC6 7404                <1>     jz .cd1
   821 00000AC8 FEC1                <1>     inc cl
   822 00000ACA EBF7                <1>     jmp short .cd0
   823                              <1> .cd1:
   824 00000ACC 884D02              <1>     mov byte [rbp + dpb.bBytesPerSectorShift], cl
   825                              <1> ;bMaxSectorInCluster
   826 00000ACF 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   827 00000AD2 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   828 00000AD4 884503              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   829                              <1> ;bSectorsPerClusterShift
   830 00000AD7 FEC0                <1>     inc al
   831 00000AD9 30C9                <1>     xor cl, cl
   832                              <1> .cd2:
   833 00000ADB D0E8                <1>     shr al, 1
   834 00000ADD 7404                <1>     jz .cd3
   835 00000ADF FEC1                <1>     inc cl
   836 00000AE1 EBF8                <1>     jmp short .cd2
   837                              <1> .cd3:
   838 00000AE3 884D04              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   839                              <1> ;dFAToffset, number of hidden sectors + number of reserved sectors
   840 00000AE6 0FB7460E            <1>     movzx eax, word [rsi + bpb.revdSecCnt]
   841 00000AEA 03461C              <1>     add eax, dword [rsi + bpb.hiddSec] 
   842 00000AED 894505              <1>     mov dword [rbp + dpb.dFAToffset], eax
   843                              <1> ;bNumberOfFATs
   844 00000AF0 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   845 00000AF3 884509              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   846                              <1> ;wNumberRootDirSectors
   847 00000AF6 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   848 00000AFA C1E005              <1>     shl eax, 5  ;Multiply by 32
   849 00000AFD 0FB74E0B            <1>     movzx ecx, word [rsi + bpb.bytsPerSec]
   850 00000B01 FFC9                <1>     dec ecx
   851 00000B03 01C8                <1>     add eax, ecx
   852 00000B05 31D2                <1>     xor edx, edx    ;Clear for divide
   853 00000B07 F7F1                <1>     div ecx ;Divide 0:eax by ecx, (e)ax has number of clusters
   854 00000B09 6689450A            <1>     mov word [rbp + dpb.wNumberRootDirSectors], ax  ;0 for FAT32
   855                              <1> ;dFATlength, get the FAT length
   856 00000B0D 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   857 00000B11 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   858 00000B14 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   859 00000B16 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   860 00000B19 894514              <1>     mov dword [rbp + dpb.dFATlength], eax
   861                              <1> ;Complex cases below...
   862                              <1> ;dClusterHeapOffset, start sector of the data area
   863 00000B1C 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   864 00000B20 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   865 00000B23 85C0                <1>     test eax, eax
   866 00000B25 0F44C3              <1>     cmovz eax, ebx
   867                              <1> ;eax = FATsz
   868 00000B28 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   869 00000B2C 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   870 00000B2F 85DB                <1>     test ebx, ebx
   871 00000B31 0F44D9              <1>     cmovz ebx, ecx 
   872                              <1> ;ebx = TotSec
   873 00000B34 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   874 00000B37 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   875                              <1> .cd4:
   876 00000B39 01C2                <1>     add edx, eax
   877 00000B3B FEC9                <1>     dec cl
   878 00000B3D 75FA                <1>     jnz .cd4
   879 00000B3F 89D0                <1>     mov eax, edx    ;Store product in eax
   880 00000B41 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   881 00000B45 01D0                <1>     add eax, edx
   882 00000B47 0FB7550A            <1>     movzx edx, word [rbp + dpb.wNumberRootDirSectors]
   883 00000B4B 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   884                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   885                              <1>     ;aka eax = Start sector of the data area in volume
   886 00000B4D 89450C              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   887                              <1> ;dClusterCount
   888 00000B50 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   889 00000B52 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   890 00000B54 31D2                <1>     xor edx, edx
   891 00000B56 BB01000000          <1>     mov ebx, 1
   892 00000B5B 8A4D04              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   893 00000B5E D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   894 00000B60 F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   895 00000B62 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   896 00000B64 894510              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   897                              <1> ;dFirstUnitOfRootDir
   898 00000B67 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   899 00000B6C 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   900 00000B6F 7709                <1>     ja .cd5
   901                              <1>     ;Else, we need to find the first sector of the root directory
   902                              <1>     ;Get the start sector of data area in volume 
   903                              <1>     ; and sub the number of sectors in the root directory
   904 00000B71 8B450C              <1>     mov eax, dword [rbp + dpb.dClusterHeapOffset]
   905 00000B74 0FB75D0A            <1>     movzx ebx, word [rbp + dpb.wNumberRootDirSectors]
   906 00000B78 29D8                <1>     sub eax, ebx    ;eax now has start sector of root dir
   907                              <1> .cd5:
   908 00000B7A 894518              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   909                              <1> ;Exit epilogue
   910 00000B7D 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   911 00000B84 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   912 00000B86 C3                  <1>     ret
   913                              <1> getVerifySetting:  ;ah = 54h
   914 00000B87 8A05(F3000000)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   915 00000B8D C3                  <1>     ret
   916                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
   917                              <1> getExtendedError:  ;ah = 59h
   918                              <1> getCritErrorInfo:  ;ah = 5Dh
   919                              <1> networkServices:   ;ah = 5Eh, do nothing
   920                              <1> networkRedirection:;ah = 5Fh, do nothing
   921 00000B8E C3                  <1>     ret
   922                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   923 00000B8F 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   924 00000B96 488B15(D7000000)    <1>     mov rdx, qword [currentPSP]
   925 00000B9D 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx  ;Save the current psp in rbx
   926 00000BA1 C3                  <1>     ret
   927                              <1>                     ;ah = 63h, reserved
   928                              <1> setDriverLookahead:;ah = 64h, reserved
   929                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   930                              <1> return:
   931 00000BA2 C3                  <1>     ret
   932                              <1> 
   933                              <1> kernelDispatchTable:
   934 00000BA3 [8705000000000000]  <1>     dq simpleTerminate     ;AH = 00H, PROCESS MANAGEMENT
   935 00000BAB [3A01000000000000]  <1>     dq stdinReadEcho       ;AH = 01H, CHAR IO
   936 00000BB3 [AF01000000000000]  <1>     dq stdoutWrite         ;AH = 02H, CHAR IO
   937 00000BBB [E901000000000000]  <1>     dq stdauxRead          ;AH = 03H, CHAR IO
   938 00000BC3 [E901000000000000]  <1>     dq stdauxWrite         ;AH = 04H, CHAR IO
   939 00000BCB [E901000000000000]  <1>     dq stdprnWrite         ;AH = 05H, CHAR IO
   940 00000BD3 [E901000000000000]  <1>     dq directCONIO         ;AH = 06H, CHAR IO
   941 00000BDB [E901000000000000]  <1>     dq waitDirectInNoEcho  ;AH = 07H, CHAR IO
   942 00000BE3 [2302000000000000]  <1>     dq waitStdinNoEcho     ;AH = 08H, CHAR IO
   943 00000BEB [2402000000000000]  <1>     dq printString         ;AH = 09H, CHAR IO
   944 00000BF3 [6602000000000000]  <1>     dq buffStdinInput      ;AH = 0AH, CHAR IO
   945 00000BFB [6602000000000000]  <1>     dq checkStdinStatus    ;AH = 0BH, CHAR IO
   946 00000C03 [6602000000000000]  <1>     dq clearbuffDoFunc     ;AH = 0CH, CHAR IO
   947 00000C0B [8805000000000000]  <1>     dq diskReset           ;AH = 0DH, DISK MANAGEMENT
   948 00000C13 [1E06000000000000]  <1>     dq selectDisk          ;AH = 0EH, DISK MANAGEMENT
   949 00000C1B [6602000000000000]  <1>     dq openFileFCB         ;AH = 0FH, FILE OPERATION       FCB
   950 00000C23 [6602000000000000]  <1>     dq closeFileFCB        ;AH = 10H, FILE OPERATION       FCB
   951 00000C2B [6602000000000000]  <1>     dq findFirstFileFCB    ;AH = 11H, FILE OPERATION       FCB
   952 00000C33 [6602000000000000]  <1>     dq findNextFileFCB     ;AH = 12H, FILE OPERATION       FCB
   953 00000C3B [6602000000000000]  <1>     dq deleteFileFCB       ;AH = 13H, FILE OPERATION       FCB
   954 00000C43 [6602000000000000]  <1>     dq sequentialReadFCB   ;AH = 14H, RECORD OPERATION     FCB
   955 00000C4B [6602000000000000]  <1>     dq sequentialWriteFCB  ;AH = 15H, RECORD OPERTAION     FCB
   956 00000C53 [6602000000000000]  <1>     dq createFileFCB       ;AH = 16H, FILE OPERATION       FCB
   957 00000C5B [6602000000000000]  <1>     dq renameFileFCB       ;AH = 17H, FILE OPERATION       FCB
   958 00000C63 [A20B000000000000]  <1>     dq return              ;AH = 18H, RESERVED
   959 00000C6B [6F06000000000000]  <1>     dq getCurrentDisk      ;AH = 19H, DISK MANAGEMENT
   960 00000C73 [6702000000000000]  <1>     dq setDTA              ;AH = 1AH, RECORD OPERATION     F/H
   961 00000C7B [7606000000000000]  <1>     dq FATinfoDefault      ;AH = 1BH, DISK MANAGEMENT
   962 00000C83 [7806000000000000]  <1>     dq FATinfoDevice       ;AH = 1CH, DISK MANAGEMENT
   963 00000C8B [A20B000000000000]  <1>     dq return              ;AH = 1DH, RESERVED
   964 00000C93 [A20B000000000000]  <1>     dq return              ;AH = 1EH, RESERVED
   965 00000C9B [4E07000000000000]  <1>     dq getCurrentDPBptr    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
   966 00000CA3 [A20B000000000000]  <1>     dq return              ;AH = 20H, RESERVED
   967 00000CAB [7A02000000000000]  <1>     dq randomReadFCB       ;AH = 21H, RECORD OPERATION     FCB
   968 00000CB3 [7A02000000000000]  <1>     dq randomWriteFCB      ;AH = 22H, RECORD OPERATION     FCB
   969 00000CBB [7A02000000000000]  <1>     dq getFileSizeFCB      ;AH = 23H, FILE OPERATION       FCB
   970 00000CC3 [7A02000000000000]  <1>     dq setRelRecordFCB     ;AH = 24H, RECORD OPERATION     FCB
   971 00000CCB [FC06000000000000]  <1>     dq setIntVector        ;AH = 25H, MISC. SYS. FUNCTION
   972 00000CD3 [2707000000000000]  <1>     dq createNewPSP        ;AH = 26H, PROCESS MANAGEMENT
   973 00000CDB [7A02000000000000]  <1>     dq randBlockReadFCB    ;AH = 27H, RECORD OPERATION     FCB
   974 00000CE3 [7A02000000000000]  <1>     dq randBlockWriteFCB   ;AH = 28H, RECORD OPERATION     FCB
   975 00000CEB [7A02000000000000]  <1>     dq parseFilenameFCB    ;AH = 29H, FILE OPERATION       FCB
   976 00000CF3 [2707000000000000]  <1>     dq getDate             ;AH = 2AH, TIME AND DATE
   977 00000CFB [2707000000000000]  <1>     dq setDate             ;AH = 2BH, TIME AND DATE
   978 00000D03 [2707000000000000]  <1>     dq getTime             ;AH = 2CH, TIME AND DATE
   979 00000D0B [2707000000000000]  <1>     dq setTime             ;AH = 2DH, TIME AND DATE
   980 00000D13 [2807000000000000]  <1>     dq setResetVerify      ;AH = 2EH, DISK MANAGEMENT
   981 00000D1B [7B02000000000000]  <1>     dq getDTA              ;AH = 2FH, RECORD OPERATION     F/H
   982 00000D23 [3607000000000000]  <1>     dq getDOSversion       ;AH = 30H, MISC. SYS. FUNCTION
   983 00000D2B [4D07000000000000]  <1>     dq terminateStayRes    ;AH = 31H, PROCESS MANAGEMENT
   984 00000D33 [5007000000000000]  <1>     dq getDeviceDPBptr     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
   985 00000D3B [AD09000000000000]  <1>     dq ctrlBreakCheck      ;AH = 33H, MISC. SYS. FUNCTION
   986 00000D43 [BE09000000000000]  <1>     dq getInDOSflagPtr     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
   987 00000D4B [D109000000000000]  <1>     dq getIntVector        ;AH = 35H, MISC. SYS. FUNCTION
   988 00000D53 [E809000000000000]  <1>     dq getDiskFreeSpace    ;AH = 36H, DISK MANAGEMENT
   989 00000D5B [9002000000000000]  <1>     dq getsetSwitchChar    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
   990 00000D63 [9002000000000000]  <1>     dq getsetCountryInfo   ;AH = 38H, MISC. SYS. FUNCTION
   991 00000D6B [3901000000000000]  <1>     dq makeDIR             ;AH = 39H, DIRECTORY OPERATION
   992 00000D73 [3901000000000000]  <1>     dq removeDIR           ;AH = 3AH, DIRECTORY OPERATION
   993 00000D7B [3901000000000000]  <1>     dq changeCurrentDIR    ;AH = 3BH, DIRECTORY OPERATION
   994 00000D83 [8E02000000000000]  <1>     dq createFileHdl       ;AH = 3CH, FILE OPERATION       HANDLE
   995 00000D8B [8E02000000000000]  <1>     dq openFileHdl         ;AH = 3DH, FILE OPERATION       HANDLE
   996 00000D93 [8E02000000000000]  <1>     dq closeFileHdl        ;AH = 3EH, FILE OPERATION       HANDLE
   997 00000D9B [8E02000000000000]  <1>     dq readFileHdl         ;AH = 3FH, RECORD OPERATION     HANDLE
   998 00000DA3 [8E02000000000000]  <1>     dq writeFileHdl        ;AH = 40H, RECORD OPERATION     HANDLE
   999 00000DAB [8E02000000000000]  <1>     dq deleteFileHdl       ;AH = 41H, FILE OPERATION       HANDLE
  1000 00000DB3 [8E02000000000000]  <1>     dq movFileReadPtr      ;AH = 42H, RECORD OPERATION     HANDLE
  1001 00000DBB [8E02000000000000]  <1>     dq changeFileModeHdl   ;AH = 43H, FILE OPERATION       HANDLE
  1002 00000DC3 [8E02000000000000]  <1>     dq ioctrl              ;AH = 44H, MISC. SYS. FUNCTION
  1003 00000DCB [8E02000000000000]  <1>     dq duplicateHandle     ;AH = 45H, FILE OPERATION       HANDLE
  1004 00000DD3 [8E02000000000000]  <1>     dq forceDuplicateHdl   ;AH = 46H, FILE OPERATION       HANDLE
  1005 00000DDB [3901000000000000]  <1>     dq getCurrentDIR       ;AH = 47H, DIRECTORY OPERATION
  1006 00000DE3 [8F02000000000000]  <1>     dq allocateMemory      ;AH = 48H, MEMORY MANAGEMENT
  1007 00000DEB [8F02000000000000]  <1>     dq freeMemory          ;AH = 49H, MEMORY MANAGEMENT
  1008 00000DF3 [8F02000000000000]  <1>     dq reallocMemory       ;AH = 4AH, MEMORY MANAGEMENT
  1009 00000DFB [730A000000000000]  <1>     dq loadExecChild       ;AH = 4BH, PROCESS MANAGEMENT
  1010 00000E03 [730A000000000000]  <1>     dq terminateClean      ;AH = 4CH, PROCESS MANAGEMENT
  1011 00000E0B [730A000000000000]  <1>     dq getRetCodeChild     ;AH = 4DH, PROCESS MANAGEMENT
  1012 00000E13 [8E02000000000000]  <1>     dq findFirstFileHdl    ;AH = 4EH, FILE OPERATION       HANDLE
  1013 00000E1B [8E02000000000000]  <1>     dq findNextFileHdl     ;AH = 4FH, FILE OPERATION       HANDLE
  1014 00000E23 [740A000000000000]  <1>     dq setCurrProcessID    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
  1015 00000E2B [7C0A000000000000]  <1>     dq getCurrProcessID    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
  1016 00000E33 [8F0A000000000000]  <1>     dq getSysVarsPtr       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
  1017 00000E3B [A20A000000000000]  <1>     dq createDPB           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
  1018 00000E43 [870B000000000000]  <1>     dq getVerifySetting    ;AH = 54H, DISK MANAGEMENT
  1019 00000E4B [8E0B000000000000]  <1>     dq createPSP           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
  1020 00000E53 [8E02000000000000]  <1>     dq renameFile          ;AH = 56H, FILE OPERATION       HANDLE
  1021 00000E5B [3901000000000000]  <1>     dq getSetFileDateTime  ;AH = 57H, FILE OPERATION       HANDLE
  1022 00000E63 [8F02000000000000]  <1>     dq getsetMallocStrat   ;AH = 58H, MEMORY MANAGEMENT
  1023 00000E6B [8E0B000000000000]  <1>     dq getExtendedError    ;AH = 59H, MISC. SYS. FUNCTION
  1024 00000E73 [8E02000000000000]  <1>     dq createUniqueFile    ;AH = 5AH, FILE OPERATION       HANDLE
  1025 00000E7B [8E02000000000000]  <1>     dq createNewFile       ;AH = 5BH, FILE OPERATION       HANDLE
  1026 00000E83 [8E02000000000000]  <1>     dq lockUnlockFile      ;AH = 5CH, RECORD OPERATION     HANDLE
  1027 00000E8B [8E0B000000000000]  <1>     dq getCritErrorInfo    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
  1028 00000E93 [8E0B000000000000]  <1>     dq networkServices     ;AH = 5EH, RESERVED NETWORK FUNCTION
  1029 00000E9B [8E0B000000000000]  <1>     dq networkRedirection  ;AH = 5FH, RESERVED NETWORK FUNCTION
  1030 00000EA3 [3901000000000000]  <1>     dq trueName            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
  1031 00000EAB [A20B000000000000]  <1>     dq return              ;AH = 61H, RESERVED
  1032 00000EB3 [8F0B000000000000]  <1>     dq getPSPaddr          ;AH = 62H, PROCESS MANAGEMENT
  1033 00000EBB [A20B000000000000]  <1>     dq return              ;AH = 63H, RESERVED
  1034 00000EC3 [A20B000000000000]  <1>     dq setDriverLookahead  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
  1035 00000ECB [9002000000000000]  <1>     dq getExtLocalInfo     ;AH = 65H, MISC. SYS. FUNCTION
  1036 00000ED3 [9002000000000000]  <1>     dq getsetGlobalCP      ;AH = 66H, MISC. SYS. FUNCTION
  1037 00000EDB [8E02000000000000]  <1>     dq setHandleCount      ;AH = 67H, FILE OPERAITON       F/H
  1038 00000EE3 [8E02000000000000]  <1>     dq commitFile          ;AH = 68H, FILE OPERATION       HANDLE
  1039 00000EEB [A20B000000000000]  <1>     dq getsetDiskSerial    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
  1040                              <1> kernelDispatchTableL  equ $ - kernelDispatchTable 
    21                                  %include "int44h.asm"
    22                              <1> critErrorHandler:   ;Int 44h
    23                              <1> ;User Stack in usage here, must be swapped to before this is called
    24                              <1> ;Entered with:  
    25                              <1> ;               AH = Critical Error Bitfield
    26                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    27                              <1> ;               Bit 6 - Reserved
    28                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    29                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    30                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    31                              <1> ;               Bits [2-1] = Affected Disk Error
    32                              <1> ;                     0 0   DOS area
    33                              <1> ;                     0 1   FAT area
    34                              <1> ;                     1 0   Directory area
    35                              <1> ;                     1 1   Data area
    36                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    37                              <1> ;               AL  = Failing drive number if AH[7] = 0
    38                              <1> ;               DIL = Error code for errorMsg
    39                              <1> ;               RSI = EA of Device Header for which device the error occured
    40                              <1> ;Return:
    41                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    42                              <1> ;                  = 1 - Retry the Operation    (Retry)
    43                              <1> ;                  = 2 - Terminate the Program  (Abort)
    44                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    45 00000EF3 53                  <1>     push rbx
    46 00000EF4 51                  <1>     push rcx
    47 00000EF5 52                  <1>     push rdx
    48 00000EF6 57                  <1>     push rdi
    49 00000EF7 56                  <1>     push rsi
    50 00000EF8 FC                  <1>     cld         ;Make String ops go forward
    51                              <1> 
    52 00000EF9 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    53 00000EFC 488D155E020000      <1>     lea rdx, qword [.crlf]
    54 00000F03 B409                <1>     mov ah, 09h ;Print String
    55 00000F05 CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
    56                              <1> 
    57 00000F07 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    58 00000F0D B90C000000          <1>     mov ecx, 0Ch
    59 00000F12 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    60 00000F14 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    61 00000F17 480FB7FF            <1>     movzx rdi, di
    62 00000F1B 4889FA              <1>     mov rdx, rdi    ;Copy error code
    63 00000F1E 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    64 00000F22 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    65 00000F25 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    66 00000F28 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    67 00000F2F 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    68 00000F33 B409                <1>     mov ah, 09h ;Print String
    69 00000F35 CD41                <1>     int 41h     ;Call DOS to print first part of message
    70                              <1> 
    71 00000F37 488D1505020000      <1>     lea rdx, qword [.readmsg]
    72 00000F3E 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    73 00000F45 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    74 00000F48 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    75 00000F4C B409                <1>     mov ah, 09h ;Print String
    76 00000F4E CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    77                              <1> 
    78 00000F50 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    79 00000F53 0F85DF000000        <1>     jnz .charError
    80                              <1> ;Disk error continues here
    81 00000F59 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    82 00000F60 B409                <1>     mov ah, 09h
    83 00000F62 CD41                <1>     int 41h
    84 00000F64 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    85 00000F66 80C241              <1>     add dl, "A" ;Add ASCII code
    86 00000F69 B402                <1>     mov ah, 02h ;Print char in dl
    87 00000F6B CD41                <1>     int 41h
    88                              <1> .userInput:
    89 00000F6D 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
    90 00000F74 B409                <1>     mov ah, 09h
    91 00000F76 CD41                <1>     int 41h
    92                              <1> ;Abort, Retry, Ignore, Fail is word order
    93                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    94                              <1> .userAbort:
    95                              <1> ;Abort is always an option
    96 00000F78 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
    97 00000F7F B409                <1>     mov ah, 09h
    98 00000F81 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
    99                              <1> .userRetry:
   100 00000F83 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   101 00000F86 7416                <1>     jz .userIgnore    ;If clear, dont print message
   102 00000F88 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
   103 00000F8F B409                <1>     mov ah, 09h
   104 00000F91 CD41                <1>     int 41h
   105 00000F93 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
   106 00000F9A B409                <1>     mov ah, 09h
   107 00000F9C CD41                <1>     int 41h
   108                              <1> .userIgnore:
   109 00000F9E F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   110 00000FA1 7416                <1>     jz .userFail
   111 00000FA3 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
   112 00000FAA B409                <1>     mov ah, 09h
   113 00000FAC CD41                <1>     int 41h
   114 00000FAE 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
   115 00000FB5 B409                <1>     mov ah, 09h
   116 00000FB7 CD41                <1>     int 41h
   117                              <1> .userFail:
   118 00000FB9 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   119 00000FBC 7416                <1>     jz .userMsgEnd
   120 00000FBE 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
   121 00000FC5 B409                <1>     mov ah, 09h
   122 00000FC7 CD41                <1>     int 41h
   123 00000FC9 488D15A7010000      <1>     lea rdx, qword [.failmsg]
   124 00000FD0 B409                <1>     mov ah, 09h
   125 00000FD2 CD41                <1>     int 41h
   126                              <1> .userMsgEnd:
   127 00000FD4 488D15A4010000      <1>     lea rdx, qword [.endMsg]
   128 00000FDB B409                <1>     mov ah, 09h
   129 00000FDD CD41                <1>     int 41h
   130                              <1> ;Get user input now 
   131 00000FDF 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   132 00000FE1 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   133 00000FE8 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   134 00000FEA CD41                <1>     int 41h ;Get char in al
   135 00000FEC 3C61                <1>     cmp al, "a" ;Chack if lowercase
   136 00000FEE 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   137 00000FF0 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   138                              <1> .uip1:
   139 00000FF2 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   140 00000FF3 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   141 00000FF5 FFC1                <1>     inc ecx
   142 00000FF7 81F904000000        <1>     cmp ecx, 4
   143 00000FFD 75F3                <1>     jne .uip1
   144 00000FFF E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   145                              <1> .validInput:
   146 00001004 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   147                              <1> ;Now check if the input is permitted
   148 00001006 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   149 00001008 7427                <1>     je .cehExit
   150 0000100A 84C0                <1>     test al, al ;Check if 0 => Ignore
   151 0000100C 740F                <1>     je .viIgnore
   152 0000100E 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   153 00001010 7416                <1>     je .viRetry
   154                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   155 00001012 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   156 00001015 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   157 0000101B EB14                <1>     jmp short .cehExit
   158                              <1> .viIgnore:
   159 0000101D F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   160 00001020 0F8447FFFFFF        <1>     jz .userInput
   161 00001026 EB09                <1>     jmp short .cehExit
   162                              <1> .viRetry:
   163 00001028 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   164 0000102B 0F843CFFFFFF        <1>     jz .userInput
   165                              <1> .cehExit:
   166 00001031 5E                  <1>     pop rsi
   167 00001032 5F                  <1>     pop rdi
   168 00001033 5A                  <1>     pop rdx
   169 00001034 59                  <1>     pop rcx
   170 00001035 5B                  <1>     pop rbx
   171 00001036 48CF                <1>     iretq
   172                              <1> .charError:
   173 00001038 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   174 0000103D 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   175                              <1> .ce1:
   176 00001044 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   177 00001045 88C2                <1>     mov dl, al  ;Move char into dl
   178 00001047 B402                <1>     mov ah, 02h
   179 00001049 CD41                <1>     int 41h ;Print char
   180 0000104B E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   181 0000104D E91BFFFFFF          <1>     jmp .userInput
   182                              <1> 
   183                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   184 00001052 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   184 0000105B 746563742024202020  <1>
   185 00001064 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   185 0000106D 6E6974202420202020  <1>
   186 00001076 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   186 0000107F 202420202020202020  <1>
   187 00001088 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   187 00001091 6F6D6D616E64202420  <1>
   188 0000109A 446174612024202020- <1>             db "Data $            "       ;Error 4
   188 000010A3 202020202020202020  <1>
   189 000010AC 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   189 000010B5 737420242020202020  <1>
   190 000010BE 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   190 000010C7 202020202020202020  <1>
   191 000010D0 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   191 000010D9 656469612024202020  <1>
   192 000010E2 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   192 000010EB 7420466F756E642024  <1>
   193 000010F4 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   193 000010FD 706572202420202020  <1>
   194 00001106 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   194 0000110F 6C7420242020202020  <1>
   195 00001118 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   195 00001121 742024202020202020  <1>
   196 0000112A 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   196 00001133 61696C757265202420  <1>
   197                              <1> 
   198 0000113C 64726976652024      <1> .drive      db "drive $"
   199 00001143 6572726F7220726561- <1> .readmsg    db "error reading $"
   199 0000114C 64696E672024        <1>
   200 00001152 6572726F7220777269- <1> .writemsg   db "error writing $"
   200 0000115B 74696E672024        <1>
   201 00001161 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   202 00001164 41626F727424        <1> .abortmsg   db "Abort$" 
   203 0000116A 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   204 00001171 526574727924        <1> .retrymsg   db "Retry$"
   205 00001177 4661696C24          <1> .failmsg    db "Fail$"
   206 0000117C 2C2024              <1> .betweenMsg db ", $"
   207 0000117F 3F2024              <1> .endMsg     db "? $"
   208 00001182 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
    22                                  %include "dosDrivers.asm" 
    23                              <1> ;-----------------------------------:
    24                              <1> ;          Driver routines          :
    25                              <1> ;-----------------------------------:
    26                              <1> drivers:
    27                              <1> conHdr:
    28 00001186 [A811000000000000]  <1>     dq auxHdr
    29 0000118E 1308                <1>     dw 0813h
    30 00001190 [2613000000000000]  <1>     dq commonStrat
    31 00001198 [3513000000000000]  <1>     dq conDriver
    32 000011A0 434F4E2020202020    <1>     db "CON     "
    33                              <1> auxHdr:
    34 000011A8 [CA11000000000000]  <1>     dq prnHdr
    35 000011B0 0080                <1>     dw 08000h
    36 000011B2 [2613000000000000]  <1>     dq commonStrat
    37 000011BA [FA15000000000000]  <1>     dq com1Intr
    38 000011C2 4155582020202020    <1>     db "AUX     "
    39                              <1> prnHdr:
    40 000011CA [EC11000000000000]  <1>     dq clkHdr
    41 000011D2 40A0                <1>     dw 0A040h
    42 000011D4 [2E13000000000000]  <1>     dq nulStrat
    43 000011DC [3413000000000000]  <1>     dq nulIntr
    44 000011E4 50524E2020202020    <1>     db "PRN     "
    45                              <1> clkHdr:
    46 000011EC [0E12000000000000]  <1>     dq msdHdr
    47 000011F4 0880                <1>     dw 08008h
    48 000011F6 [2613000000000000]  <1>     dq commonStrat
    49 000011FE [6D14000000000000]  <1>     dq clkDriver
    50 00001206 434C4F434B242020    <1>     db "CLOCK$  "
    51                              <1> msdHdr:
    52 0000120E [3012000000000000]  <1>     dq com1Hdr
    53 00001216 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    54 00001218 [2613000000000000]  <1>     dq commonStrat
    55 00001220 [9F17000000000000]  <1>     dq msdDriver
    56 00001228 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    57                              <1> com1Hdr:
    58 00001230 [5212000000000000]  <1>     dq com2Hdr
    59 00001238 0080                <1>     dw 08000h
    60 0000123A [2613000000000000]  <1>     dq commonStrat
    61 00001242 [FA15000000000000]  <1>     dq com1Intr
    62 0000124A 434F4D3120202020    <1>     db "COM1    "
    63                              <1> com2Hdr:
    64 00001252 [7412000000000000]  <1>     dq com3Hdr
    65 0000125A 0080                <1>     dw 08000h
    66 0000125C [2613000000000000]  <1>     dq commonStrat
    67 00001264 [0316000000000000]  <1>     dq com2Intr
    68 0000126C 434F4D3220202020    <1>     db "COM2    "
    69                              <1> com3Hdr:
    70 00001274 [9612000000000000]  <1>     dq com4Hdr
    71 0000127C 0080                <1>     dw 08000h
    72 0000127E [2613000000000000]  <1>     dq commonStrat
    73 00001286 [0C16000000000000]  <1>     dq com3Intr
    74 0000128E 434F4D3320202020    <1>     db "COM3    "
    75                              <1> com4Hdr:
    76 00001296 [B812000000000000]  <1>     dq lpt1Hdr
    77 0000129E 0080                <1>     dw 08000h
    78 000012A0 [2613000000000000]  <1>     dq commonStrat
    79 000012A8 [1516000000000000]  <1>     dq com4Intr
    80 000012B0 434F4D3420202020    <1>     db "COM4    "
    81                              <1> lpt1Hdr:
    82 000012B8 [DA12000000000000]  <1>     dq lpt2Hdr
    83 000012C0 40A0                <1>     dw 0A040h
    84 000012C2 [2E13000000000000]  <1>     dq nulStrat
    85 000012CA [3413000000000000]  <1>     dq nulIntr
    86 000012D2 4C50543120202020    <1>     db "LPT1    "
    87                              <1> lpt2Hdr:
    88 000012DA [FC12000000000000]  <1>     dq lpt3Hdr
    89 000012E2 40A0                <1>     dw 0A040h
    90 000012E4 [2E13000000000000]  <1>     dq nulStrat
    91 000012EC [3413000000000000]  <1>     dq nulIntr
    92 000012F4 4C50543220202020    <1>     db "LPT2    "
    93                              <1> lpt3Hdr:
    94 000012FC FFFFFFFFFFFFFFFF    <1>     dq -1
    95 00001304 40A0                <1>     dw 0A040h
    96 00001306 [2E13000000000000]  <1>     dq nulStrat
    97 0000130E [3413000000000000]  <1>     dq nulIntr
    98 00001316 4C50543320202020    <1>     dq "LPT3    "
    99 0000131E 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
   100                              <1> commonStrat:
   101                              <1> ;DOS calls this function with rbx=Ptr to request header
   102 00001326 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
   103 0000132D C3                  <1>     ret
   104                              <1> nulStrat:
   105 0000132E 66C743030001        <1>     mov word [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
   106                              <1> nulIntr:
   107 00001334 C3                  <1>     ret
   108                              <1> 
   109                              <1> conDriver:
   110 00001335 50                  <1>     push rax
   111 00001336 53                  <1>     push rbx
   112 00001337 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
   113 0000133E B003                <1>     mov al, 03h ;Unknown Command
   114 00001340 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   115 00001344 7735                <1>     ja .conWriteErrorCode ;If yes, error!
   116                              <1> 
   117 00001346 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   118 00001349 3C04                <1>     cmp al, 4
   119 0000134B 743D                <1>     jz .conRead
   120 0000134D 3C05                <1>     cmp al, 5
   121 0000134F 747F                <1>     jz .conNondestructiveRead
   122 00001351 3C06                <1>     cmp al, 6
   123 00001353 0F84A8000000        <1>     jz .conInputStatus
   124 00001359 3C07                <1>     cmp al, 7
   125 0000135B 0F84B0000000        <1>     jz .conFlushInputBuffers
   126 00001361 3C08                <1>     cmp al, 8
   127 00001363 0F84CA000000        <1>     jz .conWrite
   128 00001369 3C09                <1>     cmp al, 9
   129 0000136B 0F84C2000000        <1>     jz .conWrite
   130 00001371 3C0A                <1>     cmp al, 0Ah
   131 00001373 0F84E3000000        <1>     jz .conOutputStatus
   132 00001379 EB06                <1>     jmp short .conExit  ;All other valid functions return done
   133                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
   134 0000137B B480                <1>     mov ah, 80h ;Set error bit
   135 0000137D 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   136                              <1> .conExit:
   137 00001381 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   138 00001387 5B                  <1>     pop rbx
   139 00001388 58                  <1>     pop rax
   140 00001389 C3                  <1>     ret
   141                              <1> .conRead:    ;Function 4
   142 0000138A B005                <1>     mov al, 05h ;Bad request structure length?
   143 0000138C 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   144 0000138F 75EA                <1>     jne .conWriteErrorCode
   145                              <1> 
   146 00001391 57                  <1>     push rdi
   147 00001392 51                  <1>     push rcx
   148 00001393 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   149 00001397 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   150                              <1> .cre1:
   151 00001399 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   152 0000139C 741C                <1>     je .cre2
   153 0000139E 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
   154 000013A5 751A                <1>     jnz .cre3   ;No, get the buffer value
   155 000013A7 31C0                <1>     xor eax, eax
   156 000013A9 CD36                <1>     int 36h
   157                              <1> .cre11:
   158 000013AB AA                  <1>     stosb
   159 000013AC 84C0                <1>     test al, al ;Was the ascii code 0?
   160 000013AE 7506                <1>     jnz .cre12  ;No, skip storing scancode
   161 000013B0 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
   162                              <1> .cre12:
   163 000013B6 FFC1                <1>     inc ecx ;Inc chars stored in buffer
   164 000013B8 EBDF                <1>     jmp short .cre1
   165                              <1> .cre2:
   166 000013BA 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   167 000013BD 59                  <1>     pop rcx
   168 000013BE 5F                  <1>     pop rdi
   169 000013BF EBC0                <1>     jmp short .conExit
   170                              <1> .cre3:
   171 000013C1 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   172 000013C7 C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   173 000013CE EBDB                <1>     jmp short .cre11
   174                              <1> 
   175                              <1> .conNondestructiveRead:  ;Function 5
   176 000013D0 B005                <1>     mov al, 05h ;Bad request structure length?
   177 000013D2 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   178 000013D5 75A4                <1>     jne .conWriteErrorCode
   179 000013D7 803D8E00000000      <1>     cmp byte [.conBuf], 0
   180 000013DE 7519                <1>     jnz .cnr2
   181 000013E0 B401                <1>     mov ah, 01h     ;Get key if exists
   182 000013E2 CD36                <1>     int 36h
   183 000013E4 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   184                              <1>     ;Keystroke available
   185                              <1> .cnr0:
   186 000013E6 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Move char in al
   187 000013E9 E993FFFFFF          <1>     jmp .conExit
   188                              <1> .cnr1: ;No keystroke available
   189 000013EE 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 0200h   ;Set busy bit
   190 000013F4 E988FFFFFF          <1>     jmp .conExit
   191                              <1> .cnr2:
   192 000013F9 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   193 000013FF EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   194                              <1> 
   195                              <1> .conInputStatus:         ;Function 6
   196 00001401 B005                <1>     mov al, 05h ;Bad request structure length?
   197 00001403 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   198 00001406 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   199 0000140C E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   200                              <1> 
   201                              <1> .conFlushInputBuffers:   ;Function 7
   202 00001411 B005                <1>     mov al, 05h ;Bad request structure length?
   203 00001413 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   204 00001416 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   205 0000141C C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   206                              <1> .cfib0:
   207 00001423 B401                <1>     mov ah, 01      ;Get buffer status
   208 00001425 CD36                <1>     int 36h
   209 00001427 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   210 0000142D 30E4                <1>     xor ah, ah
   211 0000142F CD36                <1>     int 36h ;Read key to flush from buffer
   212 00001431 EBF0                <1>     jmp short .cfib0
   213                              <1> 
   214                              <1> .conWrite:   ;Function 8 and 9
   215 00001433 B005                <1>     mov al, 05h ;Bad request structure length?
   216 00001435 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   217 00001438 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   218                              <1> 
   219 0000143E 56                  <1>     push rsi
   220 0000143F 51                  <1>     push rcx
   221 00001440 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   222 00001444 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   223                              <1> .cw1: 
   224 00001446 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   225 00001449 7407                <1>     je .cw2
   226 0000144B AC                  <1>     lodsb   ;Get char into al, and inc rsi
   227 0000144C CD49                <1>     int 49h ;Fast print char
   228 0000144E FFC1                <1>     inc ecx
   229 00001450 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   230                              <1> .cw2:
   231 00001452 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   232 00001455 59                  <1>     pop rcx
   233 00001456 5E                  <1>     pop rsi
   234 00001457 E925FFFFFF          <1>     jmp .conExit
   235                              <1> .conOutputStatus:   ;Function 0Ah
   236 0000145C B005                <1>     mov al, 05h ;Bad request structure length?
   237 0000145E 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   238 00001461 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   239 00001467 E915FFFFFF          <1>     jmp .conExit
   240                              <1> 
   241 0000146C 00                  <1> .conBuf db 0    ;Single byte buffer
   242                              <1> clkDriver:
   243 0000146D 50                  <1>     push rax
   244 0000146E 53                  <1>     push rbx
   245 0000146F 51                  <1>     push rcx
   246 00001470 52                  <1>     push rdx
   247 00001471 56                  <1>     push rsi
   248 00001472 55                  <1>     push rbp
   249 00001473 488B1DA4FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   250 0000147A B003                <1>     mov al, 03h ;Unknown Command
   251 0000147C 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   252 00001480 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   253                              <1> 
   254 00001482 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   255 00001485 3C04                <1>     cmp al, 04h
   256 00001487 7437                <1>     jz .clkRead
   257 00001489 3C06                <1>     cmp al, 06h
   258 0000148B 0F8494000000        <1>     jz .clkInputStatus
   259 00001491 3C07                <1>     cmp al, 07h
   260 00001493 0F8498000000        <1>     jz .clkFlushInputBuffers
   261 00001499 3C08                <1>     cmp al, 08h
   262 0000149B 0F84A0000000        <1>     jz .clkWrite
   263 000014A1 3C09                <1>     cmp al, 09h
   264 000014A3 0F8498000000        <1>     jz .clkWrite
   265 000014A9 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   266                              <1> .clkNotFunctioning:
   267 000014AB B002                <1>     mov al, 02h ;Device not ready error
   268                              <1> .clkWriteErrorCode:
   269 000014AD B480                <1>     mov ah, 80h ;Set error bit
   270 000014AF 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   271                              <1> .clkExit:
   272 000014B3 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   273 000014B9 5D                  <1>     pop rbp
   274 000014BA 5E                  <1>     pop rsi
   275 000014BB 5A                  <1>     pop rdx
   276 000014BC 59                  <1>     pop rcx
   277 000014BD 5B                  <1>     pop rbx
   278 000014BE 58                  <1>     pop rax
   279 000014BF C3                  <1>     ret
   280                              <1> 
   281                              <1> .clkRead:           ;Function 4
   282 000014C0 B005                <1>     mov al, 05h ;Bad request structure length?
   283 000014C2 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   284 000014C5 75E6                <1>     jne .clkWriteErrorCode
   285                              <1> 
   286 000014C7 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   287 000014CA 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   288 000014CE 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   289 000014D5 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   290 000014D9 30E4                <1>     xor ah, ah
   291 000014DB CD3A                <1>     int 3Ah         ;Read the system timer
   292 000014DD 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   293 000014DF 740D                <1>     jz .clkr1       ;Nope, now just time 
   294 000014E1 30E4                <1>     xor ah, ah
   295                              <1>     ;This works as al should keep count of the # of days passed since last read
   296 000014E3 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   297 000014E7 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   298                              <1> .clkr1:
   299 000014EE 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   300 000014F1 0FB7D2              <1>     movzx edx, dx
   301 000014F4 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   302 000014F6 89D0                <1>     mov eax, edx
   303 000014F8 31D2                <1>     xor edx, edx
   304 000014FA 89D8                <1>     mov eax, ebx
   305 000014FC B944040000          <1>     mov ecx, 1092   
   306 00001501 F7F1                <1>     div ecx
   307 00001503 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   308 00001506 89D0                <1>     mov eax, edx    ;Get remainder in eax
   309 00001508 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   310 0000150C 31D2                <1>     xor edx, edx
   311 0000150E B95B000000          <1>     mov ecx, 91 ;5*18.2
   312 00001513 F7F1                <1>     div ecx
   313 00001515 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   314 00001518 89D0                <1>     mov eax, edx    ;Get remainder in eax
   315                              <1>     ;lea eax, dword [eax + 4*eax]
   316                              <1>     ;add eax, edx    ;Essentially multiply by 6
   317 0000151A 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   318 0000151D 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   319 00001520 E98EFFFFFF          <1>     jmp .clkExit
   320                              <1> 
   321                              <1> .clkInputStatus:    ;Function 6
   322                              <1> ;Always return ready
   323 00001525 B005                <1>     mov al, 05h ;Bad request structure length?
   324 00001527 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   325 0000152A 7581                <1>     jne .clkWriteErrorCode
   326 0000152C E982FFFFFF          <1>     jmp .clkExit
   327                              <1> .clkFlushInputBuffers:  ;Function 7
   328                              <1> ;Always return done immediately
   329 00001531 B005                <1>     mov al, 05h ;Bad request structure length?
   330 00001533 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   331 00001536 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   332 0000153C E972FFFFFF          <1>     jmp .clkExit
   333                              <1> 
   334                              <1> .clkWrite:          ;Functions 8 and 9
   335 00001541 B005                <1>     mov al, 05h ;Bad request structure length?
   336 00001543 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   337 00001546 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   338                              <1> 
   339 0000154C 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   340 0000154F 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   341 00001553 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   342 00001557 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   343                              <1> 
   344 0000155E 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   345 00001560 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   346 00001564 B105                <1>     mov cl, 5
   347 00001566 F6F1                <1>     div cl          ;Divide al by 5
   348 00001568 30E4                <1>     xor ah, ah      ;Remove the remainder
   349 0000156A 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   350                              <1> ;Using the decimal part of this formula for the low count
   351                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   352 0000156C 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   353 0000156F B912000000          <1>     mov ecx, 18
   354 00001574 F7E1                <1>     mul ecx  
   355 00001576 01C3                <1>     add ebx, eax
   356                              <1> 
   357 00001578 31D2                <1>     xor edx, edx
   358 0000157A 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   359 0000157E B944040000          <1>     mov ecx, 1092
   360 00001583 F7E1                <1>     mul ecx
   361 00001585 01C3                <1>     add ebx, eax
   362 00001587 89DA                <1>     mov edx, ebx    ;edx now has low count
   363 00001589 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   364 0000158D B401                <1>     mov ah, 01h     ;Set the system time
   365 0000158F CD3A                <1>     int 3Ah
   366                              <1> 
   367 00001591 4889F3              <1>     mov rbx, rsi
   368 00001594 E91AFFFFFF          <1>     jmp .clkExit
   369                              <1> 
   370                              <1> .clkBCDtoHex:
   371                              <1> ;Converts a BCD value to a Hex byte
   372                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   373 00001599 51                  <1>     push rcx
   374 0000159A 0FB6C0              <1>     movzx eax, al   ;Zero extend
   375 0000159D 89C1                <1>     mov ecx, eax    ;Save al in ecx
   376 0000159F 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   377 000015A4 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   378 000015AA C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   379                              <1> .cbth0:
   380 000015AD 050A000000          <1>     add eax, 10
   381 000015B2 E2F9                <1>     loop .cbth0
   382 000015B4 59                  <1>     pop rcx
   383 000015B5 C3                  <1>     ret
   384                              <1> 
   385                              <1> .clkHexToBCD:
   386                              <1> ;Converts a Hex byte into two BCD digits
   387                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   388 000015B6 51                  <1>     push rcx
   389 000015B7 0FB6C0              <1>     movzx eax, al   ;Zero extend
   390 000015BA 31C9                <1>     xor ecx, ecx
   391                              <1> .chtb0:
   392 000015BC 3D0A000000          <1>     cmp eax, 10
   393 000015C1 7209                <1>     jb .chtb1
   394 000015C3 2D0A000000          <1>     sub eax, 10
   395 000015C8 FFC1                <1>     inc ecx
   396 000015CA EBF0                <1>     jmp short .chtb0
   397                              <1> .chtb1:
   398 000015CC C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   399 000015CF 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   400 000015D1 59                  <1>     pop rcx
   401 000015D2 C3                  <1>     ret
   402 000015D3 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   403                              <1> ;When counting the number of days, first compute the number of years since
   404                              <1> ; 1980 and your year. 
   405                              <1> ;Then, using the table below, find the number of leap years between 1980
   406                              <1> ; and (YourYear - 1). 
   407                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   408                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   409                              <1> ;Use the months table to get the number of days in a normal month as leap 
   410                              <1> ; years are added using the previous comment.
   411                              <1> ;Finally check if the date is after 28th Feb. If it is, check if your year is 
   412                              <1> ; a leap year using the table. If it is, add an extra day.
   413                              <1> .clkLeapYears:
   414 000015D5 0004080C1014181C20- <1>     db 00, 04, 08, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 
   414 000015DE 24282C30            <1>
   415 000015E2 34383C4044484C5054- <1>     db 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96
   415 000015EB 585C60              <1>
   416                              <1> .clkMonths:
   417 000015EE 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   417 000015F7 1F1E1F              <1>
   418                              <1> ;COM Driver headers and main interrupt strat
   419                              <1> com1Intr:
   420 000015FA C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   421 00001601 EB19                <1>     jmp short comIntr
   422                              <1> com2Intr:
   423 00001603 C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   424 0000160A EB10                <1>     jmp short comIntr
   425                              <1> com3Intr:
   426 0000160C C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   427 00001613 EB07                <1>     jmp short comIntr
   428                              <1> com4Intr:
   429 00001615 C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   430                              <1> comIntr:
   431 0000161C 50                  <1>     push rax
   432 0000161D 53                  <1>     push rbx
   433 0000161E 51                  <1>     push rcx
   434 0000161F 52                  <1>     push rdx
   435 00001620 56                  <1>     push rsi
   436 00001621 57                  <1>     push rdi
   437 00001622 488B1DF5FCFFFF      <1>     mov rbx, qword [reqHdrPtr]
   438 00001629 B003                <1>     mov al, 03h ;Unknown Command
   439 0000162B 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   440 0000162F 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   441                              <1> 
   442 00001631 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   443 00001634 3C04                <1>     cmp al, 4   ;Read Character(s)
   444 00001636 7462                <1>     jz .comRead
   445 00001638 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   446 0000163A 0F849B000000        <1>     jz .comNondestructiveRead   
   447 00001640 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   448 00001642 0F8484000000        <1>     jz .comReadInputStatus
   449 00001648 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   450 0000164A 0F84B9000000        <1>     jz .comFlushInputBuffers
   451 00001650 3C08                <1>     cmp al, 8
   452 00001652 0F84DB000000        <1>     jz .comWrite
   453 00001658 3C09                <1>     cmp al, 9
   454 0000165A 0F84D3000000        <1>     jz .comWrite
   455 00001660 3C0A                <1>     cmp al, 0Ah
   456 00001662 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   457 00001668 EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   458                              <1> .comErrorNoCount:
   459 0000166A B002                <1>     mov al, 02h ;Unknown device
   460 0000166C EB19                <1>     jmp short .comWriteErrorCode
   461                              <1> .comReadError:
   462 0000166E BA0B000000          <1>     mov edx, 0Bh
   463                              <1> .comWriteError:
   464 00001673 BA0A000000          <1>     mov edx, 0Ah
   465                              <1> .comError:
   466 00001678 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   467 0000167B B902000000          <1>     mov ecx, 02h    ;Unknown device
   468 00001680 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   469 00001682 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   470 00001685 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   471                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   472 00001687 B480                <1>     mov ah, 80h ;Set error bit
   473 00001689 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   474                              <1> .comExit:
   475 0000168D 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   476 00001693 5F                  <1>     pop rdi
   477 00001694 5E                  <1>     pop rsi
   478 00001695 5A                  <1>     pop rdx
   479 00001696 59                  <1>     pop rcx
   480 00001697 5B                  <1>     pop rbx
   481 00001698 58                  <1>     pop rax
   482 00001699 C3                  <1>     ret
   483                              <1> 
   484                              <1> .comRead:
   485 0000169A B005                <1>     mov al, 05h ;Bad request structure length?
   486 0000169C 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   487 0000169F 75E6                <1>     jne .comWriteErrorCode
   488                              <1> 
   489 000016A1 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   490 000016A5 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   491                              <1> .cr1:
   492 000016A7 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   493 000016AA 741B                <1>     je .cre2
   494                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   495 000016AC B802000000          <1>     mov eax, 02h    ;Recieve 
   496 000016B1 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   497 000016B7 6698                <1>     cbw     ;Zero extend to upper byte
   498 000016B9 CD34                <1>     int 34h ;Recieve Char
   499 000016BB 72BB                <1>     jc .comError
   500 000016BD 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   501 000016C0 74EA                <1>     je .cr11
   502 000016C2 AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   503 000016C3 FFC1                <1>     inc ecx
   504 000016C5 EBE0                <1>     jmp short .cr1
   505                              <1> .cre2:
   506 000016C7 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   507 000016CA EBC1                <1>     jmp short .comExit
   508                              <1> 
   509                              <1> .comReadInputStatus:
   510 000016CC B005                <1>     mov al, 05h ;Bad request structure length?
   511 000016CE 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   512 000016D1 75B4                <1>     jne .comWriteErrorCode
   513 000016D3 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   514 000016D9 EBB2                <1>     jmp short .comExit
   515                              <1> 
   516                              <1> .comNondestructiveRead:
   517                              <1> ;Acts like a "read one character if there is one" function
   518 000016DB B005                <1>     mov al, 05h ;Bad request structure length?
   519 000016DD 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   520 000016E0 75A5                <1>     jne .comWriteErrorCode
   521                              <1> .cndr1:
   522 000016E2 B802000000          <1>     mov eax, 02h    ;Recieve 
   523 000016E7 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   524 000016ED 6698                <1>     cbw     ;Zero extend to upper byte
   525 000016EF CD34                <1>     int 34h ;Recieve Char
   526 000016F1 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   527 000016F7 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   528 000016FA 7405                <1>     je .cndr2
   529 000016FC 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Get next char
   530 000016FF EB8C                <1>     jmp short .comExit
   531                              <1> .cndr2:
   532 00001701 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 200h ;Busy bit set
   533 00001707 EB84                <1>     jmp short .comExit
   534                              <1> 
   535                              <1> .comFlushInputBuffers:
   536 00001709 B005                <1>     mov al, 05h ;Bad request structure length?
   537 0000170B 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   538 0000170E 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   539                              <1> .cfib0:
   540 00001714 8A1584000000        <1>     mov dl, byte [.comDevice]
   541 0000171A 6698                <1>     cbw
   542 0000171C B802000000          <1>     mov eax, 02h    ;Recieve
   543 00001721 CD34                <1>     int 34h
   544 00001723 0F8241FFFFFF        <1>     jc .comErrorNoCount
   545 00001729 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   546 0000172C 75E6                <1>     jne .cfib0
   547 0000172E E95AFFFFFF          <1>     jmp .comExit
   548                              <1> 
   549                              <1> .comWrite:
   550 00001733 B005                <1>     mov al, 05h ;Bad request structure length?
   551 00001735 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   552 00001738 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   553                              <1> 
   554 0000173E 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   555 00001742 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   556                              <1> .cw1: 
   557 00001744 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   558 00001747 7417                <1>     je .cw2
   559 00001749 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   560 0000174A B401                <1>     mov ah, 01h ;Move function number into ah
   561 0000174C 8A154C000000        <1>     mov dl, byte [.comDevice]
   562 00001752 6698                <1>     cbw     ;Zero extend to upper byte
   563 00001754 CD34                <1>     int 34h ;Transmit char
   564 00001756 0F821CFFFFFF        <1>     jc .comError
   565 0000175C FFC1                <1>     inc ecx
   566 0000175E EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   567                              <1> .cw2:
   568 00001760 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   569 00001763 E925FFFFFF          <1>     jmp .comExit
   570                              <1> 
   571                              <1> .comOutputStatus:
   572                              <1> ;Read MODEM status
   573 00001768 B005                <1>     mov al, 05h ;Bad request structure length?
   574 0000176A 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   575 0000176D 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   576                              <1> 
   577 00001773 8A1525000000        <1>     mov dl, byte [.comDevice]
   578 00001779 6698                <1>     cbw     ;Zero extend to upper byte
   579 0000177B B403                <1>     mov ah, 03h     ;Get status
   580 0000177D CD34                <1>     int 34h
   581 0000177F 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   582 00001785 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   583 0000178A C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   584 0000178D F7D0                <1>     not eax      ;Bitwise inversion
   585 0000178F 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   586 00001794 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   587 00001799 E9EFFEFFFF          <1>     jmp .comExit
   588 0000179E 00                  <1> .comDevice   db 0
   589                              <1> 
   590                              <1> msdDriver:
   591 0000179F 50                  <1>     push rax
   592 000017A0 53                  <1>     push rbx
   593 000017A1 51                  <1>     push rcx
   594 000017A2 52                  <1>     push rdx
   595 000017A3 56                  <1>     push rsi
   596 000017A4 57                  <1>     push rdi
   597 000017A5 55                  <1>     push rbp
   598 000017A6 4150                <1>     push r8
   599 000017A8 488B1D6FFBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
   600 000017AF 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   601 000017B3 B003                <1>     mov al, 03h
   602 000017B5 0F87F9000000        <1>     ja .msdWriteErrorCode ;If yes, error!
   603 000017BB B001                <1>     mov al, 01h ;Unknown Unit Error
   604 000017BD 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
   605 000017C1 0F87ED000000        <1>     ja .msdWriteErrorCode ;If yes, error!
   606 000017C7 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
   607 000017CA 84C0                <1>     test al, al
   608 000017CC 0F84F8000000        <1>     jz .msdInit
   609 000017D2 3C01                <1>     cmp al, 01
   610 000017D4 0F84C9010000        <1>     jz .msdMedChk
   611 000017DA 3C02                <1>     cmp al, 02
   612 000017DC 0F8439020000        <1>     jz .msdBuildBPB
   613 000017E2 3C03                <1>     cmp al, 03
   614 000017E4 0F84A6020000        <1>     jz .msdIOCTLRead
   615 000017EA 3C04                <1>     cmp al, 04
   616 000017EC 0F84AE020000        <1>     jz .msdRead
   617 000017F2 3C08                <1>     cmp al, 08
   618 000017F4 0F84E2020000        <1>     jz .msdWrite
   619 000017FA 3C09                <1>     cmp al, 09
   620 000017FC 0F8416030000        <1>     jz .msdWriteVerify
   621 00001802 3C0C                <1>     cmp al, 12
   622 00001804 0F8457030000        <1>     jz .msdIOCTLWrite
   623 0000180A 3C0D                <1>     cmp al, 13
   624 0000180C 0F845F030000        <1>     jz .msdDevOpen
   625 00001812 3C0E                <1>     cmp al, 14
   626 00001814 0F8476030000        <1>     jz .msdDevClose
   627 0000181A 3C0F                <1>     cmp al, 15
   628 0000181C 0F848D030000        <1>     jz .msdRemovableMedia
   629 00001822 3C13                <1>     cmp al, 19
   630 00001824 0F84B2030000        <1>     jz .msdGenericIOCTL
   631 0000182A 3C17                <1>     cmp al, 23
   632 0000182C 0F84BA030000        <1>     jz .msdGetLogicalDev
   633 00001832 3C18                <1>     cmp al, 24
   634 00001834 0F84CB030000        <1>     jz .msdSetLogicalDev
   635 0000183A EB7E                <1>     jmp short .msdDriverExit    ;All other valid functions exit done
   636                              <1> .msdIOError:  ;In Read and Write errors, rbp points to the dev struc
   637 0000183C 4889EB              <1>     mov rbx, rbp
   638 0000183F 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
   639 00001842 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
   640 00001844 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
   641                              <1> ;Now fall through to general error
   642                              <1> .msdGenDiskError:
   643 00001847 B401                <1>     mov ah, 01h
   644 00001849 30D2                <1>     xor dl, dl  ;Work around bug that fails request if dl > 7Fh
   645 0000184B CD33                <1>     int 33h ;Read status of last operation
   646 0000184D 80FC06              <1>     cmp ah, 06h ;Mock Seek response (device not present)
   647 00001850 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
   648 00001852 7460                <1>     je .msdWriteErrorCode 
   649 00001854 B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
   650 00001856 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
   651 00001859 7459                <1>     je .msdWriteErrorCode 
   652 0000185B 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
   653 0000185E 7454                <1>     je .msdWriteErrorCode
   654                              <1> ;Device Not Ready
   655 00001860 B002                <1>     mov al, 02h  ;Device not ready code
   656 00001862 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   657 00001865 744D                <1>     je .msdWriteErrorCode
   658 00001867 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   659 0000186B 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   660                              <1> ;Write Protected
   661 0000186F 30C0                <1>     xor al, al
   662 00001871 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   663 00001876 743C                <1>     je .msdWriteErrorCode
   664                              <1> ;CRC Error
   665 00001878 B004                <1>     mov al, 04h     ;CRC error code
   666 0000187A 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   667 0000187F 7433                <1>     je .msdWriteErrorCode
   668 00001881 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   669 00001886 742C                <1>     je .msdWriteErrorCode
   670 00001888 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   671 0000188D 7425                <1>     je .msdWriteErrorCode
   672                              <1> ;Seek Error
   673 0000188F B006                <1>     mov al, 06h     ;Seek error code
   674 00001891 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   675 00001894 741E                <1>     je .msdWriteErrorCode
   676                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   677                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   678 00001896 B007                <1>     mov al, 07h
   679 00001898 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   680 0000189B 7417                <1>     je .msdWriteErrorCode
   681                              <1> ;Sector Not Found
   682 0000189D B008                <1>     mov al, 08h     ;Sector not found code
   683 0000189F 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   684 000018A2 7410                <1>     je .msdWriteErrorCode
   685                              <1> ;Write faults
   686 000018A4 B00A                <1>     mov al, 0Ah     ;Write fault
   687 000018A6 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   688 000018A9 7409                <1>     je .msdWriteErrorCode
   689                              <1> ;Read faults
   690 000018AB B00B                <1>     mov al, 0Bh     ;Read fault
   691 000018AD 80F911              <1>     cmp cl, 11h     ;Read error
   692 000018B0 7402                <1>     je .msdWriteErrorCode
   693                              <1> ;General Errors
   694 000018B2 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   695                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   696 000018B4 B480                <1>     mov ah, 80h ;Set error bit
   697 000018B6 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   698                              <1> .msdDriverExit:
   699 000018BA 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
   700 000018C0 4158                <1>     pop r8
   701 000018C2 5D                  <1>     pop rbp
   702 000018C3 5F                  <1>     pop rdi
   703 000018C4 5E                  <1>     pop rsi
   704 000018C5 5A                  <1>     pop rdx
   705 000018C6 59                  <1>     pop rcx
   706 000018C7 5B                  <1>     pop rbx
   707 000018C8 58                  <1>     pop rax
   708 000018C9 C3                  <1>     ret
   709                              <1> .msdInit:            ;Function 0
   710 000018CA B005                <1>     mov al, 05h ;Bad request structure length
   711 000018CC 803B1F              <1>     cmp byte [rbx + drvReqHdr.hdrlen], initReqPkt_size
   712 000018CF 75E3                <1>     jne .msdWriteErrorCode
   713                              <1> 
   714 000018D1 488D2DF4050000      <1>     lea rbp, endptr
   715 000018D8 48896B0E            <1>     mov qword [rbx + initReqPkt.endptr], rbp    ;Where the end is gonna be
   716 000018DC 488D2D69030000      <1>     lea rbp, .msdBPBTbl
   717 000018E3 48896B16            <1>     mov qword [rbx + initReqPkt.optptr], rbp    ;Where bpb tbl is gonna be
   718                              <1> 
   719 000018E7 4889DD              <1>     mov rbp, rbx ;Save the req block ptr in rbp
   720 000018EA 31D2                <1>     xor edx, edx  ;Start from device zero
   721 000018EC 88550D              <1>     mov byte [rbp + initReqPkt.numunt], dl   ;Zero this field, max 5
   722                              <1> .mi0:   ;Now check each device for partitions
   723 000018EF 807D0D05            <1>     cmp byte [rbp + initReqPkt.numunt], 5
   724 000018F3 746C                <1>     je .msdExit ;IF we are at 5 now, we exit
   725 000018F5 B482                <1>     mov ah, 82h ;LBA read
   726 000018F7 B001                <1>     mov al, 1   ;1 sector
   727 000018F9 B900000000          <1>     mov ecx, 0  ;Read sector 0
   728 000018FE 488D1D(31040000)    <1>     lea rbx, msdTempBuffer  ;Get address of this space
   729 00001905 CD33                <1>     int 33h
   730 00001907 0F828E000000        <1>     jc .msdInitError
   731                              <1> ;Now we verify if this is a BPB. Removable devices can't be partitioned (yet)
   732                              <1> ;1) Check byte 0 for EBh (short jmp) and byte 2 for a 90h (nop).
   733 0000190D 8A03                <1>     mov al, byte [rbx]
   734 0000190F 8A6302              <1>     mov ah, byte [rbx + 2]
   735 00001912 663DEB90            <1>     cmp ax, 090EBh
   736 00001916 7573                <1>     jne .mimbr
   737                              <1> ;Valid BPB found! Copy to internal table and inc lastdrive
   738 00001918 4889DE              <1>     mov rsi, rbx
   739 0000191B B878000000          <1>     mov eax, bpbEx_size
   740 00001920 89D1                <1>     mov ecx, edx    ;Temporarily save dl in ecx
   741 00001922 F7E2                <1>     mul edx
   742 00001924 89CA                <1>     mov edx, ecx
   743 00001926 488D3D47030000      <1>     lea rdi, .msdBPBblks
   744 0000192D 4801C7              <1>     add rdi, rax
   745 00001930 B978000000          <1>     mov ecx, bpbEx_size
   746 00001935 4889F8              <1>     mov rax, rdi    ;Save the entry address in rax
   747 00001938 F3A4                <1>     rep movsb   ;Copy the bpb into the bpb table
   748 0000193A 488D3D0B030000      <1>     lea rdi, .msdBPBTbl
   749 00001941 488D3CD7            <1>     lea rdi, qword [rdi + 8*rdx]
   750 00001945 488907              <1>     mov qword [rdi], rax
   751 00001948 488D3DF3020000      <1>     lea rdi, .msdBIOSmap
   752 0000194F 4801D7              <1>     add rdi, rdx    ;rdx contains a number, table is a list of bytes
   753 00001952 8817                <1>     mov byte [rdi], dl
   754 00001954 FE450D              <1>     inc byte [rbp + initReqPkt.numunt]
   755 00001957 FEC2                <1>     inc dl
   756 00001959 3A15(09000000)      <1>     cmp dl, byte [numRemMSD] ;Once these are equal, we have processed last dev
   757 0000195F 758E                <1>     jne .mi0
   758                              <1> .msdExit:
   759                              <1> ;If one device only, copy its BPB pointer and drive number
   760                              <1> ;When HDD support implemented, this will check the number of remdevs not lastdrv
   761 00001961 807D0D01            <1>     cmp byte [rbp + initReqPkt.numunt], 1
   762 00001965 751C                <1>     jne .msdexit1
   763                              <1> ;Here ONLY if one device found
   764 00001967 488D35DE020000      <1>     lea rsi, .msdBPBTbl
   765 0000196E 488D7E08            <1>     lea rdi, qword [rsi + 8]    ;Point to next entry
   766 00001972 48A5                <1>     movsq   ;Copy pointer
   767 00001974 488D35C7020000      <1>     lea rsi, .msdBIOSmap
   768 0000197B 488D7E01            <1>     lea rdi, qword [rsi + 1]
   769 0000197F A4                  <1>     movsb   ;Copy byte
   770 00001980 FE450D              <1>     inc byte [rbp + initReqPkt.numunt]
   771                              <1> .msdexit1:
   772 00001983 4889EB              <1>     mov rbx, rbp
   773 00001986 E92FFFFFFF          <1>     jmp .msdDriverExit
   774                              <1> .mimbr:
   775                              <1> ;Goto next device without incrementing LASTDRIVE
   776 0000198B FEC2                <1>     inc dl
   777 0000198D 3A15(09000000)      <1>     cmp dl, byte [numRemMSD] ;Once these are equ, we have processed last dev
   778 00001993 0F8556FFFFFF        <1>     jne .mi0
   779 00001999 EBC6                <1>     jmp short .msdExit
   780                              <1> .msdInitError:
   781 0000199B 4889EB              <1>     mov rbx, rbp
   782 0000199E E9A4FEFFFF          <1>     jmp .msdGenDiskError
   783                              <1> .msdMedChk:          ;Function 1
   784                              <1> ;Once the BIOS function is implmented that reads the changeline, use that!
   785                              <1> ;For BIOSes that dont support the changeline, the following procedure will 
   786                              <1> ; suffice.
   787 000019A3 B005                <1>     mov al, 05h ;Bad request structure length
   788 000019A5 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   789 000019A8 0F8506FFFFFF        <1>     jne .msdWriteErrorCode
   790                              <1> 
   791 000019AE 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   792 000019B3 488D0D88020000      <1>     lea rcx, .msdBIOSmap
   793 000019BA 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   794 000019BD F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   795 000019C0 7550                <1>     jnz .mmcNoChange
   796                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   797 000019C2 B416                <1>     mov ah, 16h 
   798 000019C4 CD33                <1>     int 33h
   799 000019C6 0F827BFEFFFF        <1>     jc .msdGenDiskError
   800 000019CC 80FC80              <1>     cmp ah, 80h
   801 000019CF 740E                <1>     je .mmcNoChangeLine
   802 000019D1 80FC86              <1>     cmp ah, 86h
   803 000019D4 7409                <1>     je .mmcNoChangeLine
   804 000019D6 84E4                <1>     test ah, ah ;No change?
   805 000019D8 7438                <1>     jz .mmcNoChange
   806 000019DA F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   807 000019DD 7516                <1>     jnz .mmcChange
   808                              <1> ;If nothing, fall through and test manually, should never happen though
   809                              <1> .mmcNoChangeLine:
   810                              <1> ;Now we test Media Descriptor
   811 000019DF 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   812 000019E2 488D3D63020000      <1>     lea rdi, .msdBPBTbl
   813 000019E9 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax]
   814 000019ED 488B3F              <1>     mov rdi, qword [rdi]    ;Dereference rdi
   815 000019F0 385715              <1>     cmp byte [rdi + bpb32.media], dl    ;Compare media descriptor bytes
   816 000019F3 7414                <1>     je .mmcUnsure
   817                              <1> .mmcChange:
   818 000019F5 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   819 000019F9 488D0538020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   820 00001A00 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   821 00001A04 E9B1FEFFFF          <1>     jmp .msdDriverExit
   822                              <1> .mmcUnsure:
   823 00001A09 C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   824 00001A0D E9A8FEFFFF          <1>     jmp .msdDriverExit
   825                              <1> .mmcNoChange:
   826 00001A12 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   827 00001A16 E99FFEFFFF          <1>     jmp .msdDriverExit
   828                              <1> 
   829                              <1> .msdBuildBPB:        ;Function 2
   830 00001A1B B005                <1>     mov al, 05h ;Bad request structure length
   831 00001A1D 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   832 00001A20 0F858EFEFFFF        <1>     jne .msdWriteErrorCode
   833                              <1> 
   834 00001A26 4889DE              <1>     mov rsi, rbx
   835 00001A29 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   836 00001A2E 488D0D0D020000      <1>     lea rcx, .msdBIOSmap
   837 00001A35 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   838 00001A38 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   839 00001A3C 31C9                <1>     xor ecx, ecx    ;Read Sector 0
   840 00001A3E B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   841 00001A43 CD33                <1>     int 33h
   842 00001A45 0F82FCFDFFFF        <1>     jc .msdGenDiskError
   843                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   844 00001A4B 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   845 00001A4F 7418                <1>     je .mbbpb0
   846 00001A51 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   847 00001A55 7412                <1>     je .mbbpb0
   848 00001A57 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   849 00001A5B 740C                <1>     je .mbbpb0
   850 00001A5D 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   851 00001A61 B007                <1>     mov al, 07h ;Unknown media error code
   852 00001A63 0F824BFEFFFF        <1>     jb .msdWriteErrorCode
   853                              <1> .mbbpb0:
   854 00001A69 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   855 00001A6C 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   856 00001A71 488D3DD4010000      <1>     lea rdi, .msdBPBTbl
   857 00001A78 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   858 00001A7C 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   859 00001A7F 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   860 00001A83 B90F000000          <1>     mov ecx, bpbEx_size/8
   861 00001A88 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   862 00001A8B E92AFEFFFF          <1>     jmp .msdDriverExit
   863                              <1> .msdIOCTLRead:       ;Function 3, returns done
   864 00001A90 B005                <1>     mov al, 05h ;Bad request structure length
   865 00001A92 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   866 00001A95 0F8519FEFFFF        <1>     jne .msdWriteErrorCode
   867                              <1> 
   868 00001A9B E91AFEFFFF          <1>     jmp .msdDriverExit
   869                              <1> .msdRead:            ;Function 4
   870                              <1> ;Will read one sector at a time.
   871 00001AA0 B005                <1>     mov al, 05h ;Bad request structure length
   872 00001AA2 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   873 00001AA5 0F8509FEFFFF        <1>     jne .msdWriteErrorCode
   874                              <1> 
   875 00001AAB 4889DD              <1>     mov rbp, rbx
   876 00001AAE 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   877                              <1> .msdr0:
   878 00001AB0 B682                <1>     mov dh, 82h ;LBA Read Sectors
   879 00001AB2 E867010000          <1>     call .msdBlkIOCommon
   880 00001AB7 0F827FFDFFFF        <1>     jc .msdIOError
   881 00001ABD 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   882 00001AC5 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   883 00001ACD FFC6                <1>     inc esi
   884 00001ACF 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   885 00001AD2 75DC                <1>     jne .msdr0
   886 00001AD4 4889EB              <1>     mov rbx, rbp
   887 00001AD7 E9DEFDFFFF          <1>     jmp .msdDriverExit
   888                              <1> .msdWrite:           ;Function 8
   889                              <1> ;Will write one sector at a time.
   890 00001ADC B005                <1>     mov al, 05h ;Bad request structure length
   891 00001ADE 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   892 00001AE1 0F85CDFDFFFF        <1>     jne .msdWriteErrorCode
   893                              <1> 
   894 00001AE7 4889DD              <1>     mov rbp, rbx
   895 00001AEA 31F6                <1>     xor esi, esi  ;Set counter to zero
   896                              <1> .msdw0:
   897 00001AEC B683                <1>     mov dh, 83h ;LBA Write Sectors
   898 00001AEE E82B010000          <1>     call .msdBlkIOCommon
   899 00001AF3 0F8243FDFFFF        <1>     jc .msdIOError
   900 00001AF9 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   901 00001B01 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   902 00001B09 FFC6                <1>     inc esi
   903 00001B0B 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   904 00001B0E 75DC                <1>     jne .msdw0
   905 00001B10 4889EB              <1>     mov rbx, rbp
   906 00001B13 E9A2FDFFFF          <1>     jmp .msdDriverExit
   907                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   908                              <1> ;Will write one sector at a time and then verify it.
   909 00001B18 B005                <1>     mov al, 05h ;Bad request structure length
   910 00001B1A 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   911 00001B1D 0F8591FDFFFF        <1>     jne .msdWriteErrorCode
   912                              <1> 
   913 00001B23 4889DD              <1>     mov rbp, rbx
   914 00001B26 31F6                <1>     xor esi, esi  ;Set counter to zero
   915                              <1> .msdwv0:
   916 00001B28 B683                <1>     mov dh, 83h ;LBA Write Sectors
   917 00001B2A E8EF000000          <1>     call .msdBlkIOCommon
   918 00001B2F 0F8207FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   919 00001B35 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   920 00001B37 E8E2000000          <1>     call .msdBlkIOCommon
   921 00001B3C 0F82FAFCFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   922 00001B42 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   923 00001B4A 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   924 00001B52 FFC6                <1>     inc esi
   925 00001B54 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   926 00001B57 75CF                <1>     jne .msdwv0
   927 00001B59 4889EB              <1>     mov rbx, rbp
   928 00001B5C E959FDFFFF          <1>     jmp .msdDriverExit
   929                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   930 00001B61 B005                <1>     mov al, 05h ;Bad request structure length
   931 00001B63 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   932 00001B66 0F8548FDFFFF        <1>     jne .msdWriteErrorCode
   933                              <1> 
   934 00001B6C E949FDFFFF          <1>     jmp .msdDriverExit
   935                              <1> .msdDevOpen:         ;Function 13
   936 00001B71 B005                <1>     mov al, 05h ;Bad request structure length
   937 00001B73 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   938 00001B76 0F8538FDFFFF        <1>     jne .msdWriteErrorCode
   939                              <1> 
   940 00001B7C 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   941 00001B81 488D0DBF000000      <1>     lea rcx, .msdHdlCnt
   942 00001B88 FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   943 00001B8B E92AFDFFFF          <1>     jmp .msdDriverExit
   944                              <1> .msdDevClose:        ;Function 14
   945 00001B90 B005                <1>     mov al, 05h ;Bad request structure length
   946 00001B92 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   947 00001B95 0F8519FDFFFF        <1>     jne .msdWriteErrorCode
   948                              <1> 
   949 00001B9B 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   950 00001BA0 488D0DA0000000      <1>     lea rcx, .msdHdlCnt
   951 00001BA7 FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   952 00001BAA E90BFDFFFF          <1>     jmp .msdDriverExit
   953                              <1> .msdRemovableMedia:  ;Function 15
   954 00001BAF B005                <1>     mov al, 05h ;Bad request structure length
   955 00001BB1 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   956 00001BB4 0F85FAFCFFFF        <1>     jne .msdWriteErrorCode
   957                              <1> 
   958 00001BBA 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   959 00001BBF 488D0D7C000000      <1>     lea rcx, .msdBIOSmap
   960 00001BC6 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   961 00001BC9 A880                <1>     test al, 80h
   962 00001BCB 0F84E9FCFFFF        <1>     jz .msdDriverExit   ;If removable, busy bit is clear
   963 00001BD1 66C743030002        <1>     mov word [rbx + remMediaReqPkt.status], 0200h ;Set Busy bit
   964 00001BD7 E9DEFCFFFF          <1>     jmp .msdDriverExit
   965                              <1> .msdGenericIOCTL:    ;Function 19
   966 00001BDC B005                <1>     mov al, 05h ;Bad request structure length
   967 00001BDE 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   968 00001BE1 0F85CDFCFFFF        <1>     jne .msdWriteErrorCode
   969                              <1> 
   970 00001BE7 E9CEFCFFFF          <1>     jmp .msdDriverExit
   971                              <1> .msdGetLogicalDev:   ;Function 23
   972 00001BEC B005                <1>     mov al, 05h ;Bad request structure length
   973 00001BEE 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   974 00001BF1 0F85BDFCFFFF        <1>     jne .msdWriteErrorCode
   975                              <1> 
   976 00001BF7 8A0544000000        <1>     mov al, byte [.msdCurDev]
   977 00001BFD 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   978 00001C00 E9B5FCFFFF          <1>     jmp .msdDriverExit
   979                              <1> .msdSetLogicalDev:   ;Function 24
   980 00001C05 B005                <1>     mov al, 05h ;Bad request structure length
   981 00001C07 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   982 00001C0A 0F85A4FCFFFF        <1>     jne .msdWriteErrorCode
   983                              <1> 
   984 00001C10 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   985 00001C13 880528000000        <1>     mov byte [.msdCurDev], al
   986 00001C19 E99CFCFFFF          <1>     jmp .msdDriverExit
   987                              <1> 
   988                              <1> .msdBlkIOCommon:  ;Does block IO
   989                              <1> ;Called with rbp containing old rbx value and ah with function number
   990                              <1> ;Error handled by caller
   991                              <1> ;Sector count handled by caller
   992                              <1> ;Called with dh = BIOS function number
   993 00001C1E 480FB64501          <1>     movzx rax, byte [rbp + ioReqPkt.unitnm]
   994 00001C23 8A90[421C0000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   995 00001C29 488B4D1A            <1>     mov rcx, qword [rbp + ioReqPkt.strtsc]  ;Get start sector
   996 00001C2D 488B5D0E            <1>     mov rbx, qword [rbp + ioReqPkt.bufptr]  ;Get Memory Buffer
   997 00001C31 88F4                <1>     mov ah, dh
   998 00001C33 B001                <1>     mov al, 01h ;Do one sector at a time 
   999 00001C35 CD33                <1>     int 33h
  1000 00001C37 C3                  <1>     ret
  1001                              <1> 
  1002 00001C38 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
  1003                              <1> ;LASTDRIVE default is 5
  1004 00001C41 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
  1005                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
  1006 00001C42 FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
  1007 00001C47 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
  1008 00001C4C 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
  1008 00001C55 000000000000000000- <1>
  1008 00001C5E 000000000000000000- <1>
  1008 00001C67 000000000000000000- <1>
  1008 00001C70 00000000            <1>
  1009 00001C74 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
  1009 00001C7D 000000000000000000- <1>
  1009 00001C86 000000000000000000- <1>
  1009 00001C8F 000000000000000000- <1>
  1009 00001C98 000000000000000000- <1>
  1009 00001CA1 000000000000000000- <1>
  1009 00001CAA 000000000000000000- <1>
  1009 00001CB3 000000000000000000- <1>
  1009 00001CBC 000000000000000000- <1>
  1009 00001CC5 000000000000000000- <1>
  1009 00001CCE 000000000000000000- <1>
  1009 00001CD7 000000000000000000- <1>
  1009 00001CE0 000000000000000000- <1>
  1009 00001CE9 000000000000000000- <1>
  1009 00001CF2 000000000000000000- <1>
  1009 00001CFB 000000000000000000- <1>
  1009 00001D04 000000000000000000- <1>
  1009 00001D0D 000000000000000000- <1>
  1009 00001D16 000000000000000000- <1>
  1009 00001D1F 000000000000000000- <1>
  1009 00001D28 000000000000000000- <1>
  1009 00001D31 000000000000000000- <1>
  1009 00001D3A 000000000000000000- <1>
  1009 00001D43 000000000000000000- <1>
  1009 00001D4C 000000000000000000- <1>
  1009 00001D55 000000000000000000- <1>
  1009 00001D5E 000000000000000000- <1>
  1009 00001D67 000000000000000000- <1>
  1009 00001D70 000000000000000000- <1>
  1009 00001D79 000000000000000000- <1>
  1009 00001D82 000000000000000000- <1>
  1009 00001D8B 000000000000000000- <1>
  1009 00001D94 000000000000000000- <1>
  1009 00001D9D 000000000000000000- <1>
  1009 00001DA6 000000000000000000- <1>
  1009 00001DAF 000000000000000000- <1>
  1009 00001DB8 000000000000000000- <1>
  1009 00001DC1 000000000000000000- <1>
  1009 00001DCA 000000000000000000- <1>
  1009 00001DD3 000000000000000000- <1>
  1009 00001DDC 000000000000000000- <1>
  1009 00001DE5 000000000000000000- <1>
  1009 00001DEE 000000000000000000- <1>
  1009 00001DF7 000000000000000000- <1>
  1009 00001E00 000000000000000000- <1>
  1009 00001E09 000000000000000000- <1>
  1009 00001E12 000000000000000000- <1>
  1009 00001E1B 000000000000000000- <1>
  1009 00001E24 000000000000000000- <1>
  1009 00001E2D 000000000000000000- <1>
  1009 00001E36 000000000000000000- <1>
  1009 00001E3F 000000000000000000- <1>
  1009 00001E48 000000000000000000- <1>
  1009 00001E51 000000000000000000- <1>
  1009 00001E5A 000000000000000000- <1>
  1009 00001E63 000000000000000000- <1>
  1009 00001E6C 000000000000000000- <1>
  1009 00001E75 000000000000000000- <1>
  1009 00001E7E 000000000000000000- <1>
  1009 00001E87 000000000000000000- <1>
  1009 00001E90 000000000000000000- <1>
  1009 00001E99 000000000000000000- <1>
  1009 00001EA2 000000000000000000- <1>
  1009 00001EAB 000000000000000000- <1>
  1009 00001EB4 000000000000000000- <1>
  1009 00001EBD 000000000000000000- <1>
  1009 00001EC6 000000000000        <1>
  1010                              <1> 
  1011                              <1> endptr equ $
    23                                  Segment dynamicDataArea nobits valign=1 vfollows=resSeg
    24                                  %include "dosDynaDataArea.asm"
    25                              <1> ;Create DPB chain of first 5 available DPB slots
    26 00000000 <res 36h>           <1> firstDPB        resb dpb_size
    27 00000036 <res 36h>           <1> secondDPB       resb dpb_size
    28 0000006C <res 36h>           <1> thirdDPB        resb dpb_size
    29 000000A2 <res 36h>           <1> fourthDPB       resb dpb_size
    30 000000D8 <res 36h>           <1> fifthDPB        resb dpb_size 
    31                              <1> 
    32                              <1> ;Create SFT header and corresponding array of five default sft entries
    33 0000010E <res Ah>            <1> firstSftHeader  resb sfth_size
    34 00000118 <res 3Dh>           <1> firstSft        resb sft_size
    35 00000155 <res 3Dh>           <1> secondSft       resb sft_size
    36 00000192 <res 3Dh>           <1> thirdSft        resb sft_size
    37 000001CF <res 3Dh>           <1> fourthSft       resb sft_size
    38 0000020C <res 3Dh>           <1> fifthSft        resb sft_size
    39                              <1> 
    40                              <1> ;Create a five drive CDS here so we can jettison it if config wants more
    41 00000249 <res 1C7h>          <1> initCDS         resb 5*cds_size 
    42                              <1> ;Always jettison this space
    43                              <1> DOSENDPTR:   ;Points to the end of the initially reserved DOS area
    44 00000410 <res 21h>           <1> tmpBufHdr       resb bufferHdr_size
    45 00000431 <res 200h>          <1> msdTempBuffer   resb 512    ;Reserve one sectors worth of space
    46                              <1> dynamicDataAreaLength equ $
