     1                                  [map all scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs and strucs
     5                                  %include "driverStruc.inc"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     9                              <1> ; device driver related structures.                     ;
    10                              <1> ;-------------------------------------------------------;
    11                              <1> 
    12                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    13                              <1> 
    14 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    15 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    16 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    17 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    18 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    19                              <1> 
    20                              <1> endstruc
    21                              <1> 
    22                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    23                              <1> 
    24                              <1>     .hdrlen resb 1  ;Length of the request header
    25                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    26                              <1>     .cmdcde resb 1  ;Command code
    27                              <1>     .status resw 1  ;Status word
    28                              <1>     .devptr resq 1  ;Device queue pointer field
    29                              <1> 
    30                              <1> %endmacro
    31                              <1> 
    32                              <1> struc drvReqHdr
    33                              <1>     drvReqHdrM
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    34                              <1> endstruc
    35                              <1> 
    36                              <1> struc initReqPkt  ;Init Request Packet
    37                              <1> 
    38                              <1>     drvReqHdrM   ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    39 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
    40 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
    41 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
    42 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
    47                              <1> 
    48                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    49 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    50 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
    51 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
    52                              <1> 
    53                              <1> endstruc
    54                              <1> 
    55                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
    56                              <1> 
    57                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    58 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    59 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    60 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
    61                              <1> 
    62                              <1> endstruc
    63                              <1> 
    64                              <1> struc ioReqPkt   ;IO Request Packet
    65                              <1> 
    66                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    67 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    68 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    69 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
    70 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
    71 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
    72                              <1> 
    73                              <1> endstruc
    74                              <1> 
    75                              <1> struc nonDestInNoWaitReqPkt    ;Nondestructive Input No Wait Request Packet
    76                              <1>     
    77                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    78 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
    79                              <1> 
    80                              <1> endstruc
    81                              <1> 
    82                              <1> struc statusReqPkt   ;Status Request Packet
    83                              <1> 
    84                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    85                              <1> 
    86                              <1> endstruc
    87                              <1> 
    88                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
    89                              <1> 
    90                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    91                              <1>      
    92                              <1> endstruc
    93                              <1> 
    94                              <1> struc openReqPkt ;Open Device Request Packet
    95                              <1> 
    96                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    97                              <1>      
    98                              <1> endstruc
    99                              <1> 
   100                              <1> struc closeReqPkt ;Close Device Request Packet
   101                              <1> 
   102                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   103                              <1>      
   104                              <1> endstruc
   105                              <1> 
   106                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   107                              <1> 
   108                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   109                              <1>      
   110                              <1> endstruc
   111                              <1> 
   112                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   113                              <1> 
   114                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   115 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   116 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   117 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   118 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   119 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   120                              <1> 
   121                              <1> endstruc
   122                              <1> 
   123                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   124                              <1>     
   125                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   126                              <1> 
   127                              <1> endstruc
   128                              <1> 
   129                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   130                              <1>     
   131                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   132                              <1> 
   133                              <1> endstruc
     6                                  %include "fatStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous FAT driver   ;
    10                              <1> ; structures. exFAT will have it's own files at a later ;
    11                              <1> ; stage.                                                ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    15                              <1> 
    16 00000000 ??????              <1>     .jmpBoot    resb 3 
    17 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    18 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    19 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    20 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    21 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    22 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    23 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    24 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    25 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    26 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    27 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    28 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    29 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    30                              <1> 
    31 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    32 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    33 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    34 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    35 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    36 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    37                              <1> 
    38                              <1> endstruc
    39                              <1> 
    40                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    41                              <1> 
    42 00000000 ??????              <1>     .jmpBoot    resb 3
    43 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    44 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    45 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    46 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    47 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    48 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    49 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    50 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    51 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    52 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    53 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    54 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    55 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    56                              <1> 
    57 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    58 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    59 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    60 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    61 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    62 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    63 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    64                              <1> 
    65 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    66 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    67 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    68 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    69 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    70 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    71                              <1> 
    72                              <1> endstruc
    73                              <1> 
    74                              <1> struc mbr
    75 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    76 000001B8 ????????            <1>     .diskID     resb 4
    77 000001BC ????                <1>     .reserved   resb 2
    78 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    79 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    80 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    81 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    82 000001FE ????                <1>     .mbrSig     resb 2
    83                              <1> endstruc
    84                              <1> 
    85                              <1> struc mbrEntry
    86 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    87 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    88 00000004 ??                  <1>     .ptnType    resb 1
    89 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
    90 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
    91 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
    92                              <1> endstruc
    93                              <1> 
    94                              <1> struc fatDirEntry
    95                              <1> 
    96 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
    97 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
    98 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
    99 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   100 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   101 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   102 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   103 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   104 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   105 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   106 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   107 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   108                              <1> 
   109                              <1> endstruc
   110                              <1> ;Directory attribute equates
   111                              <1>     dirReadOnly     equ 01h
   112                              <1>     dirHidden       equ 02h
   113                              <1>     dirSystem       equ 04h
   114                              <1>     dirVolumeID     equ 08h
   115                              <1>     dirDirectory    equ 10h
   116                              <1>     dirArchive      equ 20h
   117                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   118                              <1> 
   119                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   120                              <1> 
   121 00000000 ??????              <1>     .jmpBoot                resb 3 
   122 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   123 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   124 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   125 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   126 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   127 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   128 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   129 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   130 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   131 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   132 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   133 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   134 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   135 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   136 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   137 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   138 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   139 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   140                              <1> 
   141                              <1> endstruc
   142                              <1> 
   143                              <1> struc FSInfo
   144                              <1> 
   145 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   146 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   147 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   148 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   149 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   150 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   151 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   152                              <1> 
   153                              <1> endstruc
     7                                  %include "dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ??                  <1>     .bBytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)x
    27 00000003 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000004 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000005 ????????            <1>     .dFAToffset              resd 1  ;Number of Sectors preceeding first FAT x
    30 00000009 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 0000000A ????                <1>     .wNumberRootDirSectors   resw 1  ;In sectors, this is 0 for FAT32 formats x
    32 0000000C ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 00000010 ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000014 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000018 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001C ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000024 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000025 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000026 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002E ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000032 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Flags: Bit 15 set = Network drive
    69                              <1> ;        Bit 14 set = Physical drive
    70                              <1> ;        Bit 13 set = JOIN'ed drive
    71                              <1> ;        Bit 12 set = SUBST'ed drive
    72                              <1> ;        Bit 7  set = Redirected, not network, drive (This is how MSCDEX worked)
    73                              <1> endstruc
    74                              <1> ;CDS equates
    75                              <1>     cdsNetDrive     equ 8000h
    76                              <1>     cdsPhysDrive    equ 4000h
    77                              <1>     cdsJoinDrive    equ 2000h
    78                              <1>     cdsSubstDrive   equ 1000h
    79                              <1>     cdsRedirDrive   equ 0080h
    80                              <1> ;------------------------------------------------------------------------;
    81                              <1> ; The SFT is a way to allow applications to open file handles to files 
    82                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    83                              <1> ; under the first header, and then a second header will be linked to the 
    84                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    85                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    86                              <1> ; using the FCBS= command. Default FCBS=5.
    87                              <1> ;
    88                              <1> ; A file handle describes the file, and the location within the file that
    89                              <1> ; we are reading. The file handle can be manipulated without the file
    90                              <1> ; being in memory, thus allowing the user to access data without needing 
    91                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    92                              <1> ; accessing devices, by treating them as files with their drivers 
    93                              <1> ; responding and translating the manipulations of the file handle itself.
    94                              <1> ; Neither the driver nor the application should see or use the SFT for
    95                              <1> ; the handle, as it is subject to change (and will change when file 
    96                              <1> ; sharing provisions are included). The DOS will make requests to the 
    97                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    98                              <1> ; track of the information in the SFT entry for that handle. 
    99                              <1> ;
   100                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   101                              <1> ; can point to the same file. It all depends on what the applications 
   102                              <1> ; want to do with the File.
   103                              <1> ;
   104                              <1> ; !!!!IMPORTANT!!!!
   105                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   106                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   107                              <1> ;
   108                              <1> ;Each SFT may look like this:
   109                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   110                              <1> ;            |                |
   111                              <1> ;       wNumFiles*sft    wNumFiles*sft
   112                              <1> ;
   113                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   114                              <1> ; System FCBs.
   115                              <1> ;
   116                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   117                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   118                              <1> ;
   119                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   120                              <1> ; DEFAULT FCBS=5, MINIMUM FCBS=5
   121                              <1> ;------------------------------------------------------------------------;
   122                              <1> struc sfth   ;System file table header
   123                              <1> ; This is the SFT header.
   124                              <1> ; This structure comes before the start of the first file in the array/table.
   125 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   126 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   127                              <1> endstruc
   128                              <1> 
   129                              <1> struc sft
   130                              <1> ;This is the file struc itself
   131 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   132 00000002 ????                <1>     .wOpenMode   resw 1    ;Bit 15 set if opened via FCB
   133 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   134 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   135 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   136 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file
   137 00000013 ????                <1>     .wTime       resw 1    ;File Time
   138 00000015 ????                <1>     .wDate       resw 1    ;File Date
   139 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   140 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset in file, in bytes
   141 0000001F ????                <1>     .wRelClust   resw 1    ;Rel cluster in file of the last cluster accessed
   142 00000021 ????????            <1>     .dDirSect    resd 1    ;Rel number of sector containing directory entry 
   143 00000025 ??                  <1>     .bNumDirEnt  resb 1    ;Number of dir entry within sector (byte offset/32)
   144 00000026 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   145 00000031 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   146 00000039 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster of last cluster accessed
   147                              <1> endstruc
   148                              <1> 
   149                              <1> ;------------------------------------------------------------------------;
   150                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   151                              <1> ; to an internal buffer, and then copying it to the specified location
   152                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   153                              <1> ; another request for the same sector from the same device is made, so 
   154                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   155                              <1> ; size, selected according to the largest detected sector size during 
   156                              <1> ; the initial loadup.
   157                              <1> ;
   158                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   159                              <1> ;
   160                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   161                              <1> ;------------------------------------------------------------------------;
   162                              <1> 
   163                              <1> struc bufferHdr
   164 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   165 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for
   166 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   167 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   168 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   169 00000013 ??                  <1>     .bufFAToff   resb  1   ;Sector offset of the backup copy of the FAT on disk
   170 00000014 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   171                              <1> endstruc
   172                              <1> ;Buffer Flag equates
   173                              <1>     fatBuffer   equ 2h  ;FAT sector in buffer
   174                              <1>     dirBuffer   equ 4h  ;Directory sector in buffer
   175                              <1>     dataBuffer  equ 8h  ;File Data sector in buffer
   176                              <1>     refBuffer   equ 10h ;Data in buffer referenced by an application
   177                              <1>     dirtyBuffer equ 20h ;Data in buffer modified by an application
   178                              <1>     remotBuffer equ 40h ;
   179                              <1> ;------------------------------------------------------------------------;
   180                              <1> ; Memory control block for each memory arena
   181                              <1> ;------------------------------------------------------------------------;
   182                              <1> struc mcb
   183 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   184 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP or 0 for free space
   185 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   186 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   187                              <1> endstruc
   188                              <1> 
   189                              <1> ;------------------------------------------------------------------------;
   190                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   191                              <1> ; following order, thus allowing for return values to be placed in the 
   192                              <1> ; registers by accessing the caller register stack frame.
   193                              <1> ;------------------------------------------------------------------------;
   194                              <1> struc callerFrame
   195 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   196 00000008 ????????????????    <1>     .rbx    resq 1    
   197 00000010 ????????????????    <1>     .rcx    resq 1
   198 00000018 ????????????????    <1>     .rdx    resq 1
   199 00000020 ????????????????    <1>     .rsi    resq 1
   200 00000028 ????????????????    <1>     .rdi    resq 1
   201 00000030 ????????????????    <1>     .rbp    resq 1
   202 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   203 00000040 ????????????????    <1>     .r9     resq 1
   204                              <1> ;Pushed by Processor when invoked via Interrupt
   205 00000048 ????????????????    <1>     .rip    resq 1
   206 00000050 ????????????????    <1>     .cs     resq 1
   207 00000058 ????????????????    <1>     .flags  resq 1
   208                              <1> endstruc
   209                              <1> 
   210                              <1> %macro pushDOS 0
   211                              <1>     push r9
   212                              <1>     push r8
   213                              <1>     push rbp
   214                              <1>     push rdi
   215                              <1>     push rsi
   216                              <1>     push rdx
   217                              <1>     push rcx
   218                              <1>     push rbx
   219                              <1>     push rax
   220                              <1> %endmacro
   221                              <1> 
   222                              <1> %macro popDOS 0
   223                              <1>     pop rax
   224                              <1>     pop rbx
   225                              <1>     pop rcx
   226                              <1>     pop rdx
   227                              <1>     pop rsi
   228                              <1>     pop rdi
   229                              <1>     pop rbp
   230                              <1>     pop r8
   231                              <1>     pop r9
   232                              <1> %endmacro
   233                              <1> 
   234                              <1> struc psp
   235 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h
   236 00000002 ????????????????    <1>     .startSeg   resq 1  ;Pointer to the start of the PSP
   237 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   238 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   239 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   240 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   241 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   242 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   243 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   244 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size
   245 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh
   246 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain
   247 0000005B ????????????????    <1>     .xtraHdlPtr resq 1  ;Pointer to the extra handle array if needed
   248 00000063 ????????????????    <1>     .fcbPtr1    resq 1  ;Pointer to the first OS allocated FCB
   249 0000006B <res 15h>           <1>     .reserved   resb 21
   250 00000080 ??                  <1>     .charCount  resb 1  ;Number of characters in command tail
   251 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   252                              <1> endstruc
   253                              <1> 
   254                              <1> struc mcb
   255 00000000 ??                  <1>     .mzbyte     resb 1  ;M=In use, Z=Free
   256 00000001 ????????????????    <1>     .processPtr resq 1  ;Points to the start of the process PSP
   257 00000009 ????????            <1>     .paragraphs resd 1  ;Gives the number of paras allocated to this process
   258 0000000D ??????              <1>     .reserved   resb 3
   259                              <1>     .program:
   260                              <1> endstruc
   261                              <1> 
   262                              <1> struc clkStruc
   263 00000000 ????                <1>     .dateWord   resw 1
   264 00000002 ??                  <1>     .minutes    resb 1
   265 00000003 ??                  <1>     .hours      resb 1
   266 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   267 00000005 ??                  <1>     .seconds    resb 1
   268                              <1> endstruc
     8                                  Segment .text align=1   ;Init code
     9                                  %include "sysInit.asm"
    10                              <1> ; We arrive here with the following values in the registers.
    11                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    12                              <1> ; dx  = Int 33h boot device number
    13                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    14                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    15 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    16 00000002 909090909090909090- <1>     db (100h-2) dup (90h)   ;Duplicate NOPs for the PSP
    16 0000000B 909090909090909090- <1>
    16 00000014 909090909090909090- <1>
    16 0000001D 909090909090909090- <1>
    16 00000026 909090909090909090- <1>
    16 0000002F 909090909090909090- <1>
    16 00000038 909090909090909090- <1>
    16 00000041 909090909090909090- <1>
    16 0000004A 909090909090909090- <1>
    16 00000053 909090909090909090- <1>
    16 0000005C 909090909090909090- <1>
    16 00000065 909090909090909090- <1>
    16 0000006E 909090909090909090- <1>
    16 00000077 909090909090909090- <1>
    16 00000080 909090909090909090- <1>
    16 00000089 909090909090909090- <1>
    16 00000092 909090909090909090- <1>
    16 0000009B 909090909090909090- <1>
    16 000000A4 909090909090909090- <1>
    16 000000AD 909090909090909090- <1>
    16 000000B6 909090909090909090- <1>
    16 000000BF 909090909090909090- <1>
    16 000000C8 909090909090909090- <1>
    16 000000D1 909090909090909090- <1>
    16 000000DA 909090909090909090- <1>
    16 000000E3 909090909090909090- <1>
    16 000000EC 909090909090909090- <1>
    16 000000F5 909090909090909090- <1>
    16 000000FE 9090                <1>
    17                              <1> ;First make space for the MCB
    18 00000100 52                  <1>     push rdx    ;Save dl on stack briefly
    19 00000101 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    20 00000106 0F32                <1>     rdmsr
    21 00000108 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    22 0000010A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    23 0000010E 89C7                <1>     mov edi, eax        ;Get the low dword in
    24 00000110 4881C710000000      <1>     add rdi, mcb_size   ;Make space for the MCB
    25 00000117 89F8                <1>     mov eax, edi
    26 00000119 4889FA              <1>     mov rdx, rdi
    27 0000011C 48C1EA20            <1>     shr rdx, 20h
    28 00000120 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    29 00000122 5A                  <1>     pop rdx
    30                              <1> ;------------------------------------------------;
    31                              <1> ;           Sanitise the data area               ;
    32                              <1> ;------------------------------------------------;
    33 00000123 B9[D4120000]        <1>     mov ecx, dSegLen
    34 00000128 30C0                <1>     xor al, al
    35 0000012A 57                  <1>     push rdi    ;Temp save rdi on the stack
    36 0000012B F3AA                <1>     rep stosb
    37 0000012D 5F                  <1>     pop rdi
    38                              <1> 
    39                              <1> ;------------------------------------------------;
    40                              <1> ;          Start saving Basic DOS data           ;
    41                              <1> ;------------------------------------------------;
    42 0000012E 64881425[08000000]  <1>     mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    43 00000136 488D15C3FEFFFF      <1>     lea rdx, tempPSP    ;Get the address of the tempPSP
    44 0000013D 6448891425-         <1>     mov qword fs:[currentPSP], rdx
    44 00000142 [D7000000]          <1>
    45                              <1> ;Copy DOS to its final resting place
    46 00000146 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    46 0000014B [00000000]          <1>
    47 0000014F 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rdx 
    48 00000152 4881C7[D4120000]    <1>     add rdi, dSegLen ;Move destination past end of data area
    49 00000159 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    50 00000160 B900100000          <1>     mov ecx, 1000h
    51 00000165 F348A5              <1>     rep movsq
    52                              <1> 
    53 00000168 CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    54 0000016A 6444880425-         <1>     mov byte fs:[numRemMSD], r8b    ;Save number of physical int 33h devs
    54 0000016F [09000000]          <1>
    55 00000173 64C60425[99000000]- <1>     mov byte fs:[lastdrvNum], 5     ;Last drive is by default 5
    55 0000017B 05                  <1>
    56 0000017C 64C60425[0A000000]- <1>     mov byte fs:[numLRemDrives], 0     ;Number of logical drives
    56 00000184 00                  <1>
    57                              <1> 
    58                              <1> ;------------------------------------------------;
    59                              <1> ;          Find largest sector size              ;
    60                              <1> ;------------------------------------------------;
    61                              <1> largestSectorSearch:
    62 00000185 30D2                <1>     xor dl, dl
    63 00000187 31FF                <1>     xor edi, edi    ;Use this as the counter for the largest sector size
    64                              <1> .lss:
    65 00000189 B488                <1>     mov ah, 88h
    66 0000018B CD33                <1>     int 33h
    67 0000018D 39C7                <1>     cmp edi, eax
    68 0000018F 0F42F8              <1>     cmovb edi, eax  ;Only replace ebp if eax is greater
    69 00000192 FEC2                <1>     inc dl
    70 00000194 4438C2              <1>     cmp dl, r8b
    71 00000197 75F0                <1>     jne .lss
    72 00000199 6466893C25-         <1>     mov word fs:[maxBytesSec], di
    72 0000019E [87000000]          <1>
    73                              <1> 
    74                              <1> ;------------------------------------------------;
    75                              <1> ;          Driver Adjustments and inits          ;
    76                              <1> ;------------------------------------------------;
    77                              <1> ;Modify the pointers in nData before putting them in the data area
    78 000001A2 48012D98030000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
    79 000001A9 48012D9B030000      <1>     add qword [nData + drvHdr.strPtr], rbp
    80 000001B0 48012D9C030000      <1>     add qword [nData + drvHdr.intPtr], rbp
    81                              <1> ;Copy the Null driver to its location in Sysvars
    82 000001B7 B922000000          <1>     mov ecx, drvHdr_size
    83 000001BC 488D357E030000      <1>     lea rsi, qword [nData]
    84 000001C3 488DBD[A5000000]    <1>     lea rdi, qword [rbp + nulDevHdr]
    85 000001CA F3A4                <1>     rep movsb   
    86                              <1> 
    87                              <1> ;Adjust the addresses in the other driver headers 
    88 000001CC 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
    88 000001CE [020B000000000000]  <1>
    89 000001D6 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
    90 000001DB 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
    91                              <1> adjDrivers:
    92 000001DF E888020000          <1>     call adjustDrvHdr
    93 000001E4 E2F9                <1>     loop adjDrivers
    94                              <1> 
    95                              <1> ;Open NUL
    96 000001E6 488D9D[0B000000]    <1>     lea rbx, qword [rbp + charReqHdr]
    97 000001ED C6030D              <1>     mov byte [rbx + openReqPkt.hdrlen], openReqPkt_size
    98 000001F0 C6430300            <1>     mov byte [rbx + openReqPkt.status], 0
    99 000001F4 FF95[AF000000]      <1>     call qword [rbp + nulDevHdr + drvHdr.strPtr]
   100 000001FA FF95[B7000000]      <1>     call qword [rbp + nulDevHdr + drvHdr.intPtr]
   101                              <1> ;Open CON
   102                              <1> conInit:    ;Rather than keeping this resident... do it here
   103                              <1> .ci0:
   104 00000200 B401                <1>     mov ah, 01      ;Get buffer status
   105 00000202 CD36                <1>     int 36h
   106 00000204 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   107 00000206 30E4                <1>     xor ah, ah
   108 00000208 CD36                <1>     int 36h ;Read key to flush from buffer
   109 0000020A EBF4                <1>     jmp short .ci0
   110                              <1> .ci1:
   111 0000020C B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   112 00000211 CD30                <1>     int 30h
   113 00000213 B402                <1>     mov ah, 02h
   114 00000215 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   115 00000217 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   116 00000219 CD30                <1>     int 30h
   117 0000021B B707                <1>     mov bh, 07h     ;Grey/Black attribs
   118 0000021D B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   119 00000222 CD30                <1>     int 30h
   120                              <1> 
   121                              <1>     ;Save ptr to ConHdr in Sysvars
   122 00000224 488D85[020B0000]    <1>     lea rax, qword [rbp + conHdr]
   123 0000022B 6448890425-         <1>     mov qword fs:[conPtr], rax
   123 00000230 [7F000000]          <1>
   124                              <1> 
   125                              <1>     ;Save ptr to ClkHdr in Sysvars
   126 00000234 488D85[680B0000]    <1>     lea rax, qword [rbp + clkHdr]
   127 0000023B 6448890425-         <1>     mov qword fs:[clockPtr], rax
   127 00000240 [77000000]          <1>
   128                              <1> 
   129                              <1> ;------------------------------------------------;
   130                              <1> ;          Kernel inits and adjustments          ;
   131                              <1> ;------------------------------------------------;
   132                              <1> ;Adjust Int 41h address table
   133                              <1> adjInt41h:
   134 00000244 B96A000000          <1>     mov ecx, dispatchTableL/8 ;Number of elements in table
   135 00000249 48BB-               <1>     mov rbx, functionDispatch.dispatchTable ;Get EA of table
   135 0000024B [E704000000000000]  <1>
   136 00000253 488D5C1D00          <1>     lea rbx, qword [rbp+rbx]    ;Point to the start of the relocated table 
   137                              <1> .ai41h:
   138 00000258 48012B              <1>     add qword [rbx], rbp    ;Add base address value to entry in reloc table
   139 0000025B 4881C308000000      <1>     add rbx, 8              ;Each entry is size 8
   140 00000262 FFC9                <1>     dec ecx
   141 00000264 75F2                <1>     jnz .ai41h  ;Keep looping until all entries have been adjusted
   142                              <1> 
   143                              <1> ;Adjust Interrupt Entries Int 40h-49h
   144                              <1> adjInts:
   145 00000266 B340                <1>     mov bl, 40h
   146 00000268 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   147 0000026D CD35                <1>     int 35h
   148 0000026F B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   149 00000274 488D3D76020000      <1>     lea rdi, intData
   150 0000027B 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   151                              <1> .ai0:
   152 0000027D B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   153 00000282 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   154 00000285 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   155 00000288 CD35                <1>     int 35h
   156 0000028A 4881C708000000      <1>     add rdi, 8
   157 00000291 FFC1                <1>     inc ecx
   158 00000293 81F94A000000        <1>     cmp ecx, 4Ah
   159 00000299 75E2                <1>     jne .ai0
   160                              <1> 
   161                              <1> ;------------------------------------------------;
   162                              <1> ;         Init msd driver, create DPB            ;
   163                              <1> ;------------------------------------------------;
   164                              <1> storageInits:
   165                              <1> ;First save dpb and cds pointer in sysvars
   166 0000029B 488D9D[00000000]    <1>     lea rbx, qword [rbp + firstDPB]
   167 000002A2 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   167 000002A7 [67000000]          <1>
   168 000002AB 488D9D[49020000]    <1>     lea rbx, qword [rbp + initCDS]
   169 000002B2 6448891C25-         <1>     mov qword fs:[cdsHeadPtr], rbx
   169 000002B7 [91000000]          <1>
   170                              <1> 
   171                              <1> ;Open Mass Storage
   172 000002BB 488D9D[35000000]    <1>     lea rbx, qword [rbp + diskReqHdr]
   173 000002C2 C6031F              <1>     mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   174 000002C5 C6430200            <1>     mov byte [rbx + initReqPkt.cmdcde], 00h     ;MSD init
   175 000002C9 66C743030000        <1>     mov word [rbx + initReqPkt.status], 0       ;Zero status word
   176 000002CF 648A0425[0A000000]  <1>     mov al, byte fs:[numLRemDrives]
   177 000002D7 88431E              <1>     mov byte [rbx + initReqPkt.drvnum], al      ;First unit is drive A
   178 000002DA FF95[940B0000]      <1>     call qword [rbp + msdHdr + drvHdr.strPtr]
   179 000002E0 FF95[9C0B0000]      <1>     call qword [rbp + msdHdr + drvHdr.intPtr]
   180                              <1>     ;Check if it returned OK first!
   181 000002E6 66F743030080        <1>     test word [rbx + initReqPkt.status], 8000h  ;Test the error bit
   182 000002EC 0F858D010000        <1>     jnz errorInit   ;If the bit is set, halt execution
   183 000002F2 8A430D              <1>     mov al, byte [rbx + initReqPkt.numunt]
   184 000002F5 64880425[0A000000]  <1>     mov byte fs:[numLRemDrives], al
   185 000002FD 8885[A40B0000]      <1>     mov byte [rbp + msdHdr + drvHdr.drvNam], al ;Save # of units in name field
   186                              <1> 
   187 00000303 488B5316            <1>     mov rdx, qword [rbx + initReqPkt.optptr]    ;Get ptr to bpbPtrTbl in rdx
   188 00000307 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   189 0000030A 30C9                <1>     xor cl, cl  ;Clear counter
   190 0000030C 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   190 00000311 [67000000]          <1>
   191                              <1> .si0:   
   192 00000315 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   193 00000318 B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   194 0000031A CD41                <1>     int 41h
   195                              <1> ;Add other data to DPB
   196 0000031C 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   197 0000031F 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   198 00000322 50                  <1>     push rax
   199 00000323 488D87[8A0B0000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   200 0000032A 4889451C            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   201 0000032E 58                  <1>     pop rax
   202 0000032F FEC1                <1>     inc cl
   203 00000331 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   204 00000333 7416                <1>     je .si1
   205 00000335 50                  <1>     push rax
   206 00000336 488D4536            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   207 0000033A 48894526            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   208 0000033E 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   209 00000341 58                  <1>     pop rax
   210 00000342 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   211 00000349 EBCA                <1>     jmp short .si0
   212                              <1> .si1:
   213                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   214 0000034B 48C74526FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   215 00000353 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   216                              <1> 
   217                              <1> ;------------------------------------------------;
   218                              <1> ;                   MCB inits                    ;
   219                              <1> ;------------------------------------------------;
   220                              <1> 
   221                              <1> ;Build the DOS segment's MCB header
   222 00000356 4889EB              <1>     mov rbx, rbp
   223 00000359 4881EB10000000      <1>     sub rbx, mcb_size   ;Point rbx to the start of the MCB
   224 00000360 C6034D              <1>     mov byte [rbx + mcb.marker], "M"
   225 00000363 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get the current PSP
   225 00000368 [D7000000]          <1>
   226 0000036C 48894301            <1>     mov qword [rbx + mcb.owner], rax
   227 00000370 C74309FFFFFFFF      <1>     mov dword [rbx + mcb.blockSize], -1 ;Let size be max for now, adjust later
   228                              <1> 
   229 00000377 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save rbx in data area
   229 0000037C [5F000000]          <1>
   230                              <1> 
   231                              <1> ;------------------------------------------------;
   232                              <1> ;          Default File Handle Creation          ;
   233                              <1> ;------------------------------------------------;
   234                              <1> 
   235                              <1> ;Fill in the default file table entries
   236                              <1>     ;lea rbx, qword [rbp + firstSftHeader]
   237                              <1>     ;mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   238                              <1>     ;mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   239                              <1>     ;mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   240                              <1> 
   241                              <1>     ;lea rbx, qword [rbp + firstSft]
   242                              <1>     ;mov word [rbx + sft.wNumHandles], 0 ;Nothing pointing to this file yet
   243                              <1>     ;mov word [rbx + sft.w]
   244                              <1> 
   245                              <1> ;------------------------------------------------;
   246                              <1> ;               Load CONFIG.SYS                  ;
   247                              <1> ;------------------------------------------------;
   248                              <1> ;------------------------------------------------;
   249                              <1> ;              Process CONFIG.SYS                ;
   250                              <1> ;------------------------------------------------;
   251                              <1> ;------------------------------------------------;
   252                              <1> ;                 Create a CDS                   ;
   253                              <1> ;------------------------------------------------;
   254                              <1> ;------------------------------------------------;
   255                              <1> ;           Load Command interpreter             ;
   256                              <1> ;------------------------------------------------;
   257                              <1> 
   258                              <1> ;Test Error Case
   259                              <1>     ;mov ah, 00110000b
   260                              <1>     ;mov al, 00h
   261                              <1>     ;mov edi, 0Ch
   262                              <1>     ;int 44h
   263                              <1> 
   264 00000380 488D1515010000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   265 00000387 B409                <1>     mov ah, 09h
   266 00000389 CD41                <1>     int 41h
   267                              <1> 
   268 0000038B B801C50000          <1>     mov eax, 0C501h ;Connect debugger
   269 00000390 CD35                <1>     int 35h
   270                              <1> l1:
   271 00000392 B401                <1>     mov ah, 01h  ;Write with echo
   272 00000394 CD41                <1>     int 41h
   273 00000396 3C00                <1>     cmp al, 0
   274 00000398 7402                <1>     je l2
   275 0000039A EBF6                <1>     jmp short l1
   276                              <1> l2:
   277 0000039C B407                <1>     mov ah, 07h
   278 0000039E CD41                <1>     int 41h
   279 000003A0 3C42                <1>     cmp al, 42h
   280 000003A2 75EE                <1>     jne l1
   281                              <1> l3:
   282 000003A4 6466C70425-         <1>     mov word fs:[CLOCKrecrd + clkStruc.dateWord], 0
   282 000003A9 [18010000]0000      <1>
   283 000003AF 488D9D[0B000000]    <1>     lea rbx, qword [rbp + charReqHdr] ;Get the address of this request block
   284 000003B6 488D85[18010000]    <1>     lea rax, qword [rbp + CLOCKrecrd]
   285 000003BD C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   286 000003C0 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read the time
   287 000003C4 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   288 000003CA 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   289 000003CE C7431606000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 06
   290 000003D5 FF95[720B0000]      <1>     call qword [rbp + clkHdr + drvHdr.strPtr]
   291 000003DB FF95[7A0B0000]      <1>     call qword [rbp + clkHdr + drvHdr.intPtr]
   292                              <1> 
   293 000003E1 B403                <1>     mov ah, 03h
   294 000003E3 30FF                <1>     xor bh, bh
   295 000003E5 CD30                <1>     int 30h
   296 000003E7 30D2                <1>     xor dl, dl  ;0 column
   297 000003E9 B402                <1>     mov ah, 02h
   298 000003EB CD30                <1>     int 30h
   299                              <1> 
   300 000003ED 488D9D[18010000]    <1>     lea rbx, qword [rbp + CLOCKrecrd]
   301 000003F4 0FB64303            <1>     movzx eax, byte [rbx + clkStruc.hours]
   302 000003F8 E832000000          <1>     call .clkHexToBCD
   303 000003FD B40E                <1>     mov ah, 0Eh
   304 000003FF B03A                <1>     mov al, ":"
   305 00000401 CD30                <1>     int 30h
   306 00000403 0FB64302            <1>     movzx eax, byte [rbx + clkStruc.minutes]
   307 00000407 E823000000          <1>     call .clkHexToBCD
   308 0000040C B40E                <1>     mov ah, 0Eh
   309 0000040E B03A                <1>     mov al, ":"
   310 00000410 CD30                <1>     int 30h
   311 00000412 0FB64305            <1>     movzx eax, byte [rbx + clkStruc.seconds]
   312 00000416 E814000000          <1>     call .clkHexToBCD
   313 0000041B B40E                <1>     mov ah, 0Eh
   314 0000041D B02E                <1>     mov al, "."
   315 0000041F CD30                <1>     int 30h
   316 00000421 0FB64304            <1>     movzx eax, byte [rbx + clkStruc.hseconds]
   317 00000425 E805000000          <1>     call .clkHexToBCD
   318 0000042A E963FFFFFF          <1>     jmp l1
   319                              <1> .clkHexToBCD:
   320                              <1> ;Converts a Hex byte into two BCD digits
   321                              <1> ;Takes input in each nybble of al
   322 0000042F 53                  <1>     push rbx
   323 00000430 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
   323 00000439 00                  <1>
   324 0000043A 31D2                <1>     xor edx, edx
   325 0000043C 48F7F3              <1>     div rbx
   326 0000043F 80C230              <1>     add dl, '0'
   327 00000442 80FA39              <1>     cmp dl, '9'
   328 00000445 7603                <1>     jbe .chtb0
   329 00000447 80C207              <1>     add dl, 'A'-'0'-10
   330                              <1> .chtb0:
   331 0000044A 88D1                <1>     mov cl, dl    ;Save remainder byte
   332 0000044C 31D2                <1>     xor edx, edx
   333 0000044E 48F7F3              <1>     div rbx
   334 00000451 80C230              <1>     add dl, '0'
   335 00000454 80FA39              <1>     cmp dl, '9'
   336 00000457 7603                <1>     jbe .chtb1
   337 00000459 80C207              <1>     add dl, 'A'-'0'-10
   338                              <1> .chtb1:
   339 0000045C 88D5                <1>     mov ch, dl    ;Save remainder byte
   340                              <1> 
   341 0000045E 88E8                <1>     mov al, ch    ;Get most sig digit into al
   342 00000460 B40E                <1>     mov ah, 0Eh
   343 00000462 CD30                <1>     int 30h
   344 00000464 88C8                <1>     mov al, cl    ;Get least sig digit into al
   345 00000466 B40E                <1>     mov ah, 0Eh
   346 00000468 CD30                <1>     int 30h
   347 0000046A 5B                  <1>     pop rbx
   348 0000046B C3                  <1>     ret
   349                              <1> ;--------------------------------
   350                              <1> ;       PROCS FOR SYSINIT       :
   351                              <1> ;--------------------------------
   352                              <1> adjustDrvHdr:
   353                              <1> ;Input: rsi = Effective address of driver in DOS segment
   354                              <1> ;       rbp = Ptr to the start of the DOS segment
   355                              <1> ;Output: rsi = EA of next header in DOS segment
   356 0000046C 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   357 0000046F 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   358 00000473 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   359 00000477 4881C622000000      <1>     add rsi, drvHdr_size
   360 0000047E C3                  <1>     ret
   361                              <1> errorInit:
   362                              <1> ;If a critical error occurs during sysinit, fail through here
   363 0000047F 488D152C000000      <1>     lea rdx, hltmsg
   364 00000486 B409                <1>     mov ah, 09h
   365 00000488 CD41                <1>     int 41h
   366 0000048A FA                  <1>     cli ;Clear interrupts
   367 0000048B B0FF                <1>     mov al, -1
   368 0000048D 66BAA100            <1>     mov dx, 0A1h    ;PIC2 data
   369 00000491 EE                  <1>     out dx, al      ;Mask all lines
   370 00000492 66BA2100            <1>     mov dx, 21h     ;PIC1 data
   371 00000496 EE                  <1>     out dx, al      ;Mask all lines
   372                              <1> .ei0:
   373 00000497 F4                  <1>     hlt
   374 00000498 F390                <1>     pause
   375 0000049A EBFB                <1>     jmp short .ei0
   376                              <1> 
   377                              <1> ;--------------------------------
   378                              <1> ;       DATA FOR SYSINIT        :
   379                              <1> ;--------------------------------
   380 0000049C 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
   380 000004A5 5343502F444F532E2E- <1>
   380 000004AE 2E0A0D24            <1>
   381 000004B2 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0Ah,0Dh,"$"
   381 000004BB 7469616C6973696E67- <1>
   381 000004C4 20534350444F532E53- <1>
   381 000004CD 59532E205379737465- <1>
   381 000004D6 6D2068616C74696E67- <1>
   381 000004DF 2E2E2E0A0D24        <1>
   382 000004E5 434F4E00            <1> conName db "CON",0
   383 000004E9 41555800            <1> auxName db "AUX",0
   384 000004ED 50524E00            <1> prnName db "PRN",0
   385                              <1> intData:
   386 000004F1 [AF00000000000000]  <1>     dq terminateProcess ;Int 40h
   387 000004F9 [AF00000000000000]  <1>     dq functionDispatch ;Int 41h
   388 00000501 [3708000000000000]  <1>     dq terminateHandler ;Int 42h
   389 00000509 [3708000000000000]  <1>     dq ctrlCHandler     ;Int 43h
   390 00000511 [3708000000000000]  <1>     dq critErrorHandler ;Int 44h
   391 00000519 [CA0A000000000000]  <1>     dq absDiskRead      ;Int 45h
   392 00000521 [DF0A000000000000]  <1>     dq absDiskWrite     ;Int 46h
   393 00000529 [F40A000000000000]  <1>     dq terminateResident    ;Int 47h
   394 00000531 [F40A000000000000]  <1>     dq inDosHandler     ;Int 48h
   395 00000539 [F60A000000000000]  <1>     dq fastOutput       ;Int 49h
   396                              <1> nData:
   397 00000541 [020B000000000000]  <1>     dq conHdr
   398 00000549 0480                <1>     dw 08004h
   399 0000054B [AA0C000000000000]  <1>     dq nulStrat
   400 00000553 [B00C000000000000]  <1>     dq nulIntr
   401 0000055B 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
    10                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    11                                  %include "dosSeg.asm"
    12                              <1> ;This file contains the main DOS data segment
    13                              <1> 
    14 00000000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    15 00000008 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    16 00000009 ??                  <1>     numRemMSD   resb 1    ;Number of physical removable MSDs in system x
    17 0000000A ??                  <1>     numLRemDrives  resb 1 ;Number of logical removable drives in system x
    18                              <1>     ;if numRemMSD = 1 then numLRemDrives = 2 and we have a single drive system
    19 0000000B <res 2Ah>           <1>     charReqHdr  resb ioReqPkt_size  ;Character IO Request header x
    20 00000035 <res 2Ah>           <1>     diskReqHdr  resb ioReqPkt_size  ;Disk Action Request header x
    21                              <1>     ;The device driver header with space for the largest possible packet
    22 0000005F ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    23                              <1> sysVarsPtr:
    24 00000067 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    25 0000006F ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    26 00000077 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    27                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    28 0000007F ????????????????    <1>     conPtr      resq 1    ;Pointer to the current active CON device header  x
    29                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    30 00000087 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    31 00000089 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain
    32 00000091 ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    33 00000099 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    34 0000009A ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    35 000000A2 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    36 000000A4 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    37 000000A5 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    38                              <1> 
    39                              <1> ;Start of Swappable Data Area, this bit can remain static
    40 000000C7 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h
    41 000000C8 ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving
    42 000000C9 ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh
    43 000000CA ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    44 000000CB ????                <1>     errorExt    resw 1  ;Extended Error Code
    45 000000CD ??                  <1>     errorAction resb 1  ;Suggested action for error  
    46 000000CE ??                  <1>     errorClass  resb 1  ;Error Class
    47                              <1> 
    48 000000CF ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA
    49 000000D7 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP
    50 000000DF ????????????????    <1>     rdiErrorPtr resq 1  ;Saves RDI value of last error (could make this di)
    51 000000E7 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
    52 000000EF ????                <1>     lastRetCode resw 1  ;Last return code returned by Int 41h/4Ch
    53 000000F1 ??                  <1>     currentDrv  resb 1  ;Default, last accessed drive
    54 000000F2 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls
    55 000000F3 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify
    56                              <1> ;SDA, needs to be replaced between processes
    57 000000F4 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
    58                              <1> 
    59                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    60 000000FC ??                  <1>     singleDrv   resb 1  
    61                              <1> ;This is done to allow for DOS to give the user a change to swap devices
    62                              <1> 
    63 000000FD ??                  <1>     Int44RetVal resb 1  ;Saves a copy of the Int 44 return value
    64 000000FE ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
    65 000000FF ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
    66 00000100 ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
    67 00000108 ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
    68 00000110 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
    69                              <1> ;Time stuff
    70 00000118 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
    71 0000011E ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
    72 0000011F ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
    73 00000120 ??                  <1>     years       resb 1  ;00h - FFh (00 = 1980 - 128 = 2107)
    74 00000121 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
    75 00000123 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
    76                              <1> 
    77                              <1> ;Stacks
    78 00000124 <res 528h>          <1>     critStack   resq 165
    79 0000064C ????????????????    <1>     critStakTop resq 1
    80 00000654 <res 638h>          <1>     IOStack     resq 199
    81 00000C8C ????????????????    <1>     IOStakTop   resq 1
    82 00000C94 <res 638h>          <1>     DiskStack   resq 199
    83 000012CC ????????????????    <1>     DiskStakTop resq 1
    84                              <1>     dSegLen     equ     $
    12                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    13                                  %include "dosKernel.asm"
    14                              <1> 
    15                              <1> ;-----------------------------------:
    16                              <1> ;           Static Data             :
    17                              <1> ;-----------------------------------:
    18 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    19 00000001 01                  <1> dosMinor    db 01h      ;.01
    20                              <1> ;-----------------------------------:
    21                              <1> ;       Misc System routines        :
    22                              <1> ;-----------------------------------:
    23                              <1> criticalDOSError:
    24                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    25                              <1> ; to the critical error handler.
    26                              <1> ; Called with ax, di and rsi set as required by Int 44h (caller decides)
    27                              <1> ; Return response from int 44h in al
    28 00000002 488925(F4000000)    <1>     mov qword [xInt44hRSP], rsp
    29 00000009 488B25(08010000)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
    30 00000010 FA                  <1>     cli ;Disable Interrupts
    31 00000011 CD44                <1>     int 44h ;Call critical error handler
    32 00000013 FB                  <1>     sti ;Reenable Interrupts
    33 00000014 488B25(F4000000)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
    34 0000001B C3                  <1>     ret
    35                              <1> findLRUBuffer: 
    36                              <1> ;Finds least recently used buffer, links it and returns ptr to it in rbx
    37                              <1> ;Input: Nothing
    38                              <1> ;Output: rbx = Pointer to the buffer to use
    39 0000001C 52                  <1>     push rdx
    40 0000001D 488B1D(89000000)    <1>     mov rbx, qword [bufHeadPtr]
    41 00000024 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
    42 0000002B 7502                <1>     jne .flb1
    43 0000002D 5A                  <1>     pop rdx
    44 0000002E C3                  <1>     ret
    45                              <1> .flb1:
    46 0000002F 4889DA              <1>     mov rdx, rbx    ;Save a ptr to the previous buffer header
    47 00000032 488B1A              <1>     mov rbx, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
    48 00000035 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
    49 0000003C 75F1                <1>     jne .flb1   ;If not LRU, keep walking, else process
    50 0000003E 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
    51 00000045 488B15(89000000)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
    52 0000004C 48891D(89000000)    <1>     mov qword [bufHeadPtr], rbx    ;Sysvars to point to new buffer
    53 00000053 488913              <1>     mov qword [rbx + bufferHdr.nextBufPtr], rdx
    54 00000056 5A                  <1>     pop rdx
    55 00000057 C3                  <1>     ret
    56                              <1> 
    57                              <1> findDPB:
    58                              <1> ;Finds the DPB for a given drive
    59                              <1> ;Input:  dl = Drive number (0=A, 1=B etc...)
    60                              <1> ;Output: al = 00, rbx = Pointer to the DPB
    61                              <1> ;        al = -1, Failed, no DPB for device, rbx destroyed
    62 00000058 488B1D(67000000)    <1>     mov rbx, qword [dpbHeadPtr]
    63                              <1> .fd1:
    64 0000005F 30C0                <1>     xor al, al
    65 00000061 3813                <1>     cmp byte [rbx + dpb.bDriveNumber], dl
    66 00000063 740F                <1>     je .fd2
    67 00000065 488B5B26            <1>     mov rbx, qword [rbx + dpb.qNextDPBPtr]
    68 00000069 B0FF                <1>     mov al, -1
    69 0000006B 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If rbx followed last item in list, no DPB exists for dl
    70 00000072 75EB                <1>     jne .fd1
    71                              <1> .fd2:
    72 00000074 C3                  <1>     ret
    73                              <1> ;-----------------------------------:
    74                              <1> ;       File System routines        :
    75                              <1> ;-----------------------------------:
    76                              <1> name2Clust:
    77                              <1> ;Converts a file name to a first cluster number
    78                              <1> clust2FATEntry:
    79                              <1> ;Converts a cluster number to a FAT entry
    80                              <1> ;Entry:  rsi points to the DPB for the transacting device
    81                              <1> ;        eax = Cluster number to look for
    82                              <1> ;Exit: eax = Sector on disk of FAT, edx = 1.5Word/Word/DWord in sector of entry
    83 00000075 53                  <1>     push rbx
    84 00000076 51                  <1>     push rcx
    85 00000077 8B5E10              <1>     mov ebx, dword [rsi + dpb.dClusterCount]
    86 0000007A 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    87 00000080 7314                <1>     jae .fat32
    88 00000082 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    89 00000088 7204                <1>     jb .fat12
    90                              <1> ;FAT16
    91 0000008A D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    92 0000008C EB0B                <1>     jmp short .common
    93                              <1> .fat12:
    94 0000008E 89C1                <1>     mov ecx, eax    ;ecx = eax
    95 00000090 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    96 00000092 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    97 00000094 EB03                <1>     jmp short .common
    98                              <1> .fat32:
    99 00000096 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
   100                              <1> .common:
   101                              <1> ;eax has the FAToffset
   102 00000099 8A4E02              <1>     mov cl, byte [rsi + dpb.bBytesPerSectorShift]
   103 0000009C BA01000000          <1>     mov edx, 1
   104 000000A1 D3E2                <1>     shl edx, cl    ;Turn edx to number of bytes per sector
   105 000000A3 89D1                <1>     mov ecx, edx
   106 000000A5 31D2                <1>     xor edx, edx    ;edx = 0
   107 000000A7 F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
   108 000000A9 034605              <1>     add eax, dword [rsi + dpb.dFAToffset]   ;Add the offset to the first FAT
   109 000000AC 59                  <1>     pop rcx
   110 000000AD 5B                  <1>     pop rbx
   111 000000AE C3                  <1>     ret
   112                              <1> 
   113                              <1> ;-----------------------------------:
   114                              <1> ;        Interrupt routines         :
   115                              <1> ;-----------------------------------:
   116                              <1> terminateProcess:   ;Int 40h
   117                              <1> 
   118                              <1> functionDispatch:   ;Int 41h Main function dispatcher
   119                              <1> ;ah = Function number, all other registers have various meanings
   120 000000AF FA                  <1>     cli ;Halt external interrupts
   121 000000B0 FC                  <1>     cld ;Ensure all string ops occur in the right direction
   122 000000B1 80FC6A              <1>     cmp ah, dispatchTableL/8    ;Number of functions
   123 000000B4 0F871D010000        <1>     ja .fdExitBad
   124                              <1>     ;Cherry pick functions
   125 000000BA 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
   126 000000BD 722C                <1>     jb .fsbegin   ;If below skip these checks
   127 000000BF 0F84B9020000        <1>     je .ctrlBreakCheck
   128 000000C5 80FC64              <1>     cmp ah, 64h
   129 000000C8 0F8418040000        <1>     je .setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
   130 000000CE 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
   131 000000D0 80FC51              <1>     cmp ah, 51h
   132 000000D3 0F84E8020000        <1>     je .getCurrProcessID    ;This and below are exactly the same
   133 000000D9 80FC62              <1>     cmp ah, 62h
   134 000000DC 0F84F1030000        <1>     je .getPSPaddr          ;Calls the above function
   135 000000E2 80FC50              <1>     cmp ah, 50h
   136 000000E5 0F84CE020000        <1>     je .setCurrProcessID
   137                              <1> .fsbegin:
   138                              <1>     pushDOS ;Push the usual prologue registers
   211 000000EB 4151                <2>  push r9
   212 000000ED 4150                <2>  push r8
   213 000000EF 55                  <2>  push rbp
   214 000000F0 57                  <2>  push rdi
   215 000000F1 56                  <2>  push rsi
   216 000000F2 52                  <2>  push rdx
   217 000000F3 51                  <2>  push rcx
   218 000000F4 53                  <2>  push rbx
   219 000000F5 50                  <2>  push rax
   139 000000F6 488B05(08010000)    <1>     mov rax, qword [oldRSP]
   140 000000FD 488905(00010000)    <1>     mov qword [oldoldRSP], rax
   141 00000104 FE05(C8000000)      <1>     inc byte [inDOS]    ;Increment in DOS flag
   142 0000010A 488925(08010000)    <1>     mov qword [oldRSP], rsp
   143                              <1> ;Here, we want to save oldRSP in the callers PSP
   144 00000111 803D(C8000000)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
   145 00000118 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
   146 0000011A 488B05(D7000000)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
   147 00000121 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
   148                              <1> .fsb1:
   149 00000125 58                  <1>     pop rax     ;Get old rax back
   150 00000126 50                  <1>     push rax    ;and push it back onto the stack
   151 00000127 488D25(4C060000)    <1>     lea rsp, critStakTop
   152 0000012E FB                  <1>     sti         ;Reenable interrupts
   153                              <1> 
   154 0000012F C605(FF000000)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
   155                              <1> 
   156 00000136 48891D(10010000)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
   157 0000013D 0FB6DC              <1>     movzx ebx, ah   ;Move the function number bl zero extended to rbx
   158 00000140 C1E303              <1>     shl ebx, 3      ;Multiply the function number by 8 for offset into table
   159 00000143 50                  <1>     push rax        ;Push rax onto the stack
   160 00000144 488D059C030000      <1>     lea rax, qword [.dispatchTable]
   161 0000014B 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   162 0000014E 58                  <1>     pop rax
   163 0000014F 488B1B              <1>     mov rbx, qword [rbx]    ;Get the address from the dispatch table
   164                              <1> 
   165 00000152 84E4                <1>     test ah, ah     ;Simple Terminate function?
   166 00000154 741C                <1>     jz .fddiskOp
   167 00000156 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   168 00000159 7443                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   169 0000015B 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   170 0000015E 7712                <1>     ja .fddiskOp
   171                              <1> ;Char operations here
   172 00000160 F605(C7000000)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   173 00000167 7535                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   174 00000169 488D25(8C0C0000)    <1>     lea rsp, IOStakTop          ;Otherwise, switch to IO stack
   175 00000170 EB2C                <1>     jmp short .fdGoToFunction
   176                              <1> .fddiskOp:
   177                              <1>     ;Disk operations go here
   178                              <1>     ;Clear up error info
   179 00000172 C605(CA000000)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   180 00000179 C605(C7000000)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   181 00000180 C605(C9000000)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   182                              <1> 
   183 00000187 C605(FF000000)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   184 0000018E 488D25(CC120000)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   185 00000195 F605(F2000000)FF    <1>     test byte [breakFlag], -1   ;Test if set
   186 0000019C 7400                <1>     jz .fdGoToFunction
   187                              <1> ; HANDLE CTRL+BREAK HERE!
   188                              <1> .fdGoToFunction:
   189 0000019E 48871D(10010000)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   190                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   191                              <1>     ;
   192                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   193                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   194                              <1>     ;
   195 000001A5 FF15(10010000)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   196                              <1> .fdExit:
   197 000001AB FA                  <1>     cli     ;Redisable interrupts
   198                              <1>     ;???
   199 000001AC FE0D(C8000000)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   200 000001B2 488B25(08010000)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   201 000001B9 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   202 000001BC 488B05(00010000)    <1>     mov rax, qword [oldoldRSP]
   203 000001C3 488905(08010000)    <1>     mov qword [oldRSP], rax
   204                              <1>     popDOS  ;Pop the frame
   223 000001CA 58                  <2>  pop rax
   224 000001CB 5B                  <2>  pop rbx
   225 000001CC 59                  <2>  pop rcx
   226 000001CD 5A                  <2>  pop rdx
   227 000001CE 5E                  <2>  pop rsi
   228 000001CF 5F                  <2>  pop rdi
   229 000001D0 5D                  <2>  pop rbp
   230 000001D1 4158                <2>  pop r8
   231 000001D3 4159                <2>  pop r9
   205 000001D5 48CF                <1>     iretq
   206                              <1> .fdExitBad:
   207 000001D7 B400                <1>     mov ah, 0
   208 000001D9 48CF                <1>     iretq
   209                              <1> .simpleTerminate:     ;ah = 00h
   210 000001DB C3                  <1>     ret
   211                              <1> .stdinReadEcho:     ;ah = 01h
   212                              <1> ;Return char that has been read and echoed in al
   213 000001DC 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
   214 000001E3 488D0566000000      <1>     lea rax, .stdinReadEchoBuffer
   215 000001EA C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   216 000001ED C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
   217 000001F1 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   218 000001F7 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   219 000001FB C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
   220 00000202 FF1504090000        <1>     call qword [conHdr + drvHdr.strPtr]
   221 00000208 FF1506090000        <1>     call qword [conHdr + drvHdr.intPtr]
   222 0000020E 803D3B00000000      <1>     cmp byte [.stdinReadEchoBuffer], 00h
   223 00000215 7432                <1>     jz .stdireexit
   224 00000217 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
   225 0000021E 488D052B000000      <1>     lea rax, .stdinReadEchoBuffer
   226 00000225 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   227 00000228 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
   228 0000022C 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   229 00000232 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   230 00000236 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
   231 0000023D FF15C9080000        <1>     call qword [conHdr + drvHdr.strPtr]
   232 00000243 FF15CB080000        <1>     call qword [conHdr + drvHdr.intPtr]
   233                              <1> .stdireexit:
   234 00000249 8A0501000000        <1>     mov al, byte [.stdinReadEchoBuffer]
   235 0000024F C3                  <1>     ret
   236 00000250 00                  <1> .stdinReadEchoBuffer    db 0
   237                              <1> .stdoutWrite:       ;ah = 02h
   238                              <1> ;Bspace is regular cursor left, does not insert a blank
   239 00000251 881533000000        <1>     mov byte [.stdoutWriteBuffer], dl
   240 00000257 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
   241 0000025E 488D1525000000      <1>     lea rdx, .stdoutWriteBuffer
   242 00000265 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   243 00000268 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
   244 0000026C 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   245 00000272 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   246 00000276 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
   247 0000027D FF1589080000        <1>     call qword [conHdr + drvHdr.strPtr]
   248 00000283 FF158B080000        <1>     call qword [conHdr + drvHdr.intPtr]
   249 00000289 C3                  <1>     ret
   250 0000028A 00                  <1> .stdoutWriteBuffer db 0
   251                              <1> .stdauxRead:        ;ah = 03h
   252                              <1> .stdauxWrite:       ;ah = 04h
   253                              <1> .stdprnWrite:       ;ah = 05h
   254                              <1> .directCONIO:       ;ah = 06h
   255                              <1> .waitDirectInNoEcho:;ah = 07h
   256                              <1> ;Return char in al
   257 0000028B 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
   258 00000292 488D052B000000      <1>     lea rax, .function7buffer
   259 00000299 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   260 0000029C C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
   261 000002A0 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   262 000002A6 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   263 000002AA C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
   264 000002B1 FF1555080000        <1>     call qword [conHdr + drvHdr.strPtr]
   265 000002B7 FF1557080000        <1>     call qword [conHdr + drvHdr.intPtr]
   266 000002BD 8A0501000000        <1>     mov al, byte [.function7buffer]
   267 000002C3 C3                  <1>     ret
   268 000002C4 00                  <1> .function7buffer    db 0
   269                              <1> .waitStdinNoEcho:   ;ah = 08h
   270 000002C5 C3                  <1>     ret
   271                              <1> .printString:       ;ah = 09h
   272 000002C6 31C9                <1>     xor ecx, ecx    ;Clear char counter
   273 000002C8 B824000000          <1>     mov eax, "$"    ;Terminating char
   274 000002CD 4889D7              <1>     mov rdi, rdx    ;Set up for scasb
   275                              <1> .ps0:   ;Search for $ to get count of chars
   276 000002D0 AE                  <1>     scasb
   277 000002D1 7404                <1>     je .ps1
   278 000002D3 FFC1                <1>     inc ecx
   279 000002D5 EBF9                <1>     jmp short .ps0
   280                              <1> .ps1:   ;Use handle 
   281 000002D7 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
   282 000002DE C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   283 000002E1 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
   284 000002E5 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   285 000002EB 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   286 000002EF 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   287 000002F2 FF1514080000        <1>     call qword [conHdr + drvHdr.strPtr]
   288 000002F8 FF1516080000        <1>     call qword [conHdr + drvHdr.intPtr]
   289                              <1> 
   290 000002FE 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   291 00000305 8A03                <1>     mov al, byte [rbx+callerFrame.rax]      ;Gets al to preserve it
   292 00000307 C3                  <1>     ret
   293                              <1> .buffStdinInput:    ;ah = 0Ah
   294                              <1> .checkStdinStatus:  ;ah = 0Bh
   295                              <1> .clearbuffDoFunc:   ;ah = 0Ch
   296                              <1> .diskReset:         ;ah = 0Dh
   297                              <1> .selectDisk:        ;ah = 0Eh
   298                              <1> .openFileFCB:       ;ah = 0Fh
   299                              <1> .closeFileFCB:      ;ah = 10h
   300                              <1> .findFirstFileFCB:  ;ah = 11h
   301                              <1> .findNextFileFCB:   ;ah = 12h
   302                              <1> .deleteFileFCB:     ;ah = 13h
   303                              <1> .sequentialReadFCB: ;ah = 14h
   304                              <1> .sequentialWriteFCB:;ah = 15h
   305                              <1> .createFileFCB:     ;ah = 16h
   306                              <1> .renameFileFCB:     ;ah = 17h
   307                              <1>                     ;ah = 18h unused
   308                              <1> .getCurrentDisk:    ;ah = 19h, get current default drive
   309 00000308 8A05(F1000000)      <1>     mov al, byte [currentDrv]
   310 0000030E C3                  <1>     ret
   311                              <1> .setDTA:            ;ah = 1Ah
   312                              <1> ;Called with:
   313                              <1> ;   rdx = Pointer to the new default DTA
   314 0000030F 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   315 00000316 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
   316 0000031A 488915(CF000000)    <1>     mov qword [currentDTA], rdx
   317 00000321 C3                  <1>     ret
   318                              <1> .FATinfoDefault:    ;ah = 1Bh
   319                              <1> .FatinfoDevice:     ;ah = 1Ch
   320                              <1>                     ;ah = 1Dh unused
   321                              <1>                     ;ah = 1Eh unused
   322                              <1> .getCurrentDPBptr:  ;ah = 1Fh, simply calls int 41h ah = 32h with dl = 0
   323                              <1>                     ;ah = 20h unused
   324                              <1> .randomReadFCB:     ;ah = 21h
   325                              <1> .randomWriteFCB:    ;ah = 22h
   326                              <1> .getFileSizeFCB:    ;ah = 23h
   327                              <1> .setRelRecordFCB:   ;ah = 24h
   328                              <1> .setIntVector:      ;ah = 25h
   329                              <1> ;Called with:
   330                              <1> ;   rdx = Pointer to interrupt handler
   331                              <1> ;   al = Interrupt number
   332 00000322 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   333 00000324 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   334                              <1> ;First call to get default BIOS segement selector and attribute word
   335 0000032A 88C3                <1>     mov bl, al  ;Set interrupt number 
   336 0000032C B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   337 00000331 CD35                <1>     int 35h
   338 00000333 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   339 00000335 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   340                              <1> ;dx preserves the attribute word
   341 00000337 488B2D(08010000)    <1>     mov rbp, qword [oldRSP]
   342 0000033E 488B5D18            <1>     mov rbx, qword [rbp + callerFrame.rdx]  ;Pointer passed in rdx
   343 00000342 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   344 00000347 CD35                <1>     int 35h
   345                              <1> 
   346 00000349 8A4500              <1>     mov al, byte [rbp + callerFrame.rax]    ;Preserve low byte of rax
   347 0000034C C3                  <1>     ret
   348                              <1> .createNewPSP:      ;ah = 26h
   349                              <1> .randBlockReadFCB:  ;ah = 27h
   350                              <1> .randBlockWriteFCB: ;ah = 28h
   351                              <1> .parseFilenameFCB:  ;ah = 29h
   352                              <1> .getDate:           ;ah = 2Ah
   353                              <1> .setDate:           ;ah = 2Bh
   354                              <1> .getTime:           ;ah = 2Ch
   355                              <1> .setTime:           ;ah = 2Dh
   356                              <1> .setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   357 0000034D 8805(F3000000)      <1>     mov byte [verifyFlag], al
   358 00000353 C3                  <1>     ret
   359                              <1> .getDTA:            ;ah = 2Fh
   360 00000354 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   361 0000035B 488B1D(CF000000)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
   362 00000362 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
   363 00000366 C3                  <1>     ret
   364                              <1> .getDOSversion:     ;ah = 30h
   365 00000367 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   366 0000036E 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   367 00000370 886209              <1>     mov byte [rdx + callerFrame.rbx + 1], ah    ;Clear bh 
   368 00000373 668B0586FCFFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   369 0000037A 668902              <1>     mov word [rdx + callerFrame.rax], ax    ;Save ax
   370 0000037D C3                  <1>     ret
   371                              <1> .terminateStayRes:  ;ah = 31h
   372                              <1> .getDeviceDPBptr:   ;ah = 32h
   373                              <1> .ctrlBreakCheck:    ;ah = 33h
   374 0000037E 84C0                <1>     test al, al
   375 00000380 7406                <1>     jz .cbcget  ;Get the state
   376 00000382 8815(F2000000)      <1>     mov byte [breakFlag], dl    ;Set the state
   377                              <1> .cbcget:
   378 00000388 8A15(F2000000)      <1>     mov dl, byte [breakFlag]    ;Get the state
   379 0000038E C3                  <1>     ret
   380                              <1> .getInDOSflagPtr:   ;ah = 34h
   381 0000038F 488D15(C8000000)    <1>     lea rdx, inDOS
   382 00000396 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   383 0000039D 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx  ;save ptr in rbx
   384 000003A1 C3                  <1>     ret
   385                              <1> .getIntVector:      ;ah = 35h
   386                              <1> ;Called with:
   387                              <1> ;   al = Interrupt Number
   388                              <1> ;Returns:
   389                              <1> ;   rbx = Pointer to interrupt handler
   390 000003A2 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   391 000003A4 B807F00000          <1>     mov eax, 0F007h
   392 000003A9 CD35                <1>     int 35h
   393 000003AB 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   394 000003B2 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx  ;Save pointer in rbx
   395 000003B6 8A02                <1>     mov al, byte [rdx + callerFrame.rax]    ;Get the low byte in al
   396 000003B8 C3                  <1>     ret
   397                              <1> .getDiskFreeSpace:  ;ah = 36h
   398                              <1> .getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
   399                              <1> .getsetCountryInfo: ;ah = 38h, localisation info
   400                              <1> .makeDIR:           ;ah = 39h
   401                              <1> .removeDIR:         ;ah = 3Ah
   402                              <1> .changeCurrentDIR:  ;ah = 3Bh, changes directory for current drive
   403                              <1> .createFileHdl:     ;ah = 3Ch, handle function
   404                              <1> .openFileHdl:       ;ah = 3Dh, handle function
   405                              <1> .closeFileHdl:      ;ah = 3Eh, handle function
   406                              <1> .readFileHdl:       ;ah = 3Fh, handle function
   407                              <1> .writeFileHdl:      ;ah = 40h, handle function
   408                              <1> .deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   409                              <1> .movFileReadPtr:    ;ah = 42h, handle function, LSEEK
   410                              <1> .changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   411                              <1> .ioctrl:            ;ah = 44h, handle function
   412                              <1> .duplicateHandle:   ;ah = 45h, handle function
   413                              <1> .forceDuplicateHdl: ;ah = 46h, handle function
   414                              <1> .getCurrentDIR:     ;ah = 47h
   415                              <1> .allocateMemory:    ;ah = 48h
   416                              <1> .freeMemory:        ;ah = 49h
   417                              <1> .reallocMemory:     ;ah = 4Ah
   418                              <1> .loadExecChild:     ;ah = 4Bh, EXEC
   419                              <1> .terminateClean:    ;ah = 4Ch, EXIT
   420                              <1> .getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   421                              <1> .findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   422                              <1> .findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   423                              <1> .setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   424 000003B9 48891D(D7000000)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   425 000003C0 C3                  <1>     ret
   426                              <1> .getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   427 000003C1 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   428 000003C8 488B15(D7000000)    <1>     mov rdx, qword [currentPSP]
   429 000003CF 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx   ;Set the caller pointer
   430 000003D3 C3                  <1>     ret 
   431                              <1> .getSysVarsPtr:     ;ah = 52h
   432 000003D4 488D15(67000000)    <1>     lea rdx, sysVarsPtr
   433 000003DB 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   434 000003E2 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx
   435 000003E6 C3                  <1>     ret
   436                              <1> .createDPB:         ;ah = 53h, generates a DPB from a given BPB
   437                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   438                              <1> ;This is done so that the other fields of the DPB can be recycled
   439                              <1> ;Input: rsi = ptr to the BPB
   440                              <1> ;       rbp = ptr to the DPB
   441                              <1> ;bMediaDescriptor
   442 000003E7 8A4615              <1>     mov al, byte [rsi + bpb.media]
   443 000003EA 884524              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   444                              <1> ;bAccessFlag
   445 000003ED C64525FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Not accessed
   446                              <1> ;dFirstFreeCluster
   447 000003F1 C7452E00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   448                              <1> ;dNumberOfFreeClusters
   449 000003F8 C74532FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   450                              <1> ;bBytesPerSectorShift
   451 000003FF 668B460B            <1>     mov ax, word [rsi + bpb.bytsPerSec]
   452 00000403 B107                <1>     mov cl, 7   ;Start with 128 byte sectors (not supported, min 512)
   453 00000405 66D3E8              <1>     shr ax, cl  ;Shift down
   454                              <1> .cd0:
   455 00000408 66D1E8              <1>     shr ax, 1
   456 0000040B 7404                <1>     jz .cd1
   457 0000040D FEC1                <1>     inc cl
   458 0000040F EBF7                <1>     jmp short .cd0
   459                              <1> .cd1:
   460 00000411 884D02              <1>     mov byte [rbp + dpb.bBytesPerSectorShift], cl
   461                              <1> ;bMaxSectorInCluster
   462 00000414 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   463 00000417 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   464 00000419 884503              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   465                              <1> ;bSectorsPerClusterShift
   466 0000041C FEC0                <1>     inc al
   467 0000041E 30C9                <1>     xor cl, cl
   468                              <1> .cd2:
   469 00000420 D0E8                <1>     shr al, 1
   470 00000422 7404                <1>     jz .cd3
   471 00000424 FEC1                <1>     inc cl
   472 00000426 EBF8                <1>     jmp short .cd2
   473                              <1> .cd3:
   474 00000428 884D04              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   475                              <1> ;dFAToffset, number of hidden sectors + number of reserved sectors
   476 0000042B 0FB7460E            <1>     movzx eax, word [rsi + bpb.revdSecCnt]
   477 0000042F 03461C              <1>     add eax, dword [rsi + bpb.hiddSec] 
   478 00000432 894505              <1>     mov dword [rbp + dpb.dFAToffset], eax
   479                              <1> ;bNumberOfFATs
   480 00000435 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   481 00000438 884509              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   482                              <1> ;wNumberRootDirSectors
   483 0000043B 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   484 0000043F C1E005              <1>     shl eax, 5  ;Multiply by 32
   485 00000442 0FB74E0B            <1>     movzx ecx, word [rsi + bpb.bytsPerSec]
   486 00000446 FFC9                <1>     dec ecx
   487 00000448 01C8                <1>     add eax, ecx
   488 0000044A 31D2                <1>     xor edx, edx    ;Clear for divide
   489 0000044C F7F1                <1>     div ecx ;Divide 0:eax by ecx, (e)ax has number of clusters
   490 0000044E 6689450A            <1>     mov word [rbp + dpb.wNumberRootDirSectors], ax  ;0 for FAT32
   491                              <1> ;dFATlength, get the FAT length
   492 00000452 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   493 00000456 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   494 00000459 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   495 0000045B 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   496 0000045E 894514              <1>     mov dword [rbp + dpb.dFATlength], eax
   497                              <1> ;Complex cases below...
   498                              <1> ;dClusterHeapOffset, start sector of the data area
   499 00000461 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   500 00000465 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   501 00000468 85C0                <1>     test eax, eax
   502 0000046A 0F44C3              <1>     cmovz eax, ebx
   503                              <1> ;eax = FATsz
   504 0000046D 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   505 00000471 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   506 00000474 85DB                <1>     test ebx, ebx
   507 00000476 0F44D9              <1>     cmovz ebx, ecx 
   508                              <1> ;ebx = TotSec
   509 00000479 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   510 0000047C 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   511                              <1> .cd4:
   512 0000047E 01C2                <1>     add edx, eax
   513 00000480 FEC9                <1>     dec cl
   514 00000482 75FA                <1>     jnz .cd4
   515 00000484 89D0                <1>     mov eax, edx    ;Store product in eax
   516 00000486 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   517 0000048A 01D0                <1>     add eax, edx
   518 0000048C 0FB7550A            <1>     movzx edx, word [rbp + dpb.wNumberRootDirSectors]
   519 00000490 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   520                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   521                              <1>     ;aka eax = Start sector of the data area in volume
   522 00000492 89450C              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   523                              <1> ;dClusterCount
   524 00000495 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   525 00000497 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   526 00000499 31D2                <1>     xor edx, edx
   527 0000049B BB01000000          <1>     mov ebx, 1
   528 000004A0 8A4D04              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   529 000004A3 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   530 000004A5 F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   531 000004A7 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   532 000004A9 894510              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   533                              <1> ;dFirstUnitOfRootDir
   534 000004AC 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   535 000004B1 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   536 000004B4 7709                <1>     ja .cd5
   537                              <1>     ;Else, we need to find the first sector of the root directory
   538                              <1>     ;Get the start sector of data area in volume 
   539                              <1>     ; and sub the number of sectors in the root directory
   540 000004B6 8B450C              <1>     mov eax, dword [rbp + dpb.dClusterHeapOffset]
   541 000004B9 0FB75D0A            <1>     movzx ebx, word [rbp + dpb.wNumberRootDirSectors]
   542 000004BD 29D8                <1>     sub eax, ebx    ;eax now has start sector of root dir
   543                              <1> .cd5:
   544 000004BF 894518              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   545                              <1> ;Exit epilogue
   546 000004C2 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   547 000004C9 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   548 000004CB C3                  <1>     ret
   549                              <1> .getVerifySetting:  ;ah = 54h
   550 000004CC 8A05(F3000000)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   551 000004D2 C3                  <1>     ret
   552                              <1> .createPSP:         ;ah = 55h, creates a PSP for a program
   553                              <1> .renameFile:        ;ah = 56h
   554                              <1> .getSetFileDateTime:;ah = 57h
   555                              <1> .getsetMallocStrat: ;ah = 58h
   556                              <1> .getExtendedError:  ;ah = 59h
   557                              <1> .createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   558                              <1> .createNewFile:     ;ah = 5Bh
   559                              <1> .lockUnlockFile:    ;ah = 5Ch
   560                              <1> .getCritErrorInfo:  ;ah = 5Dh
   561                              <1> .networkServices:   ;ah = 5Eh, do nothing
   562                              <1> .networkRedirection:;ah = 5Fh, do nothing
   563                              <1> .trueName:          ;ah = 60h, get fully qualified name
   564                              <1>                     ;ah = 61h, reserved
   565                              <1> .getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   566 000004D3 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   567 000004DA 488B15(D7000000)    <1>     mov rdx, qword [currentPSP]
   568 000004E1 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx  ;Save the current psp in rbx
   569 000004E5 C3                  <1>     ret
   570                              <1>                     ;ah = 63h, reserved
   571                              <1> .setDriverLookahead:;ah = 64h, reserved
   572                              <1> .getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
   573                              <1> .getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
   574                              <1> .setHandleCount:    ;ah = 67h
   575                              <1> .commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   576                              <1> .getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   577                              <1> .return:
   578 000004E6 C3                  <1>     ret
   579                              <1> 
   580                              <1> 
   581                              <1> .dispatchTable:
   582 000004E7 [DB01000000000000]  <1>     dq .simpleTerminate     ;AH = 00H, PROCESS MANAGEMENT
   583 000004EF [DC01000000000000]  <1>     dq .stdinReadEcho       ;AH = 01H, CHAR IO
   584 000004F7 [5102000000000000]  <1>     dq .stdoutWrite         ;AH = 02H, CHAR IO
   585 000004FF [8B02000000000000]  <1>     dq .stdauxRead          ;AH = 03H, CHAR IO
   586 00000507 [8B02000000000000]  <1>     dq .stdauxWrite         ;AH = 04H, CHAR IO
   587 0000050F [8B02000000000000]  <1>     dq .stdprnWrite         ;AH = 05H, CHAR IO
   588 00000517 [8B02000000000000]  <1>     dq .directCONIO         ;AH = 06H, CHAR IO
   589 0000051F [8B02000000000000]  <1>     dq .waitDirectInNoEcho  ;AH = 07H, CHAR IO
   590 00000527 [C502000000000000]  <1>     dq .waitStdinNoEcho     ;AH = 08H, CHAR IO
   591 0000052F [C602000000000000]  <1>     dq .printString         ;AH = 09H, CHAR IO
   592 00000537 [0803000000000000]  <1>     dq .buffStdinInput      ;AH = 0AH, CHAR IO
   593 0000053F [0803000000000000]  <1>     dq .checkStdinStatus    ;AH = 0BH, CHAR IO
   594 00000547 [0803000000000000]  <1>     dq .clearbuffDoFunc     ;AH = 0CH, CHAR IO
   595 0000054F [0803000000000000]  <1>     dq .diskReset           ;AH = 0DH, DISK MANAGEMENT
   596 00000557 [0803000000000000]  <1>     dq .selectDisk          ;AH = 0EH, DISK MANAGEMENT
   597 0000055F [0803000000000000]  <1>     dq .openFileFCB         ;AH = 0FH, FILE OPERATION       FCB
   598 00000567 [0803000000000000]  <1>     dq .closeFileFCB        ;AH = 10H, FILE OPERATION       FCB
   599 0000056F [0803000000000000]  <1>     dq .findFirstFileFCB    ;AH = 11H, FILE OPERATION       FCB
   600 00000577 [0803000000000000]  <1>     dq .findNextFileFCB     ;AH = 12H, FILE OPERATION       FCB
   601 0000057F [0803000000000000]  <1>     dq .deleteFileFCB       ;AH = 13H, FILE OPERATION       FCB
   602 00000587 [0803000000000000]  <1>     dq .sequentialReadFCB   ;AH = 14H, RECORD OPERATION     FCB
   603 0000058F [0803000000000000]  <1>     dq .sequentialWriteFCB  ;AH = 15H, RECORD OPERTAION     FCB
   604 00000597 [0803000000000000]  <1>     dq .createFileFCB       ;AH = 16H, FILE OPERATION       FCB
   605 0000059F [0803000000000000]  <1>     dq .renameFileFCB       ;AH = 17H, FILE OPERATION       FCB
   606 000005A7 [E604000000000000]  <1>     dq .return              ;AH = 18H, RESERVED
   607 000005AF [0803000000000000]  <1>     dq .getCurrentDisk      ;AH = 19H, DISK MANAGEMENT
   608 000005B7 [0F03000000000000]  <1>     dq .setDTA              ;AH = 1AH, RECORD OPERATION     F/H
   609 000005BF [2203000000000000]  <1>     dq .FATinfoDefault      ;AH = 1BH, DISK MANAGEMENT
   610 000005C7 [2203000000000000]  <1>     dq .FatinfoDevice       ;AH = 1CH, DISK MANAGEMENT
   611 000005CF [E604000000000000]  <1>     dq .return              ;AH = 1DH, RESERVED
   612 000005D7 [E604000000000000]  <1>     dq .return              ;AH = 1EH, RESERVED
   613 000005DF [2203000000000000]  <1>     dq .getCurrentDPBptr    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
   614 000005E7 [E604000000000000]  <1>     dq .return              ;AH = 20H, RESERVED
   615 000005EF [2203000000000000]  <1>     dq .randomReadFCB       ;AH = 21H, RECORD OPERATION     FCB
   616 000005F7 [2203000000000000]  <1>     dq .randomWriteFCB      ;AH = 22H, RECORD OPERATION     FCB
   617 000005FF [2203000000000000]  <1>     dq .getFileSizeFCB      ;AH = 23H, FILE OPERATION       FCB
   618 00000607 [2203000000000000]  <1>     dq .setRelRecordFCB     ;AH = 24H, RECORD OPERATION     FCB
   619 0000060F [2203000000000000]  <1>     dq .setIntVector        ;AH = 25H, MISC. SYS. FUNCTION
   620 00000617 [4D03000000000000]  <1>     dq .createNewPSP        ;AH = 26H, PROCESS MANAGEMENT
   621 0000061F [4D03000000000000]  <1>     dq .randBlockReadFCB    ;AH = 27H, RECORD OPERATION     FCB
   622 00000627 [4D03000000000000]  <1>     dq .randBlockWriteFCB   ;AH = 28H, RECORD OPERATION     FCB
   623 0000062F [4D03000000000000]  <1>     dq .parseFilenameFCB    ;AH = 29H, FILE OPERATION       FCB
   624 00000637 [4D03000000000000]  <1>     dq .getDate             ;AH = 2AH, TIME AND DATE
   625 0000063F [4D03000000000000]  <1>     dq .setDate             ;AH = 2BH, TIME AND DATE
   626 00000647 [4D03000000000000]  <1>     dq .getTime             ;AH = 2CH, TIME AND DATE
   627 0000064F [4D03000000000000]  <1>     dq .setTime             ;AH = 2DH, TIME AND DATE
   628 00000657 [4D03000000000000]  <1>     dq .setResetVerify      ;AH = 2EH, DISK MANAGEMENT
   629 0000065F [5403000000000000]  <1>     dq .getDTA              ;AH = 2FH, RECORD OPERATION     F/H
   630 00000667 [6703000000000000]  <1>     dq .getDOSversion       ;AH = 30H, MISC. SYS. FUNCTION
   631 0000066F [7E03000000000000]  <1>     dq .terminateStayRes    ;AH = 31H, PROCESS MANAGEMENT
   632 00000677 [7E03000000000000]  <1>     dq .getDeviceDPBptr     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
   633 0000067F [7E03000000000000]  <1>     dq .ctrlBreakCheck      ;AH = 33H, MISC. SYS. FUNCTION
   634 00000687 [8F03000000000000]  <1>     dq .getInDOSflagPtr     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
   635 0000068F [A203000000000000]  <1>     dq .getIntVector        ;AH = 35H, MISC. SYS. FUNCTION
   636 00000697 [B903000000000000]  <1>     dq .getDiskFreeSpace    ;AH = 36H, DISK MANAGEMENT
   637 0000069F [B903000000000000]  <1>     dq .getsetSwitchChar    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
   638 000006A7 [B903000000000000]  <1>     dq .getsetCountryInfo   ;AH = 38H, MISC. SYS. FUNCTION
   639 000006AF [B903000000000000]  <1>     dq .makeDIR             ;AH = 39H, DIRECTORY OPERATION
   640 000006B7 [B903000000000000]  <1>     dq .removeDIR           ;AH = 3AH, DIRECTORY OPERATION
   641 000006BF [B903000000000000]  <1>     dq .changeCurrentDIR    ;AH = 3BH, DIRECTORY OPERATION
   642 000006C7 [B903000000000000]  <1>     dq .createFileHdl       ;AH = 3CH, FILE OPERATION       HANDLE
   643 000006CF [B903000000000000]  <1>     dq .openFileHdl         ;AH = 3DH, FILE OPERATION       HANDLE
   644 000006D7 [B903000000000000]  <1>     dq .closeFileHdl        ;AH = 3EH, FILE OPERATION       HANDLE
   645 000006DF [B903000000000000]  <1>     dq .readFileHdl         ;AH = 3FH, RECORD OPERATION     HANDLE
   646 000006E7 [B903000000000000]  <1>     dq .writeFileHdl        ;AH = 40H, RECORD OPERATION     HANDLE
   647 000006EF [B903000000000000]  <1>     dq .deleteFileHdl       ;AH = 41H, FILE OPERATION       HANDLE
   648 000006F7 [B903000000000000]  <1>     dq .movFileReadPtr      ;AH = 42H, RECORD OPERATION     HANDLE
   649 000006FF [B903000000000000]  <1>     dq .changeFileModeHdl   ;AH = 43H, FILE OPERATION       HANDLE
   650 00000707 [B903000000000000]  <1>     dq .ioctrl              ;AH = 44H, MISC. SYS. FUNCTION
   651 0000070F [B903000000000000]  <1>     dq .duplicateHandle     ;AH = 45H, FILE OPERATION       HANDLE
   652 00000717 [B903000000000000]  <1>     dq .forceDuplicateHdl   ;AH = 46H, FILE OPERATION       HANDLE
   653 0000071F [B903000000000000]  <1>     dq .getCurrentDIR       ;AH = 47H, DIRECTORY OPERATION
   654 00000727 [B903000000000000]  <1>     dq .allocateMemory      ;AH = 48H, MEMORY MANAGEMENT
   655 0000072F [B903000000000000]  <1>     dq .freeMemory          ;AH = 49H, MEMORY MANAGEMENT
   656 00000737 [B903000000000000]  <1>     dq .reallocMemory       ;AH = 4AH, MEMORY MANAGEMENT
   657 0000073F [B903000000000000]  <1>     dq .loadExecChild       ;AH = 4BH, PROCESS MANAGEMENT
   658 00000747 [B903000000000000]  <1>     dq .terminateClean      ;AH = 4CH, PROCESS MANAGEMENT
   659 0000074F [B903000000000000]  <1>     dq .getRetCodeChild     ;AH = 4DH, PROCESS MANAGEMENT
   660 00000757 [B903000000000000]  <1>     dq .findFirstFileHdl    ;AH = 4EH, FILE OPERATION       HANDLE
   661 0000075F [B903000000000000]  <1>     dq .findNextFileHdl     ;AH = 4FH, FILE OPERATION       HANDLE
   662 00000767 [B903000000000000]  <1>     dq .setCurrProcessID    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   663 0000076F [C103000000000000]  <1>     dq .getCurrProcessID    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   664 00000777 [D403000000000000]  <1>     dq .getSysVarsPtr       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   665 0000077F [E703000000000000]  <1>     dq .createDPB           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   666 00000787 [CC04000000000000]  <1>     dq .getVerifySetting    ;AH = 54H, DISK MANAGEMENT
   667 0000078F [D304000000000000]  <1>     dq .createPSP           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   668 00000797 [D304000000000000]  <1>     dq .renameFile          ;AH = 56H, FILE OPERATION       HANDLE
   669 0000079F [D304000000000000]  <1>     dq .getSetFileDateTime  ;AH = 57H, FILE OPERATION       HANDLE
   670 000007A7 [D304000000000000]  <1>     dq .getsetMallocStrat   ;AH = 58H, MEMORY MANAGEMENT
   671 000007AF [D304000000000000]  <1>     dq .getExtendedError    ;AH = 59H, MISC. SYS. FUNCTION
   672 000007B7 [D304000000000000]  <1>     dq .createUniqueFile    ;AH = 5AH, FILE OPERATION       HANDLE
   673 000007BF [D304000000000000]  <1>     dq .createNewFile       ;AH = 5BH, FILE OPERATION       HANDLE
   674 000007C7 [D304000000000000]  <1>     dq .lockUnlockFile      ;AH = 5CH, RECORD OPERATION     HANDLE
   675 000007CF [D304000000000000]  <1>     dq .getCritErrorInfo    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   676 000007D7 [D304000000000000]  <1>     dq .networkServices     ;AH = 5EH, RESERVED NETWORK FUNCTION
   677 000007DF [D304000000000000]  <1>     dq .networkRedirection  ;AH = 5FH, RESERVED NETWORK FUNCTION
   678 000007E7 [D304000000000000]  <1>     dq .trueName            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   679 000007EF [E604000000000000]  <1>     dq .return              ;AH = 61H, RESERVED
   680 000007F7 [D304000000000000]  <1>     dq .getPSPaddr          ;AH = 62H, PROCESS MANAGEMENT
   681 000007FF [E604000000000000]  <1>     dq .return              ;AH = 63H, RESERVED
   682 00000807 [E604000000000000]  <1>     dq .setDriverLookahead  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   683 0000080F [E604000000000000]  <1>     dq .getExtLocalInfo     ;AH = 65H, MISC. SYS. FUNCTION
   684 00000817 [E604000000000000]  <1>     dq .getsetGlobalCP      ;AH = 66H, MISC. SYS. FUNCTION
   685 0000081F [E604000000000000]  <1>     dq .setHandleCount      ;AH = 67H, FILE OPERAITON       F/H
   686 00000827 [E604000000000000]  <1>     dq .commitFile          ;AH = 68H, FILE OPERATION       HANDLE
   687 0000082F [E604000000000000]  <1>     dq .getsetDiskSerial    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   688                              <1> dispatchTableL  equ $ - .dispatchTable 
   689                              <1> 
   690                              <1> terminateHandler:   ;Int 42h
   691                              <1> ctrlCHandler:       ;Int 43h
   692                              <1> critErrorHandler:   ;Int 44h
   693                              <1> ;User Stack in usage here, must be swapped to before this is called
   694                              <1> ;Entered with:  
   695                              <1> ;               AH = Critical Error Bitfield
   696                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
   697                              <1> ;               Bit 6 - Reserved
   698                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
   699                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
   700                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
   701                              <1> ;               Bits [2-1] = Affected Disk Error
   702                              <1> ;                     0 0   DOS area
   703                              <1> ;                     0 1   FAT area
   704                              <1> ;                     1 0   Directory area
   705                              <1> ;                     1 1   Data area
   706                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   707                              <1> ;               AL  = Failing drive number if AH[7] = 0
   708                              <1> ;               DIL = Error code for errorMsg
   709                              <1> ;               RSI = EA of Device Header for which device the error occured
   710                              <1> ;Return:
   711                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
   712                              <1> ;                  = 1 - Retry the Operation    (Retry)
   713                              <1> ;                  = 2 - Terminate the Program  (Abort)
   714                              <1> ;                  = 3 - Fail the DOS call      (Fail)
   715 00000837 53                  <1>     push rbx
   716 00000838 51                  <1>     push rcx
   717 00000839 52                  <1>     push rdx
   718 0000083A 57                  <1>     push rdi
   719 0000083B 56                  <1>     push rsi
   720 0000083C FC                  <1>     cld         ;Make String ops go forward
   721                              <1> 
   722 0000083D 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
   723 00000840 488D155E020000      <1>     lea rdx, qword [.crlf]
   724 00000847 B409                <1>     mov ah, 09h ;Print String
   725 00000849 CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
   726                              <1> 
   727 0000084B 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
   728 00000851 B90C000000          <1>     mov ecx, 0Ch
   729 00000856 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
   730 00000858 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
   731 0000085B 480FB7FF            <1>     movzx rdi, di
   732 0000085F 4889FA              <1>     mov rdx, rdi    ;Copy error code
   733 00000862 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
   734 00000866 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
   735 00000869 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
   736 0000086C 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
   737 00000873 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
   738 00000877 B409                <1>     mov ah, 09h ;Print String
   739 00000879 CD41                <1>     int 41h     ;Call DOS to print first part of message
   740                              <1> 
   741 0000087B 488D1505020000      <1>     lea rdx, qword [.readmsg]
   742 00000882 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
   743 00000889 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
   744 0000088C 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
   745 00000890 B409                <1>     mov ah, 09h ;Print String
   746 00000892 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
   747                              <1> 
   748 00000894 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
   749 00000897 0F85DF000000        <1>     jnz .charError
   750                              <1> ;Disk error continues here
   751 0000089D 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
   752 000008A4 B409                <1>     mov ah, 09h
   753 000008A6 CD41                <1>     int 41h
   754 000008A8 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
   755 000008AA 80C241              <1>     add dl, "A" ;Add ASCII code
   756 000008AD B402                <1>     mov ah, 02h ;Print char in dl
   757 000008AF CD41                <1>     int 41h
   758                              <1> .userInput:
   759 000008B1 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
   760 000008B8 B409                <1>     mov ah, 09h
   761 000008BA CD41                <1>     int 41h
   762                              <1> ;Abort, Retry, Ignore, Fail is word order
   763                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   764                              <1> .userAbort:
   765                              <1> ;Abort is always an option
   766 000008BC 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
   767 000008C3 B409                <1>     mov ah, 09h
   768 000008C5 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
   769                              <1> .userRetry:
   770 000008C7 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   771 000008CA 7416                <1>     jz .userIgnore    ;If clear, dont print message
   772 000008CC 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
   773 000008D3 B409                <1>     mov ah, 09h
   774 000008D5 CD41                <1>     int 41h
   775 000008D7 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
   776 000008DE B409                <1>     mov ah, 09h
   777 000008E0 CD41                <1>     int 41h
   778                              <1> .userIgnore:
   779 000008E2 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   780 000008E5 7416                <1>     jz .userFail
   781 000008E7 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
   782 000008EE B409                <1>     mov ah, 09h
   783 000008F0 CD41                <1>     int 41h
   784 000008F2 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
   785 000008F9 B409                <1>     mov ah, 09h
   786 000008FB CD41                <1>     int 41h
   787                              <1> .userFail:
   788 000008FD F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   789 00000900 7416                <1>     jz .userMsgEnd
   790 00000902 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
   791 00000909 B409                <1>     mov ah, 09h
   792 0000090B CD41                <1>     int 41h
   793 0000090D 488D15A7010000      <1>     lea rdx, qword [.failmsg]
   794 00000914 B409                <1>     mov ah, 09h
   795 00000916 CD41                <1>     int 41h
   796                              <1> .userMsgEnd:
   797 00000918 488D15A4010000      <1>     lea rdx, qword [.endMsg]
   798 0000091F B409                <1>     mov ah, 09h
   799 00000921 CD41                <1>     int 41h
   800                              <1> ;Get user input now 
   801 00000923 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   802 00000925 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   803 0000092C B401                <1>     mov ah, 01h ;STDIN without Console Echo
   804 0000092E CD41                <1>     int 41h ;Get char in al
   805 00000930 3C61                <1>     cmp al, "a" ;Chack if lowercase
   806 00000932 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   807 00000934 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   808                              <1> .uip1:
   809 00000936 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   810 00000937 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   811 00000939 FFC1                <1>     inc ecx
   812 0000093B 81F904000000        <1>     cmp ecx, 4
   813 00000941 75F3                <1>     jne .uip1
   814 00000943 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   815                              <1> .validInput:
   816 00000948 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   817                              <1> ;Now check if the input is permitted
   818 0000094A 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   819 0000094C 7427                <1>     je .cehExit
   820 0000094E 84C0                <1>     test al, al ;Check if 0 => Ignore
   821 00000950 740F                <1>     je .viIgnore
   822 00000952 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   823 00000954 7416                <1>     je .viRetry
   824                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   825 00000956 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   826 00000959 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   827 0000095F EB14                <1>     jmp short .cehExit
   828                              <1> .viIgnore:
   829 00000961 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   830 00000964 0F8447FFFFFF        <1>     jz .userInput
   831 0000096A EB09                <1>     jmp short .cehExit
   832                              <1> .viRetry:
   833 0000096C F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   834 0000096F 0F843CFFFFFF        <1>     jz .userInput
   835                              <1> .cehExit:
   836 00000975 5E                  <1>     pop rsi
   837 00000976 5F                  <1>     pop rdi
   838 00000977 5A                  <1>     pop rdx
   839 00000978 59                  <1>     pop rcx
   840 00000979 5B                  <1>     pop rbx
   841 0000097A 48CF                <1>     iretq
   842                              <1> .charError:
   843 0000097C B908000000          <1>     mov ecx, 8  ;8 chars in device name
   844 00000981 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   845                              <1> .ce1:
   846 00000988 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   847 00000989 88C2                <1>     mov dl, al  ;Move char into dl
   848 0000098B B402                <1>     mov ah, 02h
   849 0000098D CD41                <1>     int 41h ;Print char
   850 0000098F E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   851 00000991 E91BFFFFFF          <1>     jmp .userInput
   852                              <1> 
   853                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   854 00000996 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   854 0000099F 746563742024202020  <1>
   855 000009A8 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   855 000009B1 6E6974202420202020  <1>
   856 000009BA 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   856 000009C3 202420202020202020  <1>
   857 000009CC 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   857 000009D5 6F6D6D616E64202420  <1>
   858 000009DE 446174612024202020- <1>             db "Data $            "       ;Error 4
   858 000009E7 202020202020202020  <1>
   859 000009F0 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   859 000009F9 737420242020202020  <1>
   860 00000A02 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   860 00000A0B 202020202020202020  <1>
   861 00000A14 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   861 00000A1D 656469612024202020  <1>
   862 00000A26 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   862 00000A2F 7420466F756E642024  <1>
   863 00000A38 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   863 00000A41 706572202420202020  <1>
   864 00000A4A 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   864 00000A53 6C7420242020202020  <1>
   865 00000A5C 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   865 00000A65 742024202020202020  <1>
   866 00000A6E 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   866 00000A77 61696C757265202420  <1>
   867                              <1> 
   868 00000A80 64726976652024      <1> .drive      db "drive $"
   869 00000A87 6572726F7220726561- <1> .readmsg    db "error reading $"
   869 00000A90 64696E672024        <1>
   870 00000A96 6572726F7220777269- <1> .writemsg   db "error writing $"
   870 00000A9F 74696E672024        <1>
   871 00000AA5 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   872 00000AA8 41626F727424        <1> .abortmsg   db "Abort$" 
   873 00000AAE 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   874 00000AB5 526574727924        <1> .retrymsg   db "Retry$"
   875 00000ABB 4661696C24          <1> .failmsg    db "Fail$"
   876 00000AC0 2C2024              <1> .betweenMsg db ", $"
   877 00000AC3 3F2024              <1> .endMsg     db "? $"
   878 00000AC6 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   879                              <1> absDiskRead:        ;Int 45h
   880                              <1> ;al = Drive number
   881                              <1> ;rbx = Memory Buffer address
   882                              <1> ;ecx = Number of sectors to read (max 255 for now)
   883                              <1> ;rdx = Start LBA to read from
   884 00000ACA 480FB6C0            <1>     movzx rax, al   ;Zero extend DOS drive number 
   885 00000ACE 8A80[BE150000]      <1>     mov al, byte [msdDriver.msdBIOSmap + rax] ;Get translated BIOS num into al
   886 00000AD4 4891                <1>     xchg rax, rcx
   887 00000AD6 4887CA              <1>     xchg rcx, rdx
   888 00000AD9 B482                <1>     mov ah, 82h
   889 00000ADB CD33                <1>     int 33h
   890 00000ADD 48CF                <1>     iretq
   891                              <1> absDiskWrite:       ;Int 46h
   892 00000ADF 480FB6C0            <1>     movzx rax, al   ;Zero extend DOS drive number 
   893 00000AE3 8A80[BE150000]      <1>     mov al, byte [msdDriver.msdBIOSmap + rax] ;Get translated BIOS num into al
   894 00000AE9 4891                <1>     xchg rax, rcx
   895 00000AEB 4887CA              <1>     xchg rcx, rdx
   896 00000AEE B483                <1>     mov ah, 83h
   897 00000AF0 CD33                <1>     int 33h
   898 00000AF2 48CF                <1>     iretq
   899                              <1> terminateResident:  ;Int 47h
   900                              <1> inDosHandler:       ;Int 48h
   901                              <1> ;Called when DOS idle
   902 00000AF4 48CF                <1>     iretq
   903                              <1> fastOutput:         ;Int 49h
   904                              <1> ;Called with char to transfer in al
   905 00000AF6 50                  <1>     push rax
   906 00000AF7 B40E                <1>     mov ah, 0Eh
   907 00000AF9 CD30                <1>     int 30h
   908 00000AFB 58                  <1>     pop rax
   909 00000AFC 48CF                <1>     iretq
   910                              <1> passCommand:        ;Int 4Eh, hooked by COMMAND.COM
   911 00000AFE 48CF                <1>     iretq
   912                              <1> multiplex:          ;Int 4Fh, kept as iretq for now
   913 00000B00 48CF                <1>     iretq
    14                                  %include "dosDrivers.asm"
    15                              <1> ;-----------------------------------:
    16                              <1> ;          Driver routines          :
    17                              <1> ;-----------------------------------:
    18                              <1> drivers:
    19                              <1> conHdr:
    20 00000B02 [240B000000000000]  <1>     dq auxHdr
    21 00000B0A 1308                <1>     dw 0813h
    22 00000B0C [A20C000000000000]  <1>     dq commonStrat
    23 00000B14 [B10C000000000000]  <1>     dq conDriver
    24 00000B1C 434F4E2020202020    <1>     db "CON     "
    25                              <1> auxHdr:
    26 00000B24 [460B000000000000]  <1>     dq prnHdr
    27 00000B2C 0080                <1>     dw 08000h
    28 00000B2E [A20C000000000000]  <1>     dq commonStrat
    29 00000B36 [760F000000000000]  <1>     dq com1Intr
    30 00000B3E 4155582020202020    <1>     db "AUX     "
    31                              <1> prnHdr:
    32 00000B46 [680B000000000000]  <1>     dq clkHdr
    33 00000B4E 40A0                <1>     dw 0A040h
    34 00000B50 [AA0C000000000000]  <1>     dq nulStrat
    35 00000B58 [B00C000000000000]  <1>     dq nulIntr
    36 00000B60 50524E2020202020    <1>     db "PRN     "
    37                              <1> clkHdr:
    38 00000B68 [8A0B000000000000]  <1>     dq msdHdr
    39 00000B70 0880                <1>     dw 08008h
    40 00000B72 [A20C000000000000]  <1>     dq commonStrat
    41 00000B7A [E90D000000000000]  <1>     dq clkDriver
    42 00000B82 434C4F434B242020    <1>     db "CLOCK$  "
    43                              <1> msdHdr:
    44 00000B8A [AC0B000000000000]  <1>     dq com1Hdr
    45 00000B92 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    46 00000B94 [A20C000000000000]  <1>     dq commonStrat
    47 00000B9C [1B11000000000000]  <1>     dq msdDriver
    48 00000BA4 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    49                              <1> com1Hdr:
    50 00000BAC [CE0B000000000000]  <1>     dq com2Hdr
    51 00000BB4 0080                <1>     dw 08000h
    52 00000BB6 [A20C000000000000]  <1>     dq commonStrat
    53 00000BBE [760F000000000000]  <1>     dq com1Intr
    54 00000BC6 434F4D3120202020    <1>     db "COM1    "
    55                              <1> com2Hdr:
    56 00000BCE [F00B000000000000]  <1>     dq com3Hdr
    57 00000BD6 0080                <1>     dw 08000h
    58 00000BD8 [A20C000000000000]  <1>     dq commonStrat
    59 00000BE0 [7F0F000000000000]  <1>     dq com2Intr
    60 00000BE8 434F4D3220202020    <1>     db "COM2    "
    61                              <1> com3Hdr:
    62 00000BF0 [120C000000000000]  <1>     dq com4Hdr
    63 00000BF8 0080                <1>     dw 08000h
    64 00000BFA [A20C000000000000]  <1>     dq commonStrat
    65 00000C02 [880F000000000000]  <1>     dq com3Intr
    66 00000C0A 434F4D3320202020    <1>     db "COM3    "
    67                              <1> com4Hdr:
    68 00000C12 [340C000000000000]  <1>     dq lpt1Hdr
    69 00000C1A 0080                <1>     dw 08000h
    70 00000C1C [A20C000000000000]  <1>     dq commonStrat
    71 00000C24 [910F000000000000]  <1>     dq com4Intr
    72 00000C2C 434F4D3420202020    <1>     db "COM4    "
    73                              <1> lpt1Hdr:
    74 00000C34 [560C000000000000]  <1>     dq lpt2Hdr
    75 00000C3C 40A0                <1>     dw 0A040h
    76 00000C3E [AA0C000000000000]  <1>     dq nulStrat
    77 00000C46 [B00C000000000000]  <1>     dq nulIntr
    78 00000C4E 4C50543120202020    <1>     db "LPT1    "
    79                              <1> lpt2Hdr:
    80 00000C56 [780C000000000000]  <1>     dq lpt3Hdr
    81 00000C5E 40A0                <1>     dw 0A040h
    82 00000C60 [AA0C000000000000]  <1>     dq nulStrat
    83 00000C68 [B00C000000000000]  <1>     dq nulIntr
    84 00000C70 4C50543220202020    <1>     db "LPT2    "
    85                              <1> lpt3Hdr:
    86 00000C78 FFFFFFFFFFFFFFFF    <1>     dq -1
    87 00000C80 40A0                <1>     dw 0A040h
    88 00000C82 [AA0C000000000000]  <1>     dq nulStrat
    89 00000C8A [B00C000000000000]  <1>     dq nulIntr
    90 00000C92 4C50543320202020    <1>     dq "LPT3    "
    91 00000C9A 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    92                              <1> commonStrat:
    93                              <1> ;DOS calls this function with rbx=Ptr to request header
    94 00000CA2 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    95 00000CA9 C3                  <1>     ret
    96                              <1> nulStrat:
    97 00000CAA 66C743030001        <1>     mov word [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
    98                              <1> nulIntr:
    99 00000CB0 C3                  <1>     ret
   100                              <1> 
   101                              <1> conDriver:
   102 00000CB1 50                  <1>     push rax
   103 00000CB2 53                  <1>     push rbx
   104 00000CB3 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
   105 00000CBA B003                <1>     mov al, 03h ;Unknown Command
   106 00000CBC 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   107 00000CC0 7735                <1>     ja .conWriteErrorCode ;If yes, error!
   108                              <1> 
   109 00000CC2 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   110 00000CC5 3C04                <1>     cmp al, 4
   111 00000CC7 743D                <1>     jz .conRead
   112 00000CC9 3C05                <1>     cmp al, 5
   113 00000CCB 747F                <1>     jz .conNondestructiveRead
   114 00000CCD 3C06                <1>     cmp al, 6
   115 00000CCF 0F84A8000000        <1>     jz .conInputStatus
   116 00000CD5 3C07                <1>     cmp al, 7
   117 00000CD7 0F84B0000000        <1>     jz .conFlushInputBuffers
   118 00000CDD 3C08                <1>     cmp al, 8
   119 00000CDF 0F84CA000000        <1>     jz .conWrite
   120 00000CE5 3C09                <1>     cmp al, 9
   121 00000CE7 0F84C2000000        <1>     jz .conWrite
   122 00000CED 3C0A                <1>     cmp al, 0Ah
   123 00000CEF 0F84E3000000        <1>     jz .conOutputStatus
   124 00000CF5 EB06                <1>     jmp short .conExit  ;All other valid functions return done
   125                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
   126 00000CF7 B480                <1>     mov ah, 80h ;Set error bit
   127 00000CF9 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   128                              <1> .conExit:
   129 00000CFD 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   130 00000D03 5B                  <1>     pop rbx
   131 00000D04 58                  <1>     pop rax
   132 00000D05 C3                  <1>     ret
   133                              <1> .conRead:    ;Function 4
   134 00000D06 B005                <1>     mov al, 05h ;Bad request structure length?
   135 00000D08 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   136 00000D0B 75EA                <1>     jne .conWriteErrorCode
   137                              <1> 
   138 00000D0D 57                  <1>     push rdi
   139 00000D0E 51                  <1>     push rcx
   140 00000D0F 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   141 00000D13 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   142                              <1> .cre1:
   143 00000D15 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   144 00000D18 741C                <1>     je .cre2
   145 00000D1A 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
   146 00000D21 751A                <1>     jnz .cre3   ;No, get the buffer value
   147 00000D23 31C0                <1>     xor eax, eax
   148 00000D25 CD36                <1>     int 36h
   149                              <1> .cre11:
   150 00000D27 AA                  <1>     stosb
   151 00000D28 84C0                <1>     test al, al ;Was the ascii code 0?
   152 00000D2A 7506                <1>     jnz .cre12  ;No, skip storing scancode
   153 00000D2C 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
   154                              <1> .cre12:
   155 00000D32 FFC1                <1>     inc ecx ;Inc chars stored in buffer
   156 00000D34 EBDF                <1>     jmp short .cre1
   157                              <1> .cre2:
   158 00000D36 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   159 00000D39 59                  <1>     pop rcx
   160 00000D3A 5F                  <1>     pop rdi
   161 00000D3B EBC0                <1>     jmp short .conExit
   162                              <1> .cre3:
   163 00000D3D 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   164 00000D43 C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   165 00000D4A EBDB                <1>     jmp short .cre11
   166                              <1> 
   167                              <1> .conNondestructiveRead:  ;Function 5
   168 00000D4C B005                <1>     mov al, 05h ;Bad request structure length?
   169 00000D4E 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   170 00000D51 75A4                <1>     jne .conWriteErrorCode
   171 00000D53 803D8E00000000      <1>     cmp byte [.conBuf], 0
   172 00000D5A 7519                <1>     jnz .cnr2
   173 00000D5C B401                <1>     mov ah, 01h     ;Get key if exists
   174 00000D5E CD36                <1>     int 36h
   175 00000D60 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   176                              <1>     ;Keystroke available
   177                              <1> .cnr0:
   178 00000D62 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Move char in al
   179 00000D65 E993FFFFFF          <1>     jmp .conExit
   180                              <1> .cnr1: ;No keystroke available
   181 00000D6A 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 0200h   ;Set busy bit
   182 00000D70 E988FFFFFF          <1>     jmp .conExit
   183                              <1> .cnr2:
   184 00000D75 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   185 00000D7B EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   186                              <1> 
   187                              <1> .conInputStatus:         ;Function 6
   188 00000D7D B005                <1>     mov al, 05h ;Bad request structure length?
   189 00000D7F 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   190 00000D82 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   191 00000D88 E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   192                              <1> 
   193                              <1> .conFlushInputBuffers:   ;Function 7
   194 00000D8D B005                <1>     mov al, 05h ;Bad request structure length?
   195 00000D8F 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   196 00000D92 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   197 00000D98 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   198                              <1> .cfib0:
   199 00000D9F B401                <1>     mov ah, 01      ;Get buffer status
   200 00000DA1 CD36                <1>     int 36h
   201 00000DA3 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   202 00000DA9 30E4                <1>     xor ah, ah
   203 00000DAB CD36                <1>     int 36h ;Read key to flush from buffer
   204 00000DAD EBF0                <1>     jmp short .cfib0
   205                              <1> 
   206                              <1> .conWrite:   ;Function 8 and 9
   207 00000DAF B005                <1>     mov al, 05h ;Bad request structure length?
   208 00000DB1 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   209 00000DB4 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   210                              <1> 
   211 00000DBA 56                  <1>     push rsi
   212 00000DBB 51                  <1>     push rcx
   213 00000DBC 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   214 00000DC0 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   215                              <1> .cw1: 
   216 00000DC2 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   217 00000DC5 7407                <1>     je .cw2
   218 00000DC7 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   219 00000DC8 CD49                <1>     int 49h ;Fast print char
   220 00000DCA FFC1                <1>     inc ecx
   221 00000DCC EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   222                              <1> .cw2:
   223 00000DCE 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   224 00000DD1 59                  <1>     pop rcx
   225 00000DD2 5E                  <1>     pop rsi
   226 00000DD3 E925FFFFFF          <1>     jmp .conExit
   227                              <1> .conOutputStatus:   ;Function 0Ah
   228 00000DD8 B005                <1>     mov al, 05h ;Bad request structure length?
   229 00000DDA 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   230 00000DDD 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   231 00000DE3 E915FFFFFF          <1>     jmp .conExit
   232                              <1> 
   233 00000DE8 00                  <1> .conBuf db 0    ;Single byte buffer
   234                              <1> clkDriver:
   235 00000DE9 50                  <1>     push rax
   236 00000DEA 53                  <1>     push rbx
   237 00000DEB 51                  <1>     push rcx
   238 00000DEC 52                  <1>     push rdx
   239 00000DED 56                  <1>     push rsi
   240 00000DEE 55                  <1>     push rbp
   241 00000DEF 488B1DA4FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   242 00000DF6 B003                <1>     mov al, 03h ;Unknown Command
   243 00000DF8 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   244 00000DFC 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   245                              <1> 
   246 00000DFE 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   247 00000E01 3C04                <1>     cmp al, 04h
   248 00000E03 7437                <1>     jz .clkRead
   249 00000E05 3C06                <1>     cmp al, 06h
   250 00000E07 0F8494000000        <1>     jz .clkInputStatus
   251 00000E0D 3C07                <1>     cmp al, 07h
   252 00000E0F 0F8498000000        <1>     jz .clkFlushInputBuffers
   253 00000E15 3C08                <1>     cmp al, 08h
   254 00000E17 0F84A0000000        <1>     jz .clkWrite
   255 00000E1D 3C09                <1>     cmp al, 09h
   256 00000E1F 0F8498000000        <1>     jz .clkWrite
   257 00000E25 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   258                              <1> .clkNotFunctioning:
   259 00000E27 B002                <1>     mov al, 02h ;Device not ready error
   260                              <1> .clkWriteErrorCode:
   261 00000E29 B480                <1>     mov ah, 80h ;Set error bit
   262 00000E2B 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   263                              <1> .clkExit:
   264 00000E2F 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   265 00000E35 5D                  <1>     pop rbp
   266 00000E36 5E                  <1>     pop rsi
   267 00000E37 5A                  <1>     pop rdx
   268 00000E38 59                  <1>     pop rcx
   269 00000E39 5B                  <1>     pop rbx
   270 00000E3A 58                  <1>     pop rax
   271 00000E3B C3                  <1>     ret
   272                              <1> 
   273                              <1> .clkRead:           ;Function 4
   274 00000E3C B005                <1>     mov al, 05h ;Bad request structure length?
   275 00000E3E 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   276 00000E41 75E6                <1>     jne .clkWriteErrorCode
   277                              <1> 
   278 00000E43 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   279 00000E46 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   280 00000E4A 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   281 00000E51 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   282 00000E55 30E4                <1>     xor ah, ah
   283 00000E57 CD3A                <1>     int 3Ah         ;Read the system timer
   284 00000E59 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   285 00000E5B 740D                <1>     jz .clkr1       ;Nope, now just time 
   286 00000E5D 30E4                <1>     xor ah, ah
   287                              <1>     ;This works as al should keep count of the # of days passed since last read
   288 00000E5F 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   289 00000E63 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   290                              <1> .clkr1:
   291 00000E6A 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   292 00000E6D 0FB7D2              <1>     movzx edx, dx
   293 00000E70 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   294 00000E72 89D0                <1>     mov eax, edx
   295 00000E74 31D2                <1>     xor edx, edx
   296 00000E76 89D8                <1>     mov eax, ebx
   297 00000E78 B944040000          <1>     mov ecx, 1092   
   298 00000E7D F7F1                <1>     div ecx
   299 00000E7F 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   300 00000E82 89D0                <1>     mov eax, edx    ;Get remainder in eax
   301 00000E84 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   302 00000E88 31D2                <1>     xor edx, edx
   303 00000E8A B95B000000          <1>     mov ecx, 91 ;5*18.2
   304 00000E8F F7F1                <1>     div ecx
   305 00000E91 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   306 00000E94 89D0                <1>     mov eax, edx    ;Get remainder in eax
   307                              <1>     ;lea eax, dword [eax + 4*eax]
   308                              <1>     ;add eax, edx    ;Essentially multiply by 6
   309 00000E96 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   310 00000E99 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   311 00000E9C E98EFFFFFF          <1>     jmp .clkExit
   312                              <1> 
   313                              <1> .clkInputStatus:    ;Function 6
   314                              <1> ;Always return ready
   315 00000EA1 B005                <1>     mov al, 05h ;Bad request structure length?
   316 00000EA3 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   317 00000EA6 7581                <1>     jne .clkWriteErrorCode
   318 00000EA8 E982FFFFFF          <1>     jmp .clkExit
   319                              <1> .clkFlushInputBuffers:  ;Function 7
   320                              <1> ;Always return done immediately
   321 00000EAD B005                <1>     mov al, 05h ;Bad request structure length?
   322 00000EAF 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   323 00000EB2 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   324 00000EB8 E972FFFFFF          <1>     jmp .clkExit
   325                              <1> 
   326                              <1> .clkWrite:          ;Functions 8 and 9
   327 00000EBD B005                <1>     mov al, 05h ;Bad request structure length?
   328 00000EBF 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   329 00000EC2 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   330                              <1> 
   331 00000EC8 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   332 00000ECB 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   333 00000ECF 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   334 00000ED3 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   335                              <1> 
   336 00000EDA 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   337 00000EDC 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   338 00000EE0 B105                <1>     mov cl, 5
   339 00000EE2 F6F1                <1>     div cl          ;Divide al by 5
   340 00000EE4 30E4                <1>     xor ah, ah      ;Remove the remainder
   341 00000EE6 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   342                              <1> ;Using the decimal part of this formula for the low count
   343                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   344 00000EE8 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   345 00000EEB B912000000          <1>     mov ecx, 18
   346 00000EF0 F7E1                <1>     mul ecx  
   347 00000EF2 01C3                <1>     add ebx, eax
   348                              <1> 
   349 00000EF4 31D2                <1>     xor edx, edx
   350 00000EF6 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   351 00000EFA B944040000          <1>     mov ecx, 1092
   352 00000EFF F7E1                <1>     mul ecx
   353 00000F01 01C3                <1>     add ebx, eax
   354 00000F03 89DA                <1>     mov edx, ebx    ;edx now has low count
   355 00000F05 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   356 00000F09 B401                <1>     mov ah, 01h     ;Set the system time
   357 00000F0B CD3A                <1>     int 3Ah
   358                              <1> 
   359 00000F0D 4889F3              <1>     mov rbx, rsi
   360 00000F10 E91AFFFFFF          <1>     jmp .clkExit
   361                              <1> 
   362                              <1> .clkBCDtoHex:
   363                              <1> ;Converts a BCD value to a Hex byte
   364                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   365 00000F15 51                  <1>     push rcx
   366 00000F16 0FB6C0              <1>     movzx eax, al   ;Zero extend
   367 00000F19 89C1                <1>     mov ecx, eax    ;Save al in ecx
   368 00000F1B 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   369 00000F20 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   370 00000F26 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   371                              <1> .cbth0:
   372 00000F29 050A000000          <1>     add eax, 10
   373 00000F2E E2F9                <1>     loop .cbth0
   374 00000F30 59                  <1>     pop rcx
   375 00000F31 C3                  <1>     ret
   376                              <1> 
   377                              <1> .clkHexToBCD:
   378                              <1> ;Converts a Hex byte into two BCD digits
   379                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   380 00000F32 51                  <1>     push rcx
   381 00000F33 0FB6C0              <1>     movzx eax, al   ;Zero extend
   382 00000F36 31C9                <1>     xor ecx, ecx
   383                              <1> .chtb0:
   384 00000F38 3D0A000000          <1>     cmp eax, 10
   385 00000F3D 7209                <1>     jb .chtb1
   386 00000F3F 2D0A000000          <1>     sub eax, 10
   387 00000F44 FFC1                <1>     inc ecx
   388 00000F46 EBF0                <1>     jmp short .chtb0
   389                              <1> .chtb1:
   390 00000F48 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   391 00000F4B 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   392 00000F4D 59                  <1>     pop rcx
   393 00000F4E C3                  <1>     ret
   394 00000F4F 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   395                              <1> ;When counting the number of days, first compute the number of years since
   396                              <1> ; 1980 and your year. 
   397                              <1> ;Then, using the table below, find the number of leap years between 1980
   398                              <1> ; and (YourYear - 1). 
   399                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   400                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   401                              <1> ;Use the months table to get the number of days in a normal month as leap 
   402                              <1> ; years are added using the previous comment.
   403                              <1> ;Finally check if the date is after 28th Feb. If it is, check if your year is 
   404                              <1> ; a leap year using the table. If it is, add an extra day.
   405                              <1> .clkLeapYears:
   406 00000F51 0004080C1014181C20- <1>     db 00, 04, 08, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 
   406 00000F5A 24282C30            <1>
   407 00000F5E 34383C4044484C5054- <1>     db 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96
   407 00000F67 585C60              <1>
   408                              <1> .clkMonths:
   409 00000F6A 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   409 00000F73 1F1E1F              <1>
   410                              <1> ;COM Driver headers and main interrupt strat
   411                              <1> com1Intr:
   412 00000F76 C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   413 00000F7D EB19                <1>     jmp short comIntr
   414                              <1> com2Intr:
   415 00000F7F C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   416 00000F86 EB10                <1>     jmp short comIntr
   417                              <1> com3Intr:
   418 00000F88 C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   419 00000F8F EB07                <1>     jmp short comIntr
   420                              <1> com4Intr:
   421 00000F91 C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   422                              <1> comIntr:
   423 00000F98 50                  <1>     push rax
   424 00000F99 53                  <1>     push rbx
   425 00000F9A 51                  <1>     push rcx
   426 00000F9B 52                  <1>     push rdx
   427 00000F9C 56                  <1>     push rsi
   428 00000F9D 57                  <1>     push rdi
   429 00000F9E 488B1DF5FCFFFF      <1>     mov rbx, qword [reqHdrPtr]
   430 00000FA5 B003                <1>     mov al, 03h ;Unknown Command
   431 00000FA7 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   432 00000FAB 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   433                              <1> 
   434 00000FAD 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   435 00000FB0 3C04                <1>     cmp al, 4   ;Read Character(s)
   436 00000FB2 7462                <1>     jz .comRead
   437 00000FB4 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   438 00000FB6 0F849B000000        <1>     jz .comNondestructiveRead   
   439 00000FBC 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   440 00000FBE 0F8484000000        <1>     jz .comReadInputStatus
   441 00000FC4 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   442 00000FC6 0F84B9000000        <1>     jz .comFlushInputBuffers
   443 00000FCC 3C08                <1>     cmp al, 8
   444 00000FCE 0F84DB000000        <1>     jz .comWrite
   445 00000FD4 3C09                <1>     cmp al, 9
   446 00000FD6 0F84D3000000        <1>     jz .comWrite
   447 00000FDC 3C0A                <1>     cmp al, 0Ah
   448 00000FDE 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   449 00000FE4 EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   450                              <1> .comErrorNoCount:
   451 00000FE6 B002                <1>     mov al, 02h ;Unknown device
   452 00000FE8 EB19                <1>     jmp short .comWriteErrorCode
   453                              <1> .comReadError:
   454 00000FEA BA0B000000          <1>     mov edx, 0Bh
   455                              <1> .comWriteError:
   456 00000FEF BA0A000000          <1>     mov edx, 0Ah
   457                              <1> .comError:
   458 00000FF4 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   459 00000FF7 B902000000          <1>     mov ecx, 02h    ;Unknown device
   460 00000FFC 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   461 00000FFE 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   462 00001001 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   463                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   464 00001003 B480                <1>     mov ah, 80h ;Set error bit
   465 00001005 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   466                              <1> .comExit:
   467 00001009 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   468 0000100F 5F                  <1>     pop rdi
   469 00001010 5E                  <1>     pop rsi
   470 00001011 5A                  <1>     pop rdx
   471 00001012 59                  <1>     pop rcx
   472 00001013 5B                  <1>     pop rbx
   473 00001014 58                  <1>     pop rax
   474 00001015 C3                  <1>     ret
   475                              <1> 
   476                              <1> .comRead:
   477 00001016 B005                <1>     mov al, 05h ;Bad request structure length?
   478 00001018 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   479 0000101B 75E6                <1>     jne .comWriteErrorCode
   480                              <1> 
   481 0000101D 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   482 00001021 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   483                              <1> .cr1:
   484 00001023 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   485 00001026 741B                <1>     je .cre2
   486                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   487 00001028 B802000000          <1>     mov eax, 02h    ;Recieve 
   488 0000102D 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   489 00001033 6698                <1>     cbw     ;Zero extend to upper byte
   490 00001035 CD34                <1>     int 34h ;Recieve Char
   491 00001037 72BB                <1>     jc .comError
   492 00001039 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   493 0000103C 74EA                <1>     je .cr11
   494 0000103E AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   495 0000103F FFC1                <1>     inc ecx
   496 00001041 EBE0                <1>     jmp short .cr1
   497                              <1> .cre2:
   498 00001043 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   499 00001046 EBC1                <1>     jmp short .comExit
   500                              <1> 
   501                              <1> .comReadInputStatus:
   502 00001048 B005                <1>     mov al, 05h ;Bad request structure length?
   503 0000104A 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   504 0000104D 75B4                <1>     jne .comWriteErrorCode
   505 0000104F 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   506 00001055 EBB2                <1>     jmp short .comExit
   507                              <1> 
   508                              <1> .comNondestructiveRead:
   509                              <1> ;Acts like a "read one character if there is one" function
   510 00001057 B005                <1>     mov al, 05h ;Bad request structure length?
   511 00001059 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   512 0000105C 75A5                <1>     jne .comWriteErrorCode
   513                              <1> .cndr1:
   514 0000105E B802000000          <1>     mov eax, 02h    ;Recieve 
   515 00001063 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   516 00001069 6698                <1>     cbw     ;Zero extend to upper byte
   517 0000106B CD34                <1>     int 34h ;Recieve Char
   518 0000106D 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   519 00001073 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   520 00001076 7405                <1>     je .cndr2
   521 00001078 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Get next char
   522 0000107B EB8C                <1>     jmp short .comExit
   523                              <1> .cndr2:
   524 0000107D 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 200h ;Busy bit set
   525 00001083 EB84                <1>     jmp short .comExit
   526                              <1> 
   527                              <1> .comFlushInputBuffers:
   528 00001085 B005                <1>     mov al, 05h ;Bad request structure length?
   529 00001087 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   530 0000108A 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   531                              <1> .cfib0:
   532 00001090 8A1584000000        <1>     mov dl, byte [.comDevice]
   533 00001096 6698                <1>     cbw
   534 00001098 B802000000          <1>     mov eax, 02h    ;Recieve
   535 0000109D CD34                <1>     int 34h
   536 0000109F 0F8241FFFFFF        <1>     jc .comErrorNoCount
   537 000010A5 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   538 000010A8 75E6                <1>     jne .cfib0
   539 000010AA E95AFFFFFF          <1>     jmp .comExit
   540                              <1> 
   541                              <1> .comWrite:
   542 000010AF B005                <1>     mov al, 05h ;Bad request structure length?
   543 000010B1 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   544 000010B4 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   545                              <1> 
   546 000010BA 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   547 000010BE 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   548                              <1> .cw1: 
   549 000010C0 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   550 000010C3 7417                <1>     je .cw2
   551 000010C5 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   552 000010C6 B401                <1>     mov ah, 01h ;Move function number into ah
   553 000010C8 8A154C000000        <1>     mov dl, byte [.comDevice]
   554 000010CE 6698                <1>     cbw     ;Zero extend to upper byte
   555 000010D0 CD34                <1>     int 34h ;Transmit char
   556 000010D2 0F821CFFFFFF        <1>     jc .comError
   557 000010D8 FFC1                <1>     inc ecx
   558 000010DA EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   559                              <1> .cw2:
   560 000010DC 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   561 000010DF E925FFFFFF          <1>     jmp .comExit
   562                              <1> 
   563                              <1> .comOutputStatus:
   564                              <1> ;Read MODEM status
   565 000010E4 B005                <1>     mov al, 05h ;Bad request structure length?
   566 000010E6 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   567 000010E9 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   568                              <1> 
   569 000010EF 8A1525000000        <1>     mov dl, byte [.comDevice]
   570 000010F5 6698                <1>     cbw     ;Zero extend to upper byte
   571 000010F7 B403                <1>     mov ah, 03h     ;Get status
   572 000010F9 CD34                <1>     int 34h
   573 000010FB 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   574 00001101 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   575 00001106 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   576 00001109 F7D0                <1>     not eax      ;Bitwise inversion
   577 0000110B 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   578 00001110 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   579 00001115 E9EFFEFFFF          <1>     jmp .comExit
   580 0000111A 00                  <1> .comDevice   db 0
   581                              <1> 
   582                              <1> msdDriver:
   583 0000111B 50                  <1>     push rax
   584 0000111C 53                  <1>     push rbx
   585 0000111D 51                  <1>     push rcx
   586 0000111E 52                  <1>     push rdx
   587 0000111F 56                  <1>     push rsi
   588 00001120 57                  <1>     push rdi
   589 00001121 55                  <1>     push rbp
   590 00001122 4150                <1>     push r8
   591 00001124 488B1D6FFBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
   592 0000112B 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   593 0000112F B003                <1>     mov al, 03h
   594 00001131 0F87F9000000        <1>     ja .msdWriteErrorCode ;If yes, error!
   595 00001137 B001                <1>     mov al, 01h ;Unknown Unit Error
   596 00001139 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
   597 0000113D 0F87ED000000        <1>     ja .msdWriteErrorCode ;If yes, error!
   598 00001143 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
   599 00001146 84C0                <1>     test al, al
   600 00001148 0F84F8000000        <1>     jz .msdInit
   601 0000114E 3C01                <1>     cmp al, 01
   602 00001150 0F84C9010000        <1>     jz .msdMedChk
   603 00001156 3C02                <1>     cmp al, 02
   604 00001158 0F8439020000        <1>     jz .msdBuildBPB
   605 0000115E 3C03                <1>     cmp al, 03
   606 00001160 0F84A6020000        <1>     jz .msdIOCTLRead
   607 00001166 3C04                <1>     cmp al, 04
   608 00001168 0F84AE020000        <1>     jz .msdRead
   609 0000116E 3C08                <1>     cmp al, 08
   610 00001170 0F84E2020000        <1>     jz .msdWrite
   611 00001176 3C09                <1>     cmp al, 09
   612 00001178 0F8416030000        <1>     jz .msdWriteVerify
   613 0000117E 3C0C                <1>     cmp al, 12
   614 00001180 0F8457030000        <1>     jz .msdIOCTLWrite
   615 00001186 3C0D                <1>     cmp al, 13
   616 00001188 0F845F030000        <1>     jz .msdDevOpen
   617 0000118E 3C0E                <1>     cmp al, 14
   618 00001190 0F8476030000        <1>     jz .msdDevClose
   619 00001196 3C0F                <1>     cmp al, 15
   620 00001198 0F848D030000        <1>     jz .msdRemovableMedia
   621 0000119E 3C13                <1>     cmp al, 19
   622 000011A0 0F84B2030000        <1>     jz .msdGenericIOCTL
   623 000011A6 3C17                <1>     cmp al, 23
   624 000011A8 0F84BA030000        <1>     jz .msdGetLogicalDev
   625 000011AE 3C18                <1>     cmp al, 24
   626 000011B0 0F84CB030000        <1>     jz .msdSetLogicalDev
   627 000011B6 EB7E                <1>     jmp short .msdDriverExit    ;All other valid functions exit done
   628                              <1> .msdIOError:  ;In Read and Write errors, rbp points to the dev struc
   629 000011B8 4889EB              <1>     mov rbx, rbp
   630 000011BB 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
   631 000011BE 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
   632 000011C0 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
   633                              <1> ;Now fall through to general error
   634                              <1> .msdGenDiskError:
   635 000011C3 B401                <1>     mov ah, 01h
   636 000011C5 30D2                <1>     xor dl, dl  ;Work around bug that fails request if dl > 7Fh
   637 000011C7 CD33                <1>     int 33h ;Read status of last operation
   638 000011C9 80FC06              <1>     cmp ah, 06h ;Mock Seek response (device not present)
   639 000011CC B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
   640 000011CE 7460                <1>     je .msdWriteErrorCode 
   641 000011D0 B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
   642 000011D2 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
   643 000011D5 7459                <1>     je .msdWriteErrorCode 
   644 000011D7 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
   645 000011DA 7454                <1>     je .msdWriteErrorCode
   646                              <1> ;Device Not Ready
   647 000011DC B002                <1>     mov al, 02h  ;Device not ready code
   648 000011DE 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   649 000011E1 744D                <1>     je .msdWriteErrorCode
   650 000011E3 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   651 000011E7 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   652                              <1> ;Write Protected
   653 000011EB 30C0                <1>     xor al, al
   654 000011ED 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   655 000011F2 743C                <1>     je .msdWriteErrorCode
   656                              <1> ;CRC Error
   657 000011F4 B004                <1>     mov al, 04h     ;CRC error code
   658 000011F6 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   659 000011FB 7433                <1>     je .msdWriteErrorCode
   660 000011FD 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   661 00001202 742C                <1>     je .msdWriteErrorCode
   662 00001204 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   663 00001209 7425                <1>     je .msdWriteErrorCode
   664                              <1> ;Seek Error
   665 0000120B B006                <1>     mov al, 06h     ;Seek error code
   666 0000120D 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   667 00001210 741E                <1>     je .msdWriteErrorCode
   668                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   669                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   670 00001212 B007                <1>     mov al, 07h
   671 00001214 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   672 00001217 7417                <1>     je .msdWriteErrorCode
   673                              <1> ;Sector Not Found
   674 00001219 B008                <1>     mov al, 08h     ;Sector not found code
   675 0000121B 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   676 0000121E 7410                <1>     je .msdWriteErrorCode
   677                              <1> ;Write faults
   678 00001220 B00A                <1>     mov al, 0Ah     ;Write fault
   679 00001222 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   680 00001225 7409                <1>     je .msdWriteErrorCode
   681                              <1> ;Read faults
   682 00001227 B00B                <1>     mov al, 0Bh     ;Read fault
   683 00001229 80F911              <1>     cmp cl, 11h     ;Read error
   684 0000122C 7402                <1>     je .msdWriteErrorCode
   685                              <1> ;General Errors
   686 0000122E B00C                <1>     mov al, 0Ch     ;Everything else is general error
   687                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   688 00001230 B480                <1>     mov ah, 80h ;Set error bit
   689 00001232 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   690                              <1> .msdDriverExit:
   691 00001236 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
   692 0000123C 4158                <1>     pop r8
   693 0000123E 5D                  <1>     pop rbp
   694 0000123F 5F                  <1>     pop rdi
   695 00001240 5E                  <1>     pop rsi
   696 00001241 5A                  <1>     pop rdx
   697 00001242 59                  <1>     pop rcx
   698 00001243 5B                  <1>     pop rbx
   699 00001244 58                  <1>     pop rax
   700 00001245 C3                  <1>     ret
   701                              <1> .msdInit:            ;Function 0
   702 00001246 B005                <1>     mov al, 05h ;Bad request structure length
   703 00001248 803B1F              <1>     cmp byte [rbx + drvReqHdr.hdrlen], initReqPkt_size
   704 0000124B 75E3                <1>     jne .msdWriteErrorCode
   705                              <1> 
   706 0000124D 488D2DF4050000      <1>     lea rbp, endptr
   707 00001254 48896B0E            <1>     mov qword [rbx + initReqPkt.endptr], rbp    ;Where the end is gonna be
   708 00001258 488D2D69030000      <1>     lea rbp, .msdBPBTbl
   709 0000125F 48896B16            <1>     mov qword [rbx + initReqPkt.optptr], rbp    ;Where bpb tbl is gonna be
   710                              <1> 
   711 00001263 4889DD              <1>     mov rbp, rbx ;Save the req block ptr in rbp
   712 00001266 31D2                <1>     xor edx, edx  ;Start from device zero
   713 00001268 88550D              <1>     mov byte [rbp + initReqPkt.numunt], dl   ;Zero this field, max 5
   714                              <1> .mi0:   ;Now check each device for partitions
   715 0000126B 807D0D05            <1>     cmp byte [rbp + initReqPkt.numunt], 5
   716 0000126F 746C                <1>     je .msdExit ;IF we are at 5 now, we exit
   717 00001271 B482                <1>     mov ah, 82h ;LBA read
   718 00001273 B001                <1>     mov al, 1   ;1 sector
   719 00001275 B900000000          <1>     mov ecx, 0  ;Read sector 0
   720 0000127A 488D1D(2C040000)    <1>     lea rbx, msdTempBuffer  ;Get address of this space
   721 00001281 CD33                <1>     int 33h
   722 00001283 0F828E000000        <1>     jc .msdInitError
   723                              <1> ;Now we verify if this is a BPB. Removable devices can't be partitioned (yet)
   724                              <1> ;1) Check byte 0 for EBh (short jmp) and byte 2 for a 90h (nop).
   725 00001289 8A03                <1>     mov al, byte [rbx]
   726 0000128B 8A6302              <1>     mov ah, byte [rbx + 2]
   727 0000128E 663DEB90            <1>     cmp ax, 090EBh
   728 00001292 7573                <1>     jne .mimbr
   729                              <1> ;Valid BPB found! Copy to internal table and inc lastdrive
   730 00001294 4889DE              <1>     mov rsi, rbx
   731 00001297 B878000000          <1>     mov eax, bpbEx_size
   732 0000129C 89D1                <1>     mov ecx, edx    ;Temporarily save dl in ecx
   733 0000129E F7E2                <1>     mul edx
   734 000012A0 89CA                <1>     mov edx, ecx
   735 000012A2 488D3D47030000      <1>     lea rdi, .msdBPBblks
   736 000012A9 4801C7              <1>     add rdi, rax
   737 000012AC B978000000          <1>     mov ecx, bpbEx_size
   738 000012B1 4889F8              <1>     mov rax, rdi    ;Save the entry address in rax
   739 000012B4 F3A4                <1>     rep movsb   ;Copy the bpb into the bpb table
   740 000012B6 488D3D0B030000      <1>     lea rdi, .msdBPBTbl
   741 000012BD 488D3CD7            <1>     lea rdi, qword [rdi + 8*rdx]
   742 000012C1 488907              <1>     mov qword [rdi], rax
   743 000012C4 488D3DF3020000      <1>     lea rdi, .msdBIOSmap
   744 000012CB 4801D7              <1>     add rdi, rdx    ;rdx contains a number, table is a list of bytes
   745 000012CE 8817                <1>     mov byte [rdi], dl
   746 000012D0 FE450D              <1>     inc byte [rbp + initReqPkt.numunt]
   747 000012D3 FEC2                <1>     inc dl
   748 000012D5 3A15(09000000)      <1>     cmp dl, byte [numRemMSD] ;Once these are equal, we have processed last dev
   749 000012DB 758E                <1>     jne .mi0
   750                              <1> .msdExit:
   751                              <1> ;If one device only, copy its BPB pointer and drive number
   752                              <1> ;When HDD support implemented, this will check the number of remdevs not lastdrv
   753 000012DD 807D0D01            <1>     cmp byte [rbp + initReqPkt.numunt], 1
   754 000012E1 751C                <1>     jne .msdexit1
   755                              <1> ;Here ONLY if one device found
   756 000012E3 488D35DE020000      <1>     lea rsi, .msdBPBTbl
   757 000012EA 488D7E08            <1>     lea rdi, qword [rsi + 8]    ;Point to next entry
   758 000012EE 48A5                <1>     movsq   ;Copy pointer
   759 000012F0 488D35C7020000      <1>     lea rsi, .msdBIOSmap
   760 000012F7 488D7E01            <1>     lea rdi, qword [rsi + 1]
   761 000012FB A4                  <1>     movsb   ;Copy byte
   762 000012FC FE450D              <1>     inc byte [rbp + initReqPkt.numunt]
   763                              <1> .msdexit1:
   764 000012FF 4889EB              <1>     mov rbx, rbp
   765 00001302 E92FFFFFFF          <1>     jmp .msdDriverExit
   766                              <1> .mimbr:
   767                              <1> ;Goto next device without incrementing LASTDRIVE
   768 00001307 FEC2                <1>     inc dl
   769 00001309 3A15(09000000)      <1>     cmp dl, byte [numRemMSD] ;Once these are equ, we have processed last dev
   770 0000130F 0F8556FFFFFF        <1>     jne .mi0
   771 00001315 EBC6                <1>     jmp short .msdExit
   772                              <1> .msdInitError:
   773 00001317 4889EB              <1>     mov rbx, rbp
   774 0000131A E9A4FEFFFF          <1>     jmp .msdGenDiskError
   775                              <1> .msdMedChk:          ;Function 1
   776                              <1> ;Once the BIOS function is implmented that reads the changeline, use that!
   777                              <1> ;For BIOSes that dont support the changeline, the following procedure will 
   778                              <1> ; suffice.
   779 0000131F B005                <1>     mov al, 05h ;Bad request structure length
   780 00001321 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   781 00001324 0F8506FFFFFF        <1>     jne .msdWriteErrorCode
   782                              <1> 
   783 0000132A 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   784 0000132F 488D0D88020000      <1>     lea rcx, .msdBIOSmap
   785 00001336 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   786 00001339 F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   787 0000133C 7550                <1>     jnz .mmcNoChange
   788                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   789 0000133E B416                <1>     mov ah, 16h 
   790 00001340 CD33                <1>     int 33h
   791 00001342 0F827BFEFFFF        <1>     jc .msdGenDiskError
   792 00001348 80FC80              <1>     cmp ah, 80h
   793 0000134B 740E                <1>     je .mmcNoChangeLine
   794 0000134D 80FC86              <1>     cmp ah, 86h
   795 00001350 7409                <1>     je .mmcNoChangeLine
   796 00001352 84E4                <1>     test ah, ah ;No change?
   797 00001354 7438                <1>     jz .mmcNoChange
   798 00001356 F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   799 00001359 7516                <1>     jnz .mmcChange
   800                              <1> ;If nothing, fall through and test manually, should never happen though
   801                              <1> .mmcNoChangeLine:
   802                              <1> ;Now we test Media Descriptor
   803 0000135B 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   804 0000135E 488D3D63020000      <1>     lea rdi, .msdBPBTbl
   805 00001365 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax]
   806 00001369 488B3F              <1>     mov rdi, qword [rdi]    ;Dereference rdi
   807 0000136C 385715              <1>     cmp byte [rdi + bpb32.media], dl    ;Compare media descriptor bytes
   808 0000136F 7414                <1>     je .mmcUnsure
   809                              <1> .mmcChange:
   810 00001371 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   811 00001375 488D0538020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   812 0000137C 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   813 00001380 E9B1FEFFFF          <1>     jmp .msdDriverExit
   814                              <1> .mmcUnsure:
   815 00001385 C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   816 00001389 E9A8FEFFFF          <1>     jmp .msdDriverExit
   817                              <1> .mmcNoChange:
   818 0000138E C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   819 00001392 E99FFEFFFF          <1>     jmp .msdDriverExit
   820                              <1> 
   821                              <1> .msdBuildBPB:        ;Function 2
   822 00001397 B005                <1>     mov al, 05h ;Bad request structure length
   823 00001399 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   824 0000139C 0F858EFEFFFF        <1>     jne .msdWriteErrorCode
   825                              <1> 
   826 000013A2 4889DE              <1>     mov rsi, rbx
   827 000013A5 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   828 000013AA 488D0D0D020000      <1>     lea rcx, .msdBIOSmap
   829 000013B1 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   830 000013B4 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   831 000013B8 31C9                <1>     xor ecx, ecx    ;Read Sector 0
   832 000013BA B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   833 000013BF CD33                <1>     int 33h
   834 000013C1 0F82FCFDFFFF        <1>     jc .msdGenDiskError
   835                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   836 000013C7 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   837 000013CB 7418                <1>     je .mbbpb0
   838 000013CD 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   839 000013D1 7412                <1>     je .mbbpb0
   840 000013D3 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   841 000013D7 740C                <1>     je .mbbpb0
   842 000013D9 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   843 000013DD B007                <1>     mov al, 07h ;Unknown media error code
   844 000013DF 0F824BFEFFFF        <1>     jb .msdWriteErrorCode
   845                              <1> .mbbpb0:
   846 000013E5 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   847 000013E8 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   848 000013ED 488D3DD4010000      <1>     lea rdi, .msdBPBTbl
   849 000013F4 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   850 000013F8 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   851 000013FB 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   852 000013FF B90F000000          <1>     mov ecx, bpbEx_size/8
   853 00001404 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   854 00001407 E92AFEFFFF          <1>     jmp .msdDriverExit
   855                              <1> .msdIOCTLRead:       ;Function 3, returns done
   856 0000140C B005                <1>     mov al, 05h ;Bad request structure length
   857 0000140E 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   858 00001411 0F8519FEFFFF        <1>     jne .msdWriteErrorCode
   859                              <1> 
   860 00001417 E91AFEFFFF          <1>     jmp .msdDriverExit
   861                              <1> .msdRead:            ;Function 4
   862                              <1> ;Will read one sector at a time.
   863 0000141C B005                <1>     mov al, 05h ;Bad request structure length
   864 0000141E 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   865 00001421 0F8509FEFFFF        <1>     jne .msdWriteErrorCode
   866                              <1> 
   867 00001427 4889DD              <1>     mov rbp, rbx
   868 0000142A 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   869                              <1> .msdr0:
   870 0000142C B682                <1>     mov dh, 82h ;LBA Read Sectors
   871 0000142E E867010000          <1>     call .msdBlkIOCommon
   872 00001433 0F827FFDFFFF        <1>     jc .msdIOError
   873 00001439 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   874 00001441 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   875 00001449 FFC6                <1>     inc esi
   876 0000144B 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   877 0000144E 75DC                <1>     jne .msdr0
   878 00001450 4889EB              <1>     mov rbx, rbp
   879 00001453 E9DEFDFFFF          <1>     jmp .msdDriverExit
   880                              <1> .msdWrite:           ;Function 8
   881                              <1> ;Will write one sector at a time.
   882 00001458 B005                <1>     mov al, 05h ;Bad request structure length
   883 0000145A 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   884 0000145D 0F85CDFDFFFF        <1>     jne .msdWriteErrorCode
   885                              <1> 
   886 00001463 4889DD              <1>     mov rbp, rbx
   887 00001466 31F6                <1>     xor esi, esi  ;Set counter to zero
   888                              <1> .msdw0:
   889 00001468 B683                <1>     mov dh, 83h ;LBA Write Sectors
   890 0000146A E82B010000          <1>     call .msdBlkIOCommon
   891 0000146F 0F8243FDFFFF        <1>     jc .msdIOError
   892 00001475 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   893 0000147D 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   894 00001485 FFC6                <1>     inc esi
   895 00001487 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   896 0000148A 75DC                <1>     jne .msdw0
   897 0000148C 4889EB              <1>     mov rbx, rbp
   898 0000148F E9A2FDFFFF          <1>     jmp .msdDriverExit
   899                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   900                              <1> ;Will write one sector at a time and then verify it.
   901 00001494 B005                <1>     mov al, 05h ;Bad request structure length
   902 00001496 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   903 00001499 0F8591FDFFFF        <1>     jne .msdWriteErrorCode
   904                              <1> 
   905 0000149F 4889DD              <1>     mov rbp, rbx
   906 000014A2 31F6                <1>     xor esi, esi  ;Set counter to zero
   907                              <1> .msdwv0:
   908 000014A4 B683                <1>     mov dh, 83h ;LBA Write Sectors
   909 000014A6 E8EF000000          <1>     call .msdBlkIOCommon
   910 000014AB 0F8207FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   911 000014B1 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   912 000014B3 E8E2000000          <1>     call .msdBlkIOCommon
   913 000014B8 0F82FAFCFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   914 000014BE 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   915 000014C6 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   916 000014CE FFC6                <1>     inc esi
   917 000014D0 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   918 000014D3 75CF                <1>     jne .msdwv0
   919 000014D5 4889EB              <1>     mov rbx, rbp
   920 000014D8 E959FDFFFF          <1>     jmp .msdDriverExit
   921                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   922 000014DD B005                <1>     mov al, 05h ;Bad request structure length
   923 000014DF 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   924 000014E2 0F8548FDFFFF        <1>     jne .msdWriteErrorCode
   925                              <1> 
   926 000014E8 E949FDFFFF          <1>     jmp .msdDriverExit
   927                              <1> .msdDevOpen:         ;Function 13
   928 000014ED B005                <1>     mov al, 05h ;Bad request structure length
   929 000014EF 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   930 000014F2 0F8538FDFFFF        <1>     jne .msdWriteErrorCode
   931                              <1> 
   932 000014F8 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   933 000014FD 488D0DBF000000      <1>     lea rcx, .msdHdlCnt
   934 00001504 FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   935 00001507 E92AFDFFFF          <1>     jmp .msdDriverExit
   936                              <1> .msdDevClose:        ;Function 14
   937 0000150C B005                <1>     mov al, 05h ;Bad request structure length
   938 0000150E 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   939 00001511 0F8519FDFFFF        <1>     jne .msdWriteErrorCode
   940                              <1> 
   941 00001517 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   942 0000151C 488D0DA0000000      <1>     lea rcx, .msdHdlCnt
   943 00001523 FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   944 00001526 E90BFDFFFF          <1>     jmp .msdDriverExit
   945                              <1> .msdRemovableMedia:  ;Function 15
   946 0000152B B005                <1>     mov al, 05h ;Bad request structure length
   947 0000152D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   948 00001530 0F85FAFCFFFF        <1>     jne .msdWriteErrorCode
   949                              <1> 
   950 00001536 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   951 0000153B 488D0D7C000000      <1>     lea rcx, .msdBIOSmap
   952 00001542 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   953 00001545 A880                <1>     test al, 80h
   954 00001547 0F84E9FCFFFF        <1>     jz .msdDriverExit   ;If removable, busy bit is clear
   955 0000154D 66C743030002        <1>     mov word [rbx + remMediaReqPkt.status], 0200h ;Set Busy bit
   956 00001553 E9DEFCFFFF          <1>     jmp .msdDriverExit
   957                              <1> .msdGenericIOCTL:    ;Function 19
   958 00001558 B005                <1>     mov al, 05h ;Bad request structure length
   959 0000155A 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   960 0000155D 0F85CDFCFFFF        <1>     jne .msdWriteErrorCode
   961                              <1> 
   962 00001563 E9CEFCFFFF          <1>     jmp .msdDriverExit
   963                              <1> .msdGetLogicalDev:   ;Function 23
   964 00001568 B005                <1>     mov al, 05h ;Bad request structure length
   965 0000156A 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   966 0000156D 0F85BDFCFFFF        <1>     jne .msdWriteErrorCode
   967                              <1> 
   968 00001573 8A0544000000        <1>     mov al, byte [.msdCurDev]
   969 00001579 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   970 0000157C E9B5FCFFFF          <1>     jmp .msdDriverExit
   971                              <1> .msdSetLogicalDev:   ;Function 24
   972 00001581 B005                <1>     mov al, 05h ;Bad request structure length
   973 00001583 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   974 00001586 0F85A4FCFFFF        <1>     jne .msdWriteErrorCode
   975                              <1> 
   976 0000158C 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   977 0000158F 880528000000        <1>     mov byte [.msdCurDev], al
   978 00001595 E99CFCFFFF          <1>     jmp .msdDriverExit
   979                              <1> 
   980                              <1> .msdBlkIOCommon:  ;Does block IO
   981                              <1> ;Called with rbp containing old rbx value and ah with function number
   982                              <1> ;Error handled by caller
   983                              <1> ;Sector count handled by caller
   984                              <1> ;Called with dh = BIOS function number
   985 0000159A 480FB64501          <1>     movzx rax, byte [rbp + ioReqPkt.unitnm]
   986 0000159F 8A90[BE150000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   987 000015A5 488B4D1A            <1>     mov rcx, qword [rbp + ioReqPkt.strtsc]  ;Get start sector
   988 000015A9 488B5D0E            <1>     mov rbx, qword [rbp + ioReqPkt.bufptr]  ;Get Memory Buffer
   989 000015AD 88F4                <1>     mov ah, dh
   990 000015AF B001                <1>     mov al, 01h ;Do one sector at a time 
   991 000015B1 CD33                <1>     int 33h
   992 000015B3 C3                  <1>     ret
   993                              <1> 
   994 000015B4 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   995                              <1> ;LASTDRIVE default is 5
   996 000015BD 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   997                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   998 000015BE FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
   999 000015C3 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
  1000 000015C8 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
  1000 000015D1 000000000000000000- <1>
  1000 000015DA 000000000000000000- <1>
  1000 000015E3 000000000000000000- <1>
  1000 000015EC 00000000            <1>
  1001 000015F0 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
  1001 000015F9 000000000000000000- <1>
  1001 00001602 000000000000000000- <1>
  1001 0000160B 000000000000000000- <1>
  1001 00001614 000000000000000000- <1>
  1001 0000161D 000000000000000000- <1>
  1001 00001626 000000000000000000- <1>
  1001 0000162F 000000000000000000- <1>
  1001 00001638 000000000000000000- <1>
  1001 00001641 000000000000000000- <1>
  1001 0000164A 000000000000000000- <1>
  1001 00001653 000000000000000000- <1>
  1001 0000165C 000000000000000000- <1>
  1001 00001665 000000000000000000- <1>
  1001 0000166E 000000000000000000- <1>
  1001 00001677 000000000000000000- <1>
  1001 00001680 000000000000000000- <1>
  1001 00001689 000000000000000000- <1>
  1001 00001692 000000000000000000- <1>
  1001 0000169B 000000000000000000- <1>
  1001 000016A4 000000000000000000- <1>
  1001 000016AD 000000000000000000- <1>
  1001 000016B6 000000000000000000- <1>
  1001 000016BF 000000000000000000- <1>
  1001 000016C8 000000000000000000- <1>
  1001 000016D1 000000000000000000- <1>
  1001 000016DA 000000000000000000- <1>
  1001 000016E3 000000000000000000- <1>
  1001 000016EC 000000000000000000- <1>
  1001 000016F5 000000000000000000- <1>
  1001 000016FE 000000000000000000- <1>
  1001 00001707 000000000000000000- <1>
  1001 00001710 000000000000000000- <1>
  1001 00001719 000000000000000000- <1>
  1001 00001722 000000000000000000- <1>
  1001 0000172B 000000000000000000- <1>
  1001 00001734 000000000000000000- <1>
  1001 0000173D 000000000000000000- <1>
  1001 00001746 000000000000000000- <1>
  1001 0000174F 000000000000000000- <1>
  1001 00001758 000000000000000000- <1>
  1001 00001761 000000000000000000- <1>
  1001 0000176A 000000000000000000- <1>
  1001 00001773 000000000000000000- <1>
  1001 0000177C 000000000000000000- <1>
  1001 00001785 000000000000000000- <1>
  1001 0000178E 000000000000000000- <1>
  1001 00001797 000000000000000000- <1>
  1001 000017A0 000000000000000000- <1>
  1001 000017A9 000000000000000000- <1>
  1001 000017B2 000000000000000000- <1>
  1001 000017BB 000000000000000000- <1>
  1001 000017C4 000000000000000000- <1>
  1001 000017CD 000000000000000000- <1>
  1001 000017D6 000000000000000000- <1>
  1001 000017DF 000000000000000000- <1>
  1001 000017E8 000000000000000000- <1>
  1001 000017F1 000000000000000000- <1>
  1001 000017FA 000000000000000000- <1>
  1001 00001803 000000000000000000- <1>
  1001 0000180C 000000000000000000- <1>
  1001 00001815 000000000000000000- <1>
  1001 0000181E 000000000000000000- <1>
  1001 00001827 000000000000000000- <1>
  1001 00001830 000000000000000000- <1>
  1001 00001839 000000000000000000- <1>
  1001 00001842 000000000000        <1>
  1002                              <1> 
  1003                              <1> endptr equ $
    15                                  Segment dynamicDataArea nobits valign=1 vfollows=resSeg
    16                                  %include "dosDynaDataArea.asm"
    17                              <1> ;Create DPB chain of first 5 available DPB slots
    18 00000000 <res 36h>           <1> firstDPB        resb dpb_size
    19 00000036 <res 36h>           <1> secondDPB       resb dpb_size
    20 0000006C <res 36h>           <1> thirdDPB        resb dpb_size
    21 000000A2 <res 36h>           <1> fourthDPB       resb dpb_size
    22 000000D8 <res 36h>           <1> fifthDPB        resb dpb_size 
    23                              <1> 
    24                              <1> ;Create SFT header and corresponding array of five default sft entries
    25 0000010E <res Ah>            <1> firstSftHeader  resb sfth_size
    26 00000118 <res 3Dh>           <1> firstSft        resb sft_size
    27 00000155 <res 3Dh>           <1> secondSft       resb sft_size
    28 00000192 <res 3Dh>           <1> thirdSft        resb sft_size
    29 000001CF <res 3Dh>           <1> fourthSft       resb sft_size
    30 0000020C <res 3Dh>           <1> fifthSft        resb sft_size
    31                              <1> 
    32                              <1> ;Create a five drive CDS here so we can jettison it if config wants more
    33 00000249 <res 1C7h>          <1> initCDS         resb 5*cds_size 
    34                              <1> ;Always jettison this space
    35                              <1> DOSENDPTR:   ;Points to the end of the initially reserved DOS area
    36 00000410 <res 1Ch>           <1> tmpBufHdr       resb bufferHdr_size
    37 0000042C <res 200h>          <1> msdTempBuffer   resb 512    ;Reserve one sectors worth of space
    38                              <1> dynamicDataAreaLength equ $
