     1                                  [map all scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  %include "driverStruc.inc"
     5                              <1> 
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     8                              <1> ; device driver related structures.                     ;
     9                              <1> ;-------------------------------------------------------;
    10                              <1> 
    11                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    12                              <1> 
    13 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    14 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    15 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    16 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    17 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Unit number byte (Block)
    18                              <1> drvHdrLen equ $ - drvHdr
    19                              <1> endstruc
    20                              <1> 
    21                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    22                              <1> 
    23                              <1>     .hdrlen resb 1  ;Length of the request header
    24                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    25                              <1>     .cmdcde resb 1  ;Command code
    26                              <1>     .status resw 1  ;Status word
    27                              <1>     .devptr resq 1  ;Device queue pointer field
    28                              <1> 
    29                              <1> %endmacro
    30                              <1> 
    31                              <1> struc drvReqHdr
    32                              <1>     drvReqHdrM
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    33                              <1> endstruc
    34                              <1> 
    35                              <1> struc initReqPkt  ;Init Request Packet
    36                              <1> 
    37                              <1>     drvReqHdrM   ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    38 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
    39 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
    40 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
    41 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
    42                              <1> 
    43                              <1> endstruc
    44                              <1> 
    45                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
    46                              <1> 
    47                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    48 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    49 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
    50 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
    51                              <1> 
    52                              <1> endstruc
    53                              <1> 
    54                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
    55                              <1> 
    56                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    57 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    58 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    59 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
    60                              <1> 
    61                              <1> endstruc
    62                              <1> 
    63                              <1> struc ioReqPkt   ;IO Request Packet
    64                              <1> 
    65                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    66 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    67 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    68 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
    69 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
    70 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
    71                              <1> 
    72                              <1> endstruc
    73                              <1> 
    74                              <1> struc nonDestInNoWaitReqPkt    ;Nondestructive Input No Wait Request Packet
    75                              <1>     
    76                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    77 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
    78                              <1> 
    79                              <1> endstruc
    80                              <1> 
    81                              <1> struc statusReqPkt   ;Status Request Packet
    82                              <1> 
    83                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    84                              <1> 
    85                              <1> endstruc
    86                              <1> 
    87                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
    88                              <1> 
    89                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    90                              <1>      
    91                              <1> endstruc
    92                              <1> 
    93                              <1> struc openReqPkt ;Open Device Request Packet
    94                              <1> 
    95                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    96                              <1>      
    97                              <1> endstruc
    98                              <1> 
    99                              <1> struc closeReqPkt ;Close Device Request Packet
   100                              <1> 
   101                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   102                              <1>      
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc remMediaReqPkt ;Removeable Media1 Request Packet
   106                              <1> 
   107                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   108                              <1>      
   109                              <1> endstruc
   110                              <1> 
   111                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   112                              <1> 
   113                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   114 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   115 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   116 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   117 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   118 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   119                              <1> 
   120                              <1> endstruc
   121                              <1> 
   122                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   123                              <1>     
   124                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   125 0000000D ??                  <1>     .getcmd resb 1  ;Command code
   126 0000000E ????                <1>     .cmdsts resw 1  ;Command status word
   127                              <1> 
   128                              <1> endstruc
   129                              <1> 
   130                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   131                              <1>     
   132                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   133 0000000D ??                  <1>     .setcmd resb 1  ;Command code
   134 0000000E ????                <1>     .cmdsts resw 1  ;Command status word
   135                              <1> 
   136                              <1> endstruc
     5                                  %include "fatStruc.inc"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ; This include file contains miscellaneous FAT driver   ;
     9                              <1> ; structures. exFAT will have it's own files at a later ;
    10                              <1> ; stage.                                                ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    14                              <1> 
    15 00000000 ??????              <1>     .jmpBoot    resb 3 
    16 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    17 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    18 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    19 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    20 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    21 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    22 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    23 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    24 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    25 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    26 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    27 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    28 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    29                              <1> 
    30 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    31 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    32 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    33 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    34 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    35 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    40                              <1> 
    41 00000000 ??????              <1>     .jmpBoot    resb 3
    42 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    43 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    44 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    45 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    46 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    47 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    48 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    49 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    50 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    51 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    52 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    53 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    54 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    55                              <1> 
    56 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    57 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    58 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    59 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    60 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    61 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    62 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    63                              <1> 
    64 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    65 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    66 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    67 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    68 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    69 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    70                              <1> 
    71                              <1> endstruc
    72                              <1> 
    73                              <1> 
    74                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
    75                              <1> 
    76 00000000 ??????              <1>     .jmpBoot                resb 3 
    77 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
    78 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
    79 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
    80 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
    81 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
    82 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
    83 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
    84 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
    85 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
    86 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
    87 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
    88 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
    89 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
    90 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
    91 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
    92 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
    93 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
    94 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
    95                              <1> bpbExLen    equ $ - bpbEx
    96                              <1> endstruc
     6                                  %include "dosStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous internal     ;
    10                              <1> ; SCP/DOS structures.                                   ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> ;------------------------------------------------------------------------;
    14                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    15                              <1> ; its file system structure. This is used to locate files and structures
    16                              <1> ; on the device itself and to translate file requests to cluster chains
    17                              <1> ; to LBAs to pass to the disk driver..
    18                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    19                              <1> ; drivers Initialise routine has been called.
    20                              <1> ;------------------------------------------------------------------------;
    21                              <1> struc dpb        ;Drive Parameter Block
    22                              <1> 
    23 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...)
    24 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device
    25 00000002 ??                  <1>     .bBytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
    26 00000003 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1
    27                              <1> ;                                       i.e. (2^bSectorsPerClusterShift) - 1
    28 00000004 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent
    29 00000005 ????????            <1>     .dFAToffset              resd 1  ;Vol rel offset of first FAT, in sectors
    30 00000009 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs
    31 0000000A ????                <1>     .wNumberRootDirEntries   resw 1  ;In sectors
    32 0000000C ????????            <1>     .dClusterHeapOffset      resd 1  ;Start of data area, in sectors
    33 00000010 ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters (volume size)
    34 00000014 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors
    35 00000018 ????????            <1>     .dFirstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
    36 0000001C ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header
    37 00000024 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor
    38 00000025 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1)
    39 00000026 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    40 0000002E ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search
    41 00000032 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown
    42                              <1> 
    43                              <1> endstruc
    44                              <1> 
    45                              <1> ;------------------------------------------------------------------------;
    46                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    47                              <1> ; All disk pathing requests go via the CDS for that drive.
    48                              <1> ; The default drive is the last accessed drive, this number is stored
    49                              <1> ; in the DOS data area.
    50                              <1> ; The CDS is stored as an array with the offset into the array being 
    51                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    52                              <1> ;
    53                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    54                              <1> ;------------------------------------------------------------------------;
    55                              <1> struc cds       ;Current Directory structure
    56 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    57 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    58 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    59 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    60 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    61 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    62                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    63                              <1> ; another, we save the number of chars to skip to that deep level).
    64                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    65                              <1> ; Flags: Bit 15 set = Network drive
    66                              <1> ;        Bit 14 set = Physical drive
    67                              <1> ;        Bit 13 set = JOIN'ed drive
    68                              <1> ;        Bit 12 set = SUBST'ed drive
    69                              <1> ;        Bit 7  set = Redirected, not network, drive (This is how MSCDEX worked)
    70                              <1> endstruc
    71                              <1> 
    72                              <1> ;------------------------------------------------------------------------;
    73                              <1> ; The SFT is a way to allow applications to open file handles to files 
    74                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    75                              <1> ; under the first header, and then a second header will be linked to the 
    76                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    77                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    78                              <1> ; using the FCBS= command. Default FCBS=5.
    79                              <1> ;
    80                              <1> ; A file handle describes the file, and the location within the file that
    81                              <1> ; we are reading. The file handle can be manipulated without the file
    82                              <1> ; being in memory, thus allowing the user to access data without needing 
    83                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    84                              <1> ; accessing devices, by treating them as files with their drivers 
    85                              <1> ; responding and translating the manipulations of the file handle itself.
    86                              <1> ; Neither the driver nor the application should see or use the SFT for
    87                              <1> ; the handle, as it is subject to change (and will change when file 
    88                              <1> ; sharing provisions are included). The DOS will make requests to the 
    89                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    90                              <1> ; track of the information in the SFT entry for that handle. 
    91                              <1> ;
    92                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    93                              <1> ; can point to the same file. It all depends on what the applications 
    94                              <1> ; want to do with the File.
    95                              <1> ;
    96                              <1> ; !!!!IMPORTANT!!!!
    97                              <1> ; Currently there are plans for File Sharing, but I include minimal 
    98                              <1> ; provisions for it. I really just wanna get a DOS out the door.
    99                              <1> ;
   100                              <1> ;Each SFT may look like this:
   101                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   102                              <1> ;            |                |
   103                              <1> ;       wNumFiles*sft    wNumFiles*sft
   104                              <1> ;
   105                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   106                              <1> ; System FCBs.
   107                              <1> ;
   108                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   109                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   110                              <1> ;
   111                              <1> ; DEFAULT FILES=15, MINIMUM FILES=5
   112                              <1> ; DEFAULT FCBS=5, MINIMUM FCBS=5
   113                              <1> ;------------------------------------------------------------------------;
   114                              <1> struc sfth   ;System file table header
   115                              <1> ; This is the SFT header.
   116                              <1> ; This structure comes before the start of the first file in the array/table.
   117 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   118 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   119                              <1> endstruc
   120                              <1> 
   121                              <1> struc sft
   122                              <1> ;This is the file struc itself
   123 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   124 00000002 ????                <1>     .wOpenMode   resw 1    ;Bit 15 set if opened via FCB
   125 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   126 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   127 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   128 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file
   129 00000013 ????                <1>     .wTime       resw 1    ;File Time
   130 00000015 ????                <1>     .wDate       resw 1    ;File Date
   131 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   132 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset in file, in bytes
   133 0000001F ????                <1>     .wRelClust   resw 1    ;Relative cluster in file of the last cluster accessed
   134 00000021 ????????            <1>     .dDirSect    resd 1    ;Relative number of sector containing directory entry 
   135 00000025 ??                  <1>     .bNumDirEnt  resb 1    ;Number of dir entry within sector (byte offset/32)
   136 00000026 <res Bh>            <1>     .sFCBName    resb 11   ;8.3 Filename
   137 00000031 ????????????????    <1>     .qPSPOwner   resq 1    ;Address of PSP of program which first opened this file
   138 00000039 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster of last cluster accessed
   139                              <1> endstruc
   140                              <1> 
   141                              <1> ;------------------------------------------------------------------------;
   142                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   143                              <1> ; to an internal buffer, and then copying it to the specified location
   144                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   145                              <1> ; another request for the same sector from the same device is made, so 
   146                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   147                              <1> ; size, selected according to the largest detected sector size during 
   148                              <1> ; the initial loadup.
   149                              <1> ;
   150                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   151                              <1> ;
   152                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   153                              <1> ;------------------------------------------------------------------------;
   154                              <1> 
   155                              <1> struc bufferHdr
   156 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   157 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for
   158 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   159 0000000A ????????            <1>     .bufferLBA   resd  1   ;LBA the buffer contains
   160 0000000E ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   161 0000000F ??                  <1>     .bufFAToff   resb  1   ;Sector offset of the backup copy of the FAT on disk
   162 00000010 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   163                              <1> endstruc
     7                                  
     8                                  Segment dSeg nobits align=1 
     9 00000000 ????????????????            dosSegPtr   resq 1    ;Pointer to the data Segment itself
    10 00000008 ??                          bootDrive   resb 1    ;The Int 33h device we booted from
    11 00000009 <res Dh>                    requestHdr  resb 13    ;The device driver header
    12 00000016 <res 14h>                               resb 20    ;Reserve xtra space for cmd data, with padding
    13 0000002A ????????????????            sysVarsPtr  resq 1    ;Pointer to dpbHeadPtr, head of Sys Vars struc below
    14 00000032 ????????????????            mcbChainPtr resq 1    ;Pointer to the MCB chain
    15 0000003A ????????????????            dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain
    16 00000042 ????????????????            sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    17 0000004A ????????????????            clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header
    18                                      ;                    The last driver loaded with the CLOCK$ bit[3] set 
    19 00000052 ????????????????            conPtr      resq 1    ;Pointer to the current active CON device header 
    20                                      ;                    The last driver loaded with the STDIN bit[0] set
    21 0000005A ????                        maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)
    22 0000005C ????????????????            bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain
    23 00000064 ????????????????            cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array
    24 0000006C ????????????????            sfcbHeadPTr resq 1    ;Pointer to the head of the System FCB chain
    25 00000074 ????                        numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    26 00000076 ??                          numMSDdrv   resb 1    ;Number of mass storage devices detected in system
    27 00000077 ??                          lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]
    28 00000078 ??                          numJoinDrv  resb 1    ;Number of Joined Drives
    29 00000079 <res 22h>                   nulDevHdr   resb drvHdrLen
    30                                  
    31                                  
    32 0000009B ??                          inDOS       resb 1    ;Inc on each DOS call, dec when leaving
    33 0000009C ??                          breakFlag   resb 1    ;If set, check for CTRL+C on all DOS calls
    34 0000009D ??                          defaultDrv  resb 1    ;Default, last accessed drive
    35                                  
    36 0000009E <res 148h>                  critStack   resq 41
    37 000001E6 ????????????????            critStakTop resq 1
    38 000001EE <res 638h>                  IOStack     resq 199
    39 00000826 ????????????????            IOStakTop   resq 1
    40 0000082E <res 638h>                  DiskStack   resq 199
    41 00000E66 ????????????????            DiskStakTop resq 1
    42                                      dSegLen     equ     $
    43                                  
    44                                  Segment loaderSeg align=1
    45                                  ; We arrive here with the following values in the registers.
    46                                  ; rbx =  LBA of first Logical Block after SCP/BIOS
    47                                  ; dx  = Int 33h boot device number
    48                                  ; fs  = userbase pointer (pointer to first usable block of RAM)
    49 00000000 55AA                        dw 0AA55h           ;Initial signature
    50 00000002 64881425[08000000]          mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    51                                  
    52 0000000A B9000100C0                  mov ecx, 0C0000100h ;Read FS MSR
    53 0000000F 0F32                        rdmsr
    54 00000011 89D7                        mov edi, edx        ;Get the hi dword, and clear the upper bytes
    55 00000013 48C1E720                    shl rdi, 20h        ;Shift high
    56 00000017 89C7                        mov edi, eax        ;Get the low dword in
    57                                  
    58 00000019 6448893C25-                 mov qword fs:[dosSegPtr], rdi 
    58 0000001E [00000000]         
    59 00000022 4889FD                      mov rbp, rdi    ;Save the start of dosSeg in rdx 
    60 00000025 4881C7[6E0E0000]            add rdi, dSegLen ;Move destination past end of data area
    61 0000002C 488D35(00000000)            lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    62 00000033 B900100000                  mov ecx, 1000h
    63 00000038 F348A5                      rep movsq
    64                                  ;Modify the pointers in nData before putting them in the data area
    65                                      ;add qword [nData.nxtPtr], rdx
    66                                      ;add qword [nData.strPtr], rdx
    67                                      ;add qword [nData.intPtr], rdx
    68 0000003B 6687DB                      xchg bx, bx
    69 0000003E 48BB-                       mov rbx, conDriver
    69 00000040 [1002000000000000] 
    70 00000048 488D5C1D00                  lea rbx, qword [rbp+rbx]
    71 0000004D 30C0                        xor al, al
    72 0000004F FFD3                        call rbx
    73                                  
    74 00000051 48BB-                       mov rbx, msdDriver
    74 00000053 [7603000000000000] 
    75 0000005B 488D5C1D00                  lea rbx, qword [rbp+rbx]
    76 00000060 30C0                        xor al, al
    77 00000062 FFD3                        call rbx
    78                                  
    79 00000064 488D2D12000000              lea rbp, qword [startmsg]   ;Get the absolute address of message
    80 0000006B B804130000                  mov eax, 1304h
    81 00000070 CD30                        int 30h
    82                                  l1:
    83 00000072 6631C0                      xor ax, ax
    84 00000075 CD36                        int 36h
    85 00000077 B40E                        mov ah, 0Eh
    86 00000079 CD30                        int 30h
    87 0000007B EBF5                        jmp short l1
    88                                  
    89 0000007D 5374617274696E6720-     startmsg db "Starting SCP/DOS...",0Ah,0Dh,0
    89 00000086 5343502F444F532E2E-
    89 0000008F 2E0A0D00           
    90                                  nData:
    91 00000093 [6100000000000000]          dq conHdr
    92 0000009B 0480                        dw 08004h
    93 0000009D [0902000000000000]          dq nulStrat
    94 000000A5 [0F02000000000000]          dq nulIntr
    95 000000AD 4E554C2020202020            db "NUL     " ;Default NUL data
    96                                  
    97                                  Segment resSeg follows=loaderSeg align=1 vfollows=dSeg valign=1 
    98                                  ;-----------------------------------:
    99                                  ;       Misc System routines        :
   100                                  ;-----------------------------------:
   101                                  findLRUBuffer: 
   102                                  ;Finds least recently used buffer, links it and returns ptr to it in rbx
   103                                  ;Input: Nothing
   104                                  ;Output: rbx = Pointer to the buffer to use
   105 00000000 52                          push rdx
   106 00000001 488B1D(5C000000)            mov rbx, qword [bufHeadPtr]
   107 00000008 48813BFFFFFFFF              cmp qword [rbx + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   108 0000000F 7502                        jne .flb1
   109 00000011 5A                          pop rdx
   110 00000012 C3                          ret
   111                                  .flb1:
   112 00000013 4889DA                      mov rdx, rbx    ;Save a ptr to the previous buffer header
   113 00000016 488B1A                      mov rbx, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   114 00000019 48813BFFFFFFFF              cmp qword [rbx + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   115 00000020 75F1                        jne .flb1   ;If not LRU, keep walking, else process
   116 00000022 48C702FFFFFFFF              mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   117 00000029 488B15(5C000000)            mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   118 00000030 48891D(5C000000)            mov qword [bufHeadPtr], rbx    ;Sysvars to point to new buffer
   119 00000037 488913                      mov qword [rbx + bufferHdr.nextBufPtr], rdx
   120 0000003A 5A                          pop rdx
   121 0000003B C3                          ret
   122                                  
   123                                  findDPB:
   124                                  ;Finds the DPB for a given drive
   125                                  ;Input:   dl = Drive number (0=A, 1=B etc...)
   126                                  ;Output: al = 00, rbx = Pointer to the DPB
   127                                  ;        al = -1, Failed, no DPB for device, rbx destroyed
   128 0000003C 488B1D(3A000000)            mov rbx, qword [dpbHeadPtr]
   129                                  .fd1:
   130 00000043 30C0                        xor al, al
   131 00000045 3813                        cmp byte [rbx + dpb.bDriveNumber], dl
   132 00000047 740F                        je .fd2
   133 00000049 488B5B26                    mov rbx, qword [rbx + dpb.qNextDPBPtr]
   134 0000004D B0FF                        mov al, -1
   135 0000004F 4881FBFFFFFFFF              cmp rbx, -1 ;If rbx followed last item in list, no DPB exists for dl
   136 00000056 75EB                        jne .fd1
   137                                  .fd2:
   138 00000058 C3                          ret
   139                                  ;-----------------------------------:
   140                                  ;       File System routines        :
   141                                  ;-----------------------------------:
   142                                  FATprocs:
   143                                  ;-----------------------------------:
   144                                  ;        Interrupt routines         :
   145                                  ;-----------------------------------:
   146                                  int49hHook:    ;Called with char to transfer in al
   147 00000059 50                          push rax
   148 0000005A B40E                        mov ah, 0Eh
   149 0000005C CD30                        int 30h
   150 0000005E 58                          pop rax
   151 0000005F 48CF                        iretq
   152                                  ;-----------------------------------:
   153                                  ;          Driver routines          :
   154                                  ;-----------------------------------:
   155                                  drivers:
   156                                  conHdr:
   157 00000061 [8300000000000000]          dq auxHdr
   158 00000069 1308                        dw 0813h
   159 0000006B [F901000000000000]          dq commonStrat
   160 00000073 [1002000000000000]          dq conDriver
   161 0000007B 434F4E2020202020            db "CON     "
   162                                  auxHdr:
   163 00000083 [A500000000000000]          dq prnHdr
   164 0000008B 0080                        dw 08000h
   165 0000008D [F901000000000000]          dq commonStrat
   166 00000095 [CB02000000000000]          dq com1Intr
   167 0000009D 4155582020202020            db "AUX     "
   168                                  prnHdr:
   169 000000A5 [C700000000000000]          dq clkHdr
   170 000000AD 40A0                        dw 0A040h
   171 000000AF [F901000000000000]          dq commonStrat
   172 000000B7 [9301000000000000]          dq lpt1Hdr
   173 000000BF 50524E2020202020            db "PRN     "
   174                                  clkHdr:
   175 000000C7 [E900000000000000]          dq msdHdr
   176 000000CF 0880                        dw 08008h
   177 000000D1 [F901000000000000]          dq commonStrat
   178 000000D9 [CB02000000000000]          dq clkDriver
   179 000000E1 434C4F434B242020            db "CLOCK$  "
   180                                  msdHdr:
   181 000000E9 [0B01000000000000]          dq com1Hdr
   182 000000F1 4008                        dw 00840h
   183 000000F3 [F901000000000000]          dq commonStrat
   184 000000FB [7603000000000000]          dq msdDriver
   185 00000103 0000000000000000            db 0,0,0,0,0,0,0,0
   186                                  com1Hdr:
   187 0000010B [2D01000000000000]          dq com2Hdr
   188 00000113 0080                        dw 08000h
   189 00000115 [F901000000000000]          dq commonStrat
   190 0000011D [CB02000000000000]          dq com1Intr
   191 00000125 434F4D3120202020            db "COM1    "
   192                                  com2Hdr:
   193 0000012D [4F01000000000000]          dq com3Hdr
   194 00000135 0080                        dw 08000h
   195 00000137 [F901000000000000]          dq commonStrat
   196 0000013F [D402000000000000]          dq com2Intr
   197 00000147 434F4D3220202020            db "COM2    "
   198                                  com3Hdr:
   199 0000014F [7101000000000000]          dq com4Hdr
   200 00000157 0080                        dw 08000h
   201 00000159 [F901000000000000]          dq commonStrat
   202 00000161 [DD02000000000000]          dq com3Intr
   203 00000169 434F4D3320202020            db "COM3    "
   204                                  com4Hdr:
   205 00000171 [9301000000000000]          dq lpt1Hdr
   206 00000179 0080                        dw 08000h
   207 0000017B [F901000000000000]          dq commonStrat
   208 00000183 [E602000000000000]          dq com4Intr
   209 0000018B 434F4D3420202020            db "COM4    "
   210                                  lpt1Hdr:
   211 00000193 [B501000000000000]          dq lpt2Hdr
   212 0000019B 40A0                        dw 0A040h
   213 0000019D [F901000000000000]          dq commonStrat
   214 000001A5 [6603000000000000]          dq lptDriver
   215 000001AD 4C50543120202020            db "LPT1    "
   216                                  lpt2Hdr:
   217 000001B5 [D701000000000000]          dq lpt3Hdr
   218 000001BD 40A0                        dw 0A040h
   219 000001BF [F901000000000000]          dq commonStrat
   220 000001C7 [6603000000000000]          dq lptDriver
   221 000001CF 4C50543220202020            db "LPT2    "
   222                                  lpt3Hdr:
   223 000001D7 FFFFFFFFFFFFFFFF            dq -1
   224 000001DF 40A0                        dw 0A040h
   225 000001E1 [F901000000000000]          dq commonStrat
   226 000001E9 [6603000000000000]          dq lptDriver
   227 000001F1 4C50543320202020            dq "LPT3    "
   228                                  
   229                                  commonStrat:
   230                                  ;DOS calls this function with rbx=Ptr to request header
   231 000001F9 48891D01000000              mov qword [reqHdrPtr], rbx
   232 00000200 C3                          ret
   233 00000201 0000000000000000        reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
   234                                  
   235                                  nulStrat:
   236 00000209 66C743030001                mov word [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
   237                                  nulIntr:
   238 0000020F C3                          ret
   239                                  
   240                                  conDriver:
   241 00000210 50                          push rax
   242 00000211 53                          push rbx
   243 00000212 488B1DE8FFFFFF              mov rbx, qword [reqHdrPtr]
   244 00000219 8A4302                      mov al, byte [rbx + drvReqHdr.cmdcde]
   245 0000021C 84C0                        test al, al
   246 0000021E 7421                        jz conInit
   247 00000220 3C04                        cmp al, 4
   248 00000222 744D                        jz conRead
   249 00000224 3C05                        cmp al, 5
   250 00000226 7466                        jz conNondestructiveRead
   251 00000228 3C06                        cmp al, 6
   252 0000022A 740C                        jz conExit
   253 0000022C 3C07                        cmp al, 7
   254 0000022E 7471                        jz conFlushInputBuffers
   255 00000230 3C08                        cmp al, 8
   256 00000232 7479                        jz conWrite
   257 00000234 3C09                        cmp al, 9
   258 00000236 7475                        jz conWrite
   259                                  ;All other cases fall through here
   260                                  conExit:
   261 00000238 66814B030001                or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   262 0000023E 5B                          pop rbx
   263 0000023F 58                          pop rax
   264 00000240 C3                          ret
   265                                  conInit:    ;Function 0
   266 00000241 52                          push rdx
   267                                      ;Flush keyboard buffer
   268                                  .ci0:
   269 00000242 B401                        mov ah, 01      ;Get buffer status
   270 00000244 CD36                        int 36h
   271 00000246 7406                        jz .ci1      ;If zero clear => no more keys to read
   272 00000248 30E4                        xor ah, ah
   273 0000024A CD36                        int 36h ;Read key to flush from buffer
   274 0000024C EBF4                        jmp short .ci0
   275                                  .ci1:
   276 0000024E B800050000                  mov eax, 0500h  ;Set page zero as the default page
   277 00000253 CD30                        int 30h
   278 00000255 B402                        mov ah, 02h
   279 00000257 31D2                        xor edx, edx    ;Set screen cursor to top right corner
   280 00000259 88D7                        mov bh, dl      ;Set cursor for page 0
   281 0000025B CD30                        int 30h
   282 0000025D B707                        mov bh, 07h     ;Grey/Black attribs
   283 0000025F B800060000                  mov eax, 0600h  ;Clear whole screen
   284 00000264 CD30                        int 30h
   285 00000266 5A                          pop rdx
   286 00000267 EBCF                        jmp short conExit
   287                                  conIORead:
   288 00000269 66C743030380                mov word [rbx + drvReqHdr.status], 8003h    ;Error, unknown command!
   289 0000026F EBC7                        jmp short conExit
   290                                  conRead:    ;Function 4
   291 00000271 57                          push rdi
   292 00000272 51                          push rcx
   293 00000273 488B7B0E                    mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   294 00000277 31C9                        xor ecx, ecx    ;Zero the char counter
   295                                  .cr1:
   296 00000279 3B4B16                      cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   297 0000027C 7409                        je .cre2
   298 0000027E 31C0                        xor eax, eax
   299 00000280 CD36                        int 36h
   300 00000282 AA                          stosb   ;Store char in al into buffer and inc rdi
   301 00000283 FFC1                        inc ecx
   302 00000285 EBF2                        jmp short .cr1
   303                                  .cre2:
   304 00000287 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   305 0000028A 59                          pop rcx
   306 0000028B 5F                          pop rdi
   307 0000028C EBAA                        jmp short conExit
   308                                  conNondestructiveRead:  ;Function 5
   309 0000028E B401                        mov ah, 01h     ;Get key if exists
   310 00000290 CD36                        int 36h
   311 00000292 7405                        jz .cnr           ;If zero clear => no key, go forwards
   312                                      ;Keystroke available
   313 00000294 88430D                      mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Move char in al
   314 00000297 EB9F                        jmp short conExit
   315                                  .cnr: ;No keystroke available
   316 00000299 66C743030003                mov word [rbx + nonDestInNoWaitReqPkt.status], 0300h   ;Set busy bit
   317 0000029F EB97                        jmp short conExit
   318                                  conFlushInputBuffers:   ;Function 7
   319 000002A1 B401                        mov ah, 01      ;Get buffer status
   320 000002A3 CD36                        int 36h
   321 000002A5 7491                        jz conExit      ;If zero clear => no more keys to read
   322 000002A7 30E4                        xor ah, ah
   323 000002A9 CD36                        int 36h ;Read key to flush from buffer
   324 000002AB EBF4                        jmp short conFlushInputBuffers
   325                                  conWrite:   ;Function 8 and 9
   326 000002AD 56                          push rsi
   327 000002AE 51                          push rcx
   328 000002AF 488B730E                    mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   329 000002B3 31C9                        xor ecx, ecx    ;Zero the char counter
   330                                  .cw1: 
   331 000002B5 3B4B16                      cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   332 000002B8 7407                        je .cw2
   333 000002BA AC                          lodsb   ;Get char into al, and inc rsi
   334 000002BB CD49                        int 49h ;Fast print char
   335 000002BD FFC1                        inc ecx
   336 000002BF EBF4                        jmp short .cw1 ;keep printing until all chars printed
   337                                  .cw2:
   338 000002C1 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   339 000002C4 59                          pop rcx
   340 000002C5 5E                          pop rsi
   341 000002C6 E96DFFFFFF                  jmp conExit
   342                                  
   343                                  clkDriver:
   344                                  
   345                                  comDriver:
   346                                  com1Intr:
   347 000002CB C6059300000000              mov byte [comDevice], 0
   348 000002D2 EB19                        jmp short comIntr
   349                                  com2Intr:
   350 000002D4 C6058A00000001              mov byte [comDevice], 1
   351 000002DB EB10                        jmp short comIntr
   352                                  com3Intr:
   353 000002DD C6058100000002              mov byte [comDevice], 2
   354 000002E4 EB07                        jmp short comIntr
   355                                  com4Intr:
   356 000002E6 C6057800000003              mov byte [comDevice], 3
   357                                  comIntr:
   358 000002ED 50                          push rax
   359 000002EE 53                          push rbx
   360 000002EF 51                          push rcx
   361 000002F0 52                          push rdx
   362 000002F1 56                          push rsi
   363 000002F2 488B1D08FFFFFF              mov rbx, qword [reqHdrPtr]
   364 000002F9 8A4302                      mov al, byte [rbx + drvReqHdr.cmdcde]
   365 000002FC 3C04                        cmp al, 4
   366 000002FE 7418                        jz comRead
   367 00000300 3C05                        cmp al, 5
   368 00000302 7439                        jz comNondestructiveRead
   369 00000304 3C08                        cmp al, 8
   370 00000306 743D                        jz comWrite
   371 00000308 3C09                        cmp al, 9
   372 0000030A 7439                        jz comWrite
   373                                  ;All other cases fall through here
   374                                  comExit:
   375 0000030C 66814B030001                or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   376 00000312 5E                          pop rsi
   377 00000313 5A                          pop rdx
   378 00000314 59                          pop rcx
   379 00000315 5B                          pop rbx
   380 00000316 58                          pop rax
   381 00000317 C3                          ret
   382                                  comRead:
   383 00000318 57                          push rdi
   384 00000319 488B7B0E                    mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   385 0000031D 31C9                        xor ecx, ecx    ;Zero the char counter
   386                                  .cr1:
   387 0000031F 3B4B16                      cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   388 00000322 7413                        je .cre2
   389 00000324 B802000000                  mov eax, 02h    ;Recieve 
   390 00000329 668B1535000000              mov dx, word [comDevice]    ;Get transacting com device
   391 00000330 CD34                        int 34h ;Recieve Char
   392 00000332 AA                          stosb   ;Store char in al into buffer and inc rdi
   393 00000333 FFC1                        inc ecx
   394 00000335 EBE8                        jmp short .cr1
   395                                  .cre2:
   396 00000337 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   397 0000033A 5F                          pop rdi
   398 0000033B EBCF                        jmp short comExit
   399                                  comNondestructiveRead:
   400 0000033D 66C743030002                mov word [rbx + nonDestInNoWaitReqPkt.status], 0200h    ;Set busy bit 
   401 00000343 EBC7                        jmp short comExit
   402                                  comWrite:
   403 00000345 488B730E                 mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   404 00000349 31C9                        xor ecx, ecx    ;Zero the char counter
   405                                  .cw1: 
   406 0000034B 3B4B16                      cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   407 0000034E 7410                        je .cw2
   408 00000350 AC                          lodsb   ;Get char into al, and inc rsi
   409 00000351 B401                        mov ah, 01h ;Move function number into ah
   410 00000353 668B150B000000              mov dx, word [comDevice]
   411 0000035A CD34                        int 34h ;Transmit char
   412 0000035C FFC1                        inc ecx
   413 0000035E EBEB                        jmp short .cw1 ;keep printing until all chars printed
   414                                  .cw2:
   415 00000360 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   416 00000363 EBA7                        jmp short comExit
   417 00000365 00                      comDevice   db 0
   418                                  
   419                                  lptDriver:    ;Drivers for LPT 1, 2, 3
   420 00000366 57                          push rdi
   421 00000367 488B3D93FEFFFF              mov rdi, qword [reqHdrPtr]
   422 0000036E 66C747030001                mov word [rdi + drvReqHdr.status], 0100h    ;Done bit set
   423 00000374 5F                          pop rdi
   424 00000375 C3                          ret
   425                                  
   426                                  msdDriver:
   427 00000376 50                          push rax
   428 00000377 53                          push rbx
   429 00000378 488B1D82FEFFFF              mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
   430 0000037F 8A4302                      mov al, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
   431 00000382 3C18                        cmp al, 24  ;Check cmd num is valid
   432 00000384 776C                        ja msdError
   433 00000386 84C0                        test al, al
   434 00000388 7471                        jz msdInit
   435 0000038A 3C01                        cmp al, 01
   436 0000038C 0F8400010000                jz msdMedChk
   437 00000392 3C02                        cmp al, 02
   438 00000394 0F84F8000000                jz msdBuildBPB
   439 0000039A 3C03                        cmp al, 03
   440 0000039C 0F84F0000000                jz msdIOCTLRead
   441 000003A2 3C04                        cmp al, 04
   442 000003A4 0F84E8000000                jz msdRead
   443 000003AA 3C08                        cmp al, 08
   444 000003AC 0F84E0000000                jz msdWrite
   445 000003B2 3C09                        cmp al, 09
   446 000003B4 0F84D8000000                jz msdWriteVerify
   447 000003BA 3C0C                        cmp al, 12
   448 000003BC 0F84D0000000                jz msdIOCTLWrite
   449 000003C2 3C0D                        cmp al, 13
   450 000003C4 0F84C8000000                jz msdDevOpen
   451 000003CA 3C0E                        cmp al, 14
   452 000003CC 0F84C0000000                jz msdDevClose
   453 000003D2 3C0F                        cmp al, 15
   454 000003D4 0F84B8000000                jz msdRemovableMedia
   455 000003DA 3C13                        cmp al, 19
   456 000003DC 0F84B0000000                jz msdGenericIOCTL
   457 000003E2 3C17                        cmp al, 23
   458 000003E4 0F84A8000000                jz msdGetLogicalDev
   459 000003EA 3C18                        cmp al, 24
   460 000003EC 0F84A0000000                jz msdSetLogicalDev
   461                                  msdError:
   462                                  msdDriverExit:
   463 000003F2 66814B030001                or word [rbx + drvReqHdr.status], 0100h ;Set done bit
   464 000003F8 5B                          pop rbx
   465 000003F9 58                          pop rax
   466 000003FA C3                          ret
   467                                  msdInit:            ;Function 0
   468 000003FB CD31                        int 31h ;Get number of Int 33h devices in r8b
   469 000003FD 4D0FB6C0                    movzx r8, r8b   ;Keeps real count
   470 00000401 4489C0                      mov eax, r8d
   471 00000404 3C01                        cmp al, 1
   472 00000406 7702                        ja .mi1
   473 00000408 FEC0                        inc al ;Make it two
   474                                  .mi1:
   475 0000040A BA05000000                  mov edx, 5
   476 0000040F 39D0                        cmp eax, edx
   477 00000411 0F47C2                      cmova eax, edx  ;If num of drives is greater than 5, consider only first 5
   478 00000414 8805E9FCFFFF                mov byte [msdHdr + drvHdr.drvNam], al ;Save num of drvs in drvr hdr
   479 0000041A 88430D                      mov byte [rbx + initReqPkt.numunt], al ;And in req packet
   480 0000041D 440005(76000000)            add byte [numMSDdrv], r8b ;Add the true number of devices to total
   481 00000424 31ED                        xor ebp, ebp    ;Use bpl as device counter, cmp to r8b
   482 00000426 488D3DA5000000              lea rdi, qword [msdBPBblks]
   483 0000042D 53                          push rbx
   484                                  .mi2:
   485 0000042E 89EA                        mov edx, ebp
   486 00000430 488D1DF3020000              lea rbx, qword [driverDataPtr]  ;Get effective address of scratch space
   487 00000437 31C9                        xor ecx, ecx    ;Sector 0
   488 00000439 B801820000                  mov eax, 8201h       ;Read 1 sector
   489 0000043E CD33                        int 33h
   490 00000440 724E                        jc msdInitError
   491                                  
   492 00000442 488D35E1020000              lea rsi, qword [driverDataPtr]  ;Point to start of data
   493 00000449 B90F000000                  mov ecx, bpbExLen/8
   494 0000044E F348A5                      rep movsq   ;Move the BPB data into the right block
   495                                  
   496 00000451 FFC5                        inc ebp
   497 00000453 4C39C5                      cmp rbp, r8 ;Have we written the BPB for all physical drives?
   498 00000456 75D6                        jne .mi2  ;No? Go again
   499                                  
   500 00000458 488D3D4B000000              lea rdi, qword [msdBPBTbl]  ;Point to start of table
   501 0000045F 488D156C000000              lea rdx, qword [msdBPBblks]
   502                                  .mi3:
   503 00000466 488917                      mov qword [rdi], rdx   ;Move the block entry ptr to rdi
   504 00000469 4881C278000000              add rdx, bpbExLen      ;Make rdx point to the next block entry
   505 00000470 FFCD                        dec ebp
   506 00000472 75F2                        jnz .mi3  ;If not zero yet, go again
   507                                  
   508 00000474 5B                          pop rbx
   509 00000475 488D152E000000              lea rdx, qword [msdBPBTbl]  ;Get far pointer 
   510 0000047C 48895316                    mov qword [rbx + initReqPkt.optptr], rdx  ;Save ptr to array
   511 00000480 488D15A3020000              lea rdx, qword [driverDataPtr]
   512 00000487 4889530E                    mov qword [rbx + initReqPkt.endptr], rdx    ;Save free space ptr
   513 0000048B E962FFFFFF                  jmp msdDriverExit
   514                                  msdInitError:
   515 00000490 5B                          pop rbx
   516 00000491 C3                          ret
   517                                  msdMedChk:          ;Function 1
   518                                  msdBuildBPB:        ;Function 2
   519                                  msdIOCTLRead:       ;Function 3, returns done
   520                                  msdRead:            ;Funciton 4
   521                                  msdWrite:           ;Function 8
   522                                  msdWriteVerify:     ;Function 9, writes sectors then verifies then
   523                                  
   524                                  msdIOCTLWrite:      ;Function 12, returns done
   525                                  msdDevOpen:         ;Function 13
   526                                  msdDevClose:        ;Function 14
   527                                  msdRemovableMedia:  ;Function 15
   528                                  msdGenericIOCTL:    ;Function 19
   529                                  msdGetLogicalDev:   ;Function 23
   530                                  msdSetLogicalDev:   ;Function 24
   531 00000492 E95BFFFFFF                  jmp msdDriverExit
   532 00000497 4E4F204E414D452000      msdDefLabel db "NO NAME ",0 ;Default volume label
   533                                  ;LASTDRIVE default is 5
   534 000004A0 0000000000              msdBIOSmap  db 5 dup (0)    ;Translates DOS drive number to BIOS number
   535 000004A5 0000000000              msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   536 000004AA 000000000000000000-     msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   536 000004B3 000000000000000000-
   536 000004BC 000000000000000000-
   536 000004C5 000000000000000000-
   536 000004CE 00000000           
   537 000004D2 000000000000000000-     msdBPBblks  db 5*bpbExLen dup (0) ;Max 5 bpb records of exFAT bpb size
   537 000004DB 000000000000000000-
   537 000004E4 000000000000000000-
   537 000004ED 000000000000000000-
   537 000004F6 000000000000000000-
   537 000004FF 000000000000000000-
   537 00000508 000000000000000000-
   537 00000511 000000000000000000-
   537 0000051A 000000000000000000-
   537 00000523 000000000000000000-
   537 0000052C 000000000000000000-
   537 00000535 000000000000000000-
   537 0000053E 000000000000000000-
   537 00000547 000000000000000000-
   537 00000550 000000000000000000-
   537 00000559 000000000000000000-
   537 00000562 000000000000000000-
   537 0000056B 000000000000000000-
   537 00000574 000000000000000000-
   537 0000057D 000000000000000000-
   537 00000586 000000000000000000-
   537 0000058F 000000000000000000-
   537 00000598 000000000000000000-
   537 000005A1 000000000000000000-
   537 000005AA 000000000000000000-
   537 000005B3 000000000000000000-
   537 000005BC 000000000000000000-
   537 000005C5 000000000000000000-
   537 000005CE 000000000000000000-
   537 000005D7 000000000000000000-
   537 000005E0 000000000000000000-
   537 000005E9 000000000000000000-
   537 000005F2 000000000000000000-
   537 000005FB 000000000000000000-
   537 00000604 000000000000000000-
   537 0000060D 000000000000000000-
   537 00000616 000000000000000000-
   537 0000061F 000000000000000000-
   537 00000628 000000000000000000-
   537 00000631 000000000000000000-
   537 0000063A 000000000000000000-
   537 00000643 000000000000000000-
   537 0000064C 000000000000000000-
   537 00000655 000000000000000000-
   537 0000065E 000000000000000000-
   537 00000667 000000000000000000-
   537 00000670 000000000000000000-
   537 00000679 000000000000000000-
   537 00000682 000000000000000000-
   537 0000068B 000000000000000000-
   537 00000694 000000000000000000-
   537 0000069D 000000000000000000-
   537 000006A6 000000000000000000-
   537 000006AF 000000000000000000-
   537 000006B8 000000000000000000-
   537 000006C1 000000000000000000-
   537 000006CA 000000000000000000-
   537 000006D3 000000000000000000-
   537 000006DC 000000000000000000-
   537 000006E5 000000000000000000-
   537 000006EE 000000000000000000-
   537 000006F7 000000000000000000-
   537 00000700 000000000000000000-
   537 00000709 000000000000000000-
   537 00000712 000000000000000000-
   537 0000071B 000000000000000000-
   537 00000724 000000000000       
   538                                  driverDataPtr:
