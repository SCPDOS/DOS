     1                                  [map all scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  %include "driverStruc.inc"
     5                              <1> 
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     8                              <1> ; device driver related structures.                     ;
     9                              <1> ;-------------------------------------------------------;
    10                              <1> 
    11                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    12                              <1> 
    13 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    14 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    15 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    16 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    17 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    18                              <1> 
    19                              <1> endstruc
    20                              <1> 
    21                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    22                              <1> 
    23                              <1>     .hdrlen resb 1  ;Length of the request header
    24                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    25                              <1>     .cmdcde resb 1  ;Command code
    26                              <1>     .status resw 1  ;Status word
    27                              <1>     .devptr resq 1  ;Device queue pointer field
    28                              <1> 
    29                              <1> %endmacro
    30                              <1> 
    31                              <1> struc drvReqHdr
    32                              <1>     drvReqHdrM
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    33                              <1> endstruc
    34                              <1> 
    35                              <1> struc initReqPkt  ;Init Request Packet
    36                              <1> 
    37                              <1>     drvReqHdrM   ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    38 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
    39 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
    40 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
    41 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
    42                              <1> 
    43                              <1> endstruc
    44                              <1> 
    45                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
    46                              <1> 
    47                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    48 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    49 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
    50 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
    51                              <1> 
    52                              <1> endstruc
    53                              <1> 
    54                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
    55                              <1> 
    56                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    57 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    58 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    59 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
    60                              <1> 
    61                              <1> endstruc
    62                              <1> 
    63                              <1> struc ioReqPkt   ;IO Request Packet
    64                              <1> 
    65                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    66 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    67 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    68 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
    69 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
    70 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
    71                              <1> 
    72                              <1> endstruc
    73                              <1> 
    74                              <1> struc nonDestInNoWaitReqPkt    ;Nondestructive Input No Wait Request Packet
    75                              <1>     
    76                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    77 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
    78                              <1> 
    79                              <1> endstruc
    80                              <1> 
    81                              <1> struc statusReqPkt   ;Status Request Packet
    82                              <1> 
    83                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    84                              <1> 
    85                              <1> endstruc
    86                              <1> 
    87                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
    88                              <1> 
    89                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    90                              <1>      
    91                              <1> endstruc
    92                              <1> 
    93                              <1> struc openReqPkt ;Open Device Request Packet
    94                              <1> 
    95                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    96                              <1>      
    97                              <1> endstruc
    98                              <1> 
    99                              <1> struc closeReqPkt ;Close Device Request Packet
   100                              <1> 
   101                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   102                              <1>      
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   106                              <1> 
   107                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   108                              <1>      
   109                              <1> endstruc
   110                              <1> 
   111                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   112                              <1> 
   113                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   114 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   115 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   116 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   117 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   118 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   119                              <1> 
   120                              <1> endstruc
   121                              <1> 
   122                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   123                              <1>     
   124                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   125                              <1> 
   126                              <1> endstruc
   127                              <1> 
   128                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   129                              <1>     
   130                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   131                              <1> 
   132                              <1> endstruc
     5                                  %include "fatStruc.inc"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ; This include file contains miscellaneous FAT driver   ;
     9                              <1> ; structures. exFAT will have it's own files at a later ;
    10                              <1> ; stage.                                                ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    14                              <1> 
    15 00000000 ??????              <1>     .jmpBoot    resb 3 
    16 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    17 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    18 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    19 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    20 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    21 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    22 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    23 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    24 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    25 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    26 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    27 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    28 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    29                              <1> 
    30 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    31 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    32 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    33 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    34 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    35 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    40                              <1> 
    41 00000000 ??????              <1>     .jmpBoot    resb 3
    42 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    43 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    44 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    45 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    46 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    47 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    48 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    49 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    50 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    51 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    52 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    53 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    54 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    55                              <1> 
    56 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    57 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    58 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    59 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    60 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    61 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    62 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    63                              <1> 
    64 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    65 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    66 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    67 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    68 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    69 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    70                              <1> 
    71                              <1> endstruc
    72                              <1> 
    73                              <1> struc fatDirEntry
    74                              <1> 
    75 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
    76 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
    77 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
    78 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
    79 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
    80 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
    81 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
    82 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
    83 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
    84 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
    85 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
    86 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
    87                              <1> 
    88                              <1> endstruc
    89                              <1> ;Directory attribute equates
    90                              <1>     dirReadOnly     equ 01h
    91                              <1>     dirHidden       equ 02h
    92                              <1>     dirSystem       equ 04h
    93                              <1>     dirVolumeID     equ 08h
    94                              <1>     dirDirectory    equ 10h
    95                              <1>     dirArchive      equ 20h
    96                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    97                              <1> 
    98                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
    99                              <1> 
   100 00000000 ??????              <1>     .jmpBoot                resb 3 
   101 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   102 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   103 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   104 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   105 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   106 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   107 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   108 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   109 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   110 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   111 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   112 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   113 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   114 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   115 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   116 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   117 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   118 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   119                              <1> 
   120                              <1> endstruc
   121                              <1> 
   122                              <1> struc FSInfo
   123                              <1> 
   124 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   125 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   126 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   127 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   128 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   129 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   130 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   131                              <1> 
   132                              <1> endstruc
     6                                  %include "dosStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous internal     ;
    10                              <1> ; SCP/DOS structures.                                   ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> ;------------------------------------------------------------------------;
    14                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    15                              <1> ; its file system structure. This is used to locate files and structures
    16                              <1> ; on the device itself and to translate file requests to cluster chains
    17                              <1> ; to LBAs to pass to the disk driver..
    18                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    19                              <1> ; drivers Initialise routine has been called.
    20                              <1> ;------------------------------------------------------------------------;
    21                              <1> struc dpb        ;Drive Parameter Block
    22                              <1> 
    23 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...)
    24 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device
    25 00000002 ??                  <1>     .bBytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
    26 00000003 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1
    27                              <1> ;                                       i.e. (2^bSectorsPerClusterShift) - 1
    28 00000004 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent
    29 00000005 ????????            <1>     .dFAToffset              resd 1  ;Vol rel offset of first FAT, in sectors
    30 00000009 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs
    31 0000000A ????                <1>     .wNumberRootDirEntries   resw 1  ;In sectors
    32 0000000C ????????            <1>     .dClusterHeapOffset      resd 1  ;Start of data area, in sectors
    33 00000010 ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters (volume size)
    34 00000014 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors
    35 00000018 ????????            <1>     .dFirstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
    36 0000001C ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header
    37 00000024 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor
    38 00000025 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1)
    39 00000026 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    40 0000002E ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search
    41 00000032 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown
    42                              <1> 
    43                              <1> endstruc
    44                              <1> 
    45                              <1> ;------------------------------------------------------------------------;
    46                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    47                              <1> ; All disk pathing requests go via the CDS for that drive.
    48                              <1> ; The default drive is the last accessed drive, this number is stored
    49                              <1> ; in the DOS data area.
    50                              <1> ; The CDS is stored as an array with the offset into the array being 
    51                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    52                              <1> ;
    53                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    54                              <1> ;------------------------------------------------------------------------;
    55                              <1> struc cds       ;Current Directory structure
    56 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    57 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    58 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    59 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    60 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    61 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    62                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    63                              <1> ; another, we save the number of chars to skip to that deep level).
    64                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    65                              <1> ; Flags: Bit 15 set = Network drive
    66                              <1> ;        Bit 14 set = Physical drive
    67                              <1> ;        Bit 13 set = JOIN'ed drive
    68                              <1> ;        Bit 12 set = SUBST'ed drive
    69                              <1> ;        Bit 7  set = Redirected, not network, drive (This is how MSCDEX worked)
    70                              <1> endstruc
    71                              <1> ;CDS equates
    72                              <1>     cdsNetDrive     equ 8000h
    73                              <1>     cdsPhysDrive    equ 4000h
    74                              <1>     cdsJoinDrive    equ 2000h
    75                              <1>     cdsSubstDrive   equ 1000h
    76                              <1>     cdsRedirDrive   equ 0080h
    77                              <1> ;------------------------------------------------------------------------;
    78                              <1> ; The SFT is a way to allow applications to open file handles to files 
    79                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    80                              <1> ; under the first header, and then a second header will be linked to the 
    81                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    82                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    83                              <1> ; using the FCBS= command. Default FCBS=5.
    84                              <1> ;
    85                              <1> ; A file handle describes the file, and the location within the file that
    86                              <1> ; we are reading. The file handle can be manipulated without the file
    87                              <1> ; being in memory, thus allowing the user to access data without needing 
    88                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    89                              <1> ; accessing devices, by treating them as files with their drivers 
    90                              <1> ; responding and translating the manipulations of the file handle itself.
    91                              <1> ; Neither the driver nor the application should see or use the SFT for
    92                              <1> ; the handle, as it is subject to change (and will change when file 
    93                              <1> ; sharing provisions are included). The DOS will make requests to the 
    94                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    95                              <1> ; track of the information in the SFT entry for that handle. 
    96                              <1> ;
    97                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    98                              <1> ; can point to the same file. It all depends on what the applications 
    99                              <1> ; want to do with the File.
   100                              <1> ;
   101                              <1> ; !!!!IMPORTANT!!!!
   102                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   103                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   104                              <1> ;
   105                              <1> ;Each SFT may look like this:
   106                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   107                              <1> ;            |                |
   108                              <1> ;       wNumFiles*sft    wNumFiles*sft
   109                              <1> ;
   110                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   111                              <1> ; System FCBs.
   112                              <1> ;
   113                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   114                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   115                              <1> ;
   116                              <1> ; DEFAULT FILES=15, MINIMUM FILES=5
   117                              <1> ; DEFAULT FCBS=5, MINIMUM FCBS=5
   118                              <1> ;------------------------------------------------------------------------;
   119                              <1> struc sfth   ;System file table header
   120                              <1> ; This is the SFT header.
   121                              <1> ; This structure comes before the start of the first file in the array/table.
   122 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   123 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc sft
   127                              <1> ;This is the file struc itself
   128 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   129 00000002 ????                <1>     .wOpenMode   resw 1    ;Bit 15 set if opened via FCB
   130 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   131 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   132 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   133 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file
   134 00000013 ????                <1>     .wTime       resw 1    ;File Time
   135 00000015 ????                <1>     .wDate       resw 1    ;File Date
   136 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   137 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset in file, in bytes
   138 0000001F ????                <1>     .wRelClust   resw 1    ;Relative cluster in file of the last cluster accessed
   139 00000021 ????????            <1>     .dDirSect    resd 1    ;Relative number of sector containing directory entry 
   140 00000025 ??                  <1>     .bNumDirEnt  resb 1    ;Number of dir entry within sector (byte offset/32)
   141 00000026 <res Bh>            <1>     .sFCBName    resb 11   ;8.3 Filename
   142 00000031 ????????????????    <1>     .qPSPOwner   resq 1    ;Address of PSP of program which first opened this file
   143 00000039 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster of last cluster accessed
   144                              <1> endstruc
   145                              <1> 
   146                              <1> ;------------------------------------------------------------------------;
   147                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   148                              <1> ; to an internal buffer, and then copying it to the specified location
   149                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   150                              <1> ; another request for the same sector from the same device is made, so 
   151                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   152                              <1> ; size, selected according to the largest detected sector size during 
   153                              <1> ; the initial loadup.
   154                              <1> ;
   155                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   156                              <1> ;
   157                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   158                              <1> ;------------------------------------------------------------------------;
   159                              <1> 
   160                              <1> struc bufferHdr
   161 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   162 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for
   163 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   164 0000000A ????????            <1>     .bufferLBA   resd  1   ;LBA the buffer contains
   165 0000000E ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   166 0000000F ??                  <1>     .bufFAToff   resb  1   ;Sector offset of the backup copy of the FAT on disk
   167 00000010 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   168                              <1> endstruc
   169                              <1> 
   170                              <1> ;------------------------------------------------------------------------;
   171                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   172                              <1> ; following order, thus allowing for return values to be placed in the 
   173                              <1> ; registers by accessing the caller register stack frame.
   174                              <1> ;------------------------------------------------------------------------;
   175                              <1> struc callerFrame
   176 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   177 00000008 ????????????????    <1>     .rbx    resq 1    
   178 00000010 ????????????????    <1>     .rcx    resq 1
   179 00000018 ????????????????    <1>     .rdx    resq 1
   180 00000020 ????????????????    <1>     .rsi    resq 1
   181 00000028 ????????????????    <1>     .rdi    resq 1
   182 00000030 ????????????????    <1>     .rbp    resq 1
   183 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   184 00000040 ????????????????    <1>     .r9     resq 1
   185                              <1> ;Pushed by Processor when invoked via Interrupt
   186 00000048 ????????????????    <1>     .rip    resq 1
   187 00000050 ????????????????    <1>     .cs     resq 1
   188 00000058 ????????????????    <1>     .flags  resq 1
   189                              <1> endstruc
   190                              <1> 
   191                              <1> %macro pushDOS 0
   192                              <1>     push r9
   193                              <1>     push r8
   194                              <1>     push rbp
   195                              <1>     push rdi
   196                              <1>     push rsi
   197                              <1>     push rdx
   198                              <1>     push rcx
   199                              <1>     push rbx
   200                              <1>     push rax
   201                              <1> %endmacro
   202                              <1> 
   203                              <1> %macro popDOS 0
   204                              <1>     pop rax
   205                              <1>     pop rbx
   206                              <1>     pop rcx
   207                              <1>     pop rdx
   208                              <1>     pop rsi
   209                              <1>     pop rdi
   210                              <1>     pop rbp
   211                              <1>     pop r8
   212                              <1>     pop r9
   213                              <1> %endmacro
   214                              <1> 
   215                              <1> struc psp
   216 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h
   217 00000002 ????????????????    <1>     .startSeg   resq 1  ;Pointer to the start of the PSP
   218 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   219 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   220 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   221 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   222 0000002A <res 14h>           <1>     .fHandles   resb 20 ;Main File handle array
   223 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   224 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   225 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size
   226 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh
   227 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain
   228 0000005B ????????????????    <1>     .xtraHdlPtr resq 1  ;Pointer to the extra handle array if needed
   229 00000063 ????????????????    <1>     .fcbPtr1    resq 1  ;Pointer to the first OS allocated FCB
   230 0000006B <res 15h>           <1>     .reserved   resb 21
   231 00000080 ??                  <1>     .charCount  resb 1  ;Number of characters in command tail
   232 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   233                              <1> endstruc
   234                              <1> 
   235                              <1> struc mcb
   236 00000000 ??                  <1>     .mzbyte     resb 1  ;M=In use, Z=Free
   237 00000001 ????????????????    <1>     .processPtr resq 1  ;Points to the start of the process PSP
   238 00000009 ????????            <1>     .paragraphs resd 1  ;Gives the number of paras allocated to this process
   239 0000000D ??????              <1>     .reserved   resb 3
   240                              <1>     .program:
   241                              <1> endstruc
     7                                  %include "dosSeg.asm"
     8                              <1> ;This file contains the main DOS data segment
     9                              <1> 
    10                              <1> Segment dSeg nobits align=1 
    11 00000000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself
    12 00000008 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from
    13 00000009 <res 2Ah>           <1>     charReqHdr  resb ioReqPkt_size  ;Character IO Request header
    14 00000033 <res 2Ah>           <1>     diskReqHdr  resb ioReqPkt_size  ;Disk Action Request header
    15                              <1>     ;The device driver header with space for the largest possible packet
    16 0000005D ????????????????    <1>     sysVarsPtr  resq 1    ;Pointer to dpbHeadPtr, head of Sys Vars struc below
    17 00000065 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain
    18 0000006D ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain
    19 00000075 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    20 0000007D ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header
    21                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    22 00000085 ????????????????    <1>     conPtr      resq 1    ;Pointer to the current active CON device header 
    23                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    24 0000008D ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)
    25 0000008F ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain
    26 00000097 ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array
    27 0000009F ????????????????    <1>     sfcbHeadPTr resq 1    ;Pointer to the head of the System FCB chain
    28 000000A7 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    29 000000A9 ??                  <1>     numMSDdrv   resb 1    ;Number of mass storage devices detected in system
    30 000000AA ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]
    31 000000AB ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    32 000000AC <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    33                              <1> 
    34                              <1> ;Start of Swappable Data Area, this bit can remain static
    35 000000CE ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h
    36 000000CF ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving
    37 000000D0 ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh
    38 000000D1 ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    39 000000D2 ????                <1>     errorExt    resw 1  ;Extended Error Code
    40 000000D4 ??                  <1>     errorAction resb 1  ;Suggested action for error  
    41 000000D5 ??                  <1>     errorClass  resb 1  ;Error Class
    42                              <1> 
    43 000000D6 ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA
    44 000000DE ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP
    45 000000E6 ????????????????    <1>     rdiErrorPtr resq 1  ;Saves RDI value of last error
    46 000000EE ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
    47 000000F6 ????                <1>     lastRetCode resw 1  ;Last return code returned by Int 41h/4Ch
    48 000000F8 ??                  <1>     currentDrv  resb 1  ;Default, last accessed drive
    49 000000F9 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls
    50                              <1> ;SDA, needs to be replaced between processes
    51 000000FA ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
    52                              <1> 
    53 00000102 ??                  <1>     Int44RetVal resb 1  ;Saves a copy of the Int 44 return value
    54 00000103 ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
    55 00000104 ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
    56 00000105 ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
    57 0000010D ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
    58 00000115 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
    59                              <1> ;Time stuff
    60 0000011D ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
    61 00000123 ??                  <1>     dayOfMonth  resb 1  ;1 - 31 BCD
    62 00000124 ??                  <1>     monthOfYear resb 1  ;1 - 12 BCD
    63 00000125 ????                <1>     years       resw 1  ;0000 - 9999 BCD
    64 00000127 ????                <1>     yearsOffset resw 1  ;Current Year - 1980
    65 00000129 ????????            <1>     daysOffset  resd 1  ;Days since 1-1-1980
    66 0000012D ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
    67                              <1> 
    68                              <1> ;Stacks
    69 0000012E <res 528h>          <1>     critStack   resq 165
    70 00000656 ????????????????    <1>     critStakTop resq 1
    71 0000065E <res 638h>          <1>     IOStack     resq 199
    72 00000C96 ????????????????    <1>     IOStakTop   resq 1
    73 00000C9E <res 638h>          <1>     DiskStack   resq 199
    74 000012D6 ????????????????    <1>     DiskStakTop resq 1
    75                              <1>     dSegLen     equ     $
     8                                  
     9                                  Segment .text align=1
    10                                  ; We arrive here with the following values in the registers.
    11                                  ; rbx =  LBA of first Logical Block after SCP/BIOS
    12                                  ; dx  = Int 33h boot device number
    13                                  ; fs  = userbase pointer (pointer to first usable block of RAM)
    14                                  tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    15 00000000 55AA                        dw 0AA55h           ;Initial signature
    16 00000002 909090909090909090-         db (100h-2) dup (90h)   ;Duplicate NOPs for the PSP
    16 0000000B 909090909090909090-
    16 00000014 909090909090909090-
    16 0000001D 909090909090909090-
    16 00000026 909090909090909090-
    16 0000002F 909090909090909090-
    16 00000038 909090909090909090-
    16 00000041 909090909090909090-
    16 0000004A 909090909090909090-
    16 00000053 909090909090909090-
    16 0000005C 909090909090909090-
    16 00000065 909090909090909090-
    16 0000006E 909090909090909090-
    16 00000077 909090909090909090-
    16 00000080 909090909090909090-
    16 00000089 909090909090909090-
    16 00000092 909090909090909090-
    16 0000009B 909090909090909090-
    16 000000A4 909090909090909090-
    16 000000AD 909090909090909090-
    16 000000B6 909090909090909090-
    16 000000BF 909090909090909090-
    16 000000C8 909090909090909090-
    16 000000D1 909090909090909090-
    16 000000DA 909090909090909090-
    16 000000E3 909090909090909090-
    16 000000EC 909090909090909090-
    16 000000F5 909090909090909090-
    16 000000FE 9090               
    17 00000100 64881425[08000000]          mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    18 00000108 488D15F1FEFFFF              lea rdx, qword [tempPSP]    ;Get the address of the tempPSP
    19 0000010F 6448891425-                 mov qword fs:[currentPSP], rdx
    19 00000114 [DE000000]         
    20                                  ;DOS allows for non-PARA aligned PSPs but DOS aligns all programs on PARA bndry
    21 00000118 B9000100C0                  mov ecx, 0C0000100h ;Read FS MSR
    22 0000011D 0F32                        rdmsr
    23 0000011F 89D7                        mov edi, edx        ;Get the hi dword, and clear the upper bytes
    24 00000121 48C1E720                    shl rdi, 20h        ;Shift high
    25 00000125 89C7                        mov edi, eax        ;Get the low dword in
    26                                  
    27 00000127 6448893C25-                 mov qword fs:[dosSegPtr], rdi 
    27 0000012C [00000000]         
    28 00000130 4889FD                      mov rbp, rdi    ;Save the start of dosSeg in rdx 
    29 00000133 4881C7[DE120000]            add rdi, dSegLen ;Move destination past end of data area
    30 0000013A 488D35(00000000)            lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    31 00000141 B900100000                  mov ecx, 1000h
    32 00000146 F348A5                      rep movsq
    33                                  
    34                                  ;Modify the pointers in nData before putting them in the data area
    35 00000149 48012D80010000              add qword [nData + drvHdr.nxtPtr], rbp
    36 00000150 48012D83010000              add qword [nData + drvHdr.strPtr], rbp
    37 00000157 48012D84010000              add qword [nData + drvHdr.intPtr], rbp
    38                                  ;Copy the Null driver to its location in Sysvars
    39 0000015E B922000000                  mov ecx, drvHdr_size
    40 00000163 488D3566010000              lea rsi, qword [nData]
    41 0000016A 488DBD[AC000000]            lea rdi, qword [rbp + nulDevHdr]
    42 00000171 F3A4                        rep movsb   
    43                                  
    44                                  ;Adjust the addresses in the other driver headers 
    45 00000173 48BE-                       mov rsi, conHdr ;Point to the first non-NUL dev in chain
    45 00000175 [F107000000000000] 
    46 0000017D B90C000000                  mov ecx, 12      ;12 drivers in data area
    47 00000182 488D342E                    lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
    48                                  adjDrivers:
    49 00000186 E8CA000000                  call adjustDrvHdr
    50 0000018B E2F9                        loop adjDrivers
    51                                  
    52                                      ;Open NUL
    53 0000018D 488D9D[B6000000]            lea rbx, qword [rbp + nulDevHdr + drvHdr.strPtr]    ;Get ptr to strat ptr
    54 00000194 488B1B                      mov rbx, qword [rbx]    ;Get strat ptr
    55 00000197 30C0                        xor al, al
    56 00000199 FFD3                        call rbx
    57                                  
    58                                  ;Open CON
    59                                  conInit:    ;Rather than keeping this resident... do it here
    60                                  .ci0:
    61 0000019B B401                        mov ah, 01      ;Get buffer status
    62 0000019D CD36                        int 36h
    63 0000019F 7406                        jz .ci1      ;If zero clear => no more keys to read
    64 000001A1 30E4                        xor ah, ah
    65 000001A3 CD36                        int 36h ;Read key to flush from buffer
    66 000001A5 EBF4                        jmp short .ci0
    67                                  .ci1:
    68 000001A7 B800050000                  mov eax, 0500h  ;Set page zero as the default page
    69 000001AC CD30                        int 30h
    70 000001AE B402                        mov ah, 02h
    71 000001B0 31D2                        xor edx, edx    ;Set screen cursor to top right corner
    72 000001B2 88D7                        mov bh, dl      ;Set cursor for page 0
    73 000001B4 CD30                        int 30h
    74 000001B6 B707                        mov bh, 07h     ;Grey/Black attribs
    75 000001B8 B800060000                  mov eax, 0600h  ;Clear whole screen
    76 000001BD CD30                        int 30h
    77                                  
    78                                      ;Open Mass Storage
    79 000001BF 48BB-                       mov rbx, msdDriver
    79 000001C1 [E60D000000000000] 
    80 000001C9 488D5C1D00                  lea rbx, qword [rbp+rbx]
    81 000001CE 30C0                        xor al, al
    82 000001D0 FFD3                        call rbx
    83                                  ;Adjust Int 41h address table
    84                                  
    85                                  adjInt41h:
    86 000001D2 B96A000000                  mov ecx, dispatchTableL/8 ;Number of elements in table
    87 000001D7 48BB-                       mov rbx, functionDispatch.dispatchTable ;Get EA of table
    87 000001D9 [D601000000000000] 
    88 000001E1 488D5C1D00                  lea rbx, qword [rbp+rbx]    ;Point to the start of the relocated table 
    89                                  .ai41h:
    90 000001E6 48012B                      add qword [rbx], rbp    ;Add base address value to entry in reloc table
    91 000001E9 4881C308000000              add rbx, 8              ;Each entry is size 8
    92 000001F0 FFC9                        dec ecx
    93 000001F2 75F2                        jnz .ai41h  ;Keep looping until all entries have been adjusted
    94                                  
    95                                  ;Adjust Interrupt Entries Int 40h-49h
    96                                  adjInts:
    97 000001F4 B340                        mov bl, 40h
    98 000001F6 B807F00000                  mov eax, 0F007h ;Get the descriptor
    99 000001FB CD35                        int 35h
   100 000001FD B940000000                  mov ecx, 40h    ;Start from interrupt 40h
   101 00000202 488D3D77000000              lea rdi, intData
   102 00000209 89C6                        mov esi, eax    ;Move segment selector info to esi
   103                                  .ai0:
   104 0000020B B808F00000                  mov eax, 0F008h ;Set the descriptor
   105 00000210 488B1F                      mov rbx, qword [rdi]    ;Get address pointed to by rdi
   106 00000213 4801EB                      add rbx, rbp            ;Add the relocated base to rbx
   107 00000216 CD35                        int 35h
   108 00000218 4881C708000000              add rdi, 8
   109 0000021F FFC1                        inc ecx
   110 00000221 81F94A000000                cmp ecx, 4Ah
   111 00000227 75E2                        jne .ai0
   112                                  
   113                                  ;Test Error Case
   114 00000229 B430                        mov ah, 00110000b
   115 0000022B B000                        mov al, 00h
   116 0000022D BF0C000000                  mov edi, 0Ch
   117 00000232 CD44                        int 44h
   118                                  
   119                                  
   120 00000234 488D152D000000              lea rdx, qword [startmsg]   ;Get the absolute address of message
   121 0000023B B409                        mov ah, 09h
   122 0000023D CD41                        int 41h
   123                                  
   124 0000023F 64488B3425-                 mov rsi, fs:[nulDevHdr]
   124 00000244 [AC000000]         
   125 00000248 B801C50000                  mov eax, 0C501h ;Connect debugger
   126 0000024D CD35                        int 35h
   127                                  l1:
   128 0000024F B401                        mov ah, 01h  ;Write with echo
   129 00000251 CD41                        int 41h
   130 00000253 EBFA                        jmp short l1
   131                                  adjustDrvHdr:
   132                                  ;Input: rsi = Effective address of driver in DOS segment
   133                                  ;       rbp = Ptr to the start of the DOS segment
   134                                  ;Output: rsi = EA of next header in DOS segment
   135 00000255 48012E                      add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   136 00000258 48016E0A                    add qword [rsi + drvHdr.strPtr], rbp
   137 0000025C 48016E12                    add qword [rsi + drvHdr.intPtr], rbp
   138 00000260 4881C622000000              add rsi, drvHdr_size
   139 00000267 C3                          ret
   140                                  
   141 00000268 0A0D5374617274696E-     startmsg db 0Ah,0Dh,"Starting SCP/DOS...",0Ah,0Dh,"$"
   141 00000271 67205343502F444F53-
   141 0000027A 2E2E2E0A0D24       
   142                                  intData:
   143 00000280 [5900000000000000]          dq terminateProcess ;Int 40h
   144 00000288 [5900000000000000]          dq functionDispatch ;Int 41h
   145 00000290 [2605000000000000]          dq terminateHandler ;Int 42h
   146 00000298 [2605000000000000]          dq ctrlCHandler     ;Int 43h
   147 000002A0 [2605000000000000]          dq critErrorHandler ;Int 44h
   148 000002A8 [B907000000000000]          dq absDiskRead      ;Int 45h
   149 000002B0 [CE07000000000000]          dq absDiskWrite     ;Int 46h
   150 000002B8 [E307000000000000]          dq terminateResident    ;Int 47h
   151 000002C0 [E307000000000000]          dq inDosHandler     ;Int 48h
   152 000002C8 [E507000000000000]          dq fastOutput       ;Int 49h
   153                                  nData:
   154 000002D0 [F107000000000000]          dq conHdr
   155 000002D8 0480                        dw 08004h
   156 000002DA [9909000000000000]          dq nulStrat
   157 000002E2 [9F09000000000000]          dq nulIntr
   158 000002EA 4E554C2020202020            db "NUL     " ;Default NUL data
   159                                  
   160                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 
   161                                  ;-----------------------------------:
   162                                  ;       Misc System routines        :
   163                                  ;-----------------------------------:
   164                                  findLRUBuffer: 
   165                                  ;Finds least recently used buffer, links it and returns ptr to it in rbx
   166                                  ;Input: Nothing
   167                                  ;Output: rbx = Pointer to the buffer to use
   168 00000000 52                          push rdx
   169 00000001 488B1D(8F000000)            mov rbx, qword [bufHeadPtr]
   170 00000008 48813BFFFFFFFF              cmp qword [rbx + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   171 0000000F 7502                        jne .flb1
   172 00000011 5A                          pop rdx
   173 00000012 C3                          ret
   174                                  .flb1:
   175 00000013 4889DA                      mov rdx, rbx    ;Save a ptr to the previous buffer header
   176 00000016 488B1A                      mov rbx, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   177 00000019 48813BFFFFFFFF              cmp qword [rbx + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   178 00000020 75F1                        jne .flb1   ;If not LRU, keep walking, else process
   179 00000022 48C702FFFFFFFF              mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   180 00000029 488B15(8F000000)            mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   181 00000030 48891D(8F000000)            mov qword [bufHeadPtr], rbx    ;Sysvars to point to new buffer
   182 00000037 488913                      mov qword [rbx + bufferHdr.nextBufPtr], rdx
   183 0000003A 5A                          pop rdx
   184 0000003B C3                          ret
   185                                  
   186                                  findDPB:
   187                                  ;Finds the DPB for a given drive
   188                                  ;Input:   dl = Drive number (0=A, 1=B etc...)
   189                                  ;Output: al = 00, rbx = Pointer to the DPB
   190                                  ;        al = -1, Failed, no DPB for device, rbx destroyed
   191 0000003C 488B1D(6D000000)            mov rbx, qword [dpbHeadPtr]
   192                                  .fd1:
   193 00000043 30C0                        xor al, al
   194 00000045 3813                        cmp byte [rbx + dpb.bDriveNumber], dl
   195 00000047 740F                        je .fd2
   196 00000049 488B5B26                    mov rbx, qword [rbx + dpb.qNextDPBPtr]
   197 0000004D B0FF                        mov al, -1
   198 0000004F 4881FBFFFFFFFF              cmp rbx, -1 ;If rbx followed last item in list, no DPB exists for dl
   199 00000056 75EB                        jne .fd1
   200                                  .fd2:
   201 00000058 C3                          ret
   202                                  callCritError:
   203                                  ;Common Procedure to swap stacks and call Critical Error Interrupt
   204                                  ;-----------------------------------:
   205                                  ;       File System routines        :
   206                                  ;-----------------------------------:
   207                                  name2Clust:
   208                                  ;Converts a file name to a first cluster number
   209                                  ;-----------------------------------:
   210                                  ;        Interrupt routines         :
   211                                  ;-----------------------------------:
   212                                  terminateProcess:   ;Int 40h
   213                                  
   214                                  functionDispatch:   ;Int 41h Main function dispatcher
   215                                  ;ah = Function number, all other registers have various meanings
   216 00000059 FA                          cli ;Halt external interrupts
   217 0000005A FC                          cld ;Ensure all string ops occur in the right direction
   218 0000005B 80FC6A                      cmp ah, dispatchTableL/8    ;Number of functions
   219 0000005E 0F871E010000                ja .fdExitBad
   220                                      ;Cherry pick functions
   221 00000064 80FC33                      cmp ah, 33h ;CTRL+BREAK check
   222 00000067 722C                        jb .fsbegin   ;If below skip these checks
   223 00000069 0F8466010000                je .ctrlBreakCheck
   224 0000006F 80FC64                      cmp ah, 64h
   225 00000072 0F845D010000                je .setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
   226 00000078 771B                        ja .fsbegin   ;If above, do usual Int41 entry
   227 0000007A 80FC51                      cmp ah, 51h
   228 0000007D 0F8452010000                je .getCurrProcessID    ;This an below are exactly the same
   229 00000083 80FC62                      cmp ah, 62h
   230 00000086 0F8449010000                je .getPSPaddr          ;Calls the above function
   231 0000008C 80FC50                      cmp ah, 50h
   232 0000008F 0F8440010000                je .setCurrProcessID
   233                                  .fsbegin:
   234                                      pushDOS ;Push the usual prologue registers
   192 00000095 4151                <1>  push r9
   193 00000097 4150                <1>  push r8
   194 00000099 55                  <1>  push rbp
   195 0000009A 57                  <1>  push rdi
   196 0000009B 56                  <1>  push rsi
   197 0000009C 52                  <1>  push rdx
   198 0000009D 51                  <1>  push rcx
   199 0000009E 53                  <1>  push rbx
   200 0000009F 50                  <1>  push rax
   235 000000A0 488B05(0D010000)            mov rax, qword [oldRSP]
   236 000000A7 488905(05010000)            mov qword [oldoldRSP], rax
   237 000000AE FE05(CF000000)              inc byte [inDOS]    ;Increment in DOS flag
   238 000000B4 488925(0D010000)            mov qword [oldRSP], rsp
   239                                  ;Here, we want to save oldRSP in the callers PSP
   240 000000BB 803D(CF000000)01            cmp byte [inDOS], 1 ;Check how many times we are in DOS
   241 000000C2 750B                        jne .fsb1   ;If this is first entry, save rsp in callers PSP
   242 000000C4 488B05(DE000000)            mov rax, qword [currentPSP] ;Get current PSP address
   243 000000CB 48896046                    mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
   244                                  .fsb1:
   245 000000CF 58                          pop rax     ;Get old rax back
   246 000000D0 50                          push rax    ;and push it back onto the stack
   247 000000D1 488D25(56060000)            lea rsp, critStakTop
   248 000000D8 FB                          sti         ;Reenable interrupts
   249                                  
   250 000000D9 C605(04010000)01            mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
   251                                  
   252 000000E0 48891D(15010000)            mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
   253 000000E7 0FB6DC                      movzx ebx, ah   ;Move the function number bl zero extended to rbx
   254 000000EA C1E303                      shl ebx, 3      ;Multiply the function number by 8 for offset into table
   255 000000ED 50                          push rax        ;Push rax onto the stack
   256 000000EE 488D05E1000000              lea rax, qword [.dispatchTable]
   257 000000F5 4801C3                      add rbx, rax    ;Add dispatch table offset into rbx
   258 000000F8 58                          pop rax
   259 000000F9 488B1B                      mov rbx, qword [rbx]    ;Get the address from the dispatch table
   260                                  
   261 000000FC 84E4                        test ah, ah     ;Simple Terminate function?
   262 000000FE 741C                        jz .fddiskOp
   263 00000100 80FC59                      cmp ah, 59h     ;Extended Error report?
   264 00000103 7443                        je .fdGoToFunction  ;Bypass code that clears the error report
   265 00000105 80FC0C                      cmp ah, 0Ch     ;Are we a char function?
   266 00000108 7712                        ja .fddiskOp
   267                                  ;Char operations here
   268 0000010A F605(CE000000)01            test byte [critErrFlag], 1  ;Are we in critical error?
   269 00000111 7535                        jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   270 00000113 488D25(960C0000)            lea rsp, IOStakTop          ;Otherwise, switch to IO stack
   271 0000011A EB2C                        jmp short .fdGoToFunction
   272                                  .fddiskOp:
   273                                      ;Disk operations go here
   274                                      ;Clear up error info
   275 0000011C C605(D1000000)01            mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   276 00000123 C605(CE000000)00            mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   277 0000012A C605(D0000000)FF            mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   278                                  
   279 00000131 C605(04010000)00            mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   280 00000138 488D25(D6120000)            lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   281 0000013F F605(F9000000)FF            test byte [breakFlag], -1   ;Test if set
   282 00000146 7400                        jz .fdGoToFunction
   283                                  ; HANDLE CTRL+BREAK HERE!
   284                                  .fdGoToFunction:
   285 00000148 48871D(15010000)            xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   286                                      ;Potentially point rbp to caller reg frame for easy access of registers 
   287                                      ;mov rbp, qword [oldRSP]    ;Move rsp on entry into rbp
   288 0000014F FF15(15010000)              call qword [oldRBX]     ;Call the desired function, rax contains ret code
   289                                  .fdExit:
   290 00000155 FA                          cli     ;Redisable interrupts
   291                                      ;???
   292 00000156 FE0D(CF000000)              dec byte [inDOS]            ;Decrement the inDOS count
   293 0000015C 488B25(0D010000)            mov rsp, qword [oldRSP]     ;Point rsp to old stack
   294 00000163 48890424                    mov qword [rsp], rax    ;Put the ret code into its pos on the register frame
   295 00000167 488B05(05010000)            mov rax, qword [oldoldRSP]
   296 0000016E 488905(0D010000)            mov qword [oldRSP], rax
   297                                      popDOS  ;Pop the frame
   204 00000175 58                  <1>  pop rax
   205 00000176 5B                  <1>  pop rbx
   206 00000177 59                  <1>  pop rcx
   207 00000178 5A                  <1>  pop rdx
   208 00000179 5E                  <1>  pop rsi
   209 0000017A 5F                  <1>  pop rdi
   210 0000017B 5D                  <1>  pop rbp
   211 0000017C 4158                <1>  pop r8
   212 0000017E 4159                <1>  pop r9
   298 00000180 48CF                        iretq
   299                                  .fdExitBad:
   300 00000182 B400                        mov ah, 0
   301 00000184 48CF                        iretq
   302                                  .simpleTerminate:     ;ah = 00h
   303 00000186 C3                          ret
   304                                  .stdinReadEcho:     ;ah = 01h
   305                                  ;    xor ah, ah
   306                                  ;    int 36h
   307                                  ;    int 49h ;Pass al to fast output
   308                                  ;    ret
   309 00000187 6687DB                      xchg bx, bx
   310 0000018A 488D1D(09000000)            lea rbx, charReqHdr ;Get the address of this request block
   311 00000191 488D0522000000              lea rax, .stdinReadEchoBuffer
   312 00000198 C6032A                      mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   313 0000019B C6430204                    mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
   314 0000019F 66C743030000                mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   315 000001A5 4889430E                    mov qword [rbx + ioReqPkt.bufptr], rax
   316 000001A9 C7431601000000              mov dword [rbx + ioReqPkt.tfrlen], 01
   317 000001B0 E8D4070000                  call commonStrat
   318 000001B5 E8E6070000                  call conDriver
   319 000001BA 00                      .stdinReadEchoBuffer    db 0
   320                                  .stdoutWrite:       ;ah = 02h
   321                                  ;Bspace is regular cursor left, does not insert a blank
   322 000001BB 50                          push rax
   323 000001BC 88D0                        mov al, dl
   324 000001BE CD49                        int 49h
   325 000001C0 58                          pop rax
   326 000001C1 C3                          ret
   327                                  .stdauxRead:        ;ah = 03h
   328                                  .stdauxWrite:       ;ah = 04h
   329                                  .stdprnWrite:       ;ah = 05h
   330                                  .directCONIO:       ;ah = 06h
   331                                  .waitDirectInNoEcho:;ah = 07h
   332                                  .waitStdinNoEcho:   ;ah = 08h
   333 000001C2 C3                          ret
   334                                  .printString:       ;ah = 09h
   335 000001C3 50                          push rax
   336 000001C4 52                          push rdx
   337                                  .ps0:
   338 000001C5 8A02                        mov al, byte [rdx]
   339 000001C7 3C24                        cmp al, "$"
   340 000001C9 7407                        je .ps1
   341 000001CB 48FFC2                      inc rdx ;Goto next char
   342 000001CE CD49                        int 49h ;Print char in al
   343 000001D0 EBF3                        jmp short .ps0
   344                                  .ps1:
   345 000001D2 5A                          pop rdx
   346 000001D3 58                          pop rax
   347 000001D4 C3                          ret
   348                                  .buffStdinInput:    ;ah = 0Ah
   349                                  .checkStdinStatus:  ;ah = 0Bh
   350                                  .clearbuffDoFunc:   ;ah = 0Ch
   351                                  .diskReset:         ;ah = 0Dh
   352                                  .selectDisk:        ;ah = 0Eh
   353                                  .openFileFCB:       ;ah = 0Fh
   354                                  .closeFileFCB:      ;ah = 10h
   355                                  .findFirstFileFCB:  ;ah = 11h
   356                                  .findNextFileFCB:   ;ah = 12h
   357                                  .deleteFileFCB:     ;ah = 13h
   358                                  .sequentialReadFCB: ;ah = 14h
   359                                  .sequentialWriteFCB:;ah = 15h
   360                                  .createFileFCB:     ;ah = 16h
   361                                  .renameFileFCB:     ;ah = 17h
   362                                                      ;ah = 18h unused
   363                                  .getCurrentDisk:       ;ah = 19h, get current default drive
   364                                  .setDTA:            ;ah = 1Ah
   365                                  .FATinfoDefault:    ;ah = 1Bh
   366                                  .FatinfoDevice:     ;ah = 1Ch
   367                                                      ;ah = 1Dh unused
   368                                                      ;ah = 1Eh unused
   369                                  .getCurrentDPBptr:  ;ah = 1Fh, simply calls int 41h ah = 32h with dl = 0
   370                                                      ;ah = 20h unused
   371                                  .randomReadFCB:     ;ah = 21h
   372                                  .randomWriteFCB:    ;ah = 22h
   373                                  .getFileSizeFCB:    ;ah = 23h
   374                                  .setRelRecordFCB:   ;ah = 24h
   375                                  .setIntVector:      ;ah = 25h
   376                                  .createNewPSP:      ;ah = 26h
   377                                  .randBlockReadFCB:  ;ah = 27h
   378                                  .randBlockWriteFCB: ;ah = 28h
   379                                  .parseFilenameFCB:  ;ah = 29h
   380                                  .getDate:           ;ah = 2Ah
   381                                  .setDate:           ;ah = 2Bh
   382                                  .getTime:           ;ah = 2Ch
   383                                  .setTime:           ;ah = 2Dh
   384                                  .setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   385                                  .getDTA:            ;ah = 2Fh
   386                                  .getDOSversion:     ;ah = 30h
   387                                  .terminateStayRes:  ;ah = 31h
   388                                  .getDeviceDPBptr:   ;ah = 32h
   389                                  .ctrlBreakCheck:    ;ah = 33h
   390                                  .getInDOSflagPtr:   ;ah = 34h
   391                                  .getIntVector:      ;ah = 35h
   392                                  .getDiskFreeSpace:  ;ah = 36h
   393                                  .getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
   394                                  .getsetCountryInfo: ;ah = 38h, localisation info
   395                                  .makeDIR:           ;ah = 39h
   396                                  .removeDIR:         ;ah = 3Ah
   397                                  .changeCurrentDIR:  ;ah = 3Bh, changes directory for current drive
   398                                  .createFileHdl:     ;ah = 3Ch, handle function
   399                                  .openFileHdl:       ;ah = 3Dh, handle function
   400                                  .closeFileHdl:      ;ah = 3Eh, handle function
   401                                  .readFileHdl:       ;ah = 3Fh, handle function
   402                                  .writeFileHdl:      ;ah = 40h, handle function
   403                                  .deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   404                                  .movFileReadPtr:    ;ah = 42h, handle function, LSEEK
   405                                  .changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   406                                  .ioctrl:            ;ah = 44h, handle function
   407                                  .duplicateHandle:   ;ah = 45h, handle function
   408                                  .forceDuplicateHdl: ;ah = 46h, handle function
   409                                  .getCurrentDIR:     ;ah = 47h
   410                                  .allocateMemory:    ;ah = 48h
   411                                  .freeMemory:        ;ah = 49h
   412                                  .reallocMemory:     ;ah = 4Ah
   413                                  .loadExecChild:     ;ah = 4Bh, EXEC
   414                                  .terminateClean:    ;ah = 4Ch, EXIT
   415                                  .getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   416                                  .findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   417                                  .findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   418                                  .setCurrProcessID:  ;ah = 50h, set current process ID
   419                                  .getCurrProcessID:  ;ah = 51h, get current process ID
   420                                  .getSysVarsPtr:     ;ah = 52h
   421                                  .createDPB:         ;ah = 53h, generates a DPB from a given BPB
   422                                  .getVerifySetting:  ;ah = 54h
   423                                  .createPSP:         ;ah = 55h, creates a PSP for a program
   424                                  .renameFile:        ;ah = 56h
   425                                  .getSetFileDateTime:;ah = 57h
   426                                  .getsetMallocStrat: ;ah = 58h
   427                                  .getExtendedError:  ;ah = 59h
   428                                  .createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   429                                  .createNewFile:     ;ah = 5Bh
   430                                  .lockUnlockFile:    ;ah = 5Ch
   431                                  .getCritErrorInfo:  ;ah = 5Dh
   432                                  .networkServices:   ;ah = 5Eh, do nothing
   433                                  .networkRedirection:;ah = 5Fh, do nothing
   434                                  .trueName:          ;ah = 60h, get fully qualified name
   435                                                      ;ah = 61h, reserved
   436                                  .getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   437                                                      ;ah = 63h, reserved
   438                                  .setDriverLookahead:;ah = 64h, reserved
   439                                  .getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
   440                                  .getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
   441                                  .setHandleCount:    ;ah = 67h
   442                                  .commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   443                                  .getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   444                                  .return:
   445 000001D5 C3                          ret
   446                                  
   447                                  
   448                                  .dispatchTable:
   449 000001D6 [8601000000000000]          dq .simpleTerminate     ;AH = 00H, PROCESS MANAGEMENT
   450 000001DE [8701000000000000]          dq .stdinReadEcho       ;AH = 01H, CHAR IO
   451 000001E6 [BB01000000000000]          dq .stdoutWrite         ;AH = 02H, CHAR IO
   452 000001EE [C201000000000000]          dq .stdauxRead          ;AH = 03H, CHAR IO
   453 000001F6 [C201000000000000]          dq .stdauxWrite         ;AH = 04H, CHAR IO
   454 000001FE [C201000000000000]          dq .stdprnWrite         ;AH = 05H, CHAR IO
   455 00000206 [C201000000000000]          dq .directCONIO         ;AH = 06H, CHAR IO
   456 0000020E [C201000000000000]          dq .waitDirectInNoEcho  ;AH = 07H, CHAR IO
   457 00000216 [C201000000000000]          dq .waitStdinNoEcho     ;AH = 08H, CHAR IO
   458 0000021E [C301000000000000]          dq .printString         ;AH = 09H, CHAR IO
   459 00000226 [D501000000000000]          dq .buffStdinInput      ;AH = 0AH, CHAR IO
   460 0000022E [D501000000000000]          dq .checkStdinStatus    ;AH = 0BH, CHAR IO
   461 00000236 [D501000000000000]          dq .clearbuffDoFunc     ;AH = 0CH, CHAR IO
   462 0000023E [D501000000000000]          dq .diskReset           ;AH = 0DH, DISK MANAGEMENT
   463 00000246 [D501000000000000]          dq .selectDisk          ;AH = 0EH, DISK MANAGEMENT
   464 0000024E [D501000000000000]          dq .openFileFCB         ;AH = 0FH, FILE OPERATION       FCB
   465 00000256 [D501000000000000]          dq .closeFileFCB        ;AH = 10H, FILE OPERATION       FCB
   466 0000025E [D501000000000000]          dq .findFirstFileFCB    ;AH = 11H, FILE OPERATION       FCB
   467 00000266 [D501000000000000]          dq .findNextFileFCB     ;AH = 12H, FILE OPERATION       FCB
   468 0000026E [D501000000000000]          dq .deleteFileFCB       ;AH = 13H, FILE OPERATION       FCB
   469 00000276 [D501000000000000]          dq .sequentialReadFCB   ;AH = 14H, RECORD OPERATION     FCB
   470 0000027E [D501000000000000]          dq .sequentialWriteFCB  ;AH = 15H, RECORD OPERTAION     FCB
   471 00000286 [D501000000000000]          dq .createFileFCB       ;AH = 16H, FILE OPERATION       FCB
   472 0000028E [D501000000000000]          dq .renameFileFCB       ;AH = 17H, FILE OPERATION       FCB
   473 00000296 [D501000000000000]          dq .return              ;AH = 18H, RESERVED
   474 0000029E [D501000000000000]          dq .getCurrentDisk      ;AH = 19H, DISK MANAGEMENT
   475 000002A6 [D501000000000000]          dq .setDTA              ;AH = 1AH, RECORD OPERATION     F/H
   476 000002AE [D501000000000000]          dq .FATinfoDefault      ;AH = 1BH, DISK MANAGEMENT
   477 000002B6 [D501000000000000]          dq .FatinfoDevice       ;AH = 1CH, DISK MANAGEMENT
   478 000002BE [D501000000000000]          dq .return              ;AH = 1DH, RESERVED
   479 000002C6 [D501000000000000]          dq .return              ;AH = 1EH, RESERVED
   480 000002CE [D501000000000000]          dq .getCurrentDPBptr    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
   481 000002D6 [D501000000000000]          dq .return              ;AH = 20H, RESERVED
   482 000002DE [D501000000000000]          dq .randomReadFCB       ;AH = 21H, RECORD OPERATION     FCB
   483 000002E6 [D501000000000000]          dq .randomWriteFCB      ;AH = 22H, RECORD OPERATION     FCB
   484 000002EE [D501000000000000]          dq .getFileSizeFCB      ;AH = 23H, FILE OPERATION       FCB
   485 000002F6 [D501000000000000]          dq .setRelRecordFCB     ;AH = 24H, RECORD OPERATION     FCB
   486 000002FE [D501000000000000]          dq .setIntVector        ;AH = 25H, MISC. SYS. FUNCTION
   487 00000306 [D501000000000000]          dq .createNewPSP        ;AH = 26H, PROCESS MANAGEMENT
   488 0000030E [D501000000000000]          dq .randBlockReadFCB    ;AH = 27H, RECORD OPERATION     FCB
   489 00000316 [D501000000000000]          dq .randBlockWriteFCB   ;AH = 28H, RECORD OPERATION     FCB
   490 0000031E [D501000000000000]          dq .parseFilenameFCB    ;AH = 29H, FILE OPERATION       FCB
   491 00000326 [D501000000000000]          dq .getDate             ;AH = 2AH, TIME AND DATE
   492 0000032E [D501000000000000]          dq .setDate             ;AH = 2BH, TIME AND DATE
   493 00000336 [D501000000000000]          dq .getTime             ;AH = 2CH, TIME AND DATE
   494 0000033E [D501000000000000]          dq .setTime             ;AH = 2DH, TIME AND DATE
   495 00000346 [D501000000000000]          dq .setResetVerify      ;AH = 2EH, DISK MANAGEMENT
   496 0000034E [D501000000000000]          dq .getDTA              ;AH = 2FH, RECORD OPERATION     F/H
   497 00000356 [D501000000000000]          dq .getDOSversion       ;AH = 30H, MISC. SYS. FUNCTION
   498 0000035E [D501000000000000]          dq .terminateStayRes    ;AH = 31H, PROCESS MANAGEMENT
   499 00000366 [D501000000000000]          dq .getDeviceDPBptr     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
   500 0000036E [D501000000000000]          dq .ctrlBreakCheck      ;AH = 33H, MISC. SYS. FUNCTION
   501 00000376 [D501000000000000]          dq .getInDOSflagPtr     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
   502 0000037E [D501000000000000]          dq .getIntVector        ;AH = 35H, MISC. SYS. FUNCTION
   503 00000386 [D501000000000000]          dq .getDiskFreeSpace    ;AH = 36H, DISK MANAGEMENT
   504 0000038E [D501000000000000]          dq .getsetSwitchChar    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
   505 00000396 [D501000000000000]          dq .getsetCountryInfo   ;AH = 38H, MISC. SYS. FUNCTION
   506 0000039E [D501000000000000]          dq .makeDIR             ;AH = 39H, DIRECTORY OPERATION
   507 000003A6 [D501000000000000]          dq .removeDIR           ;AH = 3AH, DIRECTORY OPERATION
   508 000003AE [D501000000000000]          dq .changeCurrentDIR    ;AH = 3BH, DIRECTORY OPERATION
   509 000003B6 [D501000000000000]          dq .createFileHdl       ;AH = 3CH, FILE OPERATION       HANDLE
   510 000003BE [D501000000000000]          dq .openFileHdl         ;AH = 3DH, FILE OPERATION       HANDLE
   511 000003C6 [D501000000000000]          dq .closeFileHdl        ;AH = 3EH, FILE OPERATION       HANDLE
   512 000003CE [D501000000000000]          dq .readFileHdl         ;AH = 3FH, RECORD OPERATION     HANDLE
   513 000003D6 [D501000000000000]          dq .writeFileHdl        ;AH = 40H, RECORD OPERATION     HANDLE
   514 000003DE [D501000000000000]          dq .deleteFileHdl       ;AH = 41H, FILE OPERATION       HANDLE
   515 000003E6 [D501000000000000]          dq .movFileReadPtr      ;AH = 42H, RECORD OPERATION     HANDLE
   516 000003EE [D501000000000000]          dq .changeFileModeHdl   ;AH = 43H, FILE OPERATION       HANDLE
   517 000003F6 [D501000000000000]          dq .ioctrl              ;AH = 44H, MISC. SYS. FUNCTION
   518 000003FE [D501000000000000]          dq .duplicateHandle     ;AH = 45H, FILE OPERATION       HANDLE
   519 00000406 [D501000000000000]          dq .forceDuplicateHdl   ;AH = 46H, FILE OPERATION       HANDLE
   520 0000040E [D501000000000000]          dq .getCurrentDIR       ;AH = 47H, DIRECTORY OPERATION
   521 00000416 [D501000000000000]          dq .allocateMemory      ;AH = 48H, MEMORY MANAGEMENT
   522 0000041E [D501000000000000]          dq .freeMemory          ;AH = 49H, MEMORY MANAGEMENT
   523 00000426 [D501000000000000]          dq .reallocMemory       ;AH = 4AH, MEMORY MANAGEMENT
   524 0000042E [D501000000000000]          dq .loadExecChild       ;AH = 4BH, PROCESS MANAGEMENT
   525 00000436 [D501000000000000]          dq .terminateClean      ;AH = 4CH, PROCESS MANAGEMENT
   526 0000043E [D501000000000000]          dq .getRetCodeChild     ;AH = 4DH, PROCESS MANAGEMENT
   527 00000446 [D501000000000000]          dq .findFirstFileHdl    ;AH = 4EH, FILE OPERATION       HANDLE
   528 0000044E [D501000000000000]          dq .findNextFileHdl     ;AH = 4FH, FILE OPERATION       HANDLE
   529 00000456 [D501000000000000]          dq .setCurrProcessID    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   530 0000045E [D501000000000000]          dq .getCurrProcessID    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   531 00000466 [D501000000000000]          dq .getSysVarsPtr       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   532 0000046E [D501000000000000]          dq .createDPB           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   533 00000476 [D501000000000000]          dq .getVerifySetting    ;AH = 54H, DISK MANAGEMENT
   534 0000047E [D501000000000000]          dq .createPSP           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   535 00000486 [D501000000000000]          dq .renameFile          ;AH = 56H, FILE OPERATION       HANDLE
   536 0000048E [D501000000000000]          dq .getSetFileDateTime  ;AH = 57H, FILE OPERATION       HANDLE
   537 00000496 [D501000000000000]          dq .getsetMallocStrat   ;AH = 58H, MEMORY MANAGEMENT
   538 0000049E [D501000000000000]          dq .getExtendedError    ;AH = 59H, MISC. SYS. FUNCTION
   539 000004A6 [D501000000000000]          dq .createUniqueFile    ;AH = 5AH, FILE OPERATION       HANDLE
   540 000004AE [D501000000000000]          dq .createNewFile       ;AH = 5BH, FILE OPERATION       HANDLE
   541 000004B6 [D501000000000000]          dq .lockUnlockFile      ;AH = 5CH, RECORD OPERATION     HANDLE
   542 000004BE [D501000000000000]          dq .getCritErrorInfo    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   543 000004C6 [D501000000000000]          dq .networkServices     ;AH = 5EH, RESERVED NETWORK FUNCTION
   544 000004CE [D501000000000000]          dq .networkRedirection  ;AH = 5FH, RESERVED NETWORK FUNCTION
   545 000004D6 [D501000000000000]          dq .trueName            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   546 000004DE [D501000000000000]          dq .return              ;AH = 61H, RESERVED
   547 000004E6 [D501000000000000]          dq .getPSPaddr          ;AH = 62H, PROCESS MANAGEMENT
   548 000004EE [D501000000000000]          dq .return              ;AH = 63H, RESERVED
   549 000004F6 [D501000000000000]          dq .setDriverLookahead  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   550 000004FE [D501000000000000]          dq .getExtLocalInfo     ;AH = 65H, MISC. SYS. FUNCTION
   551 00000506 [D501000000000000]          dq .getsetGlobalCP      ;AH = 66H, MISC. SYS. FUNCTION
   552 0000050E [D501000000000000]          dq .setHandleCount      ;AH = 67H, FILE OPERAITON       F/H
   553 00000516 [D501000000000000]          dq .commitFile          ;AH = 68H, FILE OPERATION       HANDLE
   554 0000051E [D501000000000000]          dq .getsetDiskSerial    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   555                                  dispatchTableL  equ $ - .dispatchTable 
   556                                  
   557                                  terminateHandler:   ;Int 42h
   558                                  ctrlCHandler:       ;Int 43h
   559                                  critErrorHandler:   ;Int 44h
   560                                  ;User Stack in usage here, must be swapped to before this is called
   561                                  ;Entered with:  
   562                                  ;               AH = Critical Error Bitfield
   563                                  ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
   564                                  ;               Bit 6 - Reserved
   565                                  ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
   566                                  ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
   567                                  ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
   568                                  ;               Bits [2-1] = Affected Disk Error
   569                                  ;                     0 0   DOS area
   570                                  ;                     0 1   FAT area
   571                                  ;                     1 0   Directory area
   572                                  ;                     1 1   Data area
   573                                  ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   574                                  ;               AL  = Failing drive number if AH[7] = 0
   575                                  ;               DIL = Error code for errorMsg
   576                                  ;               RSI = EA of Device Header for which device the error occured
   577                                  ;Return:
   578                                  ;               AL = 0 - Ignore the Error       (Ignore)
   579                                  ;                  = 1 - Retry the Operation    (Retry)
   580                                  ;                  = 2 - Terminate the Program  (Abort)
   581                                  ;                  = 3 - Fail the DOS call      (Fail)
   582 00000526 53                          push rbx
   583 00000527 51                          push rcx
   584 00000528 52                          push rdx
   585 00000529 57                          push rdi
   586 0000052A 56                          push rsi
   587 0000052B FC                          cld         ;Make String ops go forward
   588                                  
   589 0000052C 6689C3                      mov bx, ax  ;Save ah in bh and al in bl (if needed)
   590 0000052F 488D155E020000              lea rdx, qword [.crlf]
   591 00000536 B409                        mov ah, 09h ;Print String
   592 00000538 CD41                        int 41h     ;Call DOS to print CRLF part of message
   593                                  
   594 0000053A 81E7FF000000                and edi, 00FFh   ;Zero the upper bytes of DI just in case
   595 00000540 B90C000000                  mov ecx, 0Ch
   596 00000545 39CF                        cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
   597 00000547 0F47F9                      cmova edi, ecx  ;If it is, move Gen Error into edi
   598 0000054A 480FB7FF                    movzx rdi, di
   599 0000054E 4889FA                      mov rdx, rdi    ;Copy error code
   600 00000551 48C1E704                    shl rdi, 4  ;Multiply by 16
   601 00000555 48D1E2                      shl rdx, 1  ;Multiply by 2
   602 00000558 4801D7                      add rdi, rdx    ;Add the resultant multiplications
   603 0000055B 488D1523010000              lea rdx, qword [.errorMsgTable]
   604 00000562 488D143A                    lea rdx, qword [rdx+rdi]   ;Load EA to rdx
   605 00000566 B409                        mov ah, 09h ;Print String
   606 00000568 CD41                        int 41h     ;Call DOS to print first part of message
   607                                  
   608 0000056A 488D1505020000              lea rdx, qword [.readmsg]
   609 00000571 488D3D0D020000              lea rdi, qword [.writemsg]
   610 00000578 F6C701                      test bh, 1  ;Bit 0 is set if write operation
   611 0000057B 480F45D7                    cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
   612 0000057F B409                        mov ah, 09h ;Print String
   613 00000581 CD41                        int 41h     ;Call DOS to print error reading/writing portion
   614                                  
   615 00000583 F6C780                      test bh, 80h    ;Test bit 7 for char/Disk assertation
   616 00000586 0F85DF000000                jnz .charError
   617                                  ;Disk error continues here
   618 0000058C 488D15DC010000              lea rdx, qword [.drive] ;Drive message
   619 00000593 B409                        mov ah, 09h
   620 00000595 CD41                        int 41h
   621 00000597 88DA                        mov dl, bl  ;Get zero based drive number into dl
   622 00000599 80C241                      add dl, "A" ;Add ASCII code
   623 0000059C B402                        mov ah, 02h ;Print char in dl
   624 0000059E CD41                        int 41h
   625                                  .userInput:
   626 000005A0 488D15ED010000              lea rdx, qword [.crlf]  ;Print new line
   627 000005A7 B409                        mov ah, 09h
   628 000005A9 CD41                        int 41h
   629                                  ;Abort, Retry, Ignore, Fail is word order
   630                                  ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   631                                  .userAbort:
   632                                  ;Abort is always an option
   633 000005AB 488D15E5010000              lea rdx, qword [.abortmsg]
   634 000005B2 B409                        mov ah, 09h
   635 000005B4 CD41                        int 41h ;Call DOS to prompt user for ABORT option
   636                                  .userRetry:
   637 000005B6 F6C710                      test bh, 10h  ;Bit 4 is retry bit
   638 000005B9 7416                        jz .userIgnore    ;If clear, dont print message
   639 000005BB 488D15ED010000              lea rdx, qword [.betweenMsg]
   640 000005C2 B409                        mov ah, 09h
   641 000005C4 CD41                        int 41h
   642 000005C6 488D15D7010000              lea rdx, qword [.retrymsg]
   643 000005CD B409                        mov ah, 09h
   644 000005CF CD41                        int 41h
   645                                  .userIgnore:
   646 000005D1 F6C720                      test bh, 20h    ;Bit 5 is ignore bit
   647 000005D4 7416                        jz .userFail
   648 000005D6 488D15D2010000              lea rdx, qword [.betweenMsg]
   649 000005DD B409                        mov ah, 09h
   650 000005DF CD41                        int 41h
   651 000005E1 488D15B5010000              lea rdx, qword [.ignoremsg]
   652 000005E8 B409                        mov ah, 09h
   653 000005EA CD41                        int 41h
   654                                  .userFail:
   655 000005EC F6C708                      test bh, 08h    ;Bit 3 is Fail bit
   656 000005EF 7416                        jz .userMsgEnd
   657 000005F1 488D15B7010000              lea rdx, qword [.betweenMsg]
   658 000005F8 B409                        mov ah, 09h
   659 000005FA CD41                        int 41h
   660 000005FC 488D15A7010000              lea rdx, qword [.failmsg]
   661 00000603 B409                        mov ah, 09h
   662 00000605 CD41                        int 41h
   663                                  .userMsgEnd:
   664 00000607 488D15A4010000              lea rdx, qword [.endMsg]
   665 0000060E B409                        mov ah, 09h
   666 00000610 CD41                        int 41h
   667                                  ;Get user input now 
   668 00000612 31C9                        xor ecx, ecx  ;4 Possible Responses
   669 00000614 488D3D9A010000              lea rdi, qword [.responses] ;Go to start of string
   670 0000061B B401                        mov ah, 01h ;STDIN without Console Echo
   671 0000061D CD41                        int 41h ;Get char in al
   672 0000061F 3C61                        cmp al, "a" ;Chack if lowercase
   673 00000621 7202                        jb .uip1    ;If the value is below, ignore subtraction
   674 00000623 2C20                        sub al, "a"-"A"  ;Turn the char into uppercase
   675                                  .uip1:
   676 00000625 AE                          scasb   ;Compare char to list, offset gives return code
   677 00000626 740F                        je .validInput  ;If they are equal, ecx has return code
   678 00000628 FFC1                        inc ecx
   679 0000062A 81F904000000                cmp ecx, 4
   680 00000630 75F3                        jne .uip1
   681 00000632 E969FFFFFF                  jmp .userInput ;If valid char not found, keep waiting 
   682                                  .validInput:
   683 00000637 88C8                        mov al, cl  ;Move the offset into .responses into al
   684                                  ;Now check if the input is permitted
   685 00000639 3C02                        cmp al, 2   ;Check if abort, abort always permitted
   686 0000063B 7427                        je .cehExit
   687 0000063D 84C0                        test al, al ;Check if 0 => Ignore
   688 0000063F 740F                        je .viIgnore
   689 00000641 3C01                        cmp al, 1   ;Check if 1 => Retry
   690 00000643 7416                        je .viRetry
   691                                  .viFail:    ;Fallthrough for fail (al = 3)
   692 00000645 F6C708                      test bh, 8  ;Bit 3 is Fail bit
   693 00000648 0F8452FFFFFF                jz .userInput  ;If bit 3 is zero, prompt and get input again
   694 0000064E EB14                        jmp short .cehExit
   695                                  .viIgnore:
   696 00000650 F6C720                      test bh, 20h    ;Bit 5 is Ignore bit
   697 00000653 0F8447FFFFFF                jz .userInput
   698 00000659 EB09                        jmp short .cehExit
   699                                  .viRetry:
   700 0000065B F6C710                      test bh, 10h    ;Bit 4 is Retry bit
   701 0000065E 0F843CFFFFFF                jz .userInput
   702                                  .cehExit:
   703 00000664 5E                          pop rsi
   704 00000665 5F                          pop rdi
   705 00000666 5A                          pop rdx
   706 00000667 59                          pop rcx
   707 00000668 5B                          pop rbx
   708 00000669 48CF                        iretq
   709                                  .charError:
   710 0000066B B908000000                  mov ecx, 8  ;8 chars in device name
   711 00000670 4881C61A000000              add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   712                                  .ce1:
   713 00000677 AC                          lodsb   ;Get a string char into al and inc rsi
   714 00000678 88C2                        mov dl, al  ;Move char into dl
   715 0000067A B402                        mov ah, 02h
   716 0000067C CD41                        int 41h ;Print char
   717 0000067E E2F7                        loop .ce1   ;Keep looping until all 8 char device chars have been printed
   718 00000680 E91BFFFFFF                  jmp .userInput
   719                                  
   720                                  .errorMsgTable: ;Each table entry is 18 chars long
   721 00000685 57726974652050726F-                 db "Write Protect $   "       ;Error 0
   721 0000068E 746563742024202020 
   722 00000697 556E6B6E6F776E2055-                 db "Unknown Unit $    "       ;Error 1
   722 000006A0 6E6974202420202020 
   723 000006A9 4E6F74205265616479-                 db "Not Ready $       "       ;Error 2
   723 000006B2 202420202020202020 
   724 000006BB 556E6B6E6F776E2043-                 db "Unknown Command $ "       ;Error 3
   724 000006C4 6F6D6D616E64202420 
   725 000006CD 446174612024202020-                 db "Data $            "       ;Error 4
   725 000006D6 202020202020202020 
   726 000006DF 426164205265717565-                 db "Bad Request $     "       ;Error 5
   726 000006E8 737420242020202020 
   727 000006F1 5365656B2024202020-                 db "Seek $            "       ;Error 6
   727 000006FA 202020202020202020 
   728 00000703 556E6B6E6F776E204D-                 db "Unknown Media $   "       ;Error 7
   728 0000070C 656469612024202020 
   729 00000715 536563746F72204E6F-                 db "Sector Not Found $"       ;Error 8
   729 0000071E 7420466F756E642024 
   730 00000727 4F7574204F66205061-                 db "Out Of Paper $    "       ;Error 9
   730 00000730 706572202420202020 
   731 00000739 577269746520466175-                 db "Write Fault $     "       ;Error A
   731 00000742 6C7420242020202020 
   732 0000074B 52656164204661756C-                 db "Read Fault $      "       ;Error B
   732 00000754 742024202020202020 
   733 0000075D 47656E6572616C2046-                 db "General Failure $ "       ;Error C
   733 00000766 61696C757265202420 
   734                                  
   735 0000076F 64726976652024          .drive      db "drive $"
   736 00000776 6572726F7220726561-     .readmsg    db "error reading $"
   736 0000077F 64696E672024       
   737 00000785 6572726F7220777269-     .writemsg   db "error writing $"
   737 0000078E 74696E672024       
   738 00000794 0A0D24                  .crlf       db 0Ah, 0Dh, "$"
   739 00000797 41626F727424            .abortmsg   db "Abort$" 
   740 0000079D 49676E6F726524          .ignoremsg  db "Ignore$"
   741 000007A4 526574727924            .retrymsg   db "Retry$"
   742 000007AA 4661696C24              .failmsg    db "Fail$"
   743 000007AF 2C2024                  .betweenMsg db ", $"
   744 000007B2 3F2024                  .endMsg     db "? $"
   745 000007B5 49524146                .responses  db "IRAF"   ;Abort Retry Ignore Fail
   746                                  absDiskRead:        ;Int 45h
   747                                  ;al = Drive number
   748                                  ;rbx = Memory Buffer address
   749                                  ;ecx = Number of sectors to read (max 255 for now)
   750                                  ;rdx = Start LBA to read from
   751 000007B9 480FB6C0                    movzx rax, al   ;Zero extend DOS drive number 
   752 000007BD 8A80[3C120000]              mov al, byte [msdDriver.msdBIOSmap + rax] ;Get translated BIOS num into al
   753 000007C3 4891                        xchg rax, rcx
   754 000007C5 4887CA                      xchg rcx, rdx
   755 000007C8 B482                        mov ah, 82h
   756 000007CA CD33                        int 33h
   757 000007CC 48CF                        iretq
   758                                  absDiskWrite:       ;Int 46h
   759 000007CE 480FB6C0                    movzx rax, al   ;Zero extend DOS drive number 
   760 000007D2 8A80[3C120000]              mov al, byte [msdDriver.msdBIOSmap + rax] ;Get translated BIOS num into al
   761 000007D8 4891                        xchg rax, rcx
   762 000007DA 4887CA                      xchg rcx, rdx
   763 000007DD B483                        mov ah, 83h
   764 000007DF CD33                        int 33h
   765 000007E1 48CF                        iretq
   766                                  terminateResident:  ;Int 47h
   767                                  inDosHandler:       ;Int 48h
   768                                  ;Called when DOS idle
   769 000007E3 48CF                        iretq
   770                                  fastOutput:         ;Int 49h
   771                                  ;Called with char to transfer in al
   772 000007E5 50                          push rax
   773 000007E6 B40E                        mov ah, 0Eh
   774 000007E8 CD30                        int 30h
   775 000007EA 58                          pop rax
   776 000007EB 48CF                        iretq
   777                                  passCommand:        ;Int 4Eh, hooked by COMMAND.COM
   778 000007ED 48CF                        iretq
   779                                  multiplex:          ;Int 4Fh, kept as iretq for now
   780 000007EF 48CF                        iretq
   781                                  ;-----------------------------------:
   782                                  ;          Driver routines          :
   783                                  ;-----------------------------------:
   784                                  drivers:
   785                                  conHdr:
   786 000007F1 [1308000000000000]          dq auxHdr
   787 000007F9 1308                        dw 0813h
   788 000007FB [8909000000000000]          dq commonStrat
   789 00000803 [A009000000000000]          dq conDriver
   790 0000080B 434F4E2020202020            db "CON     "
   791                                  auxHdr:
   792 00000813 [3508000000000000]          dq prnHdr
   793 0000081B 0080                        dw 08000h
   794 0000081D [8909000000000000]          dq commonStrat
   795 00000825 [410C000000000000]          dq com1Intr
   796 0000082D 4155582020202020            db "AUX     "
   797                                  prnHdr:
   798 00000835 [5708000000000000]          dq clkHdr
   799 0000083D 40A0                        dw 0A040h
   800 0000083F [9909000000000000]          dq nulStrat
   801 00000847 [9F09000000000000]          dq nulIntr
   802 0000084F 50524E2020202020            db "PRN     "
   803                                  clkHdr:
   804 00000857 [7908000000000000]          dq msdHdr
   805 0000085F 0880                        dw 08008h
   806 00000861 [8909000000000000]          dq commonStrat
   807 00000869 [F00A000000000000]          dq clkDriver
   808 00000871 434C4F434B242020            db "CLOCK$  "
   809                                  msdHdr:
   810 00000879 [9B08000000000000]          dq com1Hdr
   811 00000881 0008                        dw 00800h   ;Once Generic IO implemented, change to 00840h
   812 00000883 [8909000000000000]          dq commonStrat
   813 0000088B [E60D000000000000]          dq msdDriver
   814 00000893 0000000000000000            db 0,0,0,0,0,0,0,0
   815                                  com1Hdr:
   816 0000089B [BD08000000000000]          dq com2Hdr
   817 000008A3 0080                        dw 08000h
   818 000008A5 [8909000000000000]          dq commonStrat
   819 000008AD [410C000000000000]          dq com1Intr
   820 000008B5 434F4D3120202020            db "COM1    "
   821                                  com2Hdr:
   822 000008BD [DF08000000000000]          dq com3Hdr
   823 000008C5 0080                        dw 08000h
   824 000008C7 [8909000000000000]          dq commonStrat
   825 000008CF [4A0C000000000000]          dq com2Intr
   826 000008D7 434F4D3220202020            db "COM2    "
   827                                  com3Hdr:
   828 000008DF [0109000000000000]          dq com4Hdr
   829 000008E7 0080                        dw 08000h
   830 000008E9 [8909000000000000]          dq commonStrat
   831 000008F1 [530C000000000000]          dq com3Intr
   832 000008F9 434F4D3320202020            db "COM3    "
   833                                  com4Hdr:
   834 00000901 [2309000000000000]          dq lpt1Hdr
   835 00000909 0080                        dw 08000h
   836 0000090B [8909000000000000]          dq commonStrat
   837 00000913 [5C0C000000000000]          dq com4Intr
   838 0000091B 434F4D3420202020            db "COM4    "
   839                                  lpt1Hdr:
   840 00000923 [4509000000000000]          dq lpt2Hdr
   841 0000092B 40A0                        dw 0A040h
   842 0000092D [9909000000000000]          dq nulStrat
   843 00000935 [9F09000000000000]          dq nulIntr
   844 0000093D 4C50543120202020            db "LPT1    "
   845                                  lpt2Hdr:
   846 00000945 [6709000000000000]          dq lpt3Hdr
   847 0000094D 40A0                        dw 0A040h
   848 0000094F [9909000000000000]          dq nulStrat
   849 00000957 [9F09000000000000]          dq nulIntr
   850 0000095F 4C50543220202020            db "LPT2    "
   851                                  lpt3Hdr:
   852 00000967 FFFFFFFFFFFFFFFF            dq -1
   853 0000096F 40A0                        dw 0A040h
   854 00000971 [9909000000000000]          dq nulStrat
   855 00000979 [9F09000000000000]          dq nulIntr
   856 00000981 4C50543320202020            dq "LPT3    "
   857                                  
   858                                  commonStrat:
   859                                  ;DOS calls this function with rbx=Ptr to request header
   860 00000989 48891D01000000              mov qword [reqHdrPtr], rbx
   861 00000990 C3                          ret
   862 00000991 0000000000000000        reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
   863                                  
   864                                  nulStrat:
   865 00000999 66C743030001                mov word [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
   866                                  nulIntr:
   867 0000099F C3                          ret
   868                                  
   869                                  conDriver:
   870 000009A0 50                          push rax
   871 000009A1 53                          push rbx
   872 000009A2 488B1DE8FFFFFF              mov rbx, qword [reqHdrPtr]
   873 000009A9 B003                        mov al, 03h ;Unknown Command
   874 000009AB 807B0218                    cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   875 000009AF 7739                        ja .conWriteErrorCode ;If yes, error!
   876                                  
   877 000009B1 8A4302                      mov al, byte [rbx + drvReqHdr.cmdcde]
   878 000009B4 3C04                        cmp al, 4
   879 000009B6 7441                        jz .conRead
   880 000009B8 3C05                        cmp al, 5
   881 000009BA 0F8493000000                jz .conNondestructiveRead
   882 000009C0 3C06                        cmp al, 6
   883 000009C2 0F84BC000000                jz .conInputStatus
   884 000009C8 3C07                        cmp al, 7
   885 000009CA 0F84C4000000                jz .conFlushInputBuffers
   886 000009D0 3C08                        cmp al, 8
   887 000009D2 0F84DE000000                jz .conWrite
   888 000009D8 3C09                        cmp al, 9
   889 000009DA 0F84D6000000                jz .conWrite
   890 000009E0 3C0A                        cmp al, 0Ah
   891 000009E2 0F84F7000000                jz .conOutputStatus
   892 000009E8 EB06                        jmp short .conExit  ;All other valid functions return done
   893                                  .conWriteErrorCode:     ;Jump to with al=Standard Error code
   894 000009EA B480                        mov ah, 80h ;Set error bit
   895 000009EC 66894303                    mov word [rbx + drvReqHdr.status], ax
   896                                  .conExit:
   897 000009F0 66814B030001                or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   898 000009F6 5B                          pop rbx
   899 000009F7 58                          pop rax
   900 000009F8 C3                          ret
   901                                  .conRead:    ;Function 4
   902 000009F9 B005                        mov al, 05h ;Bad request structure length?
   903 000009FB 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   904 000009FE 75EA                        jne .conWriteErrorCode
   905                                  
   906 00000A00 57                          push rdi
   907 00000A01 51                          push rcx
   908 00000A02 488B7B0E                    mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   909 00000A06 31C9                        xor ecx, ecx    ;Zero the char counter
   910                                  .cre1:
   911 00000A08 3B4B16                      cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   912 00000A0B 7424                        je .cre2
   913 00000A0D 803DDB00000000              cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
   914 00000A14 7522                        jnz .cre3   ;No, get the buffer value
   915 00000A16 B402                        mov ah, 02  ;Get keyboard status
   916 00000A18 CD36                        int 36h
   917 00000A1A A804                        test al, 4h  ;Is the CTRL key being pressed?
   918 00000A1C 7529                        jnz .cre4
   919 00000A1E 31C0                        xor eax, eax
   920 00000A20 CD36                        int 36h
   921                                  .cre11:
   922 00000A22 AA                          stosb
   923 00000A23 84C0                        test al, al ;Was the ascii code 0?
   924 00000A25 7506                        jnz .cre12  ;No, skip storing scancode
   925 00000A27 8825C2000000                mov byte [.conBuf], ah  ;Save scancode
   926                                  .cre12:
   927 00000A2D FFC1                        inc ecx ;Inc chars stored in buffer
   928 00000A2F EBD7                        jmp short .cre1
   929                                  .cre2:
   930 00000A31 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   931 00000A34 59                          pop rcx
   932 00000A35 5F                          pop rdi
   933 00000A36 EBB8                        jmp short .conExit
   934                                  .cre3:
   935 00000A38 8A05B1000000                mov al, byte [.conBuf]  ;Get the buffer value
   936 00000A3E C605AA00000000              mov byte [.conBuf], 0   ;Reset the buffer value
   937 00000A45 EBDB                        jmp short .cre11
   938                                  .cre4:
   939                                  ;Only if the CTRL key is being pressed
   940 00000A47 C605A10000001D              mov byte [.conBuf], 1Dh ;1Dh = CTRL scancode
   941 00000A4E 30C0                        xor al, al
   942 00000A50 AA                          stosb   ;Store without checking if ascii = 0
   943 00000A51 EBDA                        jmp short .cre12
   944                                  .conNondestructiveRead:  ;Function 5
   945 00000A53 B005                        mov al, 05h ;Bad request structure length?
   946 00000A55 803B0E                      cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   947 00000A58 7590                        jne .conWriteErrorCode
   948 00000A5A 803D8E00000000              cmp byte [.conBuf], 0
   949 00000A61 7519                        jnz .cnr2
   950 00000A63 B401                        mov ah, 01h     ;Get key if exists
   951 00000A65 CD36                        int 36h
   952 00000A67 7408                        jz .cnr1        ;If zero clear => no key, go forwards
   953                                      ;Keystroke available
   954                                  .cnr0:
   955 00000A69 88430D                      mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Move char in al
   956 00000A6C E97FFFFFFF                  jmp .conExit
   957                                  .cnr1: ;No keystroke available
   958 00000A71 66C743030002                mov word [rbx + nonDestInNoWaitReqPkt.status], 0200h   ;Set busy bit
   959 00000A77 E974FFFFFF                  jmp .conExit
   960                                  .cnr2:
   961 00000A7C 8A056D000000                mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   962 00000A82 EBE5                        jmp short .cnr0   ;Keystroke is available clearly
   963                                  
   964                                  .conInputStatus:         ;Function 6
   965 00000A84 B005                        mov al, 05h ;Bad request structure length?
   966 00000A86 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   967 00000A89 0F855BFFFFFF                jne .conWriteErrorCode
   968 00000A8F E95CFFFFFF                  jmp .conExit ;Exit, device ready
   969                                  
   970                                  .conFlushInputBuffers:   ;Function 7
   971 00000A94 B005                        mov al, 05h ;Bad request structure length?
   972 00000A96 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   973 00000A99 0F854BFFFFFF                jne .conWriteErrorCode
   974 00000A9F C6054900000000              mov byte [.conBuf], 0   ;Clear buffer
   975                                  .cfib0:
   976 00000AA6 B401                        mov ah, 01      ;Get buffer status
   977 00000AA8 CD36                        int 36h
   978 00000AAA 0F8440FFFFFF                jz .conExit     ;If zero clear => no more keys to read
   979 00000AB0 30E4                        xor ah, ah
   980 00000AB2 CD36                        int 36h ;Read key to flush from buffer
   981 00000AB4 EBF0                        jmp short .cfib0
   982                                  
   983                                  .conWrite:   ;Function 8 and 9
   984 00000AB6 B005                        mov al, 05h ;Bad request structure length?
   985 00000AB8 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   986 00000ABB 0F8529FFFFFF                jne .conWriteErrorCode
   987                                  
   988 00000AC1 56                          push rsi
   989 00000AC2 51                          push rcx
   990 00000AC3 488B730E                    mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   991 00000AC7 31C9                        xor ecx, ecx    ;Zero the char counter
   992                                  .cw1: 
   993 00000AC9 3B4B16                      cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   994 00000ACC 7407                        je .cw2
   995 00000ACE AC                          lodsb   ;Get char into al, and inc rsi
   996 00000ACF CD49                        int 49h ;Fast print char
   997 00000AD1 FFC1                        inc ecx
   998 00000AD3 EBF4                        jmp short .cw1 ;keep printing until all chars printed
   999                                  .cw2:
  1000 00000AD5 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
  1001 00000AD8 59                          pop rcx
  1002 00000AD9 5E                          pop rsi
  1003 00000ADA E911FFFFFF                  jmp .conExit
  1004                                  .conOutputStatus:   ;Function 0Ah
  1005 00000ADF B005                        mov al, 05h ;Bad request structure length?
  1006 00000AE1 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
  1007 00000AE4 0F8500FFFFFF                jne .conWriteErrorCode
  1008 00000AEA E901FFFFFF                  jmp .conExit
  1009                                  
  1010 00000AEF 00                      .conBuf db 0    ;Single byte buffer
  1011                                  clkDriver:
  1012 00000AF0 50                          push rax
  1013 00000AF1 53                          push rbx
  1014 00000AF2 51                          push rcx
  1015 00000AF3 52                          push rdx
  1016 00000AF4 56                          push rsi
  1017 00000AF5 57                          push rdi
  1018 00000AF6 55                          push rbp
  1019 00000AF7 488B1D93FEFFFF              mov rbx, qword [reqHdrPtr]
  1020 00000AFE B003                        mov al, 03h ;Unknown Command
  1021 00000B00 807B0218                    cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
  1022 00000B04 772D                        ja .clkWriteErrorCode ;If yes, error!
  1023 00000B06 80FC04                      cmp ah, 04h
  1024 00000B09 743C                        jz .clkRead
  1025 00000B0B 80FC06                      cmp ah, 06h
  1026 00000B0E 0F84BE000000                jz .clkInputStatus
  1027 00000B14 80FC07                      cmp ah, 07h
  1028 00000B17 0F84C5000000                jz .clkFlushInputBuffers
  1029 00000B1D 80FC08                      cmp ah, 08h
  1030 00000B20 0F84CC000000                jz .clkWrite
  1031 00000B26 80FC09                      cmp ah, 09h
  1032 00000B29 0F84C3000000                jz .clkWrite
  1033 00000B2F EB08                        jmp short .clkExit  ;All other valid functions return done immediately!
  1034                                  .clkNotFunctioning:
  1035 00000B31 B002                        mov al, 02h ;Device not ready error
  1036                                  .clkWriteErrorCode:
  1037 00000B33 B480                        mov ah, 80h ;Set error bit
  1038 00000B35 66894303                    mov word [rbx + drvReqHdr.status], ax
  1039                                  .clkExit:
  1040 00000B39 66814B030001                or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
  1041 00000B3F 5D                          pop rbp
  1042 00000B40 5F                          pop rdi
  1043 00000B41 5E                          pop rsi
  1044 00000B42 5A                          pop rdx
  1045 00000B43 59                          pop rcx
  1046 00000B44 5B                          pop rbx
  1047 00000B45 58                          pop rax
  1048 00000B46 C3                          ret
  1049                                  
  1050                                  .clkRead:           ;Function 4
  1051 00000B47 B005                        mov al, 05h ;Bad request structure length?
  1052 00000B49 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1053 00000B4C 75E5                        jne .clkWriteErrorCode
  1054                                  
  1055 00000B4E 4831ED                      xor rbp, rbp    ;Write to RBP rather than updating record word by word
  1056 00000B51 B404                        mov ah, 04h ;Read RTC date
  1057 00000B53 CD3A                        int 3Ah
  1058 00000B55 72DA                        jc .clkNotFunctioning
  1059 00000B57 0FB6C2                      movzx eax, dl  ;Get dl (day of the month) into al
  1060 00000B5A E8A8000000                  call .clkBCDtoHex   ;Convert BCD value to hex
  1061 00000B5F 89C5                        mov ebp, eax    ;Save result in bp
  1062 00000B61 88F0                        mov al, dh 
  1063 00000B63 E89F000000                  call .clkBCDtoHex
  1064 00000B68 C1E005                      shl eax, 5  ;Shift month
  1065 00000B6B 01C5                        add ebp, eax    ;Add month number to bp
  1066 00000B6D 88C8                        mov al, cl      ;Get year from cl
  1067 00000B6F E893000000                  call .clkBCDtoHex
  1068 00000B74 3C50                        cmp al, 80  ;Is the value less than 80
  1069 00000B76 7302                        jae .cread0
  1070 00000B78 0464                        add al, 100
  1071                                  .cread0:
  1072 00000B7A 2C50                        sub al, 80
  1073 00000B7C C1E009                      shl eax, 9
  1074 00000B7F 01C5                        add ebp, eax    ;number of years since 1980 shifted by 9 to ebp
  1075 00000B81 48C1E510                    shl rbp, 10h    ;Shift word 1 into word 2
  1076 00000B85 B402                        mov ah, 02h ;Read RTC time
  1077 00000B87 CD3A                        int 3Ah
  1078 00000B89 72A6                        jc .clkNotFunctioning
  1079 00000B8B 88C8                        mov al, cl  ;Get minutes into al
  1080 00000B8D E875000000                  call .clkBCDtoHex
  1081 00000B92 4809C5                      or rbp, rax ;Add minutes byte low
  1082 00000B95 48C1E508                    shl rbp, 8  ;Shift up by a byte
  1083                                  
  1084 00000B99 88E8                        mov al, ch  ;Get hours into al
  1085 00000B9B E867000000                  call .clkBCDtoHex
  1086 00000BA0 4809C5                      or rbp, rax ;Add hours to byte low
  1087 00000BA3 48C1E510                    shl rbp, 10h  ;Shift up by a byte and add an empty byte for 100ths of second
  1088 00000BA7 88F0                        mov al, dh  ;Get seconds into al
  1089 00000BA9 E859000000                  call .clkBCDtoHex
  1090 00000BAE 4809C5                      or rbp, rax ;Add seconds to byte low
  1091 00000BB1 488B7B0E                    mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Get the buffer pointer
  1092 00000BB5 4881C705000000              add rdi, 5  ;Move pointer to the end of the buffer
  1093 00000BBC 4889E8                      mov rax, rbp    ;Get the packed 6 bytes into rax
  1094 00000BBF B906000000                  mov ecx, 6  ;6 bytes to transfer
  1095 00000BC4 FD                          std ;Reverse direction of string operation
  1096                                  .cread1:
  1097 00000BC5 AA                          stosb   ;Store byte and dec rdi
  1098 00000BC6 48C1E808                    shr rax, 8  ;Shift all down by one byte
  1099 00000BCA E2F9                        loop .cread1    ;do it until ecx=0
  1100 00000BCC FC                          cld ;
  1101 00000BCD E967FFFFFF                  jmp .clkExit
  1102                                  
  1103                                  .clkInputStatus:    ;Function 6
  1104                                  ;Always return ready
  1105 00000BD2 B005                        mov al, 05h ;Bad request structure length?
  1106 00000BD4 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
  1107 00000BD7 0F8556FFFFFF                jne .clkWriteErrorCode
  1108 00000BDD E957FFFFFF                  jmp .clkExit
  1109                                  .clkFlushInputBuffers:  ;Function 7
  1110                                  ;Always return done immediately
  1111 00000BE2 B005                        mov al, 05h ;Bad request structure length?
  1112 00000BE4 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
  1113 00000BE7 0F8546FFFFFF                jne .clkWriteErrorCode
  1114 00000BED E947FFFFFF                  jmp .clkExit
  1115                                  
  1116                                  .clkWrite:          ;Functions 8 and 9
  1117 00000BF2 B005                        mov al, 05h ;Bad request structure length?
  1118 00000BF4 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1119 00000BF7 0F8536FFFFFF                jne .clkWriteErrorCode
  1120                                  
  1121 00000BFD 488B730E                    mov rsi, qword [rbx + ioReqPkt.bufptr]
  1122 00000C01 31C0                        xor eax, eax
  1123 00000C03 66AB                        stosw   ;Get first word into ax
  1124 00000C05 89C1                        mov ecx, eax    ;Save ax in cx
  1125                                  
  1126                                  .clkBCDtoHex:
  1127                                  ;Converts a BCD value to a Hex byte
  1128                                  ;Takes input in al, returns in al (zero-ed upper seven bytes)
  1129 00000C07 51                          push rcx
  1130 00000C08 0FB6C0                      movzx eax, al   ;Zero extend
  1131 00000C0B 89C1                        mov ecx, eax    ;Save al in ecx
  1132 00000C0D 250F000000                  and eax, 0Fh    ;Get lower nybble
  1133 00000C12 81E1F0000000                and ecx, 0F0h   ;Get upper nybble
  1134 00000C18 C1E904                      shr ecx, 4      ;Shift upper nybble value down
  1135                                  .cbth0:
  1136 00000C1B 050A000000                  add eax, 10
  1137 00000C20 E2F9                        loop .cbth0
  1138 00000C22 59                          pop rcx
  1139 00000C23 C3                          ret
  1140                                  
  1141                                  .clkHexToBCD:
  1142                                  ;Converts a Hex byte into two BCD digits
  1143                                  ;Takes input in al, returns in al (zero-ed upper seven bytes)
  1144 00000C24 51                          push rcx
  1145 00000C25 0FB6C0                      movzx eax, al   ;Zero extend
  1146 00000C28 31C9                        xor ecx, ecx
  1147                                  .chtb0:
  1148 00000C2A 3D0A000000                  cmp eax, 10
  1149 00000C2F 7209                        jb .chtb1
  1150 00000C31 2D0A000000                  sub eax, 10
  1151 00000C36 FFC1                        inc ecx
  1152 00000C38 EBF0                        jmp short .chtb0
  1153                                  .chtb1:
  1154 00000C3A C1E104                      shl ecx, 4  ;Move to upper nybble
  1155 00000C3D 08C8                        or al, cl   ;Move upper nybble into al upper nybble
  1156 00000C3F 59                          pop rcx
  1157 00000C40 C3                          ret
  1158                                  
  1159                                  ;COM Driver headers and main interrupt strat
  1160                                  com1Intr:
  1161 00000C41 C6059D01000000              mov byte [comIntr.comDevice], 0
  1162 00000C48 EB19                        jmp short comIntr
  1163                                  com2Intr:
  1164 00000C4A C6059401000001              mov byte [comIntr.comDevice], 1
  1165 00000C51 EB10                        jmp short comIntr
  1166                                  com3Intr:
  1167 00000C53 C6058B01000002              mov byte [comIntr.comDevice], 2
  1168 00000C5A EB07                        jmp short comIntr
  1169                                  com4Intr:
  1170 00000C5C C6058201000003              mov byte [comIntr.comDevice], 3
  1171                                  comIntr:
  1172 00000C63 50                          push rax
  1173 00000C64 53                          push rbx
  1174 00000C65 51                          push rcx
  1175 00000C66 52                          push rdx
  1176 00000C67 56                          push rsi
  1177 00000C68 57                          push rdi
  1178 00000C69 488B1D21FDFFFF              mov rbx, qword [reqHdrPtr]
  1179 00000C70 B003                        mov al, 03h ;Unknown Command
  1180 00000C72 807B0218                    cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
  1181 00000C76 7756                        ja .comWriteErrorCode ;If yes, error!
  1182                                  
  1183 00000C78 8A4302                      mov al, byte [rbx + drvReqHdr.cmdcde]
  1184 00000C7B 3C04                        cmp al, 4   ;Read Character(s)
  1185 00000C7D 7462                        jz .comRead
  1186 00000C7F 3C05                        cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
  1187 00000C81 0F849B000000                jz .comNondestructiveRead   
  1188 00000C87 3C06                        cmp al, 6   ;Read Input Status, always return with Busy bit = 0
  1189 00000C89 0F8484000000                jz .comReadInputStatus
  1190 00000C8F 3C07                        cmp al, 7   ;Flush read buffers, return done
  1191 00000C91 0F84B9000000                jz .comFlushInputBuffers
  1192 00000C97 3C08                        cmp al, 8
  1193 00000C99 0F84DB000000                jz .comWrite
  1194 00000C9F 3C09                        cmp al, 9
  1195 00000CA1 0F84D3000000                jz .comWrite
  1196 00000CA7 3C0A                        cmp al, 0Ah
  1197 00000CA9 0F8400010000                jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
  1198 00000CAF EB23                        jmp short .comExit  ;All other valid functions should return done
  1199                                  .comErrorNoCount:
  1200 00000CB1 B002                        mov al, 02h ;Unknown device
  1201 00000CB3 EB19                        jmp short .comWriteErrorCode
  1202                                  .comReadError:
  1203 00000CB5 BA0B000000                  mov edx, 0Bh
  1204                                  .comWriteError:
  1205 00000CBA BA0A000000                  mov edx, 0Ah
  1206                                  .comError:
  1207 00000CBF 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
  1208 00000CC2 B902000000                  mov ecx, 02h    ;Unknown device
  1209 00000CC7 3CFE                        cmp al, 0FEh    ;Invalid COM port
  1210 00000CC9 0F44D1                      cmove edx, ecx  ;Only move unknown device error code if invalid COM port
  1211 00000CCC 88D0                        mov al, dl      ;Move dl to al to store error code
  1212                                  .comWriteErrorCode:    ;Jump to with al=Standard Error code
  1213 00000CCE B480                        mov ah, 80h ;Set error bit
  1214 00000CD0 66894303                    mov word [rbx + drvReqHdr.status], ax
  1215                                  .comExit:
  1216 00000CD4 66814B030001                or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
  1217 00000CDA 5F                          pop rdi
  1218 00000CDB 5E                          pop rsi
  1219 00000CDC 5A                          pop rdx
  1220 00000CDD 59                          pop rcx
  1221 00000CDE 5B                          pop rbx
  1222 00000CDF 58                          pop rax
  1223 00000CE0 C3                          ret
  1224                                  
  1225                                  .comRead:
  1226 00000CE1 B005                        mov al, 05h ;Bad request structure length?
  1227 00000CE3 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1228 00000CE6 75E6                        jne .comWriteErrorCode
  1229                                  
  1230 00000CE8 488B7B0E                    mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
  1231 00000CEC 31C9                        xor ecx, ecx    ;Zero the char counter
  1232                                  .cr1:
  1233 00000CEE 3B4B16                      cmp ecx, dword [rbx + ioReqPkt.tfrlen]
  1234 00000CF1 741B                        je .cre2
  1235                                  .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
  1236 00000CF3 B802000000                  mov eax, 02h    ;Recieve 
  1237 00000CF8 8A15E7000000                mov dl, byte [.comDevice]    ;Get transacting com device
  1238 00000CFE 6698                        cbw     ;Zero extend to upper byte
  1239 00000D00 CD34                        int 34h ;Recieve Char
  1240 00000D02 72BB                        jc .comError
  1241 00000D04 80FC80                      cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
  1242 00000D07 74EA                        je .cr11
  1243 00000D09 AA                          stosb   ;Store char in al into buffer and inc rdi
  1244 00000D0A FFC1                        inc ecx
  1245 00000D0C EBE0                        jmp short .cr1
  1246                                  .cre2:
  1247 00000D0E 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
  1248 00000D11 EBC1                        jmp short .comExit
  1249                                  
  1250                                  .comReadInputStatus:
  1251 00000D13 B005                        mov al, 05h ;Bad request structure length?
  1252 00000D15 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
  1253 00000D18 75B4                        jne .comWriteErrorCode
  1254 00000D1A 66C743030000                mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
  1255 00000D20 EBB2                        jmp short .comExit
  1256                                  
  1257                                  .comNondestructiveRead:
  1258                                  ;Acts like a "read one character if there is one" function
  1259 00000D22 B005                        mov al, 05h ;Bad request structure length?
  1260 00000D24 803B0E                      cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
  1261 00000D27 75A5                        jne .comWriteErrorCode
  1262                                  .cndr1:
  1263 00000D29 B802000000                  mov eax, 02h    ;Recieve 
  1264 00000D2E 8A15B1000000                mov dl, byte [.comDevice]    ;Get transacting com device
  1265 00000D34 6698                        cbw     ;Zero extend to upper byte
  1266 00000D36 CD34                        int 34h ;Recieve Char
  1267 00000D38 0F8273FFFFFF                jc .comErrorNoCount ;Dont save a char transfer number
  1268 00000D3E 80FC80                      cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
  1269 00000D41 7405                        je .cndr2
  1270 00000D43 88430D                      mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Get next char
  1271 00000D46 EB8C                        jmp short .comExit
  1272                                  .cndr2:
  1273 00000D48 66C743030002                mov word [rbx + nonDestInNoWaitReqPkt.status], 200h ;Busy bit set
  1274 00000D4E EB84                        jmp short .comExit
  1275                                  
  1276                                  .comFlushInputBuffers:
  1277 00000D50 B005                        mov al, 05h ;Bad request structure length?
  1278 00000D52 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
  1279 00000D55 0F8573FFFFFF                jne .comWriteErrorCode
  1280                                  .cfib0:
  1281 00000D5B 8A1584000000                mov dl, byte [.comDevice]
  1282 00000D61 6698                        cbw
  1283 00000D63 B802000000                  mov eax, 02h    ;Recieve
  1284 00000D68 CD34                        int 34h
  1285 00000D6A 0F8241FFFFFF                jc .comErrorNoCount
  1286 00000D70 80FC80                      cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
  1287 00000D73 75E6                        jne .cfib0
  1288 00000D75 E95AFFFFFF                  jmp .comExit
  1289                                  
  1290                                  .comWrite:
  1291 00000D7A B005                        mov al, 05h ;Bad request structure length?
  1292 00000D7C 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1293 00000D7F 0F8549FFFFFF                jne .comWriteErrorCode
  1294                                  
  1295 00000D85 488B730E                    mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
  1296 00000D89 31C9                        xor ecx, ecx    ;Zero the char counter
  1297                                  .cw1: 
  1298 00000D8B 3B4B16                      cmp ecx, dword [rbx + ioReqPkt.tfrlen]
  1299 00000D8E 7417                        je .cw2
  1300 00000D90 AC                          lodsb   ;Get char into al, and inc rsi
  1301 00000D91 B401                        mov ah, 01h ;Move function number into ah
  1302 00000D93 8A154C000000                mov dl, byte [.comDevice]
  1303 00000D99 6698                        cbw     ;Zero extend to upper byte
  1304 00000D9B CD34                        int 34h ;Transmit char
  1305 00000D9D 0F821CFFFFFF                jc .comError
  1306 00000DA3 FFC1                        inc ecx
  1307 00000DA5 EBE4                        jmp short .cw1 ;keep printing until all chars printed
  1308                                  .cw2:
  1309 00000DA7 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
  1310 00000DAA E925FFFFFF                  jmp .comExit
  1311                                  
  1312                                  .comOutputStatus:
  1313                                  ;Read MODEM status
  1314 00000DAF B005                        mov al, 05h ;Bad request structure length?
  1315 00000DB1 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
  1316 00000DB4 0F8514FFFFFF                jne .comWriteErrorCode
  1317                                  
  1318 00000DBA 8A1525000000                mov dl, byte [.comDevice]
  1319 00000DC0 6698                        cbw     ;Zero extend to upper byte
  1320 00000DC2 B403                        mov ah, 03h     ;Get status
  1321 00000DC4 CD34                        int 34h
  1322 00000DC6 0F82E5FEFFFF                jc .comErrorNoCount
  1323 00000DCC 2510000000                  and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
  1324 00000DD1 C1E005                      shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
  1325 00000DD4 F7D0                        not eax      ;Bitwise inversion
  1326 00000DD6 2500020000                  and eax, 200h   ;Isolate bit 9
  1327 00000DDB 6689441B03                  mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
  1328 00000DE0 E9EFFEFFFF                  jmp .comExit
  1329 00000DE5 00                      .comDevice   db 0
  1330                                  
  1331                                  msdDriver:
  1332 00000DE6 50                          push rax
  1333 00000DE7 53                          push rbx
  1334 00000DE8 51                          push rcx
  1335 00000DE9 52                          push rdx
  1336 00000DEA 56                          push rsi
  1337 00000DEB 57                          push rdi
  1338 00000DEC 55                          push rbp
  1339 00000DED 4150                        push r8
  1340 00000DEF 488B1D9BFBFFFF              mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
  1341 00000DF6 807B0218                    cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
  1342 00000DFA B003                        mov al, 03h
  1343 00000DFC 0F87F9000000                ja .msdWriteErrorCode ;If yes, error!
  1344 00000E02 B001                        mov al, 01h ;Unknown Unit Error
  1345 00000E04 807B0105                    cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
  1346 00000E08 0F87ED000000                ja .msdWriteErrorCode ;If yes, error!
  1347 00000E0E 8A4302                      mov al, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
  1348 00000E11 84C0                        test al, al
  1349 00000E13 0F84F8000000                jz .msdInit
  1350 00000E19 3C01                        cmp al, 01
  1351 00000E1B 0F8496010000                jz .msdMedChk
  1352 00000E21 3C02                        cmp al, 02
  1353 00000E23 0F84FF010000                jz .msdBuildBPB
  1354 00000E29 3C03                        cmp al, 03
  1355 00000E2B 0F8465020000                jz .msdIOCTLRead
  1356 00000E31 3C04                        cmp al, 04
  1357 00000E33 0F846D020000                jz .msdRead
  1358 00000E39 3C08                        cmp al, 08
  1359 00000E3B 0F84A1020000                jz .msdWrite
  1360 00000E41 3C09                        cmp al, 09
  1361 00000E43 0F84D5020000                jz .msdWriteVerify
  1362 00000E49 3C0C                        cmp al, 12
  1363 00000E4B 0F8416030000                jz .msdIOCTLWrite
  1364 00000E51 3C0D                        cmp al, 13
  1365 00000E53 0F841E030000                jz .msdDevOpen
  1366 00000E59 3C0E                        cmp al, 14
  1367 00000E5B 0F8431030000                jz .msdDevClose
  1368 00000E61 3C0F                        cmp al, 15
  1369 00000E63 0F8444030000                jz .msdRemovableMedia
  1370 00000E69 3C13                        cmp al, 19
  1371 00000E6B 0F8465030000                jz .msdGenericIOCTL
  1372 00000E71 3C17                        cmp al, 23
  1373 00000E73 0F846D030000                jz .msdGetLogicalDev
  1374 00000E79 3C18                        cmp al, 24
  1375 00000E7B 0F847E030000                jz .msdSetLogicalDev
  1376 00000E81 EB7E                        jmp short .msdDriverExit    ;All other valid functions exit done
  1377                                  .msdIOError:  ;In Read and Write errors, rbp points to the dev struc
  1378 00000E83 4889EB                      mov rbx, rbp
  1379 00000E86 0FB6C0                      movzx eax, al   ;Number of IO-ed sectors in last request
  1380 00000E89 01C6                        add esi, eax    ;esi Keeps sector count across transfers
  1381 00000E8B 897316                      mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
  1382                                  ;Now fall through to general error
  1383                                  .msdGenDiskError:
  1384 00000E8E B401                        mov ah, 01h
  1385 00000E90 30D2                        xor dl, dl  ;Work around bug that fails request if dl > 7Fh
  1386 00000E92 CD33                        int 33h ;Read status of last operation
  1387 00000E94 80FC06                      cmp ah, 06h ;Mock Seek response (device not present)
  1388 00000E97 B002                        mov al, 02h ;Give device not ready error (sensibly I think)
  1389 00000E99 7460                        je .msdWriteErrorCode 
  1390 00000E9B B00C                        mov al, 0Ch ;Preliminary General Error Faults
  1391 00000E9D 80FCFF                      cmp ah, -1  ;Sense operation failed
  1392 00000EA0 7459                        je .msdWriteErrorCode 
  1393 00000EA2 80FC20                      cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
  1394 00000EA5 7454                        je .msdWriteErrorCode
  1395                                  ;Device Not Ready
  1396 00000EA7 B002                        mov al, 02h  ;Device not ready code
  1397 00000EA9 4138C0                      cmp r8b, al  ;SCSI Not ready commands start with 2
  1398 00000EAC 744D                        je .msdWriteErrorCode
  1399 00000EAE 49C1E808                    shr r8, 8       ;Remove Sense Key
  1400 00000EB2 410FB7C8                    movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
  1401                                  ;Write Protected
  1402 00000EB6 30C0                        xor al, al
  1403 00000EB8 6681F92700                  cmp cx, 0027h   ;Write protected error
  1404 00000EBD 743C                        je .msdWriteErrorCode
  1405                                  ;CRC Error
  1406 00000EBF B004                        mov al, 04h     ;CRC error code
  1407 00000EC1 6681F90803                  cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
  1408 00000EC6 7433                        je .msdWriteErrorCode
  1409 00000EC8 6681F91000                  cmp cx, 0010h   ;ID CRC or ECC error
  1410 00000ECD 742C                        je .msdWriteErrorCode
  1411 00000ECF 6681F94701                  cmp cx, 0147h   ;Data phase CRC error detected
  1412 00000ED4 7425                        je .msdWriteErrorCode
  1413                                  ;Seek Error
  1414 00000ED6 B006                        mov al, 06h     ;Seek error code
  1415 00000ED8 80F902                      cmp cl, 02h     ;No Seek Complete
  1416 00000EDB 741E                        je .msdWriteErrorCode
  1417                                  ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
  1418                                  ;This error should only be called if BPB not recognised for Flash Drives
  1419 00000EDD B007                        mov al, 07h
  1420 00000EDF 80F930                      cmp cl, 30h   ;All issues with media returns unknown media
  1421 00000EE2 7417                        je .msdWriteErrorCode
  1422                                  ;Sector Not Found
  1423 00000EE4 B008                        mov al, 08h     ;Sector not found code
  1424 00000EE6 80F921                      cmp cl, 21h     ;Illegal Request - Invalid LBA
  1425 00000EE9 7410                        je .msdWriteErrorCode
  1426                                  ;Write faults
  1427 00000EEB B00A                        mov al, 0Ah     ;Write fault
  1428 00000EED 80F90C                      cmp cl, 0Ch     ;Write Error ASC code
  1429 00000EF0 7409                        je .msdWriteErrorCode
  1430                                  ;Read faults
  1431 00000EF2 B00B                        mov al, 0Bh     ;Read fault
  1432 00000EF4 80F911                      cmp cl, 11h     ;Read error
  1433 00000EF7 7402                        je .msdWriteErrorCode
  1434                                  ;General Errors
  1435 00000EF9 B00C                        mov al, 0Ch     ;Everything else is general error
  1436                                  .msdWriteErrorCode:    ;Jump to with al=Standard Error code
  1437 00000EFB B480                        mov ah, 80h ;Set error bit
  1438 00000EFD 66894303                    mov word [rbx + drvReqHdr.status], ax
  1439                                  .msdDriverExit:
  1440 00000F01 66814B030001                or word [rbx + drvReqHdr.status], 0100h ;Set done bit
  1441 00000F07 4158                        pop r8
  1442 00000F09 5D                          pop rbp
  1443 00000F0A 5F                          pop rdi
  1444 00000F0B 5E                          pop rsi
  1445 00000F0C 5A                          pop rdx
  1446 00000F0D 59                          pop rcx
  1447 00000F0E 5B                          pop rbx
  1448 00000F0F 58                          pop rax
  1449 00000F10 C3                          ret
  1450                                  .msdInit:            ;Function 0
  1451 00000F11 B005                        mov al, 05h ;Bad request structure length
  1452 00000F13 803B1F                      cmp byte [rbx + drvReqHdr.hdrlen], initReqPkt_size
  1453 00000F16 75E3                        jne .msdWriteErrorCode
  1454                                  
  1455 00000F18 4151                        push r9
  1456 00000F1A CD31                        int 31h ;Get number of Int 33h devices in r8b
  1457 00000F1C 4159                        pop r9
  1458 00000F1E 4D0FB6C0                    movzx r8, r8b   ;Keeps real count
  1459 00000F22 4489C0                      mov eax, r8d
  1460 00000F25 3C01                        cmp al, 1
  1461 00000F27 7702                        ja .mi1
  1462 00000F29 FEC0                        inc al ;Make it two
  1463                                  .mi1:
  1464 00000F2B BA05000000                  mov edx, 5
  1465 00000F30 39D0                        cmp eax, edx
  1466 00000F32 0F47C2                      cmova eax, edx  ;If num of drives is greater than 5, consider only first 5
  1467 00000F35 880558F9FFFF                mov byte [msdHdr + drvHdr.drvNam], al ;Save num of drvs in drvr hdr
  1468 00000F3B 88430D                      mov byte [rbx + initReqPkt.numunt], al ;And in req packet
  1469 00000F3E 440005(A9000000)            add byte [numMSDdrv], r8b ;Add the true number of devices to total
  1470 00000F45 31ED                        xor ebp, ebp    ;Use bpl as device counter, cmp to r8b
  1471 00000F47 488D3D20030000              lea rdi, qword [.msdBPBblks]
  1472 00000F4E 53                          push rbx
  1473                                  .mi2:
  1474 00000F4F 89EA                        mov edx, ebp
  1475 00000F51 488D1D6E050000              lea rbx, qword [driverDataPtr]  ;Get effective address of scratch space
  1476 00000F58 31C9                        xor ecx, ecx    ;Sector 0
  1477 00000F5A B801820000                  mov eax, 8201h       ;Read 1 sector
  1478 00000F5F CD33                        int 33h
  1479 00000F61 724E                        jc .msdInitError
  1480                                  
  1481 00000F63 488D355C050000              lea rsi, qword [driverDataPtr]  ;Point to start of data
  1482 00000F6A B90F000000                  mov ecx, bpbEx_size/8
  1483 00000F6F F348A5                      rep movsq   ;Move the BPB data into the right block
  1484                                  
  1485 00000F72 FFC5                        inc ebp
  1486 00000F74 4C39C5                      cmp rbp, r8 ;Have we written the BPB for all physical drives?
  1487 00000F77 75D6                        jne .mi2  ;No? Go again
  1488                                  
  1489 00000F79 488D3DC6020000              lea rdi, qword [.msdBPBTbl]  ;Point to start of table
  1490 00000F80 488D15E7020000              lea rdx, qword [.msdBPBblks]
  1491                                  .mi3:
  1492 00000F87 488917                      mov qword [rdi], rdx   ;Move the block entry ptr to rdi
  1493 00000F8A 4881C278000000              add rdx, bpbEx_size      ;Make rdx point to the next block entry
  1494 00000F91 FFCD                        dec ebp
  1495 00000F93 75F2                        jnz .mi3  ;If not zero yet, go again
  1496                                  
  1497 00000F95 5B                          pop rbx
  1498 00000F96 488D15A9020000              lea rdx, qword [.msdBPBTbl]  ;Get far pointer 
  1499 00000F9D 48895316                    mov qword [rbx + initReqPkt.optptr], rdx  ;Save ptr to array
  1500 00000FA1 488D151E050000              lea rdx, qword [driverDataPtr]
  1501 00000FA8 4889530E                    mov qword [rbx + initReqPkt.endptr], rdx    ;Save free space ptr
  1502 00000FAC E950FFFFFF                  jmp .msdDriverExit
  1503                                  .msdInitError:
  1504 00000FB1 5B                          pop rbx
  1505 00000FB2 E94AFFFFFF                  jmp .msdDriverExit
  1506                                  .msdMedChk:          ;Function 1
  1507                                  ;Once the BIOS function is implmented that reads the changeline, use that!
  1508                                  ;For BIOSes that dont support the changeline, the following procedure will 
  1509                                  ; suffice.
  1510 00000FB7 B005                        mov al, 05h ;Bad request structure length
  1511 00000FB9 803B17                      cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
  1512 00000FBC 0F8539FFFFFF                jne .msdWriteErrorCode
  1513                                  
  1514 00000FC2 480FB64301                  movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
  1515 00000FC7 8A90[3C120000]              mov dl, byte [.msdBIOSmap + rax]    ;Translate unitnum to BIOS num
  1516 00000FCD F6C280                      test dl, 80h    ;If it is a fixed disk, no change!
  1517 00000FD0 754D                        jnz .mmcNoChange
  1518                                  ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
  1519 00000FD2 B416                        mov ah, 16h 
  1520 00000FD4 CD33                        int 33h
  1521 00000FD6 0F82B2FEFFFF                jc .msdGenDiskError
  1522 00000FDC 80FC80                      cmp ah, 80h
  1523 00000FDF 740E                        je .mmcNoChangeLine
  1524 00000FE1 80FC86                      cmp ah, 86h
  1525 00000FE4 7409                        je .mmcNoChangeLine
  1526 00000FE6 84E4                        test ah, ah ;No change?
  1527 00000FE8 7435                        jz .mmcNoChange
  1528 00000FEA F6C401                      test ah, 1  ;Neither 80h or 86h have bit 0 set
  1529 00000FED 7513                        jnz .mmcChange
  1530                                  ;If nothing, fall through and test manually, should never happen though
  1531                                  .mmcNoChangeLine:
  1532                                  ;Now we test Media Descriptor
  1533 00000FEF 8A530D                      mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
  1534 00000FF2 488B3CC5[46120000]          mov rdi, qword [.msdBPBTbl + 8*rax]
  1535 00000FFA 488B3F                      mov rdi, qword [rdi]    ;Dereference rdi
  1536 00000FFD 385715                      cmp byte [rdi + bpb32.media], dl    ;Compare media descriptor bytes
  1537 00001000 7414                        je .mmcUnsure
  1538                                  .mmcChange:
  1539 00001002 C6430EFF                    mov byte [rbx + mediaCheckReqPkt.medret], -1
  1540 00001006 488D0525020000              lea rax, qword [.msdDefLabel]           ;Temp, ret def label
  1541 0000100D 4889430F                    mov qword [rbx + mediaCheckReqPkt.desptr], rax 
  1542 00001011 E9EBFEFFFF                  jmp .msdDriverExit
  1543                                  .mmcUnsure:
  1544 00001016 C6430E00                    mov byte [rbx + mediaCheckReqPkt.medret], 0
  1545 0000101A E9E2FEFFFF                  jmp .msdDriverExit
  1546                                  .mmcNoChange:
  1547 0000101F C6430E01                    mov byte [rbx + mediaCheckReqPkt.medret], 1
  1548 00001023 E9D9FEFFFF                  jmp .msdDriverExit
  1549                                  
  1550                                  .msdBuildBPB:        ;Function 2
  1551 00001028 B005                        mov al, 05h ;Bad request structure length
  1552 0000102A 803B1E                      cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
  1553 0000102D 0F85C8FEFFFF                jne .msdWriteErrorCode
  1554                                  
  1555 00001033 4889DE                      mov rsi, rbx
  1556 00001036 480FB64601                  movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
  1557 0000103B 8A90[3C120000]              mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req
  1558 00001041 488B5E0E                    mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
  1559 00001045 31C9                        xor ecx, ecx    ;Read Sector 0
  1560 00001047 B801820000                  mov eax, 8201h  ;LBA Read 1 sector
  1561 0000104C CD33                        int 33h
  1562 0000104E 0F823AFEFFFF                jc .msdGenDiskError
  1563                                  ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
  1564 00001054 807B15F0                    cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
  1565 00001058 7418                        je .mbbpb0
  1566 0000105A 807B15F8                    cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
  1567 0000105E 7412                        je .mbbpb0
  1568 00001060 807B15F9                    cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
  1569 00001064 740C                        je .mbbpb0
  1570 00001066 807B15FC                    cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
  1571 0000106A B007                        mov al, 07h ;Unknown media error code
  1572 0000106C 0F8289FEFFFF                jb .msdWriteErrorCode
  1573                                  .mbbpb0:
  1574 00001072 4887DE                      xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
  1575 00001075 480FB64301                  movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
  1576 0000107A 488B3CC5[46120000]          mov rdi, qword [.msdBPBTbl + 8*rax] ;Get pointer to pointer to buffer
  1577 00001082 488B3F                      mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
  1578 00001085 48897B16                    mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
  1579 00001089 B90F000000                  mov ecx, bpbEx_size/8
  1580 0000108E F348A5                      rep movsq   ;Move the BPB data into the right space
  1581 00001091 E96BFEFFFF                  jmp .msdDriverExit
  1582                                  .msdIOCTLRead:       ;Function 3, returns done
  1583 00001096 B005                        mov al, 05h ;Bad request structure length
  1584 00001098 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1585 0000109B 0F855AFEFFFF                jne .msdWriteErrorCode
  1586                                  
  1587 000010A1 E95BFEFFFF                  jmp .msdDriverExit
  1588                                  .msdRead:            ;Function 4
  1589                                  ;Will read one sector at a time.
  1590 000010A6 B005                        mov al, 05h ;Bad request structure length
  1591 000010A8 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1592 000010AB 0F854AFEFFFF                jne .msdWriteErrorCode
  1593                                  
  1594 000010B1 4889DD                      mov rbp, rbx
  1595 000010B4 31F6                        xor esi, esi  ;Set sector read counter to zero
  1596                                  .msdr0:
  1597 000010B6 B682                        mov dh, 82h ;LBA Read Sectors
  1598 000010B8 E85B010000                  call .msdBlkIOCommon
  1599 000010BD 0F82C0FDFFFF                jc .msdIOError
  1600 000010C3 4881451A00020000            add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
  1601 000010CB 4881450E00020000            add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
  1602 000010D3 FFC6                        inc esi
  1603 000010D5 3B7516                      cmp esi, dword [rbp + ioReqPkt.tfrlen]
  1604 000010D8 75DC                        jne .msdr0
  1605 000010DA 4889EB                      mov rbx, rbp
  1606 000010DD E91FFEFFFF                  jmp .msdDriverExit
  1607                                  .msdWrite:           ;Function 8
  1608                                  ;Will write one sector at a time.
  1609 000010E2 B005                        mov al, 05h ;Bad request structure length
  1610 000010E4 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1611 000010E7 0F850EFEFFFF                jne .msdWriteErrorCode
  1612                                  
  1613 000010ED 4889DD                      mov rbp, rbx
  1614 000010F0 31F6                        xor esi, esi  ;Set counter to zero
  1615                                  .msdw0:
  1616 000010F2 B683                        mov dh, 83h ;LBA Write Sectors
  1617 000010F4 E81F010000                  call .msdBlkIOCommon
  1618 000010F9 0F8284FDFFFF                jc .msdIOError
  1619 000010FF 4881451A00020000            add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
  1620 00001107 4881450E00020000            add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
  1621 0000110F FFC6                        inc esi
  1622 00001111 3B7516                      cmp esi, dword [rbp + ioReqPkt.tfrlen]
  1623 00001114 75DC                        jne .msdw0
  1624 00001116 4889EB                      mov rbx, rbp
  1625 00001119 E9E3FDFFFF                  jmp .msdDriverExit
  1626                                  .msdWriteVerify:     ;Function 9, writes sectors then verifies them
  1627                                  ;Will write one sector at a time and then verify it.
  1628 0000111E B005                        mov al, 05h ;Bad request structure length
  1629 00001120 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1630 00001123 0F85D2FDFFFF                jne .msdWriteErrorCode
  1631                                  
  1632 00001129 4889DD                      mov rbp, rbx
  1633 0000112C 31F6                        xor esi, esi  ;Set counter to zero
  1634                                  .msdwv0:
  1635 0000112E B683                        mov dh, 83h ;LBA Write Sectors
  1636 00001130 E8E3000000                  call .msdBlkIOCommon
  1637 00001135 0F8248FDFFFF                jc .msdIOError    ;Error handler needs to add to esi the value in al
  1638 0000113B B684                        mov dh, 84h ;LBA Verify Sectors
  1639 0000113D E8D6000000                  call .msdBlkIOCommon
  1640 00001142 0F823BFDFFFF                jc .msdIOError    ;Error handler needs to add to esi the value in al
  1641 00001148 4881451A00020000            add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
  1642 00001150 4881450E00020000            add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
  1643 00001158 FFC6                        inc esi
  1644 0000115A 3B7516                      cmp esi, dword [rbp + ioReqPkt.tfrlen]
  1645 0000115D 75CF                        jne .msdwv0
  1646 0000115F 4889EB                      mov rbx, rbp
  1647 00001162 E99AFDFFFF                  jmp .msdDriverExit
  1648                                  .msdIOCTLWrite:      ;Function 12, returns done
  1649 00001167 B005                        mov al, 05h ;Bad request structure length
  1650 00001169 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1651 0000116C 0F8589FDFFFF                jne .msdWriteErrorCode
  1652                                  
  1653 00001172 E98AFDFFFF                  jmp .msdDriverExit
  1654                                  .msdDevOpen:         ;Function 13
  1655 00001177 B005                        mov al, 05h ;Bad request structure length
  1656 00001179 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
  1657 0000117C 0F8579FDFFFF                jne .msdWriteErrorCode
  1658                                  
  1659 00001182 480FB64301                  movzx rax, byte [rbx + openReqPkt.unitnm]
  1660 00001187 FE80[41120000]              inc byte [.msdHdlCnt + rax]  ;Inc handle cnt for given unit
  1661 0000118D E96FFDFFFF                  jmp .msdDriverExit
  1662                                  .msdDevClose:        ;Function 14
  1663 00001192 B005                        mov al, 05h ;Bad request structure length
  1664 00001194 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
  1665 00001197 0F855EFDFFFF                jne .msdWriteErrorCode
  1666                                  
  1667 0000119D 480FB64301                  movzx rax, byte [rbx + closeReqPkt.unitnm]
  1668 000011A2 FE88[41120000]              dec byte [.msdHdlCnt + rax]  ;Dec handle cnt for given unit
  1669 000011A8 E954FDFFFF                  jmp .msdDriverExit
  1670                                  .msdRemovableMedia:  ;Function 15
  1671 000011AD B005                        mov al, 05h ;Bad request structure length
  1672 000011AF 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
  1673 000011B2 0F8543FDFFFF                jne .msdWriteErrorCode
  1674                                  
  1675 000011B8 480FB64301                  movzx rax, byte [rbx + remMediaReqPkt.unitnm]
  1676 000011BD 8A80[3C120000]              mov al, byte [.msdBIOSmap + rax]    ;Get BIOS number
  1677 000011C3 A880                        test al, 80h
  1678 000011C5 0F8436FDFFFF                jz .msdDriverExit   ;If removable, busy bit is clear
  1679 000011CB 66C743030002                mov word [rbx + remMediaReqPkt.status], 0200h ;Set Busy bit
  1680 000011D1 E92BFDFFFF                  jmp .msdDriverExit
  1681                                  .msdGenericIOCTL:    ;Function 19
  1682 000011D6 B005                        mov al, 05h ;Bad request structure length
  1683 000011D8 803B27                      cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
  1684 000011DB 0F851AFDFFFF                jne .msdWriteErrorCode
  1685                                  
  1686 000011E1 E91BFDFFFF                  jmp .msdDriverExit
  1687                                  .msdGetLogicalDev:   ;Function 23
  1688 000011E6 B005                        mov al, 05h ;Bad request structure length
  1689 000011E8 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
  1690 000011EB 0F850AFDFFFF                jne .msdWriteErrorCode
  1691                                  
  1692 000011F1 8A0544000000                mov al, byte [.msdCurDev]
  1693 000011F7 884301                      mov byte [rbx + getDevReqPkt.unitnm], al
  1694 000011FA E902FDFFFF                  jmp .msdDriverExit
  1695                                  .msdSetLogicalDev:   ;Function 24
  1696 000011FF B005                        mov al, 05h ;Bad request structure length
  1697 00001201 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
  1698 00001204 0F85F1FCFFFF                jne .msdWriteErrorCode
  1699                                  
  1700 0000120A 8A4301                      mov al, byte [rbx + getDevReqPkt.unitnm]
  1701 0000120D 880528000000                mov byte [.msdCurDev], al
  1702 00001213 E9E9FCFFFF                  jmp .msdDriverExit
  1703                                  
  1704                                  .msdBlkIOCommon:  ;Does block IO
  1705                                  ;Called with rbp containing old rbx value and ah with function number
  1706                                  ;Error handled by caller
  1707                                  ;Sector count handled by caller
  1708                                  ;Called with dh = BIOS function number
  1709 00001218 480FB64501                  movzx rax, byte [rbp + ioReqPkt.unitnm]
  1710 0000121D 8A90[3C120000]              mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
  1711 00001223 488B4D1A                    mov rcx, qword [rbp + ioReqPkt.strtsc]  ;Get start sector
  1712 00001227 488B5D0E                    mov rbx, qword [rbp + ioReqPkt.bufptr]  ;Get Memory Buffer
  1713 0000122B 88F4                        mov ah, dh
  1714 0000122D B001                        mov al, 01h ;Do one sector at a time 
  1715 0000122F CD33                        int 33h
  1716 00001231 C3                          ret
  1717                                  
  1718 00001232 4E4F204E414D452000      .msdDefLabel db "NO NAME ",0 ;Default volume label
  1719                                  ;LASTDRIVE default is 5
  1720 0000123B 00                      .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
  1721                                  ; Except when single drive in use, in which case Drive A and B refer to device 0
  1722 0000123C 0000000000              .msdBIOSmap  db 5 dup (0)    ;Translates DOS drive number to BIOS number
  1723 00001241 0000000000              .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
  1724 00001246 000000000000000000-     .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
  1724 0000124F 000000000000000000-
  1724 00001258 000000000000000000-
  1724 00001261 000000000000000000-
  1724 0000126A 00000000           
  1725 0000126E 000000000000000000-     .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
  1725 00001277 000000000000000000-
  1725 00001280 000000000000000000-
  1725 00001289 000000000000000000-
  1725 00001292 000000000000000000-
  1725 0000129B 000000000000000000-
  1725 000012A4 000000000000000000-
  1725 000012AD 000000000000000000-
  1725 000012B6 000000000000000000-
  1725 000012BF 000000000000000000-
  1725 000012C8 000000000000000000-
  1725 000012D1 000000000000000000-
  1725 000012DA 000000000000000000-
  1725 000012E3 000000000000000000-
  1725 000012EC 000000000000000000-
  1725 000012F5 000000000000000000-
  1725 000012FE 000000000000000000-
  1725 00001307 000000000000000000-
  1725 00001310 000000000000000000-
  1725 00001319 000000000000000000-
  1725 00001322 000000000000000000-
  1725 0000132B 000000000000000000-
  1725 00001334 000000000000000000-
  1725 0000133D 000000000000000000-
  1725 00001346 000000000000000000-
  1725 0000134F 000000000000000000-
  1725 00001358 000000000000000000-
  1725 00001361 000000000000000000-
  1725 0000136A 000000000000000000-
  1725 00001373 000000000000000000-
  1725 0000137C 000000000000000000-
  1725 00001385 000000000000000000-
  1725 0000138E 000000000000000000-
  1725 00001397 000000000000000000-
  1725 000013A0 000000000000000000-
  1725 000013A9 000000000000000000-
  1725 000013B2 000000000000000000-
  1725 000013BB 000000000000000000-
  1725 000013C4 000000000000000000-
  1725 000013CD 000000000000000000-
  1725 000013D6 000000000000000000-
  1725 000013DF 000000000000000000-
  1725 000013E8 000000000000000000-
  1725 000013F1 000000000000000000-
  1725 000013FA 000000000000000000-
  1725 00001403 000000000000000000-
  1725 0000140C 000000000000000000-
  1725 00001415 000000000000000000-
  1725 0000141E 000000000000000000-
  1725 00001427 000000000000000000-
  1725 00001430 000000000000000000-
  1725 00001439 000000000000000000-
  1725 00001442 000000000000000000-
  1725 0000144B 000000000000000000-
  1725 00001454 000000000000000000-
  1725 0000145D 000000000000000000-
  1725 00001466 000000000000000000-
  1725 0000146F 000000000000000000-
  1725 00001478 000000000000000000-
  1725 00001481 000000000000000000-
  1725 0000148A 000000000000000000-
  1725 00001493 000000000000000000-
  1725 0000149C 000000000000000000-
  1725 000014A5 000000000000000000-
  1725 000014AE 000000000000000000-
  1725 000014B7 000000000000000000-
  1725 000014C0 000000000000       
  1726                                  
  1727                                  driverDataPtr:
