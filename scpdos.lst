     1                                  [map all scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs and strucs
     5                                  %include "driverStruc.inc"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     9                              <1> ; device driver related structures.                     ;
    10                              <1> ;-------------------------------------------------------;
    11                              <1> 
    12                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    13                              <1> 
    14 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    15 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    16 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    17 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    18 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    19                              <1> 
    20                              <1> endstruc
    21                              <1> 
    22                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    23                              <1> 
    24                              <1>     .hdrlen resb 1  ;Length of the request header
    25                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    26                              <1>     .cmdcde resb 1  ;Command code
    27                              <1>     .status resw 1  ;Status word
    28                              <1>     .devptr resq 1  ;Device queue pointer field
    29                              <1> 
    30                              <1> %endmacro
    31                              <1> ;Command Code equates
    32                              <1>     drvINIT        equ 0
    33                              <1>     drvMEDCHK      equ 1
    34                              <1>     drvBUILDBPB    equ 2
    35                              <1>     drvIOCTLREAD   equ 3
    36                              <1>     drvREAD        equ 4
    37                              <1>     drvNONDESTREAD equ 5
    38                              <1>     drvINSTATUS    equ 6
    39                              <1>     drvFLUSHINBUF  equ 7
    40                              <1>     drvWRITE       equ 8
    41                              <1>     drvWRITEVERIFY equ 9
    42                              <1>     drvOUTSTATUS   equ 10
    43                              <1>     drvFLUSHOUTBUF equ 11
    44                              <1>     drvIOCTLWRITE  equ 12
    45                              <1>     drvOPEN        equ 13
    46                              <1>     drvCLOSE       equ 14
    47                              <1>     drvREMMEDCHECK equ 15
    48                              <1>     drvOUTTILBUSY  equ 16  ;Not implemented
    49                              <1>     drvIOCTL       equ 19
    50                              <1>     drvGETDRVMAP   equ 23
    51                              <1>     drvSETDRVMAP   equ 24
    52                              <1> 
    53                              <1> ;Drive structures
    54                              <1> struc drvReqHdr
    55                              <1>     drvReqHdrM
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    56                              <1> endstruc
    57                              <1> 
    58                              <1> struc initReqPkt  ;Init Request Packet
    59                              <1> 
    60                              <1>     drvReqHdrM   ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    61 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
    62 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
    63 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
    64 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
    65                              <1> 
    66                              <1> endstruc
    67                              <1> 
    68                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
    69                              <1> 
    70                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    71 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    72 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
    73 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
    74                              <1> 
    75                              <1> endstruc
    76                              <1> 
    77                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
    78                              <1> 
    79                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    80 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    81 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    82 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
    83                              <1> 
    84                              <1> endstruc
    85                              <1> 
    86                              <1> struc ioReqPkt   ;IO Request Packet
    87                              <1> 
    88                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    89 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    90 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    91 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
    92 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
    93 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
    94                              <1> 
    95                              <1> endstruc
    96                              <1> 
    97                              <1> struc nonDestInNoWaitReqPkt    ;Nondestructive Input No Wait Request Packet
    98                              <1>     
    99                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   100 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   101                              <1> 
   102                              <1> endstruc
   103                              <1> 
   104                              <1> struc statusReqPkt   ;Status Request Packet
   105                              <1> 
   106                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   107                              <1> 
   108                              <1> endstruc
   109                              <1> 
   110                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   111                              <1> 
   112                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   113                              <1>      
   114                              <1> endstruc
   115                              <1> 
   116                              <1> struc openReqPkt ;Open Device Request Packet
   117                              <1> 
   118                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   119                              <1>      
   120                              <1> endstruc
   121                              <1> 
   122                              <1> struc closeReqPkt ;Close Device Request Packet
   123                              <1> 
   124                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   125                              <1>      
   126                              <1> endstruc
   127                              <1> 
   128                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   129                              <1> 
   130                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   131                              <1>      
   132                              <1> endstruc
   133                              <1> 
   134                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   135                              <1> 
   136                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   137 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   138 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   139 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   140 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   141 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   142                              <1> 
   143                              <1> endstruc
   144                              <1> 
   145                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   146                              <1>     
   147                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   148                              <1> 
   149                              <1> endstruc
   150                              <1> 
   151                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   152                              <1>     
   153                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   154                              <1> 
   155                              <1> endstruc
     6                                  %include "fatStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous FAT driver   ;
    10                              <1> ; structures. exFAT will have it's own files at a later ;
    11                              <1> ; stage.                                                ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    17                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    18                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    19                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    20                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    21                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    22                              <1> ;-------------------------------------------------------;
    23                              <1> 
    24                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    25                              <1> 
    26 00000000 ??????              <1>     .jmpBoot    resb 3 
    27 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    28 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    29 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    30 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    31 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    32 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    33 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    34 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    35 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    36 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    37 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    38 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    39 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    40                              <1> 
    41 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    42 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    43 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    44 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    45 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    46 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    47                              <1> 
    48                              <1> endstruc
    49                              <1> 
    50                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    51                              <1> 
    52 00000000 ??????              <1>     .jmpBoot    resb 3
    53 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    54 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    55 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    56 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    57 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    58 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    59 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    60 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    61 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    62 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    63 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    64 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    65 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    66                              <1> 
    67 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    68 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    69 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    70 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    71 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    72 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    73 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    74                              <1> 
    75 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    76 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    77 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    78 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    79 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    80 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    81                              <1> 
    82                              <1> endstruc
    83                              <1> 
    84                              <1> struc mbr
    85 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    86 000001B8 ????????            <1>     .diskID     resb 4
    87 000001BC ????                <1>     .reserved   resb 2
    88 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    89 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    90 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    91 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    92 000001FE ????                <1>     .mbrSig     resb 2
    93                              <1> endstruc
    94                              <1> 
    95                              <1> struc mbrEntry
    96 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    97 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    98 00000004 ??                  <1>     .ptnType    resb 1
    99 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   100 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   101 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   102                              <1> endstruc
   103                              <1> 
   104                              <1> struc fatDirEntry
   105                              <1> 
   106 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
   107 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   108 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   109 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   110 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   111 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   112 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   113 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   114 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   115 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   116 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   117 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   118                              <1> 
   119                              <1> endstruc
   120                              <1> ;Directory attribute equates
   121                              <1>     dirReadOnly     equ 01h
   122                              <1>     dirHidden       equ 02h
   123                              <1>     dirSystem       equ 04h
   124                              <1>     dirVolumeID     equ 08h
   125                              <1>     dirDirectory    equ 10h
   126                              <1>     dirArchive      equ 20h
   127                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   128                              <1> 
   129                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   130                              <1> 
   131 00000000 ??????              <1>     .jmpBoot                resb 3 
   132 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   133 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   134 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   135 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   136 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   137 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   138 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   139 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   140 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   141 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   142 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   143 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   144 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   145 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   146 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   147 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   148 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   149 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   150                              <1> 
   151                              <1> endstruc
   152                              <1> 
   153                              <1> struc FSInfo
   154                              <1> 
   155 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   156 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   157 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   158 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   159 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   160 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   161 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   162                              <1> 
   163                              <1> endstruc
     7                                  %include "dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ??                  <1>     .bBytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)x
    27 00000003 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000004 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000005 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000007 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000008 ????                <1>     .wNumberRootDirSectors   resw 1  ;In sectors, this is 0 for FAT32 formats x
    32 0000000A ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000E ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000012 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000016 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001A ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000022 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000023 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000024 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002C ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000030 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Flags: Bit 15 set = Network drive
    69                              <1> ;        Bit 14 set = Physical drive
    70                              <1> ;        Bit 13 set = JOIN'ed drive
    71                              <1> ;        Bit 12 set = SUBST'ed drive
    72                              <1> ;        Bit 7  set = Redirected, not network, drive (This is how MSCDEX worked)
    73                              <1> endstruc
    74                              <1> ;CDS equates
    75                              <1>     cdsNetDrive     equ 8000h
    76                              <1>     cdsPhysDrive    equ 4000h
    77                              <1>     cdsJoinDrive    equ 2000h
    78                              <1>     cdsSubstDrive   equ 1000h
    79                              <1>     cdsRedirDrive   equ 0080h
    80                              <1> ;------------------------------------------------------------------------;
    81                              <1> ; The SFT is a way to allow applications to open file handles to files 
    82                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    83                              <1> ; under the first header, and then a second header will be linked to the 
    84                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    85                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    86                              <1> ; using the FCBS= command. Default FCBS=5.
    87                              <1> ;
    88                              <1> ; A file handle describes the file, and the location within the file that
    89                              <1> ; we are reading. The file handle can be manipulated without the file
    90                              <1> ; being in memory, thus allowing the user to access data without needing 
    91                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    92                              <1> ; accessing devices, by treating them as files with their drivers 
    93                              <1> ; responding and translating the manipulations of the file handle itself.
    94                              <1> ; Neither the driver nor the application should see or use the SFT for
    95                              <1> ; the handle, as it is subject to change (and will change when file 
    96                              <1> ; sharing provisions are included). The DOS will make requests to the 
    97                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    98                              <1> ; track of the information in the SFT entry for that handle. 
    99                              <1> ;
   100                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   101                              <1> ; can point to the same file. It all depends on what the applications 
   102                              <1> ; want to do with the File.
   103                              <1> ;
   104                              <1> ; !!!!IMPORTANT!!!!
   105                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   106                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   107                              <1> ;
   108                              <1> ;Each SFT may look like this:
   109                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   110                              <1> ;            |                |
   111                              <1> ;       wNumFiles*sft    wNumFiles*sft
   112                              <1> ;
   113                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   114                              <1> ; System FCBs.
   115                              <1> ;
   116                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   117                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   118                              <1> ;
   119                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   120                              <1> ; DEFAULT FCBS=5, MINIMUM FCBS=5
   121                              <1> ;------------------------------------------------------------------------;
   122                              <1> struc sfth   ;System file table header
   123                              <1> ; This is the SFT header.
   124                              <1> ; This structure comes before the start of the first file in the array/table.
   125 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   126 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   127                              <1> endstruc
   128                              <1> 
   129                              <1> struc sft
   130                              <1> ;This is the file struc itself
   131 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   132 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   133 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   134 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   135 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   136 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file
   137 00000013 ????                <1>     .wTime       resw 1    ;File Time
   138 00000015 ????                <1>     .wDate       resw 1    ;File Date
   139 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   140 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset in file, in bytes
   141 0000001F ????                <1>     .wRelSect    resw 1    ;Rel sector in file of the last cluster accessed
   142 00000021 ????????            <1>     .dDirSect    resd 1    ;Rel number of sector containing directory entry 
   143 00000025 ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   144 00000026 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   145 00000031 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   146 00000039 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster of last cluster accessed
   147                              <1> endstruc
   148                              <1> ;Open Mode equates
   149                              <1> ;Access modes   Bits[2:0]
   150                              <1>     ReadAccess      equ 0h
   151                              <1>     WriteAccess     equ 1h
   152                              <1>     RWAccess        equ 2h
   153                              <1> ;Bit 3 reserved 0
   154                              <1> ;Sharing modes  Bits[6:4]
   155                              <1>     CompatShare     equ 0h
   156                              <1>     denyRWShare     equ 10h
   157                              <1>     denyWriteShare  equ 20h
   158                              <1>     denyReadShare   equ 30h
   159                              <1>     denyNoneShare   equ 40h
   160                              <1> ;Bit 7 reserved 0
   161                              <1> ;Bits 8-12 reserved 0
   162                              <1> ;Critical Error handling
   163                              <1>     critErrHdl      equ 2000h   ;If set, return error code. If clear, INT 44h
   164                              <1> ;Buffering on writes
   165                              <1>     noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   166                              <1> ;FCB opened file?
   167                              <1>     FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   168                              <1> ;Attribute Byte
   169                              <1>     readOnlyFile    equ 1h
   170                              <1>     hiddenFile      equ 2h
   171                              <1>     systemFile      equ 4h
   172                              <1>     volumeLabel     equ 8h
   173                              <1>     directoryFile   equ 10h ;Directory entry
   174                              <1>     archiveFile     equ 20h
   175                              <1> ;Device Info equates
   176                              <1> ;For a block device, bits [5:0] contain the drive number
   177                              <1>     charDevConIn    equ 1h  ;If set, device is CON input
   178                              <1>     charDevConOut   equ 2h  ;If set, device is CON output
   179                              <1>     charDevNulDev   equ 4h  ;If set, device is NULL device
   180                              <1>     charDevClockDev equ 8h  ;If set, device is CLOCK device
   181                              <1>     charDevFastOut  equ 10h ;If set, device supports INT 49h
   182                              <1>     devBinary       equ 20h ;If set, r/w device in Binary mode!!!
   183                              <1>     charDevNoEOF    equ 40h ;If set, no EOF on input!!
   184                              <1>     blokDevNotFlush equ 40h ;If set, file not written to disk yet!!!
   185                              <1>     devCharDev      equ 80h ;If set, it is a char device!
   186                              <1>     charDevNetSpool equ 800h    ;If set, device is a network spooler
   187                              <1>     devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   188                              <1>     charDevNamePipe equ 2000h   ;If set, device is a named pipe
   189                              <1>     blokDevDTSet    equ 4000h   ;If set, date and time updated for all i/o
   190                              <1>     devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   191                              <1> ;------------------------------------------------------------------------;
   192                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   193                              <1> ; to an internal buffer, and then copying it to the specified location
   194                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   195                              <1> ; another request for the same sector from the same device is made, so 
   196                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   197                              <1> ; size, selected according to the largest detected sector size during 
   198                              <1> ; the initial loadup.
   199                              <1> ;
   200                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   201                              <1> ;
   202                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   203                              <1> ;------------------------------------------------------------------------;
   204                              <1> 
   205                              <1> struc bufferHdr
   206 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   207 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   208 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   209 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   210 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   211 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   212 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   213 0000001F ??                  <1>     .reserved    resb  1   ;Alignment byte
   214                              <1>     .dataarea:             ;Points to the start of the data area
   215                              <1> endstruc
   216                              <1> ;Buffer Flag equates
   217                              <1>     dosBuffer   equ 1h  ;DOS data sector in buffer
   218                              <1>     fatBuffer   equ 2h  ;FAT sector in buffer
   219                              <1>     dirBuffer   equ 4h  ;Directory sector in buffer
   220                              <1>     dataBuffer  equ 8h  ;File Data sector in buffer
   221                              <1>     refBuffer   equ 20h ;Data in buffer referenced by an application
   222                              <1>     dirtyBuffer equ 40h ;Data in buffer modified by an application
   223                              <1> ;------------------------------------------------------------------------;
   224                              <1> ; Memory control block for each memory arena
   225                              <1> ;------------------------------------------------------------------------;
   226                              <1> struc mcb
   227 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   228 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP or 0 for free space
   229 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   230 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   231                              <1>     .program:
   232                              <1> endstruc
   233                              <1> ;MCB equates
   234                              <1> mcbOwnerHole    equ -1  ;Owner = -1 => Memory hole
   235                              <1> mcbOwnerFree    equ 0   ;Owner =  0 => Free and available space
   236                              <1> mcbOwnerDOS     equ 8   ;Owner =  8 => Owned by DOS
   237                              <1> ;Owner = Para aligned address => Owning application PSP
   238                              <1> ;...To consider...
   239                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   240                              <1> 
   241                              <1> ;------------------------------------------------------------------------;
   242                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   243                              <1> ; following order, thus allowing for return values to be placed in the 
   244                              <1> ; registers by accessing the caller register stack frame.
   245                              <1> ;------------------------------------------------------------------------;
   246                              <1> struc callerFrame
   247 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   248 00000008 ????????????????    <1>     .rbx    resq 1    
   249 00000010 ????????????????    <1>     .rcx    resq 1
   250 00000018 ????????????????    <1>     .rdx    resq 1
   251 00000020 ????????????????    <1>     .rsi    resq 1
   252 00000028 ????????????????    <1>     .rdi    resq 1
   253 00000030 ????????????????    <1>     .rbp    resq 1
   254 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   255 00000040 ????????????????    <1>     .r9     resq 1
   256                              <1> ;Pushed by Processor when invoked via Interrupt
   257 00000048 ????????????????    <1>     .rip    resq 1
   258 00000050 ????????????????    <1>     .cs     resq 1
   259 00000058 ????????????????    <1>     .flags  resq 1
   260                              <1> endstruc
   261                              <1> 
   262                              <1> %macro pushDOS 0
   263                              <1>     push r9
   264                              <1>     push r8
   265                              <1>     push rbp
   266                              <1>     push rdi
   267                              <1>     push rsi
   268                              <1>     push rdx
   269                              <1>     push rcx
   270                              <1>     push rbx
   271                              <1>     push rax
   272                              <1> %endmacro
   273                              <1> 
   274                              <1> %macro popDOS 0
   275                              <1>     pop rax
   276                              <1>     pop rbx
   277                              <1>     pop rcx
   278                              <1>     pop rdx
   279                              <1>     pop rsi
   280                              <1>     pop rdi
   281                              <1>     pop rbp
   282                              <1>     pop r8
   283                              <1>     pop r9
   284                              <1> %endmacro
   285                              <1> struc fcb
   286                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   287 00000000 ??                  <1>     .driveNum   resb 1
   288 00000001 ????????????????    <1>     .filename   resb 8
   289 00000009 ??????              <1>     .fileext    resb 3
   290 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   291                              <1> ;One block consists of 128 records, of size denoted in the below
   292 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   293 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   294 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   295 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   296 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   297 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   298 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   299 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   300 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   301                              <1>     ;If record size > 64, high byte is ignored.
   302                              <1>     ;Used for random read and write operations to find the right record
   303                              <1> endstruc
   304                              <1> 
   305                              <1> struc psp
   306 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   307 00000002 ????????????????    <1>     .startSeg   resq 1  ;Pointer to the start of the PSP
   308 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   309 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   310 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   311 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   312 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   313 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   314 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   315 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   316 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   317 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain
   318 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   319                              <1> ;Extra handle arrays are grouped into a linked list
   320                              <1> ;The below are in the same place as in DOS
   321 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   322 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   323                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   324 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   325 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   326                              <1> endstruc
   327                              <1> 
   328                              <1> struc clkStruc
   329 00000000 ????                <1>     .dateWord   resw 1
   330 00000002 ??                  <1>     .minutes    resb 1
   331 00000003 ??                  <1>     .hours      resb 1
   332 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   333 00000005 ??                  <1>     .seconds    resb 1
   334                              <1> endstruc
     8                                  Segment .text align=1   ;Init code
     9                                  %include "sysInit.asm"
    10                              <1> ; We arrive here with the following values in the registers.
    11                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    12                              <1> ; dx  = Int 33h boot device number
    13                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    14                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    15 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    16 00000002 909090909090909090- <1>     db (100h-2) dup (90h)   ;Duplicate NOPs for the PSP
    16 0000000B 909090909090909090- <1>
    16 00000014 909090909090909090- <1>
    16 0000001D 909090909090909090- <1>
    16 00000026 909090909090909090- <1>
    16 0000002F 909090909090909090- <1>
    16 00000038 909090909090909090- <1>
    16 00000041 909090909090909090- <1>
    16 0000004A 909090909090909090- <1>
    16 00000053 909090909090909090- <1>
    16 0000005C 909090909090909090- <1>
    16 00000065 909090909090909090- <1>
    16 0000006E 909090909090909090- <1>
    16 00000077 909090909090909090- <1>
    16 00000080 909090909090909090- <1>
    16 00000089 909090909090909090- <1>
    16 00000092 909090909090909090- <1>
    16 0000009B 909090909090909090- <1>
    16 000000A4 909090909090909090- <1>
    16 000000AD 909090909090909090- <1>
    16 000000B6 909090909090909090- <1>
    16 000000BF 909090909090909090- <1>
    16 000000C8 909090909090909090- <1>
    16 000000D1 909090909090909090- <1>
    16 000000DA 909090909090909090- <1>
    16 000000E3 909090909090909090- <1>
    16 000000EC 909090909090909090- <1>
    16 000000F5 909090909090909090- <1>
    16 000000FE 9090                <1>
    17                              <1> ;First make space for the MCB
    18 00000100 52                  <1>     push rdx    ;Save dl on stack briefly
    19 00000101 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    20 00000106 0F32                <1>     rdmsr
    21 00000108 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    22 0000010A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    23 0000010E 89C7                <1>     mov edi, eax        ;Get the low dword in
    24 00000110 4881C710000000      <1>     add rdi, mcb_size   ;Make space for the MCB
    25 00000117 89F8                <1>     mov eax, edi
    26 00000119 4889FA              <1>     mov rdx, rdi
    27 0000011C 48C1EA20            <1>     shr rdx, 20h
    28 00000120 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    29 00000122 5A                  <1>     pop rdx
    30                              <1> ;------------------------------------------------;
    31                              <1> ;              Connect Debugger                  ;
    32                              <1> ;------------------------------------------------;
    33 00000123 B801C50000          <1>     mov eax, 0C501h ;Connect debugger
    34 00000128 CD35                <1>     int 35h
    35                              <1> ;------------------------------------------------;
    36                              <1> ;           Sanitise the data area               ;
    37                              <1> ;------------------------------------------------;
    38 0000012A B9[D3130000]        <1>     mov ecx, dSegLen
    39 0000012F 30C0                <1>     xor al, al
    40 00000131 57                  <1>     push rdi    ;Temp save rdi on the stack
    41 00000132 F3AA                <1>     rep stosb
    42 00000134 5F                  <1>     pop rdi
    43                              <1> 
    44                              <1> ;------------------------------------------------;
    45                              <1> ;          Start saving Basic DOS data           ;
    46                              <1> ;------------------------------------------------;
    47 00000135 64881425[08000000]  <1>     mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    48                              <1> ;Copy DOS to its final resting place
    49 0000013D 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    49 00000142 [00000000]          <1>
    50 00000146 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rdx 
    51 00000149 4881C7[D3130000]    <1>     add rdi, dSegLen ;Move destination past end of data area
    52 00000150 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    53 00000157 B900100000          <1>     mov ecx, 1000h
    54 0000015C F348A5              <1>     rep movsq
    55                              <1> 
    56 0000015F CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    57 00000161 49C1E818            <1>     shr r8, 3*8   ;Isolate byte 3 of r8
    58 00000165 6444880425-         <1>     mov byte fs:[numRemMSD], r8b    ;Save number of physical int 33h devs
    58 0000016A [09000000]          <1>
    59 0000016E 64C60425[99000000]- <1>     mov byte fs:[lastdrvNum], 5     ;Last drive is by default 5
    59 00000176 05                  <1>
    60 00000177 64C60425[0A000000]- <1>     mov byte fs:[numLRemDrives], 0     ;Number of logical drives
    60 0000017F 00                  <1>
    61                              <1> 
    62                              <1> ;------------------------------------------------;
    63                              <1> ;          Find largest sector size              ;
    64                              <1> ;------------------------------------------------;
    65                              <1> largestSectorSearch:
    66 00000180 30D2                <1>     xor dl, dl
    67 00000182 31FF                <1>     xor edi, edi    ;Use this as the counter for the largest sector size
    68                              <1> .lss:
    69 00000184 B488                <1>     mov ah, 88h
    70 00000186 CD33                <1>     int 33h
    71 00000188 39C7                <1>     cmp edi, eax
    72 0000018A 0F42F8              <1>     cmovb edi, eax  ;Only replace ebp if eax is greater
    73 0000018D FEC2                <1>     inc dl
    74 0000018F 4438C2              <1>     cmp dl, r8b
    75 00000192 75F0                <1>     jne .lss
    76 00000194 6466893C25-         <1>     mov word fs:[maxBytesSec], di
    76 00000199 [87000000]          <1>
    77                              <1> 
    78                              <1> ;------------------------------------------------;
    79                              <1> ;          Driver Adjustments and inits          ;
    80                              <1> ;------------------------------------------------;
    81                              <1> ;Modify the pointers in nData before putting them in the data area
    82 0000019D 48012DFC050000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
    83 000001A4 48012DFF050000      <1>     add qword [nData + drvHdr.strPtr], rbp
    84 000001AB 48012D00060000      <1>     add qword [nData + drvHdr.intPtr], rbp
    85                              <1> ;Copy the Null driver to its location in Sysvars
    86 000001B2 B922000000          <1>     mov ecx, drvHdr_size
    87 000001B7 488D35E2050000      <1>     lea rsi, qword [nData]
    88 000001BE 488DBD[A5000000]    <1>     lea rdi, qword [rbp + nulDevHdr]
    89 000001C5 F3A4                <1>     rep movsb   
    90                              <1> 
    91                              <1> ;Adjust the addresses in the other driver headers 
    92 000001C7 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
    92 000001C9 [AD12000000000000]  <1>
    93 000001D1 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
    94 000001D6 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
    95                              <1> adjDrivers:
    96 000001DA E8F9040000          <1>     call adjustDrvHdr
    97 000001DF E2F9                <1>     loop adjDrivers
    98                              <1> 
    99                              <1> ;Open NUL
   100 000001E1 488D9D[0B000000]    <1>     lea rbx, qword [rbp + charReqHdr]
   101 000001E8 C6030D              <1>     mov byte [rbx + openReqPkt.hdrlen], openReqPkt_size
   102 000001EB C6430300            <1>     mov byte [rbx + openReqPkt.status], 0
   103 000001EF FF95[AF000000]      <1>     call qword [rbp + nulDevHdr + drvHdr.strPtr]
   104 000001F5 FF95[B7000000]      <1>     call qword [rbp + nulDevHdr + drvHdr.intPtr]
   105                              <1> ;Open CON
   106                              <1> conInit:    ;Rather than keeping this resident... do it here
   107                              <1> .ci0:
   108 000001FB B401                <1>     mov ah, 01      ;Get buffer status
   109 000001FD CD36                <1>     int 36h
   110 000001FF 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   111 00000201 30E4                <1>     xor ah, ah
   112 00000203 CD36                <1>     int 36h ;Read key to flush from buffer
   113 00000205 EBF4                <1>     jmp short .ci0
   114                              <1> .ci1:
   115 00000207 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   116 0000020C CD30                <1>     int 30h
   117 0000020E B402                <1>     mov ah, 02h
   118 00000210 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   119 00000212 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   120 00000214 CD30                <1>     int 30h
   121 00000216 B707                <1>     mov bh, 07h     ;Grey/Black attribs
   122 00000218 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   123 0000021D CD30                <1>     int 30h
   124                              <1> 
   125                              <1>     ;Save ptr to ConHdr in Sysvars
   126 0000021F 488D85[AD120000]    <1>     lea rax, qword [rbp + conHdr]
   127 00000226 6448890425-         <1>     mov qword fs:[conPtr], rax
   127 0000022B [7F000000]          <1>
   128                              <1> 
   129                              <1>     ;Save ptr to ClkHdr in Sysvars
   130 0000022F 488D85[13130000]    <1>     lea rax, qword [rbp + clkHdr]
   131 00000236 6448890425-         <1>     mov qword fs:[clockPtr], rax
   131 0000023B [77000000]          <1>
   132                              <1> 
   133                              <1> ;------------------------------------------------;
   134                              <1> ;          Kernel inits and adjustments          ;
   135                              <1> ;------------------------------------------------;
   136                              <1> ;Adjust Int 41h address table
   137                              <1> adjInt41h:
   138 0000023F B96A000000          <1>     mov ecx, kernelDispatchTableL/8 ;Number of elements in table
   139 00000244 48BB-               <1>     mov rbx, kernelDispatchTable ;Get EA of table
   139 00000246 [CA0C000000000000]  <1>
   140 0000024E 488D5C1D00          <1>     lea rbx, qword [rbp+rbx]    ;Point to the start of the relocated table 
   141                              <1> .ai41h:
   142 00000253 48012B              <1>     add qword [rbx], rbp    ;Add base address value to entry in reloc table
   143 00000256 4881C308000000      <1>     add rbx, 8              ;Each entry is size 8
   144 0000025D FFC9                <1>     dec ecx
   145 0000025F 75F2                <1>     jnz .ai41h  ;Keep looping until all entries have been adjusted
   146                              <1> 
   147                              <1> ;Adjust Interrupt Entries Int 40h-49h
   148                              <1> adjInts:
   149 00000261 B340                <1>     mov bl, 40h
   150 00000263 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   151 00000268 CD35                <1>     int 35h
   152 0000026A B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   153 0000026F 488D3DDA040000      <1>     lea rdi, intData
   154 00000276 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   155                              <1> .ai0:
   156 00000278 B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   157 0000027D 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   158 00000280 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   159 00000283 CD35                <1>     int 35h
   160 00000285 4881C708000000      <1>     add rdi, 8
   161 0000028C FFC1                <1>     inc ecx
   162 0000028E 81F94A000000        <1>     cmp ecx, 4Ah
   163 00000294 75E2                <1>     jne .ai0
   164                              <1> 
   165                              <1> ;------------------------------------------------;
   166                              <1> ;         Link DOS to temporary Buffer           ;
   167                              <1> ;------------------------------------------------;
   168                              <1> tempBufferInit:
   169 00000296 488DBD[9A020000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   170 0000029D 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   170 000002A2 [89000000]          <1>
   171 000002A6 31C0                <1>     xor eax, eax
   172 000002A8 48FFC8              <1>     dec rax
   173 000002AB 48AB                <1>     stosq   ;.nextBufPTr, end of list
   174 000002AD AA                  <1>     stosb   ;.driveNumber, Free entry
   175 000002AE 48FFC0              <1>     inc rax
   176 000002B1 AA                  <1>     stosb   ;.bufferFlags, No flags
   177                              <1> ;------------------------------------------------;
   178                              <1> ;         Init msd driver, create DPB            ;
   179                              <1> ;------------------------------------------------;
   180                              <1> storageInits:
   181                              <1> ;First save dpb pointer in sysvars
   182 000002B2 488D9D[3B010000]    <1>     lea rbx, qword [rbp + firstDPB]
   183 000002B9 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   183 000002BE [67000000]          <1>
   184                              <1> ;Open Mass Storage
   185 000002C2 488D9D[35000000]    <1>     lea rbx, qword [rbp + diskReqHdr]
   186 000002C9 C6031F              <1>     mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   187 000002CC C6430200            <1>     mov byte [rbx + initReqPkt.cmdcde], 00h     ;MSD init
   188 000002D0 66C743030000        <1>     mov word [rbx + initReqPkt.status], 0       ;Zero status word
   189 000002D6 648A0425[0A000000]  <1>     mov al, byte fs:[numLRemDrives]
   190 000002DE 88431E              <1>     mov byte [rbx + initReqPkt.drvnum], al      ;First unit is drive A
   191 000002E1 FF95[3F130000]      <1>     call qword [rbp + msdHdr + drvHdr.strPtr]
   192 000002E7 FF95[47130000]      <1>     call qword [rbp + msdHdr + drvHdr.intPtr]
   193                              <1>     ;Check if it returned OK first!
   194 000002ED 66F743030080        <1>     test word [rbx + initReqPkt.status], 8000h  ;Test the error bit
   195 000002F3 0F85F2030000        <1>     jnz errorInit   ;If the bit is set, halt execution
   196 000002F9 8A430D              <1>     mov al, byte [rbx + initReqPkt.numunt]
   197 000002FC 64880425[0A000000]  <1>     mov byte fs:[numLRemDrives], al
   198 00000304 8885[4F130000]      <1>     mov byte [rbp + msdHdr + drvHdr.drvNam], al ;Save # of units in name field
   199                              <1> 
   200 0000030A 488B5316            <1>     mov rdx, qword [rbx + initReqPkt.optptr]    ;Get ptr to bpbPtrTbl in rdx
   201 0000030E 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   202 00000311 30C9                <1>     xor cl, cl  ;Clear counter
   203 00000313 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   203 00000318 [67000000]          <1>
   204                              <1> .si0:   
   205 0000031C 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   206 0000031F B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   207 00000321 CD41                <1>     int 41h
   208                              <1> ;Add other data to DPB
   209 00000323 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   210 00000326 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   211 00000329 50                  <1>     push rax
   212 0000032A 488D87[35130000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   213 00000331 4889451A            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   214 00000335 58                  <1>     pop rax
   215 00000336 FEC1                <1>     inc cl
   216 00000338 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   217 0000033A 7416                <1>     je .si1
   218 0000033C 50                  <1>     push rax
   219 0000033D 488D4534            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   220 00000341 48894524            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   221 00000345 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   222 00000348 58                  <1>     pop rax
   223 00000349 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   224 00000350 EBCA                <1>     jmp short .si0
   225                              <1> .si1:
   226                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   227 00000352 48C74524FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   228 0000035A 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   229                              <1> ;------------------------------------------------;
   230                              <1> ;                 Temp CDS inits                 ;
   231                              <1> ;------------------------------------------------;
   232                              <1> tempCDS:
   233                              <1> ;Build a temporary CDS for Drive A to use it for booting
   234 0000035D 488DBD[3F020000]    <1>     lea rdi, qword [rbp + initCDS]
   235 00000364 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   235 00000369 [91000000]          <1>
   236 0000036D B943000000          <1>     mov ecx, 67 ;Buffer length
   237 00000372 31C0                <1>     xor eax, eax
   238 00000374 4889FB              <1>     mov rbx, rdi    ;Save CDS pointer in rbx
   239 00000377 F3AA                <1>     rep stosb   ;Zero out the path string
   240 00000379 4889DF              <1>     mov rdi, rbx
   241 0000037C B041                <1>     mov al, "A"
   242 0000037E AA                  <1>     stosb
   243 0000037F B03A                <1>     mov al, ":"
   244 00000381 AA                  <1>     stosb
   245 00000382 B05C                <1>     mov al, "\"
   246 00000384 AA                  <1>     stosb
   247 00000385 4889DF              <1>     mov rdi, rbx
   248 00000388 66C747430040        <1>     mov word [rdi + cds.wFlags], cdsPhysDrive   ;Must be a physical drive
   249 0000038E 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]  ;Get the DPB of first drive in rbx
   249 00000393 [67000000]          <1>
   250 00000397 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   251 0000039B 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the A:
   252                              <1>     ;On FAT12/16, startcluster = 0 => Root Dir Sector
   253                              <1>     ;On FAT32, startcluster = 0 => Alias for root cluster. 
   254                              <1>     ;   Read dpb.dFirstUnitOfRootDir for first cluster of root dir
   255 000003A1 89474D              <1>     mov dword [rdi + cds.dStartCluster], eax    ;eax was zeroed before
   256                              <1> ;------------------------------------------------;
   257                              <1> ;     Set up general PSP areas and DOS vars      ;
   258                              <1> ;------------------------------------------------;
   259                              <1>     ;Additional DOS Vars init
   260 000003A4 31C0                <1>     xor eax, eax
   261 000003A6 64880425[F1000000]  <1>     mov byte fs:[currentDrv], al ;Current Drive = Drive A
   262 000003AE 64880425[F2000000]  <1>     mov byte fs:[breakFlag], al  ;Break off
   263 000003B6 64880425[F3000000]  <1>     mov byte fs:[verifyFlag], al ;Write only
   264 000003BE 64880425[FC000000]  <1>     mov byte fs:[singleDrv], al  ;Only used on single drive systems
   265 000003C6 64880425[C7000000]  <1>     mov byte fs:[critErrFlag], al   ;Not in critical error
   266 000003CE 64880425[C8000000]  <1>     mov byte fs:[inDOS], al      ;Not in DOS
   267 000003D6 64C60425[C9000000]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   267 000003DE FF                  <1>
   268 000003DF 6466890425-         <1>     mov word fs:[lastRetCode], ax   ;Last return code is 0, no error
   268 000003E4 [EF000000]          <1>
   269                              <1> 
   270                              <1>     ;SYSVARS PSP Init
   271 000003E8 488D1D11FCFFFF      <1>     lea rbx, qword [tempPSP]
   272 000003EF 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   272 000003F4 [D7000000]          <1>
   273 000003F8 53                  <1>     push rbx
   274 000003F9 4881C380000000      <1>     add rbx, psp.dta
   275 00000400 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   275 00000405 [CF000000]          <1>
   276 00000409 5B                  <1>     pop rbx
   277 0000040A 66C70340CD          <1>     mov word [rbx + psp.return], 0CD40h ;DOS return function
   278 0000040F C7435000CB40CD      <1>     mov dword [rbx + psp.unixEntry], 0CD40CB00h  ;Last byte overlaied
   279 00000416 48895B02            <1>     mov qword [rbx + psp.startSeg], rbx ;Save start segment of app
   280 0000041A 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   281 0000041E 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   282 00000422 31C0                <1>     xor eax, eax
   283 00000424 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   284 00000428 48AB                <1>     stosq   ;8 bytes
   285 0000042A 48AB                <1>     stosq   ;16 bytes
   286 0000042C AB                  <1>     stosd   ;20 bytes
   287 0000042D 48C7433EFFFFFFFF    <1>     mov qword [rbx + psp.envPtr], -1    ;No environment
   288 00000435 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   289 00000439 C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   290 0000043D 4889DA              <1>     mov rdx, rbx
   291 00000440 B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   292 00000445 CD41                <1>     int 41h
   293 00000447 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   294 0000044B B843350000          <1>     mov eax, 3543h
   295 00000450 CD41                <1>     int 41h
   296 00000452 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   297 00000456 B844350000          <1>     mov eax, 3544h
   298 0000045B CD41                <1>     int 41h
   299 0000045D 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   300                              <1> 
   301 00000461 B9A4000000          <1>     mov ecx, psp_size - psp.fcb1    ;Clear the dta and fcb space
   302 00000466 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   303 0000046A F3AA                <1>     rep stosb   ;Clear DTA and FCBs
   304                              <1> ;------------------------------------------------;
   305                              <1> ;          Default File Handle Creation          ;
   306                              <1> ;------------------------------------------------;
   307                              <1> defaultFileHandles:
   308                              <1> ;Fill in the default file table entries
   309 0000046C 488D9D[00000000]    <1>     lea rbx, qword [rbp + firstSftHeader]
   310 00000473 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   311 0000047A 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   312 00000480 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   312 00000485 [6F000000]          <1>
   313                              <1> ;GOTO FIRST FILE 
   314 00000489 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   315                              <1> ;Write CON
   316 00000490 66C7030000          <1>     mov word [rbx + sft.wNumHandles], 0 ;Nothing pointing to this file yet
   317 00000495 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   318 0000049B C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   319 0000049F C6430593            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|devCharDev
   320 000004A3 64488B0425-         <1>     mov rax, qword fs:[conPtr]  ;Get pointer to CON device
   320 000004A8 [7F000000]          <1>
   321 000004AC 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   322                              <1>     ;Ignore disk related fields and Date/Time of open
   323 000004B0 488B7B26            <1>     mov rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   324 000004B4 488D3598000000      <1>     lea rsi, qword [.dfhCon]
   325                              <1>     ;11 chars in 8.3 name
   326 000004BB 48A5                <1>     movsq   ;8 chars
   327 000004BD 66A5                <1>     movsw   ;10 chars
   328 000004BF A4                  <1>     movsb   ;11 chars
   329 000004C0 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   329 000004C5 [D7000000]          <1>
   330 000004C9 48894331            <1>     mov qword [rbx + sft.qPSPOwner], rax
   331                              <1> ;GOTO NEXT ENTRY
   332 000004CD 4881C33D000000      <1>     add rbx, sft_size   ;Goto next SFT
   333                              <1> ;Write AUX
   334 000004D4 66C7030000          <1>     mov word [rbx + sft.wNumHandles], 0 ;Nothing pointing to this file yet
   335 000004D9 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   336 000004DF C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   337 000004E3 C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   338                              <1>     ;No EOF when writing to the device
   339 000004E7 488B85[CF120000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   340 000004EE 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   341                              <1>     ;Ignore disk related fields and Date/Time of open
   342 000004F2 488B7B26            <1>     mov rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   343 000004F6 488D3561000000      <1>     lea rsi, qword [.dfhAux]
   344                              <1>     ;11 chars in 8.3 name
   345 000004FD 48A5                <1>     movsq   ;8 chars
   346 000004FF 66A5                <1>     movsw   ;10 chars
   347 00000501 A4                  <1>     movsb   ;11 chars
   348 00000502 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   348 00000507 [D7000000]          <1>
   349 0000050B 48894331            <1>     mov qword [rbx + sft.qPSPOwner], rax
   350                              <1> ;GOTO NEXT ENTRY
   351 0000050F 4881C33D000000      <1>     add rbx, sft_size   ;Goto next SFT
   352                              <1> ;Write PRN
   353 00000516 66C7030000          <1>     mov word [rbx + sft.wNumHandles], 0 ;Nothing pointing to this file yet
   354 0000051B 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   355 00000521 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   356 00000525 C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   357                              <1>     ;No EOF when writing to the device
   358 00000529 488B85[F1120000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   359 00000530 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   360                              <1>     ;Ignore disk related fields and Date/Time of open
   361 00000534 488B7B26            <1>     mov rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   362 00000538 488D352A000000      <1>     lea rsi, qword [.dfhPrn]
   363                              <1>     ;11 chars in 8.3 name
   364 0000053F 48A5                <1>     movsq   ;8 chars
   365 00000541 66A5                <1>     movsw   ;10 chars
   366 00000543 A4                  <1>     movsb   ;11 chars
   367 00000544 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   367 00000549 [D7000000]          <1>
   368 0000054D 48894331            <1>     mov qword [rbx + sft.qPSPOwner], rax
   369 00000551 EB21                <1>     jmp short .dfhExit
   370 00000553 434F4E202020202020- <1> .dfhCon db "CON        "
   370 0000055C 2020                <1>
   371 0000055E 415558202020202020- <1> .dfhAux db "AUX        "
   371 00000567 2020                <1>
   372 00000569 50524E202020202020- <1> .dfhPrn db "PRN        "
   372 00000572 2020                <1>
   373                              <1> .dfhExit:
   374                              <1> ;------------------------------------------------;
   375                              <1> ;               Load CONFIG.SYS                  ;
   376                              <1> ;------------------------------------------------;
   377                              <1> ;------------------------------------------------;
   378                              <1> ;              Process CONFIG.SYS                ;
   379                              <1> ;------------------------------------------------;
   380                              <1> ;------------------------------------------------;
   381                              <1> ;       Load User Drivers from CONFIG.SYS        ;
   382                              <1> ;------------------------------------------------;
   383                              <1> ;------------------------------------------------;
   384                              <1> ;                 Create a CDS                   ;
   385                              <1> ;------------------------------------------------;
   386                              <1> ;------------------------------------------------;
   387                              <1> ;                   MCB inits                    ;
   388                              <1> ;------------------------------------------------;
   389                              <1> mcbInit:
   390 00000574 B801E80000          <1>     mov eax, 0E801h ;Get the Extended memory arena sizes
   391 00000579 CD35                <1>     int 35h
   392 0000057B 0FB7C9              <1>     movzx ecx, cx   ;cx = # of bytes between USER_BASE and 16Mb
   393 0000057E 0FB7D2              <1>     movzx edx, dx   ;dx = # 64kb pages between 16Mb and 4Gb
   394 00000581 C1E10A              <1>     shl ecx, 0Ah   ;Multiply by 1024 to get number of bytes
   395 00000584 C1E210              <1>     shl edx, 10h  ;Multiply by 65536 to get number of bytes
   396                              <1> ;Build the DOS segment's MCB header
   397 00000587 4889EB              <1>     mov rbx, rbp
   398 0000058A 4881EB10000000      <1>     sub rbx, mcb_size   ;Point rbx to the start of the MCB
   399                              <1> 
   400 00000591 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save rbx in data area
   400 00000596 [5F000000]          <1>
   401                              <1> 
   402 0000059A 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   403 000005A2 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx ;Use Max lo mem size for now
   404 000005A5 C6035A              <1>     mov byte [rbx + mcb.marker], "Z"
   405 000005A8 85D2                <1>     test edx, edx   ;Is edx 0?
   406 000005AA 743C                <1>     jz .mcbExit ;If it is, skip the next bit
   407                              <1> ;We have memory above 16Mb, change alloc to M and decrease size
   408 000005AC C6034D              <1>     mov byte [rbx + mcb.marker], "M"
   409 000005AF 816B0910000000      <1>     sub dword [rbx + mcb.blockSize], mcb_size   ;Decrease allocation
   410                              <1> 
   411 000005B6 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]    ;Get the decreased size
   412 000005B9 4801CB              <1>     add rbx, rcx    ;Walk chain
   413                              <1> ;Now at the memory hole
   414                              <1>     ;Holes are only declared if hole has usable ram on both sides of it
   415 000005BC C6034D              <1>     mov byte [rbx + mcb.marker], "M"
   416 000005BF B800000001          <1>     mov eax, 1000000h   ;16Mb
   417 000005C4 29D8                <1>     sub eax, ebx    ;Sub ptr from 16Mb to get hole size
   418 000005C6 48C74301FFFFFFFF    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole   ;Memory hole
   419 000005CE 894309              <1>     mov dword [rbx + mcb.blockSize], eax
   420                              <1> 
   421 000005D1 4801C3              <1>     add rbx, rax    ;Walk chain
   422 000005D4 C6035A              <1>     mov byte [rbx + mcb.marker], "Z"
   423 000005D7 48C7430100000000    <1>     mov qword [rbx + mcb.owner],mcbOwnerFree
   424 000005DF 81EA10000000        <1>     sub edx, mcb_size   ;Make space for the mcb
   425 000005E5 895309              <1>     mov dword [rbx + mcb.blockSize], edx
   426                              <1> .mcbExit:
   427                              <1> ;------------------------------------------------;
   428                              <1> ;           Load Command interpreter             ;
   429                              <1> ;------------------------------------------------;
   430                              <1> 
   431                              <1> ;Test Error Case
   432 000005E8 B430                <1>     mov ah, 00110000b
   433 000005EA B000                <1>     mov al, 00h
   434 000005EC BF0C000000          <1>     mov edi, 0Ch
   435 000005F1 CD44                <1>     int 44h
   436                              <1> 
   437 000005F3 488D15FF000000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   438 000005FA B409                <1>     mov ah, 09h
   439 000005FC CD41                <1>     int 41h
   440                              <1> l1:
   441 000005FE B401                <1>     mov ah, 01h  ;Write with echo
   442 00000600 CD41                <1>     int 41h
   443 00000602 3C00                <1>     cmp al, 0
   444 00000604 7402                <1>     je l2
   445 00000606 EBF6                <1>     jmp short l1
   446                              <1> l2:
   447 00000608 B407                <1>     mov ah, 07h
   448 0000060A CD41                <1>     int 41h
   449 0000060C 3C42                <1>     cmp al, 42h
   450 0000060E 75EE                <1>     jne l1
   451                              <1> l3:
   452 00000610 6466C70425-         <1>     mov word fs:[CLOCKrecrd + clkStruc.dateWord], 0
   452 00000615 [18010000]0000      <1>
   453 0000061B 488D9D[0B000000]    <1>     lea rbx, qword [rbp + charReqHdr] ;Get the address of this request block
   454 00000622 488D85[18010000]    <1>     lea rax, qword [rbp + CLOCKrecrd]
   455 00000629 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   456 0000062C C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read the time
   457 00000630 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   458 00000636 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   459 0000063A C7431606000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 06
   460 00000641 FF95[1D130000]      <1>     call qword [rbp + clkHdr + drvHdr.strPtr]
   461 00000647 FF95[25130000]      <1>     call qword [rbp + clkHdr + drvHdr.intPtr]
   462                              <1> 
   463 0000064D B403                <1>     mov ah, 03h
   464 0000064F 30FF                <1>     xor bh, bh
   465 00000651 CD30                <1>     int 30h
   466 00000653 30D2                <1>     xor dl, dl  ;0 column
   467 00000655 B402                <1>     mov ah, 02h
   468 00000657 CD30                <1>     int 30h
   469                              <1> 
   470 00000659 488D9D[18010000]    <1>     lea rbx, qword [rbp + CLOCKrecrd]
   471 00000660 0FB64303            <1>     movzx eax, byte [rbx + clkStruc.hours]
   472 00000664 E832000000          <1>     call .clkHexToBCD
   473 00000669 B40E                <1>     mov ah, 0Eh
   474 0000066B B03A                <1>     mov al, ":"
   475 0000066D CD30                <1>     int 30h
   476 0000066F 0FB64302            <1>     movzx eax, byte [rbx + clkStruc.minutes]
   477 00000673 E823000000          <1>     call .clkHexToBCD
   478 00000678 B40E                <1>     mov ah, 0Eh
   479 0000067A B03A                <1>     mov al, ":"
   480 0000067C CD30                <1>     int 30h
   481 0000067E 0FB64305            <1>     movzx eax, byte [rbx + clkStruc.seconds]
   482 00000682 E814000000          <1>     call .clkHexToBCD
   483 00000687 B40E                <1>     mov ah, 0Eh
   484 00000689 B02E                <1>     mov al, "."
   485 0000068B CD30                <1>     int 30h
   486 0000068D 0FB64304            <1>     movzx eax, byte [rbx + clkStruc.hseconds]
   487 00000691 E805000000          <1>     call .clkHexToBCD
   488 00000696 E963FFFFFF          <1>     jmp l1
   489                              <1> .clkHexToBCD:
   490                              <1> ;Converts a Hex byte into two BCD digits
   491                              <1> ;Takes input in each nybble of al
   492 0000069B 53                  <1>     push rbx
   493 0000069C 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
   493 000006A5 00                  <1>
   494 000006A6 31D2                <1>     xor edx, edx
   495 000006A8 48F7F3              <1>     div rbx
   496 000006AB 80C230              <1>     add dl, '0'
   497 000006AE 80FA39              <1>     cmp dl, '9'
   498 000006B1 7603                <1>     jbe .chtb0
   499 000006B3 80C207              <1>     add dl, 'A'-'0'-10
   500                              <1> .chtb0:
   501 000006B6 88D1                <1>     mov cl, dl    ;Save remainder byte
   502 000006B8 31D2                <1>     xor edx, edx
   503 000006BA 48F7F3              <1>     div rbx
   504 000006BD 80C230              <1>     add dl, '0'
   505 000006C0 80FA39              <1>     cmp dl, '9'
   506 000006C3 7603                <1>     jbe .chtb1
   507 000006C5 80C207              <1>     add dl, 'A'-'0'-10
   508                              <1> .chtb1:
   509 000006C8 88D5                <1>     mov ch, dl    ;Save remainder byte
   510                              <1> 
   511 000006CA 88E8                <1>     mov al, ch    ;Get most sig digit into al
   512 000006CC B40E                <1>     mov ah, 0Eh
   513 000006CE CD30                <1>     int 30h
   514 000006D0 88C8                <1>     mov al, cl    ;Get least sig digit into al
   515 000006D2 B40E                <1>     mov ah, 0Eh
   516 000006D4 CD30                <1>     int 30h
   517 000006D6 5B                  <1>     pop rbx
   518 000006D7 C3                  <1>     ret
   519                              <1> ;--------------------------------
   520                              <1> ;       PROCS FOR SYSINIT       :
   521                              <1> ;--------------------------------
   522                              <1> adjustDrvHdr:
   523                              <1> ;Input: rsi = Effective address of driver in DOS segment
   524                              <1> ;       rbp = Ptr to the start of the DOS segment
   525                              <1> ;Output: rsi = EA of next header in DOS segment
   526 000006D8 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   527 000006DB 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   528 000006DF 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   529 000006E3 4881C622000000      <1>     add rsi, drvHdr_size
   530 000006EA C3                  <1>     ret
   531                              <1> errorInit:
   532                              <1> ;If a critical error occurs during sysinit, fail through here
   533 000006EB 488D151F000000      <1>     lea rdx, hltmsg
   534 000006F2 B409                <1>     mov ah, 09h
   535 000006F4 CD41                <1>     int 41h
   536                              <1>     ;cli ;Clear interrupts
   537                              <1>     ;mov al, -1
   538                              <1>     ;mov dx, 0A1h    ;PIC2 data
   539                              <1>     ;out dx, al      ;Mask all lines
   540                              <1>     ;mov dx, 21h     ;PIC1 data
   541                              <1>     ;out dx, al      ;Mask all lines
   542                              <1> .ei0:
   543 000006F6 F4                  <1>     hlt
   544 000006F7 EBFD                <1>     jmp short .ei0
   545                              <1> 
   546                              <1> ;--------------------------------
   547                              <1> ;       DATA FOR SYSINIT        :
   548                              <1> ;--------------------------------
   549 000006F9 0A0D5374617274696E- <1> strtmsg db 0Ah,0Dh,"Starting SCP/DOS...",0Ah,0Dh,"$"
   549 00000702 67205343502F444F53- <1>
   549 0000070B 2E2E2E0A0D24        <1>
   550 00000711 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0Ah,0Dh,"$"
   550 0000071A 7469616C6973696E67- <1>
   550 00000723 20534350444F532E53- <1>
   550 0000072C 59532E205379737465- <1>
   550 00000735 6D2068616C74696E67- <1>
   550 0000073E 2E2E2E0A0D24        <1>
   551 00000744 434F4E00            <1> conName db "CON",0
   552 00000748 41555800            <1> auxName db "AUX",0
   553 0000074C 50524E00            <1> prnName db "PRN",0
   554                              <1> intData:
   555 00000750 [AA04000000000000]  <1>     dq terminateProcess ;Int 40h
   556 00000758 [6205000000000000]  <1>     dq functionDispatch ;Int 41h
   557 00000760 [AC04000000000000]  <1>     dq terminateHandler ;Int 42h
   558 00000768 [AC04000000000000]  <1>     dq ctrlCHandler     ;Int 43h
   559 00000770 [1A10000000000000]  <1>     dq critErrorHandler ;Int 44h
   560 00000778 [BC04000000000000]  <1>     dq absDiskRead      ;Int 45h
   561 00000780 [AE04000000000000]  <1>     dq absDiskWrite     ;Int 46h
   562 00000788 [5405000000000000]  <1>     dq terminateResident    ;Int 47h
   563 00000790 [5405000000000000]  <1>     dq inDosHandler     ;Int 48h
   564 00000798 [5605000000000000]  <1>     dq fastOutput       ;Int 49h
   565                              <1> nData:
   566 000007A0 [AD12000000000000]  <1>     dq conHdr
   567 000007A8 0480                <1>     dw 08004h
   568 000007AA [5514000000000000]  <1>     dq nulStrat
   569 000007B2 [5B14000000000000]  <1>     dq nulIntr
   570 000007BA 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
    10                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    11                                  %include "dosSeg.asm"
    12                              <1> ;This file contains the main DOS data segment
    13                              <1> 
    14 00000000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    15 00000008 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    16 00000009 ??                  <1>     numRemMSD   resb 1    ;Number of physical removable MSDs in system x
    17 0000000A ??                  <1>     numLRemDrives  resb 1 ;Number of logical removable drives in system x
    18                              <1>     ;if numRemMSD = 1 then numLRemDrives = 2 and we have a single drive system
    19 0000000B <res 2Ah>           <1>     charReqHdr  resb ioReqPkt_size  ;Character IO Request header x
    20 00000035 <res 2Ah>           <1>     diskReqHdr  resb ioReqPkt_size  ;Disk Action Request header x
    21                              <1>     ;The device driver header with space for the largest possible packet
    22 0000005F ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    23                              <1> sysVarsPtr:
    24 00000067 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    25 0000006F ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    26 00000077 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    27                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    28 0000007F ????????????????    <1>     conPtr      resq 1    ;Pointer to the current active CON device header  x
    29                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    30 00000087 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    31 00000089 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    32 00000091 ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    33 00000099 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    34 0000009A ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    35 000000A2 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    36 000000A4 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    37 000000A5 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    38                              <1> 
    39                              <1> ;Start of Swappable Data Area, this bit can remain static
    40 000000C7 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
    41 000000C8 ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
    42 000000C9 ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
    43 000000CA ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    44 000000CB ????                <1>     errorExt    resw 1  ;Extended Error Code
    45 000000CD ??                  <1>     errorAction resb 1  ;Suggested action for error  
    46 000000CE ??                  <1>     errorClass  resb 1  ;Error Class
    47                              <1> 
    48 000000CF ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
    49 000000D7 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
    50 000000DF ????????????????    <1>     rdiErrorPtr resq 1  ;Saves RDI value of last error (could make this di)
    51 000000E7 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
    52 000000EF ????                <1>     lastRetCode resw 1  ;Last return code returned by Int 41h/4Ch x
    53 000000F1 ??                  <1>     currentDrv  resb 1  ;Default drive x
    54 000000F2 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
    55 000000F3 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
    56                              <1> ;SDA, needs to be replaced between processes
    57 000000F4 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
    58                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    59 000000FC ??                  <1>     singleDrv   resb 1  ;Set if last drive accessed was drive B x
    60                              <1> ;This is done to allow for DOS to give the user a change to swap devices
    61                              <1> 
    62 000000FD ??                  <1>     Int44RetVal resb 1  ;Saves a copy of the Int 44 return value
    63 000000FE ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
    64 000000FF ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
    65 00000100 ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
    66 00000108 ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
    67 00000110 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
    68                              <1> ;Time stuff
    69 00000118 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
    70 0000011E ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
    71 0000011F ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
    72 00000120 ??                  <1>     years       resb 1  ;00h - FFh (00 = 1980 - 128 = 2107)
    73 00000121 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
    74 00000123 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
    75                              <1> ;String Stuff
    76 00000124 <res FFh>           <1>     asciiBuffer resb 255    ;Have a 255 char buffer for the ascii terminal
    77                              <1> ;Stacks
    78 00000223 <res 528h>          <1>     critStack   resq 165
    79 0000074B ????????????????    <1>     critStakTop resq 1
    80 00000753 <res 638h>          <1>     IOStack     resq 199
    81 00000D8B ????????????????    <1>     IOStakTop   resq 1
    82 00000D93 <res 638h>          <1>     DiskStack   resq 199
    83 000013CB ????????????????    <1>     DiskStakTop resq 1
    84                              <1>     dSegLen     equ     $
    12                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    13                                  %include "staticData.asm"
    14                              <1> 
    15                              <1> ;-----------------------------------:
    16                              <1> ;           Static Data             :
    17                              <1> ;-----------------------------------:
    18 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    19 00000001 01                  <1> dosMinor    db 01h      ;.01
    14                                  %include "fat.asm"
    15                              <1> ;-----------------------------------:
    16                              <1> ;       File System routines        :
    17                              <1> ;-----------------------------------:
    18                              <1> name2Clust:
    19                              <1> ;Converts a file name to a first cluster number
    20                              <1> ;Converts the whole path subdirectory by subdirectory
    21                              <1> ;On entry: rbx = ptr to ASCIIZ string of file path, maxlen = 67 + 1 (for the 0)
    22                              <1> ;On return: ebx = First cluster number for the file
    23                              <1> ;   On error: CF=CY, ax = Error code
    24                              <1> 
    25                              <1> ;First ascertain path is valid path and get drive letter
    26 00000002 56                  <1>     push rsi
    27 00000003 57                  <1>     push rdi
    28 00000004 51                  <1>     push rcx
    29 00000005 4889DF              <1>     mov rdi, rbx
    30 00000008 4889DE              <1>     mov rsi, rbx
    31 0000000B 807F013A            <1>     cmp byte [rdi + 1], ":" ;Check it is a colon for full path
    32 0000000F 750B                <1>     jne .cdsPath    ;Use CDS for current dir
    33                              <1> .getSubDir:
    34 00000011 B05C                <1>     mov al, "\"
    35 00000013 AE                  <1>     scasb   ;inc 
    36 00000014 7400                <1>     je .psfnd   ;Path separator found
    37                              <1> 
    38                              <1> .psfnd:
    39 00000016 48FFCF              <1>     dec rdi
    40 00000019 4889FE              <1>     mov rsi, rdi
    41                              <1> 
    42                              <1> .cdsPath:
    43 0000001C 59                  <1>     pop rcx
    44 0000001D 5F                  <1>     pop rdi
    45 0000001E 5E                  <1>     pop rsi
    46 0000001F C3                  <1>     ret
    47                              <1> 
    48                              <1> clust2FATEntry:
    49                              <1> ;Converts a cluster number to a FAT entry
    50                              <1> ;Entry:  rsi points to the DPB for the transacting device
    51                              <1> ;        eax = Cluster number to look for
    52                              <1> ;Exit: eax = Sector on disk of FAT, edx = 1.5Word/Word/DWord in sector of entry
    53 00000020 53                  <1>     push rbx
    54 00000021 51                  <1>     push rcx
    55 00000022 8B5E0E              <1>     mov ebx, dword [rsi + dpb.dClusterCount]
    56 00000025 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    57 0000002B 7314                <1>     jae .fat32
    58 0000002D 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    59 00000033 7204                <1>     jb .fat12
    60                              <1> ;FAT16
    61 00000035 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    62 00000037 EB0B                <1>     jmp short .common
    63                              <1> .fat12:
    64 00000039 89C1                <1>     mov ecx, eax    ;ecx = eax
    65 0000003B D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    66 0000003D 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    67 0000003F EB03                <1>     jmp short .common
    68                              <1> .fat32:
    69 00000041 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    70                              <1> .common:
    71                              <1> ;eax has the FAToffset
    72 00000044 8A4E02              <1>     mov cl, byte [rsi + dpb.bBytesPerSectorShift]
    73 00000047 BA01000000          <1>     mov edx, 1
    74 0000004C D3E2                <1>     shl edx, cl    ;Turn edx to number of bytes per sector
    75 0000004E 89D1                <1>     mov ecx, edx
    76 00000050 31D2                <1>     xor edx, edx    ;edx = 0
    77 00000052 F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    78 00000054 0FB75E05            <1>     movzx ebx, word [rsi + dpb.wFAToffset]   ;Add the offset to the first FAT
    79 00000058 01D8                <1>     add eax, ebx
    80 0000005A 59                  <1>     pop rcx
    81 0000005B 5B                  <1>     pop rbx
    82 0000005C C3                  <1>     ret
    83                              <1> 
    84                              <1> readBuffer:
    85                              <1> ;
    86                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
    87                              <1> ;TO CALL!
    88                              <1> ;
    89                              <1> ;This function will return a pointer to the desired data sector OR 
    90                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
    91                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
    92                              <1> ;Entry: rax = Sector to read
    93                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data) 
    94                              <1> ;       rsi = DPB of transacting drive
    95                              <1> ;Exit:  CF = NC : All ok!
    96                              <1> ;       rbx = Pointer to buffer header with valid data in buffer.
    97                              <1> ;       All other registers as before
    98                              <1> ;       CF = CY: Something went wrong, return error code or INT 44h
    99                              <1> ;       ch = 0 -> Data Not Flushed To Disk
   100                              <1> ;       ch = 1 -> Data Not Read From Disk
   101                              <1> ;       rbx = Pointer to buffer containing sector without valid data in buffer ;            (either unflushed or unread)
   102 0000005D 52                  <1>     push rdx
   103 0000005E 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   104 00000060 E848010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   105 00000065 4881FBFFFFFFFF      <1>     cmp rbx, -1
   106 0000006C 7403                <1>     je .rbReadNewSector
   107                              <1> .rbExit:
   108 0000006E F8                  <1>     clc
   109                              <1> .rbExitNoFlag:
   110 0000006F 5A                  <1>     pop rdx
   111 00000070 C3                  <1>     ret
   112                              <1> .rbReadNewSector:
   113 00000071 E8C6000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rbx
   114 00000076 4889DD              <1>     mov rbp, rbx
   115 00000079 30ED                <1>     xor ch, ch
   116 0000007B E869000000          <1>     call flushBuffer
   117 00000080 72ED                <1>     jc .rbExitNoFlag    ;Exit in error
   118                              <1> ;rbp points to bufferHdr that has been appropriately linked to the head of chain
   119 00000082 51                  <1>     push rcx
   120 00000083 885508              <1>     mov byte [rbp + bufferHdr.driveNumber], dl
   121 00000086 884D09              <1>     mov byte [rbp + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA
   122 00000089 4889450A            <1>     mov qword [rbp + bufferHdr.bufferLBA], rax
   123 0000008D 80F902              <1>     cmp cl, fatBuffer
   124 00000090 B201                <1>     mov dl, 1   ;Default values if not fat buffer
   125 00000092 B900000000          <1>     mov ecx, 0  ;Ditto!
   126 00000097 7506                <1>     jne .rbNonFATbuffer
   127 00000099 8A5607              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   128 0000009C 8B4E12              <1>     mov ecx, dword [rsi + dpb.dFATlength]
   129                              <1> .rbNonFATbuffer:
   130 0000009F 885512              <1>     mov byte [rbp + bufferHdr.bufFATcopy], dl
   131 000000A2 894D13              <1>     mov dword [rbp + bufferHdr.bufFATsize], ecx
   132 000000A5 48897517            <1>     mov qword [rbp + bufferHdr.driveDPBPtr], rsi
   133 000000A9 C6451F00            <1>     mov byte [rbp + bufferHdr.reserved], 0
   134 000000AD 59                  <1>     pop rcx
   135 000000AE FEC5                <1>     inc ch  ;If an error occurs, have the signature in ch
   136 000000B0 E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
   137 000000B5 EBB8                <1>     jmp short .rbExitNoFlag
   138                              <1> 
   139                              <1> readSectorBuffer:
   140                              <1> ;Reads a sector into a built sector buffer
   141                              <1> ;Entry: rbp = Pointer to buffer header
   142                              <1> ;Exit:  CF=NC : Success
   143                              <1> ;       CF=CY : Fail, terminate the request
   144                              <1> ;       rbx pointing to buffer header
   145                              <1> ;First make request to device driver
   146 000000B7 50                  <1>     push rax
   147 000000B8 53                  <1>     push rbx
   148 000000B9 51                  <1>     push rcx
   149 000000BA 52                  <1>     push rdx
   150 000000BB 56                  <1>     push rsi
   151                              <1> .rsRequest0:
   152 000000BC BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   153                              <1> .rsRequest1:
   154 000000C1 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
   155 000000C4 B901000000          <1>     mov ecx, 1  ;One sector to copy
   156 000000C9 488B550A            <1>     mov rdx, qword [rbp + bufferHdr.bufferLBA]
   157 000000CD 488B5D20            <1>     mov rbx, qword [rbp + bufferHdr.dataarea]
   158 000000D1 E8E6030000          <1>     call absDiskRead    ;Call INT 45h
   159 000000D6 7207                <1>     jc .rsFail
   160                              <1> .rsExit:
   161 000000D8 F8                  <1>     clc
   162                              <1> .rsExitBad:
   163 000000D9 5E                  <1>     pop rsi
   164 000000DA 5A                  <1>     pop rdx
   165 000000DB 59                  <1>     pop rcx
   166 000000DC 5B                  <1>     pop rbx
   167 000000DD 58                  <1>     pop rax
   168 000000DE C3                  <1>     ret
   169                              <1> .rsFail:
   170                              <1> ;Enter here only if the request failed
   171 000000DF FFCE                <1>     dec esi
   172 000000E1 75DE                <1>     jnz .rsRequest1 ;Try the request again!
   173                              <1> ;Request failed thrice, critical error call
   174 000000E3 F9                  <1>     stc
   175 000000E4 E9F0FFFFFF          <1>     jmp .rsExitBad  ;Abort
   176                              <1> 
   177                              <1> flushBuffer:
   178                              <1> ;Flushes the data in a sector buffer to disk!
   179                              <1> ;Entry: rbp = Pointer to buffer header for this buffer
   180                              <1> ;Exit:  CF=NC : Success
   181                              <1> ;       CF=CY : Fail, terminate the request
   182                              <1> ;First make request to device driver
   183 000000E9 50                  <1>     push rax
   184 000000EA 53                  <1>     push rbx
   185 000000EB 51                  <1>     push rcx
   186 000000EC 52                  <1>     push rdx
   187 000000ED 56                  <1>     push rsi
   188 000000EE F6450940            <1>     test byte [rbp + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   189 000000F2 7433                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   190                              <1> .fbRequest0:
   191 000000F4 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   192                              <1> .fbRequest1:
   193 000000F9 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
   194 000000FC B901000000          <1>     mov ecx, 1  ;One sector to copy
   195 00000101 488B550A            <1>     mov rdx, qword [rbp + bufferHdr.bufferLBA]
   196 00000105 488B5D20            <1>     mov rbx, qword [rbp + bufferHdr.dataarea]
   197 00000109 E8A0030000          <1>     call absDiskWrite    ;Call INT 46h
   198 0000010E 7222                <1>     jc .fbFail
   199                              <1> ;Now check if the buffer was a FAT, to write additional copies
   200 00000110 F6450902            <1>     test byte [rbp + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   201 00000114 7411                <1>     jz .fbFreeExit  ;If not, exit
   202 00000116 FE4D12              <1>     dec byte [rbp + bufferHdr.bufFATcopy]
   203 00000119 740C                <1>     jz .fbFreeExit  ;Once this goes to 0, stop writing FAT copies
   204 0000011B 8B4513              <1>     mov eax, dword [rbp + bufferHdr.bufFATsize]
   205 0000011E 4801450A            <1>     add qword [rbp + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   206 00000122 E9CDFFFFFF          <1>     jmp .fbRequest0 ;Make another request
   207                              <1> .fbFreeExit:
   208                              <1> ;Free the buffer if it was flushed successfully
   209 00000127 C64508FF            <1>     mov byte [rbp + bufferHdr.driveNumber], -1
   210 0000012B F8                  <1>     clc
   211                              <1> .fbExitBad:
   212 0000012C 5E                  <1>     pop rsi
   213 0000012D 5A                  <1>     pop rdx
   214 0000012E 59                  <1>     pop rcx
   215 0000012F 5B                  <1>     pop rbx
   216 00000130 58                  <1>     pop rax
   217 00000131 C3                  <1>     ret
   218                              <1> .fbFail:
   219                              <1> ;Enter here only if the request failed
   220 00000132 FFCE                <1>     dec esi
   221 00000134 75C3                <1>     jnz .fbRequest1 ;Try the request again!
   222                              <1> ;Request failed thrice, critical error call
   223 00000136 F9                  <1>     stc
   224 00000137 E9F0FFFFFF          <1>     jmp .fbExitBad  ;Abort
   225                              <1>     
   226                              <1> findLRUBuffer: 
   227                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   228                              <1> ; in rbx
   229                              <1> ;Input: Nothing
   230                              <1> ;Output: rbx = Pointer to the buffer hdr to use
   231 0000013C 52                  <1>     push rdx
   232 0000013D 488B1D(89000000)    <1>     mov rbx, qword [bufHeadPtr]
   233 00000144 807B08FF            <1>     cmp byte [rbx + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   234 00000148 7436                <1>     je .flbExit 
   235 0000014A 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   236 00000151 742D                <1>     je .flbExit
   237                              <1> .flbWalk:
   238 00000153 4889DA              <1>     mov rdx, rbx    ;Save a ptr to the previous buffer header
   239 00000156 488B1A              <1>     mov rbx, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   240 00000159 807B08FF            <1>     cmp byte [rbx + bufferHdr.driveNumber], -1
   241 0000015D 7423                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   242 0000015F 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   243 00000166 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   244 00000168 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   245                              <1> .flbHeadLink:
   246 0000016F 488B15(89000000)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   247 00000176 48891D(89000000)    <1>     mov qword [bufHeadPtr], rbx    ;Sysvars to point to new buffer
   248 0000017D 488913              <1>     mov qword [rbx + bufferHdr.nextBufPtr], rdx
   249                              <1> .flbExit:
   250 00000180 5A                  <1>     pop rdx
   251 00000181 C3                  <1>     ret
   252                              <1> .flbFreeLink:
   253 00000182 51                  <1>     push rcx
   254 00000183 488B0B              <1>     mov rcx, qword [rbx + bufferHdr.nextBufPtr]
   255 00000186 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rbx
   256 00000189 59                  <1>     pop rcx
   257 0000018A EBE3                <1>     jmp short .flbHeadLink
   258                              <1> 
   259                              <1> findDirtyBufferForDrive:
   260                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   261                              <1> ;Input: dl = Drive number
   262                              <1> ;Output: rbx = Pointer to dirty buffer for drive letter if exists or -1 if not
   263 0000018C 488B1D(89000000)    <1>     mov rbx, qword [bufHeadPtr]
   264                              <1> .fdbfdCheckBuffer:
   265 00000193 385308              <1>     cmp byte [rbx + bufferHdr.driveNumber], dl
   266 00000196 7507                <1>     jne .fdbfdGotoNextBuffer
   267 00000198 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   268 0000019C 7401                <1>     jz .fdbfdGotoNextBuffer ;Bit not set, goto next buffer
   269                              <1> .fdbfdExit:
   270 0000019E C3                  <1>     ret
   271                              <1> .fdbfdGotoNextBuffer:
   272 0000019F 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   273 000001A2 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit
   274 000001A9 74F3                <1>     je .fdbfdExit
   275 000001AB EBE6                <1>     jmp short .fdbfdCheckBuffer
   276                              <1> 
   277                              <1> findSectorInBuffer:
   278                              <1> ;Finds the Buffer for a sector
   279                              <1> ;If the sector is not in a buffer, returns with a -1
   280                              <1> ;Input: rax = Sector number
   281                              <1> ;        dl = Drive number
   282                              <1> ;Output: rbx = Buffer hdr pointer or -1
   283 000001AD 488B1D(89000000)    <1>     mov rbx, qword [bufHeadPtr]
   284                              <1> .fsiCheckBuffer:
   285 000001B4 385308              <1>     cmp byte [rbx + bufferHdr.driveNumber], dl
   286 000001B7 7507                <1>     jne .fsiGotoNextBuffer
   287 000001B9 4839430A            <1>     cmp qword [rbx + bufferHdr.bufferLBA], rax
   288 000001BD 7501                <1>     jne .fsiGotoNextBuffer
   289                              <1> .fsiExit:
   290 000001BF C3                  <1>     ret
   291                              <1> .fsiGotoNextBuffer:
   292 000001C0 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   293 000001C3 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit
   294 000001CA 74F3                <1>     je .fsiExit
   295 000001CC EBE6                <1>     jmp short .fsiCheckBuffer
   296                              <1> ;---------------------------------------------------:
   297                              <1> ;                   KERNEL FUNCTIONS                :
   298                              <1> ;---------------------------------------------------:
   299                              <1> makeDIR:           ;ah = 39h
   300                              <1> removeDIR:         ;ah = 3Ah
   301                              <1> changeCurrentDIR:  ;ah = 3Bh, changes directory for current drive
   302                              <1> getCurrentDIR:     ;ah = 47h
   303                              <1> getSetFileDateTime:;ah = 57h
   304                              <1> trueName:          ;ah = 60h, get fully qualified name
   305 000001CE C3                  <1>     ret
    15                                  %include "charFunctions.asm"
    16                              <1> ;Dos default char functions live here
    17                              <1> 
    18                              <1> stdinReadEcho:     ;ah = 01h
    19                              <1> ;Return char that has been read and echoed in al
    20 000001CF 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    21 000001D6 488D0566000000      <1>     lea rax, .stdinReadEchoBuffer
    22 000001DD C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    23 000001E0 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
    24 000001E4 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    25 000001EA 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    26 000001EE C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    27 000001F5 FF15BC100000        <1>     call qword [conHdr + drvHdr.strPtr]
    28 000001FB FF15BE100000        <1>     call qword [conHdr + drvHdr.intPtr]
    29 00000201 803D3B00000000      <1>     cmp byte [.stdinReadEchoBuffer], 00h
    30 00000208 7432                <1>     jz .stdireexit
    31 0000020A 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    32 00000211 488D052B000000      <1>     lea rax, .stdinReadEchoBuffer
    33 00000218 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    34 0000021B C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    35 0000021F 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    36 00000225 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    37 00000229 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    38 00000230 FF1581100000        <1>     call qword [conHdr + drvHdr.strPtr]
    39 00000236 FF1583100000        <1>     call qword [conHdr + drvHdr.intPtr]
    40                              <1> .stdireexit:
    41 0000023C 8A0501000000        <1>     mov al, byte [.stdinReadEchoBuffer]
    42 00000242 C3                  <1>     ret
    43 00000243 00                  <1> .stdinReadEchoBuffer    db 0
    44                              <1> stdoutWrite:       ;ah = 02h
    45                              <1> ;Bspace is regular cursor left, does not insert a blank
    46 00000244 881533000000        <1>     mov byte [.stdoutWriteBuffer], dl
    47 0000024A 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    48 00000251 488D1525000000      <1>     lea rdx, .stdoutWriteBuffer
    49 00000258 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    50 0000025B C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    51 0000025F 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    52 00000265 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
    53 00000269 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    54 00000270 FF1541100000        <1>     call qword [conHdr + drvHdr.strPtr]
    55 00000276 FF1543100000        <1>     call qword [conHdr + drvHdr.intPtr]
    56 0000027C C3                  <1>     ret
    57 0000027D 00                  <1> .stdoutWriteBuffer db 0
    58                              <1> stdauxRead:        ;ah = 03h
    59                              <1> stdauxWrite:       ;ah = 04h
    60                              <1> stdprnWrite:       ;ah = 05h
    61                              <1> directCONIO:       ;ah = 06h
    62                              <1> waitDirectInNoEcho:;ah = 07h
    63                              <1> ;Return char in al
    64 0000027E 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    65 00000285 488D052B000000      <1>     lea rax, .function7buffer
    66 0000028C C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    67 0000028F C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
    68 00000293 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    69 00000299 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    70 0000029D C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    71 000002A4 FF150D100000        <1>     call qword [conHdr + drvHdr.strPtr]
    72 000002AA FF150F100000        <1>     call qword [conHdr + drvHdr.intPtr]
    73 000002B0 8A0501000000        <1>     mov al, byte [.function7buffer]
    74 000002B6 C3                  <1>     ret
    75 000002B7 00                  <1> .function7buffer    db 0
    76                              <1> waitStdinNoEcho:   ;ah = 08h
    77 000002B8 C3                  <1>     ret
    78                              <1> printString:       ;ah = 09h
    79 000002B9 31C9                <1>     xor ecx, ecx    ;Clear char counter
    80 000002BB B824000000          <1>     mov eax, "$"    ;Terminating char
    81 000002C0 4889D7              <1>     mov rdi, rdx    ;Set up for scasb
    82                              <1> .ps0:   ;Search for $ to get count of chars
    83 000002C3 AE                  <1>     scasb
    84 000002C4 7404                <1>     je .ps1
    85 000002C6 FFC1                <1>     inc ecx
    86 000002C8 EBF9                <1>     jmp short .ps0
    87                              <1> .ps1:   ;Use handle 
    88 000002CA 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    89 000002D1 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    90 000002D4 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    91 000002D8 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    92 000002DE 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
    93 000002E2 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
    94 000002E5 FF15CC0F0000        <1>     call qword [conHdr + drvHdr.strPtr]
    95 000002EB FF15CE0F0000        <1>     call qword [conHdr + drvHdr.intPtr]
    96                              <1> 
    97 000002F1 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
    98 000002F8 8A03                <1>     mov al, byte [rbx+callerFrame.rax]      ;Gets al to preserve it
    99 000002FA C3                  <1>     ret
   100                              <1> buffStdinInput:    ;ah = 0Ah
   101                              <1> checkStdinStatus:  ;ah = 0Bh
   102                              <1> clearbuffDoFunc:   ;ah = 0Ch
    16                                  %include "fcbFunctions.asm"
    17                              <1> openFileFCB:       ;ah = 0Fh
    18                              <1> closeFileFCB:      ;ah = 10h
    19                              <1> findFirstFileFCB:  ;ah = 11h
    20                              <1> findNextFileFCB:   ;ah = 12h
    21                              <1> deleteFileFCB:     ;ah = 13h
    22                              <1> sequentialReadFCB: ;ah = 14h
    23                              <1> sequentialWriteFCB:;ah = 15h
    24                              <1> createFileFCB:     ;ah = 16h
    25                              <1> renameFileFCB:     ;ah = 17h
    26 000002FB C3                  <1>     ret
    27                              <1> setDTA:            ;ah = 1Ah
    28                              <1> ;Called with:
    29                              <1> ;   rdx = Pointer to the new default DTA
    30 000002FC 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
    31 00000303 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
    32 00000307 488915(CF000000)    <1>     mov qword [currentDTA], rdx
    33 0000030E C3                  <1>     ret
    34                              <1> randomReadFCB:     ;ah = 21h
    35                              <1> randomWriteFCB:    ;ah = 22h
    36                              <1> getFileSizeFCB:    ;ah = 23h
    37                              <1> setRelRecordFCB:   ;ah = 24h
    38                              <1> randBlockReadFCB:  ;ah = 27h
    39                              <1> randBlockWriteFCB: ;ah = 28h
    40                              <1> parseFilenameFCB:  ;ah = 29h
    41 0000030F C3                  <1>     ret
    42                              <1> getDTA:            ;ah = 2Fh
    43 00000310 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
    44 00000317 488B1D(CF000000)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
    45 0000031E 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
    46 00000322 C3                  <1>     ret
    17                                  %include "handleFunctions.asm"
    18                              <1> ;-----------------------------------:
    19                              <1> ;    File Handle Kernel routines    :
    20                              <1> ;-----------------------------------:
    21                              <1> 
    22                              <1> createFileHdl:     ;ah = 3Ch, handle function
    23                              <1> openFileHdl:       ;ah = 3Dh, handle function
    24                              <1> closeFileHdl:      ;ah = 3Eh, handle function
    25 00000323 C3                  <1>     ret
    26                              <1> readFileHdl:       ;ah = 3Fh, handle function
    27 00000324 E845000000          <1>     call getSFTPtr
    28 00000329 7231                <1>     jc .rfhErrorHandle  ;Function can only fail for bad file handle
    29                              <1> ;Here rdi points to the correct SFT 
    30 0000032B 668B4702            <1>     mov ax, word [rdi + sft.wOpenMode]  ;Get open mode
    31 0000032F A802                <1>     test al, RWAccess  ;Check r/w permission
    32 00000331 7504                <1>     jnz .rfh2   ;Bit set, proceed
    33 00000333 84C0                <1>     test al, al  ;Check read access (it is 0)
    34 00000335 7525                <1>     jnz .rfhNoPermission    ;If not zero then it is write only permission
    35                              <1> .rfh2:
    36                              <1>     ;So now read the number of bytes from the data buffers
    37 00000337 4889FB              <1>     mov rbx, rdi    ;Move SFT pointer into rbx
    38 0000033A F6430520            <1>     test byte [rbx + sft.wDeviceInfo], devBinary
    39 0000033E 7409                <1>     jz .rfhASCII    ;If not set, read in ASCII
    40 00000340 E876000000          <1>     call readBinaryBytesFromFile
    41 00000345 7215                <1>     jc .rfCriticalError
    42 00000347 EB07                <1>     jmp short .rfhExitOK
    43                              <1> .rfhASCII:
    44 00000349 E86C000000          <1>     call readASCIIBytesFromFile
    45 0000034E 720C                <1>     jc .rfCriticalError
    46                              <1> .rfhExitOK:
    47 00000350 488B3D(08010000)    <1>     mov rdi, qword [oldRSP]
    48 00000357 88C8                <1>     mov al, cl  ;Get low byte in cl
    49 00000359 890F                <1>     mov dword [rdi + callerFrame.rax], ecx  ;Save number of bytes transf.
    50 0000035B C3                  <1>     ret
    51                              <1> .rfCriticalError:
    52                              <1>     ;Fail due to driver error. Invoke Int 44h if set to in SFT
    53                              <1> .rfhErrorHandle:
    54                              <1>     ;Fail due to bad file handle provided
    55                              <1> .rfhNoPermission:
    56                              <1>     ;Fail due to bad permissions
    57                              <1> writeFileHdl:      ;ah = 40h, handle function
    58 0000035C E80D000000          <1>     call getSFTPtr
    59 00000361 720A                <1>     jc .wfhErrorHandle  ;Function can only fail for bad file handle
    60 00000363 668B4702            <1>     mov ax, word [rdi + sft.wOpenMode]  ;Get open mode
    61 00000367 66A90300            <1>     test ax, 3
    62 0000036B 7400                <1>     jz .wfhNoPermission ;Bad permissions! No r/w or w permissions
    63                              <1> .wfCriticalError:
    64                              <1>     ;Fail due to driver error. Invoke Int 44h if set to in SFT
    65                              <1> .wfhErrorHandle:
    66                              <1>     ;Fail due to bad file handle provided
    67                              <1> .wfhNoPermission:
    68                              <1>     ;Fail due to bad permissions
    69                              <1> 
    70                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
    71                              <1> movFileReadPtr:    ;ah = 42h, handle function, LSEEK
    72                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
    73                              <1> ioctrl:            ;ah = 44h, handle function
    74                              <1> duplicateHandle:   ;ah = 45h, handle function
    75                              <1> forceDuplicateHdl: ;ah = 46h, handle function
    76                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
    77                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
    78                              <1> renameFile:        ;ah = 56h
    79                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
    80                              <1> createNewFile:     ;ah = 5Bh
    81                              <1> lockUnlockFile:    ;ah = 5Ch
    82                              <1> setHandleCount:    ;ah = 67h
    83                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
    84 0000036D C3                  <1>     ret
    85                              <1> ;-----------------------------------:
    86                              <1> ;        File Handle routines       :
    87                              <1> ;-----------------------------------:
    88                              <1> getSFTPtr:
    89                              <1> ;Gets the SFT pointer for a given file handle from the calling application
    90                              <1> ;On entry:
    91                              <1> ;   bl = File handle
    92                              <1> ;On exit:
    93                              <1> ;   rsi = currentPSP
    94                              <1> ;   rdi = SFT pointer
    95                              <1> ;   rax, rbx trashed
    96 0000036E 488B35(D7000000)    <1>     mov rsi, qword [currentPSP]
    97 00000375 480FB6DB            <1>     movzx rbx, bl
    98 00000379 8A5C1E2A            <1>     mov bl, byte [rsi + psp.jobFileTbl + rbx]   ;Use jft entry to get sft num
    99 0000037D 31C0                <1>     xor eax, eax
   100 0000037F 488B3D(6F000000)    <1>     mov rdi, qword [sftHeadPtr]
   101                              <1> .gsp0:
   102 00000386 66034708            <1>     add ax, word [rdi + sfth.wNumFiles]
   103 0000038A 38D8                <1>     cmp al, bl  ;Check if the file header block contains the entry
   104 0000038C 760E                <1>     jbe .gsp1   ;IF bl is below or equal to al then it does
   105 0000038E 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of list
   106 00000395 7421                <1>     je .gspFail   ;If we have a number greater than the last entry, fail
   107 00000397 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Walk the chain
   108 0000039A EBEA                <1>     jmp short .gsp0 ;Search again
   109                              <1> .gsp1: 
   110                              <1>     ;Now point to the right entry
   111 0000039C 28D8                <1>     sub al, bl  ;Subtract the number from the total so far to get offset
   112 0000039E 0FB6C0              <1>     movzx eax, al
   113 000003A1 4881C70A000000      <1>     add rdi, sfth_size  ;Point to first file in table
   114 000003A8 84C0                <1>     test al, al ;Check if rdi points to the first file in this block
   115 000003AA 740B                <1>     jz .gsp12   ;Skip walking down the sft blocks
   116                              <1> .gsp11:
   117 000003AC 4881C73D000000      <1>     add rdi, sft_size
   118 000003B3 FEC8                <1>     dec al
   119 000003B5 75F5                <1>     jnz .gsp11  ;Keep adding one until al is zero
   120                              <1> .gsp12:
   121 000003B7 C3                  <1>     ret
   122                              <1> .gspFail:
   123 000003B8 F9                  <1>     stc
   124 000003B9 C3                  <1>     ret
   125                              <1> 
   126                              <1> readASCIIBytesFromFile:
   127 000003BA C3                  <1>     ret
   128                              <1> readBinaryBytesFromFile:
   129                              <1> ;Reads a byte from a SFT entry, does not translate it. 
   130                              <1> ;Read or RW permissions are checked at the INT 41h level
   131                              <1> ;Entry: rbx = SFT entry pointer
   132                              <1> ;       rdx = Address of the data buffer to read to
   133                              <1> ;       ecx = Number of bytes to read
   134                              <1> ;Exit: If CF = NC : All ok!
   135                              <1> ;       rbx = SFT entry pointer
   136                              <1> ;       ecx = Number of chars read/written
   137                              <1> ;      If CF = CY : Error!
   138                              <1> ;       rbx = SFT entry pointer
   139                              <1> ;       al = Error code to ret if user returns fail from int 44h or no int 44h
   140                              <1> ;
   141                              <1> ; !!! Use the disk request header for all file handle IO !!!
   142                              <1> ;
   143 000003BB 66F743058000        <1>     test word [rbx + sft.wDeviceInfo], devCharDev
   144 000003C1 7500                <1>     jnz .readBinaryBytesFromCharDevice
   145                              <1> .readBinaryBytesFromHardFile:
   146                              <1> ;Disk files are accessed from here
   147                              <1> ;Use the sector buffers if the data is already buffered,
   148                              <1> ; else use the dpb to fill a sector buffer
   149                              <1> 
   150                              <1> 
   151                              <1> 
   152                              <1> .readBinaryBytesFromCharDevice:
   153                              <1> ;Devices are accessed from here
   154 000003C3 488B6B07            <1>     mov rbp, qword [rbx + sft.qPtr] ;Get device driver header pointer
   155 000003C7 53                  <1>     push rbx
   156 000003C8 488D1D(0B000000)    <1>     lea rbx, charReqHdr
   157 000003CF C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   158 000003D2 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], drvREAD
   159 000003D6 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   160 000003DC 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   161 000003E0 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   162                              <1> 
   163 000003E3 FF550A              <1>     call qword [rbp + drvHdr.strPtr]
   164 000003E6 FF5512              <1>     call qword [rbp + drvHdr.intPtr]
   165 000003E9 8B4316              <1>     mov eax, dword [rbx + ioReqPkt.tfrlen] ;Get number of bytes read
   166 000003EC 66F743030080        <1>     test word [rbx + ioReqPkt.status], 8000h    ;Test the error bit is set
   167 000003F2 5B                  <1>     pop rbx
   168 000003F3 7400                <1>     jz .readBinaryBytesExitGood  ;Error bit not set, all good!
   169                              <1> .readBinaryBytesExitGood:
   170 000003F5 C3                  <1>     ret
    18                                  %include "memoryFunctions.asm"
    19                              <1> ;Memory related functions
    20                              <1> 
    21                              <1> ;-----------------------------------:
    22                              <1> ;  Memory related Kernel routines   :
    23                              <1> ;-----------------------------------:
    24                              <1> allocateMemory:    ;ah = 48h
    25                              <1> freeMemory:        ;ah = 49h
    26                              <1> reallocMemory:     ;ah = 4Ah
    27                              <1> getsetMallocStrat: ;ah = 58h
    28 000003F6 C3                  <1>     ret
    29                              <1> ;-----------------------------------:
    30                              <1> ;      Memory related routines      :
    31                              <1> ;-----------------------------------:
    32                              <1> verifyIntegrityOfMCBChain:
    33 000003F7 488B1D(5F000000)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
    34                              <1> .ok:
    35 000003FE 803B4D              <1>     cmp byte [rbx + mcb.marker], 'M'
    36 00000401 7406                <1>     je .ok1
    37 00000403 803B5A              <1>     cmp byte [rbx + mcb.marker], "Z"    ;End of the chain?
    38 00000406 7509                <1>     jne .sysHalt    ;It was not M or Z, fail violently
    39                              <1> .exit:
    40 00000408 C3                  <1>     ret ;We have reached the end of the chain, return all good!
    41                              <1> .ok1:
    42 00000409 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
    43 0000040C 4801C3              <1>     add rbx, rax
    44 0000040F EBED                <1>     jmp short .ok
    45                              <1> .sysHalt:
    46                              <1> ;Only arrive here if the integrity of the system is not verified
    47                              <1> ;Lock the system
    48 00000411 488D1D0E000000      <1>     lea rbx, .sysHltString
    49 00000418 B409                <1>     mov ah, 09h
    50 0000041A CD41                <1>     int 41h
    51 0000041C FA                  <1>     cli ;Halt interrupts
    52 0000041D B0FF                <1>     mov al, 0FFh    ;Mask IRQ lines 
    53 0000041F E6A1                <1>     out 0A1h, al
    54 00000421 E621                <1>     out 021h, al
    55 00000423 F4                  <1>     hlt             ;Halt the system
    56 00000424 EBFB                <1>     jmp short $ - 3 ;Go back far enough to capture the hlt
    57 00000426 4D656D6F727920616C- <1> .sysHltString db "Memory allocation error",0Dh,0Ah,
    57 0000042F 6C6F636174696F6E20- <1>
    57 00000438 6572726F720D0A      <1>
    58 0000043F 43616E6E6F74206C6F- <1>               db "Cannot load COMMAND, system halted$"
    58 00000448 616420434F4D4D414E- <1>
    58 00000451 442C2073797374656D- <1>
    58 0000045A 2068616C74656424    <1>
    19                                  %include "dateTimeFunctions.asm"
    20                              <1> ;Major kernel date time functions and subroutines
    21                              <1> 
    22                              <1> getDate:           ;ah = 2Ah
    23                              <1> setDate:           ;ah = 2Bh
    24                              <1> getTime:           ;ah = 2Ch
    25                              <1> setTime:           ;ah = 2Dh
    26 00000462 C3                  <1>     ret
    20                                  %include "localisation.asm"
    21                              <1> ;Localisation based functions live here
    22                              <1> 
    23                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    24                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    25                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    26                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    27 00000463 C3                  <1>     ret
    21                                  %include "dosKernel.asm"
    22                              <1> ;-----------------------------------:
    23                              <1> ;       Misc System routines        :
    24                              <1> ;-----------------------------------:
    25                              <1> criticalDOSError:
    26                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    27                              <1> ; to the critical error handler.
    28                              <1> ; Called with ax, di and rsi set as required by Int 44h (caller decides)
    29                              <1> ;               AH = Critical Error Bitfield
    30                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    31                              <1> ;               Bit 6 - Reserved
    32                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    33                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    34                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    35                              <1> ;               Bits [2-1] = Affected Disk Error
    36                              <1> ;                     0 0   DOS area
    37                              <1> ;                     0 1   FAT area
    38                              <1> ;                     1 0   Directory area
    39                              <1> ;                     1 1   Data area
    40                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    41                              <1> ;               AL  = Failing drive number if AH[7] = 0
    42                              <1> ;               DIL = Error code for errorMsg
    43                              <1> ;               RSI = EA of Device Header for which device the error occured
    44                              <1> ;Return:
    45                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    46                              <1> ;                  = 1 - Retry the Operation    (Retry)
    47                              <1> ;                  = 2 - Terminate the Program  (Abort)
    48                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    49                              <1> ; Return response from int 44h in al
    50 00000464 FA                  <1>     cli ;Disable Interrupts
    51 00000465 C605(C7000000)01    <1>     mov byte [critErrFlag], 1   ;Set flag for critical error
    52 0000046C 488925(F4000000)    <1>     mov qword [xInt44hRSP], rsp
    53 00000473 488B25(08010000)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
    54 0000047A CD44                <1>     int 44h ;Call critical error handler
    55 0000047C 488B25(F4000000)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
    56 00000483 C605(C7000000)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
    57 0000048A FB                  <1>     sti ;Reenable Interrupts
    58 0000048B C3                  <1>     ret
    59                              <1> 
    60                              <1> findDPB:
    61                              <1> ;Finds the DPB for a given drive
    62                              <1> ;Input:  dl = Drive number (0=A, 1=B etc...)
    63                              <1> ;Output: al = 00, rbp = Pointer to the DPB
    64                              <1> ;        al = -1, Failed, no DPB for device, rbx destroyed
    65 0000048C 488B1D(67000000)    <1>     mov rbx, qword [dpbHeadPtr]
    66                              <1> .fd1:
    67 00000493 30C0                <1>     xor al, al
    68 00000495 385500              <1>     cmp byte [rbp + dpb.bDriveNumber], dl
    69 00000498 740F                <1>     je .fd2
    70 0000049A 488B6D24            <1>     mov rbp, qword [rbp + dpb.qNextDPBPtr]
    71 0000049E B0FF                <1>     mov al, -1
    72 000004A0 4881FDFFFFFFFF      <1>     cmp rbp, -1 ;If rbx followed last item in list, no DPB exists for dl
    73 000004A7 75EA                <1>     jne .fd1
    74                              <1> .fd2:
    75 000004A9 C3                  <1>     ret
    76                              <1> ;-----------------------------------:
    77                              <1> ;        Interrupt routines         :
    78                              <1> ;-----------------------------------:
    79                              <1> terminateProcess:   ;Int 40h
    80 000004AA 48CF                <1>     iretq
    81                              <1> terminateHandler:   ;Int 42h
    82                              <1> ctrlCHandler:       ;Int 43h
    83 000004AC 48CF                <1>     iretq
    84                              <1> absDiskWrite:       ;Int 46h
    85                              <1> ;al = Drive number
    86                              <1> ;rbx = Memory Buffer address to read from
    87                              <1> ;ecx = Number of sectors to write
    88                              <1> ;rdx = Start LBA to write to
    89 000004AE 50                  <1>     push rax
    90 000004AF 53                  <1>     push rbx
    91 000004B0 52                  <1>     push rdx
    92 000004B1 55                  <1>     push rbp
    93 000004B2 B408                <1>     mov ah, drvWRITE
    94 000004B4 0225(F3000000)      <1>     add ah, byte [verifyFlag]   ;Change to Write/Verify if set
    95 000004BA EB06                <1>     jmp short absDiskReadWriteCommon
    96                              <1> absDiskRead:        ;Int 45h
    97                              <1> ;al = Drive number
    98                              <1> ;rbx = Memory Buffer address to write to
    99                              <1> ;ecx = Number of sectors to read
   100                              <1> ;rdx = Start LBA to read from
   101 000004BC 50                  <1>     push rax
   102 000004BD 53                  <1>     push rbx
   103 000004BE 52                  <1>     push rdx
   104 000004BF 55                  <1>     push rbp
   105 000004C0 B404                <1>     mov ah, drvREAD
   106                              <1> absDiskReadWriteCommon:
   107                              <1> ;Entered with the appropriate function number in ah
   108 000004C2 50                  <1>     push rax    ;Save drive number, cmdcde and start LBA
   109 000004C3 53                  <1>     push rbx
   110 000004C4 52                  <1>     push rdx
   111 000004C5 B432                <1>     mov ah, 32h ;Get DPB
   112 000004C7 88C2                <1>     mov dl, al
   113 000004C9 CD41                <1>     int 41h
   114 000004CB 4889DD              <1>     mov rbp, rbx    ;Get dpb ptr in rbp
   115 000004CE 5A                  <1>     pop rdx
   116 000004CF 5B                  <1>     pop rbx
   117 000004D0 58                  <1>     pop rax
   118                              <1> 
   119 000004D1 C605(35000000)2A    <1>     mov byte [diskReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   120 000004D8 8805(36000000)      <1>     mov byte [diskReqHdr + ioReqPkt.unitnm], al
   121 000004DE 8825(37000000)      <1>     mov byte [diskReqHdr + ioReqPkt.cmdcde], ah
   122 000004E4 66C705(38000000)00- <1>     mov word [diskReqHdr + ioReqPkt.status], 0
   122 000004EC 00                  <1>
   123 000004ED 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   124 000004F0 8805(42000000)      <1>     mov byte [diskReqHdr + ioReqPkt.medesc], al
   125 000004F6 48891D(43000000)    <1>     mov qword [diskReqHdr + ioReqPkt.bufptr], rbx
   126 000004FD 488915(4F000000)    <1>     mov qword [diskReqHdr + ioReqPkt.strtsc], rdx
   127 00000504 890D(4B000000)      <1>     mov dword [diskReqHdr + ioReqPkt.tfrlen], ecx
   128 0000050A 488B551A            <1>     mov rdx, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver pointer
   129                              <1> 
   130 0000050E 488D1D(35000000)    <1>     lea rbx, diskReqHdr
   131 00000515 FF520A              <1>     call qword [rdx + drvHdr.strPtr]  ;Call with ptr to request block in rbx
   132 00000518 FF5212              <1>     call qword [rdx + drvHdr.intPtr]
   133 0000051B 5D                  <1>     pop rbp
   134 0000051C 5A                  <1>     pop rdx
   135 0000051D 5B                  <1>     pop rbx
   136 0000051E 58                  <1>     pop rax
   137 0000051F 66F705(38000000)00- <1>     test word [diskReqHdr + ioReqPkt.status], 8000h
   137 00000527 80                  <1>
   138 00000528 7402                <1>     je .absDiskError
   139 0000052A F8                  <1>     clc
   140 0000052B C3                  <1>     ret
   141                              <1> .absDiskError:
   142 0000052C 8A05(38000000)      <1>     mov al, byte [diskReqHdr + ioReqPkt.status] ;Get low byte into al
   143 00000532 B480                <1>     mov ah, 80h ;Attachment failure
   144 00000534 3C0C                <1>     cmp al, 0Ch ;Gen error
   145 00000536 741A                <1>     je .absExit
   146 00000538 B440                <1>     mov ah, 40h ;Seek error
   147 0000053A 3C06                <1>     cmp al, 06h
   148 0000053C 7414                <1>     je .absExit
   149 0000053E B408                <1>     mov ah, 08h ;Bad CRC
   150 00000540 3C04                <1>     cmp al, 04h
   151 00000542 740E                <1>     je .absExit
   152 00000544 B404                <1>     mov ah, 04h ;Sector not found
   153 00000546 3C08                <1>     cmp al, 08h
   154 00000548 7408                <1>     je .absExit
   155 0000054A 30E4                <1>     xor ah, ah  ;Write Protect Violation
   156 0000054C 84C0                <1>     test al, al
   157 0000054E 7402                <1>     je .absExit
   158 00000550 B402                <1>     mov ah, 02h ;Other Error
   159                              <1> .absExit:
   160 00000552 F9                  <1>     stc
   161 00000553 C3                  <1>     ret
   162                              <1> 
   163                              <1> terminateResident:  ;Int 47h
   164                              <1> inDosHandler:       ;Int 48h
   165                              <1> ;Called when DOS idle
   166 00000554 48CF                <1>     iretq
   167                              <1> fastOutput:         ;Int 49h
   168                              <1> ;Called with char to transfer in al
   169 00000556 50                  <1>     push rax
   170 00000557 B40E                <1>     mov ah, 0Eh
   171 00000559 CD30                <1>     int 30h
   172 0000055B 58                  <1>     pop rax
   173 0000055C 48CF                <1>     iretq
   174                              <1> passCommand:        ;Int 4Eh, hooked by COMMAND.COM
   175 0000055E 48CF                <1>     iretq
   176                              <1> multiplex:          ;Int 4Fh, kept as iretq for now
   177 00000560 48CF                <1>     iretq
   178                              <1> ;-----------------------------------:
   179                              <1> ;        Main Kernel routines       :
   180                              <1> ;-----------------------------------:
   181                              <1> functionDispatch:   ;Int 41h Main function dispatcher
   182                              <1> ;ah = Function number, all other registers have various meanings
   183 00000562 FA                  <1>     cli ;Halt external interrupts
   184 00000563 FC                  <1>     cld ;Ensure all string ops occur in the right direction
   185 00000564 80FC6A              <1>     cmp ah, kernelDispatchTableL/8    ;Number of functions
   186 00000567 0F871D010000        <1>     ja .fdExitBad
   187                              <1>     ;Cherry pick functions
   188 0000056D 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
   189 00000570 722C                <1>     jb .fsbegin   ;If below skip these checks
   190 00000572 0F8447050000        <1>     je ctrlBreakCheck
   191 00000578 80FC64              <1>     cmp ah, 64h
   192 0000057B 0F8448070000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
   193 00000581 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
   194 00000583 80FC51              <1>     cmp ah, 51h
   195 00000586 0F84ED050000        <1>     je getCurrProcessID    ;This and below are exactly the same
   196 0000058C 80FC62              <1>     cmp ah, 62h
   197 0000058F 0F8421070000        <1>     je getPSPaddr          ;Calls the above function
   198 00000595 80FC50              <1>     cmp ah, 50h
   199 00000598 0F84D3050000        <1>     je setCurrProcessID
   200                              <1> .fsbegin:
   201                              <1>     pushDOS ;Push the usual prologue registers
   263 0000059E 4151                <2>  push r9
   264 000005A0 4150                <2>  push r8
   265 000005A2 55                  <2>  push rbp
   266 000005A3 57                  <2>  push rdi
   267 000005A4 56                  <2>  push rsi
   268 000005A5 52                  <2>  push rdx
   269 000005A6 51                  <2>  push rcx
   270 000005A7 53                  <2>  push rbx
   271 000005A8 50                  <2>  push rax
   202 000005A9 488B05(08010000)    <1>     mov rax, qword [oldRSP]
   203 000005B0 488905(00010000)    <1>     mov qword [oldoldRSP], rax
   204 000005B7 FE05(C8000000)      <1>     inc byte [inDOS]    ;Increment in DOS flag
   205 000005BD 488925(08010000)    <1>     mov qword [oldRSP], rsp
   206                              <1> ;Here, we want to save oldRSP in the callers PSP
   207 000005C4 803D(C8000000)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
   208 000005CB 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
   209 000005CD 488B05(D7000000)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
   210 000005D4 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
   211                              <1> .fsb1:
   212 000005D8 58                  <1>     pop rax     ;Get old rax back
   213 000005D9 50                  <1>     push rax    ;and push it back onto the stack
   214 000005DA 488D25(4B070000)    <1>     lea rsp, critStakTop
   215 000005E1 FB                  <1>     sti         ;Reenable interrupts
   216                              <1> 
   217 000005E2 C605(FF000000)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
   218                              <1> 
   219 000005E9 48891D(10010000)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
   220 000005F0 0FB6DC              <1>     movzx ebx, ah   ;Move the function number bl zero extended to rbx
   221 000005F3 C1E303              <1>     shl ebx, 3      ;Multiply the function number by 8 for offset into table
   222 000005F6 50                  <1>     push rax        ;Push rax onto the stack
   223 000005F7 488D05CC060000      <1>     lea rax, qword [kernelDispatchTable]
   224 000005FE 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   225 00000601 58                  <1>     pop rax
   226 00000602 488B1B              <1>     mov rbx, qword [rbx]    ;Get the address from the dispatch table
   227                              <1> 
   228 00000605 84E4                <1>     test ah, ah     ;Simple Terminate function?
   229 00000607 741C                <1>     jz .fddiskOp
   230 00000609 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   231 0000060C 7443                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   232 0000060E 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   233 00000611 7712                <1>     ja .fddiskOp
   234                              <1> ;Char operations here
   235 00000613 F605(C7000000)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   236 0000061A 7535                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   237 0000061C 488D25(8B0D0000)    <1>     lea rsp, IOStakTop          ;Otherwise, switch to IO stack
   238 00000623 EB2C                <1>     jmp short .fdGoToFunction
   239                              <1> .fddiskOp:
   240                              <1>     ;Disk operations go here
   241                              <1>     ;Clear up error info
   242 00000625 C605(CA000000)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   243 0000062C C605(C7000000)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   244 00000633 C605(C9000000)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   245                              <1> 
   246 0000063A C605(FF000000)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   247 00000641 488D25(CB130000)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   248 00000648 F605(F2000000)FF    <1>     test byte [breakFlag], -1   ;Test if set
   249 0000064F 7400                <1>     jz .fdGoToFunction
   250                              <1> ; HANDLE CTRL+BREAK HERE!
   251                              <1> .fdGoToFunction:
   252 00000651 48871D(10010000)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   253                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   254                              <1>     ;
   255                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   256                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   257                              <1>     ;
   258 00000658 FF15(10010000)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   259                              <1> .fdExit:
   260 0000065E FA                  <1>     cli     ;Redisable interrupts
   261                              <1>     ;???
   262 0000065F FE0D(C8000000)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   263 00000665 488B25(08010000)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   264 0000066C 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   265 0000066F 488B05(00010000)    <1>     mov rax, qword [oldoldRSP]
   266 00000676 488905(08010000)    <1>     mov qword [oldRSP], rax
   267                              <1>     popDOS  ;Pop the frame
   275 0000067D 58                  <2>  pop rax
   276 0000067E 5B                  <2>  pop rbx
   277 0000067F 59                  <2>  pop rcx
   278 00000680 5A                  <2>  pop rdx
   279 00000681 5E                  <2>  pop rsi
   280 00000682 5F                  <2>  pop rdi
   281 00000683 5D                  <2>  pop rbp
   282 00000684 4158                <2>  pop r8
   283 00000686 4159                <2>  pop r9
   268 00000688 48CF                <1>     iretq
   269                              <1> .fdExitBad:
   270 0000068A B400                <1>     mov ah, 0
   271 0000068C 48CF                <1>     iretq
   272                              <1> 
   273                              <1> ;========================================:
   274                              <1> ;            Kernel Functions            :
   275                              <1> ;========================================:
   276                              <1> simpleTerminate:   ;ah = 00h
   277 0000068E C3                  <1>     ret
   278                              <1> diskReset:         ;ah = 0Dh
   279                              <1> ;Flush all dirty buffers to disk
   280 0000068F 488B2D(89000000)    <1>     mov rbp, qword [bufHeadPtr]
   281                              <1> .drCheckBuffer:
   282 00000696 F6450940            <1>     test byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   283 0000069A 7407                <1>     jz .drGotoNextBuffer
   284                              <1> .drFlushBuffer:
   285 0000069C E848FAFFFF          <1>     call flushBuffer    ;Called with rbp = buffer header
   286 000006A1 720E                <1>     jc .drError
   287                              <1> .drGotoNextBuffer:
   288 000006A3 488B6D00            <1>     mov rbp, qword [rbp + bufferHdr.nextBufPtr]
   289 000006A7 4881FDFFFFFFFF      <1>     cmp rbp, -1     ;If rbp points to -1, exit
   290 000006AE 75E6                <1>     jne .drCheckBuffer
   291 000006B0 C3                  <1>     ret
   292                              <1> .drError:
   293                              <1> ;Abort/Retry/Ignore
   294                              <1> ;Abort returns to DOS, 
   295                              <1> ;Retry retries the write on the buffer, 
   296                              <1> ;Ignore marks the buffer as clean and proceeds as normal
   297 000006B1 8A4509              <1>     mov al, byte [rbp + bufferHdr.bufferFlags]
   298 000006B4 240F                <1>     and al, 0Fh ;Clear the upper nybble
   299 000006B6 B431                <1>     mov ah, 31h ;Disk Error, Ignore,Retry and Write operation
   300 000006B8 3C01                <1>     cmp al, dosBuffer
   301 000006BA 740F                <1>     je .drErrorMain
   302 000006BC 80C402              <1>     add ah, 2
   303 000006BF 3C02                <1>     cmp al, fatBuffer
   304 000006C1 7408                <1>     je .drErrorMain
   305 000006C3 80C402              <1>     add ah, 2
   306 000006C6 3C04                <1>     cmp al, dirBuffer
   307 000006C8 80C402              <1>     add ah, 2
   308                              <1> .drErrorMain:
   309 000006CB 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
   310 000006CE 488B7517            <1>     mov rsi, qword [rbp + bufferHdr.driveDPBPtr]
   311 000006D2 488B761A            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   312 000006D6 668B3D(38000000)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]    ;Disk error occured!
   313 000006DD 6681E7FF00          <1>     and di, 0FFh    ;Only bottom byte
   314 000006E2 66893D(CB000000)    <1>     mov word [errorExt], di     ;Save driver error code
   315 000006E9 668105(CB000000)13- <1>     add word [errorExt], 13h    ;Add offset to driver error codes
   315 000006F1 00                  <1>
   316 000006F2 8805(C9000000)      <1>     mov byte [errorDrv], al     ;Save the drive on which the error occured
   317 000006F8 C605(CA000000)02    <1>     mov byte [errorLocus], 2    ;Error in Block Device Request code
   318 000006FF C605(CE000000)0B    <1>     mov byte [errorClass], 11   ;Media error occured (bad BPB or other) code
   319 00000706 C605(CD000000)01    <1>     mov byte [errorAction], 1   ;Retry request code
   320 0000070D E852FDFFFF          <1>     call criticalDOSError       ;Critical error handler
   321 00000712 84C0                <1>     test al, al ;Ignore the troublesome buffer and mark it as free
   322 00000714 7406                <1>     jz .drIgnore
   323 00000716 3C01                <1>     cmp al, 1   ;Retry flushing the buffer
   324 00000718 7482                <1>     je .drFlushBuffer
   325 0000071A CD43                <1>     int 43h     ;Abort and fail both abort through int 43h
   326                              <1> .drIgnore:
   327 0000071C C64508FF            <1>     mov byte [rbp + bufferHdr.driveNumber], -1  ;Mark buffer as free
   328 00000720 E97EFFFFFF          <1>     jmp .drGotoNextBuffer
   329                              <1> 
   330                              <1> selectDisk:        ;ah = 0Eh
   331                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   332 00000725 8A05(0A000000)      <1>     mov al, byte [numLRemDrives]    ;Value 1 based
   333 0000072B 8A1D(99000000)      <1>     mov bl, byte [lastdrvNum]       ;Value 1 based
   334 00000731 FEC8                <1>     dec al
   335 00000733 FECB                <1>     dec bl
   336 00000735 38C3                <1>     cmp bl, al
   337 00000737 0F47C3              <1>     cmova eax, ebx    ;If bl > al, move bl to al
   338 0000073A 38C2                <1>     cmp dl, al  ;If dl is bigger than al
   339 0000073C 7707                <1>     ja .error
   340 0000073E 8815(F1000000)      <1>     mov byte [currentDrv], dl   ;Only save dl if it is a valid number
   341 00000744 C3                  <1>     ret ;al = lastdrv as retcode
   342                              <1> .error:
   343 00000745 488B2D(08010000)    <1>     mov rbp, qword [oldRSP]
   344 0000074C 48814D5801000000    <1>     or qword [rbp + callerFrame.flags], 1   ;Set the CY flag
   345 00000754 B80F000000          <1>     mov eax, 15                 ;Invalid drive error
   346 00000759 668905(CB000000)    <1>     mov word [errorExt], ax     
   347 00000760 C605(CA000000)01    <1>     mov byte [errorLocus], 1    ;Not appropriate
   348 00000767 C605(CE000000)08    <1>     mov byte [errorClass], 8    ;Drive not found
   349 0000076E C605(CD000000)07    <1>     mov byte [errorAction], 7   ;Retry after user intervention
   350 00000775 C3                  <1>     ret
   351                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   352 00000776 8A05(F1000000)      <1>     mov al, byte [currentDrv]
   353 0000077C C3                  <1>     ret
   354                              <1> FATinfoDefault:    ;ah = 1Bh
   355 0000077D 30D2                <1>     xor dl, dl
   356                              <1> FATinfoDevice:     ;ah = 1Ch
   357                              <1> ;Return in:
   358                              <1> ;   al = Number of sectors per cluster
   359                              <1> ;   edx = Number of clusters
   360                              <1> ;   cx =  Size of a clsuter
   361 0000077F 84D2                <1>     test dl, dl
   362 00000781 7408                <1>     jz .fidSkipdefault
   363 00000783 8A15(F1000000)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   364 00000789 EB02                <1>     jmp short .fidMain
   365                              <1> .fidSkipdefault:
   366 0000078B FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   367                              <1> .fidMain:
   368                              <1> ;Walk the dpb chain manually
   369 0000078D E8FAFCFFFF          <1>     call findDPB    ;Get in rbp the dpb pointer for drive dl
   370 00000792 84C0                <1>     test al, al
   371 00000794 7431                <1>     jz .fidDPBFound
   372                              <1> ;Else, we at an error.
   373                              <1> ;Simply return with CY set and error code in al with extended error info
   374 00000796 488B2D(08010000)    <1>     mov rbp, qword [oldRSP]
   375 0000079D 48814D5801000000    <1>     or qword [rbp + callerFrame.flags], 1   ;Set the CY flag
   376 000007A5 B80F000000          <1>     mov eax, 15                 ;Invalid drive error
   377 000007AA 668905(CB000000)    <1>     mov word [errorExt], ax     
   378 000007B1 C605(CA000000)01    <1>     mov byte [errorLocus], 1    ;Not appropriate
   379 000007B8 C605(CE000000)08    <1>     mov byte [errorClass], 8    ;Drive not found
   380 000007BF C605(CD000000)07    <1>     mov byte [errorAction], 7   ;Retry after user intervention
   381 000007C6 C3                  <1>     ret
   382                              <1> .fidDPBFound:
   383 000007C7 8A4503              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
   384 000007CA FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   385 000007CC 8B550E              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   386 000007CF 8A4D02              <1>     mov cl, byte [rbp + dpb.bBytesPerSectorShift]
   387 000007D2 BB01000000          <1>     mov ebx, 1
   388 000007D7 D3E3                <1>     shl ebx, cl
   389 000007D9 89D9                <1>     mov ecx, ebx    ;Save the value in ecx
   390 000007DB 488D5D22            <1>     lea rbx, qword [rbp + dpb.bMediaDescriptor]
   391 000007DF 488B2D(08010000)    <1>     mov rbp, qword [oldRSP]
   392 000007E6 48895518            <1>     mov qword [rbp + callerFrame.rdx], rdx
   393 000007EA 66894D10            <1>     mov word [rbp + callerFrame.rcx], cx
   394 000007EE 48895D08            <1>     mov qword [rbp + callerFrame.rbx], rbx
   395 000007F2 C3                  <1>     ret
   396                              <1> ;===============================
   397                              <1> setIntVector:      ;ah = 25h
   398                              <1> ;Called with:
   399                              <1> ;   rdx = Pointer to interrupt handler
   400                              <1> ;   al = Interrupt number
   401 000007F3 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   402 000007F5 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   403                              <1> ;First call to get default BIOS segement selector and attribute word
   404 000007FB 88C3                <1>     mov bl, al  ;Set interrupt number 
   405 000007FD B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   406 00000802 CD35                <1>     int 35h
   407 00000804 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   408 00000806 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   409                              <1> ;dx preserves the attribute word
   410 00000808 488B2D(08010000)    <1>     mov rbp, qword [oldRSP]
   411 0000080F 488B5D18            <1>     mov rbx, qword [rbp + callerFrame.rdx]  ;Pointer passed in rdx
   412 00000813 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   413 00000818 CD35                <1>     int 35h
   414                              <1> 
   415 0000081A 8A4500              <1>     mov al, byte [rbp + callerFrame.rax]    ;Preserve low byte of rax
   416 0000081D C3                  <1>     ret
   417                              <1> createNewPSP:      ;ah = 26h
   418 0000081E C3                  <1>     ret
   419                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   420 0000081F 8805(F3000000)      <1>     mov byte [verifyFlag], al
   421 00000825 8025(F3000000)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   422 0000082C C3                  <1>     ret
   423                              <1> getDOSversion:     ;ah = 30h
   424 0000082D 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   425 00000834 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   426 00000836 886209              <1>     mov byte [rdx + callerFrame.rbx + 1], ah    ;Clear bh 
   427 00000839 668B05C0F7FFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   428 00000840 668902              <1>     mov word [rdx + callerFrame.rax], ax    ;Save ax
   429 00000843 C3                  <1>     ret
   430                              <1> terminateStayRes:  ;ah = 31h
   431 00000844 C3                  <1>     ret
   432                              <1> ;-------------------------------------------
   433                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply calls int 41h ah = 32h with dl = 0
   434 00000845 30D2                <1>     xor dl, dl
   435                              <1> getDeviceDPBptr:   ;ah = 32h
   436                              <1> ;On entry: dl = Drive number
   437                              <1> ;On exit: rbx = DPB pointer
   438 00000847 84D2                <1>     test dl, dl
   439 00000849 7508                <1>     jnz .gddpskipdefault
   440 0000084B 8A15(F1000000)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   441 00000851 EB02                <1>     jmp short .gddpcommon
   442                              <1> .gddpskipdefault:
   443                              <1>     ;Decrement the drive letter since 0 = Default, 1 = A etc...
   444 00000853 FECA                <1>     dec dl
   445                              <1> .gddpcommon:
   446 00000855 E832FCFFFF          <1>     call findDPB ;Get in rbp the dpb pointer for drive dl
   447 0000085A 84C0                <1>     test al, al
   448 0000085C 741F                <1>     jz .gddpMediaCheck
   449                              <1> ;Put in here error info
   450 0000085E 66C705(CB000000)0F- <1>     mov word [errorExt], 15 ;Invalid drive spec
   450 00000866 00                  <1>
   451 00000867 C605(CA000000)02    <1>     mov byte [errorLocus], 2    ;Block device driver
   452 0000086E C605(CE000000)08    <1>     mov byte [errorClass], 8    ;Drive not found
   453 00000875 C605(CD000000)07    <1>     mov byte [errorAction], 7   ;Retry after intervention
   454 0000087C C3                  <1>     ret ;Return. al = -1
   455                              <1> .gddpMediaCheck:
   456                              <1> ;Media Check Section
   457 0000087D C605(35000000)17    <1>     mov byte [diskReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   458 00000884 8815(36000000)      <1>     mov byte [diskReqHdr + mediaCheckReqPkt.unitnm], dl
   459 0000088A C605(37000000)01    <1>     mov byte [diskReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   460 00000891 66C705(38000000)00- <1>     mov word [diskReqHdr + mediaCheckReqPkt.status], 0
   460 00000899 00                  <1>
   461 0000089A 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   462 0000089D 8805(42000000)      <1>     mov byte [diskReqHdr + mediaCheckReqPkt.medesc], al
   463 000008A3 88D0                <1>     mov al, dl  ;Save device number in al
   464 000008A5 488B551A            <1>     mov rdx, qword [rbp + dpb.qDriverHeaderPtr]
   465 000008A9 488D1D(35000000)    <1>     lea rbx, diskReqHdr ;rbx needs to point to diskReqHdr
   466 000008B0 FF520A              <1>     call [rdx + drvHdr.strPtr]
   467 000008B3 FF5212              <1>     call [rdx + drvHdr.intPtr]
   468 000008B6 66F705(38000000)00- <1>     test word [diskReqHdr + mediaCheckReqPkt.status], 8000h
   468 000008BE 80                  <1>
   469 000008BF 0F85EA000000        <1>     jnz .gddpError
   470 000008C5 88C2                <1>     mov dl, al
   471 000008C7 803D(43000000)01    <1>     cmp byte [diskReqHdr + mediaCheckReqPkt.medret], 1 ;Certified no change
   472 000008CE 0F84B0000000        <1>     je .gddpretdbp
   473 000008D4 803D(43000000)00    <1>     cmp byte [diskReqHdr + mediaCheckReqPkt.medret], 0
   474 000008DB 7512                <1>     jne .gddpBuildBPB   ;This means Media changed declared
   475 000008DD E8AAF8FFFF          <1>     call findDirtyBufferForDrive
   476 000008E2 48F7C3FFFFFFFF      <1>     test rbx, -1    ;This is the case if no dirty buffers for drive
   477 000008E9 0F8595000000        <1>     jne .gddpretdbp ;If there is a dirty buffer for the drive, dont build bpb
   478                              <1> .gddpBuildBPB:
   479                              <1> ;BPB Build Section, only here if need a new bpb, i.e. sure of a new device
   480 000008EF E848F8FFFF          <1>     call findLRUBuffer  ;Get lru buffer pointer in rbx
   481 000008F4 3A5308              <1>     cmp dl, byte [rbx + bufferHdr.driveNumber]  ;Does buffer belong to old drv?
   482 000008F7 7414                <1>     je .gddpBuildBPBInvalidateBuffer    ;Yes, immediately invalidate data
   483                              <1>     ;If no, flush the data to disk.
   484                              <1> .gddpBuildBPBFlush:
   485 000008F9 4889EE              <1>     mov rsi, rbp    ;Save rbp as pointer to old dl drive dpb
   486 000008FC 4889DD              <1>     mov rbp, rbx    ;Get buffer header pointer in rbp
   487 000008FF E8E5F7FFFF          <1>     call flushBuffer    ;Flush the buffer to disk, rbx preserved
   488 00000904 4889F5              <1>     mov rbp, rsi    ;Return old drive dpb pointer to rbp
   489 00000907 0F820F010000        <1>     jc .gddpErrorType2  ;rbx points to buffer header
   490                              <1> .gddpBuildBPBInvalidateBuffer:
   491                              <1>     ;Write new buffer header
   492 0000090D 885308              <1>     mov byte [rbx + bufferHdr.driveNumber], dl
   493 00000910 C6430908            <1>     mov byte [rbx + bufferHdr.bufferFlags], dataBuffer
   494 00000914 48C7430A00000000    <1>     mov qword [rbx + bufferHdr.bufferLBA], 0
   495 0000091C C6431201            <1>     mov byte [rbx + bufferHdr.bufFATcopy], 1
   496 00000920 C7431300000000      <1>     mov dword [rbx + bufferHdr.bufFATsize], 0
   497 00000927 48896B17            <1>     mov qword [rbx + bufferHdr.driveDPBPtr], rbp
   498 0000092B 488D5B20            <1>     lea rbx, qword [rbx + bufferHdr.dataarea]
   499                              <1>     ;Build BPB request
   500 0000092F C605(35000000)1E    <1>     mov byte [diskReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   501 00000936 8815(36000000)      <1>     mov byte [diskReqHdr + bpbBuildReqPkt.unitnm], dl
   502 0000093C C605(37000000)02    <1>     mov byte [diskReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   503 00000943 66C705(38000000)00- <1>     mov word [diskReqHdr + bpbBuildReqPkt.status], 0 
   503 0000094B 00                  <1>
   504 0000094C 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   505 0000094F 8805(42000000)      <1>     mov byte [diskReqHdr + bpbBuildReqPkt.medesc], al
   506 00000955 48891D(43000000)    <1>     mov qword [diskReqHdr + bpbBuildReqPkt.bufptr], rbx ;Put lru pointer in rbx
   507 0000095C 488B551A            <1>     mov rdx, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   508 00000960 488D1D(35000000)    <1>     lea rbx, diskReqHdr ;rbx needs to point to diskReqHdr
   509 00000967 FF520A              <1>     call [rdx + drvHdr.strPtr]
   510 0000096A FF5212              <1>     call [rdx + drvHdr.intPtr]
   511 0000096D 66F705(38000000)00- <1>     test word [diskReqHdr + bpbBuildReqPkt.status], 8000h
   511 00000975 80                  <1>
   512 00000976 7537                <1>     jnz .gddpError
   513 00000978 488B35(4B000000)    <1>     mov rsi, qword [diskReqHdr + bpbBuildReqPkt.bpbptr]
   514                              <1>     ;rbp points to dpb so we good to go
   515                              <1>     ;Call int 41h ah=53h Build DPB without reentering Int 41h
   516                              <1>     ;Since this function doesnt modify the caller stack, it is safe to do so
   517 0000097F E81B020000          <1>     call createDPB 
   518                              <1> .gddpretdbp: 
   519 00000984 C64523FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Clear access flag
   520 00000988 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   521 0000098F 48896A08            <1>     mov qword [rdx + callerFrame.rbx], rbp  ;Here, all paths have rbp as dpbptr
   522 00000993 30C0                <1>     xor al, al  ;Set al = 0 to indicate rbx=dpb pointer
   523 00000995 C3                  <1>     ret
   524                              <1> .gddpretdpbFail:
   525 00000996 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   526 0000099D 48814A5801000000    <1>     or qword [rdx + callerFrame.flags], 1   ;Set CF=CY
   527 000009A5 66C705(CB000000)53- <1>     mov word [errorExt], 83 ;Fail on INT 44h error code
   527 000009AD 00                  <1>
   528 000009AE C3                  <1>     ret
   529                              <1> .gddpError:
   530                              <1> ;Abort, Retry, Ignore are the only acceptible responses
   531                              <1> ;Entered with rbp = dpb for failing drive
   532                              <1> ;             rdx = driver header that caused fault
   533 000009AF 4889D6              <1>     mov rsi, rdx    ;rdx points to driver header in both cases
   534 000009B2 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   535 000009B9 8A4318              <1>     mov al, byte [rbx + callerFrame.rdx]    ;Get low byte = dl = Drive number
   536 000009BC 88C2                <1>     mov dl, al  ;Save in dl
   537 000009BE 84C0                <1>     test al, al
   538 000009C0 7508                <1>     jnz .gddpE0
   539 000009C2 8A05(F1000000)      <1>     mov al, byte [currentDrv]
   540 000009C8 EB02                <1>     jmp short .gddpE1
   541                              <1> .gddpE0:
   542 000009CA FEC8                <1>     dec al
   543                              <1> .gddpE1:
   544 000009CC B436                <1>     mov ah, 36h ;Read operation, data area, abort/retry/ignore, disk error
   545 000009CE 668B3D(38000000)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]   ;Get low byte of status
   546 000009D5 6681E7FF00          <1>     and di, 0FFh    ;Save lo byte only
   547 000009DA 66893D(CB000000)    <1>     mov word [errorExt], di     ;Save driver error code
   548 000009E1 668105(CB000000)13- <1>     add word [errorExt], 13h    ;Add offset to driver error codes
   548 000009E9 00                  <1>
   549 000009EA 8805(C9000000)      <1>     mov byte [errorDrv], al     ;Save the drive on which the error occured
   550 000009F0 C605(CA000000)02    <1>     mov byte [errorLocus], 2    ;Error in Block Device Request code
   551 000009F7 C605(CE000000)0B    <1>     mov byte [errorClass], 11   ;Media error occured (bad BPB or other) code
   552 000009FE C605(CD000000)01    <1>     mov byte [errorAction], 1   ;Retry request code
   553 00000A05 E85AFAFFFF          <1>     call criticalDOSError   ;Critical error handler
   554 00000A0A 84C0                <1>     test al, al
   555 00000A0C 0F8472FFFFFF        <1>     jz .gddpretdbp  ;Ignore error, return, rbp has old dpb pointer
   556 00000A12 3C01                <1>     cmp al, 1
   557 00000A14 0F842DFEFFFF        <1>     je getDeviceDPBptr ;Reenter the function, dl has drive code
   558 00000A1A CD43                <1>     int 43h ;Else, restart DOS
   559                              <1> .gddpErrorType2:
   560                              <1> ;Error flushing the old buffer
   561                              <1> ;   rbx = Buffer header for data transfer
   562 00000A1C B439                <1>     mov ah, 39h ;Write operation, abort/retry/ignore/fail, disk error
   563 00000A1E 807B0901            <1>     cmp byte [rbx + bufferHdr.bufferFlags], dosBuffer
   564 00000A22 7414                <1>     je .gddpErrorType2main
   565 00000A24 80CC02              <1>     or ah, 2h   ;Set bit 1
   566 00000A27 807B0902            <1>     cmp byte [rbx + bufferHdr.bufferFlags], fatBuffer
   567 00000A2B 740B                <1>     je .gddpErrorType2main
   568 00000A2D B43D                <1>     mov ah, 3Dh ;Set bit 2, clear bit 1
   569 00000A2F 807B0904            <1>     cmp byte [rbx + bufferHdr.bufferFlags], dirBuffer
   570 00000A33 7403                <1>     je .gddpErrorType2main
   571 00000A35 80CC02              <1>     or ah, 2h   ;Set bit 2 and 1
   572                              <1> .gddpErrorType2main:    
   573 00000A38 668B3D(38000000)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]   ;Get low byte of status
   574 00000A3F 6681E7FF00          <1>     and di, 0FFh    ;Save lo byte only
   575 00000A44 66893D(CB000000)    <1>     mov word [errorExt], di     ;Save driver error code
   576 00000A4B 668105(CB000000)13- <1>     add word [errorExt], 13h    ;Add offset to driver error codes
   576 00000A53 00                  <1>
   577 00000A54 8A4308              <1>     mov al, byte [rbx + bufferHdr.driveNumber]
   578 00000A57 8805(C9000000)      <1>     mov byte [errorDrv], al
   579 00000A5D C605(CA000000)02    <1>     mov byte [errorLocus], 2    ;Error in Block Device Request code
   580 00000A64 C605(CE000000)0B    <1>     mov byte [errorClass], 11   ;Media error occured (bad disk write) code
   581 00000A6B C605(CD000000)01    <1>     mov byte [errorAction], 1   ;Retry request code
   582 00000A72 488B7317            <1>     mov rsi, qword [rbx + bufferHdr.driveDPBPtr]
   583 00000A76 488B761A            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get device driver header in rsi
   584 00000A7A E8E5F9FFFF          <1>     call criticalDOSError   ;Critical error handler
   585 00000A7F 807B0902            <1>     cmp byte [rbx + bufferHdr.bufferFlags], fatBuffer
   586 00000A83 7420                <1>     je .gddpErrorType2FatDir
   587 00000A85 807B0904            <1>     cmp byte [rbx + bufferHdr.bufferFlags], dirBuffer
   588 00000A89 741A                <1>     je .gddpErrorType2FatDir
   589 00000A8B 84C0                <1>     test al, al
   590 00000A8D 0F847AFEFFFF        <1>     jz .gddpBuildBPBInvalidateBuffer ;Ignore error, invalidate data
   591 00000A93 3C01                <1>     cmp al, 1
   592 00000A95 0F845EFEFFFF        <1>     je .gddpBuildBPBFlush   ;Retry flush, rbx has buffer pointer
   593 00000A9B 3C03                <1>     cmp al, 3
   594 00000A9D 0F84F3FEFFFF        <1>     je .gddpretdpbFail
   595 00000AA3 CD43                <1>     int 43h ;al = 2, means just abort
   596                              <1> .gddpErrorType2FatDir:
   597 00000AA5 84C0                <1>     test al, al ;Ignore converted to fail
   598 00000AA7 0F84E9FEFFFF        <1>     jz .gddpretdpbFail
   599 00000AAD 3C01                <1>     cmp al, 1
   600 00000AAF 0F8444FEFFFF        <1>     je .gddpBuildBPBFlush   ;Retry flush, rbx has buffer pointer
   601 00000AB5 3C03                <1>     cmp al, 3
   602 00000AB7 0F84D9FEFFFF        <1>     je .gddpretdpbFail
   603 00000ABD CD43                <1>     int 43h ;al = 2, means just abort
   604                              <1> ;-------------------------------------------
   605                              <1> 
   606                              <1> ctrlBreakCheck:    ;ah = 33h
   607 00000ABF 84C0                <1>     test al, al
   608 00000AC1 7406                <1>     jz .cbcget  ;Get the state
   609 00000AC3 8815(F2000000)      <1>     mov byte [breakFlag], dl    ;Set the state
   610                              <1> .cbcget:
   611 00000AC9 8A15(F2000000)      <1>     mov dl, byte [breakFlag]    ;Get the state
   612 00000ACF C3                  <1>     ret
   613                              <1> getInDOSflagPtr:   ;ah = 34h
   614 00000AD0 488D15(C8000000)    <1>     lea rdx, inDOS
   615 00000AD7 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   616 00000ADE 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx  ;save ptr in rbx
   617 00000AE2 C3                  <1>     ret
   618                              <1> getIntVector:      ;ah = 35h
   619                              <1> ;Called with:
   620                              <1> ;   al = Interrupt Number
   621                              <1> ;Returns:
   622                              <1> ;   rbx = Pointer to interrupt handler
   623 00000AE3 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   624 00000AE5 B807F00000          <1>     mov eax, 0F007h
   625 00000AEA CD35                <1>     int 35h
   626 00000AEC 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   627 00000AF3 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx  ;Save pointer in rbx
   628 00000AF7 8A02                <1>     mov al, byte [rdx + callerFrame.rax]    ;Get the low byte in al
   629 00000AF9 C3                  <1>     ret
   630                              <1> getDiskFreeSpace:  ;ah = 36h
   631 00000AFA 84D2                <1>     test dl, dl
   632 00000AFC 7408                <1>     jz .gdfsSkipdefault
   633 00000AFE 8A15(F1000000)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   634 00000B04 EB02                <1>     jmp short .gdfsMain
   635                              <1> .gdfsSkipdefault:
   636 00000B06 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   637                              <1> .gdfsMain:
   638 00000B08 E87FF9FFFF          <1>     call findDPB ;Get in rbp the dpb pointer for drive dl
   639 00000B0D 84C0                <1>     test al, al
   640 00000B0F 7434                <1>     jz .gdfsDPBFound
   641                              <1> ;Else, we at an error.
   642                              <1> ;Simply return with CY set and error code in al with extended error info
   643 00000B11 66C705(CB000000)0F- <1>     mov word [errorExt], 15     ;Invalid drive error
   643 00000B19 00                  <1>
   644 00000B1A C605(CA000000)01    <1>     mov byte [errorLocus], 1    ;Not appropriate
   645 00000B21 C605(CE000000)08    <1>     mov byte [errorClass], 8    ;Drive not found
   646 00000B28 C605(CD000000)07    <1>     mov byte [errorAction], 7   ;Retry after user intervention
   647 00000B2F 488B2D(08010000)    <1>     mov rbp, qword [oldRSP]
   648 00000B36 66C74500FFFF        <1>     mov word [rbp + callerFrame.rax], -1    ;Set ax=FFFFh
   649 00000B3C 48814D5801000000    <1>     or qword [rbp + callerFrame.flags], 1   ;Set CF=CY
   650 00000B44 C3                  <1>     ret
   651                              <1> .gdfsDPBFound:
   652 00000B45 8A4503              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
   653 00000B48 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   654 00000B4A 8B550E              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   655 00000B4D 8A4D02              <1>     mov cl, byte [rbp + dpb.bBytesPerSectorShift]
   656 00000B50 BB01000000          <1>     mov ebx, 1
   657 00000B55 D3E3                <1>     shl ebx, cl
   658 00000B57 89D9                <1>     mov ecx, ebx    ;Save the value in ecx
   659 00000B59 8B5D30              <1>     mov ebx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Ger # free clusters
   660 00000B5C 488B2D(08010000)    <1>     mov rbp, qword [oldRSP]
   661 00000B63 48895518            <1>     mov qword [rbp + callerFrame.rdx], rdx
   662 00000B67 66894D10            <1>     mov word [rbp + callerFrame.rcx], cx
   663 00000B6B 48895D08            <1>     mov qword [rbp + callerFrame.rbx], rbx
   664 00000B6F C3                  <1>     ret
   665                              <1> 
   666                              <1> loadExecChild:     ;ah = 4Bh, EXEC
   667                              <1> terminateClean:    ;ah = 4Ch, EXIT
   668                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   669 00000B70 C3                  <1>     ret
   670                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   671 00000B71 48891D(D7000000)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   672 00000B78 C3                  <1>     ret
   673                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   674 00000B79 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   675 00000B80 488B15(D7000000)    <1>     mov rdx, qword [currentPSP]
   676 00000B87 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx   ;Set the caller pointer
   677 00000B8B C3                  <1>     ret 
   678                              <1> getSysVarsPtr:     ;ah = 52h
   679 00000B8C 488D15(67000000)    <1>     lea rdx, sysVarsPtr
   680 00000B93 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   681 00000B9A 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx
   682 00000B9E C3                  <1>     ret
   683                              <1> createDPB:         ;ah = 53h, generates a DPB from a given BPB
   684                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   685                              <1> ;This is done so that the other fields of the DPB can be recycled
   686                              <1> ;Input: rsi = ptr to the BPB
   687                              <1> ;       rbp = ptr to the DPB
   688                              <1> ;bMediaDescriptor
   689 00000B9F 8A4615              <1>     mov al, byte [rsi + bpb.media]
   690 00000BA2 884522              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   691                              <1> ;bAccessFlag
   692 00000BA5 C64523FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Not accessed
   693                              <1> ;dFirstFreeCluster
   694 00000BA9 C7452C00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   695                              <1> ;dNumberOfFreeClusters
   696 00000BB0 C74530FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   697                              <1> ;bBytesPerSectorShift
   698 00000BB7 668B460B            <1>     mov ax, word [rsi + bpb.bytsPerSec]
   699 00000BBB B107                <1>     mov cl, 7   ;Start with 128 byte sectors (not supported, min 512)
   700 00000BBD 66D3E8              <1>     shr ax, cl  ;Shift down
   701                              <1> .cd0:
   702 00000BC0 66D1E8              <1>     shr ax, 1
   703 00000BC3 7404                <1>     jz .cd1
   704 00000BC5 FEC1                <1>     inc cl
   705 00000BC7 EBF7                <1>     jmp short .cd0
   706                              <1> .cd1:
   707 00000BC9 884D02              <1>     mov byte [rbp + dpb.bBytesPerSectorShift], cl
   708                              <1> ;bMaxSectorInCluster
   709 00000BCC 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   710 00000BCF FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   711 00000BD1 884503              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   712                              <1> ;bSectorsPerClusterShift
   713 00000BD4 FEC0                <1>     inc al
   714 00000BD6 30C9                <1>     xor cl, cl
   715                              <1> .cd2:
   716 00000BD8 D0E8                <1>     shr al, 1
   717 00000BDA 7404                <1>     jz .cd3
   718 00000BDC FEC1                <1>     inc cl
   719 00000BDE EBF8                <1>     jmp short .cd2
   720                              <1> .cd3:
   721 00000BE0 884D04              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   722                              <1> ;wFAToffset, number of reserved sectors in partition
   723 00000BE3 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   724 00000BE7 66894505            <1>     mov word [rbp + dpb.wFAToffset], ax
   725                              <1> ;bNumberOfFATs
   726 00000BEB 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   727 00000BEE 884507              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   728                              <1> ;wNumberRootDirSectors
   729 00000BF1 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   730 00000BF5 C1E005              <1>     shl eax, 5  ;Multiply by 32
   731 00000BF8 0FB74E0B            <1>     movzx ecx, word [rsi + bpb.bytsPerSec]
   732 00000BFC FFC9                <1>     dec ecx
   733 00000BFE 01C8                <1>     add eax, ecx
   734 00000C00 31D2                <1>     xor edx, edx    ;Clear for divide
   735 00000C02 F7F1                <1>     div ecx ;Divide 0:eax by ecx, (e)ax has number of clusters
   736 00000C04 66894508            <1>     mov word [rbp + dpb.wNumberRootDirSectors], ax  ;0 for FAT32
   737                              <1> ;dFATlength, get the FAT length
   738 00000C08 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   739 00000C0C 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   740 00000C0F 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   741 00000C11 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   742 00000C14 894512              <1>     mov dword [rbp + dpb.dFATlength], eax
   743                              <1> ;Complex cases below...
   744                              <1> ;dClusterHeapOffset, start sector of the data area
   745 00000C17 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   746 00000C1B 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   747 00000C1E 85C0                <1>     test eax, eax
   748 00000C20 0F44C3              <1>     cmovz eax, ebx
   749                              <1> ;eax = FATsz
   750 00000C23 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   751 00000C27 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   752 00000C2A 85DB                <1>     test ebx, ebx
   753 00000C2C 0F44D9              <1>     cmovz ebx, ecx 
   754                              <1> ;ebx = TotSec
   755 00000C2F 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   756 00000C32 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   757                              <1> .cd4:
   758 00000C34 01C2                <1>     add edx, eax
   759 00000C36 FEC9                <1>     dec cl
   760 00000C38 75FA                <1>     jnz .cd4
   761 00000C3A 89D0                <1>     mov eax, edx    ;Store product in eax
   762 00000C3C 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   763 00000C40 01D0                <1>     add eax, edx
   764 00000C42 0FB75508            <1>     movzx edx, word [rbp + dpb.wNumberRootDirSectors]
   765 00000C46 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   766                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   767                              <1>     ;aka eax = Start sector of the data area in volume
   768 00000C48 89450A              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   769                              <1> ;dClusterCount
   770 00000C4B 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   771 00000C4D 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   772 00000C4F 31D2                <1>     xor edx, edx
   773 00000C51 BB01000000          <1>     mov ebx, 1
   774 00000C56 8A4D04              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   775 00000C59 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   776 00000C5B F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   777 00000C5D FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   778 00000C5F 89450E              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   779                              <1> ;dFirstUnitOfRootDir
   780 00000C62 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   781 00000C67 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   782 00000C6A 7709                <1>     ja .cd5
   783                              <1>     ;Else, we need to find the first sector of the root directory
   784                              <1>     ;Get the start sector of data area in volume 
   785                              <1>     ; and sub the number of sectors in the root directory
   786 00000C6C 8B450A              <1>     mov eax, dword [rbp + dpb.dClusterHeapOffset]
   787 00000C6F 0FB75D08            <1>     movzx ebx, word [rbp + dpb.wNumberRootDirSectors]
   788 00000C73 29D8                <1>     sub eax, ebx    ;eax now has start sector of root dir
   789                              <1> .cd5:
   790 00000C75 894516              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   791                              <1> ;Exit epilogue
   792 00000C78 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   793 00000C7F 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   794 00000C81 C3                  <1>     ret
   795                              <1> getVerifySetting:  ;ah = 54h
   796 00000C82 8A05(F3000000)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   797 00000C88 C3                  <1>     ret
   798                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
   799 00000C89 C3                  <1>     ret
   800                              <1> getExtendedError:  ;ah = 59h
   801 00000C8A 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   802 00000C91 668B05(CB000000)    <1>     mov ax, word [errorExt]
   803 00000C98 8A2D(CA000000)      <1>     mov ch, byte [errorLocus]
   804 00000C9E 8A3D(CE000000)      <1>     mov bh, byte [errorClass]
   805 00000CA4 8A1D(CD000000)      <1>     mov bl, byte [errorAction]
   806 00000CAA 668902              <1>     mov word [rdx + callerFrame.rax], ax
   807 00000CAD 66895A08            <1>     mov word [rdx + callerFrame.rbx], bx
   808 00000CB1 886A11              <1>     mov byte [rdx + callerFrame.rcx + 1], ch
   809 00000CB4 C3                  <1>     ret
   810                              <1> getCritErrorInfo:  ;ah = 5Dh
   811                              <1> networkServices:   ;ah = 5Eh, do nothing
   812                              <1> networkRedirection:;ah = 5Fh, do nothing
   813 00000CB5 C3                  <1>     ret
   814                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   815 00000CB6 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   816 00000CBD 488B15(D7000000)    <1>     mov rdx, qword [currentPSP]
   817 00000CC4 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx  ;Save the current psp in rbx
   818 00000CC8 C3                  <1>     ret
   819                              <1>                     ;ah = 63h, reserved
   820                              <1> setDriverLookahead:;ah = 64h, reserved
   821                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   822                              <1> return:
   823 00000CC9 C3                  <1>     ret
   824                              <1> 
   825                              <1> kernelDispatchTable:
   826 00000CCA [8E06000000000000]  <1>     dq simpleTerminate     ;AH = 00H, PROCESS MANAGEMENT
   827 00000CD2 [CF01000000000000]  <1>     dq stdinReadEcho       ;AH = 01H, CHAR IO
   828 00000CDA [4402000000000000]  <1>     dq stdoutWrite         ;AH = 02H, CHAR IO
   829 00000CE2 [7E02000000000000]  <1>     dq stdauxRead          ;AH = 03H, CHAR IO
   830 00000CEA [7E02000000000000]  <1>     dq stdauxWrite         ;AH = 04H, CHAR IO
   831 00000CF2 [7E02000000000000]  <1>     dq stdprnWrite         ;AH = 05H, CHAR IO
   832 00000CFA [7E02000000000000]  <1>     dq directCONIO         ;AH = 06H, CHAR IO
   833 00000D02 [7E02000000000000]  <1>     dq waitDirectInNoEcho  ;AH = 07H, CHAR IO
   834 00000D0A [B802000000000000]  <1>     dq waitStdinNoEcho     ;AH = 08H, CHAR IO
   835 00000D12 [B902000000000000]  <1>     dq printString         ;AH = 09H, CHAR IO
   836 00000D1A [FB02000000000000]  <1>     dq buffStdinInput      ;AH = 0AH, CHAR IO
   837 00000D22 [FB02000000000000]  <1>     dq checkStdinStatus    ;AH = 0BH, CHAR IO
   838 00000D2A [FB02000000000000]  <1>     dq clearbuffDoFunc     ;AH = 0CH, CHAR IO
   839 00000D32 [8F06000000000000]  <1>     dq diskReset           ;AH = 0DH, DISK MANAGEMENT
   840 00000D3A [2507000000000000]  <1>     dq selectDisk          ;AH = 0EH, DISK MANAGEMENT
   841 00000D42 [FB02000000000000]  <1>     dq openFileFCB         ;AH = 0FH, FILE OPERATION       FCB
   842 00000D4A [FB02000000000000]  <1>     dq closeFileFCB        ;AH = 10H, FILE OPERATION       FCB
   843 00000D52 [FB02000000000000]  <1>     dq findFirstFileFCB    ;AH = 11H, FILE OPERATION       FCB
   844 00000D5A [FB02000000000000]  <1>     dq findNextFileFCB     ;AH = 12H, FILE OPERATION       FCB
   845 00000D62 [FB02000000000000]  <1>     dq deleteFileFCB       ;AH = 13H, FILE OPERATION       FCB
   846 00000D6A [FB02000000000000]  <1>     dq sequentialReadFCB   ;AH = 14H, RECORD OPERATION     FCB
   847 00000D72 [FB02000000000000]  <1>     dq sequentialWriteFCB  ;AH = 15H, RECORD OPERTAION     FCB
   848 00000D7A [FB02000000000000]  <1>     dq createFileFCB       ;AH = 16H, FILE OPERATION       FCB
   849 00000D82 [FB02000000000000]  <1>     dq renameFileFCB       ;AH = 17H, FILE OPERATION       FCB
   850 00000D8A [C90C000000000000]  <1>     dq return              ;AH = 18H, RESERVED
   851 00000D92 [7607000000000000]  <1>     dq getCurrentDisk      ;AH = 19H, DISK MANAGEMENT
   852 00000D9A [FC02000000000000]  <1>     dq setDTA              ;AH = 1AH, RECORD OPERATION     F/H
   853 00000DA2 [7D07000000000000]  <1>     dq FATinfoDefault      ;AH = 1BH, DISK MANAGEMENT
   854 00000DAA [7F07000000000000]  <1>     dq FATinfoDevice       ;AH = 1CH, DISK MANAGEMENT
   855 00000DB2 [C90C000000000000]  <1>     dq return              ;AH = 1DH, RESERVED
   856 00000DBA [C90C000000000000]  <1>     dq return              ;AH = 1EH, RESERVED
   857 00000DC2 [4508000000000000]  <1>     dq getCurrentDPBptr    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
   858 00000DCA [C90C000000000000]  <1>     dq return              ;AH = 20H, RESERVED
   859 00000DD2 [0F03000000000000]  <1>     dq randomReadFCB       ;AH = 21H, RECORD OPERATION     FCB
   860 00000DDA [0F03000000000000]  <1>     dq randomWriteFCB      ;AH = 22H, RECORD OPERATION     FCB
   861 00000DE2 [0F03000000000000]  <1>     dq getFileSizeFCB      ;AH = 23H, FILE OPERATION       FCB
   862 00000DEA [0F03000000000000]  <1>     dq setRelRecordFCB     ;AH = 24H, RECORD OPERATION     FCB
   863 00000DF2 [F307000000000000]  <1>     dq setIntVector        ;AH = 25H, MISC. SYS. FUNCTION
   864 00000DFA [1E08000000000000]  <1>     dq createNewPSP        ;AH = 26H, PROCESS MANAGEMENT
   865 00000E02 [0F03000000000000]  <1>     dq randBlockReadFCB    ;AH = 27H, RECORD OPERATION     FCB
   866 00000E0A [0F03000000000000]  <1>     dq randBlockWriteFCB   ;AH = 28H, RECORD OPERATION     FCB
   867 00000E12 [0F03000000000000]  <1>     dq parseFilenameFCB    ;AH = 29H, FILE OPERATION       FCB
   868 00000E1A [6204000000000000]  <1>     dq getDate             ;AH = 2AH, TIME AND DATE
   869 00000E22 [6204000000000000]  <1>     dq setDate             ;AH = 2BH, TIME AND DATE
   870 00000E2A [6204000000000000]  <1>     dq getTime             ;AH = 2CH, TIME AND DATE
   871 00000E32 [6204000000000000]  <1>     dq setTime             ;AH = 2DH, TIME AND DATE
   872 00000E3A [1F08000000000000]  <1>     dq setResetVerify      ;AH = 2EH, DISK MANAGEMENT
   873 00000E42 [1003000000000000]  <1>     dq getDTA              ;AH = 2FH, RECORD OPERATION     F/H
   874 00000E4A [2D08000000000000]  <1>     dq getDOSversion       ;AH = 30H, MISC. SYS. FUNCTION
   875 00000E52 [4408000000000000]  <1>     dq terminateStayRes    ;AH = 31H, PROCESS MANAGEMENT
   876 00000E5A [4708000000000000]  <1>     dq getDeviceDPBptr     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
   877 00000E62 [BF0A000000000000]  <1>     dq ctrlBreakCheck      ;AH = 33H, MISC. SYS. FUNCTION
   878 00000E6A [D00A000000000000]  <1>     dq getInDOSflagPtr     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
   879 00000E72 [E30A000000000000]  <1>     dq getIntVector        ;AH = 35H, MISC. SYS. FUNCTION
   880 00000E7A [FA0A000000000000]  <1>     dq getDiskFreeSpace    ;AH = 36H, DISK MANAGEMENT
   881 00000E82 [6304000000000000]  <1>     dq getsetSwitchChar    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
   882 00000E8A [6304000000000000]  <1>     dq getsetCountryInfo   ;AH = 38H, MISC. SYS. FUNCTION
   883 00000E92 [CE01000000000000]  <1>     dq makeDIR             ;AH = 39H, DIRECTORY OPERATION
   884 00000E9A [CE01000000000000]  <1>     dq removeDIR           ;AH = 3AH, DIRECTORY OPERATION
   885 00000EA2 [CE01000000000000]  <1>     dq changeCurrentDIR    ;AH = 3BH, DIRECTORY OPERATION
   886 00000EAA [2303000000000000]  <1>     dq createFileHdl       ;AH = 3CH, FILE OPERATION       HANDLE
   887 00000EB2 [2303000000000000]  <1>     dq openFileHdl         ;AH = 3DH, FILE OPERATION       HANDLE
   888 00000EBA [2303000000000000]  <1>     dq closeFileHdl        ;AH = 3EH, FILE OPERATION       HANDLE
   889 00000EC2 [2403000000000000]  <1>     dq readFileHdl         ;AH = 3FH, RECORD OPERATION     HANDLE
   890 00000ECA [5C03000000000000]  <1>     dq writeFileHdl        ;AH = 40H, RECORD OPERATION     HANDLE
   891 00000ED2 [6D03000000000000]  <1>     dq deleteFileHdl       ;AH = 41H, FILE OPERATION       HANDLE
   892 00000EDA [6D03000000000000]  <1>     dq movFileReadPtr      ;AH = 42H, RECORD OPERATION     HANDLE
   893 00000EE2 [6D03000000000000]  <1>     dq changeFileModeHdl   ;AH = 43H, FILE OPERATION       HANDLE
   894 00000EEA [6D03000000000000]  <1>     dq ioctrl              ;AH = 44H, MISC. SYS. FUNCTION
   895 00000EF2 [6D03000000000000]  <1>     dq duplicateHandle     ;AH = 45H, FILE OPERATION       HANDLE
   896 00000EFA [6D03000000000000]  <1>     dq forceDuplicateHdl   ;AH = 46H, FILE OPERATION       HANDLE
   897 00000F02 [CE01000000000000]  <1>     dq getCurrentDIR       ;AH = 47H, DIRECTORY OPERATION
   898 00000F0A [F603000000000000]  <1>     dq allocateMemory      ;AH = 48H, MEMORY MANAGEMENT
   899 00000F12 [F603000000000000]  <1>     dq freeMemory          ;AH = 49H, MEMORY MANAGEMENT
   900 00000F1A [F603000000000000]  <1>     dq reallocMemory       ;AH = 4AH, MEMORY MANAGEMENT
   901 00000F22 [700B000000000000]  <1>     dq loadExecChild       ;AH = 4BH, PROCESS MANAGEMENT
   902 00000F2A [700B000000000000]  <1>     dq terminateClean      ;AH = 4CH, PROCESS MANAGEMENT
   903 00000F32 [700B000000000000]  <1>     dq getRetCodeChild     ;AH = 4DH, PROCESS MANAGEMENT
   904 00000F3A [6D03000000000000]  <1>     dq findFirstFileHdl    ;AH = 4EH, FILE OPERATION       HANDLE
   905 00000F42 [6D03000000000000]  <1>     dq findNextFileHdl     ;AH = 4FH, FILE OPERATION       HANDLE
   906 00000F4A [710B000000000000]  <1>     dq setCurrProcessID    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   907 00000F52 [790B000000000000]  <1>     dq getCurrProcessID    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   908 00000F5A [8C0B000000000000]  <1>     dq getSysVarsPtr       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   909 00000F62 [9F0B000000000000]  <1>     dq createDPB           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   910 00000F6A [820C000000000000]  <1>     dq getVerifySetting    ;AH = 54H, DISK MANAGEMENT
   911 00000F72 [890C000000000000]  <1>     dq createPSP           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   912 00000F7A [6D03000000000000]  <1>     dq renameFile          ;AH = 56H, FILE OPERATION       HANDLE
   913 00000F82 [CE01000000000000]  <1>     dq getSetFileDateTime  ;AH = 57H, FILE OPERATION       HANDLE
   914 00000F8A [F603000000000000]  <1>     dq getsetMallocStrat   ;AH = 58H, MEMORY MANAGEMENT
   915 00000F92 [8A0C000000000000]  <1>     dq getExtendedError    ;AH = 59H, MISC. SYS. FUNCTION
   916 00000F9A [6D03000000000000]  <1>     dq createUniqueFile    ;AH = 5AH, FILE OPERATION       HANDLE
   917 00000FA2 [6D03000000000000]  <1>     dq createNewFile       ;AH = 5BH, FILE OPERATION       HANDLE
   918 00000FAA [6D03000000000000]  <1>     dq lockUnlockFile      ;AH = 5CH, RECORD OPERATION     HANDLE
   919 00000FB2 [B50C000000000000]  <1>     dq getCritErrorInfo    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   920 00000FBA [B50C000000000000]  <1>     dq networkServices     ;AH = 5EH, RESERVED NETWORK FUNCTION
   921 00000FC2 [B50C000000000000]  <1>     dq networkRedirection  ;AH = 5FH, RESERVED NETWORK FUNCTION
   922 00000FCA [CE01000000000000]  <1>     dq trueName            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   923 00000FD2 [C90C000000000000]  <1>     dq return              ;AH = 61H, RESERVED
   924 00000FDA [B60C000000000000]  <1>     dq getPSPaddr          ;AH = 62H, PROCESS MANAGEMENT
   925 00000FE2 [C90C000000000000]  <1>     dq return              ;AH = 63H, RESERVED
   926 00000FEA [C90C000000000000]  <1>     dq setDriverLookahead  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   927 00000FF2 [6304000000000000]  <1>     dq getExtLocalInfo     ;AH = 65H, MISC. SYS. FUNCTION
   928 00000FFA [6304000000000000]  <1>     dq getsetGlobalCP      ;AH = 66H, MISC. SYS. FUNCTION
   929 00001002 [6D03000000000000]  <1>     dq setHandleCount      ;AH = 67H, FILE OPERAITON       F/H
   930 0000100A [6D03000000000000]  <1>     dq commitFile          ;AH = 68H, FILE OPERATION       HANDLE
   931 00001012 [C90C000000000000]  <1>     dq getsetDiskSerial    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   932                              <1> kernelDispatchTableL  equ $ - kernelDispatchTable 
    22                                  %include "int44h.asm"
    23                              <1> critErrorHandler:   ;Int 44h
    24                              <1> ;User Stack in usage here, must be swapped to before this is called
    25                              <1> ;Entered with:  
    26                              <1> ;               AH = Critical Error Bitfield
    27                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    28                              <1> ;               Bit 6 - Reserved
    29                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    30                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    31                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    32                              <1> ;               Bits [2-1] = Affected Disk Error
    33                              <1> ;                     0 0   DOS area
    34                              <1> ;                     0 1   FAT area
    35                              <1> ;                     1 0   Directory area
    36                              <1> ;                     1 1   Data area
    37                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    38                              <1> ;               AL  = Failing drive number if AH[7] = 0
    39                              <1> ;               DIL = Error code for errorMsg
    40                              <1> ;               RSI = EA of Device Header for which device the error occured
    41                              <1> ;Return:
    42                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    43                              <1> ;                  = 1 - Retry the Operation    (Retry)
    44                              <1> ;                  = 2 - Terminate the Program  (Abort)
    45                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    46 0000101A 53                  <1>     push rbx
    47 0000101B 51                  <1>     push rcx
    48 0000101C 52                  <1>     push rdx
    49 0000101D 57                  <1>     push rdi
    50 0000101E 56                  <1>     push rsi
    51 0000101F FC                  <1>     cld         ;Make String ops go forward
    52                              <1> 
    53 00001020 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    54 00001023 488D155E020000      <1>     lea rdx, qword [.crlf]
    55 0000102A B409                <1>     mov ah, 09h ;Print String
    56 0000102C CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
    57                              <1> 
    58 0000102E 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    59 00001034 B90C000000          <1>     mov ecx, 0Ch
    60 00001039 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    61 0000103B 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    62 0000103E 480FB7FF            <1>     movzx rdi, di
    63 00001042 4889FA              <1>     mov rdx, rdi    ;Copy error code
    64 00001045 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    65 00001049 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    66 0000104C 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    67 0000104F 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    68 00001056 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    69 0000105A B409                <1>     mov ah, 09h ;Print String
    70 0000105C CD41                <1>     int 41h     ;Call DOS to print first part of message
    71                              <1> 
    72 0000105E 488D1505020000      <1>     lea rdx, qword [.readmsg]
    73 00001065 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    74 0000106C F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    75 0000106F 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    76 00001073 B409                <1>     mov ah, 09h ;Print String
    77 00001075 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    78                              <1> 
    79 00001077 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    80 0000107A 0F85DF000000        <1>     jnz .charError
    81                              <1> ;Disk error continues here
    82 00001080 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    83 00001087 B409                <1>     mov ah, 09h
    84 00001089 CD41                <1>     int 41h
    85 0000108B 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    86 0000108D 80C241              <1>     add dl, "A" ;Add ASCII code
    87 00001090 B402                <1>     mov ah, 02h ;Print char in dl
    88 00001092 CD41                <1>     int 41h
    89                              <1> .userInput:
    90 00001094 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
    91 0000109B B409                <1>     mov ah, 09h
    92 0000109D CD41                <1>     int 41h
    93                              <1> ;Abort, Retry, Ignore, Fail is word order
    94                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    95                              <1> .userAbort:
    96                              <1> ;Abort is always an option
    97 0000109F 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
    98 000010A6 B409                <1>     mov ah, 09h
    99 000010A8 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
   100                              <1> .userRetry:
   101 000010AA F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   102 000010AD 7416                <1>     jz .userIgnore    ;If clear, dont print message
   103 000010AF 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
   104 000010B6 B409                <1>     mov ah, 09h
   105 000010B8 CD41                <1>     int 41h
   106 000010BA 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
   107 000010C1 B409                <1>     mov ah, 09h
   108 000010C3 CD41                <1>     int 41h
   109                              <1> .userIgnore:
   110 000010C5 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   111 000010C8 7416                <1>     jz .userFail
   112 000010CA 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
   113 000010D1 B409                <1>     mov ah, 09h
   114 000010D3 CD41                <1>     int 41h
   115 000010D5 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
   116 000010DC B409                <1>     mov ah, 09h
   117 000010DE CD41                <1>     int 41h
   118                              <1> .userFail:
   119 000010E0 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   120 000010E3 7416                <1>     jz .userMsgEnd
   121 000010E5 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
   122 000010EC B409                <1>     mov ah, 09h
   123 000010EE CD41                <1>     int 41h
   124 000010F0 488D15A7010000      <1>     lea rdx, qword [.failmsg]
   125 000010F7 B409                <1>     mov ah, 09h
   126 000010F9 CD41                <1>     int 41h
   127                              <1> .userMsgEnd:
   128 000010FB 488D15A4010000      <1>     lea rdx, qword [.endMsg]
   129 00001102 B409                <1>     mov ah, 09h
   130 00001104 CD41                <1>     int 41h
   131                              <1> ;Get user input now 
   132 00001106 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   133 00001108 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   134 0000110F B401                <1>     mov ah, 01h ;STDIN without Console Echo
   135 00001111 CD41                <1>     int 41h ;Get char in al
   136 00001113 3C61                <1>     cmp al, "a" ;Chack if lowercase
   137 00001115 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   138 00001117 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   139                              <1> .uip1:
   140 00001119 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   141 0000111A 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   142 0000111C FFC1                <1>     inc ecx
   143 0000111E 81F904000000        <1>     cmp ecx, 4
   144 00001124 75F3                <1>     jne .uip1
   145 00001126 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   146                              <1> .validInput:
   147 0000112B 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   148                              <1> ;Now check if the input is permitted
   149 0000112D 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   150 0000112F 7427                <1>     je .cehExit
   151 00001131 84C0                <1>     test al, al ;Check if 0 => Ignore
   152 00001133 740F                <1>     je .viIgnore
   153 00001135 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   154 00001137 7416                <1>     je .viRetry
   155                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   156 00001139 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   157 0000113C 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   158 00001142 EB14                <1>     jmp short .cehExit
   159                              <1> .viIgnore:
   160 00001144 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   161 00001147 0F8447FFFFFF        <1>     jz .userInput
   162 0000114D EB09                <1>     jmp short .cehExit
   163                              <1> .viRetry:
   164 0000114F F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   165 00001152 0F843CFFFFFF        <1>     jz .userInput
   166                              <1> .cehExit:
   167 00001158 5E                  <1>     pop rsi
   168 00001159 5F                  <1>     pop rdi
   169 0000115A 5A                  <1>     pop rdx
   170 0000115B 59                  <1>     pop rcx
   171 0000115C 5B                  <1>     pop rbx
   172 0000115D 48CF                <1>     iretq
   173                              <1> .charError:
   174 0000115F B908000000          <1>     mov ecx, 8  ;8 chars in device name
   175 00001164 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   176                              <1> .ce1:
   177 0000116B AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   178 0000116C 88C2                <1>     mov dl, al  ;Move char into dl
   179 0000116E B402                <1>     mov ah, 02h
   180 00001170 CD41                <1>     int 41h ;Print char
   181 00001172 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   182 00001174 E91BFFFFFF          <1>     jmp .userInput
   183                              <1> 
   184                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   185 00001179 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   185 00001182 746563742024202020  <1>
   186 0000118B 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   186 00001194 6E6974202420202020  <1>
   187 0000119D 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   187 000011A6 202420202020202020  <1>
   188 000011AF 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   188 000011B8 6F6D6D616E64202420  <1>
   189 000011C1 446174612024202020- <1>             db "Data $            "       ;Error 4
   189 000011CA 202020202020202020  <1>
   190 000011D3 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   190 000011DC 737420242020202020  <1>
   191 000011E5 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   191 000011EE 202020202020202020  <1>
   192 000011F7 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   192 00001200 656469612024202020  <1>
   193 00001209 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   193 00001212 7420466F756E642024  <1>
   194 0000121B 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   194 00001224 706572202420202020  <1>
   195 0000122D 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   195 00001236 6C7420242020202020  <1>
   196 0000123F 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   196 00001248 742024202020202020  <1>
   197 00001251 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   197 0000125A 61696C757265202420  <1>
   198                              <1> 
   199 00001263 64726976652024      <1> .drive      db "drive $"
   200 0000126A 6572726F7220726561- <1> .readmsg    db "error reading $"
   200 00001273 64696E672024        <1>
   201 00001279 6572726F7220777269- <1> .writemsg   db "error writing $"
   201 00001282 74696E672024        <1>
   202 00001288 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   203 0000128B 41626F727424        <1> .abortmsg   db "Abort$" 
   204 00001291 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   205 00001298 526574727924        <1> .retrymsg   db "Retry$"
   206 0000129E 4661696C24          <1> .failmsg    db "Fail$"
   207 000012A3 2C2024              <1> .betweenMsg db ", $"
   208 000012A6 3F2024              <1> .endMsg     db "? $"
   209 000012A9 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
    23                                  %include "dosDrivers.asm" 
    24                              <1> ;-----------------------------------:
    25                              <1> ;          Driver routines          :
    26                              <1> ;-----------------------------------:
    27                              <1> drivers:
    28                              <1> conHdr:
    29 000012AD [CF12000000000000]  <1>     dq auxHdr
    30 000012B5 1308                <1>     dw 0813h
    31 000012B7 [4D14000000000000]  <1>     dq commonStrat
    32 000012BF [5C14000000000000]  <1>     dq conDriver
    33 000012C7 434F4E2020202020    <1>     db "CON     "
    34                              <1> auxHdr:
    35 000012CF [F112000000000000]  <1>     dq prnHdr
    36 000012D7 0080                <1>     dw 08000h
    37 000012D9 [4D14000000000000]  <1>     dq commonStrat
    38 000012E1 [2117000000000000]  <1>     dq com1Intr
    39 000012E9 4155582020202020    <1>     db "AUX     "
    40                              <1> prnHdr:
    41 000012F1 [1313000000000000]  <1>     dq clkHdr
    42 000012F9 40A0                <1>     dw 0A040h
    43 000012FB [5514000000000000]  <1>     dq nulStrat
    44 00001303 [5B14000000000000]  <1>     dq nulIntr
    45 0000130B 50524E2020202020    <1>     db "PRN     "
    46                              <1> clkHdr:
    47 00001313 [3513000000000000]  <1>     dq msdHdr
    48 0000131B 0880                <1>     dw 08008h
    49 0000131D [4D14000000000000]  <1>     dq commonStrat
    50 00001325 [9415000000000000]  <1>     dq clkDriver
    51 0000132D 434C4F434B242020    <1>     db "CLOCK$  "
    52                              <1> msdHdr:
    53 00001335 [5713000000000000]  <1>     dq com1Hdr
    54 0000133D 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    55 0000133F [4D14000000000000]  <1>     dq commonStrat
    56 00001347 [C618000000000000]  <1>     dq msdDriver
    57 0000134F 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    58                              <1> com1Hdr:
    59 00001357 [7913000000000000]  <1>     dq com2Hdr
    60 0000135F 0080                <1>     dw 08000h
    61 00001361 [4D14000000000000]  <1>     dq commonStrat
    62 00001369 [2117000000000000]  <1>     dq com1Intr
    63 00001371 434F4D3120202020    <1>     db "COM1    "
    64                              <1> com2Hdr:
    65 00001379 [9B13000000000000]  <1>     dq com3Hdr
    66 00001381 0080                <1>     dw 08000h
    67 00001383 [4D14000000000000]  <1>     dq commonStrat
    68 0000138B [2A17000000000000]  <1>     dq com2Intr
    69 00001393 434F4D3220202020    <1>     db "COM2    "
    70                              <1> com3Hdr:
    71 0000139B [BD13000000000000]  <1>     dq com4Hdr
    72 000013A3 0080                <1>     dw 08000h
    73 000013A5 [4D14000000000000]  <1>     dq commonStrat
    74 000013AD [3317000000000000]  <1>     dq com3Intr
    75 000013B5 434F4D3320202020    <1>     db "COM3    "
    76                              <1> com4Hdr:
    77 000013BD [DF13000000000000]  <1>     dq lpt1Hdr
    78 000013C5 0080                <1>     dw 08000h
    79 000013C7 [4D14000000000000]  <1>     dq commonStrat
    80 000013CF [3C17000000000000]  <1>     dq com4Intr
    81 000013D7 434F4D3420202020    <1>     db "COM4    "
    82                              <1> lpt1Hdr:
    83 000013DF [0114000000000000]  <1>     dq lpt2Hdr
    84 000013E7 40A0                <1>     dw 0A040h
    85 000013E9 [5514000000000000]  <1>     dq nulStrat
    86 000013F1 [5B14000000000000]  <1>     dq nulIntr
    87 000013F9 4C50543120202020    <1>     db "LPT1    "
    88                              <1> lpt2Hdr:
    89 00001401 [2314000000000000]  <1>     dq lpt3Hdr
    90 00001409 40A0                <1>     dw 0A040h
    91 0000140B [5514000000000000]  <1>     dq nulStrat
    92 00001413 [5B14000000000000]  <1>     dq nulIntr
    93 0000141B 4C50543220202020    <1>     db "LPT2    "
    94                              <1> lpt3Hdr:
    95 00001423 FFFFFFFFFFFFFFFF    <1>     dq -1
    96 0000142B 40A0                <1>     dw 0A040h
    97 0000142D [5514000000000000]  <1>     dq nulStrat
    98 00001435 [5B14000000000000]  <1>     dq nulIntr
    99 0000143D 4C50543320202020    <1>     dq "LPT3    "
   100 00001445 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
   101                              <1> commonStrat:
   102                              <1> ;DOS calls this function with rbx=Ptr to request header
   103 0000144D 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
   104 00001454 C3                  <1>     ret
   105                              <1> nulStrat:
   106 00001455 66C743030001        <1>     mov word [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
   107                              <1> nulIntr:
   108 0000145B C3                  <1>     ret
   109                              <1> 
   110                              <1> conDriver:
   111 0000145C 50                  <1>     push rax
   112 0000145D 53                  <1>     push rbx
   113 0000145E 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
   114 00001465 B003                <1>     mov al, 03h ;Unknown Command
   115 00001467 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   116 0000146B 7735                <1>     ja .conWriteErrorCode ;If yes, error!
   117                              <1> 
   118 0000146D 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   119 00001470 3C04                <1>     cmp al, 4
   120 00001472 743D                <1>     jz .conRead
   121 00001474 3C05                <1>     cmp al, 5
   122 00001476 747F                <1>     jz .conNondestructiveRead
   123 00001478 3C06                <1>     cmp al, 6
   124 0000147A 0F84A8000000        <1>     jz .conInputStatus
   125 00001480 3C07                <1>     cmp al, 7
   126 00001482 0F84B0000000        <1>     jz .conFlushInputBuffers
   127 00001488 3C08                <1>     cmp al, 8
   128 0000148A 0F84CA000000        <1>     jz .conWrite
   129 00001490 3C09                <1>     cmp al, 9
   130 00001492 0F84C2000000        <1>     jz .conWrite
   131 00001498 3C0A                <1>     cmp al, 0Ah
   132 0000149A 0F84E3000000        <1>     jz .conOutputStatus
   133 000014A0 EB06                <1>     jmp short .conExit  ;All other valid functions return done
   134                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
   135 000014A2 B480                <1>     mov ah, 80h ;Set error bit
   136 000014A4 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   137                              <1> .conExit:
   138 000014A8 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   139 000014AE 5B                  <1>     pop rbx
   140 000014AF 58                  <1>     pop rax
   141 000014B0 C3                  <1>     ret
   142                              <1> .conRead:    ;Function 4
   143 000014B1 B005                <1>     mov al, 05h ;Bad request structure length?
   144 000014B3 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   145 000014B6 75EA                <1>     jne .conWriteErrorCode
   146                              <1> 
   147 000014B8 57                  <1>     push rdi
   148 000014B9 51                  <1>     push rcx
   149 000014BA 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   150 000014BE 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   151                              <1> .cre1:
   152 000014C0 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   153 000014C3 741C                <1>     je .cre2
   154 000014C5 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
   155 000014CC 751A                <1>     jnz .cre3   ;No, get the buffer value
   156 000014CE 31C0                <1>     xor eax, eax
   157 000014D0 CD36                <1>     int 36h
   158                              <1> .cre11:
   159 000014D2 AA                  <1>     stosb
   160 000014D3 84C0                <1>     test al, al ;Was the ascii code 0?
   161 000014D5 7506                <1>     jnz .cre12  ;No, skip storing scancode
   162 000014D7 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
   163                              <1> .cre12:
   164 000014DD FFC1                <1>     inc ecx ;Inc chars stored in buffer
   165 000014DF EBDF                <1>     jmp short .cre1
   166                              <1> .cre2:
   167 000014E1 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   168 000014E4 59                  <1>     pop rcx
   169 000014E5 5F                  <1>     pop rdi
   170 000014E6 EBC0                <1>     jmp short .conExit
   171                              <1> .cre3:
   172 000014E8 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   173 000014EE C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   174 000014F5 EBDB                <1>     jmp short .cre11
   175                              <1> 
   176                              <1> .conNondestructiveRead:  ;Function 5
   177 000014F7 B005                <1>     mov al, 05h ;Bad request structure length?
   178 000014F9 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   179 000014FC 75A4                <1>     jne .conWriteErrorCode
   180 000014FE 803D8E00000000      <1>     cmp byte [.conBuf], 0
   181 00001505 7519                <1>     jnz .cnr2
   182 00001507 B401                <1>     mov ah, 01h     ;Get key if exists
   183 00001509 CD36                <1>     int 36h
   184 0000150B 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   185                              <1>     ;Keystroke available
   186                              <1> .cnr0:
   187 0000150D 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Move char in al
   188 00001510 E993FFFFFF          <1>     jmp .conExit
   189                              <1> .cnr1: ;No keystroke available
   190 00001515 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 0200h   ;Set busy bit
   191 0000151B E988FFFFFF          <1>     jmp .conExit
   192                              <1> .cnr2:
   193 00001520 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   194 00001526 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   195                              <1> 
   196                              <1> .conInputStatus:         ;Function 6
   197 00001528 B005                <1>     mov al, 05h ;Bad request structure length?
   198 0000152A 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   199 0000152D 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   200 00001533 E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   201                              <1> 
   202                              <1> .conFlushInputBuffers:   ;Function 7
   203 00001538 B005                <1>     mov al, 05h ;Bad request structure length?
   204 0000153A 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   205 0000153D 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   206 00001543 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   207                              <1> .cfib0:
   208 0000154A B401                <1>     mov ah, 01      ;Get buffer status
   209 0000154C CD36                <1>     int 36h
   210 0000154E 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   211 00001554 30E4                <1>     xor ah, ah
   212 00001556 CD36                <1>     int 36h ;Read key to flush from buffer
   213 00001558 EBF0                <1>     jmp short .cfib0
   214                              <1> 
   215                              <1> .conWrite:   ;Function 8 and 9
   216 0000155A B005                <1>     mov al, 05h ;Bad request structure length?
   217 0000155C 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   218 0000155F 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   219                              <1> 
   220 00001565 56                  <1>     push rsi
   221 00001566 51                  <1>     push rcx
   222 00001567 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   223 0000156B 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   224                              <1> .cw1: 
   225 0000156D 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   226 00001570 7407                <1>     je .cw2
   227 00001572 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   228 00001573 CD49                <1>     int 49h ;Fast print char
   229 00001575 FFC1                <1>     inc ecx
   230 00001577 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   231                              <1> .cw2:
   232 00001579 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   233 0000157C 59                  <1>     pop rcx
   234 0000157D 5E                  <1>     pop rsi
   235 0000157E E925FFFFFF          <1>     jmp .conExit
   236                              <1> .conOutputStatus:   ;Function 0Ah
   237 00001583 B005                <1>     mov al, 05h ;Bad request structure length?
   238 00001585 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   239 00001588 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   240 0000158E E915FFFFFF          <1>     jmp .conExit
   241                              <1> 
   242 00001593 00                  <1> .conBuf db 0    ;Single byte buffer
   243                              <1> clkDriver:
   244 00001594 50                  <1>     push rax
   245 00001595 53                  <1>     push rbx
   246 00001596 51                  <1>     push rcx
   247 00001597 52                  <1>     push rdx
   248 00001598 56                  <1>     push rsi
   249 00001599 55                  <1>     push rbp
   250 0000159A 488B1DA4FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   251 000015A1 B003                <1>     mov al, 03h ;Unknown Command
   252 000015A3 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   253 000015A7 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   254                              <1> 
   255 000015A9 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   256 000015AC 3C04                <1>     cmp al, 04h
   257 000015AE 7437                <1>     jz .clkRead
   258 000015B0 3C06                <1>     cmp al, 06h
   259 000015B2 0F8494000000        <1>     jz .clkInputStatus
   260 000015B8 3C07                <1>     cmp al, 07h
   261 000015BA 0F8498000000        <1>     jz .clkFlushInputBuffers
   262 000015C0 3C08                <1>     cmp al, 08h
   263 000015C2 0F84A0000000        <1>     jz .clkWrite
   264 000015C8 3C09                <1>     cmp al, 09h
   265 000015CA 0F8498000000        <1>     jz .clkWrite
   266 000015D0 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   267                              <1> .clkNotFunctioning:
   268 000015D2 B002                <1>     mov al, 02h ;Device not ready error
   269                              <1> .clkWriteErrorCode:
   270 000015D4 B480                <1>     mov ah, 80h ;Set error bit
   271 000015D6 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   272                              <1> .clkExit:
   273 000015DA 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   274 000015E0 5D                  <1>     pop rbp
   275 000015E1 5E                  <1>     pop rsi
   276 000015E2 5A                  <1>     pop rdx
   277 000015E3 59                  <1>     pop rcx
   278 000015E4 5B                  <1>     pop rbx
   279 000015E5 58                  <1>     pop rax
   280 000015E6 C3                  <1>     ret
   281                              <1> 
   282                              <1> .clkRead:           ;Function 4
   283 000015E7 B005                <1>     mov al, 05h ;Bad request structure length?
   284 000015E9 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   285 000015EC 75E6                <1>     jne .clkWriteErrorCode
   286                              <1> 
   287 000015EE 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   288 000015F1 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   289 000015F5 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   290 000015FC 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   291 00001600 30E4                <1>     xor ah, ah
   292 00001602 CD3A                <1>     int 3Ah         ;Read the system timer
   293 00001604 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   294 00001606 740D                <1>     jz .clkr1       ;Nope, now just time 
   295 00001608 30E4                <1>     xor ah, ah
   296                              <1>     ;This works as al should keep count of the # of days passed since last read
   297 0000160A 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   298 0000160E 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   299                              <1> .clkr1:
   300 00001615 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   301 00001618 0FB7D2              <1>     movzx edx, dx
   302 0000161B 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   303 0000161D 89D0                <1>     mov eax, edx
   304 0000161F 31D2                <1>     xor edx, edx
   305 00001621 89D8                <1>     mov eax, ebx
   306 00001623 B944040000          <1>     mov ecx, 1092   
   307 00001628 F7F1                <1>     div ecx
   308 0000162A 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   309 0000162D 89D0                <1>     mov eax, edx    ;Get remainder in eax
   310 0000162F 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   311 00001633 31D2                <1>     xor edx, edx
   312 00001635 B95B000000          <1>     mov ecx, 91 ;5*18.2
   313 0000163A F7F1                <1>     div ecx
   314 0000163C 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   315 0000163F 89D0                <1>     mov eax, edx    ;Get remainder in eax
   316                              <1>     ;lea eax, dword [eax + 4*eax]
   317                              <1>     ;add eax, edx    ;Essentially multiply by 6
   318 00001641 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   319 00001644 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   320 00001647 E98EFFFFFF          <1>     jmp .clkExit
   321                              <1> 
   322                              <1> .clkInputStatus:    ;Function 6
   323                              <1> ;Always return ready
   324 0000164C B005                <1>     mov al, 05h ;Bad request structure length?
   325 0000164E 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   326 00001651 7581                <1>     jne .clkWriteErrorCode
   327 00001653 E982FFFFFF          <1>     jmp .clkExit
   328                              <1> .clkFlushInputBuffers:  ;Function 7
   329                              <1> ;Always return done immediately
   330 00001658 B005                <1>     mov al, 05h ;Bad request structure length?
   331 0000165A 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   332 0000165D 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   333 00001663 E972FFFFFF          <1>     jmp .clkExit
   334                              <1> 
   335                              <1> .clkWrite:          ;Functions 8 and 9
   336 00001668 B005                <1>     mov al, 05h ;Bad request structure length?
   337 0000166A 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   338 0000166D 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   339                              <1> 
   340 00001673 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   341 00001676 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   342 0000167A 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   343 0000167E 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   344                              <1> 
   345 00001685 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   346 00001687 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   347 0000168B B105                <1>     mov cl, 5
   348 0000168D F6F1                <1>     div cl          ;Divide al by 5
   349 0000168F 30E4                <1>     xor ah, ah      ;Remove the remainder
   350 00001691 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   351                              <1> ;Using the decimal part of this formula for the low count
   352                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   353 00001693 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   354 00001696 B912000000          <1>     mov ecx, 18
   355 0000169B F7E1                <1>     mul ecx  
   356 0000169D 01C3                <1>     add ebx, eax
   357                              <1> 
   358 0000169F 31D2                <1>     xor edx, edx
   359 000016A1 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   360 000016A5 B944040000          <1>     mov ecx, 1092
   361 000016AA F7E1                <1>     mul ecx
   362 000016AC 01C3                <1>     add ebx, eax
   363 000016AE 89DA                <1>     mov edx, ebx    ;edx now has low count
   364 000016B0 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   365 000016B4 B401                <1>     mov ah, 01h     ;Set the system time
   366 000016B6 CD3A                <1>     int 3Ah
   367                              <1> 
   368 000016B8 4889F3              <1>     mov rbx, rsi
   369 000016BB E91AFFFFFF          <1>     jmp .clkExit
   370                              <1> 
   371                              <1> .clkBCDtoHex:
   372                              <1> ;Converts a BCD value to a Hex byte
   373                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   374 000016C0 51                  <1>     push rcx
   375 000016C1 0FB6C0              <1>     movzx eax, al   ;Zero extend
   376 000016C4 89C1                <1>     mov ecx, eax    ;Save al in ecx
   377 000016C6 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   378 000016CB 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   379 000016D1 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   380                              <1> .cbth0:
   381 000016D4 050A000000          <1>     add eax, 10
   382 000016D9 E2F9                <1>     loop .cbth0
   383 000016DB 59                  <1>     pop rcx
   384 000016DC C3                  <1>     ret
   385                              <1> 
   386                              <1> .clkHexToBCD:
   387                              <1> ;Converts a Hex byte into two BCD digits
   388                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   389 000016DD 51                  <1>     push rcx
   390 000016DE 0FB6C0              <1>     movzx eax, al   ;Zero extend
   391 000016E1 31C9                <1>     xor ecx, ecx
   392                              <1> .chtb0:
   393 000016E3 3D0A000000          <1>     cmp eax, 10
   394 000016E8 7209                <1>     jb .chtb1
   395 000016EA 2D0A000000          <1>     sub eax, 10
   396 000016EF FFC1                <1>     inc ecx
   397 000016F1 EBF0                <1>     jmp short .chtb0
   398                              <1> .chtb1:
   399 000016F3 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   400 000016F6 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   401 000016F8 59                  <1>     pop rcx
   402 000016F9 C3                  <1>     ret
   403 000016FA 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   404                              <1> ;When counting the number of days, first compute the number of years since
   405                              <1> ; 1980 and your year. 
   406                              <1> ;Then, using the table below, find the number of leap years between 1980
   407                              <1> ; and (YourYear - 1). 
   408                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   409                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   410                              <1> ;Use the months table to get the number of days in a normal month as leap 
   411                              <1> ; years are added using the previous comment.
   412                              <1> ;Finally check if the date is after 28th Feb. If it is, check if your year is 
   413                              <1> ; a leap year using the table. If it is, add an extra day.
   414                              <1> .clkLeapYears:
   415 000016FC 0004080C1014181C20- <1>     db 00, 04, 08, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 
   415 00001705 24282C30            <1>
   416 00001709 34383C4044484C5054- <1>     db 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96
   416 00001712 585C60              <1>
   417                              <1> .clkMonths:
   418 00001715 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   418 0000171E 1F1E1F              <1>
   419                              <1> ;COM Driver headers and main interrupt strat
   420                              <1> com1Intr:
   421 00001721 C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   422 00001728 EB19                <1>     jmp short comIntr
   423                              <1> com2Intr:
   424 0000172A C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   425 00001731 EB10                <1>     jmp short comIntr
   426                              <1> com3Intr:
   427 00001733 C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   428 0000173A EB07                <1>     jmp short comIntr
   429                              <1> com4Intr:
   430 0000173C C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   431                              <1> comIntr:
   432 00001743 50                  <1>     push rax
   433 00001744 53                  <1>     push rbx
   434 00001745 51                  <1>     push rcx
   435 00001746 52                  <1>     push rdx
   436 00001747 56                  <1>     push rsi
   437 00001748 57                  <1>     push rdi
   438 00001749 488B1DF5FCFFFF      <1>     mov rbx, qword [reqHdrPtr]
   439 00001750 B003                <1>     mov al, 03h ;Unknown Command
   440 00001752 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   441 00001756 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   442                              <1> 
   443 00001758 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   444 0000175B 3C04                <1>     cmp al, 4   ;Read Character(s)
   445 0000175D 7462                <1>     jz .comRead
   446 0000175F 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   447 00001761 0F849B000000        <1>     jz .comNondestructiveRead   
   448 00001767 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   449 00001769 0F8484000000        <1>     jz .comReadInputStatus
   450 0000176F 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   451 00001771 0F84B9000000        <1>     jz .comFlushInputBuffers
   452 00001777 3C08                <1>     cmp al, 8
   453 00001779 0F84DB000000        <1>     jz .comWrite
   454 0000177F 3C09                <1>     cmp al, 9
   455 00001781 0F84D3000000        <1>     jz .comWrite
   456 00001787 3C0A                <1>     cmp al, 0Ah
   457 00001789 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   458 0000178F EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   459                              <1> .comErrorNoCount:
   460 00001791 B002                <1>     mov al, 02h ;Unknown device
   461 00001793 EB19                <1>     jmp short .comWriteErrorCode
   462                              <1> .comReadError:
   463 00001795 BA0B000000          <1>     mov edx, 0Bh
   464                              <1> .comWriteError:
   465 0000179A BA0A000000          <1>     mov edx, 0Ah
   466                              <1> .comError:
   467 0000179F 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   468 000017A2 B902000000          <1>     mov ecx, 02h    ;Unknown device
   469 000017A7 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   470 000017A9 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   471 000017AC 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   472                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   473 000017AE B480                <1>     mov ah, 80h ;Set error bit
   474 000017B0 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   475                              <1> .comExit:
   476 000017B4 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   477 000017BA 5F                  <1>     pop rdi
   478 000017BB 5E                  <1>     pop rsi
   479 000017BC 5A                  <1>     pop rdx
   480 000017BD 59                  <1>     pop rcx
   481 000017BE 5B                  <1>     pop rbx
   482 000017BF 58                  <1>     pop rax
   483 000017C0 C3                  <1>     ret
   484                              <1> 
   485                              <1> .comRead:
   486 000017C1 B005                <1>     mov al, 05h ;Bad request structure length?
   487 000017C3 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   488 000017C6 75E6                <1>     jne .comWriteErrorCode
   489                              <1> 
   490 000017C8 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   491 000017CC 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   492                              <1> .cr1:
   493 000017CE 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   494 000017D1 741B                <1>     je .cre2
   495                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   496 000017D3 B802000000          <1>     mov eax, 02h    ;Recieve 
   497 000017D8 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   498 000017DE 6698                <1>     cbw     ;Zero extend to upper byte
   499 000017E0 CD34                <1>     int 34h ;Recieve Char
   500 000017E2 72BB                <1>     jc .comError
   501 000017E4 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   502 000017E7 74EA                <1>     je .cr11
   503 000017E9 AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   504 000017EA FFC1                <1>     inc ecx
   505 000017EC EBE0                <1>     jmp short .cr1
   506                              <1> .cre2:
   507 000017EE 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   508 000017F1 EBC1                <1>     jmp short .comExit
   509                              <1> 
   510                              <1> .comReadInputStatus:
   511 000017F3 B005                <1>     mov al, 05h ;Bad request structure length?
   512 000017F5 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   513 000017F8 75B4                <1>     jne .comWriteErrorCode
   514 000017FA 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   515 00001800 EBB2                <1>     jmp short .comExit
   516                              <1> 
   517                              <1> .comNondestructiveRead:
   518                              <1> ;Acts like a "read one character if there is one" function
   519 00001802 B005                <1>     mov al, 05h ;Bad request structure length?
   520 00001804 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   521 00001807 75A5                <1>     jne .comWriteErrorCode
   522                              <1> .cndr1:
   523 00001809 B802000000          <1>     mov eax, 02h    ;Recieve 
   524 0000180E 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   525 00001814 6698                <1>     cbw     ;Zero extend to upper byte
   526 00001816 CD34                <1>     int 34h ;Recieve Char
   527 00001818 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   528 0000181E 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   529 00001821 7405                <1>     je .cndr2
   530 00001823 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Get next char
   531 00001826 EB8C                <1>     jmp short .comExit
   532                              <1> .cndr2:
   533 00001828 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 200h ;Busy bit set
   534 0000182E EB84                <1>     jmp short .comExit
   535                              <1> 
   536                              <1> .comFlushInputBuffers:
   537 00001830 B005                <1>     mov al, 05h ;Bad request structure length?
   538 00001832 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   539 00001835 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   540                              <1> .cfib0:
   541 0000183B 8A1584000000        <1>     mov dl, byte [.comDevice]
   542 00001841 6698                <1>     cbw
   543 00001843 B802000000          <1>     mov eax, 02h    ;Recieve
   544 00001848 CD34                <1>     int 34h
   545 0000184A 0F8241FFFFFF        <1>     jc .comErrorNoCount
   546 00001850 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   547 00001853 75E6                <1>     jne .cfib0
   548 00001855 E95AFFFFFF          <1>     jmp .comExit
   549                              <1> 
   550                              <1> .comWrite:
   551 0000185A B005                <1>     mov al, 05h ;Bad request structure length?
   552 0000185C 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   553 0000185F 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   554                              <1> 
   555 00001865 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   556 00001869 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   557                              <1> .cw1: 
   558 0000186B 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   559 0000186E 7417                <1>     je .cw2
   560 00001870 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   561 00001871 B401                <1>     mov ah, 01h ;Move function number into ah
   562 00001873 8A154C000000        <1>     mov dl, byte [.comDevice]
   563 00001879 6698                <1>     cbw     ;Zero extend to upper byte
   564 0000187B CD34                <1>     int 34h ;Transmit char
   565 0000187D 0F821CFFFFFF        <1>     jc .comError
   566 00001883 FFC1                <1>     inc ecx
   567 00001885 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   568                              <1> .cw2:
   569 00001887 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   570 0000188A E925FFFFFF          <1>     jmp .comExit
   571                              <1> 
   572                              <1> .comOutputStatus:
   573                              <1> ;Read MODEM status
   574 0000188F B005                <1>     mov al, 05h ;Bad request structure length?
   575 00001891 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   576 00001894 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   577                              <1> 
   578 0000189A 8A1525000000        <1>     mov dl, byte [.comDevice]
   579 000018A0 6698                <1>     cbw     ;Zero extend to upper byte
   580 000018A2 B403                <1>     mov ah, 03h     ;Get status
   581 000018A4 CD34                <1>     int 34h
   582 000018A6 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   583 000018AC 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   584 000018B1 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   585 000018B4 F7D0                <1>     not eax      ;Bitwise inversion
   586 000018B6 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   587 000018BB 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   588 000018C0 E9EFFEFFFF          <1>     jmp .comExit
   589 000018C5 00                  <1> .comDevice   db 0
   590                              <1> 
   591                              <1> msdDriver:
   592 000018C6 50                  <1>     push rax
   593 000018C7 53                  <1>     push rbx
   594 000018C8 51                  <1>     push rcx
   595 000018C9 52                  <1>     push rdx
   596 000018CA 56                  <1>     push rsi
   597 000018CB 57                  <1>     push rdi
   598 000018CC 55                  <1>     push rbp
   599 000018CD 4150                <1>     push r8
   600 000018CF 488B1D6FFBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
   601 000018D6 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   602 000018DA B003                <1>     mov al, 03h
   603 000018DC 0F87F9000000        <1>     ja .msdWriteErrorCode ;If yes, error!
   604 000018E2 B001                <1>     mov al, 01h ;Unknown Unit Error
   605 000018E4 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
   606 000018E8 0F87ED000000        <1>     ja .msdWriteErrorCode ;If yes, error!
   607 000018EE 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
   608 000018F1 84C0                <1>     test al, al
   609 000018F3 0F84F8000000        <1>     jz .msdInit
   610 000018F9 3C01                <1>     cmp al, 01
   611 000018FB 0F84C8010000        <1>     jz .msdMedChk
   612 00001901 3C02                <1>     cmp al, 02
   613 00001903 0F8438020000        <1>     jz .msdBuildBPB
   614 00001909 3C03                <1>     cmp al, 03
   615 0000190B 0F84A5020000        <1>     jz .msdIOCTLRead
   616 00001911 3C04                <1>     cmp al, 04
   617 00001913 0F84AD020000        <1>     jz .msdRead
   618 00001919 3C08                <1>     cmp al, 08
   619 0000191B 0F84E1020000        <1>     jz .msdWrite
   620 00001921 3C09                <1>     cmp al, 09
   621 00001923 0F8415030000        <1>     jz .msdWriteVerify
   622 00001929 3C0C                <1>     cmp al, 12
   623 0000192B 0F8456030000        <1>     jz .msdIOCTLWrite
   624 00001931 3C0D                <1>     cmp al, 13
   625 00001933 0F845E030000        <1>     jz .msdDevOpen
   626 00001939 3C0E                <1>     cmp al, 14
   627 0000193B 0F8475030000        <1>     jz .msdDevClose
   628 00001941 3C0F                <1>     cmp al, 15
   629 00001943 0F848C030000        <1>     jz .msdRemovableMedia
   630 00001949 3C13                <1>     cmp al, 19
   631 0000194B 0F84B1030000        <1>     jz .msdGenericIOCTL
   632 00001951 3C17                <1>     cmp al, 23
   633 00001953 0F84B9030000        <1>     jz .msdGetLogicalDev
   634 00001959 3C18                <1>     cmp al, 24
   635 0000195B 0F84CA030000        <1>     jz .msdSetLogicalDev
   636 00001961 EB7E                <1>     jmp short .msdDriverExit    ;All other valid functions exit done
   637                              <1> .msdIOError:  ;In Read and Write errors, rbp points to the dev struc
   638 00001963 4889EB              <1>     mov rbx, rbp
   639 00001966 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
   640 00001969 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
   641 0000196B 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
   642                              <1> ;Now fall through to general error
   643                              <1> .msdGenDiskError:
   644 0000196E B401                <1>     mov ah, 01h
   645 00001970 30D2                <1>     xor dl, dl  ;Work around bug that fails request if dl > 7Fh
   646 00001972 CD33                <1>     int 33h ;Read status of last operation
   647 00001974 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
   648 00001977 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
   649 00001979 7460                <1>     je .msdWriteErrorCode 
   650 0000197B B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
   651 0000197D 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
   652 00001980 7459                <1>     je .msdWriteErrorCode 
   653 00001982 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
   654 00001985 7454                <1>     je .msdWriteErrorCode
   655                              <1> ;Device Not Ready
   656 00001987 B002                <1>     mov al, 02h  ;Device not ready code
   657 00001989 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   658 0000198C 744D                <1>     je .msdWriteErrorCode
   659 0000198E 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   660 00001992 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   661                              <1> ;Write Protected
   662 00001996 30C0                <1>     xor al, al
   663 00001998 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   664 0000199D 743C                <1>     je .msdWriteErrorCode
   665                              <1> ;CRC Error
   666 0000199F B004                <1>     mov al, 04h     ;CRC error code
   667 000019A1 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   668 000019A6 7433                <1>     je .msdWriteErrorCode
   669 000019A8 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   670 000019AD 742C                <1>     je .msdWriteErrorCode
   671 000019AF 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   672 000019B4 7425                <1>     je .msdWriteErrorCode
   673                              <1> ;Seek Error
   674 000019B6 B006                <1>     mov al, 06h     ;Seek error code
   675 000019B8 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   676 000019BB 741E                <1>     je .msdWriteErrorCode
   677                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   678                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   679 000019BD B007                <1>     mov al, 07h
   680 000019BF 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   681 000019C2 7417                <1>     je .msdWriteErrorCode
   682                              <1> ;Sector Not Found
   683 000019C4 B008                <1>     mov al, 08h     ;Sector not found code
   684 000019C6 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   685 000019C9 7410                <1>     je .msdWriteErrorCode
   686                              <1> ;Write faults
   687 000019CB B00A                <1>     mov al, 0Ah     ;Write fault
   688 000019CD 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   689 000019D0 7409                <1>     je .msdWriteErrorCode
   690                              <1> ;Read faults
   691 000019D2 B00B                <1>     mov al, 0Bh     ;Read fault
   692 000019D4 80F911              <1>     cmp cl, 11h     ;Read error
   693 000019D7 7402                <1>     je .msdWriteErrorCode
   694                              <1> ;General Errors
   695 000019D9 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   696                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   697 000019DB B480                <1>     mov ah, 80h ;Set error bit
   698 000019DD 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   699                              <1> .msdDriverExit:
   700 000019E1 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
   701 000019E7 4158                <1>     pop r8
   702 000019E9 5D                  <1>     pop rbp
   703 000019EA 5F                  <1>     pop rdi
   704 000019EB 5E                  <1>     pop rsi
   705 000019EC 5A                  <1>     pop rdx
   706 000019ED 59                  <1>     pop rcx
   707 000019EE 5B                  <1>     pop rbx
   708 000019EF 58                  <1>     pop rax
   709 000019F0 C3                  <1>     ret
   710                              <1> .msdInit:            ;Function 0
   711 000019F1 B005                <1>     mov al, 05h ;Bad request structure length
   712 000019F3 803B1F              <1>     cmp byte [rbx + drvReqHdr.hdrlen], initReqPkt_size
   713 000019F6 75E3                <1>     jne .msdWriteErrorCode
   714                              <1> 
   715 000019F8 488D2DF3050000      <1>     lea rbp, endptr
   716 000019FF 48896B0E            <1>     mov qword [rbx + initReqPkt.endptr], rbp    ;Where the end is gonna be
   717 00001A03 488D2D68030000      <1>     lea rbp, .msdBPBTbl
   718 00001A0A 48896B16            <1>     mov qword [rbx + initReqPkt.optptr], rbp    ;Where bpb tbl is gonna be
   719                              <1> 
   720 00001A0E 4889DD              <1>     mov rbp, rbx ;Save the req block ptr in rbp
   721 00001A11 31D2                <1>     xor edx, edx  ;Start from device zero
   722 00001A13 88550D              <1>     mov byte [rbp + initReqPkt.numunt], dl   ;Zero this field, max 5
   723                              <1> .mi0:   ;Now check each device for partitions
   724 00001A16 807D0D05            <1>     cmp byte [rbp + initReqPkt.numunt], 5
   725 00001A1A 7469                <1>     je .msdExit ;IF we are at 5 now, we exit
   726 00001A1C B482                <1>     mov ah, 82h ;LBA read
   727 00001A1E B001                <1>     mov al, 1   ;1 sector
   728 00001A20 31C9                <1>     xor ecx, ecx  ;Read sector 0
   729 00001A22 488D1D(BA020000)    <1>     lea rbx, msdTempBuffer  ;Get address of this space
   730 00001A29 CD33                <1>     int 33h
   731 00001A2B 0F8290000000        <1>     jc .msdInitError
   732                              <1> ;Now we verify if this is a BPB. Removable devices can't be partitioned (yet)
   733                              <1> ;1) Check byte 0 for EBh (short jmp) and byte 2 for a 90h (nop).
   734 00001A31 8A03                <1>     mov al, byte [rbx]
   735 00001A33 8A6302              <1>     mov ah, byte [rbx + 2]
   736 00001A36 663DEB90            <1>     cmp ax, 090EBh
   737 00001A3A 7573                <1>     jne .mimbr
   738                              <1> ;Valid BPB found! Copy to internal table and inc lastdrive
   739 00001A3C 4889DE              <1>     mov rsi, rbx
   740 00001A3F B878000000          <1>     mov eax, bpbEx_size
   741 00001A44 89D1                <1>     mov ecx, edx    ;Temporarily save dl in ecx
   742 00001A46 F7E2                <1>     mul edx
   743 00001A48 89CA                <1>     mov edx, ecx
   744 00001A4A 488D3D49030000      <1>     lea rdi, .msdBPBblks
   745 00001A51 4801C7              <1>     add rdi, rax
   746 00001A54 B978000000          <1>     mov ecx, bpbEx_size
   747 00001A59 4889F8              <1>     mov rax, rdi    ;Save the entry address in rax
   748 00001A5C F3A4                <1>     rep movsb   ;Copy the bpb into the bpb table
   749 00001A5E 488D3D0D030000      <1>     lea rdi, .msdBPBTbl
   750 00001A65 488D3CD7            <1>     lea rdi, qword [rdi + 8*rdx]
   751 00001A69 488907              <1>     mov qword [rdi], rax
   752 00001A6C 488D3DF5020000      <1>     lea rdi, .msdBIOSmap
   753 00001A73 4801D7              <1>     add rdi, rdx    ;rdx contains a number, table is a list of bytes
   754 00001A76 8817                <1>     mov byte [rdi], dl
   755 00001A78 FE450D              <1>     inc byte [rbp + initReqPkt.numunt]
   756 00001A7B FEC2                <1>     inc dl
   757 00001A7D 3A15(09000000)      <1>     cmp dl, byte [numRemMSD] ;Once these are equal, we have processed last dev
   758 00001A83 7591                <1>     jne .mi0
   759                              <1> .msdExit:
   760                              <1> ;If one device only, copy its BPB pointer and drive number
   761                              <1> ;When HDD support implemented, this will check the number of remdevs not lastdrv
   762 00001A85 807D0D01            <1>     cmp byte [rbp + initReqPkt.numunt], 1
   763 00001A89 751C                <1>     jne .msdexit1
   764                              <1> ;Here ONLY if one device found
   765 00001A8B 488D35E0020000      <1>     lea rsi, .msdBPBTbl
   766 00001A92 488D7E08            <1>     lea rdi, qword [rsi + 8]    ;Point to next entry
   767 00001A96 48A5                <1>     movsq   ;Copy pointer
   768 00001A98 488D35C9020000      <1>     lea rsi, .msdBIOSmap
   769 00001A9F 488D7E01            <1>     lea rdi, qword [rsi + 1]
   770 00001AA3 A4                  <1>     movsb   ;Copy byte
   771 00001AA4 FE450D              <1>     inc byte [rbp + initReqPkt.numunt]
   772                              <1> .msdexit1:
   773 00001AA7 4889EB              <1>     mov rbx, rbp
   774 00001AAA E932FFFFFF          <1>     jmp .msdDriverExit
   775                              <1> .mimbr:
   776                              <1> ;Goto next device without incrementing LASTDRIVE
   777 00001AAF FEC2                <1>     inc dl
   778 00001AB1 8A05(09000000)      <1>     mov al, byte [numRemMSD]
   779 00001AB7 38C2                <1>     cmp dl, al ;Once these are equ, we have processed last dev
   780 00001AB9 0F8557FFFFFF        <1>     jne .mi0
   781 00001ABF EBC4                <1>     jmp short .msdExit
   782                              <1> .msdInitError:
   783 00001AC1 4889EB              <1>     mov rbx, rbp
   784 00001AC4 E9A5FEFFFF          <1>     jmp .msdGenDiskError
   785                              <1> .msdMedChk:          ;Function 1
   786                              <1> ;Once the BIOS function is implmented that reads the changeline, use that!
   787                              <1> ;For BIOSes that dont support the changeline, the following procedure will 
   788                              <1> ; suffice.
   789 00001AC9 B005                <1>     mov al, 05h ;Bad request structure length
   790 00001ACB 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   791 00001ACE 0F8507FFFFFF        <1>     jne .msdWriteErrorCode
   792                              <1> 
   793 00001AD4 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   794 00001AD9 488D0D88020000      <1>     lea rcx, .msdBIOSmap
   795 00001AE0 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   796 00001AE3 F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   797 00001AE6 7550                <1>     jnz .mmcNoChange
   798                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   799 00001AE8 B416                <1>     mov ah, 16h 
   800 00001AEA CD33                <1>     int 33h
   801 00001AEC 0F827CFEFFFF        <1>     jc .msdGenDiskError
   802 00001AF2 80FC80              <1>     cmp ah, 80h
   803 00001AF5 740E                <1>     je .mmcNoChangeLine
   804 00001AF7 80FC86              <1>     cmp ah, 86h
   805 00001AFA 7409                <1>     je .mmcNoChangeLine
   806 00001AFC 84E4                <1>     test ah, ah ;No change?
   807 00001AFE 7438                <1>     jz .mmcNoChange
   808 00001B00 F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   809 00001B03 7516                <1>     jnz .mmcChange
   810                              <1> ;If nothing, fall through and test manually, should never happen though
   811                              <1> .mmcNoChangeLine:
   812                              <1> ;Now we test Media Descriptor
   813 00001B05 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   814 00001B08 488D3D63020000      <1>     lea rdi, .msdBPBTbl
   815 00001B0F 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax]
   816 00001B13 488B3F              <1>     mov rdi, qword [rdi]    ;Dereference rdi
   817 00001B16 385715              <1>     cmp byte [rdi + bpb32.media], dl    ;Compare media descriptor bytes
   818 00001B19 7414                <1>     je .mmcUnsure
   819                              <1> .mmcChange:
   820 00001B1B C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   821 00001B1F 488D0538020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   822 00001B26 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   823 00001B2A E9B2FEFFFF          <1>     jmp .msdDriverExit
   824                              <1> .mmcUnsure:
   825 00001B2F C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   826 00001B33 E9A9FEFFFF          <1>     jmp .msdDriverExit
   827                              <1> .mmcNoChange:
   828 00001B38 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   829 00001B3C E9A0FEFFFF          <1>     jmp .msdDriverExit
   830                              <1> 
   831                              <1> .msdBuildBPB:        ;Function 2
   832 00001B41 B005                <1>     mov al, 05h ;Bad request structure length
   833 00001B43 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   834 00001B46 0F858FFEFFFF        <1>     jne .msdWriteErrorCode
   835                              <1> 
   836 00001B4C 4889DE              <1>     mov rsi, rbx
   837 00001B4F 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   838 00001B54 488D0D0D020000      <1>     lea rcx, .msdBIOSmap
   839 00001B5B 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   840 00001B5E 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   841 00001B62 31C9                <1>     xor ecx, ecx    ;Read Sector 0
   842 00001B64 B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   843 00001B69 CD33                <1>     int 33h
   844 00001B6B 0F82FDFDFFFF        <1>     jc .msdGenDiskError
   845                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   846 00001B71 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   847 00001B75 7418                <1>     je .mbbpb0
   848 00001B77 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   849 00001B7B 7412                <1>     je .mbbpb0
   850 00001B7D 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   851 00001B81 740C                <1>     je .mbbpb0
   852 00001B83 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   853 00001B87 B007                <1>     mov al, 07h ;Unknown media error code
   854 00001B89 0F824CFEFFFF        <1>     jb .msdWriteErrorCode
   855                              <1> .mbbpb0:
   856 00001B8F 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   857 00001B92 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   858 00001B97 488D3DD4010000      <1>     lea rdi, .msdBPBTbl
   859 00001B9E 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   860 00001BA2 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   861 00001BA5 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   862 00001BA9 B90F000000          <1>     mov ecx, bpbEx_size/8
   863 00001BAE F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   864 00001BB1 E92BFEFFFF          <1>     jmp .msdDriverExit
   865                              <1> .msdIOCTLRead:       ;Function 3, returns done
   866 00001BB6 B005                <1>     mov al, 05h ;Bad request structure length
   867 00001BB8 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   868 00001BBB 0F851AFEFFFF        <1>     jne .msdWriteErrorCode
   869                              <1> 
   870 00001BC1 E91BFEFFFF          <1>     jmp .msdDriverExit
   871                              <1> .msdRead:            ;Function 4
   872                              <1> ;Will read one sector at a time.
   873 00001BC6 B005                <1>     mov al, 05h ;Bad request structure length
   874 00001BC8 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   875 00001BCB 0F850AFEFFFF        <1>     jne .msdWriteErrorCode
   876                              <1> 
   877 00001BD1 4889DD              <1>     mov rbp, rbx
   878 00001BD4 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   879                              <1> .msdr0:
   880 00001BD6 B682                <1>     mov dh, 82h ;LBA Read Sectors
   881 00001BD8 E867010000          <1>     call .msdBlkIOCommon
   882 00001BDD 0F8280FDFFFF        <1>     jc .msdIOError
   883 00001BE3 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   884 00001BEB 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   885 00001BF3 FFC6                <1>     inc esi
   886 00001BF5 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   887 00001BF8 75DC                <1>     jne .msdr0
   888 00001BFA 4889EB              <1>     mov rbx, rbp
   889 00001BFD E9DFFDFFFF          <1>     jmp .msdDriverExit
   890                              <1> .msdWrite:           ;Function 8
   891                              <1> ;Will write one sector at a time.
   892 00001C02 B005                <1>     mov al, 05h ;Bad request structure length
   893 00001C04 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   894 00001C07 0F85CEFDFFFF        <1>     jne .msdWriteErrorCode
   895                              <1> 
   896 00001C0D 4889DD              <1>     mov rbp, rbx
   897 00001C10 31F6                <1>     xor esi, esi  ;Set counter to zero
   898                              <1> .msdw0:
   899 00001C12 B683                <1>     mov dh, 83h ;LBA Write Sectors
   900 00001C14 E82B010000          <1>     call .msdBlkIOCommon
   901 00001C19 0F8244FDFFFF        <1>     jc .msdIOError
   902 00001C1F 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   903 00001C27 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   904 00001C2F FFC6                <1>     inc esi
   905 00001C31 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   906 00001C34 75DC                <1>     jne .msdw0
   907 00001C36 4889EB              <1>     mov rbx, rbp
   908 00001C39 E9A3FDFFFF          <1>     jmp .msdDriverExit
   909                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   910                              <1> ;Will write one sector at a time and then verify it.
   911 00001C3E B005                <1>     mov al, 05h ;Bad request structure length
   912 00001C40 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   913 00001C43 0F8592FDFFFF        <1>     jne .msdWriteErrorCode
   914                              <1> 
   915 00001C49 4889DD              <1>     mov rbp, rbx
   916 00001C4C 31F6                <1>     xor esi, esi  ;Set counter to zero
   917                              <1> .msdwv0:
   918 00001C4E B683                <1>     mov dh, 83h ;LBA Write Sectors
   919 00001C50 E8EF000000          <1>     call .msdBlkIOCommon
   920 00001C55 0F8208FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   921 00001C5B B684                <1>     mov dh, 84h ;LBA Verify Sectors
   922 00001C5D E8E2000000          <1>     call .msdBlkIOCommon
   923 00001C62 0F82FBFCFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   924 00001C68 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   925 00001C70 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   926 00001C78 FFC6                <1>     inc esi
   927 00001C7A 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   928 00001C7D 75CF                <1>     jne .msdwv0
   929 00001C7F 4889EB              <1>     mov rbx, rbp
   930 00001C82 E95AFDFFFF          <1>     jmp .msdDriverExit
   931                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   932 00001C87 B005                <1>     mov al, 05h ;Bad request structure length
   933 00001C89 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   934 00001C8C 0F8549FDFFFF        <1>     jne .msdWriteErrorCode
   935                              <1> 
   936 00001C92 E94AFDFFFF          <1>     jmp .msdDriverExit
   937                              <1> .msdDevOpen:         ;Function 13
   938 00001C97 B005                <1>     mov al, 05h ;Bad request structure length
   939 00001C99 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   940 00001C9C 0F8539FDFFFF        <1>     jne .msdWriteErrorCode
   941                              <1> 
   942 00001CA2 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   943 00001CA7 488D0DBF000000      <1>     lea rcx, .msdHdlCnt
   944 00001CAE FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   945 00001CB1 E92BFDFFFF          <1>     jmp .msdDriverExit
   946                              <1> .msdDevClose:        ;Function 14
   947 00001CB6 B005                <1>     mov al, 05h ;Bad request structure length
   948 00001CB8 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   949 00001CBB 0F851AFDFFFF        <1>     jne .msdWriteErrorCode
   950                              <1> 
   951 00001CC1 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   952 00001CC6 488D0DA0000000      <1>     lea rcx, .msdHdlCnt
   953 00001CCD FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   954 00001CD0 E90CFDFFFF          <1>     jmp .msdDriverExit
   955                              <1> .msdRemovableMedia:  ;Function 15
   956 00001CD5 B005                <1>     mov al, 05h ;Bad request structure length
   957 00001CD7 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   958 00001CDA 0F85FBFCFFFF        <1>     jne .msdWriteErrorCode
   959                              <1> 
   960 00001CE0 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   961 00001CE5 488D0D7C000000      <1>     lea rcx, .msdBIOSmap
   962 00001CEC 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   963 00001CEF A880                <1>     test al, 80h
   964 00001CF1 0F84EAFCFFFF        <1>     jz .msdDriverExit   ;If removable, busy bit is clear
   965 00001CF7 66C743030002        <1>     mov word [rbx + remMediaReqPkt.status], 0200h ;Set Busy bit
   966 00001CFD E9DFFCFFFF          <1>     jmp .msdDriverExit
   967                              <1> .msdGenericIOCTL:    ;Function 19
   968 00001D02 B005                <1>     mov al, 05h ;Bad request structure length
   969 00001D04 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   970 00001D07 0F85CEFCFFFF        <1>     jne .msdWriteErrorCode
   971                              <1> 
   972 00001D0D E9CFFCFFFF          <1>     jmp .msdDriverExit
   973                              <1> .msdGetLogicalDev:   ;Function 23
   974 00001D12 B005                <1>     mov al, 05h ;Bad request structure length
   975 00001D14 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   976 00001D17 0F85BEFCFFFF        <1>     jne .msdWriteErrorCode
   977                              <1> 
   978 00001D1D 8A0544000000        <1>     mov al, byte [.msdCurDev]
   979 00001D23 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   980 00001D26 E9B6FCFFFF          <1>     jmp .msdDriverExit
   981                              <1> .msdSetLogicalDev:   ;Function 24
   982 00001D2B B005                <1>     mov al, 05h ;Bad request structure length
   983 00001D2D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   984 00001D30 0F85A5FCFFFF        <1>     jne .msdWriteErrorCode
   985                              <1> 
   986 00001D36 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   987 00001D39 880528000000        <1>     mov byte [.msdCurDev], al
   988 00001D3F E99DFCFFFF          <1>     jmp .msdDriverExit
   989                              <1> 
   990                              <1> .msdBlkIOCommon:  ;Does block IO
   991                              <1> ;Called with rbp containing old rbx value and ah with function number
   992                              <1> ;Error handled by caller
   993                              <1> ;Sector count handled by caller
   994                              <1> ;Called with dh = BIOS function number
   995 00001D44 480FB64501          <1>     movzx rax, byte [rbp + ioReqPkt.unitnm]
   996 00001D49 8A90[681D0000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   997 00001D4F 488B4D1A            <1>     mov rcx, qword [rbp + ioReqPkt.strtsc]  ;Get start sector
   998 00001D53 488B5D0E            <1>     mov rbx, qword [rbp + ioReqPkt.bufptr]  ;Get Memory Buffer
   999 00001D57 88F4                <1>     mov ah, dh
  1000 00001D59 B001                <1>     mov al, 01h ;Do one sector at a time 
  1001 00001D5B CD33                <1>     int 33h
  1002 00001D5D C3                  <1>     ret
  1003                              <1> 
  1004 00001D5E 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
  1005                              <1> ;LASTDRIVE default is 5
  1006 00001D67 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
  1007                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
  1008 00001D68 FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
  1009 00001D6D 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
  1010 00001D72 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
  1010 00001D7B 000000000000000000- <1>
  1010 00001D84 000000000000000000- <1>
  1010 00001D8D 000000000000000000- <1>
  1010 00001D96 00000000            <1>
  1011 00001D9A 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
  1011 00001DA3 000000000000000000- <1>
  1011 00001DAC 000000000000000000- <1>
  1011 00001DB5 000000000000000000- <1>
  1011 00001DBE 000000000000000000- <1>
  1011 00001DC7 000000000000000000- <1>
  1011 00001DD0 000000000000000000- <1>
  1011 00001DD9 000000000000000000- <1>
  1011 00001DE2 000000000000000000- <1>
  1011 00001DEB 000000000000000000- <1>
  1011 00001DF4 000000000000000000- <1>
  1011 00001DFD 000000000000000000- <1>
  1011 00001E06 000000000000000000- <1>
  1011 00001E0F 000000000000000000- <1>
  1011 00001E18 000000000000000000- <1>
  1011 00001E21 000000000000000000- <1>
  1011 00001E2A 000000000000000000- <1>
  1011 00001E33 000000000000000000- <1>
  1011 00001E3C 000000000000000000- <1>
  1011 00001E45 000000000000000000- <1>
  1011 00001E4E 000000000000000000- <1>
  1011 00001E57 000000000000000000- <1>
  1011 00001E60 000000000000000000- <1>
  1011 00001E69 000000000000000000- <1>
  1011 00001E72 000000000000000000- <1>
  1011 00001E7B 000000000000000000- <1>
  1011 00001E84 000000000000000000- <1>
  1011 00001E8D 000000000000000000- <1>
  1011 00001E96 000000000000000000- <1>
  1011 00001E9F 000000000000000000- <1>
  1011 00001EA8 000000000000000000- <1>
  1011 00001EB1 000000000000000000- <1>
  1011 00001EBA 000000000000000000- <1>
  1011 00001EC3 000000000000000000- <1>
  1011 00001ECC 000000000000000000- <1>
  1011 00001ED5 000000000000000000- <1>
  1011 00001EDE 000000000000000000- <1>
  1011 00001EE7 000000000000000000- <1>
  1011 00001EF0 000000000000000000- <1>
  1011 00001EF9 000000000000000000- <1>
  1011 00001F02 000000000000000000- <1>
  1011 00001F0B 000000000000000000- <1>
  1011 00001F14 000000000000000000- <1>
  1011 00001F1D 000000000000000000- <1>
  1011 00001F26 000000000000000000- <1>
  1011 00001F2F 000000000000000000- <1>
  1011 00001F38 000000000000000000- <1>
  1011 00001F41 000000000000000000- <1>
  1011 00001F4A 000000000000000000- <1>
  1011 00001F53 000000000000000000- <1>
  1011 00001F5C 000000000000000000- <1>
  1011 00001F65 000000000000000000- <1>
  1011 00001F6E 000000000000000000- <1>
  1011 00001F77 000000000000000000- <1>
  1011 00001F80 000000000000000000- <1>
  1011 00001F89 000000000000000000- <1>
  1011 00001F92 000000000000000000- <1>
  1011 00001F9B 000000000000000000- <1>
  1011 00001FA4 000000000000000000- <1>
  1011 00001FAD 000000000000000000- <1>
  1011 00001FB6 000000000000000000- <1>
  1011 00001FBF 000000000000000000- <1>
  1011 00001FC8 000000000000000000- <1>
  1011 00001FD1 000000000000000000- <1>
  1011 00001FDA 000000000000000000- <1>
  1011 00001FE3 000000000000000000- <1>
  1011 00001FEC 000000000000        <1>
  1012                              <1> 
  1013                              <1> endptr equ $
    24                                  Segment dynamicDataArea nobits valign=1 vfollows=resSeg
    25                                  %include "dosDynaDataArea.asm"
    26                              <1> ;Create SFT header and corresponding array of five default sft entries
    27 00000000 <res Ah>            <1> firstSftHeader  resb sfth_size
    28 0000000A <res 3Dh>           <1> firstSft        resb sft_size
    29 00000047 <res 3Dh>           <1> secondSft       resb sft_size
    30 00000084 <res 3Dh>           <1> thirdSft        resb sft_size
    31 000000C1 <res 3Dh>           <1> fourthSft       resb sft_size
    32 000000FE <res 3Dh>           <1> fifthSft        resb sft_size
    33                              <1> 
    34                              <1> ;Create DPB chain of first 5 available DPB slots
    35                              <1> ;The bottom three DPB's are jettisonable if the devices dont exist!
    36 0000013B <res 34h>           <1> firstDPB        resb dpb_size
    37 0000016F <res 34h>           <1> secondDPB       resb dpb_size
    38                              <1> DOSENDPTR:   ;Points to the end of the initially reserved DOS area
    39                              <1> ;Always jettison this space
    40 000001A3 <res 34h>           <1> thirdDPB        resb dpb_size
    41 000001D7 <res 34h>           <1> fourthDPB       resb dpb_size
    42 0000020B <res 34h>           <1> fifthDPB        resb dpb_size 
    43                              <1> 
    44                              <1> ;Create a one drive CDS to keep track of drive A's current dir
    45                              <1> ;Replace once CONFGI.SYS has been read
    46 0000023F <res 5Bh>           <1> initCDS         resb cds_size 
    47                              <1> 
    48                              <1> 
    49 0000029A <res 20h>           <1> tmpBufHdr       resb bufferHdr_size
    50 000002BA <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    51                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    52                              <1> dynamicDataAreaLength equ $
