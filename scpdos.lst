     1                                  [map all scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs and strucs
     5                                  %include "driverStruc.inc"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     9                              <1> ; device driver related structures.                     ;
    10                              <1> ;-------------------------------------------------------;
    11                              <1> 
    12                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    13                              <1> 
    14 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    15 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    16 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    17 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    18 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    19                              <1> 
    20                              <1> endstruc
    21                              <1> 
    22                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    23                              <1> 
    24                              <1>     .hdrlen resb 1  ;Length of the request header
    25                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    26                              <1>     .cmdcde resb 1  ;Command code
    27                              <1>     .status resw 1  ;Status word
    28                              <1>     .devptr resq 1  ;Device queue pointer field
    29                              <1> 
    30                              <1> %endmacro
    31                              <1> ;Command Code equates
    32                              <1>     drvINIT        equ 0
    33                              <1>     drvMEDCHK      equ 1
    34                              <1>     drvBUILDBPB    equ 2
    35                              <1>     drvIOCTLREAD   equ 3
    36                              <1>     drvREAD        equ 4
    37                              <1>     drvNONDESTREAD equ 5
    38                              <1>     drvINSTATUS    equ 6
    39                              <1>     drvFLUSHINBUF  equ 7
    40                              <1>     drvWRITE       equ 8
    41                              <1>     drvWRITEVERIFY equ 9
    42                              <1>     drvOUTSTATUS   equ 10
    43                              <1>     drvFLUSHOUTBUF equ 11
    44                              <1>     drvIOCTLWRITE  equ 12
    45                              <1>     drvOPEN        equ 13
    46                              <1>     drvCLOSE       equ 14
    47                              <1>     drvREMMEDCHECK equ 15
    48                              <1>     drvOUTTILBUSY  equ 16  ;Not implemented
    49                              <1>     drvIOCTL       equ 19
    50                              <1>     drvGETDRVMAP   equ 23
    51                              <1>     drvSETDRVMAP   equ 24
    52                              <1> 
    53                              <1> ;Drive structures
    54                              <1> struc drvReqHdr
    55                              <1>     drvReqHdrM
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    56                              <1> endstruc
    57                              <1> 
    58                              <1> struc initReqPkt  ;Init Request Packet
    59                              <1> 
    60                              <1>     drvReqHdrM   ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    61 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
    62 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
    63 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
    64 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
    65                              <1> 
    66                              <1> endstruc
    67                              <1> 
    68                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
    69                              <1> 
    70                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    71 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    72 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
    73 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
    74                              <1> 
    75                              <1> endstruc
    76                              <1> 
    77                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
    78                              <1> 
    79                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    80 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    81 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    82 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
    83                              <1> 
    84                              <1> endstruc
    85                              <1> 
    86                              <1> struc ioReqPkt   ;IO Request Packet
    87                              <1> 
    88                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    89 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    90 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    91 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
    92 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
    93 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
    94                              <1> 
    95                              <1> endstruc
    96                              <1> 
    97                              <1> struc nonDestInNoWaitReqPkt    ;Nondestructive Input No Wait Request Packet
    98                              <1>     
    99                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   100 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   101                              <1> 
   102                              <1> endstruc
   103                              <1> 
   104                              <1> struc statusReqPkt   ;Status Request Packet
   105                              <1> 
   106                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   107                              <1> 
   108                              <1> endstruc
   109                              <1> 
   110                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   111                              <1> 
   112                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   113                              <1>      
   114                              <1> endstruc
   115                              <1> 
   116                              <1> struc openReqPkt ;Open Device Request Packet
   117                              <1> 
   118                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   119                              <1>      
   120                              <1> endstruc
   121                              <1> 
   122                              <1> struc closeReqPkt ;Close Device Request Packet
   123                              <1> 
   124                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   125                              <1>      
   126                              <1> endstruc
   127                              <1> 
   128                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   129                              <1> 
   130                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   131                              <1>      
   132                              <1> endstruc
   133                              <1> 
   134                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   135                              <1> 
   136                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   137 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   138 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   139 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   140 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   141 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   142                              <1> 
   143                              <1> endstruc
   144                              <1> 
   145                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   146                              <1>     
   147                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   148                              <1> 
   149                              <1> endstruc
   150                              <1> 
   151                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   152                              <1>     
   153                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   154                              <1> 
   155                              <1> endstruc
     6                                  %include "fatStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous FAT driver   ;
    10                              <1> ; structures. exFAT will have it's own files at a later ;
    11                              <1> ; stage.                                                ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    15                              <1> 
    16 00000000 ??????              <1>     .jmpBoot    resb 3 
    17 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    18 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    19 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    20 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    21 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    22 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    23 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    24 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    25 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    26 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    27 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    28 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    29 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    30                              <1> 
    31 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    32 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    33 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    34 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    35 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    36 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    37                              <1> 
    38                              <1> endstruc
    39                              <1> 
    40                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    41                              <1> 
    42 00000000 ??????              <1>     .jmpBoot    resb 3
    43 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    44 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    45 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    46 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    47 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    48 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    49 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    50 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    51 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    52 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    53 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    54 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    55 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    56                              <1> 
    57 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    58 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    59 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    60 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    61 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    62 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    63 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    64                              <1> 
    65 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    66 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    67 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    68 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    69 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    70 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    71                              <1> 
    72                              <1> endstruc
    73                              <1> 
    74                              <1> struc mbr
    75 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    76 000001B8 ????????            <1>     .diskID     resb 4
    77 000001BC ????                <1>     .reserved   resb 2
    78 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    79 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    80 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    81 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    82 000001FE ????                <1>     .mbrSig     resb 2
    83                              <1> endstruc
    84                              <1> 
    85                              <1> struc mbrEntry
    86 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    87 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    88 00000004 ??                  <1>     .ptnType    resb 1
    89 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
    90 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
    91 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
    92                              <1> endstruc
    93                              <1> 
    94                              <1> struc fatDirEntry
    95                              <1> 
    96 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
    97 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
    98 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
    99 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   100 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   101 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   102 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   103 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   104 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   105 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   106 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   107 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   108                              <1> 
   109                              <1> endstruc
   110                              <1> ;Directory attribute equates
   111                              <1>     dirReadOnly     equ 01h
   112                              <1>     dirHidden       equ 02h
   113                              <1>     dirSystem       equ 04h
   114                              <1>     dirVolumeID     equ 08h
   115                              <1>     dirDirectory    equ 10h
   116                              <1>     dirArchive      equ 20h
   117                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   118                              <1> 
   119                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   120                              <1> 
   121 00000000 ??????              <1>     .jmpBoot                resb 3 
   122 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   123 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   124 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   125 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   126 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   127 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   128 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   129 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   130 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   131 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   132 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   133 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   134 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   135 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   136 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   137 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   138 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   139 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   140                              <1> 
   141                              <1> endstruc
   142                              <1> 
   143                              <1> struc FSInfo
   144                              <1> 
   145 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   146 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   147 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   148 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   149 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   150 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   151 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   152                              <1> 
   153                              <1> endstruc
     7                                  %include "dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ??                  <1>     .bBytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)x
    27 00000003 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000004 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000005 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000007 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000008 ????                <1>     .wNumberRootDirSectors   resw 1  ;In sectors, this is 0 for FAT32 formats x
    32 0000000A ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000E ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000012 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000016 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001A ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000022 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000023 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000024 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002C ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000030 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Flags: Bit 15 set = Network drive
    69                              <1> ;        Bit 14 set = Physical drive
    70                              <1> ;        Bit 13 set = JOIN'ed drive
    71                              <1> ;        Bit 12 set = SUBST'ed drive
    72                              <1> ;        Bit 7  set = Redirected, not network, drive (This is how MSCDEX worked)
    73                              <1> endstruc
    74                              <1> ;CDS equates
    75                              <1>     cdsNetDrive     equ 8000h
    76                              <1>     cdsPhysDrive    equ 4000h
    77                              <1>     cdsJoinDrive    equ 2000h
    78                              <1>     cdsSubstDrive   equ 1000h
    79                              <1>     cdsRedirDrive   equ 0080h
    80                              <1> ;------------------------------------------------------------------------;
    81                              <1> ; The SFT is a way to allow applications to open file handles to files 
    82                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    83                              <1> ; under the first header, and then a second header will be linked to the 
    84                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    85                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    86                              <1> ; using the FCBS= command. Default FCBS=5.
    87                              <1> ;
    88                              <1> ; A file handle describes the file, and the location within the file that
    89                              <1> ; we are reading. The file handle can be manipulated without the file
    90                              <1> ; being in memory, thus allowing the user to access data without needing 
    91                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    92                              <1> ; accessing devices, by treating them as files with their drivers 
    93                              <1> ; responding and translating the manipulations of the file handle itself.
    94                              <1> ; Neither the driver nor the application should see or use the SFT for
    95                              <1> ; the handle, as it is subject to change (and will change when file 
    96                              <1> ; sharing provisions are included). The DOS will make requests to the 
    97                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    98                              <1> ; track of the information in the SFT entry for that handle. 
    99                              <1> ;
   100                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   101                              <1> ; can point to the same file. It all depends on what the applications 
   102                              <1> ; want to do with the File.
   103                              <1> ;
   104                              <1> ; !!!!IMPORTANT!!!!
   105                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   106                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   107                              <1> ;
   108                              <1> ;Each SFT may look like this:
   109                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   110                              <1> ;            |                |
   111                              <1> ;       wNumFiles*sft    wNumFiles*sft
   112                              <1> ;
   113                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   114                              <1> ; System FCBs.
   115                              <1> ;
   116                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   117                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   118                              <1> ;
   119                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   120                              <1> ; DEFAULT FCBS=5, MINIMUM FCBS=5
   121                              <1> ;------------------------------------------------------------------------;
   122                              <1> struc sfth   ;System file table header
   123                              <1> ; This is the SFT header.
   124                              <1> ; This structure comes before the start of the first file in the array/table.
   125 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   126 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   127                              <1> endstruc
   128                              <1> 
   129                              <1> struc sft
   130                              <1> ;This is the file struc itself
   131 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   132 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   133 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   134 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   135 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   136 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file
   137 00000013 ????                <1>     .wTime       resw 1    ;File Time
   138 00000015 ????                <1>     .wDate       resw 1    ;File Date
   139 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   140 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset in file, in bytes
   141 0000001F ????                <1>     .wRelSect    resw 1    ;Rel sector in file of the last cluster accessed
   142 00000021 ????????            <1>     .dDirSect    resd 1    ;Rel number of sector containing directory entry 
   143 00000025 ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   144 00000026 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   145 00000031 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   146 00000039 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster of last cluster accessed
   147                              <1> endstruc
   148                              <1> ;Open Mode equates
   149                              <1> ;Access modes   Bits[2:0]
   150                              <1>     ReadAccess      equ 0h
   151                              <1>     WriteAccess     equ 1h
   152                              <1>     RWAccess        equ 2h
   153                              <1> ;Bit 3 reserved 0
   154                              <1> ;Sharing modes  Bits[6:4]
   155                              <1>     CompatShare     equ 0h
   156                              <1>     denyRWShare     equ 10h
   157                              <1>     denyWriteShare  equ 20h
   158                              <1>     denyReadShare   equ 30h
   159                              <1>     denyNoneShare   equ 40h
   160                              <1> ;Bit 7 reserved 0
   161                              <1> ;Bits 8-12 reserved 0
   162                              <1> ;Critical Error handling
   163                              <1>     critErrHdl      equ 2000h   ;If set, return error code. If clear, INT 44h
   164                              <1> ;Buffering on writes
   165                              <1>     noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   166                              <1> ;FCB opened file?
   167                              <1>     FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   168                              <1> ;Attribute Byte
   169                              <1>     readOnlyFile    equ 1h
   170                              <1>     hiddenFile      equ 2h
   171                              <1>     systemFile      equ 4h
   172                              <1>     volumeLabel     equ 8h
   173                              <1>     directoryFile   equ 10h ;Directory entry
   174                              <1>     archiveFile     equ 20h
   175                              <1> ;Device Info equates
   176                              <1> ;For a block device, bits [5:0] contain the drive number
   177                              <1>     charDevConIn    equ 1h  ;If set, device is CON input
   178                              <1>     charDevConOut   equ 2h  ;If set, device is CON output
   179                              <1>     charDevNulDev   equ 4h  ;If set, device is NULL device
   180                              <1>     charDevClockDev equ 8h  ;If set, device is CLOCK device
   181                              <1>     charDevFastOut  equ 10h ;If set, device supports INT 49h
   182                              <1>     charDevBinary   equ 20h ;If set, read in Binary mode!!!
   183                              <1>     charDevNoEOF    equ 40h ;If set, no EOF on input!!
   184                              <1>     blokDevNotFlush equ 40h ;If set, file not written to disk yet!!!
   185                              <1>     devCharDev      equ 80h ;If set, it is a char device!
   186                              <1>     charDevNetSpool equ 800h    ;If set, device is a network spooler
   187                              <1>     devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   188                              <1>     charDevNamePipe equ 2000h   ;If set, device is a named pipe
   189                              <1>     blokDevDTSet    equ 4000h   ;If set, date and time updated for all i/o
   190                              <1>     devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   191                              <1> ;------------------------------------------------------------------------;
   192                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   193                              <1> ; to an internal buffer, and then copying it to the specified location
   194                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   195                              <1> ; another request for the same sector from the same device is made, so 
   196                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   197                              <1> ; size, selected according to the largest detected sector size during 
   198                              <1> ; the initial loadup.
   199                              <1> ;
   200                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   201                              <1> ;
   202                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   203                              <1> ;------------------------------------------------------------------------;
   204                              <1> 
   205                              <1> struc bufferHdr
   206 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   207 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   208 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   209 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   210 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   211 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   212 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   213 0000001F ??                  <1>     .reserved    resb  1   ;Alignment byte
   214 00000020 ??                  <1>     .dataarea    resb  1   ;The size here changes wrt sector size!
   215                              <1> endstruc
   216                              <1> ;Buffer Flag equates
   217                              <1>     dosBuffer   equ 1h  ;DOS data sector in buffer
   218                              <1>     fatBuffer   equ 2h  ;FAT sector in buffer
   219                              <1>     dirBuffer   equ 4h  ;Directory sector in buffer
   220                              <1>     dataBuffer  equ 8h  ;File Data sector in buffer
   221                              <1>     refBuffer   equ 20h ;Data in buffer referenced by an application
   222                              <1>     dirtyBuffer equ 40h ;Data in buffer modified by an application
   223                              <1> ;------------------------------------------------------------------------;
   224                              <1> ; Memory control block for each memory arena
   225                              <1> ;------------------------------------------------------------------------;
   226                              <1> struc mcb
   227 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   228 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP or 0 for free space
   229 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   230 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   231                              <1> endstruc
   232                              <1> ;MCB equates
   233                              <1> mcbOwnerHole    equ -1  ;Owner = -1 => Memory hole
   234                              <1> mcbOwnerFree    equ 0   ;Owner =  0 => Free and available space
   235                              <1> mcbOwnerDOS     equ 8   ;Owner =  8 => Owned by DOS
   236                              <1> ;Owner = Para aligned address => Owning application PSP
   237                              <1> ;...To consider...
   238                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   239                              <1> 
   240                              <1> ;------------------------------------------------------------------------;
   241                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   242                              <1> ; following order, thus allowing for return values to be placed in the 
   243                              <1> ; registers by accessing the caller register stack frame.
   244                              <1> ;------------------------------------------------------------------------;
   245                              <1> struc callerFrame
   246 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   247 00000008 ????????????????    <1>     .rbx    resq 1    
   248 00000010 ????????????????    <1>     .rcx    resq 1
   249 00000018 ????????????????    <1>     .rdx    resq 1
   250 00000020 ????????????????    <1>     .rsi    resq 1
   251 00000028 ????????????????    <1>     .rdi    resq 1
   252 00000030 ????????????????    <1>     .rbp    resq 1
   253 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   254 00000040 ????????????????    <1>     .r9     resq 1
   255                              <1> ;Pushed by Processor when invoked via Interrupt
   256 00000048 ????????????????    <1>     .rip    resq 1
   257 00000050 ????????????????    <1>     .cs     resq 1
   258 00000058 ????????????????    <1>     .flags  resq 1
   259                              <1> endstruc
   260                              <1> 
   261                              <1> %macro pushDOS 0
   262                              <1>     push r9
   263                              <1>     push r8
   264                              <1>     push rbp
   265                              <1>     push rdi
   266                              <1>     push rsi
   267                              <1>     push rdx
   268                              <1>     push rcx
   269                              <1>     push rbx
   270                              <1>     push rax
   271                              <1> %endmacro
   272                              <1> 
   273                              <1> %macro popDOS 0
   274                              <1>     pop rax
   275                              <1>     pop rbx
   276                              <1>     pop rcx
   277                              <1>     pop rdx
   278                              <1>     pop rsi
   279                              <1>     pop rdi
   280                              <1>     pop rbp
   281                              <1>     pop r8
   282                              <1>     pop r9
   283                              <1> %endmacro
   284                              <1> 
   285                              <1> struc psp
   286 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h
   287 00000002 ????????????????    <1>     .startSeg   resq 1  ;Pointer to the start of the PSP
   288 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   289 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   290 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   291 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   292 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   293 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   294 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   295 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size
   296 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh
   297 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain
   298 0000005B ????????????????    <1>     .xtraHdlPtr resq 1  ;Pointer to the extra handle array if needed
   299 00000063 ????????????????    <1>     .fcbPtr1    resq 1  ;Pointer to the first OS allocated FCB
   300 0000006B <res 15h>           <1>     .reserved   resb 21
   301 00000080 ??                  <1>     .charCount  resb 1  ;Number of characters in command tail
   302 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   303                              <1> endstruc
   304                              <1> 
   305                              <1> struc mcb
   306 00000000 ??                  <1>     .mzbyte     resb 1  ;M=In use, Z=Free
   307 00000001 ????????????????    <1>     .processPtr resq 1  ;Points to the start of the process PSP
   308 00000009 ????????            <1>     .paragraphs resd 1  ;Gives the number of paras allocated to this process
   309 0000000D ??????              <1>     .reserved   resb 3
   310                              <1>     .program:
   311                              <1> endstruc
   312                              <1> 
   313                              <1> struc clkStruc
   314 00000000 ????                <1>     .dateWord   resw 1
   315 00000002 ??                  <1>     .minutes    resb 1
   316 00000003 ??                  <1>     .hours      resb 1
   317 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   318 00000005 ??                  <1>     .seconds    resb 1
   319                              <1> endstruc
     8                                  Segment .text align=1   ;Init code
     9                                  %include "sysInit.asm"
    10                              <1> ; We arrive here with the following values in the registers.
    11                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    12                              <1> ; dx  = Int 33h boot device number
    13                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    14                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    15 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    16 00000002 909090909090909090- <1>     db (100h-2) dup (90h)   ;Duplicate NOPs for the PSP
    16 0000000B 909090909090909090- <1>
    16 00000014 909090909090909090- <1>
    16 0000001D 909090909090909090- <1>
    16 00000026 909090909090909090- <1>
    16 0000002F 909090909090909090- <1>
    16 00000038 909090909090909090- <1>
    16 00000041 909090909090909090- <1>
    16 0000004A 909090909090909090- <1>
    16 00000053 909090909090909090- <1>
    16 0000005C 909090909090909090- <1>
    16 00000065 909090909090909090- <1>
    16 0000006E 909090909090909090- <1>
    16 00000077 909090909090909090- <1>
    16 00000080 909090909090909090- <1>
    16 00000089 909090909090909090- <1>
    16 00000092 909090909090909090- <1>
    16 0000009B 909090909090909090- <1>
    16 000000A4 909090909090909090- <1>
    16 000000AD 909090909090909090- <1>
    16 000000B6 909090909090909090- <1>
    16 000000BF 909090909090909090- <1>
    16 000000C8 909090909090909090- <1>
    16 000000D1 909090909090909090- <1>
    16 000000DA 909090909090909090- <1>
    16 000000E3 909090909090909090- <1>
    16 000000EC 909090909090909090- <1>
    16 000000F5 909090909090909090- <1>
    16 000000FE 9090                <1>
    17                              <1> ;First make space for the MCB
    18 00000100 52                  <1>     push rdx    ;Save dl on stack briefly
    19 00000101 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    20 00000106 0F32                <1>     rdmsr
    21 00000108 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    22 0000010A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    23 0000010E 89C7                <1>     mov edi, eax        ;Get the low dword in
    24 00000110 4881C710000000      <1>     add rdi, mcb_size   ;Make space for the MCB
    25 00000117 89F8                <1>     mov eax, edi
    26 00000119 4889FA              <1>     mov rdx, rdi
    27 0000011C 48C1EA20            <1>     shr rdx, 20h
    28 00000120 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    29 00000122 5A                  <1>     pop rdx
    30                              <1> ;------------------------------------------------;
    31                              <1> ;              Connect Debugger                  ;
    32                              <1> ;------------------------------------------------;
    33 00000123 B801C50000          <1>     mov eax, 0C501h ;Connect debugger
    34 00000128 CD35                <1>     int 35h
    35                              <1> ;------------------------------------------------;
    36                              <1> ;           Sanitise the data area               ;
    37                              <1> ;------------------------------------------------;
    38 0000012A B9[D4120000]        <1>     mov ecx, dSegLen
    39 0000012F 30C0                <1>     xor al, al
    40 00000131 57                  <1>     push rdi    ;Temp save rdi on the stack
    41 00000132 F3AA                <1>     rep stosb
    42 00000134 5F                  <1>     pop rdi
    43                              <1> 
    44                              <1> ;------------------------------------------------;
    45                              <1> ;          Start saving Basic DOS data           ;
    46                              <1> ;------------------------------------------------;
    47 00000135 64881425[08000000]  <1>     mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    48 0000013D 488D15BCFEFFFF      <1>     lea rdx, tempPSP    ;Get the address of the tempPSP
    49 00000144 6448891425-         <1>     mov qword fs:[currentPSP], rdx
    49 00000149 [D7000000]          <1>
    50                              <1> ;Copy DOS to its final resting place
    51 0000014D 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    51 00000152 [00000000]          <1>
    52 00000156 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rdx 
    53 00000159 4881C7[D4120000]    <1>     add rdi, dSegLen ;Move destination past end of data area
    54 00000160 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    55 00000167 B900100000          <1>     mov ecx, 1000h
    56 0000016C F348A5              <1>     rep movsq
    57                              <1> 
    58 0000016F CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    59 00000171 49C1E818            <1>     shr r8, 3*8   ;Isolate byte 3 of r8
    60 00000175 6444880425-         <1>     mov byte fs:[numRemMSD], r8b    ;Save number of physical int 33h devs
    60 0000017A [09000000]          <1>
    61 0000017E 64C60425[99000000]- <1>     mov byte fs:[lastdrvNum], 5     ;Last drive is by default 5
    61 00000186 05                  <1>
    62 00000187 64C60425[0A000000]- <1>     mov byte fs:[numLRemDrives], 0     ;Number of logical drives
    62 0000018F 00                  <1>
    63                              <1> 
    64                              <1> ;------------------------------------------------;
    65                              <1> ;          Find largest sector size              ;
    66                              <1> ;------------------------------------------------;
    67                              <1> largestSectorSearch:
    68 00000190 30D2                <1>     xor dl, dl
    69 00000192 31FF                <1>     xor edi, edi    ;Use this as the counter for the largest sector size
    70                              <1> .lss:
    71 00000194 B488                <1>     mov ah, 88h
    72 00000196 CD33                <1>     int 33h
    73 00000198 39C7                <1>     cmp edi, eax
    74 0000019A 0F42F8              <1>     cmovb edi, eax  ;Only replace ebp if eax is greater
    75 0000019D FEC2                <1>     inc dl
    76 0000019F 4438C2              <1>     cmp dl, r8b
    77 000001A2 75F0                <1>     jne .lss
    78 000001A4 6466893C25-         <1>     mov word fs:[maxBytesSec], di
    78 000001A9 [87000000]          <1>
    79                              <1> 
    80                              <1> ;------------------------------------------------;
    81                              <1> ;          Driver Adjustments and inits          ;
    82                              <1> ;------------------------------------------------;
    83                              <1> ;Modify the pointers in nData before putting them in the data area
    84 000001AD 48012DE0030000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
    85 000001B4 48012DE3030000      <1>     add qword [nData + drvHdr.strPtr], rbp
    86 000001BB 48012DE4030000      <1>     add qword [nData + drvHdr.intPtr], rbp
    87                              <1> ;Copy the Null driver to its location in Sysvars
    88 000001C2 B922000000          <1>     mov ecx, drvHdr_size
    89 000001C7 488D35C6030000      <1>     lea rsi, qword [nData]
    90 000001CE 488DBD[A5000000]    <1>     lea rdi, qword [rbp + nulDevHdr]
    91 000001D5 F3A4                <1>     rep movsb   
    92                              <1> 
    93                              <1> ;Adjust the addresses in the other driver headers 
    94 000001D7 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
    94 000001D9 [1612000000000000]  <1>
    95 000001E1 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
    96 000001E6 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
    97                              <1> adjDrivers:
    98 000001EA E8DD020000          <1>     call adjustDrvHdr
    99 000001EF E2F9                <1>     loop adjDrivers
   100                              <1> 
   101                              <1> ;Open NUL
   102 000001F1 488D9D[0B000000]    <1>     lea rbx, qword [rbp + charReqHdr]
   103 000001F8 C6030D              <1>     mov byte [rbx + openReqPkt.hdrlen], openReqPkt_size
   104 000001FB C6430300            <1>     mov byte [rbx + openReqPkt.status], 0
   105 000001FF FF95[AF000000]      <1>     call qword [rbp + nulDevHdr + drvHdr.strPtr]
   106 00000205 FF95[B7000000]      <1>     call qword [rbp + nulDevHdr + drvHdr.intPtr]
   107                              <1> ;Open CON
   108                              <1> conInit:    ;Rather than keeping this resident... do it here
   109                              <1> .ci0:
   110 0000020B B401                <1>     mov ah, 01      ;Get buffer status
   111 0000020D CD36                <1>     int 36h
   112 0000020F 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   113 00000211 30E4                <1>     xor ah, ah
   114 00000213 CD36                <1>     int 36h ;Read key to flush from buffer
   115 00000215 EBF4                <1>     jmp short .ci0
   116                              <1> .ci1:
   117 00000217 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   118 0000021C CD30                <1>     int 30h
   119 0000021E B402                <1>     mov ah, 02h
   120 00000220 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   121 00000222 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   122 00000224 CD30                <1>     int 30h
   123 00000226 B707                <1>     mov bh, 07h     ;Grey/Black attribs
   124 00000228 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   125 0000022D CD30                <1>     int 30h
   126                              <1> 
   127                              <1>     ;Save ptr to ConHdr in Sysvars
   128 0000022F 488D85[16120000]    <1>     lea rax, qword [rbp + conHdr]
   129 00000236 6448890425-         <1>     mov qword fs:[conPtr], rax
   129 0000023B [7F000000]          <1>
   130                              <1> 
   131                              <1>     ;Save ptr to ClkHdr in Sysvars
   132 0000023F 488D85[7C120000]    <1>     lea rax, qword [rbp + clkHdr]
   133 00000246 6448890425-         <1>     mov qword fs:[clockPtr], rax
   133 0000024B [77000000]          <1>
   134                              <1> 
   135                              <1> ;------------------------------------------------;
   136                              <1> ;          Kernel inits and adjustments          ;
   137                              <1> ;------------------------------------------------;
   138                              <1> ;Adjust Int 41h address table
   139                              <1> adjInt41h:
   140 0000024F B96A000000          <1>     mov ecx, kernelDispatchTableL/8 ;Number of elements in table
   141 00000254 48BB-               <1>     mov rbx, kernelDispatchTable ;Get EA of table
   141 00000256 [330C000000000000]  <1>
   142 0000025E 488D5C1D00          <1>     lea rbx, qword [rbp+rbx]    ;Point to the start of the relocated table 
   143                              <1> .ai41h:
   144 00000263 48012B              <1>     add qword [rbx], rbp    ;Add base address value to entry in reloc table
   145 00000266 4881C308000000      <1>     add rbx, 8              ;Each entry is size 8
   146 0000026D FFC9                <1>     dec ecx
   147 0000026F 75F2                <1>     jnz .ai41h  ;Keep looping until all entries have been adjusted
   148                              <1> 
   149                              <1> ;Adjust Interrupt Entries Int 40h-49h
   150                              <1> adjInts:
   151 00000271 B340                <1>     mov bl, 40h
   152 00000273 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   153 00000278 CD35                <1>     int 35h
   154 0000027A B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   155 0000027F 488D3DBE020000      <1>     lea rdi, intData
   156 00000286 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   157                              <1> .ai0:
   158 00000288 B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   159 0000028D 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   160 00000290 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   161 00000293 CD35                <1>     int 35h
   162 00000295 4881C708000000      <1>     add rdi, 8
   163 0000029C FFC1                <1>     inc ecx
   164 0000029E 81F94A000000        <1>     cmp ecx, 4Ah
   165 000002A4 75E2                <1>     jne .ai0
   166                              <1> 
   167                              <1> ;------------------------------------------------;
   168                              <1> ;         Init msd driver, create DPB            ;
   169                              <1> ;------------------------------------------------;
   170                              <1> storageInits:
   171                              <1> ;First save dpb and cds pointer in sysvars
   172 000002A6 488D9D[00000000]    <1>     lea rbx, qword [rbp + firstDPB]
   173 000002AD 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   173 000002B2 [67000000]          <1>
   174 000002B6 488D9D[3F020000]    <1>     lea rbx, qword [rbp + initCDS]
   175 000002BD 6448891C25-         <1>     mov qword fs:[cdsHeadPtr], rbx
   175 000002C2 [91000000]          <1>
   176                              <1> 
   177                              <1> ;Open Mass Storage
   178 000002C6 488D9D[35000000]    <1>     lea rbx, qword [rbp + diskReqHdr]
   179 000002CD C6031F              <1>     mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   180 000002D0 C6430200            <1>     mov byte [rbx + initReqPkt.cmdcde], 00h     ;MSD init
   181 000002D4 66C743030000        <1>     mov word [rbx + initReqPkt.status], 0       ;Zero status word
   182 000002DA 648A0425[0A000000]  <1>     mov al, byte fs:[numLRemDrives]
   183 000002E2 88431E              <1>     mov byte [rbx + initReqPkt.drvnum], al      ;First unit is drive A
   184 000002E5 FF95[A8120000]      <1>     call qword [rbp + msdHdr + drvHdr.strPtr]
   185 000002EB FF95[B0120000]      <1>     call qword [rbp + msdHdr + drvHdr.intPtr]
   186                              <1>     ;Check if it returned OK first!
   187 000002F1 66F743030080        <1>     test word [rbx + initReqPkt.status], 8000h  ;Test the error bit
   188 000002F7 0F85E2010000        <1>     jnz errorInit   ;If the bit is set, halt execution
   189 000002FD 8A430D              <1>     mov al, byte [rbx + initReqPkt.numunt]
   190 00000300 64880425[0A000000]  <1>     mov byte fs:[numLRemDrives], al
   191 00000308 8885[B8120000]      <1>     mov byte [rbp + msdHdr + drvHdr.drvNam], al ;Save # of units in name field
   192                              <1> 
   193 0000030E 488B5316            <1>     mov rdx, qword [rbx + initReqPkt.optptr]    ;Get ptr to bpbPtrTbl in rdx
   194 00000312 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   195 00000315 30C9                <1>     xor cl, cl  ;Clear counter
   196 00000317 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   196 0000031C [67000000]          <1>
   197                              <1> .si0:   
   198 00000320 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   199 00000323 B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   200 00000325 CD41                <1>     int 41h
   201                              <1> ;Add other data to DPB
   202 00000327 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   203 0000032A 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   204 0000032D 50                  <1>     push rax
   205 0000032E 488D87[9E120000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   206 00000335 4889451A            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   207 00000339 58                  <1>     pop rax
   208 0000033A FEC1                <1>     inc cl
   209 0000033C 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   210 0000033E 7416                <1>     je .si1
   211 00000340 50                  <1>     push rax
   212 00000341 488D4534            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   213 00000345 48894524            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   214 00000349 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   215 0000034C 58                  <1>     pop rax
   216 0000034D 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   217 00000354 EBCA                <1>     jmp short .si0
   218                              <1> .si1:
   219                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   220 00000356 48C74524FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   221 0000035E 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   222                              <1> 
   223                              <1> ;------------------------------------------------;
   224                              <1> ;                   MCB inits                    ;
   225                              <1> ;------------------------------------------------;
   226                              <1> mcbInit:
   227 00000361 B801E80000          <1>     mov eax, 0E801h ;Get the Extended memory arena sizes
   228 00000366 CD35                <1>     int 35h
   229 00000368 0FB7C9              <1>     movzx ecx, cx   ;cx = # of bytes between USER_BASE and 16Mb
   230 0000036B 0FB7D2              <1>     movzx edx, dx   ;dx = # 64kb pages between 16Mb and 4Gb
   231 0000036E C1E10A              <1>     shl ecx, 0Ah   ;Multiply by 1024 to get number of bytes
   232 00000371 C1E210              <1>     shl edx, 10h  ;Multiply by 65536 to get number of bytes
   233                              <1> ;Build the DOS segment's MCB header
   234 00000374 4889EB              <1>     mov rbx, rbp
   235 00000377 4881EB10000000      <1>     sub rbx, mcb_size   ;Point rbx to the start of the MCB
   236                              <1> 
   237 0000037E 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save rbx in data area
   237 00000383 [5F000000]          <1>
   238                              <1> 
   239 00000387 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   240 0000038F 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx ;Use Max lo mem size for now
   241 00000392 C6035A              <1>     mov byte [rbx + mcb.marker], "Z"
   242 00000395 85D2                <1>     test edx, edx   ;Is edx 0?
   243 00000397 743C                <1>     jz .mcbExit ;If it is, skip the next bit
   244                              <1> ;We have memory above 16Mb, change alloc to M and decrease size
   245 00000399 C6034D              <1>     mov byte [rbx + mcb.marker], "M"
   246 0000039C 816B0910000000      <1>     sub dword [rbx + mcb.blockSize], mcb_size   ;Decrease allocation
   247                              <1> 
   248 000003A3 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]    ;Get the decreased size
   249 000003A6 4801CB              <1>     add rbx, rcx    ;Walk chain
   250                              <1> ;Now at the memory hole
   251                              <1>     ;Holes are only declared if hole has usable ram on both sides of it
   252 000003A9 C6034D              <1>     mov byte [rbx + mcb.marker], "M"
   253 000003AC B800000001          <1>     mov eax, 1000000h   ;16Mb
   254 000003B1 29D8                <1>     sub eax, ebx    ;Sub ptr from 16Mb to get hole size
   255 000003B3 48C74301FFFFFFFF    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole   ;Memory hole
   256 000003BB 894309              <1>     mov dword [rbx + mcb.blockSize], eax
   257                              <1> 
   258 000003BE 4801C3              <1>     add rbx, rax    ;Walk chain
   259 000003C1 C6035A              <1>     mov byte [rbx + mcb.marker], "Z"
   260 000003C4 48C7430100000000    <1>     mov qword [rbx + mcb.owner],mcbOwnerFree
   261 000003CC 81EA10000000        <1>     sub edx, mcb_size   ;Make space for the mcb
   262 000003D2 895309              <1>     mov dword [rbx + mcb.blockSize], edx
   263                              <1> .mcbExit:
   264 000003D5 B452                <1>     mov ah, 52h
   265 000003D7 CD41                <1>     int 41h
   266 000003D9 6687DB              <1>     xchg bx, bx
   267                              <1> ;------------------------------------------------;
   268                              <1> ;          Default File Handle Creation          ;
   269                              <1> ;------------------------------------------------;
   270                              <1> 
   271                              <1> ;Fill in the default file table entries
   272                              <1>     ;lea rbx, qword [rbp + firstSftHeader]
   273                              <1>     ;mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   274                              <1>     ;mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   275                              <1>     ;mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   276                              <1> 
   277                              <1>     ;lea rbx, qword [rbp + firstSft]
   278                              <1>     ;mov word [rbx + sft.wNumHandles], 0 ;Nothing pointing to this file yet
   279                              <1>     ;mov word [rbx + sft.w]
   280                              <1> 
   281                              <1> ;------------------------------------------------;
   282                              <1> ;               Load CONFIG.SYS                  ;
   283                              <1> ;------------------------------------------------;
   284                              <1> ;------------------------------------------------;
   285                              <1> ;              Process CONFIG.SYS                ;
   286                              <1> ;------------------------------------------------;
   287                              <1> ;------------------------------------------------;
   288                              <1> ;                 Create a CDS                   ;
   289                              <1> ;------------------------------------------------;
   290                              <1> ;------------------------------------------------;
   291                              <1> ;           Load Command interpreter             ;
   292                              <1> ;------------------------------------------------;
   293                              <1> 
   294                              <1> ;Test Error Case
   295 000003DC B430                <1>     mov ah, 00110000b
   296 000003DE B000                <1>     mov al, 00h
   297 000003E0 BF0C000000          <1>     mov edi, 0Ch
   298 000003E5 CD44                <1>     int 44h
   299                              <1> 
   300 000003E7 488D15FF000000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   301 000003EE B409                <1>     mov ah, 09h
   302 000003F0 CD41                <1>     int 41h
   303                              <1> l1:
   304 000003F2 B401                <1>     mov ah, 01h  ;Write with echo
   305 000003F4 CD41                <1>     int 41h
   306 000003F6 3C00                <1>     cmp al, 0
   307 000003F8 7402                <1>     je l2
   308 000003FA EBF6                <1>     jmp short l1
   309                              <1> l2:
   310 000003FC B407                <1>     mov ah, 07h
   311 000003FE CD41                <1>     int 41h
   312 00000400 3C42                <1>     cmp al, 42h
   313 00000402 75EE                <1>     jne l1
   314                              <1> l3:
   315 00000404 6466C70425-         <1>     mov word fs:[CLOCKrecrd + clkStruc.dateWord], 0
   315 00000409 [18010000]0000      <1>
   316 0000040F 488D9D[0B000000]    <1>     lea rbx, qword [rbp + charReqHdr] ;Get the address of this request block
   317 00000416 488D85[18010000]    <1>     lea rax, qword [rbp + CLOCKrecrd]
   318 0000041D C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   319 00000420 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read the time
   320 00000424 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   321 0000042A 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   322 0000042E C7431606000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 06
   323 00000435 FF95[86120000]      <1>     call qword [rbp + clkHdr + drvHdr.strPtr]
   324 0000043B FF95[8E120000]      <1>     call qword [rbp + clkHdr + drvHdr.intPtr]
   325                              <1> 
   326 00000441 B403                <1>     mov ah, 03h
   327 00000443 30FF                <1>     xor bh, bh
   328 00000445 CD30                <1>     int 30h
   329 00000447 30D2                <1>     xor dl, dl  ;0 column
   330 00000449 B402                <1>     mov ah, 02h
   331 0000044B CD30                <1>     int 30h
   332                              <1> 
   333 0000044D 488D9D[18010000]    <1>     lea rbx, qword [rbp + CLOCKrecrd]
   334 00000454 0FB64303            <1>     movzx eax, byte [rbx + clkStruc.hours]
   335 00000458 E832000000          <1>     call .clkHexToBCD
   336 0000045D B40E                <1>     mov ah, 0Eh
   337 0000045F B03A                <1>     mov al, ":"
   338 00000461 CD30                <1>     int 30h
   339 00000463 0FB64302            <1>     movzx eax, byte [rbx + clkStruc.minutes]
   340 00000467 E823000000          <1>     call .clkHexToBCD
   341 0000046C B40E                <1>     mov ah, 0Eh
   342 0000046E B03A                <1>     mov al, ":"
   343 00000470 CD30                <1>     int 30h
   344 00000472 0FB64305            <1>     movzx eax, byte [rbx + clkStruc.seconds]
   345 00000476 E814000000          <1>     call .clkHexToBCD
   346 0000047B B40E                <1>     mov ah, 0Eh
   347 0000047D B02E                <1>     mov al, "."
   348 0000047F CD30                <1>     int 30h
   349 00000481 0FB64304            <1>     movzx eax, byte [rbx + clkStruc.hseconds]
   350 00000485 E805000000          <1>     call .clkHexToBCD
   351 0000048A E963FFFFFF          <1>     jmp l1
   352                              <1> .clkHexToBCD:
   353                              <1> ;Converts a Hex byte into two BCD digits
   354                              <1> ;Takes input in each nybble of al
   355 0000048F 53                  <1>     push rbx
   356 00000490 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
   356 00000499 00                  <1>
   357 0000049A 31D2                <1>     xor edx, edx
   358 0000049C 48F7F3              <1>     div rbx
   359 0000049F 80C230              <1>     add dl, '0'
   360 000004A2 80FA39              <1>     cmp dl, '9'
   361 000004A5 7603                <1>     jbe .chtb0
   362 000004A7 80C207              <1>     add dl, 'A'-'0'-10
   363                              <1> .chtb0:
   364 000004AA 88D1                <1>     mov cl, dl    ;Save remainder byte
   365 000004AC 31D2                <1>     xor edx, edx
   366 000004AE 48F7F3              <1>     div rbx
   367 000004B1 80C230              <1>     add dl, '0'
   368 000004B4 80FA39              <1>     cmp dl, '9'
   369 000004B7 7603                <1>     jbe .chtb1
   370 000004B9 80C207              <1>     add dl, 'A'-'0'-10
   371                              <1> .chtb1:
   372 000004BC 88D5                <1>     mov ch, dl    ;Save remainder byte
   373                              <1> 
   374 000004BE 88E8                <1>     mov al, ch    ;Get most sig digit into al
   375 000004C0 B40E                <1>     mov ah, 0Eh
   376 000004C2 CD30                <1>     int 30h
   377 000004C4 88C8                <1>     mov al, cl    ;Get least sig digit into al
   378 000004C6 B40E                <1>     mov ah, 0Eh
   379 000004C8 CD30                <1>     int 30h
   380 000004CA 5B                  <1>     pop rbx
   381 000004CB C3                  <1>     ret
   382                              <1> ;--------------------------------
   383                              <1> ;       PROCS FOR SYSINIT       :
   384                              <1> ;--------------------------------
   385                              <1> adjustDrvHdr:
   386                              <1> ;Input: rsi = Effective address of driver in DOS segment
   387                              <1> ;       rbp = Ptr to the start of the DOS segment
   388                              <1> ;Output: rsi = EA of next header in DOS segment
   389 000004CC 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   390 000004CF 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   391 000004D3 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   392 000004D7 4881C622000000      <1>     add rsi, drvHdr_size
   393 000004DE C3                  <1>     ret
   394                              <1> errorInit:
   395                              <1> ;If a critical error occurs during sysinit, fail through here
   396 000004DF 488D151F000000      <1>     lea rdx, hltmsg
   397 000004E6 B409                <1>     mov ah, 09h
   398 000004E8 CD41                <1>     int 41h
   399                              <1>     ;cli ;Clear interrupts
   400                              <1>     ;mov al, -1
   401                              <1>     ;mov dx, 0A1h    ;PIC2 data
   402                              <1>     ;out dx, al      ;Mask all lines
   403                              <1>     ;mov dx, 21h     ;PIC1 data
   404                              <1>     ;out dx, al      ;Mask all lines
   405                              <1> .ei0:
   406 000004EA F4                  <1>     hlt
   407 000004EB EBFD                <1>     jmp short .ei0
   408                              <1> 
   409                              <1> ;--------------------------------
   410                              <1> ;       DATA FOR SYSINIT        :
   411                              <1> ;--------------------------------
   412 000004ED 0A0D5374617274696E- <1> strtmsg db 0Ah,0Dh,"Starting SCP/DOS...",0Ah,0Dh,"$"
   412 000004F6 67205343502F444F53- <1>
   412 000004FF 2E2E2E0A0D24        <1>
   413 00000505 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0Ah,0Dh,"$"
   413 0000050E 7469616C6973696E67- <1>
   413 00000517 20534350444F532E53- <1>
   413 00000520 59532E205379737465- <1>
   413 00000529 6D2068616C74696E67- <1>
   413 00000532 2E2E2E0A0D24        <1>
   414 00000538 434F4E00            <1> conName db "CON",0
   415 0000053C 41555800            <1> auxName db "AUX",0
   416 00000540 50524E00            <1> prnName db "PRN",0
   417                              <1> intData:
   418 00000544 [1304000000000000]  <1>     dq terminateProcess ;Int 40h
   419 0000054C [CB04000000000000]  <1>     dq functionDispatch ;Int 41h
   420 00000554 [1504000000000000]  <1>     dq terminateHandler ;Int 42h
   421 0000055C [1504000000000000]  <1>     dq ctrlCHandler     ;Int 43h
   422 00000564 [830F000000000000]  <1>     dq critErrorHandler ;Int 44h
   423 0000056C [2504000000000000]  <1>     dq absDiskRead      ;Int 45h
   424 00000574 [1704000000000000]  <1>     dq absDiskWrite     ;Int 46h
   425 0000057C [BD04000000000000]  <1>     dq terminateResident    ;Int 47h
   426 00000584 [BD04000000000000]  <1>     dq inDosHandler     ;Int 48h
   427 0000058C [BF04000000000000]  <1>     dq fastOutput       ;Int 49h
   428                              <1> nData:
   429 00000594 [1612000000000000]  <1>     dq conHdr
   430 0000059C 0480                <1>     dw 08004h
   431 0000059E [BE13000000000000]  <1>     dq nulStrat
   432 000005A6 [C413000000000000]  <1>     dq nulIntr
   433 000005AE 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
    10                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    11                                  %include "dosSeg.asm"
    12                              <1> ;This file contains the main DOS data segment
    13                              <1> 
    14 00000000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    15 00000008 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    16 00000009 ??                  <1>     numRemMSD   resb 1    ;Number of physical removable MSDs in system x
    17 0000000A ??                  <1>     numLRemDrives  resb 1 ;Number of logical removable drives in system x
    18                              <1>     ;if numRemMSD = 1 then numLRemDrives = 2 and we have a single drive system
    19 0000000B <res 2Ah>           <1>     charReqHdr  resb ioReqPkt_size  ;Character IO Request header x
    20 00000035 <res 2Ah>           <1>     diskReqHdr  resb ioReqPkt_size  ;Disk Action Request header x
    21                              <1>     ;The device driver header with space for the largest possible packet
    22 0000005F ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    23                              <1> sysVarsPtr:
    24 00000067 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    25 0000006F ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    26 00000077 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    27                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    28 0000007F ????????????????    <1>     conPtr      resq 1    ;Pointer to the current active CON device header  x
    29                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    30 00000087 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    31 00000089 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain
    32 00000091 ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    33 00000099 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    34 0000009A ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    35 000000A2 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    36 000000A4 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    37 000000A5 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    38                              <1> 
    39                              <1> ;Start of Swappable Data Area, this bit can remain static
    40 000000C7 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h
    41 000000C8 ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving
    42 000000C9 ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh
    43 000000CA ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    44 000000CB ????                <1>     errorExt    resw 1  ;Extended Error Code
    45 000000CD ??                  <1>     errorAction resb 1  ;Suggested action for error  
    46 000000CE ??                  <1>     errorClass  resb 1  ;Error Class
    47                              <1> 
    48 000000CF ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA
    49 000000D7 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP
    50 000000DF ????????????????    <1>     rdiErrorPtr resq 1  ;Saves RDI value of last error (could make this di)
    51 000000E7 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
    52 000000EF ????                <1>     lastRetCode resw 1  ;Last return code returned by Int 41h/4Ch
    53 000000F1 ??                  <1>     currentDrv  resb 1  ;Default drive
    54 000000F2 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls
    55 000000F3 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify
    56                              <1> ;SDA, needs to be replaced between processes
    57 000000F4 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
    58                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    59 000000FC ??                  <1>     singleDrv   resb 1  
    60                              <1> ;This is done to allow for DOS to give the user a change to swap devices
    61                              <1> 
    62 000000FD ??                  <1>     Int44RetVal resb 1  ;Saves a copy of the Int 44 return value
    63 000000FE ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
    64 000000FF ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
    65 00000100 ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
    66 00000108 ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
    67 00000110 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
    68                              <1> ;Time stuff
    69 00000118 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
    70 0000011E ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
    71 0000011F ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
    72 00000120 ??                  <1>     years       resb 1  ;00h - FFh (00 = 1980 - 128 = 2107)
    73 00000121 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
    74 00000123 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
    75                              <1> 
    76                              <1> ;Stacks
    77 00000124 <res 528h>          <1>     critStack   resq 165
    78 0000064C ????????????????    <1>     critStakTop resq 1
    79 00000654 <res 638h>          <1>     IOStack     resq 199
    80 00000C8C ????????????????    <1>     IOStakTop   resq 1
    81 00000C94 <res 638h>          <1>     DiskStack   resq 199
    82 000012CC ????????????????    <1>     DiskStakTop resq 1
    83                              <1>     dSegLen     equ     $
    12                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    13                                  %include "staticData.asm"
    14                              <1> 
    15                              <1> ;-----------------------------------:
    16                              <1> ;           Static Data             :
    17                              <1> ;-----------------------------------:
    18 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    19 00000001 01                  <1> dosMinor    db 01h      ;.01
    14                                  %include "fat.asm"
    15                              <1> ;-----------------------------------:
    16                              <1> ;       File System routines        :
    17                              <1> ;-----------------------------------:
    18                              <1> name2Clust:
    19                              <1> ;Converts a file name to a first cluster number
    20                              <1> ;Converts the whole path subdirectory by subdirectory
    21                              <1> ;On entry: rbx = ptr to ASCIIZ string of file path, maxlen = 67 + 1 (for the 0)
    22                              <1> ;On return: ebx = First cluster number for the file
    23                              <1> ;   On error: CF=CY, ax = Error code
    24                              <1> 
    25                              <1> ;First ascertain path is valid path and get drive letter
    26 00000002 56                  <1>     push rsi
    27 00000003 57                  <1>     push rdi
    28 00000004 51                  <1>     push rcx
    29 00000005 4889DF              <1>     mov rdi, rbx
    30 00000008 4889DE              <1>     mov rsi, rbx
    31 0000000B 807F013A            <1>     cmp byte [rdi + 1], ":" ;Check it is a colon for full path
    32 0000000F 750B                <1>     jne .cdsPath    ;Use CDS for current dir
    33                              <1> .getSubDir:
    34 00000011 B05C                <1>     mov al, "\"
    35 00000013 AE                  <1>     scasb   ;inc 
    36 00000014 7400                <1>     je .psfnd   ;Path separator found
    37                              <1> 
    38                              <1> .psfnd:
    39 00000016 48FFCF              <1>     dec rdi
    40 00000019 4889FE              <1>     mov rsi, rdi
    41                              <1> 
    42                              <1> .cdsPath:
    43 0000001C 59                  <1>     pop rcx
    44 0000001D 5F                  <1>     pop rdi
    45 0000001E 5E                  <1>     pop rsi
    46 0000001F C3                  <1>     ret
    47                              <1> 
    48                              <1> clust2FATEntry:
    49                              <1> ;Converts a cluster number to a FAT entry
    50                              <1> ;Entry:  rsi points to the DPB for the transacting device
    51                              <1> ;        eax = Cluster number to look for
    52                              <1> ;Exit: eax = Sector on disk of FAT, edx = 1.5Word/Word/DWord in sector of entry
    53 00000020 53                  <1>     push rbx
    54 00000021 51                  <1>     push rcx
    55 00000022 8B5E0E              <1>     mov ebx, dword [rsi + dpb.dClusterCount]
    56 00000025 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    57 0000002B 7314                <1>     jae .fat32
    58 0000002D 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    59 00000033 7204                <1>     jb .fat12
    60                              <1> ;FAT16
    61 00000035 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    62 00000037 EB0B                <1>     jmp short .common
    63                              <1> .fat12:
    64 00000039 89C1                <1>     mov ecx, eax    ;ecx = eax
    65 0000003B D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    66 0000003D 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    67 0000003F EB03                <1>     jmp short .common
    68                              <1> .fat32:
    69 00000041 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    70                              <1> .common:
    71                              <1> ;eax has the FAToffset
    72 00000044 8A4E02              <1>     mov cl, byte [rsi + dpb.bBytesPerSectorShift]
    73 00000047 BA01000000          <1>     mov edx, 1
    74 0000004C D3E2                <1>     shl edx, cl    ;Turn edx to number of bytes per sector
    75 0000004E 89D1                <1>     mov ecx, edx
    76 00000050 31D2                <1>     xor edx, edx    ;edx = 0
    77 00000052 F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    78 00000054 0FB75E05            <1>     movzx ebx, word [rsi + dpb.wFAToffset]   ;Add the offset to the first FAT
    79 00000058 01D8                <1>     add eax, ebx
    80 0000005A 59                  <1>     pop rcx
    81 0000005B 5B                  <1>     pop rbx
    82 0000005C C3                  <1>     ret
    83                              <1> 
    84                              <1> readBuffer:
    85                              <1> ;
    86                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
    87                              <1> ;TO CALL!
    88                              <1> ;
    89                              <1> ;This function will return a pointer to the desired data sector OR 
    90                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
    91                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
    92                              <1> ;Entry: rax = Sector to read
    93                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data) 
    94                              <1> ;       rsi = DPB of transacting drive
    95                              <1> ;Exit:  CF = NC : All ok!
    96                              <1> ;       rbx = Pointer to buffer header with valid data in buffer.
    97                              <1> ;       All other registers as before
    98                              <1> ;       CF = CY: Something went wrong, return error code or INT 44h
    99                              <1> ;       ch = 0 -> Data Not Flushed To Disk
   100                              <1> ;       ch = 1 -> Data Not Read From Disk
   101                              <1> ;       rbx = Pointer to buffer containing sector without valid data in buffer ;            (either unflushed or unread)
   102 0000005D 52                  <1>     push rdx
   103 0000005E 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   104 00000060 E86F030000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   105 00000065 4881FBFFFFFFFF      <1>     cmp rbx, -1
   106 0000006C 7403                <1>     je .rbReadNewSector
   107                              <1> .rbExit:
   108 0000006E F8                  <1>     clc
   109                              <1> .rbExitNoFlag:
   110 0000006F 5A                  <1>     pop rdx
   111 00000070 C3                  <1>     ret
   112                              <1> .rbReadNewSector:
   113 00000071 E8ED020000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rbx
   114 00000076 4889DD              <1>     mov rbp, rbx
   115 00000079 30ED                <1>     xor ch, ch
   116 0000007B E869000000          <1>     call flushBuffer
   117 00000080 72ED                <1>     jc .rbExitNoFlag    ;Exit in error
   118                              <1> ;rbp points to bufferHdr that has been appropriately linked to the head of chain
   119 00000082 51                  <1>     push rcx
   120 00000083 885508              <1>     mov byte [rbp + bufferHdr.driveNumber], dl
   121 00000086 884D09              <1>     mov byte [rbp + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA
   122 00000089 4889450A            <1>     mov qword [rbp + bufferHdr.bufferLBA], rax
   123 0000008D 80F902              <1>     cmp cl, fatBuffer
   124 00000090 B201                <1>     mov dl, 1   ;Default values if not fat buffer
   125 00000092 B900000000          <1>     mov ecx, 0  ;Ditto!
   126 00000097 7506                <1>     jne .rbNonFATbuffer
   127 00000099 8A5607              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   128 0000009C 8B4E12              <1>     mov ecx, dword [rsi + dpb.dFATlength]
   129                              <1> .rbNonFATbuffer:
   130 0000009F 885512              <1>     mov byte [rbp + bufferHdr.bufFATcopy], dl
   131 000000A2 894D13              <1>     mov dword [rbp + bufferHdr.bufFATsize], ecx
   132 000000A5 48897517            <1>     mov qword [rbp + bufferHdr.driveDPBPtr], rsi
   133 000000A9 C6451F00            <1>     mov byte [rbp + bufferHdr.reserved], 0
   134 000000AD 59                  <1>     pop rcx
   135 000000AE FEC5                <1>     inc ch  ;If an error occurs, have the signature in ch
   136 000000B0 E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
   137 000000B5 EBB8                <1>     jmp short .rbExitNoFlag
   138                              <1> 
   139                              <1> readSectorBuffer:
   140                              <1> ;Reads a sector into a built sector buffer
   141                              <1> ;Entry: rbp = Pointer to buffer header
   142                              <1> ;Exit:  CF=NC : Success
   143                              <1> ;       CF=CY : Fail, terminate the request
   144                              <1> ;       rbx pointing to buffer header
   145                              <1> ;First make request to device driver
   146 000000B7 50                  <1>     push rax
   147 000000B8 53                  <1>     push rbx
   148 000000B9 51                  <1>     push rcx
   149 000000BA 52                  <1>     push rdx
   150 000000BB 56                  <1>     push rsi
   151                              <1> .rsRequest0:
   152 000000BC BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   153                              <1> .rsRequest1:
   154 000000C1 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
   155 000000C4 B901000000          <1>     mov ecx, 1  ;One sector to copy
   156 000000C9 488B550A            <1>     mov rdx, qword [rbp + bufferHdr.bufferLBA]
   157 000000CD 488B5D20            <1>     mov rbx, qword [rbp + bufferHdr.dataarea]
   158 000000D1 E84F030000          <1>     call absDiskRead    ;Call INT 45h
   159 000000D6 7207                <1>     jc .rsFail
   160                              <1> .rsExit:
   161 000000D8 F8                  <1>     clc
   162                              <1> .rsExitBad:
   163 000000D9 5E                  <1>     pop rsi
   164 000000DA 5A                  <1>     pop rdx
   165 000000DB 59                  <1>     pop rcx
   166 000000DC 5B                  <1>     pop rbx
   167 000000DD 58                  <1>     pop rax
   168 000000DE C3                  <1>     ret
   169                              <1> .rsFail:
   170                              <1> ;Enter here only if the request failed
   171 000000DF FFCE                <1>     dec esi
   172 000000E1 75DE                <1>     jnz .rsRequest1 ;Try the request again!
   173                              <1> ;Request failed thrice, critical error call
   174 000000E3 F9                  <1>     stc
   175 000000E4 E9F0FFFFFF          <1>     jmp .rsExitBad  ;Abort
   176                              <1> 
   177                              <1> flushBuffer:
   178                              <1> ;Flushes the data in a sector buffer to disk!
   179                              <1> ;Entry: rbp = Pointer to buffer header for this buffer
   180                              <1> ;Exit:  CF=NC : Success
   181                              <1> ;       CF=CY : Fail, terminate the request
   182                              <1> ;First make request to device driver
   183 000000E9 50                  <1>     push rax
   184 000000EA 53                  <1>     push rbx
   185 000000EB 51                  <1>     push rcx
   186 000000EC 52                  <1>     push rdx
   187 000000ED 56                  <1>     push rsi
   188 000000EE F6450940            <1>     test byte [rbp + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   189 000000F2 7433                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   190                              <1> .fbRequest0:
   191 000000F4 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   192                              <1> .fbRequest1:
   193 000000F9 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
   194 000000FC B901000000          <1>     mov ecx, 1  ;One sector to copy
   195 00000101 488B550A            <1>     mov rdx, qword [rbp + bufferHdr.bufferLBA]
   196 00000105 488B5D20            <1>     mov rbx, qword [rbp + bufferHdr.dataarea]
   197 00000109 E809030000          <1>     call absDiskWrite    ;Call INT 46h
   198 0000010E 7222                <1>     jc .fbFail
   199                              <1> ;Now check if the buffer was a FAT, to write additional copies
   200 00000110 F6450902            <1>     test byte [rbp + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   201 00000114 7411                <1>     jz .fbFreeExit  ;If not, exit
   202 00000116 FE4D12              <1>     dec byte [rbp + bufferHdr.bufFATcopy]
   203 00000119 740C                <1>     jz .fbFreeExit  ;Once this goes to 0, stop writing FAT copies
   204 0000011B 8B4513              <1>     mov eax, dword [rbp + bufferHdr.bufFATsize]
   205 0000011E 4801450A            <1>     add qword [rbp + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   206 00000122 E9CDFFFFFF          <1>     jmp .fbRequest0 ;Make another request
   207                              <1> .fbFreeExit:
   208                              <1> ;Free the buffer if it was flushed successfully
   209 00000127 C64508FF            <1>     mov byte [rbp + bufferHdr.driveNumber], -1
   210 0000012B F8                  <1>     clc
   211                              <1> .fbExitBad:
   212 0000012C 5E                  <1>     pop rsi
   213 0000012D 5A                  <1>     pop rdx
   214 0000012E 59                  <1>     pop rcx
   215 0000012F 5B                  <1>     pop rbx
   216 00000130 58                  <1>     pop rax
   217 00000131 C3                  <1>     ret
   218                              <1> .fbFail:
   219                              <1> ;Enter here only if the request failed
   220 00000132 FFCE                <1>     dec esi
   221 00000134 75C3                <1>     jnz .fbRequest1 ;Try the request again!
   222                              <1> ;Request failed thrice, critical error call
   223 00000136 F9                  <1>     stc
   224 00000137 E9F0FFFFFF          <1>     jmp .fbExitBad  ;Abort
   225                              <1> ;---------------------------------------------------:
   226                              <1> ;                   KERNEL FUNCTIONS                :
   227                              <1> ;---------------------------------------------------:
   228                              <1> makeDIR:           ;ah = 39h
   229                              <1> removeDIR:         ;ah = 3Ah
   230                              <1> changeCurrentDIR:  ;ah = 3Bh, changes directory for current drive
   231                              <1> getCurrentDIR:     ;ah = 47h
   232                              <1> getSetFileDateTime:;ah = 57h
   233                              <1> trueName:          ;ah = 60h, get fully qualified name
   234 0000013C C3                  <1>     ret
    15                                  %include "charFunctions.asm"
    16                              <1> ;Dos default char functions live here
    17                              <1> 
    18                              <1> stdinReadEcho:     ;ah = 01h
    19                              <1> ;Return char that has been read and echoed in al
    20 0000013D 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    21 00000144 488D0566000000      <1>     lea rax, .stdinReadEchoBuffer
    22 0000014B C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    23 0000014E C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
    24 00000152 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    25 00000158 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    26 0000015C C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    27 00000163 FF15B7100000        <1>     call qword [conHdr + drvHdr.strPtr]
    28 00000169 FF15B9100000        <1>     call qword [conHdr + drvHdr.intPtr]
    29 0000016F 803D3B00000000      <1>     cmp byte [.stdinReadEchoBuffer], 00h
    30 00000176 7432                <1>     jz .stdireexit
    31 00000178 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    32 0000017F 488D052B000000      <1>     lea rax, .stdinReadEchoBuffer
    33 00000186 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    34 00000189 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    35 0000018D 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    36 00000193 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    37 00000197 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    38 0000019E FF157C100000        <1>     call qword [conHdr + drvHdr.strPtr]
    39 000001A4 FF157E100000        <1>     call qword [conHdr + drvHdr.intPtr]
    40                              <1> .stdireexit:
    41 000001AA 8A0501000000        <1>     mov al, byte [.stdinReadEchoBuffer]
    42 000001B0 C3                  <1>     ret
    43 000001B1 00                  <1> .stdinReadEchoBuffer    db 0
    44                              <1> stdoutWrite:       ;ah = 02h
    45                              <1> ;Bspace is regular cursor left, does not insert a blank
    46 000001B2 881533000000        <1>     mov byte [.stdoutWriteBuffer], dl
    47 000001B8 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    48 000001BF 488D1525000000      <1>     lea rdx, .stdoutWriteBuffer
    49 000001C6 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    50 000001C9 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    51 000001CD 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    52 000001D3 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
    53 000001D7 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    54 000001DE FF153C100000        <1>     call qword [conHdr + drvHdr.strPtr]
    55 000001E4 FF153E100000        <1>     call qword [conHdr + drvHdr.intPtr]
    56 000001EA C3                  <1>     ret
    57 000001EB 00                  <1> .stdoutWriteBuffer db 0
    58                              <1> stdauxRead:        ;ah = 03h
    59                              <1> stdauxWrite:       ;ah = 04h
    60                              <1> stdprnWrite:       ;ah = 05h
    61                              <1> directCONIO:       ;ah = 06h
    62                              <1> waitDirectInNoEcho:;ah = 07h
    63                              <1> ;Return char in al
    64 000001EC 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    65 000001F3 488D052B000000      <1>     lea rax, .function7buffer
    66 000001FA C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    67 000001FD C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
    68 00000201 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    69 00000207 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    70 0000020B C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    71 00000212 FF1508100000        <1>     call qword [conHdr + drvHdr.strPtr]
    72 00000218 FF150A100000        <1>     call qword [conHdr + drvHdr.intPtr]
    73 0000021E 8A0501000000        <1>     mov al, byte [.function7buffer]
    74 00000224 C3                  <1>     ret
    75 00000225 00                  <1> .function7buffer    db 0
    76                              <1> waitStdinNoEcho:   ;ah = 08h
    77 00000226 C3                  <1>     ret
    78                              <1> printString:       ;ah = 09h
    79 00000227 31C9                <1>     xor ecx, ecx    ;Clear char counter
    80 00000229 B824000000          <1>     mov eax, "$"    ;Terminating char
    81 0000022E 4889D7              <1>     mov rdi, rdx    ;Set up for scasb
    82                              <1> .ps0:   ;Search for $ to get count of chars
    83 00000231 AE                  <1>     scasb
    84 00000232 7404                <1>     je .ps1
    85 00000234 FFC1                <1>     inc ecx
    86 00000236 EBF9                <1>     jmp short .ps0
    87                              <1> .ps1:   ;Use handle 
    88 00000238 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    89 0000023F C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    90 00000242 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    91 00000246 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    92 0000024C 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
    93 00000250 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
    94 00000253 FF15C70F0000        <1>     call qword [conHdr + drvHdr.strPtr]
    95 00000259 FF15C90F0000        <1>     call qword [conHdr + drvHdr.intPtr]
    96                              <1> 
    97 0000025F 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
    98 00000266 8A03                <1>     mov al, byte [rbx+callerFrame.rax]      ;Gets al to preserve it
    99 00000268 C3                  <1>     ret
   100                              <1> buffStdinInput:    ;ah = 0Ah
   101                              <1> checkStdinStatus:  ;ah = 0Bh
   102                              <1> clearbuffDoFunc:   ;ah = 0Ch
    16                                  %include "fcbFunctions.asm"
    17                              <1> openFileFCB:       ;ah = 0Fh
    18                              <1> closeFileFCB:      ;ah = 10h
    19                              <1> findFirstFileFCB:  ;ah = 11h
    20                              <1> findNextFileFCB:   ;ah = 12h
    21                              <1> deleteFileFCB:     ;ah = 13h
    22                              <1> sequentialReadFCB: ;ah = 14h
    23                              <1> sequentialWriteFCB:;ah = 15h
    24                              <1> createFileFCB:     ;ah = 16h
    25                              <1> renameFileFCB:     ;ah = 17h
    26 00000269 C3                  <1>     ret
    27                              <1> setDTA:            ;ah = 1Ah
    28                              <1> ;Called with:
    29                              <1> ;   rdx = Pointer to the new default DTA
    30 0000026A 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
    31 00000271 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
    32 00000275 488915(CF000000)    <1>     mov qword [currentDTA], rdx
    33 0000027C C3                  <1>     ret
    34                              <1> randomReadFCB:     ;ah = 21h
    35                              <1> randomWriteFCB:    ;ah = 22h
    36                              <1> getFileSizeFCB:    ;ah = 23h
    37                              <1> setRelRecordFCB:   ;ah = 24h
    38                              <1> randBlockReadFCB:  ;ah = 27h
    39                              <1> randBlockWriteFCB: ;ah = 28h
    40                              <1> parseFilenameFCB:  ;ah = 29h
    41 0000027D C3                  <1>     ret
    42                              <1> getDTA:            ;ah = 2Fh
    43 0000027E 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
    44 00000285 488B1D(CF000000)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
    45 0000028C 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
    46 00000290 C3                  <1>     ret
    17                                  %include "handleFunctions.asm"
    18                              <1> ;-----------------------------------:
    19                              <1> ;    File Handle Kernel routines    :
    20                              <1> ;-----------------------------------:
    21                              <1> 
    22                              <1> createFileHdl:     ;ah = 3Ch, handle function
    23                              <1> openFileHdl:       ;ah = 3Dh, handle function
    24                              <1> closeFileHdl:      ;ah = 3Eh, handle function
    25                              <1> readFileHdl:       ;ah = 3Fh, handle function
    26                              <1> writeFileHdl:      ;ah = 40h, handle function
    27                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
    28                              <1> movFileReadPtr:    ;ah = 42h, handle function, LSEEK
    29                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
    30                              <1> ioctrl:            ;ah = 44h, handle function
    31                              <1> duplicateHandle:   ;ah = 45h, handle function
    32                              <1> forceDuplicateHdl: ;ah = 46h, handle function
    33                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
    34                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
    35                              <1> renameFile:        ;ah = 56h
    36                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
    37                              <1> createNewFile:     ;ah = 5Bh
    38                              <1> lockUnlockFile:    ;ah = 5Ch
    39                              <1> setHandleCount:    ;ah = 67h
    40                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
    41 00000291 C3                  <1>     ret
    42                              <1> ;-----------------------------------:
    43                              <1> ;        File Handle routines       :
    44                              <1> ;-----------------------------------:
    45                              <1> readBinaryByteFromFile:
    46                              <1> ;Reads a byte from a SFT entry, does not translate it. 
    47                              <1> ;Read or RW permissions are checked at the INT 41h level
    48                              <1> ;Entry: rbx = SFT entry pointer
    49                              <1> ;       rdx = Address of the data buffer to read to
    50                              <1> ;       ecx = Number of bytes to read
    51                              <1> ;Exit: If CF = NC : All ok!
    52                              <1> ;       rbx = SFT entry pointer
    53                              <1> ;       al = 8 bit binary value read from device/file
    54                              <1> ;      If CF = CY : Error!
    55                              <1> ;       rbx = SFT entry pointer
    56                              <1> ;       al = Error code to ret if user returns fail from int 44h or no int 44h
    57                              <1> ;
    58                              <1> ; !!! Use the disk request header for all file handle IO !!!
    59                              <1> ;
    60 00000292 66F743058000        <1>     test word [rbx + sft.wDeviceInfo], devCharDev
    61 00000298 7500                <1>     jnz .readBinaryByteFromCharDevice
    62                              <1> .readBinaryByteFromHardFile:
    63                              <1> ;Disk files are accessed from here
    64                              <1> ;Use the sector buffers if the data is already buffered,
    65                              <1> ; else use the dpb to fill a sector buffer
    66                              <1> 
    67                              <1> 
    68                              <1> .readBinaryByteFromCharDevice:
    69                              <1> ;Devices are accessed from here
    70 0000029A 488B6B07            <1>     mov rbp, qword [rbx + sft.qPtr] ;Get device driver header pointer
    71 0000029E 53                  <1>     push rbx
    72 0000029F 488D1D(0B000000)    <1>     lea rbx, charReqHdr
    73 000002A6 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    74 000002A9 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], drvREAD
    75 000002AD 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
    76 000002B3 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
    77 000002B7 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
    78                              <1> 
    79 000002BA FF550A              <1>     call qword [rbp + drvHdr.strPtr]
    80 000002BD FF5512              <1>     call qword [rbp + drvHdr.intPtr]
    81 000002C0 8B4316              <1>     mov eax, dword [rbx + ioReqPkt.tfrlen] ;Get number of bytes read
    82 000002C3 66F743030080        <1>     test word [rbx + ioReqPkt.status], 8000h    ;Test the error bit is set
    83 000002C9 5B                  <1>     pop rbx
    84 000002CA 7400                <1>     jz .readBinaryByteExitGood  ;Error bit not set, all good!
    85                              <1> .readBinaryByteExitGood:
    86 000002CC C3                  <1>     ret
    18                                  %include "memoryFunctions.asm"
    19                              <1> ;Memory related functions
    20                              <1> 
    21                              <1> ;-----------------------------------:
    22                              <1> ;  Memory related Kernel routines   :
    23                              <1> ;-----------------------------------:
    24                              <1> allocateMemory:    ;ah = 48h
    25                              <1> freeMemory:        ;ah = 49h
    26                              <1> reallocMemory:     ;ah = 4Ah
    27                              <1> getsetMallocStrat: ;ah = 58h
    28 000002CD C3                  <1>     ret
    29                              <1> ;-----------------------------------:
    30                              <1> ;      Memory related routines      :
    31                              <1> ;-----------------------------------:
    32                              <1> verifyIntegrityOfMCBChain:
    33 000002CE 488B1D(5F000000)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
    34                              <1> .ok:
    35 000002D5 803B4D              <1>     cmp byte [rbx + mcb.marker], 'M'
    36 000002D8 7406                <1>     je .ok1
    37 000002DA 803B5A              <1>     cmp byte [rbx + mcb.marker], "Z"    ;End of the chain?
    38 000002DD 7509                <1>     jne .sysHalt    ;It was not M or Z, fail violently
    39                              <1> .exit:
    40 000002DF C3                  <1>     ret ;We have reached the end of the chain, return all good!
    41                              <1> .ok1:
    42 000002E0 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
    43 000002E3 4801C3              <1>     add rbx, rax
    44 000002E6 EBED                <1>     jmp short .ok
    45                              <1> .sysHalt:
    46                              <1> ;Only arrive here if the integrity of the system is not verified
    47                              <1> ;Lock the system
    48 000002E8 488D1D0E000000      <1>     lea rbx, .sysHltString
    49 000002EF B409                <1>     mov ah, 09h
    50 000002F1 CD41                <1>     int 41h
    51 000002F3 FA                  <1>     cli ;Halt interrupts
    52 000002F4 B0FF                <1>     mov al, 0FFh    ;Mask IRQ lines 
    53 000002F6 E6A1                <1>     out 0A1h, al
    54 000002F8 E621                <1>     out 021h, al
    55 000002FA F4                  <1>     hlt             ;Halt the system
    56 000002FB EBFB                <1>     jmp short $ - 3 ;Go back far enough to capture the hlt
    57 000002FD 4D656D6F727920616C- <1> .sysHltString db "Memory allocation error",0Dh,0Ah,
    57 00000306 6C6F636174696F6E20- <1>
    57 0000030F 6572726F720D0A      <1>
    58 00000316 43616E6E6F74206C6F- <1>               db "Cannot load COMMAND, system halted$"
    58 0000031F 616420434F4D4D414E- <1>
    58 00000328 442C2073797374656D- <1>
    58 00000331 2068616C74656424    <1>
    19                                  %include "dateTimeFunctions.asm"
    20                              <1> ;Major kernel date time functions and subroutines
    21                              <1> 
    22                              <1> getDate:           ;ah = 2Ah
    23                              <1> setDate:           ;ah = 2Bh
    24                              <1> getTime:           ;ah = 2Ch
    25                              <1> setTime:           ;ah = 2Dh
    26 00000339 C3                  <1>     ret
    20                                  %include "localisation.asm"
    21                              <1> ;Localisation based functions live here
    22                              <1> 
    23                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    24                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    25                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    26                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    27 0000033A C3                  <1>     ret
    21                                  %include "dosKernel.asm"
    22                              <1> ;-----------------------------------:
    23                              <1> ;       Misc System routines        :
    24                              <1> ;-----------------------------------:
    25                              <1> criticalDOSError:
    26                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    27                              <1> ; to the critical error handler.
    28                              <1> ; Called with ax, di and rsi set as required by Int 44h (caller decides)
    29                              <1> ;               AH = Critical Error Bitfield
    30                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    31                              <1> ;               Bit 6 - Reserved
    32                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    33                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    34                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    35                              <1> ;               Bits [2-1] = Affected Disk Error
    36                              <1> ;                     0 0   DOS area
    37                              <1> ;                     0 1   FAT area
    38                              <1> ;                     1 0   Directory area
    39                              <1> ;                     1 1   Data area
    40                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    41                              <1> ;               AL  = Failing drive number if AH[7] = 0
    42                              <1> ;               DIL = Error code for errorMsg
    43                              <1> ;               RSI = EA of Device Header for which device the error occured
    44                              <1> ;Return:
    45                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    46                              <1> ;                  = 1 - Retry the Operation    (Retry)
    47                              <1> ;                  = 2 - Terminate the Program  (Abort)
    48                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    49                              <1> ; Return response from int 44h in al
    50 0000033B FA                  <1>     cli ;Disable Interrupts
    51 0000033C C605(C7000000)01    <1>     mov byte [critErrFlag], 1   ;Set flag for critical error
    52 00000343 488925(F4000000)    <1>     mov qword [xInt44hRSP], rsp
    53 0000034A 488B25(08010000)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
    54 00000351 CD44                <1>     int 44h ;Call critical error handler
    55 00000353 488B25(F4000000)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
    56 0000035A C605(C7000000)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
    57 00000361 FB                  <1>     sti ;Reenable Interrupts
    58 00000362 C3                  <1>     ret
    59                              <1> findLRUBuffer: 
    60                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
    61                              <1> ; in rbx
    62                              <1> ;Input: Nothing
    63                              <1> ;Output: rbx = Pointer to the buffer hdr to use
    64 00000363 52                  <1>     push rdx
    65 00000364 488B1D(89000000)    <1>     mov rbx, qword [bufHeadPtr]
    66 0000036B 807B08FF            <1>     cmp byte [rbx + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
    67 0000036F 7436                <1>     je .flbExit 
    68 00000371 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
    69 00000378 742D                <1>     je .flbExit
    70                              <1> .flbWalk:
    71 0000037A 4889DA              <1>     mov rdx, rbx    ;Save a ptr to the previous buffer header
    72 0000037D 488B1A              <1>     mov rbx, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
    73 00000380 807B08FF            <1>     cmp byte [rbx + bufferHdr.driveNumber], -1
    74 00000384 7423                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
    75 00000386 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
    76 0000038D 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
    77 0000038F 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
    78                              <1> .flbHeadLink:
    79 00000396 488B15(89000000)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
    80 0000039D 48891D(89000000)    <1>     mov qword [bufHeadPtr], rbx    ;Sysvars to point to new buffer
    81 000003A4 488913              <1>     mov qword [rbx + bufferHdr.nextBufPtr], rdx
    82                              <1> .flbExit:
    83 000003A7 5A                  <1>     pop rdx
    84 000003A8 C3                  <1>     ret
    85                              <1> .flbFreeLink:
    86 000003A9 51                  <1>     push rcx
    87 000003AA 488B0B              <1>     mov rcx, qword [rbx + bufferHdr.nextBufPtr]
    88 000003AD 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rbx
    89 000003B0 59                  <1>     pop rcx
    90 000003B1 EBE3                <1>     jmp short .flbHeadLink
    91                              <1> 
    92                              <1> findDirtyBufferForDrive:
    93                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
    94                              <1> ;Input: dl = Drive number
    95                              <1> ;Output: rbx = Pointer to dirty buffer for drive letter if exists or -1 if not
    96 000003B3 488B1D(89000000)    <1>     mov rbx, qword [bufHeadPtr]
    97                              <1> .fdbfdCheckBuffer:
    98 000003BA 385308              <1>     cmp byte [rbx + bufferHdr.driveNumber], dl
    99 000003BD 7507                <1>     jne .fdbfdGotoNextBuffer
   100 000003BF F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   101 000003C3 7401                <1>     jz .fdbfdGotoNextBuffer ;Bit not set, goto next buffer
   102                              <1> .fdbfdExit:
   103 000003C5 C3                  <1>     ret
   104                              <1> .fdbfdGotoNextBuffer:
   105 000003C6 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   106 000003C9 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit
   107 000003D0 74F3                <1>     je .fdbfdExit
   108 000003D2 EBE6                <1>     jmp short .fdbfdCheckBuffer
   109                              <1> 
   110                              <1> findSectorInBuffer:
   111                              <1> ;Finds the Buffer for a sector
   112                              <1> ;If the sector is not in a buffer, returns with a -1
   113                              <1> ;Input: rax = Sector number
   114                              <1> ;        dl = Drive number
   115                              <1> ;Output: rbx = Buffer hdr pointer or -1
   116 000003D4 488B1D(89000000)    <1>     mov rbx, qword [bufHeadPtr]
   117                              <1> .fsiCheckBuffer:
   118 000003DB 385308              <1>     cmp byte [rbx + bufferHdr.driveNumber], dl
   119 000003DE 7507                <1>     jne .fsiGotoNextBuffer
   120 000003E0 4839430A            <1>     cmp qword [rbx + bufferHdr.bufferLBA], rax
   121 000003E4 7501                <1>     jne .fsiGotoNextBuffer
   122                              <1> .fsiExit:
   123 000003E6 C3                  <1>     ret
   124                              <1> .fsiGotoNextBuffer:
   125 000003E7 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   126 000003EA 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit
   127 000003F1 74F3                <1>     je .fsiExit
   128 000003F3 EBE6                <1>     jmp short .fsiCheckBuffer
   129                              <1> findDPB:
   130                              <1> ;Finds the DPB for a given drive
   131                              <1> ;Input:  dl = Drive number (0=A, 1=B etc...)
   132                              <1> ;Output: al = 00, rbp = Pointer to the DPB
   133                              <1> ;        al = -1, Failed, no DPB for device, rbx destroyed
   134 000003F5 488B1D(67000000)    <1>     mov rbx, qword [dpbHeadPtr]
   135                              <1> .fd1:
   136 000003FC 30C0                <1>     xor al, al
   137 000003FE 385500              <1>     cmp byte [rbp + dpb.bDriveNumber], dl
   138 00000401 740F                <1>     je .fd2
   139 00000403 488B6D24            <1>     mov rbp, qword [rbp + dpb.qNextDPBPtr]
   140 00000407 B0FF                <1>     mov al, -1
   141 00000409 4881FDFFFFFFFF      <1>     cmp rbp, -1 ;If rbx followed last item in list, no DPB exists for dl
   142 00000410 75EA                <1>     jne .fd1
   143                              <1> .fd2:
   144 00000412 C3                  <1>     ret
   145                              <1> ;-----------------------------------:
   146                              <1> ;        Interrupt routines         :
   147                              <1> ;-----------------------------------:
   148                              <1> terminateProcess:   ;Int 40h
   149 00000413 48CF                <1>     iretq
   150                              <1> terminateHandler:   ;Int 42h
   151                              <1> ctrlCHandler:       ;Int 43h
   152 00000415 48CF                <1>     iretq
   153                              <1> absDiskWrite:       ;Int 46h
   154                              <1> ;al = Drive number
   155                              <1> ;rbx = Memory Buffer address to read from
   156                              <1> ;ecx = Number of sectors to write
   157                              <1> ;rdx = Start LBA to write to
   158 00000417 50                  <1>     push rax
   159 00000418 53                  <1>     push rbx
   160 00000419 52                  <1>     push rdx
   161 0000041A 55                  <1>     push rbp
   162 0000041B B408                <1>     mov ah, drvWRITE
   163 0000041D 0225(F3000000)      <1>     add ah, byte [verifyFlag]   ;Change to Write/Verify if set
   164 00000423 EB06                <1>     jmp short absDiskReadWriteCommon
   165                              <1> absDiskRead:        ;Int 45h
   166                              <1> ;al = Drive number
   167                              <1> ;rbx = Memory Buffer address to write to
   168                              <1> ;ecx = Number of sectors to read
   169                              <1> ;rdx = Start LBA to read from
   170 00000425 50                  <1>     push rax
   171 00000426 53                  <1>     push rbx
   172 00000427 52                  <1>     push rdx
   173 00000428 55                  <1>     push rbp
   174 00000429 B404                <1>     mov ah, drvREAD
   175                              <1> absDiskReadWriteCommon:
   176                              <1> ;Entered with the appropriate function number in ah
   177 0000042B 50                  <1>     push rax    ;Save drive number, cmdcde and start LBA
   178 0000042C 53                  <1>     push rbx
   179 0000042D 52                  <1>     push rdx
   180 0000042E B432                <1>     mov ah, 32h ;Get DPB
   181 00000430 88C2                <1>     mov dl, al
   182 00000432 CD41                <1>     int 41h
   183 00000434 4889DD              <1>     mov rbp, rbx    ;Get dpb ptr in rbp
   184 00000437 5A                  <1>     pop rdx
   185 00000438 5B                  <1>     pop rbx
   186 00000439 58                  <1>     pop rax
   187                              <1> 
   188 0000043A C605(35000000)2A    <1>     mov byte [diskReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   189 00000441 8805(36000000)      <1>     mov byte [diskReqHdr + ioReqPkt.unitnm], al
   190 00000447 8825(37000000)      <1>     mov byte [diskReqHdr + ioReqPkt.cmdcde], ah
   191 0000044D 66C705(38000000)00- <1>     mov word [diskReqHdr + ioReqPkt.status], 0
   191 00000455 00                  <1>
   192 00000456 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   193 00000459 8805(42000000)      <1>     mov byte [diskReqHdr + ioReqPkt.medesc], al
   194 0000045F 48891D(43000000)    <1>     mov qword [diskReqHdr + ioReqPkt.bufptr], rbx
   195 00000466 488915(4F000000)    <1>     mov qword [diskReqHdr + ioReqPkt.strtsc], rdx
   196 0000046D 890D(4B000000)      <1>     mov dword [diskReqHdr + ioReqPkt.tfrlen], ecx
   197 00000473 488B551A            <1>     mov rdx, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver pointer
   198                              <1> 
   199 00000477 488D1D(35000000)    <1>     lea rbx, diskReqHdr
   200 0000047E FF520A              <1>     call qword [rdx + drvHdr.strPtr]  ;Call with ptr to request block in rbx
   201 00000481 FF5212              <1>     call qword [rdx + drvHdr.intPtr]
   202 00000484 5D                  <1>     pop rbp
   203 00000485 5A                  <1>     pop rdx
   204 00000486 5B                  <1>     pop rbx
   205 00000487 58                  <1>     pop rax
   206 00000488 66F705(38000000)00- <1>     test word [diskReqHdr + ioReqPkt.status], 8000h
   206 00000490 80                  <1>
   207 00000491 7402                <1>     je .absDiskError
   208 00000493 F8                  <1>     clc
   209 00000494 C3                  <1>     ret
   210                              <1> .absDiskError:
   211 00000495 8A05(38000000)      <1>     mov al, byte [diskReqHdr + ioReqPkt.status] ;Get low byte into al
   212 0000049B B480                <1>     mov ah, 80h ;Attachment failure
   213 0000049D 3C0C                <1>     cmp al, 0Ch ;Gen error
   214 0000049F 741A                <1>     je .absExit
   215 000004A1 B440                <1>     mov ah, 40h ;Seek error
   216 000004A3 3C06                <1>     cmp al, 06h
   217 000004A5 7414                <1>     je .absExit
   218 000004A7 B408                <1>     mov ah, 08h ;Bad CRC
   219 000004A9 3C04                <1>     cmp al, 04h
   220 000004AB 740E                <1>     je .absExit
   221 000004AD B404                <1>     mov ah, 04h ;Sector not found
   222 000004AF 3C08                <1>     cmp al, 08h
   223 000004B1 7408                <1>     je .absExit
   224 000004B3 30E4                <1>     xor ah, ah  ;Write Protect Violation
   225 000004B5 84C0                <1>     test al, al
   226 000004B7 7402                <1>     je .absExit
   227 000004B9 B402                <1>     mov ah, 02h ;Other Error
   228                              <1> .absExit:
   229 000004BB F9                  <1>     stc
   230 000004BC C3                  <1>     ret
   231                              <1> 
   232                              <1> terminateResident:  ;Int 47h
   233                              <1> inDosHandler:       ;Int 48h
   234                              <1> ;Called when DOS idle
   235 000004BD 48CF                <1>     iretq
   236                              <1> fastOutput:         ;Int 49h
   237                              <1> ;Called with char to transfer in al
   238 000004BF 50                  <1>     push rax
   239 000004C0 B40E                <1>     mov ah, 0Eh
   240 000004C2 CD30                <1>     int 30h
   241 000004C4 58                  <1>     pop rax
   242 000004C5 48CF                <1>     iretq
   243                              <1> passCommand:        ;Int 4Eh, hooked by COMMAND.COM
   244 000004C7 48CF                <1>     iretq
   245                              <1> multiplex:          ;Int 4Fh, kept as iretq for now
   246 000004C9 48CF                <1>     iretq
   247                              <1> ;-----------------------------------:
   248                              <1> ;        Main Kernel routines       :
   249                              <1> ;-----------------------------------:
   250                              <1> functionDispatch:   ;Int 41h Main function dispatcher
   251                              <1> ;ah = Function number, all other registers have various meanings
   252 000004CB FA                  <1>     cli ;Halt external interrupts
   253 000004CC FC                  <1>     cld ;Ensure all string ops occur in the right direction
   254 000004CD 80FC6A              <1>     cmp ah, kernelDispatchTableL/8    ;Number of functions
   255 000004D0 0F871D010000        <1>     ja .fdExitBad
   256                              <1>     ;Cherry pick functions
   257 000004D6 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
   258 000004D9 722C                <1>     jb .fsbegin   ;If below skip these checks
   259 000004DB 0F8447050000        <1>     je ctrlBreakCheck
   260 000004E1 80FC64              <1>     cmp ah, 64h
   261 000004E4 0F8448070000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
   262 000004EA 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
   263 000004EC 80FC51              <1>     cmp ah, 51h
   264 000004EF 0F84ED050000        <1>     je getCurrProcessID    ;This and below are exactly the same
   265 000004F5 80FC62              <1>     cmp ah, 62h
   266 000004F8 0F8421070000        <1>     je getPSPaddr          ;Calls the above function
   267 000004FE 80FC50              <1>     cmp ah, 50h
   268 00000501 0F84D3050000        <1>     je setCurrProcessID
   269                              <1> .fsbegin:
   270                              <1>     pushDOS ;Push the usual prologue registers
   262 00000507 4151                <2>  push r9
   263 00000509 4150                <2>  push r8
   264 0000050B 55                  <2>  push rbp
   265 0000050C 57                  <2>  push rdi
   266 0000050D 56                  <2>  push rsi
   267 0000050E 52                  <2>  push rdx
   268 0000050F 51                  <2>  push rcx
   269 00000510 53                  <2>  push rbx
   270 00000511 50                  <2>  push rax
   271 00000512 488B05(08010000)    <1>     mov rax, qword [oldRSP]
   272 00000519 488905(00010000)    <1>     mov qword [oldoldRSP], rax
   273 00000520 FE05(C8000000)      <1>     inc byte [inDOS]    ;Increment in DOS flag
   274 00000526 488925(08010000)    <1>     mov qword [oldRSP], rsp
   275                              <1> ;Here, we want to save oldRSP in the callers PSP
   276 0000052D 803D(C8000000)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
   277 00000534 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
   278 00000536 488B05(D7000000)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
   279 0000053D 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
   280                              <1> .fsb1:
   281 00000541 58                  <1>     pop rax     ;Get old rax back
   282 00000542 50                  <1>     push rax    ;and push it back onto the stack
   283 00000543 488D25(4C060000)    <1>     lea rsp, critStakTop
   284 0000054A FB                  <1>     sti         ;Reenable interrupts
   285                              <1> 
   286 0000054B C605(FF000000)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
   287                              <1> 
   288 00000552 48891D(10010000)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
   289 00000559 0FB6DC              <1>     movzx ebx, ah   ;Move the function number bl zero extended to rbx
   290 0000055C C1E303              <1>     shl ebx, 3      ;Multiply the function number by 8 for offset into table
   291 0000055F 50                  <1>     push rax        ;Push rax onto the stack
   292 00000560 488D05CC060000      <1>     lea rax, qword [kernelDispatchTable]
   293 00000567 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   294 0000056A 58                  <1>     pop rax
   295 0000056B 488B1B              <1>     mov rbx, qword [rbx]    ;Get the address from the dispatch table
   296                              <1> 
   297 0000056E 84E4                <1>     test ah, ah     ;Simple Terminate function?
   298 00000570 741C                <1>     jz .fddiskOp
   299 00000572 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   300 00000575 7443                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   301 00000577 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   302 0000057A 7712                <1>     ja .fddiskOp
   303                              <1> ;Char operations here
   304 0000057C F605(C7000000)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   305 00000583 7535                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   306 00000585 488D25(8C0C0000)    <1>     lea rsp, IOStakTop          ;Otherwise, switch to IO stack
   307 0000058C EB2C                <1>     jmp short .fdGoToFunction
   308                              <1> .fddiskOp:
   309                              <1>     ;Disk operations go here
   310                              <1>     ;Clear up error info
   311 0000058E C605(CA000000)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   312 00000595 C605(C7000000)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   313 0000059C C605(C9000000)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   314                              <1> 
   315 000005A3 C605(FF000000)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   316 000005AA 488D25(CC120000)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   317 000005B1 F605(F2000000)FF    <1>     test byte [breakFlag], -1   ;Test if set
   318 000005B8 7400                <1>     jz .fdGoToFunction
   319                              <1> ; HANDLE CTRL+BREAK HERE!
   320                              <1> .fdGoToFunction:
   321 000005BA 48871D(10010000)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   322                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   323                              <1>     ;
   324                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   325                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   326                              <1>     ;
   327 000005C1 FF15(10010000)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   328                              <1> .fdExit:
   329 000005C7 FA                  <1>     cli     ;Redisable interrupts
   330                              <1>     ;???
   331 000005C8 FE0D(C8000000)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   332 000005CE 488B25(08010000)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   333 000005D5 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   334 000005D8 488B05(00010000)    <1>     mov rax, qword [oldoldRSP]
   335 000005DF 488905(08010000)    <1>     mov qword [oldRSP], rax
   336                              <1>     popDOS  ;Pop the frame
   274 000005E6 58                  <2>  pop rax
   275 000005E7 5B                  <2>  pop rbx
   276 000005E8 59                  <2>  pop rcx
   277 000005E9 5A                  <2>  pop rdx
   278 000005EA 5E                  <2>  pop rsi
   279 000005EB 5F                  <2>  pop rdi
   280 000005EC 5D                  <2>  pop rbp
   281 000005ED 4158                <2>  pop r8
   282 000005EF 4159                <2>  pop r9
   337 000005F1 48CF                <1>     iretq
   338                              <1> .fdExitBad:
   339 000005F3 B400                <1>     mov ah, 0
   340 000005F5 48CF                <1>     iretq
   341                              <1> 
   342                              <1> ;========================================:
   343                              <1> ;            Kernel Functions            :
   344                              <1> ;========================================:
   345                              <1> simpleTerminate:   ;ah = 00h
   346 000005F7 C3                  <1>     ret
   347                              <1> diskReset:         ;ah = 0Dh
   348                              <1> ;Flush all dirty buffers to disk
   349 000005F8 488B2D(89000000)    <1>     mov rbp, qword [bufHeadPtr]
   350                              <1> .drCheckBuffer:
   351 000005FF F6450940            <1>     test byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   352 00000603 7407                <1>     jz .drGotoNextBuffer
   353                              <1> .drFlushBuffer:
   354 00000605 E8DFFAFFFF          <1>     call flushBuffer    ;Called with rbp = buffer header
   355 0000060A 720E                <1>     jc .drError
   356                              <1> .drGotoNextBuffer:
   357 0000060C 488B6D00            <1>     mov rbp, qword [rbp + bufferHdr.nextBufPtr]
   358 00000610 4881FDFFFFFFFF      <1>     cmp rbp, -1     ;If rbp points to -1, exit
   359 00000617 75E6                <1>     jne .drCheckBuffer
   360 00000619 C3                  <1>     ret
   361                              <1> .drError:
   362                              <1> ;Abort/Retry/Ignore
   363                              <1> ;Abort returns to DOS, 
   364                              <1> ;Retry retries the write on the buffer, 
   365                              <1> ;Ignore marks the buffer as clean and proceeds as normal
   366 0000061A 8A4509              <1>     mov al, byte [rbp + bufferHdr.bufferFlags]
   367 0000061D 240F                <1>     and al, 0Fh ;Clear the upper nybble
   368 0000061F B431                <1>     mov ah, 31h ;Disk Error, Ignore,Retry and Write operation
   369 00000621 3C01                <1>     cmp al, dosBuffer
   370 00000623 740F                <1>     je .drErrorMain
   371 00000625 80C402              <1>     add ah, 2
   372 00000628 3C02                <1>     cmp al, fatBuffer
   373 0000062A 7408                <1>     je .drErrorMain
   374 0000062C 80C402              <1>     add ah, 2
   375 0000062F 3C04                <1>     cmp al, dirBuffer
   376 00000631 80C402              <1>     add ah, 2
   377                              <1> .drErrorMain:
   378 00000634 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
   379 00000637 488B7517            <1>     mov rsi, qword [rbp + bufferHdr.driveDPBPtr]
   380 0000063B 488B761A            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   381 0000063F 668B3D(38000000)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]    ;Disk error occured!
   382 00000646 6681E7FF00          <1>     and di, 0FFh    ;Only bottom byte
   383 0000064B 66893D(CB000000)    <1>     mov word [errorExt], di     ;Save driver error code
   384 00000652 668105(CB000000)13- <1>     add word [errorExt], 13h    ;Add offset to driver error codes
   384 0000065A 00                  <1>
   385 0000065B 8805(C9000000)      <1>     mov byte [errorDrv], al     ;Save the drive on which the error occured
   386 00000661 C605(CA000000)02    <1>     mov byte [errorLocus], 2    ;Error in Block Device Request code
   387 00000668 C605(CE000000)0B    <1>     mov byte [errorClass], 11   ;Media error occured (bad BPB or other) code
   388 0000066F C605(CD000000)01    <1>     mov byte [errorAction], 1   ;Retry request code
   389 00000676 E8C0FCFFFF          <1>     call criticalDOSError       ;Critical error handler
   390 0000067B 84C0                <1>     test al, al ;Ignore the troublesome buffer and mark it as free
   391 0000067D 7406                <1>     jz .drIgnore
   392 0000067F 3C01                <1>     cmp al, 1   ;Retry flushing the buffer
   393 00000681 7482                <1>     je .drFlushBuffer
   394 00000683 CD43                <1>     int 43h     ;Abort and fail both abort through int 43h
   395                              <1> .drIgnore:
   396 00000685 C64508FF            <1>     mov byte [rbp + bufferHdr.driveNumber], -1  ;Mark buffer as free
   397 00000689 E97EFFFFFF          <1>     jmp .drGotoNextBuffer
   398                              <1> 
   399                              <1> selectDisk:        ;ah = 0Eh
   400                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   401 0000068E 8A05(0A000000)      <1>     mov al, byte [numLRemDrives]    ;Value 1 based
   402 00000694 8A1D(99000000)      <1>     mov bl, byte [lastdrvNum]       ;Value 1 based
   403 0000069A FEC8                <1>     dec al
   404 0000069C FECB                <1>     dec bl
   405 0000069E 38C3                <1>     cmp bl, al
   406 000006A0 0F47C3              <1>     cmova eax, ebx    ;If bl > al, move bl to al
   407 000006A3 38C2                <1>     cmp dl, al  ;If dl is bigger than al
   408 000006A5 7707                <1>     ja .error
   409 000006A7 8815(F1000000)      <1>     mov byte [currentDrv], dl   ;Only save dl if it is a valid number
   410 000006AD C3                  <1>     ret ;al = lastdrv as retcode
   411                              <1> .error:
   412 000006AE 488B2D(08010000)    <1>     mov rbp, qword [oldRSP]
   413 000006B5 48814D5801000000    <1>     or qword [rbp + callerFrame.flags], 1   ;Set the CY flag
   414 000006BD B80F000000          <1>     mov eax, 15                 ;Invalid drive error
   415 000006C2 668905(CB000000)    <1>     mov word [errorExt], ax     
   416 000006C9 C605(CA000000)01    <1>     mov byte [errorLocus], 1    ;Not appropriate
   417 000006D0 C605(CE000000)08    <1>     mov byte [errorClass], 8    ;Drive not found
   418 000006D7 C605(CD000000)07    <1>     mov byte [errorAction], 7   ;Retry after user intervention
   419 000006DE C3                  <1>     ret
   420                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   421 000006DF 8A05(F1000000)      <1>     mov al, byte [currentDrv]
   422 000006E5 C3                  <1>     ret
   423                              <1> FATinfoDefault:    ;ah = 1Bh
   424 000006E6 30D2                <1>     xor dl, dl
   425                              <1> FATinfoDevice:     ;ah = 1Ch
   426                              <1> ;Return in:
   427                              <1> ;   al = Number of sectors per cluster
   428                              <1> ;   edx = Number of clusters
   429                              <1> ;   cx =  Size of a clsuter
   430 000006E8 84D2                <1>     test dl, dl
   431 000006EA 7408                <1>     jz .fidSkipdefault
   432 000006EC 8A15(F1000000)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   433 000006F2 EB02                <1>     jmp short .fidMain
   434                              <1> .fidSkipdefault:
   435 000006F4 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   436                              <1> .fidMain:
   437                              <1> ;Walk the dpb chain manually
   438 000006F6 E8FAFCFFFF          <1>     call findDPB    ;Get in rbp the dpb pointer for drive dl
   439 000006FB 84C0                <1>     test al, al
   440 000006FD 7431                <1>     jz .fidDPBFound
   441                              <1> ;Else, we at an error.
   442                              <1> ;Simply return with CY set and error code in al with extended error info
   443 000006FF 488B2D(08010000)    <1>     mov rbp, qword [oldRSP]
   444 00000706 48814D5801000000    <1>     or qword [rbp + callerFrame.flags], 1   ;Set the CY flag
   445 0000070E B80F000000          <1>     mov eax, 15                 ;Invalid drive error
   446 00000713 668905(CB000000)    <1>     mov word [errorExt], ax     
   447 0000071A C605(CA000000)01    <1>     mov byte [errorLocus], 1    ;Not appropriate
   448 00000721 C605(CE000000)08    <1>     mov byte [errorClass], 8    ;Drive not found
   449 00000728 C605(CD000000)07    <1>     mov byte [errorAction], 7   ;Retry after user intervention
   450 0000072F C3                  <1>     ret
   451                              <1> .fidDPBFound:
   452 00000730 8A4503              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
   453 00000733 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   454 00000735 8B550E              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   455 00000738 8A4D02              <1>     mov cl, byte [rbp + dpb.bBytesPerSectorShift]
   456 0000073B BB01000000          <1>     mov ebx, 1
   457 00000740 D3E3                <1>     shl ebx, cl
   458 00000742 89D9                <1>     mov ecx, ebx    ;Save the value in ecx
   459 00000744 488D5D22            <1>     lea rbx, qword [rbp + dpb.bMediaDescriptor]
   460 00000748 488B2D(08010000)    <1>     mov rbp, qword [oldRSP]
   461 0000074F 48895518            <1>     mov qword [rbp + callerFrame.rdx], rdx
   462 00000753 66894D10            <1>     mov word [rbp + callerFrame.rcx], cx
   463 00000757 48895D08            <1>     mov qword [rbp + callerFrame.rbx], rbx
   464 0000075B C3                  <1>     ret
   465                              <1> ;===============================
   466                              <1> setIntVector:      ;ah = 25h
   467                              <1> ;Called with:
   468                              <1> ;   rdx = Pointer to interrupt handler
   469                              <1> ;   al = Interrupt number
   470 0000075C 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   471 0000075E 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   472                              <1> ;First call to get default BIOS segement selector and attribute word
   473 00000764 88C3                <1>     mov bl, al  ;Set interrupt number 
   474 00000766 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   475 0000076B CD35                <1>     int 35h
   476 0000076D 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   477 0000076F 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   478                              <1> ;dx preserves the attribute word
   479 00000771 488B2D(08010000)    <1>     mov rbp, qword [oldRSP]
   480 00000778 488B5D18            <1>     mov rbx, qword [rbp + callerFrame.rdx]  ;Pointer passed in rdx
   481 0000077C B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   482 00000781 CD35                <1>     int 35h
   483                              <1> 
   484 00000783 8A4500              <1>     mov al, byte [rbp + callerFrame.rax]    ;Preserve low byte of rax
   485 00000786 C3                  <1>     ret
   486                              <1> createNewPSP:      ;ah = 26h
   487 00000787 C3                  <1>     ret
   488                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   489 00000788 8805(F3000000)      <1>     mov byte [verifyFlag], al
   490 0000078E 8025(F3000000)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   491 00000795 C3                  <1>     ret
   492                              <1> getDOSversion:     ;ah = 30h
   493 00000796 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   494 0000079D 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   495 0000079F 886209              <1>     mov byte [rdx + callerFrame.rbx + 1], ah    ;Clear bh 
   496 000007A2 668B0557F8FFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   497 000007A9 668902              <1>     mov word [rdx + callerFrame.rax], ax    ;Save ax
   498 000007AC C3                  <1>     ret
   499                              <1> terminateStayRes:  ;ah = 31h
   500 000007AD C3                  <1>     ret
   501                              <1> ;-------------------------------------------
   502                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply calls int 41h ah = 32h with dl = 0
   503 000007AE 30D2                <1>     xor dl, dl
   504                              <1> getDeviceDPBptr:   ;ah = 32h
   505                              <1> ;On entry: dl = Drive number
   506                              <1> ;On exit: rbx = DPB pointer
   507 000007B0 84D2                <1>     test dl, dl
   508 000007B2 7508                <1>     jnz .gddpskipdefault
   509 000007B4 8A15(F1000000)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   510 000007BA EB02                <1>     jmp short .gddpcommon
   511                              <1> .gddpskipdefault:
   512                              <1>     ;Decrement the drive letter since 0 = Default, 1 = A etc...
   513 000007BC FECA                <1>     dec dl
   514                              <1> .gddpcommon:
   515 000007BE E832FCFFFF          <1>     call findDPB ;Get in rbp the dpb pointer for drive dl
   516 000007C3 84C0                <1>     test al, al
   517 000007C5 741F                <1>     jz .gddpMediaCheck
   518                              <1> ;Put in here error info
   519 000007C7 66C705(CB000000)0F- <1>     mov word [errorExt], 15 ;Invalid drive spec
   519 000007CF 00                  <1>
   520 000007D0 C605(CA000000)02    <1>     mov byte [errorLocus], 2    ;Block device driver
   521 000007D7 C605(CE000000)08    <1>     mov byte [errorClass], 8    ;Drive not found
   522 000007DE C605(CD000000)07    <1>     mov byte [errorAction], 7   ;Retry after intervention
   523 000007E5 C3                  <1>     ret ;Return. al = -1
   524                              <1> .gddpMediaCheck:
   525                              <1> ;Media Check Section
   526 000007E6 C605(35000000)17    <1>     mov byte [diskReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   527 000007ED 8815(36000000)      <1>     mov byte [diskReqHdr + mediaCheckReqPkt.unitnm], dl
   528 000007F3 C605(37000000)01    <1>     mov byte [diskReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   529 000007FA 66C705(38000000)00- <1>     mov word [diskReqHdr + mediaCheckReqPkt.status], 0
   529 00000802 00                  <1>
   530 00000803 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   531 00000806 8805(42000000)      <1>     mov byte [diskReqHdr + mediaCheckReqPkt.medesc], al
   532 0000080C 88D0                <1>     mov al, dl  ;Save device number in al
   533 0000080E 488B551A            <1>     mov rdx, qword [rbp + dpb.qDriverHeaderPtr]
   534 00000812 488D1D(35000000)    <1>     lea rbx, diskReqHdr ;rbx needs to point to diskReqHdr
   535 00000819 FF520A              <1>     call [rdx + drvHdr.strPtr]
   536 0000081C FF5212              <1>     call [rdx + drvHdr.intPtr]
   537 0000081F 66F705(38000000)00- <1>     test word [diskReqHdr + mediaCheckReqPkt.status], 8000h
   537 00000827 80                  <1>
   538 00000828 0F85EA000000        <1>     jnz .gddpError
   539 0000082E 88C2                <1>     mov dl, al
   540 00000830 803D(43000000)01    <1>     cmp byte [diskReqHdr + mediaCheckReqPkt.medret], 1 ;Certified no change
   541 00000837 0F84B0000000        <1>     je .gddpretdbp
   542 0000083D 803D(43000000)00    <1>     cmp byte [diskReqHdr + mediaCheckReqPkt.medret], 0
   543 00000844 7512                <1>     jne .gddpBuildBPB   ;This means Media changed declared
   544 00000846 E868FBFFFF          <1>     call findDirtyBufferForDrive
   545 0000084B 48F7C3FFFFFFFF      <1>     test rbx, -1    ;This is the case if no dirty buffers for drive
   546 00000852 0F8595000000        <1>     jne .gddpretdbp ;If there is a dirty buffer for the drive, dont build bpb
   547                              <1> .gddpBuildBPB:
   548                              <1> ;BPB Build Section, only here if need a new bpb, i.e. sure of a new device
   549 00000858 E806FBFFFF          <1>     call findLRUBuffer  ;Get lru buffer pointer in rbx
   550 0000085D 3A5308              <1>     cmp dl, byte [rbx + bufferHdr.driveNumber]  ;Does buffer belong to old drv?
   551 00000860 7414                <1>     je .gddpBuildBPBInvalidateBuffer    ;Yes, immediately invalidate data
   552                              <1>     ;If no, flush the data to disk.
   553                              <1> .gddpBuildBPBFlush:
   554 00000862 4889EE              <1>     mov rsi, rbp    ;Save rbp as pointer to old dl drive dpb
   555 00000865 4889DD              <1>     mov rbp, rbx    ;Get buffer header pointer in rbp
   556 00000868 E87CF8FFFF          <1>     call flushBuffer    ;Flush the buffer to disk, rbx preserved
   557 0000086D 4889F5              <1>     mov rbp, rsi    ;Return old drive dpb pointer to rbp
   558 00000870 0F820F010000        <1>     jc .gddpErrorType2  ;rbx points to buffer header
   559                              <1> .gddpBuildBPBInvalidateBuffer:
   560                              <1>     ;Write new buffer header
   561 00000876 885308              <1>     mov byte [rbx + bufferHdr.driveNumber], dl
   562 00000879 C6430908            <1>     mov byte [rbx + bufferHdr.bufferFlags], dataBuffer
   563 0000087D 48C7430A00000000    <1>     mov qword [rbx + bufferHdr.bufferLBA], 0
   564 00000885 C6431201            <1>     mov byte [rbx + bufferHdr.bufFATcopy], 1
   565 00000889 C7431300000000      <1>     mov dword [rbx + bufferHdr.bufFATsize], 0
   566 00000890 48896B17            <1>     mov qword [rbx + bufferHdr.driveDPBPtr], rbp
   567 00000894 488D5B20            <1>     lea rbx, qword [rbx + bufferHdr.dataarea]
   568                              <1>     ;Build BPB request
   569 00000898 C605(35000000)1E    <1>     mov byte [diskReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   570 0000089F 8815(36000000)      <1>     mov byte [diskReqHdr + bpbBuildReqPkt.unitnm], dl
   571 000008A5 C605(37000000)02    <1>     mov byte [diskReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   572 000008AC 66C705(38000000)00- <1>     mov word [diskReqHdr + bpbBuildReqPkt.status], 0 
   572 000008B4 00                  <1>
   573 000008B5 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   574 000008B8 8805(42000000)      <1>     mov byte [diskReqHdr + bpbBuildReqPkt.medesc], al
   575 000008BE 48891D(43000000)    <1>     mov qword [diskReqHdr + bpbBuildReqPkt.bufptr], rbx ;Put lru pointer in rbx
   576 000008C5 488B551A            <1>     mov rdx, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   577 000008C9 488D1D(35000000)    <1>     lea rbx, diskReqHdr ;rbx needs to point to diskReqHdr
   578 000008D0 FF520A              <1>     call [rdx + drvHdr.strPtr]
   579 000008D3 FF5212              <1>     call [rdx + drvHdr.intPtr]
   580 000008D6 66F705(38000000)00- <1>     test word [diskReqHdr + bpbBuildReqPkt.status], 8000h
   580 000008DE 80                  <1>
   581 000008DF 7537                <1>     jnz .gddpError
   582 000008E1 488B35(4B000000)    <1>     mov rsi, qword [diskReqHdr + bpbBuildReqPkt.bpbptr]
   583                              <1>     ;rbp points to dpb so we good to go
   584                              <1>     ;Call int 41h ah=53h Build DPB without reentering Int 41h
   585                              <1>     ;Since this function doesnt modify the caller stack, it is safe to do so
   586 000008E8 E81B020000          <1>     call createDPB 
   587                              <1> .gddpretdbp: 
   588 000008ED C64523FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Clear access flag
   589 000008F1 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   590 000008F8 48896A08            <1>     mov qword [rdx + callerFrame.rbx], rbp  ;Here, all paths have rbp as dpbptr
   591 000008FC 30C0                <1>     xor al, al  ;Set al = 0 to indicate rbx=dpb pointer
   592 000008FE C3                  <1>     ret
   593                              <1> .gddpretdpbFail:
   594 000008FF 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   595 00000906 48814A5801000000    <1>     or qword [rdx + callerFrame.flags], 1   ;Set CF=CY
   596 0000090E 66C705(CB000000)53- <1>     mov word [errorExt], 83 ;Fail on INT 44h error code
   596 00000916 00                  <1>
   597 00000917 C3                  <1>     ret
   598                              <1> .gddpError:
   599                              <1> ;Abort, Retry, Ignore are the only acceptible responses
   600                              <1> ;Entered with rbp = dpb for failing drive
   601                              <1> ;             rdx = driver header that caused fault
   602 00000918 4889D6              <1>     mov rsi, rdx    ;rdx points to driver header in both cases
   603 0000091B 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   604 00000922 8A4318              <1>     mov al, byte [rbx + callerFrame.rdx]    ;Get low byte = dl = Drive number
   605 00000925 88C2                <1>     mov dl, al  ;Save in dl
   606 00000927 84C0                <1>     test al, al
   607 00000929 7508                <1>     jnz .gddpE0
   608 0000092B 8A05(F1000000)      <1>     mov al, byte [currentDrv]
   609 00000931 EB02                <1>     jmp short .gddpE1
   610                              <1> .gddpE0:
   611 00000933 FEC8                <1>     dec al
   612                              <1> .gddpE1:
   613 00000935 B436                <1>     mov ah, 36h ;Read operation, data area, abort/retry/ignore, disk error
   614 00000937 668B3D(38000000)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]   ;Get low byte of status
   615 0000093E 6681E7FF00          <1>     and di, 0FFh    ;Save lo byte only
   616 00000943 66893D(CB000000)    <1>     mov word [errorExt], di     ;Save driver error code
   617 0000094A 668105(CB000000)13- <1>     add word [errorExt], 13h    ;Add offset to driver error codes
   617 00000952 00                  <1>
   618 00000953 8805(C9000000)      <1>     mov byte [errorDrv], al     ;Save the drive on which the error occured
   619 00000959 C605(CA000000)02    <1>     mov byte [errorLocus], 2    ;Error in Block Device Request code
   620 00000960 C605(CE000000)0B    <1>     mov byte [errorClass], 11   ;Media error occured (bad BPB or other) code
   621 00000967 C605(CD000000)01    <1>     mov byte [errorAction], 1   ;Retry request code
   622 0000096E E8C8F9FFFF          <1>     call criticalDOSError   ;Critical error handler
   623 00000973 84C0                <1>     test al, al
   624 00000975 0F8472FFFFFF        <1>     jz .gddpretdbp  ;Ignore error, return, rbp has old dpb pointer
   625 0000097B 3C01                <1>     cmp al, 1
   626 0000097D 0F842DFEFFFF        <1>     je getDeviceDPBptr ;Reenter the function, dl has drive code
   627 00000983 CD43                <1>     int 43h ;Else, restart DOS
   628                              <1> .gddpErrorType2:
   629                              <1> ;Error flushing the old buffer
   630                              <1> ;   rbx = Buffer header for data transfer
   631 00000985 B439                <1>     mov ah, 39h ;Write operation, abort/retry/ignore/fail, disk error
   632 00000987 807B0901            <1>     cmp byte [rbx + bufferHdr.bufferFlags], dosBuffer
   633 0000098B 7414                <1>     je .gddpErrorType2main
   634 0000098D 80CC02              <1>     or ah, 2h   ;Set bit 1
   635 00000990 807B0902            <1>     cmp byte [rbx + bufferHdr.bufferFlags], fatBuffer
   636 00000994 740B                <1>     je .gddpErrorType2main
   637 00000996 B43D                <1>     mov ah, 3Dh ;Set bit 2, clear bit 1
   638 00000998 807B0904            <1>     cmp byte [rbx + bufferHdr.bufferFlags], dirBuffer
   639 0000099C 7403                <1>     je .gddpErrorType2main
   640 0000099E 80CC02              <1>     or ah, 2h   ;Set bit 2 and 1
   641                              <1> .gddpErrorType2main:    
   642 000009A1 668B3D(38000000)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]   ;Get low byte of status
   643 000009A8 6681E7FF00          <1>     and di, 0FFh    ;Save lo byte only
   644 000009AD 66893D(CB000000)    <1>     mov word [errorExt], di     ;Save driver error code
   645 000009B4 668105(CB000000)13- <1>     add word [errorExt], 13h    ;Add offset to driver error codes
   645 000009BC 00                  <1>
   646 000009BD 8A4308              <1>     mov al, byte [rbx + bufferHdr.driveNumber]
   647 000009C0 8805(C9000000)      <1>     mov byte [errorDrv], al
   648 000009C6 C605(CA000000)02    <1>     mov byte [errorLocus], 2    ;Error in Block Device Request code
   649 000009CD C605(CE000000)0B    <1>     mov byte [errorClass], 11   ;Media error occured (bad disk write) code
   650 000009D4 C605(CD000000)01    <1>     mov byte [errorAction], 1   ;Retry request code
   651 000009DB 488B7317            <1>     mov rsi, qword [rbx + bufferHdr.driveDPBPtr]
   652 000009DF 488B761A            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get device driver header in rsi
   653 000009E3 E853F9FFFF          <1>     call criticalDOSError   ;Critical error handler
   654 000009E8 807B0902            <1>     cmp byte [rbx + bufferHdr.bufferFlags], fatBuffer
   655 000009EC 7420                <1>     je .gddpErrorType2FatDir
   656 000009EE 807B0904            <1>     cmp byte [rbx + bufferHdr.bufferFlags], dirBuffer
   657 000009F2 741A                <1>     je .gddpErrorType2FatDir
   658 000009F4 84C0                <1>     test al, al
   659 000009F6 0F847AFEFFFF        <1>     jz .gddpBuildBPBInvalidateBuffer ;Ignore error, invalidate data
   660 000009FC 3C01                <1>     cmp al, 1
   661 000009FE 0F845EFEFFFF        <1>     je .gddpBuildBPBFlush   ;Retry flush, rbx has buffer pointer
   662 00000A04 3C03                <1>     cmp al, 3
   663 00000A06 0F84F3FEFFFF        <1>     je .gddpretdpbFail
   664 00000A0C CD43                <1>     int 43h ;al = 2, means just abort
   665                              <1> .gddpErrorType2FatDir:
   666 00000A0E 84C0                <1>     test al, al ;Ignore converted to fail
   667 00000A10 0F84E9FEFFFF        <1>     jz .gddpretdpbFail
   668 00000A16 3C01                <1>     cmp al, 1
   669 00000A18 0F8444FEFFFF        <1>     je .gddpBuildBPBFlush   ;Retry flush, rbx has buffer pointer
   670 00000A1E 3C03                <1>     cmp al, 3
   671 00000A20 0F84D9FEFFFF        <1>     je .gddpretdpbFail
   672 00000A26 CD43                <1>     int 43h ;al = 2, means just abort
   673                              <1> ;-------------------------------------------
   674                              <1> 
   675                              <1> ctrlBreakCheck:    ;ah = 33h
   676 00000A28 84C0                <1>     test al, al
   677 00000A2A 7406                <1>     jz .cbcget  ;Get the state
   678 00000A2C 8815(F2000000)      <1>     mov byte [breakFlag], dl    ;Set the state
   679                              <1> .cbcget:
   680 00000A32 8A15(F2000000)      <1>     mov dl, byte [breakFlag]    ;Get the state
   681 00000A38 C3                  <1>     ret
   682                              <1> getInDOSflagPtr:   ;ah = 34h
   683 00000A39 488D15(C8000000)    <1>     lea rdx, inDOS
   684 00000A40 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   685 00000A47 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx  ;save ptr in rbx
   686 00000A4B C3                  <1>     ret
   687                              <1> getIntVector:      ;ah = 35h
   688                              <1> ;Called with:
   689                              <1> ;   al = Interrupt Number
   690                              <1> ;Returns:
   691                              <1> ;   rbx = Pointer to interrupt handler
   692 00000A4C 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   693 00000A4E B807F00000          <1>     mov eax, 0F007h
   694 00000A53 CD35                <1>     int 35h
   695 00000A55 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   696 00000A5C 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx  ;Save pointer in rbx
   697 00000A60 8A02                <1>     mov al, byte [rdx + callerFrame.rax]    ;Get the low byte in al
   698 00000A62 C3                  <1>     ret
   699                              <1> getDiskFreeSpace:  ;ah = 36h
   700 00000A63 84D2                <1>     test dl, dl
   701 00000A65 7408                <1>     jz .gdfsSkipdefault
   702 00000A67 8A15(F1000000)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   703 00000A6D EB02                <1>     jmp short .gdfsMain
   704                              <1> .gdfsSkipdefault:
   705 00000A6F FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   706                              <1> .gdfsMain:
   707 00000A71 E87FF9FFFF          <1>     call findDPB ;Get in rbp the dpb pointer for drive dl
   708 00000A76 84C0                <1>     test al, al
   709 00000A78 7434                <1>     jz .gdfsDPBFound
   710                              <1> ;Else, we at an error.
   711                              <1> ;Simply return with CY set and error code in al with extended error info
   712 00000A7A 66C705(CB000000)0F- <1>     mov word [errorExt], 15     ;Invalid drive error
   712 00000A82 00                  <1>
   713 00000A83 C605(CA000000)01    <1>     mov byte [errorLocus], 1    ;Not appropriate
   714 00000A8A C605(CE000000)08    <1>     mov byte [errorClass], 8    ;Drive not found
   715 00000A91 C605(CD000000)07    <1>     mov byte [errorAction], 7   ;Retry after user intervention
   716 00000A98 488B2D(08010000)    <1>     mov rbp, qword [oldRSP]
   717 00000A9F 66C74500FFFF        <1>     mov word [rbp + callerFrame.rax], -1    ;Set ax=FFFFh
   718 00000AA5 48814D5801000000    <1>     or qword [rbp + callerFrame.flags], 1   ;Set CF=CY
   719 00000AAD C3                  <1>     ret
   720                              <1> .gdfsDPBFound:
   721 00000AAE 8A4503              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
   722 00000AB1 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   723 00000AB3 8B550E              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   724 00000AB6 8A4D02              <1>     mov cl, byte [rbp + dpb.bBytesPerSectorShift]
   725 00000AB9 BB01000000          <1>     mov ebx, 1
   726 00000ABE D3E3                <1>     shl ebx, cl
   727 00000AC0 89D9                <1>     mov ecx, ebx    ;Save the value in ecx
   728 00000AC2 8B5D30              <1>     mov ebx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Ger # free clusters
   729 00000AC5 488B2D(08010000)    <1>     mov rbp, qword [oldRSP]
   730 00000ACC 48895518            <1>     mov qword [rbp + callerFrame.rdx], rdx
   731 00000AD0 66894D10            <1>     mov word [rbp + callerFrame.rcx], cx
   732 00000AD4 48895D08            <1>     mov qword [rbp + callerFrame.rbx], rbx
   733 00000AD8 C3                  <1>     ret
   734                              <1> 
   735                              <1> loadExecChild:     ;ah = 4Bh, EXEC
   736                              <1> terminateClean:    ;ah = 4Ch, EXIT
   737                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   738 00000AD9 C3                  <1>     ret
   739                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   740 00000ADA 48891D(D7000000)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   741 00000AE1 C3                  <1>     ret
   742                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   743 00000AE2 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   744 00000AE9 488B15(D7000000)    <1>     mov rdx, qword [currentPSP]
   745 00000AF0 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx   ;Set the caller pointer
   746 00000AF4 C3                  <1>     ret 
   747                              <1> getSysVarsPtr:     ;ah = 52h
   748 00000AF5 488D15(67000000)    <1>     lea rdx, sysVarsPtr
   749 00000AFC 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   750 00000B03 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx
   751 00000B07 C3                  <1>     ret
   752                              <1> createDPB:         ;ah = 53h, generates a DPB from a given BPB
   753                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   754                              <1> ;This is done so that the other fields of the DPB can be recycled
   755                              <1> ;Input: rsi = ptr to the BPB
   756                              <1> ;       rbp = ptr to the DPB
   757                              <1> ;bMediaDescriptor
   758 00000B08 8A4615              <1>     mov al, byte [rsi + bpb.media]
   759 00000B0B 884522              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   760                              <1> ;bAccessFlag
   761 00000B0E C64523FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Not accessed
   762                              <1> ;dFirstFreeCluster
   763 00000B12 C7452C00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   764                              <1> ;dNumberOfFreeClusters
   765 00000B19 C74530FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   766                              <1> ;bBytesPerSectorShift
   767 00000B20 668B460B            <1>     mov ax, word [rsi + bpb.bytsPerSec]
   768 00000B24 B107                <1>     mov cl, 7   ;Start with 128 byte sectors (not supported, min 512)
   769 00000B26 66D3E8              <1>     shr ax, cl  ;Shift down
   770                              <1> .cd0:
   771 00000B29 66D1E8              <1>     shr ax, 1
   772 00000B2C 7404                <1>     jz .cd1
   773 00000B2E FEC1                <1>     inc cl
   774 00000B30 EBF7                <1>     jmp short .cd0
   775                              <1> .cd1:
   776 00000B32 884D02              <1>     mov byte [rbp + dpb.bBytesPerSectorShift], cl
   777                              <1> ;bMaxSectorInCluster
   778 00000B35 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   779 00000B38 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   780 00000B3A 884503              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   781                              <1> ;bSectorsPerClusterShift
   782 00000B3D FEC0                <1>     inc al
   783 00000B3F 30C9                <1>     xor cl, cl
   784                              <1> .cd2:
   785 00000B41 D0E8                <1>     shr al, 1
   786 00000B43 7404                <1>     jz .cd3
   787 00000B45 FEC1                <1>     inc cl
   788 00000B47 EBF8                <1>     jmp short .cd2
   789                              <1> .cd3:
   790 00000B49 884D04              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   791                              <1> ;wFAToffset, number of reserved sectors in partition
   792 00000B4C 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   793 00000B50 66894505            <1>     mov word [rbp + dpb.wFAToffset], ax
   794                              <1> ;bNumberOfFATs
   795 00000B54 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   796 00000B57 884507              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   797                              <1> ;wNumberRootDirSectors
   798 00000B5A 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   799 00000B5E C1E005              <1>     shl eax, 5  ;Multiply by 32
   800 00000B61 0FB74E0B            <1>     movzx ecx, word [rsi + bpb.bytsPerSec]
   801 00000B65 FFC9                <1>     dec ecx
   802 00000B67 01C8                <1>     add eax, ecx
   803 00000B69 31D2                <1>     xor edx, edx    ;Clear for divide
   804 00000B6B F7F1                <1>     div ecx ;Divide 0:eax by ecx, (e)ax has number of clusters
   805 00000B6D 66894508            <1>     mov word [rbp + dpb.wNumberRootDirSectors], ax  ;0 for FAT32
   806                              <1> ;dFATlength, get the FAT length
   807 00000B71 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   808 00000B75 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   809 00000B78 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   810 00000B7A 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   811 00000B7D 894512              <1>     mov dword [rbp + dpb.dFATlength], eax
   812                              <1> ;Complex cases below...
   813                              <1> ;dClusterHeapOffset, start sector of the data area
   814 00000B80 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   815 00000B84 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   816 00000B87 85C0                <1>     test eax, eax
   817 00000B89 0F44C3              <1>     cmovz eax, ebx
   818                              <1> ;eax = FATsz
   819 00000B8C 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   820 00000B90 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   821 00000B93 85DB                <1>     test ebx, ebx
   822 00000B95 0F44D9              <1>     cmovz ebx, ecx 
   823                              <1> ;ebx = TotSec
   824 00000B98 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   825 00000B9B 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   826                              <1> .cd4:
   827 00000B9D 01C2                <1>     add edx, eax
   828 00000B9F FEC9                <1>     dec cl
   829 00000BA1 75FA                <1>     jnz .cd4
   830 00000BA3 89D0                <1>     mov eax, edx    ;Store product in eax
   831 00000BA5 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   832 00000BA9 01D0                <1>     add eax, edx
   833 00000BAB 0FB75508            <1>     movzx edx, word [rbp + dpb.wNumberRootDirSectors]
   834 00000BAF 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   835                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   836                              <1>     ;aka eax = Start sector of the data area in volume
   837 00000BB1 89450A              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   838                              <1> ;dClusterCount
   839 00000BB4 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   840 00000BB6 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   841 00000BB8 31D2                <1>     xor edx, edx
   842 00000BBA BB01000000          <1>     mov ebx, 1
   843 00000BBF 8A4D04              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   844 00000BC2 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   845 00000BC4 F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   846 00000BC6 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   847 00000BC8 89450E              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   848                              <1> ;dFirstUnitOfRootDir
   849 00000BCB 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   850 00000BD0 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   851 00000BD3 7709                <1>     ja .cd5
   852                              <1>     ;Else, we need to find the first sector of the root directory
   853                              <1>     ;Get the start sector of data area in volume 
   854                              <1>     ; and sub the number of sectors in the root directory
   855 00000BD5 8B450A              <1>     mov eax, dword [rbp + dpb.dClusterHeapOffset]
   856 00000BD8 0FB75D08            <1>     movzx ebx, word [rbp + dpb.wNumberRootDirSectors]
   857 00000BDC 29D8                <1>     sub eax, ebx    ;eax now has start sector of root dir
   858                              <1> .cd5:
   859 00000BDE 894516              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   860                              <1> ;Exit epilogue
   861 00000BE1 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   862 00000BE8 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   863 00000BEA C3                  <1>     ret
   864                              <1> getVerifySetting:  ;ah = 54h
   865 00000BEB 8A05(F3000000)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   866 00000BF1 C3                  <1>     ret
   867                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
   868 00000BF2 C3                  <1>     ret
   869                              <1> getExtendedError:  ;ah = 59h
   870 00000BF3 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   871 00000BFA 668B05(CB000000)    <1>     mov ax, word [errorExt]
   872 00000C01 8A2D(CA000000)      <1>     mov ch, byte [errorLocus]
   873 00000C07 8A3D(CE000000)      <1>     mov bh, byte [errorClass]
   874 00000C0D 8A1D(CD000000)      <1>     mov bl, byte [errorAction]
   875 00000C13 668902              <1>     mov word [rdx + callerFrame.rax], ax
   876 00000C16 66895A08            <1>     mov word [rdx + callerFrame.rbx], bx
   877 00000C1A 886A11              <1>     mov byte [rdx + callerFrame.rcx + 1], ch
   878 00000C1D C3                  <1>     ret
   879                              <1> getCritErrorInfo:  ;ah = 5Dh
   880                              <1> networkServices:   ;ah = 5Eh, do nothing
   881                              <1> networkRedirection:;ah = 5Fh, do nothing
   882 00000C1E C3                  <1>     ret
   883                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   884 00000C1F 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   885 00000C26 488B15(D7000000)    <1>     mov rdx, qword [currentPSP]
   886 00000C2D 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx  ;Save the current psp in rbx
   887 00000C31 C3                  <1>     ret
   888                              <1>                     ;ah = 63h, reserved
   889                              <1> setDriverLookahead:;ah = 64h, reserved
   890                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   891                              <1> return:
   892 00000C32 C3                  <1>     ret
   893                              <1> 
   894                              <1> kernelDispatchTable:
   895 00000C33 [F705000000000000]  <1>     dq simpleTerminate     ;AH = 00H, PROCESS MANAGEMENT
   896 00000C3B [3D01000000000000]  <1>     dq stdinReadEcho       ;AH = 01H, CHAR IO
   897 00000C43 [B201000000000000]  <1>     dq stdoutWrite         ;AH = 02H, CHAR IO
   898 00000C4B [EC01000000000000]  <1>     dq stdauxRead          ;AH = 03H, CHAR IO
   899 00000C53 [EC01000000000000]  <1>     dq stdauxWrite         ;AH = 04H, CHAR IO
   900 00000C5B [EC01000000000000]  <1>     dq stdprnWrite         ;AH = 05H, CHAR IO
   901 00000C63 [EC01000000000000]  <1>     dq directCONIO         ;AH = 06H, CHAR IO
   902 00000C6B [EC01000000000000]  <1>     dq waitDirectInNoEcho  ;AH = 07H, CHAR IO
   903 00000C73 [2602000000000000]  <1>     dq waitStdinNoEcho     ;AH = 08H, CHAR IO
   904 00000C7B [2702000000000000]  <1>     dq printString         ;AH = 09H, CHAR IO
   905 00000C83 [6902000000000000]  <1>     dq buffStdinInput      ;AH = 0AH, CHAR IO
   906 00000C8B [6902000000000000]  <1>     dq checkStdinStatus    ;AH = 0BH, CHAR IO
   907 00000C93 [6902000000000000]  <1>     dq clearbuffDoFunc     ;AH = 0CH, CHAR IO
   908 00000C9B [F805000000000000]  <1>     dq diskReset           ;AH = 0DH, DISK MANAGEMENT
   909 00000CA3 [8E06000000000000]  <1>     dq selectDisk          ;AH = 0EH, DISK MANAGEMENT
   910 00000CAB [6902000000000000]  <1>     dq openFileFCB         ;AH = 0FH, FILE OPERATION       FCB
   911 00000CB3 [6902000000000000]  <1>     dq closeFileFCB        ;AH = 10H, FILE OPERATION       FCB
   912 00000CBB [6902000000000000]  <1>     dq findFirstFileFCB    ;AH = 11H, FILE OPERATION       FCB
   913 00000CC3 [6902000000000000]  <1>     dq findNextFileFCB     ;AH = 12H, FILE OPERATION       FCB
   914 00000CCB [6902000000000000]  <1>     dq deleteFileFCB       ;AH = 13H, FILE OPERATION       FCB
   915 00000CD3 [6902000000000000]  <1>     dq sequentialReadFCB   ;AH = 14H, RECORD OPERATION     FCB
   916 00000CDB [6902000000000000]  <1>     dq sequentialWriteFCB  ;AH = 15H, RECORD OPERTAION     FCB
   917 00000CE3 [6902000000000000]  <1>     dq createFileFCB       ;AH = 16H, FILE OPERATION       FCB
   918 00000CEB [6902000000000000]  <1>     dq renameFileFCB       ;AH = 17H, FILE OPERATION       FCB
   919 00000CF3 [320C000000000000]  <1>     dq return              ;AH = 18H, RESERVED
   920 00000CFB [DF06000000000000]  <1>     dq getCurrentDisk      ;AH = 19H, DISK MANAGEMENT
   921 00000D03 [6A02000000000000]  <1>     dq setDTA              ;AH = 1AH, RECORD OPERATION     F/H
   922 00000D0B [E606000000000000]  <1>     dq FATinfoDefault      ;AH = 1BH, DISK MANAGEMENT
   923 00000D13 [E806000000000000]  <1>     dq FATinfoDevice       ;AH = 1CH, DISK MANAGEMENT
   924 00000D1B [320C000000000000]  <1>     dq return              ;AH = 1DH, RESERVED
   925 00000D23 [320C000000000000]  <1>     dq return              ;AH = 1EH, RESERVED
   926 00000D2B [AE07000000000000]  <1>     dq getCurrentDPBptr    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
   927 00000D33 [320C000000000000]  <1>     dq return              ;AH = 20H, RESERVED
   928 00000D3B [7D02000000000000]  <1>     dq randomReadFCB       ;AH = 21H, RECORD OPERATION     FCB
   929 00000D43 [7D02000000000000]  <1>     dq randomWriteFCB      ;AH = 22H, RECORD OPERATION     FCB
   930 00000D4B [7D02000000000000]  <1>     dq getFileSizeFCB      ;AH = 23H, FILE OPERATION       FCB
   931 00000D53 [7D02000000000000]  <1>     dq setRelRecordFCB     ;AH = 24H, RECORD OPERATION     FCB
   932 00000D5B [5C07000000000000]  <1>     dq setIntVector        ;AH = 25H, MISC. SYS. FUNCTION
   933 00000D63 [8707000000000000]  <1>     dq createNewPSP        ;AH = 26H, PROCESS MANAGEMENT
   934 00000D6B [7D02000000000000]  <1>     dq randBlockReadFCB    ;AH = 27H, RECORD OPERATION     FCB
   935 00000D73 [7D02000000000000]  <1>     dq randBlockWriteFCB   ;AH = 28H, RECORD OPERATION     FCB
   936 00000D7B [7D02000000000000]  <1>     dq parseFilenameFCB    ;AH = 29H, FILE OPERATION       FCB
   937 00000D83 [3903000000000000]  <1>     dq getDate             ;AH = 2AH, TIME AND DATE
   938 00000D8B [3903000000000000]  <1>     dq setDate             ;AH = 2BH, TIME AND DATE
   939 00000D93 [3903000000000000]  <1>     dq getTime             ;AH = 2CH, TIME AND DATE
   940 00000D9B [3903000000000000]  <1>     dq setTime             ;AH = 2DH, TIME AND DATE
   941 00000DA3 [8807000000000000]  <1>     dq setResetVerify      ;AH = 2EH, DISK MANAGEMENT
   942 00000DAB [7E02000000000000]  <1>     dq getDTA              ;AH = 2FH, RECORD OPERATION     F/H
   943 00000DB3 [9607000000000000]  <1>     dq getDOSversion       ;AH = 30H, MISC. SYS. FUNCTION
   944 00000DBB [AD07000000000000]  <1>     dq terminateStayRes    ;AH = 31H, PROCESS MANAGEMENT
   945 00000DC3 [B007000000000000]  <1>     dq getDeviceDPBptr     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
   946 00000DCB [280A000000000000]  <1>     dq ctrlBreakCheck      ;AH = 33H, MISC. SYS. FUNCTION
   947 00000DD3 [390A000000000000]  <1>     dq getInDOSflagPtr     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
   948 00000DDB [4C0A000000000000]  <1>     dq getIntVector        ;AH = 35H, MISC. SYS. FUNCTION
   949 00000DE3 [630A000000000000]  <1>     dq getDiskFreeSpace    ;AH = 36H, DISK MANAGEMENT
   950 00000DEB [3A03000000000000]  <1>     dq getsetSwitchChar    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
   951 00000DF3 [3A03000000000000]  <1>     dq getsetCountryInfo   ;AH = 38H, MISC. SYS. FUNCTION
   952 00000DFB [3C01000000000000]  <1>     dq makeDIR             ;AH = 39H, DIRECTORY OPERATION
   953 00000E03 [3C01000000000000]  <1>     dq removeDIR           ;AH = 3AH, DIRECTORY OPERATION
   954 00000E0B [3C01000000000000]  <1>     dq changeCurrentDIR    ;AH = 3BH, DIRECTORY OPERATION
   955 00000E13 [9102000000000000]  <1>     dq createFileHdl       ;AH = 3CH, FILE OPERATION       HANDLE
   956 00000E1B [9102000000000000]  <1>     dq openFileHdl         ;AH = 3DH, FILE OPERATION       HANDLE
   957 00000E23 [9102000000000000]  <1>     dq closeFileHdl        ;AH = 3EH, FILE OPERATION       HANDLE
   958 00000E2B [9102000000000000]  <1>     dq readFileHdl         ;AH = 3FH, RECORD OPERATION     HANDLE
   959 00000E33 [9102000000000000]  <1>     dq writeFileHdl        ;AH = 40H, RECORD OPERATION     HANDLE
   960 00000E3B [9102000000000000]  <1>     dq deleteFileHdl       ;AH = 41H, FILE OPERATION       HANDLE
   961 00000E43 [9102000000000000]  <1>     dq movFileReadPtr      ;AH = 42H, RECORD OPERATION     HANDLE
   962 00000E4B [9102000000000000]  <1>     dq changeFileModeHdl   ;AH = 43H, FILE OPERATION       HANDLE
   963 00000E53 [9102000000000000]  <1>     dq ioctrl              ;AH = 44H, MISC. SYS. FUNCTION
   964 00000E5B [9102000000000000]  <1>     dq duplicateHandle     ;AH = 45H, FILE OPERATION       HANDLE
   965 00000E63 [9102000000000000]  <1>     dq forceDuplicateHdl   ;AH = 46H, FILE OPERATION       HANDLE
   966 00000E6B [3C01000000000000]  <1>     dq getCurrentDIR       ;AH = 47H, DIRECTORY OPERATION
   967 00000E73 [CD02000000000000]  <1>     dq allocateMemory      ;AH = 48H, MEMORY MANAGEMENT
   968 00000E7B [CD02000000000000]  <1>     dq freeMemory          ;AH = 49H, MEMORY MANAGEMENT
   969 00000E83 [CD02000000000000]  <1>     dq reallocMemory       ;AH = 4AH, MEMORY MANAGEMENT
   970 00000E8B [D90A000000000000]  <1>     dq loadExecChild       ;AH = 4BH, PROCESS MANAGEMENT
   971 00000E93 [D90A000000000000]  <1>     dq terminateClean      ;AH = 4CH, PROCESS MANAGEMENT
   972 00000E9B [D90A000000000000]  <1>     dq getRetCodeChild     ;AH = 4DH, PROCESS MANAGEMENT
   973 00000EA3 [9102000000000000]  <1>     dq findFirstFileHdl    ;AH = 4EH, FILE OPERATION       HANDLE
   974 00000EAB [9102000000000000]  <1>     dq findNextFileHdl     ;AH = 4FH, FILE OPERATION       HANDLE
   975 00000EB3 [DA0A000000000000]  <1>     dq setCurrProcessID    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   976 00000EBB [E20A000000000000]  <1>     dq getCurrProcessID    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   977 00000EC3 [F50A000000000000]  <1>     dq getSysVarsPtr       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   978 00000ECB [080B000000000000]  <1>     dq createDPB           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   979 00000ED3 [EB0B000000000000]  <1>     dq getVerifySetting    ;AH = 54H, DISK MANAGEMENT
   980 00000EDB [F20B000000000000]  <1>     dq createPSP           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   981 00000EE3 [9102000000000000]  <1>     dq renameFile          ;AH = 56H, FILE OPERATION       HANDLE
   982 00000EEB [3C01000000000000]  <1>     dq getSetFileDateTime  ;AH = 57H, FILE OPERATION       HANDLE
   983 00000EF3 [CD02000000000000]  <1>     dq getsetMallocStrat   ;AH = 58H, MEMORY MANAGEMENT
   984 00000EFB [F30B000000000000]  <1>     dq getExtendedError    ;AH = 59H, MISC. SYS. FUNCTION
   985 00000F03 [9102000000000000]  <1>     dq createUniqueFile    ;AH = 5AH, FILE OPERATION       HANDLE
   986 00000F0B [9102000000000000]  <1>     dq createNewFile       ;AH = 5BH, FILE OPERATION       HANDLE
   987 00000F13 [9102000000000000]  <1>     dq lockUnlockFile      ;AH = 5CH, RECORD OPERATION     HANDLE
   988 00000F1B [1E0C000000000000]  <1>     dq getCritErrorInfo    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   989 00000F23 [1E0C000000000000]  <1>     dq networkServices     ;AH = 5EH, RESERVED NETWORK FUNCTION
   990 00000F2B [1E0C000000000000]  <1>     dq networkRedirection  ;AH = 5FH, RESERVED NETWORK FUNCTION
   991 00000F33 [3C01000000000000]  <1>     dq trueName            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   992 00000F3B [320C000000000000]  <1>     dq return              ;AH = 61H, RESERVED
   993 00000F43 [1F0C000000000000]  <1>     dq getPSPaddr          ;AH = 62H, PROCESS MANAGEMENT
   994 00000F4B [320C000000000000]  <1>     dq return              ;AH = 63H, RESERVED
   995 00000F53 [320C000000000000]  <1>     dq setDriverLookahead  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   996 00000F5B [3A03000000000000]  <1>     dq getExtLocalInfo     ;AH = 65H, MISC. SYS. FUNCTION
   997 00000F63 [3A03000000000000]  <1>     dq getsetGlobalCP      ;AH = 66H, MISC. SYS. FUNCTION
   998 00000F6B [9102000000000000]  <1>     dq setHandleCount      ;AH = 67H, FILE OPERAITON       F/H
   999 00000F73 [9102000000000000]  <1>     dq commitFile          ;AH = 68H, FILE OPERATION       HANDLE
  1000 00000F7B [320C000000000000]  <1>     dq getsetDiskSerial    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
  1001                              <1> kernelDispatchTableL  equ $ - kernelDispatchTable 
    22                                  %include "int44h.asm"
    23                              <1> critErrorHandler:   ;Int 44h
    24                              <1> ;User Stack in usage here, must be swapped to before this is called
    25                              <1> ;Entered with:  
    26                              <1> ;               AH = Critical Error Bitfield
    27                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    28                              <1> ;               Bit 6 - Reserved
    29                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    30                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    31                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    32                              <1> ;               Bits [2-1] = Affected Disk Error
    33                              <1> ;                     0 0   DOS area
    34                              <1> ;                     0 1   FAT area
    35                              <1> ;                     1 0   Directory area
    36                              <1> ;                     1 1   Data area
    37                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    38                              <1> ;               AL  = Failing drive number if AH[7] = 0
    39                              <1> ;               DIL = Error code for errorMsg
    40                              <1> ;               RSI = EA of Device Header for which device the error occured
    41                              <1> ;Return:
    42                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    43                              <1> ;                  = 1 - Retry the Operation    (Retry)
    44                              <1> ;                  = 2 - Terminate the Program  (Abort)
    45                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    46 00000F83 53                  <1>     push rbx
    47 00000F84 51                  <1>     push rcx
    48 00000F85 52                  <1>     push rdx
    49 00000F86 57                  <1>     push rdi
    50 00000F87 56                  <1>     push rsi
    51 00000F88 FC                  <1>     cld         ;Make String ops go forward
    52                              <1> 
    53 00000F89 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    54 00000F8C 488D155E020000      <1>     lea rdx, qword [.crlf]
    55 00000F93 B409                <1>     mov ah, 09h ;Print String
    56 00000F95 CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
    57                              <1> 
    58 00000F97 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    59 00000F9D B90C000000          <1>     mov ecx, 0Ch
    60 00000FA2 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    61 00000FA4 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    62 00000FA7 480FB7FF            <1>     movzx rdi, di
    63 00000FAB 4889FA              <1>     mov rdx, rdi    ;Copy error code
    64 00000FAE 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    65 00000FB2 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    66 00000FB5 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    67 00000FB8 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    68 00000FBF 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    69 00000FC3 B409                <1>     mov ah, 09h ;Print String
    70 00000FC5 CD41                <1>     int 41h     ;Call DOS to print first part of message
    71                              <1> 
    72 00000FC7 488D1505020000      <1>     lea rdx, qword [.readmsg]
    73 00000FCE 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    74 00000FD5 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    75 00000FD8 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    76 00000FDC B409                <1>     mov ah, 09h ;Print String
    77 00000FDE CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    78                              <1> 
    79 00000FE0 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    80 00000FE3 0F85DF000000        <1>     jnz .charError
    81                              <1> ;Disk error continues here
    82 00000FE9 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    83 00000FF0 B409                <1>     mov ah, 09h
    84 00000FF2 CD41                <1>     int 41h
    85 00000FF4 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    86 00000FF6 80C241              <1>     add dl, "A" ;Add ASCII code
    87 00000FF9 B402                <1>     mov ah, 02h ;Print char in dl
    88 00000FFB CD41                <1>     int 41h
    89                              <1> .userInput:
    90 00000FFD 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
    91 00001004 B409                <1>     mov ah, 09h
    92 00001006 CD41                <1>     int 41h
    93                              <1> ;Abort, Retry, Ignore, Fail is word order
    94                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    95                              <1> .userAbort:
    96                              <1> ;Abort is always an option
    97 00001008 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
    98 0000100F B409                <1>     mov ah, 09h
    99 00001011 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
   100                              <1> .userRetry:
   101 00001013 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   102 00001016 7416                <1>     jz .userIgnore    ;If clear, dont print message
   103 00001018 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
   104 0000101F B409                <1>     mov ah, 09h
   105 00001021 CD41                <1>     int 41h
   106 00001023 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
   107 0000102A B409                <1>     mov ah, 09h
   108 0000102C CD41                <1>     int 41h
   109                              <1> .userIgnore:
   110 0000102E F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   111 00001031 7416                <1>     jz .userFail
   112 00001033 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
   113 0000103A B409                <1>     mov ah, 09h
   114 0000103C CD41                <1>     int 41h
   115 0000103E 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
   116 00001045 B409                <1>     mov ah, 09h
   117 00001047 CD41                <1>     int 41h
   118                              <1> .userFail:
   119 00001049 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   120 0000104C 7416                <1>     jz .userMsgEnd
   121 0000104E 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
   122 00001055 B409                <1>     mov ah, 09h
   123 00001057 CD41                <1>     int 41h
   124 00001059 488D15A7010000      <1>     lea rdx, qword [.failmsg]
   125 00001060 B409                <1>     mov ah, 09h
   126 00001062 CD41                <1>     int 41h
   127                              <1> .userMsgEnd:
   128 00001064 488D15A4010000      <1>     lea rdx, qword [.endMsg]
   129 0000106B B409                <1>     mov ah, 09h
   130 0000106D CD41                <1>     int 41h
   131                              <1> ;Get user input now 
   132 0000106F 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   133 00001071 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   134 00001078 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   135 0000107A CD41                <1>     int 41h ;Get char in al
   136 0000107C 3C61                <1>     cmp al, "a" ;Chack if lowercase
   137 0000107E 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   138 00001080 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   139                              <1> .uip1:
   140 00001082 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   141 00001083 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   142 00001085 FFC1                <1>     inc ecx
   143 00001087 81F904000000        <1>     cmp ecx, 4
   144 0000108D 75F3                <1>     jne .uip1
   145 0000108F E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   146                              <1> .validInput:
   147 00001094 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   148                              <1> ;Now check if the input is permitted
   149 00001096 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   150 00001098 7427                <1>     je .cehExit
   151 0000109A 84C0                <1>     test al, al ;Check if 0 => Ignore
   152 0000109C 740F                <1>     je .viIgnore
   153 0000109E 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   154 000010A0 7416                <1>     je .viRetry
   155                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   156 000010A2 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   157 000010A5 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   158 000010AB EB14                <1>     jmp short .cehExit
   159                              <1> .viIgnore:
   160 000010AD F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   161 000010B0 0F8447FFFFFF        <1>     jz .userInput
   162 000010B6 EB09                <1>     jmp short .cehExit
   163                              <1> .viRetry:
   164 000010B8 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   165 000010BB 0F843CFFFFFF        <1>     jz .userInput
   166                              <1> .cehExit:
   167 000010C1 5E                  <1>     pop rsi
   168 000010C2 5F                  <1>     pop rdi
   169 000010C3 5A                  <1>     pop rdx
   170 000010C4 59                  <1>     pop rcx
   171 000010C5 5B                  <1>     pop rbx
   172 000010C6 48CF                <1>     iretq
   173                              <1> .charError:
   174 000010C8 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   175 000010CD 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   176                              <1> .ce1:
   177 000010D4 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   178 000010D5 88C2                <1>     mov dl, al  ;Move char into dl
   179 000010D7 B402                <1>     mov ah, 02h
   180 000010D9 CD41                <1>     int 41h ;Print char
   181 000010DB E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   182 000010DD E91BFFFFFF          <1>     jmp .userInput
   183                              <1> 
   184                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   185 000010E2 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   185 000010EB 746563742024202020  <1>
   186 000010F4 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   186 000010FD 6E6974202420202020  <1>
   187 00001106 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   187 0000110F 202420202020202020  <1>
   188 00001118 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   188 00001121 6F6D6D616E64202420  <1>
   189 0000112A 446174612024202020- <1>             db "Data $            "       ;Error 4
   189 00001133 202020202020202020  <1>
   190 0000113C 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   190 00001145 737420242020202020  <1>
   191 0000114E 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   191 00001157 202020202020202020  <1>
   192 00001160 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   192 00001169 656469612024202020  <1>
   193 00001172 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   193 0000117B 7420466F756E642024  <1>
   194 00001184 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   194 0000118D 706572202420202020  <1>
   195 00001196 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   195 0000119F 6C7420242020202020  <1>
   196 000011A8 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   196 000011B1 742024202020202020  <1>
   197 000011BA 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   197 000011C3 61696C757265202420  <1>
   198                              <1> 
   199 000011CC 64726976652024      <1> .drive      db "drive $"
   200 000011D3 6572726F7220726561- <1> .readmsg    db "error reading $"
   200 000011DC 64696E672024        <1>
   201 000011E2 6572726F7220777269- <1> .writemsg   db "error writing $"
   201 000011EB 74696E672024        <1>
   202 000011F1 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   203 000011F4 41626F727424        <1> .abortmsg   db "Abort$" 
   204 000011FA 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   205 00001201 526574727924        <1> .retrymsg   db "Retry$"
   206 00001207 4661696C24          <1> .failmsg    db "Fail$"
   207 0000120C 2C2024              <1> .betweenMsg db ", $"
   208 0000120F 3F2024              <1> .endMsg     db "? $"
   209 00001212 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
    23                                  %include "dosDrivers.asm" 
    24                              <1> ;-----------------------------------:
    25                              <1> ;          Driver routines          :
    26                              <1> ;-----------------------------------:
    27                              <1> drivers:
    28                              <1> conHdr:
    29 00001216 [3812000000000000]  <1>     dq auxHdr
    30 0000121E 1308                <1>     dw 0813h
    31 00001220 [B613000000000000]  <1>     dq commonStrat
    32 00001228 [C513000000000000]  <1>     dq conDriver
    33 00001230 434F4E2020202020    <1>     db "CON     "
    34                              <1> auxHdr:
    35 00001238 [5A12000000000000]  <1>     dq prnHdr
    36 00001240 0080                <1>     dw 08000h
    37 00001242 [B613000000000000]  <1>     dq commonStrat
    38 0000124A [8A16000000000000]  <1>     dq com1Intr
    39 00001252 4155582020202020    <1>     db "AUX     "
    40                              <1> prnHdr:
    41 0000125A [7C12000000000000]  <1>     dq clkHdr
    42 00001262 40A0                <1>     dw 0A040h
    43 00001264 [BE13000000000000]  <1>     dq nulStrat
    44 0000126C [C413000000000000]  <1>     dq nulIntr
    45 00001274 50524E2020202020    <1>     db "PRN     "
    46                              <1> clkHdr:
    47 0000127C [9E12000000000000]  <1>     dq msdHdr
    48 00001284 0880                <1>     dw 08008h
    49 00001286 [B613000000000000]  <1>     dq commonStrat
    50 0000128E [FD14000000000000]  <1>     dq clkDriver
    51 00001296 434C4F434B242020    <1>     db "CLOCK$  "
    52                              <1> msdHdr:
    53 0000129E [C012000000000000]  <1>     dq com1Hdr
    54 000012A6 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    55 000012A8 [B613000000000000]  <1>     dq commonStrat
    56 000012B0 [2F18000000000000]  <1>     dq msdDriver
    57 000012B8 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    58                              <1> com1Hdr:
    59 000012C0 [E212000000000000]  <1>     dq com2Hdr
    60 000012C8 0080                <1>     dw 08000h
    61 000012CA [B613000000000000]  <1>     dq commonStrat
    62 000012D2 [8A16000000000000]  <1>     dq com1Intr
    63 000012DA 434F4D3120202020    <1>     db "COM1    "
    64                              <1> com2Hdr:
    65 000012E2 [0413000000000000]  <1>     dq com3Hdr
    66 000012EA 0080                <1>     dw 08000h
    67 000012EC [B613000000000000]  <1>     dq commonStrat
    68 000012F4 [9316000000000000]  <1>     dq com2Intr
    69 000012FC 434F4D3220202020    <1>     db "COM2    "
    70                              <1> com3Hdr:
    71 00001304 [2613000000000000]  <1>     dq com4Hdr
    72 0000130C 0080                <1>     dw 08000h
    73 0000130E [B613000000000000]  <1>     dq commonStrat
    74 00001316 [9C16000000000000]  <1>     dq com3Intr
    75 0000131E 434F4D3320202020    <1>     db "COM3    "
    76                              <1> com4Hdr:
    77 00001326 [4813000000000000]  <1>     dq lpt1Hdr
    78 0000132E 0080                <1>     dw 08000h
    79 00001330 [B613000000000000]  <1>     dq commonStrat
    80 00001338 [A516000000000000]  <1>     dq com4Intr
    81 00001340 434F4D3420202020    <1>     db "COM4    "
    82                              <1> lpt1Hdr:
    83 00001348 [6A13000000000000]  <1>     dq lpt2Hdr
    84 00001350 40A0                <1>     dw 0A040h
    85 00001352 [BE13000000000000]  <1>     dq nulStrat
    86 0000135A [C413000000000000]  <1>     dq nulIntr
    87 00001362 4C50543120202020    <1>     db "LPT1    "
    88                              <1> lpt2Hdr:
    89 0000136A [8C13000000000000]  <1>     dq lpt3Hdr
    90 00001372 40A0                <1>     dw 0A040h
    91 00001374 [BE13000000000000]  <1>     dq nulStrat
    92 0000137C [C413000000000000]  <1>     dq nulIntr
    93 00001384 4C50543220202020    <1>     db "LPT2    "
    94                              <1> lpt3Hdr:
    95 0000138C FFFFFFFFFFFFFFFF    <1>     dq -1
    96 00001394 40A0                <1>     dw 0A040h
    97 00001396 [BE13000000000000]  <1>     dq nulStrat
    98 0000139E [C413000000000000]  <1>     dq nulIntr
    99 000013A6 4C50543320202020    <1>     dq "LPT3    "
   100 000013AE 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
   101                              <1> commonStrat:
   102                              <1> ;DOS calls this function with rbx=Ptr to request header
   103 000013B6 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
   104 000013BD C3                  <1>     ret
   105                              <1> nulStrat:
   106 000013BE 66C743030001        <1>     mov word [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
   107                              <1> nulIntr:
   108 000013C4 C3                  <1>     ret
   109                              <1> 
   110                              <1> conDriver:
   111 000013C5 50                  <1>     push rax
   112 000013C6 53                  <1>     push rbx
   113 000013C7 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
   114 000013CE B003                <1>     mov al, 03h ;Unknown Command
   115 000013D0 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   116 000013D4 7735                <1>     ja .conWriteErrorCode ;If yes, error!
   117                              <1> 
   118 000013D6 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   119 000013D9 3C04                <1>     cmp al, 4
   120 000013DB 743D                <1>     jz .conRead
   121 000013DD 3C05                <1>     cmp al, 5
   122 000013DF 747F                <1>     jz .conNondestructiveRead
   123 000013E1 3C06                <1>     cmp al, 6
   124 000013E3 0F84A8000000        <1>     jz .conInputStatus
   125 000013E9 3C07                <1>     cmp al, 7
   126 000013EB 0F84B0000000        <1>     jz .conFlushInputBuffers
   127 000013F1 3C08                <1>     cmp al, 8
   128 000013F3 0F84CA000000        <1>     jz .conWrite
   129 000013F9 3C09                <1>     cmp al, 9
   130 000013FB 0F84C2000000        <1>     jz .conWrite
   131 00001401 3C0A                <1>     cmp al, 0Ah
   132 00001403 0F84E3000000        <1>     jz .conOutputStatus
   133 00001409 EB06                <1>     jmp short .conExit  ;All other valid functions return done
   134                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
   135 0000140B B480                <1>     mov ah, 80h ;Set error bit
   136 0000140D 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   137                              <1> .conExit:
   138 00001411 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   139 00001417 5B                  <1>     pop rbx
   140 00001418 58                  <1>     pop rax
   141 00001419 C3                  <1>     ret
   142                              <1> .conRead:    ;Function 4
   143 0000141A B005                <1>     mov al, 05h ;Bad request structure length?
   144 0000141C 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   145 0000141F 75EA                <1>     jne .conWriteErrorCode
   146                              <1> 
   147 00001421 57                  <1>     push rdi
   148 00001422 51                  <1>     push rcx
   149 00001423 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   150 00001427 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   151                              <1> .cre1:
   152 00001429 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   153 0000142C 741C                <1>     je .cre2
   154 0000142E 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
   155 00001435 751A                <1>     jnz .cre3   ;No, get the buffer value
   156 00001437 31C0                <1>     xor eax, eax
   157 00001439 CD36                <1>     int 36h
   158                              <1> .cre11:
   159 0000143B AA                  <1>     stosb
   160 0000143C 84C0                <1>     test al, al ;Was the ascii code 0?
   161 0000143E 7506                <1>     jnz .cre12  ;No, skip storing scancode
   162 00001440 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
   163                              <1> .cre12:
   164 00001446 FFC1                <1>     inc ecx ;Inc chars stored in buffer
   165 00001448 EBDF                <1>     jmp short .cre1
   166                              <1> .cre2:
   167 0000144A 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   168 0000144D 59                  <1>     pop rcx
   169 0000144E 5F                  <1>     pop rdi
   170 0000144F EBC0                <1>     jmp short .conExit
   171                              <1> .cre3:
   172 00001451 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   173 00001457 C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   174 0000145E EBDB                <1>     jmp short .cre11
   175                              <1> 
   176                              <1> .conNondestructiveRead:  ;Function 5
   177 00001460 B005                <1>     mov al, 05h ;Bad request structure length?
   178 00001462 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   179 00001465 75A4                <1>     jne .conWriteErrorCode
   180 00001467 803D8E00000000      <1>     cmp byte [.conBuf], 0
   181 0000146E 7519                <1>     jnz .cnr2
   182 00001470 B401                <1>     mov ah, 01h     ;Get key if exists
   183 00001472 CD36                <1>     int 36h
   184 00001474 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   185                              <1>     ;Keystroke available
   186                              <1> .cnr0:
   187 00001476 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Move char in al
   188 00001479 E993FFFFFF          <1>     jmp .conExit
   189                              <1> .cnr1: ;No keystroke available
   190 0000147E 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 0200h   ;Set busy bit
   191 00001484 E988FFFFFF          <1>     jmp .conExit
   192                              <1> .cnr2:
   193 00001489 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   194 0000148F EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   195                              <1> 
   196                              <1> .conInputStatus:         ;Function 6
   197 00001491 B005                <1>     mov al, 05h ;Bad request structure length?
   198 00001493 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   199 00001496 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   200 0000149C E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   201                              <1> 
   202                              <1> .conFlushInputBuffers:   ;Function 7
   203 000014A1 B005                <1>     mov al, 05h ;Bad request structure length?
   204 000014A3 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   205 000014A6 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   206 000014AC C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   207                              <1> .cfib0:
   208 000014B3 B401                <1>     mov ah, 01      ;Get buffer status
   209 000014B5 CD36                <1>     int 36h
   210 000014B7 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   211 000014BD 30E4                <1>     xor ah, ah
   212 000014BF CD36                <1>     int 36h ;Read key to flush from buffer
   213 000014C1 EBF0                <1>     jmp short .cfib0
   214                              <1> 
   215                              <1> .conWrite:   ;Function 8 and 9
   216 000014C3 B005                <1>     mov al, 05h ;Bad request structure length?
   217 000014C5 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   218 000014C8 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   219                              <1> 
   220 000014CE 56                  <1>     push rsi
   221 000014CF 51                  <1>     push rcx
   222 000014D0 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   223 000014D4 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   224                              <1> .cw1: 
   225 000014D6 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   226 000014D9 7407                <1>     je .cw2
   227 000014DB AC                  <1>     lodsb   ;Get char into al, and inc rsi
   228 000014DC CD49                <1>     int 49h ;Fast print char
   229 000014DE FFC1                <1>     inc ecx
   230 000014E0 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   231                              <1> .cw2:
   232 000014E2 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   233 000014E5 59                  <1>     pop rcx
   234 000014E6 5E                  <1>     pop rsi
   235 000014E7 E925FFFFFF          <1>     jmp .conExit
   236                              <1> .conOutputStatus:   ;Function 0Ah
   237 000014EC B005                <1>     mov al, 05h ;Bad request structure length?
   238 000014EE 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   239 000014F1 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   240 000014F7 E915FFFFFF          <1>     jmp .conExit
   241                              <1> 
   242 000014FC 00                  <1> .conBuf db 0    ;Single byte buffer
   243                              <1> clkDriver:
   244 000014FD 50                  <1>     push rax
   245 000014FE 53                  <1>     push rbx
   246 000014FF 51                  <1>     push rcx
   247 00001500 52                  <1>     push rdx
   248 00001501 56                  <1>     push rsi
   249 00001502 55                  <1>     push rbp
   250 00001503 488B1DA4FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   251 0000150A B003                <1>     mov al, 03h ;Unknown Command
   252 0000150C 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   253 00001510 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   254                              <1> 
   255 00001512 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   256 00001515 3C04                <1>     cmp al, 04h
   257 00001517 7437                <1>     jz .clkRead
   258 00001519 3C06                <1>     cmp al, 06h
   259 0000151B 0F8494000000        <1>     jz .clkInputStatus
   260 00001521 3C07                <1>     cmp al, 07h
   261 00001523 0F8498000000        <1>     jz .clkFlushInputBuffers
   262 00001529 3C08                <1>     cmp al, 08h
   263 0000152B 0F84A0000000        <1>     jz .clkWrite
   264 00001531 3C09                <1>     cmp al, 09h
   265 00001533 0F8498000000        <1>     jz .clkWrite
   266 00001539 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   267                              <1> .clkNotFunctioning:
   268 0000153B B002                <1>     mov al, 02h ;Device not ready error
   269                              <1> .clkWriteErrorCode:
   270 0000153D B480                <1>     mov ah, 80h ;Set error bit
   271 0000153F 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   272                              <1> .clkExit:
   273 00001543 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   274 00001549 5D                  <1>     pop rbp
   275 0000154A 5E                  <1>     pop rsi
   276 0000154B 5A                  <1>     pop rdx
   277 0000154C 59                  <1>     pop rcx
   278 0000154D 5B                  <1>     pop rbx
   279 0000154E 58                  <1>     pop rax
   280 0000154F C3                  <1>     ret
   281                              <1> 
   282                              <1> .clkRead:           ;Function 4
   283 00001550 B005                <1>     mov al, 05h ;Bad request structure length?
   284 00001552 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   285 00001555 75E6                <1>     jne .clkWriteErrorCode
   286                              <1> 
   287 00001557 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   288 0000155A 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   289 0000155E 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   290 00001565 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   291 00001569 30E4                <1>     xor ah, ah
   292 0000156B CD3A                <1>     int 3Ah         ;Read the system timer
   293 0000156D 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   294 0000156F 740D                <1>     jz .clkr1       ;Nope, now just time 
   295 00001571 30E4                <1>     xor ah, ah
   296                              <1>     ;This works as al should keep count of the # of days passed since last read
   297 00001573 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   298 00001577 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   299                              <1> .clkr1:
   300 0000157E 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   301 00001581 0FB7D2              <1>     movzx edx, dx
   302 00001584 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   303 00001586 89D0                <1>     mov eax, edx
   304 00001588 31D2                <1>     xor edx, edx
   305 0000158A 89D8                <1>     mov eax, ebx
   306 0000158C B944040000          <1>     mov ecx, 1092   
   307 00001591 F7F1                <1>     div ecx
   308 00001593 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   309 00001596 89D0                <1>     mov eax, edx    ;Get remainder in eax
   310 00001598 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   311 0000159C 31D2                <1>     xor edx, edx
   312 0000159E B95B000000          <1>     mov ecx, 91 ;5*18.2
   313 000015A3 F7F1                <1>     div ecx
   314 000015A5 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   315 000015A8 89D0                <1>     mov eax, edx    ;Get remainder in eax
   316                              <1>     ;lea eax, dword [eax + 4*eax]
   317                              <1>     ;add eax, edx    ;Essentially multiply by 6
   318 000015AA 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   319 000015AD 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   320 000015B0 E98EFFFFFF          <1>     jmp .clkExit
   321                              <1> 
   322                              <1> .clkInputStatus:    ;Function 6
   323                              <1> ;Always return ready
   324 000015B5 B005                <1>     mov al, 05h ;Bad request structure length?
   325 000015B7 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   326 000015BA 7581                <1>     jne .clkWriteErrorCode
   327 000015BC E982FFFFFF          <1>     jmp .clkExit
   328                              <1> .clkFlushInputBuffers:  ;Function 7
   329                              <1> ;Always return done immediately
   330 000015C1 B005                <1>     mov al, 05h ;Bad request structure length?
   331 000015C3 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   332 000015C6 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   333 000015CC E972FFFFFF          <1>     jmp .clkExit
   334                              <1> 
   335                              <1> .clkWrite:          ;Functions 8 and 9
   336 000015D1 B005                <1>     mov al, 05h ;Bad request structure length?
   337 000015D3 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   338 000015D6 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   339                              <1> 
   340 000015DC 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   341 000015DF 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   342 000015E3 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   343 000015E7 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   344                              <1> 
   345 000015EE 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   346 000015F0 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   347 000015F4 B105                <1>     mov cl, 5
   348 000015F6 F6F1                <1>     div cl          ;Divide al by 5
   349 000015F8 30E4                <1>     xor ah, ah      ;Remove the remainder
   350 000015FA 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   351                              <1> ;Using the decimal part of this formula for the low count
   352                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   353 000015FC 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   354 000015FF B912000000          <1>     mov ecx, 18
   355 00001604 F7E1                <1>     mul ecx  
   356 00001606 01C3                <1>     add ebx, eax
   357                              <1> 
   358 00001608 31D2                <1>     xor edx, edx
   359 0000160A 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   360 0000160E B944040000          <1>     mov ecx, 1092
   361 00001613 F7E1                <1>     mul ecx
   362 00001615 01C3                <1>     add ebx, eax
   363 00001617 89DA                <1>     mov edx, ebx    ;edx now has low count
   364 00001619 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   365 0000161D B401                <1>     mov ah, 01h     ;Set the system time
   366 0000161F CD3A                <1>     int 3Ah
   367                              <1> 
   368 00001621 4889F3              <1>     mov rbx, rsi
   369 00001624 E91AFFFFFF          <1>     jmp .clkExit
   370                              <1> 
   371                              <1> .clkBCDtoHex:
   372                              <1> ;Converts a BCD value to a Hex byte
   373                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   374 00001629 51                  <1>     push rcx
   375 0000162A 0FB6C0              <1>     movzx eax, al   ;Zero extend
   376 0000162D 89C1                <1>     mov ecx, eax    ;Save al in ecx
   377 0000162F 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   378 00001634 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   379 0000163A C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   380                              <1> .cbth0:
   381 0000163D 050A000000          <1>     add eax, 10
   382 00001642 E2F9                <1>     loop .cbth0
   383 00001644 59                  <1>     pop rcx
   384 00001645 C3                  <1>     ret
   385                              <1> 
   386                              <1> .clkHexToBCD:
   387                              <1> ;Converts a Hex byte into two BCD digits
   388                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   389 00001646 51                  <1>     push rcx
   390 00001647 0FB6C0              <1>     movzx eax, al   ;Zero extend
   391 0000164A 31C9                <1>     xor ecx, ecx
   392                              <1> .chtb0:
   393 0000164C 3D0A000000          <1>     cmp eax, 10
   394 00001651 7209                <1>     jb .chtb1
   395 00001653 2D0A000000          <1>     sub eax, 10
   396 00001658 FFC1                <1>     inc ecx
   397 0000165A EBF0                <1>     jmp short .chtb0
   398                              <1> .chtb1:
   399 0000165C C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   400 0000165F 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   401 00001661 59                  <1>     pop rcx
   402 00001662 C3                  <1>     ret
   403 00001663 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   404                              <1> ;When counting the number of days, first compute the number of years since
   405                              <1> ; 1980 and your year. 
   406                              <1> ;Then, using the table below, find the number of leap years between 1980
   407                              <1> ; and (YourYear - 1). 
   408                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   409                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   410                              <1> ;Use the months table to get the number of days in a normal month as leap 
   411                              <1> ; years are added using the previous comment.
   412                              <1> ;Finally check if the date is after 28th Feb. If it is, check if your year is 
   413                              <1> ; a leap year using the table. If it is, add an extra day.
   414                              <1> .clkLeapYears:
   415 00001665 0004080C1014181C20- <1>     db 00, 04, 08, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 
   415 0000166E 24282C30            <1>
   416 00001672 34383C4044484C5054- <1>     db 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96
   416 0000167B 585C60              <1>
   417                              <1> .clkMonths:
   418 0000167E 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   418 00001687 1F1E1F              <1>
   419                              <1> ;COM Driver headers and main interrupt strat
   420                              <1> com1Intr:
   421 0000168A C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   422 00001691 EB19                <1>     jmp short comIntr
   423                              <1> com2Intr:
   424 00001693 C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   425 0000169A EB10                <1>     jmp short comIntr
   426                              <1> com3Intr:
   427 0000169C C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   428 000016A3 EB07                <1>     jmp short comIntr
   429                              <1> com4Intr:
   430 000016A5 C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   431                              <1> comIntr:
   432 000016AC 50                  <1>     push rax
   433 000016AD 53                  <1>     push rbx
   434 000016AE 51                  <1>     push rcx
   435 000016AF 52                  <1>     push rdx
   436 000016B0 56                  <1>     push rsi
   437 000016B1 57                  <1>     push rdi
   438 000016B2 488B1DF5FCFFFF      <1>     mov rbx, qword [reqHdrPtr]
   439 000016B9 B003                <1>     mov al, 03h ;Unknown Command
   440 000016BB 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   441 000016BF 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   442                              <1> 
   443 000016C1 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   444 000016C4 3C04                <1>     cmp al, 4   ;Read Character(s)
   445 000016C6 7462                <1>     jz .comRead
   446 000016C8 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   447 000016CA 0F849B000000        <1>     jz .comNondestructiveRead   
   448 000016D0 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   449 000016D2 0F8484000000        <1>     jz .comReadInputStatus
   450 000016D8 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   451 000016DA 0F84B9000000        <1>     jz .comFlushInputBuffers
   452 000016E0 3C08                <1>     cmp al, 8
   453 000016E2 0F84DB000000        <1>     jz .comWrite
   454 000016E8 3C09                <1>     cmp al, 9
   455 000016EA 0F84D3000000        <1>     jz .comWrite
   456 000016F0 3C0A                <1>     cmp al, 0Ah
   457 000016F2 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   458 000016F8 EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   459                              <1> .comErrorNoCount:
   460 000016FA B002                <1>     mov al, 02h ;Unknown device
   461 000016FC EB19                <1>     jmp short .comWriteErrorCode
   462                              <1> .comReadError:
   463 000016FE BA0B000000          <1>     mov edx, 0Bh
   464                              <1> .comWriteError:
   465 00001703 BA0A000000          <1>     mov edx, 0Ah
   466                              <1> .comError:
   467 00001708 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   468 0000170B B902000000          <1>     mov ecx, 02h    ;Unknown device
   469 00001710 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   470 00001712 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   471 00001715 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   472                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   473 00001717 B480                <1>     mov ah, 80h ;Set error bit
   474 00001719 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   475                              <1> .comExit:
   476 0000171D 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   477 00001723 5F                  <1>     pop rdi
   478 00001724 5E                  <1>     pop rsi
   479 00001725 5A                  <1>     pop rdx
   480 00001726 59                  <1>     pop rcx
   481 00001727 5B                  <1>     pop rbx
   482 00001728 58                  <1>     pop rax
   483 00001729 C3                  <1>     ret
   484                              <1> 
   485                              <1> .comRead:
   486 0000172A B005                <1>     mov al, 05h ;Bad request structure length?
   487 0000172C 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   488 0000172F 75E6                <1>     jne .comWriteErrorCode
   489                              <1> 
   490 00001731 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   491 00001735 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   492                              <1> .cr1:
   493 00001737 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   494 0000173A 741B                <1>     je .cre2
   495                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   496 0000173C B802000000          <1>     mov eax, 02h    ;Recieve 
   497 00001741 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   498 00001747 6698                <1>     cbw     ;Zero extend to upper byte
   499 00001749 CD34                <1>     int 34h ;Recieve Char
   500 0000174B 72BB                <1>     jc .comError
   501 0000174D 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   502 00001750 74EA                <1>     je .cr11
   503 00001752 AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   504 00001753 FFC1                <1>     inc ecx
   505 00001755 EBE0                <1>     jmp short .cr1
   506                              <1> .cre2:
   507 00001757 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   508 0000175A EBC1                <1>     jmp short .comExit
   509                              <1> 
   510                              <1> .comReadInputStatus:
   511 0000175C B005                <1>     mov al, 05h ;Bad request structure length?
   512 0000175E 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   513 00001761 75B4                <1>     jne .comWriteErrorCode
   514 00001763 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   515 00001769 EBB2                <1>     jmp short .comExit
   516                              <1> 
   517                              <1> .comNondestructiveRead:
   518                              <1> ;Acts like a "read one character if there is one" function
   519 0000176B B005                <1>     mov al, 05h ;Bad request structure length?
   520 0000176D 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   521 00001770 75A5                <1>     jne .comWriteErrorCode
   522                              <1> .cndr1:
   523 00001772 B802000000          <1>     mov eax, 02h    ;Recieve 
   524 00001777 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   525 0000177D 6698                <1>     cbw     ;Zero extend to upper byte
   526 0000177F CD34                <1>     int 34h ;Recieve Char
   527 00001781 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   528 00001787 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   529 0000178A 7405                <1>     je .cndr2
   530 0000178C 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Get next char
   531 0000178F EB8C                <1>     jmp short .comExit
   532                              <1> .cndr2:
   533 00001791 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 200h ;Busy bit set
   534 00001797 EB84                <1>     jmp short .comExit
   535                              <1> 
   536                              <1> .comFlushInputBuffers:
   537 00001799 B005                <1>     mov al, 05h ;Bad request structure length?
   538 0000179B 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   539 0000179E 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   540                              <1> .cfib0:
   541 000017A4 8A1584000000        <1>     mov dl, byte [.comDevice]
   542 000017AA 6698                <1>     cbw
   543 000017AC B802000000          <1>     mov eax, 02h    ;Recieve
   544 000017B1 CD34                <1>     int 34h
   545 000017B3 0F8241FFFFFF        <1>     jc .comErrorNoCount
   546 000017B9 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   547 000017BC 75E6                <1>     jne .cfib0
   548 000017BE E95AFFFFFF          <1>     jmp .comExit
   549                              <1> 
   550                              <1> .comWrite:
   551 000017C3 B005                <1>     mov al, 05h ;Bad request structure length?
   552 000017C5 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   553 000017C8 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   554                              <1> 
   555 000017CE 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   556 000017D2 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   557                              <1> .cw1: 
   558 000017D4 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   559 000017D7 7417                <1>     je .cw2
   560 000017D9 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   561 000017DA B401                <1>     mov ah, 01h ;Move function number into ah
   562 000017DC 8A154C000000        <1>     mov dl, byte [.comDevice]
   563 000017E2 6698                <1>     cbw     ;Zero extend to upper byte
   564 000017E4 CD34                <1>     int 34h ;Transmit char
   565 000017E6 0F821CFFFFFF        <1>     jc .comError
   566 000017EC FFC1                <1>     inc ecx
   567 000017EE EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   568                              <1> .cw2:
   569 000017F0 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   570 000017F3 E925FFFFFF          <1>     jmp .comExit
   571                              <1> 
   572                              <1> .comOutputStatus:
   573                              <1> ;Read MODEM status
   574 000017F8 B005                <1>     mov al, 05h ;Bad request structure length?
   575 000017FA 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   576 000017FD 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   577                              <1> 
   578 00001803 8A1525000000        <1>     mov dl, byte [.comDevice]
   579 00001809 6698                <1>     cbw     ;Zero extend to upper byte
   580 0000180B B403                <1>     mov ah, 03h     ;Get status
   581 0000180D CD34                <1>     int 34h
   582 0000180F 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   583 00001815 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   584 0000181A C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   585 0000181D F7D0                <1>     not eax      ;Bitwise inversion
   586 0000181F 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   587 00001824 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   588 00001829 E9EFFEFFFF          <1>     jmp .comExit
   589 0000182E 00                  <1> .comDevice   db 0
   590                              <1> 
   591                              <1> msdDriver:
   592 0000182F 50                  <1>     push rax
   593 00001830 53                  <1>     push rbx
   594 00001831 51                  <1>     push rcx
   595 00001832 52                  <1>     push rdx
   596 00001833 56                  <1>     push rsi
   597 00001834 57                  <1>     push rdi
   598 00001835 55                  <1>     push rbp
   599 00001836 4150                <1>     push r8
   600 00001838 488B1D6FFBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
   601 0000183F 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   602 00001843 B003                <1>     mov al, 03h
   603 00001845 0F87F9000000        <1>     ja .msdWriteErrorCode ;If yes, error!
   604 0000184B B001                <1>     mov al, 01h ;Unknown Unit Error
   605 0000184D 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
   606 00001851 0F87ED000000        <1>     ja .msdWriteErrorCode ;If yes, error!
   607 00001857 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
   608 0000185A 84C0                <1>     test al, al
   609 0000185C 0F84F8000000        <1>     jz .msdInit
   610 00001862 3C01                <1>     cmp al, 01
   611 00001864 0F84C8010000        <1>     jz .msdMedChk
   612 0000186A 3C02                <1>     cmp al, 02
   613 0000186C 0F8438020000        <1>     jz .msdBuildBPB
   614 00001872 3C03                <1>     cmp al, 03
   615 00001874 0F84A5020000        <1>     jz .msdIOCTLRead
   616 0000187A 3C04                <1>     cmp al, 04
   617 0000187C 0F84AD020000        <1>     jz .msdRead
   618 00001882 3C08                <1>     cmp al, 08
   619 00001884 0F84E1020000        <1>     jz .msdWrite
   620 0000188A 3C09                <1>     cmp al, 09
   621 0000188C 0F8415030000        <1>     jz .msdWriteVerify
   622 00001892 3C0C                <1>     cmp al, 12
   623 00001894 0F8456030000        <1>     jz .msdIOCTLWrite
   624 0000189A 3C0D                <1>     cmp al, 13
   625 0000189C 0F845E030000        <1>     jz .msdDevOpen
   626 000018A2 3C0E                <1>     cmp al, 14
   627 000018A4 0F8475030000        <1>     jz .msdDevClose
   628 000018AA 3C0F                <1>     cmp al, 15
   629 000018AC 0F848C030000        <1>     jz .msdRemovableMedia
   630 000018B2 3C13                <1>     cmp al, 19
   631 000018B4 0F84B1030000        <1>     jz .msdGenericIOCTL
   632 000018BA 3C17                <1>     cmp al, 23
   633 000018BC 0F84B9030000        <1>     jz .msdGetLogicalDev
   634 000018C2 3C18                <1>     cmp al, 24
   635 000018C4 0F84CA030000        <1>     jz .msdSetLogicalDev
   636 000018CA EB7E                <1>     jmp short .msdDriverExit    ;All other valid functions exit done
   637                              <1> .msdIOError:  ;In Read and Write errors, rbp points to the dev struc
   638 000018CC 4889EB              <1>     mov rbx, rbp
   639 000018CF 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
   640 000018D2 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
   641 000018D4 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
   642                              <1> ;Now fall through to general error
   643                              <1> .msdGenDiskError:
   644 000018D7 B401                <1>     mov ah, 01h
   645 000018D9 30D2                <1>     xor dl, dl  ;Work around bug that fails request if dl > 7Fh
   646 000018DB CD33                <1>     int 33h ;Read status of last operation
   647 000018DD 80FC06              <1>     cmp ah, 06h ;Mock Seek response (device not present)
   648 000018E0 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
   649 000018E2 7460                <1>     je .msdWriteErrorCode 
   650 000018E4 B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
   651 000018E6 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
   652 000018E9 7459                <1>     je .msdWriteErrorCode 
   653 000018EB 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
   654 000018EE 7454                <1>     je .msdWriteErrorCode
   655                              <1> ;Device Not Ready
   656 000018F0 B002                <1>     mov al, 02h  ;Device not ready code
   657 000018F2 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   658 000018F5 744D                <1>     je .msdWriteErrorCode
   659 000018F7 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   660 000018FB 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   661                              <1> ;Write Protected
   662 000018FF 30C0                <1>     xor al, al
   663 00001901 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   664 00001906 743C                <1>     je .msdWriteErrorCode
   665                              <1> ;CRC Error
   666 00001908 B004                <1>     mov al, 04h     ;CRC error code
   667 0000190A 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   668 0000190F 7433                <1>     je .msdWriteErrorCode
   669 00001911 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   670 00001916 742C                <1>     je .msdWriteErrorCode
   671 00001918 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   672 0000191D 7425                <1>     je .msdWriteErrorCode
   673                              <1> ;Seek Error
   674 0000191F B006                <1>     mov al, 06h     ;Seek error code
   675 00001921 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   676 00001924 741E                <1>     je .msdWriteErrorCode
   677                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   678                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   679 00001926 B007                <1>     mov al, 07h
   680 00001928 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   681 0000192B 7417                <1>     je .msdWriteErrorCode
   682                              <1> ;Sector Not Found
   683 0000192D B008                <1>     mov al, 08h     ;Sector not found code
   684 0000192F 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   685 00001932 7410                <1>     je .msdWriteErrorCode
   686                              <1> ;Write faults
   687 00001934 B00A                <1>     mov al, 0Ah     ;Write fault
   688 00001936 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   689 00001939 7409                <1>     je .msdWriteErrorCode
   690                              <1> ;Read faults
   691 0000193B B00B                <1>     mov al, 0Bh     ;Read fault
   692 0000193D 80F911              <1>     cmp cl, 11h     ;Read error
   693 00001940 7402                <1>     je .msdWriteErrorCode
   694                              <1> ;General Errors
   695 00001942 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   696                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   697 00001944 B480                <1>     mov ah, 80h ;Set error bit
   698 00001946 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   699                              <1> .msdDriverExit:
   700 0000194A 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
   701 00001950 4158                <1>     pop r8
   702 00001952 5D                  <1>     pop rbp
   703 00001953 5F                  <1>     pop rdi
   704 00001954 5E                  <1>     pop rsi
   705 00001955 5A                  <1>     pop rdx
   706 00001956 59                  <1>     pop rcx
   707 00001957 5B                  <1>     pop rbx
   708 00001958 58                  <1>     pop rax
   709 00001959 C3                  <1>     ret
   710                              <1> .msdInit:            ;Function 0
   711 0000195A B005                <1>     mov al, 05h ;Bad request structure length
   712 0000195C 803B1F              <1>     cmp byte [rbx + drvReqHdr.hdrlen], initReqPkt_size
   713 0000195F 75E3                <1>     jne .msdWriteErrorCode
   714                              <1> 
   715 00001961 488D2DF3050000      <1>     lea rbp, endptr
   716 00001968 48896B0E            <1>     mov qword [rbx + initReqPkt.endptr], rbp    ;Where the end is gonna be
   717 0000196C 488D2D68030000      <1>     lea rbp, .msdBPBTbl
   718 00001973 48896B16            <1>     mov qword [rbx + initReqPkt.optptr], rbp    ;Where bpb tbl is gonna be
   719                              <1> 
   720 00001977 4889DD              <1>     mov rbp, rbx ;Save the req block ptr in rbp
   721 0000197A 31D2                <1>     xor edx, edx  ;Start from device zero
   722 0000197C 88550D              <1>     mov byte [rbp + initReqPkt.numunt], dl   ;Zero this field, max 5
   723                              <1> .mi0:   ;Now check each device for partitions
   724 0000197F 807D0D05            <1>     cmp byte [rbp + initReqPkt.numunt], 5
   725 00001983 7469                <1>     je .msdExit ;IF we are at 5 now, we exit
   726 00001985 B482                <1>     mov ah, 82h ;LBA read
   727 00001987 B001                <1>     mov al, 1   ;1 sector
   728 00001989 31C9                <1>     xor ecx, ecx  ;Read sector 0
   729 0000198B 488D1D(27040000)    <1>     lea rbx, msdTempBuffer  ;Get address of this space
   730 00001992 CD33                <1>     int 33h
   731 00001994 0F8290000000        <1>     jc .msdInitError
   732                              <1> ;Now we verify if this is a BPB. Removable devices can't be partitioned (yet)
   733                              <1> ;1) Check byte 0 for EBh (short jmp) and byte 2 for a 90h (nop).
   734 0000199A 8A03                <1>     mov al, byte [rbx]
   735 0000199C 8A6302              <1>     mov ah, byte [rbx + 2]
   736 0000199F 663DEB90            <1>     cmp ax, 090EBh
   737 000019A3 7573                <1>     jne .mimbr
   738                              <1> ;Valid BPB found! Copy to internal table and inc lastdrive
   739 000019A5 4889DE              <1>     mov rsi, rbx
   740 000019A8 B878000000          <1>     mov eax, bpbEx_size
   741 000019AD 89D1                <1>     mov ecx, edx    ;Temporarily save dl in ecx
   742 000019AF F7E2                <1>     mul edx
   743 000019B1 89CA                <1>     mov edx, ecx
   744 000019B3 488D3D49030000      <1>     lea rdi, .msdBPBblks
   745 000019BA 4801C7              <1>     add rdi, rax
   746 000019BD B978000000          <1>     mov ecx, bpbEx_size
   747 000019C2 4889F8              <1>     mov rax, rdi    ;Save the entry address in rax
   748 000019C5 F3A4                <1>     rep movsb   ;Copy the bpb into the bpb table
   749 000019C7 488D3D0D030000      <1>     lea rdi, .msdBPBTbl
   750 000019CE 488D3CD7            <1>     lea rdi, qword [rdi + 8*rdx]
   751 000019D2 488907              <1>     mov qword [rdi], rax
   752 000019D5 488D3DF5020000      <1>     lea rdi, .msdBIOSmap
   753 000019DC 4801D7              <1>     add rdi, rdx    ;rdx contains a number, table is a list of bytes
   754 000019DF 8817                <1>     mov byte [rdi], dl
   755 000019E1 FE450D              <1>     inc byte [rbp + initReqPkt.numunt]
   756 000019E4 FEC2                <1>     inc dl
   757 000019E6 3A15(09000000)      <1>     cmp dl, byte [numRemMSD] ;Once these are equal, we have processed last dev
   758 000019EC 7591                <1>     jne .mi0
   759                              <1> .msdExit:
   760                              <1> ;If one device only, copy its BPB pointer and drive number
   761                              <1> ;When HDD support implemented, this will check the number of remdevs not lastdrv
   762 000019EE 807D0D01            <1>     cmp byte [rbp + initReqPkt.numunt], 1
   763 000019F2 751C                <1>     jne .msdexit1
   764                              <1> ;Here ONLY if one device found
   765 000019F4 488D35E0020000      <1>     lea rsi, .msdBPBTbl
   766 000019FB 488D7E08            <1>     lea rdi, qword [rsi + 8]    ;Point to next entry
   767 000019FF 48A5                <1>     movsq   ;Copy pointer
   768 00001A01 488D35C9020000      <1>     lea rsi, .msdBIOSmap
   769 00001A08 488D7E01            <1>     lea rdi, qword [rsi + 1]
   770 00001A0C A4                  <1>     movsb   ;Copy byte
   771 00001A0D FE450D              <1>     inc byte [rbp + initReqPkt.numunt]
   772                              <1> .msdexit1:
   773 00001A10 4889EB              <1>     mov rbx, rbp
   774 00001A13 E932FFFFFF          <1>     jmp .msdDriverExit
   775                              <1> .mimbr:
   776                              <1> ;Goto next device without incrementing LASTDRIVE
   777 00001A18 FEC2                <1>     inc dl
   778 00001A1A 8A05(09000000)      <1>     mov al, byte [numRemMSD]
   779 00001A20 38C2                <1>     cmp dl, al ;Once these are equ, we have processed last dev
   780 00001A22 0F8557FFFFFF        <1>     jne .mi0
   781 00001A28 EBC4                <1>     jmp short .msdExit
   782                              <1> .msdInitError:
   783 00001A2A 4889EB              <1>     mov rbx, rbp
   784 00001A2D E9A5FEFFFF          <1>     jmp .msdGenDiskError
   785                              <1> .msdMedChk:          ;Function 1
   786                              <1> ;Once the BIOS function is implmented that reads the changeline, use that!
   787                              <1> ;For BIOSes that dont support the changeline, the following procedure will 
   788                              <1> ; suffice.
   789 00001A32 B005                <1>     mov al, 05h ;Bad request structure length
   790 00001A34 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   791 00001A37 0F8507FFFFFF        <1>     jne .msdWriteErrorCode
   792                              <1> 
   793 00001A3D 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   794 00001A42 488D0D88020000      <1>     lea rcx, .msdBIOSmap
   795 00001A49 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   796 00001A4C F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   797 00001A4F 7550                <1>     jnz .mmcNoChange
   798                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   799 00001A51 B416                <1>     mov ah, 16h 
   800 00001A53 CD33                <1>     int 33h
   801 00001A55 0F827CFEFFFF        <1>     jc .msdGenDiskError
   802 00001A5B 80FC80              <1>     cmp ah, 80h
   803 00001A5E 740E                <1>     je .mmcNoChangeLine
   804 00001A60 80FC86              <1>     cmp ah, 86h
   805 00001A63 7409                <1>     je .mmcNoChangeLine
   806 00001A65 84E4                <1>     test ah, ah ;No change?
   807 00001A67 7438                <1>     jz .mmcNoChange
   808 00001A69 F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   809 00001A6C 7516                <1>     jnz .mmcChange
   810                              <1> ;If nothing, fall through and test manually, should never happen though
   811                              <1> .mmcNoChangeLine:
   812                              <1> ;Now we test Media Descriptor
   813 00001A6E 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   814 00001A71 488D3D63020000      <1>     lea rdi, .msdBPBTbl
   815 00001A78 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax]
   816 00001A7C 488B3F              <1>     mov rdi, qword [rdi]    ;Dereference rdi
   817 00001A7F 385715              <1>     cmp byte [rdi + bpb32.media], dl    ;Compare media descriptor bytes
   818 00001A82 7414                <1>     je .mmcUnsure
   819                              <1> .mmcChange:
   820 00001A84 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   821 00001A88 488D0538020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   822 00001A8F 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   823 00001A93 E9B2FEFFFF          <1>     jmp .msdDriverExit
   824                              <1> .mmcUnsure:
   825 00001A98 C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   826 00001A9C E9A9FEFFFF          <1>     jmp .msdDriverExit
   827                              <1> .mmcNoChange:
   828 00001AA1 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   829 00001AA5 E9A0FEFFFF          <1>     jmp .msdDriverExit
   830                              <1> 
   831                              <1> .msdBuildBPB:        ;Function 2
   832 00001AAA B005                <1>     mov al, 05h ;Bad request structure length
   833 00001AAC 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   834 00001AAF 0F858FFEFFFF        <1>     jne .msdWriteErrorCode
   835                              <1> 
   836 00001AB5 4889DE              <1>     mov rsi, rbx
   837 00001AB8 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   838 00001ABD 488D0D0D020000      <1>     lea rcx, .msdBIOSmap
   839 00001AC4 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   840 00001AC7 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   841 00001ACB 31C9                <1>     xor ecx, ecx    ;Read Sector 0
   842 00001ACD B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   843 00001AD2 CD33                <1>     int 33h
   844 00001AD4 0F82FDFDFFFF        <1>     jc .msdGenDiskError
   845                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   846 00001ADA 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   847 00001ADE 7418                <1>     je .mbbpb0
   848 00001AE0 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   849 00001AE4 7412                <1>     je .mbbpb0
   850 00001AE6 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   851 00001AEA 740C                <1>     je .mbbpb0
   852 00001AEC 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   853 00001AF0 B007                <1>     mov al, 07h ;Unknown media error code
   854 00001AF2 0F824CFEFFFF        <1>     jb .msdWriteErrorCode
   855                              <1> .mbbpb0:
   856 00001AF8 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   857 00001AFB 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   858 00001B00 488D3DD4010000      <1>     lea rdi, .msdBPBTbl
   859 00001B07 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   860 00001B0B 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   861 00001B0E 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   862 00001B12 B90F000000          <1>     mov ecx, bpbEx_size/8
   863 00001B17 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   864 00001B1A E92BFEFFFF          <1>     jmp .msdDriverExit
   865                              <1> .msdIOCTLRead:       ;Function 3, returns done
   866 00001B1F B005                <1>     mov al, 05h ;Bad request structure length
   867 00001B21 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   868 00001B24 0F851AFEFFFF        <1>     jne .msdWriteErrorCode
   869                              <1> 
   870 00001B2A E91BFEFFFF          <1>     jmp .msdDriverExit
   871                              <1> .msdRead:            ;Function 4
   872                              <1> ;Will read one sector at a time.
   873 00001B2F B005                <1>     mov al, 05h ;Bad request structure length
   874 00001B31 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   875 00001B34 0F850AFEFFFF        <1>     jne .msdWriteErrorCode
   876                              <1> 
   877 00001B3A 4889DD              <1>     mov rbp, rbx
   878 00001B3D 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   879                              <1> .msdr0:
   880 00001B3F B682                <1>     mov dh, 82h ;LBA Read Sectors
   881 00001B41 E867010000          <1>     call .msdBlkIOCommon
   882 00001B46 0F8280FDFFFF        <1>     jc .msdIOError
   883 00001B4C 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   884 00001B54 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   885 00001B5C FFC6                <1>     inc esi
   886 00001B5E 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   887 00001B61 75DC                <1>     jne .msdr0
   888 00001B63 4889EB              <1>     mov rbx, rbp
   889 00001B66 E9DFFDFFFF          <1>     jmp .msdDriverExit
   890                              <1> .msdWrite:           ;Function 8
   891                              <1> ;Will write one sector at a time.
   892 00001B6B B005                <1>     mov al, 05h ;Bad request structure length
   893 00001B6D 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   894 00001B70 0F85CEFDFFFF        <1>     jne .msdWriteErrorCode
   895                              <1> 
   896 00001B76 4889DD              <1>     mov rbp, rbx
   897 00001B79 31F6                <1>     xor esi, esi  ;Set counter to zero
   898                              <1> .msdw0:
   899 00001B7B B683                <1>     mov dh, 83h ;LBA Write Sectors
   900 00001B7D E82B010000          <1>     call .msdBlkIOCommon
   901 00001B82 0F8244FDFFFF        <1>     jc .msdIOError
   902 00001B88 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   903 00001B90 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   904 00001B98 FFC6                <1>     inc esi
   905 00001B9A 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   906 00001B9D 75DC                <1>     jne .msdw0
   907 00001B9F 4889EB              <1>     mov rbx, rbp
   908 00001BA2 E9A3FDFFFF          <1>     jmp .msdDriverExit
   909                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   910                              <1> ;Will write one sector at a time and then verify it.
   911 00001BA7 B005                <1>     mov al, 05h ;Bad request structure length
   912 00001BA9 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   913 00001BAC 0F8592FDFFFF        <1>     jne .msdWriteErrorCode
   914                              <1> 
   915 00001BB2 4889DD              <1>     mov rbp, rbx
   916 00001BB5 31F6                <1>     xor esi, esi  ;Set counter to zero
   917                              <1> .msdwv0:
   918 00001BB7 B683                <1>     mov dh, 83h ;LBA Write Sectors
   919 00001BB9 E8EF000000          <1>     call .msdBlkIOCommon
   920 00001BBE 0F8208FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   921 00001BC4 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   922 00001BC6 E8E2000000          <1>     call .msdBlkIOCommon
   923 00001BCB 0F82FBFCFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   924 00001BD1 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   925 00001BD9 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   926 00001BE1 FFC6                <1>     inc esi
   927 00001BE3 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   928 00001BE6 75CF                <1>     jne .msdwv0
   929 00001BE8 4889EB              <1>     mov rbx, rbp
   930 00001BEB E95AFDFFFF          <1>     jmp .msdDriverExit
   931                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   932 00001BF0 B005                <1>     mov al, 05h ;Bad request structure length
   933 00001BF2 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   934 00001BF5 0F8549FDFFFF        <1>     jne .msdWriteErrorCode
   935                              <1> 
   936 00001BFB E94AFDFFFF          <1>     jmp .msdDriverExit
   937                              <1> .msdDevOpen:         ;Function 13
   938 00001C00 B005                <1>     mov al, 05h ;Bad request structure length
   939 00001C02 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   940 00001C05 0F8539FDFFFF        <1>     jne .msdWriteErrorCode
   941                              <1> 
   942 00001C0B 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   943 00001C10 488D0DBF000000      <1>     lea rcx, .msdHdlCnt
   944 00001C17 FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   945 00001C1A E92BFDFFFF          <1>     jmp .msdDriverExit
   946                              <1> .msdDevClose:        ;Function 14
   947 00001C1F B005                <1>     mov al, 05h ;Bad request structure length
   948 00001C21 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   949 00001C24 0F851AFDFFFF        <1>     jne .msdWriteErrorCode
   950                              <1> 
   951 00001C2A 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   952 00001C2F 488D0DA0000000      <1>     lea rcx, .msdHdlCnt
   953 00001C36 FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   954 00001C39 E90CFDFFFF          <1>     jmp .msdDriverExit
   955                              <1> .msdRemovableMedia:  ;Function 15
   956 00001C3E B005                <1>     mov al, 05h ;Bad request structure length
   957 00001C40 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   958 00001C43 0F85FBFCFFFF        <1>     jne .msdWriteErrorCode
   959                              <1> 
   960 00001C49 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   961 00001C4E 488D0D7C000000      <1>     lea rcx, .msdBIOSmap
   962 00001C55 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   963 00001C58 A880                <1>     test al, 80h
   964 00001C5A 0F84EAFCFFFF        <1>     jz .msdDriverExit   ;If removable, busy bit is clear
   965 00001C60 66C743030002        <1>     mov word [rbx + remMediaReqPkt.status], 0200h ;Set Busy bit
   966 00001C66 E9DFFCFFFF          <1>     jmp .msdDriverExit
   967                              <1> .msdGenericIOCTL:    ;Function 19
   968 00001C6B B005                <1>     mov al, 05h ;Bad request structure length
   969 00001C6D 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   970 00001C70 0F85CEFCFFFF        <1>     jne .msdWriteErrorCode
   971                              <1> 
   972 00001C76 E9CFFCFFFF          <1>     jmp .msdDriverExit
   973                              <1> .msdGetLogicalDev:   ;Function 23
   974 00001C7B B005                <1>     mov al, 05h ;Bad request structure length
   975 00001C7D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   976 00001C80 0F85BEFCFFFF        <1>     jne .msdWriteErrorCode
   977                              <1> 
   978 00001C86 8A0544000000        <1>     mov al, byte [.msdCurDev]
   979 00001C8C 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   980 00001C8F E9B6FCFFFF          <1>     jmp .msdDriverExit
   981                              <1> .msdSetLogicalDev:   ;Function 24
   982 00001C94 B005                <1>     mov al, 05h ;Bad request structure length
   983 00001C96 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   984 00001C99 0F85A5FCFFFF        <1>     jne .msdWriteErrorCode
   985                              <1> 
   986 00001C9F 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   987 00001CA2 880528000000        <1>     mov byte [.msdCurDev], al
   988 00001CA8 E99DFCFFFF          <1>     jmp .msdDriverExit
   989                              <1> 
   990                              <1> .msdBlkIOCommon:  ;Does block IO
   991                              <1> ;Called with rbp containing old rbx value and ah with function number
   992                              <1> ;Error handled by caller
   993                              <1> ;Sector count handled by caller
   994                              <1> ;Called with dh = BIOS function number
   995 00001CAD 480FB64501          <1>     movzx rax, byte [rbp + ioReqPkt.unitnm]
   996 00001CB2 8A90[D11C0000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   997 00001CB8 488B4D1A            <1>     mov rcx, qword [rbp + ioReqPkt.strtsc]  ;Get start sector
   998 00001CBC 488B5D0E            <1>     mov rbx, qword [rbp + ioReqPkt.bufptr]  ;Get Memory Buffer
   999 00001CC0 88F4                <1>     mov ah, dh
  1000 00001CC2 B001                <1>     mov al, 01h ;Do one sector at a time 
  1001 00001CC4 CD33                <1>     int 33h
  1002 00001CC6 C3                  <1>     ret
  1003                              <1> 
  1004 00001CC7 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
  1005                              <1> ;LASTDRIVE default is 5
  1006 00001CD0 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
  1007                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
  1008 00001CD1 FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
  1009 00001CD6 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
  1010 00001CDB 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
  1010 00001CE4 000000000000000000- <1>
  1010 00001CED 000000000000000000- <1>
  1010 00001CF6 000000000000000000- <1>
  1010 00001CFF 00000000            <1>
  1011 00001D03 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
  1011 00001D0C 000000000000000000- <1>
  1011 00001D15 000000000000000000- <1>
  1011 00001D1E 000000000000000000- <1>
  1011 00001D27 000000000000000000- <1>
  1011 00001D30 000000000000000000- <1>
  1011 00001D39 000000000000000000- <1>
  1011 00001D42 000000000000000000- <1>
  1011 00001D4B 000000000000000000- <1>
  1011 00001D54 000000000000000000- <1>
  1011 00001D5D 000000000000000000- <1>
  1011 00001D66 000000000000000000- <1>
  1011 00001D6F 000000000000000000- <1>
  1011 00001D78 000000000000000000- <1>
  1011 00001D81 000000000000000000- <1>
  1011 00001D8A 000000000000000000- <1>
  1011 00001D93 000000000000000000- <1>
  1011 00001D9C 000000000000000000- <1>
  1011 00001DA5 000000000000000000- <1>
  1011 00001DAE 000000000000000000- <1>
  1011 00001DB7 000000000000000000- <1>
  1011 00001DC0 000000000000000000- <1>
  1011 00001DC9 000000000000000000- <1>
  1011 00001DD2 000000000000000000- <1>
  1011 00001DDB 000000000000000000- <1>
  1011 00001DE4 000000000000000000- <1>
  1011 00001DED 000000000000000000- <1>
  1011 00001DF6 000000000000000000- <1>
  1011 00001DFF 000000000000000000- <1>
  1011 00001E08 000000000000000000- <1>
  1011 00001E11 000000000000000000- <1>
  1011 00001E1A 000000000000000000- <1>
  1011 00001E23 000000000000000000- <1>
  1011 00001E2C 000000000000000000- <1>
  1011 00001E35 000000000000000000- <1>
  1011 00001E3E 000000000000000000- <1>
  1011 00001E47 000000000000000000- <1>
  1011 00001E50 000000000000000000- <1>
  1011 00001E59 000000000000000000- <1>
  1011 00001E62 000000000000000000- <1>
  1011 00001E6B 000000000000000000- <1>
  1011 00001E74 000000000000000000- <1>
  1011 00001E7D 000000000000000000- <1>
  1011 00001E86 000000000000000000- <1>
  1011 00001E8F 000000000000000000- <1>
  1011 00001E98 000000000000000000- <1>
  1011 00001EA1 000000000000000000- <1>
  1011 00001EAA 000000000000000000- <1>
  1011 00001EB3 000000000000000000- <1>
  1011 00001EBC 000000000000000000- <1>
  1011 00001EC5 000000000000000000- <1>
  1011 00001ECE 000000000000000000- <1>
  1011 00001ED7 000000000000000000- <1>
  1011 00001EE0 000000000000000000- <1>
  1011 00001EE9 000000000000000000- <1>
  1011 00001EF2 000000000000000000- <1>
  1011 00001EFB 000000000000000000- <1>
  1011 00001F04 000000000000000000- <1>
  1011 00001F0D 000000000000000000- <1>
  1011 00001F16 000000000000000000- <1>
  1011 00001F1F 000000000000000000- <1>
  1011 00001F28 000000000000000000- <1>
  1011 00001F31 000000000000000000- <1>
  1011 00001F3A 000000000000000000- <1>
  1011 00001F43 000000000000000000- <1>
  1011 00001F4C 000000000000000000- <1>
  1011 00001F55 000000000000        <1>
  1012                              <1> 
  1013                              <1> endptr equ $
    24                                  Segment dynamicDataArea nobits valign=1 vfollows=resSeg
    25                                  %include "dosDynaDataArea.asm"
    26                              <1> ;Create DPB chain of first 5 available DPB slots
    27 00000000 <res 34h>           <1> firstDPB        resb dpb_size
    28 00000034 <res 34h>           <1> secondDPB       resb dpb_size
    29 00000068 <res 34h>           <1> thirdDPB        resb dpb_size
    30 0000009C <res 34h>           <1> fourthDPB       resb dpb_size
    31 000000D0 <res 34h>           <1> fifthDPB        resb dpb_size 
    32                              <1> 
    33                              <1> ;Create SFT header and corresponding array of five default sft entries
    34 00000104 <res Ah>            <1> firstSftHeader  resb sfth_size
    35 0000010E <res 3Dh>           <1> firstSft        resb sft_size
    36 0000014B <res 3Dh>           <1> secondSft       resb sft_size
    37 00000188 <res 3Dh>           <1> thirdSft        resb sft_size
    38 000001C5 <res 3Dh>           <1> fourthSft       resb sft_size
    39 00000202 <res 3Dh>           <1> fifthSft        resb sft_size
    40                              <1> 
    41                              <1> ;Create a five drive CDS here so we can jettison it if config wants more
    42 0000023F <res 1C7h>          <1> initCDS         resb 5*cds_size 
    43                              <1> ;Always jettison this space
    44                              <1> DOSENDPTR:   ;Points to the end of the initially reserved DOS area
    45 00000406 <res 21h>           <1> tmpBufHdr       resb bufferHdr_size
    46 00000427 <res 200h>          <1> msdTempBuffer   resb 512    ;Reserve one sectors worth of space
    47                              <1> dynamicDataAreaLength equ $
