     1                                  [map all scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs and strucs
     5                                  %include "driverStruc.inc"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     9                              <1> ; device driver related structures.                     ;
    10                              <1> ;-------------------------------------------------------;
    11                              <1> 
    12                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    13                              <1> 
    14 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    15 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    16 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    17 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    18 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    19                              <1> 
    20                              <1> endstruc
    21                              <1> 
    22                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    23                              <1> 
    24                              <1>     .hdrlen resb 1  ;Length of the request header
    25                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    26                              <1>     .cmdcde resb 1  ;Command code
    27                              <1>     .status resw 1  ;Status word
    28                              <1>     .devptr resq 1  ;Device queue pointer field
    29                              <1> 
    30                              <1> %endmacro
    31                              <1> ;Command Code equates
    32                              <1>     drvINIT        equ 0
    33                              <1>     drvMEDCHK      equ 1
    34                              <1>     drvBUILDBPB    equ 2
    35                              <1>     drvIOCTLREAD   equ 3
    36                              <1>     drvREAD        equ 4
    37                              <1>     drvNONDESTREAD equ 5
    38                              <1>     drvINSTATUS    equ 6
    39                              <1>     drvFLUSHINBUF  equ 7
    40                              <1>     drvWRITE       equ 8
    41                              <1>     drvWRITEVERIFY equ 9
    42                              <1>     drvOUTSTATUS   equ 10
    43                              <1>     drvFLUSHOUTBUF equ 11
    44                              <1>     drvIOCTLWRITE  equ 12
    45                              <1>     drvOPEN        equ 13
    46                              <1>     drvCLOSE       equ 14
    47                              <1>     drvREMMEDCHECK equ 15
    48                              <1>     drvOUTTILBUSY  equ 16  ;Not implemented
    49                              <1>     drvIOCTL       equ 19
    50                              <1>     drvGETDRVMAP   equ 23
    51                              <1>     drvSETDRVMAP   equ 24
    52                              <1> 
    53                              <1> ;Drive structures
    54                              <1> struc drvReqHdr
    55                              <1>     drvReqHdrM
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    56                              <1> endstruc
    57                              <1> 
    58                              <1> struc initReqPkt  ;Init Request Packet
    59                              <1> 
    60                              <1>     drvReqHdrM   ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    61 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
    62 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
    63 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
    64 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
    65                              <1> 
    66                              <1> endstruc
    67                              <1> 
    68                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
    69                              <1> 
    70                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    71 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    72 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
    73 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
    74                              <1> 
    75                              <1> endstruc
    76                              <1> 
    77                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
    78                              <1> 
    79                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    80 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    81 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    82 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
    83                              <1> 
    84                              <1> endstruc
    85                              <1> 
    86                              <1> struc ioReqPkt   ;IO Request Packet
    87                              <1> 
    88                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    89 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    90 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    91 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
    92 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
    93 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
    94                              <1> 
    95                              <1> endstruc
    96                              <1> 
    97                              <1> struc nonDestInNoWaitReqPkt    ;Nondestructive Input No Wait Request Packet
    98                              <1>     
    99                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   100 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   101                              <1> 
   102                              <1> endstruc
   103                              <1> 
   104                              <1> struc statusReqPkt   ;Status Request Packet
   105                              <1> 
   106                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   107                              <1> 
   108                              <1> endstruc
   109                              <1> 
   110                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   111                              <1> 
   112                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   113                              <1>      
   114                              <1> endstruc
   115                              <1> 
   116                              <1> struc openReqPkt ;Open Device Request Packet
   117                              <1> 
   118                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   119                              <1>      
   120                              <1> endstruc
   121                              <1> 
   122                              <1> struc closeReqPkt ;Close Device Request Packet
   123                              <1> 
   124                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   125                              <1>      
   126                              <1> endstruc
   127                              <1> 
   128                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   129                              <1> 
   130                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   131                              <1>      
   132                              <1> endstruc
   133                              <1> 
   134                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   135                              <1> 
   136                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   137 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   138 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   139 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   140 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   141 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   142                              <1> 
   143                              <1> endstruc
   144                              <1> 
   145                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   146                              <1>     
   147                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   148                              <1> 
   149                              <1> endstruc
   150                              <1> 
   151                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   152                              <1>     
   153                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   154                              <1> 
   155                              <1> endstruc
     6                                  %include "fatStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous FAT driver   ;
    10                              <1> ; structures. exFAT will have it's own files at a later ;
    11                              <1> ; stage.                                                ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    15                              <1> 
    16 00000000 ??????              <1>     .jmpBoot    resb 3 
    17 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    18 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    19 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    20 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    21 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    22 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    23 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    24 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    25 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    26 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    27 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    28 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    29 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    30                              <1> 
    31 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    32 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    33 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    34 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    35 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    36 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    37                              <1> 
    38                              <1> endstruc
    39                              <1> 
    40                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    41                              <1> 
    42 00000000 ??????              <1>     .jmpBoot    resb 3
    43 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    44 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    45 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    46 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    47 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    48 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    49 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    50 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    51 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    52 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    53 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    54 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    55 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    56                              <1> 
    57 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    58 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    59 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    60 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    61 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    62 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    63 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    64                              <1> 
    65 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    66 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    67 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    68 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    69 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    70 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    71                              <1> 
    72                              <1> endstruc
    73                              <1> 
    74                              <1> struc mbr
    75 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    76 000001B8 ????????            <1>     .diskID     resb 4
    77 000001BC ????                <1>     .reserved   resb 2
    78 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    79 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    80 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    81 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    82 000001FE ????                <1>     .mbrSig     resb 2
    83                              <1> endstruc
    84                              <1> 
    85                              <1> struc mbrEntry
    86 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    87 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    88 00000004 ??                  <1>     .ptnType    resb 1
    89 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
    90 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
    91 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
    92                              <1> endstruc
    93                              <1> 
    94                              <1> struc fatDirEntry
    95                              <1> 
    96 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
    97 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
    98 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
    99 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   100 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   101 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   102 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   103 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   104 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   105 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   106 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   107 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   108                              <1> 
   109                              <1> endstruc
   110                              <1> ;Directory attribute equates
   111                              <1>     dirReadOnly     equ 01h
   112                              <1>     dirHidden       equ 02h
   113                              <1>     dirSystem       equ 04h
   114                              <1>     dirVolumeID     equ 08h
   115                              <1>     dirDirectory    equ 10h
   116                              <1>     dirArchive      equ 20h
   117                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   118                              <1> 
   119                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   120                              <1> 
   121 00000000 ??????              <1>     .jmpBoot                resb 3 
   122 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   123 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   124 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   125 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   126 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   127 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   128 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   129 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   130 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   131 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   132 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   133 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   134 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   135 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   136 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   137 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   138 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   139 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   140                              <1> 
   141                              <1> endstruc
   142                              <1> 
   143                              <1> struc FSInfo
   144                              <1> 
   145 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   146 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   147 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   148 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   149 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   150 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   151 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   152                              <1> 
   153                              <1> endstruc
     7                                  %include "dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ??                  <1>     .bBytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)x
    27 00000003 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000004 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000005 ????????            <1>     .dFAToffset              resd 1  ;Number of Sectors preceeding first FAT x
    30 00000009 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 0000000A ????                <1>     .wNumberRootDirSectors   resw 1  ;In sectors, this is 0 for FAT32 formats x
    32 0000000C ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 00000010 ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000014 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000018 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001C ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000024 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000025 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000026 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002E ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000032 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Flags: Bit 15 set = Network drive
    69                              <1> ;        Bit 14 set = Physical drive
    70                              <1> ;        Bit 13 set = JOIN'ed drive
    71                              <1> ;        Bit 12 set = SUBST'ed drive
    72                              <1> ;        Bit 7  set = Redirected, not network, drive (This is how MSCDEX worked)
    73                              <1> endstruc
    74                              <1> ;CDS equates
    75                              <1>     cdsNetDrive     equ 8000h
    76                              <1>     cdsPhysDrive    equ 4000h
    77                              <1>     cdsJoinDrive    equ 2000h
    78                              <1>     cdsSubstDrive   equ 1000h
    79                              <1>     cdsRedirDrive   equ 0080h
    80                              <1> ;------------------------------------------------------------------------;
    81                              <1> ; The SFT is a way to allow applications to open file handles to files 
    82                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    83                              <1> ; under the first header, and then a second header will be linked to the 
    84                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    85                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    86                              <1> ; using the FCBS= command. Default FCBS=5.
    87                              <1> ;
    88                              <1> ; A file handle describes the file, and the location within the file that
    89                              <1> ; we are reading. The file handle can be manipulated without the file
    90                              <1> ; being in memory, thus allowing the user to access data without needing 
    91                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    92                              <1> ; accessing devices, by treating them as files with their drivers 
    93                              <1> ; responding and translating the manipulations of the file handle itself.
    94                              <1> ; Neither the driver nor the application should see or use the SFT for
    95                              <1> ; the handle, as it is subject to change (and will change when file 
    96                              <1> ; sharing provisions are included). The DOS will make requests to the 
    97                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    98                              <1> ; track of the information in the SFT entry for that handle. 
    99                              <1> ;
   100                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   101                              <1> ; can point to the same file. It all depends on what the applications 
   102                              <1> ; want to do with the File.
   103                              <1> ;
   104                              <1> ; !!!!IMPORTANT!!!!
   105                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   106                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   107                              <1> ;
   108                              <1> ;Each SFT may look like this:
   109                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   110                              <1> ;            |                |
   111                              <1> ;       wNumFiles*sft    wNumFiles*sft
   112                              <1> ;
   113                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   114                              <1> ; System FCBs.
   115                              <1> ;
   116                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   117                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   118                              <1> ;
   119                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   120                              <1> ; DEFAULT FCBS=5, MINIMUM FCBS=5
   121                              <1> ;------------------------------------------------------------------------;
   122                              <1> struc sfth   ;System file table header
   123                              <1> ; This is the SFT header.
   124                              <1> ; This structure comes before the start of the first file in the array/table.
   125 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   126 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   127                              <1> endstruc
   128                              <1> 
   129                              <1> struc sft
   130                              <1> ;This is the file struc itself
   131 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   132 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   133 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   134 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   135 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   136 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file
   137 00000013 ????                <1>     .wTime       resw 1    ;File Time
   138 00000015 ????                <1>     .wDate       resw 1    ;File Date
   139 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   140 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset in file, in bytes
   141 0000001F ????                <1>     .wRelSect    resw 1    ;Rel sector in file of the last cluster accessed
   142 00000021 ????????            <1>     .dDirSect    resd 1    ;Rel number of sector containing directory entry 
   143 00000025 ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   144 00000026 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   145 00000031 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   146 00000039 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster of last cluster accessed
   147                              <1> endstruc
   148                              <1> ;Open Mode equates
   149                              <1> ;Access modes   Bits[2:0]
   150                              <1>     ReadAccess      equ 0h
   151                              <1>     WriteAccess     equ 1h
   152                              <1>     RWAccess        equ 2h
   153                              <1> ;Bit 3 reserved 0
   154                              <1> ;Sharing modes  Bits[6:4]
   155                              <1>     CompatShare     equ 0h
   156                              <1>     denyRWShare     equ 10h
   157                              <1>     denyWriteShare  equ 20h
   158                              <1>     denyReadShare   equ 30h
   159                              <1>     denyNoneShare   equ 40h
   160                              <1> ;Bit 7 reserved 0
   161                              <1> ;Bits 8-12 reserved 0
   162                              <1> ;Critical Error handling
   163                              <1>     critErrHdl      equ 2000h   ;If set, return error code. If clear, INT 44h
   164                              <1> ;Buffering on writes
   165                              <1>     noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   166                              <1> ;FCB opened file?
   167                              <1>     FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   168                              <1> ;Attribute Byte
   169                              <1>     readOnlyFile    equ 1h
   170                              <1>     hiddenFile      equ 2h
   171                              <1>     systemFile      equ 4h
   172                              <1>     volumeLabel     equ 8h
   173                              <1>     directoryFile   equ 10h ;Directory entry
   174                              <1>     archiveFile     equ 20h
   175                              <1> ;Device Info equates
   176                              <1> ;For a block device, bits [5:0] contain the drive number
   177                              <1>     charDevConIn    equ 1h  ;If set, device is CON input
   178                              <1>     charDevConOut   equ 2h  ;If set, device is CON output
   179                              <1>     charDevNulDev   equ 4h  ;If set, device is NULL device
   180                              <1>     charDevClockDev equ 8h  ;If set, device is CLOCK device
   181                              <1>     charDevFastOut  equ 10h ;If set, device supports INT 49h
   182                              <1>     charDevBinary   equ 20h ;If set, read in Binary mode!!!
   183                              <1>     charDevNoEOF    equ 40h ;If set, no EOF on input!!
   184                              <1>     blokDevNotFlush equ 40h ;If set, file not written to disk yet!!!
   185                              <1>     devCharDev      equ 80h ;If set, it is a char device!
   186                              <1>     charDevNetSpool equ 800h    ;If set, device is a network spooler
   187                              <1>     devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   188                              <1>     charDevNamePipe equ 2000h   ;If set, device is a named pipe
   189                              <1>     blokDevDTSet    equ 4000h   ;If set, date and time updated for all i/o
   190                              <1>     devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   191                              <1> ;------------------------------------------------------------------------;
   192                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   193                              <1> ; to an internal buffer, and then copying it to the specified location
   194                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   195                              <1> ; another request for the same sector from the same device is made, so 
   196                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   197                              <1> ; size, selected according to the largest detected sector size during 
   198                              <1> ; the initial loadup.
   199                              <1> ;
   200                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   201                              <1> ;
   202                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   203                              <1> ;------------------------------------------------------------------------;
   204                              <1> 
   205                              <1> struc bufferHdr
   206 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   207 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   208 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   209 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   210 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   211 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   212 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   213 0000001F ??                  <1>     .reserved    resb  1   ;Alignment byte
   214 00000020 ??                  <1>     .dataarea    resb  1   ;The size here changes wrt sector size!
   215                              <1> endstruc
   216                              <1> ;Buffer Flag equates
   217                              <1>     dosBuffer   equ 1h  ;DOS data sector in buffer
   218                              <1>     fatBuffer   equ 2h  ;FAT sector in buffer
   219                              <1>     dirBuffer   equ 4h  ;Directory sector in buffer
   220                              <1>     dataBuffer  equ 8h  ;File Data sector in buffer
   221                              <1>     refBuffer   equ 20h ;Data in buffer referenced by an application
   222                              <1>     dirtyBuffer equ 40h ;Data in buffer modified by an application
   223                              <1> ;------------------------------------------------------------------------;
   224                              <1> ; Memory control block for each memory arena
   225                              <1> ;------------------------------------------------------------------------;
   226                              <1> struc mcb
   227 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   228 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP or 0 for free space
   229 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   230 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   231                              <1> endstruc
   232                              <1> 
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   235                              <1> ; following order, thus allowing for return values to be placed in the 
   236                              <1> ; registers by accessing the caller register stack frame.
   237                              <1> ;------------------------------------------------------------------------;
   238                              <1> struc callerFrame
   239 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   240 00000008 ????????????????    <1>     .rbx    resq 1    
   241 00000010 ????????????????    <1>     .rcx    resq 1
   242 00000018 ????????????????    <1>     .rdx    resq 1
   243 00000020 ????????????????    <1>     .rsi    resq 1
   244 00000028 ????????????????    <1>     .rdi    resq 1
   245 00000030 ????????????????    <1>     .rbp    resq 1
   246 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   247 00000040 ????????????????    <1>     .r9     resq 1
   248                              <1> ;Pushed by Processor when invoked via Interrupt
   249 00000048 ????????????????    <1>     .rip    resq 1
   250 00000050 ????????????????    <1>     .cs     resq 1
   251 00000058 ????????????????    <1>     .flags  resq 1
   252                              <1> endstruc
   253                              <1> 
   254                              <1> %macro pushDOS 0
   255                              <1>     push r9
   256                              <1>     push r8
   257                              <1>     push rbp
   258                              <1>     push rdi
   259                              <1>     push rsi
   260                              <1>     push rdx
   261                              <1>     push rcx
   262                              <1>     push rbx
   263                              <1>     push rax
   264                              <1> %endmacro
   265                              <1> 
   266                              <1> %macro popDOS 0
   267                              <1>     pop rax
   268                              <1>     pop rbx
   269                              <1>     pop rcx
   270                              <1>     pop rdx
   271                              <1>     pop rsi
   272                              <1>     pop rdi
   273                              <1>     pop rbp
   274                              <1>     pop r8
   275                              <1>     pop r9
   276                              <1> %endmacro
   277                              <1> 
   278                              <1> struc psp
   279 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h
   280 00000002 ????????????????    <1>     .startSeg   resq 1  ;Pointer to the start of the PSP
   281 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   282 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   283 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   284 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   285 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   286 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   287 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   288 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size
   289 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh
   290 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain
   291 0000005B ????????????????    <1>     .xtraHdlPtr resq 1  ;Pointer to the extra handle array if needed
   292 00000063 ????????????????    <1>     .fcbPtr1    resq 1  ;Pointer to the first OS allocated FCB
   293 0000006B <res 15h>           <1>     .reserved   resb 21
   294 00000080 ??                  <1>     .charCount  resb 1  ;Number of characters in command tail
   295 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   296                              <1> endstruc
   297                              <1> 
   298                              <1> struc mcb
   299 00000000 ??                  <1>     .mzbyte     resb 1  ;M=In use, Z=Free
   300 00000001 ????????????????    <1>     .processPtr resq 1  ;Points to the start of the process PSP
   301 00000009 ????????            <1>     .paragraphs resd 1  ;Gives the number of paras allocated to this process
   302 0000000D ??????              <1>     .reserved   resb 3
   303                              <1>     .program:
   304                              <1> endstruc
   305                              <1> 
   306                              <1> struc clkStruc
   307 00000000 ????                <1>     .dateWord   resw 1
   308 00000002 ??                  <1>     .minutes    resb 1
   309 00000003 ??                  <1>     .hours      resb 1
   310 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   311 00000005 ??                  <1>     .seconds    resb 1
   312                              <1> endstruc
     8                                  Segment .text align=1   ;Init code
     9                                  %include "sysInit.asm"
    10                              <1> ; We arrive here with the following values in the registers.
    11                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    12                              <1> ; dx  = Int 33h boot device number
    13                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    14                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    15 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    16 00000002 909090909090909090- <1>     db (100h-2) dup (90h)   ;Duplicate NOPs for the PSP
    16 0000000B 909090909090909090- <1>
    16 00000014 909090909090909090- <1>
    16 0000001D 909090909090909090- <1>
    16 00000026 909090909090909090- <1>
    16 0000002F 909090909090909090- <1>
    16 00000038 909090909090909090- <1>
    16 00000041 909090909090909090- <1>
    16 0000004A 909090909090909090- <1>
    16 00000053 909090909090909090- <1>
    16 0000005C 909090909090909090- <1>
    16 00000065 909090909090909090- <1>
    16 0000006E 909090909090909090- <1>
    16 00000077 909090909090909090- <1>
    16 00000080 909090909090909090- <1>
    16 00000089 909090909090909090- <1>
    16 00000092 909090909090909090- <1>
    16 0000009B 909090909090909090- <1>
    16 000000A4 909090909090909090- <1>
    16 000000AD 909090909090909090- <1>
    16 000000B6 909090909090909090- <1>
    16 000000BF 909090909090909090- <1>
    16 000000C8 909090909090909090- <1>
    16 000000D1 909090909090909090- <1>
    16 000000DA 909090909090909090- <1>
    16 000000E3 909090909090909090- <1>
    16 000000EC 909090909090909090- <1>
    16 000000F5 909090909090909090- <1>
    16 000000FE 9090                <1>
    17                              <1> ;First make space for the MCB
    18 00000100 52                  <1>     push rdx    ;Save dl on stack briefly
    19 00000101 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    20 00000106 0F32                <1>     rdmsr
    21 00000108 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    22 0000010A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    23 0000010E 89C7                <1>     mov edi, eax        ;Get the low dword in
    24 00000110 4881C710000000      <1>     add rdi, mcb_size   ;Make space for the MCB
    25 00000117 89F8                <1>     mov eax, edi
    26 00000119 4889FA              <1>     mov rdx, rdi
    27 0000011C 48C1EA20            <1>     shr rdx, 20h
    28 00000120 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    29 00000122 5A                  <1>     pop rdx
    30                              <1> ;------------------------------------------------;
    31                              <1> ;           Sanitise the data area               ;
    32                              <1> ;------------------------------------------------;
    33 00000123 B9[D4120000]        <1>     mov ecx, dSegLen
    34 00000128 30C0                <1>     xor al, al
    35 0000012A 57                  <1>     push rdi    ;Temp save rdi on the stack
    36 0000012B F3AA                <1>     rep stosb
    37 0000012D 5F                  <1>     pop rdi
    38                              <1> 
    39                              <1> ;------------------------------------------------;
    40                              <1> ;          Start saving Basic DOS data           ;
    41                              <1> ;------------------------------------------------;
    42 0000012E 64881425[08000000]  <1>     mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    43 00000136 488D15C3FEFFFF      <1>     lea rdx, tempPSP    ;Get the address of the tempPSP
    44 0000013D 6448891425-         <1>     mov qword fs:[currentPSP], rdx
    44 00000142 [D7000000]          <1>
    45                              <1> ;Copy DOS to its final resting place
    46 00000146 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    46 0000014B [00000000]          <1>
    47 0000014F 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rdx 
    48 00000152 4881C7[D4120000]    <1>     add rdi, dSegLen ;Move destination past end of data area
    49 00000159 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    50 00000160 B900100000          <1>     mov ecx, 1000h
    51 00000165 F348A5              <1>     rep movsq
    52                              <1> 
    53 00000168 CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    54 0000016A 6444880425-         <1>     mov byte fs:[numRemMSD], r8b    ;Save number of physical int 33h devs
    54 0000016F [09000000]          <1>
    55 00000173 64C60425[99000000]- <1>     mov byte fs:[lastdrvNum], 5     ;Last drive is by default 5
    55 0000017B 05                  <1>
    56 0000017C 64C60425[0A000000]- <1>     mov byte fs:[numLRemDrives], 0     ;Number of logical drives
    56 00000184 00                  <1>
    57                              <1> 
    58                              <1> ;------------------------------------------------;
    59                              <1> ;          Find largest sector size              ;
    60                              <1> ;------------------------------------------------;
    61                              <1> largestSectorSearch:
    62 00000185 30D2                <1>     xor dl, dl
    63 00000187 31FF                <1>     xor edi, edi    ;Use this as the counter for the largest sector size
    64                              <1> .lss:
    65 00000189 B488                <1>     mov ah, 88h
    66 0000018B CD33                <1>     int 33h
    67 0000018D 39C7                <1>     cmp edi, eax
    68 0000018F 0F42F8              <1>     cmovb edi, eax  ;Only replace ebp if eax is greater
    69 00000192 FEC2                <1>     inc dl
    70 00000194 4438C2              <1>     cmp dl, r8b
    71 00000197 75F0                <1>     jne .lss
    72 00000199 6466893C25-         <1>     mov word fs:[maxBytesSec], di
    72 0000019E [87000000]          <1>
    73                              <1> 
    74                              <1> ;------------------------------------------------;
    75                              <1> ;          Driver Adjustments and inits          ;
    76                              <1> ;------------------------------------------------;
    77                              <1> ;Modify the pointers in nData before putting them in the data area
    78 000001A2 48012DA5030000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
    79 000001A9 48012DA8030000      <1>     add qword [nData + drvHdr.strPtr], rbp
    80 000001B0 48012DA9030000      <1>     add qword [nData + drvHdr.intPtr], rbp
    81                              <1> ;Copy the Null driver to its location in Sysvars
    82 000001B7 B922000000          <1>     mov ecx, drvHdr_size
    83 000001BC 488D358B030000      <1>     lea rsi, qword [nData]
    84 000001C3 488DBD[A5000000]    <1>     lea rdi, qword [rbp + nulDevHdr]
    85 000001CA F3A4                <1>     rep movsb   
    86                              <1> 
    87                              <1> ;Adjust the addresses in the other driver headers 
    88 000001CC 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
    88 000001CE [E30C000000000000]  <1>
    89 000001D6 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
    90 000001DB 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
    91                              <1> adjDrivers:
    92 000001DF E893020000          <1>     call adjustDrvHdr
    93 000001E4 E2F9                <1>     loop adjDrivers
    94                              <1> 
    95                              <1> ;Open NUL
    96 000001E6 488D9D[0B000000]    <1>     lea rbx, qword [rbp + charReqHdr]
    97 000001ED C6030D              <1>     mov byte [rbx + openReqPkt.hdrlen], openReqPkt_size
    98 000001F0 C6430300            <1>     mov byte [rbx + openReqPkt.status], 0
    99 000001F4 FF95[AF000000]      <1>     call qword [rbp + nulDevHdr + drvHdr.strPtr]
   100 000001FA FF95[B7000000]      <1>     call qword [rbp + nulDevHdr + drvHdr.intPtr]
   101                              <1> ;Open CON
   102                              <1> conInit:    ;Rather than keeping this resident... do it here
   103                              <1> .ci0:
   104 00000200 B401                <1>     mov ah, 01      ;Get buffer status
   105 00000202 CD36                <1>     int 36h
   106 00000204 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   107 00000206 30E4                <1>     xor ah, ah
   108 00000208 CD36                <1>     int 36h ;Read key to flush from buffer
   109 0000020A EBF4                <1>     jmp short .ci0
   110                              <1> .ci1:
   111 0000020C B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   112 00000211 CD30                <1>     int 30h
   113 00000213 B402                <1>     mov ah, 02h
   114 00000215 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   115 00000217 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   116 00000219 CD30                <1>     int 30h
   117 0000021B B707                <1>     mov bh, 07h     ;Grey/Black attribs
   118 0000021D B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   119 00000222 CD30                <1>     int 30h
   120                              <1> 
   121                              <1>     ;Save ptr to ConHdr in Sysvars
   122 00000224 488D85[E30C0000]    <1>     lea rax, qword [rbp + conHdr]
   123 0000022B 6448890425-         <1>     mov qword fs:[conPtr], rax
   123 00000230 [7F000000]          <1>
   124                              <1> 
   125                              <1>     ;Save ptr to ClkHdr in Sysvars
   126 00000234 488D85[490D0000]    <1>     lea rax, qword [rbp + clkHdr]
   127 0000023B 6448890425-         <1>     mov qword fs:[clockPtr], rax
   127 00000240 [77000000]          <1>
   128                              <1> 
   129                              <1> ;------------------------------------------------;
   130                              <1> ;          Kernel inits and adjustments          ;
   131                              <1> ;------------------------------------------------;
   132                              <1> ;Adjust Int 41h address table
   133                              <1> adjInt41h:
   134 00000244 B96A000000          <1>     mov ecx, dispatchTableL/8 ;Number of elements in table
   135 00000249 48BB-               <1>     mov rbx, functionDispatch.dispatchTable ;Get EA of table
   135 0000024B [0007000000000000]  <1>
   136 00000253 488D5C1D00          <1>     lea rbx, qword [rbp+rbx]    ;Point to the start of the relocated table 
   137                              <1> .ai41h:
   138 00000258 48012B              <1>     add qword [rbx], rbp    ;Add base address value to entry in reloc table
   139 0000025B 4881C308000000      <1>     add rbx, 8              ;Each entry is size 8
   140 00000262 FFC9                <1>     dec ecx
   141 00000264 75F2                <1>     jnz .ai41h  ;Keep looping until all entries have been adjusted
   142                              <1> 
   143                              <1> ;Adjust Interrupt Entries Int 40h-49h
   144                              <1> adjInts:
   145 00000266 B340                <1>     mov bl, 40h
   146 00000268 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   147 0000026D CD35                <1>     int 35h
   148 0000026F B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   149 00000274 488D3D83020000      <1>     lea rdi, intData
   150 0000027B 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   151                              <1> .ai0:
   152 0000027D B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   153 00000282 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   154 00000285 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   155 00000288 CD35                <1>     int 35h
   156 0000028A 4881C708000000      <1>     add rdi, 8
   157 00000291 FFC1                <1>     inc ecx
   158 00000293 81F94A000000        <1>     cmp ecx, 4Ah
   159 00000299 75E2                <1>     jne .ai0
   160                              <1> 
   161                              <1> ;------------------------------------------------;
   162                              <1> ;         Init msd driver, create DPB            ;
   163                              <1> ;------------------------------------------------;
   164                              <1> storageInits:
   165                              <1> ;First save dpb and cds pointer in sysvars
   166 0000029B 488D9D[00000000]    <1>     lea rbx, qword [rbp + firstDPB]
   167 000002A2 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   167 000002A7 [67000000]          <1>
   168 000002AB 488D9D[49020000]    <1>     lea rbx, qword [rbp + initCDS]
   169 000002B2 6448891C25-         <1>     mov qword fs:[cdsHeadPtr], rbx
   169 000002B7 [91000000]          <1>
   170                              <1> 
   171                              <1> ;Open Mass Storage
   172 000002BB 488D9D[35000000]    <1>     lea rbx, qword [rbp + diskReqHdr]
   173 000002C2 C6031F              <1>     mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   174 000002C5 C6430200            <1>     mov byte [rbx + initReqPkt.cmdcde], 00h     ;MSD init
   175 000002C9 66C743030000        <1>     mov word [rbx + initReqPkt.status], 0       ;Zero status word
   176 000002CF 648A0425[0A000000]  <1>     mov al, byte fs:[numLRemDrives]
   177 000002D7 88431E              <1>     mov byte [rbx + initReqPkt.drvnum], al      ;First unit is drive A
   178 000002DA FF95[750D0000]      <1>     call qword [rbp + msdHdr + drvHdr.strPtr]
   179 000002E0 FF95[7D0D0000]      <1>     call qword [rbp + msdHdr + drvHdr.intPtr]
   180                              <1>     ;Check if it returned OK first!
   181 000002E6 66F743030080        <1>     test word [rbx + initReqPkt.status], 8000h  ;Test the error bit
   182 000002EC 0F8598010000        <1>     jnz errorInit   ;If the bit is set, halt execution
   183 000002F2 8A430D              <1>     mov al, byte [rbx + initReqPkt.numunt]
   184 000002F5 64880425[0A000000]  <1>     mov byte fs:[numLRemDrives], al
   185 000002FD 8885[850D0000]      <1>     mov byte [rbp + msdHdr + drvHdr.drvNam], al ;Save # of units in name field
   186                              <1> 
   187 00000303 488B5316            <1>     mov rdx, qword [rbx + initReqPkt.optptr]    ;Get ptr to bpbPtrTbl in rdx
   188 00000307 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   189 0000030A 30C9                <1>     xor cl, cl  ;Clear counter
   190 0000030C 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   190 00000311 [67000000]          <1>
   191                              <1> .si0:   
   192 00000315 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   193 00000318 B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   194 0000031A CD41                <1>     int 41h
   195                              <1> ;Add other data to DPB
   196 0000031C 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   197 0000031F 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   198 00000322 50                  <1>     push rax
   199 00000323 488D87[6B0D0000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   200 0000032A 4889451C            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   201 0000032E 58                  <1>     pop rax
   202 0000032F FEC1                <1>     inc cl
   203 00000331 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   204 00000333 7416                <1>     je .si1
   205 00000335 50                  <1>     push rax
   206 00000336 488D4536            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   207 0000033A 48894526            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   208 0000033E 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   209 00000341 58                  <1>     pop rax
   210 00000342 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   211 00000349 EBCA                <1>     jmp short .si0
   212                              <1> .si1:
   213                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   214 0000034B 48C74526FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   215 00000353 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   216                              <1> 
   217                              <1> ;------------------------------------------------;
   218                              <1> ;                   MCB inits                    ;
   219                              <1> ;------------------------------------------------;
   220                              <1> 
   221                              <1> ;Build the DOS segment's MCB header
   222 00000356 4889EB              <1>     mov rbx, rbp
   223 00000359 4881EB10000000      <1>     sub rbx, mcb_size   ;Point rbx to the start of the MCB
   224 00000360 C6034D              <1>     mov byte [rbx + mcb.marker], "M"
   225 00000363 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get the current PSP
   225 00000368 [D7000000]          <1>
   226 0000036C 48894301            <1>     mov qword [rbx + mcb.owner], rax
   227 00000370 C74309FFFFFFFF      <1>     mov dword [rbx + mcb.blockSize], -1 ;Let size be max for now, adjust later
   228                              <1> 
   229 00000377 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save rbx in data area
   229 0000037C [5F000000]          <1>
   230                              <1> 
   231                              <1> ;------------------------------------------------;
   232                              <1> ;          Default File Handle Creation          ;
   233                              <1> ;------------------------------------------------;
   234                              <1> 
   235                              <1> ;Fill in the default file table entries
   236                              <1>     ;lea rbx, qword [rbp + firstSftHeader]
   237                              <1>     ;mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   238                              <1>     ;mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   239                              <1>     ;mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   240                              <1> 
   241                              <1>     ;lea rbx, qword [rbp + firstSft]
   242                              <1>     ;mov word [rbx + sft.wNumHandles], 0 ;Nothing pointing to this file yet
   243                              <1>     ;mov word [rbx + sft.w]
   244                              <1> 
   245                              <1> ;------------------------------------------------;
   246                              <1> ;               Load CONFIG.SYS                  ;
   247                              <1> ;------------------------------------------------;
   248                              <1> ;------------------------------------------------;
   249                              <1> ;              Process CONFIG.SYS                ;
   250                              <1> ;------------------------------------------------;
   251                              <1> ;------------------------------------------------;
   252                              <1> ;                 Create a CDS                   ;
   253                              <1> ;------------------------------------------------;
   254                              <1> ;------------------------------------------------;
   255                              <1> ;           Load Command interpreter             ;
   256                              <1> ;------------------------------------------------;
   257                              <1> 
   258                              <1> ;Test Error Case
   259 00000380 B430                <1>     mov ah, 00110000b
   260 00000382 B000                <1>     mov al, 00h
   261 00000384 BF0C000000          <1>     mov edi, 0Ch
   262 00000389 CD44                <1>     int 44h
   263                              <1> 
   264 0000038B 488D1515010000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   265 00000392 B409                <1>     mov ah, 09h
   266 00000394 CD41                <1>     int 41h
   267                              <1> 
   268 00000396 B801C50000          <1>     mov eax, 0C501h ;Connect debugger
   269 0000039B CD35                <1>     int 35h
   270                              <1> l1:
   271 0000039D B401                <1>     mov ah, 01h  ;Write with echo
   272 0000039F CD41                <1>     int 41h
   273 000003A1 3C00                <1>     cmp al, 0
   274 000003A3 7402                <1>     je l2
   275 000003A5 EBF6                <1>     jmp short l1
   276                              <1> l2:
   277 000003A7 B407                <1>     mov ah, 07h
   278 000003A9 CD41                <1>     int 41h
   279 000003AB 3C42                <1>     cmp al, 42h
   280 000003AD 75EE                <1>     jne l1
   281                              <1> l3:
   282 000003AF 6466C70425-         <1>     mov word fs:[CLOCKrecrd + clkStruc.dateWord], 0
   282 000003B4 [18010000]0000      <1>
   283 000003BA 488D9D[0B000000]    <1>     lea rbx, qword [rbp + charReqHdr] ;Get the address of this request block
   284 000003C1 488D85[18010000]    <1>     lea rax, qword [rbp + CLOCKrecrd]
   285 000003C8 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   286 000003CB C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read the time
   287 000003CF 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   288 000003D5 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   289 000003D9 C7431606000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 06
   290 000003E0 FF95[530D0000]      <1>     call qword [rbp + clkHdr + drvHdr.strPtr]
   291 000003E6 FF95[5B0D0000]      <1>     call qword [rbp + clkHdr + drvHdr.intPtr]
   292                              <1> 
   293 000003EC B403                <1>     mov ah, 03h
   294 000003EE 30FF                <1>     xor bh, bh
   295 000003F0 CD30                <1>     int 30h
   296 000003F2 30D2                <1>     xor dl, dl  ;0 column
   297 000003F4 B402                <1>     mov ah, 02h
   298 000003F6 CD30                <1>     int 30h
   299                              <1> 
   300 000003F8 488D9D[18010000]    <1>     lea rbx, qword [rbp + CLOCKrecrd]
   301 000003FF 0FB64303            <1>     movzx eax, byte [rbx + clkStruc.hours]
   302 00000403 E832000000          <1>     call .clkHexToBCD
   303 00000408 B40E                <1>     mov ah, 0Eh
   304 0000040A B03A                <1>     mov al, ":"
   305 0000040C CD30                <1>     int 30h
   306 0000040E 0FB64302            <1>     movzx eax, byte [rbx + clkStruc.minutes]
   307 00000412 E823000000          <1>     call .clkHexToBCD
   308 00000417 B40E                <1>     mov ah, 0Eh
   309 00000419 B03A                <1>     mov al, ":"
   310 0000041B CD30                <1>     int 30h
   311 0000041D 0FB64305            <1>     movzx eax, byte [rbx + clkStruc.seconds]
   312 00000421 E814000000          <1>     call .clkHexToBCD
   313 00000426 B40E                <1>     mov ah, 0Eh
   314 00000428 B02E                <1>     mov al, "."
   315 0000042A CD30                <1>     int 30h
   316 0000042C 0FB64304            <1>     movzx eax, byte [rbx + clkStruc.hseconds]
   317 00000430 E805000000          <1>     call .clkHexToBCD
   318 00000435 E963FFFFFF          <1>     jmp l1
   319                              <1> .clkHexToBCD:
   320                              <1> ;Converts a Hex byte into two BCD digits
   321                              <1> ;Takes input in each nybble of al
   322 0000043A 53                  <1>     push rbx
   323 0000043B 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
   323 00000444 00                  <1>
   324 00000445 31D2                <1>     xor edx, edx
   325 00000447 48F7F3              <1>     div rbx
   326 0000044A 80C230              <1>     add dl, '0'
   327 0000044D 80FA39              <1>     cmp dl, '9'
   328 00000450 7603                <1>     jbe .chtb0
   329 00000452 80C207              <1>     add dl, 'A'-'0'-10
   330                              <1> .chtb0:
   331 00000455 88D1                <1>     mov cl, dl    ;Save remainder byte
   332 00000457 31D2                <1>     xor edx, edx
   333 00000459 48F7F3              <1>     div rbx
   334 0000045C 80C230              <1>     add dl, '0'
   335 0000045F 80FA39              <1>     cmp dl, '9'
   336 00000462 7603                <1>     jbe .chtb1
   337 00000464 80C207              <1>     add dl, 'A'-'0'-10
   338                              <1> .chtb1:
   339 00000467 88D5                <1>     mov ch, dl    ;Save remainder byte
   340                              <1> 
   341 00000469 88E8                <1>     mov al, ch    ;Get most sig digit into al
   342 0000046B B40E                <1>     mov ah, 0Eh
   343 0000046D CD30                <1>     int 30h
   344 0000046F 88C8                <1>     mov al, cl    ;Get least sig digit into al
   345 00000471 B40E                <1>     mov ah, 0Eh
   346 00000473 CD30                <1>     int 30h
   347 00000475 5B                  <1>     pop rbx
   348 00000476 C3                  <1>     ret
   349                              <1> ;--------------------------------
   350                              <1> ;       PROCS FOR SYSINIT       :
   351                              <1> ;--------------------------------
   352                              <1> adjustDrvHdr:
   353                              <1> ;Input: rsi = Effective address of driver in DOS segment
   354                              <1> ;       rbp = Ptr to the start of the DOS segment
   355                              <1> ;Output: rsi = EA of next header in DOS segment
   356 00000477 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   357 0000047A 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   358 0000047E 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   359 00000482 4881C622000000      <1>     add rsi, drvHdr_size
   360 00000489 C3                  <1>     ret
   361                              <1> errorInit:
   362                              <1> ;If a critical error occurs during sysinit, fail through here
   363 0000048A 488D152E000000      <1>     lea rdx, hltmsg
   364 00000491 B409                <1>     mov ah, 09h
   365 00000493 CD41                <1>     int 41h
   366 00000495 FA                  <1>     cli ;Clear interrupts
   367 00000496 B0FF                <1>     mov al, -1
   368 00000498 66BAA100            <1>     mov dx, 0A1h    ;PIC2 data
   369 0000049C EE                  <1>     out dx, al      ;Mask all lines
   370 0000049D 66BA2100            <1>     mov dx, 21h     ;PIC1 data
   371 000004A1 EE                  <1>     out dx, al      ;Mask all lines
   372                              <1> .ei0:
   373 000004A2 F4                  <1>     hlt
   374 000004A3 F390                <1>     pause
   375 000004A5 EBFB                <1>     jmp short .ei0
   376                              <1> 
   377                              <1> ;--------------------------------
   378                              <1> ;       DATA FOR SYSINIT        :
   379                              <1> ;--------------------------------
   380 000004A7 0A0D5374617274696E- <1> strtmsg db 0Ah,0Dh,"Starting SCP/DOS...",0Ah,0Dh,"$"
   380 000004B0 67205343502F444F53- <1>
   380 000004B9 2E2E2E0A0D24        <1>
   381 000004BF 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0Ah,0Dh,"$"
   381 000004C8 7469616C6973696E67- <1>
   381 000004D1 20534350444F532E53- <1>
   381 000004DA 59532E205379737465- <1>
   381 000004E3 6D2068616C74696E67- <1>
   381 000004EC 2E2E2E0A0D24        <1>
   382 000004F2 434F4E00            <1> conName db "CON",0
   383 000004F6 41555800            <1> auxName db "AUX",0
   384 000004FA 50524E00            <1> prnName db "PRN",0
   385                              <1> intData:
   386 000004FE [1502000000000000]  <1>     dq terminateProcess ;Int 40h
   387 00000506 [C802000000000000]  <1>     dq functionDispatch ;Int 41h
   388 0000050E [1702000000000000]  <1>     dq terminateHandler ;Int 42h
   389 00000516 [1702000000000000]  <1>     dq ctrlCHandler     ;Int 43h
   390 0000051E [500A000000000000]  <1>     dq critErrorHandler ;Int 44h
   391 00000526 [2D02000000000000]  <1>     dq absDiskRead      ;Int 45h
   392 0000052E [1902000000000000]  <1>     dq absDiskWrite     ;Int 46h
   393 00000536 [BA02000000000000]  <1>     dq terminateResident    ;Int 47h
   394 0000053E [BA02000000000000]  <1>     dq inDosHandler     ;Int 48h
   395 00000546 [BC02000000000000]  <1>     dq fastOutput       ;Int 49h
   396                              <1> nData:
   397 0000054E [E30C000000000000]  <1>     dq conHdr
   398 00000556 0480                <1>     dw 08004h
   399 00000558 [8B0E000000000000]  <1>     dq nulStrat
   400 00000560 [910E000000000000]  <1>     dq nulIntr
   401 00000568 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
    10                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    11                                  %include "dosSeg.asm"
    12                              <1> ;This file contains the main DOS data segment
    13                              <1> 
    14 00000000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    15 00000008 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    16 00000009 ??                  <1>     numRemMSD   resb 1    ;Number of physical removable MSDs in system x
    17 0000000A ??                  <1>     numLRemDrives  resb 1 ;Number of logical removable drives in system x
    18                              <1>     ;if numRemMSD = 1 then numLRemDrives = 2 and we have a single drive system
    19 0000000B <res 2Ah>           <1>     charReqHdr  resb ioReqPkt_size  ;Character IO Request header x
    20 00000035 <res 2Ah>           <1>     diskReqHdr  resb ioReqPkt_size  ;Disk Action Request header x
    21                              <1>     ;The device driver header with space for the largest possible packet
    22 0000005F ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    23                              <1> sysVarsPtr:
    24 00000067 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    25 0000006F ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    26 00000077 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    27                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    28 0000007F ????????????????    <1>     conPtr      resq 1    ;Pointer to the current active CON device header  x
    29                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    30 00000087 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    31 00000089 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain
    32 00000091 ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    33 00000099 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    34 0000009A ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    35 000000A2 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    36 000000A4 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    37 000000A5 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    38                              <1> 
    39                              <1> ;Start of Swappable Data Area, this bit can remain static
    40 000000C7 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h
    41 000000C8 ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving
    42 000000C9 ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh
    43 000000CA ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    44 000000CB ????                <1>     errorExt    resw 1  ;Extended Error Code
    45 000000CD ??                  <1>     errorAction resb 1  ;Suggested action for error  
    46 000000CE ??                  <1>     errorClass  resb 1  ;Error Class
    47                              <1> 
    48 000000CF ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA
    49 000000D7 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP
    50 000000DF ????????????????    <1>     rdiErrorPtr resq 1  ;Saves RDI value of last error (could make this di)
    51 000000E7 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
    52 000000EF ????                <1>     lastRetCode resw 1  ;Last return code returned by Int 41h/4Ch
    53 000000F1 ??                  <1>     currentDrv  resb 1  ;Default, last accessed drive
    54 000000F2 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls
    55 000000F3 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify
    56                              <1> ;SDA, needs to be replaced between processes
    57 000000F4 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
    58                              <1> 
    59                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    60 000000FC ??                  <1>     singleDrv   resb 1  
    61                              <1> ;This is done to allow for DOS to give the user a change to swap devices
    62                              <1> 
    63 000000FD ??                  <1>     Int44RetVal resb 1  ;Saves a copy of the Int 44 return value
    64 000000FE ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
    65 000000FF ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
    66 00000100 ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
    67 00000108 ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
    68 00000110 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
    69                              <1> ;Time stuff
    70 00000118 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
    71 0000011E ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
    72 0000011F ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
    73 00000120 ??                  <1>     years       resb 1  ;00h - FFh (00 = 1980 - 128 = 2107)
    74 00000121 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
    75 00000123 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
    76                              <1> 
    77                              <1> ;Stacks
    78 00000124 <res 528h>          <1>     critStack   resq 165
    79 0000064C ????????????????    <1>     critStakTop resq 1
    80 00000654 <res 638h>          <1>     IOStack     resq 199
    81 00000C8C ????????????????    <1>     IOStakTop   resq 1
    82 00000C94 <res 638h>          <1>     DiskStack   resq 199
    83 000012CC ????????????????    <1>     DiskStakTop resq 1
    84                              <1>     dSegLen     equ     $
    12                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    13                                  %include "staticData.asm"
    14                              <1> 
    15                              <1> ;-----------------------------------:
    16                              <1> ;           Static Data             :
    17                              <1> ;-----------------------------------:
    18 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    19 00000001 01                  <1> dosMinor    db 01h      ;.01
    14                                  %include "fat.asm"
    15                              <1> ;-----------------------------------:
    16                              <1> ;       File System routines        :
    17                              <1> ;-----------------------------------:
    18                              <1> name2Clust:
    19                              <1> ;Converts a file name to a first cluster number
    20                              <1> ;Converts the whole path subdirectory by subdirectory
    21                              <1> ;On entry: rbx = ptr to ASCIIZ string of file path, maxlen = 67 + 1 (for the 0)
    22                              <1> ;On return: ebx = First cluster number for the file
    23                              <1> ;   On error: CF=CY, ax = Error code
    24                              <1> 
    25                              <1> ;First ascertain path is valid path and get drive letter
    26 00000002 56                  <1>     push rsi
    27 00000003 57                  <1>     push rdi
    28 00000004 51                  <1>     push rcx
    29 00000005 4889DF              <1>     mov rdi, rbx
    30 00000008 4889DE              <1>     mov rsi, rbx
    31 0000000B 807F013A            <1>     cmp byte [rdi + 1], ":" ;Check it is a colon for full path
    32 0000000F 750B                <1>     jne .cdsPath    ;Use CDS for current dir
    33                              <1> .getSubDir:
    34 00000011 B05C                <1>     mov al, "\"
    35 00000013 AE                  <1>     scasb   ;inc 
    36 00000014 7400                <1>     je .psfnd   ;Path separator found
    37                              <1> 
    38                              <1> .psfnd:
    39 00000016 48FFCF              <1>     dec rdi
    40 00000019 4889FE              <1>     mov rsi, rdi
    41                              <1> 
    42                              <1> .cdsPath:
    43 0000001C 59                  <1>     pop rcx
    44 0000001D 5F                  <1>     pop rdi
    45 0000001E 5E                  <1>     pop rsi
    46 0000001F C3                  <1>     ret
    47                              <1> 
    48                              <1> clust2FATEntry:
    49                              <1> ;Converts a cluster number to a FAT entry
    50                              <1> ;Entry:  rsi points to the DPB for the transacting device
    51                              <1> ;        eax = Cluster number to look for
    52                              <1> ;Exit: eax = Sector on disk of FAT, edx = 1.5Word/Word/DWord in sector of entry
    53 00000020 53                  <1>     push rbx
    54 00000021 51                  <1>     push rcx
    55 00000022 8B5E10              <1>     mov ebx, dword [rsi + dpb.dClusterCount]
    56 00000025 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    57 0000002B 7314                <1>     jae .fat32
    58 0000002D 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    59 00000033 7204                <1>     jb .fat12
    60                              <1> ;FAT16
    61 00000035 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    62 00000037 EB0B                <1>     jmp short .common
    63                              <1> .fat12:
    64 00000039 89C1                <1>     mov ecx, eax    ;ecx = eax
    65 0000003B D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    66 0000003D 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    67 0000003F EB03                <1>     jmp short .common
    68                              <1> .fat32:
    69 00000041 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    70                              <1> .common:
    71                              <1> ;eax has the FAToffset
    72 00000044 8A4E02              <1>     mov cl, byte [rsi + dpb.bBytesPerSectorShift]
    73 00000047 BA01000000          <1>     mov edx, 1
    74 0000004C D3E2                <1>     shl edx, cl    ;Turn edx to number of bytes per sector
    75 0000004E 89D1                <1>     mov ecx, edx
    76 00000050 31D2                <1>     xor edx, edx    ;edx = 0
    77 00000052 F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    78 00000054 034605              <1>     add eax, dword [rsi + dpb.dFAToffset]   ;Add the offset to the first FAT
    79 00000057 59                  <1>     pop rcx
    80 00000058 5B                  <1>     pop rbx
    81 00000059 C3                  <1>     ret
    82                              <1> 
    83                              <1> readBuffer:
    84                              <1> ;
    85                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
    86                              <1> ;TO CALL!
    87                              <1> ;
    88                              <1> ;This function will return a pointer to the desired data sector OR 
    89                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
    90                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
    91                              <1> ;Entry: rax = Sector to read
    92                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data) 
    93                              <1> ;       rsi = DPB of transacting drive
    94                              <1> ;Exit:  CF = NC : All ok!
    95                              <1> ;       rbx = Pointer to buffer header with valid data in buffer.
    96                              <1> ;       All other registers as before
    97                              <1> ;       CF = CY: Something went wrong, return error code or INT 44h
    98                              <1> ;       ch = 0 -> Data Not Flushed To Disk
    99                              <1> ;       ch = 1 -> Data Not Read From Disk
   100                              <1> ;       rbx = Pointer to buffer containing sector without valid data in buffer ;            (either unflushed or unread)
   101 0000005A 52                  <1>     push rdx
   102 0000005B 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   103 0000005D E83A010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   104 00000062 4881FBFFFFFFFF      <1>     cmp rbx, -1
   105 00000069 7403                <1>     je .rbReadNewSector
   106                              <1> .rbExit:
   107 0000006B F8                  <1>     clc
   108                              <1> .rbExitNoFlag:
   109 0000006C 5A                  <1>     pop rdx
   110 0000006D C3                  <1>     ret
   111                              <1> .rbReadNewSector:
   112 0000006E E8D9000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rbx
   113 00000073 4889DD              <1>     mov rbp, rbx
   114 00000076 30ED                <1>     xor ch, ch
   115 00000078 E869000000          <1>     call flushBuffer
   116 0000007D 72ED                <1>     jc .rbExitNoFlag    ;Exit in error
   117                              <1> ;rbx points to bufferHdr that has been appropriately linked to the head of chain
   118 0000007F 51                  <1>     push rcx
   119 00000080 885508              <1>     mov byte [rbp + bufferHdr.driveNumber], dl
   120 00000083 884D09              <1>     mov byte [rbp + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA
   121 00000086 4889450A            <1>     mov qword [rbp + bufferHdr.bufferLBA], rax
   122 0000008A 80F902              <1>     cmp cl, fatBuffer
   123 0000008D B201                <1>     mov dl, 1   ;Default values if not fat buffer
   124 0000008F B900000000          <1>     mov ecx, 0  ;Ditto!
   125 00000094 7506                <1>     jne .rbNonFATbuffer
   126 00000096 8A5609              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   127 00000099 8B4E14              <1>     mov ecx, dword [rsi + dpb.dFATlength]
   128                              <1> .rbNonFATbuffer:
   129 0000009C 885512              <1>     mov byte [rbp + bufferHdr.bufFATcopy], dl
   130 0000009F 894D13              <1>     mov dword [rbp + bufferHdr.bufFATsize], ecx
   131 000000A2 48897517            <1>     mov qword [rbp + bufferHdr.driveDPBPtr], rsi
   132 000000A6 C6451F00            <1>     mov byte [rbp + bufferHdr.reserved], 0
   133 000000AA 59                  <1>     pop rcx
   134 000000AB FEC5                <1>     inc ch  ;If an error occurs, have the signature in ch
   135 000000AD E802000000          <1>     call readSector ;Carry the flag from the request
   136 000000B2 EBB8                <1>     jmp short .rbExitNoFlag
   137                              <1> 
   138                              <1> readSector:
   139                              <1> ;Reads a sector into a built sector buffer
   140                              <1> ;Entry: rbp = Pointer to buffer header
   141                              <1> ;Exit:  CF=NC : Success
   142                              <1> ;       CF=CY : Fail, terminate the request
   143                              <1> ;       rbx pointing to buffer header
   144                              <1> ;First make request to device driver
   145 000000B4 50                  <1>     push rax
   146 000000B5 53                  <1>     push rbx
   147 000000B6 51                  <1>     push rcx
   148 000000B7 52                  <1>     push rdx
   149 000000B8 56                  <1>     push rsi
   150                              <1> .rsRequest0:
   151 000000B9 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   152                              <1> .rsRequest1:
   153 000000BE 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
   154 000000C1 B901000000          <1>     mov ecx, 1  ;One sector to copy
   155 000000C6 488B550A            <1>     mov rdx, qword [rbp + bufferHdr.bufferLBA]
   156 000000CA 488B5D20            <1>     mov rbx, qword [rbp + bufferHdr.dataarea]
   157 000000CE E85A010000          <1>     call absDiskRead    ;Call INT 45h
   158 000000D3 7207                <1>     jc .rsFail
   159                              <1> .rsExit:
   160 000000D5 F8                  <1>     clc
   161                              <1> .rsExitBad:
   162 000000D6 5E                  <1>     pop rsi
   163 000000D7 5A                  <1>     pop rdx
   164 000000D8 59                  <1>     pop rcx
   165 000000D9 5B                  <1>     pop rbx
   166 000000DA 58                  <1>     pop rax
   167 000000DB C3                  <1>     ret
   168                              <1> .rsFail:
   169                              <1> ;Enter here only if the request failed
   170 000000DC FFCE                <1>     dec esi
   171 000000DE 75DE                <1>     jnz .rsRequest1 ;Try the request again!
   172                              <1> ;Request failed thrice, critical error call
   173 000000E0 F9                  <1>     stc
   174 000000E1 E9F0FFFFFF          <1>     jmp .rsExitBad  ;Abort
   175                              <1> 
   176                              <1> flushBuffer:
   177                              <1> ;Flushes the data in a sector buffer to disk!
   178                              <1> ;Entry: rbp = Pointer to buffer header for this buffer
   179                              <1> ;Exit:  CF=NC : Success
   180                              <1> ;       CF=CY : Fail, terminate the request
   181                              <1> ;       rbx preserved pointing to data buffer
   182                              <1> ;First make request to device driver
   183 000000E6 50                  <1>     push rax
   184 000000E7 51                  <1>     push rcx
   185 000000E8 52                  <1>     push rdx
   186 000000E9 56                  <1>     push rsi
   187 000000EA F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   188 000000EE 742E                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   189                              <1> ;Build a request block in diskReqHdr
   190 000000F0 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
   191 000000F3 B901000000          <1>     mov ecx, 1  ;One sector to copy
   192 000000F8 488B550A            <1>     mov rdx, qword [rbp + bufferHdr.bufferLBA]
   193 000000FC 488B5D20            <1>     mov rbx, qword [rbp + bufferHdr.dataarea]
   194 00000100 E814010000          <1>     call absDiskWrite    ;Call INT 46h
   195 00000105 7521                <1>     jnz .fbFail
   196                              <1> ;Now check if the buffer was a FAT, to write additional copies
   197 00000107 F6450902            <1>     test byte [rbp + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   198 0000010B 7411                <1>     jz .fbFreeExit  ;If not, exit
   199 0000010D FE4D12              <1>     dec byte [rbp + bufferHdr.bufFATcopy]
   200 00000110 740C                <1>     jz .fbFreeExit  ;Once this goes to 0, stop writing FAT copies
   201 00000112 8B4513              <1>     mov eax, dword [rbp + bufferHdr.bufFATsize]
   202 00000115 4801450A            <1>     add qword [rbp + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   203                              <1>     jmp .fbRequest0 ;Make another request
   203          ******************  <1>  error: symbol `flushBuffer.fbRequest0' not defined
   204                              <1> .fbFreeExit:
   205                              <1> ;Free the buffer if it was flushed successfully
   206 00000119 C64308FF            <1>     mov byte [rbx + bufferHdr.driveNumber], -1
   207 0000011D F8                  <1>     clc
   208                              <1> .fbExitBad:
   209 0000011E 5E                  <1>     pop rsi
   210 0000011F 5A                  <1>     pop rdx
   211 00000120 59                  <1>     pop rcx
   212 00000121 58                  <1>     pop rax
   213 00000122 C3                  <1>     ret
   214                              <1> .fbFail:
   215                              <1> ;Enter here only if the request failed
   216 00000123 FEC9                <1>     dec cl
   217                              <1>     jnz .fbRequest1 ;Try the request again!
   217          ******************  <1>  error: symbol `flushBuffer.fbRequest1' not defined
   218                              <1> ;Request failed thrice, critical error call
   219 00000125 F9                  <1>     stc
   220 00000126 E9F3FFFFFF          <1>     jmp .fbExitBad  ;Abort
    15                                  %include "dosKernel.asm"
    16                              <1> ;-----------------------------------:
    17                              <1> ;       Misc System routines        :
    18                              <1> ;-----------------------------------:
    19                              <1> criticalDOSError:
    20                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    21                              <1> ; to the critical error handler.
    22                              <1> ; Called with ax, di and rsi set as required by Int 44h (caller decides)
    23                              <1> ;               AH = Critical Error Bitfield
    24                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    25                              <1> ;               Bit 6 - Reserved
    26                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    27                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    28                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    29                              <1> ;               Bits [2-1] = Affected Disk Error
    30                              <1> ;                     0 0   DOS area
    31                              <1> ;                     0 1   FAT area
    32                              <1> ;                     1 0   Directory area
    33                              <1> ;                     1 1   Data area
    34                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    35                              <1> ;               AL  = Failing drive number if AH[7] = 0
    36                              <1> ;               DIL = Error code for errorMsg
    37                              <1> ;               RSI = EA of Device Header for which device the error occured
    38                              <1> ;Return:
    39                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    40                              <1> ;                  = 1 - Retry the Operation    (Retry)
    41                              <1> ;                  = 2 - Terminate the Program  (Abort)
    42                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    43                              <1> ; Return response from int 44h in al
    44 0000012B FA                  <1>     cli ;Disable Interrupts
    45 0000012C 488925(F4000000)    <1>     mov qword [xInt44hRSP], rsp
    46 00000133 488B25(08010000)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
    47 0000013A CD44                <1>     int 44h ;Call critical error handler
    48 0000013C 488B25(F4000000)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
    49 00000143 FB                  <1>     sti ;Reenable Interrupts
    50 00000144 C3                  <1>     ret
    51                              <1> findLRUBuffer: 
    52                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
    53                              <1> ; in rbx
    54                              <1> ;Input: Nothing
    55                              <1> ;Output: rbx = Pointer to the buffer hdr to use
    56 00000145 52                  <1>     push rdx
    57 00000146 488B1D(89000000)    <1>     mov rbx, qword [bufHeadPtr]
    58 0000014D 807B08FF            <1>     cmp byte [rbx + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
    59 00000151 743D                <1>     je .flbExit 
    60 00000153 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
    61 0000015A 7434                <1>     je .flbExit
    62                              <1> .flbWalk:
    63 0000015C 4889DA              <1>     mov rdx, rbx    ;Save a ptr to the previous buffer header
    64 0000015F 488B1A              <1>     mov rbx, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
    65 00000162 807B08FF            <1>     cmp byte [rbx + bufferHdr.driveNumber], -1
    66 00000166 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
    67 00000168 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
    68 0000016F 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
    69 00000171 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
    70                              <1> .flbHeadLink:
    71 00000178 488B15(89000000)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
    72 0000017F 48891D(89000000)    <1>     mov qword [bufHeadPtr], rbx    ;Sysvars to point to new buffer
    73 00000186 488913              <1>     mov qword [rbx + bufferHdr.nextBufPtr], rdx
    74                              <1> .flbExit:
    75 00000189 5A                  <1>     pop rdx
    76 0000018A C3                  <1>     ret
    77                              <1> .flbFreeLink:
    78 0000018B 51                  <1>     push rcx
    79 0000018C 488B0B              <1>     mov rcx, qword [rbx + bufferHdr.nextBufPtr]
    80 0000018F 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rbx
    81 00000192 59                  <1>     pop rcx
    82 00000193 EBE3                <1>     jmp short .flbHeadLink
    83                              <1> findSectorInBuffer:
    84                              <1> ;Finds the Buffer for a sector
    85                              <1> ;If the sector is not in a buffer, returns with a -1
    86                              <1> ;Input: rax = Sector number
    87                              <1> ;        dl = Drive number
    88                              <1> ;Output: rbx = Buffer hdr pointer or -1
    89 00000195 488B1D(89000000)    <1>     mov rbx, qword [bufHeadPtr]
    90                              <1> .fsiCheckBuffer:
    91 0000019C 385308              <1>     cmp byte [rbx + bufferHdr.driveNumber], dl
    92 0000019F 750E                <1>     jne .fsiGotoNextBuffer
    93 000001A1 4839430A            <1>     cmp qword [rbx + bufferHdr.bufferLBA], rax
    94 000001A5 7508                <1>     jne .fsiGotoNextBuffer
    95                              <1> .fsiExit:
    96 000001A7 C3                  <1>     ret
    97                              <1> .fsiGotoNextBuffer:
    98 000001A8 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
    99 000001AB 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit
   100 000001B2 74F3                <1>     je .fsiExit
   101 000001B4 EBE6                <1>     jmp short .fsiCheckBuffer
   102                              <1> findDPB:
   103                              <1> ;Finds the DPB for a given drive
   104                              <1> ;Input:  dl = Drive number (0=A, 1=B etc...)
   105                              <1> ;Output: al = 00, rbx = Pointer to the DPB
   106                              <1> ;        al = -1, Failed, no DPB for device, rbx destroyed
   107 000001B6 488B1D(67000000)    <1>     mov rbx, qword [dpbHeadPtr]
   108                              <1> .fd1:
   109 000001BD 30C0                <1>     xor al, al
   110 000001BF 3813                <1>     cmp byte [rbx + dpb.bDriveNumber], dl
   111 000001C1 7416                <1>     je .fd2
   112 000001C3 488B5B26            <1>     mov rbx, qword [rbx + dpb.qNextDPBPtr]
   113 000001C7 B0FF                <1>     mov al, -1
   114 000001C9 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If rbx followed last item in list, no DPB exists for dl
   115 000001D0 75EB                <1>     jne .fd1
   116                              <1> .fd2:
   117 000001D2 C3                  <1>     ret
   118                              <1> ;-----------------------------------:
   119                              <1> ;        File Handle routines       :
   120                              <1> ;-----------------------------------:
   121                              <1> readBinaryByteFromFile:
   122                              <1> ;Reads a byte from a SFT entry, does not translate it. 
   123                              <1> ;Read or RW permissions are checked at the INT 41h level
   124                              <1> ;Entry: rbx = SFT entry pointer
   125                              <1> ;       rdx = Address of the data buffer to read to
   126                              <1> ;       ecx = Number of bytes to read
   127                              <1> ;Exit: If CF = NC : All ok!
   128                              <1> ;       rbx = SFT entry pointer
   129                              <1> ;       al = 8 bit binary value read from device/file
   130                              <1> ;      If CF = CY : Error!
   131                              <1> ;       rbx = SFT entry pointer
   132                              <1> ;       al = Error code to ret if user returns fail from int 44h or no int 44h
   133                              <1> ;
   134                              <1> ; !!! Use the disk request header for all file handle IO !!!
   135                              <1> ;
   136 000001D3 66F743058000        <1>     test word [rbx + sft.wDeviceInfo], devCharDev
   137 000001D9 7507                <1>     jnz .readBinaryByteFromCharDevice
   138                              <1> .readBinaryByteFromHardFile:
   139                              <1> ;Disk files are accessed from here
   140                              <1> ;Use the sector buffers if the data is already buffered,
   141                              <1> ; else use the dpb to fill a sector buffer
   142                              <1> 
   143                              <1> 
   144                              <1> .readBinaryByteFromCharDevice:
   145                              <1> ;Devices are accessed from here
   146 000001DB 488B6B07            <1>     mov rbp, qword [rbx + sft.qPtr] ;Get device driver header pointer
   147 000001DF 53                  <1>     push rbx
   148 000001E0 488D1D(0B000000)    <1>     lea rbx, charReqHdr
   149 000001E7 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   150 000001EA C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], drvREAD
   151 000001EE 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   152 000001F4 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   153 000001F8 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   154                              <1> 
   155 000001FB FF550A              <1>     call qword [rbp + drvHdr.strPtr]
   156 000001FE FF5512              <1>     call qword [rbp + drvHdr.intPtr]
   157 00000201 8B4316              <1>     mov eax, dword [rbx + ioReqPkt.tfrlen] ;Get number of bytes read
   158 00000204 66F743030080        <1>     test word [rbx + ioReqPkt.status], 8000h    ;Test the error bit is set
   159 0000020A 5B                  <1>     pop rbx
   160 0000020B 7407                <1>     jz .readBinaryByteExitGood  ;Error bit not set, all good!
   161                              <1> .readBinaryByteExitGood:
   162 0000020D C3                  <1>     ret
   163                              <1> ;-----------------------------------:
   164                              <1> ;        Interrupt routines         :
   165                              <1> ;-----------------------------------:
   166                              <1> terminateProcess:   ;Int 40h
   167 0000020E 48CF                <1>     iretq
   168                              <1> terminateHandler:   ;Int 42h
   169                              <1> ctrlCHandler:       ;Int 43h
   170 00000210 48CF                <1>     iretq
   171                              <1> absDiskWrite:       ;Int 46h
   172                              <1> ;al = Drive number
   173                              <1> ;rbx = Memory Buffer address to read from
   174                              <1> ;ecx = Number of sectors to write
   175                              <1> ;rdx = Start LBA to write to
   176 00000212 50                  <1>     push rax
   177 00000213 53                  <1>     push rbx
   178 00000214 52                  <1>     push rdx
   179 00000215 8025(F3000000)01    <1>     and byte [verifyFlag], 1    ;Only save the last bit
   180 0000021C B408                <1>     mov ah, drvWRITE
   181 0000021E 0225(F3000000)      <1>     add ah, byte [verifyFlag]   ;Change to Write/Verify is set
   182 00000224 EB0C                <1>     jmp short absDiskReadWriteCommon
   183                              <1> absDiskRead:        ;Int 45h
   184                              <1> ;al = Drive number
   185                              <1> ;rbx = Memory Buffer address to write to
   186                              <1> ;ecx = Number of sectors to read
   187                              <1> ;rdx = Start LBA to read from
   188 00000226 50                  <1>     push rax
   189 00000227 53                  <1>     push rbx
   190 00000228 52                  <1>     push rdx
   191 00000229 B404                <1>     mov ah, drvREAD
   192                              <1> absDiskReadWriteCommon:
   193                              <1> ;Entered with the appropriate function number in ah
   194 0000022B C605(35000000)2A    <1>     mov byte [diskReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   195 00000232 8805(36000000)      <1>     mov byte [diskReqHdr + ioReqPkt.unitnm], al
   196 00000238 8825(37000000)      <1>     mov byte [diskReqHdr + ioReqPkt.cmdcde], ah
   197 0000023E 66C705(38000000)00- <1>     mov word [diskReqHdr + ioReqPkt.status], 0
   197 00000246 00                  <1>
   198 00000247 48891D(43000000)    <1>     mov qword [diskReqHdr + ioReqPkt.bufptr], rbx
   199 0000024E 488915(4F000000)    <1>     mov qword [diskReqHdr + ioReqPkt.strtsc], rdx
   200 00000255 890D(4B000000)      <1>     mov dword [diskReqHdr + ioReqPkt.tfrlen], ecx
   201                              <1> 
   202 0000025B B432                <1>     mov ah, 32h ;Get DPB
   203 0000025D 88C2                <1>     mov dl, al
   204 0000025F CD41                <1>     int 41h
   205 00000261 8A4324              <1>     mov al, byte [rbx + dpb.bMediaDescriptor]
   206 00000264 8805(42000000)      <1>     mov byte [diskReqHdr + ioReqPkt.medesc], al
   207 0000026A 488B531C            <1>     mov rdx, qword [rbx + dpb.qDriverHeaderPtr] ;Get driver pointer
   208                              <1> 
   209 0000026E 488D1D(35000000)    <1>     lea rbx, diskReqHdr
   210 00000275 FF520A              <1>     call qword [rdx + drvHdr.strPtr]  ;Call with ptr to request block in rbx
   211 00000278 FF5212              <1>     call qword [rdx + drvHdr.intPtr]
   212 0000027B 5A                  <1>     pop rdx
   213 0000027C 5B                  <1>     pop rbx
   214 0000027D 58                  <1>     pop rax
   215 0000027E 66F705(38000000)00- <1>     test word [diskReqHdr + ioReqPkt.status], 8000h
   215 00000286 80                  <1>
   216 00000287 7409                <1>     je .absDiskError
   217 00000289 F8                  <1>     clc
   218 0000028A C3                  <1>     ret
   219                              <1> .absDiskError:
   220 0000028B 8A05(38000000)      <1>     mov al, byte [diskReqHdr + ioReqPkt.status] ;Get low byte into al
   221 00000291 B480                <1>     mov ah, 80h ;Attachment failure
   222 00000293 3C0C                <1>     cmp al, 0Ch ;Gen error
   223 00000295 7421                <1>     je .absExit
   224 00000297 B440                <1>     mov ah, 40h ;Seek error
   225 00000299 3C06                <1>     cmp al, 06h
   226 0000029B 741B                <1>     je .absExit
   227 0000029D B408                <1>     mov ah, 08h ;Bad CRC
   228 0000029F 3C04                <1>     cmp al, 04h
   229 000002A1 7415                <1>     je .absExit
   230 000002A3 B404                <1>     mov ah, 04h ;Sector not found
   231 000002A5 3C08                <1>     cmp al, 08h
   232 000002A7 740F                <1>     je .absExit
   233 000002A9 30E4                <1>     xor ah, ah  ;Write Protect Violation
   234 000002AB 84C0                <1>     test al, al
   235 000002AD 7409                <1>     je .absExit
   236 000002AF B402                <1>     mov ah, 02h ;Other Error
   237                              <1> .absExit:
   238 000002B1 F9                  <1>     stc
   239 000002B2 C3                  <1>     ret
   240                              <1> 
   241                              <1> terminateResident:  ;Int 47h
   242                              <1> inDosHandler:       ;Int 48h
   243                              <1> ;Called when DOS idle
   244 000002B3 48CF                <1>     iretq
   245                              <1> fastOutput:         ;Int 49h
   246                              <1> ;Called with char to transfer in al
   247 000002B5 50                  <1>     push rax
   248 000002B6 B40E                <1>     mov ah, 0Eh
   249 000002B8 CD30                <1>     int 30h
   250 000002BA 58                  <1>     pop rax
   251 000002BB 48CF                <1>     iretq
   252                              <1> passCommand:        ;Int 4Eh, hooked by COMMAND.COM
   253 000002BD 48CF                <1>     iretq
   254                              <1> multiplex:          ;Int 4Fh, kept as iretq for now
   255 000002BF 48CF                <1>     iretq
   256                              <1> ;-----------------------------------:
   257                              <1> ;        Main Kernel routines       :
   258                              <1> ;-----------------------------------:
   259                              <1> functionDispatch:   ;Int 41h Main function dispatcher
   260                              <1> ;ah = Function number, all other registers have various meanings
   261 000002C1 FA                  <1>     cli ;Halt external interrupts
   262 000002C2 FC                  <1>     cld ;Ensure all string ops occur in the right direction
   263 000002C3 80FC6A              <1>     cmp ah, dispatchTableL/8    ;Number of functions
   264 000002C6 0F8724010000        <1>     ja .fdExitBad
   265                              <1>     ;Cherry pick functions
   266 000002CC 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
   267 000002CF 7233                <1>     jb .fsbegin   ;If below skip these checks
   268 000002D1 0F84C0020000        <1>     je .ctrlBreakCheck
   269 000002D7 80FC64              <1>     cmp ah, 64h
   270 000002DA 0F841F040000        <1>     je .setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
   271 000002E0 7722                <1>     ja .fsbegin   ;If above, do usual Int41 entry
   272 000002E2 80FC51              <1>     cmp ah, 51h
   273 000002E5 0F84EF020000        <1>     je .getCurrProcessID    ;This and below are exactly the same
   274 000002EB 80FC62              <1>     cmp ah, 62h
   275 000002EE 0F84F8030000        <1>     je .getPSPaddr          ;Calls the above function
   276 000002F4 80FC50              <1>     cmp ah, 50h
   277 000002F7 0F84D5020000        <1>     je .setCurrProcessID
   278                              <1> .fsbegin:
   279                              <1>     pushDOS ;Push the usual prologue registers
   255 000002FD 4151                <2>  push r9
   256 000002FF 4150                <2>  push r8
   257 00000301 55                  <2>  push rbp
   258 00000302 57                  <2>  push rdi
   259 00000303 56                  <2>  push rsi
   260 00000304 52                  <2>  push rdx
   261 00000305 51                  <2>  push rcx
   262 00000306 53                  <2>  push rbx
   263 00000307 50                  <2>  push rax
   280 00000308 488B05(08010000)    <1>     mov rax, qword [oldRSP]
   281 0000030F 488905(00010000)    <1>     mov qword [oldoldRSP], rax
   282 00000316 FE05(C8000000)      <1>     inc byte [inDOS]    ;Increment in DOS flag
   283 0000031C 488925(08010000)    <1>     mov qword [oldRSP], rsp
   284                              <1> ;Here, we want to save oldRSP in the callers PSP
   285 00000323 803D(C8000000)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
   286 0000032A 7512                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
   287 0000032C 488B05(D7000000)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
   288 00000333 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
   289                              <1> .fsb1:
   290 00000337 58                  <1>     pop rax     ;Get old rax back
   291 00000338 50                  <1>     push rax    ;and push it back onto the stack
   292 00000339 488D25(4C060000)    <1>     lea rsp, critStakTop
   293 00000340 FB                  <1>     sti         ;Reenable interrupts
   294                              <1> 
   295 00000341 C605(FF000000)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
   296                              <1> 
   297 00000348 48891D(10010000)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
   298 0000034F 0FB6DC              <1>     movzx ebx, ah   ;Move the function number bl zero extended to rbx
   299 00000352 C1E303              <1>     shl ebx, 3      ;Multiply the function number by 8 for offset into table
   300 00000355 50                  <1>     push rax        ;Push rax onto the stack
   301 00000356 488D05A3030000      <1>     lea rax, qword [.dispatchTable]
   302 0000035D 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   303 00000360 58                  <1>     pop rax
   304 00000361 488B1B              <1>     mov rbx, qword [rbx]    ;Get the address from the dispatch table
   305                              <1> 
   306 00000364 84E4                <1>     test ah, ah     ;Simple Terminate function?
   307 00000366 7423                <1>     jz .fddiskOp
   308 00000368 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   309 0000036B 744A                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   310 0000036D 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   311 00000370 7719                <1>     ja .fddiskOp
   312                              <1> ;Char operations here
   313 00000372 F605(C7000000)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   314 00000379 753C                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   315 0000037B 488D25(8C0C0000)    <1>     lea rsp, IOStakTop          ;Otherwise, switch to IO stack
   316 00000382 EB33                <1>     jmp short .fdGoToFunction
   317                              <1> .fddiskOp:
   318                              <1>     ;Disk operations go here
   319                              <1>     ;Clear up error info
   320 00000384 C605(CA000000)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   321 0000038B C605(C7000000)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   322 00000392 C605(C9000000)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   323                              <1> 
   324 00000399 C605(FF000000)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   325 000003A0 488D25(CC120000)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   326 000003A7 F605(F2000000)FF    <1>     test byte [breakFlag], -1   ;Test if set
   327 000003AE 7407                <1>     jz .fdGoToFunction
   328                              <1> ; HANDLE CTRL+BREAK HERE!
   329                              <1> .fdGoToFunction:
   330 000003B0 48871D(10010000)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   331                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   332                              <1>     ;
   333                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   334                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   335                              <1>     ;
   336 000003B7 FF15(10010000)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   337                              <1> .fdExit:
   338 000003BD FA                  <1>     cli     ;Redisable interrupts
   339                              <1>     ;???
   340 000003BE FE0D(C8000000)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   341 000003C4 488B25(08010000)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   342 000003CB 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   343 000003CE 488B05(00010000)    <1>     mov rax, qword [oldoldRSP]
   344 000003D5 488905(08010000)    <1>     mov qword [oldRSP], rax
   345                              <1>     popDOS  ;Pop the frame
   267 000003DC 58                  <2>  pop rax
   268 000003DD 5B                  <2>  pop rbx
   269 000003DE 59                  <2>  pop rcx
   270 000003DF 5A                  <2>  pop rdx
   271 000003E0 5E                  <2>  pop rsi
   272 000003E1 5F                  <2>  pop rdi
   273 000003E2 5D                  <2>  pop rbp
   274 000003E3 4158                <2>  pop r8
   275 000003E5 4159                <2>  pop r9
   346 000003E7 48CF                <1>     iretq
   347                              <1> .fdExitBad:
   348 000003E9 B400                <1>     mov ah, 0
   349 000003EB 48CF                <1>     iretq
   350                              <1> .simpleTerminate:     ;ah = 00h
   351 000003ED C3                  <1>     ret
   352                              <1> .stdinReadEcho:     ;ah = 01h
   353                              <1> ;Return char that has been read and echoed in al
   354 000003EE 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
   355 000003F5 488D056D000000      <1>     lea rax, .stdinReadEchoBuffer
   356 000003FC C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   357 000003FF C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
   358 00000403 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   359 00000409 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   360 0000040D C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
   361 00000414 FF15D3080000        <1>     call qword [conHdr + drvHdr.strPtr]
   362 0000041A FF15D5080000        <1>     call qword [conHdr + drvHdr.intPtr]
   363 00000420 803D4200000000      <1>     cmp byte [.stdinReadEchoBuffer], 00h
   364 00000427 7439                <1>     jz .stdireexit
   365 00000429 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
   366 00000430 488D0532000000      <1>     lea rax, .stdinReadEchoBuffer
   367 00000437 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   368 0000043A C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
   369 0000043E 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   370 00000444 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   371 00000448 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
   372 0000044F FF1598080000        <1>     call qword [conHdr + drvHdr.strPtr]
   373 00000455 FF159A080000        <1>     call qword [conHdr + drvHdr.intPtr]
   374                              <1> .stdireexit:
   375 0000045B 8A0508000000        <1>     mov al, byte [.stdinReadEchoBuffer]
   376 00000461 C3                  <1>     ret
   377 00000462 00                  <1> .stdinReadEchoBuffer    db 0
   378                              <1> .stdoutWrite:       ;ah = 02h
   379                              <1> ;Bspace is regular cursor left, does not insert a blank
   380 00000463 88153A000000        <1>     mov byte [.stdoutWriteBuffer], dl
   381 00000469 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
   382 00000470 488D152C000000      <1>     lea rdx, .stdoutWriteBuffer
   383 00000477 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   384 0000047A C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
   385 0000047E 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   386 00000484 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   387 00000488 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
   388 0000048F FF1558080000        <1>     call qword [conHdr + drvHdr.strPtr]
   389 00000495 FF155A080000        <1>     call qword [conHdr + drvHdr.intPtr]
   390 0000049B C3                  <1>     ret
   391 0000049C 00                  <1> .stdoutWriteBuffer db 0
   392                              <1> .stdauxRead:        ;ah = 03h
   393                              <1> .stdauxWrite:       ;ah = 04h
   394                              <1> .stdprnWrite:       ;ah = 05h
   395                              <1> .directCONIO:       ;ah = 06h
   396                              <1> .waitDirectInNoEcho:;ah = 07h
   397                              <1> ;Return char in al
   398 0000049D 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
   399 000004A4 488D0532000000      <1>     lea rax, .function7buffer
   400 000004AB C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   401 000004AE C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
   402 000004B2 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   403 000004B8 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   404 000004BC C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
   405 000004C3 FF1524080000        <1>     call qword [conHdr + drvHdr.strPtr]
   406 000004C9 FF1526080000        <1>     call qword [conHdr + drvHdr.intPtr]
   407 000004CF 8A0508000000        <1>     mov al, byte [.function7buffer]
   408 000004D5 C3                  <1>     ret
   409 000004D6 00                  <1> .function7buffer    db 0
   410                              <1> .waitStdinNoEcho:   ;ah = 08h
   411 000004D7 C3                  <1>     ret
   412                              <1> .printString:       ;ah = 09h
   413 000004D8 31C9                <1>     xor ecx, ecx    ;Clear char counter
   414 000004DA B824000000          <1>     mov eax, "$"    ;Terminating char
   415 000004DF 4889D7              <1>     mov rdi, rdx    ;Set up for scasb
   416                              <1> .ps0:   ;Search for $ to get count of chars
   417 000004E2 AE                  <1>     scasb
   418 000004E3 740B                <1>     je .ps1
   419 000004E5 FFC1                <1>     inc ecx
   420 000004E7 EBF9                <1>     jmp short .ps0
   421                              <1> .ps1:   ;Use handle 
   422 000004E9 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
   423 000004F0 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   424 000004F3 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
   425 000004F7 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   426 000004FD 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   427 00000501 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   428 00000504 FF15E3070000        <1>     call qword [conHdr + drvHdr.strPtr]
   429 0000050A FF15E5070000        <1>     call qword [conHdr + drvHdr.intPtr]
   430                              <1> 
   431 00000510 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   432 00000517 8A03                <1>     mov al, byte [rbx+callerFrame.rax]      ;Gets al to preserve it
   433 00000519 C3                  <1>     ret
   434                              <1> .buffStdinInput:    ;ah = 0Ah
   435                              <1> .checkStdinStatus:  ;ah = 0Bh
   436                              <1> .clearbuffDoFunc:   ;ah = 0Ch
   437                              <1> .diskReset:         ;ah = 0Dh
   438                              <1> .selectDisk:        ;ah = 0Eh
   439                              <1> .openFileFCB:       ;ah = 0Fh
   440                              <1> .closeFileFCB:      ;ah = 10h
   441                              <1> .findFirstFileFCB:  ;ah = 11h
   442                              <1> .findNextFileFCB:   ;ah = 12h
   443                              <1> .deleteFileFCB:     ;ah = 13h
   444                              <1> .sequentialReadFCB: ;ah = 14h
   445                              <1> .sequentialWriteFCB:;ah = 15h
   446                              <1> .createFileFCB:     ;ah = 16h
   447                              <1> .renameFileFCB:     ;ah = 17h
   448                              <1>                     ;ah = 18h unused
   449                              <1> .getCurrentDisk:    ;ah = 19h, get current default drive
   450 0000051A 8A05(F1000000)      <1>     mov al, byte [currentDrv]
   451 00000520 C3                  <1>     ret
   452                              <1> .setDTA:            ;ah = 1Ah
   453                              <1> ;Called with:
   454                              <1> ;   rdx = Pointer to the new default DTA
   455 00000521 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   456 00000528 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
   457 0000052C 488915(CF000000)    <1>     mov qword [currentDTA], rdx
   458 00000533 C3                  <1>     ret
   459                              <1> .FATinfoDefault:    ;ah = 1Bh
   460                              <1> .FatinfoDevice:     ;ah = 1Ch
   461                              <1>                     ;ah = 1Dh unused
   462                              <1>                     ;ah = 1Eh unused
   463                              <1> .getCurrentDPBptr:  ;ah = 1Fh, simply calls int 41h ah = 32h with dl = 0
   464                              <1>                     ;ah = 20h unused
   465                              <1> .randomReadFCB:     ;ah = 21h
   466                              <1> .randomWriteFCB:    ;ah = 22h
   467                              <1> .getFileSizeFCB:    ;ah = 23h
   468                              <1> .setRelRecordFCB:   ;ah = 24h
   469                              <1> .setIntVector:      ;ah = 25h
   470                              <1> ;Called with:
   471                              <1> ;   rdx = Pointer to interrupt handler
   472                              <1> ;   al = Interrupt number
   473 00000534 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   474 00000536 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   475                              <1> ;First call to get default BIOS segement selector and attribute word
   476 0000053C 88C3                <1>     mov bl, al  ;Set interrupt number 
   477 0000053E B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   478 00000543 CD35                <1>     int 35h
   479 00000545 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   480 00000547 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   481                              <1> ;dx preserves the attribute word
   482 00000549 488B2D(08010000)    <1>     mov rbp, qword [oldRSP]
   483 00000550 488B5D18            <1>     mov rbx, qword [rbp + callerFrame.rdx]  ;Pointer passed in rdx
   484 00000554 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   485 00000559 CD35                <1>     int 35h
   486                              <1> 
   487 0000055B 8A4500              <1>     mov al, byte [rbp + callerFrame.rax]    ;Preserve low byte of rax
   488 0000055E C3                  <1>     ret
   489                              <1> .createNewPSP:      ;ah = 26h
   490                              <1> .randBlockReadFCB:  ;ah = 27h
   491                              <1> .randBlockWriteFCB: ;ah = 28h
   492                              <1> .parseFilenameFCB:  ;ah = 29h
   493                              <1> .getDate:           ;ah = 2Ah
   494                              <1> .setDate:           ;ah = 2Bh
   495                              <1> .getTime:           ;ah = 2Ch
   496                              <1> .setTime:           ;ah = 2Dh
   497                              <1> .setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   498 0000055F 8805(F3000000)      <1>     mov byte [verifyFlag], al
   499 00000565 C3                  <1>     ret
   500                              <1> .getDTA:            ;ah = 2Fh
   501 00000566 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   502 0000056D 488B1D(CF000000)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
   503 00000574 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
   504 00000578 C3                  <1>     ret
   505                              <1> .getDOSversion:     ;ah = 30h
   506 00000579 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   507 00000580 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   508 00000582 886209              <1>     mov byte [rdx + callerFrame.rbx + 1], ah    ;Clear bh 
   509 00000585 668B0574FAFFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   510 0000058C 668902              <1>     mov word [rdx + callerFrame.rax], ax    ;Save ax
   511 0000058F C3                  <1>     ret
   512                              <1> .terminateStayRes:  ;ah = 31h
   513                              <1> .getDeviceDPBptr:   ;ah = 32h
   514                              <1> .ctrlBreakCheck:    ;ah = 33h
   515 00000590 84C0                <1>     test al, al
   516 00000592 740D                <1>     jz .cbcget  ;Get the state
   517 00000594 8815(F2000000)      <1>     mov byte [breakFlag], dl    ;Set the state
   518                              <1> .cbcget:
   519 0000059A 8A15(F2000000)      <1>     mov dl, byte [breakFlag]    ;Get the state
   520 000005A0 C3                  <1>     ret
   521                              <1> .getInDOSflagPtr:   ;ah = 34h
   522 000005A1 488D15(C8000000)    <1>     lea rdx, inDOS
   523 000005A8 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   524 000005AF 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx  ;save ptr in rbx
   525 000005B3 C3                  <1>     ret
   526                              <1> .getIntVector:      ;ah = 35h
   527                              <1> ;Called with:
   528                              <1> ;   al = Interrupt Number
   529                              <1> ;Returns:
   530                              <1> ;   rbx = Pointer to interrupt handler
   531 000005B4 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   532 000005B6 B807F00000          <1>     mov eax, 0F007h
   533 000005BB CD35                <1>     int 35h
   534 000005BD 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   535 000005C4 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx  ;Save pointer in rbx
   536 000005C8 8A02                <1>     mov al, byte [rdx + callerFrame.rax]    ;Get the low byte in al
   537 000005CA C3                  <1>     ret
   538                              <1> .getDiskFreeSpace:  ;ah = 36h
   539                              <1> .getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
   540                              <1> .getsetCountryInfo: ;ah = 38h, localisation info
   541                              <1> .makeDIR:           ;ah = 39h
   542                              <1> .removeDIR:         ;ah = 3Ah
   543                              <1> .changeCurrentDIR:  ;ah = 3Bh, changes directory for current drive
   544                              <1> .createFileHdl:     ;ah = 3Ch, handle function
   545                              <1> .openFileHdl:       ;ah = 3Dh, handle function
   546                              <1> .closeFileHdl:      ;ah = 3Eh, handle function
   547                              <1> .readFileHdl:       ;ah = 3Fh, handle function
   548                              <1> .writeFileHdl:      ;ah = 40h, handle function
   549                              <1> .deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   550                              <1> .movFileReadPtr:    ;ah = 42h, handle function, LSEEK
   551                              <1> .changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   552                              <1> .ioctrl:            ;ah = 44h, handle function
   553                              <1> .duplicateHandle:   ;ah = 45h, handle function
   554                              <1> .forceDuplicateHdl: ;ah = 46h, handle function
   555                              <1> .getCurrentDIR:     ;ah = 47h
   556                              <1> .allocateMemory:    ;ah = 48h
   557                              <1> .freeMemory:        ;ah = 49h
   558                              <1> .reallocMemory:     ;ah = 4Ah
   559                              <1> .loadExecChild:     ;ah = 4Bh, EXEC
   560                              <1> .terminateClean:    ;ah = 4Ch, EXIT
   561                              <1> .getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   562                              <1> .findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   563                              <1> .findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   564                              <1> .setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   565 000005CB 48891D(D7000000)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   566 000005D2 C3                  <1>     ret
   567                              <1> .getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   568 000005D3 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   569 000005DA 488B15(D7000000)    <1>     mov rdx, qword [currentPSP]
   570 000005E1 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx   ;Set the caller pointer
   571 000005E5 C3                  <1>     ret 
   572                              <1> .getSysVarsPtr:     ;ah = 52h
   573 000005E6 488D15(67000000)    <1>     lea rdx, sysVarsPtr
   574 000005ED 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   575 000005F4 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx
   576 000005F8 C3                  <1>     ret
   577                              <1> .createDPB:         ;ah = 53h, generates a DPB from a given BPB
   578                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   579                              <1> ;This is done so that the other fields of the DPB can be recycled
   580                              <1> ;Input: rsi = ptr to the BPB
   581                              <1> ;       rbp = ptr to the DPB
   582                              <1> ;bMediaDescriptor
   583 000005F9 8A4615              <1>     mov al, byte [rsi + bpb.media]
   584 000005FC 884524              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   585                              <1> ;bAccessFlag
   586 000005FF C64525FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Not accessed
   587                              <1> ;dFirstFreeCluster
   588 00000603 C7452E00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   589                              <1> ;dNumberOfFreeClusters
   590 0000060A C74532FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   591                              <1> ;bBytesPerSectorShift
   592 00000611 668B460B            <1>     mov ax, word [rsi + bpb.bytsPerSec]
   593 00000615 B107                <1>     mov cl, 7   ;Start with 128 byte sectors (not supported, min 512)
   594 00000617 66D3E8              <1>     shr ax, cl  ;Shift down
   595                              <1> .cd0:
   596 0000061A 66D1E8              <1>     shr ax, 1
   597 0000061D 740B                <1>     jz .cd1
   598 0000061F FEC1                <1>     inc cl
   599 00000621 EBF7                <1>     jmp short .cd0
   600                              <1> .cd1:
   601 00000623 884D02              <1>     mov byte [rbp + dpb.bBytesPerSectorShift], cl
   602                              <1> ;bMaxSectorInCluster
   603 00000626 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   604 00000629 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   605 0000062B 884503              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   606                              <1> ;bSectorsPerClusterShift
   607 0000062E FEC0                <1>     inc al
   608 00000630 30C9                <1>     xor cl, cl
   609                              <1> .cd2:
   610 00000632 D0E8                <1>     shr al, 1
   611 00000634 740B                <1>     jz .cd3
   612 00000636 FEC1                <1>     inc cl
   613 00000638 EBF8                <1>     jmp short .cd2
   614                              <1> .cd3:
   615 0000063A 884D04              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   616                              <1> ;dFAToffset, number of hidden sectors + number of reserved sectors
   617 0000063D 0FB7460E            <1>     movzx eax, word [rsi + bpb.revdSecCnt]
   618 00000641 03461C              <1>     add eax, dword [rsi + bpb.hiddSec] 
   619 00000644 894505              <1>     mov dword [rbp + dpb.dFAToffset], eax
   620                              <1> ;bNumberOfFATs
   621 00000647 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   622 0000064A 884509              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   623                              <1> ;wNumberRootDirSectors
   624 0000064D 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   625 00000651 C1E005              <1>     shl eax, 5  ;Multiply by 32
   626 00000654 0FB74E0B            <1>     movzx ecx, word [rsi + bpb.bytsPerSec]
   627 00000658 FFC9                <1>     dec ecx
   628 0000065A 01C8                <1>     add eax, ecx
   629 0000065C 31D2                <1>     xor edx, edx    ;Clear for divide
   630 0000065E F7F1                <1>     div ecx ;Divide 0:eax by ecx, (e)ax has number of clusters
   631 00000660 6689450A            <1>     mov word [rbp + dpb.wNumberRootDirSectors], ax  ;0 for FAT32
   632                              <1> ;dFATlength, get the FAT length
   633 00000664 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   634 00000668 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   635 0000066B 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   636 0000066D 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   637 00000670 894514              <1>     mov dword [rbp + dpb.dFATlength], eax
   638                              <1> ;Complex cases below...
   639                              <1> ;dClusterHeapOffset, start sector of the data area
   640 00000673 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   641 00000677 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   642 0000067A 85C0                <1>     test eax, eax
   643 0000067C 0F44C3              <1>     cmovz eax, ebx
   644                              <1> ;eax = FATsz
   645 0000067F 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   646 00000683 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   647 00000686 85DB                <1>     test ebx, ebx
   648 00000688 0F44D9              <1>     cmovz ebx, ecx 
   649                              <1> ;ebx = TotSec
   650 0000068B 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   651 0000068E 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   652                              <1> .cd4:
   653 00000690 01C2                <1>     add edx, eax
   654 00000692 FEC9                <1>     dec cl
   655 00000694 75FA                <1>     jnz .cd4
   656 00000696 89D0                <1>     mov eax, edx    ;Store product in eax
   657 00000698 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   658 0000069C 01D0                <1>     add eax, edx
   659 0000069E 0FB7550A            <1>     movzx edx, word [rbp + dpb.wNumberRootDirSectors]
   660 000006A2 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   661                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   662                              <1>     ;aka eax = Start sector of the data area in volume
   663 000006A4 89450C              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   664                              <1> ;dClusterCount
   665 000006A7 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   666 000006A9 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   667 000006AB 31D2                <1>     xor edx, edx
   668 000006AD BB01000000          <1>     mov ebx, 1
   669 000006B2 8A4D04              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   670 000006B5 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   671 000006B7 F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   672 000006B9 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   673 000006BB 894510              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   674                              <1> ;dFirstUnitOfRootDir
   675 000006BE 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   676 000006C3 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   677 000006C6 7710                <1>     ja .cd5
   678                              <1>     ;Else, we need to find the first sector of the root directory
   679                              <1>     ;Get the start sector of data area in volume 
   680                              <1>     ; and sub the number of sectors in the root directory
   681 000006C8 8B450C              <1>     mov eax, dword [rbp + dpb.dClusterHeapOffset]
   682 000006CB 0FB75D0A            <1>     movzx ebx, word [rbp + dpb.wNumberRootDirSectors]
   683 000006CF 29D8                <1>     sub eax, ebx    ;eax now has start sector of root dir
   684                              <1> .cd5:
   685 000006D1 894518              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   686                              <1> ;Exit epilogue
   687 000006D4 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   688 000006DB 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   689 000006DD C3                  <1>     ret
   690                              <1> .getVerifySetting:  ;ah = 54h
   691 000006DE 8A05(F3000000)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   692 000006E4 C3                  <1>     ret
   693                              <1> .createPSP:         ;ah = 55h, creates a PSP for a program
   694                              <1> .renameFile:        ;ah = 56h
   695                              <1> .getSetFileDateTime:;ah = 57h
   696                              <1> .getsetMallocStrat: ;ah = 58h
   697                              <1> .getExtendedError:  ;ah = 59h
   698                              <1> .createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   699                              <1> .createNewFile:     ;ah = 5Bh
   700                              <1> .lockUnlockFile:    ;ah = 5Ch
   701                              <1> .getCritErrorInfo:  ;ah = 5Dh
   702                              <1> .networkServices:   ;ah = 5Eh, do nothing
   703                              <1> .networkRedirection:;ah = 5Fh, do nothing
   704                              <1> .trueName:          ;ah = 60h, get fully qualified name
   705                              <1>                     ;ah = 61h, reserved
   706                              <1> .getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   707 000006E5 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   708 000006EC 488B15(D7000000)    <1>     mov rdx, qword [currentPSP]
   709 000006F3 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx  ;Save the current psp in rbx
   710 000006F7 C3                  <1>     ret
   711                              <1>                     ;ah = 63h, reserved
   712                              <1> .setDriverLookahead:;ah = 64h, reserved
   713                              <1> .getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
   714                              <1> .getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
   715                              <1> .setHandleCount:    ;ah = 67h
   716                              <1> .commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   717                              <1> .getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   718                              <1> .return:
   719 000006F8 C3                  <1>     ret
   720                              <1> 
   721                              <1> 
   722                              <1> .dispatchTable:
   723 000006F9 [ED03000000000000]  <1>     dq .simpleTerminate     ;AH = 00H, PROCESS MANAGEMENT
   724 00000701 [EE03000000000000]  <1>     dq .stdinReadEcho       ;AH = 01H, CHAR IO
   725 00000709 [6304000000000000]  <1>     dq .stdoutWrite         ;AH = 02H, CHAR IO
   726 00000711 [9D04000000000000]  <1>     dq .stdauxRead          ;AH = 03H, CHAR IO
   727 00000719 [9D04000000000000]  <1>     dq .stdauxWrite         ;AH = 04H, CHAR IO
   728 00000721 [9D04000000000000]  <1>     dq .stdprnWrite         ;AH = 05H, CHAR IO
   729 00000729 [9D04000000000000]  <1>     dq .directCONIO         ;AH = 06H, CHAR IO
   730 00000731 [9D04000000000000]  <1>     dq .waitDirectInNoEcho  ;AH = 07H, CHAR IO
   731 00000739 [D704000000000000]  <1>     dq .waitStdinNoEcho     ;AH = 08H, CHAR IO
   732 00000741 [D804000000000000]  <1>     dq .printString         ;AH = 09H, CHAR IO
   733 00000749 [1A05000000000000]  <1>     dq .buffStdinInput      ;AH = 0AH, CHAR IO
   734 00000751 [1A05000000000000]  <1>     dq .checkStdinStatus    ;AH = 0BH, CHAR IO
   735 00000759 [1A05000000000000]  <1>     dq .clearbuffDoFunc     ;AH = 0CH, CHAR IO
   736 00000761 [1A05000000000000]  <1>     dq .diskReset           ;AH = 0DH, DISK MANAGEMENT
   737 00000769 [1A05000000000000]  <1>     dq .selectDisk          ;AH = 0EH, DISK MANAGEMENT
   738 00000771 [1A05000000000000]  <1>     dq .openFileFCB         ;AH = 0FH, FILE OPERATION       FCB
   739 00000779 [1A05000000000000]  <1>     dq .closeFileFCB        ;AH = 10H, FILE OPERATION       FCB
   740 00000781 [1A05000000000000]  <1>     dq .findFirstFileFCB    ;AH = 11H, FILE OPERATION       FCB
   741 00000789 [1A05000000000000]  <1>     dq .findNextFileFCB     ;AH = 12H, FILE OPERATION       FCB
   742 00000791 [1A05000000000000]  <1>     dq .deleteFileFCB       ;AH = 13H, FILE OPERATION       FCB
   743 00000799 [1A05000000000000]  <1>     dq .sequentialReadFCB   ;AH = 14H, RECORD OPERATION     FCB
   744 000007A1 [1A05000000000000]  <1>     dq .sequentialWriteFCB  ;AH = 15H, RECORD OPERTAION     FCB
   745 000007A9 [1A05000000000000]  <1>     dq .createFileFCB       ;AH = 16H, FILE OPERATION       FCB
   746 000007B1 [1A05000000000000]  <1>     dq .renameFileFCB       ;AH = 17H, FILE OPERATION       FCB
   747 000007B9 [F806000000000000]  <1>     dq .return              ;AH = 18H, RESERVED
   748 000007C1 [1A05000000000000]  <1>     dq .getCurrentDisk      ;AH = 19H, DISK MANAGEMENT
   749 000007C9 [2105000000000000]  <1>     dq .setDTA              ;AH = 1AH, RECORD OPERATION     F/H
   750 000007D1 [3405000000000000]  <1>     dq .FATinfoDefault      ;AH = 1BH, DISK MANAGEMENT
   751 000007D9 [3405000000000000]  <1>     dq .FatinfoDevice       ;AH = 1CH, DISK MANAGEMENT
   752 000007E1 [F806000000000000]  <1>     dq .return              ;AH = 1DH, RESERVED
   753 000007E9 [F806000000000000]  <1>     dq .return              ;AH = 1EH, RESERVED
   754 000007F1 [3405000000000000]  <1>     dq .getCurrentDPBptr    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
   755 000007F9 [F806000000000000]  <1>     dq .return              ;AH = 20H, RESERVED
   756 00000801 [3405000000000000]  <1>     dq .randomReadFCB       ;AH = 21H, RECORD OPERATION     FCB
   757 00000809 [3405000000000000]  <1>     dq .randomWriteFCB      ;AH = 22H, RECORD OPERATION     FCB
   758 00000811 [3405000000000000]  <1>     dq .getFileSizeFCB      ;AH = 23H, FILE OPERATION       FCB
   759 00000819 [3405000000000000]  <1>     dq .setRelRecordFCB     ;AH = 24H, RECORD OPERATION     FCB
   760 00000821 [3405000000000000]  <1>     dq .setIntVector        ;AH = 25H, MISC. SYS. FUNCTION
   761 00000829 [5F05000000000000]  <1>     dq .createNewPSP        ;AH = 26H, PROCESS MANAGEMENT
   762 00000831 [5F05000000000000]  <1>     dq .randBlockReadFCB    ;AH = 27H, RECORD OPERATION     FCB
   763 00000839 [5F05000000000000]  <1>     dq .randBlockWriteFCB   ;AH = 28H, RECORD OPERATION     FCB
   764 00000841 [5F05000000000000]  <1>     dq .parseFilenameFCB    ;AH = 29H, FILE OPERATION       FCB
   765 00000849 [5F05000000000000]  <1>     dq .getDate             ;AH = 2AH, TIME AND DATE
   766 00000851 [5F05000000000000]  <1>     dq .setDate             ;AH = 2BH, TIME AND DATE
   767 00000859 [5F05000000000000]  <1>     dq .getTime             ;AH = 2CH, TIME AND DATE
   768 00000861 [5F05000000000000]  <1>     dq .setTime             ;AH = 2DH, TIME AND DATE
   769 00000869 [5F05000000000000]  <1>     dq .setResetVerify      ;AH = 2EH, DISK MANAGEMENT
   770 00000871 [6605000000000000]  <1>     dq .getDTA              ;AH = 2FH, RECORD OPERATION     F/H
   771 00000879 [7905000000000000]  <1>     dq .getDOSversion       ;AH = 30H, MISC. SYS. FUNCTION
   772 00000881 [9005000000000000]  <1>     dq .terminateStayRes    ;AH = 31H, PROCESS MANAGEMENT
   773 00000889 [9005000000000000]  <1>     dq .getDeviceDPBptr     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
   774 00000891 [9005000000000000]  <1>     dq .ctrlBreakCheck      ;AH = 33H, MISC. SYS. FUNCTION
   775 00000899 [A105000000000000]  <1>     dq .getInDOSflagPtr     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
   776 000008A1 [B405000000000000]  <1>     dq .getIntVector        ;AH = 35H, MISC. SYS. FUNCTION
   777 000008A9 [CB05000000000000]  <1>     dq .getDiskFreeSpace    ;AH = 36H, DISK MANAGEMENT
   778 000008B1 [CB05000000000000]  <1>     dq .getsetSwitchChar    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
   779 000008B9 [CB05000000000000]  <1>     dq .getsetCountryInfo   ;AH = 38H, MISC. SYS. FUNCTION
   780 000008C1 [CB05000000000000]  <1>     dq .makeDIR             ;AH = 39H, DIRECTORY OPERATION
   781 000008C9 [CB05000000000000]  <1>     dq .removeDIR           ;AH = 3AH, DIRECTORY OPERATION
   782 000008D1 [CB05000000000000]  <1>     dq .changeCurrentDIR    ;AH = 3BH, DIRECTORY OPERATION
   783 000008D9 [CB05000000000000]  <1>     dq .createFileHdl       ;AH = 3CH, FILE OPERATION       HANDLE
   784 000008E1 [CB05000000000000]  <1>     dq .openFileHdl         ;AH = 3DH, FILE OPERATION       HANDLE
   785 000008E9 [CB05000000000000]  <1>     dq .closeFileHdl        ;AH = 3EH, FILE OPERATION       HANDLE
   786 000008F1 [CB05000000000000]  <1>     dq .readFileHdl         ;AH = 3FH, RECORD OPERATION     HANDLE
   787 000008F9 [CB05000000000000]  <1>     dq .writeFileHdl        ;AH = 40H, RECORD OPERATION     HANDLE
   788 00000901 [CB05000000000000]  <1>     dq .deleteFileHdl       ;AH = 41H, FILE OPERATION       HANDLE
   789 00000909 [CB05000000000000]  <1>     dq .movFileReadPtr      ;AH = 42H, RECORD OPERATION     HANDLE
   790 00000911 [CB05000000000000]  <1>     dq .changeFileModeHdl   ;AH = 43H, FILE OPERATION       HANDLE
   791 00000919 [CB05000000000000]  <1>     dq .ioctrl              ;AH = 44H, MISC. SYS. FUNCTION
   792 00000921 [CB05000000000000]  <1>     dq .duplicateHandle     ;AH = 45H, FILE OPERATION       HANDLE
   793 00000929 [CB05000000000000]  <1>     dq .forceDuplicateHdl   ;AH = 46H, FILE OPERATION       HANDLE
   794 00000931 [CB05000000000000]  <1>     dq .getCurrentDIR       ;AH = 47H, DIRECTORY OPERATION
   795 00000939 [CB05000000000000]  <1>     dq .allocateMemory      ;AH = 48H, MEMORY MANAGEMENT
   796 00000941 [CB05000000000000]  <1>     dq .freeMemory          ;AH = 49H, MEMORY MANAGEMENT
   797 00000949 [CB05000000000000]  <1>     dq .reallocMemory       ;AH = 4AH, MEMORY MANAGEMENT
   798 00000951 [CB05000000000000]  <1>     dq .loadExecChild       ;AH = 4BH, PROCESS MANAGEMENT
   799 00000959 [CB05000000000000]  <1>     dq .terminateClean      ;AH = 4CH, PROCESS MANAGEMENT
   800 00000961 [CB05000000000000]  <1>     dq .getRetCodeChild     ;AH = 4DH, PROCESS MANAGEMENT
   801 00000969 [CB05000000000000]  <1>     dq .findFirstFileHdl    ;AH = 4EH, FILE OPERATION       HANDLE
   802 00000971 [CB05000000000000]  <1>     dq .findNextFileHdl     ;AH = 4FH, FILE OPERATION       HANDLE
   803 00000979 [CB05000000000000]  <1>     dq .setCurrProcessID    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   804 00000981 [D305000000000000]  <1>     dq .getCurrProcessID    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   805 00000989 [E605000000000000]  <1>     dq .getSysVarsPtr       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   806 00000991 [F905000000000000]  <1>     dq .createDPB           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   807 00000999 [DE06000000000000]  <1>     dq .getVerifySetting    ;AH = 54H, DISK MANAGEMENT
   808 000009A1 [E506000000000000]  <1>     dq .createPSP           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   809 000009A9 [E506000000000000]  <1>     dq .renameFile          ;AH = 56H, FILE OPERATION       HANDLE
   810 000009B1 [E506000000000000]  <1>     dq .getSetFileDateTime  ;AH = 57H, FILE OPERATION       HANDLE
   811 000009B9 [E506000000000000]  <1>     dq .getsetMallocStrat   ;AH = 58H, MEMORY MANAGEMENT
   812 000009C1 [E506000000000000]  <1>     dq .getExtendedError    ;AH = 59H, MISC. SYS. FUNCTION
   813 000009C9 [E506000000000000]  <1>     dq .createUniqueFile    ;AH = 5AH, FILE OPERATION       HANDLE
   814 000009D1 [E506000000000000]  <1>     dq .createNewFile       ;AH = 5BH, FILE OPERATION       HANDLE
   815 000009D9 [E506000000000000]  <1>     dq .lockUnlockFile      ;AH = 5CH, RECORD OPERATION     HANDLE
   816 000009E1 [E506000000000000]  <1>     dq .getCritErrorInfo    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   817 000009E9 [E506000000000000]  <1>     dq .networkServices     ;AH = 5EH, RESERVED NETWORK FUNCTION
   818 000009F1 [E506000000000000]  <1>     dq .networkRedirection  ;AH = 5FH, RESERVED NETWORK FUNCTION
   819 000009F9 [E506000000000000]  <1>     dq .trueName            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   820 00000A01 [F806000000000000]  <1>     dq .return              ;AH = 61H, RESERVED
   821 00000A09 [E506000000000000]  <1>     dq .getPSPaddr          ;AH = 62H, PROCESS MANAGEMENT
   822 00000A11 [F806000000000000]  <1>     dq .return              ;AH = 63H, RESERVED
   823 00000A19 [F806000000000000]  <1>     dq .setDriverLookahead  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   824 00000A21 [F806000000000000]  <1>     dq .getExtLocalInfo     ;AH = 65H, MISC. SYS. FUNCTION
   825 00000A29 [F806000000000000]  <1>     dq .getsetGlobalCP      ;AH = 66H, MISC. SYS. FUNCTION
   826 00000A31 [F806000000000000]  <1>     dq .setHandleCount      ;AH = 67H, FILE OPERAITON       F/H
   827 00000A39 [F806000000000000]  <1>     dq .commitFile          ;AH = 68H, FILE OPERATION       HANDLE
   828 00000A41 [F806000000000000]  <1>     dq .getsetDiskSerial    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   829                              <1> dispatchTableL  equ $ - .dispatchTable 
    16                                  %include "int44h.asm"
    17                              <1> critErrorHandler:   ;Int 44h
    18                              <1> ;User Stack in usage here, must be swapped to before this is called
    19                              <1> ;Entered with:  
    20                              <1> ;               AH = Critical Error Bitfield
    21                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    22                              <1> ;               Bit 6 - Reserved
    23                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    24                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    25                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    26                              <1> ;               Bits [2-1] = Affected Disk Error
    27                              <1> ;                     0 0   DOS area
    28                              <1> ;                     0 1   FAT area
    29                              <1> ;                     1 0   Directory area
    30                              <1> ;                     1 1   Data area
    31                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    32                              <1> ;               AL  = Failing drive number if AH[7] = 0
    33                              <1> ;               DIL = Error code for errorMsg
    34                              <1> ;               RSI = EA of Device Header for which device the error occured
    35                              <1> ;Return:
    36                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    37                              <1> ;                  = 1 - Retry the Operation    (Retry)
    38                              <1> ;                  = 2 - Terminate the Program  (Abort)
    39                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    40 00000A49 53                  <1>     push rbx
    41 00000A4A 51                  <1>     push rcx
    42 00000A4B 52                  <1>     push rdx
    43 00000A4C 57                  <1>     push rdi
    44 00000A4D 56                  <1>     push rsi
    45 00000A4E FC                  <1>     cld         ;Make String ops go forward
    46                              <1> 
    47 00000A4F 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    48 00000A52 488D1565020000      <1>     lea rdx, qword [.crlf]
    49 00000A59 B409                <1>     mov ah, 09h ;Print String
    50 00000A5B CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
    51                              <1> 
    52 00000A5D 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    53 00000A63 B90C000000          <1>     mov ecx, 0Ch
    54 00000A68 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    55 00000A6A 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    56 00000A6D 480FB7FF            <1>     movzx rdi, di
    57 00000A71 4889FA              <1>     mov rdx, rdi    ;Copy error code
    58 00000A74 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    59 00000A78 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    60 00000A7B 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    61 00000A7E 488D152A010000      <1>     lea rdx, qword [.errorMsgTable]
    62 00000A85 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    63 00000A89 B409                <1>     mov ah, 09h ;Print String
    64 00000A8B CD41                <1>     int 41h     ;Call DOS to print first part of message
    65                              <1> 
    66 00000A8D 488D150C020000      <1>     lea rdx, qword [.readmsg]
    67 00000A94 488D3D14020000      <1>     lea rdi, qword [.writemsg]
    68 00000A9B F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    69 00000A9E 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    70 00000AA2 B409                <1>     mov ah, 09h ;Print String
    71 00000AA4 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    72                              <1> 
    73 00000AA6 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    74 00000AA9 0F85E6000000        <1>     jnz .charError
    75                              <1> ;Disk error continues here
    76 00000AAF 488D15E3010000      <1>     lea rdx, qword [.drive] ;Drive message
    77 00000AB6 B409                <1>     mov ah, 09h
    78 00000AB8 CD41                <1>     int 41h
    79 00000ABA 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    80 00000ABC 80C241              <1>     add dl, "A" ;Add ASCII code
    81 00000ABF B402                <1>     mov ah, 02h ;Print char in dl
    82 00000AC1 CD41                <1>     int 41h
    83                              <1> .userInput:
    84 00000AC3 488D15F4010000      <1>     lea rdx, qword [.crlf]  ;Print new line
    85 00000ACA B409                <1>     mov ah, 09h
    86 00000ACC CD41                <1>     int 41h
    87                              <1> ;Abort, Retry, Ignore, Fail is word order
    88                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    89                              <1> .userAbort:
    90                              <1> ;Abort is always an option
    91 00000ACE 488D15EC010000      <1>     lea rdx, qword [.abortmsg]
    92 00000AD5 B409                <1>     mov ah, 09h
    93 00000AD7 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
    94                              <1> .userRetry:
    95 00000AD9 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    96 00000ADC 741D                <1>     jz .userIgnore    ;If clear, dont print message
    97 00000ADE 488D15F4010000      <1>     lea rdx, qword [.betweenMsg]
    98 00000AE5 B409                <1>     mov ah, 09h
    99 00000AE7 CD41                <1>     int 41h
   100 00000AE9 488D15DE010000      <1>     lea rdx, qword [.retrymsg]
   101 00000AF0 B409                <1>     mov ah, 09h
   102 00000AF2 CD41                <1>     int 41h
   103                              <1> .userIgnore:
   104 00000AF4 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   105 00000AF7 741D                <1>     jz .userFail
   106 00000AF9 488D15D9010000      <1>     lea rdx, qword [.betweenMsg]
   107 00000B00 B409                <1>     mov ah, 09h
   108 00000B02 CD41                <1>     int 41h
   109 00000B04 488D15BC010000      <1>     lea rdx, qword [.ignoremsg]
   110 00000B0B B409                <1>     mov ah, 09h
   111 00000B0D CD41                <1>     int 41h
   112                              <1> .userFail:
   113 00000B0F F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   114 00000B12 741D                <1>     jz .userMsgEnd
   115 00000B14 488D15BE010000      <1>     lea rdx, qword [.betweenMsg]
   116 00000B1B B409                <1>     mov ah, 09h
   117 00000B1D CD41                <1>     int 41h
   118 00000B1F 488D15AE010000      <1>     lea rdx, qword [.failmsg]
   119 00000B26 B409                <1>     mov ah, 09h
   120 00000B28 CD41                <1>     int 41h
   121                              <1> .userMsgEnd:
   122 00000B2A 488D15AB010000      <1>     lea rdx, qword [.endMsg]
   123 00000B31 B409                <1>     mov ah, 09h
   124 00000B33 CD41                <1>     int 41h
   125                              <1> ;Get user input now 
   126 00000B35 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   127 00000B37 488D3DA1010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   128 00000B3E B401                <1>     mov ah, 01h ;STDIN without Console Echo
   129 00000B40 CD41                <1>     int 41h ;Get char in al
   130 00000B42 3C61                <1>     cmp al, "a" ;Chack if lowercase
   131 00000B44 7209                <1>     jb .uip1    ;If the value is below, ignore subtraction
   132 00000B46 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   133                              <1> .uip1:
   134 00000B48 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   135 00000B49 7416                <1>     je .validInput  ;If they are equal, ecx has return code
   136 00000B4B FFC1                <1>     inc ecx
   137 00000B4D 81F904000000        <1>     cmp ecx, 4
   138 00000B53 75F3                <1>     jne .uip1
   139 00000B55 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   140                              <1> .validInput:
   141 00000B5A 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   142                              <1> ;Now check if the input is permitted
   143 00000B5C 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   144 00000B5E 742E                <1>     je .cehExit
   145 00000B60 84C0                <1>     test al, al ;Check if 0 => Ignore
   146 00000B62 7416                <1>     je .viIgnore
   147 00000B64 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   148 00000B66 741D                <1>     je .viRetry
   149                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   150 00000B68 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   151 00000B6B 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   152 00000B71 EB1B                <1>     jmp short .cehExit
   153                              <1> .viIgnore:
   154 00000B73 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   155 00000B76 0F8447FFFFFF        <1>     jz .userInput
   156 00000B7C EB10                <1>     jmp short .cehExit
   157                              <1> .viRetry:
   158 00000B7E F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   159 00000B81 0F843CFFFFFF        <1>     jz .userInput
   160                              <1> .cehExit:
   161 00000B87 5E                  <1>     pop rsi
   162 00000B88 5F                  <1>     pop rdi
   163 00000B89 5A                  <1>     pop rdx
   164 00000B8A 59                  <1>     pop rcx
   165 00000B8B 5B                  <1>     pop rbx
   166 00000B8C 48CF                <1>     iretq
   167                              <1> .charError:
   168 00000B8E B908000000          <1>     mov ecx, 8  ;8 chars in device name
   169 00000B93 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   170                              <1> .ce1:
   171 00000B9A AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   172 00000B9B 88C2                <1>     mov dl, al  ;Move char into dl
   173 00000B9D B402                <1>     mov ah, 02h
   174 00000B9F CD41                <1>     int 41h ;Print char
   175 00000BA1 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   176 00000BA3 E91BFFFFFF          <1>     jmp .userInput
   177                              <1> 
   178                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   179 00000BA8 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   179 00000BB1 746563742024202020  <1>
   180 00000BBA 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   180 00000BC3 6E6974202420202020  <1>
   181 00000BCC 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   181 00000BD5 202420202020202020  <1>
   182 00000BDE 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   182 00000BE7 6F6D6D616E64202420  <1>
   183 00000BF0 446174612024202020- <1>             db "Data $            "       ;Error 4
   183 00000BF9 202020202020202020  <1>
   184 00000C02 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   184 00000C0B 737420242020202020  <1>
   185 00000C14 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   185 00000C1D 202020202020202020  <1>
   186 00000C26 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   186 00000C2F 656469612024202020  <1>
   187 00000C38 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   187 00000C41 7420466F756E642024  <1>
   188 00000C4A 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   188 00000C53 706572202420202020  <1>
   189 00000C5C 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   189 00000C65 6C7420242020202020  <1>
   190 00000C6E 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   190 00000C77 742024202020202020  <1>
   191 00000C80 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   191 00000C89 61696C757265202420  <1>
   192                              <1> 
   193 00000C92 64726976652024      <1> .drive      db "drive $"
   194 00000C99 6572726F7220726561- <1> .readmsg    db "error reading $"
   194 00000CA2 64696E672024        <1>
   195 00000CA8 6572726F7220777269- <1> .writemsg   db "error writing $"
   195 00000CB1 74696E672024        <1>
   196 00000CB7 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   197 00000CBA 41626F727424        <1> .abortmsg   db "Abort$" 
   198 00000CC0 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   199 00000CC7 526574727924        <1> .retrymsg   db "Retry$"
   200 00000CCD 4661696C24          <1> .failmsg    db "Fail$"
   201 00000CD2 2C2024              <1> .betweenMsg db ", $"
   202 00000CD5 3F2024              <1> .endMsg     db "? $"
   203 00000CD8 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
    17                                  %include "dosDrivers.asm" 
    18                              <1> ;-----------------------------------:
    19                              <1> ;          Driver routines          :
    20                              <1> ;-----------------------------------:
    21                              <1> drivers:
    22                              <1> conHdr:
    23 00000CDC [050D000000000000]  <1>     dq auxHdr
    24 00000CE4 1308                <1>     dw 0813h
    25 00000CE6 [830E000000000000]  <1>     dq commonStrat
    26 00000CEE [920E000000000000]  <1>     dq conDriver
    27 00000CF6 434F4E2020202020    <1>     db "CON     "
    28                              <1> auxHdr:
    29 00000CFE [270D000000000000]  <1>     dq prnHdr
    30 00000D06 0080                <1>     dw 08000h
    31 00000D08 [830E000000000000]  <1>     dq commonStrat
    32 00000D10 [5711000000000000]  <1>     dq com1Intr
    33 00000D18 4155582020202020    <1>     db "AUX     "
    34                              <1> prnHdr:
    35 00000D20 [490D000000000000]  <1>     dq clkHdr
    36 00000D28 40A0                <1>     dw 0A040h
    37 00000D2A [8B0E000000000000]  <1>     dq nulStrat
    38 00000D32 [910E000000000000]  <1>     dq nulIntr
    39 00000D3A 50524E2020202020    <1>     db "PRN     "
    40                              <1> clkHdr:
    41 00000D42 [6B0D000000000000]  <1>     dq msdHdr
    42 00000D4A 0880                <1>     dw 08008h
    43 00000D4C [830E000000000000]  <1>     dq commonStrat
    44 00000D54 [CA0F000000000000]  <1>     dq clkDriver
    45 00000D5C 434C4F434B242020    <1>     db "CLOCK$  "
    46                              <1> msdHdr:
    47 00000D64 [8D0D000000000000]  <1>     dq com1Hdr
    48 00000D6C 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    49 00000D6E [830E000000000000]  <1>     dq commonStrat
    50 00000D76 [FC12000000000000]  <1>     dq msdDriver
    51 00000D7E 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    52                              <1> com1Hdr:
    53 00000D86 [AF0D000000000000]  <1>     dq com2Hdr
    54 00000D8E 0080                <1>     dw 08000h
    55 00000D90 [830E000000000000]  <1>     dq commonStrat
    56 00000D98 [5711000000000000]  <1>     dq com1Intr
    57 00000DA0 434F4D3120202020    <1>     db "COM1    "
    58                              <1> com2Hdr:
    59 00000DA8 [D10D000000000000]  <1>     dq com3Hdr
    60 00000DB0 0080                <1>     dw 08000h
    61 00000DB2 [830E000000000000]  <1>     dq commonStrat
    62 00000DBA [6011000000000000]  <1>     dq com2Intr
    63 00000DC2 434F4D3220202020    <1>     db "COM2    "
    64                              <1> com3Hdr:
    65 00000DCA [F30D000000000000]  <1>     dq com4Hdr
    66 00000DD2 0080                <1>     dw 08000h
    67 00000DD4 [830E000000000000]  <1>     dq commonStrat
    68 00000DDC [6911000000000000]  <1>     dq com3Intr
    69 00000DE4 434F4D3320202020    <1>     db "COM3    "
    70                              <1> com4Hdr:
    71 00000DEC [150E000000000000]  <1>     dq lpt1Hdr
    72 00000DF4 0080                <1>     dw 08000h
    73 00000DF6 [830E000000000000]  <1>     dq commonStrat
    74 00000DFE [7211000000000000]  <1>     dq com4Intr
    75 00000E06 434F4D3420202020    <1>     db "COM4    "
    76                              <1> lpt1Hdr:
    77 00000E0E [370E000000000000]  <1>     dq lpt2Hdr
    78 00000E16 40A0                <1>     dw 0A040h
    79 00000E18 [8B0E000000000000]  <1>     dq nulStrat
    80 00000E20 [910E000000000000]  <1>     dq nulIntr
    81 00000E28 4C50543120202020    <1>     db "LPT1    "
    82                              <1> lpt2Hdr:
    83 00000E30 [590E000000000000]  <1>     dq lpt3Hdr
    84 00000E38 40A0                <1>     dw 0A040h
    85 00000E3A [8B0E000000000000]  <1>     dq nulStrat
    86 00000E42 [910E000000000000]  <1>     dq nulIntr
    87 00000E4A 4C50543220202020    <1>     db "LPT2    "
    88                              <1> lpt3Hdr:
    89 00000E52 FFFFFFFFFFFFFFFF    <1>     dq -1
    90 00000E5A 40A0                <1>     dw 0A040h
    91 00000E5C [8B0E000000000000]  <1>     dq nulStrat
    92 00000E64 [910E000000000000]  <1>     dq nulIntr
    93 00000E6C 4C50543320202020    <1>     dq "LPT3    "
    94 00000E74 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    95                              <1> commonStrat:
    96                              <1> ;DOS calls this function with rbx=Ptr to request header
    97 00000E7C 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    98 00000E83 C3                  <1>     ret
    99                              <1> nulStrat:
   100 00000E84 66C743030001        <1>     mov word [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
   101                              <1> nulIntr:
   102 00000E8A C3                  <1>     ret
   103                              <1> 
   104                              <1> conDriver:
   105 00000E8B 50                  <1>     push rax
   106 00000E8C 53                  <1>     push rbx
   107 00000E8D 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
   108 00000E94 B003                <1>     mov al, 03h ;Unknown Command
   109 00000E96 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   110 00000E9A 773C                <1>     ja .conWriteErrorCode ;If yes, error!
   111                              <1> 
   112 00000E9C 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   113 00000E9F 3C04                <1>     cmp al, 4
   114 00000EA1 7444                <1>     jz .conRead
   115 00000EA3 3C05                <1>     cmp al, 5
   116 00000EA5 0F8482000000        <1>     jz .conNondestructiveRead
   117 00000EAB 3C06                <1>     cmp al, 6
   118 00000EAD 0F84AB000000        <1>     jz .conInputStatus
   119 00000EB3 3C07                <1>     cmp al, 7
   120 00000EB5 0F84B3000000        <1>     jz .conFlushInputBuffers
   121 00000EBB 3C08                <1>     cmp al, 8
   122 00000EBD 0F84CD000000        <1>     jz .conWrite
   123 00000EC3 3C09                <1>     cmp al, 9
   124 00000EC5 0F84C5000000        <1>     jz .conWrite
   125 00000ECB 3C0A                <1>     cmp al, 0Ah
   126 00000ECD 0F84E6000000        <1>     jz .conOutputStatus
   127 00000ED3 EB09                <1>     jmp short .conExit  ;All other valid functions return done
   128                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
   129 00000ED5 B480                <1>     mov ah, 80h ;Set error bit
   130 00000ED7 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   131                              <1> .conExit:
   132 00000EDB 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   133 00000EE1 5B                  <1>     pop rbx
   134 00000EE2 58                  <1>     pop rax
   135 00000EE3 C3                  <1>     ret
   136                              <1> .conRead:    ;Function 4
   137 00000EE4 B005                <1>     mov al, 05h ;Bad request structure length?
   138 00000EE6 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   139 00000EE9 75EA                <1>     jne .conWriteErrorCode
   140                              <1> 
   141 00000EEB 57                  <1>     push rdi
   142 00000EEC 51                  <1>     push rcx
   143 00000EED 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   144 00000EF1 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   145                              <1> .cre1:
   146 00000EF3 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   147 00000EF6 741F                <1>     je .cre2
   148 00000EF8 803DCA00000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
   149 00000EFF 751D                <1>     jnz .cre3   ;No, get the buffer value
   150 00000F01 31C0                <1>     xor eax, eax
   151 00000F03 CD36                <1>     int 36h
   152                              <1> .cre11:
   153 00000F05 AA                  <1>     stosb
   154 00000F06 84C0                <1>     test al, al ;Was the ascii code 0?
   155 00000F08 7509                <1>     jnz .cre12  ;No, skip storing scancode
   156 00000F0A 8825B9000000        <1>     mov byte [.conBuf], ah  ;Save scancode
   157                              <1> .cre12:
   158 00000F10 FFC1                <1>     inc ecx ;Inc chars stored in buffer
   159 00000F12 EBDF                <1>     jmp short .cre1
   160                              <1> .cre2:
   161 00000F14 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   162 00000F17 59                  <1>     pop rcx
   163 00000F18 5F                  <1>     pop rdi
   164 00000F19 EBC0                <1>     jmp short .conExit
   165                              <1> .cre3:
   166 00000F1B 8A05A8000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   167 00000F21 C605A100000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   168 00000F28 EBDB                <1>     jmp short .cre11
   169                              <1> 
   170                              <1> .conNondestructiveRead:  ;Function 5
   171 00000F2A B005                <1>     mov al, 05h ;Bad request structure length?
   172 00000F2C 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   173 00000F2F 75A4                <1>     jne .conWriteErrorCode
   174 00000F31 803D9100000000      <1>     cmp byte [.conBuf], 0
   175 00000F38 751C                <1>     jnz .cnr2
   176 00000F3A B401                <1>     mov ah, 01h     ;Get key if exists
   177 00000F3C CD36                <1>     int 36h
   178 00000F3E 740B                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   179                              <1>     ;Keystroke available
   180                              <1> .cnr0:
   181 00000F40 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Move char in al
   182 00000F43 E993FFFFFF          <1>     jmp .conExit
   183                              <1> .cnr1: ;No keystroke available
   184 00000F48 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 0200h   ;Set busy bit
   185 00000F4E E988FFFFFF          <1>     jmp .conExit
   186                              <1> .cnr2:
   187 00000F53 8A0570000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   188 00000F59 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   189                              <1> 
   190                              <1> .conInputStatus:         ;Function 6
   191 00000F5B B005                <1>     mov al, 05h ;Bad request structure length?
   192 00000F5D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   193 00000F60 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   194 00000F66 E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   195                              <1> 
   196                              <1> .conFlushInputBuffers:   ;Function 7
   197 00000F6B B005                <1>     mov al, 05h ;Bad request structure length?
   198 00000F6D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   199 00000F70 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   200 00000F76 C6054C00000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   201                              <1> .cfib0:
   202 00000F7D B401                <1>     mov ah, 01      ;Get buffer status
   203 00000F7F CD36                <1>     int 36h
   204 00000F81 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   205 00000F87 30E4                <1>     xor ah, ah
   206 00000F89 CD36                <1>     int 36h ;Read key to flush from buffer
   207 00000F8B EBF0                <1>     jmp short .cfib0
   208                              <1> 
   209                              <1> .conWrite:   ;Function 8 and 9
   210 00000F8D B005                <1>     mov al, 05h ;Bad request structure length?
   211 00000F8F 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   212 00000F92 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   213                              <1> 
   214 00000F98 56                  <1>     push rsi
   215 00000F99 51                  <1>     push rcx
   216 00000F9A 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   217 00000F9E 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   218                              <1> .cw1: 
   219 00000FA0 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   220 00000FA3 740A                <1>     je .cw2
   221 00000FA5 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   222 00000FA6 CD49                <1>     int 49h ;Fast print char
   223 00000FA8 FFC1                <1>     inc ecx
   224 00000FAA EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   225                              <1> .cw2:
   226 00000FAC 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   227 00000FAF 59                  <1>     pop rcx
   228 00000FB0 5E                  <1>     pop rsi
   229 00000FB1 E925FFFFFF          <1>     jmp .conExit
   230                              <1> .conOutputStatus:   ;Function 0Ah
   231 00000FB6 B005                <1>     mov al, 05h ;Bad request structure length?
   232 00000FB8 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   233 00000FBB 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   234 00000FC1 E915FFFFFF          <1>     jmp .conExit
   235                              <1> 
   236 00000FC6 00                  <1> .conBuf db 0    ;Single byte buffer
   237                              <1> clkDriver:
   238 00000FC7 50                  <1>     push rax
   239 00000FC8 53                  <1>     push rbx
   240 00000FC9 51                  <1>     push rcx
   241 00000FCA 52                  <1>     push rdx
   242 00000FCB 56                  <1>     push rsi
   243 00000FCC 55                  <1>     push rbp
   244 00000FCD 488B1DA0FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   245 00000FD4 B003                <1>     mov al, 03h ;Unknown Command
   246 00000FD6 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   247 00000FDA 772E                <1>     ja .clkWriteErrorCode ;If yes, error!
   248                              <1> 
   249 00000FDC 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   250 00000FDF 3C04                <1>     cmp al, 04h
   251 00000FE1 743A                <1>     jz .clkRead
   252 00000FE3 3C06                <1>     cmp al, 06h
   253 00000FE5 0F8497000000        <1>     jz .clkInputStatus
   254 00000FEB 3C07                <1>     cmp al, 07h
   255 00000FED 0F849B000000        <1>     jz .clkFlushInputBuffers
   256 00000FF3 3C08                <1>     cmp al, 08h
   257 00000FF5 0F84A3000000        <1>     jz .clkWrite
   258 00000FFB 3C09                <1>     cmp al, 09h
   259 00000FFD 0F849B000000        <1>     jz .clkWrite
   260 00001003 EB0B                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   261                              <1> .clkNotFunctioning:
   262 00001005 B002                <1>     mov al, 02h ;Device not ready error
   263                              <1> .clkWriteErrorCode:
   264 00001007 B480                <1>     mov ah, 80h ;Set error bit
   265 00001009 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   266                              <1> .clkExit:
   267 0000100D 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   268 00001013 5D                  <1>     pop rbp
   269 00001014 5E                  <1>     pop rsi
   270 00001015 5A                  <1>     pop rdx
   271 00001016 59                  <1>     pop rcx
   272 00001017 5B                  <1>     pop rbx
   273 00001018 58                  <1>     pop rax
   274 00001019 C3                  <1>     ret
   275                              <1> 
   276                              <1> .clkRead:           ;Function 4
   277 0000101A B005                <1>     mov al, 05h ;Bad request structure length?
   278 0000101C 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   279 0000101F 75E6                <1>     jne .clkWriteErrorCode
   280                              <1> 
   281 00001021 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   282 00001024 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   283 00001028 668B0501010000      <1>     mov ax, word [.clkDate] ;Get the clock date
   284 0000102F 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   285 00001033 30E4                <1>     xor ah, ah
   286 00001035 CD3A                <1>     int 3Ah         ;Read the system timer
   287 00001037 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   288 00001039 7410                <1>     jz .clkr1       ;Nope, now just time 
   289 0000103B 30E4                <1>     xor ah, ah
   290                              <1>     ;This works as al should keep count of the # of days passed since last read
   291 0000103D 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   292 00001041 660105E8000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   293                              <1> .clkr1:
   294 00001048 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   295 0000104B 0FB7D2              <1>     movzx edx, dx
   296 0000104E 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   297 00001050 89D0                <1>     mov eax, edx
   298 00001052 31D2                <1>     xor edx, edx
   299 00001054 89D8                <1>     mov eax, ebx
   300 00001056 B944040000          <1>     mov ecx, 1092   
   301 0000105B F7F1                <1>     div ecx
   302 0000105D 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   303 00001060 89D0                <1>     mov eax, edx    ;Get remainder in eax
   304 00001062 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   305 00001066 31D2                <1>     xor edx, edx
   306 00001068 B95B000000          <1>     mov ecx, 91 ;5*18.2
   307 0000106D F7F1                <1>     div ecx
   308 0000106F 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   309 00001072 89D0                <1>     mov eax, edx    ;Get remainder in eax
   310                              <1>     ;lea eax, dword [eax + 4*eax]
   311                              <1>     ;add eax, edx    ;Essentially multiply by 6
   312 00001074 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   313 00001077 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   314 0000107A E98EFFFFFF          <1>     jmp .clkExit
   315                              <1> 
   316                              <1> .clkInputStatus:    ;Function 6
   317                              <1> ;Always return ready
   318 0000107F B005                <1>     mov al, 05h ;Bad request structure length?
   319 00001081 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   320 00001084 7581                <1>     jne .clkWriteErrorCode
   321 00001086 E982FFFFFF          <1>     jmp .clkExit
   322                              <1> .clkFlushInputBuffers:  ;Function 7
   323                              <1> ;Always return done immediately
   324 0000108B B005                <1>     mov al, 05h ;Bad request structure length?
   325 0000108D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   326 00001090 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   327 00001096 E972FFFFFF          <1>     jmp .clkExit
   328                              <1> 
   329                              <1> .clkWrite:          ;Functions 8 and 9
   330 0000109B B005                <1>     mov al, 05h ;Bad request structure length?
   331 0000109D 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   332 000010A0 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   333                              <1> 
   334 000010A6 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   335 000010A9 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   336 000010AD 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   337 000010B1 66890578000000      <1>     mov word [.clkDate], ax ;Save date internally
   338                              <1> 
   339 000010B8 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   340 000010BA 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   341 000010BE B105                <1>     mov cl, 5
   342 000010C0 F6F1                <1>     div cl          ;Divide al by 5
   343 000010C2 30E4                <1>     xor ah, ah      ;Remove the remainder
   344 000010C4 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   345                              <1> ;Using the decimal part of this formula for the low count
   346                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   347 000010C6 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   348 000010C9 B912000000          <1>     mov ecx, 18
   349 000010CE F7E1                <1>     mul ecx  
   350 000010D0 01C3                <1>     add ebx, eax
   351                              <1> 
   352 000010D2 31D2                <1>     xor edx, edx
   353 000010D4 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   354 000010D8 B944040000          <1>     mov ecx, 1092
   355 000010DD F7E1                <1>     mul ecx
   356 000010DF 01C3                <1>     add ebx, eax
   357 000010E1 89DA                <1>     mov edx, ebx    ;edx now has low count
   358 000010E3 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   359 000010E7 B401                <1>     mov ah, 01h     ;Set the system time
   360 000010E9 CD3A                <1>     int 3Ah
   361                              <1> 
   362 000010EB 4889F3              <1>     mov rbx, rsi
   363 000010EE E91AFFFFFF          <1>     jmp .clkExit
   364                              <1> 
   365                              <1> .clkBCDtoHex:
   366                              <1> ;Converts a BCD value to a Hex byte
   367                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   368 000010F3 51                  <1>     push rcx
   369 000010F4 0FB6C0              <1>     movzx eax, al   ;Zero extend
   370 000010F7 89C1                <1>     mov ecx, eax    ;Save al in ecx
   371 000010F9 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   372 000010FE 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   373 00001104 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   374                              <1> .cbth0:
   375 00001107 050A000000          <1>     add eax, 10
   376 0000110C E2F9                <1>     loop .cbth0
   377 0000110E 59                  <1>     pop rcx
   378 0000110F C3                  <1>     ret
   379                              <1> 
   380                              <1> .clkHexToBCD:
   381                              <1> ;Converts a Hex byte into two BCD digits
   382                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   383 00001110 51                  <1>     push rcx
   384 00001111 0FB6C0              <1>     movzx eax, al   ;Zero extend
   385 00001114 31C9                <1>     xor ecx, ecx
   386                              <1> .chtb0:
   387 00001116 3D0A000000          <1>     cmp eax, 10
   388 0000111B 720C                <1>     jb .chtb1
   389 0000111D 2D0A000000          <1>     sub eax, 10
   390 00001122 FFC1                <1>     inc ecx
   391 00001124 EBF0                <1>     jmp short .chtb0
   392                              <1> .chtb1:
   393 00001126 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   394 00001129 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   395 0000112B 59                  <1>     pop rcx
   396 0000112C C3                  <1>     ret
   397 0000112D 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   398                              <1> ;When counting the number of days, first compute the number of years since
   399                              <1> ; 1980 and your year. 
   400                              <1> ;Then, using the table below, find the number of leap years between 1980
   401                              <1> ; and (YourYear - 1). 
   402                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   403                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   404                              <1> ;Use the months table to get the number of days in a normal month as leap 
   405                              <1> ; years are added using the previous comment.
   406                              <1> ;Finally check if the date is after 28th Feb. If it is, check if your year is 
   407                              <1> ; a leap year using the table. If it is, add an extra day.
   408                              <1> .clkLeapYears:
   409 0000112F 0004080C1014181C20- <1>     db 00, 04, 08, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 
   409 00001138 24282C30            <1>
   410 0000113C 34383C4044484C5054- <1>     db 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96
   410 00001145 585C60              <1>
   411                              <1> .clkMonths:
   412 00001148 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   412 00001151 1F1E1F              <1>
   413                              <1> ;COM Driver headers and main interrupt strat
   414                              <1> com1Intr:
   415 00001154 C605A001000000      <1>     mov byte [comIntr.comDevice], 0
   416 0000115B EB1C                <1>     jmp short comIntr
   417                              <1> com2Intr:
   418 0000115D C6059701000001      <1>     mov byte [comIntr.comDevice], 1
   419 00001164 EB13                <1>     jmp short comIntr
   420                              <1> com3Intr:
   421 00001166 C6058E01000002      <1>     mov byte [comIntr.comDevice], 2
   422 0000116D EB0A                <1>     jmp short comIntr
   423                              <1> com4Intr:
   424 0000116F C6058501000003      <1>     mov byte [comIntr.comDevice], 3
   425                              <1> comIntr:
   426 00001176 50                  <1>     push rax
   427 00001177 53                  <1>     push rbx
   428 00001178 51                  <1>     push rcx
   429 00001179 52                  <1>     push rdx
   430 0000117A 56                  <1>     push rsi
   431 0000117B 57                  <1>     push rdi
   432 0000117C 488B1DF1FCFFFF      <1>     mov rbx, qword [reqHdrPtr]
   433 00001183 B003                <1>     mov al, 03h ;Unknown Command
   434 00001185 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   435 00001189 7759                <1>     ja .comWriteErrorCode ;If yes, error!
   436                              <1> 
   437 0000118B 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   438 0000118E 3C04                <1>     cmp al, 4   ;Read Character(s)
   439 00001190 7465                <1>     jz .comRead
   440 00001192 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   441 00001194 0F849E000000        <1>     jz .comNondestructiveRead   
   442 0000119A 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   443 0000119C 0F8487000000        <1>     jz .comReadInputStatus
   444 000011A2 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   445 000011A4 0F84BC000000        <1>     jz .comFlushInputBuffers
   446 000011AA 3C08                <1>     cmp al, 8
   447 000011AC 0F84DE000000        <1>     jz .comWrite
   448 000011B2 3C09                <1>     cmp al, 9
   449 000011B4 0F84D6000000        <1>     jz .comWrite
   450 000011BA 3C0A                <1>     cmp al, 0Ah
   451 000011BC 0F8403010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   452 000011C2 EB26                <1>     jmp short .comExit  ;All other valid functions should return done
   453                              <1> .comErrorNoCount:
   454 000011C4 B002                <1>     mov al, 02h ;Unknown device
   455 000011C6 EB1C                <1>     jmp short .comWriteErrorCode
   456                              <1> .comReadError:
   457 000011C8 BA0B000000          <1>     mov edx, 0Bh
   458                              <1> .comWriteError:
   459 000011CD BA0A000000          <1>     mov edx, 0Ah
   460                              <1> .comError:
   461 000011D2 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   462 000011D5 B902000000          <1>     mov ecx, 02h    ;Unknown device
   463 000011DA 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   464 000011DC 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   465 000011DF 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   466                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   467 000011E1 B480                <1>     mov ah, 80h ;Set error bit
   468 000011E3 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   469                              <1> .comExit:
   470 000011E7 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   471 000011ED 5F                  <1>     pop rdi
   472 000011EE 5E                  <1>     pop rsi
   473 000011EF 5A                  <1>     pop rdx
   474 000011F0 59                  <1>     pop rcx
   475 000011F1 5B                  <1>     pop rbx
   476 000011F2 58                  <1>     pop rax
   477 000011F3 C3                  <1>     ret
   478                              <1> 
   479                              <1> .comRead:
   480 000011F4 B005                <1>     mov al, 05h ;Bad request structure length?
   481 000011F6 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   482 000011F9 75E6                <1>     jne .comWriteErrorCode
   483                              <1> 
   484 000011FB 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   485 000011FF 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   486                              <1> .cr1:
   487 00001201 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   488 00001204 741E                <1>     je .cre2
   489                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   490 00001206 B802000000          <1>     mov eax, 02h    ;Recieve 
   491 0000120B 8A15EA000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   492 00001211 6698                <1>     cbw     ;Zero extend to upper byte
   493 00001213 CD34                <1>     int 34h ;Recieve Char
   494 00001215 72BB                <1>     jc .comError
   495 00001217 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   496 0000121A 74EA                <1>     je .cr11
   497 0000121C AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   498 0000121D FFC1                <1>     inc ecx
   499 0000121F EBE0                <1>     jmp short .cr1
   500                              <1> .cre2:
   501 00001221 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   502 00001224 EBC1                <1>     jmp short .comExit
   503                              <1> 
   504                              <1> .comReadInputStatus:
   505 00001226 B005                <1>     mov al, 05h ;Bad request structure length?
   506 00001228 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   507 0000122B 75B4                <1>     jne .comWriteErrorCode
   508 0000122D 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   509 00001233 EBB2                <1>     jmp short .comExit
   510                              <1> 
   511                              <1> .comNondestructiveRead:
   512                              <1> ;Acts like a "read one character if there is one" function
   513 00001235 B005                <1>     mov al, 05h ;Bad request structure length?
   514 00001237 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   515 0000123A 75A5                <1>     jne .comWriteErrorCode
   516                              <1> .cndr1:
   517 0000123C B802000000          <1>     mov eax, 02h    ;Recieve 
   518 00001241 8A15B4000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   519 00001247 6698                <1>     cbw     ;Zero extend to upper byte
   520 00001249 CD34                <1>     int 34h ;Recieve Char
   521 0000124B 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   522 00001251 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   523 00001254 7408                <1>     je .cndr2
   524 00001256 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Get next char
   525 00001259 EB8C                <1>     jmp short .comExit
   526                              <1> .cndr2:
   527 0000125B 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 200h ;Busy bit set
   528 00001261 EB84                <1>     jmp short .comExit
   529                              <1> 
   530                              <1> .comFlushInputBuffers:
   531 00001263 B005                <1>     mov al, 05h ;Bad request structure length?
   532 00001265 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   533 00001268 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   534                              <1> .cfib0:
   535 0000126E 8A1587000000        <1>     mov dl, byte [.comDevice]
   536 00001274 6698                <1>     cbw
   537 00001276 B802000000          <1>     mov eax, 02h    ;Recieve
   538 0000127B CD34                <1>     int 34h
   539 0000127D 0F8241FFFFFF        <1>     jc .comErrorNoCount
   540 00001283 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   541 00001286 75E6                <1>     jne .cfib0
   542 00001288 E95AFFFFFF          <1>     jmp .comExit
   543                              <1> 
   544                              <1> .comWrite:
   545 0000128D B005                <1>     mov al, 05h ;Bad request structure length?
   546 0000128F 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   547 00001292 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   548                              <1> 
   549 00001298 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   550 0000129C 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   551                              <1> .cw1: 
   552 0000129E 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   553 000012A1 741A                <1>     je .cw2
   554 000012A3 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   555 000012A4 B401                <1>     mov ah, 01h ;Move function number into ah
   556 000012A6 8A154F000000        <1>     mov dl, byte [.comDevice]
   557 000012AC 6698                <1>     cbw     ;Zero extend to upper byte
   558 000012AE CD34                <1>     int 34h ;Transmit char
   559 000012B0 0F821CFFFFFF        <1>     jc .comError
   560 000012B6 FFC1                <1>     inc ecx
   561 000012B8 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   562                              <1> .cw2:
   563 000012BA 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   564 000012BD E925FFFFFF          <1>     jmp .comExit
   565                              <1> 
   566                              <1> .comOutputStatus:
   567                              <1> ;Read MODEM status
   568 000012C2 B005                <1>     mov al, 05h ;Bad request structure length?
   569 000012C4 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   570 000012C7 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   571                              <1> 
   572 000012CD 8A1528000000        <1>     mov dl, byte [.comDevice]
   573 000012D3 6698                <1>     cbw     ;Zero extend to upper byte
   574 000012D5 B403                <1>     mov ah, 03h     ;Get status
   575 000012D7 CD34                <1>     int 34h
   576 000012D9 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   577 000012DF 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   578 000012E4 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   579 000012E7 F7D0                <1>     not eax      ;Bitwise inversion
   580 000012E9 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   581 000012EE 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   582 000012F3 E9EFFEFFFF          <1>     jmp .comExit
   583 000012F8 00                  <1> .comDevice   db 0
   584                              <1> 
   585                              <1> msdDriver:
   586 000012F9 50                  <1>     push rax
   587 000012FA 53                  <1>     push rbx
   588 000012FB 51                  <1>     push rcx
   589 000012FC 52                  <1>     push rdx
   590 000012FD 56                  <1>     push rsi
   591 000012FE 57                  <1>     push rdi
   592 000012FF 55                  <1>     push rbp
   593 00001300 4150                <1>     push r8
   594 00001302 488B1D6BFBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
   595 00001309 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   596 0000130D B003                <1>     mov al, 03h
   597 0000130F 0F87FC000000        <1>     ja .msdWriteErrorCode ;If yes, error!
   598 00001315 B001                <1>     mov al, 01h ;Unknown Unit Error
   599 00001317 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
   600 0000131B 0F87F0000000        <1>     ja .msdWriteErrorCode ;If yes, error!
   601 00001321 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
   602 00001324 84C0                <1>     test al, al
   603 00001326 0F84FB000000        <1>     jz .msdInit
   604 0000132C 3C01                <1>     cmp al, 01
   605 0000132E 0F84CC010000        <1>     jz .msdMedChk
   606 00001334 3C02                <1>     cmp al, 02
   607 00001336 0F843C020000        <1>     jz .msdBuildBPB
   608 0000133C 3C03                <1>     cmp al, 03
   609 0000133E 0F84A9020000        <1>     jz .msdIOCTLRead
   610 00001344 3C04                <1>     cmp al, 04
   611 00001346 0F84B1020000        <1>     jz .msdRead
   612 0000134C 3C08                <1>     cmp al, 08
   613 0000134E 0F84E5020000        <1>     jz .msdWrite
   614 00001354 3C09                <1>     cmp al, 09
   615 00001356 0F8419030000        <1>     jz .msdWriteVerify
   616 0000135C 3C0C                <1>     cmp al, 12
   617 0000135E 0F845A030000        <1>     jz .msdIOCTLWrite
   618 00001364 3C0D                <1>     cmp al, 13
   619 00001366 0F8462030000        <1>     jz .msdDevOpen
   620 0000136C 3C0E                <1>     cmp al, 14
   621 0000136E 0F8479030000        <1>     jz .msdDevClose
   622 00001374 3C0F                <1>     cmp al, 15
   623 00001376 0F8490030000        <1>     jz .msdRemovableMedia
   624 0000137C 3C13                <1>     cmp al, 19
   625 0000137E 0F84B5030000        <1>     jz .msdGenericIOCTL
   626 00001384 3C17                <1>     cmp al, 23
   627 00001386 0F84BD030000        <1>     jz .msdGetLogicalDev
   628 0000138C 3C18                <1>     cmp al, 24
   629 0000138E 0F84CE030000        <1>     jz .msdSetLogicalDev
   630 00001394 EB81                <1>     jmp short .msdDriverExit    ;All other valid functions exit done
   630          ******************  <1>  error: short jump is out of range
   630          ******************  <1>  warning: byte data exceeds bounds [-w+number-overflow]
   631                              <1> .msdIOError:  ;In Read and Write errors, rbp points to the dev struc
   632 00001396 4889EB              <1>     mov rbx, rbp
   633 00001399 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
   634 0000139C 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
   635 0000139E 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
   636                              <1> ;Now fall through to general error
   637                              <1> .msdGenDiskError:
   638 000013A1 B401                <1>     mov ah, 01h
   639 000013A3 30D2                <1>     xor dl, dl  ;Work around bug that fails request if dl > 7Fh
   640 000013A5 CD33                <1>     int 33h ;Read status of last operation
   641 000013A7 80FC06              <1>     cmp ah, 06h ;Mock Seek response (device not present)
   642 000013AA B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
   643 000013AC 7463                <1>     je .msdWriteErrorCode 
   644 000013AE B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
   645 000013B0 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
   646 000013B3 745C                <1>     je .msdWriteErrorCode 
   647 000013B5 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
   648 000013B8 7457                <1>     je .msdWriteErrorCode
   649                              <1> ;Device Not Ready
   650 000013BA B002                <1>     mov al, 02h  ;Device not ready code
   651 000013BC 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   652 000013BF 7450                <1>     je .msdWriteErrorCode
   653 000013C1 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   654 000013C5 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   655                              <1> ;Write Protected
   656 000013C9 30C0                <1>     xor al, al
   657 000013CB 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   658 000013D0 743F                <1>     je .msdWriteErrorCode
   659                              <1> ;CRC Error
   660 000013D2 B004                <1>     mov al, 04h     ;CRC error code
   661 000013D4 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   662 000013D9 7436                <1>     je .msdWriteErrorCode
   663 000013DB 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   664 000013E0 742F                <1>     je .msdWriteErrorCode
   665 000013E2 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   666 000013E7 7428                <1>     je .msdWriteErrorCode
   667                              <1> ;Seek Error
   668 000013E9 B006                <1>     mov al, 06h     ;Seek error code
   669 000013EB 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   670 000013EE 7421                <1>     je .msdWriteErrorCode
   671                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   672                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   673 000013F0 B007                <1>     mov al, 07h
   674 000013F2 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   675 000013F5 741A                <1>     je .msdWriteErrorCode
   676                              <1> ;Sector Not Found
   677 000013F7 B008                <1>     mov al, 08h     ;Sector not found code
   678 000013F9 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   679 000013FC 7413                <1>     je .msdWriteErrorCode
   680                              <1> ;Write faults
   681 000013FE B00A                <1>     mov al, 0Ah     ;Write fault
   682 00001400 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   683 00001403 740C                <1>     je .msdWriteErrorCode
   684                              <1> ;Read faults
   685 00001405 B00B                <1>     mov al, 0Bh     ;Read fault
   686 00001407 80F911              <1>     cmp cl, 11h     ;Read error
   687 0000140A 7405                <1>     je .msdWriteErrorCode
   688                              <1> ;General Errors
   689 0000140C B00C                <1>     mov al, 0Ch     ;Everything else is general error
   690                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   691 0000140E B480                <1>     mov ah, 80h ;Set error bit
   692 00001410 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   693                              <1> .msdDriverExit:
   694 00001414 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
   695 0000141A 4158                <1>     pop r8
   696 0000141C 5D                  <1>     pop rbp
   697 0000141D 5F                  <1>     pop rdi
   698 0000141E 5E                  <1>     pop rsi
   699 0000141F 5A                  <1>     pop rdx
   700 00001420 59                  <1>     pop rcx
   701 00001421 5B                  <1>     pop rbx
   702 00001422 58                  <1>     pop rax
   703 00001423 C3                  <1>     ret
   704                              <1> .msdInit:            ;Function 0
   705 00001424 B005                <1>     mov al, 05h ;Bad request structure length
   706 00001426 803B1F              <1>     cmp byte [rbx + drvReqHdr.hdrlen], initReqPkt_size
   707 00001429 75E3                <1>     jne .msdWriteErrorCode
   708                              <1> 
   709 0000142B 488D2DF7050000      <1>     lea rbp, endptr
   710 00001432 48896B0E            <1>     mov qword [rbx + initReqPkt.endptr], rbp    ;Where the end is gonna be
   711 00001436 488D2D6C030000      <1>     lea rbp, .msdBPBTbl
   712 0000143D 48896B16            <1>     mov qword [rbx + initReqPkt.optptr], rbp    ;Where bpb tbl is gonna be
   713                              <1> 
   714 00001441 4889DD              <1>     mov rbp, rbx ;Save the req block ptr in rbp
   715 00001444 31D2                <1>     xor edx, edx  ;Start from device zero
   716 00001446 88550D              <1>     mov byte [rbp + initReqPkt.numunt], dl   ;Zero this field, max 5
   717                              <1> .mi0:   ;Now check each device for partitions
   718 00001449 807D0D05            <1>     cmp byte [rbp + initReqPkt.numunt], 5
   719 0000144D 746F                <1>     je .msdExit ;IF we are at 5 now, we exit
   720 0000144F B482                <1>     mov ah, 82h ;LBA read
   721 00001451 B001                <1>     mov al, 1   ;1 sector
   722 00001453 B900000000          <1>     mov ecx, 0  ;Read sector 0
   723 00001458 488D1D(31040000)    <1>     lea rbx, msdTempBuffer  ;Get address of this space
   724 0000145F CD33                <1>     int 33h
   725 00001461 0F8291000000        <1>     jc .msdInitError
   726                              <1> ;Now we verify if this is a BPB. Removable devices can't be partitioned (yet)
   727                              <1> ;1) Check byte 0 for EBh (short jmp) and byte 2 for a 90h (nop).
   728 00001467 8A03                <1>     mov al, byte [rbx]
   729 00001469 8A6302              <1>     mov ah, byte [rbx + 2]
   730 0000146C 663DEB90            <1>     cmp ax, 090EBh
   731 00001470 7576                <1>     jne .mimbr
   732                              <1> ;Valid BPB found! Copy to internal table and inc lastdrive
   733 00001472 4889DE              <1>     mov rsi, rbx
   734 00001475 B878000000          <1>     mov eax, bpbEx_size
   735 0000147A 89D1                <1>     mov ecx, edx    ;Temporarily save dl in ecx
   736 0000147C F7E2                <1>     mul edx
   737 0000147E 89CA                <1>     mov edx, ecx
   738 00001480 488D3D4A030000      <1>     lea rdi, .msdBPBblks
   739 00001487 4801C7              <1>     add rdi, rax
   740 0000148A B978000000          <1>     mov ecx, bpbEx_size
   741 0000148F 4889F8              <1>     mov rax, rdi    ;Save the entry address in rax
   742 00001492 F3A4                <1>     rep movsb   ;Copy the bpb into the bpb table
   743 00001494 488D3D0E030000      <1>     lea rdi, .msdBPBTbl
   744 0000149B 488D3CD7            <1>     lea rdi, qword [rdi + 8*rdx]
   745 0000149F 488907              <1>     mov qword [rdi], rax
   746 000014A2 488D3DF6020000      <1>     lea rdi, .msdBIOSmap
   747 000014A9 4801D7              <1>     add rdi, rdx    ;rdx contains a number, table is a list of bytes
   748 000014AC 8817                <1>     mov byte [rdi], dl
   749 000014AE FE450D              <1>     inc byte [rbp + initReqPkt.numunt]
   750 000014B1 FEC2                <1>     inc dl
   751 000014B3 3A15(09000000)      <1>     cmp dl, byte [numRemMSD] ;Once these are equal, we have processed last dev
   752 000014B9 758E                <1>     jne .mi0
   753                              <1> .msdExit:
   754                              <1> ;If one device only, copy its BPB pointer and drive number
   755                              <1> ;When HDD support implemented, this will check the number of remdevs not lastdrv
   756 000014BB 807D0D01            <1>     cmp byte [rbp + initReqPkt.numunt], 1
   757 000014BF 751F                <1>     jne .msdexit1
   758                              <1> ;Here ONLY if one device found
   759 000014C1 488D35E1020000      <1>     lea rsi, .msdBPBTbl
   760 000014C8 488D7E08            <1>     lea rdi, qword [rsi + 8]    ;Point to next entry
   761 000014CC 48A5                <1>     movsq   ;Copy pointer
   762 000014CE 488D35CA020000      <1>     lea rsi, .msdBIOSmap
   763 000014D5 488D7E01            <1>     lea rdi, qword [rsi + 1]
   764 000014D9 A4                  <1>     movsb   ;Copy byte
   765 000014DA FE450D              <1>     inc byte [rbp + initReqPkt.numunt]
   766                              <1> .msdexit1:
   767 000014DD 4889EB              <1>     mov rbx, rbp
   768 000014E0 E92FFFFFFF          <1>     jmp .msdDriverExit
   769                              <1> .mimbr:
   770                              <1> ;Goto next device without incrementing LASTDRIVE
   771 000014E5 FEC2                <1>     inc dl
   772 000014E7 3A15(09000000)      <1>     cmp dl, byte [numRemMSD] ;Once these are equ, we have processed last dev
   773 000014ED 0F8556FFFFFF        <1>     jne .mi0
   774 000014F3 EBC6                <1>     jmp short .msdExit
   775                              <1> .msdInitError:
   776 000014F5 4889EB              <1>     mov rbx, rbp
   777 000014F8 E9A4FEFFFF          <1>     jmp .msdGenDiskError
   778                              <1> .msdMedChk:          ;Function 1
   779                              <1> ;Once the BIOS function is implmented that reads the changeline, use that!
   780                              <1> ;For BIOSes that dont support the changeline, the following procedure will 
   781                              <1> ; suffice.
   782 000014FD B005                <1>     mov al, 05h ;Bad request structure length
   783 000014FF 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   784 00001502 0F8506FFFFFF        <1>     jne .msdWriteErrorCode
   785                              <1> 
   786 00001508 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   787 0000150D 488D0D8B020000      <1>     lea rcx, .msdBIOSmap
   788 00001514 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   789 00001517 F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   790 0000151A 7553                <1>     jnz .mmcNoChange
   791                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   792 0000151C B416                <1>     mov ah, 16h 
   793 0000151E CD33                <1>     int 33h
   794 00001520 0F827BFEFFFF        <1>     jc .msdGenDiskError
   795 00001526 80FC80              <1>     cmp ah, 80h
   796 00001529 7411                <1>     je .mmcNoChangeLine
   797 0000152B 80FC86              <1>     cmp ah, 86h
   798 0000152E 740C                <1>     je .mmcNoChangeLine
   799 00001530 84E4                <1>     test ah, ah ;No change?
   800 00001532 743B                <1>     jz .mmcNoChange
   801 00001534 F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   802 00001537 7519                <1>     jnz .mmcChange
   803                              <1> ;If nothing, fall through and test manually, should never happen though
   804                              <1> .mmcNoChangeLine:
   805                              <1> ;Now we test Media Descriptor
   806 00001539 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   807 0000153C 488D3D66020000      <1>     lea rdi, .msdBPBTbl
   808 00001543 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax]
   809 00001547 488B3F              <1>     mov rdi, qword [rdi]    ;Dereference rdi
   810 0000154A 385715              <1>     cmp byte [rdi + bpb32.media], dl    ;Compare media descriptor bytes
   811 0000154D 7417                <1>     je .mmcUnsure
   812                              <1> .mmcChange:
   813 0000154F C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   814 00001553 488D053B020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   815 0000155A 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   816 0000155E E9B1FEFFFF          <1>     jmp .msdDriverExit
   817                              <1> .mmcUnsure:
   818 00001563 C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   819 00001567 E9A8FEFFFF          <1>     jmp .msdDriverExit
   820                              <1> .mmcNoChange:
   821 0000156C C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   822 00001570 E99FFEFFFF          <1>     jmp .msdDriverExit
   823                              <1> 
   824                              <1> .msdBuildBPB:        ;Function 2
   825 00001575 B005                <1>     mov al, 05h ;Bad request structure length
   826 00001577 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   827 0000157A 0F858EFEFFFF        <1>     jne .msdWriteErrorCode
   828                              <1> 
   829 00001580 4889DE              <1>     mov rsi, rbx
   830 00001583 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   831 00001588 488D0D10020000      <1>     lea rcx, .msdBIOSmap
   832 0000158F 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   833 00001592 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   834 00001596 31C9                <1>     xor ecx, ecx    ;Read Sector 0
   835 00001598 B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   836 0000159D CD33                <1>     int 33h
   837 0000159F 0F82FCFDFFFF        <1>     jc .msdGenDiskError
   838                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   839 000015A5 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   840 000015A9 741B                <1>     je .mbbpb0
   841 000015AB 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   842 000015AF 7415                <1>     je .mbbpb0
   843 000015B1 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   844 000015B5 740F                <1>     je .mbbpb0
   845 000015B7 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   846 000015BB B007                <1>     mov al, 07h ;Unknown media error code
   847 000015BD 0F824BFEFFFF        <1>     jb .msdWriteErrorCode
   848                              <1> .mbbpb0:
   849 000015C3 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   850 000015C6 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   851 000015CB 488D3DD7010000      <1>     lea rdi, .msdBPBTbl
   852 000015D2 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   853 000015D6 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   854 000015D9 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   855 000015DD B90F000000          <1>     mov ecx, bpbEx_size/8
   856 000015E2 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   857 000015E5 E92AFEFFFF          <1>     jmp .msdDriverExit
   858                              <1> .msdIOCTLRead:       ;Function 3, returns done
   859 000015EA B005                <1>     mov al, 05h ;Bad request structure length
   860 000015EC 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   861 000015EF 0F8519FEFFFF        <1>     jne .msdWriteErrorCode
   862                              <1> 
   863 000015F5 E91AFEFFFF          <1>     jmp .msdDriverExit
   864                              <1> .msdRead:            ;Function 4
   865                              <1> ;Will read one sector at a time.
   866 000015FA B005                <1>     mov al, 05h ;Bad request structure length
   867 000015FC 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   868 000015FF 0F8509FEFFFF        <1>     jne .msdWriteErrorCode
   869                              <1> 
   870 00001605 4889DD              <1>     mov rbp, rbx
   871 00001608 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   872                              <1> .msdr0:
   873 0000160A B682                <1>     mov dh, 82h ;LBA Read Sectors
   874 0000160C E86A010000          <1>     call .msdBlkIOCommon
   875 00001611 0F827FFDFFFF        <1>     jc .msdIOError
   876 00001617 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   877 0000161F 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   878 00001627 FFC6                <1>     inc esi
   879 00001629 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   880 0000162C 75DC                <1>     jne .msdr0
   881 0000162E 4889EB              <1>     mov rbx, rbp
   882 00001631 E9DEFDFFFF          <1>     jmp .msdDriverExit
   883                              <1> .msdWrite:           ;Function 8
   884                              <1> ;Will write one sector at a time.
   885 00001636 B005                <1>     mov al, 05h ;Bad request structure length
   886 00001638 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   887 0000163B 0F85CDFDFFFF        <1>     jne .msdWriteErrorCode
   888                              <1> 
   889 00001641 4889DD              <1>     mov rbp, rbx
   890 00001644 31F6                <1>     xor esi, esi  ;Set counter to zero
   891                              <1> .msdw0:
   892 00001646 B683                <1>     mov dh, 83h ;LBA Write Sectors
   893 00001648 E82E010000          <1>     call .msdBlkIOCommon
   894 0000164D 0F8243FDFFFF        <1>     jc .msdIOError
   895 00001653 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   896 0000165B 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   897 00001663 FFC6                <1>     inc esi
   898 00001665 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   899 00001668 75DC                <1>     jne .msdw0
   900 0000166A 4889EB              <1>     mov rbx, rbp
   901 0000166D E9A2FDFFFF          <1>     jmp .msdDriverExit
   902                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   903                              <1> ;Will write one sector at a time and then verify it.
   904 00001672 B005                <1>     mov al, 05h ;Bad request structure length
   905 00001674 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   906 00001677 0F8591FDFFFF        <1>     jne .msdWriteErrorCode
   907                              <1> 
   908 0000167D 4889DD              <1>     mov rbp, rbx
   909 00001680 31F6                <1>     xor esi, esi  ;Set counter to zero
   910                              <1> .msdwv0:
   911 00001682 B683                <1>     mov dh, 83h ;LBA Write Sectors
   912 00001684 E8F2000000          <1>     call .msdBlkIOCommon
   913 00001689 0F8207FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   914 0000168F B684                <1>     mov dh, 84h ;LBA Verify Sectors
   915 00001691 E8E5000000          <1>     call .msdBlkIOCommon
   916 00001696 0F82FAFCFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   917 0000169C 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   918 000016A4 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   919 000016AC FFC6                <1>     inc esi
   920 000016AE 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   921 000016B1 75CF                <1>     jne .msdwv0
   922 000016B3 4889EB              <1>     mov rbx, rbp
   923 000016B6 E959FDFFFF          <1>     jmp .msdDriverExit
   924                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   925 000016BB B005                <1>     mov al, 05h ;Bad request structure length
   926 000016BD 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   927 000016C0 0F8548FDFFFF        <1>     jne .msdWriteErrorCode
   928                              <1> 
   929 000016C6 E949FDFFFF          <1>     jmp .msdDriverExit
   930                              <1> .msdDevOpen:         ;Function 13
   931 000016CB B005                <1>     mov al, 05h ;Bad request structure length
   932 000016CD 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   933 000016D0 0F8538FDFFFF        <1>     jne .msdWriteErrorCode
   934                              <1> 
   935 000016D6 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   936 000016DB 488D0DC2000000      <1>     lea rcx, .msdHdlCnt
   937 000016E2 FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   938 000016E5 E92AFDFFFF          <1>     jmp .msdDriverExit
   939                              <1> .msdDevClose:        ;Function 14
   940 000016EA B005                <1>     mov al, 05h ;Bad request structure length
   941 000016EC 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   942 000016EF 0F8519FDFFFF        <1>     jne .msdWriteErrorCode
   943                              <1> 
   944 000016F5 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   945 000016FA 488D0DA3000000      <1>     lea rcx, .msdHdlCnt
   946 00001701 FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   947 00001704 E90BFDFFFF          <1>     jmp .msdDriverExit
   948                              <1> .msdRemovableMedia:  ;Function 15
   949 00001709 B005                <1>     mov al, 05h ;Bad request structure length
   950 0000170B 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   951 0000170E 0F85FAFCFFFF        <1>     jne .msdWriteErrorCode
   952                              <1> 
   953 00001714 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   954 00001719 488D0D7F000000      <1>     lea rcx, .msdBIOSmap
   955 00001720 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   956 00001723 A880                <1>     test al, 80h
   957 00001725 0F84E9FCFFFF        <1>     jz .msdDriverExit   ;If removable, busy bit is clear
   958 0000172B 66C743030002        <1>     mov word [rbx + remMediaReqPkt.status], 0200h ;Set Busy bit
   959 00001731 E9DEFCFFFF          <1>     jmp .msdDriverExit
   960                              <1> .msdGenericIOCTL:    ;Function 19
   961 00001736 B005                <1>     mov al, 05h ;Bad request structure length
   962 00001738 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   963 0000173B 0F85CDFCFFFF        <1>     jne .msdWriteErrorCode
   964                              <1> 
   965 00001741 E9CEFCFFFF          <1>     jmp .msdDriverExit
   966                              <1> .msdGetLogicalDev:   ;Function 23
   967 00001746 B005                <1>     mov al, 05h ;Bad request structure length
   968 00001748 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   969 0000174B 0F85BDFCFFFF        <1>     jne .msdWriteErrorCode
   970                              <1> 
   971 00001751 8A0547000000        <1>     mov al, byte [.msdCurDev]
   972 00001757 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   973 0000175A E9B5FCFFFF          <1>     jmp .msdDriverExit
   974                              <1> .msdSetLogicalDev:   ;Function 24
   975 0000175F B005                <1>     mov al, 05h ;Bad request structure length
   976 00001761 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   977 00001764 0F85A4FCFFFF        <1>     jne .msdWriteErrorCode
   978                              <1> 
   979 0000176A 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   980 0000176D 88052B000000        <1>     mov byte [.msdCurDev], al
   981 00001773 E99CFCFFFF          <1>     jmp .msdDriverExit
   982                              <1> 
   983                              <1> .msdBlkIOCommon:  ;Does block IO
   984                              <1> ;Called with rbp containing old rbx value and ah with function number
   985                              <1> ;Error handled by caller
   986                              <1> ;Sector count handled by caller
   987                              <1> ;Called with dh = BIOS function number
   988 00001778 480FB64501          <1>     movzx rax, byte [rbp + ioReqPkt.unitnm]
   989 0000177D 8A90[9F170000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   990 00001783 488B4D1A            <1>     mov rcx, qword [rbp + ioReqPkt.strtsc]  ;Get start sector
   991 00001787 488B5D0E            <1>     mov rbx, qword [rbp + ioReqPkt.bufptr]  ;Get Memory Buffer
   992 0000178B 88F4                <1>     mov ah, dh
   993 0000178D B001                <1>     mov al, 01h ;Do one sector at a time 
   994 0000178F CD33                <1>     int 33h
   995 00001791 C3                  <1>     ret
   996                              <1> 
   997 00001792 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   998                              <1> ;LASTDRIVE default is 5
   999 0000179B 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
  1000                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
  1001 0000179C FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
  1002 000017A1 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
  1003 000017A6 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
  1003 000017AF 000000000000000000- <1>
  1003 000017B8 000000000000000000- <1>
  1003 000017C1 000000000000000000- <1>
  1003 000017CA 00000000            <1>
  1004 000017CE 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
  1004 000017D7 000000000000000000- <1>
  1004 000017E0 000000000000000000- <1>
  1004 000017E9 000000000000000000- <1>
  1004 000017F2 000000000000000000- <1>
  1004 000017FB 000000000000000000- <1>
  1004 00001804 000000000000000000- <1>
  1004 0000180D 000000000000000000- <1>
  1004 00001816 000000000000000000- <1>
  1004 0000181F 000000000000000000- <1>
  1004 00001828 000000000000000000- <1>
  1004 00001831 000000000000000000- <1>
  1004 0000183A 000000000000000000- <1>
  1004 00001843 000000000000000000- <1>
  1004 0000184C 000000000000000000- <1>
  1004 00001855 000000000000000000- <1>
  1004 0000185E 000000000000000000- <1>
  1004 00001867 000000000000000000- <1>
  1004 00001870 000000000000000000- <1>
  1004 00001879 000000000000000000- <1>
  1004 00001882 000000000000000000- <1>
  1004 0000188B 000000000000000000- <1>
  1004 00001894 000000000000000000- <1>
  1004 0000189D 000000000000000000- <1>
  1004 000018A6 000000000000000000- <1>
  1004 000018AF 000000000000000000- <1>
  1004 000018B8 000000000000000000- <1>
  1004 000018C1 000000000000000000- <1>
  1004 000018CA 000000000000000000- <1>
  1004 000018D3 000000000000000000- <1>
  1004 000018DC 000000000000000000- <1>
  1004 000018E5 000000000000000000- <1>
  1004 000018EE 000000000000000000- <1>
  1004 000018F7 000000000000000000- <1>
  1004 00001900 000000000000000000- <1>
  1004 00001909 000000000000000000- <1>
  1004 00001912 000000000000000000- <1>
  1004 0000191B 000000000000000000- <1>
  1004 00001924 000000000000000000- <1>
  1004 0000192D 000000000000000000- <1>
  1004 00001936 000000000000000000- <1>
  1004 0000193F 000000000000000000- <1>
  1004 00001948 000000000000000000- <1>
  1004 00001951 000000000000000000- <1>
  1004 0000195A 000000000000000000- <1>
  1004 00001963 000000000000000000- <1>
  1004 0000196C 000000000000000000- <1>
  1004 00001975 000000000000000000- <1>
  1004 0000197E 000000000000000000- <1>
  1004 00001987 000000000000000000- <1>
  1004 00001990 000000000000000000- <1>
  1004 00001999 000000000000000000- <1>
  1004 000019A2 000000000000000000- <1>
  1004 000019AB 000000000000000000- <1>
  1004 000019B4 000000000000000000- <1>
  1004 000019BD 000000000000000000- <1>
  1004 000019C6 000000000000000000- <1>
  1004 000019CF 000000000000000000- <1>
  1004 000019D8 000000000000000000- <1>
  1004 000019E1 000000000000000000- <1>
  1004 000019EA 000000000000000000- <1>
  1004 000019F3 000000000000000000- <1>
  1004 000019FC 000000000000000000- <1>
  1004 00001A05 000000000000000000- <1>
  1004 00001A0E 000000000000000000- <1>
  1004 00001A17 000000000000000000- <1>
  1004 00001A20 000000000000        <1>
  1005                              <1> 
  1006                              <1> endptr equ $
    18                                  Segment dynamicDataArea nobits valign=1 vfollows=resSeg
    19                                  %include "dosDynaDataArea.asm"
    20                              <1> ;Create DPB chain of first 5 available DPB slots
    21 00000000 <res 36h>           <1> firstDPB        resb dpb_size
    22 00000036 <res 36h>           <1> secondDPB       resb dpb_size
    23 0000006C <res 36h>           <1> thirdDPB        resb dpb_size
    24 000000A2 <res 36h>           <1> fourthDPB       resb dpb_size
    25 000000D8 <res 36h>           <1> fifthDPB        resb dpb_size 
    26                              <1> 
    27                              <1> ;Create SFT header and corresponding array of five default sft entries
    28 0000010E <res Ah>            <1> firstSftHeader  resb sfth_size
    29 00000118 <res 3Dh>           <1> firstSft        resb sft_size
    30 00000155 <res 3Dh>           <1> secondSft       resb sft_size
    31 00000192 <res 3Dh>           <1> thirdSft        resb sft_size
    32 000001CF <res 3Dh>           <1> fourthSft       resb sft_size
    33 0000020C <res 3Dh>           <1> fifthSft        resb sft_size
    34                              <1> 
    35                              <1> ;Create a five drive CDS here so we can jettison it if config wants more
    36 00000249 <res 1C7h>          <1> initCDS         resb 5*cds_size 
    37                              <1> ;Always jettison this space
    38                              <1> DOSENDPTR:   ;Points to the end of the initially reserved DOS area
    39 00000410 <res 21h>           <1> tmpBufHdr       resb bufferHdr_size
    40 00000431 <res 200h>          <1> msdTempBuffer   resb 512    ;Reserve one sectors worth of space
    41                              <1> dynamicDataAreaLength equ $
