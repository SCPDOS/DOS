     1                                  [map all scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  %include "driverStruc.inc"
     5                              <1> 
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     8                              <1> ; device driver related structures.                     ;
     9                              <1> ;-------------------------------------------------------;
    10                              <1> 
    11                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    12                              <1> 
    13 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    14 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    15 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    16 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    17 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    18                              <1> 
    19                              <1> endstruc
    20                              <1> 
    21                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    22                              <1> 
    23                              <1>     .hdrlen resb 1  ;Length of the request header
    24                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    25                              <1>     .cmdcde resb 1  ;Command code
    26                              <1>     .status resw 1  ;Status word
    27                              <1>     .devptr resq 1  ;Device queue pointer field
    28                              <1> 
    29                              <1> %endmacro
    30                              <1> 
    31                              <1> struc drvReqHdr
    32                              <1>     drvReqHdrM
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    33                              <1> endstruc
    34                              <1> 
    35                              <1> struc initReqPkt  ;Init Request Packet
    36                              <1> 
    37                              <1>     drvReqHdrM   ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    38 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
    39 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
    40 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
    41 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
    42                              <1> 
    43                              <1> endstruc
    44                              <1> 
    45                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
    46                              <1> 
    47                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    48 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    49 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
    50 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
    51                              <1> 
    52                              <1> endstruc
    53                              <1> 
    54                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
    55                              <1> 
    56                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    57 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    58 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    59 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
    60                              <1> 
    61                              <1> endstruc
    62                              <1> 
    63                              <1> struc ioReqPkt   ;IO Request Packet
    64                              <1> 
    65                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    66 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    67 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    68 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
    69 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
    70 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
    71                              <1> 
    72                              <1> endstruc
    73                              <1> 
    74                              <1> struc nonDestInNoWaitReqPkt    ;Nondestructive Input No Wait Request Packet
    75                              <1>     
    76                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    77 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
    78                              <1> 
    79                              <1> endstruc
    80                              <1> 
    81                              <1> struc statusReqPkt   ;Status Request Packet
    82                              <1> 
    83                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    84                              <1> 
    85                              <1> endstruc
    86                              <1> 
    87                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
    88                              <1> 
    89                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    90                              <1>      
    91                              <1> endstruc
    92                              <1> 
    93                              <1> struc openReqPkt ;Open Device Request Packet
    94                              <1> 
    95                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    96                              <1>      
    97                              <1> endstruc
    98                              <1> 
    99                              <1> struc closeReqPkt ;Close Device Request Packet
   100                              <1> 
   101                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   102                              <1>      
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   106                              <1> 
   107                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   108                              <1>      
   109                              <1> endstruc
   110                              <1> 
   111                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   112                              <1> 
   113                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   114 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   115 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   116 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   117 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   118 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   119                              <1> 
   120                              <1> endstruc
   121                              <1> 
   122                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   123                              <1>     
   124                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   125                              <1> 
   126                              <1> endstruc
   127                              <1> 
   128                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   129                              <1>     
   130                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   131                              <1> 
   132                              <1> endstruc
     5                                  %include "fatStruc.inc"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ; This include file contains miscellaneous FAT driver   ;
     9                              <1> ; structures. exFAT will have it's own files at a later ;
    10                              <1> ; stage.                                                ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    14                              <1> 
    15 00000000 ??????              <1>     .jmpBoot    resb 3 
    16 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    17 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    18 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    19 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    20 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    21 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    22 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    23 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    24 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    25 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    26 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    27 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    28 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    29                              <1> 
    30 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    31 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    32 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    33 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    34 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    35 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    40                              <1> 
    41 00000000 ??????              <1>     .jmpBoot    resb 3
    42 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    43 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    44 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    45 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    46 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    47 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    48 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    49 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    50 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    51 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    52 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    53 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    54 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    55                              <1> 
    56 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    57 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    58 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    59 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    60 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    61 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    62 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    63                              <1> 
    64 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    65 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    66 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    67 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    68 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    69 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    70                              <1> 
    71                              <1> endstruc
    72                              <1> 
    73                              <1> struc fatDirEntry
    74                              <1> 
    75 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
    76 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
    77 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
    78 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
    79 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
    80 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
    81 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
    82 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
    83 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
    84 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
    85 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
    86 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
    87                              <1> 
    88                              <1> endstruc
    89                              <1> ;Directory attribute equates
    90                              <1>     dirReadOnly     equ 01h
    91                              <1>     dirHidden       equ 02h
    92                              <1>     dirSystem       equ 04h
    93                              <1>     dirVolumeID     equ 08h
    94                              <1>     dirDirectory    equ 10h
    95                              <1>     dirArchive      equ 20h
    96                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    97                              <1> 
    98                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
    99                              <1> 
   100 00000000 ??????              <1>     .jmpBoot                resb 3 
   101 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   102 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   103 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   104 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   105 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   106 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   107 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   108 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   109 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   110 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   111 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   112 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   113 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   114 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   115 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   116 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   117 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   118 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   119                              <1> 
   120                              <1> endstruc
   121                              <1> 
   122                              <1> struc FSInfo
   123                              <1> 
   124 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   125 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   126 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   127 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   128 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   129 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   130 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   131                              <1> 
   132                              <1> endstruc
     6                                  %include "dosStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous internal     ;
    10                              <1> ; SCP/DOS structures.                                   ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> ;------------------------------------------------------------------------;
    14                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    15                              <1> ; its file system structure. This is used to locate files and structures
    16                              <1> ; on the device itself and to translate file requests to cluster chains
    17                              <1> ; to LBAs to pass to the disk driver..
    18                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    19                              <1> ; drivers Initialise routine has been called.
    20                              <1> ;------------------------------------------------------------------------;
    21                              <1> struc dpb        ;Drive Parameter Block
    22                              <1> 
    23 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...)
    24 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device
    25 00000002 ??                  <1>     .bBytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
    26 00000003 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1
    27                              <1> ;                                       i.e. (2^bSectorsPerClusterShift) - 1
    28 00000004 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent
    29 00000005 ????????            <1>     .dFAToffset              resd 1  ;Vol rel offset of first FAT, in sectors
    30 00000009 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs
    31 0000000A ????                <1>     .wNumberRootDirEntries   resw 1  ;In sectors
    32 0000000C ????????            <1>     .dClusterHeapOffset      resd 1  ;Start of data area, in sectors
    33 00000010 ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters (volume size)
    34 00000014 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors
    35 00000018 ????????            <1>     .dFirstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
    36 0000001C ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header
    37 00000024 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor
    38 00000025 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1)
    39 00000026 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    40 0000002E ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search
    41 00000032 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown
    42                              <1> 
    43                              <1> endstruc
    44                              <1> 
    45                              <1> ;------------------------------------------------------------------------;
    46                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    47                              <1> ; All disk pathing requests go via the CDS for that drive.
    48                              <1> ; The default drive is the last accessed drive, this number is stored
    49                              <1> ; in the DOS data area.
    50                              <1> ; The CDS is stored as an array with the offset into the array being 
    51                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    52                              <1> ;
    53                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    54                              <1> ;------------------------------------------------------------------------;
    55                              <1> struc cds       ;Current Directory structure
    56 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    57 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    58 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    59 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    60 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    61 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    62                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    63                              <1> ; another, we save the number of chars to skip to that deep level).
    64                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    65                              <1> ; Flags: Bit 15 set = Network drive
    66                              <1> ;        Bit 14 set = Physical drive
    67                              <1> ;        Bit 13 set = JOIN'ed drive
    68                              <1> ;        Bit 12 set = SUBST'ed drive
    69                              <1> ;        Bit 7  set = Redirected, not network, drive (This is how MSCDEX worked)
    70                              <1> endstruc
    71                              <1> ;CDS equates
    72                              <1>     cdsNetDrive     equ 8000h
    73                              <1>     cdsPhysDrive    equ 4000h
    74                              <1>     cdsJoinDrive    equ 2000h
    75                              <1>     cdsSubstDrive   equ 1000h
    76                              <1>     cdsRedirDrive   equ 0080h
    77                              <1> ;------------------------------------------------------------------------;
    78                              <1> ; The SFT is a way to allow applications to open file handles to files 
    79                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    80                              <1> ; under the first header, and then a second header will be linked to the 
    81                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    82                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    83                              <1> ; using the FCBS= command. Default FCBS=5.
    84                              <1> ;
    85                              <1> ; A file handle describes the file, and the location within the file that
    86                              <1> ; we are reading. The file handle can be manipulated without the file
    87                              <1> ; being in memory, thus allowing the user to access data without needing 
    88                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    89                              <1> ; accessing devices, by treating them as files with their drivers 
    90                              <1> ; responding and translating the manipulations of the file handle itself.
    91                              <1> ; Neither the driver nor the application should see or use the SFT for
    92                              <1> ; the handle, as it is subject to change (and will change when file 
    93                              <1> ; sharing provisions are included). The DOS will make requests to the 
    94                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    95                              <1> ; track of the information in the SFT entry for that handle. 
    96                              <1> ;
    97                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    98                              <1> ; can point to the same file. It all depends on what the applications 
    99                              <1> ; want to do with the File.
   100                              <1> ;
   101                              <1> ; !!!!IMPORTANT!!!!
   102                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   103                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   104                              <1> ;
   105                              <1> ;Each SFT may look like this:
   106                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   107                              <1> ;            |                |
   108                              <1> ;       wNumFiles*sft    wNumFiles*sft
   109                              <1> ;
   110                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   111                              <1> ; System FCBs.
   112                              <1> ;
   113                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   114                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   115                              <1> ;
   116                              <1> ; DEFAULT FILES=15, MINIMUM FILES=5
   117                              <1> ; DEFAULT FCBS=5, MINIMUM FCBS=5
   118                              <1> ;------------------------------------------------------------------------;
   119                              <1> struc sfth   ;System file table header
   120                              <1> ; This is the SFT header.
   121                              <1> ; This structure comes before the start of the first file in the array/table.
   122 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   123 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc sft
   127                              <1> ;This is the file struc itself
   128 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   129 00000002 ????                <1>     .wOpenMode   resw 1    ;Bit 15 set if opened via FCB
   130 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   131 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   132 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   133 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file
   134 00000013 ????                <1>     .wTime       resw 1    ;File Time
   135 00000015 ????                <1>     .wDate       resw 1    ;File Date
   136 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   137 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset in file, in bytes
   138 0000001F ????                <1>     .wRelClust   resw 1    ;Relative cluster in file of the last cluster accessed
   139 00000021 ????????            <1>     .dDirSect    resd 1    ;Relative number of sector containing directory entry 
   140 00000025 ??                  <1>     .bNumDirEnt  resb 1    ;Number of dir entry within sector (byte offset/32)
   141 00000026 <res Bh>            <1>     .sFCBName    resb 11   ;8.3 Filename
   142 00000031 ????????????????    <1>     .qPSPOwner   resq 1    ;Address of PSP of program which first opened this file
   143 00000039 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster of last cluster accessed
   144                              <1> endstruc
   145                              <1> 
   146                              <1> ;------------------------------------------------------------------------;
   147                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   148                              <1> ; to an internal buffer, and then copying it to the specified location
   149                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   150                              <1> ; another request for the same sector from the same device is made, so 
   151                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   152                              <1> ; size, selected according to the largest detected sector size during 
   153                              <1> ; the initial loadup.
   154                              <1> ;
   155                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   156                              <1> ;
   157                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   158                              <1> ;------------------------------------------------------------------------;
   159                              <1> 
   160                              <1> struc bufferHdr
   161 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   162 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for
   163 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   164 0000000A ????????            <1>     .bufferLBA   resd  1   ;LBA the buffer contains
   165 0000000E ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   166 0000000F ??                  <1>     .bufFAToff   resb  1   ;Sector offset of the backup copy of the FAT on disk
   167 00000010 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   168                              <1> endstruc
     7                                  
     8                                  Segment dSeg nobits align=1 
     9 00000000 ????????????????            dosSegPtr   resq 1    ;Pointer to the data Segment itself
    10 00000008 ??                          bootDrive   resb 1    ;The Int 33h device we booted from
    11 00000009 <res 2Ah>                   requestHdr  resb ioReqPkt_size   
    12                                      ;The device driver header with space for the largest possible packet
    13 00000033 ????????????????            sysVarsPtr  resq 1    ;Pointer to dpbHeadPtr, head of Sys Vars struc below
    14 0000003B ????????????????            mcbChainPtr resq 1    ;Pointer to the MCB chain
    15 00000043 ????????????????            dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain
    16 0000004B ????????????????            sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    17 00000053 ????????????????            clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header
    18                                      ;                    The last driver loaded with the CLOCK$ bit[3] set 
    19 0000005B ????????????????            conPtr      resq 1    ;Pointer to the current active CON device header 
    20                                      ;                    The last driver loaded with the STDIN bit[0] set
    21 00000063 ????                        maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)
    22 00000065 ????????????????            bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain
    23 0000006D ????????????????            cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array
    24 00000075 ????????????????            sfcbHeadPTr resq 1    ;Pointer to the head of the System FCB chain
    25 0000007D ????                        numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    26 0000007F ??                          numMSDdrv   resb 1    ;Number of mass storage devices detected in system
    27 00000080 ??                          lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]
    28 00000081 ??                          numJoinDrv  resb 1    ;Number of Joined Drives
    29 00000082 <res 22h>                   nulDevHdr   resb drvHdr_size
    30                                  
    31                                  ;Swappable, process related data here
    32 000000A4 ??                          inDOS       resb 1    ;Inc on each DOS call, dec when leaving
    33 000000A5 ??                          breakFlag   resb 1    ;If set, check for CTRL+C on all DOS calls
    34 000000A6 ??                          defaultDrv  resb 1    ;Default, last accessed drive
    35 000000A7 ????????????????            currentPSP  resq 1    ;Address of current PSP
    36 000000AF ????????????????            oldRSP      resq 1    ;RSP value before stack switch
    37                                  
    38 000000B7 <res 148h>                  critStack   resq 41
    39 000001FF ????????????????            critStakTop resq 1
    40 00000207 <res 638h>                  IOStack     resq 199
    41 0000083F ????????????????            IOStakTop   resq 1
    42 00000847 <res 638h>                  DiskStack   resq 199
    43 00000E7F ????????????????            DiskStakTop resq 1
    44                                      dSegLen     equ     $
    45                                  
    46                                  Segment .text align=1
    47                                  ; We arrive here with the following values in the registers.
    48                                  ; rbx =  LBA of first Logical Block after SCP/BIOS
    49                                  ; dx  = Int 33h boot device number
    50                                  ; fs  = userbase pointer (pointer to first usable block of RAM)
    51 00000000 55AA                        dw 0AA55h           ;Initial signature
    52 00000002 64881425[08000000]          mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    53                                  
    54 0000000A B9000100C0                  mov ecx, 0C0000100h ;Read FS MSR
    55 0000000F 0F32                        rdmsr
    56 00000011 89D7                        mov edi, edx        ;Get the hi dword, and clear the upper bytes
    57 00000013 48C1E720                    shl rdi, 20h        ;Shift high
    58 00000017 89C7                        mov edi, eax        ;Get the low dword in
    59                                  
    60 00000019 6448893C25-                 mov qword fs:[dosSegPtr], rdi 
    60 0000001E [00000000]         
    61 00000022 4889FD                      mov rbp, rdi    ;Save the start of dosSeg in rdx 
    62 00000025 4881C7[870E0000]            add rdi, dSegLen ;Move destination past end of data area
    63 0000002C 488D35(00000000)            lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    64 00000033 B900100000                  mov ecx, 1000h
    65 00000038 F348A5                      rep movsq
    66                                  
    67                                  ;Modify the pointers in nData before putting them in the data area
    68 0000003B 48012DC6000000              add qword [nData + drvHdr.nxtPtr], rbp
    69 00000042 48012DC9000000              add qword [nData + drvHdr.strPtr], rbp
    70 00000049 48012DCA000000              add qword [nData + drvHdr.intPtr], rbp
    71                                  ;Copy the Null driver to its location in Sysvars
    72 00000050 B922000000                  mov ecx, drvHdr_size
    73 00000055 488D35AC000000              lea rsi, qword [nData]
    74 0000005C 488DBD[82000000]            lea rdi, qword [rbp + nulDevHdr]
    75 00000063 F3A4                        rep movsb   
    76                                  
    77                                  ;Adjust the addresses in the other driver headers 
    78 00000065 48BE-                       mov rsi, conHdr ;Point to the first non-NUL dev in chain
    78 00000067 [E302000000000000] 
    79 0000006F B90C000000                  mov ecx, 12      ;12 drivers in data area
    80 00000074 488D342E                    lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
    81                                  adjDrivers:
    82 00000078 E862000000                  call adjustDrvHdr
    83 0000007D E2F9                        loop adjDrivers
    84                                  
    85 0000007F 6687DB                      xchg bx, bx
    86                                      ;Open NUL
    87 00000082 488D9D[8C000000]            lea rbx, qword [rbp + nulDevHdr + drvHdr.strPtr]    ;Get ptr to strat ptr
    88 00000089 488B1B                      mov rbx, qword [rbx]    ;Get strat ptr
    89 0000008C 30C0                        xor al, al
    90 0000008E FFD3                        call rbx
    91                                  
    92                                      ;Open CON
    93 00000090 48BB-                       mov rbx, conDriver
    93 00000092 [9204000000000000] 
    94 0000009A 488D5C1D00                  lea rbx, qword [rbp+rbx]
    95 0000009F 30C0                        xor al, al
    96 000000A1 FFD3                        call rbx
    97                                  
    98                                      ;Open Mass Storage
    99 000000A3 48BB-                       mov rbx, msdDriver
    99 000000A5 [F805000000000000] 
   100 000000AD 488D5C1D00                  lea rbx, qword [rbp+rbx]
   101 000000B2 30C0                        xor al, al
   102 000000B4 FFD3                        call rbx
   103                                  
   104 000000B6 488D2D35000000              lea rbp, qword [startmsg]   ;Get the absolute address of message
   105 000000BD B804130000                  mov eax, 1304h
   106 000000C2 CD30                        int 30h
   107                                  
   108 000000C4 64488B3425-                 mov rsi, fs:[nulDevHdr]
   108 000000C9 [82000000]         
   109 000000CD B801C50000                  mov eax, 0C501h ;Connect debugger
   110 000000D2 CD35                        int 35h
   111                                  l1:
   112 000000D4 6631C0                      xor ax, ax
   113 000000D7 CD36                        int 36h
   114 000000D9 B40E                        mov ah, 0Eh
   115 000000DB CD30                        int 30h
   116 000000DD EBF5                        jmp short l1
   117                                  adjustDrvHdr:
   118                                  ;Input: rsi = Effective address of driver in DOS segment
   119                                  ;       rbp = Ptr to the start of the DOS segment
   120                                  ;Output: rsi = EA of next header in DOS segment
   121 000000DF 48012E                      add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   122 000000E2 48016E0A                    add qword [rsi + drvHdr.strPtr], rbp
   123 000000E6 48016E12                    add qword [rsi + drvHdr.intPtr], rbp
   124 000000EA 4881C622000000              add rsi, drvHdr_size
   125 000000F1 C3                          ret
   126                                  
   127 000000F2 5374617274696E6720-     startmsg db "Starting SCP/DOS...",0Ah,0Dh,0
   127 000000FB 5343502F444F532E2E-
   127 00000104 2E0A0D00           
   128                                  nData:
   129 00000108 [E302000000000000]          dq conHdr
   130 00000110 0480                        dw 08004h
   131 00000112 [8B04000000000000]          dq nulStrat
   132 0000011A [9104000000000000]          dq nulIntr
   133 00000122 4E554C2020202020            db "NUL     " ;Default NUL data
   134                                  
   135                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 
   136                                  ;-----------------------------------:
   137                                  ;       Misc System routines        :
   138                                  ;-----------------------------------:
   139                                  findLRUBuffer: 
   140                                  ;Finds least recently used buffer, links it and returns ptr to it in rbx
   141                                  ;Input: Nothing
   142                                  ;Output: rbx = Pointer to the buffer to use
   143 00000000 52                          push rdx
   144 00000001 488B1D(65000000)            mov rbx, qword [bufHeadPtr]
   145 00000008 48813BFFFFFFFF              cmp qword [rbx + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   146 0000000F 7502                        jne .flb1
   147 00000011 5A                          pop rdx
   148 00000012 C3                          ret
   149                                  .flb1:
   150 00000013 4889DA                      mov rdx, rbx    ;Save a ptr to the previous buffer header
   151 00000016 488B1A                      mov rbx, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   152 00000019 48813BFFFFFFFF              cmp qword [rbx + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   153 00000020 75F1                        jne .flb1   ;If not LRU, keep walking, else process
   154 00000022 48C702FFFFFFFF              mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   155 00000029 488B15(65000000)            mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   156 00000030 48891D(65000000)            mov qword [bufHeadPtr], rbx    ;Sysvars to point to new buffer
   157 00000037 488913                      mov qword [rbx + bufferHdr.nextBufPtr], rdx
   158 0000003A 5A                          pop rdx
   159 0000003B C3                          ret
   160                                  
   161                                  findDPB:
   162                                  ;Finds the DPB for a given drive
   163                                  ;Input:   dl = Drive number (0=A, 1=B etc...)
   164                                  ;Output: al = 00, rbx = Pointer to the DPB
   165                                  ;        al = -1, Failed, no DPB for device, rbx destroyed
   166 0000003C 488B1D(43000000)            mov rbx, qword [dpbHeadPtr]
   167                                  .fd1:
   168 00000043 30C0                        xor al, al
   169 00000045 3813                        cmp byte [rbx + dpb.bDriveNumber], dl
   170 00000047 740F                        je .fd2
   171 00000049 488B5B26                    mov rbx, qword [rbx + dpb.qNextDPBPtr]
   172 0000004D B0FF                        mov al, -1
   173 0000004F 4881FBFFFFFFFF              cmp rbx, -1 ;If rbx followed last item in list, no DPB exists for dl
   174 00000056 75EB                        jne .fd1
   175                                  .fd2:
   176 00000058 C3                          ret
   177                                  ;-----------------------------------:
   178                                  ;       File System routines        :
   179                                  ;-----------------------------------:
   180                                  fatProc:
   181                                  ;-----------------------------------:
   182                                  ;        Interrupt routines         :
   183                                  ;-----------------------------------:
   184                                  terminateProcess:   ;Int 40h
   185                                  functionDispatch:   ;Int 41h Main function dispatcher
   186                                  terminateHandler:   ;Int 42h
   187                                  ctrlCHandler:       ;Int 43h
   188                                  critErrorHandler:   ;Int 44h
   189                                  ;User Stack in usage here, must be swapped to before this is called
   190                                  ;Entered with:  
   191                                  ;               AH = Critical Error Bitfield
   192                                  ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
   193                                  ;               Bit 6 - Reserved
   194                                  ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
   195                                  ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
   196                                  ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
   197                                  ;               Bits [2-1] = Affected Disk Error
   198                                  ;                     0 0   DOS area
   199                                  ;                     0 1   FAT area
   200                                  ;                     1 0   Directory area
   201                                  ;                     1 1   Data area
   202                                  ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   203                                  ;               AL  = Failing drive number if AH[7] = 0
   204                                  ;               DIL = Error code for errorMsg
   205                                  ;               RSI = EA of Device Header for which device the error occured
   206                                  ;Return:
   207                                  ;               AL = 0 - Ignore the Error       (Ignore)
   208                                  ;                  = 1 - Retry the Operation    (Retry)
   209                                  ;                  = 2 - Terminate the Program  (Abort)
   210                                  ;                  = 3 - Fail the DOS call      (Fail)
   211 00000059 53                          push rbx
   212 0000005A 51                          push rcx
   213 0000005B 52                          push rdx
   214 0000005C 57                          push rdi
   215 0000005D 56                          push rsi
   216 0000005E FC                          cld         ;Make String ops go forward
   217                                  
   218 0000005F 6689C3                      mov bx, ax  ;Save ah in bh and al in bl (if needed)
   219 00000062 488D1521020000              lea rdx, qword [.crlf]
   220 00000069 B409                        mov ah, 09h ;Print String
   221 0000006B CD41                        int 41h     ;Call DOS to print CRLF part of message
   222                                  
   223 0000006D 6681E7FF00                  and di, 00FFh   ;Zero the upper byte of DI just in case
   224 00000072 480FB7FF                    movzx rdi, di
   225 00000076 4889FA                      mov rdx, rdi    ;Copy error code
   226 00000079 48C1E704                    shl rdi, 4  ;Multiply by 16
   227 0000007D 48D1E2                      shl rdx, 1  ;Multiply by 2
   228 00000080 4801D7                      add rdi, rdx    ;Add the resultant multiplications
   229 00000083 488D97[7B010000]            lea rdx, qword [.errorMsgTable + rdi]   ;Load EA to rdx
   230 0000008A B409                        mov ah, 09h ;Print String
   231 0000008C CD41                        int 41h     ;Call DOS to print first part of message
   232                                  
   233 0000008E 488D15D7010000              lea rdx, qword [.readmsg]
   234 00000095 488D3DDF010000              lea rdi, qword [.writemsg]
   235 0000009C F6C701                      test bh, 1  ;Bit 0 is set if write operation
   236 0000009F 480F45D7                    cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
   237 000000A3 B409                        mov ah, 09h ;Print String
   238 000000A5 CD41                        int 41h     ;Call DOS to print error reading/writing portion
   239                                  
   240 000000A7 F6C780                      test bh, 80h    ;Test bit 7 for char/Disk assertation
   241 000000AA 0F85B1000000                jnz .charError
   242                                  ;Disk error continues here
   243 000000B0 488D15AE010000              lea rdx, qword [.drive] ;Drive message
   244 000000B7 B409                        mov ah, 09h
   245 000000B9 CD41                        int 41h
   246 000000BB 88DA                        mov dl, bl  ;Get zero based drive number into dl
   247 000000BD 80C241                      add dl, "A" ;Add ASCII code
   248 000000C0 B402                        mov ah, 02h ;Print char in dl
   249 000000C2 CD41                        int 41h
   250                                  .userInput:
   251 000000C4 488D15BF010000              lea rdx, qword [.crlf]  ;Print new line
   252 000000CB B409                        mov ah, 09h
   253 000000CD CD41                        int 41h
   254                                  ;Abort, Retry, Ignore, Fail is word order
   255                                  ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   256                                  .userAbort:
   257                                  ;Abort is always an option
   258 000000CF 488D15B7010000              lea rdx, qword [.abortmsg]
   259 000000D6 B409                        mov ah, 09h
   260 000000D8 CD41                        int 41h ;Call DOS to prompt user for ABORT option
   261                                  .userRetry:
   262 000000DA F6C710                      test bh, 10h  ;Bit 4 is retry bit
   263 000000DD 7416                        jz .userIgnore    ;If clear, dont print message
   264 000000DF 488D15BF010000              lea rdx, qword [.betweenMsg]
   265 000000E6 B409                        mov ah, 09h
   266 000000E8 CD41                        int 41h
   267 000000EA 488D15A9010000              lea rdx, qword [.retrymsg]
   268 000000F1 B409                        mov ah, 09h
   269 000000F3 CD41                        int 41h
   270                                  .userIgnore:
   271 000000F5 F6C720                      test bh, 20h    ;Bit 5 is ignore bit
   272 000000F8 7416                        jz .userFail
   273 000000FA 488D15A4010000              lea rdx, qword [.betweenMsg]
   274 00000101 B409                        mov ah, 09h
   275 00000103 CD41                        int 41h
   276 00000105 488D1587010000              lea rdx, qword [.ignoremsg]
   277 0000010C B409                        mov ah, 09h
   278 0000010E CD41                        int 41h
   279                                  .userFail:
   280 00000110 F6C708                      test bh, 08h    ;Bit 3 is ignore bit
   281 00000113 7416                        jz .userMsgEnd
   282 00000115 488D1589010000              lea rdx, qword [.betweenMsg]
   283 0000011C B409                        mov ah, 09h
   284 0000011E CD41                        int 41h
   285 00000120 488D1579010000              lea rdx, qword [.failmsg]
   286 00000127 B409                        mov ah, 09h
   287 00000129 CD41                        int 41h
   288                                  .userMsgEnd:
   289 0000012B 488D1576010000              lea rdx, qword [.endMsg]
   290 00000132 B409                        mov ah, 09h
   291 00000134 CD41                        int 41h
   292                                  ;Get user input now 
   293                                  .userInputPhase:
   294 00000136 31C9                        xor ecx, ecx  ;4 Possible Responses
   295 00000138 488D3D6C010000              lea rdi, qword [.responses] ;Go to start of string
   296 0000013F B408                        mov ah, 08h ;STDIN without Console Echo
   297 00000141 CD41                        int 41h ;Get char in al
   298 00000143 3C61                        cmp al, "a" ;Chack if lowercase
   299 00000145 7202                        jb .uip1    ;If the value is below, ignore subtraction
   300 00000147 2C20                        sub al, "a"-"A"  ;Turn the char into uppercase
   301                                  .uip1:
   302 00000149 AE                          scasb   ;Compare char to list, offset gives return code
   303 0000014A 740C                        je .validInput  ;If they are equal, ecx has return code
   304 0000014C FFC1                        inc ecx
   305 0000014E 81F904000000                cmp ecx, 4
   306 00000154 75F3                        jne .uip1
   307 00000156 EBDE                        jmp short .userInputPhase ;If valid char not found, keep waiting 
   308                                  .validInput:
   309 00000158 88C8                        mov al, cl  ;Move the offset into .responses into al
   310                                  .cehExit:
   311 0000015A 5E                          pop rsi
   312 0000015B 5F                          pop rdi
   313 0000015C 5A                          pop rdx
   314 0000015D 59                          pop rcx
   315 0000015E 5B                          pop rbx
   316 0000015F 48CF                        iretq
   317                                  .charError:
   318 00000161 B908000000                  mov ecx, 8  ;8 chars in device name
   319 00000166 4881C61A000000              add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   320                                  .ce1:
   321 0000016D AC                          lodsb   ;Get a string char into al and inc rsi
   322 0000016E 88C2                        mov dl, al  ;Move char into dl
   323 00000170 B402                        mov ah, 02h
   324 00000172 CD41                        int 41h ;Print char
   325 00000174 E2F7                        loop .ce1   ;Keep looping until all 8 char device cahrs have been printed
   326 00000176 E949FFFFFF                  jmp .userInput
   327                                  
   328                                  .errorMsgTable: ;Each table entry is 18 chars long
   329 0000017B 57726974652050726F-                 db "Write Protect $   "       ;Error 0
   329 00000184 746563742024202020 
   330 0000018D 556E6B6E6F776E2055-                 db "Unknown Unit $    "       ;Error 1
   330 00000196 6E6974202420202020 
   331 0000019F 4E6F74205265616479-                 db "Not Ready $       "       ;Error 2
   331 000001A8 202420202020202020 
   332 000001B1 556E6B6E6F776E2043-                 db "Unknown Command $ "       ;Error 3
   332 000001BA 6F6D6D616E64202420 
   333 000001C3 44617461204572726F-                 db "Data Error $      "       ;Error 4
   333 000001CC 722024202020202020 
   334 000001D5 426164205265717565-                 db "Bad Request $     "       ;Error 5
   334 000001DE 737420242020202020 
   335 000001E7 5365656B2024202020-                 db "Seek $            "       ;Error 6
   335 000001F0 202020202020202020 
   336 000001F9 556E6B6E6F776E204D-                 db "Unknown Media $   "       ;Error 7
   336 00000202 656469612024202020 
   337 0000020B 536563746F72204E6F-                 db "Sector Not Found $"       ;Error 8
   337 00000214 7420466F756E642024 
   338 0000021D 4F7574204F66205061-                 db "Out Of Paper $    "       ;Error 9
   338 00000226 706572202420202020 
   339 0000022F 577269746520466175-                 db "Write Fault $     "       ;Error A
   339 00000238 6C7420242020202020 
   340 00000241 52656164204661756C-                 db "Read Fault $      "       ;Error B
   340 0000024A 742024202020202020 
   341 00000253 47656E6572616C2046-                 db "General Failure $ "       ;Error C
   341 0000025C 61696C757265202420 
   342                                  
   343 00000265 64726976652024          .drive      db "drive $"
   344 0000026C 6572726F7220726561-     .readmsg    db "error reading $"
   344 00000275 64696E672024       
   345 0000027B 6572726F7220777269-     .writemsg   db "error writing $"
   345 00000284 74696E672024       
   346 0000028A 0A0D24                  .crlf       db 0Ah, 0Dh, "$"
   347 0000028D 41626F727424            .abortmsg   db "Abort$" 
   348 00000293 49676E6F726524          .ignoremsg  db "Ignore$"
   349 0000029A 526574727924            .retrymsg   db "Retry$"
   350 000002A0 4661696C24              .failmsg    db "Fail$"
   351 000002A5 2C2024                  .betweenMsg db ", $"
   352 000002A8 3F2024                  .endMsg     db "? $"
   353 000002AB 49524146                .responses  db "IRAF"   ;Abort Retry Ignore Fail
   354                                  absDiskRead:        ;Int 45h
   355                                  ;al = Drive number
   356                                  ;rbx = Memory Buffer address
   357                                  ;ecx = Number of sectors to read (max 255 for now)
   358                                  ;rdx = Start LBA to read from
   359 000002AF 480FB6C0                    movzx rax, al   ;Zero extend DOS drive number 
   360 000002B3 8A80[6D080000]              mov al, byte [msdDriver.msdBIOSmap + rax] ;Get translated BIOS num into al
   361 000002B9 4891                        xchg rax, rcx
   362 000002BB 4887CA                      xchg rcx, rdx
   363 000002BE B482                        mov ah, 82h
   364 000002C0 CD33                        int 33h
   365 000002C2 48CF                        iretq
   366                                  absDiskWrite:       ;Int 46h
   367 000002C4 480FB6C0                    movzx rax, al   ;Zero extend DOS drive number 
   368 000002C8 8A80[6D080000]              mov al, byte [msdDriver.msdBIOSmap + rax] ;Get translated BIOS num into al
   369 000002CE 4891                        xchg rax, rcx
   370 000002D0 4887CA                      xchg rcx, rdx
   371 000002D3 B483                        mov ah, 83h
   372 000002D5 CD33                        int 33h
   373 000002D7 48CF                        iretq
   374                                  terminateResident:  ;Int 47h
   375                                  inDosHandler:       ;Int 48h
   376                                  ;Called when DOS idle
   377 000002D9 48CF                        iretq
   378                                  fastOutput:         ;Int 49h
   379                                  ;Called with char to transfer in al
   380 000002DB 50                          push rax
   381 000002DC B40E                        mov ah, 0Eh
   382 000002DE CD30                        int 30h
   383 000002E0 58                          pop rax
   384 000002E1 48CF                        iretq
   385                                  passCommand:        ;Int 4Eh
   386                                  multiplex:          ;Int 4Fh
   387                                  ;-----------------------------------:
   388                                  ;          Driver routines          :
   389                                  ;-----------------------------------:
   390                                  drivers:
   391                                  conHdr:
   392 000002E3 [0503000000000000]          dq auxHdr
   393 000002EB 1308                        dw 0813h
   394 000002ED [7B04000000000000]          dq commonStrat
   395 000002F5 [9204000000000000]          dq conDriver
   396 000002FD 434F4E2020202020            db "CON     "
   397                                  auxHdr:
   398 00000305 [2703000000000000]          dq prnHdr
   399 0000030D 0080                        dw 08000h
   400 0000030F [7B04000000000000]          dq commonStrat
   401 00000317 [4D05000000000000]          dq com1Intr
   402 0000031F 4155582020202020            db "AUX     "
   403                                  prnHdr:
   404 00000327 [4903000000000000]          dq clkHdr
   405 0000032F 40A0                        dw 0A040h
   406 00000331 [7B04000000000000]          dq commonStrat
   407 00000339 [1504000000000000]          dq lpt1Hdr
   408 00000341 50524E2020202020            db "PRN     "
   409                                  clkHdr:
   410 00000349 [6B03000000000000]          dq msdHdr
   411 00000351 0880                        dw 08008h
   412 00000353 [7B04000000000000]          dq commonStrat
   413 0000035B [4D05000000000000]          dq clkDriver
   414 00000363 434C4F434B242020            db "CLOCK$  "
   415                                  msdHdr:
   416 0000036B [8D03000000000000]          dq com1Hdr
   417 00000373 0008                        dw 00800h   ;Once Generic IO implemented, change to 00840h
   418 00000375 [7B04000000000000]          dq commonStrat
   419 0000037D [F805000000000000]          dq msdDriver
   420 00000385 0000000000000000            db 0,0,0,0,0,0,0,0
   421                                  com1Hdr:
   422 0000038D [AF03000000000000]          dq com2Hdr
   423 00000395 0080                        dw 08000h
   424 00000397 [7B04000000000000]          dq commonStrat
   425 0000039F [4D05000000000000]          dq com1Intr
   426 000003A7 434F4D3120202020            db "COM1    "
   427                                  com2Hdr:
   428 000003AF [D103000000000000]          dq com3Hdr
   429 000003B7 0080                        dw 08000h
   430 000003B9 [7B04000000000000]          dq commonStrat
   431 000003C1 [5605000000000000]          dq com2Intr
   432 000003C9 434F4D3220202020            db "COM2    "
   433                                  com3Hdr:
   434 000003D1 [F303000000000000]          dq com4Hdr
   435 000003D9 0080                        dw 08000h
   436 000003DB [7B04000000000000]          dq commonStrat
   437 000003E3 [5F05000000000000]          dq com3Intr
   438 000003EB 434F4D3320202020            db "COM3    "
   439                                  com4Hdr:
   440 000003F3 [1504000000000000]          dq lpt1Hdr
   441 000003FB 0080                        dw 08000h
   442 000003FD [7B04000000000000]          dq commonStrat
   443 00000405 [6805000000000000]          dq com4Intr
   444 0000040D 434F4D3420202020            db "COM4    "
   445                                  lpt1Hdr:
   446 00000415 [3704000000000000]          dq lpt2Hdr
   447 0000041D 40A0                        dw 0A040h
   448 0000041F [7B04000000000000]          dq commonStrat
   449 00000427 [E805000000000000]          dq lptDriver
   450 0000042F 4C50543120202020            db "LPT1    "
   451                                  lpt2Hdr:
   452 00000437 [5904000000000000]          dq lpt3Hdr
   453 0000043F 40A0                        dw 0A040h
   454 00000441 [7B04000000000000]          dq commonStrat
   455 00000449 [E805000000000000]          dq lptDriver
   456 00000451 4C50543220202020            db "LPT2    "
   457                                  lpt3Hdr:
   458 00000459 FFFFFFFFFFFFFFFF            dq -1
   459 00000461 40A0                        dw 0A040h
   460 00000463 [7B04000000000000]          dq commonStrat
   461 0000046B [E805000000000000]          dq lptDriver
   462 00000473 4C50543320202020            dq "LPT3    "
   463                                  
   464                                  commonStrat:
   465                                  ;DOS calls this function with rbx=Ptr to request header
   466 0000047B 48891D01000000              mov qword [reqHdrPtr], rbx
   467 00000482 C3                          ret
   468 00000483 0000000000000000        reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
   469                                  
   470                                  nulStrat:
   471 0000048B 66C743030001                mov word [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
   472                                  nulIntr:
   473 00000491 C3                          ret
   474                                  
   475                                  conDriver:
   476 00000492 50                          push rax
   477 00000493 53                          push rbx
   478 00000494 488B1DE8FFFFFF              mov rbx, qword [reqHdrPtr]
   479 0000049B 8A4302                      mov al, byte [rbx + drvReqHdr.cmdcde]
   480 0000049E 84C0                        test al, al
   481 000004A0 7421                        jz conInit
   482 000004A2 3C04                        cmp al, 4
   483 000004A4 744D                        jz conRead
   484 000004A6 3C05                        cmp al, 5
   485 000004A8 7466                        jz conNondestructiveRead
   486 000004AA 3C06                        cmp al, 6
   487 000004AC 740C                        jz conExit
   488 000004AE 3C07                        cmp al, 7
   489 000004B0 7471                        jz conFlushInputBuffers
   490 000004B2 3C08                        cmp al, 8
   491 000004B4 7479                        jz conWrite
   492 000004B6 3C09                        cmp al, 9
   493 000004B8 7475                        jz conWrite
   494                                  ;All other cases fall through here
   495                                  conExit:
   496 000004BA 66814B030001                or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   497 000004C0 5B                          pop rbx
   498 000004C1 58                          pop rax
   499 000004C2 C3                          ret
   500                                  conInit:    ;Function 0
   501 000004C3 52                          push rdx
   502                                      ;Flush keyboard buffer
   503                                  .ci0:
   504 000004C4 B401                        mov ah, 01      ;Get buffer status
   505 000004C6 CD36                        int 36h
   506 000004C8 7406                        jz .ci1      ;If zero clear => no more keys to read
   507 000004CA 30E4                        xor ah, ah
   508 000004CC CD36                        int 36h ;Read key to flush from buffer
   509 000004CE EBF4                        jmp short .ci0
   510                                  .ci1:
   511 000004D0 B800050000                  mov eax, 0500h  ;Set page zero as the default page
   512 000004D5 CD30                        int 30h
   513 000004D7 B402                        mov ah, 02h
   514 000004D9 31D2                        xor edx, edx    ;Set screen cursor to top right corner
   515 000004DB 88D7                        mov bh, dl      ;Set cursor for page 0
   516 000004DD CD30                        int 30h
   517 000004DF B707                        mov bh, 07h     ;Grey/Black attribs
   518 000004E1 B800060000                  mov eax, 0600h  ;Clear whole screen
   519 000004E6 CD30                        int 30h
   520 000004E8 5A                          pop rdx
   521 000004E9 EBCF                        jmp short conExit
   522                                  conIORead:
   523 000004EB 66C743030380                mov word [rbx + drvReqHdr.status], 8003h    ;Error, unknown command!
   524 000004F1 EBC7                        jmp short conExit
   525                                  conRead:    ;Function 4
   526 000004F3 57                          push rdi
   527 000004F4 51                          push rcx
   528 000004F5 488B7B0E                    mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   529 000004F9 31C9                        xor ecx, ecx    ;Zero the char counter
   530                                  .cr1:
   531 000004FB 3B4B16                      cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   532 000004FE 7409                        je .cre2
   533 00000500 31C0                        xor eax, eax
   534 00000502 CD36                        int 36h
   535 00000504 AA                          stosb   ;Store char in al into buffer and inc rdi
   536 00000505 FFC1                        inc ecx
   537 00000507 EBF2                        jmp short .cr1
   538                                  .cre2:
   539 00000509 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   540 0000050C 59                          pop rcx
   541 0000050D 5F                          pop rdi
   542 0000050E EBAA                        jmp short conExit
   543                                  conNondestructiveRead:  ;Function 5
   544 00000510 B401                        mov ah, 01h     ;Get key if exists
   545 00000512 CD36                        int 36h
   546 00000514 7405                        jz .cnr           ;If zero clear => no key, go forwards
   547                                      ;Keystroke available
   548 00000516 88430D                      mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Move char in al
   549 00000519 EB9F                        jmp short conExit
   550                                  .cnr: ;No keystroke available
   551 0000051B 66C743030003                mov word [rbx + nonDestInNoWaitReqPkt.status], 0300h   ;Set busy bit
   552 00000521 EB97                        jmp short conExit
   553                                  conFlushInputBuffers:   ;Function 7
   554 00000523 B401                        mov ah, 01      ;Get buffer status
   555 00000525 CD36                        int 36h
   556 00000527 7491                        jz conExit      ;If zero clear => no more keys to read
   557 00000529 30E4                        xor ah, ah
   558 0000052B CD36                        int 36h ;Read key to flush from buffer
   559 0000052D EBF4                        jmp short conFlushInputBuffers
   560                                  conWrite:   ;Function 8 and 9
   561 0000052F 56                          push rsi
   562 00000530 51                          push rcx
   563 00000531 488B730E                    mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   564 00000535 31C9                        xor ecx, ecx    ;Zero the char counter
   565                                  .cw1: 
   566 00000537 3B4B16                      cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   567 0000053A 7407                        je .cw2
   568 0000053C AC                          lodsb   ;Get char into al, and inc rsi
   569 0000053D CD49                        int 49h ;Fast print char
   570 0000053F FFC1                        inc ecx
   571 00000541 EBF4                        jmp short .cw1 ;keep printing until all chars printed
   572                                  .cw2:
   573 00000543 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   574 00000546 59                          pop rcx
   575 00000547 5E                          pop rsi
   576 00000548 E96DFFFFFF                  jmp conExit
   577                                  
   578                                  clkDriver:
   579                                  
   580                                  comDriver:
   581                                  com1Intr:
   582 0000054D C6059300000000              mov byte [comDevice], 0
   583 00000554 EB19                        jmp short comIntr
   584                                  com2Intr:
   585 00000556 C6058A00000001              mov byte [comDevice], 1
   586 0000055D EB10                        jmp short comIntr
   587                                  com3Intr:
   588 0000055F C6058100000002              mov byte [comDevice], 2
   589 00000566 EB07                        jmp short comIntr
   590                                  com4Intr:
   591 00000568 C6057800000003              mov byte [comDevice], 3
   592                                  comIntr:
   593 0000056F 50                          push rax
   594 00000570 53                          push rbx
   595 00000571 51                          push rcx
   596 00000572 52                          push rdx
   597 00000573 56                          push rsi
   598 00000574 488B1D08FFFFFF              mov rbx, qword [reqHdrPtr]
   599 0000057B 8A4302                      mov al, byte [rbx + drvReqHdr.cmdcde]
   600 0000057E 3C04                        cmp al, 4
   601 00000580 7418                        jz comRead
   602 00000582 3C05                        cmp al, 5
   603 00000584 7439                        jz comNondestructiveRead
   604 00000586 3C08                        cmp al, 8
   605 00000588 743D                        jz comWrite
   606 0000058A 3C09                        cmp al, 9
   607 0000058C 7439                        jz comWrite
   608                                  ;All other cases fall through here
   609                                  comExit:
   610 0000058E 66814B030001                or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   611 00000594 5E                          pop rsi
   612 00000595 5A                          pop rdx
   613 00000596 59                          pop rcx
   614 00000597 5B                          pop rbx
   615 00000598 58                          pop rax
   616 00000599 C3                          ret
   617                                  comRead:
   618 0000059A 57                          push rdi
   619 0000059B 488B7B0E                    mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   620 0000059F 31C9                        xor ecx, ecx    ;Zero the char counter
   621                                  .cr1:
   622 000005A1 3B4B16                      cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   623 000005A4 7413                        je .cre2
   624 000005A6 B802000000                  mov eax, 02h    ;Recieve 
   625 000005AB 668B1535000000              mov dx, word [comDevice]    ;Get transacting com device
   626 000005B2 CD34                        int 34h ;Recieve Char
   627 000005B4 AA                          stosb   ;Store char in al into buffer and inc rdi
   628 000005B5 FFC1                        inc ecx
   629 000005B7 EBE8                        jmp short .cr1
   630                                  .cre2:
   631 000005B9 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   632 000005BC 5F                          pop rdi
   633 000005BD EBCF                        jmp short comExit
   634                                  comNondestructiveRead:
   635 000005BF 66C743030002                mov word [rbx + nonDestInNoWaitReqPkt.status], 0200h    ;Set busy bit 
   636 000005C5 EBC7                        jmp short comExit
   637                                  comWrite:
   638 000005C7 488B730E                 mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   639 000005CB 31C9                        xor ecx, ecx    ;Zero the char counter
   640                                  .cw1: 
   641 000005CD 3B4B16                      cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   642 000005D0 7410                        je .cw2
   643 000005D2 AC                          lodsb   ;Get char into al, and inc rsi
   644 000005D3 B401                        mov ah, 01h ;Move function number into ah
   645 000005D5 668B150B000000              mov dx, word [comDevice]
   646 000005DC CD34                        int 34h ;Transmit char
   647 000005DE FFC1                        inc ecx
   648 000005E0 EBEB                        jmp short .cw1 ;keep printing until all chars printed
   649                                  .cw2:
   650 000005E2 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   651 000005E5 EBA7                        jmp short comExit
   652 000005E7 00                      comDevice   db 0
   653                                  
   654                                  lptDriver:    ;Drivers for LPT 1, 2, 3
   655 000005E8 57                          push rdi
   656 000005E9 488B3D93FEFFFF              mov rdi, qword [reqHdrPtr]
   657 000005F0 66C747030001                mov word [rdi + drvReqHdr.status], 0100h    ;Done bit set
   658 000005F6 5F                          pop rdi
   659 000005F7 C3                          ret
   660                                  
   661                                  msdDriver:
   662 000005F8 50                          push rax
   663 000005F9 53                          push rbx
   664 000005FA 51                          push rcx
   665 000005FB 52                          push rdx
   666 000005FC 56                          push rsi
   667 000005FD 57                          push rdi
   668 000005FE 55                          push rbp
   669 000005FF 488B1D7DFEFFFF              mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
   670 00000606 8A4302                      mov al, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
   671 00000609 3C18                        cmp al, 24  ;Check cmd num is valid
   672 0000060B 776C                        ja .msdError
   673 0000060D 84C0                        test al, al
   674 0000060F 7476                        jz .msdInit
   675 00000611 3C01                        cmp al, 01
   676 00000613 0F8409010000                jz .msdMedChk
   677 00000619 3C02                        cmp al, 02
   678 0000061B 0F8442010000                jz .msdBuildBPB
   679 00000621 3C03                        cmp al, 03
   680 00000623 0F847B010000                jz .msdIOCTLRead
   681 00000629 3C04                        cmp al, 04
   682 0000062B 0F8478010000                jz .msdRead
   683 00000631 3C08                        cmp al, 08
   684 00000633 0F8482010000                jz .msdWrite
   685 00000639 3C09                        cmp al, 09
   686 0000063B 0F848C010000                jz .msdWriteVerify
   687 00000641 3C0C                        cmp al, 12
   688 00000643 0F849D010000                jz .msdIOCTLWrite
   689 00000649 3C0D                        cmp al, 13
   690 0000064B 0F849A010000                jz .msdDevOpen
   691 00000651 3C0E                        cmp al, 14
   692 00000653 0F84A2010000                jz .msdDevClose
   693 00000659 3C0F                        cmp al, 15
   694 0000065B 0F84AA010000                jz .msdRemovableMedia
   695 00000661 3C13                        cmp al, 19
   696 00000663 0F84C0010000                jz .msdGenericIOCTL
   697 00000669 3C17                        cmp al, 23
   698 0000066B 0F84BD010000                jz .msdGetLogicalDev
   699 00000671 3C18                        cmp al, 24
   700 00000673 0F84C3010000                jz .msdSetLogicalDev
   701                                  .msdError:
   702                                  .msdDriverExit:
   703 00000679 66814B030001                or word [rbx + drvReqHdr.status], 0100h ;Set done bit
   704 0000067F 5D                          pop rbp
   705 00000680 5F                          pop rdi
   706 00000681 5E                          pop rsi
   707 00000682 5A                          pop rdx
   708 00000683 59                          pop rcx
   709 00000684 5B                          pop rbx
   710 00000685 58                          pop rax
   711 00000686 C3                          ret
   712                                  .msdInit:            ;Function 0
   713 00000687 CD31                        int 31h ;Get number of Int 33h devices in r8b
   714 00000689 4D0FB6C0                    movzx r8, r8b   ;Keeps real count
   715 0000068D 4489C0                      mov eax, r8d
   716 00000690 3C01                        cmp al, 1
   717 00000692 7702                        ja .mi1
   718 00000694 FEC0                        inc al ;Make it two
   719                                  .mi1:
   720 00000696 BA05000000                  mov edx, 5
   721 0000069B 39D0                        cmp eax, edx
   722 0000069D 0F47C2                      cmova eax, edx  ;If num of drives is greater than 5, consider only first 5
   723 000006A0 8805DFFCFFFF                mov byte [msdHdr + drvHdr.drvNam], al ;Save num of drvs in drvr hdr
   724 000006A6 88430D                      mov byte [rbx + initReqPkt.numunt], al ;And in req packet
   725 000006A9 440005(7F000000)            add byte [numMSDdrv], r8b ;Add the true number of devices to total
   726 000006B0 31ED                        xor ebp, ebp    ;Use bpl as device counter, cmp to r8b
   727 000006B2 488D3DE6010000              lea rdi, qword [.msdBPBblks]
   728 000006B9 53                          push rbx
   729                                  .mi2:
   730 000006BA 89EA                        mov edx, ebp
   731 000006BC 488D1D34040000              lea rbx, qword [driverDataPtr]  ;Get effective address of scratch space
   732 000006C3 31C9                        xor ecx, ecx    ;Sector 0
   733 000006C5 B801820000                  mov eax, 8201h       ;Read 1 sector
   734 000006CA CD33                        int 33h
   735 000006CC 724E                        jc .msdInitError
   736                                  
   737 000006CE 488D3522040000              lea rsi, qword [driverDataPtr]  ;Point to start of data
   738 000006D5 B90F000000                  mov ecx, bpbEx_size/8
   739 000006DA F348A5                      rep movsq   ;Move the BPB data into the right block
   740                                  
   741 000006DD FFC5                        inc ebp
   742 000006DF 4C39C5                      cmp rbp, r8 ;Have we written the BPB for all physical drives?
   743 000006E2 75D6                        jne .mi2  ;No? Go again
   744                                  
   745 000006E4 488D3D8C010000              lea rdi, qword [.msdBPBTbl]  ;Point to start of table
   746 000006EB 488D15AD010000              lea rdx, qword [.msdBPBblks]
   747                                  .mi3:
   748 000006F2 488917                      mov qword [rdi], rdx   ;Move the block entry ptr to rdi
   749 000006F5 4881C278000000              add rdx, bpbEx_size      ;Make rdx point to the next block entry
   750 000006FC FFCD                        dec ebp
   751 000006FE 75F2                        jnz .mi3  ;If not zero yet, go again
   752                                  
   753 00000700 5B                          pop rbx
   754 00000701 488D156F010000              lea rdx, qword [.msdBPBTbl]  ;Get far pointer 
   755 00000708 48895316                    mov qword [rbx + initReqPkt.optptr], rdx  ;Save ptr to array
   756 0000070C 488D15E4030000              lea rdx, qword [driverDataPtr]
   757 00000713 4889530E                    mov qword [rbx + initReqPkt.endptr], rdx    ;Save free space ptr
   758 00000717 E95DFFFFFF                  jmp .msdDriverExit
   759                                  .msdInitError:
   760 0000071C 5B                          pop rbx
   761 0000071D E957FFFFFF                  jmp .msdDriverExit
   762                                  .msdMedChk:          ;Function 1
   763                                  ;Once the BIOS function is implmented that reads the changeline, use that!
   764                                  ;For BIOSes that dont support the changeline, the following procedure will 
   765                                  ; suffice.
   766 00000722 480FB64301                  movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   767 00000727 8A90[6D080000]              mov dl, byte [.msdBIOSmap + rax]    ;Translate unitnum to BIOS num
   768 0000072D F6C280                      test dl, 80h    ;If it is a fixed disk, no change!
   769 00000730 7528                        jnz .mmcNoChange
   770                                  ;Now we test Media Descriptor
   771 00000732 8A530D                      mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   772 00000735 488B3CC5[77080000]          mov rdi, qword [.msdBPBTbl + 8*rax]
   773 0000073D 488B3F                      mov rdi, qword [rdi]    ;Dereference rdi
   774 00000740 385715                      cmp byte [rdi + bpb32.media], dl    ;Compare media descriptor bytes
   775 00000743 740C                        je .mmcUnsure
   776                                  .mmcChange: ;Fail safe, always assume the device has changed
   777 00000745 C6430EFF                    mov byte [rbx + mediaCheckReqPkt.medret], -1
   778 00000749 48C7430F[63080000]          mov qword [rbx + mediaCheckReqPkt.desptr], .msdDefLabel ;Temp, ret def label
   779                                  .mmcUnsure:
   780 00000751 C6430E00                    mov byte [rbx + mediaCheckReqPkt.medret], 0
   781 00000755 E91FFFFFFF                  jmp .msdDriverExit
   782                                  .mmcNoChange:
   783 0000075A C6430E01                    mov byte [rbx + mediaCheckReqPkt.medret], 1
   784 0000075E E916FFFFFF                  jmp .msdDriverExit
   785                                  
   786                                  .msdBuildBPB:        ;Function 2
   787 00000763 4889DE                      mov rsi, rbx
   788 00000766 480FB64601                  movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   789 0000076B 8A90[6D080000]              mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req
   790 00000771 488B5E0E                    mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   791 00000775 31C9                        xor ecx, ecx    ;Read Sector 0
   792 00000777 B801820000                  mov eax, 8201h  ;LBA Read 1 sector
   793 0000077C CD33                        int 33h
   794 0000077E 7224                        jc .mbbpbError
   795 00000780 4887DE                      xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   796 00000783 480FB64301                  movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   797 00000788 488B3CC5[77080000]          mov rdi, qword [.msdBPBTbl + 8*rax] ;Get pointer to pointer to buffer
   798 00000790 488B3F                      mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   799 00000793 48897B16                    mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   800 00000797 B90F000000                  mov ecx, bpbEx_size/8
   801 0000079C F348A5                      rep movsq   ;Move the BPB data into the right space
   802 0000079F E9D5FEFFFF                  jmp .msdDriverExit
   803                                  .mbbpbError:
   804                                  .msdIOCTLRead:       ;Function 3, returns done
   805 000007A4 E9D0FEFFFF                  jmp .msdDriverExit
   806                                  .msdRead:            ;Function 4
   807 000007A9 4889DD                      mov rbp, rbx
   808 000007AC B482                        mov ah, 82h ;LBA Read Sectors
   809 000007AE E897000000                  call .msdBlkIOCommon
   810 000007B3 4889EB                      mov rbx, rbp
   811 000007B6 E9BEFEFFFF                  jmp .msdDriverExit
   812                                  .msdWrite:           ;Function 8
   813 000007BB 4889DD                      mov rbp, rbx
   814 000007BE B483                        mov ah, 83h ;LBA Write Sectors
   815 000007C0 E885000000                  call .msdBlkIOCommon
   816 000007C5 4889EB                      mov rbx, rbp
   817 000007C8 E9ACFEFFFF                  jmp .msdDriverExit
   818                                  .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   819 000007CD 4889DD                      mov rbp, rbx
   820 000007D0 B483                        mov ah, 83h ;LBA Write Sectors
   821 000007D2 E873000000                  call .msdBlkIOCommon
   822 000007D7 B484                        mov ah, 84h ;LBA Verify Sectors
   823 000007D9 E86C000000                  call .msdBlkIOCommon
   824 000007DE 4889EB                      mov rbx, rbp
   825 000007E1 E993FEFFFF                  jmp .msdDriverExit
   826                                  .msdIOCTLWrite:      ;Function 12, returns done
   827 000007E6 E98EFEFFFF                  jmp .msdDriverExit
   828                                  .msdDevOpen:         ;Function 13
   829 000007EB 480FB64301                  movzx rax, byte [rbx + openReqPkt.unitnm]
   830 000007F0 FE80[72080000]              inc byte [.msdHdlCnt + rax]  ;Inc handle cnt for given unit
   831 000007F6 E97EFEFFFF                  jmp .msdDriverExit
   832                                  .msdDevClose:        ;Function 14
   833 000007FB 480FB64301                  movzx rax, byte [rbx + closeReqPkt.unitnm]
   834 00000800 FE88[72080000]              dec byte [.msdHdlCnt + rax]  ;Dec handle cnt for given unit
   835 00000806 E96EFEFFFF                  jmp .msdDriverExit
   836                                  .msdRemovableMedia:  ;Function 15
   837 0000080B 480FB64301                  movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   838 00000810 8A80[6D080000]              mov al, byte [.msdBIOSmap + rax]    ;Get BIOS number
   839 00000816 A880                        test al, 80h
   840 00000818 0F845BFEFFFF                jz .msdDriverExit   ;If removable, busy bit is clear
   841 0000081E 66C743032000                mov word [rbx + remMediaReqPkt.status], 20h ;Set Busy bit
   842 00000824 E950FEFFFF                  jmp .msdDriverExit
   843                                  .msdGenericIOCTL:    ;Function 19
   844 00000829 E94BFEFFFF                  jmp .msdDriverExit
   845                                  .msdGetLogicalDev:   ;Function 23
   846 0000082E 8A0538000000                mov al, byte [.msdCurDev]
   847 00000834 884301                      mov byte [rbx + getDevReqPkt.unitnm], al
   848 00000837 E93DFEFFFF                  jmp .msdDriverExit
   849                                  .msdSetLogicalDev:   ;Function 24
   850 0000083C 8A4301                      mov al, byte [rbx + getDevReqPkt.unitnm]
   851 0000083F 880527000000                mov byte [.msdCurDev], al
   852 00000845 E92FFEFFFF                  jmp .msdDriverExit
   853                                  
   854                                  .msdBlkIOCommon:  ;Does block IO
   855                                  ;Called with rbp containing old rbx value and ah with function number
   856                                  ;Error handled by caller
   857 0000084A 480FB64501                  movzx rax, byte [rbp + ioReqPkt.unitnm]
   858 0000084F 8A90[6D080000]              mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req
   859 00000855 488B4D1A                    mov rcx, qword [rbp + ioReqPkt.strtsc]  ;Get start sector
   860 00000859 8A4516                      mov al, byte [rbp + ioReqPkt.tfrlen]    ;Get number of sectors, max 255
   861 0000085C 488B5D0E                    mov rbx, qword [rbp + ioReqPkt.bufptr]  ;Get Memory Buffer
   862 00000860 CD33                        int 33h
   863 00000862 C3                          ret
   864                                  
   865 00000863 4E4F204E414D452000      .msdDefLabel db "NO NAME ",0 ;Default volume label
   866                                  ;LASTDRIVE default is 5
   867 0000086C 00                      .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   868                                  ; Except when single drive in use, in which case Drive A and B refer to device 0
   869 0000086D 0000000000              .msdBIOSmap  db 5 dup (0)    ;Translates DOS drive number to BIOS number
   870 00000872 0000000000              .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   871 00000877 000000000000000000-     .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   871 00000880 000000000000000000-
   871 00000889 000000000000000000-
   871 00000892 000000000000000000-
   871 0000089B 00000000           
   872 0000089F 000000000000000000-     .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   872 000008A8 000000000000000000-
   872 000008B1 000000000000000000-
   872 000008BA 000000000000000000-
   872 000008C3 000000000000000000-
   872 000008CC 000000000000000000-
   872 000008D5 000000000000000000-
   872 000008DE 000000000000000000-
   872 000008E7 000000000000000000-
   872 000008F0 000000000000000000-
   872 000008F9 000000000000000000-
   872 00000902 000000000000000000-
   872 0000090B 000000000000000000-
   872 00000914 000000000000000000-
   872 0000091D 000000000000000000-
   872 00000926 000000000000000000-
   872 0000092F 000000000000000000-
   872 00000938 000000000000000000-
   872 00000941 000000000000000000-
   872 0000094A 000000000000000000-
   872 00000953 000000000000000000-
   872 0000095C 000000000000000000-
   872 00000965 000000000000000000-
   872 0000096E 000000000000000000-
   872 00000977 000000000000000000-
   872 00000980 000000000000000000-
   872 00000989 000000000000000000-
   872 00000992 000000000000000000-
   872 0000099B 000000000000000000-
   872 000009A4 000000000000000000-
   872 000009AD 000000000000000000-
   872 000009B6 000000000000000000-
   872 000009BF 000000000000000000-
   872 000009C8 000000000000000000-
   872 000009D1 000000000000000000-
   872 000009DA 000000000000000000-
   872 000009E3 000000000000000000-
   872 000009EC 000000000000000000-
   872 000009F5 000000000000000000-
   872 000009FE 000000000000000000-
   872 00000A07 000000000000000000-
   872 00000A10 000000000000000000-
   872 00000A19 000000000000000000-
   872 00000A22 000000000000000000-
   872 00000A2B 000000000000000000-
   872 00000A34 000000000000000000-
   872 00000A3D 000000000000000000-
   872 00000A46 000000000000000000-
   872 00000A4F 000000000000000000-
   872 00000A58 000000000000000000-
   872 00000A61 000000000000000000-
   872 00000A6A 000000000000000000-
   872 00000A73 000000000000000000-
   872 00000A7C 000000000000000000-
   872 00000A85 000000000000000000-
   872 00000A8E 000000000000000000-
   872 00000A97 000000000000000000-
   872 00000AA0 000000000000000000-
   872 00000AA9 000000000000000000-
   872 00000AB2 000000000000000000-
   872 00000ABB 000000000000000000-
   872 00000AC4 000000000000000000-
   872 00000ACD 000000000000000000-
   872 00000AD6 000000000000000000-
   872 00000ADF 000000000000000000-
   872 00000AE8 000000000000000000-
   872 00000AF1 000000000000       
   873                                  
   874                                  driverDataPtr:
