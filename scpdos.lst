     1                                  [map all scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  %include "driverStruc.inc"
     5                              <1> 
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     8                              <1> ; device driver related structures.                     ;
     9                              <1> ;-------------------------------------------------------;
    10                              <1> 
    11                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    12                              <1> 
    13 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    14 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    15 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    16 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    17 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    18                              <1> 
    19                              <1> endstruc
    20                              <1> 
    21                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    22                              <1> 
    23                              <1>     .hdrlen resb 1  ;Length of the request header
    24                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    25                              <1>     .cmdcde resb 1  ;Command code
    26                              <1>     .status resw 1  ;Status word
    27                              <1>     .devptr resq 1  ;Device queue pointer field
    28                              <1> 
    29                              <1> %endmacro
    30                              <1> 
    31                              <1> struc drvReqHdr
    32                              <1>     drvReqHdrM
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    33                              <1> endstruc
    34                              <1> 
    35                              <1> struc initReqPkt  ;Init Request Packet
    36                              <1> 
    37                              <1>     drvReqHdrM   ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    38 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
    39 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
    40 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
    41 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
    42                              <1> 
    43                              <1> endstruc
    44                              <1> 
    45                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
    46                              <1> 
    47                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    48 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    49 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
    50 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
    51                              <1> 
    52                              <1> endstruc
    53                              <1> 
    54                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
    55                              <1> 
    56                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    57 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    58 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    59 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
    60                              <1> 
    61                              <1> endstruc
    62                              <1> 
    63                              <1> struc ioReqPkt   ;IO Request Packet
    64                              <1> 
    65                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    66 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    67 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    68 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
    69 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
    70 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
    71                              <1> 
    72                              <1> endstruc
    73                              <1> 
    74                              <1> struc nonDestInNoWaitReqPkt    ;Nondestructive Input No Wait Request Packet
    75                              <1>     
    76                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    77 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
    78                              <1> 
    79                              <1> endstruc
    80                              <1> 
    81                              <1> struc statusReqPkt   ;Status Request Packet
    82                              <1> 
    83                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    84                              <1> 
    85                              <1> endstruc
    86                              <1> 
    87                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
    88                              <1> 
    89                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    90                              <1>      
    91                              <1> endstruc
    92                              <1> 
    93                              <1> struc openReqPkt ;Open Device Request Packet
    94                              <1> 
    95                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    96                              <1>      
    97                              <1> endstruc
    98                              <1> 
    99                              <1> struc closeReqPkt ;Close Device Request Packet
   100                              <1> 
   101                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   102                              <1>      
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   106                              <1> 
   107                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   108                              <1>      
   109                              <1> endstruc
   110                              <1> 
   111                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   112                              <1> 
   113                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   114 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   115 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   116 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   117 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   118 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   119                              <1> 
   120                              <1> endstruc
   121                              <1> 
   122                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   123                              <1>     
   124                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   125                              <1> 
   126                              <1> endstruc
   127                              <1> 
   128                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   129                              <1>     
   130                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   131                              <1> 
   132                              <1> endstruc
     5                                  %include "fatStruc.inc"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ; This include file contains miscellaneous FAT driver   ;
     9                              <1> ; structures. exFAT will have it's own files at a later ;
    10                              <1> ; stage.                                                ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    14                              <1> 
    15 00000000 ??????              <1>     .jmpBoot    resb 3 
    16 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    17 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    18 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    19 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    20 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    21 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    22 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    23 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    24 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    25 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    26 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    27 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    28 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    29                              <1> 
    30 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    31 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    32 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    33 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    34 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    35 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    40                              <1> 
    41 00000000 ??????              <1>     .jmpBoot    resb 3
    42 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    43 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    44 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    45 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    46 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    47 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    48 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    49 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    50 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    51 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    52 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    53 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    54 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    55                              <1> 
    56 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    57 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    58 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    59 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    60 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    61 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    62 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    63                              <1> 
    64 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    65 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    66 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    67 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    68 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    69 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    70                              <1> 
    71                              <1> endstruc
    72                              <1> 
    73                              <1> struc mbr
    74 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    75 000001B8 ????????            <1>     .diskID     resb 4
    76 000001BC ????                <1>     .reserved   resb 2
    77 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    78 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    79 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    80 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    81 000001FE ????                <1>     .mbrSig     resb 2
    82                              <1> endstruc
    83                              <1> 
    84                              <1> struc mbrEntry
    85 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    86 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    87 00000004 ??                  <1>     .ptnType    resb 1
    88 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
    89 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
    90 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
    91                              <1> endstruc
    92                              <1> 
    93                              <1> struc fatDirEntry
    94                              <1> 
    95 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
    96 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
    97 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
    98 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
    99 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   100 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   101 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   102 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   103 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   104 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   105 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   106 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   107                              <1> 
   108                              <1> endstruc
   109                              <1> ;Directory attribute equates
   110                              <1>     dirReadOnly     equ 01h
   111                              <1>     dirHidden       equ 02h
   112                              <1>     dirSystem       equ 04h
   113                              <1>     dirVolumeID     equ 08h
   114                              <1>     dirDirectory    equ 10h
   115                              <1>     dirArchive      equ 20h
   116                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   117                              <1> 
   118                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   119                              <1> 
   120 00000000 ??????              <1>     .jmpBoot                resb 3 
   121 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   122 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   123 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   124 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   125 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   126 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   127 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   128 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   129 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   130 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   131 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   132 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   133 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   134 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   135 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   136 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   137 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   138 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   139                              <1> 
   140                              <1> endstruc
   141                              <1> 
   142                              <1> struc FSInfo
   143                              <1> 
   144 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   145 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   146 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   147 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   148 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   149 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   150 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   151                              <1> 
   152                              <1> endstruc
     6                                  %include "dosStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous internal     ;
    10                              <1> ; SCP/DOS structures.                                   ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> ;------------------------------------------------------------------------;
    14                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    15                              <1> ; its file system structure. This is used to locate files and structures
    16                              <1> ; on the device itself and to translate file requests to cluster chains
    17                              <1> ; to LBAs to pass to the disk driver..
    18                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    19                              <1> ; drivers Initialise routine has been called.
    20                              <1> ;------------------------------------------------------------------------;
    21                              <1> struc dpb        ;Drive Parameter Block
    22                              <1> 
    23 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    24 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    25 00000002 ??                  <1>     .bBytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)x
    26 00000003 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    27 00000004 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    28 00000005 ????????            <1>     .dFAToffset              resd 1  ;Number of Sectors preceeding first FAT x
    29 00000009 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    30 0000000A ????                <1>     .wNumberRootDirSectors   resw 1  ;In sectors, this is 0 for FAT32 formats x
    31 0000000C ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    32 00000010 ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    33 00000014 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    34 00000018 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    35                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    36 0000001C ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    37 00000024 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    38 00000025 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    39 00000026 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    40 0000002E ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    41 00000032 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    42                              <1> 
    43                              <1> endstruc
    44                              <1> 
    45                              <1> ;------------------------------------------------------------------------;
    46                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    47                              <1> ; All disk pathing requests go via the CDS for that drive.
    48                              <1> ; The default drive is the last accessed drive, this number is stored
    49                              <1> ; in the DOS data area.
    50                              <1> ; The CDS is stored as an array with the offset into the array being 
    51                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    52                              <1> ;
    53                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    54                              <1> ;------------------------------------------------------------------------;
    55                              <1> struc cds       ;Current Directory structure
    56 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    57 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    58 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    59 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    60 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    61 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    62                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    63                              <1> ; another, we save the number of chars to skip to that deep level).
    64                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    65                              <1> ; Flags: Bit 15 set = Network drive
    66                              <1> ;        Bit 14 set = Physical drive
    67                              <1> ;        Bit 13 set = JOIN'ed drive
    68                              <1> ;        Bit 12 set = SUBST'ed drive
    69                              <1> ;        Bit 7  set = Redirected, not network, drive (This is how MSCDEX worked)
    70                              <1> endstruc
    71                              <1> ;CDS equates
    72                              <1>     cdsNetDrive     equ 8000h
    73                              <1>     cdsPhysDrive    equ 4000h
    74                              <1>     cdsJoinDrive    equ 2000h
    75                              <1>     cdsSubstDrive   equ 1000h
    76                              <1>     cdsRedirDrive   equ 0080h
    77                              <1> ;------------------------------------------------------------------------;
    78                              <1> ; The SFT is a way to allow applications to open file handles to files 
    79                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    80                              <1> ; under the first header, and then a second header will be linked to the 
    81                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    82                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    83                              <1> ; using the FCBS= command. Default FCBS=5.
    84                              <1> ;
    85                              <1> ; A file handle describes the file, and the location within the file that
    86                              <1> ; we are reading. The file handle can be manipulated without the file
    87                              <1> ; being in memory, thus allowing the user to access data without needing 
    88                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    89                              <1> ; accessing devices, by treating them as files with their drivers 
    90                              <1> ; responding and translating the manipulations of the file handle itself.
    91                              <1> ; Neither the driver nor the application should see or use the SFT for
    92                              <1> ; the handle, as it is subject to change (and will change when file 
    93                              <1> ; sharing provisions are included). The DOS will make requests to the 
    94                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    95                              <1> ; track of the information in the SFT entry for that handle. 
    96                              <1> ;
    97                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    98                              <1> ; can point to the same file. It all depends on what the applications 
    99                              <1> ; want to do with the File.
   100                              <1> ;
   101                              <1> ; !!!!IMPORTANT!!!!
   102                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   103                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   104                              <1> ;
   105                              <1> ;Each SFT may look like this:
   106                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   107                              <1> ;            |                |
   108                              <1> ;       wNumFiles*sft    wNumFiles*sft
   109                              <1> ;
   110                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   111                              <1> ; System FCBs.
   112                              <1> ;
   113                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   114                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   115                              <1> ;
   116                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   117                              <1> ; DEFAULT FCBS=5, MINIMUM FCBS=5
   118                              <1> ;------------------------------------------------------------------------;
   119                              <1> struc sfth   ;System file table header
   120                              <1> ; This is the SFT header.
   121                              <1> ; This structure comes before the start of the first file in the array/table.
   122 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   123 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc sft
   127                              <1> ;This is the file struc itself
   128 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   129 00000002 ????                <1>     .wOpenMode   resw 1    ;Bit 15 set if opened via FCB
   130 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   131 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   132 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   133 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file
   134 00000013 ????                <1>     .wTime       resw 1    ;File Time
   135 00000015 ????                <1>     .wDate       resw 1    ;File Date
   136 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   137 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset in file, in bytes
   138 0000001F ????                <1>     .wRelClust   resw 1    ;Rel cluster in file of the last cluster accessed
   139 00000021 ????????            <1>     .dDirSect    resd 1    ;Rel number of sector containing directory entry 
   140 00000025 ??                  <1>     .bNumDirEnt  resb 1    ;Number of dir entry within sector (byte offset/32)
   141 00000026 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   142 00000031 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   143 00000039 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster of last cluster accessed
   144                              <1> endstruc
   145                              <1> 
   146                              <1> ;------------------------------------------------------------------------;
   147                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   148                              <1> ; to an internal buffer, and then copying it to the specified location
   149                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   150                              <1> ; another request for the same sector from the same device is made, so 
   151                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   152                              <1> ; size, selected according to the largest detected sector size during 
   153                              <1> ; the initial loadup.
   154                              <1> ;
   155                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   156                              <1> ;
   157                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   158                              <1> ;------------------------------------------------------------------------;
   159                              <1> 
   160                              <1> struc bufferHdr
   161 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   162 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for
   163 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   164 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   165 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   166 00000013 ??                  <1>     .bufFAToff   resb  1   ;Sector offset of the backup copy of the FAT on disk
   167 00000014 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   168                              <1> endstruc
   169                              <1> ;Buffer Flag equates
   170                              <1>     fatBuffer   equ 2h  ;FAT sector in buffer
   171                              <1>     dirBuffer   equ 4h  ;Directory sector in buffer
   172                              <1>     dataBuffer  equ 8h  ;File Data sector in buffer
   173                              <1>     refBuffer   equ 10h ;Data in buffer referenced by an application
   174                              <1>     dirtyBuffer equ 20h ;Data in buffer modified by an application
   175                              <1>     remotBuffer equ 40h ;
   176                              <1> ;------------------------------------------------------------------------;
   177                              <1> ; Memory control block for each memory arena
   178                              <1> ;------------------------------------------------------------------------;
   179                              <1> struc mcb
   180 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   181 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP or 0 for free space
   182 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   183 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   184                              <1> endstruc
   185                              <1> 
   186                              <1> ;------------------------------------------------------------------------;
   187                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   188                              <1> ; following order, thus allowing for return values to be placed in the 
   189                              <1> ; registers by accessing the caller register stack frame.
   190                              <1> ;------------------------------------------------------------------------;
   191                              <1> struc callerFrame
   192 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   193 00000008 ????????????????    <1>     .rbx    resq 1    
   194 00000010 ????????????????    <1>     .rcx    resq 1
   195 00000018 ????????????????    <1>     .rdx    resq 1
   196 00000020 ????????????????    <1>     .rsi    resq 1
   197 00000028 ????????????????    <1>     .rdi    resq 1
   198 00000030 ????????????????    <1>     .rbp    resq 1
   199 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   200 00000040 ????????????????    <1>     .r9     resq 1
   201                              <1> ;Pushed by Processor when invoked via Interrupt
   202 00000048 ????????????????    <1>     .rip    resq 1
   203 00000050 ????????????????    <1>     .cs     resq 1
   204 00000058 ????????????????    <1>     .flags  resq 1
   205                              <1> endstruc
   206                              <1> 
   207                              <1> %macro pushDOS 0
   208                              <1>     push r9
   209                              <1>     push r8
   210                              <1>     push rbp
   211                              <1>     push rdi
   212                              <1>     push rsi
   213                              <1>     push rdx
   214                              <1>     push rcx
   215                              <1>     push rbx
   216                              <1>     push rax
   217                              <1> %endmacro
   218                              <1> 
   219                              <1> %macro popDOS 0
   220                              <1>     pop rax
   221                              <1>     pop rbx
   222                              <1>     pop rcx
   223                              <1>     pop rdx
   224                              <1>     pop rsi
   225                              <1>     pop rdi
   226                              <1>     pop rbp
   227                              <1>     pop r8
   228                              <1>     pop r9
   229                              <1> %endmacro
   230                              <1> 
   231                              <1> struc psp
   232 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h
   233 00000002 ????????????????    <1>     .startSeg   resq 1  ;Pointer to the start of the PSP
   234 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   235 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   236 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   237 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   238 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   239 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   240 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   241 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size
   242 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh
   243 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain
   244 0000005B ????????????????    <1>     .xtraHdlPtr resq 1  ;Pointer to the extra handle array if needed
   245 00000063 ????????????????    <1>     .fcbPtr1    resq 1  ;Pointer to the first OS allocated FCB
   246 0000006B <res 15h>           <1>     .reserved   resb 21
   247 00000080 ??                  <1>     .charCount  resb 1  ;Number of characters in command tail
   248 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   249                              <1> endstruc
   250                              <1> 
   251                              <1> struc mcb
   252 00000000 ??                  <1>     .mzbyte     resb 1  ;M=In use, Z=Free
   253 00000001 ????????????????    <1>     .processPtr resq 1  ;Points to the start of the process PSP
   254 00000009 ????????            <1>     .paragraphs resd 1  ;Gives the number of paras allocated to this process
   255 0000000D ??????              <1>     .reserved   resb 3
   256                              <1>     .program:
   257                              <1> endstruc
   258                              <1> 
   259                              <1> struc clkStruc
   260 00000000 ????                <1>     .dateWord   resw 1
   261 00000002 ??                  <1>     .minutes    resb 1
   262 00000003 ??                  <1>     .hours      resb 1
   263 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   264 00000005 ??                  <1>     .seconds    resb 1
   265                              <1> endstruc
     7                                  Segment .text align=1   ;Init code
     8                                  %include "sysInit.asm"
     9                              <1> ; We arrive here with the following values in the registers.
    10                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    11                              <1> ; dx  = Int 33h boot device number
    12                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    13                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    14 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    15 00000002 909090909090909090- <1>     db (100h-2) dup (90h)   ;Duplicate NOPs for the PSP
    15 0000000B 909090909090909090- <1>
    15 00000014 909090909090909090- <1>
    15 0000001D 909090909090909090- <1>
    15 00000026 909090909090909090- <1>
    15 0000002F 909090909090909090- <1>
    15 00000038 909090909090909090- <1>
    15 00000041 909090909090909090- <1>
    15 0000004A 909090909090909090- <1>
    15 00000053 909090909090909090- <1>
    15 0000005C 909090909090909090- <1>
    15 00000065 909090909090909090- <1>
    15 0000006E 909090909090909090- <1>
    15 00000077 909090909090909090- <1>
    15 00000080 909090909090909090- <1>
    15 00000089 909090909090909090- <1>
    15 00000092 909090909090909090- <1>
    15 0000009B 909090909090909090- <1>
    15 000000A4 909090909090909090- <1>
    15 000000AD 909090909090909090- <1>
    15 000000B6 909090909090909090- <1>
    15 000000BF 909090909090909090- <1>
    15 000000C8 909090909090909090- <1>
    15 000000D1 909090909090909090- <1>
    15 000000DA 909090909090909090- <1>
    15 000000E3 909090909090909090- <1>
    15 000000EC 909090909090909090- <1>
    15 000000F5 909090909090909090- <1>
    15 000000FE 9090                <1>
    16                              <1> ;First make space for the MCB
    17 00000100 52                  <1>     push rdx    ;Save dl on stack briefly
    18 00000101 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    19 00000106 0F32                <1>     rdmsr
    20 00000108 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    21 0000010A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    22 0000010E 89C7                <1>     mov edi, eax        ;Get the low dword in
    23 00000110 4881C710000000      <1>     add rdi, mcb_size   ;Make space for the MCB
    24 00000117 89F8                <1>     mov eax, edi
    25 00000119 4889FA              <1>     mov rdx, rdi
    26 0000011C 48C1EA20            <1>     shr rdx, 20h
    27 00000120 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    28 00000122 5A                  <1>     pop rdx
    29                              <1> ;------------------------------------------------;
    30                              <1> ;           Sanitise the data area               ;
    31                              <1> ;------------------------------------------------;
    32 00000123 B9[D4120000]        <1>     mov ecx, dSegLen
    33 00000128 30C0                <1>     xor al, al
    34 0000012A 57                  <1>     push rdi    ;Temp save rdi on the stack
    35 0000012B F3AA                <1>     rep stosb
    36 0000012D 5F                  <1>     pop rdi
    37                              <1> 
    38                              <1> ;------------------------------------------------;
    39                              <1> ;          Start saving Basic DOS data           ;
    40                              <1> ;------------------------------------------------;
    41 0000012E 64881425[08000000]  <1>     mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    42 00000136 488D15C3FEFFFF      <1>     lea rdx, tempPSP    ;Get the address of the tempPSP
    43 0000013D 6448891425-         <1>     mov qword fs:[currentPSP], rdx
    43 00000142 [D7000000]          <1>
    44                              <1> ;Copy DOS to its final resting place
    45 00000146 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    45 0000014B [00000000]          <1>
    46 0000014F 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rdx 
    47 00000152 4881C7[D4120000]    <1>     add rdi, dSegLen ;Move destination past end of data area
    48 00000159 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    49 00000160 B900100000          <1>     mov ecx, 1000h
    50 00000165 F348A5              <1>     rep movsq
    51                              <1> 
    52 00000168 CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    53 0000016A 6444880425-         <1>     mov byte fs:[numRemMSD], r8b    ;Save number of physical int 33h devs
    53 0000016F [09000000]          <1>
    54 00000173 64C60425[99000000]- <1>     mov byte fs:[lastdrvNum], 5     ;Last drive is by default 5
    54 0000017B 05                  <1>
    55 0000017C 64C60425[0A000000]- <1>     mov byte fs:[numLRemDrives], 0     ;Number of logical drives
    55 00000184 00                  <1>
    56                              <1> 
    57                              <1> ;------------------------------------------------;
    58                              <1> ;          Find largest sector size              ;
    59                              <1> ;------------------------------------------------;
    60                              <1> largestSectorSearch:
    61 00000185 30D2                <1>     xor dl, dl
    62 00000187 31FF                <1>     xor edi, edi    ;Use this as the counter for the largest sector size
    63                              <1> .lss:
    64 00000189 B488                <1>     mov ah, 88h
    65 0000018B CD33                <1>     int 33h
    66 0000018D 39C7                <1>     cmp edi, eax
    67 0000018F 0F42F8              <1>     cmovb edi, eax  ;Only replace ebp if eax is greater
    68 00000192 FEC2                <1>     inc dl
    69 00000194 4438C2              <1>     cmp dl, r8b
    70 00000197 75F0                <1>     jne .lss
    71 00000199 6466893C25-         <1>     mov word fs:[maxBytesSec], di
    71 0000019E [87000000]          <1>
    72                              <1> 
    73                              <1> ;------------------------------------------------;
    74                              <1> ;          Driver Adjustments and inits          ;
    75                              <1> ;------------------------------------------------;
    76                              <1> ;Modify the pointers in nData before putting them in the data area
    77 000001A2 48012D98030000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
    78 000001A9 48012D9B030000      <1>     add qword [nData + drvHdr.strPtr], rbp
    79 000001B0 48012D9C030000      <1>     add qword [nData + drvHdr.intPtr], rbp
    80                              <1> ;Copy the Null driver to its location in Sysvars
    81 000001B7 B922000000          <1>     mov ecx, drvHdr_size
    82 000001BC 488D357E030000      <1>     lea rsi, qword [nData]
    83 000001C3 488DBD[A5000000]    <1>     lea rdi, qword [rbp + nulDevHdr]
    84 000001CA F3A4                <1>     rep movsb   
    85                              <1> 
    86                              <1> ;Adjust the addresses in the other driver headers 
    87 000001CC 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
    87 000001CE [C80A000000000000]  <1>
    88 000001D6 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
    89 000001DB 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
    90                              <1> adjDrivers:
    91 000001DF E888020000          <1>     call adjustDrvHdr
    92 000001E4 E2F9                <1>     loop adjDrivers
    93                              <1> 
    94                              <1> ;Open NUL
    95 000001E6 488D9D[0B000000]    <1>     lea rbx, qword [rbp + charReqHdr]
    96 000001ED C6030D              <1>     mov byte [rbx + openReqPkt.hdrlen], openReqPkt_size
    97 000001F0 C6430300            <1>     mov byte [rbx + openReqPkt.status], 0
    98 000001F4 FF95[AF000000]      <1>     call qword [rbp + nulDevHdr + drvHdr.strPtr]
    99 000001FA FF95[B7000000]      <1>     call qword [rbp + nulDevHdr + drvHdr.intPtr]
   100                              <1> ;Open CON
   101                              <1> conInit:    ;Rather than keeping this resident... do it here
   102                              <1> .ci0:
   103 00000200 B401                <1>     mov ah, 01      ;Get buffer status
   104 00000202 CD36                <1>     int 36h
   105 00000204 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   106 00000206 30E4                <1>     xor ah, ah
   107 00000208 CD36                <1>     int 36h ;Read key to flush from buffer
   108 0000020A EBF4                <1>     jmp short .ci0
   109                              <1> .ci1:
   110 0000020C B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   111 00000211 CD30                <1>     int 30h
   112 00000213 B402                <1>     mov ah, 02h
   113 00000215 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   114 00000217 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   115 00000219 CD30                <1>     int 30h
   116 0000021B B707                <1>     mov bh, 07h     ;Grey/Black attribs
   117 0000021D B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   118 00000222 CD30                <1>     int 30h
   119                              <1> 
   120                              <1>     ;Save ptr to ConHdr in Sysvars
   121 00000224 488D85[C80A0000]    <1>     lea rax, qword [rbp + conHdr]
   122 0000022B 6448890425-         <1>     mov qword fs:[conPtr], rax
   122 00000230 [7F000000]          <1>
   123                              <1> 
   124                              <1>     ;Save ptr to ClkHdr in Sysvars
   125 00000234 488D85[2E0B0000]    <1>     lea rax, qword [rbp + clkHdr]
   126 0000023B 6448890425-         <1>     mov qword fs:[clockPtr], rax
   126 00000240 [77000000]          <1>
   127                              <1> 
   128                              <1> ;------------------------------------------------;
   129                              <1> ;          Kernel inits and adjustments          ;
   130                              <1> ;------------------------------------------------;
   131                              <1> ;Adjust Int 41h address table
   132                              <1> adjInt41h:
   133 00000244 B96A000000          <1>     mov ecx, dispatchTableL/8 ;Number of elements in table
   134 00000249 48BB-               <1>     mov rbx, functionDispatch.dispatchTable ;Get EA of table
   134 0000024B [AD04000000000000]  <1>
   135 00000253 488D5C1D00          <1>     lea rbx, qword [rbp+rbx]    ;Point to the start of the relocated table 
   136                              <1> .ai41h:
   137 00000258 48012B              <1>     add qword [rbx], rbp    ;Add base address value to entry in reloc table
   138 0000025B 4881C308000000      <1>     add rbx, 8              ;Each entry is size 8
   139 00000262 FFC9                <1>     dec ecx
   140 00000264 75F2                <1>     jnz .ai41h  ;Keep looping until all entries have been adjusted
   141                              <1> 
   142                              <1> ;Adjust Interrupt Entries Int 40h-49h
   143                              <1> adjInts:
   144 00000266 B340                <1>     mov bl, 40h
   145 00000268 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   146 0000026D CD35                <1>     int 35h
   147 0000026F B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   148 00000274 488D3D76020000      <1>     lea rdi, intData
   149 0000027B 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   150                              <1> .ai0:
   151 0000027D B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   152 00000282 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   153 00000285 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   154 00000288 CD35                <1>     int 35h
   155 0000028A 4881C708000000      <1>     add rdi, 8
   156 00000291 FFC1                <1>     inc ecx
   157 00000293 81F94A000000        <1>     cmp ecx, 4Ah
   158 00000299 75E2                <1>     jne .ai0
   159                              <1> 
   160                              <1> ;------------------------------------------------;
   161                              <1> ;         Init msd driver, create DPB            ;
   162                              <1> ;------------------------------------------------;
   163                              <1> storageInits:
   164                              <1> ;First save dpb and cds pointer in sysvars
   165 0000029B 488D9D[00000000]    <1>     lea rbx, qword [rbp + firstDPB]
   166 000002A2 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   166 000002A7 [67000000]          <1>
   167 000002AB 488D9D[49020000]    <1>     lea rbx, qword [rbp + initCDS]
   168 000002B2 6448891C25-         <1>     mov qword fs:[cdsHeadPtr], rbx
   168 000002B7 [91000000]          <1>
   169                              <1> 
   170                              <1> ;Open Mass Storage
   171 000002BB 488D9D[35000000]    <1>     lea rbx, qword [rbp + diskReqHdr]
   172 000002C2 C6031F              <1>     mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   173 000002C5 C6430200            <1>     mov byte [rbx + initReqPkt.cmdcde], 00h     ;MSD init
   174 000002C9 66C743030000        <1>     mov word [rbx + initReqPkt.status], 0       ;Zero status word
   175 000002CF 648A0425[0A000000]  <1>     mov al, byte fs:[numLRemDrives]
   176 000002D7 88431E              <1>     mov byte [rbx + initReqPkt.drvnum], al      ;First unit is drive A
   177 000002DA FF95[5A0B0000]      <1>     call qword [rbp + msdHdr + drvHdr.strPtr]
   178 000002E0 FF95[620B0000]      <1>     call qword [rbp + msdHdr + drvHdr.intPtr]
   179                              <1>     ;Check if it returned OK first!
   180 000002E6 66F743030080        <1>     test word [rbx + initReqPkt.status], 8000h  ;Test the error bit
   181 000002EC 0F858D010000        <1>     jnz errorInit   ;If the bit is set, halt execution
   182 000002F2 8A430D              <1>     mov al, byte [rbx + initReqPkt.numunt]
   183 000002F5 64880425[0A000000]  <1>     mov byte fs:[numLRemDrives], al
   184 000002FD 8885[6A0B0000]      <1>     mov byte [rbp + msdHdr + drvHdr.drvNam], al ;Save # of units in name field
   185                              <1> 
   186 00000303 488B5316            <1>     mov rdx, qword [rbx + initReqPkt.optptr]    ;Get ptr to bpbPtrTbl in rdx
   187 00000307 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   188 0000030A 30C9                <1>     xor cl, cl  ;Clear counter
   189 0000030C 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   189 00000311 [67000000]          <1>
   190                              <1> .si0:   
   191 00000315 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   192 00000318 B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   193 0000031A CD41                <1>     int 41h
   194                              <1> ;Add other data to DPB
   195 0000031C 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   196 0000031F 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   197 00000322 50                  <1>     push rax
   198 00000323 488D87[500B0000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   199 0000032A 4889451C            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   200 0000032E 58                  <1>     pop rax
   201 0000032F FEC1                <1>     inc cl
   202 00000331 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   203 00000333 7416                <1>     je .si1
   204 00000335 50                  <1>     push rax
   205 00000336 488D4536            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   206 0000033A 48894526            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   207 0000033E 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   208 00000341 58                  <1>     pop rax
   209 00000342 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   210 00000349 EBCA                <1>     jmp short .si0
   211                              <1> .si1:
   212                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   213 0000034B 48C74526FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   214 00000353 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   215                              <1> 
   216                              <1> ;------------------------------------------------;
   217                              <1> ;                   MCB inits                    ;
   218                              <1> ;------------------------------------------------;
   219                              <1> 
   220                              <1> ;Build the DOS segment's MCB header
   221 00000356 4889EB              <1>     mov rbx, rbp
   222 00000359 4881EB10000000      <1>     sub rbx, mcb_size   ;Point rbx to the start of the MCB
   223 00000360 C6034D              <1>     mov byte [rbx + mcb.marker], "M"
   224 00000363 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get the current PSP
   224 00000368 [D7000000]          <1>
   225 0000036C 48894301            <1>     mov qword [rbx + mcb.owner], rax
   226 00000370 C74309FFFFFFFF      <1>     mov dword [rbx + mcb.blockSize], -1 ;Let size be max for now, adjust later
   227                              <1> 
   228 00000377 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save rbx in data area
   228 0000037C [5F000000]          <1>
   229                              <1> 
   230                              <1> ;------------------------------------------------;
   231                              <1> ;          Default File Handle Creation          ;
   232                              <1> ;------------------------------------------------;
   233                              <1> 
   234                              <1> ;Fill in the default file table entries
   235                              <1>     ;lea rbx, qword [rbp + firstSftHeader]
   236                              <1>     ;mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   237                              <1>     ;mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   238                              <1>     ;mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   239                              <1> 
   240                              <1>     ;lea rbx, qword [rbp + firstSft]
   241                              <1>     ;mov word [rbx + sft.wNumHandles], 0 ;Nothing pointing to this file yet
   242                              <1>     ;mov word [rbx + sft.w]
   243                              <1> 
   244                              <1> ;------------------------------------------------;
   245                              <1> ;               Load CONFIG.SYS                  ;
   246                              <1> ;------------------------------------------------;
   247                              <1> ;------------------------------------------------;
   248                              <1> ;              Process CONFIG.SYS                ;
   249                              <1> ;------------------------------------------------;
   250                              <1> ;------------------------------------------------;
   251                              <1> ;                 Create a CDS                   ;
   252                              <1> ;------------------------------------------------;
   253                              <1> ;------------------------------------------------;
   254                              <1> ;           Load Command interpreter             ;
   255                              <1> ;------------------------------------------------;
   256                              <1> 
   257                              <1> ;Test Error Case
   258                              <1>     ;mov ah, 00110000b
   259                              <1>     ;mov al, 00h
   260                              <1>     ;mov edi, 0Ch
   261                              <1>     ;int 44h
   262                              <1> 
   263 00000380 488D1515010000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   264 00000387 B409                <1>     mov ah, 09h
   265 00000389 CD41                <1>     int 41h
   266                              <1> 
   267 0000038B B801C50000          <1>     mov eax, 0C501h ;Connect debugger
   268 00000390 CD35                <1>     int 35h
   269                              <1> l1:
   270 00000392 B401                <1>     mov ah, 01h  ;Write with echo
   271 00000394 CD41                <1>     int 41h
   272 00000396 3C00                <1>     cmp al, 0
   273 00000398 7402                <1>     je l2
   274 0000039A EBF6                <1>     jmp short l1
   275                              <1> l2:
   276 0000039C B407                <1>     mov ah, 07h
   277 0000039E CD41                <1>     int 41h
   278 000003A0 3C42                <1>     cmp al, 42h
   279 000003A2 75EE                <1>     jne l1
   280                              <1> l3:
   281 000003A4 6466C70425-         <1>     mov word fs:[CLOCKrecrd + clkStruc.dateWord], 0
   281 000003A9 [18010000]0000      <1>
   282 000003AF 488D9D[0B000000]    <1>     lea rbx, qword [rbp + charReqHdr] ;Get the address of this request block
   283 000003B6 488D85[18010000]    <1>     lea rax, qword [rbp + CLOCKrecrd]
   284 000003BD C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   285 000003C0 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read the time
   286 000003C4 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   287 000003CA 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   288 000003CE C7431606000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 06
   289 000003D5 FF95[380B0000]      <1>     call qword [rbp + clkHdr + drvHdr.strPtr]
   290 000003DB FF95[400B0000]      <1>     call qword [rbp + clkHdr + drvHdr.intPtr]
   291                              <1> 
   292 000003E1 B403                <1>     mov ah, 03h
   293 000003E3 30FF                <1>     xor bh, bh
   294 000003E5 CD30                <1>     int 30h
   295 000003E7 30D2                <1>     xor dl, dl  ;0 column
   296 000003E9 B402                <1>     mov ah, 02h
   297 000003EB CD30                <1>     int 30h
   298                              <1> 
   299 000003ED 488D9D[18010000]    <1>     lea rbx, qword [rbp + CLOCKrecrd]
   300 000003F4 0FB64303            <1>     movzx eax, byte [rbx + clkStruc.hours]
   301 000003F8 E832000000          <1>     call .clkHexToBCD
   302 000003FD B40E                <1>     mov ah, 0Eh
   303 000003FF B03A                <1>     mov al, ":"
   304 00000401 CD30                <1>     int 30h
   305 00000403 0FB64302            <1>     movzx eax, byte [rbx + clkStruc.minutes]
   306 00000407 E823000000          <1>     call .clkHexToBCD
   307 0000040C B40E                <1>     mov ah, 0Eh
   308 0000040E B03A                <1>     mov al, ":"
   309 00000410 CD30                <1>     int 30h
   310 00000412 0FB64305            <1>     movzx eax, byte [rbx + clkStruc.seconds]
   311 00000416 E814000000          <1>     call .clkHexToBCD
   312 0000041B B40E                <1>     mov ah, 0Eh
   313 0000041D B02E                <1>     mov al, "."
   314 0000041F CD30                <1>     int 30h
   315 00000421 0FB64304            <1>     movzx eax, byte [rbx + clkStruc.hseconds]
   316 00000425 E805000000          <1>     call .clkHexToBCD
   317 0000042A E963FFFFFF          <1>     jmp l1
   318                              <1> .clkHexToBCD:
   319                              <1> ;Converts a Hex byte into two BCD digits
   320                              <1> ;Takes input in each nybble of al
   321 0000042F 53                  <1>     push rbx
   322 00000430 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
   322 00000439 00                  <1>
   323 0000043A 31D2                <1>     xor edx, edx
   324 0000043C 48F7F3              <1>     div rbx
   325 0000043F 80C230              <1>     add dl, '0'
   326 00000442 80FA39              <1>     cmp dl, '9'
   327 00000445 7603                <1>     jbe .chtb0
   328 00000447 80C207              <1>     add dl, 'A'-'0'-10
   329                              <1> .chtb0:
   330 0000044A 88D1                <1>     mov cl, dl    ;Save remainder byte
   331 0000044C 31D2                <1>     xor edx, edx
   332 0000044E 48F7F3              <1>     div rbx
   333 00000451 80C230              <1>     add dl, '0'
   334 00000454 80FA39              <1>     cmp dl, '9'
   335 00000457 7603                <1>     jbe .chtb1
   336 00000459 80C207              <1>     add dl, 'A'-'0'-10
   337                              <1> .chtb1:
   338 0000045C 88D5                <1>     mov ch, dl    ;Save remainder byte
   339                              <1> 
   340 0000045E 88E8                <1>     mov al, ch    ;Get most sig digit into al
   341 00000460 B40E                <1>     mov ah, 0Eh
   342 00000462 CD30                <1>     int 30h
   343 00000464 88C8                <1>     mov al, cl    ;Get least sig digit into al
   344 00000466 B40E                <1>     mov ah, 0Eh
   345 00000468 CD30                <1>     int 30h
   346 0000046A 5B                  <1>     pop rbx
   347 0000046B C3                  <1>     ret
   348                              <1> ;--------------------------------
   349                              <1> ;       PROCS FOR SYSINIT       :
   350                              <1> ;--------------------------------
   351                              <1> adjustDrvHdr:
   352                              <1> ;Input: rsi = Effective address of driver in DOS segment
   353                              <1> ;       rbp = Ptr to the start of the DOS segment
   354                              <1> ;Output: rsi = EA of next header in DOS segment
   355 0000046C 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   356 0000046F 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   357 00000473 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   358 00000477 4881C622000000      <1>     add rsi, drvHdr_size
   359 0000047E C3                  <1>     ret
   360                              <1> errorInit:
   361                              <1> ;If a critical error occurs during sysinit, fail through here
   362 0000047F 488D152C000000      <1>     lea rdx, hltmsg
   363 00000486 B409                <1>     mov ah, 09h
   364 00000488 CD41                <1>     int 41h
   365 0000048A FA                  <1>     cli ;Clear interrupts
   366 0000048B B0FF                <1>     mov al, -1
   367 0000048D 66BAA100            <1>     mov dx, 0A1h    ;PIC2 data
   368 00000491 EE                  <1>     out dx, al      ;Mask all lines
   369 00000492 66BA2100            <1>     mov dx, 21h     ;PIC1 data
   370 00000496 EE                  <1>     out dx, al      ;Mask all lines
   371                              <1> .ei0:
   372 00000497 F4                  <1>     hlt
   373 00000498 F390                <1>     pause
   374 0000049A EBFB                <1>     jmp short .ei0
   375                              <1> 
   376                              <1> ;--------------------------------
   377                              <1> ;       DATA FOR SYSINIT        :
   378                              <1> ;--------------------------------
   379 0000049C 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
   379 000004A5 5343502F444F532E2E- <1>
   379 000004AE 2E0A0D24            <1>
   380 000004B2 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0Ah,0Dh,"$"
   380 000004BB 7469616C6973696E67- <1>
   380 000004C4 20534350444F532E53- <1>
   380 000004CD 59532E205379737465- <1>
   380 000004D6 6D2068616C74696E67- <1>
   380 000004DF 2E2E2E0A0D24        <1>
   381 000004E5 434F4E00            <1> conName db "CON",0
   382 000004E9 41555800            <1> auxName db "AUX",0
   383 000004ED 50524E00            <1> prnName db "PRN",0
   384                              <1> intData:
   385 000004F1 [7500000000000000]  <1>     dq terminateProcess ;Int 40h
   386 000004F9 [7500000000000000]  <1>     dq functionDispatch ;Int 41h
   387 00000501 [FD07000000000000]  <1>     dq terminateHandler ;Int 42h
   388 00000509 [FD07000000000000]  <1>     dq ctrlCHandler     ;Int 43h
   389 00000511 [FD07000000000000]  <1>     dq critErrorHandler ;Int 44h
   390 00000519 [900A000000000000]  <1>     dq absDiskRead      ;Int 45h
   391 00000521 [A50A000000000000]  <1>     dq absDiskWrite     ;Int 46h
   392 00000529 [BA0A000000000000]  <1>     dq terminateResident    ;Int 47h
   393 00000531 [BA0A000000000000]  <1>     dq inDosHandler     ;Int 48h
   394 00000539 [BC0A000000000000]  <1>     dq fastOutput       ;Int 49h
   395                              <1> nData:
   396 00000541 [C80A000000000000]  <1>     dq conHdr
   397 00000549 0480                <1>     dw 08004h
   398 0000054B [700C000000000000]  <1>     dq nulStrat
   399 00000553 [760C000000000000]  <1>     dq nulIntr
   400 0000055B 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
     9                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    10                                  %include "dosSeg.asm"
    11                              <1> ;This file contains the main DOS data segment
    12                              <1> 
    13 00000000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    14 00000008 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    15 00000009 ??                  <1>     numRemMSD   resb 1    ;Number of physical removable MSDs in system x
    16 0000000A ??                  <1>     numLRemDrives  resb 1 ;Number of logical removable drives in system x
    17                              <1>     ;if numRemMSD = 1 then numLRemDrives = 2 and we have a single drive system
    18 0000000B <res 2Ah>           <1>     charReqHdr  resb ioReqPkt_size  ;Character IO Request header x
    19 00000035 <res 2Ah>           <1>     diskReqHdr  resb ioReqPkt_size  ;Disk Action Request header x
    20                              <1>     ;The device driver header with space for the largest possible packet
    21 0000005F ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    22                              <1> sysVarsPtr:
    23 00000067 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    24 0000006F ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    25 00000077 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    26                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    27 0000007F ????????????????    <1>     conPtr      resq 1    ;Pointer to the current active CON device header  x
    28                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    29 00000087 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    30 00000089 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain
    31 00000091 ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    32 00000099 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    33 0000009A ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    34 000000A2 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    35 000000A4 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    36 000000A5 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    37                              <1> 
    38                              <1> ;Start of Swappable Data Area, this bit can remain static
    39 000000C7 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h
    40 000000C8 ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving
    41 000000C9 ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh
    42 000000CA ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    43 000000CB ????                <1>     errorExt    resw 1  ;Extended Error Code
    44 000000CD ??                  <1>     errorAction resb 1  ;Suggested action for error  
    45 000000CE ??                  <1>     errorClass  resb 1  ;Error Class
    46                              <1> 
    47 000000CF ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA
    48 000000D7 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP
    49 000000DF ????????????????    <1>     rdiErrorPtr resq 1  ;Saves RDI value of last error (could make this di)
    50 000000E7 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
    51 000000EF ????                <1>     lastRetCode resw 1  ;Last return code returned by Int 41h/4Ch
    52 000000F1 ??                  <1>     currentDrv  resb 1  ;Default, last accessed drive
    53 000000F2 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls
    54 000000F3 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify
    55                              <1> ;SDA, needs to be replaced between processes
    56 000000F4 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
    57                              <1> 
    58                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    59 000000FC ??                  <1>     singleDrv   resb 1  
    60                              <1> ;This is done to allow for DOS to give the user a change to swap devices
    61                              <1> 
    62 000000FD ??                  <1>     Int44RetVal resb 1  ;Saves a copy of the Int 44 return value
    63 000000FE ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
    64 000000FF ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
    65 00000100 ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
    66 00000108 ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
    67 00000110 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
    68                              <1> ;Time stuff
    69 00000118 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
    70 0000011E ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
    71 0000011F ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
    72 00000120 ??                  <1>     years       resb 1  ;00h - FFh (00 = 1980 - 128 = 2107)
    73 00000121 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
    74 00000123 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
    75                              <1> 
    76                              <1> ;Stacks
    77 00000124 <res 528h>          <1>     critStack   resq 165
    78 0000064C ????????????????    <1>     critStakTop resq 1
    79 00000654 <res 638h>          <1>     IOStack     resq 199
    80 00000C8C ????????????????    <1>     IOStakTop   resq 1
    81 00000C94 <res 638h>          <1>     DiskStack   resq 199
    82 000012CC ????????????????    <1>     DiskStakTop resq 1
    83                              <1>     dSegLen     equ     $
    11                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    12                                  %include "dosKernel.asm"
    13                              <1> 
    14                              <1> ;-----------------------------------:
    15                              <1> ;           Static Data             :
    16                              <1> ;-----------------------------------:
    17 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    18 00000001 01                  <1> dosMinor    db 01h      ;.01
    19                              <1> ;-----------------------------------:
    20                              <1> ;       Misc System routines        :
    21                              <1> ;-----------------------------------:
    22                              <1> criticalDOSError:
    23                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    24                              <1> ; to the critical error handler.
    25                              <1> ; Called with ax, di and rsi set as required by Int 44h (caller decides)
    26                              <1> ; Return response from int 44h in al
    27 00000002 488925(F4000000)    <1>     mov qword [xInt44hRSP], rsp
    28 00000009 488B25(08010000)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
    29 00000010 FA                  <1>     cli ;Disable Interrupts
    30 00000011 CD44                <1>     int 44h ;Call critical error handler
    31 00000013 FB                  <1>     sti ;Reenable Interrupts
    32 00000014 488B25(F4000000)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
    33 0000001B C3                  <1>     ret
    34                              <1> findLRUBuffer: 
    35                              <1> ;Finds least recently used buffer, links it and returns ptr to it in rbx
    36                              <1> ;Input: Nothing
    37                              <1> ;Output: rbx = Pointer to the buffer to use
    38 0000001C 52                  <1>     push rdx
    39 0000001D 488B1D(89000000)    <1>     mov rbx, qword [bufHeadPtr]
    40 00000024 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
    41 0000002B 7502                <1>     jne .flb1
    42 0000002D 5A                  <1>     pop rdx
    43 0000002E C3                  <1>     ret
    44                              <1> .flb1:
    45 0000002F 4889DA              <1>     mov rdx, rbx    ;Save a ptr to the previous buffer header
    46 00000032 488B1A              <1>     mov rbx, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
    47 00000035 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
    48 0000003C 75F1                <1>     jne .flb1   ;If not LRU, keep walking, else process
    49 0000003E 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
    50 00000045 488B15(89000000)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
    51 0000004C 48891D(89000000)    <1>     mov qword [bufHeadPtr], rbx    ;Sysvars to point to new buffer
    52 00000053 488913              <1>     mov qword [rbx + bufferHdr.nextBufPtr], rdx
    53 00000056 5A                  <1>     pop rdx
    54 00000057 C3                  <1>     ret
    55                              <1> 
    56                              <1> findDPB:
    57                              <1> ;Finds the DPB for a given drive
    58                              <1> ;Input:  dl = Drive number (0=A, 1=B etc...)
    59                              <1> ;Output: al = 00, rbx = Pointer to the DPB
    60                              <1> ;        al = -1, Failed, no DPB for device, rbx destroyed
    61 00000058 488B1D(67000000)    <1>     mov rbx, qword [dpbHeadPtr]
    62                              <1> .fd1:
    63 0000005F 30C0                <1>     xor al, al
    64 00000061 3813                <1>     cmp byte [rbx + dpb.bDriveNumber], dl
    65 00000063 740F                <1>     je .fd2
    66 00000065 488B5B26            <1>     mov rbx, qword [rbx + dpb.qNextDPBPtr]
    67 00000069 B0FF                <1>     mov al, -1
    68 0000006B 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If rbx followed last item in list, no DPB exists for dl
    69 00000072 75EB                <1>     jne .fd1
    70                              <1> .fd2:
    71 00000074 C3                  <1>     ret
    72                              <1> ;-----------------------------------:
    73                              <1> ;       File System routines        :
    74                              <1> ;-----------------------------------:
    75                              <1> name2Clust:
    76                              <1> ;Converts a file name to a first cluster number
    77                              <1> ;-----------------------------------:
    78                              <1> ;        Interrupt routines         :
    79                              <1> ;-----------------------------------:
    80                              <1> terminateProcess:   ;Int 40h
    81                              <1> 
    82                              <1> functionDispatch:   ;Int 41h Main function dispatcher
    83                              <1> ;ah = Function number, all other registers have various meanings
    84 00000075 FA                  <1>     cli ;Halt external interrupts
    85 00000076 FC                  <1>     cld ;Ensure all string ops occur in the right direction
    86 00000077 80FC6A              <1>     cmp ah, dispatchTableL/8    ;Number of functions
    87 0000007A 0F871D010000        <1>     ja .fdExitBad
    88                              <1>     ;Cherry pick functions
    89 00000080 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    90 00000083 722C                <1>     jb .fsbegin   ;If below skip these checks
    91 00000085 0F84B9020000        <1>     je .ctrlBreakCheck
    92 0000008B 80FC64              <1>     cmp ah, 64h
    93 0000008E 0F8418040000        <1>     je .setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    94 00000094 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    95 00000096 80FC51              <1>     cmp ah, 51h
    96 00000099 0F84E8020000        <1>     je .getCurrProcessID    ;This and below are exactly the same
    97 0000009F 80FC62              <1>     cmp ah, 62h
    98 000000A2 0F84F1030000        <1>     je .getPSPaddr          ;Calls the above function
    99 000000A8 80FC50              <1>     cmp ah, 50h
   100 000000AB 0F84CE020000        <1>     je .setCurrProcessID
   101                              <1> .fsbegin:
   102                              <1>     pushDOS ;Push the usual prologue registers
   208 000000B1 4151                <2>  push r9
   209 000000B3 4150                <2>  push r8
   210 000000B5 55                  <2>  push rbp
   211 000000B6 57                  <2>  push rdi
   212 000000B7 56                  <2>  push rsi
   213 000000B8 52                  <2>  push rdx
   214 000000B9 51                  <2>  push rcx
   215 000000BA 53                  <2>  push rbx
   216 000000BB 50                  <2>  push rax
   103 000000BC 488B05(08010000)    <1>     mov rax, qword [oldRSP]
   104 000000C3 488905(00010000)    <1>     mov qword [oldoldRSP], rax
   105 000000CA FE05(C8000000)      <1>     inc byte [inDOS]    ;Increment in DOS flag
   106 000000D0 488925(08010000)    <1>     mov qword [oldRSP], rsp
   107                              <1> ;Here, we want to save oldRSP in the callers PSP
   108 000000D7 803D(C8000000)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
   109 000000DE 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
   110 000000E0 488B05(D7000000)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
   111 000000E7 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
   112                              <1> .fsb1:
   113 000000EB 58                  <1>     pop rax     ;Get old rax back
   114 000000EC 50                  <1>     push rax    ;and push it back onto the stack
   115 000000ED 488D25(4C060000)    <1>     lea rsp, critStakTop
   116 000000F4 FB                  <1>     sti         ;Reenable interrupts
   117                              <1> 
   118 000000F5 C605(FF000000)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
   119                              <1> 
   120 000000FC 48891D(10010000)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
   121 00000103 0FB6DC              <1>     movzx ebx, ah   ;Move the function number bl zero extended to rbx
   122 00000106 C1E303              <1>     shl ebx, 3      ;Multiply the function number by 8 for offset into table
   123 00000109 50                  <1>     push rax        ;Push rax onto the stack
   124 0000010A 488D059C030000      <1>     lea rax, qword [.dispatchTable]
   125 00000111 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   126 00000114 58                  <1>     pop rax
   127 00000115 488B1B              <1>     mov rbx, qword [rbx]    ;Get the address from the dispatch table
   128                              <1> 
   129 00000118 84E4                <1>     test ah, ah     ;Simple Terminate function?
   130 0000011A 741C                <1>     jz .fddiskOp
   131 0000011C 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   132 0000011F 7443                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   133 00000121 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   134 00000124 7712                <1>     ja .fddiskOp
   135                              <1> ;Char operations here
   136 00000126 F605(C7000000)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   137 0000012D 7535                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   138 0000012F 488D25(8C0C0000)    <1>     lea rsp, IOStakTop          ;Otherwise, switch to IO stack
   139 00000136 EB2C                <1>     jmp short .fdGoToFunction
   140                              <1> .fddiskOp:
   141                              <1>     ;Disk operations go here
   142                              <1>     ;Clear up error info
   143 00000138 C605(CA000000)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   144 0000013F C605(C7000000)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   145 00000146 C605(C9000000)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   146                              <1> 
   147 0000014D C605(FF000000)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   148 00000154 488D25(CC120000)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   149 0000015B F605(F2000000)FF    <1>     test byte [breakFlag], -1   ;Test if set
   150 00000162 7400                <1>     jz .fdGoToFunction
   151                              <1> ; HANDLE CTRL+BREAK HERE!
   152                              <1> .fdGoToFunction:
   153 00000164 48871D(10010000)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   154                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   155                              <1>     ;
   156                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   157                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   158                              <1>     ;
   159 0000016B FF15(10010000)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   160                              <1> .fdExit:
   161 00000171 FA                  <1>     cli     ;Redisable interrupts
   162                              <1>     ;???
   163 00000172 FE0D(C8000000)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   164 00000178 488B25(08010000)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   165 0000017F 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   166 00000182 488B05(00010000)    <1>     mov rax, qword [oldoldRSP]
   167 00000189 488905(08010000)    <1>     mov qword [oldRSP], rax
   168                              <1>     popDOS  ;Pop the frame
   220 00000190 58                  <2>  pop rax
   221 00000191 5B                  <2>  pop rbx
   222 00000192 59                  <2>  pop rcx
   223 00000193 5A                  <2>  pop rdx
   224 00000194 5E                  <2>  pop rsi
   225 00000195 5F                  <2>  pop rdi
   226 00000196 5D                  <2>  pop rbp
   227 00000197 4158                <2>  pop r8
   228 00000199 4159                <2>  pop r9
   169 0000019B 48CF                <1>     iretq
   170                              <1> .fdExitBad:
   171 0000019D B400                <1>     mov ah, 0
   172 0000019F 48CF                <1>     iretq
   173                              <1> .simpleTerminate:     ;ah = 00h
   174 000001A1 C3                  <1>     ret
   175                              <1> .stdinReadEcho:     ;ah = 01h
   176                              <1> ;Return char that has been read and echoed in al
   177 000001A2 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
   178 000001A9 488D0566000000      <1>     lea rax, .stdinReadEchoBuffer
   179 000001B0 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   180 000001B3 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
   181 000001B7 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   182 000001BD 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   183 000001C1 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
   184 000001C8 FF1504090000        <1>     call qword [conHdr + drvHdr.strPtr]
   185 000001CE FF1506090000        <1>     call qword [conHdr + drvHdr.intPtr]
   186 000001D4 803D3B00000000      <1>     cmp byte [.stdinReadEchoBuffer], 00h
   187 000001DB 7432                <1>     jz .stdireexit
   188 000001DD 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
   189 000001E4 488D052B000000      <1>     lea rax, .stdinReadEchoBuffer
   190 000001EB C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   191 000001EE C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
   192 000001F2 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   193 000001F8 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   194 000001FC C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
   195 00000203 FF15C9080000        <1>     call qword [conHdr + drvHdr.strPtr]
   196 00000209 FF15CB080000        <1>     call qword [conHdr + drvHdr.intPtr]
   197                              <1> .stdireexit:
   198 0000020F 8A0501000000        <1>     mov al, byte [.stdinReadEchoBuffer]
   199 00000215 C3                  <1>     ret
   200 00000216 00                  <1> .stdinReadEchoBuffer    db 0
   201                              <1> .stdoutWrite:       ;ah = 02h
   202                              <1> ;Bspace is regular cursor left, does not insert a blank
   203 00000217 881533000000        <1>     mov byte [.stdoutWriteBuffer], dl
   204 0000021D 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
   205 00000224 488D1525000000      <1>     lea rdx, .stdoutWriteBuffer
   206 0000022B C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   207 0000022E C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
   208 00000232 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   209 00000238 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   210 0000023C C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
   211 00000243 FF1589080000        <1>     call qword [conHdr + drvHdr.strPtr]
   212 00000249 FF158B080000        <1>     call qword [conHdr + drvHdr.intPtr]
   213 0000024F C3                  <1>     ret
   214 00000250 00                  <1> .stdoutWriteBuffer db 0
   215                              <1> .stdauxRead:        ;ah = 03h
   216                              <1> .stdauxWrite:       ;ah = 04h
   217                              <1> .stdprnWrite:       ;ah = 05h
   218                              <1> .directCONIO:       ;ah = 06h
   219                              <1> .waitDirectInNoEcho:;ah = 07h
   220                              <1> ;Return char in al
   221 00000251 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
   222 00000258 488D052B000000      <1>     lea rax, .function7buffer
   223 0000025F C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   224 00000262 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
   225 00000266 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   226 0000026C 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   227 00000270 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
   228 00000277 FF1555080000        <1>     call qword [conHdr + drvHdr.strPtr]
   229 0000027D FF1557080000        <1>     call qword [conHdr + drvHdr.intPtr]
   230 00000283 8A0501000000        <1>     mov al, byte [.function7buffer]
   231 00000289 C3                  <1>     ret
   232 0000028A 00                  <1> .function7buffer    db 0
   233                              <1> .waitStdinNoEcho:   ;ah = 08h
   234 0000028B C3                  <1>     ret
   235                              <1> .printString:       ;ah = 09h
   236 0000028C 31C9                <1>     xor ecx, ecx    ;Clear char counter
   237 0000028E B824000000          <1>     mov eax, "$"    ;Terminating char
   238 00000293 4889D7              <1>     mov rdi, rdx    ;Set up for scasb
   239                              <1> .ps0:   ;Search for $ to get count of chars
   240 00000296 AE                  <1>     scasb
   241 00000297 7404                <1>     je .ps1
   242 00000299 FFC1                <1>     inc ecx
   243 0000029B EBF9                <1>     jmp short .ps0
   244                              <1> .ps1:   ;Use handle 
   245 0000029D 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
   246 000002A4 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   247 000002A7 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
   248 000002AB 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   249 000002B1 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   250 000002B5 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   251 000002B8 FF1514080000        <1>     call qword [conHdr + drvHdr.strPtr]
   252 000002BE FF1516080000        <1>     call qword [conHdr + drvHdr.intPtr]
   253                              <1> 
   254 000002C4 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   255 000002CB 8A03                <1>     mov al, byte [rbx+callerFrame.rax]      ;Gets al to preserve it
   256 000002CD C3                  <1>     ret
   257                              <1> .buffStdinInput:    ;ah = 0Ah
   258                              <1> .checkStdinStatus:  ;ah = 0Bh
   259                              <1> .clearbuffDoFunc:   ;ah = 0Ch
   260                              <1> .diskReset:         ;ah = 0Dh
   261                              <1> .selectDisk:        ;ah = 0Eh
   262                              <1> .openFileFCB:       ;ah = 0Fh
   263                              <1> .closeFileFCB:      ;ah = 10h
   264                              <1> .findFirstFileFCB:  ;ah = 11h
   265                              <1> .findNextFileFCB:   ;ah = 12h
   266                              <1> .deleteFileFCB:     ;ah = 13h
   267                              <1> .sequentialReadFCB: ;ah = 14h
   268                              <1> .sequentialWriteFCB:;ah = 15h
   269                              <1> .createFileFCB:     ;ah = 16h
   270                              <1> .renameFileFCB:     ;ah = 17h
   271                              <1>                     ;ah = 18h unused
   272                              <1> .getCurrentDisk:    ;ah = 19h, get current default drive
   273 000002CE 8A05(F1000000)      <1>     mov al, byte [currentDrv]
   274 000002D4 C3                  <1>     ret
   275                              <1> .setDTA:            ;ah = 1Ah
   276                              <1> ;Called with:
   277                              <1> ;   rdx = Pointer to the new default DTA
   278 000002D5 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   279 000002DC 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
   280 000002E0 488915(CF000000)    <1>     mov qword [currentDTA], rdx
   281 000002E7 C3                  <1>     ret
   282                              <1> .FATinfoDefault:    ;ah = 1Bh
   283                              <1> .FatinfoDevice:     ;ah = 1Ch
   284                              <1>                     ;ah = 1Dh unused
   285                              <1>                     ;ah = 1Eh unused
   286                              <1> .getCurrentDPBptr:  ;ah = 1Fh, simply calls int 41h ah = 32h with dl = 0
   287                              <1>                     ;ah = 20h unused
   288                              <1> .randomReadFCB:     ;ah = 21h
   289                              <1> .randomWriteFCB:    ;ah = 22h
   290                              <1> .getFileSizeFCB:    ;ah = 23h
   291                              <1> .setRelRecordFCB:   ;ah = 24h
   292                              <1> .setIntVector:      ;ah = 25h
   293                              <1> ;Called with:
   294                              <1> ;   rdx = Pointer to interrupt handler
   295                              <1> ;   al = Interrupt number
   296 000002E8 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   297 000002EA 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   298                              <1> ;First call to get default BIOS segement selector and attribute word
   299 000002F0 88C3                <1>     mov bl, al  ;Set interrupt number 
   300 000002F2 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   301 000002F7 CD35                <1>     int 35h
   302 000002F9 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   303 000002FB 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   304                              <1> ;dx preserves the attribute word
   305 000002FD 488B2D(08010000)    <1>     mov rbp, qword [oldRSP]
   306 00000304 488B5D18            <1>     mov rbx, qword [rbp + callerFrame.rdx]  ;Pointer passed in rdx
   307 00000308 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   308 0000030D CD35                <1>     int 35h
   309                              <1> 
   310 0000030F 8A4500              <1>     mov al, byte [rbp + callerFrame.rax]    ;Preserve low byte of rax
   311 00000312 C3                  <1>     ret
   312                              <1> .createNewPSP:      ;ah = 26h
   313                              <1> .randBlockReadFCB:  ;ah = 27h
   314                              <1> .randBlockWriteFCB: ;ah = 28h
   315                              <1> .parseFilenameFCB:  ;ah = 29h
   316                              <1> .getDate:           ;ah = 2Ah
   317                              <1> .setDate:           ;ah = 2Bh
   318                              <1> .getTime:           ;ah = 2Ch
   319                              <1> .setTime:           ;ah = 2Dh
   320                              <1> .setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   321 00000313 8805(F3000000)      <1>     mov byte [verifyFlag], al
   322 00000319 C3                  <1>     ret
   323                              <1> .getDTA:            ;ah = 2Fh
   324 0000031A 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   325 00000321 488B1D(CF000000)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
   326 00000328 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
   327 0000032C C3                  <1>     ret
   328                              <1> .getDOSversion:     ;ah = 30h
   329 0000032D 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   330 00000334 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   331 00000336 886209              <1>     mov byte [rdx + callerFrame.rbx + 1], ah    ;Clear bh 
   332 00000339 668B05C0FCFFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   333 00000340 668902              <1>     mov word [rdx + callerFrame.rax], ax    ;Save ax
   334 00000343 C3                  <1>     ret
   335                              <1> .terminateStayRes:  ;ah = 31h
   336                              <1> .getDeviceDPBptr:   ;ah = 32h
   337                              <1> .ctrlBreakCheck:    ;ah = 33h
   338 00000344 84C0                <1>     test al, al
   339 00000346 7406                <1>     jz .cbcget  ;Get the state
   340 00000348 8815(F2000000)      <1>     mov byte [breakFlag], dl    ;Set the state
   341                              <1> .cbcget:
   342 0000034E 8A15(F2000000)      <1>     mov dl, byte [breakFlag]    ;Get the state
   343 00000354 C3                  <1>     ret
   344                              <1> .getInDOSflagPtr:   ;ah = 34h
   345 00000355 488D15(C8000000)    <1>     lea rdx, inDOS
   346 0000035C 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   347 00000363 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx  ;save ptr in rbx
   348 00000367 C3                  <1>     ret
   349                              <1> .getIntVector:      ;ah = 35h
   350                              <1> ;Called with:
   351                              <1> ;   al = Interrupt Number
   352                              <1> ;Returns:
   353                              <1> ;   rbx = Pointer to interrupt handler
   354 00000368 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   355 0000036A B807F00000          <1>     mov eax, 0F007h
   356 0000036F CD35                <1>     int 35h
   357 00000371 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   358 00000378 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx  ;Save pointer in rbx
   359 0000037C 8A02                <1>     mov al, byte [rdx + callerFrame.rax]    ;Get the low byte in al
   360 0000037E C3                  <1>     ret
   361                              <1> .getDiskFreeSpace:  ;ah = 36h
   362                              <1> .getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
   363                              <1> .getsetCountryInfo: ;ah = 38h, localisation info
   364                              <1> .makeDIR:           ;ah = 39h
   365                              <1> .removeDIR:         ;ah = 3Ah
   366                              <1> .changeCurrentDIR:  ;ah = 3Bh, changes directory for current drive
   367                              <1> .createFileHdl:     ;ah = 3Ch, handle function
   368                              <1> .openFileHdl:       ;ah = 3Dh, handle function
   369                              <1> .closeFileHdl:      ;ah = 3Eh, handle function
   370                              <1> .readFileHdl:       ;ah = 3Fh, handle function
   371                              <1> .writeFileHdl:      ;ah = 40h, handle function
   372                              <1> .deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   373                              <1> .movFileReadPtr:    ;ah = 42h, handle function, LSEEK
   374                              <1> .changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   375                              <1> .ioctrl:            ;ah = 44h, handle function
   376                              <1> .duplicateHandle:   ;ah = 45h, handle function
   377                              <1> .forceDuplicateHdl: ;ah = 46h, handle function
   378                              <1> .getCurrentDIR:     ;ah = 47h
   379                              <1> .allocateMemory:    ;ah = 48h
   380                              <1> .freeMemory:        ;ah = 49h
   381                              <1> .reallocMemory:     ;ah = 4Ah
   382                              <1> .loadExecChild:     ;ah = 4Bh, EXEC
   383                              <1> .terminateClean:    ;ah = 4Ch, EXIT
   384                              <1> .getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   385                              <1> .findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   386                              <1> .findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   387                              <1> .setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   388 0000037F 48891D(D7000000)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   389 00000386 C3                  <1>     ret
   390                              <1> .getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   391 00000387 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   392 0000038E 488B15(D7000000)    <1>     mov rdx, qword [currentPSP]
   393 00000395 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx   ;Set the caller pointer
   394 00000399 C3                  <1>     ret 
   395                              <1> .getSysVarsPtr:     ;ah = 52h
   396 0000039A 488D15(67000000)    <1>     lea rdx, sysVarsPtr
   397 000003A1 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   398 000003A8 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx
   399 000003AC C3                  <1>     ret
   400                              <1> .createDPB:         ;ah = 53h, generates a DPB from a given BPB
   401                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   402                              <1> ;This is done so that the other fields of the DPB can be recycled
   403                              <1> ;Input: rsi = ptr to the BPB
   404                              <1> ;       rbp = ptr to the DPB
   405                              <1> ;bMediaDescriptor
   406 000003AD 8A4615              <1>     mov al, byte [rsi + bpb.media]
   407 000003B0 884524              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   408                              <1> ;bAccessFlag
   409 000003B3 C64525FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Not accessed
   410                              <1> ;dFirstFreeCluster
   411 000003B7 C7452E00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   412                              <1> ;dNumberOfFreeClusters
   413 000003BE C74532FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   414                              <1> ;bBytesPerSectorShift
   415 000003C5 668B460B            <1>     mov ax, word [rsi + bpb.bytsPerSec]
   416 000003C9 B107                <1>     mov cl, 7   ;Start with 128 byte sectors (not supported, min 512)
   417 000003CB 66D3E8              <1>     shr ax, cl  ;Shift down
   418                              <1> .cd0:
   419 000003CE 66D1E8              <1>     shr ax, 1
   420 000003D1 7404                <1>     jz .cd1
   421 000003D3 FEC1                <1>     inc cl
   422 000003D5 EBF7                <1>     jmp short .cd0
   423                              <1> .cd1:
   424 000003D7 884D02              <1>     mov byte [rbp + dpb.bBytesPerSectorShift], cl
   425                              <1> ;bMaxSectorInCluster
   426 000003DA 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   427 000003DD FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   428 000003DF 884503              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   429                              <1> ;bSectorsPerClusterShift
   430 000003E2 FEC0                <1>     inc al
   431 000003E4 30C9                <1>     xor cl, cl
   432                              <1> .cd2:
   433 000003E6 D0E8                <1>     shr al, 1
   434 000003E8 7404                <1>     jz .cd3
   435 000003EA FEC1                <1>     inc cl
   436 000003EC EBF8                <1>     jmp short .cd2
   437                              <1> .cd3:
   438 000003EE 884D04              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   439                              <1> ;dFAToffset, number of hidden sectors + number of reserved sectors
   440 000003F1 0FB7460E            <1>     movzx eax, word [rsi + bpb.revdSecCnt]
   441 000003F5 03461C              <1>     add eax, dword [rsi + bpb.hiddSec] 
   442 000003F8 894505              <1>     mov dword [rbp + dpb.dFAToffset], eax
   443                              <1> ;bNumberOfFATs
   444 000003FB 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   445 000003FE 884509              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   446                              <1> ;wNumberRootDirSectors
   447 00000401 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   448 00000405 C1E005              <1>     shl eax, 5  ;Multiply by 32
   449 00000408 0FB74E0B            <1>     movzx ecx, word [rsi + bpb.bytsPerSec]
   450 0000040C FFC9                <1>     dec ecx
   451 0000040E 01C8                <1>     add eax, ecx
   452 00000410 31D2                <1>     xor edx, edx    ;Clear for divide
   453 00000412 F7F1                <1>     div ecx ;Divide 0:eax by ecx, (e)ax has number of clusters
   454 00000414 6689450A            <1>     mov word [rbp + dpb.wNumberRootDirSectors], ax  ;0 for FAT32
   455                              <1> ;dFATlength, get the FAT length
   456 00000418 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   457 0000041C 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   458 0000041F 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   459 00000421 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   460 00000424 894514              <1>     mov dword [rbp + dpb.dFATlength], eax
   461                              <1> ;Complex cases below...
   462                              <1> ;dClusterHeapOffset, start sector of the data area
   463 00000427 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   464 0000042B 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   465 0000042E 85C0                <1>     test eax, eax
   466 00000430 0F44C3              <1>     cmovz eax, ebx
   467                              <1> ;eax = FATsz
   468 00000433 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   469 00000437 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   470 0000043A 85DB                <1>     test ebx, ebx
   471 0000043C 0F44D9              <1>     cmovz ebx, ecx 
   472                              <1> ;ebx = TotSec
   473 0000043F 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   474 00000442 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   475                              <1> .cd4:
   476 00000444 01C2                <1>     add edx, eax
   477 00000446 FEC9                <1>     dec cl
   478 00000448 75FA                <1>     jnz .cd4
   479 0000044A 89D0                <1>     mov eax, edx    ;Store product in eax
   480 0000044C 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   481 00000450 01D0                <1>     add eax, edx
   482 00000452 0FB7550A            <1>     movzx edx, word [rbp + dpb.wNumberRootDirSectors]
   483 00000456 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   484                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   485                              <1>     ;aka eax = Start sector of the data area in volume
   486 00000458 89450C              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   487                              <1> ;dClusterCount
   488 0000045B 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   489 0000045D 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   490 0000045F 31D2                <1>     xor edx, edx
   491 00000461 BB01000000          <1>     mov ebx, 1
   492 00000466 8A4D04              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   493 00000469 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   494 0000046B F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   495 0000046D FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   496 0000046F 894510              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   497                              <1> ;dFirstUnitOfRootDir
   498 00000472 3DF5FF0000          <1>     cmp eax, 65525  ;If above, its FAT32
   499 00000477 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   500 0000047A 7709                <1>     ja .cd5
   501                              <1>     ;Else, we need to find the first sector of the root directory
   502                              <1>     ;Get the start sector of data area in volume 
   503                              <1>     ; and sub the number of sectors in the root directory
   504 0000047C 8B450C              <1>     mov eax, dword [rbp + dpb.dClusterHeapOffset]
   505 0000047F 0FB75D0A            <1>     movzx ebx, word [rbp + dpb.wNumberRootDirSectors]
   506 00000483 29D8                <1>     sub eax, ebx    ;eax now has start sector of root dir
   507                              <1> .cd5:
   508 00000485 894518              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   509                              <1> ;Exit epilogue
   510 00000488 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   511 0000048F 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   512 00000491 C3                  <1>     ret
   513                              <1> .getVerifySetting:  ;ah = 54h
   514 00000492 8A05(F3000000)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   515 00000498 C3                  <1>     ret
   516                              <1> .createPSP:         ;ah = 55h, creates a PSP for a program
   517                              <1> .renameFile:        ;ah = 56h
   518                              <1> .getSetFileDateTime:;ah = 57h
   519                              <1> .getsetMallocStrat: ;ah = 58h
   520                              <1> .getExtendedError:  ;ah = 59h
   521                              <1> .createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   522                              <1> .createNewFile:     ;ah = 5Bh
   523                              <1> .lockUnlockFile:    ;ah = 5Ch
   524                              <1> .getCritErrorInfo:  ;ah = 5Dh
   525                              <1> .networkServices:   ;ah = 5Eh, do nothing
   526                              <1> .networkRedirection:;ah = 5Fh, do nothing
   527                              <1> .trueName:          ;ah = 60h, get fully qualified name
   528                              <1>                     ;ah = 61h, reserved
   529                              <1> .getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   530 00000499 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   531 000004A0 488B15(D7000000)    <1>     mov rdx, qword [currentPSP]
   532 000004A7 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx  ;Save the current psp in rbx
   533 000004AB C3                  <1>     ret
   534                              <1>                     ;ah = 63h, reserved
   535                              <1> .setDriverLookahead:;ah = 64h, reserved
   536                              <1> .getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
   537                              <1> .getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
   538                              <1> .setHandleCount:    ;ah = 67h
   539                              <1> .commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   540                              <1> .getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   541                              <1> .return:
   542 000004AC C3                  <1>     ret
   543                              <1> 
   544                              <1> 
   545                              <1> .dispatchTable:
   546 000004AD [A101000000000000]  <1>     dq .simpleTerminate     ;AH = 00H, PROCESS MANAGEMENT
   547 000004B5 [A201000000000000]  <1>     dq .stdinReadEcho       ;AH = 01H, CHAR IO
   548 000004BD [1702000000000000]  <1>     dq .stdoutWrite         ;AH = 02H, CHAR IO
   549 000004C5 [5102000000000000]  <1>     dq .stdauxRead          ;AH = 03H, CHAR IO
   550 000004CD [5102000000000000]  <1>     dq .stdauxWrite         ;AH = 04H, CHAR IO
   551 000004D5 [5102000000000000]  <1>     dq .stdprnWrite         ;AH = 05H, CHAR IO
   552 000004DD [5102000000000000]  <1>     dq .directCONIO         ;AH = 06H, CHAR IO
   553 000004E5 [5102000000000000]  <1>     dq .waitDirectInNoEcho  ;AH = 07H, CHAR IO
   554 000004ED [8B02000000000000]  <1>     dq .waitStdinNoEcho     ;AH = 08H, CHAR IO
   555 000004F5 [8C02000000000000]  <1>     dq .printString         ;AH = 09H, CHAR IO
   556 000004FD [CE02000000000000]  <1>     dq .buffStdinInput      ;AH = 0AH, CHAR IO
   557 00000505 [CE02000000000000]  <1>     dq .checkStdinStatus    ;AH = 0BH, CHAR IO
   558 0000050D [CE02000000000000]  <1>     dq .clearbuffDoFunc     ;AH = 0CH, CHAR IO
   559 00000515 [CE02000000000000]  <1>     dq .diskReset           ;AH = 0DH, DISK MANAGEMENT
   560 0000051D [CE02000000000000]  <1>     dq .selectDisk          ;AH = 0EH, DISK MANAGEMENT
   561 00000525 [CE02000000000000]  <1>     dq .openFileFCB         ;AH = 0FH, FILE OPERATION       FCB
   562 0000052D [CE02000000000000]  <1>     dq .closeFileFCB        ;AH = 10H, FILE OPERATION       FCB
   563 00000535 [CE02000000000000]  <1>     dq .findFirstFileFCB    ;AH = 11H, FILE OPERATION       FCB
   564 0000053D [CE02000000000000]  <1>     dq .findNextFileFCB     ;AH = 12H, FILE OPERATION       FCB
   565 00000545 [CE02000000000000]  <1>     dq .deleteFileFCB       ;AH = 13H, FILE OPERATION       FCB
   566 0000054D [CE02000000000000]  <1>     dq .sequentialReadFCB   ;AH = 14H, RECORD OPERATION     FCB
   567 00000555 [CE02000000000000]  <1>     dq .sequentialWriteFCB  ;AH = 15H, RECORD OPERTAION     FCB
   568 0000055D [CE02000000000000]  <1>     dq .createFileFCB       ;AH = 16H, FILE OPERATION       FCB
   569 00000565 [CE02000000000000]  <1>     dq .renameFileFCB       ;AH = 17H, FILE OPERATION       FCB
   570 0000056D [AC04000000000000]  <1>     dq .return              ;AH = 18H, RESERVED
   571 00000575 [CE02000000000000]  <1>     dq .getCurrentDisk      ;AH = 19H, DISK MANAGEMENT
   572 0000057D [D502000000000000]  <1>     dq .setDTA              ;AH = 1AH, RECORD OPERATION     F/H
   573 00000585 [E802000000000000]  <1>     dq .FATinfoDefault      ;AH = 1BH, DISK MANAGEMENT
   574 0000058D [E802000000000000]  <1>     dq .FatinfoDevice       ;AH = 1CH, DISK MANAGEMENT
   575 00000595 [AC04000000000000]  <1>     dq .return              ;AH = 1DH, RESERVED
   576 0000059D [AC04000000000000]  <1>     dq .return              ;AH = 1EH, RESERVED
   577 000005A5 [E802000000000000]  <1>     dq .getCurrentDPBptr    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
   578 000005AD [AC04000000000000]  <1>     dq .return              ;AH = 20H, RESERVED
   579 000005B5 [E802000000000000]  <1>     dq .randomReadFCB       ;AH = 21H, RECORD OPERATION     FCB
   580 000005BD [E802000000000000]  <1>     dq .randomWriteFCB      ;AH = 22H, RECORD OPERATION     FCB
   581 000005C5 [E802000000000000]  <1>     dq .getFileSizeFCB      ;AH = 23H, FILE OPERATION       FCB
   582 000005CD [E802000000000000]  <1>     dq .setRelRecordFCB     ;AH = 24H, RECORD OPERATION     FCB
   583 000005D5 [E802000000000000]  <1>     dq .setIntVector        ;AH = 25H, MISC. SYS. FUNCTION
   584 000005DD [1303000000000000]  <1>     dq .createNewPSP        ;AH = 26H, PROCESS MANAGEMENT
   585 000005E5 [1303000000000000]  <1>     dq .randBlockReadFCB    ;AH = 27H, RECORD OPERATION     FCB
   586 000005ED [1303000000000000]  <1>     dq .randBlockWriteFCB   ;AH = 28H, RECORD OPERATION     FCB
   587 000005F5 [1303000000000000]  <1>     dq .parseFilenameFCB    ;AH = 29H, FILE OPERATION       FCB
   588 000005FD [1303000000000000]  <1>     dq .getDate             ;AH = 2AH, TIME AND DATE
   589 00000605 [1303000000000000]  <1>     dq .setDate             ;AH = 2BH, TIME AND DATE
   590 0000060D [1303000000000000]  <1>     dq .getTime             ;AH = 2CH, TIME AND DATE
   591 00000615 [1303000000000000]  <1>     dq .setTime             ;AH = 2DH, TIME AND DATE
   592 0000061D [1303000000000000]  <1>     dq .setResetVerify      ;AH = 2EH, DISK MANAGEMENT
   593 00000625 [1A03000000000000]  <1>     dq .getDTA              ;AH = 2FH, RECORD OPERATION     F/H
   594 0000062D [2D03000000000000]  <1>     dq .getDOSversion       ;AH = 30H, MISC. SYS. FUNCTION
   595 00000635 [4403000000000000]  <1>     dq .terminateStayRes    ;AH = 31H, PROCESS MANAGEMENT
   596 0000063D [4403000000000000]  <1>     dq .getDeviceDPBptr     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
   597 00000645 [4403000000000000]  <1>     dq .ctrlBreakCheck      ;AH = 33H, MISC. SYS. FUNCTION
   598 0000064D [5503000000000000]  <1>     dq .getInDOSflagPtr     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
   599 00000655 [6803000000000000]  <1>     dq .getIntVector        ;AH = 35H, MISC. SYS. FUNCTION
   600 0000065D [7F03000000000000]  <1>     dq .getDiskFreeSpace    ;AH = 36H, DISK MANAGEMENT
   601 00000665 [7F03000000000000]  <1>     dq .getsetSwitchChar    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
   602 0000066D [7F03000000000000]  <1>     dq .getsetCountryInfo   ;AH = 38H, MISC. SYS. FUNCTION
   603 00000675 [7F03000000000000]  <1>     dq .makeDIR             ;AH = 39H, DIRECTORY OPERATION
   604 0000067D [7F03000000000000]  <1>     dq .removeDIR           ;AH = 3AH, DIRECTORY OPERATION
   605 00000685 [7F03000000000000]  <1>     dq .changeCurrentDIR    ;AH = 3BH, DIRECTORY OPERATION
   606 0000068D [7F03000000000000]  <1>     dq .createFileHdl       ;AH = 3CH, FILE OPERATION       HANDLE
   607 00000695 [7F03000000000000]  <1>     dq .openFileHdl         ;AH = 3DH, FILE OPERATION       HANDLE
   608 0000069D [7F03000000000000]  <1>     dq .closeFileHdl        ;AH = 3EH, FILE OPERATION       HANDLE
   609 000006A5 [7F03000000000000]  <1>     dq .readFileHdl         ;AH = 3FH, RECORD OPERATION     HANDLE
   610 000006AD [7F03000000000000]  <1>     dq .writeFileHdl        ;AH = 40H, RECORD OPERATION     HANDLE
   611 000006B5 [7F03000000000000]  <1>     dq .deleteFileHdl       ;AH = 41H, FILE OPERATION       HANDLE
   612 000006BD [7F03000000000000]  <1>     dq .movFileReadPtr      ;AH = 42H, RECORD OPERATION     HANDLE
   613 000006C5 [7F03000000000000]  <1>     dq .changeFileModeHdl   ;AH = 43H, FILE OPERATION       HANDLE
   614 000006CD [7F03000000000000]  <1>     dq .ioctrl              ;AH = 44H, MISC. SYS. FUNCTION
   615 000006D5 [7F03000000000000]  <1>     dq .duplicateHandle     ;AH = 45H, FILE OPERATION       HANDLE
   616 000006DD [7F03000000000000]  <1>     dq .forceDuplicateHdl   ;AH = 46H, FILE OPERATION       HANDLE
   617 000006E5 [7F03000000000000]  <1>     dq .getCurrentDIR       ;AH = 47H, DIRECTORY OPERATION
   618 000006ED [7F03000000000000]  <1>     dq .allocateMemory      ;AH = 48H, MEMORY MANAGEMENT
   619 000006F5 [7F03000000000000]  <1>     dq .freeMemory          ;AH = 49H, MEMORY MANAGEMENT
   620 000006FD [7F03000000000000]  <1>     dq .reallocMemory       ;AH = 4AH, MEMORY MANAGEMENT
   621 00000705 [7F03000000000000]  <1>     dq .loadExecChild       ;AH = 4BH, PROCESS MANAGEMENT
   622 0000070D [7F03000000000000]  <1>     dq .terminateClean      ;AH = 4CH, PROCESS MANAGEMENT
   623 00000715 [7F03000000000000]  <1>     dq .getRetCodeChild     ;AH = 4DH, PROCESS MANAGEMENT
   624 0000071D [7F03000000000000]  <1>     dq .findFirstFileHdl    ;AH = 4EH, FILE OPERATION       HANDLE
   625 00000725 [7F03000000000000]  <1>     dq .findNextFileHdl     ;AH = 4FH, FILE OPERATION       HANDLE
   626 0000072D [7F03000000000000]  <1>     dq .setCurrProcessID    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   627 00000735 [8703000000000000]  <1>     dq .getCurrProcessID    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   628 0000073D [9A03000000000000]  <1>     dq .getSysVarsPtr       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   629 00000745 [AD03000000000000]  <1>     dq .createDPB           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   630 0000074D [9204000000000000]  <1>     dq .getVerifySetting    ;AH = 54H, DISK MANAGEMENT
   631 00000755 [9904000000000000]  <1>     dq .createPSP           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   632 0000075D [9904000000000000]  <1>     dq .renameFile          ;AH = 56H, FILE OPERATION       HANDLE
   633 00000765 [9904000000000000]  <1>     dq .getSetFileDateTime  ;AH = 57H, FILE OPERATION       HANDLE
   634 0000076D [9904000000000000]  <1>     dq .getsetMallocStrat   ;AH = 58H, MEMORY MANAGEMENT
   635 00000775 [9904000000000000]  <1>     dq .getExtendedError    ;AH = 59H, MISC. SYS. FUNCTION
   636 0000077D [9904000000000000]  <1>     dq .createUniqueFile    ;AH = 5AH, FILE OPERATION       HANDLE
   637 00000785 [9904000000000000]  <1>     dq .createNewFile       ;AH = 5BH, FILE OPERATION       HANDLE
   638 0000078D [9904000000000000]  <1>     dq .lockUnlockFile      ;AH = 5CH, RECORD OPERATION     HANDLE
   639 00000795 [9904000000000000]  <1>     dq .getCritErrorInfo    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   640 0000079D [9904000000000000]  <1>     dq .networkServices     ;AH = 5EH, RESERVED NETWORK FUNCTION
   641 000007A5 [9904000000000000]  <1>     dq .networkRedirection  ;AH = 5FH, RESERVED NETWORK FUNCTION
   642 000007AD [9904000000000000]  <1>     dq .trueName            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   643 000007B5 [AC04000000000000]  <1>     dq .return              ;AH = 61H, RESERVED
   644 000007BD [9904000000000000]  <1>     dq .getPSPaddr          ;AH = 62H, PROCESS MANAGEMENT
   645 000007C5 [AC04000000000000]  <1>     dq .return              ;AH = 63H, RESERVED
   646 000007CD [AC04000000000000]  <1>     dq .setDriverLookahead  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   647 000007D5 [AC04000000000000]  <1>     dq .getExtLocalInfo     ;AH = 65H, MISC. SYS. FUNCTION
   648 000007DD [AC04000000000000]  <1>     dq .getsetGlobalCP      ;AH = 66H, MISC. SYS. FUNCTION
   649 000007E5 [AC04000000000000]  <1>     dq .setHandleCount      ;AH = 67H, FILE OPERAITON       F/H
   650 000007ED [AC04000000000000]  <1>     dq .commitFile          ;AH = 68H, FILE OPERATION       HANDLE
   651 000007F5 [AC04000000000000]  <1>     dq .getsetDiskSerial    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   652                              <1> dispatchTableL  equ $ - .dispatchTable 
   653                              <1> 
   654                              <1> terminateHandler:   ;Int 42h
   655                              <1> ctrlCHandler:       ;Int 43h
   656                              <1> critErrorHandler:   ;Int 44h
   657                              <1> ;User Stack in usage here, must be swapped to before this is called
   658                              <1> ;Entered with:  
   659                              <1> ;               AH = Critical Error Bitfield
   660                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
   661                              <1> ;               Bit 6 - Reserved
   662                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
   663                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
   664                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
   665                              <1> ;               Bits [2-1] = Affected Disk Error
   666                              <1> ;                     0 0   DOS area
   667                              <1> ;                     0 1   FAT area
   668                              <1> ;                     1 0   Directory area
   669                              <1> ;                     1 1   Data area
   670                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   671                              <1> ;               AL  = Failing drive number if AH[7] = 0
   672                              <1> ;               DIL = Error code for errorMsg
   673                              <1> ;               RSI = EA of Device Header for which device the error occured
   674                              <1> ;Return:
   675                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
   676                              <1> ;                  = 1 - Retry the Operation    (Retry)
   677                              <1> ;                  = 2 - Terminate the Program  (Abort)
   678                              <1> ;                  = 3 - Fail the DOS call      (Fail)
   679 000007FD 53                  <1>     push rbx
   680 000007FE 51                  <1>     push rcx
   681 000007FF 52                  <1>     push rdx
   682 00000800 57                  <1>     push rdi
   683 00000801 56                  <1>     push rsi
   684 00000802 FC                  <1>     cld         ;Make String ops go forward
   685                              <1> 
   686 00000803 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
   687 00000806 488D155E020000      <1>     lea rdx, qword [.crlf]
   688 0000080D B409                <1>     mov ah, 09h ;Print String
   689 0000080F CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
   690                              <1> 
   691 00000811 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
   692 00000817 B90C000000          <1>     mov ecx, 0Ch
   693 0000081C 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
   694 0000081E 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
   695 00000821 480FB7FF            <1>     movzx rdi, di
   696 00000825 4889FA              <1>     mov rdx, rdi    ;Copy error code
   697 00000828 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
   698 0000082C 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
   699 0000082F 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
   700 00000832 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
   701 00000839 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
   702 0000083D B409                <1>     mov ah, 09h ;Print String
   703 0000083F CD41                <1>     int 41h     ;Call DOS to print first part of message
   704                              <1> 
   705 00000841 488D1505020000      <1>     lea rdx, qword [.readmsg]
   706 00000848 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
   707 0000084F F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
   708 00000852 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
   709 00000856 B409                <1>     mov ah, 09h ;Print String
   710 00000858 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
   711                              <1> 
   712 0000085A F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
   713 0000085D 0F85DF000000        <1>     jnz .charError
   714                              <1> ;Disk error continues here
   715 00000863 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
   716 0000086A B409                <1>     mov ah, 09h
   717 0000086C CD41                <1>     int 41h
   718 0000086E 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
   719 00000870 80C241              <1>     add dl, "A" ;Add ASCII code
   720 00000873 B402                <1>     mov ah, 02h ;Print char in dl
   721 00000875 CD41                <1>     int 41h
   722                              <1> .userInput:
   723 00000877 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
   724 0000087E B409                <1>     mov ah, 09h
   725 00000880 CD41                <1>     int 41h
   726                              <1> ;Abort, Retry, Ignore, Fail is word order
   727                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   728                              <1> .userAbort:
   729                              <1> ;Abort is always an option
   730 00000882 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
   731 00000889 B409                <1>     mov ah, 09h
   732 0000088B CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
   733                              <1> .userRetry:
   734 0000088D F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   735 00000890 7416                <1>     jz .userIgnore    ;If clear, dont print message
   736 00000892 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
   737 00000899 B409                <1>     mov ah, 09h
   738 0000089B CD41                <1>     int 41h
   739 0000089D 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
   740 000008A4 B409                <1>     mov ah, 09h
   741 000008A6 CD41                <1>     int 41h
   742                              <1> .userIgnore:
   743 000008A8 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   744 000008AB 7416                <1>     jz .userFail
   745 000008AD 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
   746 000008B4 B409                <1>     mov ah, 09h
   747 000008B6 CD41                <1>     int 41h
   748 000008B8 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
   749 000008BF B409                <1>     mov ah, 09h
   750 000008C1 CD41                <1>     int 41h
   751                              <1> .userFail:
   752 000008C3 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   753 000008C6 7416                <1>     jz .userMsgEnd
   754 000008C8 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
   755 000008CF B409                <1>     mov ah, 09h
   756 000008D1 CD41                <1>     int 41h
   757 000008D3 488D15A7010000      <1>     lea rdx, qword [.failmsg]
   758 000008DA B409                <1>     mov ah, 09h
   759 000008DC CD41                <1>     int 41h
   760                              <1> .userMsgEnd:
   761 000008DE 488D15A4010000      <1>     lea rdx, qword [.endMsg]
   762 000008E5 B409                <1>     mov ah, 09h
   763 000008E7 CD41                <1>     int 41h
   764                              <1> ;Get user input now 
   765 000008E9 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   766 000008EB 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   767 000008F2 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   768 000008F4 CD41                <1>     int 41h ;Get char in al
   769 000008F6 3C61                <1>     cmp al, "a" ;Chack if lowercase
   770 000008F8 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   771 000008FA 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   772                              <1> .uip1:
   773 000008FC AE                  <1>     scasb   ;Compare char to list, offset gives return code
   774 000008FD 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   775 000008FF FFC1                <1>     inc ecx
   776 00000901 81F904000000        <1>     cmp ecx, 4
   777 00000907 75F3                <1>     jne .uip1
   778 00000909 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   779                              <1> .validInput:
   780 0000090E 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   781                              <1> ;Now check if the input is permitted
   782 00000910 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   783 00000912 7427                <1>     je .cehExit
   784 00000914 84C0                <1>     test al, al ;Check if 0 => Ignore
   785 00000916 740F                <1>     je .viIgnore
   786 00000918 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   787 0000091A 7416                <1>     je .viRetry
   788                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   789 0000091C F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   790 0000091F 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   791 00000925 EB14                <1>     jmp short .cehExit
   792                              <1> .viIgnore:
   793 00000927 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   794 0000092A 0F8447FFFFFF        <1>     jz .userInput
   795 00000930 EB09                <1>     jmp short .cehExit
   796                              <1> .viRetry:
   797 00000932 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   798 00000935 0F843CFFFFFF        <1>     jz .userInput
   799                              <1> .cehExit:
   800 0000093B 5E                  <1>     pop rsi
   801 0000093C 5F                  <1>     pop rdi
   802 0000093D 5A                  <1>     pop rdx
   803 0000093E 59                  <1>     pop rcx
   804 0000093F 5B                  <1>     pop rbx
   805 00000940 48CF                <1>     iretq
   806                              <1> .charError:
   807 00000942 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   808 00000947 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   809                              <1> .ce1:
   810 0000094E AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   811 0000094F 88C2                <1>     mov dl, al  ;Move char into dl
   812 00000951 B402                <1>     mov ah, 02h
   813 00000953 CD41                <1>     int 41h ;Print char
   814 00000955 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   815 00000957 E91BFFFFFF          <1>     jmp .userInput
   816                              <1> 
   817                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   818 0000095C 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   818 00000965 746563742024202020  <1>
   819 0000096E 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   819 00000977 6E6974202420202020  <1>
   820 00000980 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   820 00000989 202420202020202020  <1>
   821 00000992 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   821 0000099B 6F6D6D616E64202420  <1>
   822 000009A4 446174612024202020- <1>             db "Data $            "       ;Error 4
   822 000009AD 202020202020202020  <1>
   823 000009B6 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   823 000009BF 737420242020202020  <1>
   824 000009C8 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   824 000009D1 202020202020202020  <1>
   825 000009DA 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   825 000009E3 656469612024202020  <1>
   826 000009EC 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   826 000009F5 7420466F756E642024  <1>
   827 000009FE 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   827 00000A07 706572202420202020  <1>
   828 00000A10 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   828 00000A19 6C7420242020202020  <1>
   829 00000A22 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   829 00000A2B 742024202020202020  <1>
   830 00000A34 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   830 00000A3D 61696C757265202420  <1>
   831                              <1> 
   832 00000A46 64726976652024      <1> .drive      db "drive $"
   833 00000A4D 6572726F7220726561- <1> .readmsg    db "error reading $"
   833 00000A56 64696E672024        <1>
   834 00000A5C 6572726F7220777269- <1> .writemsg   db "error writing $"
   834 00000A65 74696E672024        <1>
   835 00000A6B 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   836 00000A6E 41626F727424        <1> .abortmsg   db "Abort$" 
   837 00000A74 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   838 00000A7B 526574727924        <1> .retrymsg   db "Retry$"
   839 00000A81 4661696C24          <1> .failmsg    db "Fail$"
   840 00000A86 2C2024              <1> .betweenMsg db ", $"
   841 00000A89 3F2024              <1> .endMsg     db "? $"
   842 00000A8C 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   843                              <1> absDiskRead:        ;Int 45h
   844                              <1> ;al = Drive number
   845                              <1> ;rbx = Memory Buffer address
   846                              <1> ;ecx = Number of sectors to read (max 255 for now)
   847                              <1> ;rdx = Start LBA to read from
   848 00000A90 480FB6C0            <1>     movzx rax, al   ;Zero extend DOS drive number 
   849 00000A94 8A80[84150000]      <1>     mov al, byte [msdDriver.msdBIOSmap + rax] ;Get translated BIOS num into al
   850 00000A9A 4891                <1>     xchg rax, rcx
   851 00000A9C 4887CA              <1>     xchg rcx, rdx
   852 00000A9F B482                <1>     mov ah, 82h
   853 00000AA1 CD33                <1>     int 33h
   854 00000AA3 48CF                <1>     iretq
   855                              <1> absDiskWrite:       ;Int 46h
   856 00000AA5 480FB6C0            <1>     movzx rax, al   ;Zero extend DOS drive number 
   857 00000AA9 8A80[84150000]      <1>     mov al, byte [msdDriver.msdBIOSmap + rax] ;Get translated BIOS num into al
   858 00000AAF 4891                <1>     xchg rax, rcx
   859 00000AB1 4887CA              <1>     xchg rcx, rdx
   860 00000AB4 B483                <1>     mov ah, 83h
   861 00000AB6 CD33                <1>     int 33h
   862 00000AB8 48CF                <1>     iretq
   863                              <1> terminateResident:  ;Int 47h
   864                              <1> inDosHandler:       ;Int 48h
   865                              <1> ;Called when DOS idle
   866 00000ABA 48CF                <1>     iretq
   867                              <1> fastOutput:         ;Int 49h
   868                              <1> ;Called with char to transfer in al
   869 00000ABC 50                  <1>     push rax
   870 00000ABD B40E                <1>     mov ah, 0Eh
   871 00000ABF CD30                <1>     int 30h
   872 00000AC1 58                  <1>     pop rax
   873 00000AC2 48CF                <1>     iretq
   874                              <1> passCommand:        ;Int 4Eh, hooked by COMMAND.COM
   875 00000AC4 48CF                <1>     iretq
   876                              <1> multiplex:          ;Int 4Fh, kept as iretq for now
   877 00000AC6 48CF                <1>     iretq
    13                                  %include "dosDrivers.asm"
    14                              <1> ;-----------------------------------:
    15                              <1> ;          Driver routines          :
    16                              <1> ;-----------------------------------:
    17                              <1> drivers:
    18                              <1> conHdr:
    19 00000AC8 [EA0A000000000000]  <1>     dq auxHdr
    20 00000AD0 1308                <1>     dw 0813h
    21 00000AD2 [680C000000000000]  <1>     dq commonStrat
    22 00000ADA [770C000000000000]  <1>     dq conDriver
    23 00000AE2 434F4E2020202020    <1>     db "CON     "
    24                              <1> auxHdr:
    25 00000AEA [0C0B000000000000]  <1>     dq prnHdr
    26 00000AF2 0080                <1>     dw 08000h
    27 00000AF4 [680C000000000000]  <1>     dq commonStrat
    28 00000AFC [3C0F000000000000]  <1>     dq com1Intr
    29 00000B04 4155582020202020    <1>     db "AUX     "
    30                              <1> prnHdr:
    31 00000B0C [2E0B000000000000]  <1>     dq clkHdr
    32 00000B14 40A0                <1>     dw 0A040h
    33 00000B16 [700C000000000000]  <1>     dq nulStrat
    34 00000B1E [760C000000000000]  <1>     dq nulIntr
    35 00000B26 50524E2020202020    <1>     db "PRN     "
    36                              <1> clkHdr:
    37 00000B2E [500B000000000000]  <1>     dq msdHdr
    38 00000B36 0880                <1>     dw 08008h
    39 00000B38 [680C000000000000]  <1>     dq commonStrat
    40 00000B40 [AF0D000000000000]  <1>     dq clkDriver
    41 00000B48 434C4F434B242020    <1>     db "CLOCK$  "
    42                              <1> msdHdr:
    43 00000B50 [720B000000000000]  <1>     dq com1Hdr
    44 00000B58 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    45 00000B5A [680C000000000000]  <1>     dq commonStrat
    46 00000B62 [E110000000000000]  <1>     dq msdDriver
    47 00000B6A 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    48                              <1> com1Hdr:
    49 00000B72 [940B000000000000]  <1>     dq com2Hdr
    50 00000B7A 0080                <1>     dw 08000h
    51 00000B7C [680C000000000000]  <1>     dq commonStrat
    52 00000B84 [3C0F000000000000]  <1>     dq com1Intr
    53 00000B8C 434F4D3120202020    <1>     db "COM1    "
    54                              <1> com2Hdr:
    55 00000B94 [B60B000000000000]  <1>     dq com3Hdr
    56 00000B9C 0080                <1>     dw 08000h
    57 00000B9E [680C000000000000]  <1>     dq commonStrat
    58 00000BA6 [450F000000000000]  <1>     dq com2Intr
    59 00000BAE 434F4D3220202020    <1>     db "COM2    "
    60                              <1> com3Hdr:
    61 00000BB6 [D80B000000000000]  <1>     dq com4Hdr
    62 00000BBE 0080                <1>     dw 08000h
    63 00000BC0 [680C000000000000]  <1>     dq commonStrat
    64 00000BC8 [4E0F000000000000]  <1>     dq com3Intr
    65 00000BD0 434F4D3320202020    <1>     db "COM3    "
    66                              <1> com4Hdr:
    67 00000BD8 [FA0B000000000000]  <1>     dq lpt1Hdr
    68 00000BE0 0080                <1>     dw 08000h
    69 00000BE2 [680C000000000000]  <1>     dq commonStrat
    70 00000BEA [570F000000000000]  <1>     dq com4Intr
    71 00000BF2 434F4D3420202020    <1>     db "COM4    "
    72                              <1> lpt1Hdr:
    73 00000BFA [1C0C000000000000]  <1>     dq lpt2Hdr
    74 00000C02 40A0                <1>     dw 0A040h
    75 00000C04 [700C000000000000]  <1>     dq nulStrat
    76 00000C0C [760C000000000000]  <1>     dq nulIntr
    77 00000C14 4C50543120202020    <1>     db "LPT1    "
    78                              <1> lpt2Hdr:
    79 00000C1C [3E0C000000000000]  <1>     dq lpt3Hdr
    80 00000C24 40A0                <1>     dw 0A040h
    81 00000C26 [700C000000000000]  <1>     dq nulStrat
    82 00000C2E [760C000000000000]  <1>     dq nulIntr
    83 00000C36 4C50543220202020    <1>     db "LPT2    "
    84                              <1> lpt3Hdr:
    85 00000C3E FFFFFFFFFFFFFFFF    <1>     dq -1
    86 00000C46 40A0                <1>     dw 0A040h
    87 00000C48 [700C000000000000]  <1>     dq nulStrat
    88 00000C50 [760C000000000000]  <1>     dq nulIntr
    89 00000C58 4C50543320202020    <1>     dq "LPT3    "
    90 00000C60 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    91                              <1> commonStrat:
    92                              <1> ;DOS calls this function with rbx=Ptr to request header
    93 00000C68 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    94 00000C6F C3                  <1>     ret
    95                              <1> nulStrat:
    96 00000C70 66C743030001        <1>     mov word [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
    97                              <1> nulIntr:
    98 00000C76 C3                  <1>     ret
    99                              <1> 
   100                              <1> conDriver:
   101 00000C77 50                  <1>     push rax
   102 00000C78 53                  <1>     push rbx
   103 00000C79 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
   104 00000C80 B003                <1>     mov al, 03h ;Unknown Command
   105 00000C82 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   106 00000C86 7735                <1>     ja .conWriteErrorCode ;If yes, error!
   107                              <1> 
   108 00000C88 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   109 00000C8B 3C04                <1>     cmp al, 4
   110 00000C8D 743D                <1>     jz .conRead
   111 00000C8F 3C05                <1>     cmp al, 5
   112 00000C91 747F                <1>     jz .conNondestructiveRead
   113 00000C93 3C06                <1>     cmp al, 6
   114 00000C95 0F84A8000000        <1>     jz .conInputStatus
   115 00000C9B 3C07                <1>     cmp al, 7
   116 00000C9D 0F84B0000000        <1>     jz .conFlushInputBuffers
   117 00000CA3 3C08                <1>     cmp al, 8
   118 00000CA5 0F84CA000000        <1>     jz .conWrite
   119 00000CAB 3C09                <1>     cmp al, 9
   120 00000CAD 0F84C2000000        <1>     jz .conWrite
   121 00000CB3 3C0A                <1>     cmp al, 0Ah
   122 00000CB5 0F84E3000000        <1>     jz .conOutputStatus
   123 00000CBB EB06                <1>     jmp short .conExit  ;All other valid functions return done
   124                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
   125 00000CBD B480                <1>     mov ah, 80h ;Set error bit
   126 00000CBF 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   127                              <1> .conExit:
   128 00000CC3 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   129 00000CC9 5B                  <1>     pop rbx
   130 00000CCA 58                  <1>     pop rax
   131 00000CCB C3                  <1>     ret
   132                              <1> .conRead:    ;Function 4
   133 00000CCC B005                <1>     mov al, 05h ;Bad request structure length?
   134 00000CCE 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   135 00000CD1 75EA                <1>     jne .conWriteErrorCode
   136                              <1> 
   137 00000CD3 57                  <1>     push rdi
   138 00000CD4 51                  <1>     push rcx
   139 00000CD5 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   140 00000CD9 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   141                              <1> .cre1:
   142 00000CDB 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   143 00000CDE 741C                <1>     je .cre2
   144 00000CE0 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
   145 00000CE7 751A                <1>     jnz .cre3   ;No, get the buffer value
   146 00000CE9 31C0                <1>     xor eax, eax
   147 00000CEB CD36                <1>     int 36h
   148                              <1> .cre11:
   149 00000CED AA                  <1>     stosb
   150 00000CEE 84C0                <1>     test al, al ;Was the ascii code 0?
   151 00000CF0 7506                <1>     jnz .cre12  ;No, skip storing scancode
   152 00000CF2 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
   153                              <1> .cre12:
   154 00000CF8 FFC1                <1>     inc ecx ;Inc chars stored in buffer
   155 00000CFA EBDF                <1>     jmp short .cre1
   156                              <1> .cre2:
   157 00000CFC 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   158 00000CFF 59                  <1>     pop rcx
   159 00000D00 5F                  <1>     pop rdi
   160 00000D01 EBC0                <1>     jmp short .conExit
   161                              <1> .cre3:
   162 00000D03 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   163 00000D09 C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   164 00000D10 EBDB                <1>     jmp short .cre11
   165                              <1> 
   166                              <1> .conNondestructiveRead:  ;Function 5
   167 00000D12 B005                <1>     mov al, 05h ;Bad request structure length?
   168 00000D14 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   169 00000D17 75A4                <1>     jne .conWriteErrorCode
   170 00000D19 803D8E00000000      <1>     cmp byte [.conBuf], 0
   171 00000D20 7519                <1>     jnz .cnr2
   172 00000D22 B401                <1>     mov ah, 01h     ;Get key if exists
   173 00000D24 CD36                <1>     int 36h
   174 00000D26 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   175                              <1>     ;Keystroke available
   176                              <1> .cnr0:
   177 00000D28 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Move char in al
   178 00000D2B E993FFFFFF          <1>     jmp .conExit
   179                              <1> .cnr1: ;No keystroke available
   180 00000D30 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 0200h   ;Set busy bit
   181 00000D36 E988FFFFFF          <1>     jmp .conExit
   182                              <1> .cnr2:
   183 00000D3B 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   184 00000D41 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   185                              <1> 
   186                              <1> .conInputStatus:         ;Function 6
   187 00000D43 B005                <1>     mov al, 05h ;Bad request structure length?
   188 00000D45 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   189 00000D48 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   190 00000D4E E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   191                              <1> 
   192                              <1> .conFlushInputBuffers:   ;Function 7
   193 00000D53 B005                <1>     mov al, 05h ;Bad request structure length?
   194 00000D55 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   195 00000D58 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   196 00000D5E C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   197                              <1> .cfib0:
   198 00000D65 B401                <1>     mov ah, 01      ;Get buffer status
   199 00000D67 CD36                <1>     int 36h
   200 00000D69 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   201 00000D6F 30E4                <1>     xor ah, ah
   202 00000D71 CD36                <1>     int 36h ;Read key to flush from buffer
   203 00000D73 EBF0                <1>     jmp short .cfib0
   204                              <1> 
   205                              <1> .conWrite:   ;Function 8 and 9
   206 00000D75 B005                <1>     mov al, 05h ;Bad request structure length?
   207 00000D77 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   208 00000D7A 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   209                              <1> 
   210 00000D80 56                  <1>     push rsi
   211 00000D81 51                  <1>     push rcx
   212 00000D82 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   213 00000D86 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   214                              <1> .cw1: 
   215 00000D88 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   216 00000D8B 7407                <1>     je .cw2
   217 00000D8D AC                  <1>     lodsb   ;Get char into al, and inc rsi
   218 00000D8E CD49                <1>     int 49h ;Fast print char
   219 00000D90 FFC1                <1>     inc ecx
   220 00000D92 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   221                              <1> .cw2:
   222 00000D94 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   223 00000D97 59                  <1>     pop rcx
   224 00000D98 5E                  <1>     pop rsi
   225 00000D99 E925FFFFFF          <1>     jmp .conExit
   226                              <1> .conOutputStatus:   ;Function 0Ah
   227 00000D9E B005                <1>     mov al, 05h ;Bad request structure length?
   228 00000DA0 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   229 00000DA3 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   230 00000DA9 E915FFFFFF          <1>     jmp .conExit
   231                              <1> 
   232 00000DAE 00                  <1> .conBuf db 0    ;Single byte buffer
   233                              <1> clkDriver:
   234 00000DAF 50                  <1>     push rax
   235 00000DB0 53                  <1>     push rbx
   236 00000DB1 51                  <1>     push rcx
   237 00000DB2 52                  <1>     push rdx
   238 00000DB3 56                  <1>     push rsi
   239 00000DB4 55                  <1>     push rbp
   240 00000DB5 488B1DA4FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   241 00000DBC B003                <1>     mov al, 03h ;Unknown Command
   242 00000DBE 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   243 00000DC2 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   244                              <1> 
   245 00000DC4 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   246 00000DC7 3C04                <1>     cmp al, 04h
   247 00000DC9 7437                <1>     jz .clkRead
   248 00000DCB 3C06                <1>     cmp al, 06h
   249 00000DCD 0F8494000000        <1>     jz .clkInputStatus
   250 00000DD3 3C07                <1>     cmp al, 07h
   251 00000DD5 0F8498000000        <1>     jz .clkFlushInputBuffers
   252 00000DDB 3C08                <1>     cmp al, 08h
   253 00000DDD 0F84A0000000        <1>     jz .clkWrite
   254 00000DE3 3C09                <1>     cmp al, 09h
   255 00000DE5 0F8498000000        <1>     jz .clkWrite
   256 00000DEB EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   257                              <1> .clkNotFunctioning:
   258 00000DED B002                <1>     mov al, 02h ;Device not ready error
   259                              <1> .clkWriteErrorCode:
   260 00000DEF B480                <1>     mov ah, 80h ;Set error bit
   261 00000DF1 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   262                              <1> .clkExit:
   263 00000DF5 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   264 00000DFB 5D                  <1>     pop rbp
   265 00000DFC 5E                  <1>     pop rsi
   266 00000DFD 5A                  <1>     pop rdx
   267 00000DFE 59                  <1>     pop rcx
   268 00000DFF 5B                  <1>     pop rbx
   269 00000E00 58                  <1>     pop rax
   270 00000E01 C3                  <1>     ret
   271                              <1> 
   272                              <1> .clkRead:           ;Function 4
   273 00000E02 B005                <1>     mov al, 05h ;Bad request structure length?
   274 00000E04 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   275 00000E07 75E6                <1>     jne .clkWriteErrorCode
   276                              <1> 
   277 00000E09 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   278 00000E0C 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   279 00000E10 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   280 00000E17 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   281 00000E1B 30E4                <1>     xor ah, ah
   282 00000E1D CD3A                <1>     int 3Ah         ;Read the system timer
   283 00000E1F 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   284 00000E21 740D                <1>     jz .clkr1       ;Nope, now just time 
   285 00000E23 30E4                <1>     xor ah, ah
   286                              <1>     ;This works as al should keep count of the # of days passed since last read
   287 00000E25 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   288 00000E29 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   289                              <1> .clkr1:
   290 00000E30 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   291 00000E33 0FB7D2              <1>     movzx edx, dx
   292 00000E36 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   293 00000E38 89D0                <1>     mov eax, edx
   294 00000E3A 31D2                <1>     xor edx, edx
   295 00000E3C 89D8                <1>     mov eax, ebx
   296 00000E3E B944040000          <1>     mov ecx, 1092   
   297 00000E43 F7F1                <1>     div ecx
   298 00000E45 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   299 00000E48 89D0                <1>     mov eax, edx    ;Get remainder in eax
   300 00000E4A 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   301 00000E4E 31D2                <1>     xor edx, edx
   302 00000E50 B95B000000          <1>     mov ecx, 91 ;5*18.2
   303 00000E55 F7F1                <1>     div ecx
   304 00000E57 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   305 00000E5A 89D0                <1>     mov eax, edx    ;Get remainder in eax
   306                              <1>     ;lea eax, dword [eax + 4*eax]
   307                              <1>     ;add eax, edx    ;Essentially multiply by 6
   308 00000E5C 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   309 00000E5F 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   310 00000E62 E98EFFFFFF          <1>     jmp .clkExit
   311                              <1> 
   312                              <1> .clkInputStatus:    ;Function 6
   313                              <1> ;Always return ready
   314 00000E67 B005                <1>     mov al, 05h ;Bad request structure length?
   315 00000E69 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   316 00000E6C 7581                <1>     jne .clkWriteErrorCode
   317 00000E6E E982FFFFFF          <1>     jmp .clkExit
   318                              <1> .clkFlushInputBuffers:  ;Function 7
   319                              <1> ;Always return done immediately
   320 00000E73 B005                <1>     mov al, 05h ;Bad request structure length?
   321 00000E75 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   322 00000E78 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   323 00000E7E E972FFFFFF          <1>     jmp .clkExit
   324                              <1> 
   325                              <1> .clkWrite:          ;Functions 8 and 9
   326 00000E83 B005                <1>     mov al, 05h ;Bad request structure length?
   327 00000E85 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   328 00000E88 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   329                              <1> 
   330 00000E8E 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   331 00000E91 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   332 00000E95 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   333 00000E99 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   334                              <1> 
   335 00000EA0 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   336 00000EA2 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   337 00000EA6 B105                <1>     mov cl, 5
   338 00000EA8 F6F1                <1>     div cl          ;Divide al by 5
   339 00000EAA 30E4                <1>     xor ah, ah      ;Remove the remainder
   340 00000EAC 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   341                              <1> ;Using the decimal part of this formula for the low count
   342                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   343 00000EAE 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   344 00000EB1 B912000000          <1>     mov ecx, 18
   345 00000EB6 F7E1                <1>     mul ecx  
   346 00000EB8 01C3                <1>     add ebx, eax
   347                              <1> 
   348 00000EBA 31D2                <1>     xor edx, edx
   349 00000EBC 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   350 00000EC0 B944040000          <1>     mov ecx, 1092
   351 00000EC5 F7E1                <1>     mul ecx
   352 00000EC7 01C3                <1>     add ebx, eax
   353 00000EC9 89DA                <1>     mov edx, ebx    ;edx now has low count
   354 00000ECB 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   355 00000ECF B401                <1>     mov ah, 01h     ;Set the system time
   356 00000ED1 CD3A                <1>     int 3Ah
   357                              <1> 
   358 00000ED3 4889F3              <1>     mov rbx, rsi
   359 00000ED6 E91AFFFFFF          <1>     jmp .clkExit
   360                              <1> 
   361                              <1> .clkBCDtoHex:
   362                              <1> ;Converts a BCD value to a Hex byte
   363                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   364 00000EDB 51                  <1>     push rcx
   365 00000EDC 0FB6C0              <1>     movzx eax, al   ;Zero extend
   366 00000EDF 89C1                <1>     mov ecx, eax    ;Save al in ecx
   367 00000EE1 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   368 00000EE6 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   369 00000EEC C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   370                              <1> .cbth0:
   371 00000EEF 050A000000          <1>     add eax, 10
   372 00000EF4 E2F9                <1>     loop .cbth0
   373 00000EF6 59                  <1>     pop rcx
   374 00000EF7 C3                  <1>     ret
   375                              <1> 
   376                              <1> .clkHexToBCD:
   377                              <1> ;Converts a Hex byte into two BCD digits
   378                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   379 00000EF8 51                  <1>     push rcx
   380 00000EF9 0FB6C0              <1>     movzx eax, al   ;Zero extend
   381 00000EFC 31C9                <1>     xor ecx, ecx
   382                              <1> .chtb0:
   383 00000EFE 3D0A000000          <1>     cmp eax, 10
   384 00000F03 7209                <1>     jb .chtb1
   385 00000F05 2D0A000000          <1>     sub eax, 10
   386 00000F0A FFC1                <1>     inc ecx
   387 00000F0C EBF0                <1>     jmp short .chtb0
   388                              <1> .chtb1:
   389 00000F0E C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   390 00000F11 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   391 00000F13 59                  <1>     pop rcx
   392 00000F14 C3                  <1>     ret
   393 00000F15 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   394                              <1> ;When counting the number of days, first compute the number of years since
   395                              <1> ; 1980 and your year. 
   396                              <1> ;Then, using the table below, find the number of leap years between 1980
   397                              <1> ; and (YourYear - 1). 
   398                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   399                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   400                              <1> ;Use the months table to get the number of days in a normal month as leap 
   401                              <1> ; years are added using the previous comment.
   402                              <1> ;Finally check if the date is after 28th Feb. If it is, check if your year is 
   403                              <1> ; a leap year using the table. If it is, add an extra day.
   404                              <1> .clkLeapYears:
   405 00000F17 0004080C1014181C20- <1>     db 00, 04, 08, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 
   405 00000F20 24282C30            <1>
   406 00000F24 34383C4044484C5054- <1>     db 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96
   406 00000F2D 585C60              <1>
   407                              <1> .clkMonths:
   408 00000F30 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   408 00000F39 1F1E1F              <1>
   409                              <1> ;COM Driver headers and main interrupt strat
   410                              <1> com1Intr:
   411 00000F3C C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   412 00000F43 EB19                <1>     jmp short comIntr
   413                              <1> com2Intr:
   414 00000F45 C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   415 00000F4C EB10                <1>     jmp short comIntr
   416                              <1> com3Intr:
   417 00000F4E C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   418 00000F55 EB07                <1>     jmp short comIntr
   419                              <1> com4Intr:
   420 00000F57 C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   421                              <1> comIntr:
   422 00000F5E 50                  <1>     push rax
   423 00000F5F 53                  <1>     push rbx
   424 00000F60 51                  <1>     push rcx
   425 00000F61 52                  <1>     push rdx
   426 00000F62 56                  <1>     push rsi
   427 00000F63 57                  <1>     push rdi
   428 00000F64 488B1DF5FCFFFF      <1>     mov rbx, qword [reqHdrPtr]
   429 00000F6B B003                <1>     mov al, 03h ;Unknown Command
   430 00000F6D 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   431 00000F71 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   432                              <1> 
   433 00000F73 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   434 00000F76 3C04                <1>     cmp al, 4   ;Read Character(s)
   435 00000F78 7462                <1>     jz .comRead
   436 00000F7A 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   437 00000F7C 0F849B000000        <1>     jz .comNondestructiveRead   
   438 00000F82 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   439 00000F84 0F8484000000        <1>     jz .comReadInputStatus
   440 00000F8A 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   441 00000F8C 0F84B9000000        <1>     jz .comFlushInputBuffers
   442 00000F92 3C08                <1>     cmp al, 8
   443 00000F94 0F84DB000000        <1>     jz .comWrite
   444 00000F9A 3C09                <1>     cmp al, 9
   445 00000F9C 0F84D3000000        <1>     jz .comWrite
   446 00000FA2 3C0A                <1>     cmp al, 0Ah
   447 00000FA4 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   448 00000FAA EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   449                              <1> .comErrorNoCount:
   450 00000FAC B002                <1>     mov al, 02h ;Unknown device
   451 00000FAE EB19                <1>     jmp short .comWriteErrorCode
   452                              <1> .comReadError:
   453 00000FB0 BA0B000000          <1>     mov edx, 0Bh
   454                              <1> .comWriteError:
   455 00000FB5 BA0A000000          <1>     mov edx, 0Ah
   456                              <1> .comError:
   457 00000FBA 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   458 00000FBD B902000000          <1>     mov ecx, 02h    ;Unknown device
   459 00000FC2 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   460 00000FC4 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   461 00000FC7 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   462                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   463 00000FC9 B480                <1>     mov ah, 80h ;Set error bit
   464 00000FCB 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   465                              <1> .comExit:
   466 00000FCF 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   467 00000FD5 5F                  <1>     pop rdi
   468 00000FD6 5E                  <1>     pop rsi
   469 00000FD7 5A                  <1>     pop rdx
   470 00000FD8 59                  <1>     pop rcx
   471 00000FD9 5B                  <1>     pop rbx
   472 00000FDA 58                  <1>     pop rax
   473 00000FDB C3                  <1>     ret
   474                              <1> 
   475                              <1> .comRead:
   476 00000FDC B005                <1>     mov al, 05h ;Bad request structure length?
   477 00000FDE 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   478 00000FE1 75E6                <1>     jne .comWriteErrorCode
   479                              <1> 
   480 00000FE3 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   481 00000FE7 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   482                              <1> .cr1:
   483 00000FE9 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   484 00000FEC 741B                <1>     je .cre2
   485                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   486 00000FEE B802000000          <1>     mov eax, 02h    ;Recieve 
   487 00000FF3 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   488 00000FF9 6698                <1>     cbw     ;Zero extend to upper byte
   489 00000FFB CD34                <1>     int 34h ;Recieve Char
   490 00000FFD 72BB                <1>     jc .comError
   491 00000FFF 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   492 00001002 74EA                <1>     je .cr11
   493 00001004 AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   494 00001005 FFC1                <1>     inc ecx
   495 00001007 EBE0                <1>     jmp short .cr1
   496                              <1> .cre2:
   497 00001009 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   498 0000100C EBC1                <1>     jmp short .comExit
   499                              <1> 
   500                              <1> .comReadInputStatus:
   501 0000100E B005                <1>     mov al, 05h ;Bad request structure length?
   502 00001010 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   503 00001013 75B4                <1>     jne .comWriteErrorCode
   504 00001015 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   505 0000101B EBB2                <1>     jmp short .comExit
   506                              <1> 
   507                              <1> .comNondestructiveRead:
   508                              <1> ;Acts like a "read one character if there is one" function
   509 0000101D B005                <1>     mov al, 05h ;Bad request structure length?
   510 0000101F 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   511 00001022 75A5                <1>     jne .comWriteErrorCode
   512                              <1> .cndr1:
   513 00001024 B802000000          <1>     mov eax, 02h    ;Recieve 
   514 00001029 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   515 0000102F 6698                <1>     cbw     ;Zero extend to upper byte
   516 00001031 CD34                <1>     int 34h ;Recieve Char
   517 00001033 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   518 00001039 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   519 0000103C 7405                <1>     je .cndr2
   520 0000103E 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Get next char
   521 00001041 EB8C                <1>     jmp short .comExit
   522                              <1> .cndr2:
   523 00001043 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 200h ;Busy bit set
   524 00001049 EB84                <1>     jmp short .comExit
   525                              <1> 
   526                              <1> .comFlushInputBuffers:
   527 0000104B B005                <1>     mov al, 05h ;Bad request structure length?
   528 0000104D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   529 00001050 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   530                              <1> .cfib0:
   531 00001056 8A1584000000        <1>     mov dl, byte [.comDevice]
   532 0000105C 6698                <1>     cbw
   533 0000105E B802000000          <1>     mov eax, 02h    ;Recieve
   534 00001063 CD34                <1>     int 34h
   535 00001065 0F8241FFFFFF        <1>     jc .comErrorNoCount
   536 0000106B 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   537 0000106E 75E6                <1>     jne .cfib0
   538 00001070 E95AFFFFFF          <1>     jmp .comExit
   539                              <1> 
   540                              <1> .comWrite:
   541 00001075 B005                <1>     mov al, 05h ;Bad request structure length?
   542 00001077 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   543 0000107A 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   544                              <1> 
   545 00001080 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   546 00001084 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   547                              <1> .cw1: 
   548 00001086 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   549 00001089 7417                <1>     je .cw2
   550 0000108B AC                  <1>     lodsb   ;Get char into al, and inc rsi
   551 0000108C B401                <1>     mov ah, 01h ;Move function number into ah
   552 0000108E 8A154C000000        <1>     mov dl, byte [.comDevice]
   553 00001094 6698                <1>     cbw     ;Zero extend to upper byte
   554 00001096 CD34                <1>     int 34h ;Transmit char
   555 00001098 0F821CFFFFFF        <1>     jc .comError
   556 0000109E FFC1                <1>     inc ecx
   557 000010A0 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   558                              <1> .cw2:
   559 000010A2 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   560 000010A5 E925FFFFFF          <1>     jmp .comExit
   561                              <1> 
   562                              <1> .comOutputStatus:
   563                              <1> ;Read MODEM status
   564 000010AA B005                <1>     mov al, 05h ;Bad request structure length?
   565 000010AC 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   566 000010AF 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   567                              <1> 
   568 000010B5 8A1525000000        <1>     mov dl, byte [.comDevice]
   569 000010BB 6698                <1>     cbw     ;Zero extend to upper byte
   570 000010BD B403                <1>     mov ah, 03h     ;Get status
   571 000010BF CD34                <1>     int 34h
   572 000010C1 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   573 000010C7 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   574 000010CC C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   575 000010CF F7D0                <1>     not eax      ;Bitwise inversion
   576 000010D1 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   577 000010D6 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   578 000010DB E9EFFEFFFF          <1>     jmp .comExit
   579 000010E0 00                  <1> .comDevice   db 0
   580                              <1> 
   581                              <1> msdDriver:
   582 000010E1 50                  <1>     push rax
   583 000010E2 53                  <1>     push rbx
   584 000010E3 51                  <1>     push rcx
   585 000010E4 52                  <1>     push rdx
   586 000010E5 56                  <1>     push rsi
   587 000010E6 57                  <1>     push rdi
   588 000010E7 55                  <1>     push rbp
   589 000010E8 4150                <1>     push r8
   590 000010EA 488B1D6FFBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
   591 000010F1 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   592 000010F5 B003                <1>     mov al, 03h
   593 000010F7 0F87F9000000        <1>     ja .msdWriteErrorCode ;If yes, error!
   594 000010FD B001                <1>     mov al, 01h ;Unknown Unit Error
   595 000010FF 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
   596 00001103 0F87ED000000        <1>     ja .msdWriteErrorCode ;If yes, error!
   597 00001109 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
   598 0000110C 84C0                <1>     test al, al
   599 0000110E 0F84F8000000        <1>     jz .msdInit
   600 00001114 3C01                <1>     cmp al, 01
   601 00001116 0F84C9010000        <1>     jz .msdMedChk
   602 0000111C 3C02                <1>     cmp al, 02
   603 0000111E 0F8439020000        <1>     jz .msdBuildBPB
   604 00001124 3C03                <1>     cmp al, 03
   605 00001126 0F84A6020000        <1>     jz .msdIOCTLRead
   606 0000112C 3C04                <1>     cmp al, 04
   607 0000112E 0F84AE020000        <1>     jz .msdRead
   608 00001134 3C08                <1>     cmp al, 08
   609 00001136 0F84E2020000        <1>     jz .msdWrite
   610 0000113C 3C09                <1>     cmp al, 09
   611 0000113E 0F8416030000        <1>     jz .msdWriteVerify
   612 00001144 3C0C                <1>     cmp al, 12
   613 00001146 0F8457030000        <1>     jz .msdIOCTLWrite
   614 0000114C 3C0D                <1>     cmp al, 13
   615 0000114E 0F845F030000        <1>     jz .msdDevOpen
   616 00001154 3C0E                <1>     cmp al, 14
   617 00001156 0F8476030000        <1>     jz .msdDevClose
   618 0000115C 3C0F                <1>     cmp al, 15
   619 0000115E 0F848D030000        <1>     jz .msdRemovableMedia
   620 00001164 3C13                <1>     cmp al, 19
   621 00001166 0F84B2030000        <1>     jz .msdGenericIOCTL
   622 0000116C 3C17                <1>     cmp al, 23
   623 0000116E 0F84BA030000        <1>     jz .msdGetLogicalDev
   624 00001174 3C18                <1>     cmp al, 24
   625 00001176 0F84CB030000        <1>     jz .msdSetLogicalDev
   626 0000117C EB7E                <1>     jmp short .msdDriverExit    ;All other valid functions exit done
   627                              <1> .msdIOError:  ;In Read and Write errors, rbp points to the dev struc
   628 0000117E 4889EB              <1>     mov rbx, rbp
   629 00001181 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
   630 00001184 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
   631 00001186 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
   632                              <1> ;Now fall through to general error
   633                              <1> .msdGenDiskError:
   634 00001189 B401                <1>     mov ah, 01h
   635 0000118B 30D2                <1>     xor dl, dl  ;Work around bug that fails request if dl > 7Fh
   636 0000118D CD33                <1>     int 33h ;Read status of last operation
   637 0000118F 80FC06              <1>     cmp ah, 06h ;Mock Seek response (device not present)
   638 00001192 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
   639 00001194 7460                <1>     je .msdWriteErrorCode 
   640 00001196 B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
   641 00001198 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
   642 0000119B 7459                <1>     je .msdWriteErrorCode 
   643 0000119D 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
   644 000011A0 7454                <1>     je .msdWriteErrorCode
   645                              <1> ;Device Not Ready
   646 000011A2 B002                <1>     mov al, 02h  ;Device not ready code
   647 000011A4 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   648 000011A7 744D                <1>     je .msdWriteErrorCode
   649 000011A9 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   650 000011AD 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   651                              <1> ;Write Protected
   652 000011B1 30C0                <1>     xor al, al
   653 000011B3 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   654 000011B8 743C                <1>     je .msdWriteErrorCode
   655                              <1> ;CRC Error
   656 000011BA B004                <1>     mov al, 04h     ;CRC error code
   657 000011BC 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   658 000011C1 7433                <1>     je .msdWriteErrorCode
   659 000011C3 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   660 000011C8 742C                <1>     je .msdWriteErrorCode
   661 000011CA 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   662 000011CF 7425                <1>     je .msdWriteErrorCode
   663                              <1> ;Seek Error
   664 000011D1 B006                <1>     mov al, 06h     ;Seek error code
   665 000011D3 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   666 000011D6 741E                <1>     je .msdWriteErrorCode
   667                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   668                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   669 000011D8 B007                <1>     mov al, 07h
   670 000011DA 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   671 000011DD 7417                <1>     je .msdWriteErrorCode
   672                              <1> ;Sector Not Found
   673 000011DF B008                <1>     mov al, 08h     ;Sector not found code
   674 000011E1 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   675 000011E4 7410                <1>     je .msdWriteErrorCode
   676                              <1> ;Write faults
   677 000011E6 B00A                <1>     mov al, 0Ah     ;Write fault
   678 000011E8 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   679 000011EB 7409                <1>     je .msdWriteErrorCode
   680                              <1> ;Read faults
   681 000011ED B00B                <1>     mov al, 0Bh     ;Read fault
   682 000011EF 80F911              <1>     cmp cl, 11h     ;Read error
   683 000011F2 7402                <1>     je .msdWriteErrorCode
   684                              <1> ;General Errors
   685 000011F4 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   686                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   687 000011F6 B480                <1>     mov ah, 80h ;Set error bit
   688 000011F8 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   689                              <1> .msdDriverExit:
   690 000011FC 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
   691 00001202 4158                <1>     pop r8
   692 00001204 5D                  <1>     pop rbp
   693 00001205 5F                  <1>     pop rdi
   694 00001206 5E                  <1>     pop rsi
   695 00001207 5A                  <1>     pop rdx
   696 00001208 59                  <1>     pop rcx
   697 00001209 5B                  <1>     pop rbx
   698 0000120A 58                  <1>     pop rax
   699 0000120B C3                  <1>     ret
   700                              <1> .msdInit:            ;Function 0
   701 0000120C B005                <1>     mov al, 05h ;Bad request structure length
   702 0000120E 803B1F              <1>     cmp byte [rbx + drvReqHdr.hdrlen], initReqPkt_size
   703 00001211 75E3                <1>     jne .msdWriteErrorCode
   704                              <1> 
   705 00001213 488D2DF4050000      <1>     lea rbp, endptr
   706 0000121A 48896B0E            <1>     mov qword [rbx + initReqPkt.endptr], rbp    ;Where the end is gonna be
   707 0000121E 488D2D69030000      <1>     lea rbp, .msdBPBTbl
   708 00001225 48896B16            <1>     mov qword [rbx + initReqPkt.optptr], rbp    ;Where bpb tbl is gonna be
   709                              <1> 
   710 00001229 4889DD              <1>     mov rbp, rbx ;Save the req block ptr in rbp
   711 0000122C 31D2                <1>     xor edx, edx  ;Start from device zero
   712 0000122E 88550D              <1>     mov byte [rbp + initReqPkt.numunt], dl   ;Zero this field, max 5
   713                              <1> .mi0:   ;Now check each device for partitions
   714 00001231 807D0D05            <1>     cmp byte [rbp + initReqPkt.numunt], 5
   715 00001235 746C                <1>     je .msdExit ;IF we are at 5 now, we exit
   716 00001237 B482                <1>     mov ah, 82h ;LBA read
   717 00001239 B001                <1>     mov al, 1   ;1 sector
   718 0000123B B900000000          <1>     mov ecx, 0  ;Read sector 0
   719 00001240 488D1D(2C040000)    <1>     lea rbx, msdTempBuffer  ;Get address of this space
   720 00001247 CD33                <1>     int 33h
   721 00001249 0F828E000000        <1>     jc .msdInitError
   722                              <1> ;Now we verify if this is a BPB. Removable devices can't be partitioned (yet)
   723                              <1> ;1) Check byte 0 for EBh (short jmp) and byte 2 for a 90h (nop).
   724 0000124F 8A03                <1>     mov al, byte [rbx]
   725 00001251 8A6302              <1>     mov ah, byte [rbx + 2]
   726 00001254 663DEB90            <1>     cmp ax, 090EBh
   727 00001258 7573                <1>     jne .mimbr
   728                              <1> ;Valid BPB found! Copy to internal table and inc lastdrive
   729 0000125A 4889DE              <1>     mov rsi, rbx
   730 0000125D B878000000          <1>     mov eax, bpbEx_size
   731 00001262 89D1                <1>     mov ecx, edx    ;Temporarily save dl in ecx
   732 00001264 F7E2                <1>     mul edx
   733 00001266 89CA                <1>     mov edx, ecx
   734 00001268 488D3D47030000      <1>     lea rdi, .msdBPBblks
   735 0000126F 4801C7              <1>     add rdi, rax
   736 00001272 B978000000          <1>     mov ecx, bpbEx_size
   737 00001277 4889F8              <1>     mov rax, rdi    ;Save the entry address in rax
   738 0000127A F3A4                <1>     rep movsb   ;Copy the bpb into the bpb table
   739 0000127C 488D3D0B030000      <1>     lea rdi, .msdBPBTbl
   740 00001283 488D3CD7            <1>     lea rdi, qword [rdi + 8*rdx]
   741 00001287 488907              <1>     mov qword [rdi], rax
   742 0000128A 488D3DF3020000      <1>     lea rdi, .msdBIOSmap
   743 00001291 4801D7              <1>     add rdi, rdx    ;rdx contains a number, table is a list of bytes
   744 00001294 8817                <1>     mov byte [rdi], dl
   745 00001296 FE450D              <1>     inc byte [rbp + initReqPkt.numunt]
   746 00001299 FEC2                <1>     inc dl
   747 0000129B 3A15(09000000)      <1>     cmp dl, byte [numRemMSD] ;Once these are equal, we have processed last dev
   748 000012A1 758E                <1>     jne .mi0
   749                              <1> .msdExit:
   750                              <1> ;If one device only, copy its BPB pointer and drive number
   751                              <1> ;When HDD support implemented, this will check the number of remdevs not lastdrv
   752 000012A3 807D0D01            <1>     cmp byte [rbp + initReqPkt.numunt], 1
   753 000012A7 751C                <1>     jne .msdexit1
   754                              <1> ;Here ONLY if one device found
   755 000012A9 488D35DE020000      <1>     lea rsi, .msdBPBTbl
   756 000012B0 488D7E08            <1>     lea rdi, qword [rsi + 8]    ;Point to next entry
   757 000012B4 48A5                <1>     movsq   ;Copy pointer
   758 000012B6 488D35C7020000      <1>     lea rsi, .msdBIOSmap
   759 000012BD 488D7E01            <1>     lea rdi, qword [rsi + 1]
   760 000012C1 A4                  <1>     movsb   ;Copy byte
   761 000012C2 FE450D              <1>     inc byte [rbp + initReqPkt.numunt]
   762                              <1> .msdexit1:
   763 000012C5 4889EB              <1>     mov rbx, rbp
   764 000012C8 E92FFFFFFF          <1>     jmp .msdDriverExit
   765                              <1> .mimbr:
   766                              <1> ;Goto next device without incrementing LASTDRIVE
   767 000012CD FEC2                <1>     inc dl
   768 000012CF 3A15(09000000)      <1>     cmp dl, byte [numRemMSD] ;Once these are equ, we have processed last dev
   769 000012D5 0F8556FFFFFF        <1>     jne .mi0
   770 000012DB EBC6                <1>     jmp short .msdExit
   771                              <1> .msdInitError:
   772 000012DD 4889EB              <1>     mov rbx, rbp
   773 000012E0 E9A4FEFFFF          <1>     jmp .msdGenDiskError
   774                              <1> .msdMedChk:          ;Function 1
   775                              <1> ;Once the BIOS function is implmented that reads the changeline, use that!
   776                              <1> ;For BIOSes that dont support the changeline, the following procedure will 
   777                              <1> ; suffice.
   778 000012E5 B005                <1>     mov al, 05h ;Bad request structure length
   779 000012E7 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   780 000012EA 0F8506FFFFFF        <1>     jne .msdWriteErrorCode
   781                              <1> 
   782 000012F0 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   783 000012F5 488D0D88020000      <1>     lea rcx, .msdBIOSmap
   784 000012FC 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   785 000012FF F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   786 00001302 7550                <1>     jnz .mmcNoChange
   787                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   788 00001304 B416                <1>     mov ah, 16h 
   789 00001306 CD33                <1>     int 33h
   790 00001308 0F827BFEFFFF        <1>     jc .msdGenDiskError
   791 0000130E 80FC80              <1>     cmp ah, 80h
   792 00001311 740E                <1>     je .mmcNoChangeLine
   793 00001313 80FC86              <1>     cmp ah, 86h
   794 00001316 7409                <1>     je .mmcNoChangeLine
   795 00001318 84E4                <1>     test ah, ah ;No change?
   796 0000131A 7438                <1>     jz .mmcNoChange
   797 0000131C F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   798 0000131F 7516                <1>     jnz .mmcChange
   799                              <1> ;If nothing, fall through and test manually, should never happen though
   800                              <1> .mmcNoChangeLine:
   801                              <1> ;Now we test Media Descriptor
   802 00001321 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   803 00001324 488D3D63020000      <1>     lea rdi, .msdBPBTbl
   804 0000132B 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax]
   805 0000132F 488B3F              <1>     mov rdi, qword [rdi]    ;Dereference rdi
   806 00001332 385715              <1>     cmp byte [rdi + bpb32.media], dl    ;Compare media descriptor bytes
   807 00001335 7414                <1>     je .mmcUnsure
   808                              <1> .mmcChange:
   809 00001337 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   810 0000133B 488D0538020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   811 00001342 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   812 00001346 E9B1FEFFFF          <1>     jmp .msdDriverExit
   813                              <1> .mmcUnsure:
   814 0000134B C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   815 0000134F E9A8FEFFFF          <1>     jmp .msdDriverExit
   816                              <1> .mmcNoChange:
   817 00001354 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   818 00001358 E99FFEFFFF          <1>     jmp .msdDriverExit
   819                              <1> 
   820                              <1> .msdBuildBPB:        ;Function 2
   821 0000135D B005                <1>     mov al, 05h ;Bad request structure length
   822 0000135F 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   823 00001362 0F858EFEFFFF        <1>     jne .msdWriteErrorCode
   824                              <1> 
   825 00001368 4889DE              <1>     mov rsi, rbx
   826 0000136B 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   827 00001370 488D0D0D020000      <1>     lea rcx, .msdBIOSmap
   828 00001377 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   829 0000137A 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   830 0000137E 31C9                <1>     xor ecx, ecx    ;Read Sector 0
   831 00001380 B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   832 00001385 CD33                <1>     int 33h
   833 00001387 0F82FCFDFFFF        <1>     jc .msdGenDiskError
   834                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   835 0000138D 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   836 00001391 7418                <1>     je .mbbpb0
   837 00001393 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   838 00001397 7412                <1>     je .mbbpb0
   839 00001399 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   840 0000139D 740C                <1>     je .mbbpb0
   841 0000139F 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   842 000013A3 B007                <1>     mov al, 07h ;Unknown media error code
   843 000013A5 0F824BFEFFFF        <1>     jb .msdWriteErrorCode
   844                              <1> .mbbpb0:
   845 000013AB 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   846 000013AE 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   847 000013B3 488D3DD4010000      <1>     lea rdi, .msdBPBTbl
   848 000013BA 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   849 000013BE 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   850 000013C1 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   851 000013C5 B90F000000          <1>     mov ecx, bpbEx_size/8
   852 000013CA F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   853 000013CD E92AFEFFFF          <1>     jmp .msdDriverExit
   854                              <1> .msdIOCTLRead:       ;Function 3, returns done
   855 000013D2 B005                <1>     mov al, 05h ;Bad request structure length
   856 000013D4 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   857 000013D7 0F8519FEFFFF        <1>     jne .msdWriteErrorCode
   858                              <1> 
   859 000013DD E91AFEFFFF          <1>     jmp .msdDriverExit
   860                              <1> .msdRead:            ;Function 4
   861                              <1> ;Will read one sector at a time.
   862 000013E2 B005                <1>     mov al, 05h ;Bad request structure length
   863 000013E4 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   864 000013E7 0F8509FEFFFF        <1>     jne .msdWriteErrorCode
   865                              <1> 
   866 000013ED 4889DD              <1>     mov rbp, rbx
   867 000013F0 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   868                              <1> .msdr0:
   869 000013F2 B682                <1>     mov dh, 82h ;LBA Read Sectors
   870 000013F4 E867010000          <1>     call .msdBlkIOCommon
   871 000013F9 0F827FFDFFFF        <1>     jc .msdIOError
   872 000013FF 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   873 00001407 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   874 0000140F FFC6                <1>     inc esi
   875 00001411 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   876 00001414 75DC                <1>     jne .msdr0
   877 00001416 4889EB              <1>     mov rbx, rbp
   878 00001419 E9DEFDFFFF          <1>     jmp .msdDriverExit
   879                              <1> .msdWrite:           ;Function 8
   880                              <1> ;Will write one sector at a time.
   881 0000141E B005                <1>     mov al, 05h ;Bad request structure length
   882 00001420 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   883 00001423 0F85CDFDFFFF        <1>     jne .msdWriteErrorCode
   884                              <1> 
   885 00001429 4889DD              <1>     mov rbp, rbx
   886 0000142C 31F6                <1>     xor esi, esi  ;Set counter to zero
   887                              <1> .msdw0:
   888 0000142E B683                <1>     mov dh, 83h ;LBA Write Sectors
   889 00001430 E82B010000          <1>     call .msdBlkIOCommon
   890 00001435 0F8243FDFFFF        <1>     jc .msdIOError
   891 0000143B 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   892 00001443 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   893 0000144B FFC6                <1>     inc esi
   894 0000144D 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   895 00001450 75DC                <1>     jne .msdw0
   896 00001452 4889EB              <1>     mov rbx, rbp
   897 00001455 E9A2FDFFFF          <1>     jmp .msdDriverExit
   898                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   899                              <1> ;Will write one sector at a time and then verify it.
   900 0000145A B005                <1>     mov al, 05h ;Bad request structure length
   901 0000145C 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   902 0000145F 0F8591FDFFFF        <1>     jne .msdWriteErrorCode
   903                              <1> 
   904 00001465 4889DD              <1>     mov rbp, rbx
   905 00001468 31F6                <1>     xor esi, esi  ;Set counter to zero
   906                              <1> .msdwv0:
   907 0000146A B683                <1>     mov dh, 83h ;LBA Write Sectors
   908 0000146C E8EF000000          <1>     call .msdBlkIOCommon
   909 00001471 0F8207FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   910 00001477 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   911 00001479 E8E2000000          <1>     call .msdBlkIOCommon
   912 0000147E 0F82FAFCFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   913 00001484 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   914 0000148C 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   915 00001494 FFC6                <1>     inc esi
   916 00001496 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   917 00001499 75CF                <1>     jne .msdwv0
   918 0000149B 4889EB              <1>     mov rbx, rbp
   919 0000149E E959FDFFFF          <1>     jmp .msdDriverExit
   920                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   921 000014A3 B005                <1>     mov al, 05h ;Bad request structure length
   922 000014A5 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   923 000014A8 0F8548FDFFFF        <1>     jne .msdWriteErrorCode
   924                              <1> 
   925 000014AE E949FDFFFF          <1>     jmp .msdDriverExit
   926                              <1> .msdDevOpen:         ;Function 13
   927 000014B3 B005                <1>     mov al, 05h ;Bad request structure length
   928 000014B5 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   929 000014B8 0F8538FDFFFF        <1>     jne .msdWriteErrorCode
   930                              <1> 
   931 000014BE 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   932 000014C3 488D0DBF000000      <1>     lea rcx, .msdHdlCnt
   933 000014CA FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   934 000014CD E92AFDFFFF          <1>     jmp .msdDriverExit
   935                              <1> .msdDevClose:        ;Function 14
   936 000014D2 B005                <1>     mov al, 05h ;Bad request structure length
   937 000014D4 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   938 000014D7 0F8519FDFFFF        <1>     jne .msdWriteErrorCode
   939                              <1> 
   940 000014DD 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   941 000014E2 488D0DA0000000      <1>     lea rcx, .msdHdlCnt
   942 000014E9 FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   943 000014EC E90BFDFFFF          <1>     jmp .msdDriverExit
   944                              <1> .msdRemovableMedia:  ;Function 15
   945 000014F1 B005                <1>     mov al, 05h ;Bad request structure length
   946 000014F3 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   947 000014F6 0F85FAFCFFFF        <1>     jne .msdWriteErrorCode
   948                              <1> 
   949 000014FC 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   950 00001501 488D0D7C000000      <1>     lea rcx, .msdBIOSmap
   951 00001508 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   952 0000150B A880                <1>     test al, 80h
   953 0000150D 0F84E9FCFFFF        <1>     jz .msdDriverExit   ;If removable, busy bit is clear
   954 00001513 66C743030002        <1>     mov word [rbx + remMediaReqPkt.status], 0200h ;Set Busy bit
   955 00001519 E9DEFCFFFF          <1>     jmp .msdDriverExit
   956                              <1> .msdGenericIOCTL:    ;Function 19
   957 0000151E B005                <1>     mov al, 05h ;Bad request structure length
   958 00001520 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   959 00001523 0F85CDFCFFFF        <1>     jne .msdWriteErrorCode
   960                              <1> 
   961 00001529 E9CEFCFFFF          <1>     jmp .msdDriverExit
   962                              <1> .msdGetLogicalDev:   ;Function 23
   963 0000152E B005                <1>     mov al, 05h ;Bad request structure length
   964 00001530 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   965 00001533 0F85BDFCFFFF        <1>     jne .msdWriteErrorCode
   966                              <1> 
   967 00001539 8A0544000000        <1>     mov al, byte [.msdCurDev]
   968 0000153F 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   969 00001542 E9B5FCFFFF          <1>     jmp .msdDriverExit
   970                              <1> .msdSetLogicalDev:   ;Function 24
   971 00001547 B005                <1>     mov al, 05h ;Bad request structure length
   972 00001549 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   973 0000154C 0F85A4FCFFFF        <1>     jne .msdWriteErrorCode
   974                              <1> 
   975 00001552 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   976 00001555 880528000000        <1>     mov byte [.msdCurDev], al
   977 0000155B E99CFCFFFF          <1>     jmp .msdDriverExit
   978                              <1> 
   979                              <1> .msdBlkIOCommon:  ;Does block IO
   980                              <1> ;Called with rbp containing old rbx value and ah with function number
   981                              <1> ;Error handled by caller
   982                              <1> ;Sector count handled by caller
   983                              <1> ;Called with dh = BIOS function number
   984 00001560 480FB64501          <1>     movzx rax, byte [rbp + ioReqPkt.unitnm]
   985 00001565 8A90[84150000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   986 0000156B 488B4D1A            <1>     mov rcx, qword [rbp + ioReqPkt.strtsc]  ;Get start sector
   987 0000156F 488B5D0E            <1>     mov rbx, qword [rbp + ioReqPkt.bufptr]  ;Get Memory Buffer
   988 00001573 88F4                <1>     mov ah, dh
   989 00001575 B001                <1>     mov al, 01h ;Do one sector at a time 
   990 00001577 CD33                <1>     int 33h
   991 00001579 C3                  <1>     ret
   992                              <1> 
   993 0000157A 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   994                              <1> ;LASTDRIVE default is 5
   995 00001583 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   996                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   997 00001584 FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
   998 00001589 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   999 0000158E 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   999 00001597 000000000000000000- <1>
   999 000015A0 000000000000000000- <1>
   999 000015A9 000000000000000000- <1>
   999 000015B2 00000000            <1>
  1000 000015B6 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
  1000 000015BF 000000000000000000- <1>
  1000 000015C8 000000000000000000- <1>
  1000 000015D1 000000000000000000- <1>
  1000 000015DA 000000000000000000- <1>
  1000 000015E3 000000000000000000- <1>
  1000 000015EC 000000000000000000- <1>
  1000 000015F5 000000000000000000- <1>
  1000 000015FE 000000000000000000- <1>
  1000 00001607 000000000000000000- <1>
  1000 00001610 000000000000000000- <1>
  1000 00001619 000000000000000000- <1>
  1000 00001622 000000000000000000- <1>
  1000 0000162B 000000000000000000- <1>
  1000 00001634 000000000000000000- <1>
  1000 0000163D 000000000000000000- <1>
  1000 00001646 000000000000000000- <1>
  1000 0000164F 000000000000000000- <1>
  1000 00001658 000000000000000000- <1>
  1000 00001661 000000000000000000- <1>
  1000 0000166A 000000000000000000- <1>
  1000 00001673 000000000000000000- <1>
  1000 0000167C 000000000000000000- <1>
  1000 00001685 000000000000000000- <1>
  1000 0000168E 000000000000000000- <1>
  1000 00001697 000000000000000000- <1>
  1000 000016A0 000000000000000000- <1>
  1000 000016A9 000000000000000000- <1>
  1000 000016B2 000000000000000000- <1>
  1000 000016BB 000000000000000000- <1>
  1000 000016C4 000000000000000000- <1>
  1000 000016CD 000000000000000000- <1>
  1000 000016D6 000000000000000000- <1>
  1000 000016DF 000000000000000000- <1>
  1000 000016E8 000000000000000000- <1>
  1000 000016F1 000000000000000000- <1>
  1000 000016FA 000000000000000000- <1>
  1000 00001703 000000000000000000- <1>
  1000 0000170C 000000000000000000- <1>
  1000 00001715 000000000000000000- <1>
  1000 0000171E 000000000000000000- <1>
  1000 00001727 000000000000000000- <1>
  1000 00001730 000000000000000000- <1>
  1000 00001739 000000000000000000- <1>
  1000 00001742 000000000000000000- <1>
  1000 0000174B 000000000000000000- <1>
  1000 00001754 000000000000000000- <1>
  1000 0000175D 000000000000000000- <1>
  1000 00001766 000000000000000000- <1>
  1000 0000176F 000000000000000000- <1>
  1000 00001778 000000000000000000- <1>
  1000 00001781 000000000000000000- <1>
  1000 0000178A 000000000000000000- <1>
  1000 00001793 000000000000000000- <1>
  1000 0000179C 000000000000000000- <1>
  1000 000017A5 000000000000000000- <1>
  1000 000017AE 000000000000000000- <1>
  1000 000017B7 000000000000000000- <1>
  1000 000017C0 000000000000000000- <1>
  1000 000017C9 000000000000000000- <1>
  1000 000017D2 000000000000000000- <1>
  1000 000017DB 000000000000000000- <1>
  1000 000017E4 000000000000000000- <1>
  1000 000017ED 000000000000000000- <1>
  1000 000017F6 000000000000000000- <1>
  1000 000017FF 000000000000000000- <1>
  1000 00001808 000000000000        <1>
  1001                              <1> 
  1002                              <1> endptr equ $
    14                                  Segment dynamicDataArea nobits valign=1 vfollows=resSeg
    15                                  %include "dosDynaDataArea.asm"
    16                              <1> ;Create DPB chain of first 5 available DPB slots
    17 00000000 <res 36h>           <1> firstDPB        resb dpb_size
    18 00000036 <res 36h>           <1> secondDPB       resb dpb_size
    19 0000006C <res 36h>           <1> thirdDPB        resb dpb_size
    20 000000A2 <res 36h>           <1> fourthDPB       resb dpb_size
    21 000000D8 <res 36h>           <1> fifthDPB        resb dpb_size 
    22                              <1> 
    23                              <1> ;Create SFT header and corresponding array of five default sft entries
    24 0000010E <res Ah>            <1> firstSftHeader  resb sfth_size
    25 00000118 <res 3Dh>           <1> firstSft        resb sft_size
    26 00000155 <res 3Dh>           <1> secondSft       resb sft_size
    27 00000192 <res 3Dh>           <1> thirdSft        resb sft_size
    28 000001CF <res 3Dh>           <1> fourthSft       resb sft_size
    29 0000020C <res 3Dh>           <1> fifthSft        resb sft_size
    30                              <1> 
    31                              <1> ;Create a five drive CDS here so we can jettison it if config wants more
    32 00000249 <res 1C7h>          <1> initCDS         resb 5*cds_size 
    33                              <1> ;Always jettison this space
    34                              <1> DOSENDPTR:   ;Points to the end of the initially reserved DOS area
    35 00000410 <res 1Ch>           <1> tmpBufHdr       resb bufferHdr_size
    36 0000042C <res 200h>          <1> msdTempBuffer   resb 512    ;Reserve one sectors worth of space
    37                              <1> dynamicDataAreaLength equ $
