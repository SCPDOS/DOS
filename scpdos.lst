     1                                  [map all scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  %include "driverStruc.inc"
     5                              <1> 
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     8                              <1> ; device driver related structures.                     ;
     9                              <1> ;-------------------------------------------------------;
    10                              <1> 
    11                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    12                              <1> 
    13 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    14 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    15 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    16 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    17 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    18                              <1> 
    19                              <1> endstruc
    20                              <1> 
    21                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    22                              <1> 
    23                              <1>     .hdrlen resb 1  ;Length of the request header
    24                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    25                              <1>     .cmdcde resb 1  ;Command code
    26                              <1>     .status resw 1  ;Status word
    27                              <1>     .devptr resq 1  ;Device queue pointer field
    28                              <1> 
    29                              <1> %endmacro
    30                              <1> 
    31                              <1> struc drvReqHdr
    32                              <1>     drvReqHdrM
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    33                              <1> endstruc
    34                              <1> 
    35                              <1> struc initReqPkt  ;Init Request Packet
    36                              <1> 
    37                              <1>     drvReqHdrM   ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    38 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
    39 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
    40 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
    41 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
    42                              <1> 
    43                              <1> endstruc
    44                              <1> 
    45                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
    46                              <1> 
    47                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    48 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    49 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
    50 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
    51                              <1> 
    52                              <1> endstruc
    53                              <1> 
    54                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
    55                              <1> 
    56                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    57 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    58 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    59 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
    60                              <1> 
    61                              <1> endstruc
    62                              <1> 
    63                              <1> struc ioReqPkt   ;IO Request Packet
    64                              <1> 
    65                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    66 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    67 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    68 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
    69 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
    70 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
    71                              <1> 
    72                              <1> endstruc
    73                              <1> 
    74                              <1> struc nonDestInNoWaitReqPkt    ;Nondestructive Input No Wait Request Packet
    75                              <1>     
    76                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    77 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
    78                              <1> 
    79                              <1> endstruc
    80                              <1> 
    81                              <1> struc statusReqPkt   ;Status Request Packet
    82                              <1> 
    83                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    84                              <1> 
    85                              <1> endstruc
    86                              <1> 
    87                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
    88                              <1> 
    89                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    90                              <1>      
    91                              <1> endstruc
    92                              <1> 
    93                              <1> struc openReqPkt ;Open Device Request Packet
    94                              <1> 
    95                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    96                              <1>      
    97                              <1> endstruc
    98                              <1> 
    99                              <1> struc closeReqPkt ;Close Device Request Packet
   100                              <1> 
   101                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   102                              <1>      
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   106                              <1> 
   107                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   108                              <1>      
   109                              <1> endstruc
   110                              <1> 
   111                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   112                              <1> 
   113                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   114 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   115 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   116 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   117 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   118 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   119                              <1> 
   120                              <1> endstruc
   121                              <1> 
   122                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   123                              <1>     
   124                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   125                              <1> 
   126                              <1> endstruc
   127                              <1> 
   128                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   129                              <1>     
   130                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   131                              <1> 
   132                              <1> endstruc
     5                                  %include "fatStruc.inc"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ; This include file contains miscellaneous FAT driver   ;
     9                              <1> ; structures. exFAT will have it's own files at a later ;
    10                              <1> ; stage.                                                ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    14                              <1> 
    15 00000000 ??????              <1>     .jmpBoot    resb 3 
    16 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    17 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    18 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    19 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    20 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    21 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    22 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    23 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    24 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    25 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    26 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    27 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    28 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    29                              <1> 
    30 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    31 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    32 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    33 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    34 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    35 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    40                              <1> 
    41 00000000 ??????              <1>     .jmpBoot    resb 3
    42 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    43 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    44 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    45 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    46 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    47 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    48 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    49 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    50 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    51 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    52 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    53 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    54 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    55                              <1> 
    56 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    57 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    58 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    59 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    60 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    61 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    62 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    63                              <1> 
    64 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    65 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    66 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    67 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    68 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    69 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    70                              <1> 
    71                              <1> endstruc
    72                              <1> 
    73                              <1> struc fatDirEntry
    74                              <1> 
    75 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
    76 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
    77 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
    78 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
    79 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
    80 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
    81 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
    82 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
    83 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
    84 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
    85 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
    86 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
    87                              <1> 
    88                              <1> endstruc
    89                              <1> ;Directory attribute equates
    90                              <1>     dirReadOnly     equ 01h
    91                              <1>     dirHidden       equ 02h
    92                              <1>     dirSystem       equ 04h
    93                              <1>     dirVolumeID     equ 08h
    94                              <1>     dirDirectory    equ 10h
    95                              <1>     dirArchive      equ 20h
    96                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    97                              <1> 
    98                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
    99                              <1> 
   100 00000000 ??????              <1>     .jmpBoot                resb 3 
   101 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   102 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   103 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   104 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   105 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   106 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   107 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   108 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   109 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   110 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   111 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   112 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   113 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   114 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   115 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   116 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   117 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   118 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   119                              <1> 
   120                              <1> endstruc
   121                              <1> 
   122                              <1> struc FSInfo
   123                              <1> 
   124 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   125 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   126 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   127 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   128 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   129 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   130 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   131                              <1> 
   132                              <1> endstruc
     6                                  %include "dosStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous internal     ;
    10                              <1> ; SCP/DOS structures.                                   ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> ;------------------------------------------------------------------------;
    14                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    15                              <1> ; its file system structure. This is used to locate files and structures
    16                              <1> ; on the device itself and to translate file requests to cluster chains
    17                              <1> ; to LBAs to pass to the disk driver..
    18                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    19                              <1> ; drivers Initialise routine has been called.
    20                              <1> ;------------------------------------------------------------------------;
    21                              <1> struc dpb        ;Drive Parameter Block
    22                              <1> 
    23 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...)
    24 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device
    25 00000002 ??                  <1>     .bBytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
    26 00000003 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1
    27                              <1> ;                                       i.e. (2^bSectorsPerClusterShift) - 1
    28 00000004 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent
    29 00000005 ????????            <1>     .dFAToffset              resd 1  ;Vol rel offset of first FAT, in sectors
    30 00000009 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs
    31 0000000A ????                <1>     .wNumberRootDirEntries   resw 1  ;In sectors
    32 0000000C ????????            <1>     .dClusterHeapOffset      resd 1  ;Start of data area, in sectors
    33 00000010 ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters (volume size)
    34 00000014 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors
    35 00000018 ????????            <1>     .dFirstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
    36 0000001C ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header
    37 00000024 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor
    38 00000025 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1)
    39 00000026 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    40 0000002E ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search
    41 00000032 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown
    42                              <1> 
    43                              <1> endstruc
    44                              <1> 
    45                              <1> ;------------------------------------------------------------------------;
    46                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    47                              <1> ; All disk pathing requests go via the CDS for that drive.
    48                              <1> ; The default drive is the last accessed drive, this number is stored
    49                              <1> ; in the DOS data area.
    50                              <1> ; The CDS is stored as an array with the offset into the array being 
    51                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    52                              <1> ;
    53                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    54                              <1> ;------------------------------------------------------------------------;
    55                              <1> struc cds       ;Current Directory structure
    56 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    57 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    58 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    59 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    60 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    61 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    62                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    63                              <1> ; another, we save the number of chars to skip to that deep level).
    64                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    65                              <1> ; Flags: Bit 15 set = Network drive
    66                              <1> ;        Bit 14 set = Physical drive
    67                              <1> ;        Bit 13 set = JOIN'ed drive
    68                              <1> ;        Bit 12 set = SUBST'ed drive
    69                              <1> ;        Bit 7  set = Redirected, not network, drive (This is how MSCDEX worked)
    70                              <1> endstruc
    71                              <1> ;CDS equates
    72                              <1>     cdsNetDrive     equ 8000h
    73                              <1>     cdsPhysDrive    equ 4000h
    74                              <1>     cdsJoinDrive    equ 2000h
    75                              <1>     cdsSubstDrive   equ 1000h
    76                              <1>     cdsRedirDrive   equ 0080h
    77                              <1> ;------------------------------------------------------------------------;
    78                              <1> ; The SFT is a way to allow applications to open file handles to files 
    79                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    80                              <1> ; under the first header, and then a second header will be linked to the 
    81                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    82                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    83                              <1> ; using the FCBS= command. Default FCBS=5.
    84                              <1> ;
    85                              <1> ; A file handle describes the file, and the location within the file that
    86                              <1> ; we are reading. The file handle can be manipulated without the file
    87                              <1> ; being in memory, thus allowing the user to access data without needing 
    88                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    89                              <1> ; accessing devices, by treating them as files with their drivers 
    90                              <1> ; responding and translating the manipulations of the file handle itself.
    91                              <1> ; Neither the driver nor the application should see or use the SFT for
    92                              <1> ; the handle, as it is subject to change (and will change when file 
    93                              <1> ; sharing provisions are included). The DOS will make requests to the 
    94                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    95                              <1> ; track of the information in the SFT entry for that handle. 
    96                              <1> ;
    97                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    98                              <1> ; can point to the same file. It all depends on what the applications 
    99                              <1> ; want to do with the File.
   100                              <1> ;
   101                              <1> ; !!!!IMPORTANT!!!!
   102                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   103                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   104                              <1> ;
   105                              <1> ;Each SFT may look like this:
   106                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   107                              <1> ;            |                |
   108                              <1> ;       wNumFiles*sft    wNumFiles*sft
   109                              <1> ;
   110                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   111                              <1> ; System FCBs.
   112                              <1> ;
   113                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   114                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   115                              <1> ;
   116                              <1> ; DEFAULT FILES=15, MINIMUM FILES=5
   117                              <1> ; DEFAULT FCBS=5, MINIMUM FCBS=5
   118                              <1> ;------------------------------------------------------------------------;
   119                              <1> struc sfth   ;System file table header
   120                              <1> ; This is the SFT header.
   121                              <1> ; This structure comes before the start of the first file in the array/table.
   122 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   123 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc sft
   127                              <1> ;This is the file struc itself
   128 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   129 00000002 ????                <1>     .wOpenMode   resw 1    ;Bit 15 set if opened via FCB
   130 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   131 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   132 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   133 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file
   134 00000013 ????                <1>     .wTime       resw 1    ;File Time
   135 00000015 ????                <1>     .wDate       resw 1    ;File Date
   136 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   137 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset in file, in bytes
   138 0000001F ????                <1>     .wRelClust   resw 1    ;Relative cluster in file of the last cluster accessed
   139 00000021 ????????            <1>     .dDirSect    resd 1    ;Relative number of sector containing directory entry 
   140 00000025 ??                  <1>     .bNumDirEnt  resb 1    ;Number of dir entry within sector (byte offset/32)
   141 00000026 <res Bh>            <1>     .sFCBName    resb 11   ;8.3 Filename
   142 00000031 ????????????????    <1>     .qPSPOwner   resq 1    ;Address of PSP of program which first opened this file
   143 00000039 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster of last cluster accessed
   144                              <1> endstruc
   145                              <1> 
   146                              <1> ;------------------------------------------------------------------------;
   147                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   148                              <1> ; to an internal buffer, and then copying it to the specified location
   149                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   150                              <1> ; another request for the same sector from the same device is made, so 
   151                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   152                              <1> ; size, selected according to the largest detected sector size during 
   153                              <1> ; the initial loadup.
   154                              <1> ;
   155                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   156                              <1> ;
   157                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   158                              <1> ;------------------------------------------------------------------------;
   159                              <1> 
   160                              <1> struc bufferHdr
   161 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   162 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for
   163 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   164 0000000A ????????            <1>     .bufferLBA   resd  1   ;LBA the buffer contains
   165 0000000E ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   166 0000000F ??                  <1>     .bufFAToff   resb  1   ;Sector offset of the backup copy of the FAT on disk
   167 00000010 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   168                              <1> endstruc
   169                              <1> 
   170                              <1> ;------------------------------------------------------------------------;
   171                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   172                              <1> ; following order, thus allowing for return values to be placed in the 
   173                              <1> ; registers by accessing the caller register stack frame.
   174                              <1> ;------------------------------------------------------------------------;
   175                              <1> struc callerFrame
   176 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   177 00000008 ????????????????    <1>     .rbx    resq 1    
   178 00000010 ????????????????    <1>     .rcx    resq 1
   179 00000018 ????????????????    <1>     .rdx    resq 1
   180 00000020 ????????????????    <1>     .rsi    resq 1
   181 00000028 ????????????????    <1>     .rdi    resq 1
   182 00000030 ????????????????    <1>     .rbp    resq 1
   183 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   184 00000040 ????????????????    <1>     .r9     resq 1
   185                              <1> ;Pushed by Processor when invoked via Interrupt
   186 00000048 ????????????????    <1>     .rip    resq 1
   187 00000050 ????????????????    <1>     .cs     resq 1
   188 00000058 ????????????????    <1>     .flags  resq 1
   189                              <1> endstruc
   190                              <1> 
   191                              <1> %macro pushDOS 0
   192                              <1>     push r9
   193                              <1>     push r8
   194                              <1>     push rbp
   195                              <1>     push rdi
   196                              <1>     push rsi
   197                              <1>     push rdx
   198                              <1>     push rcx
   199                              <1>     push rbx
   200                              <1>     push rax
   201                              <1> %endmacro
   202                              <1> 
   203                              <1> %macro popDOS 0
   204                              <1>     pop rax
   205                              <1>     pop rbx
   206                              <1>     pop rcx
   207                              <1>     pop rdx
   208                              <1>     pop rsi
   209                              <1>     pop rdi
   210                              <1>     pop rbp
   211                              <1>     pop r8
   212                              <1>     pop r9
   213                              <1> %endmacro
   214                              <1> 
   215                              <1> struc psp
   216 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h
   217 00000002 ????????????????    <1>     .startSeg   resq 1  ;Pointer to the start of the PSP
   218 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   219 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   220 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   221 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   222 0000002A <res 14h>           <1>     .fHandles   resb 20 ;Main File handle array
   223 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   224 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   225 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size
   226 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh
   227 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain
   228 0000005B ????????????????    <1>     .xtraHdlPtr resq 1  ;Pointer to the extra handle array if needed
   229 00000063 ????????????????    <1>     .fcbPtr1    resq 1  ;Pointer to the first OS allocated FCB
   230 0000006B <res 15h>           <1>     .reserved   resb 21
   231 00000080 ??                  <1>     .charCount  resb 1  ;Number of characters in command tail
   232 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   233                              <1> endstruc
   234                              <1> 
   235                              <1> struc mcb
   236 00000000 ??                  <1>     .mzbyte     resb 1  ;M=In use, Z=Free
   237 00000001 ????????????????    <1>     .processPtr resq 1  ;Points to the start of the process PSP
   238 00000009 ????????            <1>     .paragraphs resd 1  ;Gives the number of paras allocated to this process
   239 0000000D ??????              <1>     .reserved   resb 3
   240                              <1>     .program:
   241                              <1> endstruc
     7                                  %include "dosSeg.asm"
     8                              <1> ;This file contains the main DOS data segment
     9                              <1> 
    10                              <1> Segment dSeg nobits align=1 
    11 00000000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself
    12 00000008 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from
    13 00000009 <res 2Ah>           <1>     charReqHdr  resb ioReqPkt_size  ;Character IO Request header
    14 00000033 <res 2Ah>           <1>     diskReqHdr  resb ioReqPkt_size  ;Disk Action Request header
    15                              <1>     ;The device driver header with space for the largest possible packet
    16 0000005D ????????????????    <1>     sysVarsPtr  resq 1    ;Pointer to dpbHeadPtr, head of Sys Vars struc below
    17 00000065 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain
    18 0000006D ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain
    19 00000075 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    20 0000007D ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header
    21                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    22 00000085 ????????????????    <1>     conPtr      resq 1    ;Pointer to the current active CON device header 
    23                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    24 0000008D ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)
    25 0000008F ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain
    26 00000097 ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array
    27 0000009F ????????????????    <1>     sfcbHeadPTr resq 1    ;Pointer to the head of the System FCB chain
    28 000000A7 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    29 000000A9 ??                  <1>     numMSDdrv   resb 1    ;Number of mass storage devices detected in system
    30 000000AA ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]
    31 000000AB ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    32 000000AC <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    33                              <1> 
    34                              <1> ;Start of Swappable Data Area, this bit can remain static
    35 000000CE ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h
    36 000000CF ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving
    37 000000D0 ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh
    38 000000D1 ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    39 000000D2 ????                <1>     errorExt    resw 1  ;Extended Error Code
    40 000000D4 ??                  <1>     errorAction resb 1  ;Suggested action for error  
    41 000000D5 ??                  <1>     errorClass  resb 1  ;Error Class
    42                              <1> 
    43 000000D6 ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA
    44 000000DE ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP
    45 000000E6 ????????????????    <1>     rdiErrorPtr resq 1  ;Saves RDI value of last error
    46 000000EE ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
    47 000000F6 ????                <1>     lastRetCode resw 1  ;Last return code returned by Int 41h/4Ch
    48 000000F8 ??                  <1>     currentDrv  resb 1  ;Default, last accessed drive
    49 000000F9 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls
    50                              <1> ;SDA, needs to be replaced between processes
    51 000000FA ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
    52                              <1> 
    53 00000102 ??                  <1>     Int44RetVal resb 1  ;Saves a copy of the Int 44 return value
    54 00000103 ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
    55 00000104 ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
    56 00000105 ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
    57 0000010D ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
    58 00000115 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
    59                              <1> ;Time stuff
    60 0000011D ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
    61 00000123 ??                  <1>     dayOfMonth  resb 1  ;1 - 31 BCD
    62 00000124 ??                  <1>     monthOfYear resb 1  ;1 - 12 BCD
    63 00000125 ????                <1>     years       resw 1  ;0000 - 9999 BCD
    64 00000127 ????                <1>     yearsOffset resw 1  ;Current Year - 1980
    65 00000129 ????????            <1>     daysOffset  resd 1  ;Days since 1-1-1980
    66 0000012D ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
    67                              <1> 
    68                              <1> ;Stacks
    69 0000012E <res 528h>          <1>     critStack   resq 165
    70 00000656 ????????????????    <1>     critStakTop resq 1
    71 0000065E <res 638h>          <1>     IOStack     resq 199
    72 00000C96 ????????????????    <1>     IOStakTop   resq 1
    73 00000C9E <res 638h>          <1>     DiskStack   resq 199
    74 000012D6 ????????????????    <1>     DiskStakTop resq 1
    75                              <1>     dSegLen     equ     $
     8                                  
     9                                  Segment .text align=1
    10                                  ; We arrive here with the following values in the registers.
    11                                  ; rbx =  LBA of first Logical Block after SCP/BIOS
    12                                  ; dx  = Int 33h boot device number
    13                                  ; fs  = userbase pointer (pointer to first usable block of RAM)
    14                                  tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    15 00000000 55AA                        dw 0AA55h           ;Initial signature
    16 00000002 909090909090909090-         db (100h-2) dup (90h)   ;Duplicate NOPs for the PSP
    16 0000000B 909090909090909090-
    16 00000014 909090909090909090-
    16 0000001D 909090909090909090-
    16 00000026 909090909090909090-
    16 0000002F 909090909090909090-
    16 00000038 909090909090909090-
    16 00000041 909090909090909090-
    16 0000004A 909090909090909090-
    16 00000053 909090909090909090-
    16 0000005C 909090909090909090-
    16 00000065 909090909090909090-
    16 0000006E 909090909090909090-
    16 00000077 909090909090909090-
    16 00000080 909090909090909090-
    16 00000089 909090909090909090-
    16 00000092 909090909090909090-
    16 0000009B 909090909090909090-
    16 000000A4 909090909090909090-
    16 000000AD 909090909090909090-
    16 000000B6 909090909090909090-
    16 000000BF 909090909090909090-
    16 000000C8 909090909090909090-
    16 000000D1 909090909090909090-
    16 000000DA 909090909090909090-
    16 000000E3 909090909090909090-
    16 000000EC 909090909090909090-
    16 000000F5 909090909090909090-
    16 000000FE 9090               
    17 00000100 64881425[08000000]          mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    18 00000108 488D15F1FEFFFF              lea rdx, qword [tempPSP]    ;Get the address of the tempPSP
    19 0000010F 6448891425-                 mov qword fs:[currentPSP], rdx
    19 00000114 [DE000000]         
    20                                  ;DOS allows for non-PARA aligned PSPs but DOS aligns all programs on PARA bndry
    21 00000118 B9000100C0                  mov ecx, 0C0000100h ;Read FS MSR
    22 0000011D 0F32                        rdmsr
    23 0000011F 89D7                        mov edi, edx        ;Get the hi dword, and clear the upper bytes
    24 00000121 48C1E720                    shl rdi, 20h        ;Shift high
    25 00000125 89C7                        mov edi, eax        ;Get the low dword in
    26                                  
    27 00000127 6448893C25-                 mov qword fs:[dosSegPtr], rdi 
    27 0000012C [00000000]         
    28 00000130 4889FD                      mov rbp, rdi    ;Save the start of dosSeg in rdx 
    29 00000133 4881C7[DE120000]            add rdi, dSegLen ;Move destination past end of data area
    30 0000013A 488D35(00000000)            lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    31 00000141 B900100000                  mov ecx, 1000h
    32 00000146 F348A5                      rep movsq
    33                                  
    34                                  ;Modify the pointers in nData before putting them in the data area
    35 00000149 48012D80010000              add qword [nData + drvHdr.nxtPtr], rbp
    36 00000150 48012D83010000              add qword [nData + drvHdr.strPtr], rbp
    37 00000157 48012D84010000              add qword [nData + drvHdr.intPtr], rbp
    38                                  ;Copy the Null driver to its location in Sysvars
    39 0000015E B922000000                  mov ecx, drvHdr_size
    40 00000163 488D3566010000              lea rsi, qword [nData]
    41 0000016A 488DBD[AC000000]            lea rdi, qword [rbp + nulDevHdr]
    42 00000171 F3A4                        rep movsb   
    43                                  
    44                                  ;Adjust the addresses in the other driver headers 
    45 00000173 48BE-                       mov rsi, conHdr ;Point to the first non-NUL dev in chain
    45 00000175 [2E08000000000000] 
    46 0000017D B90C000000                  mov ecx, 12      ;12 drivers in data area
    47 00000182 488D342E                    lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
    48                                  adjDrivers:
    49 00000186 E8CA000000                  call adjustDrvHdr
    50 0000018B E2F9                        loop adjDrivers
    51                                  
    52                                      ;Open NUL
    53 0000018D 488D9D[B6000000]            lea rbx, qword [rbp + nulDevHdr + drvHdr.strPtr]    ;Get ptr to strat ptr
    54 00000194 488B1B                      mov rbx, qword [rbx]    ;Get strat ptr
    55 00000197 30C0                        xor al, al
    56 00000199 FFD3                        call rbx
    57                                  
    58                                  ;Open CON
    59                                  conInit:    ;Rather than keeping this resident... do it here
    60                                  .ci0:
    61 0000019B B401                        mov ah, 01      ;Get buffer status
    62 0000019D CD36                        int 36h
    63 0000019F 7406                        jz .ci1      ;If zero clear => no more keys to read
    64 000001A1 30E4                        xor ah, ah
    65 000001A3 CD36                        int 36h ;Read key to flush from buffer
    66 000001A5 EBF4                        jmp short .ci0
    67                                  .ci1:
    68 000001A7 B800050000                  mov eax, 0500h  ;Set page zero as the default page
    69 000001AC CD30                        int 30h
    70 000001AE B402                        mov ah, 02h
    71 000001B0 31D2                        xor edx, edx    ;Set screen cursor to top right corner
    72 000001B2 88D7                        mov bh, dl      ;Set cursor for page 0
    73 000001B4 CD30                        int 30h
    74 000001B6 B707                        mov bh, 07h     ;Grey/Black attribs
    75 000001B8 B800060000                  mov eax, 0600h  ;Clear whole screen
    76 000001BD CD30                        int 30h
    77                                  
    78                                      ;Open Mass Storage
    79 000001BF 48BB-                       mov rbx, msdDriver
    79 000001C1 [0B0E000000000000] 
    80 000001C9 488D5C1D00                  lea rbx, qword [rbp+rbx]
    81 000001CE 30C0                        xor al, al
    82 000001D0 FFD3                        call rbx
    83                                  ;Adjust Int 41h address table
    84                                  
    85                                  adjInt41h:
    86 000001D2 B96A000000                  mov ecx, dispatchTableL/8 ;Number of elements in table
    87 000001D7 48BB-                       mov rbx, functionDispatch.dispatchTable ;Get EA of table
    87 000001D9 [1302000000000000] 
    88 000001E1 488D5C1D00                  lea rbx, qword [rbp+rbx]    ;Point to the start of the relocated table 
    89                                  .ai41h:
    90 000001E6 48012B                      add qword [rbx], rbp    ;Add base address value to entry in reloc table
    91 000001E9 4881C308000000              add rbx, 8              ;Each entry is size 8
    92 000001F0 FFC9                        dec ecx
    93 000001F2 75F2                        jnz .ai41h  ;Keep looping until all entries have been adjusted
    94                                  
    95                                  ;Adjust Interrupt Entries Int 40h-49h
    96                                  adjInts:
    97 000001F4 B340                        mov bl, 40h
    98 000001F6 B807F00000                  mov eax, 0F007h ;Get the descriptor
    99 000001FB CD35                        int 35h
   100 000001FD B940000000                  mov ecx, 40h    ;Start from interrupt 40h
   101 00000202 488D3D77000000              lea rdi, intData
   102 00000209 89C6                        mov esi, eax    ;Move segment selector info to esi
   103                                  .ai0:
   104 0000020B B808F00000                  mov eax, 0F008h ;Set the descriptor
   105 00000210 488B1F                      mov rbx, qword [rdi]    ;Get address pointed to by rdi
   106 00000213 4801EB                      add rbx, rbp            ;Add the relocated base to rbx
   107 00000216 CD35                        int 35h
   108 00000218 4881C708000000              add rdi, 8
   109 0000021F FFC1                        inc ecx
   110 00000221 81F94A000000                cmp ecx, 4Ah
   111 00000227 75E2                        jne .ai0
   112                                  
   113                                  ;Test Error Case
   114 00000229 B430                        mov ah, 00110000b
   115 0000022B B000                        mov al, 00h
   116 0000022D BF0C000000                  mov edi, 0Ch
   117 00000232 CD44                        int 44h
   118                                  
   119                                  
   120 00000234 488D152D000000              lea rdx, qword [startmsg]   ;Get the absolute address of message
   121 0000023B B409                        mov ah, 09h
   122 0000023D CD41                        int 41h
   123                                  
   124 0000023F 64488B3425-                 mov rsi, fs:[nulDevHdr]
   124 00000244 [AC000000]         
   125 00000248 B801C50000                  mov eax, 0C501h ;Connect debugger
   126 0000024D CD35                        int 35h
   127                                  l1:
   128 0000024F B401                        mov ah, 01h  ;Write with echo
   129 00000251 CD41                        int 41h
   130 00000253 EBFA                        jmp short l1
   131                                  adjustDrvHdr:
   132                                  ;Input: rsi = Effective address of driver in DOS segment
   133                                  ;       rbp = Ptr to the start of the DOS segment
   134                                  ;Output: rsi = EA of next header in DOS segment
   135 00000255 48012E                      add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   136 00000258 48016E0A                    add qword [rsi + drvHdr.strPtr], rbp
   137 0000025C 48016E12                    add qword [rsi + drvHdr.intPtr], rbp
   138 00000260 4881C622000000              add rsi, drvHdr_size
   139 00000267 C3                          ret
   140                                  
   141 00000268 0A0D5374617274696E-     startmsg db 0Ah,0Dh,"Starting SCP/DOS...",0Ah,0Dh,"$"
   141 00000271 67205343502F444F53-
   141 0000027A 2E2E2E0A0D24       
   142                                  intData:
   143 00000280 [5900000000000000]          dq terminateProcess ;Int 40h
   144 00000288 [5900000000000000]          dq functionDispatch ;Int 41h
   145 00000290 [6305000000000000]          dq terminateHandler ;Int 42h
   146 00000298 [6305000000000000]          dq ctrlCHandler     ;Int 43h
   147 000002A0 [6305000000000000]          dq critErrorHandler ;Int 44h
   148 000002A8 [F607000000000000]          dq absDiskRead      ;Int 45h
   149 000002B0 [0B08000000000000]          dq absDiskWrite     ;Int 46h
   150 000002B8 [2008000000000000]          dq terminateResident    ;Int 47h
   151 000002C0 [2008000000000000]          dq inDosHandler     ;Int 48h
   152 000002C8 [2208000000000000]          dq fastOutput       ;Int 49h
   153                                  nData:
   154 000002D0 [2E08000000000000]          dq conHdr
   155 000002D8 0480                        dw 08004h
   156 000002DA [D609000000000000]          dq nulStrat
   157 000002E2 [DC09000000000000]          dq nulIntr
   158 000002EA 4E554C2020202020            db "NUL     " ;Default NUL data
   159                                  
   160                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 
   161                                  ;-----------------------------------:
   162                                  ;       Misc System routines        :
   163                                  ;-----------------------------------:
   164                                  findLRUBuffer: 
   165                                  ;Finds least recently used buffer, links it and returns ptr to it in rbx
   166                                  ;Input: Nothing
   167                                  ;Output: rbx = Pointer to the buffer to use
   168 00000000 52                          push rdx
   169 00000001 488B1D(8F000000)            mov rbx, qword [bufHeadPtr]
   170 00000008 48813BFFFFFFFF              cmp qword [rbx + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   171 0000000F 7502                        jne .flb1
   172 00000011 5A                          pop rdx
   173 00000012 C3                          ret
   174                                  .flb1:
   175 00000013 4889DA                      mov rdx, rbx    ;Save a ptr to the previous buffer header
   176 00000016 488B1A                      mov rbx, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   177 00000019 48813BFFFFFFFF              cmp qword [rbx + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   178 00000020 75F1                        jne .flb1   ;If not LRU, keep walking, else process
   179 00000022 48C702FFFFFFFF              mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   180 00000029 488B15(8F000000)            mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   181 00000030 48891D(8F000000)            mov qword [bufHeadPtr], rbx    ;Sysvars to point to new buffer
   182 00000037 488913                      mov qword [rbx + bufferHdr.nextBufPtr], rdx
   183 0000003A 5A                          pop rdx
   184 0000003B C3                          ret
   185                                  
   186                                  findDPB:
   187                                  ;Finds the DPB for a given drive
   188                                  ;Input:   dl = Drive number (0=A, 1=B etc...)
   189                                  ;Output: al = 00, rbx = Pointer to the DPB
   190                                  ;        al = -1, Failed, no DPB for device, rbx destroyed
   191 0000003C 488B1D(6D000000)            mov rbx, qword [dpbHeadPtr]
   192                                  .fd1:
   193 00000043 30C0                        xor al, al
   194 00000045 3813                        cmp byte [rbx + dpb.bDriveNumber], dl
   195 00000047 740F                        je .fd2
   196 00000049 488B5B26                    mov rbx, qword [rbx + dpb.qNextDPBPtr]
   197 0000004D B0FF                        mov al, -1
   198 0000004F 4881FBFFFFFFFF              cmp rbx, -1 ;If rbx followed last item in list, no DPB exists for dl
   199 00000056 75EB                        jne .fd1
   200                                  .fd2:
   201 00000058 C3                          ret
   202                                  callCritError:
   203                                  ;Common Procedure to swap stacks and call Critical Error Interrupt
   204                                  ;-----------------------------------:
   205                                  ;       File System routines        :
   206                                  ;-----------------------------------:
   207                                  name2Clust:
   208                                  ;Converts a file name to a first cluster number
   209                                  ;-----------------------------------:
   210                                  ;        Interrupt routines         :
   211                                  ;-----------------------------------:
   212                                  terminateProcess:   ;Int 40h
   213                                  
   214                                  functionDispatch:   ;Int 41h Main function dispatcher
   215                                  ;ah = Function number, all other registers have various meanings
   216 00000059 FA                          cli ;Halt external interrupts
   217 0000005A FC                          cld ;Ensure all string ops occur in the right direction
   218 0000005B 80FC6A                      cmp ah, dispatchTableL/8    ;Number of functions
   219 0000005E 0F871E010000                ja .fdExitBad
   220                                      ;Cherry pick functions
   221 00000064 80FC33                      cmp ah, 33h ;CTRL+BREAK check
   222 00000067 722C                        jb .fsbegin   ;If below skip these checks
   223 00000069 0F84A3010000                je .ctrlBreakCheck
   224 0000006F 80FC64                      cmp ah, 64h
   225 00000072 0F849A010000                je .setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
   226 00000078 771B                        ja .fsbegin   ;If above, do usual Int41 entry
   227 0000007A 80FC51                      cmp ah, 51h
   228 0000007D 0F848F010000                je .getCurrProcessID    ;This an below are exactly the same
   229 00000083 80FC62                      cmp ah, 62h
   230 00000086 0F8486010000                je .getPSPaddr          ;Calls the above function
   231 0000008C 80FC50                      cmp ah, 50h
   232 0000008F 0F847D010000                je .setCurrProcessID
   233                                  .fsbegin:
   234                                      pushDOS ;Push the usual prologue registers
   192 00000095 4151                <1>  push r9
   193 00000097 4150                <1>  push r8
   194 00000099 55                  <1>  push rbp
   195 0000009A 57                  <1>  push rdi
   196 0000009B 56                  <1>  push rsi
   197 0000009C 52                  <1>  push rdx
   198 0000009D 51                  <1>  push rcx
   199 0000009E 53                  <1>  push rbx
   200 0000009F 50                  <1>  push rax
   235 000000A0 488B05(0D010000)            mov rax, qword [oldRSP]
   236 000000A7 488905(05010000)            mov qword [oldoldRSP], rax
   237 000000AE FE05(CF000000)              inc byte [inDOS]    ;Increment in DOS flag
   238 000000B4 488925(0D010000)            mov qword [oldRSP], rsp
   239                                  ;Here, we want to save oldRSP in the callers PSP
   240 000000BB 803D(CF000000)01            cmp byte [inDOS], 1 ;Check how many times we are in DOS
   241 000000C2 750B                        jne .fsb1   ;If this is first entry, save rsp in callers PSP
   242 000000C4 488B05(DE000000)            mov rax, qword [currentPSP] ;Get current PSP address
   243 000000CB 48896046                    mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
   244                                  .fsb1:
   245 000000CF 58                          pop rax     ;Get old rax back
   246 000000D0 50                          push rax    ;and push it back onto the stack
   247 000000D1 488D25(56060000)            lea rsp, critStakTop
   248 000000D8 FB                          sti         ;Reenable interrupts
   249                                  
   250 000000D9 C605(04010000)01            mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
   251                                  
   252 000000E0 48891D(15010000)            mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
   253 000000E7 0FB6DC                      movzx ebx, ah   ;Move the function number bl zero extended to rbx
   254 000000EA C1E303                      shl ebx, 3      ;Multiply the function number by 8 for offset into table
   255 000000ED 50                          push rax        ;Push rax onto the stack
   256 000000EE 488D051E010000              lea rax, qword [.dispatchTable]
   257 000000F5 4801C3                      add rbx, rax    ;Add dispatch table offset into rbx
   258 000000F8 58                          pop rax
   259 000000F9 488B1B                      mov rbx, qword [rbx]    ;Get the address from the dispatch table
   260                                  
   261 000000FC 84E4                        test ah, ah     ;Simple Terminate function?
   262 000000FE 741C                        jz .fddiskOp
   263 00000100 80FC59                      cmp ah, 59h     ;Extended Error report?
   264 00000103 7443                        je .fdGoToFunction  ;Bypass code that clears the error report
   265 00000105 80FC0C                      cmp ah, 0Ch     ;Are we a char function?
   266 00000108 7712                        ja .fddiskOp
   267                                  ;Char operations here
   268 0000010A F605(CE000000)01            test byte [critErrFlag], 1  ;Are we in critical error?
   269 00000111 7535                        jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   270 00000113 488D25(960C0000)            lea rsp, IOStakTop          ;Otherwise, switch to IO stack
   271 0000011A EB2C                        jmp short .fdGoToFunction
   272                                  .fddiskOp:
   273                                      ;Disk operations go here
   274                                      ;Clear up error info
   275 0000011C C605(D1000000)01            mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   276 00000123 C605(CE000000)00            mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   277 0000012A C605(D0000000)FF            mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   278                                  
   279 00000131 C605(04010000)00            mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   280 00000138 488D25(D6120000)            lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   281 0000013F F605(F9000000)FF            test byte [breakFlag], -1   ;Test if set
   282 00000146 7400                        jz .fdGoToFunction
   283                                  ; HANDLE CTRL+BREAK HERE!
   284                                  .fdGoToFunction:
   285 00000148 48871D(15010000)            xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   286                                      ;Potentially point rbp to caller reg frame for easy access of registers 
   287                                      ;mov rbp, qword [oldRSP]    ;Move rsp on entry into rbp
   288 0000014F FF15(15010000)              call qword [oldRBX]     ;Call the desired function, rax contains ret code
   289                                  .fdExit:
   290 00000155 FA                          cli     ;Redisable interrupts
   291                                      ;???
   292 00000156 FE0D(CF000000)              dec byte [inDOS]            ;Decrement the inDOS count
   293 0000015C 488B25(0D010000)            mov rsp, qword [oldRSP]     ;Point rsp to old stack
   294 00000163 48890424                    mov qword [rsp], rax    ;Put the ret code into its pos on the register frame
   295 00000167 488B05(05010000)            mov rax, qword [oldoldRSP]
   296 0000016E 488905(0D010000)            mov qword [oldRSP], rax
   297                                      popDOS  ;Pop the frame
   204 00000175 58                  <1>  pop rax
   205 00000176 5B                  <1>  pop rbx
   206 00000177 59                  <1>  pop rcx
   207 00000178 5A                  <1>  pop rdx
   208 00000179 5E                  <1>  pop rsi
   209 0000017A 5F                  <1>  pop rdi
   210 0000017B 5D                  <1>  pop rbp
   211 0000017C 4158                <1>  pop r8
   212 0000017E 4159                <1>  pop r9
   298 00000180 48CF                        iretq
   299                                  .fdExitBad:
   300 00000182 B400                        mov ah, 0
   301 00000184 48CF                        iretq
   302                                  .simpleTerminate:     ;ah = 00h
   303 00000186 C3                          ret
   304                                  .stdinReadEcho:     ;ah = 01h
   305                                  ;    xor ah, ah
   306                                  ;    int 36h
   307                                  ;    int 49h ;Pass al to fast output
   308                                  ;    ret
   309                                      ;xchg bx, bx
   310 00000187 488D1D(09000000)            lea rbx, charReqHdr ;Get the address of this request block
   311 0000018E 488D0562000000              lea rax, .stdinReadEchoBuffer
   312 00000195 C6032A                      mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   313 00000198 C6430204                    mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
   314 0000019C 66C743030000                mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   315 000001A2 4889430E                    mov qword [rbx + ioReqPkt.bufptr], rax
   316 000001A6 C7431601000000              mov dword [rbx + ioReqPkt.tfrlen], 01
   317 000001AD E814080000                  call commonStrat
   318 000001B2 E826080000                  call conDriver
   319 000001B7 803D3900000000              cmp byte [.stdinReadEchoBuffer], 00h
   320 000001BE 74C7                        jz .stdinReadEcho
   321 000001C0 488D1D(09000000)            lea rbx, charReqHdr ;Get the address of this request block
   322 000001C7 488D0529000000              lea rax, .stdinReadEchoBuffer
   323 000001CE C6032A                      mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   324 000001D1 C6430208                    mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
   325 000001D5 66C743030000                mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   326 000001DB 4889430E                    mov qword [rbx + ioReqPkt.bufptr], rax
   327 000001DF C7431601000000              mov dword [rbx + ioReqPkt.tfrlen], 01
   328 000001E6 E8DB070000                  call commonStrat
   329 000001EB E8ED070000                  call conDriver
   330 000001F0 8A0501000000                mov al, byte [.stdinReadEchoBuffer]
   331 000001F6 C3                          ret
   332 000001F7 00                      .stdinReadEchoBuffer    db 0
   333                                  .stdoutWrite:       ;ah = 02h
   334                                  ;Bspace is regular cursor left, does not insert a blank
   335 000001F8 50                          push rax
   336 000001F9 88D0                        mov al, dl
   337 000001FB CD49                        int 49h
   338 000001FD 58                          pop rax
   339 000001FE C3                          ret
   340                                  .stdauxRead:        ;ah = 03h
   341                                  .stdauxWrite:       ;ah = 04h
   342                                  .stdprnWrite:       ;ah = 05h
   343                                  .directCONIO:       ;ah = 06h
   344                                  .waitDirectInNoEcho:;ah = 07h
   345                                  .waitStdinNoEcho:   ;ah = 08h
   346 000001FF C3                          ret
   347                                  .printString:       ;ah = 09h
   348 00000200 50                          push rax
   349 00000201 52                          push rdx
   350                                  .ps0:
   351 00000202 8A02                        mov al, byte [rdx]
   352 00000204 3C24                        cmp al, "$"
   353 00000206 7407                        je .ps1
   354 00000208 48FFC2                      inc rdx ;Goto next char
   355 0000020B CD49                        int 49h ;Print char in al
   356 0000020D EBF3                        jmp short .ps0
   357                                  .ps1:
   358 0000020F 5A                          pop rdx
   359 00000210 58                          pop rax
   360 00000211 C3                          ret
   361                                  .buffStdinInput:    ;ah = 0Ah
   362                                  .checkStdinStatus:  ;ah = 0Bh
   363                                  .clearbuffDoFunc:   ;ah = 0Ch
   364                                  .diskReset:         ;ah = 0Dh
   365                                  .selectDisk:        ;ah = 0Eh
   366                                  .openFileFCB:       ;ah = 0Fh
   367                                  .closeFileFCB:      ;ah = 10h
   368                                  .findFirstFileFCB:  ;ah = 11h
   369                                  .findNextFileFCB:   ;ah = 12h
   370                                  .deleteFileFCB:     ;ah = 13h
   371                                  .sequentialReadFCB: ;ah = 14h
   372                                  .sequentialWriteFCB:;ah = 15h
   373                                  .createFileFCB:     ;ah = 16h
   374                                  .renameFileFCB:     ;ah = 17h
   375                                                      ;ah = 18h unused
   376                                  .getCurrentDisk:       ;ah = 19h, get current default drive
   377                                  .setDTA:            ;ah = 1Ah
   378                                  .FATinfoDefault:    ;ah = 1Bh
   379                                  .FatinfoDevice:     ;ah = 1Ch
   380                                                      ;ah = 1Dh unused
   381                                                      ;ah = 1Eh unused
   382                                  .getCurrentDPBptr:  ;ah = 1Fh, simply calls int 41h ah = 32h with dl = 0
   383                                                      ;ah = 20h unused
   384                                  .randomReadFCB:     ;ah = 21h
   385                                  .randomWriteFCB:    ;ah = 22h
   386                                  .getFileSizeFCB:    ;ah = 23h
   387                                  .setRelRecordFCB:   ;ah = 24h
   388                                  .setIntVector:      ;ah = 25h
   389                                  .createNewPSP:      ;ah = 26h
   390                                  .randBlockReadFCB:  ;ah = 27h
   391                                  .randBlockWriteFCB: ;ah = 28h
   392                                  .parseFilenameFCB:  ;ah = 29h
   393                                  .getDate:           ;ah = 2Ah
   394                                  .setDate:           ;ah = 2Bh
   395                                  .getTime:           ;ah = 2Ch
   396                                  .setTime:           ;ah = 2Dh
   397                                  .setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   398                                  .getDTA:            ;ah = 2Fh
   399                                  .getDOSversion:     ;ah = 30h
   400                                  .terminateStayRes:  ;ah = 31h
   401                                  .getDeviceDPBptr:   ;ah = 32h
   402                                  .ctrlBreakCheck:    ;ah = 33h
   403                                  .getInDOSflagPtr:   ;ah = 34h
   404                                  .getIntVector:      ;ah = 35h
   405                                  .getDiskFreeSpace:  ;ah = 36h
   406                                  .getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
   407                                  .getsetCountryInfo: ;ah = 38h, localisation info
   408                                  .makeDIR:           ;ah = 39h
   409                                  .removeDIR:         ;ah = 3Ah
   410                                  .changeCurrentDIR:  ;ah = 3Bh, changes directory for current drive
   411                                  .createFileHdl:     ;ah = 3Ch, handle function
   412                                  .openFileHdl:       ;ah = 3Dh, handle function
   413                                  .closeFileHdl:      ;ah = 3Eh, handle function
   414                                  .readFileHdl:       ;ah = 3Fh, handle function
   415                                  .writeFileHdl:      ;ah = 40h, handle function
   416                                  .deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   417                                  .movFileReadPtr:    ;ah = 42h, handle function, LSEEK
   418                                  .changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   419                                  .ioctrl:            ;ah = 44h, handle function
   420                                  .duplicateHandle:   ;ah = 45h, handle function
   421                                  .forceDuplicateHdl: ;ah = 46h, handle function
   422                                  .getCurrentDIR:     ;ah = 47h
   423                                  .allocateMemory:    ;ah = 48h
   424                                  .freeMemory:        ;ah = 49h
   425                                  .reallocMemory:     ;ah = 4Ah
   426                                  .loadExecChild:     ;ah = 4Bh, EXEC
   427                                  .terminateClean:    ;ah = 4Ch, EXIT
   428                                  .getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   429                                  .findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   430                                  .findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   431                                  .setCurrProcessID:  ;ah = 50h, set current process ID
   432                                  .getCurrProcessID:  ;ah = 51h, get current process ID
   433                                  .getSysVarsPtr:     ;ah = 52h
   434                                  .createDPB:         ;ah = 53h, generates a DPB from a given BPB
   435                                  .getVerifySetting:  ;ah = 54h
   436                                  .createPSP:         ;ah = 55h, creates a PSP for a program
   437                                  .renameFile:        ;ah = 56h
   438                                  .getSetFileDateTime:;ah = 57h
   439                                  .getsetMallocStrat: ;ah = 58h
   440                                  .getExtendedError:  ;ah = 59h
   441                                  .createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   442                                  .createNewFile:     ;ah = 5Bh
   443                                  .lockUnlockFile:    ;ah = 5Ch
   444                                  .getCritErrorInfo:  ;ah = 5Dh
   445                                  .networkServices:   ;ah = 5Eh, do nothing
   446                                  .networkRedirection:;ah = 5Fh, do nothing
   447                                  .trueName:          ;ah = 60h, get fully qualified name
   448                                                      ;ah = 61h, reserved
   449                                  .getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   450                                                      ;ah = 63h, reserved
   451                                  .setDriverLookahead:;ah = 64h, reserved
   452                                  .getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
   453                                  .getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
   454                                  .setHandleCount:    ;ah = 67h
   455                                  .commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   456                                  .getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   457                                  .return:
   458 00000212 C3                          ret
   459                                  
   460                                  
   461                                  .dispatchTable:
   462 00000213 [8601000000000000]          dq .simpleTerminate     ;AH = 00H, PROCESS MANAGEMENT
   463 0000021B [8701000000000000]          dq .stdinReadEcho       ;AH = 01H, CHAR IO
   464 00000223 [F801000000000000]          dq .stdoutWrite         ;AH = 02H, CHAR IO
   465 0000022B [FF01000000000000]          dq .stdauxRead          ;AH = 03H, CHAR IO
   466 00000233 [FF01000000000000]          dq .stdauxWrite         ;AH = 04H, CHAR IO
   467 0000023B [FF01000000000000]          dq .stdprnWrite         ;AH = 05H, CHAR IO
   468 00000243 [FF01000000000000]          dq .directCONIO         ;AH = 06H, CHAR IO
   469 0000024B [FF01000000000000]          dq .waitDirectInNoEcho  ;AH = 07H, CHAR IO
   470 00000253 [FF01000000000000]          dq .waitStdinNoEcho     ;AH = 08H, CHAR IO
   471 0000025B [0002000000000000]          dq .printString         ;AH = 09H, CHAR IO
   472 00000263 [1202000000000000]          dq .buffStdinInput      ;AH = 0AH, CHAR IO
   473 0000026B [1202000000000000]          dq .checkStdinStatus    ;AH = 0BH, CHAR IO
   474 00000273 [1202000000000000]          dq .clearbuffDoFunc     ;AH = 0CH, CHAR IO
   475 0000027B [1202000000000000]          dq .diskReset           ;AH = 0DH, DISK MANAGEMENT
   476 00000283 [1202000000000000]          dq .selectDisk          ;AH = 0EH, DISK MANAGEMENT
   477 0000028B [1202000000000000]          dq .openFileFCB         ;AH = 0FH, FILE OPERATION       FCB
   478 00000293 [1202000000000000]          dq .closeFileFCB        ;AH = 10H, FILE OPERATION       FCB
   479 0000029B [1202000000000000]          dq .findFirstFileFCB    ;AH = 11H, FILE OPERATION       FCB
   480 000002A3 [1202000000000000]          dq .findNextFileFCB     ;AH = 12H, FILE OPERATION       FCB
   481 000002AB [1202000000000000]          dq .deleteFileFCB       ;AH = 13H, FILE OPERATION       FCB
   482 000002B3 [1202000000000000]          dq .sequentialReadFCB   ;AH = 14H, RECORD OPERATION     FCB
   483 000002BB [1202000000000000]          dq .sequentialWriteFCB  ;AH = 15H, RECORD OPERTAION     FCB
   484 000002C3 [1202000000000000]          dq .createFileFCB       ;AH = 16H, FILE OPERATION       FCB
   485 000002CB [1202000000000000]          dq .renameFileFCB       ;AH = 17H, FILE OPERATION       FCB
   486 000002D3 [1202000000000000]          dq .return              ;AH = 18H, RESERVED
   487 000002DB [1202000000000000]          dq .getCurrentDisk      ;AH = 19H, DISK MANAGEMENT
   488 000002E3 [1202000000000000]          dq .setDTA              ;AH = 1AH, RECORD OPERATION     F/H
   489 000002EB [1202000000000000]          dq .FATinfoDefault      ;AH = 1BH, DISK MANAGEMENT
   490 000002F3 [1202000000000000]          dq .FatinfoDevice       ;AH = 1CH, DISK MANAGEMENT
   491 000002FB [1202000000000000]          dq .return              ;AH = 1DH, RESERVED
   492 00000303 [1202000000000000]          dq .return              ;AH = 1EH, RESERVED
   493 0000030B [1202000000000000]          dq .getCurrentDPBptr    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
   494 00000313 [1202000000000000]          dq .return              ;AH = 20H, RESERVED
   495 0000031B [1202000000000000]          dq .randomReadFCB       ;AH = 21H, RECORD OPERATION     FCB
   496 00000323 [1202000000000000]          dq .randomWriteFCB      ;AH = 22H, RECORD OPERATION     FCB
   497 0000032B [1202000000000000]          dq .getFileSizeFCB      ;AH = 23H, FILE OPERATION       FCB
   498 00000333 [1202000000000000]          dq .setRelRecordFCB     ;AH = 24H, RECORD OPERATION     FCB
   499 0000033B [1202000000000000]          dq .setIntVector        ;AH = 25H, MISC. SYS. FUNCTION
   500 00000343 [1202000000000000]          dq .createNewPSP        ;AH = 26H, PROCESS MANAGEMENT
   501 0000034B [1202000000000000]          dq .randBlockReadFCB    ;AH = 27H, RECORD OPERATION     FCB
   502 00000353 [1202000000000000]          dq .randBlockWriteFCB   ;AH = 28H, RECORD OPERATION     FCB
   503 0000035B [1202000000000000]          dq .parseFilenameFCB    ;AH = 29H, FILE OPERATION       FCB
   504 00000363 [1202000000000000]          dq .getDate             ;AH = 2AH, TIME AND DATE
   505 0000036B [1202000000000000]          dq .setDate             ;AH = 2BH, TIME AND DATE
   506 00000373 [1202000000000000]          dq .getTime             ;AH = 2CH, TIME AND DATE
   507 0000037B [1202000000000000]          dq .setTime             ;AH = 2DH, TIME AND DATE
   508 00000383 [1202000000000000]          dq .setResetVerify      ;AH = 2EH, DISK MANAGEMENT
   509 0000038B [1202000000000000]          dq .getDTA              ;AH = 2FH, RECORD OPERATION     F/H
   510 00000393 [1202000000000000]          dq .getDOSversion       ;AH = 30H, MISC. SYS. FUNCTION
   511 0000039B [1202000000000000]          dq .terminateStayRes    ;AH = 31H, PROCESS MANAGEMENT
   512 000003A3 [1202000000000000]          dq .getDeviceDPBptr     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
   513 000003AB [1202000000000000]          dq .ctrlBreakCheck      ;AH = 33H, MISC. SYS. FUNCTION
   514 000003B3 [1202000000000000]          dq .getInDOSflagPtr     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
   515 000003BB [1202000000000000]          dq .getIntVector        ;AH = 35H, MISC. SYS. FUNCTION
   516 000003C3 [1202000000000000]          dq .getDiskFreeSpace    ;AH = 36H, DISK MANAGEMENT
   517 000003CB [1202000000000000]          dq .getsetSwitchChar    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
   518 000003D3 [1202000000000000]          dq .getsetCountryInfo   ;AH = 38H, MISC. SYS. FUNCTION
   519 000003DB [1202000000000000]          dq .makeDIR             ;AH = 39H, DIRECTORY OPERATION
   520 000003E3 [1202000000000000]          dq .removeDIR           ;AH = 3AH, DIRECTORY OPERATION
   521 000003EB [1202000000000000]          dq .changeCurrentDIR    ;AH = 3BH, DIRECTORY OPERATION
   522 000003F3 [1202000000000000]          dq .createFileHdl       ;AH = 3CH, FILE OPERATION       HANDLE
   523 000003FB [1202000000000000]          dq .openFileHdl         ;AH = 3DH, FILE OPERATION       HANDLE
   524 00000403 [1202000000000000]          dq .closeFileHdl        ;AH = 3EH, FILE OPERATION       HANDLE
   525 0000040B [1202000000000000]          dq .readFileHdl         ;AH = 3FH, RECORD OPERATION     HANDLE
   526 00000413 [1202000000000000]          dq .writeFileHdl        ;AH = 40H, RECORD OPERATION     HANDLE
   527 0000041B [1202000000000000]          dq .deleteFileHdl       ;AH = 41H, FILE OPERATION       HANDLE
   528 00000423 [1202000000000000]          dq .movFileReadPtr      ;AH = 42H, RECORD OPERATION     HANDLE
   529 0000042B [1202000000000000]          dq .changeFileModeHdl   ;AH = 43H, FILE OPERATION       HANDLE
   530 00000433 [1202000000000000]          dq .ioctrl              ;AH = 44H, MISC. SYS. FUNCTION
   531 0000043B [1202000000000000]          dq .duplicateHandle     ;AH = 45H, FILE OPERATION       HANDLE
   532 00000443 [1202000000000000]          dq .forceDuplicateHdl   ;AH = 46H, FILE OPERATION       HANDLE
   533 0000044B [1202000000000000]          dq .getCurrentDIR       ;AH = 47H, DIRECTORY OPERATION
   534 00000453 [1202000000000000]          dq .allocateMemory      ;AH = 48H, MEMORY MANAGEMENT
   535 0000045B [1202000000000000]          dq .freeMemory          ;AH = 49H, MEMORY MANAGEMENT
   536 00000463 [1202000000000000]          dq .reallocMemory       ;AH = 4AH, MEMORY MANAGEMENT
   537 0000046B [1202000000000000]          dq .loadExecChild       ;AH = 4BH, PROCESS MANAGEMENT
   538 00000473 [1202000000000000]          dq .terminateClean      ;AH = 4CH, PROCESS MANAGEMENT
   539 0000047B [1202000000000000]          dq .getRetCodeChild     ;AH = 4DH, PROCESS MANAGEMENT
   540 00000483 [1202000000000000]          dq .findFirstFileHdl    ;AH = 4EH, FILE OPERATION       HANDLE
   541 0000048B [1202000000000000]          dq .findNextFileHdl     ;AH = 4FH, FILE OPERATION       HANDLE
   542 00000493 [1202000000000000]          dq .setCurrProcessID    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   543 0000049B [1202000000000000]          dq .getCurrProcessID    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   544 000004A3 [1202000000000000]          dq .getSysVarsPtr       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   545 000004AB [1202000000000000]          dq .createDPB           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   546 000004B3 [1202000000000000]          dq .getVerifySetting    ;AH = 54H, DISK MANAGEMENT
   547 000004BB [1202000000000000]          dq .createPSP           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   548 000004C3 [1202000000000000]          dq .renameFile          ;AH = 56H, FILE OPERATION       HANDLE
   549 000004CB [1202000000000000]          dq .getSetFileDateTime  ;AH = 57H, FILE OPERATION       HANDLE
   550 000004D3 [1202000000000000]          dq .getsetMallocStrat   ;AH = 58H, MEMORY MANAGEMENT
   551 000004DB [1202000000000000]          dq .getExtendedError    ;AH = 59H, MISC. SYS. FUNCTION
   552 000004E3 [1202000000000000]          dq .createUniqueFile    ;AH = 5AH, FILE OPERATION       HANDLE
   553 000004EB [1202000000000000]          dq .createNewFile       ;AH = 5BH, FILE OPERATION       HANDLE
   554 000004F3 [1202000000000000]          dq .lockUnlockFile      ;AH = 5CH, RECORD OPERATION     HANDLE
   555 000004FB [1202000000000000]          dq .getCritErrorInfo    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   556 00000503 [1202000000000000]          dq .networkServices     ;AH = 5EH, RESERVED NETWORK FUNCTION
   557 0000050B [1202000000000000]          dq .networkRedirection  ;AH = 5FH, RESERVED NETWORK FUNCTION
   558 00000513 [1202000000000000]          dq .trueName            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   559 0000051B [1202000000000000]          dq .return              ;AH = 61H, RESERVED
   560 00000523 [1202000000000000]          dq .getPSPaddr          ;AH = 62H, PROCESS MANAGEMENT
   561 0000052B [1202000000000000]          dq .return              ;AH = 63H, RESERVED
   562 00000533 [1202000000000000]          dq .setDriverLookahead  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   563 0000053B [1202000000000000]          dq .getExtLocalInfo     ;AH = 65H, MISC. SYS. FUNCTION
   564 00000543 [1202000000000000]          dq .getsetGlobalCP      ;AH = 66H, MISC. SYS. FUNCTION
   565 0000054B [1202000000000000]          dq .setHandleCount      ;AH = 67H, FILE OPERAITON       F/H
   566 00000553 [1202000000000000]          dq .commitFile          ;AH = 68H, FILE OPERATION       HANDLE
   567 0000055B [1202000000000000]          dq .getsetDiskSerial    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   568                                  dispatchTableL  equ $ - .dispatchTable 
   569                                  
   570                                  terminateHandler:   ;Int 42h
   571                                  ctrlCHandler:       ;Int 43h
   572                                  critErrorHandler:   ;Int 44h
   573                                  ;User Stack in usage here, must be swapped to before this is called
   574                                  ;Entered with:  
   575                                  ;               AH = Critical Error Bitfield
   576                                  ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
   577                                  ;               Bit 6 - Reserved
   578                                  ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
   579                                  ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
   580                                  ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
   581                                  ;               Bits [2-1] = Affected Disk Error
   582                                  ;                     0 0   DOS area
   583                                  ;                     0 1   FAT area
   584                                  ;                     1 0   Directory area
   585                                  ;                     1 1   Data area
   586                                  ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   587                                  ;               AL  = Failing drive number if AH[7] = 0
   588                                  ;               DIL = Error code for errorMsg
   589                                  ;               RSI = EA of Device Header for which device the error occured
   590                                  ;Return:
   591                                  ;               AL = 0 - Ignore the Error       (Ignore)
   592                                  ;                  = 1 - Retry the Operation    (Retry)
   593                                  ;                  = 2 - Terminate the Program  (Abort)
   594                                  ;                  = 3 - Fail the DOS call      (Fail)
   595 00000563 53                          push rbx
   596 00000564 51                          push rcx
   597 00000565 52                          push rdx
   598 00000566 57                          push rdi
   599 00000567 56                          push rsi
   600 00000568 FC                          cld         ;Make String ops go forward
   601                                  
   602 00000569 6689C3                      mov bx, ax  ;Save ah in bh and al in bl (if needed)
   603 0000056C 488D155E020000              lea rdx, qword [.crlf]
   604 00000573 B409                        mov ah, 09h ;Print String
   605 00000575 CD41                        int 41h     ;Call DOS to print CRLF part of message
   606                                  
   607 00000577 81E7FF000000                and edi, 00FFh   ;Zero the upper bytes of DI just in case
   608 0000057D B90C000000                  mov ecx, 0Ch
   609 00000582 39CF                        cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
   610 00000584 0F47F9                      cmova edi, ecx  ;If it is, move Gen Error into edi
   611 00000587 480FB7FF                    movzx rdi, di
   612 0000058B 4889FA                      mov rdx, rdi    ;Copy error code
   613 0000058E 48C1E704                    shl rdi, 4  ;Multiply by 16
   614 00000592 48D1E2                      shl rdx, 1  ;Multiply by 2
   615 00000595 4801D7                      add rdi, rdx    ;Add the resultant multiplications
   616 00000598 488D1523010000              lea rdx, qword [.errorMsgTable]
   617 0000059F 488D143A                    lea rdx, qword [rdx+rdi]   ;Load EA to rdx
   618 000005A3 B409                        mov ah, 09h ;Print String
   619 000005A5 CD41                        int 41h     ;Call DOS to print first part of message
   620                                  
   621 000005A7 488D1505020000              lea rdx, qword [.readmsg]
   622 000005AE 488D3D0D020000              lea rdi, qword [.writemsg]
   623 000005B5 F6C701                      test bh, 1  ;Bit 0 is set if write operation
   624 000005B8 480F45D7                    cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
   625 000005BC B409                        mov ah, 09h ;Print String
   626 000005BE CD41                        int 41h     ;Call DOS to print error reading/writing portion
   627                                  
   628 000005C0 F6C780                      test bh, 80h    ;Test bit 7 for char/Disk assertation
   629 000005C3 0F85DF000000                jnz .charError
   630                                  ;Disk error continues here
   631 000005C9 488D15DC010000              lea rdx, qword [.drive] ;Drive message
   632 000005D0 B409                        mov ah, 09h
   633 000005D2 CD41                        int 41h
   634 000005D4 88DA                        mov dl, bl  ;Get zero based drive number into dl
   635 000005D6 80C241                      add dl, "A" ;Add ASCII code
   636 000005D9 B402                        mov ah, 02h ;Print char in dl
   637 000005DB CD41                        int 41h
   638                                  .userInput:
   639 000005DD 488D15ED010000              lea rdx, qword [.crlf]  ;Print new line
   640 000005E4 B409                        mov ah, 09h
   641 000005E6 CD41                        int 41h
   642                                  ;Abort, Retry, Ignore, Fail is word order
   643                                  ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   644                                  .userAbort:
   645                                  ;Abort is always an option
   646 000005E8 488D15E5010000              lea rdx, qword [.abortmsg]
   647 000005EF B409                        mov ah, 09h
   648 000005F1 CD41                        int 41h ;Call DOS to prompt user for ABORT option
   649                                  .userRetry:
   650 000005F3 F6C710                      test bh, 10h  ;Bit 4 is retry bit
   651 000005F6 7416                        jz .userIgnore    ;If clear, dont print message
   652 000005F8 488D15ED010000              lea rdx, qword [.betweenMsg]
   653 000005FF B409                        mov ah, 09h
   654 00000601 CD41                        int 41h
   655 00000603 488D15D7010000              lea rdx, qword [.retrymsg]
   656 0000060A B409                        mov ah, 09h
   657 0000060C CD41                        int 41h
   658                                  .userIgnore:
   659 0000060E F6C720                      test bh, 20h    ;Bit 5 is ignore bit
   660 00000611 7416                        jz .userFail
   661 00000613 488D15D2010000              lea rdx, qword [.betweenMsg]
   662 0000061A B409                        mov ah, 09h
   663 0000061C CD41                        int 41h
   664 0000061E 488D15B5010000              lea rdx, qword [.ignoremsg]
   665 00000625 B409                        mov ah, 09h
   666 00000627 CD41                        int 41h
   667                                  .userFail:
   668 00000629 F6C708                      test bh, 08h    ;Bit 3 is Fail bit
   669 0000062C 7416                        jz .userMsgEnd
   670 0000062E 488D15B7010000              lea rdx, qword [.betweenMsg]
   671 00000635 B409                        mov ah, 09h
   672 00000637 CD41                        int 41h
   673 00000639 488D15A7010000              lea rdx, qword [.failmsg]
   674 00000640 B409                        mov ah, 09h
   675 00000642 CD41                        int 41h
   676                                  .userMsgEnd:
   677 00000644 488D15A4010000              lea rdx, qword [.endMsg]
   678 0000064B B409                        mov ah, 09h
   679 0000064D CD41                        int 41h
   680                                  ;Get user input now 
   681 0000064F 31C9                        xor ecx, ecx  ;4 Possible Responses
   682 00000651 488D3D9A010000              lea rdi, qword [.responses] ;Go to start of string
   683 00000658 B401                        mov ah, 01h ;STDIN without Console Echo
   684 0000065A CD41                        int 41h ;Get char in al
   685 0000065C 3C61                        cmp al, "a" ;Chack if lowercase
   686 0000065E 7202                        jb .uip1    ;If the value is below, ignore subtraction
   687 00000660 2C20                        sub al, "a"-"A"  ;Turn the char into uppercase
   688                                  .uip1:
   689 00000662 AE                          scasb   ;Compare char to list, offset gives return code
   690 00000663 740F                        je .validInput  ;If they are equal, ecx has return code
   691 00000665 FFC1                        inc ecx
   692 00000667 81F904000000                cmp ecx, 4
   693 0000066D 75F3                        jne .uip1
   694 0000066F E969FFFFFF                  jmp .userInput ;If valid char not found, keep waiting 
   695                                  .validInput:
   696 00000674 88C8                        mov al, cl  ;Move the offset into .responses into al
   697                                  ;Now check if the input is permitted
   698 00000676 3C02                        cmp al, 2   ;Check if abort, abort always permitted
   699 00000678 7427                        je .cehExit
   700 0000067A 84C0                        test al, al ;Check if 0 => Ignore
   701 0000067C 740F                        je .viIgnore
   702 0000067E 3C01                        cmp al, 1   ;Check if 1 => Retry
   703 00000680 7416                        je .viRetry
   704                                  .viFail:    ;Fallthrough for fail (al = 3)
   705 00000682 F6C708                      test bh, 8  ;Bit 3 is Fail bit
   706 00000685 0F8452FFFFFF                jz .userInput  ;If bit 3 is zero, prompt and get input again
   707 0000068B EB14                        jmp short .cehExit
   708                                  .viIgnore:
   709 0000068D F6C720                      test bh, 20h    ;Bit 5 is Ignore bit
   710 00000690 0F8447FFFFFF                jz .userInput
   711 00000696 EB09                        jmp short .cehExit
   712                                  .viRetry:
   713 00000698 F6C710                      test bh, 10h    ;Bit 4 is Retry bit
   714 0000069B 0F843CFFFFFF                jz .userInput
   715                                  .cehExit:
   716 000006A1 5E                          pop rsi
   717 000006A2 5F                          pop rdi
   718 000006A3 5A                          pop rdx
   719 000006A4 59                          pop rcx
   720 000006A5 5B                          pop rbx
   721 000006A6 48CF                        iretq
   722                                  .charError:
   723 000006A8 B908000000                  mov ecx, 8  ;8 chars in device name
   724 000006AD 4881C61A000000              add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   725                                  .ce1:
   726 000006B4 AC                          lodsb   ;Get a string char into al and inc rsi
   727 000006B5 88C2                        mov dl, al  ;Move char into dl
   728 000006B7 B402                        mov ah, 02h
   729 000006B9 CD41                        int 41h ;Print char
   730 000006BB E2F7                        loop .ce1   ;Keep looping until all 8 char device chars have been printed
   731 000006BD E91BFFFFFF                  jmp .userInput
   732                                  
   733                                  .errorMsgTable: ;Each table entry is 18 chars long
   734 000006C2 57726974652050726F-                 db "Write Protect $   "       ;Error 0
   734 000006CB 746563742024202020 
   735 000006D4 556E6B6E6F776E2055-                 db "Unknown Unit $    "       ;Error 1
   735 000006DD 6E6974202420202020 
   736 000006E6 4E6F74205265616479-                 db "Not Ready $       "       ;Error 2
   736 000006EF 202420202020202020 
   737 000006F8 556E6B6E6F776E2043-                 db "Unknown Command $ "       ;Error 3
   737 00000701 6F6D6D616E64202420 
   738 0000070A 446174612024202020-                 db "Data $            "       ;Error 4
   738 00000713 202020202020202020 
   739 0000071C 426164205265717565-                 db "Bad Request $     "       ;Error 5
   739 00000725 737420242020202020 
   740 0000072E 5365656B2024202020-                 db "Seek $            "       ;Error 6
   740 00000737 202020202020202020 
   741 00000740 556E6B6E6F776E204D-                 db "Unknown Media $   "       ;Error 7
   741 00000749 656469612024202020 
   742 00000752 536563746F72204E6F-                 db "Sector Not Found $"       ;Error 8
   742 0000075B 7420466F756E642024 
   743 00000764 4F7574204F66205061-                 db "Out Of Paper $    "       ;Error 9
   743 0000076D 706572202420202020 
   744 00000776 577269746520466175-                 db "Write Fault $     "       ;Error A
   744 0000077F 6C7420242020202020 
   745 00000788 52656164204661756C-                 db "Read Fault $      "       ;Error B
   745 00000791 742024202020202020 
   746 0000079A 47656E6572616C2046-                 db "General Failure $ "       ;Error C
   746 000007A3 61696C757265202420 
   747                                  
   748 000007AC 64726976652024          .drive      db "drive $"
   749 000007B3 6572726F7220726561-     .readmsg    db "error reading $"
   749 000007BC 64696E672024       
   750 000007C2 6572726F7220777269-     .writemsg   db "error writing $"
   750 000007CB 74696E672024       
   751 000007D1 0A0D24                  .crlf       db 0Ah, 0Dh, "$"
   752 000007D4 41626F727424            .abortmsg   db "Abort$" 
   753 000007DA 49676E6F726524          .ignoremsg  db "Ignore$"
   754 000007E1 526574727924            .retrymsg   db "Retry$"
   755 000007E7 4661696C24              .failmsg    db "Fail$"
   756 000007EC 2C2024                  .betweenMsg db ", $"
   757 000007EF 3F2024                  .endMsg     db "? $"
   758 000007F2 49524146                .responses  db "IRAF"   ;Abort Retry Ignore Fail
   759                                  absDiskRead:        ;Int 45h
   760                                  ;al = Drive number
   761                                  ;rbx = Memory Buffer address
   762                                  ;ecx = Number of sectors to read (max 255 for now)
   763                                  ;rdx = Start LBA to read from
   764 000007F6 480FB6C0                    movzx rax, al   ;Zero extend DOS drive number 
   765 000007FA 8A80[61120000]              mov al, byte [msdDriver.msdBIOSmap + rax] ;Get translated BIOS num into al
   766 00000800 4891                        xchg rax, rcx
   767 00000802 4887CA                      xchg rcx, rdx
   768 00000805 B482                        mov ah, 82h
   769 00000807 CD33                        int 33h
   770 00000809 48CF                        iretq
   771                                  absDiskWrite:       ;Int 46h
   772 0000080B 480FB6C0                    movzx rax, al   ;Zero extend DOS drive number 
   773 0000080F 8A80[61120000]              mov al, byte [msdDriver.msdBIOSmap + rax] ;Get translated BIOS num into al
   774 00000815 4891                        xchg rax, rcx
   775 00000817 4887CA                      xchg rcx, rdx
   776 0000081A B483                        mov ah, 83h
   777 0000081C CD33                        int 33h
   778 0000081E 48CF                        iretq
   779                                  terminateResident:  ;Int 47h
   780                                  inDosHandler:       ;Int 48h
   781                                  ;Called when DOS idle
   782 00000820 48CF                        iretq
   783                                  fastOutput:         ;Int 49h
   784                                  ;Called with char to transfer in al
   785 00000822 50                          push rax
   786 00000823 B40E                        mov ah, 0Eh
   787 00000825 CD30                        int 30h
   788 00000827 58                          pop rax
   789 00000828 48CF                        iretq
   790                                  passCommand:        ;Int 4Eh, hooked by COMMAND.COM
   791 0000082A 48CF                        iretq
   792                                  multiplex:          ;Int 4Fh, kept as iretq for now
   793 0000082C 48CF                        iretq
   794                                  ;-----------------------------------:
   795                                  ;          Driver routines          :
   796                                  ;-----------------------------------:
   797                                  drivers:
   798                                  conHdr:
   799 0000082E [5008000000000000]          dq auxHdr
   800 00000836 1308                        dw 0813h
   801 00000838 [C609000000000000]          dq commonStrat
   802 00000840 [DD09000000000000]          dq conDriver
   803 00000848 434F4E2020202020            db "CON     "
   804                                  auxHdr:
   805 00000850 [7208000000000000]          dq prnHdr
   806 00000858 0080                        dw 08000h
   807 0000085A [C609000000000000]          dq commonStrat
   808 00000862 [660C000000000000]          dq com1Intr
   809 0000086A 4155582020202020            db "AUX     "
   810                                  prnHdr:
   811 00000872 [9408000000000000]          dq clkHdr
   812 0000087A 40A0                        dw 0A040h
   813 0000087C [D609000000000000]          dq nulStrat
   814 00000884 [DC09000000000000]          dq nulIntr
   815 0000088C 50524E2020202020            db "PRN     "
   816                                  clkHdr:
   817 00000894 [B608000000000000]          dq msdHdr
   818 0000089C 0880                        dw 08008h
   819 0000089E [C609000000000000]          dq commonStrat
   820 000008A6 [150B000000000000]          dq clkDriver
   821 000008AE 434C4F434B242020            db "CLOCK$  "
   822                                  msdHdr:
   823 000008B6 [D808000000000000]          dq com1Hdr
   824 000008BE 0008                        dw 00800h   ;Once Generic IO implemented, change to 00840h
   825 000008C0 [C609000000000000]          dq commonStrat
   826 000008C8 [0B0E000000000000]          dq msdDriver
   827 000008D0 0000000000000000            db 0,0,0,0,0,0,0,0
   828                                  com1Hdr:
   829 000008D8 [FA08000000000000]          dq com2Hdr
   830 000008E0 0080                        dw 08000h
   831 000008E2 [C609000000000000]          dq commonStrat
   832 000008EA [660C000000000000]          dq com1Intr
   833 000008F2 434F4D3120202020            db "COM1    "
   834                                  com2Hdr:
   835 000008FA [1C09000000000000]          dq com3Hdr
   836 00000902 0080                        dw 08000h
   837 00000904 [C609000000000000]          dq commonStrat
   838 0000090C [6F0C000000000000]          dq com2Intr
   839 00000914 434F4D3220202020            db "COM2    "
   840                                  com3Hdr:
   841 0000091C [3E09000000000000]          dq com4Hdr
   842 00000924 0080                        dw 08000h
   843 00000926 [C609000000000000]          dq commonStrat
   844 0000092E [780C000000000000]          dq com3Intr
   845 00000936 434F4D3320202020            db "COM3    "
   846                                  com4Hdr:
   847 0000093E [6009000000000000]          dq lpt1Hdr
   848 00000946 0080                        dw 08000h
   849 00000948 [C609000000000000]          dq commonStrat
   850 00000950 [810C000000000000]          dq com4Intr
   851 00000958 434F4D3420202020            db "COM4    "
   852                                  lpt1Hdr:
   853 00000960 [8209000000000000]          dq lpt2Hdr
   854 00000968 40A0                        dw 0A040h
   855 0000096A [D609000000000000]          dq nulStrat
   856 00000972 [DC09000000000000]          dq nulIntr
   857 0000097A 4C50543120202020            db "LPT1    "
   858                                  lpt2Hdr:
   859 00000982 [A409000000000000]          dq lpt3Hdr
   860 0000098A 40A0                        dw 0A040h
   861 0000098C [D609000000000000]          dq nulStrat
   862 00000994 [DC09000000000000]          dq nulIntr
   863 0000099C 4C50543220202020            db "LPT2    "
   864                                  lpt3Hdr:
   865 000009A4 FFFFFFFFFFFFFFFF            dq -1
   866 000009AC 40A0                        dw 0A040h
   867 000009AE [D609000000000000]          dq nulStrat
   868 000009B6 [DC09000000000000]          dq nulIntr
   869 000009BE 4C50543320202020            dq "LPT3    "
   870                                  
   871                                  commonStrat:
   872                                  ;DOS calls this function with rbx=Ptr to request header
   873 000009C6 48891D01000000              mov qword [reqHdrPtr], rbx
   874 000009CD C3                          ret
   875 000009CE 0000000000000000        reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
   876                                  
   877                                  nulStrat:
   878 000009D6 66C743030001                mov word [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
   879                                  nulIntr:
   880 000009DC C3                          ret
   881                                  
   882                                  conDriver:
   883 000009DD 50                          push rax
   884 000009DE 53                          push rbx
   885 000009DF 488B1DE8FFFFFF              mov rbx, qword [reqHdrPtr]
   886 000009E6 B003                        mov al, 03h ;Unknown Command
   887 000009E8 807B0218                    cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   888 000009EC 7735                        ja .conWriteErrorCode ;If yes, error!
   889                                  
   890 000009EE 8A4302                      mov al, byte [rbx + drvReqHdr.cmdcde]
   891 000009F1 3C04                        cmp al, 4
   892 000009F3 743D                        jz .conRead
   893 000009F5 3C05                        cmp al, 5
   894 000009F7 747F                        jz .conNondestructiveRead
   895 000009F9 3C06                        cmp al, 6
   896 000009FB 0F84A8000000                jz .conInputStatus
   897 00000A01 3C07                        cmp al, 7
   898 00000A03 0F84B0000000                jz .conFlushInputBuffers
   899 00000A09 3C08                        cmp al, 8
   900 00000A0B 0F84CA000000                jz .conWrite
   901 00000A11 3C09                        cmp al, 9
   902 00000A13 0F84C2000000                jz .conWrite
   903 00000A19 3C0A                        cmp al, 0Ah
   904 00000A1B 0F84E3000000                jz .conOutputStatus
   905 00000A21 EB06                        jmp short .conExit  ;All other valid functions return done
   906                                  .conWriteErrorCode:     ;Jump to with al=Standard Error code
   907 00000A23 B480                        mov ah, 80h ;Set error bit
   908 00000A25 66894303                    mov word [rbx + drvReqHdr.status], ax
   909                                  .conExit:
   910 00000A29 66814B030001                or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   911 00000A2F 5B                          pop rbx
   912 00000A30 58                          pop rax
   913 00000A31 C3                          ret
   914                                  .conRead:    ;Function 4
   915 00000A32 B005                        mov al, 05h ;Bad request structure length?
   916 00000A34 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   917 00000A37 75EA                        jne .conWriteErrorCode
   918                                  
   919 00000A39 57                          push rdi
   920 00000A3A 51                          push rcx
   921 00000A3B 488B7B0E                    mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   922 00000A3F 31C9                        xor ecx, ecx    ;Zero the char counter
   923                                  .cre1:
   924 00000A41 3B4B16                      cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   925 00000A44 741C                        je .cre2
   926 00000A46 803DC700000000              cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
   927 00000A4D 751A                        jnz .cre3   ;No, get the buffer value
   928 00000A4F 31C0                        xor eax, eax
   929 00000A51 CD36                        int 36h
   930                                  .cre11:
   931 00000A53 AA                          stosb
   932 00000A54 84C0                        test al, al ;Was the ascii code 0?
   933 00000A56 7506                        jnz .cre12  ;No, skip storing scancode
   934 00000A58 8825B6000000                mov byte [.conBuf], ah  ;Save scancode
   935                                  .cre12:
   936 00000A5E FFC1                        inc ecx ;Inc chars stored in buffer
   937 00000A60 EBDF                        jmp short .cre1
   938                                  .cre2:
   939 00000A62 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   940 00000A65 59                          pop rcx
   941 00000A66 5F                          pop rdi
   942 00000A67 EBC0                        jmp short .conExit
   943                                  .cre3:
   944 00000A69 8A05A5000000                mov al, byte [.conBuf]  ;Get the buffer value
   945 00000A6F C6059E00000000              mov byte [.conBuf], 0   ;Reset the buffer value
   946 00000A76 EBDB                        jmp short .cre11
   947                                  
   948                                  .conNondestructiveRead:  ;Function 5
   949 00000A78 B005                        mov al, 05h ;Bad request structure length?
   950 00000A7A 803B0E                      cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   951 00000A7D 75A4                        jne .conWriteErrorCode
   952 00000A7F 803D8E00000000              cmp byte [.conBuf], 0
   953 00000A86 7519                        jnz .cnr2
   954 00000A88 B401                        mov ah, 01h     ;Get key if exists
   955 00000A8A CD36                        int 36h
   956 00000A8C 7408                        jz .cnr1        ;If zero clear => no key, go forwards
   957                                      ;Keystroke available
   958                                  .cnr0:
   959 00000A8E 88430D                      mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Move char in al
   960 00000A91 E993FFFFFF                  jmp .conExit
   961                                  .cnr1: ;No keystroke available
   962 00000A96 66C743030002                mov word [rbx + nonDestInNoWaitReqPkt.status], 0200h   ;Set busy bit
   963 00000A9C E988FFFFFF                  jmp .conExit
   964                                  .cnr2:
   965 00000AA1 8A056D000000                mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   966 00000AA7 EBE5                        jmp short .cnr0   ;Keystroke is available clearly
   967                                  
   968                                  .conInputStatus:         ;Function 6
   969 00000AA9 B005                        mov al, 05h ;Bad request structure length?
   970 00000AAB 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   971 00000AAE 0F856FFFFFFF                jne .conWriteErrorCode
   972 00000AB4 E970FFFFFF                  jmp .conExit ;Exit, device ready
   973                                  
   974                                  .conFlushInputBuffers:   ;Function 7
   975 00000AB9 B005                        mov al, 05h ;Bad request structure length?
   976 00000ABB 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   977 00000ABE 0F855FFFFFFF                jne .conWriteErrorCode
   978 00000AC4 C6054900000000              mov byte [.conBuf], 0   ;Clear buffer
   979                                  .cfib0:
   980 00000ACB B401                        mov ah, 01      ;Get buffer status
   981 00000ACD CD36                        int 36h
   982 00000ACF 0F8454FFFFFF                jz .conExit     ;If zero clear => no more keys to read
   983 00000AD5 30E4                        xor ah, ah
   984 00000AD7 CD36                        int 36h ;Read key to flush from buffer
   985 00000AD9 EBF0                        jmp short .cfib0
   986                                  
   987                                  .conWrite:   ;Function 8 and 9
   988 00000ADB B005                        mov al, 05h ;Bad request structure length?
   989 00000ADD 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   990 00000AE0 0F853DFFFFFF                jne .conWriteErrorCode
   991                                  
   992 00000AE6 56                          push rsi
   993 00000AE7 51                          push rcx
   994 00000AE8 488B730E                    mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   995 00000AEC 31C9                        xor ecx, ecx    ;Zero the char counter
   996                                  .cw1: 
   997 00000AEE 3B4B16                      cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   998 00000AF1 7407                        je .cw2
   999 00000AF3 AC                          lodsb   ;Get char into al, and inc rsi
  1000 00000AF4 CD49                        int 49h ;Fast print char
  1001 00000AF6 FFC1                        inc ecx
  1002 00000AF8 EBF4                        jmp short .cw1 ;keep printing until all chars printed
  1003                                  .cw2:
  1004 00000AFA 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
  1005 00000AFD 59                          pop rcx
  1006 00000AFE 5E                          pop rsi
  1007 00000AFF E925FFFFFF                  jmp .conExit
  1008                                  .conOutputStatus:   ;Function 0Ah
  1009 00000B04 B005                        mov al, 05h ;Bad request structure length?
  1010 00000B06 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
  1011 00000B09 0F8514FFFFFF                jne .conWriteErrorCode
  1012 00000B0F E915FFFFFF                  jmp .conExit
  1013                                  
  1014 00000B14 00                      .conBuf db 0    ;Single byte buffer
  1015                                  clkDriver:
  1016 00000B15 50                          push rax
  1017 00000B16 53                          push rbx
  1018 00000B17 51                          push rcx
  1019 00000B18 52                          push rdx
  1020 00000B19 56                          push rsi
  1021 00000B1A 57                          push rdi
  1022 00000B1B 55                          push rbp
  1023 00000B1C 488B1DABFEFFFF              mov rbx, qword [reqHdrPtr]
  1024 00000B23 B003                        mov al, 03h ;Unknown Command
  1025 00000B25 807B0218                    cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
  1026 00000B29 772D                        ja .clkWriteErrorCode ;If yes, error!
  1027 00000B2B 80FC04                      cmp ah, 04h
  1028 00000B2E 743C                        jz .clkRead
  1029 00000B30 80FC06                      cmp ah, 06h
  1030 00000B33 0F84BE000000                jz .clkInputStatus
  1031 00000B39 80FC07                      cmp ah, 07h
  1032 00000B3C 0F84C5000000                jz .clkFlushInputBuffers
  1033 00000B42 80FC08                      cmp ah, 08h
  1034 00000B45 0F84CC000000                jz .clkWrite
  1035 00000B4B 80FC09                      cmp ah, 09h
  1036 00000B4E 0F84C3000000                jz .clkWrite
  1037 00000B54 EB08                        jmp short .clkExit  ;All other valid functions return done immediately!
  1038                                  .clkNotFunctioning:
  1039 00000B56 B002                        mov al, 02h ;Device not ready error
  1040                                  .clkWriteErrorCode:
  1041 00000B58 B480                        mov ah, 80h ;Set error bit
  1042 00000B5A 66894303                    mov word [rbx + drvReqHdr.status], ax
  1043                                  .clkExit:
  1044 00000B5E 66814B030001                or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
  1045 00000B64 5D                          pop rbp
  1046 00000B65 5F                          pop rdi
  1047 00000B66 5E                          pop rsi
  1048 00000B67 5A                          pop rdx
  1049 00000B68 59                          pop rcx
  1050 00000B69 5B                          pop rbx
  1051 00000B6A 58                          pop rax
  1052 00000B6B C3                          ret
  1053                                  
  1054                                  .clkRead:           ;Function 4
  1055 00000B6C B005                        mov al, 05h ;Bad request structure length?
  1056 00000B6E 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1057 00000B71 75E5                        jne .clkWriteErrorCode
  1058                                  
  1059 00000B73 4831ED                      xor rbp, rbp    ;Write to RBP rather than updating record word by word
  1060 00000B76 B404                        mov ah, 04h ;Read RTC date
  1061 00000B78 CD3A                        int 3Ah
  1062 00000B7A 72DA                        jc .clkNotFunctioning
  1063 00000B7C 0FB6C2                      movzx eax, dl  ;Get dl (day of the month) into al
  1064 00000B7F E8A8000000                  call .clkBCDtoHex   ;Convert BCD value to hex
  1065 00000B84 89C5                        mov ebp, eax    ;Save result in bp
  1066 00000B86 88F0                        mov al, dh 
  1067 00000B88 E89F000000                  call .clkBCDtoHex
  1068 00000B8D C1E005                      shl eax, 5  ;Shift month
  1069 00000B90 01C5                        add ebp, eax    ;Add month number to bp
  1070 00000B92 88C8                        mov al, cl      ;Get year from cl
  1071 00000B94 E893000000                  call .clkBCDtoHex
  1072 00000B99 3C50                        cmp al, 80  ;Is the value less than 80
  1073 00000B9B 7302                        jae .cread0
  1074 00000B9D 0464                        add al, 100
  1075                                  .cread0:
  1076 00000B9F 2C50                        sub al, 80
  1077 00000BA1 C1E009                      shl eax, 9
  1078 00000BA4 01C5                        add ebp, eax    ;number of years since 1980 shifted by 9 to ebp
  1079 00000BA6 48C1E510                    shl rbp, 10h    ;Shift word 1 into word 2
  1080 00000BAA B402                        mov ah, 02h ;Read RTC time
  1081 00000BAC CD3A                        int 3Ah
  1082 00000BAE 72A6                        jc .clkNotFunctioning
  1083 00000BB0 88C8                        mov al, cl  ;Get minutes into al
  1084 00000BB2 E875000000                  call .clkBCDtoHex
  1085 00000BB7 4809C5                      or rbp, rax ;Add minutes byte low
  1086 00000BBA 48C1E508                    shl rbp, 8  ;Shift up by a byte
  1087                                  
  1088 00000BBE 88E8                        mov al, ch  ;Get hours into al
  1089 00000BC0 E867000000                  call .clkBCDtoHex
  1090 00000BC5 4809C5                      or rbp, rax ;Add hours to byte low
  1091 00000BC8 48C1E510                    shl rbp, 10h  ;Shift up by a byte and add an empty byte for 100ths of second
  1092 00000BCC 88F0                        mov al, dh  ;Get seconds into al
  1093 00000BCE E859000000                  call .clkBCDtoHex
  1094 00000BD3 4809C5                      or rbp, rax ;Add seconds to byte low
  1095 00000BD6 488B7B0E                    mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Get the buffer pointer
  1096 00000BDA 4881C705000000              add rdi, 5  ;Move pointer to the end of the buffer
  1097 00000BE1 4889E8                      mov rax, rbp    ;Get the packed 6 bytes into rax
  1098 00000BE4 B906000000                  mov ecx, 6  ;6 bytes to transfer
  1099 00000BE9 FD                          std ;Reverse direction of string operation
  1100                                  .cread1:
  1101 00000BEA AA                          stosb   ;Store byte and dec rdi
  1102 00000BEB 48C1E808                    shr rax, 8  ;Shift all down by one byte
  1103 00000BEF E2F9                        loop .cread1    ;do it until ecx=0
  1104 00000BF1 FC                          cld ;
  1105 00000BF2 E967FFFFFF                  jmp .clkExit
  1106                                  
  1107                                  .clkInputStatus:    ;Function 6
  1108                                  ;Always return ready
  1109 00000BF7 B005                        mov al, 05h ;Bad request structure length?
  1110 00000BF9 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
  1111 00000BFC 0F8556FFFFFF                jne .clkWriteErrorCode
  1112 00000C02 E957FFFFFF                  jmp .clkExit
  1113                                  .clkFlushInputBuffers:  ;Function 7
  1114                                  ;Always return done immediately
  1115 00000C07 B005                        mov al, 05h ;Bad request structure length?
  1116 00000C09 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
  1117 00000C0C 0F8546FFFFFF                jne .clkWriteErrorCode
  1118 00000C12 E947FFFFFF                  jmp .clkExit
  1119                                  
  1120                                  .clkWrite:          ;Functions 8 and 9
  1121 00000C17 B005                        mov al, 05h ;Bad request structure length?
  1122 00000C19 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1123 00000C1C 0F8536FFFFFF                jne .clkWriteErrorCode
  1124                                  
  1125 00000C22 488B730E                    mov rsi, qword [rbx + ioReqPkt.bufptr]
  1126 00000C26 31C0                        xor eax, eax
  1127 00000C28 66AB                        stosw   ;Get first word into ax
  1128 00000C2A 89C1                        mov ecx, eax    ;Save ax in cx
  1129                                  
  1130                                  .clkBCDtoHex:
  1131                                  ;Converts a BCD value to a Hex byte
  1132                                  ;Takes input in al, returns in al (zero-ed upper seven bytes)
  1133 00000C2C 51                          push rcx
  1134 00000C2D 0FB6C0                      movzx eax, al   ;Zero extend
  1135 00000C30 89C1                        mov ecx, eax    ;Save al in ecx
  1136 00000C32 250F000000                  and eax, 0Fh    ;Get lower nybble
  1137 00000C37 81E1F0000000                and ecx, 0F0h   ;Get upper nybble
  1138 00000C3D C1E904                      shr ecx, 4      ;Shift upper nybble value down
  1139                                  .cbth0:
  1140 00000C40 050A000000                  add eax, 10
  1141 00000C45 E2F9                        loop .cbth0
  1142 00000C47 59                          pop rcx
  1143 00000C48 C3                          ret
  1144                                  
  1145                                  .clkHexToBCD:
  1146                                  ;Converts a Hex byte into two BCD digits
  1147                                  ;Takes input in al, returns in al (zero-ed upper seven bytes)
  1148 00000C49 51                          push rcx
  1149 00000C4A 0FB6C0                      movzx eax, al   ;Zero extend
  1150 00000C4D 31C9                        xor ecx, ecx
  1151                                  .chtb0:
  1152 00000C4F 3D0A000000                  cmp eax, 10
  1153 00000C54 7209                        jb .chtb1
  1154 00000C56 2D0A000000                  sub eax, 10
  1155 00000C5B FFC1                        inc ecx
  1156 00000C5D EBF0                        jmp short .chtb0
  1157                                  .chtb1:
  1158 00000C5F C1E104                      shl ecx, 4  ;Move to upper nybble
  1159 00000C62 08C8                        or al, cl   ;Move upper nybble into al upper nybble
  1160 00000C64 59                          pop rcx
  1161 00000C65 C3                          ret
  1162                                  
  1163                                  ;COM Driver headers and main interrupt strat
  1164                                  com1Intr:
  1165 00000C66 C6059D01000000              mov byte [comIntr.comDevice], 0
  1166 00000C6D EB19                        jmp short comIntr
  1167                                  com2Intr:
  1168 00000C6F C6059401000001              mov byte [comIntr.comDevice], 1
  1169 00000C76 EB10                        jmp short comIntr
  1170                                  com3Intr:
  1171 00000C78 C6058B01000002              mov byte [comIntr.comDevice], 2
  1172 00000C7F EB07                        jmp short comIntr
  1173                                  com4Intr:
  1174 00000C81 C6058201000003              mov byte [comIntr.comDevice], 3
  1175                                  comIntr:
  1176 00000C88 50                          push rax
  1177 00000C89 53                          push rbx
  1178 00000C8A 51                          push rcx
  1179 00000C8B 52                          push rdx
  1180 00000C8C 56                          push rsi
  1181 00000C8D 57                          push rdi
  1182 00000C8E 488B1D39FDFFFF              mov rbx, qword [reqHdrPtr]
  1183 00000C95 B003                        mov al, 03h ;Unknown Command
  1184 00000C97 807B0218                    cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
  1185 00000C9B 7756                        ja .comWriteErrorCode ;If yes, error!
  1186                                  
  1187 00000C9D 8A4302                      mov al, byte [rbx + drvReqHdr.cmdcde]
  1188 00000CA0 3C04                        cmp al, 4   ;Read Character(s)
  1189 00000CA2 7462                        jz .comRead
  1190 00000CA4 3C05                        cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
  1191 00000CA6 0F849B000000                jz .comNondestructiveRead   
  1192 00000CAC 3C06                        cmp al, 6   ;Read Input Status, always return with Busy bit = 0
  1193 00000CAE 0F8484000000                jz .comReadInputStatus
  1194 00000CB4 3C07                        cmp al, 7   ;Flush read buffers, return done
  1195 00000CB6 0F84B9000000                jz .comFlushInputBuffers
  1196 00000CBC 3C08                        cmp al, 8
  1197 00000CBE 0F84DB000000                jz .comWrite
  1198 00000CC4 3C09                        cmp al, 9
  1199 00000CC6 0F84D3000000                jz .comWrite
  1200 00000CCC 3C0A                        cmp al, 0Ah
  1201 00000CCE 0F8400010000                jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
  1202 00000CD4 EB23                        jmp short .comExit  ;All other valid functions should return done
  1203                                  .comErrorNoCount:
  1204 00000CD6 B002                        mov al, 02h ;Unknown device
  1205 00000CD8 EB19                        jmp short .comWriteErrorCode
  1206                                  .comReadError:
  1207 00000CDA BA0B000000                  mov edx, 0Bh
  1208                                  .comWriteError:
  1209 00000CDF BA0A000000                  mov edx, 0Ah
  1210                                  .comError:
  1211 00000CE4 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
  1212 00000CE7 B902000000                  mov ecx, 02h    ;Unknown device
  1213 00000CEC 3CFE                        cmp al, 0FEh    ;Invalid COM port
  1214 00000CEE 0F44D1                      cmove edx, ecx  ;Only move unknown device error code if invalid COM port
  1215 00000CF1 88D0                        mov al, dl      ;Move dl to al to store error code
  1216                                  .comWriteErrorCode:    ;Jump to with al=Standard Error code
  1217 00000CF3 B480                        mov ah, 80h ;Set error bit
  1218 00000CF5 66894303                    mov word [rbx + drvReqHdr.status], ax
  1219                                  .comExit:
  1220 00000CF9 66814B030001                or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
  1221 00000CFF 5F                          pop rdi
  1222 00000D00 5E                          pop rsi
  1223 00000D01 5A                          pop rdx
  1224 00000D02 59                          pop rcx
  1225 00000D03 5B                          pop rbx
  1226 00000D04 58                          pop rax
  1227 00000D05 C3                          ret
  1228                                  
  1229                                  .comRead:
  1230 00000D06 B005                        mov al, 05h ;Bad request structure length?
  1231 00000D08 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1232 00000D0B 75E6                        jne .comWriteErrorCode
  1233                                  
  1234 00000D0D 488B7B0E                    mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
  1235 00000D11 31C9                        xor ecx, ecx    ;Zero the char counter
  1236                                  .cr1:
  1237 00000D13 3B4B16                      cmp ecx, dword [rbx + ioReqPkt.tfrlen]
  1238 00000D16 741B                        je .cre2
  1239                                  .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
  1240 00000D18 B802000000                  mov eax, 02h    ;Recieve 
  1241 00000D1D 8A15E7000000                mov dl, byte [.comDevice]    ;Get transacting com device
  1242 00000D23 6698                        cbw     ;Zero extend to upper byte
  1243 00000D25 CD34                        int 34h ;Recieve Char
  1244 00000D27 72BB                        jc .comError
  1245 00000D29 80FC80                      cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
  1246 00000D2C 74EA                        je .cr11
  1247 00000D2E AA                          stosb   ;Store char in al into buffer and inc rdi
  1248 00000D2F FFC1                        inc ecx
  1249 00000D31 EBE0                        jmp short .cr1
  1250                                  .cre2:
  1251 00000D33 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
  1252 00000D36 EBC1                        jmp short .comExit
  1253                                  
  1254                                  .comReadInputStatus:
  1255 00000D38 B005                        mov al, 05h ;Bad request structure length?
  1256 00000D3A 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
  1257 00000D3D 75B4                        jne .comWriteErrorCode
  1258 00000D3F 66C743030000                mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
  1259 00000D45 EBB2                        jmp short .comExit
  1260                                  
  1261                                  .comNondestructiveRead:
  1262                                  ;Acts like a "read one character if there is one" function
  1263 00000D47 B005                        mov al, 05h ;Bad request structure length?
  1264 00000D49 803B0E                      cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
  1265 00000D4C 75A5                        jne .comWriteErrorCode
  1266                                  .cndr1:
  1267 00000D4E B802000000                  mov eax, 02h    ;Recieve 
  1268 00000D53 8A15B1000000                mov dl, byte [.comDevice]    ;Get transacting com device
  1269 00000D59 6698                        cbw     ;Zero extend to upper byte
  1270 00000D5B CD34                        int 34h ;Recieve Char
  1271 00000D5D 0F8273FFFFFF                jc .comErrorNoCount ;Dont save a char transfer number
  1272 00000D63 80FC80                      cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
  1273 00000D66 7405                        je .cndr2
  1274 00000D68 88430D                      mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Get next char
  1275 00000D6B EB8C                        jmp short .comExit
  1276                                  .cndr2:
  1277 00000D6D 66C743030002                mov word [rbx + nonDestInNoWaitReqPkt.status], 200h ;Busy bit set
  1278 00000D73 EB84                        jmp short .comExit
  1279                                  
  1280                                  .comFlushInputBuffers:
  1281 00000D75 B005                        mov al, 05h ;Bad request structure length?
  1282 00000D77 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
  1283 00000D7A 0F8573FFFFFF                jne .comWriteErrorCode
  1284                                  .cfib0:
  1285 00000D80 8A1584000000                mov dl, byte [.comDevice]
  1286 00000D86 6698                        cbw
  1287 00000D88 B802000000                  mov eax, 02h    ;Recieve
  1288 00000D8D CD34                        int 34h
  1289 00000D8F 0F8241FFFFFF                jc .comErrorNoCount
  1290 00000D95 80FC80                      cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
  1291 00000D98 75E6                        jne .cfib0
  1292 00000D9A E95AFFFFFF                  jmp .comExit
  1293                                  
  1294                                  .comWrite:
  1295 00000D9F B005                        mov al, 05h ;Bad request structure length?
  1296 00000DA1 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1297 00000DA4 0F8549FFFFFF                jne .comWriteErrorCode
  1298                                  
  1299 00000DAA 488B730E                    mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
  1300 00000DAE 31C9                        xor ecx, ecx    ;Zero the char counter
  1301                                  .cw1: 
  1302 00000DB0 3B4B16                      cmp ecx, dword [rbx + ioReqPkt.tfrlen]
  1303 00000DB3 7417                        je .cw2
  1304 00000DB5 AC                          lodsb   ;Get char into al, and inc rsi
  1305 00000DB6 B401                        mov ah, 01h ;Move function number into ah
  1306 00000DB8 8A154C000000                mov dl, byte [.comDevice]
  1307 00000DBE 6698                        cbw     ;Zero extend to upper byte
  1308 00000DC0 CD34                        int 34h ;Transmit char
  1309 00000DC2 0F821CFFFFFF                jc .comError
  1310 00000DC8 FFC1                        inc ecx
  1311 00000DCA EBE4                        jmp short .cw1 ;keep printing until all chars printed
  1312                                  .cw2:
  1313 00000DCC 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
  1314 00000DCF E925FFFFFF                  jmp .comExit
  1315                                  
  1316                                  .comOutputStatus:
  1317                                  ;Read MODEM status
  1318 00000DD4 B005                        mov al, 05h ;Bad request structure length?
  1319 00000DD6 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
  1320 00000DD9 0F8514FFFFFF                jne .comWriteErrorCode
  1321                                  
  1322 00000DDF 8A1525000000                mov dl, byte [.comDevice]
  1323 00000DE5 6698                        cbw     ;Zero extend to upper byte
  1324 00000DE7 B403                        mov ah, 03h     ;Get status
  1325 00000DE9 CD34                        int 34h
  1326 00000DEB 0F82E5FEFFFF                jc .comErrorNoCount
  1327 00000DF1 2510000000                  and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
  1328 00000DF6 C1E005                      shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
  1329 00000DF9 F7D0                        not eax      ;Bitwise inversion
  1330 00000DFB 2500020000                  and eax, 200h   ;Isolate bit 9
  1331 00000E00 6689441B03                  mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
  1332 00000E05 E9EFFEFFFF                  jmp .comExit
  1333 00000E0A 00                      .comDevice   db 0
  1334                                  
  1335                                  msdDriver:
  1336 00000E0B 50                          push rax
  1337 00000E0C 53                          push rbx
  1338 00000E0D 51                          push rcx
  1339 00000E0E 52                          push rdx
  1340 00000E0F 56                          push rsi
  1341 00000E10 57                          push rdi
  1342 00000E11 55                          push rbp
  1343 00000E12 4150                        push r8
  1344 00000E14 488B1DB3FBFFFF              mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
  1345 00000E1B 807B0218                    cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
  1346 00000E1F B003                        mov al, 03h
  1347 00000E21 0F87F9000000                ja .msdWriteErrorCode ;If yes, error!
  1348 00000E27 B001                        mov al, 01h ;Unknown Unit Error
  1349 00000E29 807B0105                    cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
  1350 00000E2D 0F87ED000000                ja .msdWriteErrorCode ;If yes, error!
  1351 00000E33 8A4302                      mov al, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
  1352 00000E36 84C0                        test al, al
  1353 00000E38 0F84F8000000                jz .msdInit
  1354 00000E3E 3C01                        cmp al, 01
  1355 00000E40 0F8496010000                jz .msdMedChk
  1356 00000E46 3C02                        cmp al, 02
  1357 00000E48 0F84FF010000                jz .msdBuildBPB
  1358 00000E4E 3C03                        cmp al, 03
  1359 00000E50 0F8465020000                jz .msdIOCTLRead
  1360 00000E56 3C04                        cmp al, 04
  1361 00000E58 0F846D020000                jz .msdRead
  1362 00000E5E 3C08                        cmp al, 08
  1363 00000E60 0F84A1020000                jz .msdWrite
  1364 00000E66 3C09                        cmp al, 09
  1365 00000E68 0F84D5020000                jz .msdWriteVerify
  1366 00000E6E 3C0C                        cmp al, 12
  1367 00000E70 0F8416030000                jz .msdIOCTLWrite
  1368 00000E76 3C0D                        cmp al, 13
  1369 00000E78 0F841E030000                jz .msdDevOpen
  1370 00000E7E 3C0E                        cmp al, 14
  1371 00000E80 0F8431030000                jz .msdDevClose
  1372 00000E86 3C0F                        cmp al, 15
  1373 00000E88 0F8444030000                jz .msdRemovableMedia
  1374 00000E8E 3C13                        cmp al, 19
  1375 00000E90 0F8465030000                jz .msdGenericIOCTL
  1376 00000E96 3C17                        cmp al, 23
  1377 00000E98 0F846D030000                jz .msdGetLogicalDev
  1378 00000E9E 3C18                        cmp al, 24
  1379 00000EA0 0F847E030000                jz .msdSetLogicalDev
  1380 00000EA6 EB7E                        jmp short .msdDriverExit    ;All other valid functions exit done
  1381                                  .msdIOError:  ;In Read and Write errors, rbp points to the dev struc
  1382 00000EA8 4889EB                      mov rbx, rbp
  1383 00000EAB 0FB6C0                      movzx eax, al   ;Number of IO-ed sectors in last request
  1384 00000EAE 01C6                        add esi, eax    ;esi Keeps sector count across transfers
  1385 00000EB0 897316                      mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
  1386                                  ;Now fall through to general error
  1387                                  .msdGenDiskError:
  1388 00000EB3 B401                        mov ah, 01h
  1389 00000EB5 30D2                        xor dl, dl  ;Work around bug that fails request if dl > 7Fh
  1390 00000EB7 CD33                        int 33h ;Read status of last operation
  1391 00000EB9 80FC06                      cmp ah, 06h ;Mock Seek response (device not present)
  1392 00000EBC B002                        mov al, 02h ;Give device not ready error (sensibly I think)
  1393 00000EBE 7460                        je .msdWriteErrorCode 
  1394 00000EC0 B00C                        mov al, 0Ch ;Preliminary General Error Faults
  1395 00000EC2 80FCFF                      cmp ah, -1  ;Sense operation failed
  1396 00000EC5 7459                        je .msdWriteErrorCode 
  1397 00000EC7 80FC20                      cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
  1398 00000ECA 7454                        je .msdWriteErrorCode
  1399                                  ;Device Not Ready
  1400 00000ECC B002                        mov al, 02h  ;Device not ready code
  1401 00000ECE 4138C0                      cmp r8b, al  ;SCSI Not ready commands start with 2
  1402 00000ED1 744D                        je .msdWriteErrorCode
  1403 00000ED3 49C1E808                    shr r8, 8       ;Remove Sense Key
  1404 00000ED7 410FB7C8                    movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
  1405                                  ;Write Protected
  1406 00000EDB 30C0                        xor al, al
  1407 00000EDD 6681F92700                  cmp cx, 0027h   ;Write protected error
  1408 00000EE2 743C                        je .msdWriteErrorCode
  1409                                  ;CRC Error
  1410 00000EE4 B004                        mov al, 04h     ;CRC error code
  1411 00000EE6 6681F90803                  cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
  1412 00000EEB 7433                        je .msdWriteErrorCode
  1413 00000EED 6681F91000                  cmp cx, 0010h   ;ID CRC or ECC error
  1414 00000EF2 742C                        je .msdWriteErrorCode
  1415 00000EF4 6681F94701                  cmp cx, 0147h   ;Data phase CRC error detected
  1416 00000EF9 7425                        je .msdWriteErrorCode
  1417                                  ;Seek Error
  1418 00000EFB B006                        mov al, 06h     ;Seek error code
  1419 00000EFD 80F902                      cmp cl, 02h     ;No Seek Complete
  1420 00000F00 741E                        je .msdWriteErrorCode
  1421                                  ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
  1422                                  ;This error should only be called if BPB not recognised for Flash Drives
  1423 00000F02 B007                        mov al, 07h
  1424 00000F04 80F930                      cmp cl, 30h   ;All issues with media returns unknown media
  1425 00000F07 7417                        je .msdWriteErrorCode
  1426                                  ;Sector Not Found
  1427 00000F09 B008                        mov al, 08h     ;Sector not found code
  1428 00000F0B 80F921                      cmp cl, 21h     ;Illegal Request - Invalid LBA
  1429 00000F0E 7410                        je .msdWriteErrorCode
  1430                                  ;Write faults
  1431 00000F10 B00A                        mov al, 0Ah     ;Write fault
  1432 00000F12 80F90C                      cmp cl, 0Ch     ;Write Error ASC code
  1433 00000F15 7409                        je .msdWriteErrorCode
  1434                                  ;Read faults
  1435 00000F17 B00B                        mov al, 0Bh     ;Read fault
  1436 00000F19 80F911                      cmp cl, 11h     ;Read error
  1437 00000F1C 7402                        je .msdWriteErrorCode
  1438                                  ;General Errors
  1439 00000F1E B00C                        mov al, 0Ch     ;Everything else is general error
  1440                                  .msdWriteErrorCode:    ;Jump to with al=Standard Error code
  1441 00000F20 B480                        mov ah, 80h ;Set error bit
  1442 00000F22 66894303                    mov word [rbx + drvReqHdr.status], ax
  1443                                  .msdDriverExit:
  1444 00000F26 66814B030001                or word [rbx + drvReqHdr.status], 0100h ;Set done bit
  1445 00000F2C 4158                        pop r8
  1446 00000F2E 5D                          pop rbp
  1447 00000F2F 5F                          pop rdi
  1448 00000F30 5E                          pop rsi
  1449 00000F31 5A                          pop rdx
  1450 00000F32 59                          pop rcx
  1451 00000F33 5B                          pop rbx
  1452 00000F34 58                          pop rax
  1453 00000F35 C3                          ret
  1454                                  .msdInit:            ;Function 0
  1455 00000F36 B005                        mov al, 05h ;Bad request structure length
  1456 00000F38 803B1F                      cmp byte [rbx + drvReqHdr.hdrlen], initReqPkt_size
  1457 00000F3B 75E3                        jne .msdWriteErrorCode
  1458                                  
  1459 00000F3D 4151                        push r9
  1460 00000F3F CD31                        int 31h ;Get number of Int 33h devices in r8b
  1461 00000F41 4159                        pop r9
  1462 00000F43 4D0FB6C0                    movzx r8, r8b   ;Keeps real count
  1463 00000F47 4489C0                      mov eax, r8d
  1464 00000F4A 3C01                        cmp al, 1
  1465 00000F4C 7702                        ja .mi1
  1466 00000F4E FEC0                        inc al ;Make it two
  1467                                  .mi1:
  1468 00000F50 BA05000000                  mov edx, 5
  1469 00000F55 39D0                        cmp eax, edx
  1470 00000F57 0F47C2                      cmova eax, edx  ;If num of drives is greater than 5, consider only first 5
  1471 00000F5A 880570F9FFFF                mov byte [msdHdr + drvHdr.drvNam], al ;Save num of drvs in drvr hdr
  1472 00000F60 88430D                      mov byte [rbx + initReqPkt.numunt], al ;And in req packet
  1473 00000F63 440005(A9000000)            add byte [numMSDdrv], r8b ;Add the true number of devices to total
  1474 00000F6A 31ED                        xor ebp, ebp    ;Use bpl as device counter, cmp to r8b
  1475 00000F6C 488D3D20030000              lea rdi, qword [.msdBPBblks]
  1476 00000F73 53                          push rbx
  1477                                  .mi2:
  1478 00000F74 89EA                        mov edx, ebp
  1479 00000F76 488D1D6E050000              lea rbx, qword [driverDataPtr]  ;Get effective address of scratch space
  1480 00000F7D 31C9                        xor ecx, ecx    ;Sector 0
  1481 00000F7F B801820000                  mov eax, 8201h       ;Read 1 sector
  1482 00000F84 CD33                        int 33h
  1483 00000F86 724E                        jc .msdInitError
  1484                                  
  1485 00000F88 488D355C050000              lea rsi, qword [driverDataPtr]  ;Point to start of data
  1486 00000F8F B90F000000                  mov ecx, bpbEx_size/8
  1487 00000F94 F348A5                      rep movsq   ;Move the BPB data into the right block
  1488                                  
  1489 00000F97 FFC5                        inc ebp
  1490 00000F99 4C39C5                      cmp rbp, r8 ;Have we written the BPB for all physical drives?
  1491 00000F9C 75D6                        jne .mi2  ;No? Go again
  1492                                  
  1493 00000F9E 488D3DC6020000              lea rdi, qword [.msdBPBTbl]  ;Point to start of table
  1494 00000FA5 488D15E7020000              lea rdx, qword [.msdBPBblks]
  1495                                  .mi3:
  1496 00000FAC 488917                      mov qword [rdi], rdx   ;Move the block entry ptr to rdi
  1497 00000FAF 4881C278000000              add rdx, bpbEx_size      ;Make rdx point to the next block entry
  1498 00000FB6 FFCD                        dec ebp
  1499 00000FB8 75F2                        jnz .mi3  ;If not zero yet, go again
  1500                                  
  1501 00000FBA 5B                          pop rbx
  1502 00000FBB 488D15A9020000              lea rdx, qword [.msdBPBTbl]  ;Get far pointer 
  1503 00000FC2 48895316                    mov qword [rbx + initReqPkt.optptr], rdx  ;Save ptr to array
  1504 00000FC6 488D151E050000              lea rdx, qword [driverDataPtr]
  1505 00000FCD 4889530E                    mov qword [rbx + initReqPkt.endptr], rdx    ;Save free space ptr
  1506 00000FD1 E950FFFFFF                  jmp .msdDriverExit
  1507                                  .msdInitError:
  1508 00000FD6 5B                          pop rbx
  1509 00000FD7 E94AFFFFFF                  jmp .msdDriverExit
  1510                                  .msdMedChk:          ;Function 1
  1511                                  ;Once the BIOS function is implmented that reads the changeline, use that!
  1512                                  ;For BIOSes that dont support the changeline, the following procedure will 
  1513                                  ; suffice.
  1514 00000FDC B005                        mov al, 05h ;Bad request structure length
  1515 00000FDE 803B17                      cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
  1516 00000FE1 0F8539FFFFFF                jne .msdWriteErrorCode
  1517                                  
  1518 00000FE7 480FB64301                  movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
  1519 00000FEC 8A90[61120000]              mov dl, byte [.msdBIOSmap + rax]    ;Translate unitnum to BIOS num
  1520 00000FF2 F6C280                      test dl, 80h    ;If it is a fixed disk, no change!
  1521 00000FF5 754D                        jnz .mmcNoChange
  1522                                  ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
  1523 00000FF7 B416                        mov ah, 16h 
  1524 00000FF9 CD33                        int 33h
  1525 00000FFB 0F82B2FEFFFF                jc .msdGenDiskError
  1526 00001001 80FC80                      cmp ah, 80h
  1527 00001004 740E                        je .mmcNoChangeLine
  1528 00001006 80FC86                      cmp ah, 86h
  1529 00001009 7409                        je .mmcNoChangeLine
  1530 0000100B 84E4                        test ah, ah ;No change?
  1531 0000100D 7435                        jz .mmcNoChange
  1532 0000100F F6C401                      test ah, 1  ;Neither 80h or 86h have bit 0 set
  1533 00001012 7513                        jnz .mmcChange
  1534                                  ;If nothing, fall through and test manually, should never happen though
  1535                                  .mmcNoChangeLine:
  1536                                  ;Now we test Media Descriptor
  1537 00001014 8A530D                      mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
  1538 00001017 488B3CC5[6B120000]          mov rdi, qword [.msdBPBTbl + 8*rax]
  1539 0000101F 488B3F                      mov rdi, qword [rdi]    ;Dereference rdi
  1540 00001022 385715                      cmp byte [rdi + bpb32.media], dl    ;Compare media descriptor bytes
  1541 00001025 7414                        je .mmcUnsure
  1542                                  .mmcChange:
  1543 00001027 C6430EFF                    mov byte [rbx + mediaCheckReqPkt.medret], -1
  1544 0000102B 488D0525020000              lea rax, qword [.msdDefLabel]           ;Temp, ret def label
  1545 00001032 4889430F                    mov qword [rbx + mediaCheckReqPkt.desptr], rax 
  1546 00001036 E9EBFEFFFF                  jmp .msdDriverExit
  1547                                  .mmcUnsure:
  1548 0000103B C6430E00                    mov byte [rbx + mediaCheckReqPkt.medret], 0
  1549 0000103F E9E2FEFFFF                  jmp .msdDriverExit
  1550                                  .mmcNoChange:
  1551 00001044 C6430E01                    mov byte [rbx + mediaCheckReqPkt.medret], 1
  1552 00001048 E9D9FEFFFF                  jmp .msdDriverExit
  1553                                  
  1554                                  .msdBuildBPB:        ;Function 2
  1555 0000104D B005                        mov al, 05h ;Bad request structure length
  1556 0000104F 803B1E                      cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
  1557 00001052 0F85C8FEFFFF                jne .msdWriteErrorCode
  1558                                  
  1559 00001058 4889DE                      mov rsi, rbx
  1560 0000105B 480FB64601                  movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
  1561 00001060 8A90[61120000]              mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req
  1562 00001066 488B5E0E                    mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
  1563 0000106A 31C9                        xor ecx, ecx    ;Read Sector 0
  1564 0000106C B801820000                  mov eax, 8201h  ;LBA Read 1 sector
  1565 00001071 CD33                        int 33h
  1566 00001073 0F823AFEFFFF                jc .msdGenDiskError
  1567                                  ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
  1568 00001079 807B15F0                    cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
  1569 0000107D 7418                        je .mbbpb0
  1570 0000107F 807B15F8                    cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
  1571 00001083 7412                        je .mbbpb0
  1572 00001085 807B15F9                    cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
  1573 00001089 740C                        je .mbbpb0
  1574 0000108B 807B15FC                    cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
  1575 0000108F B007                        mov al, 07h ;Unknown media error code
  1576 00001091 0F8289FEFFFF                jb .msdWriteErrorCode
  1577                                  .mbbpb0:
  1578 00001097 4887DE                      xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
  1579 0000109A 480FB64301                  movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
  1580 0000109F 488B3CC5[6B120000]          mov rdi, qword [.msdBPBTbl + 8*rax] ;Get pointer to pointer to buffer
  1581 000010A7 488B3F                      mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
  1582 000010AA 48897B16                    mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
  1583 000010AE B90F000000                  mov ecx, bpbEx_size/8
  1584 000010B3 F348A5                      rep movsq   ;Move the BPB data into the right space
  1585 000010B6 E96BFEFFFF                  jmp .msdDriverExit
  1586                                  .msdIOCTLRead:       ;Function 3, returns done
  1587 000010BB B005                        mov al, 05h ;Bad request structure length
  1588 000010BD 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1589 000010C0 0F855AFEFFFF                jne .msdWriteErrorCode
  1590                                  
  1591 000010C6 E95BFEFFFF                  jmp .msdDriverExit
  1592                                  .msdRead:            ;Function 4
  1593                                  ;Will read one sector at a time.
  1594 000010CB B005                        mov al, 05h ;Bad request structure length
  1595 000010CD 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1596 000010D0 0F854AFEFFFF                jne .msdWriteErrorCode
  1597                                  
  1598 000010D6 4889DD                      mov rbp, rbx
  1599 000010D9 31F6                        xor esi, esi  ;Set sector read counter to zero
  1600                                  .msdr0:
  1601 000010DB B682                        mov dh, 82h ;LBA Read Sectors
  1602 000010DD E85B010000                  call .msdBlkIOCommon
  1603 000010E2 0F82C0FDFFFF                jc .msdIOError
  1604 000010E8 4881451A00020000            add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
  1605 000010F0 4881450E00020000            add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
  1606 000010F8 FFC6                        inc esi
  1607 000010FA 3B7516                      cmp esi, dword [rbp + ioReqPkt.tfrlen]
  1608 000010FD 75DC                        jne .msdr0
  1609 000010FF 4889EB                      mov rbx, rbp
  1610 00001102 E91FFEFFFF                  jmp .msdDriverExit
  1611                                  .msdWrite:           ;Function 8
  1612                                  ;Will write one sector at a time.
  1613 00001107 B005                        mov al, 05h ;Bad request structure length
  1614 00001109 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1615 0000110C 0F850EFEFFFF                jne .msdWriteErrorCode
  1616                                  
  1617 00001112 4889DD                      mov rbp, rbx
  1618 00001115 31F6                        xor esi, esi  ;Set counter to zero
  1619                                  .msdw0:
  1620 00001117 B683                        mov dh, 83h ;LBA Write Sectors
  1621 00001119 E81F010000                  call .msdBlkIOCommon
  1622 0000111E 0F8284FDFFFF                jc .msdIOError
  1623 00001124 4881451A00020000            add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
  1624 0000112C 4881450E00020000            add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
  1625 00001134 FFC6                        inc esi
  1626 00001136 3B7516                      cmp esi, dword [rbp + ioReqPkt.tfrlen]
  1627 00001139 75DC                        jne .msdw0
  1628 0000113B 4889EB                      mov rbx, rbp
  1629 0000113E E9E3FDFFFF                  jmp .msdDriverExit
  1630                                  .msdWriteVerify:     ;Function 9, writes sectors then verifies them
  1631                                  ;Will write one sector at a time and then verify it.
  1632 00001143 B005                        mov al, 05h ;Bad request structure length
  1633 00001145 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1634 00001148 0F85D2FDFFFF                jne .msdWriteErrorCode
  1635                                  
  1636 0000114E 4889DD                      mov rbp, rbx
  1637 00001151 31F6                        xor esi, esi  ;Set counter to zero
  1638                                  .msdwv0:
  1639 00001153 B683                        mov dh, 83h ;LBA Write Sectors
  1640 00001155 E8E3000000                  call .msdBlkIOCommon
  1641 0000115A 0F8248FDFFFF                jc .msdIOError    ;Error handler needs to add to esi the value in al
  1642 00001160 B684                        mov dh, 84h ;LBA Verify Sectors
  1643 00001162 E8D6000000                  call .msdBlkIOCommon
  1644 00001167 0F823BFDFFFF                jc .msdIOError    ;Error handler needs to add to esi the value in al
  1645 0000116D 4881451A00020000            add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
  1646 00001175 4881450E00020000            add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
  1647 0000117D FFC6                        inc esi
  1648 0000117F 3B7516                      cmp esi, dword [rbp + ioReqPkt.tfrlen]
  1649 00001182 75CF                        jne .msdwv0
  1650 00001184 4889EB                      mov rbx, rbp
  1651 00001187 E99AFDFFFF                  jmp .msdDriverExit
  1652                                  .msdIOCTLWrite:      ;Function 12, returns done
  1653 0000118C B005                        mov al, 05h ;Bad request structure length
  1654 0000118E 803B2A                      cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
  1655 00001191 0F8589FDFFFF                jne .msdWriteErrorCode
  1656                                  
  1657 00001197 E98AFDFFFF                  jmp .msdDriverExit
  1658                                  .msdDevOpen:         ;Function 13
  1659 0000119C B005                        mov al, 05h ;Bad request structure length
  1660 0000119E 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
  1661 000011A1 0F8579FDFFFF                jne .msdWriteErrorCode
  1662                                  
  1663 000011A7 480FB64301                  movzx rax, byte [rbx + openReqPkt.unitnm]
  1664 000011AC FE80[66120000]              inc byte [.msdHdlCnt + rax]  ;Inc handle cnt for given unit
  1665 000011B2 E96FFDFFFF                  jmp .msdDriverExit
  1666                                  .msdDevClose:        ;Function 14
  1667 000011B7 B005                        mov al, 05h ;Bad request structure length
  1668 000011B9 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
  1669 000011BC 0F855EFDFFFF                jne .msdWriteErrorCode
  1670                                  
  1671 000011C2 480FB64301                  movzx rax, byte [rbx + closeReqPkt.unitnm]
  1672 000011C7 FE88[66120000]              dec byte [.msdHdlCnt + rax]  ;Dec handle cnt for given unit
  1673 000011CD E954FDFFFF                  jmp .msdDriverExit
  1674                                  .msdRemovableMedia:  ;Function 15
  1675 000011D2 B005                        mov al, 05h ;Bad request structure length
  1676 000011D4 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
  1677 000011D7 0F8543FDFFFF                jne .msdWriteErrorCode
  1678                                  
  1679 000011DD 480FB64301                  movzx rax, byte [rbx + remMediaReqPkt.unitnm]
  1680 000011E2 8A80[61120000]              mov al, byte [.msdBIOSmap + rax]    ;Get BIOS number
  1681 000011E8 A880                        test al, 80h
  1682 000011EA 0F8436FDFFFF                jz .msdDriverExit   ;If removable, busy bit is clear
  1683 000011F0 66C743030002                mov word [rbx + remMediaReqPkt.status], 0200h ;Set Busy bit
  1684 000011F6 E92BFDFFFF                  jmp .msdDriverExit
  1685                                  .msdGenericIOCTL:    ;Function 19
  1686 000011FB B005                        mov al, 05h ;Bad request structure length
  1687 000011FD 803B27                      cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
  1688 00001200 0F851AFDFFFF                jne .msdWriteErrorCode
  1689                                  
  1690 00001206 E91BFDFFFF                  jmp .msdDriverExit
  1691                                  .msdGetLogicalDev:   ;Function 23
  1692 0000120B B005                        mov al, 05h ;Bad request structure length
  1693 0000120D 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
  1694 00001210 0F850AFDFFFF                jne .msdWriteErrorCode
  1695                                  
  1696 00001216 8A0544000000                mov al, byte [.msdCurDev]
  1697 0000121C 884301                      mov byte [rbx + getDevReqPkt.unitnm], al
  1698 0000121F E902FDFFFF                  jmp .msdDriverExit
  1699                                  .msdSetLogicalDev:   ;Function 24
  1700 00001224 B005                        mov al, 05h ;Bad request structure length
  1701 00001226 803B0D                      cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
  1702 00001229 0F85F1FCFFFF                jne .msdWriteErrorCode
  1703                                  
  1704 0000122F 8A4301                      mov al, byte [rbx + getDevReqPkt.unitnm]
  1705 00001232 880528000000                mov byte [.msdCurDev], al
  1706 00001238 E9E9FCFFFF                  jmp .msdDriverExit
  1707                                  
  1708                                  .msdBlkIOCommon:  ;Does block IO
  1709                                  ;Called with rbp containing old rbx value and ah with function number
  1710                                  ;Error handled by caller
  1711                                  ;Sector count handled by caller
  1712                                  ;Called with dh = BIOS function number
  1713 0000123D 480FB64501                  movzx rax, byte [rbp + ioReqPkt.unitnm]
  1714 00001242 8A90[61120000]              mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
  1715 00001248 488B4D1A                    mov rcx, qword [rbp + ioReqPkt.strtsc]  ;Get start sector
  1716 0000124C 488B5D0E                    mov rbx, qword [rbp + ioReqPkt.bufptr]  ;Get Memory Buffer
  1717 00001250 88F4                        mov ah, dh
  1718 00001252 B001                        mov al, 01h ;Do one sector at a time 
  1719 00001254 CD33                        int 33h
  1720 00001256 C3                          ret
  1721                                  
  1722 00001257 4E4F204E414D452000      .msdDefLabel db "NO NAME ",0 ;Default volume label
  1723                                  ;LASTDRIVE default is 5
  1724 00001260 00                      .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
  1725                                  ; Except when single drive in use, in which case Drive A and B refer to device 0
  1726 00001261 0000000000              .msdBIOSmap  db 5 dup (0)    ;Translates DOS drive number to BIOS number
  1727 00001266 0000000000              .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
  1728 0000126B 000000000000000000-     .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
  1728 00001274 000000000000000000-
  1728 0000127D 000000000000000000-
  1728 00001286 000000000000000000-
  1728 0000128F 00000000           
  1729 00001293 000000000000000000-     .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
  1729 0000129C 000000000000000000-
  1729 000012A5 000000000000000000-
  1729 000012AE 000000000000000000-
  1729 000012B7 000000000000000000-
  1729 000012C0 000000000000000000-
  1729 000012C9 000000000000000000-
  1729 000012D2 000000000000000000-
  1729 000012DB 000000000000000000-
  1729 000012E4 000000000000000000-
  1729 000012ED 000000000000000000-
  1729 000012F6 000000000000000000-
  1729 000012FF 000000000000000000-
  1729 00001308 000000000000000000-
  1729 00001311 000000000000000000-
  1729 0000131A 000000000000000000-
  1729 00001323 000000000000000000-
  1729 0000132C 000000000000000000-
  1729 00001335 000000000000000000-
  1729 0000133E 000000000000000000-
  1729 00001347 000000000000000000-
  1729 00001350 000000000000000000-
  1729 00001359 000000000000000000-
  1729 00001362 000000000000000000-
  1729 0000136B 000000000000000000-
  1729 00001374 000000000000000000-
  1729 0000137D 000000000000000000-
  1729 00001386 000000000000000000-
  1729 0000138F 000000000000000000-
  1729 00001398 000000000000000000-
  1729 000013A1 000000000000000000-
  1729 000013AA 000000000000000000-
  1729 000013B3 000000000000000000-
  1729 000013BC 000000000000000000-
  1729 000013C5 000000000000000000-
  1729 000013CE 000000000000000000-
  1729 000013D7 000000000000000000-
  1729 000013E0 000000000000000000-
  1729 000013E9 000000000000000000-
  1729 000013F2 000000000000000000-
  1729 000013FB 000000000000000000-
  1729 00001404 000000000000000000-
  1729 0000140D 000000000000000000-
  1729 00001416 000000000000000000-
  1729 0000141F 000000000000000000-
  1729 00001428 000000000000000000-
  1729 00001431 000000000000000000-
  1729 0000143A 000000000000000000-
  1729 00001443 000000000000000000-
  1729 0000144C 000000000000000000-
  1729 00001455 000000000000000000-
  1729 0000145E 000000000000000000-
  1729 00001467 000000000000000000-
  1729 00001470 000000000000000000-
  1729 00001479 000000000000000000-
  1729 00001482 000000000000000000-
  1729 0000148B 000000000000000000-
  1729 00001494 000000000000000000-
  1729 0000149D 000000000000000000-
  1729 000014A6 000000000000000000-
  1729 000014AF 000000000000000000-
  1729 000014B8 000000000000000000-
  1729 000014C1 000000000000000000-
  1729 000014CA 000000000000000000-
  1729 000014D3 000000000000000000-
  1729 000014DC 000000000000000000-
  1729 000014E5 000000000000       
  1730                                  
  1731                                  driverDataPtr:
