     1                                  [map all scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs and strucs
     5                                  %include "driverStruc.inc"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     9                              <1> ; device driver related structures.                     ;
    10                              <1> ;-------------------------------------------------------;
    11                              <1> 
    12                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    13                              <1> 
    14 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    15 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    16 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    17 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    18 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    19                              <1> 
    20                              <1> endstruc
    21                              <1> 
    22                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    23                              <1> 
    24                              <1>     .hdrlen resb 1  ;Length of the request header
    25                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    26                              <1>     .cmdcde resb 1  ;Command code
    27                              <1>     .status resw 1  ;Status word
    28                              <1>     .devptr resq 1  ;Device queue pointer field
    29                              <1> 
    30                              <1> %endmacro
    31                              <1> ;Command Code equates
    32                              <1>     drvINIT        equ 0
    33                              <1>     drvMEDCHK      equ 1
    34                              <1>     drvBUILDBPB    equ 2
    35                              <1>     drvIOCTLREAD   equ 3
    36                              <1>     drvREAD        equ 4
    37                              <1>     drvNONDESTREAD equ 5
    38                              <1>     drvINSTATUS    equ 6
    39                              <1>     drvFLUSHINBUF  equ 7
    40                              <1>     drvWRITE       equ 8
    41                              <1>     drvWRITEVERIFY equ 9
    42                              <1>     drvOUTSTATUS   equ 10
    43                              <1>     drvFLUSHOUTBUF equ 11
    44                              <1>     drvIOCTLWRITE  equ 12
    45                              <1>     drvOPEN        equ 13
    46                              <1>     drvCLOSE       equ 14
    47                              <1>     drvREMMEDCHECK equ 15
    48                              <1>     drvOUTTILBUSY  equ 16  ;Not implemented
    49                              <1>     drvIOCTL       equ 19
    50                              <1>     drvGETDRVMAP   equ 23
    51                              <1>     drvSETDRVMAP   equ 24
    52                              <1> 
    53                              <1> ;Drive structures
    54                              <1> struc drvReqHdr
    55                              <1>     drvReqHdrM
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    56                              <1> endstruc
    57                              <1> 
    58                              <1> struc initReqPkt  ;Init Request Packet
    59                              <1> 
    60                              <1>     drvReqHdrM   ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    61 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
    62 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
    63 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
    64 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
    65                              <1> 
    66                              <1> endstruc
    67                              <1> 
    68                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
    69                              <1> 
    70                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    71 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    72 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
    73 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
    74                              <1> 
    75                              <1> endstruc
    76                              <1> 
    77                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
    78                              <1> 
    79                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    80 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    81 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    82 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
    83                              <1> 
    84                              <1> endstruc
    85                              <1> 
    86                              <1> struc ioReqPkt   ;IO Request Packet
    87                              <1> 
    88                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    89 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    90 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    91 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
    92 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
    93 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
    94                              <1> 
    95                              <1> endstruc
    96                              <1> 
    97                              <1> struc nonDestInNoWaitReqPkt    ;Nondestructive Input No Wait Request Packet
    98                              <1>     
    99                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   100 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   101                              <1> 
   102                              <1> endstruc
   103                              <1> 
   104                              <1> struc statusReqPkt   ;Status Request Packet
   105                              <1> 
   106                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   107                              <1> 
   108                              <1> endstruc
   109                              <1> 
   110                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   111                              <1> 
   112                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   113                              <1>      
   114                              <1> endstruc
   115                              <1> 
   116                              <1> struc openReqPkt ;Open Device Request Packet
   117                              <1> 
   118                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   119                              <1>      
   120                              <1> endstruc
   121                              <1> 
   122                              <1> struc closeReqPkt ;Close Device Request Packet
   123                              <1> 
   124                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   125                              <1>      
   126                              <1> endstruc
   127                              <1> 
   128                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   129                              <1> 
   130                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   131                              <1>      
   132                              <1> endstruc
   133                              <1> 
   134                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   135                              <1> 
   136                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   137 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   138 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   139 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   140 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   141 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   142                              <1> 
   143                              <1> endstruc
   144                              <1> 
   145                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   146                              <1>     
   147                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   148                              <1> 
   149                              <1> endstruc
   150                              <1> 
   151                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   152                              <1>     
   153                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   154                              <1> 
   155                              <1> endstruc
     6                                  %include "fatStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous FAT driver   ;
    10                              <1> ; structures. exFAT will have it's own files at a later ;
    11                              <1> ; stage.                                                ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    15                              <1> 
    16 00000000 ??????              <1>     .jmpBoot    resb 3 
    17 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    18 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    19 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    20 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    21 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    22 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    23 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    24 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    25 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    26 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    27 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    28 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    29 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    30                              <1> 
    31 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    32 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    33 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    34 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    35 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    36 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    37                              <1> 
    38                              <1> endstruc
    39                              <1> 
    40                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    41                              <1> 
    42 00000000 ??????              <1>     .jmpBoot    resb 3
    43 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    44 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    45 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    46 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    47 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    48 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    49 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    50 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    51 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    52 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    53 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    54 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    55 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    56                              <1> 
    57 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    58 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    59 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    60 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    61 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    62 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    63 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    64                              <1> 
    65 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    66 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    67 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    68 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    69 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    70 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    71                              <1> 
    72                              <1> endstruc
    73                              <1> 
    74                              <1> struc mbr
    75 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    76 000001B8 ????????            <1>     .diskID     resb 4
    77 000001BC ????                <1>     .reserved   resb 2
    78 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    79 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    80 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    81 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    82 000001FE ????                <1>     .mbrSig     resb 2
    83                              <1> endstruc
    84                              <1> 
    85                              <1> struc mbrEntry
    86 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    87 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    88 00000004 ??                  <1>     .ptnType    resb 1
    89 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
    90 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
    91 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
    92                              <1> endstruc
    93                              <1> 
    94                              <1> struc fatDirEntry
    95                              <1> 
    96 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
    97 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
    98 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
    99 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   100 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   101 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   102 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   103 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   104 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   105 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   106 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   107 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   108                              <1> 
   109                              <1> endstruc
   110                              <1> ;Directory attribute equates
   111                              <1>     dirReadOnly     equ 01h
   112                              <1>     dirHidden       equ 02h
   113                              <1>     dirSystem       equ 04h
   114                              <1>     dirVolumeID     equ 08h
   115                              <1>     dirDirectory    equ 10h
   116                              <1>     dirArchive      equ 20h
   117                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   118                              <1> 
   119                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   120                              <1> 
   121 00000000 ??????              <1>     .jmpBoot                resb 3 
   122 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   123 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   124 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   125 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   126 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   127 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   128 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   129 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   130 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   131 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   132 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   133 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   134 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   135 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   136 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   137 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   138 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   139 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   140                              <1> 
   141                              <1> endstruc
   142                              <1> 
   143                              <1> struc FSInfo
   144                              <1> 
   145 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   146 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   147 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   148 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   149 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   150 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   151 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   152                              <1> 
   153                              <1> endstruc
     7                                  %include "dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ??                  <1>     .bBytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)x
    27 00000003 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000004 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000005 ????????            <1>     .dFAToffset              resd 1  ;Number of Sectors preceeding first FAT x
    30 00000009 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 0000000A ????                <1>     .wNumberRootDirSectors   resw 1  ;In sectors, this is 0 for FAT32 formats x
    32 0000000C ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 00000010 ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000014 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000018 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001C ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000024 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000025 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000026 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002E ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000032 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Flags: Bit 15 set = Network drive
    69                              <1> ;        Bit 14 set = Physical drive
    70                              <1> ;        Bit 13 set = JOIN'ed drive
    71                              <1> ;        Bit 12 set = SUBST'ed drive
    72                              <1> ;        Bit 7  set = Redirected, not network, drive (This is how MSCDEX worked)
    73                              <1> endstruc
    74                              <1> ;CDS equates
    75                              <1>     cdsNetDrive     equ 8000h
    76                              <1>     cdsPhysDrive    equ 4000h
    77                              <1>     cdsJoinDrive    equ 2000h
    78                              <1>     cdsSubstDrive   equ 1000h
    79                              <1>     cdsRedirDrive   equ 0080h
    80                              <1> ;------------------------------------------------------------------------;
    81                              <1> ; The SFT is a way to allow applications to open file handles to files 
    82                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    83                              <1> ; under the first header, and then a second header will be linked to the 
    84                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    85                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    86                              <1> ; using the FCBS= command. Default FCBS=5.
    87                              <1> ;
    88                              <1> ; A file handle describes the file, and the location within the file that
    89                              <1> ; we are reading. The file handle can be manipulated without the file
    90                              <1> ; being in memory, thus allowing the user to access data without needing 
    91                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    92                              <1> ; accessing devices, by treating them as files with their drivers 
    93                              <1> ; responding and translating the manipulations of the file handle itself.
    94                              <1> ; Neither the driver nor the application should see or use the SFT for
    95                              <1> ; the handle, as it is subject to change (and will change when file 
    96                              <1> ; sharing provisions are included). The DOS will make requests to the 
    97                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    98                              <1> ; track of the information in the SFT entry for that handle. 
    99                              <1> ;
   100                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   101                              <1> ; can point to the same file. It all depends on what the applications 
   102                              <1> ; want to do with the File.
   103                              <1> ;
   104                              <1> ; !!!!IMPORTANT!!!!
   105                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   106                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   107                              <1> ;
   108                              <1> ;Each SFT may look like this:
   109                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   110                              <1> ;            |                |
   111                              <1> ;       wNumFiles*sft    wNumFiles*sft
   112                              <1> ;
   113                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   114                              <1> ; System FCBs.
   115                              <1> ;
   116                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   117                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   118                              <1> ;
   119                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   120                              <1> ; DEFAULT FCBS=5, MINIMUM FCBS=5
   121                              <1> ;------------------------------------------------------------------------;
   122                              <1> struc sfth   ;System file table header
   123                              <1> ; This is the SFT header.
   124                              <1> ; This structure comes before the start of the first file in the array/table.
   125 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   126 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   127                              <1> endstruc
   128                              <1> 
   129                              <1> struc sft
   130                              <1> ;This is the file struc itself
   131 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   132 00000002 ????                <1>     .wOpenMode   resw 1    ;Bit 15 set if opened via FCB
   133 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   134 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   135 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   136 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file
   137 00000013 ????                <1>     .wTime       resw 1    ;File Time
   138 00000015 ????                <1>     .wDate       resw 1    ;File Date
   139 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   140 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset in file, in bytes
   141 0000001F ????                <1>     .wRelClust   resw 1    ;Rel cluster in file of the last cluster accessed
   142 00000021 ????????            <1>     .dDirSect    resd 1    ;Rel number of sector containing directory entry 
   143 00000025 ??                  <1>     .bNumDirEnt  resb 1    ;Number of dir entry within sector (byte offset/32)
   144 00000026 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   145 00000031 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   146 00000039 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster of last cluster accessed
   147                              <1> endstruc
   148                              <1> 
   149                              <1> ;------------------------------------------------------------------------;
   150                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   151                              <1> ; to an internal buffer, and then copying it to the specified location
   152                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   153                              <1> ; another request for the same sector from the same device is made, so 
   154                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   155                              <1> ; size, selected according to the largest detected sector size during 
   156                              <1> ; the initial loadup.
   157                              <1> ;
   158                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   159                              <1> ;
   160                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   161                              <1> ;------------------------------------------------------------------------;
   162                              <1> 
   163                              <1> struc bufferHdr
   164 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   165 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   166 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   167 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   168 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   169 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   170 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   171 0000001F ??                  <1>     .reserved    resb  1   ;Alignment byte
   172                              <1> endstruc
   173                              <1> ;Buffer Flag equates
   174                              <1>     dosBuffer   equ 1h  ;DOS data sector in buffer
   175                              <1>     fatBuffer   equ 2h  ;FAT sector in buffer
   176                              <1>     dirBuffer   equ 4h  ;Directory sector in buffer
   177                              <1>     dataBuffer  equ 8h  ;File Data sector in buffer
   178                              <1>     refBuffer   equ 20h ;Data in buffer referenced by an application
   179                              <1>     dirtyBuffer equ 40h ;Data in buffer modified by an application
   180                              <1> ;------------------------------------------------------------------------;
   181                              <1> ; Memory control block for each memory arena
   182                              <1> ;------------------------------------------------------------------------;
   183                              <1> struc mcb
   184 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   185 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP or 0 for free space
   186 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   187 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   188                              <1> endstruc
   189                              <1> 
   190                              <1> ;------------------------------------------------------------------------;
   191                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   192                              <1> ; following order, thus allowing for return values to be placed in the 
   193                              <1> ; registers by accessing the caller register stack frame.
   194                              <1> ;------------------------------------------------------------------------;
   195                              <1> struc callerFrame
   196 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   197 00000008 ????????????????    <1>     .rbx    resq 1    
   198 00000010 ????????????????    <1>     .rcx    resq 1
   199 00000018 ????????????????    <1>     .rdx    resq 1
   200 00000020 ????????????????    <1>     .rsi    resq 1
   201 00000028 ????????????????    <1>     .rdi    resq 1
   202 00000030 ????????????????    <1>     .rbp    resq 1
   203 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   204 00000040 ????????????????    <1>     .r9     resq 1
   205                              <1> ;Pushed by Processor when invoked via Interrupt
   206 00000048 ????????????????    <1>     .rip    resq 1
   207 00000050 ????????????????    <1>     .cs     resq 1
   208 00000058 ????????????????    <1>     .flags  resq 1
   209                              <1> endstruc
   210                              <1> 
   211                              <1> %macro pushDOS 0
   212                              <1>     push r9
   213                              <1>     push r8
   214                              <1>     push rbp
   215                              <1>     push rdi
   216                              <1>     push rsi
   217                              <1>     push rdx
   218                              <1>     push rcx
   219                              <1>     push rbx
   220                              <1>     push rax
   221                              <1> %endmacro
   222                              <1> 
   223                              <1> %macro popDOS 0
   224                              <1>     pop rax
   225                              <1>     pop rbx
   226                              <1>     pop rcx
   227                              <1>     pop rdx
   228                              <1>     pop rsi
   229                              <1>     pop rdi
   230                              <1>     pop rbp
   231                              <1>     pop r8
   232                              <1>     pop r9
   233                              <1> %endmacro
   234                              <1> 
   235                              <1> struc psp
   236 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h
   237 00000002 ????????????????    <1>     .startSeg   resq 1  ;Pointer to the start of the PSP
   238 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   239 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   240 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   241 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   242 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   243 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   244 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   245 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size
   246 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh
   247 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain
   248 0000005B ????????????????    <1>     .xtraHdlPtr resq 1  ;Pointer to the extra handle array if needed
   249 00000063 ????????????????    <1>     .fcbPtr1    resq 1  ;Pointer to the first OS allocated FCB
   250 0000006B <res 15h>           <1>     .reserved   resb 21
   251 00000080 ??                  <1>     .charCount  resb 1  ;Number of characters in command tail
   252 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   253                              <1> endstruc
   254                              <1> 
   255                              <1> struc mcb
   256 00000000 ??                  <1>     .mzbyte     resb 1  ;M=In use, Z=Free
   257 00000001 ????????????????    <1>     .processPtr resq 1  ;Points to the start of the process PSP
   258 00000009 ????????            <1>     .paragraphs resd 1  ;Gives the number of paras allocated to this process
   259 0000000D ??????              <1>     .reserved   resb 3
   260                              <1>     .program:
   261                              <1> endstruc
   262                              <1> 
   263                              <1> struc clkStruc
   264 00000000 ????                <1>     .dateWord   resw 1
   265 00000002 ??                  <1>     .minutes    resb 1
   266 00000003 ??                  <1>     .hours      resb 1
   267 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   268 00000005 ??                  <1>     .seconds    resb 1
   269                              <1> endstruc
     8                                  Segment .text align=1   ;Init code
     9                                  %include "sysInit.asm"
    10                              <1> ; We arrive here with the following values in the registers.
    11                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    12                              <1> ; dx  = Int 33h boot device number
    13                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    14                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    15 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    16 00000002 909090909090909090- <1>     db (100h-2) dup (90h)   ;Duplicate NOPs for the PSP
    16 0000000B 909090909090909090- <1>
    16 00000014 909090909090909090- <1>
    16 0000001D 909090909090909090- <1>
    16 00000026 909090909090909090- <1>
    16 0000002F 909090909090909090- <1>
    16 00000038 909090909090909090- <1>
    16 00000041 909090909090909090- <1>
    16 0000004A 909090909090909090- <1>
    16 00000053 909090909090909090- <1>
    16 0000005C 909090909090909090- <1>
    16 00000065 909090909090909090- <1>
    16 0000006E 909090909090909090- <1>
    16 00000077 909090909090909090- <1>
    16 00000080 909090909090909090- <1>
    16 00000089 909090909090909090- <1>
    16 00000092 909090909090909090- <1>
    16 0000009B 909090909090909090- <1>
    16 000000A4 909090909090909090- <1>
    16 000000AD 909090909090909090- <1>
    16 000000B6 909090909090909090- <1>
    16 000000BF 909090909090909090- <1>
    16 000000C8 909090909090909090- <1>
    16 000000D1 909090909090909090- <1>
    16 000000DA 909090909090909090- <1>
    16 000000E3 909090909090909090- <1>
    16 000000EC 909090909090909090- <1>
    16 000000F5 909090909090909090- <1>
    16 000000FE 9090                <1>
    17                              <1> ;First make space for the MCB
    18 00000100 52                  <1>     push rdx    ;Save dl on stack briefly
    19 00000101 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    20 00000106 0F32                <1>     rdmsr
    21 00000108 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    22 0000010A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    23 0000010E 89C7                <1>     mov edi, eax        ;Get the low dword in
    24 00000110 4881C710000000      <1>     add rdi, mcb_size   ;Make space for the MCB
    25 00000117 89F8                <1>     mov eax, edi
    26 00000119 4889FA              <1>     mov rdx, rdi
    27 0000011C 48C1EA20            <1>     shr rdx, 20h
    28 00000120 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    29 00000122 5A                  <1>     pop rdx
    30                              <1> ;------------------------------------------------;
    31                              <1> ;           Sanitise the data area               ;
    32                              <1> ;------------------------------------------------;
    33 00000123 B9[D4120000]        <1>     mov ecx, dSegLen
    34 00000128 30C0                <1>     xor al, al
    35 0000012A 57                  <1>     push rdi    ;Temp save rdi on the stack
    36 0000012B F3AA                <1>     rep stosb
    37 0000012D 5F                  <1>     pop rdi
    38                              <1> 
    39                              <1> ;------------------------------------------------;
    40                              <1> ;          Start saving Basic DOS data           ;
    41                              <1> ;------------------------------------------------;
    42 0000012E 64881425[08000000]  <1>     mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    43 00000136 488D15C3FEFFFF      <1>     lea rdx, tempPSP    ;Get the address of the tempPSP
    44 0000013D 6448891425-         <1>     mov qword fs:[currentPSP], rdx
    44 00000142 [D7000000]          <1>
    45                              <1> ;Copy DOS to its final resting place
    46 00000146 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    46 0000014B [00000000]          <1>
    47 0000014F 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rdx 
    48 00000152 4881C7[D4120000]    <1>     add rdi, dSegLen ;Move destination past end of data area
    49 00000159 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    50 00000160 B900100000          <1>     mov ecx, 1000h
    51 00000165 F348A5              <1>     rep movsq
    52                              <1> 
    53 00000168 CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    54 0000016A 6444880425-         <1>     mov byte fs:[numRemMSD], r8b    ;Save number of physical int 33h devs
    54 0000016F [09000000]          <1>
    55 00000173 64C60425[99000000]- <1>     mov byte fs:[lastdrvNum], 5     ;Last drive is by default 5
    55 0000017B 05                  <1>
    56 0000017C 64C60425[0A000000]- <1>     mov byte fs:[numLRemDrives], 0     ;Number of logical drives
    56 00000184 00                  <1>
    57                              <1> 
    58                              <1> ;------------------------------------------------;
    59                              <1> ;          Find largest sector size              ;
    60                              <1> ;------------------------------------------------;
    61                              <1> largestSectorSearch:
    62 00000185 30D2                <1>     xor dl, dl
    63 00000187 31FF                <1>     xor edi, edi    ;Use this as the counter for the largest sector size
    64                              <1> .lss:
    65 00000189 B488                <1>     mov ah, 88h
    66 0000018B CD33                <1>     int 33h
    67 0000018D 39C7                <1>     cmp edi, eax
    68 0000018F 0F42F8              <1>     cmovb edi, eax  ;Only replace ebp if eax is greater
    69 00000192 FEC2                <1>     inc dl
    70 00000194 4438C2              <1>     cmp dl, r8b
    71 00000197 75F0                <1>     jne .lss
    72 00000199 6466893C25-         <1>     mov word fs:[maxBytesSec], di
    72 0000019E [87000000]          <1>
    73                              <1> 
    74                              <1> ;------------------------------------------------;
    75                              <1> ;          Driver Adjustments and inits          ;
    76                              <1> ;------------------------------------------------;
    77                              <1> ;Modify the pointers in nData before putting them in the data area
    78 000001A2 48012D98030000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
    79 000001A9 48012D9B030000      <1>     add qword [nData + drvHdr.strPtr], rbp
    80 000001B0 48012D9C030000      <1>     add qword [nData + drvHdr.intPtr], rbp
    81                              <1> ;Copy the Null driver to its location in Sysvars
    82 000001B7 B922000000          <1>     mov ecx, drvHdr_size
    83 000001BC 488D357E030000      <1>     lea rsi, qword [nData]
    84 000001C3 488DBD[A5000000]    <1>     lea rdi, qword [rbp + nulDevHdr]
    85 000001CA F3A4                <1>     rep movsb   
    86                              <1> 
    87                              <1> ;Adjust the addresses in the other driver headers 
    88 000001CC 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
    88 000001CE [820D000000000000]  <1>
    89 000001D6 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
    90 000001DB 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
    91                              <1> adjDrivers:
    92 000001DF E888020000          <1>     call adjustDrvHdr
    93 000001E4 E2F9                <1>     loop adjDrivers
    94                              <1> 
    95                              <1> ;Open NUL
    96 000001E6 488D9D[0B000000]    <1>     lea rbx, qword [rbp + charReqHdr]
    97 000001ED C6030D              <1>     mov byte [rbx + openReqPkt.hdrlen], openReqPkt_size
    98 000001F0 C6430300            <1>     mov byte [rbx + openReqPkt.status], 0
    99 000001F4 FF95[AF000000]      <1>     call qword [rbp + nulDevHdr + drvHdr.strPtr]
   100 000001FA FF95[B7000000]      <1>     call qword [rbp + nulDevHdr + drvHdr.intPtr]
   101                              <1> ;Open CON
   102                              <1> conInit:    ;Rather than keeping this resident... do it here
   103                              <1> .ci0:
   104 00000200 B401                <1>     mov ah, 01      ;Get buffer status
   105 00000202 CD36                <1>     int 36h
   106 00000204 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   107 00000206 30E4                <1>     xor ah, ah
   108 00000208 CD36                <1>     int 36h ;Read key to flush from buffer
   109 0000020A EBF4                <1>     jmp short .ci0
   110                              <1> .ci1:
   111 0000020C B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   112 00000211 CD30                <1>     int 30h
   113 00000213 B402                <1>     mov ah, 02h
   114 00000215 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   115 00000217 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   116 00000219 CD30                <1>     int 30h
   117 0000021B B707                <1>     mov bh, 07h     ;Grey/Black attribs
   118 0000021D B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   119 00000222 CD30                <1>     int 30h
   120                              <1> 
   121                              <1>     ;Save ptr to ConHdr in Sysvars
   122 00000224 488D85[820D0000]    <1>     lea rax, qword [rbp + conHdr]
   123 0000022B 6448890425-         <1>     mov qword fs:[conPtr], rax
   123 00000230 [7F000000]          <1>
   124                              <1> 
   125                              <1>     ;Save ptr to ClkHdr in Sysvars
   126 00000234 488D85[E80D0000]    <1>     lea rax, qword [rbp + clkHdr]
   127 0000023B 6448890425-         <1>     mov qword fs:[clockPtr], rax
   127 00000240 [77000000]          <1>
   128                              <1> 
   129                              <1> ;------------------------------------------------;
   130                              <1> ;          Kernel inits and adjustments          ;
   131                              <1> ;------------------------------------------------;
   132                              <1> ;Adjust Int 41h address table
   133                              <1> adjInt41h:
   134 00000244 B96A000000          <1>     mov ecx, dispatchTableL/8 ;Number of elements in table
   135 00000249 48BB-               <1>     mov rbx, functionDispatch.dispatchTable ;Get EA of table
   135 0000024B [6707000000000000]  <1>
   136 00000253 488D5C1D00          <1>     lea rbx, qword [rbp+rbx]    ;Point to the start of the relocated table 
   137                              <1> .ai41h:
   138 00000258 48012B              <1>     add qword [rbx], rbp    ;Add base address value to entry in reloc table
   139 0000025B 4881C308000000      <1>     add rbx, 8              ;Each entry is size 8
   140 00000262 FFC9                <1>     dec ecx
   141 00000264 75F2                <1>     jnz .ai41h  ;Keep looping until all entries have been adjusted
   142                              <1> 
   143                              <1> ;Adjust Interrupt Entries Int 40h-49h
   144                              <1> adjInts:
   145 00000266 B340                <1>     mov bl, 40h
   146 00000268 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   147 0000026D CD35                <1>     int 35h
   148 0000026F B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   149 00000274 488D3D76020000      <1>     lea rdi, intData
   150 0000027B 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   151                              <1> .ai0:
   152 0000027D B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   153 00000282 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   154 00000285 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   155 00000288 CD35                <1>     int 35h
   156 0000028A 4881C708000000      <1>     add rdi, 8
   157 00000291 FFC1                <1>     inc ecx
   158 00000293 81F94A000000        <1>     cmp ecx, 4Ah
   159 00000299 75E2                <1>     jne .ai0
   160                              <1> 
   161                              <1> ;------------------------------------------------;
   162                              <1> ;         Init msd driver, create DPB            ;
   163                              <1> ;------------------------------------------------;
   164                              <1> storageInits:
   165                              <1> ;First save dpb and cds pointer in sysvars
   166 0000029B 488D9D[00000000]    <1>     lea rbx, qword [rbp + firstDPB]
   167 000002A2 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   167 000002A7 [67000000]          <1>
   168 000002AB 488D9D[49020000]    <1>     lea rbx, qword [rbp + initCDS]
   169 000002B2 6448891C25-         <1>     mov qword fs:[cdsHeadPtr], rbx
   169 000002B7 [91000000]          <1>
   170                              <1> 
   171                              <1> ;Open Mass Storage
   172 000002BB 488D9D[35000000]    <1>     lea rbx, qword [rbp + diskReqHdr]
   173 000002C2 C6031F              <1>     mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   174 000002C5 C6430200            <1>     mov byte [rbx + initReqPkt.cmdcde], 00h     ;MSD init
   175 000002C9 66C743030000        <1>     mov word [rbx + initReqPkt.status], 0       ;Zero status word
   176 000002CF 648A0425[0A000000]  <1>     mov al, byte fs:[numLRemDrives]
   177 000002D7 88431E              <1>     mov byte [rbx + initReqPkt.drvnum], al      ;First unit is drive A
   178 000002DA FF95[140E0000]      <1>     call qword [rbp + msdHdr + drvHdr.strPtr]
   179 000002E0 FF95[1C0E0000]      <1>     call qword [rbp + msdHdr + drvHdr.intPtr]
   180                              <1>     ;Check if it returned OK first!
   181 000002E6 66F743030080        <1>     test word [rbx + initReqPkt.status], 8000h  ;Test the error bit
   182 000002EC 0F858D010000        <1>     jnz errorInit   ;If the bit is set, halt execution
   183 000002F2 8A430D              <1>     mov al, byte [rbx + initReqPkt.numunt]
   184 000002F5 64880425[0A000000]  <1>     mov byte fs:[numLRemDrives], al
   185 000002FD 8885[240E0000]      <1>     mov byte [rbp + msdHdr + drvHdr.drvNam], al ;Save # of units in name field
   186                              <1> 
   187 00000303 488B5316            <1>     mov rdx, qword [rbx + initReqPkt.optptr]    ;Get ptr to bpbPtrTbl in rdx
   188 00000307 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   189 0000030A 30C9                <1>     xor cl, cl  ;Clear counter
   190 0000030C 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   190 00000311 [67000000]          <1>
   191                              <1> .si0:   
   192 00000315 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   193 00000318 B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   194 0000031A CD41                <1>     int 41h
   195                              <1> ;Add other data to DPB
   196 0000031C 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   197 0000031F 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   198 00000322 50                  <1>     push rax
   199 00000323 488D87[0A0E0000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   200 0000032A 4889451C            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   201 0000032E 58                  <1>     pop rax
   202 0000032F FEC1                <1>     inc cl
   203 00000331 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   204 00000333 7416                <1>     je .si1
   205 00000335 50                  <1>     push rax
   206 00000336 488D4536            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   207 0000033A 48894526            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   208 0000033E 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   209 00000341 58                  <1>     pop rax
   210 00000342 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   211 00000349 EBCA                <1>     jmp short .si0
   212                              <1> .si1:
   213                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   214 0000034B 48C74526FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   215 00000353 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   216                              <1> 
   217                              <1> ;------------------------------------------------;
   218                              <1> ;                   MCB inits                    ;
   219                              <1> ;------------------------------------------------;
   220                              <1> 
   221                              <1> ;Build the DOS segment's MCB header
   222 00000356 4889EB              <1>     mov rbx, rbp
   223 00000359 4881EB10000000      <1>     sub rbx, mcb_size   ;Point rbx to the start of the MCB
   224 00000360 C6034D              <1>     mov byte [rbx + mcb.marker], "M"
   225 00000363 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get the current PSP
   225 00000368 [D7000000]          <1>
   226 0000036C 48894301            <1>     mov qword [rbx + mcb.owner], rax
   227 00000370 C74309FFFFFFFF      <1>     mov dword [rbx + mcb.blockSize], -1 ;Let size be max for now, adjust later
   228                              <1> 
   229 00000377 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save rbx in data area
   229 0000037C [5F000000]          <1>
   230                              <1> 
   231                              <1> ;------------------------------------------------;
   232                              <1> ;          Default File Handle Creation          ;
   233                              <1> ;------------------------------------------------;
   234                              <1> 
   235                              <1> ;Fill in the default file table entries
   236                              <1>     ;lea rbx, qword [rbp + firstSftHeader]
   237                              <1>     ;mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   238                              <1>     ;mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   239                              <1>     ;mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   240                              <1> 
   241                              <1>     ;lea rbx, qword [rbp + firstSft]
   242                              <1>     ;mov word [rbx + sft.wNumHandles], 0 ;Nothing pointing to this file yet
   243                              <1>     ;mov word [rbx + sft.w]
   244                              <1> 
   245                              <1> ;------------------------------------------------;
   246                              <1> ;               Load CONFIG.SYS                  ;
   247                              <1> ;------------------------------------------------;
   248                              <1> ;------------------------------------------------;
   249                              <1> ;              Process CONFIG.SYS                ;
   250                              <1> ;------------------------------------------------;
   251                              <1> ;------------------------------------------------;
   252                              <1> ;                 Create a CDS                   ;
   253                              <1> ;------------------------------------------------;
   254                              <1> ;------------------------------------------------;
   255                              <1> ;           Load Command interpreter             ;
   256                              <1> ;------------------------------------------------;
   257                              <1> 
   258                              <1> ;Test Error Case
   259                              <1>     ;mov ah, 00110000b
   260                              <1>     ;mov al, 00h
   261                              <1>     ;mov edi, 0Ch
   262                              <1>     ;int 44h
   263                              <1> 
   264 00000380 488D1515010000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   265 00000387 B409                <1>     mov ah, 09h
   266 00000389 CD41                <1>     int 41h
   267                              <1> 
   268 0000038B B801C50000          <1>     mov eax, 0C501h ;Connect debugger
   269 00000390 CD35                <1>     int 35h
   270                              <1> l1:
   271 00000392 B401                <1>     mov ah, 01h  ;Write with echo
   272 00000394 CD41                <1>     int 41h
   273 00000396 3C00                <1>     cmp al, 0
   274 00000398 7402                <1>     je l2
   275 0000039A EBF6                <1>     jmp short l1
   276                              <1> l2:
   277 0000039C B407                <1>     mov ah, 07h
   278 0000039E CD41                <1>     int 41h
   279 000003A0 3C42                <1>     cmp al, 42h
   280 000003A2 75EE                <1>     jne l1
   281                              <1> l3:
   282 000003A4 6466C70425-         <1>     mov word fs:[CLOCKrecrd + clkStruc.dateWord], 0
   282 000003A9 [18010000]0000      <1>
   283 000003AF 488D9D[0B000000]    <1>     lea rbx, qword [rbp + charReqHdr] ;Get the address of this request block
   284 000003B6 488D85[18010000]    <1>     lea rax, qword [rbp + CLOCKrecrd]
   285 000003BD C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   286 000003C0 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read the time
   287 000003C4 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   288 000003CA 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   289 000003CE C7431606000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 06
   290 000003D5 FF95[F20D0000]      <1>     call qword [rbp + clkHdr + drvHdr.strPtr]
   291 000003DB FF95[FA0D0000]      <1>     call qword [rbp + clkHdr + drvHdr.intPtr]
   292                              <1> 
   293 000003E1 B403                <1>     mov ah, 03h
   294 000003E3 30FF                <1>     xor bh, bh
   295 000003E5 CD30                <1>     int 30h
   296 000003E7 30D2                <1>     xor dl, dl  ;0 column
   297 000003E9 B402                <1>     mov ah, 02h
   298 000003EB CD30                <1>     int 30h
   299                              <1> 
   300 000003ED 488D9D[18010000]    <1>     lea rbx, qword [rbp + CLOCKrecrd]
   301 000003F4 0FB64303            <1>     movzx eax, byte [rbx + clkStruc.hours]
   302 000003F8 E832000000          <1>     call .clkHexToBCD
   303 000003FD B40E                <1>     mov ah, 0Eh
   304 000003FF B03A                <1>     mov al, ":"
   305 00000401 CD30                <1>     int 30h
   306 00000403 0FB64302            <1>     movzx eax, byte [rbx + clkStruc.minutes]
   307 00000407 E823000000          <1>     call .clkHexToBCD
   308 0000040C B40E                <1>     mov ah, 0Eh
   309 0000040E B03A                <1>     mov al, ":"
   310 00000410 CD30                <1>     int 30h
   311 00000412 0FB64305            <1>     movzx eax, byte [rbx + clkStruc.seconds]
   312 00000416 E814000000          <1>     call .clkHexToBCD
   313 0000041B B40E                <1>     mov ah, 0Eh
   314 0000041D B02E                <1>     mov al, "."
   315 0000041F CD30                <1>     int 30h
   316 00000421 0FB64304            <1>     movzx eax, byte [rbx + clkStruc.hseconds]
   317 00000425 E805000000          <1>     call .clkHexToBCD
   318 0000042A E963FFFFFF          <1>     jmp l1
   319                              <1> .clkHexToBCD:
   320                              <1> ;Converts a Hex byte into two BCD digits
   321                              <1> ;Takes input in each nybble of al
   322 0000042F 53                  <1>     push rbx
   323 00000430 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
   323 00000439 00                  <1>
   324 0000043A 31D2                <1>     xor edx, edx
   325 0000043C 48F7F3              <1>     div rbx
   326 0000043F 80C230              <1>     add dl, '0'
   327 00000442 80FA39              <1>     cmp dl, '9'
   328 00000445 7603                <1>     jbe .chtb0
   329 00000447 80C207              <1>     add dl, 'A'-'0'-10
   330                              <1> .chtb0:
   331 0000044A 88D1                <1>     mov cl, dl    ;Save remainder byte
   332 0000044C 31D2                <1>     xor edx, edx
   333 0000044E 48F7F3              <1>     div rbx
   334 00000451 80C230              <1>     add dl, '0'
   335 00000454 80FA39              <1>     cmp dl, '9'
   336 00000457 7603                <1>     jbe .chtb1
   337 00000459 80C207              <1>     add dl, 'A'-'0'-10
   338                              <1> .chtb1:
   339 0000045C 88D5                <1>     mov ch, dl    ;Save remainder byte
   340                              <1> 
   341 0000045E 88E8                <1>     mov al, ch    ;Get most sig digit into al
   342 00000460 B40E                <1>     mov ah, 0Eh
   343 00000462 CD30                <1>     int 30h
   344 00000464 88C8                <1>     mov al, cl    ;Get least sig digit into al
   345 00000466 B40E                <1>     mov ah, 0Eh
   346 00000468 CD30                <1>     int 30h
   347 0000046A 5B                  <1>     pop rbx
   348 0000046B C3                  <1>     ret
   349                              <1> ;--------------------------------
   350                              <1> ;       PROCS FOR SYSINIT       :
   351                              <1> ;--------------------------------
   352                              <1> adjustDrvHdr:
   353                              <1> ;Input: rsi = Effective address of driver in DOS segment
   354                              <1> ;       rbp = Ptr to the start of the DOS segment
   355                              <1> ;Output: rsi = EA of next header in DOS segment
   356 0000046C 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   357 0000046F 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   358 00000473 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   359 00000477 4881C622000000      <1>     add rsi, drvHdr_size
   360 0000047E C3                  <1>     ret
   361                              <1> errorInit:
   362                              <1> ;If a critical error occurs during sysinit, fail through here
   363 0000047F 488D152C000000      <1>     lea rdx, hltmsg
   364 00000486 B409                <1>     mov ah, 09h
   365 00000488 CD41                <1>     int 41h
   366 0000048A FA                  <1>     cli ;Clear interrupts
   367 0000048B B0FF                <1>     mov al, -1
   368 0000048D 66BAA100            <1>     mov dx, 0A1h    ;PIC2 data
   369 00000491 EE                  <1>     out dx, al      ;Mask all lines
   370 00000492 66BA2100            <1>     mov dx, 21h     ;PIC1 data
   371 00000496 EE                  <1>     out dx, al      ;Mask all lines
   372                              <1> .ei0:
   373 00000497 F4                  <1>     hlt
   374 00000498 F390                <1>     pause
   375 0000049A EBFB                <1>     jmp short .ei0
   376                              <1> 
   377                              <1> ;--------------------------------
   378                              <1> ;       DATA FOR SYSINIT        :
   379                              <1> ;--------------------------------
   380 0000049C 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
   380 000004A5 5343502F444F532E2E- <1>
   380 000004AE 2E0A0D24            <1>
   381 000004B2 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0Ah,0Dh,"$"
   381 000004BB 7469616C6973696E67- <1>
   381 000004C4 20534350444F532E53- <1>
   381 000004CD 59532E205379737465- <1>
   381 000004D6 6D2068616C74696E67- <1>
   381 000004DF 2E2E2E0A0D24        <1>
   382 000004E5 434F4E00            <1> conName db "CON",0
   383 000004E9 41555800            <1> auxName db "AUX",0
   384 000004ED 50524E00            <1> prnName db "PRN",0
   385                              <1> intData:
   386 000004F1 [2F03000000000000]  <1>     dq terminateProcess ;Int 40h
   387 000004F9 [2F03000000000000]  <1>     dq functionDispatch ;Int 41h
   388 00000501 [B70A000000000000]  <1>     dq terminateHandler ;Int 42h
   389 00000509 [B70A000000000000]  <1>     dq ctrlCHandler     ;Int 43h
   390 00000511 [B70A000000000000]  <1>     dq critErrorHandler ;Int 44h
   391 00000519 [4A0D000000000000]  <1>     dq absDiskRead      ;Int 45h
   392 00000521 [5F0D000000000000]  <1>     dq absDiskWrite     ;Int 46h
   393 00000529 [740D000000000000]  <1>     dq terminateResident    ;Int 47h
   394 00000531 [740D000000000000]  <1>     dq inDosHandler     ;Int 48h
   395 00000539 [760D000000000000]  <1>     dq fastOutput       ;Int 49h
   396                              <1> nData:
   397 00000541 [820D000000000000]  <1>     dq conHdr
   398 00000549 0480                <1>     dw 08004h
   399 0000054B [2A0F000000000000]  <1>     dq nulStrat
   400 00000553 [300F000000000000]  <1>     dq nulIntr
   401 0000055B 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
    10                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    11                                  %include "dosSeg.asm"
    12                              <1> ;This file contains the main DOS data segment
    13                              <1> 
    14 00000000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    15 00000008 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    16 00000009 ??                  <1>     numRemMSD   resb 1    ;Number of physical removable MSDs in system x
    17 0000000A ??                  <1>     numLRemDrives  resb 1 ;Number of logical removable drives in system x
    18                              <1>     ;if numRemMSD = 1 then numLRemDrives = 2 and we have a single drive system
    19 0000000B <res 2Ah>           <1>     charReqHdr  resb ioReqPkt_size  ;Character IO Request header x
    20 00000035 <res 2Ah>           <1>     diskReqHdr  resb ioReqPkt_size  ;Disk Action Request header x
    21                              <1>     ;The device driver header with space for the largest possible packet
    22 0000005F ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    23                              <1> sysVarsPtr:
    24 00000067 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    25 0000006F ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    26 00000077 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    27                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    28 0000007F ????????????????    <1>     conPtr      resq 1    ;Pointer to the current active CON device header  x
    29                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    30 00000087 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    31 00000089 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain
    32 00000091 ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    33 00000099 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    34 0000009A ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    35 000000A2 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    36 000000A4 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    37 000000A5 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    38                              <1> 
    39                              <1> ;Start of Swappable Data Area, this bit can remain static
    40 000000C7 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h
    41 000000C8 ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving
    42 000000C9 ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh
    43 000000CA ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    44 000000CB ????                <1>     errorExt    resw 1  ;Extended Error Code
    45 000000CD ??                  <1>     errorAction resb 1  ;Suggested action for error  
    46 000000CE ??                  <1>     errorClass  resb 1  ;Error Class
    47                              <1> 
    48 000000CF ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA
    49 000000D7 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP
    50 000000DF ????????????????    <1>     rdiErrorPtr resq 1  ;Saves RDI value of last error (could make this di)
    51 000000E7 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
    52 000000EF ????                <1>     lastRetCode resw 1  ;Last return code returned by Int 41h/4Ch
    53 000000F1 ??                  <1>     currentDrv  resb 1  ;Default, last accessed drive
    54 000000F2 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls
    55 000000F3 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify
    56                              <1> ;SDA, needs to be replaced between processes
    57 000000F4 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
    58                              <1> 
    59                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    60 000000FC ??                  <1>     singleDrv   resb 1  
    61                              <1> ;This is done to allow for DOS to give the user a change to swap devices
    62                              <1> 
    63 000000FD ??                  <1>     Int44RetVal resb 1  ;Saves a copy of the Int 44 return value
    64 000000FE ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
    65 000000FF ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
    66 00000100 ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
    67 00000108 ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
    68 00000110 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
    69                              <1> ;Time stuff
    70 00000118 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
    71 0000011E ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
    72 0000011F ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
    73 00000120 ??                  <1>     years       resb 1  ;00h - FFh (00 = 1980 - 128 = 2107)
    74 00000121 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
    75 00000123 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
    76                              <1> 
    77                              <1> ;Stacks
    78 00000124 <res 528h>          <1>     critStack   resq 165
    79 0000064C ????????????????    <1>     critStakTop resq 1
    80 00000654 <res 638h>          <1>     IOStack     resq 199
    81 00000C8C ????????????????    <1>     IOStakTop   resq 1
    82 00000C94 <res 638h>          <1>     DiskStack   resq 199
    83 000012CC ????????????????    <1>     DiskStakTop resq 1
    84                              <1>     dSegLen     equ     $
    12                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    13                                  %include "dosKernel.asm"
    14                              <1> 
    15                              <1> ;-----------------------------------:
    16                              <1> ;           Static Data             :
    17                              <1> ;-----------------------------------:
    18 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    19 00000001 01                  <1> dosMinor    db 01h      ;.01
    20                              <1> ;-----------------------------------:
    21                              <1> ;       Misc System routines        :
    22                              <1> ;-----------------------------------:
    23                              <1> criticalDOSError:
    24                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    25                              <1> ; to the critical error handler.
    26                              <1> ; Called with ax, di and rsi set as required by Int 44h (caller decides)
    27                              <1> ;               AH = Critical Error Bitfield
    28                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    29                              <1> ;               Bit 6 - Reserved
    30                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    31                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    32                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    33                              <1> ;               Bits [2-1] = Affected Disk Error
    34                              <1> ;                     0 0   DOS area
    35                              <1> ;                     0 1   FAT area
    36                              <1> ;                     1 0   Directory area
    37                              <1> ;                     1 1   Data area
    38                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    39                              <1> ;               AL  = Failing drive number if AH[7] = 0
    40                              <1> ;               DIL = Error code for errorMsg
    41                              <1> ;               RSI = EA of Device Header for which device the error occured
    42                              <1> ;Return:
    43                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    44                              <1> ;                  = 1 - Retry the Operation    (Retry)
    45                              <1> ;                  = 2 - Terminate the Program  (Abort)
    46                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    47                              <1> ; Return response from int 44h in al
    48 00000002 FA                  <1>     cli ;Disable Interrupts
    49 00000003 488925(F4000000)    <1>     mov qword [xInt44hRSP], rsp
    50 0000000A 488B25(08010000)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
    51 00000011 CD44                <1>     int 44h ;Call critical error handler
    52 00000013 488B25(F4000000)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
    53 0000001A FB                  <1>     sti ;Reenable Interrupts
    54 0000001B C3                  <1>     ret
    55                              <1> findLRUBuffer: 
    56                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
    57                              <1> ; in rbx
    58                              <1> ;Input: Nothing
    59                              <1> ;Output: rbx = Pointer to the buffer hdr to use
    60 0000001C 52                  <1>     push rdx
    61 0000001D 488B1D(89000000)    <1>     mov rbx, qword [bufHeadPtr]
    62 00000024 807B08FF            <1>     cmp byte [rbx + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
    63 00000028 7436                <1>     je .flbExit 
    64 0000002A 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
    65 00000031 742D                <1>     je .flbExit
    66                              <1> .flbWalk:
    67 00000033 4889DA              <1>     mov rdx, rbx    ;Save a ptr to the previous buffer header
    68 00000036 488B1A              <1>     mov rbx, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
    69 00000039 807B08FF            <1>     cmp byte [rbx + bufferHdr.driveNumber], -1
    70 0000003D 7423                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
    71 0000003F 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
    72 00000046 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
    73 00000048 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
    74                              <1> .flbHeadLink:
    75 0000004F 488B15(89000000)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
    76 00000056 48891D(89000000)    <1>     mov qword [bufHeadPtr], rbx    ;Sysvars to point to new buffer
    77 0000005D 488913              <1>     mov qword [rbx + bufferHdr.nextBufPtr], rdx
    78                              <1> .flbExit:
    79 00000060 5A                  <1>     pop rdx
    80 00000061 C3                  <1>     ret
    81                              <1> .flbFreeLink:
    82 00000062 51                  <1>     push rcx
    83 00000063 488B0B              <1>     mov rcx, qword [rbx + bufferHdr.nextBufPtr]
    84 00000066 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rbx
    85 00000069 59                  <1>     pop rcx
    86 0000006A EBE3                <1>     jmp short .flbHeadLink
    87                              <1> findSectorInBuffer:
    88                              <1> ;Finds the Buffer for a sector
    89                              <1> ;If the sector is not in a buffer, returns with a -1
    90                              <1> ;Input: rax = Sector number
    91                              <1> ;        dl = Drive number
    92                              <1> ;Output: rbx = Buffer hdr pointer or -1
    93 0000006C 488B1D(89000000)    <1>     mov rbx, qword [bufHeadPtr]
    94                              <1> .fsiCheckBuffer:
    95 00000073 385308              <1>     cmp byte [rbx + bufferHdr.driveNumber], dl
    96 00000076 7507                <1>     jne .fsiGotoNextBuffer
    97 00000078 4839430A            <1>     cmp qword [rbx + bufferHdr.bufferLBA], rax
    98 0000007C 7501                <1>     jne .fsiGotoNextBuffer
    99                              <1> .fsiExit:
   100 0000007E C3                  <1>     ret
   101                              <1> .fsiGotoNextBuffer:
   102 0000007F 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   103 00000082 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit
   104 00000089 74F3                <1>     je .fsiExit
   105 0000008B EBE6                <1>     jmp short .fsiCheckBuffer
   106                              <1> findDPB:
   107                              <1> ;Finds the DPB for a given drive
   108                              <1> ;Input:  dl = Drive number (0=A, 1=B etc...)
   109                              <1> ;Output: al = 00, rbx = Pointer to the DPB
   110                              <1> ;        al = -1, Failed, no DPB for device, rbx destroyed
   111 0000008D 488B1D(67000000)    <1>     mov rbx, qword [dpbHeadPtr]
   112                              <1> .fd1:
   113 00000094 30C0                <1>     xor al, al
   114 00000096 3813                <1>     cmp byte [rbx + dpb.bDriveNumber], dl
   115 00000098 740F                <1>     je .fd2
   116 0000009A 488B5B26            <1>     mov rbx, qword [rbx + dpb.qNextDPBPtr]
   117 0000009E B0FF                <1>     mov al, -1
   118 000000A0 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If rbx followed last item in list, no DPB exists for dl
   119 000000A7 75EB                <1>     jne .fd1
   120                              <1> .fd2:
   121 000000A9 C3                  <1>     ret
   122                              <1> ;-----------------------------------:
   123                              <1> ;       File System routines        :
   124                              <1> ;-----------------------------------:
   125                              <1> name2Clust:
   126                              <1> ;Converts a path + file name to a first cluster number
   127                              <1> clust2FATEntry:
   128                              <1> ;Converts a cluster number to a FAT entry
   129                              <1> ;Entry:  rsi points to the DPB for the transacting device
   130                              <1> ;        eax = Cluster number to look for
   131                              <1> ;Exit: eax = Sector on disk of FAT, edx = 1.5Word/Word/DWord in sector of entry
   132 000000AA 53                  <1>     push rbx
   133 000000AB 51                  <1>     push rcx
   134 000000AC 8B5E10              <1>     mov ebx, dword [rsi + dpb.dClusterCount]
   135 000000AF 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
   136 000000B5 7314                <1>     jae .fat32
   137 000000B7 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
   138 000000BD 7204                <1>     jb .fat12
   139                              <1> ;FAT16
   140 000000BF D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
   141 000000C1 EB0B                <1>     jmp short .common
   142                              <1> .fat12:
   143 000000C3 89C1                <1>     mov ecx, eax    ;ecx = eax
   144 000000C5 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
   145 000000C7 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
   146 000000C9 EB03                <1>     jmp short .common
   147                              <1> .fat32:
   148 000000CB C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
   149                              <1> .common:
   150                              <1> ;eax has the FAToffset
   151 000000CE 8A4E02              <1>     mov cl, byte [rsi + dpb.bBytesPerSectorShift]
   152 000000D1 BA01000000          <1>     mov edx, 1
   153 000000D6 D3E2                <1>     shl edx, cl    ;Turn edx to number of bytes per sector
   154 000000D8 89D1                <1>     mov ecx, edx
   155 000000DA 31D2                <1>     xor edx, edx    ;edx = 0
   156 000000DC F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
   157 000000DE 034605              <1>     add eax, dword [rsi + dpb.dFAToffset]   ;Add the offset to the first FAT
   158 000000E1 59                  <1>     pop rcx
   159 000000E2 5B                  <1>     pop rbx
   160 000000E3 C3                  <1>     ret
   161                              <1> readBuffer:
   162                              <1> ;This function will return a pointer to the desired data OR 
   163                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   164                              <1> ; buffer, returning a pointer to the sector buffer in rbx.
   165                              <1> ;Entry: rax = Sector to read
   166                              <1> ;        cl = Data type being read (FAT, DIR, Data) 
   167                              <1> ;       rsi = DPB of transacting drive
   168                              <1> ;Exit:  rbx = Pointer to buffer containing sector (not the buffer header)
   169                              <1> ;       All other registers as before
   170                              <1> ; If CF set, terminate the request.
   171 000000E4 52                  <1>     push rdx
   172 000000E5 51                  <1>     push rcx
   173 000000E6 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   174 000000E8 E87FFFFFFF          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   175 000000ED 4881FBFFFFFFFF      <1>     cmp rbx, -1
   176 000000F4 740B                <1>     je .rbReadNewSector
   177 000000F6 4881C320000000      <1>     add rbx, bufferHdr_size ;Have the pointer point to the data area
   178                              <1> .rbExit:
   179 000000FD F8                  <1>     clc
   180                              <1> .rbExitNoFlag:
   181 000000FE 59                  <1>     pop rcx
   182 000000FF 5A                  <1>     pop rdx
   183 00000100 C3                  <1>     ret
   184                              <1> .rbReadNewSector:
   185 00000101 E816FFFFFF          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rbx
   186 00000106 E810010000          <1>     call flushBuffer
   187 0000010B 72F1                <1>     jc .rbExitNoFlag    ;Exit in error
   188                              <1> ;rbx points to buffer that has been appropriately linked to the head of chain
   189 0000010D 885308              <1>     mov byte [rbx + bufferHdr.driveNumber], dl
   190 00000110 884B09              <1>     mov byte [rbx + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA
   191 00000113 4889430A            <1>     mov qword [rbx + bufferHdr.bufferLBA], rax
   192 00000117 80F902              <1>     cmp cl, fatBuffer
   193 0000011A B201                <1>     mov dl, 1   ;Default values if not fat buffer
   194 0000011C B900000000          <1>     mov ecx, 0  ;Ditto!
   195 00000121 7506                <1>     jne .rbNonFATbuffer
   196 00000123 8A5609              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   197 00000126 8B4E14              <1>     mov ecx, dword [rsi + dpb.dFATlength]
   198                              <1> .rbNonFATbuffer:
   199 00000129 885312              <1>     mov byte [rbx + bufferHdr.bufFATcopy], dl
   200 0000012C 894B13              <1>     mov dword [rbx + bufferHdr.bufFATsize], ecx
   201 0000012F 48897317            <1>     mov qword [rbx + bufferHdr.driveDPBPtr], rsi
   202 00000133 C6431F00            <1>     mov byte [rbx + bufferHdr.reserved], 0
   203 00000137 4881C320000000      <1>     add rbx, bufferHdr_size ;Point to the buffer now
   204 0000013E E802000000          <1>     call readSector ;Carry the flag from the request
   205 00000143 EBB9                <1>     jmp short .rbExitNoFlag
   206                              <1> 
   207                              <1> readSector:
   208                              <1> ;Reads a sector into a sector buffer
   209                              <1> ;Entry: rax = Sector Number
   210                              <1> ;       rbx = Pointer to buffer space
   211                              <1> ;        cl = Data type being read (FAT, DIR, Data) 
   212                              <1> ;       rsi = DPB of transacting drive
   213                              <1> ;Exit:  CF=NC : Success
   214                              <1> ;       CF=CY : Fail, terminate the request
   215                              <1> ;First make request to device driver
   216 00000145 50                  <1>     push rax
   217 00000146 51                  <1>     push rcx
   218 00000147 52                  <1>     push rdx
   219 00000148 55                  <1>     push rbp
   220                              <1> ;Build a request block in diskReqHdr
   221 00000149 4889C5              <1>     mov rbp, rax    ;Move sector number into rbp
   222                              <1> .rsRequest0:
   223 0000014C B503                <1>     mov ch, 3  ;Repeat attempt counter
   224                              <1> .rsRequest1:
   225 0000014E 66C705(38000000)00- <1>     mov word [diskReqHdr + ioReqPkt.status], 0
   225 00000156 00                  <1>
   226 00000157 48C705(3A000000)00- <1>     mov qword [diskReqHdr + ioReqPkt.devptr], 0
   226 0000015F 000000              <1>
   227 00000162 C705(4B000000)0100- <1>     mov dword [diskReqHdr + ioReqPkt.tfrlen], 1 ;One sector
   227 0000016A 0000                <1>
   228 0000016C C605(35000000)2A    <1>     mov byte [diskReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   229 00000173 C605(37000000)04    <1>     mov byte [diskReqHdr + ioReqPkt.cmdcde], drvREAD
   230 0000017A 48892D(4F000000)    <1>     mov qword [diskReqHdr + ioReqPkt.strtsc], rbp   ;rbp has sector number
   231 00000181 48891D(43000000)    <1>     mov qword [diskReqHdr + ioReqPkt.bufptr], rbx   ;rbx points to buffer
   232 00000188 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   233 0000018B 8805(36000000)      <1>     mov byte [diskReqHdr + ioReqPkt.unitnm], al
   234 00000191 8A4624              <1>     mov al, byte [rsi + dpb.bMediaDescriptor]
   235 00000194 8805(42000000)      <1>     mov byte [diskReqHdr + ioReqPkt.medesc], al
   236 0000019A 488B561C            <1>     mov rdx, qword [rsi + dpb.qDriverHeaderPtr] ;Get pointer to driver header
   237                              <1> 
   238 0000019E FF520A              <1>     call [rdx + drvHdr.strPtr]
   239 000001A1 FF5212              <1>     call [rdx + drvHdr.intPtr]
   240 000001A4 66F705(38000000)00- <1>     test word [diskReqHdr + ioReqPkt.status], 8000h  ;Test error bit
   240 000001AC 80                  <1>
   241 000001AD 7506                <1>     jnz .rsFail
   242                              <1> .rsExit:
   243 000001AF F8                  <1>     clc
   244                              <1> .rsExitBad:
   245 000001B0 5D                  <1>     pop rbp
   246 000001B1 5A                  <1>     pop rdx
   247 000001B2 59                  <1>     pop rcx
   248 000001B3 58                  <1>     pop rax
   249 000001B4 C3                  <1>     ret
   250                              <1> .rsFail:
   251                              <1> ;Enter here only if the request failed
   252 000001B5 FECD                <1>     dec ch
   253 000001B7 7595                <1>     jnz .rsRequest1 ;Try the request again!
   254                              <1> ;Request failed thrice, critical error call
   255 000001B9 53                  <1>     push rbx    ;Save the pointer to the data buffer area
   256 000001BA 6631C0              <1>     xor ax, ax
   257 000001BD 66BB0100            <1>     mov bx, 1
   258 000001C1 80F901              <1>     cmp cl, dosBuffer
   259 000001C4 660F44C3            <1>     cmove ax, bx
   260 000001C8 66FFC3              <1>     inc bx
   261 000001CB 80F902              <1>     cmp cl, fatBuffer
   262 000001CE 660F44C3            <1>     cmove ax, bx
   263 000001D2 66FFC3              <1>     inc bx
   264 000001D5 80F904              <1>     cmp cl, dirBuffer
   265 000001D8 660F44C3            <1>     cmove ax, bx
   266 000001DC 66FFC3              <1>     inc bx
   267 000001DF 80F908              <1>     cmp cl, dataBuffer
   268 000001E2 660F44C3            <1>     cmove ax, bx
   269 000001E6 5B                  <1>     pop rbx
   270 000001E7 66D1E0              <1>     shl ax, 1   ;Shift number into bits 1-2 and clear bit 0 (read operation)
   271 000001EA 88C4                <1>     mov ah, al  ;Move into ah
   272 000001EC 80CC30              <1>     or ah, 30h  ;Set Retry and Ignore bits and bit 7 = 0 (msd device)
   273 000001EF 8A06                <1>     mov al, byte [rsi + dpb.bDriveNumber]
   274 000001F1 57                  <1>     push rdi
   275 000001F2 56                  <1>     push rsi
   276 000001F3 668B3D(38000000)    <1>     mov di, word [diskReqHdr + ioReqPkt.status]
   277 000001FA 6681E7FF00          <1>     and di, 00FFh   ;Mask off upper byte
   278 000001FF 4889D6              <1>     mov rsi, rdx    ;Get ptr to device driver in rsi
   279 00000202 E8FBFDFFFF          <1>     call criticalDOSError
   280 00000207 5E                  <1>     pop rsi
   281 00000208 5F                  <1>     pop rdi
   282                              <1> 
   283 00000209 84C0                <1>     test al, al ;Ignore
   284 0000020B 74A2                <1>     jz .rsExit  ;rbx contains the buffer to the data area
   285 0000020D A801                <1>     test al, 1
   286 0000020F 0F8537FFFFFF        <1>     jnz .rsRequest0 ;Retry
   287 00000215 F9                  <1>     stc
   288 00000216 E995FFFFFF          <1>     jmp .rsExitBad  ;Abort
   289                              <1> flushBuffer:
   290                              <1> ;Flushes the data in a sector buffer to disk!
   291                              <1> ;Entry: rbx = Pointer to buffer header for this buffer
   292                              <1> ;Exit:  CF=NC : Success
   293                              <1> ;       CF=CY : Fail, terminate the request
   294                              <1> ;First make request to device driver
   295 0000021B 50                  <1>     push rax
   296 0000021C 51                  <1>     push rcx
   297 0000021D 52                  <1>     push rdx
   298 0000021E 55                  <1>     push rbp
   299 0000021F 56                  <1>     push rsi
   300 00000220 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   301 00000224 0F8494000000        <1>     jz .fbExit  ;Skip write to disk if data not modified
   302                              <1> ;Build a request block in diskReqHdr
   303 0000022A 488B7317            <1>     mov rsi, qword [rbx + bufferHdr.driveDPBPtr]    ;Get dpbptr in rsi
   304                              <1> .fbRequest0:
   305 0000022E B503                <1>     mov ch, 3  ;Repeat attempt counter
   306                              <1> .fbRequest1:
   307 00000230 66C705(38000000)00- <1>     mov word [diskReqHdr + ioReqPkt.status], 0
   307 00000238 00                  <1>
   308 00000239 48C705(3A000000)00- <1>     mov qword [diskReqHdr + ioReqPkt.devptr], 0
   308 00000241 000000              <1>
   309 00000244 C705(4B000000)0100- <1>     mov dword [diskReqHdr + ioReqPkt.tfrlen], 1 ;One sector
   309 0000024C 0000                <1>
   310 0000024E C605(35000000)2A    <1>     mov byte [diskReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   311 00000255 C605(37000000)08    <1>     mov byte [diskReqHdr + ioReqPkt.cmdcde], drvWRITE
   312 0000025C 8A05(F3000000)      <1>     mov al, byte [verifyFlag]
   313 00000262 2401                <1>     and al, 1   ;Only get the last bit
   314 00000264 0005(F3000000)      <1>     add byte [verifyFlag], al   ;Change write into write/verify if needed
   315 0000026A 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   316 0000026E 488905(4F000000)    <1>     mov qword [diskReqHdr + ioReqPkt.strtsc], rax
   317                              <1> 
   318 00000275 488D4320            <1>     lea rax, qword [rbx + bufferHdr_size]
   319 00000279 488905(43000000)    <1>     mov qword [diskReqHdr + ioReqPkt.bufptr], rax   ;rbx points to buffer
   320                              <1> 
   321 00000280 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   322 00000283 8805(36000000)      <1>     mov byte [diskReqHdr + ioReqPkt.unitnm], al
   323 00000289 8A4624              <1>     mov al, byte [rsi + dpb.bMediaDescriptor]
   324 0000028C 8805(42000000)      <1>     mov byte [diskReqHdr + ioReqPkt.medesc], al
   325 00000292 488B561C            <1>     mov rdx, qword [rsi + dpb.qDriverHeaderPtr] ;Get pointer to driver header
   326                              <1> 
   327 00000296 FF520A              <1>     call [rdx + drvHdr.strPtr]
   328 00000299 FF5212              <1>     call [rdx + drvHdr.intPtr]
   329 0000029C 66F705(38000000)00- <1>     test word [diskReqHdr + ioReqPkt.status], 8000h  ;Test error bit
   329 000002A4 80                  <1>
   330 000002A5 751E                <1>     jnz .fbFail
   331                              <1> ;Now check if the buffer was a FAT, to write additional copies
   332 000002A7 F6430902            <1>     test byte [rbx + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   333 000002AB 7411                <1>     jz .fbExit  ;If not, exit
   334 000002AD FE4B12              <1>     dec byte [rbx + bufferHdr.bufFATcopy]
   335 000002B0 740C                <1>     jz .fbExit  ;Once this goes to 0, stop writing FAT copies
   336 000002B2 8B4313              <1>     mov eax, dword [rbx + bufferHdr.bufFATsize]
   337 000002B5 4801430A            <1>     add qword [rbx + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   338 000002B9 E970FFFFFF          <1>     jmp .fbRequest0 ;Make another request
   339                              <1> .fbExit:
   340 000002BE F8                  <1>     clc
   341                              <1> .fbExitBad:
   342 000002BF 5E                  <1>     pop rsi
   343 000002C0 5D                  <1>     pop rbp
   344 000002C1 5A                  <1>     pop rdx
   345 000002C2 59                  <1>     pop rcx
   346 000002C3 58                  <1>     pop rax
   347 000002C4 C3                  <1>     ret
   348                              <1> .fbFail:
   349                              <1> ;Enter here only if the request failed
   350 000002C5 FECD                <1>     dec ch
   351 000002C7 0F8563FFFFFF        <1>     jnz .fbRequest1 ;Try the request again!
   352                              <1> ;Request failed thrice, critical error call
   353 000002CD 53                  <1>     push rbx    ;Save the pointer to the data buffer area
   354 000002CE 6631C0              <1>     xor ax, ax
   355 000002D1 66BB0100            <1>     mov bx, 1
   356 000002D5 80F901              <1>     cmp cl, dosBuffer
   357 000002D8 660F44C3            <1>     cmove ax, bx
   358 000002DC 66FFC3              <1>     inc bx
   359 000002DF 80F902              <1>     cmp cl, fatBuffer
   360 000002E2 660F44C3            <1>     cmove ax, bx
   361 000002E6 66FFC3              <1>     inc bx
   362 000002E9 80F904              <1>     cmp cl, dirBuffer
   363 000002EC 660F44C3            <1>     cmove ax, bx
   364 000002F0 66FFC3              <1>     inc bx
   365 000002F3 80F908              <1>     cmp cl, dataBuffer
   366 000002F6 660F44C3            <1>     cmove ax, bx
   367 000002FA 5B                  <1>     pop rbx
   368 000002FB 66D1E0              <1>     shl ax, 1   ;Shift number into bits 1-2
   369 000002FE 88C4                <1>     mov ah, al  ;Move into ah
   370 00000300 80CC31              <1>     or ah, 31h  ;Set Retry and Ignore, bit 7 = 0 (msd device) and bit 0 (write)
   371 00000303 8A06                <1>     mov al, byte [rsi + dpb.bDriveNumber]
   372 00000305 57                  <1>     push rdi
   373 00000306 56                  <1>     push rsi
   374 00000307 668B3D(38000000)    <1>     mov di, word [diskReqHdr + ioReqPkt.status]
   375 0000030E 6681E7FF00          <1>     and di, 00FFh   ;Mask off upper byte
   376 00000313 4889D6              <1>     mov rsi, rdx    ;Get ptr to device driver in rsi
   377 00000316 E8E7FCFFFF          <1>     call criticalDOSError
   378 0000031B 5E                  <1>     pop rsi
   379 0000031C 5F                  <1>     pop rdi
   380                              <1> 
   381 0000031D 84C0                <1>     test al, al ;Ignore
   382 0000031F 749D                <1>     jz .fbExit  ;rbx contains the buffer to the data area
   383 00000321 A801                <1>     test al, 1
   384 00000323 0F8505FFFFFF        <1>     jnz .fbRequest0 ;Retry
   385 00000329 F9                  <1>     stc
   386 0000032A E990FFFFFF          <1>     jmp .fbExitBad  ;Abort
   387                              <1> ;-----------------------------------:
   388                              <1> ;        Interrupt routines         :
   389                              <1> ;-----------------------------------:
   390                              <1> terminateProcess:   ;Int 40h
   391                              <1> 
   392                              <1> functionDispatch:   ;Int 41h Main function dispatcher
   393                              <1> ;ah = Function number, all other registers have various meanings
   394 0000032F FA                  <1>     cli ;Halt external interrupts
   395 00000330 FC                  <1>     cld ;Ensure all string ops occur in the right direction
   396 00000331 80FC6A              <1>     cmp ah, dispatchTableL/8    ;Number of functions
   397 00000334 0F871D010000        <1>     ja .fdExitBad
   398                              <1>     ;Cherry pick functions
   399 0000033A 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
   400 0000033D 722C                <1>     jb .fsbegin   ;If below skip these checks
   401 0000033F 0F84B9020000        <1>     je .ctrlBreakCheck
   402 00000345 80FC64              <1>     cmp ah, 64h
   403 00000348 0F8418040000        <1>     je .setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
   404 0000034E 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
   405 00000350 80FC51              <1>     cmp ah, 51h
   406 00000353 0F84E8020000        <1>     je .getCurrProcessID    ;This and below are exactly the same
   407 00000359 80FC62              <1>     cmp ah, 62h
   408 0000035C 0F84F1030000        <1>     je .getPSPaddr          ;Calls the above function
   409 00000362 80FC50              <1>     cmp ah, 50h
   410 00000365 0F84CE020000        <1>     je .setCurrProcessID
   411                              <1> .fsbegin:
   412                              <1>     pushDOS ;Push the usual prologue registers
   212 0000036B 4151                <2>  push r9
   213 0000036D 4150                <2>  push r8
   214 0000036F 55                  <2>  push rbp
   215 00000370 57                  <2>  push rdi
   216 00000371 56                  <2>  push rsi
   217 00000372 52                  <2>  push rdx
   218 00000373 51                  <2>  push rcx
   219 00000374 53                  <2>  push rbx
   220 00000375 50                  <2>  push rax
   413 00000376 488B05(08010000)    <1>     mov rax, qword [oldRSP]
   414 0000037D 488905(00010000)    <1>     mov qword [oldoldRSP], rax
   415 00000384 FE05(C8000000)      <1>     inc byte [inDOS]    ;Increment in DOS flag
   416 0000038A 488925(08010000)    <1>     mov qword [oldRSP], rsp
   417                              <1> ;Here, we want to save oldRSP in the callers PSP
   418 00000391 803D(C8000000)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
   419 00000398 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
   420 0000039A 488B05(D7000000)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
   421 000003A1 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
   422                              <1> .fsb1:
   423 000003A5 58                  <1>     pop rax     ;Get old rax back
   424 000003A6 50                  <1>     push rax    ;and push it back onto the stack
   425 000003A7 488D25(4C060000)    <1>     lea rsp, critStakTop
   426 000003AE FB                  <1>     sti         ;Reenable interrupts
   427                              <1> 
   428 000003AF C605(FF000000)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
   429                              <1> 
   430 000003B6 48891D(10010000)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
   431 000003BD 0FB6DC              <1>     movzx ebx, ah   ;Move the function number bl zero extended to rbx
   432 000003C0 C1E303              <1>     shl ebx, 3      ;Multiply the function number by 8 for offset into table
   433 000003C3 50                  <1>     push rax        ;Push rax onto the stack
   434 000003C4 488D059C030000      <1>     lea rax, qword [.dispatchTable]
   435 000003CB 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   436 000003CE 58                  <1>     pop rax
   437 000003CF 488B1B              <1>     mov rbx, qword [rbx]    ;Get the address from the dispatch table
   438                              <1> 
   439 000003D2 84E4                <1>     test ah, ah     ;Simple Terminate function?
   440 000003D4 741C                <1>     jz .fddiskOp
   441 000003D6 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   442 000003D9 7443                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   443 000003DB 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   444 000003DE 7712                <1>     ja .fddiskOp
   445                              <1> ;Char operations here
   446 000003E0 F605(C7000000)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   447 000003E7 7535                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   448 000003E9 488D25(8C0C0000)    <1>     lea rsp, IOStakTop          ;Otherwise, switch to IO stack
   449 000003F0 EB2C                <1>     jmp short .fdGoToFunction
   450                              <1> .fddiskOp:
   451                              <1>     ;Disk operations go here
   452                              <1>     ;Clear up error info
   453 000003F2 C605(CA000000)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   454 000003F9 C605(C7000000)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   455 00000400 C605(C9000000)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   456                              <1> 
   457 00000407 C605(FF000000)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   458 0000040E 488D25(CC120000)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   459 00000415 F605(F2000000)FF    <1>     test byte [breakFlag], -1   ;Test if set
   460 0000041C 7400                <1>     jz .fdGoToFunction
   461                              <1> ; HANDLE CTRL+BREAK HERE!
   462                              <1> .fdGoToFunction:
   463 0000041E 48871D(10010000)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   464                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   465                              <1>     ;
   466                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   467                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   468                              <1>     ;
   469 00000425 FF15(10010000)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   470                              <1> .fdExit:
   471 0000042B FA                  <1>     cli     ;Redisable interrupts
   472                              <1>     ;???
   473 0000042C FE0D(C8000000)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   474 00000432 488B25(08010000)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   475 00000439 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   476 0000043C 488B05(00010000)    <1>     mov rax, qword [oldoldRSP]
   477 00000443 488905(08010000)    <1>     mov qword [oldRSP], rax
   478                              <1>     popDOS  ;Pop the frame
   224 0000044A 58                  <2>  pop rax
   225 0000044B 5B                  <2>  pop rbx
   226 0000044C 59                  <2>  pop rcx
   227 0000044D 5A                  <2>  pop rdx
   228 0000044E 5E                  <2>  pop rsi
   229 0000044F 5F                  <2>  pop rdi
   230 00000450 5D                  <2>  pop rbp
   231 00000451 4158                <2>  pop r8
   232 00000453 4159                <2>  pop r9
   479 00000455 48CF                <1>     iretq
   480                              <1> .fdExitBad:
   481 00000457 B400                <1>     mov ah, 0
   482 00000459 48CF                <1>     iretq
   483                              <1> .simpleTerminate:     ;ah = 00h
   484 0000045B C3                  <1>     ret
   485                              <1> .stdinReadEcho:     ;ah = 01h
   486                              <1> ;Return char that has been read and echoed in al
   487 0000045C 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
   488 00000463 488D0566000000      <1>     lea rax, .stdinReadEchoBuffer
   489 0000046A C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   490 0000046D C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
   491 00000471 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   492 00000477 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   493 0000047B C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
   494 00000482 FF1504090000        <1>     call qword [conHdr + drvHdr.strPtr]
   495 00000488 FF1506090000        <1>     call qword [conHdr + drvHdr.intPtr]
   496 0000048E 803D3B00000000      <1>     cmp byte [.stdinReadEchoBuffer], 00h
   497 00000495 7432                <1>     jz .stdireexit
   498 00000497 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
   499 0000049E 488D052B000000      <1>     lea rax, .stdinReadEchoBuffer
   500 000004A5 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   501 000004A8 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
   502 000004AC 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   503 000004B2 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   504 000004B6 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
   505 000004BD FF15C9080000        <1>     call qword [conHdr + drvHdr.strPtr]
   506 000004C3 FF15CB080000        <1>     call qword [conHdr + drvHdr.intPtr]
   507                              <1> .stdireexit:
   508 000004C9 8A0501000000        <1>     mov al, byte [.stdinReadEchoBuffer]
   509 000004CF C3                  <1>     ret
   510 000004D0 00                  <1> .stdinReadEchoBuffer    db 0
   511                              <1> .stdoutWrite:       ;ah = 02h
   512                              <1> ;Bspace is regular cursor left, does not insert a blank
   513 000004D1 881533000000        <1>     mov byte [.stdoutWriteBuffer], dl
   514 000004D7 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
   515 000004DE 488D1525000000      <1>     lea rdx, .stdoutWriteBuffer
   516 000004E5 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   517 000004E8 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
   518 000004EC 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   519 000004F2 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   520 000004F6 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
   521 000004FD FF1589080000        <1>     call qword [conHdr + drvHdr.strPtr]
   522 00000503 FF158B080000        <1>     call qword [conHdr + drvHdr.intPtr]
   523 00000509 C3                  <1>     ret
   524 0000050A 00                  <1> .stdoutWriteBuffer db 0
   525                              <1> .stdauxRead:        ;ah = 03h
   526                              <1> .stdauxWrite:       ;ah = 04h
   527                              <1> .stdprnWrite:       ;ah = 05h
   528                              <1> .directCONIO:       ;ah = 06h
   529                              <1> .waitDirectInNoEcho:;ah = 07h
   530                              <1> ;Return char in al
   531 0000050B 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
   532 00000512 488D052B000000      <1>     lea rax, .function7buffer
   533 00000519 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   534 0000051C C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
   535 00000520 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   536 00000526 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   537 0000052A C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
   538 00000531 FF1555080000        <1>     call qword [conHdr + drvHdr.strPtr]
   539 00000537 FF1557080000        <1>     call qword [conHdr + drvHdr.intPtr]
   540 0000053D 8A0501000000        <1>     mov al, byte [.function7buffer]
   541 00000543 C3                  <1>     ret
   542 00000544 00                  <1> .function7buffer    db 0
   543                              <1> .waitStdinNoEcho:   ;ah = 08h
   544 00000545 C3                  <1>     ret
   545                              <1> .printString:       ;ah = 09h
   546 00000546 31C9                <1>     xor ecx, ecx    ;Clear char counter
   547 00000548 B824000000          <1>     mov eax, "$"    ;Terminating char
   548 0000054D 4889D7              <1>     mov rdi, rdx    ;Set up for scasb
   549                              <1> .ps0:   ;Search for $ to get count of chars
   550 00000550 AE                  <1>     scasb
   551 00000551 7404                <1>     je .ps1
   552 00000553 FFC1                <1>     inc ecx
   553 00000555 EBF9                <1>     jmp short .ps0
   554                              <1> .ps1:   ;Use handle 
   555 00000557 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
   556 0000055E C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   557 00000561 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
   558 00000565 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   559 0000056B 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   560 0000056F 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   561 00000572 FF1514080000        <1>     call qword [conHdr + drvHdr.strPtr]
   562 00000578 FF1516080000        <1>     call qword [conHdr + drvHdr.intPtr]
   563                              <1> 
   564 0000057E 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   565 00000585 8A03                <1>     mov al, byte [rbx+callerFrame.rax]      ;Gets al to preserve it
   566 00000587 C3                  <1>     ret
   567                              <1> .buffStdinInput:    ;ah = 0Ah
   568                              <1> .checkStdinStatus:  ;ah = 0Bh
   569                              <1> .clearbuffDoFunc:   ;ah = 0Ch
   570                              <1> .diskReset:         ;ah = 0Dh
   571                              <1> .selectDisk:        ;ah = 0Eh
   572                              <1> .openFileFCB:       ;ah = 0Fh
   573                              <1> .closeFileFCB:      ;ah = 10h
   574                              <1> .findFirstFileFCB:  ;ah = 11h
   575                              <1> .findNextFileFCB:   ;ah = 12h
   576                              <1> .deleteFileFCB:     ;ah = 13h
   577                              <1> .sequentialReadFCB: ;ah = 14h
   578                              <1> .sequentialWriteFCB:;ah = 15h
   579                              <1> .createFileFCB:     ;ah = 16h
   580                              <1> .renameFileFCB:     ;ah = 17h
   581                              <1>                     ;ah = 18h unused
   582                              <1> .getCurrentDisk:    ;ah = 19h, get current default drive
   583 00000588 8A05(F1000000)      <1>     mov al, byte [currentDrv]
   584 0000058E C3                  <1>     ret
   585                              <1> .setDTA:            ;ah = 1Ah
   586                              <1> ;Called with:
   587                              <1> ;   rdx = Pointer to the new default DTA
   588 0000058F 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   589 00000596 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
   590 0000059A 488915(CF000000)    <1>     mov qword [currentDTA], rdx
   591 000005A1 C3                  <1>     ret
   592                              <1> .FATinfoDefault:    ;ah = 1Bh
   593                              <1> .FatinfoDevice:     ;ah = 1Ch
   594                              <1>                     ;ah = 1Dh unused
   595                              <1>                     ;ah = 1Eh unused
   596                              <1> .getCurrentDPBptr:  ;ah = 1Fh, simply calls int 41h ah = 32h with dl = 0
   597                              <1>                     ;ah = 20h unused
   598                              <1> .randomReadFCB:     ;ah = 21h
   599                              <1> .randomWriteFCB:    ;ah = 22h
   600                              <1> .getFileSizeFCB:    ;ah = 23h
   601                              <1> .setRelRecordFCB:   ;ah = 24h
   602                              <1> .setIntVector:      ;ah = 25h
   603                              <1> ;Called with:
   604                              <1> ;   rdx = Pointer to interrupt handler
   605                              <1> ;   al = Interrupt number
   606 000005A2 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   607 000005A4 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   608                              <1> ;First call to get default BIOS segement selector and attribute word
   609 000005AA 88C3                <1>     mov bl, al  ;Set interrupt number 
   610 000005AC B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   611 000005B1 CD35                <1>     int 35h
   612 000005B3 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   613 000005B5 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   614                              <1> ;dx preserves the attribute word
   615 000005B7 488B2D(08010000)    <1>     mov rbp, qword [oldRSP]
   616 000005BE 488B5D18            <1>     mov rbx, qword [rbp + callerFrame.rdx]  ;Pointer passed in rdx
   617 000005C2 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   618 000005C7 CD35                <1>     int 35h
   619                              <1> 
   620 000005C9 8A4500              <1>     mov al, byte [rbp + callerFrame.rax]    ;Preserve low byte of rax
   621 000005CC C3                  <1>     ret
   622                              <1> .createNewPSP:      ;ah = 26h
   623                              <1> .randBlockReadFCB:  ;ah = 27h
   624                              <1> .randBlockWriteFCB: ;ah = 28h
   625                              <1> .parseFilenameFCB:  ;ah = 29h
   626                              <1> .getDate:           ;ah = 2Ah
   627                              <1> .setDate:           ;ah = 2Bh
   628                              <1> .getTime:           ;ah = 2Ch
   629                              <1> .setTime:           ;ah = 2Dh
   630                              <1> .setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   631 000005CD 8805(F3000000)      <1>     mov byte [verifyFlag], al
   632 000005D3 C3                  <1>     ret
   633                              <1> .getDTA:            ;ah = 2Fh
   634 000005D4 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   635 000005DB 488B1D(CF000000)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
   636 000005E2 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
   637 000005E6 C3                  <1>     ret
   638                              <1> .getDOSversion:     ;ah = 30h
   639 000005E7 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   640 000005EE 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   641 000005F0 886209              <1>     mov byte [rdx + callerFrame.rbx + 1], ah    ;Clear bh 
   642 000005F3 668B0506FAFFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   643 000005FA 668902              <1>     mov word [rdx + callerFrame.rax], ax    ;Save ax
   644 000005FD C3                  <1>     ret
   645                              <1> .terminateStayRes:  ;ah = 31h
   646                              <1> .getDeviceDPBptr:   ;ah = 32h
   647                              <1> .ctrlBreakCheck:    ;ah = 33h
   648 000005FE 84C0                <1>     test al, al
   649 00000600 7406                <1>     jz .cbcget  ;Get the state
   650 00000602 8815(F2000000)      <1>     mov byte [breakFlag], dl    ;Set the state
   651                              <1> .cbcget:
   652 00000608 8A15(F2000000)      <1>     mov dl, byte [breakFlag]    ;Get the state
   653 0000060E C3                  <1>     ret
   654                              <1> .getInDOSflagPtr:   ;ah = 34h
   655 0000060F 488D15(C8000000)    <1>     lea rdx, inDOS
   656 00000616 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   657 0000061D 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx  ;save ptr in rbx
   658 00000621 C3                  <1>     ret
   659                              <1> .getIntVector:      ;ah = 35h
   660                              <1> ;Called with:
   661                              <1> ;   al = Interrupt Number
   662                              <1> ;Returns:
   663                              <1> ;   rbx = Pointer to interrupt handler
   664 00000622 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   665 00000624 B807F00000          <1>     mov eax, 0F007h
   666 00000629 CD35                <1>     int 35h
   667 0000062B 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   668 00000632 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx  ;Save pointer in rbx
   669 00000636 8A02                <1>     mov al, byte [rdx + callerFrame.rax]    ;Get the low byte in al
   670 00000638 C3                  <1>     ret
   671                              <1> .getDiskFreeSpace:  ;ah = 36h
   672                              <1> .getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
   673                              <1> .getsetCountryInfo: ;ah = 38h, localisation info
   674                              <1> .makeDIR:           ;ah = 39h
   675                              <1> .removeDIR:         ;ah = 3Ah
   676                              <1> .changeCurrentDIR:  ;ah = 3Bh, changes directory for current drive
   677                              <1> .createFileHdl:     ;ah = 3Ch, handle function
   678                              <1> .openFileHdl:       ;ah = 3Dh, handle function
   679                              <1> .closeFileHdl:      ;ah = 3Eh, handle function
   680                              <1> .readFileHdl:       ;ah = 3Fh, handle function
   681                              <1> .writeFileHdl:      ;ah = 40h, handle function
   682                              <1> .deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   683                              <1> .movFileReadPtr:    ;ah = 42h, handle function, LSEEK
   684                              <1> .changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   685                              <1> .ioctrl:            ;ah = 44h, handle function
   686                              <1> .duplicateHandle:   ;ah = 45h, handle function
   687                              <1> .forceDuplicateHdl: ;ah = 46h, handle function
   688                              <1> .getCurrentDIR:     ;ah = 47h
   689                              <1> .allocateMemory:    ;ah = 48h
   690                              <1> .freeMemory:        ;ah = 49h
   691                              <1> .reallocMemory:     ;ah = 4Ah
   692                              <1> .loadExecChild:     ;ah = 4Bh, EXEC
   693                              <1> .terminateClean:    ;ah = 4Ch, EXIT
   694                              <1> .getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   695                              <1> .findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   696                              <1> .findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   697                              <1> .setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   698 00000639 48891D(D7000000)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   699 00000640 C3                  <1>     ret
   700                              <1> .getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   701 00000641 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   702 00000648 488B15(D7000000)    <1>     mov rdx, qword [currentPSP]
   703 0000064F 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx   ;Set the caller pointer
   704 00000653 C3                  <1>     ret 
   705                              <1> .getSysVarsPtr:     ;ah = 52h
   706 00000654 488D15(67000000)    <1>     lea rdx, sysVarsPtr
   707 0000065B 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   708 00000662 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx
   709 00000666 C3                  <1>     ret
   710                              <1> .createDPB:         ;ah = 53h, generates a DPB from a given BPB
   711                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   712                              <1> ;This is done so that the other fields of the DPB can be recycled
   713                              <1> ;Input: rsi = ptr to the BPB
   714                              <1> ;       rbp = ptr to the DPB
   715                              <1> ;bMediaDescriptor
   716 00000667 8A4615              <1>     mov al, byte [rsi + bpb.media]
   717 0000066A 884524              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   718                              <1> ;bAccessFlag
   719 0000066D C64525FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Not accessed
   720                              <1> ;dFirstFreeCluster
   721 00000671 C7452E00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   722                              <1> ;dNumberOfFreeClusters
   723 00000678 C74532FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   724                              <1> ;bBytesPerSectorShift
   725 0000067F 668B460B            <1>     mov ax, word [rsi + bpb.bytsPerSec]
   726 00000683 B107                <1>     mov cl, 7   ;Start with 128 byte sectors (not supported, min 512)
   727 00000685 66D3E8              <1>     shr ax, cl  ;Shift down
   728                              <1> .cd0:
   729 00000688 66D1E8              <1>     shr ax, 1
   730 0000068B 7404                <1>     jz .cd1
   731 0000068D FEC1                <1>     inc cl
   732 0000068F EBF7                <1>     jmp short .cd0
   733                              <1> .cd1:
   734 00000691 884D02              <1>     mov byte [rbp + dpb.bBytesPerSectorShift], cl
   735                              <1> ;bMaxSectorInCluster
   736 00000694 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   737 00000697 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   738 00000699 884503              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   739                              <1> ;bSectorsPerClusterShift
   740 0000069C FEC0                <1>     inc al
   741 0000069E 30C9                <1>     xor cl, cl
   742                              <1> .cd2:
   743 000006A0 D0E8                <1>     shr al, 1
   744 000006A2 7404                <1>     jz .cd3
   745 000006A4 FEC1                <1>     inc cl
   746 000006A6 EBF8                <1>     jmp short .cd2
   747                              <1> .cd3:
   748 000006A8 884D04              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   749                              <1> ;dFAToffset, number of hidden sectors + number of reserved sectors
   750 000006AB 0FB7460E            <1>     movzx eax, word [rsi + bpb.revdSecCnt]
   751 000006AF 03461C              <1>     add eax, dword [rsi + bpb.hiddSec] 
   752 000006B2 894505              <1>     mov dword [rbp + dpb.dFAToffset], eax
   753                              <1> ;bNumberOfFATs
   754 000006B5 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   755 000006B8 884509              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   756                              <1> ;wNumberRootDirSectors
   757 000006BB 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   758 000006BF C1E005              <1>     shl eax, 5  ;Multiply by 32
   759 000006C2 0FB74E0B            <1>     movzx ecx, word [rsi + bpb.bytsPerSec]
   760 000006C6 FFC9                <1>     dec ecx
   761 000006C8 01C8                <1>     add eax, ecx
   762 000006CA 31D2                <1>     xor edx, edx    ;Clear for divide
   763 000006CC F7F1                <1>     div ecx ;Divide 0:eax by ecx, (e)ax has number of clusters
   764 000006CE 6689450A            <1>     mov word [rbp + dpb.wNumberRootDirSectors], ax  ;0 for FAT32
   765                              <1> ;dFATlength, get the FAT length
   766 000006D2 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   767 000006D6 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   768 000006D9 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   769 000006DB 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   770 000006DE 894514              <1>     mov dword [rbp + dpb.dFATlength], eax
   771                              <1> ;Complex cases below...
   772                              <1> ;dClusterHeapOffset, start sector of the data area
   773 000006E1 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   774 000006E5 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   775 000006E8 85C0                <1>     test eax, eax
   776 000006EA 0F44C3              <1>     cmovz eax, ebx
   777                              <1> ;eax = FATsz
   778 000006ED 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   779 000006F1 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   780 000006F4 85DB                <1>     test ebx, ebx
   781 000006F6 0F44D9              <1>     cmovz ebx, ecx 
   782                              <1> ;ebx = TotSec
   783 000006F9 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   784 000006FC 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   785                              <1> .cd4:
   786 000006FE 01C2                <1>     add edx, eax
   787 00000700 FEC9                <1>     dec cl
   788 00000702 75FA                <1>     jnz .cd4
   789 00000704 89D0                <1>     mov eax, edx    ;Store product in eax
   790 00000706 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   791 0000070A 01D0                <1>     add eax, edx
   792 0000070C 0FB7550A            <1>     movzx edx, word [rbp + dpb.wNumberRootDirSectors]
   793 00000710 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   794                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   795                              <1>     ;aka eax = Start sector of the data area in volume
   796 00000712 89450C              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   797                              <1> ;dClusterCount
   798 00000715 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   799 00000717 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   800 00000719 31D2                <1>     xor edx, edx
   801 0000071B BB01000000          <1>     mov ebx, 1
   802 00000720 8A4D04              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   803 00000723 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   804 00000725 F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   805 00000727 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   806 00000729 894510              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   807                              <1> ;dFirstUnitOfRootDir
   808 0000072C 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   809 00000731 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   810 00000734 7709                <1>     ja .cd5
   811                              <1>     ;Else, we need to find the first sector of the root directory
   812                              <1>     ;Get the start sector of data area in volume 
   813                              <1>     ; and sub the number of sectors in the root directory
   814 00000736 8B450C              <1>     mov eax, dword [rbp + dpb.dClusterHeapOffset]
   815 00000739 0FB75D0A            <1>     movzx ebx, word [rbp + dpb.wNumberRootDirSectors]
   816 0000073D 29D8                <1>     sub eax, ebx    ;eax now has start sector of root dir
   817                              <1> .cd5:
   818 0000073F 894518              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   819                              <1> ;Exit epilogue
   820 00000742 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   821 00000749 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   822 0000074B C3                  <1>     ret
   823                              <1> .getVerifySetting:  ;ah = 54h
   824 0000074C 8A05(F3000000)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   825 00000752 C3                  <1>     ret
   826                              <1> .createPSP:         ;ah = 55h, creates a PSP for a program
   827                              <1> .renameFile:        ;ah = 56h
   828                              <1> .getSetFileDateTime:;ah = 57h
   829                              <1> .getsetMallocStrat: ;ah = 58h
   830                              <1> .getExtendedError:  ;ah = 59h
   831                              <1> .createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   832                              <1> .createNewFile:     ;ah = 5Bh
   833                              <1> .lockUnlockFile:    ;ah = 5Ch
   834                              <1> .getCritErrorInfo:  ;ah = 5Dh
   835                              <1> .networkServices:   ;ah = 5Eh, do nothing
   836                              <1> .networkRedirection:;ah = 5Fh, do nothing
   837                              <1> .trueName:          ;ah = 60h, get fully qualified name
   838                              <1>                     ;ah = 61h, reserved
   839                              <1> .getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   840 00000753 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   841 0000075A 488B15(D7000000)    <1>     mov rdx, qword [currentPSP]
   842 00000761 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx  ;Save the current psp in rbx
   843 00000765 C3                  <1>     ret
   844                              <1>                     ;ah = 63h, reserved
   845                              <1> .setDriverLookahead:;ah = 64h, reserved
   846                              <1> .getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
   847                              <1> .getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
   848                              <1> .setHandleCount:    ;ah = 67h
   849                              <1> .commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   850                              <1> .getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   851                              <1> .return:
   852 00000766 C3                  <1>     ret
   853                              <1> 
   854                              <1> 
   855                              <1> .dispatchTable:
   856 00000767 [5B04000000000000]  <1>     dq .simpleTerminate     ;AH = 00H, PROCESS MANAGEMENT
   857 0000076F [5C04000000000000]  <1>     dq .stdinReadEcho       ;AH = 01H, CHAR IO
   858 00000777 [D104000000000000]  <1>     dq .stdoutWrite         ;AH = 02H, CHAR IO
   859 0000077F [0B05000000000000]  <1>     dq .stdauxRead          ;AH = 03H, CHAR IO
   860 00000787 [0B05000000000000]  <1>     dq .stdauxWrite         ;AH = 04H, CHAR IO
   861 0000078F [0B05000000000000]  <1>     dq .stdprnWrite         ;AH = 05H, CHAR IO
   862 00000797 [0B05000000000000]  <1>     dq .directCONIO         ;AH = 06H, CHAR IO
   863 0000079F [0B05000000000000]  <1>     dq .waitDirectInNoEcho  ;AH = 07H, CHAR IO
   864 000007A7 [4505000000000000]  <1>     dq .waitStdinNoEcho     ;AH = 08H, CHAR IO
   865 000007AF [4605000000000000]  <1>     dq .printString         ;AH = 09H, CHAR IO
   866 000007B7 [8805000000000000]  <1>     dq .buffStdinInput      ;AH = 0AH, CHAR IO
   867 000007BF [8805000000000000]  <1>     dq .checkStdinStatus    ;AH = 0BH, CHAR IO
   868 000007C7 [8805000000000000]  <1>     dq .clearbuffDoFunc     ;AH = 0CH, CHAR IO
   869 000007CF [8805000000000000]  <1>     dq .diskReset           ;AH = 0DH, DISK MANAGEMENT
   870 000007D7 [8805000000000000]  <1>     dq .selectDisk          ;AH = 0EH, DISK MANAGEMENT
   871 000007DF [8805000000000000]  <1>     dq .openFileFCB         ;AH = 0FH, FILE OPERATION       FCB
   872 000007E7 [8805000000000000]  <1>     dq .closeFileFCB        ;AH = 10H, FILE OPERATION       FCB
   873 000007EF [8805000000000000]  <1>     dq .findFirstFileFCB    ;AH = 11H, FILE OPERATION       FCB
   874 000007F7 [8805000000000000]  <1>     dq .findNextFileFCB     ;AH = 12H, FILE OPERATION       FCB
   875 000007FF [8805000000000000]  <1>     dq .deleteFileFCB       ;AH = 13H, FILE OPERATION       FCB
   876 00000807 [8805000000000000]  <1>     dq .sequentialReadFCB   ;AH = 14H, RECORD OPERATION     FCB
   877 0000080F [8805000000000000]  <1>     dq .sequentialWriteFCB  ;AH = 15H, RECORD OPERTAION     FCB
   878 00000817 [8805000000000000]  <1>     dq .createFileFCB       ;AH = 16H, FILE OPERATION       FCB
   879 0000081F [8805000000000000]  <1>     dq .renameFileFCB       ;AH = 17H, FILE OPERATION       FCB
   880 00000827 [6607000000000000]  <1>     dq .return              ;AH = 18H, RESERVED
   881 0000082F [8805000000000000]  <1>     dq .getCurrentDisk      ;AH = 19H, DISK MANAGEMENT
   882 00000837 [8F05000000000000]  <1>     dq .setDTA              ;AH = 1AH, RECORD OPERATION     F/H
   883 0000083F [A205000000000000]  <1>     dq .FATinfoDefault      ;AH = 1BH, DISK MANAGEMENT
   884 00000847 [A205000000000000]  <1>     dq .FatinfoDevice       ;AH = 1CH, DISK MANAGEMENT
   885 0000084F [6607000000000000]  <1>     dq .return              ;AH = 1DH, RESERVED
   886 00000857 [6607000000000000]  <1>     dq .return              ;AH = 1EH, RESERVED
   887 0000085F [A205000000000000]  <1>     dq .getCurrentDPBptr    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
   888 00000867 [6607000000000000]  <1>     dq .return              ;AH = 20H, RESERVED
   889 0000086F [A205000000000000]  <1>     dq .randomReadFCB       ;AH = 21H, RECORD OPERATION     FCB
   890 00000877 [A205000000000000]  <1>     dq .randomWriteFCB      ;AH = 22H, RECORD OPERATION     FCB
   891 0000087F [A205000000000000]  <1>     dq .getFileSizeFCB      ;AH = 23H, FILE OPERATION       FCB
   892 00000887 [A205000000000000]  <1>     dq .setRelRecordFCB     ;AH = 24H, RECORD OPERATION     FCB
   893 0000088F [A205000000000000]  <1>     dq .setIntVector        ;AH = 25H, MISC. SYS. FUNCTION
   894 00000897 [CD05000000000000]  <1>     dq .createNewPSP        ;AH = 26H, PROCESS MANAGEMENT
   895 0000089F [CD05000000000000]  <1>     dq .randBlockReadFCB    ;AH = 27H, RECORD OPERATION     FCB
   896 000008A7 [CD05000000000000]  <1>     dq .randBlockWriteFCB   ;AH = 28H, RECORD OPERATION     FCB
   897 000008AF [CD05000000000000]  <1>     dq .parseFilenameFCB    ;AH = 29H, FILE OPERATION       FCB
   898 000008B7 [CD05000000000000]  <1>     dq .getDate             ;AH = 2AH, TIME AND DATE
   899 000008BF [CD05000000000000]  <1>     dq .setDate             ;AH = 2BH, TIME AND DATE
   900 000008C7 [CD05000000000000]  <1>     dq .getTime             ;AH = 2CH, TIME AND DATE
   901 000008CF [CD05000000000000]  <1>     dq .setTime             ;AH = 2DH, TIME AND DATE
   902 000008D7 [CD05000000000000]  <1>     dq .setResetVerify      ;AH = 2EH, DISK MANAGEMENT
   903 000008DF [D405000000000000]  <1>     dq .getDTA              ;AH = 2FH, RECORD OPERATION     F/H
   904 000008E7 [E705000000000000]  <1>     dq .getDOSversion       ;AH = 30H, MISC. SYS. FUNCTION
   905 000008EF [FE05000000000000]  <1>     dq .terminateStayRes    ;AH = 31H, PROCESS MANAGEMENT
   906 000008F7 [FE05000000000000]  <1>     dq .getDeviceDPBptr     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
   907 000008FF [FE05000000000000]  <1>     dq .ctrlBreakCheck      ;AH = 33H, MISC. SYS. FUNCTION
   908 00000907 [0F06000000000000]  <1>     dq .getInDOSflagPtr     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
   909 0000090F [2206000000000000]  <1>     dq .getIntVector        ;AH = 35H, MISC. SYS. FUNCTION
   910 00000917 [3906000000000000]  <1>     dq .getDiskFreeSpace    ;AH = 36H, DISK MANAGEMENT
   911 0000091F [3906000000000000]  <1>     dq .getsetSwitchChar    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
   912 00000927 [3906000000000000]  <1>     dq .getsetCountryInfo   ;AH = 38H, MISC. SYS. FUNCTION
   913 0000092F [3906000000000000]  <1>     dq .makeDIR             ;AH = 39H, DIRECTORY OPERATION
   914 00000937 [3906000000000000]  <1>     dq .removeDIR           ;AH = 3AH, DIRECTORY OPERATION
   915 0000093F [3906000000000000]  <1>     dq .changeCurrentDIR    ;AH = 3BH, DIRECTORY OPERATION
   916 00000947 [3906000000000000]  <1>     dq .createFileHdl       ;AH = 3CH, FILE OPERATION       HANDLE
   917 0000094F [3906000000000000]  <1>     dq .openFileHdl         ;AH = 3DH, FILE OPERATION       HANDLE
   918 00000957 [3906000000000000]  <1>     dq .closeFileHdl        ;AH = 3EH, FILE OPERATION       HANDLE
   919 0000095F [3906000000000000]  <1>     dq .readFileHdl         ;AH = 3FH, RECORD OPERATION     HANDLE
   920 00000967 [3906000000000000]  <1>     dq .writeFileHdl        ;AH = 40H, RECORD OPERATION     HANDLE
   921 0000096F [3906000000000000]  <1>     dq .deleteFileHdl       ;AH = 41H, FILE OPERATION       HANDLE
   922 00000977 [3906000000000000]  <1>     dq .movFileReadPtr      ;AH = 42H, RECORD OPERATION     HANDLE
   923 0000097F [3906000000000000]  <1>     dq .changeFileModeHdl   ;AH = 43H, FILE OPERATION       HANDLE
   924 00000987 [3906000000000000]  <1>     dq .ioctrl              ;AH = 44H, MISC. SYS. FUNCTION
   925 0000098F [3906000000000000]  <1>     dq .duplicateHandle     ;AH = 45H, FILE OPERATION       HANDLE
   926 00000997 [3906000000000000]  <1>     dq .forceDuplicateHdl   ;AH = 46H, FILE OPERATION       HANDLE
   927 0000099F [3906000000000000]  <1>     dq .getCurrentDIR       ;AH = 47H, DIRECTORY OPERATION
   928 000009A7 [3906000000000000]  <1>     dq .allocateMemory      ;AH = 48H, MEMORY MANAGEMENT
   929 000009AF [3906000000000000]  <1>     dq .freeMemory          ;AH = 49H, MEMORY MANAGEMENT
   930 000009B7 [3906000000000000]  <1>     dq .reallocMemory       ;AH = 4AH, MEMORY MANAGEMENT
   931 000009BF [3906000000000000]  <1>     dq .loadExecChild       ;AH = 4BH, PROCESS MANAGEMENT
   932 000009C7 [3906000000000000]  <1>     dq .terminateClean      ;AH = 4CH, PROCESS MANAGEMENT
   933 000009CF [3906000000000000]  <1>     dq .getRetCodeChild     ;AH = 4DH, PROCESS MANAGEMENT
   934 000009D7 [3906000000000000]  <1>     dq .findFirstFileHdl    ;AH = 4EH, FILE OPERATION       HANDLE
   935 000009DF [3906000000000000]  <1>     dq .findNextFileHdl     ;AH = 4FH, FILE OPERATION       HANDLE
   936 000009E7 [3906000000000000]  <1>     dq .setCurrProcessID    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   937 000009EF [4106000000000000]  <1>     dq .getCurrProcessID    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   938 000009F7 [5406000000000000]  <1>     dq .getSysVarsPtr       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   939 000009FF [6706000000000000]  <1>     dq .createDPB           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   940 00000A07 [4C07000000000000]  <1>     dq .getVerifySetting    ;AH = 54H, DISK MANAGEMENT
   941 00000A0F [5307000000000000]  <1>     dq .createPSP           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   942 00000A17 [5307000000000000]  <1>     dq .renameFile          ;AH = 56H, FILE OPERATION       HANDLE
   943 00000A1F [5307000000000000]  <1>     dq .getSetFileDateTime  ;AH = 57H, FILE OPERATION       HANDLE
   944 00000A27 [5307000000000000]  <1>     dq .getsetMallocStrat   ;AH = 58H, MEMORY MANAGEMENT
   945 00000A2F [5307000000000000]  <1>     dq .getExtendedError    ;AH = 59H, MISC. SYS. FUNCTION
   946 00000A37 [5307000000000000]  <1>     dq .createUniqueFile    ;AH = 5AH, FILE OPERATION       HANDLE
   947 00000A3F [5307000000000000]  <1>     dq .createNewFile       ;AH = 5BH, FILE OPERATION       HANDLE
   948 00000A47 [5307000000000000]  <1>     dq .lockUnlockFile      ;AH = 5CH, RECORD OPERATION     HANDLE
   949 00000A4F [5307000000000000]  <1>     dq .getCritErrorInfo    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   950 00000A57 [5307000000000000]  <1>     dq .networkServices     ;AH = 5EH, RESERVED NETWORK FUNCTION
   951 00000A5F [5307000000000000]  <1>     dq .networkRedirection  ;AH = 5FH, RESERVED NETWORK FUNCTION
   952 00000A67 [5307000000000000]  <1>     dq .trueName            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   953 00000A6F [6607000000000000]  <1>     dq .return              ;AH = 61H, RESERVED
   954 00000A77 [5307000000000000]  <1>     dq .getPSPaddr          ;AH = 62H, PROCESS MANAGEMENT
   955 00000A7F [6607000000000000]  <1>     dq .return              ;AH = 63H, RESERVED
   956 00000A87 [6607000000000000]  <1>     dq .setDriverLookahead  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   957 00000A8F [6607000000000000]  <1>     dq .getExtLocalInfo     ;AH = 65H, MISC. SYS. FUNCTION
   958 00000A97 [6607000000000000]  <1>     dq .getsetGlobalCP      ;AH = 66H, MISC. SYS. FUNCTION
   959 00000A9F [6607000000000000]  <1>     dq .setHandleCount      ;AH = 67H, FILE OPERAITON       F/H
   960 00000AA7 [6607000000000000]  <1>     dq .commitFile          ;AH = 68H, FILE OPERATION       HANDLE
   961 00000AAF [6607000000000000]  <1>     dq .getsetDiskSerial    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   962                              <1> dispatchTableL  equ $ - .dispatchTable 
   963                              <1> 
   964                              <1> terminateHandler:   ;Int 42h
   965                              <1> ctrlCHandler:       ;Int 43h
   966                              <1> critErrorHandler:   ;Int 44h
   967                              <1> ;User Stack in usage here, must be swapped to before this is called
   968                              <1> ;Entered with:  
   969                              <1> ;               AH = Critical Error Bitfield
   970                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
   971                              <1> ;               Bit 6 - Reserved
   972                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
   973                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
   974                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
   975                              <1> ;               Bits [2-1] = Affected Disk Error
   976                              <1> ;                     0 0   DOS area
   977                              <1> ;                     0 1   FAT area
   978                              <1> ;                     1 0   Directory area
   979                              <1> ;                     1 1   Data area
   980                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   981                              <1> ;               AL  = Failing drive number if AH[7] = 0
   982                              <1> ;               DIL = Error code for errorMsg
   983                              <1> ;               RSI = EA of Device Header for which device the error occured
   984                              <1> ;Return:
   985                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
   986                              <1> ;                  = 1 - Retry the Operation    (Retry)
   987                              <1> ;                  = 2 - Terminate the Program  (Abort)
   988                              <1> ;                  = 3 - Fail the DOS call      (Fail)
   989 00000AB7 53                  <1>     push rbx
   990 00000AB8 51                  <1>     push rcx
   991 00000AB9 52                  <1>     push rdx
   992 00000ABA 57                  <1>     push rdi
   993 00000ABB 56                  <1>     push rsi
   994 00000ABC FC                  <1>     cld         ;Make String ops go forward
   995                              <1> 
   996 00000ABD 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
   997 00000AC0 488D155E020000      <1>     lea rdx, qword [.crlf]
   998 00000AC7 B409                <1>     mov ah, 09h ;Print String
   999 00000AC9 CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
  1000                              <1> 
  1001 00000ACB 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
  1002 00000AD1 B90C000000          <1>     mov ecx, 0Ch
  1003 00000AD6 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
  1004 00000AD8 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
  1005 00000ADB 480FB7FF            <1>     movzx rdi, di
  1006 00000ADF 4889FA              <1>     mov rdx, rdi    ;Copy error code
  1007 00000AE2 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
  1008 00000AE6 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
  1009 00000AE9 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
  1010 00000AEC 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
  1011 00000AF3 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
  1012 00000AF7 B409                <1>     mov ah, 09h ;Print String
  1013 00000AF9 CD41                <1>     int 41h     ;Call DOS to print first part of message
  1014                              <1> 
  1015 00000AFB 488D1505020000      <1>     lea rdx, qword [.readmsg]
  1016 00000B02 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
  1017 00000B09 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
  1018 00000B0C 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
  1019 00000B10 B409                <1>     mov ah, 09h ;Print String
  1020 00000B12 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
  1021                              <1> 
  1022 00000B14 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
  1023 00000B17 0F85DF000000        <1>     jnz .charError
  1024                              <1> ;Disk error continues here
  1025 00000B1D 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
  1026 00000B24 B409                <1>     mov ah, 09h
  1027 00000B26 CD41                <1>     int 41h
  1028 00000B28 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
  1029 00000B2A 80C241              <1>     add dl, "A" ;Add ASCII code
  1030 00000B2D B402                <1>     mov ah, 02h ;Print char in dl
  1031 00000B2F CD41                <1>     int 41h
  1032                              <1> .userInput:
  1033 00000B31 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
  1034 00000B38 B409                <1>     mov ah, 09h
  1035 00000B3A CD41                <1>     int 41h
  1036                              <1> ;Abort, Retry, Ignore, Fail is word order
  1037                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
  1038                              <1> .userAbort:
  1039                              <1> ;Abort is always an option
  1040 00000B3C 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
  1041 00000B43 B409                <1>     mov ah, 09h
  1042 00000B45 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
  1043                              <1> .userRetry:
  1044 00000B47 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
  1045 00000B4A 7416                <1>     jz .userIgnore    ;If clear, dont print message
  1046 00000B4C 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
  1047 00000B53 B409                <1>     mov ah, 09h
  1048 00000B55 CD41                <1>     int 41h
  1049 00000B57 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
  1050 00000B5E B409                <1>     mov ah, 09h
  1051 00000B60 CD41                <1>     int 41h
  1052                              <1> .userIgnore:
  1053 00000B62 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
  1054 00000B65 7416                <1>     jz .userFail
  1055 00000B67 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
  1056 00000B6E B409                <1>     mov ah, 09h
  1057 00000B70 CD41                <1>     int 41h
  1058 00000B72 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
  1059 00000B79 B409                <1>     mov ah, 09h
  1060 00000B7B CD41                <1>     int 41h
  1061                              <1> .userFail:
  1062 00000B7D F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
  1063 00000B80 7416                <1>     jz .userMsgEnd
  1064 00000B82 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
  1065 00000B89 B409                <1>     mov ah, 09h
  1066 00000B8B CD41                <1>     int 41h
  1067 00000B8D 488D15A7010000      <1>     lea rdx, qword [.failmsg]
  1068 00000B94 B409                <1>     mov ah, 09h
  1069 00000B96 CD41                <1>     int 41h
  1070                              <1> .userMsgEnd:
  1071 00000B98 488D15A4010000      <1>     lea rdx, qword [.endMsg]
  1072 00000B9F B409                <1>     mov ah, 09h
  1073 00000BA1 CD41                <1>     int 41h
  1074                              <1> ;Get user input now 
  1075 00000BA3 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
  1076 00000BA5 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
  1077 00000BAC B401                <1>     mov ah, 01h ;STDIN without Console Echo
  1078 00000BAE CD41                <1>     int 41h ;Get char in al
  1079 00000BB0 3C61                <1>     cmp al, "a" ;Chack if lowercase
  1080 00000BB2 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
  1081 00000BB4 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
  1082                              <1> .uip1:
  1083 00000BB6 AE                  <1>     scasb   ;Compare char to list, offset gives return code
  1084 00000BB7 740F                <1>     je .validInput  ;If they are equal, ecx has return code
  1085 00000BB9 FFC1                <1>     inc ecx
  1086 00000BBB 81F904000000        <1>     cmp ecx, 4
  1087 00000BC1 75F3                <1>     jne .uip1
  1088 00000BC3 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
  1089                              <1> .validInput:
  1090 00000BC8 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
  1091                              <1> ;Now check if the input is permitted
  1092 00000BCA 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
  1093 00000BCC 7427                <1>     je .cehExit
  1094 00000BCE 84C0                <1>     test al, al ;Check if 0 => Ignore
  1095 00000BD0 740F                <1>     je .viIgnore
  1096 00000BD2 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
  1097 00000BD4 7416                <1>     je .viRetry
  1098                              <1> .viFail:    ;Fallthrough for fail (al = 3)
  1099 00000BD6 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
  1100 00000BD9 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
  1101 00000BDF EB14                <1>     jmp short .cehExit
  1102                              <1> .viIgnore:
  1103 00000BE1 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
  1104 00000BE4 0F8447FFFFFF        <1>     jz .userInput
  1105 00000BEA EB09                <1>     jmp short .cehExit
  1106                              <1> .viRetry:
  1107 00000BEC F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
  1108 00000BEF 0F843CFFFFFF        <1>     jz .userInput
  1109                              <1> .cehExit:
  1110 00000BF5 5E                  <1>     pop rsi
  1111 00000BF6 5F                  <1>     pop rdi
  1112 00000BF7 5A                  <1>     pop rdx
  1113 00000BF8 59                  <1>     pop rcx
  1114 00000BF9 5B                  <1>     pop rbx
  1115 00000BFA 48CF                <1>     iretq
  1116                              <1> .charError:
  1117 00000BFC B908000000          <1>     mov ecx, 8  ;8 chars in device name
  1118 00000C01 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
  1119                              <1> .ce1:
  1120 00000C08 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
  1121 00000C09 88C2                <1>     mov dl, al  ;Move char into dl
  1122 00000C0B B402                <1>     mov ah, 02h
  1123 00000C0D CD41                <1>     int 41h ;Print char
  1124 00000C0F E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
  1125 00000C11 E91BFFFFFF          <1>     jmp .userInput
  1126                              <1> 
  1127                              <1> .errorMsgTable: ;Each table entry is 18 chars long
  1128 00000C16 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
  1128 00000C1F 746563742024202020  <1>
  1129 00000C28 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
  1129 00000C31 6E6974202420202020  <1>
  1130 00000C3A 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
  1130 00000C43 202420202020202020  <1>
  1131 00000C4C 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
  1131 00000C55 6F6D6D616E64202420  <1>
  1132 00000C5E 446174612024202020- <1>             db "Data $            "       ;Error 4
  1132 00000C67 202020202020202020  <1>
  1133 00000C70 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
  1133 00000C79 737420242020202020  <1>
  1134 00000C82 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
  1134 00000C8B 202020202020202020  <1>
  1135 00000C94 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
  1135 00000C9D 656469612024202020  <1>
  1136 00000CA6 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
  1136 00000CAF 7420466F756E642024  <1>
  1137 00000CB8 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
  1137 00000CC1 706572202420202020  <1>
  1138 00000CCA 577269746520466175- <1>             db "Write Fault $     "       ;Error A
  1138 00000CD3 6C7420242020202020  <1>
  1139 00000CDC 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
  1139 00000CE5 742024202020202020  <1>
  1140 00000CEE 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
  1140 00000CF7 61696C757265202420  <1>
  1141                              <1> 
  1142 00000D00 64726976652024      <1> .drive      db "drive $"
  1143 00000D07 6572726F7220726561- <1> .readmsg    db "error reading $"
  1143 00000D10 64696E672024        <1>
  1144 00000D16 6572726F7220777269- <1> .writemsg   db "error writing $"
  1144 00000D1F 74696E672024        <1>
  1145 00000D25 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
  1146 00000D28 41626F727424        <1> .abortmsg   db "Abort$" 
  1147 00000D2E 49676E6F726524      <1> .ignoremsg  db "Ignore$"
  1148 00000D35 526574727924        <1> .retrymsg   db "Retry$"
  1149 00000D3B 4661696C24          <1> .failmsg    db "Fail$"
  1150 00000D40 2C2024              <1> .betweenMsg db ", $"
  1151 00000D43 3F2024              <1> .endMsg     db "? $"
  1152 00000D46 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
  1153                              <1> absDiskRead:        ;Int 45h
  1154                              <1> ;al = Drive number
  1155                              <1> ;rbx = Memory Buffer address
  1156                              <1> ;ecx = Number of sectors to read (max 255 for now)
  1157                              <1> ;rdx = Start LBA to read from
  1158 00000D4A 480FB6C0            <1>     movzx rax, al   ;Zero extend DOS drive number 
  1159 00000D4E 8A80[3E180000]      <1>     mov al, byte [msdDriver.msdBIOSmap + rax] ;Get translated BIOS num into al
  1160 00000D54 4891                <1>     xchg rax, rcx
  1161 00000D56 4887CA              <1>     xchg rcx, rdx
  1162 00000D59 B482                <1>     mov ah, 82h
  1163 00000D5B CD33                <1>     int 33h
  1164 00000D5D 48CF                <1>     iretq
  1165                              <1> absDiskWrite:       ;Int 46h
  1166 00000D5F 480FB6C0            <1>     movzx rax, al   ;Zero extend DOS drive number 
  1167 00000D63 8A80[3E180000]      <1>     mov al, byte [msdDriver.msdBIOSmap + rax] ;Get translated BIOS num into al
  1168 00000D69 4891                <1>     xchg rax, rcx
  1169 00000D6B 4887CA              <1>     xchg rcx, rdx
  1170 00000D6E B483                <1>     mov ah, 83h
  1171 00000D70 CD33                <1>     int 33h
  1172 00000D72 48CF                <1>     iretq
  1173                              <1> terminateResident:  ;Int 47h
  1174                              <1> inDosHandler:       ;Int 48h
  1175                              <1> ;Called when DOS idle
  1176 00000D74 48CF                <1>     iretq
  1177                              <1> fastOutput:         ;Int 49h
  1178                              <1> ;Called with char to transfer in al
  1179 00000D76 50                  <1>     push rax
  1180 00000D77 B40E                <1>     mov ah, 0Eh
  1181 00000D79 CD30                <1>     int 30h
  1182 00000D7B 58                  <1>     pop rax
  1183 00000D7C 48CF                <1>     iretq
  1184                              <1> passCommand:        ;Int 4Eh, hooked by COMMAND.COM
  1185 00000D7E 48CF                <1>     iretq
  1186                              <1> multiplex:          ;Int 4Fh, kept as iretq for now
  1187 00000D80 48CF                <1>     iretq
    14                                  %include "dosDrivers.asm"
    15                              <1> ;-----------------------------------:
    16                              <1> ;          Driver routines          :
    17                              <1> ;-----------------------------------:
    18                              <1> drivers:
    19                              <1> conHdr:
    20 00000D82 [A40D000000000000]  <1>     dq auxHdr
    21 00000D8A 1308                <1>     dw 0813h
    22 00000D8C [220F000000000000]  <1>     dq commonStrat
    23 00000D94 [310F000000000000]  <1>     dq conDriver
    24 00000D9C 434F4E2020202020    <1>     db "CON     "
    25                              <1> auxHdr:
    26 00000DA4 [C60D000000000000]  <1>     dq prnHdr
    27 00000DAC 0080                <1>     dw 08000h
    28 00000DAE [220F000000000000]  <1>     dq commonStrat
    29 00000DB6 [F611000000000000]  <1>     dq com1Intr
    30 00000DBE 4155582020202020    <1>     db "AUX     "
    31                              <1> prnHdr:
    32 00000DC6 [E80D000000000000]  <1>     dq clkHdr
    33 00000DCE 40A0                <1>     dw 0A040h
    34 00000DD0 [2A0F000000000000]  <1>     dq nulStrat
    35 00000DD8 [300F000000000000]  <1>     dq nulIntr
    36 00000DE0 50524E2020202020    <1>     db "PRN     "
    37                              <1> clkHdr:
    38 00000DE8 [0A0E000000000000]  <1>     dq msdHdr
    39 00000DF0 0880                <1>     dw 08008h
    40 00000DF2 [220F000000000000]  <1>     dq commonStrat
    41 00000DFA [6910000000000000]  <1>     dq clkDriver
    42 00000E02 434C4F434B242020    <1>     db "CLOCK$  "
    43                              <1> msdHdr:
    44 00000E0A [2C0E000000000000]  <1>     dq com1Hdr
    45 00000E12 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    46 00000E14 [220F000000000000]  <1>     dq commonStrat
    47 00000E1C [9B13000000000000]  <1>     dq msdDriver
    48 00000E24 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    49                              <1> com1Hdr:
    50 00000E2C [4E0E000000000000]  <1>     dq com2Hdr
    51 00000E34 0080                <1>     dw 08000h
    52 00000E36 [220F000000000000]  <1>     dq commonStrat
    53 00000E3E [F611000000000000]  <1>     dq com1Intr
    54 00000E46 434F4D3120202020    <1>     db "COM1    "
    55                              <1> com2Hdr:
    56 00000E4E [700E000000000000]  <1>     dq com3Hdr
    57 00000E56 0080                <1>     dw 08000h
    58 00000E58 [220F000000000000]  <1>     dq commonStrat
    59 00000E60 [FF11000000000000]  <1>     dq com2Intr
    60 00000E68 434F4D3220202020    <1>     db "COM2    "
    61                              <1> com3Hdr:
    62 00000E70 [920E000000000000]  <1>     dq com4Hdr
    63 00000E78 0080                <1>     dw 08000h
    64 00000E7A [220F000000000000]  <1>     dq commonStrat
    65 00000E82 [0812000000000000]  <1>     dq com3Intr
    66 00000E8A 434F4D3320202020    <1>     db "COM3    "
    67                              <1> com4Hdr:
    68 00000E92 [B40E000000000000]  <1>     dq lpt1Hdr
    69 00000E9A 0080                <1>     dw 08000h
    70 00000E9C [220F000000000000]  <1>     dq commonStrat
    71 00000EA4 [1112000000000000]  <1>     dq com4Intr
    72 00000EAC 434F4D3420202020    <1>     db "COM4    "
    73                              <1> lpt1Hdr:
    74 00000EB4 [D60E000000000000]  <1>     dq lpt2Hdr
    75 00000EBC 40A0                <1>     dw 0A040h
    76 00000EBE [2A0F000000000000]  <1>     dq nulStrat
    77 00000EC6 [300F000000000000]  <1>     dq nulIntr
    78 00000ECE 4C50543120202020    <1>     db "LPT1    "
    79                              <1> lpt2Hdr:
    80 00000ED6 [F80E000000000000]  <1>     dq lpt3Hdr
    81 00000EDE 40A0                <1>     dw 0A040h
    82 00000EE0 [2A0F000000000000]  <1>     dq nulStrat
    83 00000EE8 [300F000000000000]  <1>     dq nulIntr
    84 00000EF0 4C50543220202020    <1>     db "LPT2    "
    85                              <1> lpt3Hdr:
    86 00000EF8 FFFFFFFFFFFFFFFF    <1>     dq -1
    87 00000F00 40A0                <1>     dw 0A040h
    88 00000F02 [2A0F000000000000]  <1>     dq nulStrat
    89 00000F0A [300F000000000000]  <1>     dq nulIntr
    90 00000F12 4C50543320202020    <1>     dq "LPT3    "
    91 00000F1A 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    92                              <1> commonStrat:
    93                              <1> ;DOS calls this function with rbx=Ptr to request header
    94 00000F22 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    95 00000F29 C3                  <1>     ret
    96                              <1> nulStrat:
    97 00000F2A 66C743030001        <1>     mov word [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
    98                              <1> nulIntr:
    99 00000F30 C3                  <1>     ret
   100                              <1> 
   101                              <1> conDriver:
   102 00000F31 50                  <1>     push rax
   103 00000F32 53                  <1>     push rbx
   104 00000F33 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
   105 00000F3A B003                <1>     mov al, 03h ;Unknown Command
   106 00000F3C 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   107 00000F40 7735                <1>     ja .conWriteErrorCode ;If yes, error!
   108                              <1> 
   109 00000F42 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   110 00000F45 3C04                <1>     cmp al, 4
   111 00000F47 743D                <1>     jz .conRead
   112 00000F49 3C05                <1>     cmp al, 5
   113 00000F4B 747F                <1>     jz .conNondestructiveRead
   114 00000F4D 3C06                <1>     cmp al, 6
   115 00000F4F 0F84A8000000        <1>     jz .conInputStatus
   116 00000F55 3C07                <1>     cmp al, 7
   117 00000F57 0F84B0000000        <1>     jz .conFlushInputBuffers
   118 00000F5D 3C08                <1>     cmp al, 8
   119 00000F5F 0F84CA000000        <1>     jz .conWrite
   120 00000F65 3C09                <1>     cmp al, 9
   121 00000F67 0F84C2000000        <1>     jz .conWrite
   122 00000F6D 3C0A                <1>     cmp al, 0Ah
   123 00000F6F 0F84E3000000        <1>     jz .conOutputStatus
   124 00000F75 EB06                <1>     jmp short .conExit  ;All other valid functions return done
   125                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
   126 00000F77 B480                <1>     mov ah, 80h ;Set error bit
   127 00000F79 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   128                              <1> .conExit:
   129 00000F7D 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   130 00000F83 5B                  <1>     pop rbx
   131 00000F84 58                  <1>     pop rax
   132 00000F85 C3                  <1>     ret
   133                              <1> .conRead:    ;Function 4
   134 00000F86 B005                <1>     mov al, 05h ;Bad request structure length?
   135 00000F88 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   136 00000F8B 75EA                <1>     jne .conWriteErrorCode
   137                              <1> 
   138 00000F8D 57                  <1>     push rdi
   139 00000F8E 51                  <1>     push rcx
   140 00000F8F 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   141 00000F93 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   142                              <1> .cre1:
   143 00000F95 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   144 00000F98 741C                <1>     je .cre2
   145 00000F9A 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
   146 00000FA1 751A                <1>     jnz .cre3   ;No, get the buffer value
   147 00000FA3 31C0                <1>     xor eax, eax
   148 00000FA5 CD36                <1>     int 36h
   149                              <1> .cre11:
   150 00000FA7 AA                  <1>     stosb
   151 00000FA8 84C0                <1>     test al, al ;Was the ascii code 0?
   152 00000FAA 7506                <1>     jnz .cre12  ;No, skip storing scancode
   153 00000FAC 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
   154                              <1> .cre12:
   155 00000FB2 FFC1                <1>     inc ecx ;Inc chars stored in buffer
   156 00000FB4 EBDF                <1>     jmp short .cre1
   157                              <1> .cre2:
   158 00000FB6 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   159 00000FB9 59                  <1>     pop rcx
   160 00000FBA 5F                  <1>     pop rdi
   161 00000FBB EBC0                <1>     jmp short .conExit
   162                              <1> .cre3:
   163 00000FBD 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   164 00000FC3 C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   165 00000FCA EBDB                <1>     jmp short .cre11
   166                              <1> 
   167                              <1> .conNondestructiveRead:  ;Function 5
   168 00000FCC B005                <1>     mov al, 05h ;Bad request structure length?
   169 00000FCE 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   170 00000FD1 75A4                <1>     jne .conWriteErrorCode
   171 00000FD3 803D8E00000000      <1>     cmp byte [.conBuf], 0
   172 00000FDA 7519                <1>     jnz .cnr2
   173 00000FDC B401                <1>     mov ah, 01h     ;Get key if exists
   174 00000FDE CD36                <1>     int 36h
   175 00000FE0 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   176                              <1>     ;Keystroke available
   177                              <1> .cnr0:
   178 00000FE2 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Move char in al
   179 00000FE5 E993FFFFFF          <1>     jmp .conExit
   180                              <1> .cnr1: ;No keystroke available
   181 00000FEA 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 0200h   ;Set busy bit
   182 00000FF0 E988FFFFFF          <1>     jmp .conExit
   183                              <1> .cnr2:
   184 00000FF5 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   185 00000FFB EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   186                              <1> 
   187                              <1> .conInputStatus:         ;Function 6
   188 00000FFD B005                <1>     mov al, 05h ;Bad request structure length?
   189 00000FFF 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   190 00001002 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   191 00001008 E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   192                              <1> 
   193                              <1> .conFlushInputBuffers:   ;Function 7
   194 0000100D B005                <1>     mov al, 05h ;Bad request structure length?
   195 0000100F 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   196 00001012 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   197 00001018 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   198                              <1> .cfib0:
   199 0000101F B401                <1>     mov ah, 01      ;Get buffer status
   200 00001021 CD36                <1>     int 36h
   201 00001023 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   202 00001029 30E4                <1>     xor ah, ah
   203 0000102B CD36                <1>     int 36h ;Read key to flush from buffer
   204 0000102D EBF0                <1>     jmp short .cfib0
   205                              <1> 
   206                              <1> .conWrite:   ;Function 8 and 9
   207 0000102F B005                <1>     mov al, 05h ;Bad request structure length?
   208 00001031 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   209 00001034 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   210                              <1> 
   211 0000103A 56                  <1>     push rsi
   212 0000103B 51                  <1>     push rcx
   213 0000103C 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   214 00001040 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   215                              <1> .cw1: 
   216 00001042 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   217 00001045 7407                <1>     je .cw2
   218 00001047 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   219 00001048 CD49                <1>     int 49h ;Fast print char
   220 0000104A FFC1                <1>     inc ecx
   221 0000104C EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   222                              <1> .cw2:
   223 0000104E 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   224 00001051 59                  <1>     pop rcx
   225 00001052 5E                  <1>     pop rsi
   226 00001053 E925FFFFFF          <1>     jmp .conExit
   227                              <1> .conOutputStatus:   ;Function 0Ah
   228 00001058 B005                <1>     mov al, 05h ;Bad request structure length?
   229 0000105A 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   230 0000105D 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   231 00001063 E915FFFFFF          <1>     jmp .conExit
   232                              <1> 
   233 00001068 00                  <1> .conBuf db 0    ;Single byte buffer
   234                              <1> clkDriver:
   235 00001069 50                  <1>     push rax
   236 0000106A 53                  <1>     push rbx
   237 0000106B 51                  <1>     push rcx
   238 0000106C 52                  <1>     push rdx
   239 0000106D 56                  <1>     push rsi
   240 0000106E 55                  <1>     push rbp
   241 0000106F 488B1DA4FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   242 00001076 B003                <1>     mov al, 03h ;Unknown Command
   243 00001078 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   244 0000107C 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   245                              <1> 
   246 0000107E 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   247 00001081 3C04                <1>     cmp al, 04h
   248 00001083 7437                <1>     jz .clkRead
   249 00001085 3C06                <1>     cmp al, 06h
   250 00001087 0F8494000000        <1>     jz .clkInputStatus
   251 0000108D 3C07                <1>     cmp al, 07h
   252 0000108F 0F8498000000        <1>     jz .clkFlushInputBuffers
   253 00001095 3C08                <1>     cmp al, 08h
   254 00001097 0F84A0000000        <1>     jz .clkWrite
   255 0000109D 3C09                <1>     cmp al, 09h
   256 0000109F 0F8498000000        <1>     jz .clkWrite
   257 000010A5 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   258                              <1> .clkNotFunctioning:
   259 000010A7 B002                <1>     mov al, 02h ;Device not ready error
   260                              <1> .clkWriteErrorCode:
   261 000010A9 B480                <1>     mov ah, 80h ;Set error bit
   262 000010AB 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   263                              <1> .clkExit:
   264 000010AF 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   265 000010B5 5D                  <1>     pop rbp
   266 000010B6 5E                  <1>     pop rsi
   267 000010B7 5A                  <1>     pop rdx
   268 000010B8 59                  <1>     pop rcx
   269 000010B9 5B                  <1>     pop rbx
   270 000010BA 58                  <1>     pop rax
   271 000010BB C3                  <1>     ret
   272                              <1> 
   273                              <1> .clkRead:           ;Function 4
   274 000010BC B005                <1>     mov al, 05h ;Bad request structure length?
   275 000010BE 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   276 000010C1 75E6                <1>     jne .clkWriteErrorCode
   277                              <1> 
   278 000010C3 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   279 000010C6 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   280 000010CA 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   281 000010D1 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   282 000010D5 30E4                <1>     xor ah, ah
   283 000010D7 CD3A                <1>     int 3Ah         ;Read the system timer
   284 000010D9 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   285 000010DB 740D                <1>     jz .clkr1       ;Nope, now just time 
   286 000010DD 30E4                <1>     xor ah, ah
   287                              <1>     ;This works as al should keep count of the # of days passed since last read
   288 000010DF 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   289 000010E3 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   290                              <1> .clkr1:
   291 000010EA 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   292 000010ED 0FB7D2              <1>     movzx edx, dx
   293 000010F0 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   294 000010F2 89D0                <1>     mov eax, edx
   295 000010F4 31D2                <1>     xor edx, edx
   296 000010F6 89D8                <1>     mov eax, ebx
   297 000010F8 B944040000          <1>     mov ecx, 1092   
   298 000010FD F7F1                <1>     div ecx
   299 000010FF 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   300 00001102 89D0                <1>     mov eax, edx    ;Get remainder in eax
   301 00001104 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   302 00001108 31D2                <1>     xor edx, edx
   303 0000110A B95B000000          <1>     mov ecx, 91 ;5*18.2
   304 0000110F F7F1                <1>     div ecx
   305 00001111 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   306 00001114 89D0                <1>     mov eax, edx    ;Get remainder in eax
   307                              <1>     ;lea eax, dword [eax + 4*eax]
   308                              <1>     ;add eax, edx    ;Essentially multiply by 6
   309 00001116 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   310 00001119 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   311 0000111C E98EFFFFFF          <1>     jmp .clkExit
   312                              <1> 
   313                              <1> .clkInputStatus:    ;Function 6
   314                              <1> ;Always return ready
   315 00001121 B005                <1>     mov al, 05h ;Bad request structure length?
   316 00001123 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   317 00001126 7581                <1>     jne .clkWriteErrorCode
   318 00001128 E982FFFFFF          <1>     jmp .clkExit
   319                              <1> .clkFlushInputBuffers:  ;Function 7
   320                              <1> ;Always return done immediately
   321 0000112D B005                <1>     mov al, 05h ;Bad request structure length?
   322 0000112F 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   323 00001132 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   324 00001138 E972FFFFFF          <1>     jmp .clkExit
   325                              <1> 
   326                              <1> .clkWrite:          ;Functions 8 and 9
   327 0000113D B005                <1>     mov al, 05h ;Bad request structure length?
   328 0000113F 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   329 00001142 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   330                              <1> 
   331 00001148 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   332 0000114B 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   333 0000114F 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   334 00001153 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   335                              <1> 
   336 0000115A 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   337 0000115C 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   338 00001160 B105                <1>     mov cl, 5
   339 00001162 F6F1                <1>     div cl          ;Divide al by 5
   340 00001164 30E4                <1>     xor ah, ah      ;Remove the remainder
   341 00001166 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   342                              <1> ;Using the decimal part of this formula for the low count
   343                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   344 00001168 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   345 0000116B B912000000          <1>     mov ecx, 18
   346 00001170 F7E1                <1>     mul ecx  
   347 00001172 01C3                <1>     add ebx, eax
   348                              <1> 
   349 00001174 31D2                <1>     xor edx, edx
   350 00001176 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   351 0000117A B944040000          <1>     mov ecx, 1092
   352 0000117F F7E1                <1>     mul ecx
   353 00001181 01C3                <1>     add ebx, eax
   354 00001183 89DA                <1>     mov edx, ebx    ;edx now has low count
   355 00001185 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   356 00001189 B401                <1>     mov ah, 01h     ;Set the system time
   357 0000118B CD3A                <1>     int 3Ah
   358                              <1> 
   359 0000118D 4889F3              <1>     mov rbx, rsi
   360 00001190 E91AFFFFFF          <1>     jmp .clkExit
   361                              <1> 
   362                              <1> .clkBCDtoHex:
   363                              <1> ;Converts a BCD value to a Hex byte
   364                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   365 00001195 51                  <1>     push rcx
   366 00001196 0FB6C0              <1>     movzx eax, al   ;Zero extend
   367 00001199 89C1                <1>     mov ecx, eax    ;Save al in ecx
   368 0000119B 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   369 000011A0 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   370 000011A6 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   371                              <1> .cbth0:
   372 000011A9 050A000000          <1>     add eax, 10
   373 000011AE E2F9                <1>     loop .cbth0
   374 000011B0 59                  <1>     pop rcx
   375 000011B1 C3                  <1>     ret
   376                              <1> 
   377                              <1> .clkHexToBCD:
   378                              <1> ;Converts a Hex byte into two BCD digits
   379                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   380 000011B2 51                  <1>     push rcx
   381 000011B3 0FB6C0              <1>     movzx eax, al   ;Zero extend
   382 000011B6 31C9                <1>     xor ecx, ecx
   383                              <1> .chtb0:
   384 000011B8 3D0A000000          <1>     cmp eax, 10
   385 000011BD 7209                <1>     jb .chtb1
   386 000011BF 2D0A000000          <1>     sub eax, 10
   387 000011C4 FFC1                <1>     inc ecx
   388 000011C6 EBF0                <1>     jmp short .chtb0
   389                              <1> .chtb1:
   390 000011C8 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   391 000011CB 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   392 000011CD 59                  <1>     pop rcx
   393 000011CE C3                  <1>     ret
   394 000011CF 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   395                              <1> ;When counting the number of days, first compute the number of years since
   396                              <1> ; 1980 and your year. 
   397                              <1> ;Then, using the table below, find the number of leap years between 1980
   398                              <1> ; and (YourYear - 1). 
   399                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   400                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   401                              <1> ;Use the months table to get the number of days in a normal month as leap 
   402                              <1> ; years are added using the previous comment.
   403                              <1> ;Finally check if the date is after 28th Feb. If it is, check if your year is 
   404                              <1> ; a leap year using the table. If it is, add an extra day.
   405                              <1> .clkLeapYears:
   406 000011D1 0004080C1014181C20- <1>     db 00, 04, 08, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 
   406 000011DA 24282C30            <1>
   407 000011DE 34383C4044484C5054- <1>     db 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96
   407 000011E7 585C60              <1>
   408                              <1> .clkMonths:
   409 000011EA 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   409 000011F3 1F1E1F              <1>
   410                              <1> ;COM Driver headers and main interrupt strat
   411                              <1> com1Intr:
   412 000011F6 C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   413 000011FD EB19                <1>     jmp short comIntr
   414                              <1> com2Intr:
   415 000011FF C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   416 00001206 EB10                <1>     jmp short comIntr
   417                              <1> com3Intr:
   418 00001208 C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   419 0000120F EB07                <1>     jmp short comIntr
   420                              <1> com4Intr:
   421 00001211 C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   422                              <1> comIntr:
   423 00001218 50                  <1>     push rax
   424 00001219 53                  <1>     push rbx
   425 0000121A 51                  <1>     push rcx
   426 0000121B 52                  <1>     push rdx
   427 0000121C 56                  <1>     push rsi
   428 0000121D 57                  <1>     push rdi
   429 0000121E 488B1DF5FCFFFF      <1>     mov rbx, qword [reqHdrPtr]
   430 00001225 B003                <1>     mov al, 03h ;Unknown Command
   431 00001227 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   432 0000122B 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   433                              <1> 
   434 0000122D 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   435 00001230 3C04                <1>     cmp al, 4   ;Read Character(s)
   436 00001232 7462                <1>     jz .comRead
   437 00001234 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   438 00001236 0F849B000000        <1>     jz .comNondestructiveRead   
   439 0000123C 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   440 0000123E 0F8484000000        <1>     jz .comReadInputStatus
   441 00001244 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   442 00001246 0F84B9000000        <1>     jz .comFlushInputBuffers
   443 0000124C 3C08                <1>     cmp al, 8
   444 0000124E 0F84DB000000        <1>     jz .comWrite
   445 00001254 3C09                <1>     cmp al, 9
   446 00001256 0F84D3000000        <1>     jz .comWrite
   447 0000125C 3C0A                <1>     cmp al, 0Ah
   448 0000125E 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   449 00001264 EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   450                              <1> .comErrorNoCount:
   451 00001266 B002                <1>     mov al, 02h ;Unknown device
   452 00001268 EB19                <1>     jmp short .comWriteErrorCode
   453                              <1> .comReadError:
   454 0000126A BA0B000000          <1>     mov edx, 0Bh
   455                              <1> .comWriteError:
   456 0000126F BA0A000000          <1>     mov edx, 0Ah
   457                              <1> .comError:
   458 00001274 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   459 00001277 B902000000          <1>     mov ecx, 02h    ;Unknown device
   460 0000127C 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   461 0000127E 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   462 00001281 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   463                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   464 00001283 B480                <1>     mov ah, 80h ;Set error bit
   465 00001285 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   466                              <1> .comExit:
   467 00001289 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   468 0000128F 5F                  <1>     pop rdi
   469 00001290 5E                  <1>     pop rsi
   470 00001291 5A                  <1>     pop rdx
   471 00001292 59                  <1>     pop rcx
   472 00001293 5B                  <1>     pop rbx
   473 00001294 58                  <1>     pop rax
   474 00001295 C3                  <1>     ret
   475                              <1> 
   476                              <1> .comRead:
   477 00001296 B005                <1>     mov al, 05h ;Bad request structure length?
   478 00001298 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   479 0000129B 75E6                <1>     jne .comWriteErrorCode
   480                              <1> 
   481 0000129D 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   482 000012A1 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   483                              <1> .cr1:
   484 000012A3 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   485 000012A6 741B                <1>     je .cre2
   486                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   487 000012A8 B802000000          <1>     mov eax, 02h    ;Recieve 
   488 000012AD 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   489 000012B3 6698                <1>     cbw     ;Zero extend to upper byte
   490 000012B5 CD34                <1>     int 34h ;Recieve Char
   491 000012B7 72BB                <1>     jc .comError
   492 000012B9 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   493 000012BC 74EA                <1>     je .cr11
   494 000012BE AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   495 000012BF FFC1                <1>     inc ecx
   496 000012C1 EBE0                <1>     jmp short .cr1
   497                              <1> .cre2:
   498 000012C3 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   499 000012C6 EBC1                <1>     jmp short .comExit
   500                              <1> 
   501                              <1> .comReadInputStatus:
   502 000012C8 B005                <1>     mov al, 05h ;Bad request structure length?
   503 000012CA 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   504 000012CD 75B4                <1>     jne .comWriteErrorCode
   505 000012CF 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   506 000012D5 EBB2                <1>     jmp short .comExit
   507                              <1> 
   508                              <1> .comNondestructiveRead:
   509                              <1> ;Acts like a "read one character if there is one" function
   510 000012D7 B005                <1>     mov al, 05h ;Bad request structure length?
   511 000012D9 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   512 000012DC 75A5                <1>     jne .comWriteErrorCode
   513                              <1> .cndr1:
   514 000012DE B802000000          <1>     mov eax, 02h    ;Recieve 
   515 000012E3 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   516 000012E9 6698                <1>     cbw     ;Zero extend to upper byte
   517 000012EB CD34                <1>     int 34h ;Recieve Char
   518 000012ED 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   519 000012F3 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   520 000012F6 7405                <1>     je .cndr2
   521 000012F8 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Get next char
   522 000012FB EB8C                <1>     jmp short .comExit
   523                              <1> .cndr2:
   524 000012FD 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 200h ;Busy bit set
   525 00001303 EB84                <1>     jmp short .comExit
   526                              <1> 
   527                              <1> .comFlushInputBuffers:
   528 00001305 B005                <1>     mov al, 05h ;Bad request structure length?
   529 00001307 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   530 0000130A 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   531                              <1> .cfib0:
   532 00001310 8A1584000000        <1>     mov dl, byte [.comDevice]
   533 00001316 6698                <1>     cbw
   534 00001318 B802000000          <1>     mov eax, 02h    ;Recieve
   535 0000131D CD34                <1>     int 34h
   536 0000131F 0F8241FFFFFF        <1>     jc .comErrorNoCount
   537 00001325 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   538 00001328 75E6                <1>     jne .cfib0
   539 0000132A E95AFFFFFF          <1>     jmp .comExit
   540                              <1> 
   541                              <1> .comWrite:
   542 0000132F B005                <1>     mov al, 05h ;Bad request structure length?
   543 00001331 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   544 00001334 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   545                              <1> 
   546 0000133A 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   547 0000133E 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   548                              <1> .cw1: 
   549 00001340 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   550 00001343 7417                <1>     je .cw2
   551 00001345 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   552 00001346 B401                <1>     mov ah, 01h ;Move function number into ah
   553 00001348 8A154C000000        <1>     mov dl, byte [.comDevice]
   554 0000134E 6698                <1>     cbw     ;Zero extend to upper byte
   555 00001350 CD34                <1>     int 34h ;Transmit char
   556 00001352 0F821CFFFFFF        <1>     jc .comError
   557 00001358 FFC1                <1>     inc ecx
   558 0000135A EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   559                              <1> .cw2:
   560 0000135C 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   561 0000135F E925FFFFFF          <1>     jmp .comExit
   562                              <1> 
   563                              <1> .comOutputStatus:
   564                              <1> ;Read MODEM status
   565 00001364 B005                <1>     mov al, 05h ;Bad request structure length?
   566 00001366 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   567 00001369 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   568                              <1> 
   569 0000136F 8A1525000000        <1>     mov dl, byte [.comDevice]
   570 00001375 6698                <1>     cbw     ;Zero extend to upper byte
   571 00001377 B403                <1>     mov ah, 03h     ;Get status
   572 00001379 CD34                <1>     int 34h
   573 0000137B 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   574 00001381 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   575 00001386 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   576 00001389 F7D0                <1>     not eax      ;Bitwise inversion
   577 0000138B 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   578 00001390 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   579 00001395 E9EFFEFFFF          <1>     jmp .comExit
   580 0000139A 00                  <1> .comDevice   db 0
   581                              <1> 
   582                              <1> msdDriver:
   583 0000139B 50                  <1>     push rax
   584 0000139C 53                  <1>     push rbx
   585 0000139D 51                  <1>     push rcx
   586 0000139E 52                  <1>     push rdx
   587 0000139F 56                  <1>     push rsi
   588 000013A0 57                  <1>     push rdi
   589 000013A1 55                  <1>     push rbp
   590 000013A2 4150                <1>     push r8
   591 000013A4 488B1D6FFBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
   592 000013AB 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   593 000013AF B003                <1>     mov al, 03h
   594 000013B1 0F87F9000000        <1>     ja .msdWriteErrorCode ;If yes, error!
   595 000013B7 B001                <1>     mov al, 01h ;Unknown Unit Error
   596 000013B9 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
   597 000013BD 0F87ED000000        <1>     ja .msdWriteErrorCode ;If yes, error!
   598 000013C3 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
   599 000013C6 84C0                <1>     test al, al
   600 000013C8 0F84F8000000        <1>     jz .msdInit
   601 000013CE 3C01                <1>     cmp al, 01
   602 000013D0 0F84C9010000        <1>     jz .msdMedChk
   603 000013D6 3C02                <1>     cmp al, 02
   604 000013D8 0F8439020000        <1>     jz .msdBuildBPB
   605 000013DE 3C03                <1>     cmp al, 03
   606 000013E0 0F84A6020000        <1>     jz .msdIOCTLRead
   607 000013E6 3C04                <1>     cmp al, 04
   608 000013E8 0F84AE020000        <1>     jz .msdRead
   609 000013EE 3C08                <1>     cmp al, 08
   610 000013F0 0F84E2020000        <1>     jz .msdWrite
   611 000013F6 3C09                <1>     cmp al, 09
   612 000013F8 0F8416030000        <1>     jz .msdWriteVerify
   613 000013FE 3C0C                <1>     cmp al, 12
   614 00001400 0F8457030000        <1>     jz .msdIOCTLWrite
   615 00001406 3C0D                <1>     cmp al, 13
   616 00001408 0F845F030000        <1>     jz .msdDevOpen
   617 0000140E 3C0E                <1>     cmp al, 14
   618 00001410 0F8476030000        <1>     jz .msdDevClose
   619 00001416 3C0F                <1>     cmp al, 15
   620 00001418 0F848D030000        <1>     jz .msdRemovableMedia
   621 0000141E 3C13                <1>     cmp al, 19
   622 00001420 0F84B2030000        <1>     jz .msdGenericIOCTL
   623 00001426 3C17                <1>     cmp al, 23
   624 00001428 0F84BA030000        <1>     jz .msdGetLogicalDev
   625 0000142E 3C18                <1>     cmp al, 24
   626 00001430 0F84CB030000        <1>     jz .msdSetLogicalDev
   627 00001436 EB7E                <1>     jmp short .msdDriverExit    ;All other valid functions exit done
   628                              <1> .msdIOError:  ;In Read and Write errors, rbp points to the dev struc
   629 00001438 4889EB              <1>     mov rbx, rbp
   630 0000143B 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
   631 0000143E 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
   632 00001440 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
   633                              <1> ;Now fall through to general error
   634                              <1> .msdGenDiskError:
   635 00001443 B401                <1>     mov ah, 01h
   636 00001445 30D2                <1>     xor dl, dl  ;Work around bug that fails request if dl > 7Fh
   637 00001447 CD33                <1>     int 33h ;Read status of last operation
   638 00001449 80FC06              <1>     cmp ah, 06h ;Mock Seek response (device not present)
   639 0000144C B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
   640 0000144E 7460                <1>     je .msdWriteErrorCode 
   641 00001450 B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
   642 00001452 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
   643 00001455 7459                <1>     je .msdWriteErrorCode 
   644 00001457 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
   645 0000145A 7454                <1>     je .msdWriteErrorCode
   646                              <1> ;Device Not Ready
   647 0000145C B002                <1>     mov al, 02h  ;Device not ready code
   648 0000145E 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   649 00001461 744D                <1>     je .msdWriteErrorCode
   650 00001463 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   651 00001467 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   652                              <1> ;Write Protected
   653 0000146B 30C0                <1>     xor al, al
   654 0000146D 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   655 00001472 743C                <1>     je .msdWriteErrorCode
   656                              <1> ;CRC Error
   657 00001474 B004                <1>     mov al, 04h     ;CRC error code
   658 00001476 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   659 0000147B 7433                <1>     je .msdWriteErrorCode
   660 0000147D 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   661 00001482 742C                <1>     je .msdWriteErrorCode
   662 00001484 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   663 00001489 7425                <1>     je .msdWriteErrorCode
   664                              <1> ;Seek Error
   665 0000148B B006                <1>     mov al, 06h     ;Seek error code
   666 0000148D 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   667 00001490 741E                <1>     je .msdWriteErrorCode
   668                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   669                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   670 00001492 B007                <1>     mov al, 07h
   671 00001494 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   672 00001497 7417                <1>     je .msdWriteErrorCode
   673                              <1> ;Sector Not Found
   674 00001499 B008                <1>     mov al, 08h     ;Sector not found code
   675 0000149B 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   676 0000149E 7410                <1>     je .msdWriteErrorCode
   677                              <1> ;Write faults
   678 000014A0 B00A                <1>     mov al, 0Ah     ;Write fault
   679 000014A2 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   680 000014A5 7409                <1>     je .msdWriteErrorCode
   681                              <1> ;Read faults
   682 000014A7 B00B                <1>     mov al, 0Bh     ;Read fault
   683 000014A9 80F911              <1>     cmp cl, 11h     ;Read error
   684 000014AC 7402                <1>     je .msdWriteErrorCode
   685                              <1> ;General Errors
   686 000014AE B00C                <1>     mov al, 0Ch     ;Everything else is general error
   687                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   688 000014B0 B480                <1>     mov ah, 80h ;Set error bit
   689 000014B2 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   690                              <1> .msdDriverExit:
   691 000014B6 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
   692 000014BC 4158                <1>     pop r8
   693 000014BE 5D                  <1>     pop rbp
   694 000014BF 5F                  <1>     pop rdi
   695 000014C0 5E                  <1>     pop rsi
   696 000014C1 5A                  <1>     pop rdx
   697 000014C2 59                  <1>     pop rcx
   698 000014C3 5B                  <1>     pop rbx
   699 000014C4 58                  <1>     pop rax
   700 000014C5 C3                  <1>     ret
   701                              <1> .msdInit:            ;Function 0
   702 000014C6 B005                <1>     mov al, 05h ;Bad request structure length
   703 000014C8 803B1F              <1>     cmp byte [rbx + drvReqHdr.hdrlen], initReqPkt_size
   704 000014CB 75E3                <1>     jne .msdWriteErrorCode
   705                              <1> 
   706 000014CD 488D2DF4050000      <1>     lea rbp, endptr
   707 000014D4 48896B0E            <1>     mov qword [rbx + initReqPkt.endptr], rbp    ;Where the end is gonna be
   708 000014D8 488D2D69030000      <1>     lea rbp, .msdBPBTbl
   709 000014DF 48896B16            <1>     mov qword [rbx + initReqPkt.optptr], rbp    ;Where bpb tbl is gonna be
   710                              <1> 
   711 000014E3 4889DD              <1>     mov rbp, rbx ;Save the req block ptr in rbp
   712 000014E6 31D2                <1>     xor edx, edx  ;Start from device zero
   713 000014E8 88550D              <1>     mov byte [rbp + initReqPkt.numunt], dl   ;Zero this field, max 5
   714                              <1> .mi0:   ;Now check each device for partitions
   715 000014EB 807D0D05            <1>     cmp byte [rbp + initReqPkt.numunt], 5
   716 000014EF 746C                <1>     je .msdExit ;IF we are at 5 now, we exit
   717 000014F1 B482                <1>     mov ah, 82h ;LBA read
   718 000014F3 B001                <1>     mov al, 1   ;1 sector
   719 000014F5 B900000000          <1>     mov ecx, 0  ;Read sector 0
   720 000014FA 488D1D(30040000)    <1>     lea rbx, msdTempBuffer  ;Get address of this space
   721 00001501 CD33                <1>     int 33h
   722 00001503 0F828E000000        <1>     jc .msdInitError
   723                              <1> ;Now we verify if this is a BPB. Removable devices can't be partitioned (yet)
   724                              <1> ;1) Check byte 0 for EBh (short jmp) and byte 2 for a 90h (nop).
   725 00001509 8A03                <1>     mov al, byte [rbx]
   726 0000150B 8A6302              <1>     mov ah, byte [rbx + 2]
   727 0000150E 663DEB90            <1>     cmp ax, 090EBh
   728 00001512 7573                <1>     jne .mimbr
   729                              <1> ;Valid BPB found! Copy to internal table and inc lastdrive
   730 00001514 4889DE              <1>     mov rsi, rbx
   731 00001517 B878000000          <1>     mov eax, bpbEx_size
   732 0000151C 89D1                <1>     mov ecx, edx    ;Temporarily save dl in ecx
   733 0000151E F7E2                <1>     mul edx
   734 00001520 89CA                <1>     mov edx, ecx
   735 00001522 488D3D47030000      <1>     lea rdi, .msdBPBblks
   736 00001529 4801C7              <1>     add rdi, rax
   737 0000152C B978000000          <1>     mov ecx, bpbEx_size
   738 00001531 4889F8              <1>     mov rax, rdi    ;Save the entry address in rax
   739 00001534 F3A4                <1>     rep movsb   ;Copy the bpb into the bpb table
   740 00001536 488D3D0B030000      <1>     lea rdi, .msdBPBTbl
   741 0000153D 488D3CD7            <1>     lea rdi, qword [rdi + 8*rdx]
   742 00001541 488907              <1>     mov qword [rdi], rax
   743 00001544 488D3DF3020000      <1>     lea rdi, .msdBIOSmap
   744 0000154B 4801D7              <1>     add rdi, rdx    ;rdx contains a number, table is a list of bytes
   745 0000154E 8817                <1>     mov byte [rdi], dl
   746 00001550 FE450D              <1>     inc byte [rbp + initReqPkt.numunt]
   747 00001553 FEC2                <1>     inc dl
   748 00001555 3A15(09000000)      <1>     cmp dl, byte [numRemMSD] ;Once these are equal, we have processed last dev
   749 0000155B 758E                <1>     jne .mi0
   750                              <1> .msdExit:
   751                              <1> ;If one device only, copy its BPB pointer and drive number
   752                              <1> ;When HDD support implemented, this will check the number of remdevs not lastdrv
   753 0000155D 807D0D01            <1>     cmp byte [rbp + initReqPkt.numunt], 1
   754 00001561 751C                <1>     jne .msdexit1
   755                              <1> ;Here ONLY if one device found
   756 00001563 488D35DE020000      <1>     lea rsi, .msdBPBTbl
   757 0000156A 488D7E08            <1>     lea rdi, qword [rsi + 8]    ;Point to next entry
   758 0000156E 48A5                <1>     movsq   ;Copy pointer
   759 00001570 488D35C7020000      <1>     lea rsi, .msdBIOSmap
   760 00001577 488D7E01            <1>     lea rdi, qword [rsi + 1]
   761 0000157B A4                  <1>     movsb   ;Copy byte
   762 0000157C FE450D              <1>     inc byte [rbp + initReqPkt.numunt]
   763                              <1> .msdexit1:
   764 0000157F 4889EB              <1>     mov rbx, rbp
   765 00001582 E92FFFFFFF          <1>     jmp .msdDriverExit
   766                              <1> .mimbr:
   767                              <1> ;Goto next device without incrementing LASTDRIVE
   768 00001587 FEC2                <1>     inc dl
   769 00001589 3A15(09000000)      <1>     cmp dl, byte [numRemMSD] ;Once these are equ, we have processed last dev
   770 0000158F 0F8556FFFFFF        <1>     jne .mi0
   771 00001595 EBC6                <1>     jmp short .msdExit
   772                              <1> .msdInitError:
   773 00001597 4889EB              <1>     mov rbx, rbp
   774 0000159A E9A4FEFFFF          <1>     jmp .msdGenDiskError
   775                              <1> .msdMedChk:          ;Function 1
   776                              <1> ;Once the BIOS function is implmented that reads the changeline, use that!
   777                              <1> ;For BIOSes that dont support the changeline, the following procedure will 
   778                              <1> ; suffice.
   779 0000159F B005                <1>     mov al, 05h ;Bad request structure length
   780 000015A1 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   781 000015A4 0F8506FFFFFF        <1>     jne .msdWriteErrorCode
   782                              <1> 
   783 000015AA 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   784 000015AF 488D0D88020000      <1>     lea rcx, .msdBIOSmap
   785 000015B6 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   786 000015B9 F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   787 000015BC 7550                <1>     jnz .mmcNoChange
   788                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   789 000015BE B416                <1>     mov ah, 16h 
   790 000015C0 CD33                <1>     int 33h
   791 000015C2 0F827BFEFFFF        <1>     jc .msdGenDiskError
   792 000015C8 80FC80              <1>     cmp ah, 80h
   793 000015CB 740E                <1>     je .mmcNoChangeLine
   794 000015CD 80FC86              <1>     cmp ah, 86h
   795 000015D0 7409                <1>     je .mmcNoChangeLine
   796 000015D2 84E4                <1>     test ah, ah ;No change?
   797 000015D4 7438                <1>     jz .mmcNoChange
   798 000015D6 F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   799 000015D9 7516                <1>     jnz .mmcChange
   800                              <1> ;If nothing, fall through and test manually, should never happen though
   801                              <1> .mmcNoChangeLine:
   802                              <1> ;Now we test Media Descriptor
   803 000015DB 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   804 000015DE 488D3D63020000      <1>     lea rdi, .msdBPBTbl
   805 000015E5 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax]
   806 000015E9 488B3F              <1>     mov rdi, qword [rdi]    ;Dereference rdi
   807 000015EC 385715              <1>     cmp byte [rdi + bpb32.media], dl    ;Compare media descriptor bytes
   808 000015EF 7414                <1>     je .mmcUnsure
   809                              <1> .mmcChange:
   810 000015F1 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   811 000015F5 488D0538020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   812 000015FC 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   813 00001600 E9B1FEFFFF          <1>     jmp .msdDriverExit
   814                              <1> .mmcUnsure:
   815 00001605 C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   816 00001609 E9A8FEFFFF          <1>     jmp .msdDriverExit
   817                              <1> .mmcNoChange:
   818 0000160E C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   819 00001612 E99FFEFFFF          <1>     jmp .msdDriverExit
   820                              <1> 
   821                              <1> .msdBuildBPB:        ;Function 2
   822 00001617 B005                <1>     mov al, 05h ;Bad request structure length
   823 00001619 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   824 0000161C 0F858EFEFFFF        <1>     jne .msdWriteErrorCode
   825                              <1> 
   826 00001622 4889DE              <1>     mov rsi, rbx
   827 00001625 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   828 0000162A 488D0D0D020000      <1>     lea rcx, .msdBIOSmap
   829 00001631 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   830 00001634 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   831 00001638 31C9                <1>     xor ecx, ecx    ;Read Sector 0
   832 0000163A B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   833 0000163F CD33                <1>     int 33h
   834 00001641 0F82FCFDFFFF        <1>     jc .msdGenDiskError
   835                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   836 00001647 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   837 0000164B 7418                <1>     je .mbbpb0
   838 0000164D 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   839 00001651 7412                <1>     je .mbbpb0
   840 00001653 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   841 00001657 740C                <1>     je .mbbpb0
   842 00001659 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   843 0000165D B007                <1>     mov al, 07h ;Unknown media error code
   844 0000165F 0F824BFEFFFF        <1>     jb .msdWriteErrorCode
   845                              <1> .mbbpb0:
   846 00001665 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   847 00001668 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   848 0000166D 488D3DD4010000      <1>     lea rdi, .msdBPBTbl
   849 00001674 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   850 00001678 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   851 0000167B 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   852 0000167F B90F000000          <1>     mov ecx, bpbEx_size/8
   853 00001684 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   854 00001687 E92AFEFFFF          <1>     jmp .msdDriverExit
   855                              <1> .msdIOCTLRead:       ;Function 3, returns done
   856 0000168C B005                <1>     mov al, 05h ;Bad request structure length
   857 0000168E 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   858 00001691 0F8519FEFFFF        <1>     jne .msdWriteErrorCode
   859                              <1> 
   860 00001697 E91AFEFFFF          <1>     jmp .msdDriverExit
   861                              <1> .msdRead:            ;Function 4
   862                              <1> ;Will read one sector at a time.
   863 0000169C B005                <1>     mov al, 05h ;Bad request structure length
   864 0000169E 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   865 000016A1 0F8509FEFFFF        <1>     jne .msdWriteErrorCode
   866                              <1> 
   867 000016A7 4889DD              <1>     mov rbp, rbx
   868 000016AA 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   869                              <1> .msdr0:
   870 000016AC B682                <1>     mov dh, 82h ;LBA Read Sectors
   871 000016AE E867010000          <1>     call .msdBlkIOCommon
   872 000016B3 0F827FFDFFFF        <1>     jc .msdIOError
   873 000016B9 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   874 000016C1 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   875 000016C9 FFC6                <1>     inc esi
   876 000016CB 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   877 000016CE 75DC                <1>     jne .msdr0
   878 000016D0 4889EB              <1>     mov rbx, rbp
   879 000016D3 E9DEFDFFFF          <1>     jmp .msdDriverExit
   880                              <1> .msdWrite:           ;Function 8
   881                              <1> ;Will write one sector at a time.
   882 000016D8 B005                <1>     mov al, 05h ;Bad request structure length
   883 000016DA 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   884 000016DD 0F85CDFDFFFF        <1>     jne .msdWriteErrorCode
   885                              <1> 
   886 000016E3 4889DD              <1>     mov rbp, rbx
   887 000016E6 31F6                <1>     xor esi, esi  ;Set counter to zero
   888                              <1> .msdw0:
   889 000016E8 B683                <1>     mov dh, 83h ;LBA Write Sectors
   890 000016EA E82B010000          <1>     call .msdBlkIOCommon
   891 000016EF 0F8243FDFFFF        <1>     jc .msdIOError
   892 000016F5 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   893 000016FD 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   894 00001705 FFC6                <1>     inc esi
   895 00001707 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   896 0000170A 75DC                <1>     jne .msdw0
   897 0000170C 4889EB              <1>     mov rbx, rbp
   898 0000170F E9A2FDFFFF          <1>     jmp .msdDriverExit
   899                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   900                              <1> ;Will write one sector at a time and then verify it.
   901 00001714 B005                <1>     mov al, 05h ;Bad request structure length
   902 00001716 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   903 00001719 0F8591FDFFFF        <1>     jne .msdWriteErrorCode
   904                              <1> 
   905 0000171F 4889DD              <1>     mov rbp, rbx
   906 00001722 31F6                <1>     xor esi, esi  ;Set counter to zero
   907                              <1> .msdwv0:
   908 00001724 B683                <1>     mov dh, 83h ;LBA Write Sectors
   909 00001726 E8EF000000          <1>     call .msdBlkIOCommon
   910 0000172B 0F8207FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   911 00001731 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   912 00001733 E8E2000000          <1>     call .msdBlkIOCommon
   913 00001738 0F82FAFCFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   914 0000173E 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   915 00001746 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   916 0000174E FFC6                <1>     inc esi
   917 00001750 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   918 00001753 75CF                <1>     jne .msdwv0
   919 00001755 4889EB              <1>     mov rbx, rbp
   920 00001758 E959FDFFFF          <1>     jmp .msdDriverExit
   921                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   922 0000175D B005                <1>     mov al, 05h ;Bad request structure length
   923 0000175F 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   924 00001762 0F8548FDFFFF        <1>     jne .msdWriteErrorCode
   925                              <1> 
   926 00001768 E949FDFFFF          <1>     jmp .msdDriverExit
   927                              <1> .msdDevOpen:         ;Function 13
   928 0000176D B005                <1>     mov al, 05h ;Bad request structure length
   929 0000176F 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   930 00001772 0F8538FDFFFF        <1>     jne .msdWriteErrorCode
   931                              <1> 
   932 00001778 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   933 0000177D 488D0DBF000000      <1>     lea rcx, .msdHdlCnt
   934 00001784 FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   935 00001787 E92AFDFFFF          <1>     jmp .msdDriverExit
   936                              <1> .msdDevClose:        ;Function 14
   937 0000178C B005                <1>     mov al, 05h ;Bad request structure length
   938 0000178E 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   939 00001791 0F8519FDFFFF        <1>     jne .msdWriteErrorCode
   940                              <1> 
   941 00001797 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   942 0000179C 488D0DA0000000      <1>     lea rcx, .msdHdlCnt
   943 000017A3 FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   944 000017A6 E90BFDFFFF          <1>     jmp .msdDriverExit
   945                              <1> .msdRemovableMedia:  ;Function 15
   946 000017AB B005                <1>     mov al, 05h ;Bad request structure length
   947 000017AD 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   948 000017B0 0F85FAFCFFFF        <1>     jne .msdWriteErrorCode
   949                              <1> 
   950 000017B6 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   951 000017BB 488D0D7C000000      <1>     lea rcx, .msdBIOSmap
   952 000017C2 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   953 000017C5 A880                <1>     test al, 80h
   954 000017C7 0F84E9FCFFFF        <1>     jz .msdDriverExit   ;If removable, busy bit is clear
   955 000017CD 66C743030002        <1>     mov word [rbx + remMediaReqPkt.status], 0200h ;Set Busy bit
   956 000017D3 E9DEFCFFFF          <1>     jmp .msdDriverExit
   957                              <1> .msdGenericIOCTL:    ;Function 19
   958 000017D8 B005                <1>     mov al, 05h ;Bad request structure length
   959 000017DA 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   960 000017DD 0F85CDFCFFFF        <1>     jne .msdWriteErrorCode
   961                              <1> 
   962 000017E3 E9CEFCFFFF          <1>     jmp .msdDriverExit
   963                              <1> .msdGetLogicalDev:   ;Function 23
   964 000017E8 B005                <1>     mov al, 05h ;Bad request structure length
   965 000017EA 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   966 000017ED 0F85BDFCFFFF        <1>     jne .msdWriteErrorCode
   967                              <1> 
   968 000017F3 8A0544000000        <1>     mov al, byte [.msdCurDev]
   969 000017F9 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   970 000017FC E9B5FCFFFF          <1>     jmp .msdDriverExit
   971                              <1> .msdSetLogicalDev:   ;Function 24
   972 00001801 B005                <1>     mov al, 05h ;Bad request structure length
   973 00001803 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   974 00001806 0F85A4FCFFFF        <1>     jne .msdWriteErrorCode
   975                              <1> 
   976 0000180C 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   977 0000180F 880528000000        <1>     mov byte [.msdCurDev], al
   978 00001815 E99CFCFFFF          <1>     jmp .msdDriverExit
   979                              <1> 
   980                              <1> .msdBlkIOCommon:  ;Does block IO
   981                              <1> ;Called with rbp containing old rbx value and ah with function number
   982                              <1> ;Error handled by caller
   983                              <1> ;Sector count handled by caller
   984                              <1> ;Called with dh = BIOS function number
   985 0000181A 480FB64501          <1>     movzx rax, byte [rbp + ioReqPkt.unitnm]
   986 0000181F 8A90[3E180000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   987 00001825 488B4D1A            <1>     mov rcx, qword [rbp + ioReqPkt.strtsc]  ;Get start sector
   988 00001829 488B5D0E            <1>     mov rbx, qword [rbp + ioReqPkt.bufptr]  ;Get Memory Buffer
   989 0000182D 88F4                <1>     mov ah, dh
   990 0000182F B001                <1>     mov al, 01h ;Do one sector at a time 
   991 00001831 CD33                <1>     int 33h
   992 00001833 C3                  <1>     ret
   993                              <1> 
   994 00001834 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   995                              <1> ;LASTDRIVE default is 5
   996 0000183D 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   997                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   998 0000183E FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
   999 00001843 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
  1000 00001848 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
  1000 00001851 000000000000000000- <1>
  1000 0000185A 000000000000000000- <1>
  1000 00001863 000000000000000000- <1>
  1000 0000186C 00000000            <1>
  1001 00001870 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
  1001 00001879 000000000000000000- <1>
  1001 00001882 000000000000000000- <1>
  1001 0000188B 000000000000000000- <1>
  1001 00001894 000000000000000000- <1>
  1001 0000189D 000000000000000000- <1>
  1001 000018A6 000000000000000000- <1>
  1001 000018AF 000000000000000000- <1>
  1001 000018B8 000000000000000000- <1>
  1001 000018C1 000000000000000000- <1>
  1001 000018CA 000000000000000000- <1>
  1001 000018D3 000000000000000000- <1>
  1001 000018DC 000000000000000000- <1>
  1001 000018E5 000000000000000000- <1>
  1001 000018EE 000000000000000000- <1>
  1001 000018F7 000000000000000000- <1>
  1001 00001900 000000000000000000- <1>
  1001 00001909 000000000000000000- <1>
  1001 00001912 000000000000000000- <1>
  1001 0000191B 000000000000000000- <1>
  1001 00001924 000000000000000000- <1>
  1001 0000192D 000000000000000000- <1>
  1001 00001936 000000000000000000- <1>
  1001 0000193F 000000000000000000- <1>
  1001 00001948 000000000000000000- <1>
  1001 00001951 000000000000000000- <1>
  1001 0000195A 000000000000000000- <1>
  1001 00001963 000000000000000000- <1>
  1001 0000196C 000000000000000000- <1>
  1001 00001975 000000000000000000- <1>
  1001 0000197E 000000000000000000- <1>
  1001 00001987 000000000000000000- <1>
  1001 00001990 000000000000000000- <1>
  1001 00001999 000000000000000000- <1>
  1001 000019A2 000000000000000000- <1>
  1001 000019AB 000000000000000000- <1>
  1001 000019B4 000000000000000000- <1>
  1001 000019BD 000000000000000000- <1>
  1001 000019C6 000000000000000000- <1>
  1001 000019CF 000000000000000000- <1>
  1001 000019D8 000000000000000000- <1>
  1001 000019E1 000000000000000000- <1>
  1001 000019EA 000000000000000000- <1>
  1001 000019F3 000000000000000000- <1>
  1001 000019FC 000000000000000000- <1>
  1001 00001A05 000000000000000000- <1>
  1001 00001A0E 000000000000000000- <1>
  1001 00001A17 000000000000000000- <1>
  1001 00001A20 000000000000000000- <1>
  1001 00001A29 000000000000000000- <1>
  1001 00001A32 000000000000000000- <1>
  1001 00001A3B 000000000000000000- <1>
  1001 00001A44 000000000000000000- <1>
  1001 00001A4D 000000000000000000- <1>
  1001 00001A56 000000000000000000- <1>
  1001 00001A5F 000000000000000000- <1>
  1001 00001A68 000000000000000000- <1>
  1001 00001A71 000000000000000000- <1>
  1001 00001A7A 000000000000000000- <1>
  1001 00001A83 000000000000000000- <1>
  1001 00001A8C 000000000000000000- <1>
  1001 00001A95 000000000000000000- <1>
  1001 00001A9E 000000000000000000- <1>
  1001 00001AA7 000000000000000000- <1>
  1001 00001AB0 000000000000000000- <1>
  1001 00001AB9 000000000000000000- <1>
  1001 00001AC2 000000000000        <1>
  1002                              <1> 
  1003                              <1> endptr equ $
    15                                  Segment dynamicDataArea nobits valign=1 vfollows=resSeg
    16                                  %include "dosDynaDataArea.asm"
    17                              <1> ;Create DPB chain of first 5 available DPB slots
    18 00000000 <res 36h>           <1> firstDPB        resb dpb_size
    19 00000036 <res 36h>           <1> secondDPB       resb dpb_size
    20 0000006C <res 36h>           <1> thirdDPB        resb dpb_size
    21 000000A2 <res 36h>           <1> fourthDPB       resb dpb_size
    22 000000D8 <res 36h>           <1> fifthDPB        resb dpb_size 
    23                              <1> 
    24                              <1> ;Create SFT header and corresponding array of five default sft entries
    25 0000010E <res Ah>            <1> firstSftHeader  resb sfth_size
    26 00000118 <res 3Dh>           <1> firstSft        resb sft_size
    27 00000155 <res 3Dh>           <1> secondSft       resb sft_size
    28 00000192 <res 3Dh>           <1> thirdSft        resb sft_size
    29 000001CF <res 3Dh>           <1> fourthSft       resb sft_size
    30 0000020C <res 3Dh>           <1> fifthSft        resb sft_size
    31                              <1> 
    32                              <1> ;Create a five drive CDS here so we can jettison it if config wants more
    33 00000249 <res 1C7h>          <1> initCDS         resb 5*cds_size 
    34                              <1> ;Always jettison this space
    35                              <1> DOSENDPTR:   ;Points to the end of the initially reserved DOS area
    36 00000410 <res 20h>           <1> tmpBufHdr       resb bufferHdr_size
    37 00000430 <res 200h>          <1> msdTempBuffer   resb 512    ;Reserve one sectors worth of space
    38                              <1> dynamicDataAreaLength equ $
